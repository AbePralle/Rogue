# To run this build file, install Rogue from github.com/AbePralle/Rogue and type "rogo" at the command line.

#$ ROGUEC_ARGS = --api
# #$ LIBRARIES   = openssl( header:openssl/ssl.h )

# Optional comment directives - remove leading '#' (leaving '#$') to activate.
# In most cases the same directive can be specified multiple times for a cumulative effect.
# #$ ROGUEC      = path/to/roguec
# #$ ROGUEC_ARGS = --whatever
# #$ CPP         = g++ -Wall -std=gnu++11 -fno-strict-aliasing -Wno-invalid-offsetof
# #$ CPP_ARGS    = -a -b -c
# #$ LIBRARIES   = libalpha( header:"name.h" library:"libname.a" )
# #$ LIBRARIES   = libbeta
# #$ LINK        = -lalpha -lbeta

routine rogo_default
  rogo_help
  #println File.listing("Source/RogueC/*.rogue")
endRoutine

routine rogo_clean
  System.run( "rm -rf .rogo" )
endRoutine

routine rogo_test
  local cmd = @|roguec Test.rogue --execute --debug --test --target="C++,Console"
  println "> " + cmd
  System.run( cmd )
endRoutine

routine rogo_version
  local build = 1
  local commit_id : String

  block
    local output = Process.run( "git rev-list --count HEAD" )
    if (output.success)
      build = output->String.trimmed->Int32
    endIf
  endBlock

  block
    forEach (line in LineReader(Process.run("git status --porcelain")->String))
      if (not line.begins_with("??"))
        ++build
        commit_id = "develop"
        escapeBlock
      endIf
    endForEach
  endBlock

  if (not commit_id)
    commit_id = Process.run( "git rev-parse --short HEAD" )->String.trimmed
  endIf

  local printer = PrintWriter( File("Source/RogueC/Version.rogue").writer )
  printer.println( "$define ROGUE_RELEASE_BUILD " + build )
  printer.println( "$define ROGUE_RELEASE_COMMIT_ID " + '"$"'(commit_id) )
  printer.println( "$define ROGUE_RELEASE_TIMESTAMP " + Process.run("git show -s --format=%ct HEAD") )
  printer.close

endRoutine

routine rogo_execute( cmd:String )
  print( "> " ).println( cmd )
  local error_code = System.run( cmd )
  if (error_code != 0)
    throw Error( ''ERROR: "$" failed (error code $).'' (cmd,error_code) )
  endIf
endRoutine


#------------------------------------------------------------------------------
# Internal Framework
#------------------------------------------------------------------------------
global ::method_prefix = ?:{ $moduleName.count:$moduleName "::" || "" } + "rogo_" : String

local args = @[]
args.add( forEach in System.command_line_arguments )

try
  if (args.count)
    run( args.remove_first, args )
  else
    rogo_default
  endIf
catch (err:Error)
  Console.error.println err
  System.exit 1
endTry

routine run( cmd:String, args:Value )
  local m = <<Global>>.find_method( method_prefix + cmd )
  if (m)
    if (m.parameter_count == 1 and args.count > 1)
      # Wrap all args in a ValueList.
      args = @[ args ]
    endIf
    m.call( Global, args )
  else
    rogo_help
  endIf
endRoutine

routine rogo_help
  println "USAGE"
  local lines = String[]
  forEach (m in <<Global>>.methods)
    if (m.name.begins_with(method_prefix))
      local line = "  rogo $" (m.name.after_first(method_prefix))
      line += " <$>" (m.parameter_name(forEach in 0..<m.parameter_count))
      lines.add( line )
    endIf
  endForEach
  lines.sort( (a,b)=>(a<b) )
  println (forEach in lines)
endRoutine

