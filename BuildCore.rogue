class Build [singleton]
  PROPERTIES
    ROGUEC_SRC         = Files( "Source", "RogueC/*.rogue" ).add( "Libraries/Standard/*" ) : Files
    ROGO_SRC           = Files( "Source", "Tools/Rogo/*.rogue" ).add( "Libraries/Standard/*" ) : Files
    ROGUEC_ROGUE_FLAGS = ""
    ROGUEC_CPP_FLAGS   = "-Wall -std=gnu++11 -fno-strict-aliasing -Wno-invalid-offsetof"
    BINDIR             = "/usr/local/bin"
    CXX                = "g++"
    SUDO_CMD           = ""
    OUTFLAG            = "-o "

    ROGO_EXE           = "path/to/rogo"
    ROGUEC_EXE         = "path/to/roguec"
    BUILD_EXE          = ".rogo/Build-Platform"

  METHODS
    method init
      which (System.os)
        case "macOS", "Linux"
          ROGO_EXE   = "Programs/RogueC/Rogo-$"   (System.os)
          ROGUEC_EXE = "Programs/RogueC/RogueC-$" (System.os)
          BUILD_EXE  = ".rogo/Build-$" (System.os)
          SUDO_CMD = "sudo "
          OUTFLAG  = "-o "
          forEach (line in LineReader(Process.run("make -p -f/dev/null")))
            if (line.begins_with("CXX ="))
              CXX = line.split("=").last.trimmed
              escapeForEach
            endIf
          endForEach

        case "Windows"
          ROGO_EXE   = "Programs\\RogueC\\rogo.exe"
          ROGUEC_EXE = "Programs\\RogueC\\roguec.exe"
          BUILD_EXE  = ".rogo\\Build.exe"
          CXX = "cl"
          ROGUEC_CPP_FLAGS = "/EHsc /nologo"
          OUTFLAG  = "/Fe"

      endWhich

      # Attempt to read override values from Local.mk
      if (File.exists("Local.mk"))
        local printed_header = false
        forEach (line in LineReader(File("Local.mk")))
          if (line.contains("="))
            local name  = line.before_first('=').trimmed
            local value = line.after_first('=').trimmed
            local p = type_info.find_property( name )
            if (p)
              if (not printed_header)
                printed_header = true
                println "Local.mk overrides:"
              endIf
              println "$ = $" (name,value)
              type_info.set_property( this, p, Value(value) )
            endIf
          endIf
        endForEach
      endIf

    method DEFAULT_CXX->String
      return "$ $" (CXX,ROGUEC_CPP_FLAGS)

    method rogue
      check_bootstrap

      if (ROGUEC_SRC.any_newer_than(ROGUEC_EXE))
        roguec
      endIf

      rogo

    method check_windows_path
      if (System.os == "Windows")
        local path = "$Programs\\RogueC" (System.executable_filepath.before_last( ".rogo" ))
        if (not System.environment//PATH.contains(path))
          println "-------------------------------------------------------------------------------"
          println "Add the following folder to your system PATH and restart this command prompt:"
          println
          println "  $" (path)
          println "-------------------------------------------------------------------------------"
          System.exit 1
        endIf
      endIf

    method roguec( details="":String, extra_roguec_flags="":String )
      check_bootstrap

      if (details.count) details = " $ " (details.trimmed)
      if (extra_roguec_flags.count) extra_roguec_flags = " " + extra_roguec_flags.trimmed

      println "-------------------------------------------------------------------------------"
      println "Recompiling RogueC$..." (details)
      println "-------------------------------------------------------------------------------"
      File.create_folder( "Source/RogueC/Build" )
      create_version_file
      run "cd Source/RogueC && roguec RogueC.rogue --gc=manual --main --output=$ $$"...
        (fix("Build/RogueC"),ROGUEC_ROGUE_FLAGS,extra_roguec_flags)
      run ''$ $ -DDEFAULT_CXX="\\\"$\\\"" $ $$''...
        (CXX,ROGUEC_CPP_FLAGS,DEFAULT_CXX,fix("Source/RogueC/Build/RogueC.cpp"),OUTFLAG,ROGUEC_EXE)
      if (File.exists("RogueC.obj")) File.delete( "RogueC.obj" )


    method rogo( &force )
      check_bootstrap
      if (force or ROGO_SRC.any_newer_than(ROGO_EXE))
        build_rogo
      endIf

    method build_rogo
      println "-------------------------------------------------------------------------------"
      println "Recompiling Rogo..."
      println "-------------------------------------------------------------------------------"
      File.create_folder( "Source/RogueC/Build" )
      local roguec_exe = "roguec"
      if (System.os == "Windows") roguec_exe = "Programs\\RogueC\\roguec"
      run "$ $ --gc=manual --main --output=$ $"...
      (roguec_exe,fix("Source/Tools/Rogo/Rogo.rogue"),fix("Source/RogueC/Build/Rogo"),ROGUEC_ROGUE_FLAGS)
      run ''$ $ $ $$''...
        (CXX,ROGUEC_CPP_FLAGS,fix("Source/RogueC/Build/Rogo.cpp"),OUTFLAG,ROGO_EXE)
      if (File.exists("Rogo.obj")) File.delete( "Rogo.obj" )

    check_rogo_launcher

    method create_version_file
      if (System.os == "Windows") return
      if (Process.run("git --version").exit_code != 0) return  # git not available

      local build = 1
      local commit_id : String

      block
        local output = Process.run( "git rev-list --count HEAD" )
        if (output.success)
          build = output->String.trimmed->Int32
        endIf
      endBlock

      block
        forEach (line in LineReader(Process.run("git status --porcelain")->String))
          if (not line.begins_with("??"))
            ++build
            commit_id = "develop"
            escapeBlock
          endIf
        endForEach
      endBlock

      if (not commit_id)
        commit_id = Process.run( "git rev-parse --short HEAD" )->String.trimmed
      endIf

      local printer = PrintWriter( File("Source/RogueC/Version.rogue").writer )
      printer.println( "$define ROGUE_RELEASE_BUILD " + build )
      printer.println( "$define ROGUE_RELEASE_COMMIT_ID " + '"$"'(commit_id) )
      printer.println( "$define ROGUE_RELEASE_TIMESTAMP " + Process.run("git show -s --format=%ct HEAD") )
      printer.close

    method bootstrap( &skip_build_executable )
      if (not skip_build_executable) build_build_executable
      if (System.os != "Windows") build_roguec_bootstrap
      unlink
      link

    method link
      build_rogo_launcher
      build_roguec_launcher

    method unlink
      delete_launchers

    method update_bootstrap( &roguec, &build )
      run "mkdir$ Source/RogueC/Bootstrap" (?:{System.os=="Windows":"" || " -p"})
      if (roguec)
        run "cp Source/RogueC/Build/RogueC.h Source/RogueC/Build/RogueC.cpp Source/RogueC/Bootstrap"
      endIf
      if (build)
        if (File.exists(".rogo/Build.h"))
          run "cp .rogo/Build.h .rogo/Build.cpp Source/RogueC/Bootstrap"
        endIf
      endIf

    method check_bootstrap
      check_roguec_bootstrap
      sync_libraries
      check_roguec_launcher
      check_rogo_bootstrap
      check_rogo_launcher
      check_windows_path

    method check_roguec_bootstrap
      if (not File.exists(ROGUEC_EXE)) build_roguec_bootstrap

    method check_rogo_bootstrap
      if (not File.exists(ROGO_EXE)) build_rogo

    method build_build_executable
      if (System.os == "Windows") return
      println "-------------------------------------------------------------------------------"
      println "Bootstrapping Rogo Build executable from C++ source..."
      println "-------------------------------------------------------------------------------"
      File.create_folder( ".rogo" )
      run "$ $ $ $$"...
        (CXX,ROGUEC_CPP_FLAGS,fix("Source/RogueC/Bootstrap/Build.cpp"),OUTFLAG,BUILD_EXE)
      if (File.exists("Build.obj")) File.delete( "Build.obj" )

    method build_roguec_bootstrap
      println "-------------------------------------------------------------------------------"
      println "Compiling RogueC from C++ bootstrap source..."
      println "-------------------------------------------------------------------------------"
      File.create_folder( File.folder(ROGUEC_EXE) )
      run ''$ $ -DDEFAULT_CXX="\\\"$\\\"" $ $$''...
        (CXX,ROGUEC_CPP_FLAGS,DEFAULT_CXX,fix("Source/RogueC/Bootstrap/RogueC.cpp"),OUTFLAG,ROGUEC_EXE)
      if (File.exists("RogueC.obj")) File.delete( "RogueC.obj" )
      if (System.os == "Windows")
        run "type nul >> Source\\RogueC\\RogueC.rogue"
      else
        run "touch Source/RogueC/RogueC.rogue"
      endIf

    method check_roguec_launcher
      if (System.os == "Windows") return
      if (not locate_launcher("roguec")) build_roguec_launcher

    method build_roguec_launcher
      if (System.os == "Windows") return
      println "-------------------------------------------------------------------------------"
      println "Creating $/roguec launcher linked to $" (BINDIR,ROGUEC_EXE)
      println "-------------------------------------------------------------------------------"
      create_bindir
      local folder = Process.run( "pwd" ).output_string.before_first('\n')
      local script = "#!/bin/sh\n"
      script += ''exec "$/$" "$@"\n'' (folder,ROGUEC_EXE,'$')
      File.save( ".rogo/launcher.script", script )
      run "$cp .rogo/launcher.script $/roguec" (SUDO_CMD,BINDIR)
      run "$chmod a+x $/roguec" (SUDO_CMD,BINDIR)
      File.delete( ".rogo/launcher.script" )

    method delete_launchers
      if (System.os == "Windows") return
      local roguec_launcher = locate_launcher( "roguec" )
      local rogo_launcher = locate_launcher( "rogo" )
      if (not roguec_launcher and not rogo_launcher) return
      println "-------------------------------------------------------------------------------"
      if (roguec_launcher and rogo_launcher)
        println "Deleting launchers $ and $..." (roguec_launcher,rogo_launcher)
      else
        print "Deleting launcher "
        if (roguec_launcher) print( roguec_launcher )
        if (rogo_launcher)   print( rogo_launcher )
        println
      endIf
      println "-------------------------------------------------------------------------------"
      if (roguec_launcher) run "$rm -f $" (SUDO_CMD,roguec_launcher)
      if (rogo_launcher)   run "$rm -f $" (SUDO_CMD,rogo_launcher)

    method check_rogo_launcher
      if (System.os == "Windows") return
      if (not locate_launcher("rogo")) build_rogo_launcher

    method build_rogo_launcher
      if (System.os == "Windows") return
      println "-------------------------------------------------------------------------------"
      println "Creating $/rogo launcher linked to $" (BINDIR,ROGO_EXE)
      println "-------------------------------------------------------------------------------"
      create_bindir
      local folder = Process.run( "pwd" ).output_string.before_first('\n')
      local script = "#!/bin/sh\n"
      script += ''exec "$/$" "$@"\n'' (folder,ROGO_EXE,'$')
      File.save( ".rogo/launcher.script", script )
      run "$cp .rogo/launcher.script $/rogo" (SUDO_CMD,BINDIR)
      run "$chmod a+x $/rogo" (SUDO_CMD,BINDIR)
      File.delete( ".rogo/launcher.script" )

    method create_bindir
      if (not File.exists(BINDIR))
        println "$ does not exist. Creating..." (BINDIR)
        if (not run( "mkdir$ $" (select{System.os=="Windows":"" || " -p"},BINDIR), &suppress_error ))
          if (SUDO_CMD != "")
            println "Error creating folder, trying again with 'sudo'"
            run( "$mkdir$ $" (SUDO_CMD,select{System.os=="Windows":"" || " -p"},BINDIR) )
          else
            throw Error( "Build error." )
          endIf
        endIf
        println "Created."
        println "*** If 'roguec' doesn't work you probably need to add '$' to the system PATH. ***"
      endIf

    method run( cmd:String, &silent, &suppress_error )->Logical
      forEach (line in LineReader(cmd))
        if (not silent) print( "> " ).println( line )
        local result = System.run( line )
        if (result != 0)
          if (suppress_error) return false
          else                throw Error( "Build error." )
        endIf
      endForEach
      return true

    method locate_launcher( name:String )->String
      # Returns valid path or null
      local result =  Process.run( "which $" (name), &inherit_environment ).output_string
      if (result.count) return result.trimmed
      else              return null

    method sync_libraries
      local dest = fix( "Programs/RogueC/" )
      local files = Files( "Source/Libraries" )
      files.add( "Standard" ).add( "ParseKit" )
      local n_copied = File.sync_from( files, dest+"Libraries/", &dry_run )
      if (n_copied >= 10)
        println "Copying $ -> $" (fix("Source/Libraries"),fix(dest+"Libraries"))
        File.sync_from( files, dest+"Libraries/", &verbose )
      else
        File.sync_from( files, dest+"Libraries/", &verbose )
      endIf

    method fix( filepath:String )->String
      return File.fix_slashes( filepath )

    method revert
      run "git checkout Source/RogueC/Bootstrap && rm -f $" (ROGUEC_EXE)
      sync_libraries
      build_roguec_bootstrap
      rogo( &force )

    method clean
      run @|rm -rf Source/RogueC/Build
      run @|rm -rf .rogo
      run @|rm -rf Programs/RogueC
      delete_launchers
endClass


#------------------------------------------------------------------------------
# Introspection-based Launcher Framework
#------------------------------------------------------------------------------
global ::prefix = ?:{ $moduleName.count:$moduleName "::" || "" } + "rogo_" : String

class CommandSyntax      : StringTable<<String>> [singleton];
class CommandDescription : StringTable<<String>> [singleton];

routine syntax( command:String, text:String )
  CommandSyntax[ command ] = text
endRoutine

routine description( command:String, text:String )
  CommandDescription[ command ] = text
endRoutine

routine help( command:String, description=null:String, syntax=null:String )
  if (description) Global.description( command, description )
  if (syntax)      Global.syntax( command, syntax )
endRoutine

local cmd = System.command_line_arguments.cloned
try
  if (cmd.count)
    local args = String[]
    while (cmd.count)
      if (dispatch(cmd,args)) System.exit
      args.insert( cmd.remove_last )
    endWhile
    println "ERROR: No such command '$'." (args.first)
    println
    rogo_help
  else
    rogo_default
  endIf
catch (err:Error)
  Console.error.println err
  System.exit 1
endTry

routine dispatch( cmd:String[], string_args:String[] )->Logical
  local m = <<Global>>.find_method( prefix + cmd.join("_") )
  if (not m) return false

  local args = @[]
  forEach (arg in string_args)
    which (arg)
      case "true":  args.add( true )
      case "false": args.add( false )
      case "null":  args.add( NullValue )
      others:       args.add( arg )
    endWhich
  endForEach
  if (m.parameter_count == 1 and args.count > 1) args = @[ args ] # Wrap args in a ValueList.
  m.call( Global, args )
  return true
endRoutine

routine rogo_help( command="":String )
  local args = System.command_line_arguments.cloned
  if (args.count) args.remove_first
  command = args.join( "_" )
  if (command.count)
    local syntax = get_syntax( command )
    local success = false
    if (syntax)
      println "SYNTAX"
      println "  " + syntax
      println
      success = true
    endIf
    local description = get_description( command )
    if (description)
      println "DESCRIPTION"
      forEach (line in LineReader(description.word_wrapped(76)))
        print( "  " ).println( line )
      endForEach
      println
      success = true
    endIf
    if (success)
      return
    else
      println "ERROR: No such command '$'." (command)
      println
    endIf
  endIf

  println "USAGE"
  local lines = String[]
  forEach (m in <<Global>>.methods)
    if (m.name.begins_with(prefix))
      lines.add( "  " + get_syntax(m.name.after_first(prefix)) )
    endIf
  endForEach
  lines.sort( (a,b)=>(a<b) )
  println (forEach in lines)
  println
endRoutine

routine get_syntax( m_name:String )->String
  if (CommandSyntax.contains(m_name))
    return "rogo " + CommandSyntax[ m_name ]
  else
    local m = <<Global>>.find_method( prefix + m_name )
    if (not m) return null
    local line = "rogo $" (m_name.replacing('_',' '))
    line += " <$>" (m.parameter_name(forEach in 0..<m.parameter_count))
    return line
  endIf
endRoutine

routine get_description( m_name:String )->String
  if (CommandDescription.contains(m_name))
    return CommandDescription[ m_name ]
  else
    return null
  endIf
endRoutine
