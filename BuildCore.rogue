class Build [singleton]
  PROPERTIES
    ROGUEC_SRC         = Files( "Source", "RogueC/*.rogue" ).add( "Libraries/Standard/*" ) : Files
    ROGO_SRC           = Files( "Source", "Tools/Rogo/*.rogue" ).add( "Libraries/Standard/*" ) : Files
    ROGUEC_ROGUE_FLAGS = ""
    ROGUEC_CPP_FLAGS   = "-Wall -std=gnu++11 -fno-strict-aliasing -Wno-invalid-offsetof"
    BINDIR             = "/usr/local/bin"
    CXX                = "c++"
    SUDO_CMD           = ""

    ROGO_EXE           = "path/to/rogo"
    ROGUEC_EXE         = "path/to/roguec"

  METHODS
    method init
      ROGO_EXE   = "Programs/RogueC/Rogo-$"   (System.os)
      ROGUEC_EXE = "Programs/RogueC/RogueC-$" (System.os)

      which (System.os)
        case "macOS", "Linux"
          SUDO_CMD = "sudo "
          forEach (line in LineReader(Process.run("make -p -f/dev/null")))
            if (line.begins_with("CXX ="))
              CXX = line.split("=").last.trimmed
              escapeForEach
            endIf
          endForEach
      endWhich

    method rogue
      check_bootstrap
      sync_libraries

      if (ROGUEC_SRC.any_newer_than(ROGUEC_EXE))
        roguec
      endIf

      rogo

    method roguec( details="":String, extra_roguec_flags="":String )
      check_bootstrap
      sync_libraries

      if (details.count) details = " $ " (details.trimmed)
      if (extra_roguec_flags.count) extra_roguec_flags = " " + extra_roguec_flags.trimmed

      println "-------------------------------------------------------------------------------"
      println "Recompiling RogueC$..." (details)
      println "-------------------------------------------------------------------------------"
      File.create_folder( "Source/RogueC/Build" )
      create_version_file
      run "cd Source/RogueC && roguec RogueC.rogue --gc=manual --main --output=Build/RogueC $$"...
          (ROGUEC_ROGUE_FLAGS,extra_roguec_flags)
      run ''$ $ -DDEFAULT_CXX="\\\"$ $\\\"" Source/RogueC/Build/RogueC.cpp -o $''...
          (CXX,ROGUEC_CPP_FLAGS,CXX,ROGUEC_CPP_FLAGS,ROGUEC_EXE)

      rogo


    method rogo( &force )
      check_bootstrap
      sync_libraries

      if (force or ROGO_SRC.any_newer_than(ROGO_EXE))
        println "-------------------------------------------------------------------------------"
        println "Recompiling Rogo..."
        println "-------------------------------------------------------------------------------"
        File.create_folder( "Source/RogueC/Build" )
        run "roguec Source/Tools/Rogo/Rogo.rogue --gc=manual --main --output=Source/RogueC/Build/Rogo $"...
            (ROGUEC_ROGUE_FLAGS)
        run ''$ -pthread $ Source/RogueC/Build/Rogo.cpp -o $''...
          (CXX,ROGUEC_CPP_FLAGS,ROGO_EXE)
      endIf

      check_rogo_launcher

    method create_version_file
      local build = 1
      local commit_id : String

      block
        local output = Process.run( "git rev-list --count HEAD" )
        if (output.success)
          build = output->String.trimmed->Int32
        endIf
      endBlock

      block
        forEach (line in LineReader(Process.run("git status --porcelain")->String))
          if (not line.begins_with("??"))
            ++build
            commit_id = "develop"
            escapeBlock
          endIf
        endForEach
      endBlock

      if (not commit_id)
        commit_id = Process.run( "git rev-parse --short HEAD" )->String.trimmed
      endIf

      local printer = PrintWriter( File("Source/RogueC/Version.rogue").writer )
      printer.println( "$define ROGUE_RELEASE_BUILD " + build )
      printer.println( "$define ROGUE_RELEASE_COMMIT_ID " + '"$"'(commit_id) )
      printer.println( "$define ROGUE_RELEASE_TIMESTAMP " + Process.run("git show -s --format=%ct HEAD") )
      printer.close

    method bootstrap
      build_roguec_bootstrap

    method update_bootstrap( &roguec, &build )
      run "mkdir -p Source/RogueC/Bootstrap"
      if (roguec)
        run "cp Source/RogueC/Build/RogueC.h Source/RogueC/Build/RogueC.cpp Source/RogueC/Bootstrap"
      endIf
      if (build)
        if (File.exists(".rogo/Build.h"))
          run "cp .rogo/Build.h .rogo/Build.cpp Source/RogueC/Bootstrap"
        endIf
      endIf

    method check_bootstrap
      check_roguec_bootstrap
      check_roguec_launcher

    method check_roguec_bootstrap
      if (not File.exists(ROGUEC_EXE)) build_roguec_bootstrap

    method build_roguec_bootstrap
      println "-------------------------------------------------------------------------------"
      println "Compiling $ from C++ bootstrap source..." (ROGUEC_EXE)
      println "-------------------------------------------------------------------------------"
      File.create_folder( File.folder(ROGUEC_EXE) )
      run ''$ $ -DDEFAULT_CXX="\\\"$ $\\\"" Source/RogueC/Bootstrap/RogueC.cpp -o $''...
          (CXX,ROGUEC_CPP_FLAGS,CXX,ROGUEC_CPP_FLAGS,ROGUEC_EXE)
      run "touch Source/RogueC/RogueC.rogue"

    method check_roguec_launcher
      if (not locate_launcher("roguec")) build_roguec_launcher

    method build_roguec_launcher
      println "-------------------------------------------------------------------------------"
      println "Creating $/roguec launcher linked to $" (BINDIR,ROGUEC_EXE)
      println "-------------------------------------------------------------------------------"
      local folder = Process.run( "pwd" ).output_string.before_first('\n')
      local script = "#!/bin/sh\n"
      script += ''exec "$/$" "$@"\n'' (folder,ROGUEC_EXE,'$')
      File.save( ".rogo/launcher.script", script )
      run "$cp .rogo/launcher.script $/roguec" (SUDO_CMD,BINDIR)
      run "$chmod a+x $/roguec" (SUDO_CMD,BINDIR)
      File.delete( ".rogo/launcher.script" )

    method delete_launchers
      local roguec_launcher = locate_launcher( "roguec" )
      local rogo_launcher = locate_launcher( "rogo" )
      if (not roguec_launcher and not rogo_launcher) return
      println "-------------------------------------------------------------------------------"
      if (roguec_launcher and rogo_launcher)
        println "Deleting launchers $ and $..." (roguec_launcher,rogo_launcher)
      else
        print "Deleting launcher "
        if (roguec_launcher) print( roguec_launcher )
        if (rogo_launcher)   print( rogo_launcher )
        println
      endIf
      println "-------------------------------------------------------------------------------"
      if (roguec_launcher) run "$rm -f $" (SUDO_CMD,roguec_launcher)
      if (rogo_launcher)   run "$rm -f $" (SUDO_CMD,rogo_launcher)

    method check_rogo_launcher
      if (not locate_launcher("rogo")) build_rogo_launcher

    method build_rogo_launcher
      println "-------------------------------------------------------------------------------"
      println "Creating $/rogo launcher linked to $" (BINDIR,ROGO_EXE)
      println "-------------------------------------------------------------------------------"
      local folder = Process.run( "pwd" ).output_string.before_first('\n')
      local script = "#!/bin/sh\n"
      script += ''exec "$/$" "$@"\n'' (folder,ROGO_EXE,'$')
      File.save( ".rogo/launcher.script", script )
      run "$cp .rogo/launcher.script $/rogo" (SUDO_CMD,BINDIR)
      run "$chmod a+x $/rogo" (SUDO_CMD,BINDIR)
      File.delete( ".rogo/launcher.script" )

    method run( cmd:String, &silent )
      if (not silent) print( "> " ).println( cmd )
      if (0 != System.run(cmd)) throw Error( "Build error." )

    method locate_launcher( name:String )->String
      # Returns valid path or null
      local result =  Process.run( "which $" (name), &inherit_environment ).output_string
      if (result.count) return result.trimmed
      else              return null

    method sync_libraries
      local dest = "Programs/RogueC/"
      local files = Files( "Source/Libraries" )
      files.add( "Standard" ).add( "ParseKit" )
      local n_copied = File.sync_from( files, dest+"Libraries/", &dry_run )
      if (n_copied >= 10)
        println "Copying Source/Libraries -> $Libraries" (dest)
        File.sync_from( files, dest+"Libraries/", &verbose )
      else
        File.sync_from( files, dest+"Libraries/", &verbose )
      endIf

    method revert
      run "git checkout Source/RogueC/Bootstrap && rm -f $" (ROGUEC_EXE)
      sync_libraries
      build_roguec_bootstrap
      rogo( &force )

    method clean
      run @|rm -rf Source/RogueC/Build
      run @|rm -rf .rogo
      run @|rm -rf Programs/RogueC
      delete_launchers
endClass

#------------------------------------------------------------------------------
# Introspection-based Launcher Framework
#------------------------------------------------------------------------------
global ::method_prefix = ?:{ $moduleName.count:$moduleName "::" || "" } + "rogo_" : String

local args = @[]
args.add( forEach in System.command_line_arguments )

try
  if (args.count)
    run( args.remove_first, args )
  else
    rogo_default
  endIf
catch (err:Error)
  Console.error.println err
  System.exit 1
endTry

routine run( cmd:String, args:Value )
  local m = <<Global>>.find_method( method_prefix + cmd )
  if (m)
    if (m.parameter_count == 1 and args.count > 1)
      # Wrap all args in a ValueList.
      args = @[ args ]
    endIf
    m.call( Global, args )
  else
    rogo_help
  endIf
endRoutine

routine rogo_help
  println "USAGE"
  local lines = String[]
  forEach (m in <<Global>>.methods)
    if (m.name.begins_with(method_prefix))
      local line = "  rogo $" (m.name.after_first(method_prefix))
      line += " <$>" (m.parameter_name(forEach in 0..<m.parameter_count))
      lines.add( line )
    endIf
  endForEach
  lines.sort( (a,b)=>(a<b) )
  println (forEach in lines)
endRoutine

