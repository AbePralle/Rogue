$[include "Graphics.bard"]

class EventType
  ENUMERATE
    update   # ()
    draw     # (window_id,display_width,display_height,clip_x,clip_y,clip_width,clip_height) - all Integer

    pointer_focus    # (window_id:Integer,gained:Integer)

    pointer_action   # ([movement=0|press=1|release=2],window_id:Integer,x:Real,y:Real,button_index:Integer)

    key_action
      # (action=[press/0,repeat/1,release/2],window_id,unicode,keycode,syscode):Integer[5]
endClass

class EventQueue [requisite singleton]
  PROPERTIES
    real_buffer      : Real[]
    character_buffer : Character[]

    real_pos      : Integer
    character_pos : Integer

    event_dispatchers : Delegate[]

  METHODS
    method init_defaults->this
      if (real_buffer?) return

      real_buffer      = Real[]
      character_buffer = Character[]

      event_dispatchers = Delegate[]

      set_event_dispatcher( EventType.update, delegate() TaskManager.update )
      set_event_dispatcher( EventType.draw,   delegate() EventQueue.discard_reals(7); Graphics.clear( 0xff000000 | (Random->Integer) ) )
      set_event_dispatcher( EventType.pointer_focus,  delegate() EventQueue.discard_reals(2) )
      set_event_dispatcher( EventType.pointer_action, delegate() EventQueue.discard_reals(4) )
      set_event_dispatcher( EventType.key_action, delegate() EventQueue.discard_reals(5) )

    method dispatch_events->Logical [requisite]
      # Return false to end program.
      while (real_pos < real_buffer.count)
        local type = read_integer
        if (type >= 0 and type < event_dispatchers.count)
          local dispatcher = event_dispatchers[ type ]
          if (dispatcher?) dispatcher.call
        endIf
      endWhile

      real_buffer.clear
      character_buffer.clear
      real_pos = 0
      character_pos = 0

      return TaskManager.tasks.count?

    method discard_reals( count:Integer )->this
      real_pos += count

    method discard_characters( count:Integer )->this
      character_pos += count

    method get_real_buffer( minimum_capacity:Integer )->Array<<Real>>   [requisite]
      real_buffer.ensure_capacity( minimum_capacity ).count = minimum_capacity
      return real_buffer.data

    method get_character_buffer( minimum_capacity:Integer )->Array<<Character>>   [requisite]
      character_buffer.ensure_capacity( minimum_capacity ).count = minimum_capacity
      return character_buffer.data

    method read_byte->Byte
      return read_character->Byte

    method read_character->Character
      if (character_pos >= character_buffer.count) return 0
      ++character_pos
      return character_buffer[ character_pos-1 ]

    method read_integer->Integer
      return read_real->Integer

    method read_real->Real
      if (real_pos >= real_buffer.count) return 0
      ++real_pos
      return real_buffer[ real_pos-1 ]

    method set_event_dispatcher( event_type:Integer, dispatcher:Delegate )
      init_defaults  # ensure initialization
      event_dispatchers.ensure_count( event_type+1 )
      event_dispatchers[ event_type ] = dispatcher

  INTERNAL METHODS
endClass


class Event
  PROPERTIES
    consumed : Logical

  METHODS
    method consume
      consumed = true
endClass

class DrawEvent : Event [singleton]
endClass

class KeyEvent : Event
  ENUMERATE
    keycode_escape      = 27
    keycode_left_arrow  = 37
    keycode_up_arrow    = 38
    keycode_right_arrow = 39
    keycode_down_arrow  = 40
    keycode_delete      = 46

  PROPERTIES
    unicode   : Character
    keycode   : Integer
    syscode   : Integer
    is_repeat : Logical

  METHODS
    method init( unicode, keycode, syscode=0, is_repeat=false )

    method is_press->Logical
      return false

    method is_press( ch:Character )->Logical
      return is_press and unicode == ch

    method is_press( code:Integer )->Logical
      return is_press and keycode == code

    method is_release->Logical
      return false

    method is_release( ch:Character )->Logical
      return is_release and unicode == ch

    method is_release( code:Integer )->Logical
      return is_release and keycode == code
endClass

class KeyPressEvent : KeyEvent
  METHODS
    method is_press->Logical
      return true
endClass

class KeyReleaseEvent : KeyEvent
  METHODS
    method is_release->Logical
      return true
endClass

class PointerFocusEvent : Event
  METHODS
    method focus_gained->Logical
      return false

    method focus_lost->Logical
      return false
endClass

class PointerFocusGainedEvent : PointerFocusEvent [singleton]
  METHODS
    method focus_gained->Logical
      return true
endClass

class PointerFocusLostEvent : PointerFocusEvent [singleton]
  METHODS
    method focus_lost->Logical
      return true
endClass

class PointerEvent : Event
  PROPERTIES
    position     : XY
    button_index : Integer

  METHODS
    method init( x:Real, y:Real, button_index=0 )
      position = XY(x,y)

    method init( position, button_index=0 )

    method clone->PointerEvent
      noAction

    method is_movement->Logical
      return false

    method is_press( index=-1:Integer )->Logical
      return false

    method is_release( index=-1:Integer )->Logical
      return false

    method set_position( @position )->this
endClass

class PointerMovementEvent : PointerEvent
  METHODS
    method clone->PointerEvent
      return PointerEvent( position, button_index )

    method is_movement->Logical
      return true
endClass

class PointerPressEvent : PointerEvent
  METHODS
    method clone->PointerEvent
      return PointerEvent( position, button_index )

    method is_press( index=-1:Integer )->Logical
      return (index == -1 or index == button_index)
endClass

class PointerReleaseEvent : PointerEvent
  METHODS
    method clone->PointerEvent
      return PointerEvent( position, button_index )

    method is_release( index=-1:Integer )->Logical
      return (index == -1 or index == button_index)
endClass

class UpdateEvent : Event [singleton]
endClass

