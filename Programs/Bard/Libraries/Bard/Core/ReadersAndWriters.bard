#==============================================================================
# IndexedData
#==============================================================================
aspect IndexedData<<$DataType>>
  METHODS
    method count->Integer

    method get( index:Integer )->$DataType
endAspect


#==============================================================================
# IndexedDataReader
#==============================================================================
class IndexedDataReader<<$DataType>> : Reader<<$DataType>>
  PROPERTIES
    data     : IndexedData<<$DataType>>
    position = 0
    count    : Integer 

  METHODS
    method init( data )
      count = data.count

    method close

    method has_another->Logical
      return (position < count)

    method peek->$DataType
      return data[position]

    method read->$DataType
      ++position
      return data[position-1]
endClass

#==============================================================================
# LineReader
#==============================================================================
class LineReader : Reader<<String>>
  PROPERTIES
    reader           : Reader<<Character>>
    buffer           = StringBuilder()
    next_line        : String
    has_another      : Logical
    line_number      : Integer  # of previous call to peek or read
    next_line_number : Integer  # during internal prep

  METHODS
    method init( readable:Readable<<Character>>, next_line_number=0 )
      init( readable.reader, next_line_number )
      
    method init( reader, next_line_number=0 )
      read_next_line

    method init( data:IndexedData<<Character>>, next_line_number=0 )
      init( IndexedDataReader<<Character>>(data), next_line_number )

    method init( data:String, next_line_number=0 )
      init( StringReader(data), next_line_number )

    method has_another->Logical
      return @has_another

    method peek->String
      if (next_line is null)
        next_line = buffer->String
        ++line_number
      endIf
      return next_line

    method read->String
      if (next_line is null)
        next_line = buffer->String
        ++line_number
      endIf
      local result = next_line
      read_next_line
      return result

    method read_next_line
      buffer.clear
      next_line = null
      @has_another = reader.has_another
      if (not @has_another) return

      if (next_line_number?)
        buffer.mark.print(next_line_number).align(5).print( "  " )
        ++next_line_number
      endIf

      forEach (ch in reader)
        if (ch == '\n') return
        buffer.print( ch )
      endForEach

endClass


#==============================================================================
# Readable
#==============================================================================
aspect Readable<<$DataType>>
  METHODS
    method reader->Reader<<$DataType>>
      throw Error("TODO")
endAspect


#==============================================================================
# Reader
#==============================================================================
aspect Reader<<$DataType>>
  METHODS
    method close

    method has_another->Logical

    task map( fn:Delegate($DataType)->$DataType )->$DataType
      forEach (map_n in this)
        yield fn.call( map_n )
      endForEach

    method peek->$DataType

    method read->$DataType

    method reduce( fn:Delegate($DataType,$DataType)->$DataType, initial_value:$DataType )->$DataType
      local reduce_result = initial_value
      forEach (reduce_n in this)
        reduce_result = fn.call( reduce_result, reduce_n )
      endForEach
      return reduce_result

    task select( fn:Delegate($DataType)->Logical )->$DataType
      forEach (select_n in this)
        if (fn.call(select_n)) yield select_n
      endForEach

    method to->$DataType[]
      local to_list_result = $DataType[]
      forEach (to_list_value in this) to_list_result.add( to_list_value )
      return to_list_result

endAspect

