class Runtime [requisite singleton]
  SETTINGS
    command_line_arguments = String[]

    uncaught_exception_handler =
      delegate(err:Exception)
        print "UNCAUGHT "
        println err
      endDelegate : Delegate(Exception)

  PROPERTIES
    #message_queue = DataBuffer()

  METHODS
    alias  arguments => this.command_line_arguments

    method add_command_line_argument( value:String ) [requisite]
      command_line_arguments.add( value )

    method describe( ip:Integer )->SourcePositionInfo [native]
      #return SourcePositionInfo( "TODO", "TODO", "Runtime.bard", 7 )

    method handle_uncaught_exception( err:Exception ) [requisite]
      if (uncaught_exception_handler?)
        uncaught_exception_handler.call( err )
      else
        println "Uncaught exception; no uncaught exception handler is defined in Runtime."
      endIf

    method exit( exit_code:Integer ) [native]

    method ip( stack_frame_offset:Integer )->Integer [native]
      # Pass 0 to get this IP of this method, 1 to get the IP of the method that
      # called this method, etc.
      #
      # Returns -1 if the given stack frame offset is out of bounds.

endClass

