class String [native functional]
  SETTINGS
    consolidation_table = Table<<String,String>>(128)

  METHODS
    method create [native]

    method create( bytes:Byte[] ) [native]

    method create( characters:Character[] ) [native]

    method consolidated->String
      local existing = consolidation_table[this]
      if (existing?) return existing

      local result = clone  # convert StringBuilder into String if need be
      consolidation_table[result] = result
      return result

    method after_first( ch:Character )->String
      local i = locate( ch )
      if (i == -1) return ""
      return substring( i+1 )

    method after_first( st:String )->String
      local i = locate( st )
      if (i == -1) return ""
      return substring( i+st.count )

    method after_last( ch:Character )->String
      local i = locate_last( ch )
      if (i == -1) return ""
      return substring( i+1 )

    method after_last( st:String )->String
      local i = locate_last( st )
      if (i == -1) return ""
      return substring( i+st.count )

    method before_first( ch:Character )->String
      local i = locate( ch )
      if (i == -1) return this
      return substring( 0, i-1 )

    method before_first( st:String )->String
      local i = locate( st )
      if (i == -1) return this
      return substring( 0, i-1 )

    method before_last( ch:Character )->String
      local i = locate_last( ch )
      if (i == -1) return ""
      return substring( 0, i-1 )

    method before_last( st:String )->String
      local i = locate_last( st )
      if (i == -1) return ""
      return substring( 0, i-1 )

    method begins_with( ch:Character )->Logical
      return (count? and this[0] == ch)

    method begins_with( other:String )->Logical
      local other_count = other.count
      return (count >= other_count and substring_equals(0,other))

    method begins_with_any_of( characters:String )->Logical
      if (count == 0) return false
      local ch = this[0]
      forEach (i of characters)
        if (ch == characters[i]) return true
      endForEach
      return false

    method compare_to( other:String )->Integer [native]
      #if (this is other) return 0

      #local limit = other.count
      #if (this.count < limit) limit = this.count

      #local i = 0
      #while (i < limit)
      #  local ch1 = this[i]
      #  local ch2 = other[i]
      #  if (ch1 != ch2)
      #    if (ch1 < ch2) return -1
      #    else           return  1
      #  endIf
      #  ++i
      #endWhile

      #if (this.count == other.count) return 0

      #if (this.count < other.count) return -1
      #return 1

    method clone->String
      return this  # base strings are immutable

    method contains( ch:Character )->Logical
      return (locate(ch) != -1)

    method contains( substr:String )->Logical
      return (locate(substr) != -1)

    method contains_any_of( characters:String )->Logical
      forEach (ch1 in characters)
        forEach (ch2 in this)
          if (ch1 == ch2) return true
        endForEach
      endForEach
      return false

    method count->Integer [native]

    method count( look_for:Character )->Integer
      local c = 0
      forEach (ch in this)
        if (ch == look_for) ++c
      endForEach
      return c

    method decode_utf8->String
      return decode_utf8( StringBuilder() )->String

    method decode_utf8( buffer:StringBuilder )->StringBuilder
      local i = 0
      local len = count
      while (i < len)
        local x = this[i]
        if (x <= 0x7f)
          # 0xxxxxxx
          buffer.print( x )
          ++i
        else
          local top_bits = (x & 0b11100000)
          if (top_bits == 0b11000000 and i+1 < len)
            # 110xxxxx 10yyyyyy
            local y = this[i+1]
            buffer.print( ((x&0b11111):<<:6 | (y&0b111111))->Character )
            i += 2
          elseIf (i+2 < len)
            # 1110xxxx 10yyyyyy 10zzzzzz
            local y = this[i+1]
            local z = this[i+2]
            buffer.print( ((x&0b1111):<<:12 | ((y&0b111111):<<:6) | (z&0b111111))->Character )
            i += 3
          else
            # Invalid UTF8; return what we have
            return buffer
          endIf
        endIf
      endWhile

      return buffer

    method encode_utf8->String
      return encode_utf8( StringBuilder() )->String

    method encode_utf8( buffer:StringBuilder )->StringBuilder
      buffer.ensure_capacity( buffer.count + count * 1.2 )

      forEach (ch in this)
        if (ch <= 0x7f)
          buffer.print( ch )
        elseIf (ch <= 0x7ff)
          local top_5    = (0b11000000 | ((ch:>>:6) & 0b11111)) -> Character
          local bottom_6 = (0b10000000 | (ch & 0b111111)) -> Character
          buffer.print( top_5 ).print( bottom_6 )
        else
          local top_4    = (0b11100000 | ((ch:>>:12) & 0b1111)) -> Character
          local mid_6    = (0b10000000 | ((ch:>>:6)  & 0b111111)) -> Character
          local bottom_6 = (0b10000000 | (ch & 0b111111)) -> Character
          buffer.print( top_4 ).print( mid_6 ).print( bottom_6 )
        endIf
      endForEach

      return buffer

    method equals( other:String )->Logical
      if (this is other) return true
      return compare_to(other) == 0

    method ends_with( ch:Character )->Logical
      local this_count = count
      return (this_count? and this[this_count-1] == ch)

    method ends_with( other:String )->Logical
      local this_count = count
      local other_count = other.count
      if (other_count > this_count) return false
      return substring_equals( this_count-other_count, other )

    method ends_with_any_of( characters:String )->Logical
      local this_count = count
      if (this_count == 0) return false
      local ch = this[this_count-1]
      forEach (i of characters)
        if (ch == characters[i]) return true
      endForEach
      return false

    method from_first( ch:Character )->String
      local i = locate( ch )
      if (i == -1) return ""
      return substring( i )

    method from_first( st:String )->String
      local i = locate( st )
      if (i == -1) return ""
      return substring( i )

    method from_last( ch:Character )->String
      local i = locate_last( ch )
      if (i == -1) return ""
      return substring( i )

    method from_last( st:String )->String
      local i = locate_last( st )
      if (i == -1) return ""
      return substring( i )

    method get( index:Integer )->Character [native]

    method hash_code->Integer [native]

    method leftmost( n:Integer )->String
      if (n >= 0) return substring( 0, n-1 )
      else        return substring( 0, (count + n) - 1 )

    method line_count->Integer
      local n = 1
      forEach (ch in this)
        if (ch == '\n') ++n
      endForEach
      return n

    method locate( ch:Character )->Integer
      return locate( ch, 0 )

    method locate( ch:Character, i1:Integer )->Integer
      local i = i1
      local len = count
      while (i < len)
        if (this[i] == ch) return i
        ++i
      endWhile
      return -1

    method locate( other:String )->Integer
      return locate( other, 0 )

    method locate( other:String, i1:Integer )->Integer
      local other_count = other.count
      if (other_count == 0) return -1
      if (other_count > count) return -1
      local i = i1
      local limit = (count - other_count) + 1
      local first_ch = other[0]
      while (i < limit)
        if (first_ch == this[i] and this.substring_equals(i,other)) return i
        ++i
      endWhile
      return -1

    method locate_last( ch:Character )->Integer
      return locate_last( ch, count-1 )

    method locate_last( ch:Character, starting_index:Integer )->Integer
      local i = starting_index
      while (i >= 0)
        if (this[i] == ch) return i
        --i
      endWhile
      return -1

    method locate_last( other:String )->Integer
      return locate_last( other, count-other.count )

    method locate_last( other:String, starting_index:Integer )->Integer
      local i = starting_index
      while (i >= 0)
        if (substring_equals(i,other)) return i
        --i
      endWhile
      return -1

    method matches_wildcard_pattern( wildcard_pattern:String )->Logical
      # Determines whether or not this string matches the given
      # Unix/Dos-style ''wildcard pattern''.  ''wildcard_pattern'' is a
      # regular text string that may contain the following special
      # characters:
      #
      # * * - matches zero or more characters of this string.
      # * ? - matches any one character of this string.
      #
      # Example:
      #
      #   local st = "img_01.png"
      #   println( st.matches_wildcard_pattern("*.png") )  # true
      #   println( st.matches_wildcard_pattern("img_??.png") )  # true
      return substring_matches_wildcard_pattern_from( 0, wildcard_pattern, 0 )

    method operator*( lhs:String, copies:Integer )->String
      if (lhs is null) lhs = "null"
      if (copies == 0) return ""
      if (copies == 1) return lhs

      local buffer = StringBuilder( lhs.count * copies )
      local i = copies
      while (i >= 1)
        buffer.print( lhs )
        --i
      endWhile

      return buffer->String

    method print( value:Integer )->String
      # Temporary kludge
      return StringBuilder(count+11).print(this).print(value)->String

    method print( value:Logical )->String
      # Temporary kludge
      return StringBuilder(count+5).print(this).print(value)->String

    method print( value:Real )->String
      # Temporary kludge
      return StringBuilder(count+11).print(this).print(value)->String

    method print( other:Object )->String
      # Temporary kludge
      if (other is null) return "null"
      else return print( other->String )

    method print( other:String )->String
      # Temporary kludge
      if (other is null) other = "null"
      return StringBuilder(count+other.count).print(this).print(other)->String

    method replace( old_ch:Character, new_ch:Character )->String
      contingent
        forEach (ch in this)
          sufficient (ch == old_ch)
        endForEach
        return this  # no changes necessary

      satisfied
        local replacement = StringBuilder( count )
        forEach (ch in this)
          if (ch == old_ch) replacement.print( new_ch )
          else              replacement.print( ch )
        endForEach
        return replacement->String
      endContingent

    method reversed->String
      local result = StringBuilder(count).print( this )
      result.reverse
      return result->String

    method rightmost( n:Integer )->String
      local this_count = count
      if (n < 0) return substring( -n, this_count-1 )
      else       return substring( this_count-n, this_count-1 )

    method split( separator:Character )->String[]
      local result = String[]

      local i1 = 0
      local i2 = locate( separator, i1 )
      while (i2 != -1)
        result.add( substring(i1,i2-1) )
        i1 = i2 + 1
        i2 = locate( separator, i1 )
      endWhile

      result.add( substring(i1) )

      return result

    method split( separator:String )->String[]
      local result = String[]
      local separator_count = separator.count

      local i1 = 0
      local i2 = locate( separator, i1 )
      while (i2 != -1)
        result.add( substring(i1,i2-1) )
        i1 = i2 + separator_count
        i2 = locate( separator, i1 )
      endWhile

      result.add( substring(i1) )

      return result

    method substring( i1:Integer )->String
      return substring( i1, count-1 )

    method substring( i1:Integer, i2:Integer )->String
      local this_count = count
      if (i1 < 0)    i1 = 0
      if (i2 >= this_count) i2 = this_count - 1
      if (i1 > i2) return ""

      if (i1 == 0 and i2 == this_count-1) return this

      local result = StringBuilder( (i2+1) - i1 )
      local i = i1
      while (i <= i2)
        result.print( this[i] )
        ++i
      endWhile

      return result->String

    method substring_equals( i1:Integer, other:String )->Logical
      local this_count = count
      local other_count = other.count

      if (i1 < 0)    i1 = 0
      if (i1 >= this_count) return (other_count == 0)

      local j = 0
      while (j < other_count)
        if (this[i1+j] != other[j]) return false
        ++j
      endWhile

      return true

    method substring_matches_wildcard_pattern_from( i1:Integer, wildcard_pattern:String, wcp_i1:Integer )->Logical
      local c = count - i1
      local wcp_count = (wildcard_pattern.count - wcp_i1)
      if (c == 0 and wcp_count == 0) return true
      if (wcp_count == 0) return false

      local ch = wildcard_pattern[wcp_i1]
      ++wcp_i1

      which (ch)
        case '*':
          forEach (n in 0..c)
            if (substring_matches_wildcard_pattern_from(i1+n,wildcard_pattern,wcp_i1)) return true
          endForEach

        case '?':
          if (c == 0) return false
          return (substring_matches_wildcard_pattern_from(i1+1,wildcard_pattern,wcp_i1))

        others:
          if (c == 0) return false
          if (ch == this[i1])
            return (substring_matches_wildcard_pattern_from(i1+1,wildcard_pattern,wcp_i1))
          endIf
      endWhich
      return false

    method to->String
      return this

    method parse_integer_as_real( i1:Integer, i2:Integer )->Real
      if (i1 < 0) i1 = 0
      if (i2 >= count) i2 = count - 1
      if (i1 > i2) return 0.0

      local result = 0.0
      forEach (i in i1..i2)
        local ch = this[i]
        if (ch.is_number) result = result * 10.0 + (ch - '0')
        else              escapeForEach
      endForEach

      return result

    method to->Integer
      local n = this->Real
      if (n >= 0) return n.floor->Integer
      return -((-n).floor->Integer)

    method to->Logical
      return this->Real != 0.0

    method to->Real
      local sign = 1.0
      local i1 = 0
      local i2 = count - 1

      if (i1 <= i2 and this[i1] == '-')
        sign = -1.0
        ++i1
      endIf

      local period = locate('.')
      if (period == -1)
        return sign * parse_integer_as_real( i1, i2 )
      else
        local whole = parse_integer_as_real( i1, period-1 )
        local decimal = parse_integer_as_real( period+1, i2 )
        while (decimal >= 1.0) decimal /= 10.0
        return sign * (whole + decimal)
      endIf

    method to_uppercase->String
      local found_lc = false
      forEach (ch in this)
        if (ch >= 'a' and ch <= 'z') found_lc = true; escapeForEach
      endForEach
      if (not found_lc) return this

      local result = StringBuilder(count)
      forEach (ch in this)
        if (ch >= 'a' and ch <= 'z') result.print( (ch+('A'-'a'))->Character )
        else                         result.print( ch )
      endForEach

      return result->String

    method to_lowercase->String
      local found_uc = false
      forEach (ch in this)
        if (ch >= 'A' and ch <= 'Z') found_uc = true; escapeForEach
      endForEach
      if (not found_uc) return this

      local result = StringBuilder(count)
      forEach (ch in this)
        if (ch >= 'A' and ch <= 'Z') result.print( (ch+('a'-'A'))->Character )
        else                         result.print( ch )
      endForEach

      return result->String

    method trim->String
      local i1 = 0
      local i2 = count - 1

      while (i1 <= i2 and this[i1] <= 32) ++i1
      while (i1 <= i2 and this[i2] <= 32) --i2

      if (i1 > i2) return ""
      if (i1 == 0 and i2 == count-1) return this
      return substring(i1,i2)

      #{
    method format( stack:DataStack )->String
      local output = StringBuilder()

      local curr_stack_index = 0
      local control          = '~'
      local align_right      = true
      local zero_fill        = false
      local fill_amount      = 0
      local decimal_places   = 4
      local num_buffer       = StringBuilder()
      local temp             = StringBuilder()
      forEach(c in this)
        if (c == '$')
          if (control == '\\')
            output.print( c )
            control = '~'
          else
            control = c
            nextIteration
          endIf
        elseIf (c == '(')
          if (control == '$')
            control = c
            nextIteration
          else
            output.print( c )
            nextIteration
          endIf
        elseIf (c == '-')
          if (control == '(')
            align_right = false
            # control = c
            nextIteration
          endIf
        elseIf (is_numeric( c ))
          if (c == '0' and (control == '(' or control == '-'))

            if(num_buffer.count == 0) zero_fill = true
            # control = c
            nextIteration
          else
            num_buffer.write(c)
            nextIteration
          endIf
        elseIf (c == '.')
          if (num_buffer.count?)
            fill_amount = num_buffer->Integer
            num_buffer.clear
          endIf
          control = c
          nextIteration
        else
          # println( control )
          if (control == '(' or control == '.')
            if (control == '.')
              if(num_buffer.count?)
                decimal_places = num_buffer->Integer
                num_buffer.clear
              endIf
            else
              if(num_buffer.count?)
                fill_amount = num_buffer->Integer
                num_buffer.clear
              endIf
            endIf

            temp.print( stack, curr_stack_index, decimal_places )
            local fill_count = fill_amount - temp.count

            if(fill_count < 0)
              forEach (ch in temp) output.write( ch )
            else
              local fill_char = ' '
              if (zero_fill) fill_char = '0'
              if(align_right) output.pad_with( fill_char, fill_count )
              forEach (ch in temp) output.write( ch )
              if(not align_right) output.pad_with( fill_char, fill_count )
            endIf

            align_right = false
            temp.clear
            ++curr_stack_index

            if (c == ')')
              control = '~'
              nextIteration
            endIf
          elseIf (control == '$')
            temp.print( stack, curr_stack_index, decimal_places )
            output.write( temp )
            ++curr_stack_index
            temp.clear
            # output.print( c )
          endIf

          output.print( c )

          control = '~'
          num_buffer.clear
          fill_amount = 0
          zero_fill = false
        endIf
      endForEach

      stack.pop_frame
      # output.println( format + "hahahahah" )
      return output->String
      }#

    method is_numeric( ch:Character )->Logical
      return (ch >= '0' and ch <= '9')

    method to->Byte[]
      local non_ascii_count = 0
      forEach (ch in this)
        if (ch > 127) ++non_ascii_count
      endForEach

      local result = Byte[]( count + non_ascii_count*2 )

      # TODO: handle encoding of non-ascii characters into UTF-8
      forEach (ch in this) result.add( ch->Byte )

      return result

    method to->Character[]
      local result = Character[]( count )
      forEach (ch in this) result.add( ch )
      return result

    method word_wrap( width:Integer )->String[]
      # Returns a word-wrapped version of this string as a list of lines.
      # Existing newlines characters will cause a new line to begin
      # immediately.  Spaces immediately following existing newline 
      # characters are preserved.
      return word_wrap( width, StringBuilder() )->String.split('\n')

    method word_wrap( width:Integer, buffer:StringBuilder )->StringBuilder
      # Prints a word-wrapped version of this string to the given
      # StringBuilder.  Existing newlines characters will cause a new line to 
      # begin immediately.  Spaces immediately following existing newline 
      # characters are preserved.
      local i1, i2 : Integer
      local len = count

      if (len == 0) return buffer

      local needs_newline = false
      while (i2 < len)

        # find last space or first \n
        while ((i2-i1) < width and i2 < len and this[i2] != '\n') i2++

        if ((i2-i1) == width)
          if (i2 >= len)
            i2 = len
          else
            while (this[i2]!=' ' and this[i2]!='\n' and i2>i1) i2--
            if (i2 == i1) i2 = i1 + width
          endIf
        endIf

        if (needs_newline) buffer.println
        forEach (i in i1..<i2) buffer.print( this[i] )
        needs_newline = true

        if (i2 == len)
          return buffer
        else
          which (this[i2])
            case ' ':
              while (i2<len and this[i2]==' ') i2++
              if (i2<len and this[i2]=='\n') i2++

            case '\n':
              i2++
          endWhich
          i1 = i2
        endIf
      endWhile

      return buffer

endClass

class StringReader : Reader<<Character>>
  PROPERTIES
    data  : String
    index : Integer
    count : Integer

  METHODS
    method init( data, index=0 )
      count = data.count

    method has_another->Logical
      return index < count

    method get( i:Integer )->Integer
      return data[i]

    method peek->Character
      return data[index]

    method read->Character
      ++index
      return data[index-1]
endClass

