class Task
  PROPERTIES
    finished     : Logical
    task_state   : Integer
    resume_time  : Real
    current_time : Real

  METHODS
    method finish->Task
      while (resume) noAction
      return stop

    method execute->Logical
      update
      return true

    method start->Task
      TaskManager.add( this )
      return this

    method resume->Logical
      local cur_time = Time.current
      if (cur_time < resume_time) return true
      Time.elapsed = cur_time - current_time
      current_time = cur_time
      return execute

    method update

    method stop->Task
      TaskManager.remove( this )
      return this
endClass


class TaskManager [requisite singleton]
  PROPERTIES
    tasks : Task[]
    
  METHODS
    method init_defaults
      if (tasks is null) tasks = Task[]

    method add( t:Task )
      init_defaults  # ensure tasks[] list is created
      tasks.add( t )

    method remove( t:Task )
      init_defaults  # ensure tasks[] list is created
      local i = 0
      while (i < tasks.count)
        if (tasks[i] is t)
          tasks[i] = null
          return
        endIf
        ++i
      endWhile

    method update [requisite]
      init_defaults  # ensure tasks[] list is created

      local i = 0
      while (i < tasks.count)
        local t = tasks[i]
        if (t? and t.resume)
          ++i
        else
          if (i+1 < tasks.count) tasks[i] = tasks.remove_last
          else                   tasks.remove_last
        endIf
      endWhile

endClass


class TaskStatus
  PROPERTIES
    finished  : Logical
    wait_time : Real
      # Start time if waiting.
      # Elapsed time if not waiting.

  METHODS
    method init( finished=false, wait_time=Time.current )

    alias  active => (not this.finished)

    method elapsed_seconds->Real
      if (finished) return wait_time
      else          return Time.current - wait_time

    alias  waiting => (not this.finished)
endClass

