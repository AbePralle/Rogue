#==============================================================================
# Game.bard
#==============================================================================

$[include "Action.bard"]
$[include "Geometry.bard"]
$[include "Scene.bard"]

class Game
  PROPERTIES
    actions         = Action[]
    pending_actions = Action[]

  METHODS
    method init
      trace

    method draw       [requisite]
      on_draw

    method on_update

    method on_draw

    method update( display_width:Integer, display_height:Integer )  [requisite]
      Display.adjust( display_width, display_height )

      on_update

      local elapsed_time = Time.elapsed
      pending_actions.add( actions )
      actions.clear
      forEach (action in actions)
        if (action.update(elapsed_time)) actions.add( action )
      endForEach
      pending_actions.clear

endClass

compound Color( argb:Integer )
  METHODS
    method create( r:Integer, g:Integer, b:Integer )
      return Color( 0xff000000 | r:<<:16 | g:<<:8 | b )

    method create( r:Integer, g:Integer, b:Integer, a:Integer )
      return Color( a:<<:24 | r:<<:16 | g:<<:16 | b:<<:8 )

    method alpha->Integer
      return argb:>>:24 & 0xff

    method blue->Integer
      return argb & 0xff

    method green->Integer
      return argb:>>:8 & 0xff

    method red->Integer
      return argb:>>:16 & 0xff
endCompound


#==============================================================================
# Display
#==============================================================================
class Display [singleton]
  PROPERTIES
    size             : Vector2
    background_color = Color(0,0,0)

  METHODS
    method adjust( width:Integer, height:Integer )
      size = Vector2( width, height )
      
    method clear( color:Color )
      clear( color.argb )

    method clear( color=0xff000000:Integer )
      trace color

    method height->Integer
      return size.y

    method width->Integer
      return size.x

endClass


#==============================================================================
# Image
#==============================================================================
class Image
  SETTINGS
    loader : ImageLoader

  PROPERTIES
    filepath : String
    texture  : Texture

    size     : Vector2
    scale    = Vector2(1,1)
    uv       : Box
    angle    : Radians

  METHODS
    method create( filepath:String )->Image
      if (loader is null) loader = ImageLoader()

      local existing = loader[ filepath ]
      if (existing?) return existing

      return loader.load( filepath, create_instance as Image )

    method draw( x:Real, y:Real )
      native_draw( texture.resource_id, x, y, size.x*scale.x, size.y*scale.y,
        uv.position.x, uv.position.x, uv.size.x, uv.size.y, angle.value )

    method native_draw( texture_id:Integer, x:Real, y:Real, width:Real, height:Real,
        u1:Real, v1:Real, uv_width:Real, uv_height:Real, radians:Real )

    method scale( new_value:Vector2 )
      @scale = new_value

    method scale( k:Real )
      @scale = Vector2( k, k )

endClass


#==============================================================================
# ImageLoader
#==============================================================================
class ImageLoader
  PROPERTIES
    images = Table<<String,Image>>()

  METHODS
    method get( filepath:String )->Image
      return images[ filepath ]

    method load( filepath:String, image:Image )->Image
      images[ filepath ] = image

      image.filepath = filepath

      local texture = Texture( filepath )
      image.texture = texture

      image.size  = texture.image_size
      image.scale = Vector2(1,1)
      image.uv = Box( 0, 0, texture.image_width/texture.texture_width, texture.image_height/texture.texture_height )

      return image
endClass


#==============================================================================
# Texture
#==============================================================================
class Texture
  SETTINGS
    loader : TextureLoader

  PROPERTIES
    resource_id : Integer
    filepath    : String

    image_width    : Integer
    image_height   : Integer
    texture_width  : Integer
    texture_height : Integer

  METHODS
    method create( filepath:String )->Texture
      if (loader is null) loader = TextureLoader()

      local existing = loader[ filepath ]
      if (existing?) return existing

      return loader.load( filepath, create_instance as Texture )

    method native_load( filepath:String )->Integer  [native]

    method set_size( image_width, image_height, texture_width, texture_height )  [requisite]
      # Called from the native layer

    method image_size->Vector2
      return Vector2( image_width, image_height )

    method texture_size->Vector2
      return Vector2( texture_width, texture_height )

endClass


#==============================================================================
# TextureLoader
#==============================================================================
class TextureLoader
  PROPERTIES
    textures = Table<<String,Texture>>()

  METHODS
    method get( filepath:String )->Texture
      return textures[ filepath ]

    method load( filepath:String, texture:Texture )->Texture
      texture.filepath = filepath

      while (filepath.count?)
        textures[ filepath ] = texture
        filepath = filepath.after_first( '/' )
      endWhile

      texture.resource_id = texture.native_load( texture.filepath )

      return texture
endClass

