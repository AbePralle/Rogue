class Color
  SETTINGS
    black   = 0xff000000
    white   = 0xffffffff
    red     = 0xffff0000
    orange  = 0xffff8000
    yellow  = 0xffffff00
    green   = 0xff00ff00
    blue    = 0xff0000ff
    cyan    = 0xff00ffff
    purple  = 0xffa020f0
    magenta = 0xffff00ff

  METHODS
    method brighten( color:Integer, fraction:Real )->Integer
      local hsv = rgb_to_hsv( color )

      local v = (hsv & 1023)
      v += 1024 * fraction
      if (v > 1023)  v = 1023
      elseIf (v < 0) v = 0

      local rgb = hsv_to_rgb( (hsv & !1023) | v )
      return (color & 0xff000000) | (rgb & 0x00ffffff)

    alias darken( color, fraction ) => this.brighten( color, -(fraction) )

    method hsv_to_rgb( hsv:Integer )->Integer
      # Creates a Color compound from the given HSV compound.
      local h = ((hsv:>>:20) & 1023) / 1023.0
      local s = ((hsv:>>:10) & 1023) / 1023.0
      local v = (hsv & 1023) / 1023.0
      local r, g, b : Real

      if (v == 0) return 0xff000000  # black

      if (s == 0)
        local gray = (v * 255)->Integer
        return 0xff000000 | (gray:<<:16) | (gray:<<:8) | gray
      endIf
      
      local h6 = (h % 1.0) * 6
      local i = h6->Integer
      local f = h6 - i
      
      local p = v * (1 - s)
      local q = v * (1 - s * f)
      local t = v * (1 - s * (1 - f))
      
      which (i)
        case 0
          r = v
          g = t
          b = p
        case 1
          r = q
          g = v
          b = p
        case 2
          r = p
          g = v
          b = t
        case 3
          r = p
          g = q
          b = v
        case 4
          r = t
          g = p
          b = v
        others
          r = v
          g = p
          b = q
      endWhich

      r *= 255
      g *= 255
      b *= 255

      return 0xff000000 | (r->Integer:<<:16) | (g->Integer:<<:8) | b->Integer

    method multiply( color:Integer, p:Real )->Integer
      local a = ((color:>>:24) & 255) * p : Integer
      local r = ((color:>>:16) & 255) * p : Integer
      local g = ((color:>>:8) & 255)  * p : Integer
      local b = (color & 255) * p : Integer
      if (a > 255) a = 255
      elseIf (a < 0) a = 0
      if (r > 255) r = 255
      elseIf (r < 0) r = 0
      if (g > 255) g = 255
      elseIf (g < 0) g = 0
      if (b > 255) b = 255
      elseIf (b < 0) b = 0
      return (a:<<:24) | (r:<<:16) | (g:<<:8) | b

    method rgb_to_hsv( argb:Integer )->Integer
      local r = ((argb:>>:16) & 255) / 255.0
      local g = ((argb:>>:8) & 255) / 255.0
      local b = (argb & 255) / 255.0

      local maxrgb = Math.max( r, g, b )
      local minrgb = Math.min( r, g, b )
      
      local hue, saturation : Real
      local value = maxrgb
      
      if (maxrgb != 0) saturation = (maxrgb - minrgb) / maxrgb  # SATURATION

      if (value != 0)
        # HUE (not valid if saturation == 0)
        local rgb_delta = maxrgb - minrgb
        local rc = (maxrgb - r) / rgb_delta
        local gc = (maxrgb - g) / rgb_delta
        local bc = (maxrgb - b) / rgb_delta
        
        if (r == maxrgb)     hue = ((bc - gc) / 6.0)
        elseIf (g == maxrgb) hue = ((rc - bc) / 6.0 + 2.0 / 6.0)
        else                 hue = ((gc - rc) / 6.0 + 4.0 / 6.0)
        
        if (value < 0) hue += 1
      endIf

      hue *= 1023
      saturation *= 1023
      value *= 1023
    
      return (hue->Integer:<<:20) | (saturation->Integer:<<:10) | value->Integer
endClass

class RealColor
  PROPERTIES
    alpha : Real
    red   : Real
    green : Real
    blue  : Real

  METHODS
    method init( red, green, blue, alpha=1.0 )

    method init( color:Integer )
      alpha = ((color :>>: 24) & 255) / 255.0
      red   = ((color :>>: 16) & 255) / 255.0
      green = ((color :>>:  8) & 255) / 255.0
      blue  = (color & 255) / 255.0

    method operator+( value:Real )->RealColor
      return RealColor( red+value, green+value, blue+value, alpha+value )

    method operator+( other:RealColor )->RealColor
      return RealColor( red+other.red, green+other.green, blue+other.blue, alpha+other.alpha )

    method operator*( value:Real )->RealColor
      return RealColor( red*value, green*value, blue*value, alpha*value )

    method operator*( other:RealColor )->RealColor
      return RealColor( red*other.red, green*other.green, blue*other.blue, alpha*other.alpha )

    method to->Integer
      if (alpha > 1.0) alpha = 1.0
      elseIf (alpha < 0) alpha = 0
      if (red > 1.0)   red = 1.0
      elseIf (red < 0)   red = 0
      if (green > 1.0) green = 1.0
      elseIf (green < 0) green = 0
      if (blue > 1.0)  blue = 1.0
      elseIf (blue < 0)  blue = 0

      return ((alpha*255)->Integer:<<:24) | ((red*255)->Integer:<<:16) | ((green*255)->Integer:<<:8) | (blue*255)->Integer
endClass

