class Font
  SETTINGS
    font_cache = Table<<String,Font>>()

  PROPERTIES
    name                   : String
    options                : Integer

    ready                  : Logical

    size                   : Real
    color= 0xffffffff
    render_mode            = RenderMode()
    alignment=Align.center : Integer
    integer_positioning    = true
    spacing_adjustment     = XY(0,0)

    scale_tolerance = 2.0

    current_character_group : FontCharacterGroup

    buffer = StringBuilder()

    #{
    style    : FontStyle

    id       : Integer

    color=-1 : Integer
    }#

  METHODS
    method create( name:String )->Font
      return create( name, FontOptions.precache_ascii )

    method create( name:String, options:Integer, mapping=null:String )->Font
      local existing = font_cache[name]
      if (existing?) return existing

      if (name.ends_with("png") or (options & FontOptions.font_strip)?)
        return BitmapFont( name, options )
      endIf

      return SystemFont( name, options )

    method aligned( alignment )->this

    method draw( text:String, position:XY, i1=0:Integer, i2=-1:Integer )->Box
      #if (text=="DON'T DO IT"
      return draw( buffer.clear.print(text), position, i1, i2 )

    method draw( text:StringBuilder, position:XY, i1=0:Integer, i2=-1:Integer )->Box
      if (i2 == -1) i2 = text.count - 1

      local text_size = measure( text, i1, i2 )

      local f = Align.factor(alignment)
      position -= (text_size * f).floor.yv

      local corner_pos = position - (text_size * f).floor.xv

      local xp = Align.xp[ alignment ]

      local max_w = 0
      local max_h = size
      local line_start = i1
      forEach (i in i1..i2)
        if (text[i] == '\n')
          if (i > line_start)
            local cur_w = measure(text,line_start,i-1).x
            local pos = position - XY( Math.floor(cur_w * xp), 0 )
            draw_text( text, pos, line_start, i-1 )
          endIf
          line_start = i + 1
          position += XY(0,size)
        endIf
      endForEach

      if (line_start <= i2)
        local cur_w = measure(text,line_start,text.count-1).x
        local pos = position - XY( Math.floor(cur_w * xp), 0 )
        draw_text( text, pos, line_start, i2 )
      endIf

      return Box(corner_pos,text_size)

    method draw( text:String, bounds:Box, i1=0:Integer, i2=-1:Integer )->Box
      return draw( buffer.clear.print(text), bounds, i1, i2 )

    method draw( text:StringBuilder, bounds:Box, i1=0:Integer, i2=-1:Integer )->Box
      if (i2 == -1) i2 = text.count - 1

      local xp = Align.xp[alignment]
      local position = Box(measure(text,i1,i2)).positioned_within(bounds,alignment).at( xp, 0 )

      local original_alignment = alignment

      if (xp == 0.0)     alignment = Align.top_left
      elseIf (xp == 1.0) alignment = Align.top_right
      else               alignment = Align.top

      local result = draw( text, position, i1, i2 )

      alignment = original_alignment
      return result

    method draw_text( text:String, position:XY, i1=0:Integer, i2=-1:Integer )
      draw_text( buffer.clear.print(text), position, i1, i2 )

    method draw_text( text:StringBuilder, position:XY, i1=0:Integer, i2=-1:Integer )
      if (not current_character_group) return
      if (i2 == -1) i2 = text.count - 1

      if (integer_positioning) position = position.floor

      current_character_group.draw_text( text, position, i1, i2 )

    method measure( ch:Character )->XY
      return measure( buffer.clear.print(ch) )

    method measure( text:String, i1=0:Integer, i2=-1:Integer )->XY
      return measure( buffer.clear.print(text), i1, i2 )

    method measure( text:StringBuilder, i1=0:Integer, i2=-1:Integer )->XY
      if (not current_character_group) return XY(0,0)
      return current_character_group.measure( text, i1, i2 )

    method prepare->Logical
      if (current_character_group is null) return false
      return current_character_group.prepare

    method ready->Logical
      return current_character_group?

    method set_defaults->this
      if (current_character_group?)
        size = current_character_group.height
        color= 0xffffffff
        render_mode = RenderMode()
      endIf

    method set_size( @size )

    method word_wrap( st:String, pixel_width:Integer )->String[]
      # Returns a word-wrapped version of the given string as a list of lines.
      # Existing newlines characters will cause a new line to begin
      # immediately. Spaces immediately following existing newline characters
      # are preserved.
      return word_wrap( st, pixel_width, StringBuilder() )->String.split('\n')

    method word_wrap( st:String, pixel_width:Integer, buffer:StringBuilder )->StringBuilder
      # Prints a word-wrapped version of the given string into the specified
      # StringBuilder. Existing newlines characters will cause a new line to
      # begin immediately. Spaces immediately following existing newline
      # characters are preserved.
      local i1, i2 : Integer
      local len = st.count
      local w = 0.0

      if (st == "" or pixel_width <= 0) return buffer

      local needs_newline = false
      local starting_i2 = i2
      while (i2 < len)
        starting_i2 = i2

        # find last space or first \n
        while (w <= pixel_width and i2 < len and st[i2] != '\n')
          local char_w = measure( st, i2, i2 ).x
          w += char_w
          i2++
        endWhile

        local initial_i2 = i2

        if (w > pixel_width)
          --i2
          while (st[i2]!=' ' and st[i2]!='\n' and i2>i1) i2--
          if (i2 == i1) i2 = initial_i2 - 1
        endIf

        if (needs_newline) buffer.println
        forEach (i in i1..<i2) buffer.print( st[i] )
        needs_newline = true
        w = 0

        if (i2 == len)
          return buffer
        else
          which (st[i2])
            case ' ':
              while (i2<len and st[i2]==' ') i2++
              if (i2<len and st[i2]=='\n') i2++

            case '\n':
              i2++
          endWhich
          i1 = i2
        endIf

        if (starting_i2 == i2) return buffer  # Kludge/error

      endWhile

      return buffer
endClass


class SystemFont : Font
  PROPERTIES
    id               : Integer
    character_groups = FontCharacterGroup[]

  METHODS
    method init( name, options )
      font_cache[name] = this
      id = Graphics.load_font( name )

    method set_size( new_size:Real )
      if (new_size == size) return

      @size = new_size

      contingent
        local pixel_height = size->Integer
        forEach (group in character_groups)
          if (group.height == pixel_height)
            current_character_group = group
            escapeContingent
          endIf
        endForEach

        current_character_group = SystemFontCharacterGroup( this, id, pixel_height )
        character_groups.add( current_character_group )
      endContingent
endClass


class BitmapFont : Font
  PROPERTIES

  METHODS
    method init( name, options )
      font_cache[name] = this

      local bmp = Bitmap( name )
      if (not bmp) return

      options |= FontOptions.font_strip
      @size = bmp.height

      current_character_group = BitmapFontCharacterGroup( this, bmp )
endClass


class FontOptions
  ENUMERATE
    precache_ascii        = 1
    font_strip = 2
endClass


class FontCharacterData
  PROPERTIES
    bitmap   : AlphaBitmap
    offset   : XY
    advance  : XY

  METHODS
    method init( bitmap, offset, advance ) [requisite]
endClass


class FontCharacterGroup
  PROPERTIES
    font       : Font

    height     : Integer
    characters = Table<<Character,FontCharacter>>()

    bitmap     : Bitmap
    image      : Image

    modified = true


  METHODS
      #method init( font, font_strip, mapping=null )
      #init( font, font_strip.height )

    method draw_text( text:StringBuilder, position:XY, i1:Integer, i2:Integer )
      if (i2 == -1) i2 = text.count - 1

      # Ensure all the character images are cached
      forEach (i in i1..i2) cache( text[i] )
      if (not prepare) return

      # Draw
      local color = font.color
      local scale = font.size / height
      forEach (i in i1..i2)
        local info = characters[text[i]]
        if (info?)
          local ch_image = info.image
          if (ch_image?)
            ch_image.render_mode = font.render_mode
            ch_image.draw( Box(position + info.offset,info.image.size*scale), color )
          endIf
          position += (info.advance + font.spacing_adjustment) * scale
        endIf
      endForEach

    method cache( ch:Character )->FontCharacter
      return characters[ch]  # this is the default for BitmapFCG which precaches all defined characters

    method measure( text:StringBuilder, i1:Integer, i2:Integer )->XY
      # Note: always returns font size for height
      local line_height = font.size

      if (i2 == -1) i2 = text.count

      local max_w = 0.0
      local h = line_height
      local i = i1
      while (i <= i2)
        if (text[i] == '\n')
          max_w = Math.max( max_w, measure_line_width(text,i1,i-1) )
          h += line_height
          i1 = i + 1
        endIf
        ++i
      endWhile

      max_w = Math.max( max_w, measure_line_width(text,i1,i2) )

      return XY(max_w,h)


    method measure_line_width( text:StringBuilder, i1:Integer, i2:Integer )->Real
      if (i1 > i2) return 0

      local sum = 0
      forEach (i in i1..i2)
        local info = cache(text[i])
        if (info?) sum += info.advance.x + font.spacing_adjustment.x
      endForEach
      return sum * (font.size/height)

    method prepare->Logical
      if (not modified) return true

      if (image?)         image.set( bitmap )
      elseIf (not bitmap) return false
      else                image = Image( bitmap )

      if ((image as TexturedImage).texture.id == 0)
        # Texture load failed - try again later
        return false
      endIf

      modified = false

      forEach (ch in characters)
        if (ch.bounds.size.y?)
          if (ch.image?) ch.image.set( image, ch.bounds )
          else           ch.image = Image( image, ch.bounds )
        endIf
      endForEach

      return true

endClass


class SystemFontCharacterGroup : FontCharacterGroup
  PROPERTIES
    modified = true

    font_id : Integer

    cursor_x = 1
    cursor_y = 1

    baseline : Integer

    remaining_space_x = 1022

  METHODS
    method init( font, font_id, height )
      bitmap = Bitmap( 1024, height+2, 0x00ffffff )

      if (not (font.options & FontOptions.font_strip)?)
        if ((font.options & FontOptions.precache_ascii)?)
          forEach (ch in 32..126) cache(ch)
        else
          cache( '@' )
          cache( 'M' )
          cache( 'y' )
          cache( '|' )
        endIf
      endIf

    method cache( ch:Character )->FontCharacter
      local info = characters[ch]
      if (info?) return info

      local ch_data = Graphics.render_font_character( font_id, ch, height )

      if (ch_data.bitmap?)
        modified = true

        if (ch_data.bitmap.width > remaining_space_x)
          bitmap.add_rows( height + 2, 0x00ffffff )
          remaining_space_x = 1022
          cursor_x = 1
          cursor_y += height + 2
        endIf

        info = FontCharacter( Box(cursor_x,cursor_y,ch_data.bitmap.size), ch_data.offset, ch_data.advance )
        ch_data.bitmap->Bitmap.blit( bitmap, cursor_x, cursor_y )

        local space_x = ch_data.bitmap.width + 2
        cursor_x += space_x
        remaining_space_x -= space_x

        # Adjust each character's offset so that all characters draw at or below the specified drawing position.
        # Characters: @My| are always precached for their bounds in the hopes of preventing vertical pixel shifts
        # as new characters are introduced after a font size is already in use.
        info.offset += XY(0,baseline)

        if (info.offset.y < 0)
          local delta = -info.offset.y
          baseline += delta
          info.offset = info.offset.xv
          forEach (key in characters.keys)
            local existing_info = characters[key]
            existing_info.offset += XY(0,delta)
          endForEach
        endIf

      else
        # No bitmap so just grab the spacing info
        info = FontCharacter( Box(0,0,0,0), ch_data.offset, ch_data.advance )
      endIf

      characters[ch] = info
      return info
endClass


class BitmapFontCharacterGroup : FontCharacterGroup
  METHODS
    method init( font, font_strip:Bitmap )
      height = font_strip.height
      bitmap = Bitmap( 1024, height+2, 0x00ffffff )

      local cursor_x = 1
      local cursor_y = 1

      local remaining_space_x = 1022

      forEach (ch in 32..126)
        #if (mapping?)
        #  local index = mapping.locate(ch)
        #  if (index == -1) return result

        #  local w = font_strip.width / mapping.count
        #  local x = index * w

        #  result.advance = XY( w, 0 )
        #  result.bitmap32 = Bitmap( font_strip, Box(x,0,w,bitmap.height) )
        #  return result

        #else
        local w = font_strip.width / 95
        local index = ch - 32
        local x = index * w

        local ch_bitmap = Bitmap( font_strip, Box(x,0,w,font_strip.height) )
        if (ch_bitmap.width > remaining_space_x)
          bitmap.add_rows( height + 2, 0x00ffffff )
          remaining_space_x = 1022
          cursor_x = 1
          cursor_y += height + 2
        endIf

        local info = FontCharacter( Box(cursor_x,cursor_y,ch_bitmap.size), XY(0,0), XY(w,0) )
        ch_bitmap.blit( bitmap, cursor_x, cursor_y )
        characters[ch] = info

        local space_x = ch_bitmap.width + 2
        cursor_x += space_x
        remaining_space_x -= space_x
      endForEach

      if (prepare)
        # BitmapFont can discard the source bitmap after the image has been successfully created
        bitmap = null
      endIf
endClass


class FontCharacter
  PROPERTIES
    image   : Image

    offset  : XY
    advance : XY
    bounds  : Box  # in bitmap
    
  METHODS
    method init( bounds, offset, advance )

    method width->Real
      return Math.max( offset.x + bounds.size.x, advance.x )
endClass


class DebugFont : BitmapFont [singleton]
  PROPERTIES
    integer_positioning = true

  METHODS
    method init
      init( "font_console_17.png", FontOptions.precache_ascii )
endClass

