#=====================================================================
# BigInteger.bard
#
# Bard Core Library
# $(BARD_VERSION) $(DATE)
#
# Big Integer support.  Allows math operations between integers of 
# any size.
#
# Primary classes:
#   BigInteger
#
# Example:
#   println( "A 128-bit computer supports integer values between "
#       "$ and $" (-(BigInteger(2)^127),BigInteger(2)^127-1) )
# 
# --------------------------------------------------------------------
#
# Copyright 2010 Plasmaworks LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
#   http://www.apache.org/licenses/LICENSE-2.0 
#
# Unless required by applicable law or agreed to in writing, 
# software distributed under the License is distributed on an 
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
# either express or implied. See the License for the specific 
# language governing permissions and limitations under the License.
#
#=====================================================================

#{
class BigInteger
  # Allows integers of any size to be represented and manipulated.
  # BigInteger operations are significantly slower than operations on
  # primitive integer type so BigInteger objects should only be
  # used when you require integers with more than 32 bits.
  #
  # BigInteger objects are immutable; operations produce new BigInteger
  # objects as side effects instead of altering operands.
  #
  # BigInteger numbers are modeled using sign-magnitude; they are not
  # 2's complement and the sign cannot be directly changed through 
  # a bitwise operation (only incidentally, as when a negative
  # number is AND'd with zero to produce a zero result).
  #
  # BigInteger values are stored as a series of unsigned 16-bit
  # Character values.  Their total bit size (in multiples of 16) is only 
  # what's necessary to represent a number's magnitude.
  #
  # Similar to Java's BigInteger class.
  #
  # Examples:
  #   println( BigInteger(123456) ^ BigInteger("1000101",2) )
  #   println( "2^100 = $" (BigInteger(2) ^ 100) )
  SETTINGS
    last_modulo : BigInteger
    values      = BigInteger[]
    zero        = BigInteger(0)
    one         = BigInteger(1)
    ten         = BigInteger(10)
    ten_e144    = BigInteger(10)^144 : BigInteger
    ten_e72     = BigInteger(10)^72  : BigInteger
    ten_e36     = BigInteger(10)^36  : BigInteger
    ten_e18     = BigInteger(10)^18  : BigInteger

  PROPERTIES
    data        : Character[]
    sign_flag=1 : Integer

  METHODS
    method init_defaults
      if (values.count == 0)
        local n = 0
        while (n <= 15)
          values.add( BigInteger(n) )
          ++n
        endWhile
      endForEach

  METHODS
    method create( n:Integer )->BigInteger
      # Creates a BigInteger object out of an Integer value.  If
      # 'n' is 0..15 then a pre-defined BigInteger object will
      # be returned; otherwise a new BigInteger object will be
      # created.
      if (n >= 0 and n < values.count) return values[n]
      return BigInteger(n)


    method init( Int64 value )
      if (value == Integer(value)) 
        init( Integer(value) )
      else
        data = ArrayList<<Character>>(4)
        if (value < 0)
          sign_flag = -1
          value = (!value) + 1
        endIf
        data.add( Character(value) )
        value = value.right_shifted(16)
        while (value != 0)
          data.add( Character(value) )
          value = value.right_shifted(16)
        endWhile
      endIf

    method init( Integer value )
      if (value >= 0 and value < 16 and (values.count > value))
        data = values[value].data
      else
        data = ArrayList<<Character>>(2)
        if (value < 0)
          sign_flag = -1
          value = (!value) + 1
        endIf
        data.add( Character(value) )
        value = value.right_shifted(16)
        while (value != 0)
          data.add( Character(value) )
          value = value.right_shifted(16)
        endWhile
      endIf

    method init( String value, Integer base=10 )
      # Initializes this BigInteger to a value specified as a string
      # of digits in a given base.  'base' can be 2, 10, or 16.
      if (value[0] == '-')
        sign_flag = -1
        value = value.substring(1)
      endIf

      which (base)
        case 2:
          if (value.count & 15 != 0)
            local StringBuilder buffer(value)
            buffer.reverse
            while (buffer.count & 15 != 0) buffer.add('0')
            buffer.reverse
            value = buffer.to_String
          endIf

          data = ArrayList<<Character>>(value.count/16)
          forEach (index in 0..<value.count step 16)
            data.add( NumberConversions.parse_Int32(value.substring(index,index+15),2) )
          endForEach
          data.reverse

        case 16:
          if (value.count & 3 != 0)
            local StringBuilder buffer(value)
            buffer.reverse
            while (buffer.count & 3 != 0) buffer.add('0')
            buffer.reverse
            value = buffer.to_String
          endIf
          data = ArrayList<<Character>>(value.count/4)
          forEach (index in 0..<value.count step 4)
            data.add( NumberConversions.parse_Int32(value.substring(index,index+3),16) )
          endForEach
          data.reverse

        case 10:
          local BigInteger work(0)
          forEach (ch in value)
            work = work * ten
            if (ch >= '0' and ch <= '9') work = work + values[ch-'0']
            else throw InvalidOperandError( "value", "$" (value) )
          endForEach
          data = work.data

        others:  
          throw InvalidOperandError( "base", "$" (base) )
      endWhich

    method init( BigInteger other )
      data = duplicate( other.data )
      sign_flag = other.sign_flag

    private method init
      sign_flag = 1

    method left_shifted( Integer bits ).BigInteger
      if (bits == 0) return this

      local BigInteger work(this)
      local var work_data = work.data
      while (bits >= 16)
        work_data.insert(0)
        bits -= 16
      endWhile

      if (bits == 0) return work

      local Integer excess_bits = 16 - bits
      local Integer carry = 0
      forEach (index of work_data)
        carry |= work_data[index]
        carry = carry.left_rotated(bits)
        work_data[index] = carry
        carry = carry.left_rotated(excess_bits)
        carry &= 0xffff0000
      endForEach
      carry = carry.left_rotated(bits)
      local Character c = carry
      if (c?) work_data.add( carry )

      return work

    method right_shifted( Integer bits ).BigInteger
      if (bits == 0) return this

      local BigInteger work(this)
      local var work_data = work.data
      while (bits >= 16)
        work_data.remove_first
        if (work_data.count == 0)
          work_data.add(0)
          return work
        endIf
        bits -= 16
      endWhile
      if (bits == 0) return work

      local Integer excess_bits = 16 - bits
      local Integer carry = 0
      forEach (index in work_data.reverse_indices)
        carry |= work_data[index]
        carry = carry.right_rotated(bits)
        work_data[index] = carry
        carry = carry.right_rotated(excess_bits)
        carry &= 0xffff0000
      endForEach
      return work.normalized

    private method normalized.BigInteger
      # Removes excess zero values on the most signficant end
      # and changes a negative zero to a positive zero.
      while (data.count > 1 and data.last == 0) data.remove_last
      if (data.count == 1 and data.first == 0) sign_flag = 1
      return this

    method to_String( Integer base ).String
      which (base)
        case 10:   return to_String
        case 2,16:
          local StringBuilder buffer()
          if (is_negative) buffer.print('-')
          forEach (u16 in data.reverse_order)
            buffer.print( u16.to_String(base) )
          endForEach
          return buffer.to_String

        others:  throw InvalidOperandError( "base", "$" (base) )
      endWhich

    method to_String.String
      if (data.count == 1) return "$" (sign_flag * Integer(data.first))

      if (sign_flag == -1)
        sign_flag = 1
        local var result = to_String
        sign_flag = -1
        return "-" + result
      endIf

      # Values less than 1 * 10^18 can be converted to an Int64
      # and then into a string.
      local var work = abs(this)
      if (work < ten_e18)
        return to_Int64.to_String
      endIf

      # divide and conquer values larger than 1 * 10^144
      if (work > ten_e144)
        work /= ten_e144
        local var rhs = last_modulo.to_String
        return "$()$(0144)" (work,rhs)
      endIf

      # divide and conquer values larger than 1 * 10^72
      if (work > ten_e72)
        work /= ten_e72
        local var rhs = last_modulo.to_String
        return "$()$(072)" (work,rhs)
      endIf

      # divide and conquer values larger than 1 * 10^36
      if (work > ten_e36)
        work /= ten_e36
        local var rhs = last_modulo.to_String
        return "$()$(036)" (work,rhs)
      endIf

      # divide and conquer values larger than 1 * 10^18
      local String result = ""
      while (not work.is_zero)
        work /= ten_e18
        if (work.is_zero) result = "$()$" (last_modulo,result)
        else result = "$(018)$" (last_modulo,result)
      endWhile
      if (sign_flag == -1) result = "-$" (result)

      return result

    private method internal_to_Int64.Int64
      local Int64 result = 0
      forEach (u16 in data.reverse_order)
        result = result.left_shifted(16) | u16
      endForEach

      if (sign_flag == -1) result = -result

      return result

    method is_valid_Int32.Logical
      contingent
        necessary (data.count <= 2)
        local Integer result = internal_to_Int64
        necessary ((sign_flag==-1 and result<0) or (sign_flag==1 and result>=0))

      satisfied
        return true

      unsatisfied
        return false

      endContingent

    method is_valid_Int64.Logical
      contingent
        necessary (data.count <= 4)
        local Int64 result = internal_to_Int64
        necessary ((sign_flag==-1 and result<0) or (sign_flag==1 and result>=0))

      satisfied
        return true

      unsatisfied
        return false

      endContingent

    method to_Int32.Integer
      contingent
        necessary (data.count <= 2)
        local Integer result = internal_to_Int64
        necessary ((sign_flag==-1 and result<0) or (sign_flag==1 and result>=0))
        return result

      unsatisfied
      throw OutOfBoundsError( "BigInteger value out of Integer bounds." )

      endContingent

    method to_Int64.Int64
      contingent
        necessary (data.count <= 4)
        local Int64 result = internal_to_Int64
        necessary ((sign_flag==-1 and result<0) or (sign_flag==1 and result>=0))
        return result

      unsatisfied
        throw OutOfBoundsError( "BigInteger value out of Int64 bounds." )

      endContingent

    method sign.Integer
      # Returns -1, 0, or 1.
      if (is_zero) return 0
      return sign_flag

    method is_negative.Logical
      return (sign_flag == -1)

    method is_zero.Logical
      if (data.count > 1) return false
      return (data.first == 0)

    method op==( Object other ).Logical
      if (other notInstanceOf BigInteger) return false
      return this.op==( other.(BigInteger) )

    method op==( BigInteger other ).Logical
      if (sign_flag != other.sign_flag) return false
      forEach (index of data)
        if (data[index] != other.data[index]) return false
      endForEach
      return true

    method op<>( Object other ).Integer
      return op<>( other.(BigInteger) )

    method op<>( BigInteger other ).Integer
      if (is_zero)
        if (other.is_zero) return eq
        elseIf (other.is_negative) return gt
        else return lt

      elseIf (other.is_zero)
        if (is_negative) return lt
        return gt

      elseIf (is_negative)
        if (other.is_negative)
          # both negative; smaller magnitude is larger number
          local var other_data = other.data
          if (data.count < other_data.count) return gt
          if (data.count > other_data.count) return lt

          forEach (index in data.reverse_indices)
            local var e1 = data[index]
            local var e2 = other_data[index]
            if (e1 > e2) return lt
            elseIf (e1 < e2) return gt
          endForEach

          return eq
        else
          return lt
        endIf

      else
        # 'this' is positive
        if (other.is_negative)
          return gt
        else
          # both positive; larger magnitude is larger number
          local var other_data = other.data
          if (data.count < other_data.count) return lt
          if (data.count > other_data.count) return gt

          forEach (index in data.reverse_indices)
            local var e1 = data[index]
            local var e2 = other_data[index]
            if (e1 > e2) return gt
            elseIf (e1 < e2) return lt
          endForEach

          return eq
        endIf
        
      endIf

    method op-.BigInteger
      local BigInteger result()
      result.data = data
      result.sign_flag = -sign_flag
      return result.normalized

    method op+( BigInteger n ).BigInteger
      if (this.is_negative == n.is_negative)
        # both negative or both positive - add magnitudes & leave sign_flag
        local BigInteger work(this)
        local var dest = work.data
        local var src = n.data

        local Integer carry = 0
        local Integer index = 0

        while (dest.count < src.count) dest.add(0)

        forEach (1..src.count)
          carry += src[index]
          carry += dest[index]
          dest[index] = carry
          carry = carry.right_shifted(16)
          index++
        endForEach

        forEach (index..<dest.count)
          if (carry == 0) escapeForEach
          carry += dest[index]
          dest[index] = carry
          carry = carry.right_shifted(16)
          index++
        endForEach

        if (carry?) dest.add( carry )
          
        return work

      else
        if (is_negative)
          # This is negative, other is positive
          return n - (-this)
        else
          # This is positive, other is negative
          return (this - (-n))
        endIf
      endIf

    method op-( BigInteger n ).BigInteger
      if (n.is_negative)
        return this + (-n)

      elseIf (is_negative)
        return -((-this) + n)

      else
        # both positive
        if (this < n)
          return (-(n - this))
        else
          # this is >= n
          local BigInteger work(this)
          local var index = 0
          local var borrow = false
          local var dest = work.data
          local var src = n.data
          forEach (1..src.count)
            local Integer diff = dest[index]
            if (borrow) diff--
            diff -= src[index]
            if (diff < 0) borrow = true; diff += 65536
            else borrow = false
            dest[index] = diff
            index++
          endForEach

          while (borrow)
            local Integer diff = dest[index]
            diff--
            if (diff < 0) borrow = true; diff += 65536
            else borrow = false
            dest[index] = diff
            index++
          endWhile

          return work.normalized
        endIf

      endIf

    method op*( BigInteger n ).BigInteger
      if (this < n) return (n * this)

      local BigInteger result = zero
      local BigInteger factor(this)
      local BigInteger control(n)

      factor.sign_flag = 1
      control.sign_flag = 1

      while (not control.is_zero)
        if ((control.data.first & 1) == 1)
          result += factor
        endIf
        factor = factor.left_shifted(1)
        control = control.right_shifted(1)
      endWhile

      result.sign_flag = sign_flag * n.sign_flag
      return result.normalized

    method op/( BigInteger n ).BigInteger
      if (n.is_zero) throw DivideByZeroError()

      local BigInteger result = zero
      local BigInteger remaining(this)
      local Integer  factor = 0
      local BigInteger divisor(n)
      remaining.sign_flag = 1
      divisor.sign_flag = 1

      while (divisor < remaining)
        factor++
        divisor = divisor.left_shifted(1)
      endWhile

      while (factor >= 0)
        if (divisor <= remaining) 
          result += BigInteger(1).left_shifted(factor)
          remaining -= divisor
        endIf
        divisor = divisor.right_shifted(1)
        factor--
      endWhile

      remaining.sign_flag = sign_flag
      if ((remaining.sign_flag==1) ~ (n.sign_flag==1)) remaining += n
      last_modulo = remaining.normalized

      result.sign_flag = sign_flag * n.sign_flag
      return result.normalized

    method op%( BigInteger n ).BigInteger
      this / n
      return last_modulo

    method op^( BigInteger n ).BigInteger
      if (n.is_negative) throw InvalidOperandError( "n", "$"(n) )
      if (n.is_zero) return one
      if (n == one) return this

      if (is_odd(n)) 
        return this * (this ^ (n - one))
      endIf

      local BigInteger half_power = this ^ (n.right_shifted(1))
      return half_power * half_power

    method op&( BigInteger n ).BigInteger
      if (n.data.count > this.data.count) return (n & this)

      local BigInteger work(this)
      forEach (index of n.data) work.data[index] &= n.data[index]
      return work.normalized

    method op|( BigInteger n ).BigInteger
      if (n.data.count > this.data.count) return (n | this)

      local BigInteger work(this)
      forEach (index of n.data) work.data[index] |= n.data[index]
      return work

    method op~( BigInteger n ).BigInteger
      if (n.data.count > this.data.count) return (n ~ this)

      local BigInteger work(this)
      forEach (index of n.data) work.data[index] ~= n.data[index]
      return work.normalized

    method op==( Int64 n ).Logical
      return this == create_from(n)

    method op<>( Int64 n ).Integer
      return this.op<>( create_from(n) )

    method op+( Int64 n ).BigInteger
      return this + create_from(n)

    method op-( Int64 n ).BigInteger
      return this - create_from(n)

    method op*( Int64 n ).BigInteger
      return this * create_from(n)

    method op/( Int64 n ).BigInteger
      return this / create_from(n)

    method op%( Int64 n ).BigInteger
      return this % create_from(n)

    method op^( Int64 n ).BigInteger
      return this ^ create_from(n)

    method op&( Int64 n ).BigInteger
      return this & create_from(n)

    method op|( Int64 n ).BigInteger
      return this | create_from(n)

    method op~( Int64 n ).BigInteger
      return this ~ create_from(n)

endClass

augment Global
  METHODS
    method abs( BigInteger n ).BigInteger
      if (n.is_negative) return -n
      return n

    method is_odd( BigInteger n ).Logical
      return (n.data.first & 1) != 0

    method is_even( BigInteger n ).Logical
      return (n.data.first & 1) == 0
endAugment

}#
