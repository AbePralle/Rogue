#==============================================================================
# Box
#==============================================================================
compound Box( position:XY, size:XY )
  SETTINGS
    #render_mode = RenderMode( RenderMode.option_blend, RenderMode.blend_src_alpha, RenderMode.blend_inverse_src_alpha )
    render_mode = RenderMode( 0 )

  METHODS
    method create->Box
      return Box( XY(0,0),XY(0,0) )

    method create( x:Real, y:Real, w:Real, h:Real )->Box
      return Box( XY(x,y),XY(w,h) )

    method create( x:Real, y:Real, size:XY )->Box
      return Box( XY(x,y), size )

    method create( w:Real, h:Real )->Box
      return Box( XY(0,0),XY(w,h) )

    method create( _size:XY )
      return Box( XY(0,0), _size )


    method at( u:Real, v:Real )->XY
      return XY( position.x + size.x*u, position.y + size.y*v )

    method at( uv:XY )->XY
      return position + (size * uv)

    method bottom_left->XY
      return position + size.yv

    method bottom_right->XY
      return position + size

    method center->XY
      return XY( position.x+size.x/2, position.y+size.y/2 )

    method centered_at( cx:Real, cy:Real )->Box
      return Box( cx - size.x/2, cy - size.y/2, size )

    method centered_at( point:XY )->Box
      return Box( point.x - size.x/2, point.y - size.y/2, size )

    method centered_within( x:Real, y:Real, w:Real, h:Real )->Box
      return positioned_within( x, y, w, h, Align.center )

    method centered_within( bounds:Box )->Box
      return positioned_within( bounds, Align.center )

    method constrained_within( bounds:Box )->Box
      local shift_x = 0.0
      local shift_y = 0.0

      local excess = bounds.position.x - position.x
      if (excess > 0) shift_x += excess
      excess = bottom_right.x - bounds.bottom_right.x
      if (excess > 0) shift_x -= excess

      excess = bounds.position.y - position.y
      if (excess > 0) shift_y += excess
      excess = bottom_right.y - bounds.bottom_right.y
      if (excess > 0) shift_y -= excess

      return Box( position + XY(shift_x,shift_y), size )

    method enclosing( point:XY )->Box
      local x = point.x
      local y = point.y
      local x1 = position.x
      local y1 = position.y
      local x2 = x1 + size.x
      local y2 = y1 + size.y
      if (x < x1) x1 = x
      if (y < y1) y1 = y
      if (x > x2) x2 = x
      if (y > y2) y2 = y
      return Box( XY(x1,y1), XY(x2-x1,y2-y1) )

    method contains( v:XY )->Logical
      return (v.x >= position.x and v.x < position.x+size.x and v.y >= position.y and v.y < position.y + size.y)

    method contains( _x:Real, _y:Real )->Logical
      return (_x >= position.x and _x < position.x+size.x and _y >= position.y and _y < position.y + size.y)

    method cropped( delta:Real )->Box
      return cropped( delta, delta, delta, delta )

    method cropped( delta_left:Real, delta_top:Real, delta_right:Real, delta_bottom:Real )->Box
      return expanded( -delta_left, -delta_top, -delta_right, -delta_bottom )->Box

    method draw( color:Integer )
      Graphics.set_render_mode( render_mode.value )
      Graphics.draw_box( position.x, position.y, size.x, size.y, color )

    method draw_sides( sides:Integer, color:Integer )
      which (sides)
        case Sides.none
          return

        case Sides.all
          draw( color )

        others
          local x1 = position.x
          local y1 = position.y
          local x2 = x1 + (size.x - 1)
          local y2 = y1 + (size.y - 1)
          if ((sides & Sides.top)?)    Line( x1, y1, x2, y1 ).draw( color )
          if ((sides & Sides.bottom)?) Line( x1, y2, x2, y2 ).draw( color )
          if ((sides & Sides.left)?)   Line( x1, y1, x1, y2 ).draw( color )
          if ((sides & Sides.right)?)  Line( x2, y1, x2, y2 ).draw( color )
      endWhich

    method expanded( delta:Real )->Box
      return expanded( delta, delta, delta, delta )

    method expanded( delta_left:Real, delta_top:Real, delta_right:Real, delta_bottom:Real )->Box
      local new_w = size.x + delta_left + delta_right
      local new_h = size.y + delta_top + delta_bottom
      if (new_w < 0 or new_h < 0) new_w = 0; new_h = 0

      return Box( 
        position.x - delta_left,
        position.y - delta_top,
        new_w,
        new_h
      )

    method fill( color:Integer )
      Graphics.set_render_mode( render_mode.value )
      Graphics.fill_box( position.x, position.y, size.x, size.y, color )

    method floor->Box
      return Box( position.floor, size.floor )

    alias  height => this.size.y

    method operator+( offset:XY )->Box
      return Box( position + offset, size )

    method operator-( offset:XY )->Box
      return Box( position - offset, size )

    method operator*( scale:Real )->Box
      local new_size = size * scale
      return Box( center-(new_size/2), new_size )

    method operator&( rhs:Box )->Box
      local a_x1 = position.x
      local a_y1 = position.y
      local a_x2 = a_x1 + size.x
      local a_y2 = a_y1 + size.y

      local b_x1 = rhs.position.x
      local b_y1 = rhs.position.y
      local b_x2 = b_x1 + rhs.size.x
      local b_y2 = b_y1 + rhs.size.y

      if (a_x1 < b_x1) a_x1 = b_x1
      if (a_y1 < b_y1) a_y1 = b_y1
      if (a_x2 > b_x2) a_x2 = b_x2
      if (a_y2 > b_y2) a_y2 = b_y2

      if (a_x1 >= a_x2 or a_y1 >= a_y2) return Box(XY(0,0),XY(0,0))

      return Box( a_x1, a_y1, a_x2-a_x1, a_y2-a_y1 )

    method operator|( rhs:Box )->Box
      # Returns union of this box with another box.
      local a_x1 = position.x
      local a_y1 = position.y
      local a_x2 = position.x + size.x
      local a_y2 = position.y + size.y
      if (a_x2 == a_x1 or a_y2 == a_y1) return rhs

      local b_x1 = rhs.position.x
      local b_y1 = rhs.position.y
      local b_x2 = rhs.position.x + rhs.size.x
      local b_y2 = rhs.position.y + rhs.size.y
      if (b_x2 == b_x1 or b_y2 == b_y1) return this

      if (b_x1 < a_x1) a_x1 = b_x1
      if (b_y1 < a_y1) a_y1 = b_y1
      if (b_x2 > a_x2) a_x2 = b_x2
      if (b_y2 > a_y2) a_y2 = b_y2

      return Box( a_x1, a_y1, a_x2-a_x1, a_y2-a_y1 )

    method positioned_within( container:Box, align:Integer )->Box
      return positioned_within( container.position.x, container.position.y, container.size.x, container.size.y, align )

    method positioned_within( parent_x:Real, parent_y:Real, parent_w:Real, parent_h:Real, align:Integer )->Box
      local excess_x = parent_w - size.x
      local excess_y = parent_h - size.y
      return Box( parent_x + excess_x * Align.xp[align], parent_y + excess_y * Align.yp[align], size )

    method rotated( angle:Degrees )->Corners<<XY>>
      return rotated( angle->Radians )

    method rotated( angle:Radians )->Corners<<XY>>
      local c = center
      local b = centered_at( XY(0,0) )
      return Corners<<XY>>( b.top_left.rotated(angle)+c, b.top_right.rotated(angle)+c,
        b.bottom_right.rotated(angle)+c, b.bottom_left.rotated(angle)+c )

    method section( section_index:Integer, columns:Integer, rows=1:Integer )->Box
      # Subdivides these bounds into the given number of 'columns' and 'rows' and
      # returns a new Box compound containing the subdivision at the given index,
      # in reading order - 'section_index' ranges from 0..(columns*rows) with 0 
      # being the top-left section, (columns-1) being the top-right section, and 
      # (columns*rows-1) being the bottom-right section.
      local section_w = size.x / columns
      local section_h = size.y / rows
      local count = columns * rows
      local row_index = (section_index / columns)->Integer
      local column_index = (section_index % columns)
      return Box( column_index*section_w, row_index*section_h, section_w, section_h )

    method to->Corners<<XY>>
      return Corners<<XY>>(this)

    method to->String
      return "[$,$ $x$]" (position.x,position.y,size.x,size.y)

    alias top_left => this.position

    method top_right->XY
      return position + size.xv

    alias width => this.size.x

    method with_anchor( anchor:XY )->Box
      return Box( position - size*anchor, size )

    alias  with_position( x, y ) => this.with_position( XY(x,y) )

    method with_position( new_position:XY )->Box
      return Box( new_position, size )

    alias  with_size( x, y ) => this.with_size( XY(x,y) )

    method with_size( new_size:XY )->Box
      return Box( position, new_size )
endCompound

