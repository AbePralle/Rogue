class ListOps<<$DataType>>
  METHODS
    method apply( list:$DataType[], fn:Delegate($DataType) )
      forEach (value in list) fn.call( value )

    method discard( list:$DataType[], fn:Delegate($DataType)->Logical )->Integer
      local write_pos = 0
      forEach (value in list)
        if (not fn.call(value))
          list[write_pos] = value
          ++write_pos
        endIf
      endForEach

      local discard_count = list.count - write_pos
      list.discard_from( write_pos )
      return discard_count

    method find( list:$DataType[], fn:Delegate($DataType)->Logical )->$DataType
      forEach (value in list)
        if (fn.call(value)) return value
      endForEach
      return null

    task map( list:$DataType[], fn:Delegate($DataType)->$DataType )->$DataType
      forEach (item in list)
        yield fn.call(item)
      endForEach

    method reduce( list:$DataType[], fn:Delegate($DataType,$DataType)->$DataType, initial_value:$DataType )->$DataType
      local result = initial_value
      forEach (n in list)
        result = fn.call( result, n )
      endForEach
      return result

    task select( list:$DataType[], fn:Delegate($DataType)->Logical )->$DataType
      forEach (item in list)
        if (fn.call(item)) yield item
      endForEach

endClass


class TableOps<<$KeyType,$ValueType>>
  METHODS
    method set_keys( table:Table<<$KeyType,$ValueType>>, key_list:$KeyType[], value_fn:Delegate($KeyType)->$ValueType )
      forEach (key in key_list) table[ key ] = value_fn.call(key)

    method set_values( table:Table<<$KeyType,$ValueType>>, value_list:$ValueType[], key_fn:Delegate($ValueType)->$KeyType )
      forEach (value in value_list) table[ key_fn.call(value) ] = value

endClass

