compound Corners<<$DataType>>( a:$DataType, b:$DataType, c:$DataType, d:$DataType )
  METHODS
    method create( default_value:$DataType )->Corners<<$DataType>>
      return Corners<<$DataType>>( default_value, default_value, default_value, default_value )

    method to->String
      return "[$,$,$,$]" (a,b,c,d)
endCompound

augment Corners<<XY>>
  METHODS
    method create(ax:Real,ay:Real,bx:Real,by:Real,cx:Real,cy:Real,dx:Real,dy:Real)->Corners<<XY>>
      return Corners<<XY>>( XY(ax,ay), XY(bx,by), XY(cx,cy), XY(dx,dy) )

    method create( box:Box )->Corners<<XY>>
      local pos = box.position
      local size = box.size
      return Corners<<XY>>( pos, pos+size.xv, pos+size, pos+size.yv )

    method bounds->Box
      local x1 = a.x
      if (b.x < x1) x1 = b.x
      if (c.x < x1) x1 = c.x
      if (d.x < x1) x1 = d.x
      local x2 = a.x
      if (b.x > x2) x2 = b.x
      if (c.x > x2) x2 = c.x
      if (d.x > x2) x2 = d.x
      local y1 = a.y
      if (b.y < y1) y1 = b.y
      if (c.y < y1) y1 = c.y
      if (d.y < y1) y1 = d.y
      local y2 = a.y
      if (b.y > y2) y2 = b.y
      if (c.y > y2) y2 = c.y
      if (d.y > y2) y2 = d.y
      return Box( x1, y1, x2-x1, y2-y1 )

    method fill( color:Integer )
      Graphics.set_render_mode( Box.render_mode )
      Graphics.fill_triangle( a.x, a.y, color, b.x, b.y, color, c.x, c.y, color )
      Graphics.fill_triangle( a.x, a.y, color, c.x, c.y, color, d.x, d.y, color )

    #method rotated( angle:Degrees )->Corners<<XY>>
      #TODO

endAugment

