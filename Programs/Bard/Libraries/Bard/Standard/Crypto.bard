class Crypto [singleton]
  METHODS
    method sha_1( message:String )->String
      return SHA1.encode( message )
endClass

class SHA1
  METHODS
    method encode( message:String )->String
      return encode( message, StringBuilder.clear )->String

    method encode( message:String, buffer:StringBuilder )->StringBuilder
      # From:
      # http://www.webtoolkit.info/javascript-sha1.html#.UufucPbTl0I
      message = message.encode_utf8

      local W = Integer[](80,0)
      local H0 = 0x67452301
      local H1 = 0xEFCDAB89
      local H2 = 0x98BADCFE
      local H3 = 0x10325476
      local H4 = 0xC3D2E1F0
      local A, B, C, D, E : Integer
      local message_count = message.count
      local words = Integer[]

      local i = 0
      local i2 = message_count - 4
      while (i <= i2)
        words.add( message[i]:<<:24 | message[i+1]:<<:16 | message[i+2]:<<:8 | message[i+3] )
        i += 4
      endWhile

      local last_word : Integer
      which (message_count & 3)
        case 0: last_word = 0x80000000
        case 1: last_word = message[message_count-1]:<<:24 | 0x800000
        case 2: last_word = message[message_count-2]:<<:24 | message[message_count-1]:<<:16 | 0x8000
        case 3: last_word = message[message_count-3]:<<:24 | message[message_count-2]:<<:16 | message[message_count-1]:<<:8 | 0x80
      endWhich
      words.add( last_word )

      while( (words.count & 15) < 14 ) words.add( 0 )
      words.add( message_count :>>: 29 )
      words.add( message_count :<<: 3 )

      local block_start = 0
      while (block_start < words.count)
        forEach (i in 0..15)  W[i] = words[block_start+i]

        forEach (i in 16..79) W[i] = (W[i-3] ~ W[i-8] ~ W[i-14] ~ W[i-16]).left_rotated( 1 )

        A = H0
        B = H1
        C = H2
        D = H3
        E = H4

        forEach (i in 0..19)
          local temp = (A.left_rotated(5) + ((B&C) | (!B&D)) + E + W[i] + 0x5A827999)
          E = D
          D = C
          C = B.left_rotated(30)
          B = A
          A = temp
        endForEach

        forEach (i in 20..39)
          local temp = (A.left_rotated(5) + (B ~ C ~ D) + E + W[i] + 0x6ED9EBA1)
          E = D
          D = C
          C = B.left_rotated(30)
          B = A
          A = temp
        endForEach

        forEach (i in 40..59)
          local temp = (A.left_rotated(5) + ((B&C) | (B&D) | (C&D)) + E + W[i] + 0x8F1BBCDC)
          E = D
          D = C
          C = B.left_rotated(30)
          B = A
          A = temp
        endForEach

        forEach (i in 60..79)
          local temp = (A.left_rotated(5) + (B ~ C ~ D) + E + W[i] + 0xCA62C1D6)
          E = D
          D = C
          C = B.left_rotated(30)
          B = A
          A = temp
        endForEach

        H0 += A
        H1 += B
        H2 += C
        H3 += D
        H4 += E

        block_start += 16
      endWhile

      H0.print_hex(buffer,8)
      H1.print_hex(buffer,8)
      H2.print_hex(buffer,8)
      H3.print_hex(buffer,8)
      H4.print_hex(buffer,8)
      return buffer

endClass
