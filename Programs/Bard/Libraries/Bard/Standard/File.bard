#==============================================================================
# File
#==============================================================================
class File : Readable<<Character>>
  PROPERTIES
    filepath : String

  METHODS
    method init( filepath )
      if (filepath.count > 1 and (filepath.ends_with('/') or filepath.ends_with('\\')))
        filepath = filepath.leftmost(-1)
      endIf

    method init( base_path:String, relative_filepath:String )
      if (base_path.count==0 or base_path.ends_with_any_of("/\\"))
        init( base_path + relative_filepath )
      else
        init( base_path + "/" + relative_filepath )
      endIf

    method init( path_elements:String[] )
      local buffer = StringBuilder()
      forEach (element in path_elements)
        if (buffer.count? and not buffer.ends_with_any_of("/\\")) buffer.print( '/' )
        buffer.print( element )
      endForEach
      filepath = buffer->String

    method absolute_filepath->String
      return absolute_filepath( filepath )

    method absolute_filepath( path:String )->String  [native]

    method add_path( subpath:String )->File
      if (filepath.count==0 or filepath.ends_with_any_of("/\\"))
        filepath += subpath
      else
        filepath = filepath + "/" + subpath
      endIf
      if (filepath.count > 1 and (filepath.ends_with('/') or filepath.ends_with('\\')))
        filepath = filepath.leftmost(-1)
      endIf
      return this

    method appender->FileWriter
      return FileWriter( filepath, true )

    method exists->Logical
      if (is_folder(filepath)) return true

      local reader = NativeFileReader( filepath )
      if (reader is null) return false
      reader.close
      return true

    method filename->String
      return filename( filepath )

    method filename( path:String )->String
      local last_slash = path.locate_last( '/' )
      local last_backslash = path.locate_last( '\\' )
      local last_separator = last_slash
      if (last_slash == -1 or (last_backslash != -1 and last_backslash > last_slash)) last_separator = last_backslash

      if (last_separator == -1) return path
      return path.substring( last_separator + 1 )

    method is_folder->Logical
      return is_folder( filepath )

    method is_folder( filepath:String )->Logical  [native]

    method listing->String[]
      return listing( filepath, String[] )

    method listing( filepath:String, filenames=String[]:String[] )->String[]  [native]

    method load->String
      local buffer = StringBuilder()
      forEach (ch in reader) buffer.print( ch )
      return buffer->String

    method path->String
      return path(filepath)

    method path( _filepath:String )->String
      if (_filepath.contains('/')) _filepath = _filepath.before_last( '/' )
      if (_filepath.contains('\\')) _filepath = _filepath.before_last( '\\' )
      return _filepath

    method reader->FileReader
      return FileReader( filepath )

    method save( text:String )
      writer.print( text ).close

    method size->Integer
      local reader = NativeFileReader( filepath )
      if (reader?) 
        local result = reader.available
        reader.close
        return result
      else
        return -1
      endIf

    method to->Byte[]
      local reader = NativeFileReader( filepath )
      if (reader is null)
        throw FileNotFoundError( filepath )
      endIf
      return reader->Byte[]

    method writer->FileWriter
      return FileWriter( filepath, false )

endClass

#==============================================================================
# FileReader
#==============================================================================
class FileReader : Reader<<Character>>
  PROPERTIES
    native_reader : NativeFileReader
    position      : Integer
    count         : Integer
    buffer        : Byte[]

  METHODS
    method init( filepath:String, buffer_size=-1:Integer )
      native_reader = NativeFileReader( filepath )
      if (native_reader is null) throw FileNotFoundError( filepath )
      count = native_reader.available

      if (buffer_size == -1)
        buffer_size = count
        if (buffer_size > 1024) buffer_size = 1024
      endIf

      buffer = Byte[]( buffer_size )

    method close
      native_reader.close

    method has_another->Logical
      return (position < count)

    method peek->Character
      if (buffer.count == 0) 
        native_reader.read( buffer, buffer.capacity )
        buffer.reverse
      endIf
      return buffer.last->Character

    method read->Character
      local result = peek
      buffer.remove_last
      ++position
      return result
endClass


#==============================================================================
# NativeFileReader
#==============================================================================
class NativeFileReader [native]
  METHODS
    method create                    [native]
    method create( filepath:String ) [native]

    method available->Integer        [native]
    method close                     [native]
    method position->Integer         [native]

    method read( buffer:Byte[] )->Integer
      return read( buffer, -1 )

    method read( buffer:Byte[], count:Integer )->Integer [native]

    method to->Byte[]
      local buffer = Byte[]( available )
      read( buffer, -1 )
      return buffer

    method to->String
      return String( this->Byte[] )
endClass


#==============================================================================
# FileWriter
#==============================================================================
class FileWriter : Printer
  PROPERTIES
    native_writer : NativeFileWriter
    buffer = StringBuilder()
    byte_buffer = Byte[]( 1024 )

  METHODS
    method init( filepath:String )
      init( filepath, false )

    method init( filepath:String, append:Logical )
      native_writer = NativeFileWriter( filepath, append )
      if (native_writer is null) throw IOError( filepath )

    method close
      flush
      native_writer.close

    method flush
      if (byte_buffer.count?)
        native_writer.write( byte_buffer, 0, byte_buffer.count )
        byte_buffer.clear
      endIf

    method flush_if_necessary->FileWriter
      # Move all buffered characters to byte buffer
      forEach (ch in buffer) byte_buffer.add( ch->Byte )
      buffer.clear
      if (byte_buffer.count >= 1024) flush
      return this

      #method position->Integer
      #return native_writer.position

    method print( value:String )->FileWriter
      buffer.print( value )
      return flush_if_necessary

    method print( value:Real )->FileWriter
      buffer.print( value )
      return flush_if_necessary

    method print( value:Real, decimal_places:Integer )->FileWriter
      buffer.print( value, decimal_places )
      return flush_if_necessary

    method print( value:Integer )->FileWriter
      buffer.print( value )
      return flush_if_necessary

    method print( value:Character )->FileWriter
      buffer.print( value )
      return flush_if_necessary

    method print( value:Object )->FileWriter
      buffer.print( value )
      return flush_if_necessary

    method print( value:Byte )->FileWriter
      buffer.print( value )
      return flush_if_necessary

    method print( value:Logical )->FileWriter
      buffer.print( value )
      return flush_if_necessary

    method println( value:Object )->FileWriter
      buffer.print( value )
      buffer.println
      return flush_if_necessary

    method println( value:String )->FileWriter
      buffer.print( value )
      buffer.println
      return flush_if_necessary

    method println( value:Real )->FileWriter
      buffer.print( value )
      buffer.println
      return flush_if_necessary

    method println( value:Real, decimal_places:Integer )->FileWriter
      buffer.print( value )
      buffer.println
      return flush_if_necessary

    method println( value:Integer )->FileWriter
      buffer.print( value )
      buffer.println
      return flush_if_necessary

    method println( value:Character )->FileWriter
      buffer.print( value )
      buffer.println
      return flush_if_necessary

    method println( value:Byte )->FileWriter
      buffer.print( value )
      buffer.println
      return flush_if_necessary

    method println( value:Logical )->FileWriter
      buffer.print( value )
      buffer.println
      return flush_if_necessary

    method println->FileWriter
      buffer.println
      return flush_if_necessary

    method write( value:Character )->FileWriter
      buffer.print( value )
      return flush_if_necessary
endClass


#==============================================================================
# NativeFileWriter
#==============================================================================
class NativeFileWriter [native]
  METHODS
    method create                                    [native]
    method create( filepath:String, append:Logical ) [native]

    method close                     [native]
    method position->Integer         [native]

    method write( buffer:Byte[], offset:Integer, count:Integer ) [native]
endClass


