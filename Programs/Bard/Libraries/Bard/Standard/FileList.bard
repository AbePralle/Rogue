#==============================================================================
# FileList
#==============================================================================
class FileList
  ENUMERATE
    recursive      = 1
    include_hidden = 2

    non_recursive  = 4
    exclude_hidden = 8

  PROPERTIES
    base_path          : String
    relative_filepaths = String[]
    lookup             = Table<<String,String>>()
    should_recurse     = true
    discard_hidden     = true

  METHODS
    method init
      base_path = "."

    method init( base_path, options=0:Integer )
      with_options( options )

    method init( base_path, relative_path:String, options=0:Integer )
      with_options( options ).include( relative_path )

    method absolute_filepaths->String[]
      local results = String[]( relative_filepaths.count )
      forEach (filepath in relative_filepaths)
        results.add( File(base_path,filepath).absolute_filepath )
      endForEach
      return results

    method clear
      relative_filepaths.clear
      lookup.clear

    method count->Integer
      return relative_filepaths.count

    method exclude( wildcard_pattern:String )->FileList
      local dest_i = 0
      forEach (filepath in relative_filepaths)
        if (not filepath.matches_wildcard_pattern(wildcard_pattern))
          relative_filepaths[ dest_i ] = filepath
          ++dest_i
        endIf
      endForEach
      relative_filepaths.discard_from( dest_i )

      # Rebuild anti-duplication lookup table
      lookup.clear
      forEach (path in relative_filepaths) lookup[path] = path

      return this

    method get( index:Integer )->String
      return relative_filepaths[ index ]

    method include( relative_path:String, options=0:Integer )->FileList
      with_options( options )

      if (relative_path.contains(';'))
        forEach (path in relative_path.split(';')) include( path )
      elseIf (relative_path.contains(':'))
        forEach (path in relative_path.split(':')) include( path )
      endIf

      if (relative_path.contains_any_of("*?"))
        # Recursively process path containing wildcard characters.
        return include( "", relative_path.replace('\\','/').split('/') )
      elseIf (File(base_path,relative_path).is_folder)
        trace
        return include( relative_path, ["*"] )
      else
        trace
        return include( "", String[].add(relative_path) )
      endIf

    method include( path_so_far:String, relative_path_segments:String[] )->FileList
      local cur_filepath = File( base_path, path_so_far ).filepath

      local cur_segment = relative_path_segments.first
      local remaining_path = relative_path_segments.clone
      remaining_path.remove_first

      forEach (filename in File(cur_filepath).listing)
        if (filename.matches_wildcard_pattern(cur_segment))
          if (remaining_path.count?)
            if (File(cur_filepath,filename).is_folder)
              include( File(path_so_far,filename).filepath, remaining_path )
              if (cur_segment == "**")
                include( File(path_so_far,filename).filepath, relative_path_segments )
              endIf
            else
              if (cur_segment == "**") 
                if (remaining_path.count == 1 and filename.matches_wildcard_pattern(remaining_path.first))
                  # Store file
                  if (discard_hidden and filename.begins_with('.')) nextIteration

                  local filepath = File( path_so_far, filename ).filepath
                  if (not lookup.contains(filepath))
                    relative_filepaths.add( filepath )
                    lookup[filepath] = filepath
                  endIf
                  if (should_recurse and File(base_path,filepath).is_folder)
                    include( filepath )
                  endIf
                endIf
              endIf
            endIf
          else
            if (discard_hidden and filename.begins_with('.')) nextIteration

            local filepath = File( path_so_far, filename ).filepath
            if (not lookup.contains(filepath))
              relative_filepaths.add( filepath )
              lookup[filepath] = filepath
            endIf
            if (should_recurse and File(base_path,filepath).is_folder)
              include( filepath )
            endIf
          endIf
        endIf
      endForEach

      return this

    method with_options( options:Integer )->FileList
      if ((options & recursive)?)      should_recurse = true
      if ((options & non_recursive)?)  should_recurse = false
      if ((options & include_hidden)?) discard_hidden   = false
      if ((options & exclude_hidden)?) discard_hidden   = true
      return this
endClass
