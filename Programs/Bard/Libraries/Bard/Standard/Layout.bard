class Layout : Node<<Layout>>
  PROPERTIES
    bounds    = Bounds()

    offset_x, offset_y : Integer

  METHODS
    method init( width:Integer, height:Integer )
      bounds.set( 0, 0, width, height )

    method add_filler->Layout
      return add( LayoutFiller() )

    method add_spacer( size:Integer )->Layout
      return add( Layout(size,size) )

    method expansion_factor_x->Real
      return 0.0

    method expansion_factor_y->Real
      return 0.0

    method minimum_height->Integer
      return bounds.height

    method minimum_width->Integer
      return bounds.width

    method operator+( lhs:Layout, rhs:Layout )->Layout
      if (lhs instanceOf HorizontalLayout)
        return (lhs as HorizontalLayout).add( rhs )
      else
        return HorizontalLayout().add( lhs ).add( rhs )
      endIf

    method operator+( lhs:Layout, rhs:Integer )->Layout
      if (lhs instanceOf HorizontalLayout)
        return (lhs as HorizontalLayout).add_spacer(rhs)
      else
        return HorizontalLayout().add( lhs ).add_spacer(rhs)
      endIf

    method operator+=( rhs:Layout )->Layout
      return this + rhs

    method operator+=( rhs:Integer )->Layout
      return this + rhs

    method operator/( lhs:Layout, rhs:Layout )->Layout
      if (lhs instanceOf VerticalLayout)
        trace
        return (lhs as VerticalLayout).add( rhs )
      else
        return VerticalLayout().add( lhs ).add( rhs )
      endIf

    method operator/( lhs:Layout, rhs:Integer )->Layout
      if (lhs instanceOf VerticalLayout)
        return (lhs as VerticalLayout).add_spacer( rhs )
      else
        return VerticalLayout().add( lhs ).add_spacer( rhs )
      endIf

    method operator/=( rhs:Layout )->Layout
      return this / rhs

    method operator/=( rhs:Integer )->Layout
      return this / rhs

    method organize
      organize( bounds.x, bounds.y, bounds.width, bounds.height )

    method organize( x:Integer, y:Integer, w:Integer, h:Integer )
      bounds.position_within( x, y, w, h, Align.center )
      update_child_layouts

    method update_child_layouts
      local cur = child
      while (cur?)
        cur.organize( bounds.x, bounds.y, bounds.width, bounds.height )
        cur = cur.next
      endWhile

endClass

class FrameLayout : Layout
  METHODS
    method init

    method init( initial_bounds:Bounds )
      bounds.set( initial_bounds )

    method init( x:Integer, y:Integer, w:Integer, h:Integer )
      bounds.set( x, y, w, h )

    method organize( x:Integer, y:Integer, w:Integer, h:Integer )
      bounds.set( x, y, w, h )
      update_child_layouts
endClass

class HorizontalLayout : Layout
  METHODS
    method init

    method add_spacer( size:Integer )->Layout
      return add( Layout(size,0) )

    method minimum_height->Integer
      local result = 0

      local cur = child
      while (cur?)
        local h = cur.minimum_height
        if (h > result) result = h
        cur = cur.next
      endWhile

      return result

    method minimum_width->Integer
      local result = 0

      local cur = child
      while (cur?)
        result += cur.minimum_width
        cur = cur.next
      endWhile

      return result

    method organize( x:Integer, y:Integer, w:Integer, h:Integer )
      bounds.set( x, y, w, h )

      local min_w = minimum_width
      local excess_w = w - min_w
      if (excess_w < 0) excess_w = 0

      # Calculate expansion factor sum
      local total_expansion_factor = 0.0
      local cur = child
      while (cur?)
        total_expansion_factor += cur.expansion_factor_x
        cur = cur.next
      endWhile

      local child_x = x

      # Apply excess pixels proportional to individual expansion factor
      if (total_expansion_factor?)
        cur = child
        while (cur?)
          local cur_expansion_factor = cur.expansion_factor_x
          if (cur_expansion_factor?)
            local expansion = (excess_w * (cur_expansion_factor / total_expansion_factor))->Integer
            excess_w -= expansion
            total_expansion_factor -= cur_expansion_factor
            cur.bounds.width = expansion
          else
            cur.bounds.width = cur.minimum_width
          endIf
          cur = cur.next
        endWhile
      else
        # No expansion areas - set each child to its minimum width and center result
        cur = child
        while (cur?)
          cur.bounds.width = cur.minimum_width
          cur = cur.next
        endWhile

        child_x += (excess_w / 2)->Integer
      endIf

      # Lay out children
      cur = child
      while (cur?)
        local cur_w = cur.bounds.width
        cur.organize( child_x, y, cur_w, h )
        child_x += cur_w
        cur = cur.next
      endWhile
endClass

class LayoutFiller : Layout
  METHODS
    method expansion_factor_x->Real
      return 1.0

    method expansion_factor_y->Real
      return 1.0

    method minimum_height->Integer
      return 0

    method minimum_width->Integer
      return 0

    method organize( x:Integer, y:Integer, w:Integer, h:Integer )
      bounds.x = x
      bounds.y = y
      update_child_layouts
endClass


class VerticalLayout : Layout
  METHODS
    method init

    method add_spacer( size:Integer )->Layout
      return add( Layout(0,size) )

    method minimum_height->Integer
      local result = 0

      local cur = child
      while (cur?)
        result += cur.minimum_height
        cur = cur.next
      endWhile

      return result

    method minimum_width->Integer
      local result = 0

      local cur = child
      while (cur?)
        local w = cur.minimum_width
        if (w > result) result = w
        cur = cur.next
      endWhile

      return result

    method organize( x:Integer, y:Integer, w:Integer, h:Integer )
      bounds.set( x, y, w, h )

      local min_h = minimum_height
      local excess_h = h - min_h
      if (excess_h < 0) excess_h = 0

      # Calculate expansion factor sum
      local total_expansion_factor = 0.0
      local cur = child
      while (cur?)
        total_expansion_factor += cur.expansion_factor_y
        cur = cur.next
      endWhile

      local child_y = y

      # Apply excess pixels proportional to individual expansion factor
      if (total_expansion_factor?)
        cur = child
        while (cur?)
          local cur_expansion_factor = cur.expansion_factor_y
          if (cur_expansion_factor?)
            local expansion = (excess_h * (cur_expansion_factor / total_expansion_factor))->Integer
            excess_h -= expansion
            total_expansion_factor -= cur_expansion_factor
            cur.bounds.height = expansion
          else
            cur.bounds.height = cur.minimum_height
          endIf
          cur = cur.next
        endWhile
      else
        # No expansion areas - set each child to its minimum height and center result
        cur = child
        while (cur?)
          cur.bounds.height = cur.minimum_height
          cur = cur.next
        endWhile

        child_y += (excess_h / 2)->Integer
      endIf

      # Lay out children
      cur = child
      while (cur?)
        local cur_h = cur.bounds.height
        cur.organize( x, child_y, w, cur_h )
        child_y += cur_h
        cur = cur.next
      endWhile
endClass

