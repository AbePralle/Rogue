$[if not TARGET_JS]
class MessageManager [requisite singleton]
  PROPERTIES
    origin_name = "bard"

    message_buffer  = StringBuilder(1024)

    new_messages = PropertyList()

    message_listeners = Table<<String,MessageListener>>()

  METHODS
    method send( message:Message )
      if (message.args.m_origin is null) message.args.m_origin = origin_name

      new_messages.add( message.args )

      local listener = message_listeners[ message.type ]
      while (listener?)
        listener = listener.execute( message )
      endWhile

    method get_native_message_buffer( required_capacity:Integer )->Character[] [requisite]
      message_buffer.clear
      message_buffer.ensure_capacity( required_capacity )
      return message_buffer.characters

    method update->Character[]  [requisite]
      if (message_buffer.count > 2)   # 2 is empty list []
        local messages = JSON.parse_list( message_buffer )
        if (messages? and messages.count?)
          forEach (e in messages)
            local table = e as PropertyTable
            if (table?)
              local type = table.m_type->String
              if (type?)
                local listener = message_listeners[ type ]
                if (listener?)
                  local message = Message( type, table, table.m_id->Integer )
                  while (listener?)
                    listener = listener.execute( message )
                  endWhile
                endIf
              endIf
            endIf
          endForEach
        endIf

        message_buffer.clear
      endIf

      if (new_messages.count?)
        new_messages.print( message_buffer )
        new_messages.clear
      endIf

      return message_buffer.characters

endClass


$[else]
class MessageManager [requisite singleton]
  PROPERTIES
    origin_name = "bard"

    message_buffer  = ""

    new_messages = PropertyList()

    message_listeners = Table<<String,MessageListener>>()

  METHODS
    method send( message:Message )
      if (message.args.m_origin is null) message.args.m_origin = origin_name

      new_messages.add( message.args )

      local listener = message_listeners[ message.type ]
      while (listener?)
        listener = listener.execute( message )
      endWhile

    method update( messages:PropertyList )->String  [requisite]
      if (messages? and messages.count?)
        forEach (e in messages)
          local table = e as PropertyTable
          if (table?)
            local type = table.m_type->String
            if (type?)
              local listener = message_listeners[ type ]
              if (listener?)
                local message = Message( type, table, table.m_id->Integer )
                while (listener?)
                  listener = listener.execute( message )
                endWhile
              endIf
            endIf
          endIf
        endForEach
      endIf

      local result = new_messages->String
      new_messages.clear
      return result

endClass

$[endIf]


class Message
  SETTINGS
    next_message_id = 1

  PROPERTIES
    args : PropertyTable

  METHODS
    method init( message_type:String )
      init( message_type, null as PropertyTable )

    method init( message_type:String, json_args:String )
      init( message_type, JSON.parse_table(json_args) )

    method init( message_type:String, args )
      local mid = next_message_id
      ++next_message_id
      init( message_type, args, mid )

    method init( message_type:String, args, message_id:Integer )
      if (args is null) args = PropertyTable()
      args.m_type = message_type
      args.m_id = message_id

    method id->Integer
      return args.m_id->Integer

    method send
      MessageManager.send( this )

    method send_rsvp( status=null:TaskStatus )->MessageReplyListener
      local listener = MessageReplyListener( MessageManager.origin_name, id, null as Delegate() )
      listener.status = status
      MessageManager.send( this )
      return listener

    method send_rsvp( reply_callback:Delegate(), status=null:TaskStatus )->MessageReplyListener
      local listener = MessageReplyListener( MessageManager.origin_name, id, reply_callback )
      if (status?) listener.status = status
      MessageManager.send( this )
      return listener

    method send_rsvp( reply_callback:Delegate(Message), status=null:TaskStatus )->MessageReplyListener
      local listener = MessageReplyListener( MessageManager.origin_name, id, reply_callback )
      if (status?) listener.status = status
      MessageManager.send( this )
      return listener

    method reply
      reply( null as PropertyTable )

    method reply( json_reply_args:String )
      reply( type, JSON.parse_table(json_reply_args) )

    method reply( reply_args:PropertyTable )
      if (reply_args?) reply_args = reply_args.clone
      Message( "reply", reply_args, id ).send

    method to->String
      return args->String

    method type->String
      return args.m_type->String

endClass


class MessageListener
  ENUMERATE
    replace
    insert
    append
    optional_default

  PROPERTIES
    message_type    : String

    simple_delegate : Delegate()
    full_delegate   : Delegate(Message)

    next_listener : MessageListener

  METHODS
    method init( message_type, simple_delegate, ordering=MessageListener.append:Integer )
      init( message_type, null as Delegate(Message), ordering )

    method init( message_type, full_delegate,   ordering=MessageListener.append:Integer )
      which (ordering)
        case insert
          next_listener = MessageManager.message_listeners[ message_type ]
          MessageManager.message_listeners[ message_type ] = this

        case append
          local cur = MessageManager.message_listeners[ message_type ]
          if (cur?)
            while (cur.next_listener?) cur = cur.next_listener
            cur.next_listener = this
          else
            MessageManager.message_listeners[ message_type ] = this
          endIf

        case replace
          MessageManager.message_listeners[ message_type ] = this

        case optional_default
          if (MessageManager.message_listeners[message_type] is null)
            MessageManager.message_listeners[ message_type ] = this
          endIf
      endWhich

    method execute( m:Message )->MessageListener
      on( m )

      if (full_delegate?)       full_delegate.call( m )
      elseIf (simple_delegate?) simple_delegate.call

      return next_listener

    method on( m:Message )
      noAction

    method stop_listening->MessageListener
      return this

      local cur = MessageManager.message_listeners[ message_type ]

      if (cur is null) return this # not listening anyways

      if (cur is this)
        # Change the first listener in the list
        MessageManager.message_listeners[ message_type ] = next_listener
      else
        # Remove from the middle of the list
        while (cur.next_listener?)
          if (cur.next_listener is this)
            cur.next_listener = cur.next_listener.next_listener
            this.next_listener = null
            return this
          endIf
          cur = cur.next_listener
        endWhile
      endIf

      # Not found in list
      return this

endClass

class MessageReplyListener : MessageListener
  PROPERTIES
    origin_name : String
    message_id  : Integer

    waiting     = true
    wait_time   = Time.current : Real
      # Start time if waiting.
      # Elapsed time if not waiting.
    reply       : Message

    status      : TaskStatus
      # Only created if status() is called.  If it exists then it is
      # updated as needed.

  METHODS
    method init( origin_name, message_id, simple_delegate )
      prior.init( "reply", simple_delegate )

    method init( origin_name, message_id, full_delegate )
      prior.init( "reply", full_delegate )

    alias  args => this.reply.args

    method elapsed_seconds->Real
      if (waiting) return Time.current - wait_time
      else         return wait_time

    method execute( m:Message )->MessageListener
      if (m.args.m_id->Integer == message_id and m.args.m_origin->String == origin_name)
        stop_listening
        reply = m
        wait_time = Time.current - wait_time
        waiting = false
        if (@status?)
          @status.finished  = true
          @status.wait_time = wait_time
        endIf
        return prior.execute( m )
      else
        return next_listener
      endIf

    method status->TaskStatus
      if (@status?) return @status

      @status = TaskStatus( not waiting, wait_time )
      return @status

    method status( @status )
      if (@status?)
        @status.wait_time = wait_time
        @status.finished  = not waiting
      endIf
endClass

