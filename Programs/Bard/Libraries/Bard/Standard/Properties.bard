$[if not TARGET_JS]
class PropertyValue [dynamicAccess]
  METHODS
    method add( value:Real )->PropertyList
      return add( NumberProperty(value) )

    method add( value:Logical )->PropertyList
      return add( LogicalProperty(value) )

    method add( value:PropertyValue )->PropertyList
      return null

    method add( value:String )->PropertyList
      return add( StringProperty(value) )

    method add( value:Object )->PropertyList
      if (value?) return add( value->String )
      else        return add( null as PropertyValue )

    method clear->PropertyValue
      return null

    method clone->PropertyValue
      return this

    alias contains(key) => this.get(key)?

    method count->Integer
      return 0

    method get( index:Integer )->PropertyValue
      return null

    method get( key:String )->PropertyValue
      return null

    method get_Integer( index:Integer )->Integer
      local result = get( index )
      if (result is null) return 0
      return result->Integer

    method get_Logical( index:Integer )->Logical
      local result = get( index )
      if (result is null) return false
      return result->Logical

    method get_Real( index:Integer )->Real
      local result = get( index )
      if (result is null) return 0.0
      return result->Real

    method get_String( index:Integer )->String
      local result = get( index )
      if (result is null) return ""
      return result->String

    method get_PropertyList( index:Integer )->PropertyList
      local value = get( index )
      if (value?)
        if (value instanceOf String) return (value as String)->PropertyList
        local result = value as PropertyList
        if (result?) return result
      endIf
      return PropertyList()

    method get_PropertyTable( index:Integer )->PropertyTable
      local value = get( index )
      if (value?)
        if (value instanceOf String) return (value as String)->PropertyTable
        local result = value as PropertyTable
        if (result?) return result
      endIf
      return PropertyTable()

    method get_Integer( key:String )->Integer
      local result = get( key )
      if (result is null) return 0
      return result->Integer

    method get_Logical( key:String )->Logical
      local result = get( key )
      if (result is null) return false
      return result->Logical

    method get_PropertyList( key:String )->PropertyList
      local value = get( key )
      if (value?)
        if (value instanceOf String) return (value as String)->PropertyList
        local result = value as PropertyList
        if (result?) return result
      endIf
      return PropertyList()

    method get_PropertyTable( key:String )->PropertyTable
      local value = get( key )
      if (value?)
        if (value instanceOf String) return (value as String)->PropertyTable
        local result = value as PropertyTable
        if (result?) return result
      endIf
      return PropertyTable()

    method get_Real( key:String )->Real
      local result = get( key )
      if (result is null) return 0.0
      return result->Real

    method get_String( key:String )->String
      local result = get( key )
      if (result is null) return ""
      return result->String

    method keys->String[]
      return null

    method print( printer:Printer )->Printer
      return printer

    method print( printer:Printer, value:String )->Printer
      printer.print '"'
      forEach (ch in value)
        which (ch)
          case '"':   printer.print "\\\""
          case '\\':  printer.print "\\\\"
          case '/':   printer.print "\\/"
          case '\b':  printer.print "\\b"
          case '\f':  printer.print "\\f"
          case '\n':  printer.print "\\n"
          case '\r':  printer.print "\\r"
          case '\t':  printer.print "\\t"
          others
            if (ch >= 32 and ch <= 126)
              printer.print( ch )
            else
              printer.print( "\\u" )
              local n = ch->Integer
              loop 4
                local digit = (n:>>:12) & 15
                n = n:<<: 4
                if (digit <= 9) printer.print( digit )
                else            printer.print( ('a' + (digit-10))->Character )
              endLoop
            endIf
        endWhich
      endForEach
      printer.print '"'
      return printer

    method set( index:Integer, new_value:PropertyValue )
      noAction

    method set( index:Integer, new_value:Integer )
      set( index, NumberProperty(new_value) )

    method set( index:Integer, new_value:Logical )
      set( index, LogicalProperty(new_value) )

    method set( index:Integer, new_value:Real )
      set( index, NumberProperty(new_value) )

    method set( index:Integer, new_value:String )
      set( index, StringProperty(new_value) )

    method set( index:Integer, new_value:Object )
      if (new_value?) set( index, new_value->String )
      else            set( index, null as PropertyValue )

    method set( key:String, new_value:PropertyValue )
      noAction

    method set( key:String, new_value:Integer )
      set( key, NumberProperty(new_value) )

    method set( key:String, new_value:Logical )
      set( key, LogicalProperty(new_value) )

    method set( key:String, new_value:Real )
      set( key, NumberProperty(new_value) )

    method set( key:String, new_value:String )
      set( key, StringProperty(new_value) )

    method set( key:String, list:Object[] )
      set( key, list->PropertyList )

    method set( key:String, list:Integer[] )
      set( key, list->PropertyList )

    method set( key:String, list:Logical[] )
      set( key, list->PropertyList )

    method set( key:String, list:Real[] )
      set( key, list->PropertyList )

    method set( key:String, list:String[] )
      set( key, list->PropertyList )

    method set( key:String, list:Character[] )
      set( key, list->PropertyList )

    method set( key:String, new_value:Object )
      if (new_value?) set( key, new_value->String )
      else            set( key, null as PropertyValue )

    method to->Real
      return this->Integer->Real

    method to->String
      return print( StringBuilder() )->String
endClass

class PropertyList : PropertyValue
  PROPERTIES
    data : PropertyValue[]

  METHODS
    method init
      data = PropertyValue[]

    method init( other:PropertyList )
      data = other.data.clone

    method add( value:PropertyValue )->PropertyList
      data.add( value )
      return this

    method clear->PropertyList
      data.clear
      return this

    method clone->PropertyList
      return PropertyList( this )

    method count->Integer
      return data.count

    method get( index:Integer )->PropertyValue
      if (index < 0 or index >= data.count) return null
      return data[ index ]

    method get( key:String )->PropertyValue
      return get( key->Integer )

    method print( buffer:Printer )->Printer
      buffer.print '['
      local first = true
      forEach (value in data)
        if (first) first = false
        else       buffer.print ','

        if (value?) value.print( buffer )
        else        buffer.print "null"
      endForEach
      buffer.print ']'
      return buffer

    method set( index:Integer, new_value:PropertyValue )
      if (index < 0) return
      
      while (index >= data.count) data.add( null as PropertyValue )
      data[ index ] = new_value

    method to->Integer
      return data.count

    method to->Logical
      return data.count?
endClass

augment $DataType[]
  METHODS
    method to->PropertyList
      local list = PropertyList()
      forEach (value in this) list.add( value )
      return list
endAugment

class PropertyTable : PropertyValue
  PROPERTIES
    data : Table<<String,PropertyValue>>

  METHODS
    method init
      data = Table<<String,PropertyValue>>()

    method init( other:PropertyTable )
      data = other.data.clone

    method clear->PropertyTable
      data.clear
      return this

    method clone->PropertyTable
      return PropertyTable( this )

    method count->Integer
      return data.count

    method get( index:Integer )->PropertyValue
      if (index < 0 or index >= data.count) return null
      return data.at( index )

    method get( key:String )->PropertyValue
      return data[ key ]

    method keys->String[]
      return data.keys

    method print( buffer:Printer )->Printer
      buffer.print '{'
      local first = true
      forEach (key in data.keys)
        if (first) first = false
        else       buffer.print ','

        print( buffer, key )
        buffer.print( ':' )

        local value = data[ key ]
        if (value?) value.print( buffer )
        else        buffer.print "null"
      endForEach
      buffer.print '}'
      return buffer

    method put( key:String, new_value:PropertyValue )->PropertyTable
      this[ key ] = new_value
      return this

    method put( key:String, new_value:Integer )->PropertyTable
      return put( key, NumberProperty(new_value) )

    method put( key:String, new_value:Logical )->PropertyTable
      return put( key, LogicalProperty(new_value) )

    method put( key:String, new_value:Real )->PropertyTable
      return put( key, NumberProperty(new_value) )

    method put( key:String, new_value:String )->PropertyTable
      return put( key, StringProperty(new_value) )

    method put( key:String, new_value:Object )->PropertyTable
      if (new_value?) return put( key, new_value->String )
      else            return put( key, null as PropertyValue )

    method put( key:String, list:Object[] )->PropertyTable
      return put( key, list->PropertyList )

    method put( key:String, list:Integer[] )->PropertyTable
      return put( key, list->PropertyList )

    method put( key:String, list:Logical[] )->PropertyTable
      return put( key, list->PropertyList )

    method put( key:String, list:Real[] )->PropertyTable
      return put( key, list->PropertyList )

    method put( key:String, list:String[] )->PropertyTable
      return put( key, list->PropertyList )

    method put( key:String, list:Character[] )->PropertyTable
      local plist = PropertyList()
      forEach (ch in list) plist.add( ""+ch )
      return put( key, plist )

    method set( key:String, new_value:PropertyValue )
      data[ key ] = new_value

    method to->Integer
      return data.count

    method to->Logical
      return data.count?
endClass

class LogicalProperty( value:Logical ) : PropertyValue
  METHODS
    method print( printer:Printer )->Printer
      printer.print( value )
      return printer

    method to->Integer
      if (value) return 1
      else       return 0

    method to->Logical
      return value

    method to->String
      if (value) return "true"
      else       return "false"
endClass

class NumberProperty : PropertyValue
  PROPERTIES
    value : Real

  METHODS
    method init( value )

    method print( printer:Printer )->Printer
      local decimal_places = 0
      forEach (i in 0..8)
        decimal_places = i
        local n = value * 10.0^i
        if (n == n.floor) escapeForEach
      endForEach
      return printer.print( value, decimal_places )

    method to->Integer
      return value->Integer

    method to->Logical
      return (value != 0)

    method to->Real
      return value

    method to->String
      return "" + value
endClass

class StringProperty : PropertyValue
  PROPERTIES
    value : String

  METHODS
    method init( value )

    method print( printer:Printer )->Printer
      return print( printer, value )

    method to->Integer
      return value->Integer

    method to->Logical
      return value->Logical

    method to->Real
      return value->Real

    method to->String
      return value
endClass

class JSON
  SETTINGS
    buffer = StringBuilder()

  PROPERTIES
    reader : ParseReader

  METHODS
    method save( file:File, table:PropertyTable )
      local writer = file.writer
      if (table?)
        table.print( writer )
        writer.println
      else
        writer.println( "{}" )
      endIf
      writer.close

    method save( file:File, list:PropertyList )
      local writer = file.writer
      if (list?)
        list.print( writer )
        writer.println
      else
        writer.println( "{}" )
      endIf
      writer.close

    method load( file:File )->PropertyValue
      if (not file.exists) return null
      reader = ParseReader( file )
      if (reader is null) return null
      return parse_value

    method load_table( file:File )->PropertyTable
      local value = load( file )
      if (value is null or not (value instanceOf PropertyTable)) return null
      return (value as PropertyTable)

    method load_list( file:File )->PropertyList
      local value = load( file )
      if (value is null or not (value instanceOf PropertyList)) return null
      return (value as PropertyList)


    method parse( bytes:Byte[] )->PropertyValue
      if (bytes is null) return null
      reader = ParseReader( bytes )
      return parse_value

    method parse( characters:Character[] )->PropertyValue
      if (characters is null) return null
      reader = ParseReader( characters )
      return parse_value

    method parse( st:String )->PropertyValue
      return parse( st->Byte[] )

    method parse( st:StringBuilder )->PropertyValue
      return parse( st.characters )


    method parse_table( bytes:Byte[] )->PropertyTable
      return parse(bytes) as PropertyTable

    method parse_table( characters:Character[] )->PropertyTable
      return parse(characters) as PropertyTable

    method parse_table( st:String )->PropertyTable
      return parse(st) as PropertyTable

    method parse_table( st:StringBuilder )->PropertyTable
      return parse(st) as PropertyTable


    method parse_list( bytes:Byte[] )->PropertyList
      return parse(bytes) as PropertyList

    method parse_list( characters:Character[] )->PropertyList
      return parse(characters) as PropertyList

    method parse_list( st:String )->PropertyList
      return parse(st) as PropertyList

    method parse_list( st:StringBuilder )->PropertyList
      return parse(st) as PropertyList


    method parse_value->PropertyValue
      reader.consume_spaces

      local ch = reader.peek
      if (ch == '{') return parse_table
      if (ch == '[') return parse_list

      if (ch == '-') return parse_number
      if (ch >= '0' and ch <= '9') return parse_number

      if (ch == '"' or ch == '\'')
        local result = parse_string
        if (result.count == 0) return StringProperty("")
        return StringProperty( result )

      elseIf ((ch >= 'a' and ch <= 'z') or (ch >= 'A' and ch <= 'Z') or (ch == '_' or  ch == '$'))
        local result = parse_identifier
        if (result.count == 0) return StringProperty("")

        local first_ch = result[0]
        if (first_ch == 't' and result == "true")  return LogicalProperty(true)
        if (first_ch == 'f' and result == "false") return LogicalProperty(false)
        if (first_ch == 'n' and result == "null")  return null
        return StringProperty( result )
      else
        return null
      endIf


    method parse_table->PropertyTable
      reader.consume_spaces

      if (not reader.consume('{')) return null

      reader.consume_spaces

      local table = PropertyTable()
      if (reader.consume('}')) return table

      local first = true
      while (first or reader.consume(','))
        first = false

        local key = parse_identifier
        reader.consume_spaces

        if (not reader.consume(':'))
          table.set( key, true )
        else
          reader.consume_spaces

          local value = parse_value
          table.set( key, value )
        endIf

        reader.consume_spaces
      endWhile

      if (not reader.consume('}')) return null

      return table

    method parse_list->PropertyList
      reader.consume_spaces

      if (not reader.consume('[')) return null

      reader.consume_spaces

      local list = PropertyList()
      if (reader.consume(']')) return list

      local first = true
      while (first or reader.consume(','))
        first = false
        list.add( parse_value )
        reader.consume_spaces
      endWhile

      if (not reader.consume(']')) return null

      return list

    method parse_string->String
      reader.consume_spaces

      local terminator = '"'
      if (reader.consume('"')) terminator = '"'
      elseIf (reader.consume('\'')) terminator = '\''

      if (not reader.has_another) return ""

      buffer.clear
      local ch = reader.read
      while (reader.has_another and ch != terminator)
        if (ch == '\\')
          ch = reader.read
          if (ch == 'b')     buffer.print( '\b' )
          elseIf (ch == 'f') buffer.print( '\f' )
          elseIf (ch == 'n') buffer.print( '\n' )
          elseIf (ch == 'r') buffer.print( '\r' )
          elseIf (ch == 't') buffer.print( '\t' )
          elseIf (ch == 'u') buffer.print( parse_hex_quad )
          else buffer.print( ch )
        else
          buffer.print( ch )
        endIf
        ch = reader.read
      endWhile

      return buffer->String

    method parse_hex_quad->Character
      local code = 0
      loop 4
        if (reader.has_another) code = code:<<:4 | reader.read_hex_value
      endLoop
      return code->Character

    method parse_identifier->String
      reader.consume_spaces

      local ch = reader.peek
      if (ch == '"' or ch == '\'')
        return parse_string
      else
        buffer.clear
        local finished = false
        while (not finished and reader.has_another)
          if ((ch >= 'a' and ch <= 'z') or (ch >= 'A' and ch <= 'Z') or ch == '_' or ch == '$')
            reader.read
            buffer.print( ch->Character )
            ch = reader.peek
          else
            finished = true
          endIf
        endWhile

        return buffer->String
      endIf


    method parse_number->NumberProperty
      reader.consume_spaces

      local sign = 1.0
      if (reader.consume('-'))
        sign = -1.0
        reader.consume_spaces
      endIf

      local n = 0.0
      local ch = reader.peek
      while (reader.has_another and ch >= '0' and ch <= '9')
        reader.read
        n = n * 10 + (ch - '0')
        ch = reader.peek
      endWhile

      local is_real = false

      if (reader.consume('.'))
        is_real = true
        local decimal = 0.0
        local power = 0
        ch = reader.peek
        while (reader.has_another and ch >= '0' and ch <= '9')
          reader.read
          decimal = decimal * 10 + (ch - '0')
          power += 1.0
          ch = reader.peek
        endWhile
        n += decimal / 10^power
      endIf

      if (reader.consume('e') or reader.consume('E'))
        local negexp = false
        if (not reader.consume('+') and reader.consume('-')) negexp = true

        local power = 0.0
        ch = reader.peek
        while (reader.has_another and ch >= '0' and ch <= '9')
          reader.read
          power = power * 10.0 + (ch - '0')
          ch = reader.peek
        endWhile

        if (negexp) n /= 10 ^ power
        else        n *= 10 ^ power
      endIf

      n = n * sign

      return NumberProperty( n )

endClass

$[else]
#-------------------------------------------------------------------------------
# JS compile target - mostly just leverages built-in JS functionality.
#-------------------------------------------------------------------------------

class Properties [native functional dynamicAccess]
  METHODS
    method create->Properties                         [native]

    method add( value:Real )->Properties              [native]
    method add( value:Logical )->Properties           [native]
    method add( value:Properties )->Properties        [native]
    method add( value:String )->Properties            [native]

    method add( value:Object )->Properties
      if (value?) return add( value->String )
      else        return add( null as Properties )

    method clear->Properties                          [native]

    alias contains(key) => this.get(key)?

    method count->Integer                             [native]

    method get( index:Integer )->Properties           [native]
    method get_Integer( index:Integer )->Integer      [native]
    method get_Logical( index:Integer )->Logical      [native]
    method get_Real( index:Integer )->Real            [native]
    method get_String( index:Integer )->String        [native]
    method get_PropertyList( index:Integer )->PropertyList   [native]
    method get_PropertyTable( index:Integer )->PropertyTable [native]

    method get( key:String )->Properties              [native]
    method get_Integer( key:String )->Integer         [native]
    method get_Logical( key:String )->Logical         [native]
    method get_PropertyList( key:String )->PropertyList   [native]
    method get_PropertyTable( key:String )->PropertyTable [native]
    method get_Real( key:String )->Real               [native]
    method get_String( key:String )->String           [native]

    method keys->String[] [native]

    method print( printer:Printer )->Printer
      return printer.print( this->String )

    method put( key:String, new_value:Properties )->PropertyTable    [native]
    method put( key:String, new_value:Integer )->PropertyTable       [native]
    method put( key:String, new_value:Logical )->PropertyTable       [native]
    method put( key:String, new_value:Real )->PropertyTable          [native]
    method put( key:String, new_value:String )->PropertyTable        [native]

    method put( key:String, new_value:Object )->PropertyTable
      if (new_value?) return put( key, new_value->String )
      else            return put( key, null as Properties )

    method put( key:String, list:Object[] )->PropertyTable
      return put( key, list->Properties )

    method put( key:String, list:Integer[] )->PropertyTable
      return put( key, list->Properties )

    method put( key:String, list:Logical[] )->PropertyTable
      return put( key, list->Properties )

    method put( key:String, list:Real[] )->PropertyTable
      return put( key, list->Properties )

    method put( key:String, list:String[] )->PropertyTable
      return put( key, list->Properties )

    method put( key:String, list:Character[] )->PropertyTable
      return put( key, list->Properties )

    method set( index:Integer, new_value:Properties ) [native]
    method set( index:Integer, new_value:Integer )    [native]
    method set( index:Integer, new_value:Logical )    [native]
    method set( index:Integer, new_value:Real )       [native]
    method set( index:Integer, new_value:String )     [native]

    method set( index:Integer, new_value:Object )
      if (new_value?) set( index, new_value->String )
      else            set( index, null as Properties )

    method set( key:String, new_value:Properties )    [native]
    method set( key:String, new_value:Integer )       [native]
    method set( key:String, new_value:Logical )       [native]
    method set( key:String, new_value:Real )          [native]
    method set( key:String, new_value:String )        [native]

    method set( key:String, new_value:Object )
      if (new_value?) set( key, new_value->String )
      else            set( key, null as Properties )

    method to->Integer
      return count

    method to->Logical
      return count?

    method to->Real
      return count

    method to->String                                 [native]

    method type_name->String
      return "Properties"
endClass

class PropertyList : Properties [functional dynamicAccess]
  METHODS
    method create->PropertyList [native]

    method type_name->String
      return "PropertyList"
endClass

augment $DataType[]
  METHODS
    method to->Properties
      return this->PropertyList

    method to->PropertyList
      local list = PropertyList()
      forEach (value in this) list.add( value )
      return list
endAugment


class PropertyTable : Properties [functional dynamicAccess]
  METHODS
    method create->PropertyTable [native]

    method type_name->String
      return "PropertyTable"
endClass

class JSON
  METHODS
    method parse_table( st:String )->PropertyTable [native]
    method parse_list( st:String )->PropertyList   [native]

    method parse_list( buffer:StringBuilder )->PropertyTable
      return parse_list( buffer->String )

    method parse_list( buffer:StringBuilder )->PropertyList
      return parse_list( buffer->String )

    #method save( file:File, table:PropertyTable )
    #method save( file:File, list:PropertyList )
    #method load( file:File )->PropertyValue
    #method load_table( file:File )->PropertyTable
    #method load_list( file:File )->PropertyList
    #method parse( st:String )->PropertyValue

endClass

$[endIf]

augment String
  METHODS
    method to->PropertyList
      # Must include Standard.bard.
      local result = JSON.parse_list( this )
      if (result?) return result
      return PropertyList()

    method to->PropertyTable
      # Must include Standard.bard.
      local result = JSON.parse_table( this )
      if (result?) return result
      return PropertyTable()
endAugment
