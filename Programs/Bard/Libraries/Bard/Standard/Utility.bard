#==============================================================================
# Integer64
#==============================================================================
compound Integer64( as_real:Real )
  METHODS
    method create( high:Integer, low:Integer ) [native]

    method high->Integer [native]

    method low->Integer  [native]

    method operator+( lhs:Integer64, rhs:Integer64 )->Integer64 [native]
    method operator-( lhs:Integer64, rhs:Integer64 )->Integer64 [native]
    method operator*( lhs:Integer64, rhs:Integer64 )->Integer64 [native]
    method operator/( lhs:Integer64, rhs:Integer64 )->Integer64 [native]

    method operator&( lhs:Integer64, rhs:Integer64 )->Integer64
      return Integer64( lhs.high & rhs.high, lhs.low & rhs.low )

    method operator|( lhs:Integer64, rhs:Integer64 )->Integer64
      return Integer64( lhs.high | rhs.high, lhs.low | rhs.low )

    method operator~( lhs:Integer64, rhs:Integer64 )->Integer64
      return Integer64( lhs.high ~ rhs.high, lhs.low ~ rhs.low )

    method operator!->Integer64
      return Integer64( !high, !low )

    method to->Real [native]
endCompound


#==============================================================================
# Interval
#==============================================================================
compound Interval( src:Real, dest:Real )
  METHODS
    method at( t:Real )->Real
      return src + (dest - src) * t
endCompound


#==============================================================================
# Range
#==============================================================================
class Range<<$DataType>> : Reader<<$DataType>>
  PROPERTIES
    first   : $DataType
    last    : $DataType
    step    : $DataType
    current : $DataType

  METHODS
    method init( first, last )
      step = 1
      current = first

    method init( first, last, step )
      current = first

    method has_another->Logical
      if (step > 0) return current <= last
      else          return current >= last

    method read->$DataType
      local result = current
      current += step
      return result

    method to->$DataType[]
      local list = $DataType[]
      forEach (n in this) list.add( n )
      current = first
      return list
endClass

