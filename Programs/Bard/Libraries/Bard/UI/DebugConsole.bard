class DebugConsole : StdOut [singleton]
  PROPERTIES
    font  : Font
    
    lines = String[]
    time_until_line_removed = Timer(5)

    alpha : Real

  METHODS
    method add_line( st:String )
      Console.write( st )
      Console.flush

      local i = st.locate( '\n' )
      while (i >= 0)
        lines.add( st.substring(0,i-1) )
        st = st.substring(i+1)
        i = st.locate( '\n' )
      endWhile
      if (st.count?) lines.add( st )

      time_until_line_removed.restart
      alpha = 1.0

    method draw
      if (not lines.count) return

      if (time_until_line_removed.expired)
        alpha -= 0.02
        if (alpha <= 0) lines.clear
      endIf

      if (not font) font = DebugFont
      font.set_defaults

      #Graphics.clear_clip
      font.color = ((alpha * 255)->Integer :<<: 24) | 0xffFFff
      local pos = XY(8,8)
      forEach (line in lines)
        font.draw_text( line, pos )
        pos += XY(0,font.size)
      endForEach

      while (pos.y + font.size >= Graphics.bounds.height and lines.count?)
        lines.remove_first
        pos -= XY(0,font.size)
      endWhile

    method flush->DebugConsole
      if (buffer.count?)
        add_line( buffer->String )
        buffer.clear
      endIf
      return this

    method write( value:StringBuilder )->DebugConsole
      flush
      add_line( buffer->String )
      return this
endClass
