$[include "Alias.bard"]
$[include "Property.bard"]
$[include "Method.bard"]

class Type
  ENUMERATE
    reference_type
    real_type
    integer_type
    character_type
    byte_type
    logical_type
    compound_type

  PROPERTIES
    t               : Token
    name            : String
    x_name          : String
    attributes      = Attributes()

    base_types      = Type[]
    aspects         = Type[]
    generic_base    : Type  # for generic placeholder types only
    target_compound : Type  # for compound functionality singletons only
    element_type    : Type  # for arrays

    extended        : Logical

    incorporating_types : Type[]
      # For aspects only

    index=-1        : Integer

    is_generic_map  : Logical
    is_defined      : Logical

    visiting        : Logical
    organized       : Logical
    resolved        : Logical
    used            : Logical  # this type is actually used in the program, not just referenced by a parameter type

    settings_list   = Property[]
    property_list   = Property[]

    property_table  = Table<<String,Property>>()

    method_list     = Method[]
    methods_by_name = Table<<String,Method[]>>()
    methods_by_signature : Table<<String,Method>>

    aliases         : Alias[]

    new_object_inline_mappings : Table<<String,String>>

    # When part of a compound
    slot_count      : Integer

  METHODS
    method init( t, name )
      Types.add( this )
      if (name.contains('$')) is_generic_map = true

    method x_type->Type
      if (generic_base?) return generic_base.x_type
      return this

    method find_setting( setting_name:String )->Property
      # Recursion guard
      if (visiting) return null

      if (setting_name[0] == '@') setting_name = setting_name.substring(1)

      forEach (setting in settings_list)
        if (setting.name == setting_name) return setting
      endForEach

      visiting = true
      forEach (base_type in base_types)
        if (not base_type.is_aspect)
          local result = base_type.find_setting( setting_name )
          if (result?)
            visiting = false
            return result
          endIf
        endIf
      endForEach

      visiting = false
      return null

    method must_find_setting( t:Token, property_name:String )->Property
      local result = find_setting( property_name )
      if (result?) return result
      #throw t.error( "No such setting '$' in type $." (property_name,name) )
      throw t.error( "No such setting '" + property_name + "' in type " + name + "." )
      return null

    method find_property( property_name:String )->Property
      if (property_name[0] =='@') property_name = property_name.substring(1)

      return property_table[ property_name ]
      #forEach (property in property_list)
      #  if (property.name == property_name) return property
      #endForEach

      #return null

    method must_find_property( t:Token, property_name:String )->Property
      local result = find_property( property_name )
      if (result?) return result
      #throw t.error( "No such property '$' in type $." (property_name,name) )
      throw t.error( "No such property '" + property_name + "' in type " + name + "." )
      return null

    method find_method( name:String, param_count:Integer )->Method
      forEach (m in method_list)
        if (m.parameters.count == param_count and m.name == name) return m
      endForEach
      return null

    method find_method( signature:String, return_type:Type )->Method
      if (methods_by_signature?) return methods_by_signature[ signature ]

      forEach (m in method_list)
        if (m.signature == signature) return m
      endForEach
      return null

    method find_method( signature:String )->Method
      signature = signature.before_first( "->" )

      forEach (m in method_list)
        #println( "2 Checking $ <> $" (m.signature,signature) )
        if (m.signature == signature) return m
      endForEach
      return null

    method find_methods_with_name( name:String )->Method[]
      local result = Method[]
      forEach (m in method_list)
        if (m.name == name) result.add(m)
      endForEach

      if (result.count?) return result

      return null

    method find_or_create_method( name:String, return_type=null:Type )->Method
      local m : Method
      m = find_method( name, 0 )
      if (m?) return m

      m = Method( t, this, name )
      add_method( m )
      m.return_type = return_type

      return m

    method must_find_method( signature:String, return_type:Type )->Method
      if (return_type is null) return must_find_method( signature )

      local m = find_method( signature, return_type )
      if (m?) return m
      #throw Error( "Unable to find required method $::$->$." (name,signature,return_type.name) )
      throw Error( "Unable to find required method " + name + "::" + signature + "->" + return_type.name + "." )

    method must_find_method( signature:String )->Method
      local m = find_method( signature )
      if (m?) return m
      #throw Error( "Unable to find required method $::$." (name,signature) )
      throw Error( "Unable to find required method " + name + "::" + signature + "." )

    method to_String->String
      return name

    method dispatch_name->String
      if (is_reference and this.instance_of(Types.type_Object)) return Types.type_Object.name
      return name

    method dispatch_x_name->String
      if (is_reference and this.instance_of(Types.type_Object)) return Types.type_Object.x_name
      return x_name

    method classification->Integer
      if (is_reference) return reference_type
      if (is_compound)  return compound_type
      if (is_Real)      return real_type
      if (is_Integer)   return integer_type
      if (is_Character) return character_type
      if (is_Byte)      return byte_type
      if (is_Logical)   return logical_type
      #throw Error( "[Internal] Unable to classify type $." (name) )
      throw Error( "[Internal] Unable to classify type " + name + "." )

    method is_class->Logical
      return attributes.is_class

    method is_aspect->Logical
      return attributes.is_aspect

    method is_reference->Logical
      return attributes.is_reference

    method is_compound->Logical
      return attributes.is_compound

    method is_primitive->Logical
      return attributes.is_primitive

    method is_functional->Logical
      return attributes.is_functional

    method is_root_object->Logical
      return (this is Types.type_Object)

    method is_String->Logical
      return this is Types.type_String

    method is_Real->Logical
      return (this is Types.type_Real)

    method is_Integer->Logical
      return (this is Types.type_Integer)

    method is_Character->Logical
      return (this is Types.type_Character)

    method is_Byte->Logical
      return (this is Types.type_Byte)

    method is_Logical->Logical
      return (this is Types.type_Logical)

    method is_integer_family->Logical
      return (this is Types.type_Integer) or (this is Types.type_Character) or (this is Types.type_Byte)

    method is_native->Logical
      return (attributes.flags & Attributes.flag_native)?

    method is_requisite->Logical
      return (attributes.flags & Attributes.flag_requisite)?

    method instance_of( ancestor:Type )->Logical
      if (this is ancestor) return true
      forEach (base_type in base_types)
        if (base_type.instance_of(ancestor)) return true
      endForEach
      return false

    method add_property( p:Property )
      property_list.add( p )

    method add_method( m:Method )
      if (this.attributes.is_requisite_all) m.attributes.add( Attributes.flag_requisite )
      method_list.add( m )

    method organize
      organize( t )

    method organize( ref_t:Token )
      if (organized) return
      organized = true

      # Instantiate template (all class definitions start as templates)
      if (not is_defined)
        is_defined = true
        if (is_generic_map)
          if (not (name[0] == '$' or name.ends_with(']')))
            organized = false
            local templ = Templates[ name.before_first('<') ]
            templ.create_generic_map
          endIf
        else
          Templates.instantiate( ref_t, this )
          if (this is Types.main_type) attributes.add( Attributes.flag_singleton )
        endIf
      endIf

      if (is_aspect and attributes.is_singleton)
        throw t.error( "An aspect cannot be designated [singleton]." )
      endIf

      if (this.is_aspect) incorporating_types = Type[]

      # Organize base types
      local base_class : Type
      forEach (base_type in base_types)
        base_type.organize
        if (base_type.is_class)
          #if (base_class?) throw t.error( "Type $ has multiple base classes including $ and $." (name,base_class.name,base_type.name) )
          if (base_class?) throw t.error( "Type " + name + " has multiple base classes including " + base_class.name + " and " + base_type.name + "." )
          else             base_class = base_type
        endIf
      endForEach

      #println( "$ has base classes $" (name,base_types) )
      if (base_class?)
        base_types.remove( base_class )
        base_types.insert( base_class )
      elseIf (this.is_reference and this isNot Types.type_Object and not this.attributes.is_functional)
        base_class = Types.type_Object
        base_types.insert( base_class )
      endIf

      if (base_types.count?)
        local base_type = base_types.first
        #if (base_type.is_primitive) throw t.error( "Primitive type '$' cannot be extended." (base_type) )
        if (base_type.is_primitive) throw t.error( "Primitive type '" + base_type.name + "' cannot be extended." )
        if (this.is_compound and not base_type.is_compound) throw t.error( "A compound cannot extend a class." )
        if (not this.is_compound and base_type.is_compound) throw t.error( "A class cannot extend a compound." )

        if (base_types.count > 1 and not this.is_reference)
          throw t.error( "Compounds cannot use multiple inheritance." )
        endIf
      endIf

      forEach (base_type in base_types)
        base_type.organize
        base_type.extended = true
        #inherit_aspects( base_type )

        attributes.add( base_type.attributes.flags & Attributes.flag_inheritable )
        if (base_type isNot base_types.first)
          # Must be an aspect
          if (not base_type.is_reference)
            #throw t.error( "Illegal base type '$' - only classes and aspects can base types." (base_type) )
            throw t.error( "Illegal base type '" + base_type.name + "' - only classes and aspects can base types." )
          endIf

          base_type.incorporating_types.add( this )

        endIf
      endForEach

      check_for_cyclic_dependencies( this )

      collect_aliases
      collect_aspects
      collect_settings
      collect_properties

      if (property_list.count? and attributes.is_native)
        throw property_list.first.t.error( "A native class cannot define Bard-side properties." )
      endIf

      # Set up slot info for compounds
      if (is_compound)
        forEach (p in property_list)
          p.type.organize( t )
          p.slot_index = slot_count
          slot_count += p.type.slot_count
        endForEach
      else
        slot_count = 1
      endIf

      # Assign types and values to autoinitializing parameters
      forEach (m in method_list)
        local i = m.parameters.count - 1
        while (i >= 0)
          local parameter = m.parameters[i]
          if (parameter.type is null)
            if (m.attributes.is_native or this.is_native)
              throw parameter.t.error( "Auto-initializing parameters are not allowed in native types and methods." )
            endIf

            if (not parameter.is_direct and m.name.begins_with("set_") and m.name.substring_equals(4,parameter.name))
              throw parameter.t.error( "Auto-initializing parameter will result in recursive call to set_$()().  Write \"@$\"instead of \"$\"." (parameter.name,parameter.name,parameter.name) )
            endIf

            #if (m.is_task)
            #throw parameter.t.error( "Auto-initializing parameters are not allowed in tasks." )
            #endIf

            local property = find_property( parameter.name )
            if (property?)
              local pt = parameter.t
              local temp_name = "." + parameter.name
              parameter.type = property.type
              if (not this.is_compound)
                local target_name = parameter.name
                if (parameter.is_direct) target_name = "@" + target_name
                m.body.insert( CmdAssign( pt, CmdAccess(pt,target_name), CmdAccess(pt,temp_name) ) )
              endIf
              parameter.name = temp_name
            else
              #throw parameter.t.error( "No such property for auto-initializing parameter '$'." (parameter.name) )
              throw parameter.t.error( "No such property for auto-initializing parameter '" + parameter.name + "'." )
            endIf
          endIf
          --i
        endWhile
      endForEach

      if (is_compound) organize_compound

      create_init_settings_method
      create_init_defaults_method

      forEach (plugin in BCC.plugins)
        plugin.prepare_methods( this )
      endForEach

      create_marshalling_methods

      # Inherit methods
      collect_methods

      # Organize methods
      methods_by_signature = Table<<String,Method>>()
      forEach (m in method_list)
        m.organize
        methods_by_signature[ m.signature ] = m
      endForEach

      if (is_native)
        local m_trace_native = find_method( "trace_native(Object)" )
        if (m_trace_native?) m_trace_native.attributes.add( "requisite" )
      endIf

      #method inherit_aspects( base_type:Type )
      #if (base_type.is_aspect and not base_types.contains(base_type)) 
      #base_types.add( base_type )
      #endIf
      #forEach (base_base_type in base_type.base_types) inherit_aspects( base_base_type )

    method check_for_cyclic_dependencies( starting_type:Type )
      #if (visiting) throw starting_type.t.error( "Cyclic dependency detected between types $ and $." (starting_type,name) )
      if (visiting) throw starting_type.t.error( "Cyclic dependency detected between types " + starting_type + " and " + name + "." )
      visiting = true
      forEach (base_type in base_types) base_type.check_for_cyclic_dependencies( starting_type )
      visiting = false

    method organize_compound

    method collect_aliases
      local list = Alias[]
      forEach (base_type in base_types) base_type.collect_aliases( list, this )
      collect_aliases( list, this )
      if (list.count?) aliases = list

    method collect_aliases( list:Alias[], for_type:Type )->Alias[]
      if (aliases?)
        forEach (a in aliases) 
          collect_alias( list, a )
        endForEach
      endIf
      return list

    method collect_alias( list:Alias[], a:Alias )
      forEach (i of list)
        local existing_a = list[i]
        if (a.name == existing_a.name and a.arg_names.count == existing_a.arg_names.count)
          list[i] = a
          return
        endIf
      endForEach
      list.add( a )

    method collect_aspects
      aspects.clear
      collect_aspects( this )

    method collect_aspects( type:Type )
      if (type.is_aspect and not aspects.contains(type)) aspects.add( type )

      forEach (base_type in type.base_types) collect_aspects( base_type )

    method collect_settings
      # Re-collect settings to ensure no duplicates
      settings_list = collect_settings( Property[]() )

    method collect_settings( list:Property[] )->Property[]
      forEach (p in settings_list) collect_setting( list, p )
      return list

    method collect_setting( list:Property[], p:Property )
      local p_name = p.name
      local p_index = 0
      forEach (existing_p in list)
        if (existing_p.name == p_name)
          if (p.type is null) p.type = existing_p.type
          if (p.type isNot existing_p.type)
            #throw p.t.error( "Cannot redefine setting '$' with a different type." (p.name) )
            throw p.t.error( "Cannot redefine setting '" + p.name + "' with a different type." )
          endIf
          #if (p.type_context is existing_p.type_context) throw p.t.error( "Duplicate definition of '$'." (p_name) )
          if (p.type_context is existing_p.type_context) throw p.t.error( "Duplicate definition of '" + p_name + "'." )
          p.prior_declaration = existing_p
          list[ p_index ] = p
          return
        endIf
        ++p_index
      endForEach
      list.add( p )

    method collect_properties
      local list = Property[]
      forEach (base_type in base_types) base_type.collect_properties( list, this )
      collect_properties( list, this )
      property_list = list

      property_table.clear
      forEach (p in property_list) property_table[p.name] = p

    method collect_properties( list:Property[], for_type:Type )->Property[]
      forEach (p in property_list) 
        if (p.type_context.is_aspect and p.type_context isNot for_type) p = p.clone_for_type( for_type )
        collect_property( list, p )
      endForEach
      return list

    method collect_property( list:Property[], p:Property  )
      local setting = find_setting( p.name )
      if (setting?)
        #throw p.t.error( "A setting named '$' already exists." (p.name) )
        throw p.t.error( "A setting named '" + p.name + "' already exists." )
      endIf

      local p_name = p.name
      local p_index = 0
      forEach (existing_p in list)
        if (existing_p.name == p_name)
          if (p.type is null) p.type = existing_p.type
          if (p.type isNot existing_p.type)
            #throw p.t.error( "Cannot redefine '$' with a different type." (p.name) )
            throw p.t.error( "Cannot redefine '" + p.name + "' with a different type." )
          endIf
          #if (p.type_context is existing_p.type_context) throw p.t.error( "Duplicate definition of '$'." (p_name) )
          if (p.type_context is existing_p.type_context) throw p.t.error( "Duplicate definition of '" + p_name + "'." )
          p.prior_declaration = existing_p
          list[ p_index ] = p
          return
        endIf
        ++p_index
      endForEach
      list.add( p )

    method cull_unused_base_types_and_unreferenced_methods
      local dest_i = 0
      forEach (base_type in base_types)
        if (base_type.used) base_types[dest_i] = base_type; ++dest_i
      endForEach
      base_types.discard_from( dest_i )

      dest_i = 0
      forEach (m in method_list)
        if (m.referenced) method_list[dest_i] = m; ++dest_i
      endForEach
      method_list.discard_from( dest_i )

    method collect_methods
      local list = Method[]
      forEach (base_type in base_types)
        base_type.collect_methods( this, list )
      endForEach
      collect_methods( this, list )
      method_list = list

      forEach (m in method_list)
        local list = methods_by_name[ m.name ]
        if (list is null)
          list = Method[]
          methods_by_name[ m.name ] = list
        endIf
        list.add( m )
      endForEach

    method collect_methods( for_type:Type , list:Method[] )
      forEach (m in method_list)
        collect_method( for_type, list, m )
      endForEach

    method collect_method( for_type:Type, list:Method[], m:Method )
      # Methods with overloaded return types perform strict overrides (full signatures must match).
      # Methods without overloaded return types perform covariant overrides - an extended method
      # with a compatible but more specialized return type will overload a base method with a
      # matching call signature but more general return type.
      if (m.type_context.is_aspect)
        # Clone the aspect method before incorporating.
        m = m.clone_for_type( for_type )
      else
        # Don't collect methods that this aspect inherits from Object.
        if (this.is_aspect) return
      endIf

      local signature = m.signature
      local m_index = 0
      forEach (existing_m in list)
        if (existing_m.signature == signature)
          if (existing_m is m) return  # Can happen when a generic inherits generic base methods AND default Object methods

          if (m.return_type is null)
            if (m.is_initializer)
              m.return_type = m.type_context
              m.invalidate_signatures
            elseIf (existing_m.return_type?)
              if (existing_m.return_type.is_reference and not existing_m.return_type.is_functional)
                throw m.t.error( "Override method return type must be compatible with prior return type '$'." (existing_m.return_type.name) )
              else
                throw m.t.error( "Override method return type should be prior return type '$'." (existing_m.return_type.name) )
              endIf
            endIf
          elseIf (existing_m.return_type is null)
            throw m.t.error( "Cannot override a nil-returning method with a value-returning method." )
          endIf

          # Override.  The method return types are not necessarily organized yet, nor can they be without
          # messing up the recursive base class organize-and-inherit.  We'll need to check back later
          # in Method::resolve() and make sure the return type override is okay. #TODO
          m.prior_method = list[ m_index ]
          m.prior_method.overridden = true
          list[ m_index ] = m
          return

          #{
          if (m.is_initializer or m.return_type is existing_m.return_type)
            # Exact match
            m.prior_method = list[ m_index ]
            m.prior_method.overridden = true
            list[ m_index ] = m
            return
          else
            # Compatible match
            if (m.return_type.instance_of(existing_m.return_type))
              if (existing_m.return_type.instance_of(m.return_type))
                throw m.t.error( "A method that differs only by return type cannot override a more specialized return type with a more general return type." )
              endIf

              m.prior_method = list[ m_index ]
              m.prior_method.overridden = true
              list[ m_index ] = m
              return
            endIf
          endIf
          }#
        endIf

        ++m_index
      endForEach

      # No match - add/inherit method
      if (m.attributes.is_propagated)
        if (m.type_context isNot for_type) m = m.clone_for_type( for_type )
      endIf

      list.add( m )

    method contains_tag( tag:String )->Logical
      return attributes.tags.contains( tag )

    method create_init_settings_method
      # Create or modify an init_settings() method
      if (generic_base?) return

      if (settings_list.count == 0) return

      local m = find_method( "init_settings()" )
      if (m is null)
        m = Method( t, this, "init_settings" )
        add_method( m )
        #m.mark_requisite
      endIf

      local i = settings_list.count - 1
      while (i >= 0)
        local s = settings_list[i]
        if (s.initial_value?)
          m.body.insert(
            CmdAssign( s.t,
              CmdAccess( s.t, s.name, null ),
              s.initial_value
            )
          )
        endIf
        --i
      endWhile

    method create_init_defaults_method
      # Add init_defaults() method with initial property values where specified
      if (generic_base is null and not is_aspect)
        local m_init_defaults = find_method( "init_defaults()" )
        local requires_add = false
        if (m_init_defaults is null)
          m_init_defaults = Method( t, this, "init_defaults" )
          requires_add = true
        endIf
        m_init_defaults.return_type = this
        m_init_defaults.invalidate_signatures

        local i = property_list.count - 1
        while (i >= 0)
          local property = property_list[i]
          if (property.initial_value? and (property.type_context is this or property.type_context.is_aspect))
            m_init_defaults.body.insert( CmdWriteProperty(t,null,property,property.initial_value) )
          endIf
          --i
        endWhile

        if (base_types.count?)
          i = base_types.count - 1
          while (i >= 0)
            local base_type = base_types[i]
            local existing_m = base_type.find_method( "init_defaults()" )
            if (existing_m? and existing_m.body.count?)
              m_init_defaults.body.insert( CmdAnonymousBlock( existing_m.t, existing_m.body.clone ) )
            endIf
            --i
          endWhile

          #m_init_defaults.body.insert( CmdStaticCall(t,null,base_types.first.must_find_method("init_defaults()") ) )
        endIf

        if (requires_add)
          if (m_init_defaults.body.count?) 
            add_method( m_init_defaults )
            #m_init_defaults.mark_requisite
          endIf
        endIf

      endIf

    method create_marshalling_methods
      if (not attributes.is_marshalling) return

      if (Types.type_PropertyTable is null)
        Types.type_PropertyTable = Types.reference( t, "PropertyTable" )
        Types.type_PropertyList  = Types.reference( t, "PropertyList" )
      endIf

      local table_name = "table"

      # init(PropertyTable) constructor
      local m = find_method( "init(PropertyTable)" )
      local existing_body : CmdStatementList
      if (m is null)
        m = Method( t, this, "init" )
        add_method( m )

        while (find_property(table_name)?) table_name = "_" + table_name
        m.add_parameter( Local(t,table_name,Types.type_PropertyTable) )

      else
        existing_body = m.body
        m.body = CmdStatementList()
        table_name = m.parameters.first.name
      endIf

      forEach (p in property_list)
#if (p.attributes.omit) println( "Omitting " + p.name )
        if (not p.attributes.omit)
          local cmd_if = CmdIf( CmdAccess(p.t,table_name,"contains",CmdArgs(CmdLiteralString(p.t,p.name))) )

          local cmd = create_extraction_cmd( m, p.t, cmd_if.body, table_name, CmdLiteralString(p.t,p.name), p.type )
          if (cmd?) cmd_if.body.add( CmdAssign( p.t, p.name, cmd ) )

          m.body.add( cmd_if )
        endIf
      endForEach

      if (existing_body?)
        forEach (cmd in existing_body) m.body.add( cmd )
      endIf

      # to->PropertyTable
      m = find_method( "to_PropertyTable()" )
      if (m is null)
        m = Method( t, this, "to_PropertyTable" )
        m.return_type = Types.type_PropertyTable
        add_method( m )

        table_name = "table"
        while (find_property(table_name)?) table_name = "_" + table_name

        local v = Local( t, table_name, Types.type_PropertyTable )
        m.add_local( v )
        m.body.add( CmdLocalDeclaration(t,v) )

        m.body.add( CmdAssign( t, table_name, CmdNewObject(t,Types.type_PropertyTable) ) )
        m.body.add( CmdAccess( t, "store", CmdArgs(CmdAccess(t,table_name)) ) )
        m.body.add( CmdReturnValue( t, CmdAccess( t, table_name ) ) )
      endIf


      # store(PropertyTable)
      m = find_method( "store(PropertyTable)" )
      if (m is null)
        m = Method( t, this, "store" )
        add_method( m )
        existing_body = null

        table_name = "table"
        while (find_property(table_name)?) table_name = "_" + table_name
        m.add_parameter( Local(t,table_name,Types.type_PropertyTable) )

      else
        existing_body = m.body
        m.body = CmdStatementList()
        table_name = m.parameters.first.name
      endIf

      forEach (p in property_list)
        if (not p.attributes.omit)
          local dest_body : CmdStatementList
          if (p.type.is_reference)
            local cmd_if = CmdIf( p.t, CmdLogicalize(p.t,CmdAccess(p.t,p.name)) )
            m.body.add( cmd_if )
            dest_body = cmd_if.body
          else
            dest_body = m.body
          endIf

          dest_body.add( CmdAccess( p.t, table_name, 
            "set", CmdArgs( CmdLiteralString(p.t,p.name), create_value_cmd(m,dest_body,p.t,p.name,p.type) ) ) )
        endIf
      endForEach

      if (existing_body?)
        forEach (cmd in existing_body) m.body.add( cmd )
      endIf


    method create_extraction_cmd( m:Method, p_t:Token, body:CmdStatementList, table_name:String, index_cmd:Cmd, p_type:Type )->Cmd
      local get_name : String
      if (p_type.is_Real)
        get_name = "get_Real"
      elseIf (p_type.is_Integer or p_type.is_Byte)
        get_name = "get_Integer"
      elseIf (p_type.is_String)
        return CmdAccess( CmdAccess(p_t,table_name,"get_String",CmdArgs(index_cmd)), "consolidated" )
      elseIf (p_type.is_Logical)
        get_name = "get_Logical"
      elseIf (p_type is Types.type_PropertyList )
        get_name = "get_PropertyList"
      elseIf (p_type is Types.type_PropertyTable )
        get_name = "get_PropertyTable"
      elseIf (p_type.is_Character)
        throw p_t.error( "Character properties are not supported in automatic marshaling." )

      elseIf (p_type.name.ends_with("[]"))
        local dest_list_name = "_list_" + Analyzer.unique_id
        local v = Local(p_t,dest_list_name,p_type)
        m.add_local( v )
        body.add( CmdLocalDeclaration(p_t,v) )
        body.add( CmdAssign( p_t, dest_list_name, CmdNewObject(p_t,p_type) ) )  # new list object

        local src_list_name = "_property_list_" + Analyzer.unique_id
        v = Local(p_t,src_list_name,Types.reference(p_t,"PropertyList"))
        m.add_local( v )
        body.add( CmdLocalDeclaration(p_t,v) )
        body.add( CmdAssign( p_t, src_list_name, CmdAccess( p_t, table_name, "get_PropertyList", CmdArgs(index_cmd) ) ) )

        local cur_index_name = "_cur_index_" + Analyzer.unique_id
        local cmd_forEach = CmdForEachIndexOfCollection( p_t, p_t, cur_index_name, CmdAccess(p_t,src_list_name) )
        local sub_type = Types.reference( p_t, p_type.name.before_last('[') )
        sub_type.organize

        cmd_forEach.body.add( CmdAccess(p_t,dest_list_name,"add",
          CmdArgs( create_extraction_cmd( m, p_t, cmd_forEach.body, src_list_name, CmdAccess(p_t,cur_index_name), sub_type ) )
        ))

        body.add( cmd_forEach )

        return CmdAccess( p_t, dest_list_name )

      elseIf (p_type.name.begins_with("Table<<"))
        local dest_table_name = "_list_" + Analyzer.unique_id
        local v = Local(p_t,dest_table_name,p_type)
        m.add_local( v )
        body.add( CmdLocalDeclaration(p_t,v) )
        body.add( CmdAssign( p_t, dest_table_name, CmdNewObject(p_t,p_type) ) )  # new table object

        local src_table_name = "_property_table_" + Analyzer.unique_id
        v = Local(p_t,src_table_name,Types.reference(p_t,"PropertyTable"))
        m.add_local( v )
        body.add( CmdLocalDeclaration(p_t,v) )
        body.add( CmdAssign( p_t, src_table_name, CmdAccess( p_t, table_name, "get_PropertyTable", CmdArgs(index_cmd) ) ) )

        local cur_key_name = "_cur_key_" + Analyzer.unique_id
        local cur_key_string_name = "_cur_key_" + Analyzer.unique_id
        local cmd_forEach = CmdForEachElementInCollection( p_t, p_t, cur_key_name, CmdAccess(p_t,src_table_name,"keys") )
        local key_type   = Types.reference( p_t, p_type.name.after_first("<<").before_first(',') )
        local value_type = Types.reference( p_t, p_type.name.after_first(',').before_first('>') )
        key_type.organize
        value_type.organize

        v = Local(p_t,cur_key_string_name,Types.type_String)
        m.add_local( v )
        cmd_forEach.body.add( CmdLocalDeclaration(p_t,v) )
        cmd_forEach.body.add( CmdAssign( p_t, cur_key_string_name, CmdAccess(p_t, cur_key_name, "to_String") ) )

        cmd_forEach.body.add( CmdAccess(p_t,dest_table_name,"set",
          CmdArgs( 
            CmdAccess( p_t, cur_key_name, "to_" + key_type.name ),
            create_extraction_cmd( m, p_t, cmd_forEach.body, src_table_name, CmdAccess(p_t,cur_key_string_name), value_type )
          )
        ))

        body.add( cmd_forEach )

        return CmdAccess( p_t, dest_table_name )

      else
        local args = CmdArgs( CmdAccess(p_t,table_name,"get_PropertyTable",CmdArgs(index_cmd)) )
        return CmdNewObject( p_t, p_type, args )
      endIf

      return CmdAccess(p_t,table_name,get_name,CmdArgs(index_cmd))


    method create_value_cmd( m:Method, body:CmdStatementList, p_t:Token, p_name:String, p_type:Type )->Cmd
      if (p_type.is_Character)
        throw p_t.error( "Character properties are not supported in automatic marshaling." )

      elseIf (p_type.is_primitive or p_type.is_String or p_type is Types.type_PropertyList or p_type is Types.type_PropertyTable)
        return CmdAccess( p_t, p_name )

      elseIf (p_type.name.ends_with("[]"))
        # Create dest PropertyList to store values
        local dest_list_name = "_list_" + Analyzer.unique_id
        local v = Local(p_t,dest_list_name,Types.type_PropertyList)
        m.add_local( v )
        body.add( CmdLocalDeclaration(p_t,v) )
        body.add( CmdAssign( p_t, dest_list_name, CmdNewObject(p_t,Types.type_PropertyList) ) )  # new list object

        local cur_value_name = "_cur_value_" + Analyzer.unique_id
        local cmd_forEach = CmdForEachElementInCollection( p_t, p_t, cur_value_name, CmdAccess(p_t,p_name) )

        local sub_type = Types.reference( p_t, p_type.name.before_last('[') )
        sub_type.organize

        cmd_forEach.body.add( CmdAccess(p_t,dest_list_name,"add",
          CmdArgs( create_value_cmd( m, cmd_forEach.body, p_t, cur_value_name, sub_type ) )
        ))

        body.add( cmd_forEach )

        return CmdAccess( p_t, dest_list_name )

      elseIf (p_type.name.begins_with("Table<<"))
        # Create dest PropertyTable to store values
        local dest_table_name = "_table_" + Analyzer.unique_id
        local v = Local(p_t,dest_table_name,Types.type_PropertyTable)
        m.add_local( v )
        body.add( CmdLocalDeclaration(p_t,v) )
        body.add( CmdAssign( p_t, dest_table_name, CmdNewObject(p_t,Types.type_PropertyTable) ) )  # new table object

        local cur_key_name = "_cur_key_" + Analyzer.unique_id
        local cmd_forEach = CmdForEachElementInCollection( p_t, p_t, cur_key_name, CmdAccess(p_t,p_name,"keys") )

        local value_type = Types.reference( p_t, p_type.name.after_first(',').before_last(">>") )
        value_type.organize

        local cur_value_name = "_cur_value_" + Analyzer.unique_id
        local v = Local(p_t,cur_value_name,value_type)
        m.add_local( v )
        cmd_forEach.body.add( CmdLocalDeclaration(p_t,v) )
        cmd_forEach.body.add( CmdAssign( p_t, cur_value_name, CmdAccess(p_t,p_name,"get",CmdArgs(CmdAccess(p_t,cur_key_name))) ) )

        cmd_forEach.body.add( CmdAccess(p_t,dest_table_name,"set",
          CmdArgs( 
            CmdAccess(p_t,cur_key_name), 
            create_value_cmd( m, cmd_forEach.body, p_t, cur_value_name, value_type )
            )
        ))

        body.add( cmd_forEach )

        return CmdAccess( p_t, dest_table_name )

      else
        return CmdAccess( p_t, p_name, "to_PropertyTable" )

      endIf

    method mark_used->Type
      used = true
      return this

    method mark_dependency_types_used
      if (visiting) return
      visiting = true

      used = true

      if (generic_base?) generic_base.mark_dependency_types_used
      if (element_type?) element_type.mark_dependency_types_used

      # Resolve base types
      if (resolved)
        forEach (base_type in base_types) base_type.mark_dependency_types_used

        # Resolve property types
        forEach (p in property_list) p.type.mark_dependency_types_used
      endIf

      visiting = false

    method resolve->Type
      return resolve( null )

    method resolve( ref_t:Token )->Type
      if (resolved) return this
      resolved = true

      if (ref_t is null) ref_t = t
      organize( ref_t )

      # Resolve base types
      forEach (base_type in base_types) base_type.resolve

      # Resolve property types
      forEach (p in property_list) p.type.resolve

      # Add requisite methods to pending list
      forEach (m in method_list)
        if (m.name == "destroy") m.attributes.add( Attributes.flag_requisite )

        if (m.is_requisite) m.mark_referenced

        #if (not Analyzer.methods_by_signature.contains(m.signature))
        #  Analyzer.methods_by_signature[m.signature] = Method[]
        #endIf
        #Analyzer.methods_by_signature[m.signature].add( m )

      endForEach

      if (this.instance_of(Types.type_GenericArray) and this isNot Types.type_GenericArray)
        element_type = find_method( "get(Integer)" ).return_type
        element_type.mark_used
      endIf

      return this

    method print
      print( "class " + name )
      println

      if (property_list.count?)
        println( "  PROPERTIES" )
        forEach (p in property_list)
          p.print
        endForEach
        println
      endIf

      println( "  METHODS" )
      local i = 0
      while (i < method_list.count)
        method_list[i].print(i)
        println
        ++i
      endWhile

    method print_method( signature:String )
      local m = find_method( signature )
      m.print( m.local_index )

    method x_name->String
      if (@x_name is null) @x_name = Analyzer.convert_string_to_valid_identifier( name )
      return @x_name
endClass


