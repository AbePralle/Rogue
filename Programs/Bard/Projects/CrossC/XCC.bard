#$[include "Analyzer.bard"]
#$[include "Parser.bard"]
#$[include "BCCPlugin.bard"]

$[include "Standard/Standard.bard"]

$[include "Tokenizer.bard"]

class XCC [singleton]
  METHODS
    method init
      local filepath = Runtime.command_line_arguments[ 0 ]
      println "Compiling $" (filepath)

      Keywords
      Tokenizer
      local tokens = Tokenizer().tokenize( filepath )
      println tokens

#{
  PROPERTIES
    main_filepath        : String
    output_filepath      : String
    source_folders       = String[]
    includes             = String[]
    target = "c"         : String
    target_rules         : String
    platform = "console" : String

#{
    plugins              : BCCPlugin[]
    # A requisite singleton may call XCC.add_plugin(BCCPlugin) which
      # will set this list up.  Otherwise it will be set up in init().
      }#

  METHODS
    method init
      #if (plugins is null) plugins = BCCPlugin[]

      try
        process_args
        if (main_filepath is null or main_filepath.ends_with(".c"))
          println //USAGE//
          println
          println //  bard XCC.bc main_filepath.xc//
          return
        endIf

        local stopwatch = Stopwatch()

        println "XCC> Compiling " + main_filepath

        #{
        local parser = Parser()
        parser.include( main_filepath )
        forEach (filepath in includes) parser.include( filepath )
        parser.parse_pending_files
        Analyzer.resolve_types

        which (target)
          case "bc"
            Analyzer.compile_bc( output_filepath )

          case "js", "html"
            Analyzer.compile_js( output_filepath )

          case "cpp"
            Analyzer.compile_cpp( output_filepath )
        endWhich
        }#

        println "XCC> Compiled to " + output_filepath + " in " + stopwatch + " seconds."

      catch ( err:Error )
        println
        #println "=" * 79
        #println "ERROR"
        #print   "  "
        println err
        #println "=" * 79
        #println err.stack_trace
        Runtime.exit(1)
      endTry

      #{
    method add_plugin( plugin:BCCPlugin )
      if (plugins is null) plugins = BCCPlugin[]
      plugins.add( plugin )
      }#

    method add_source_folder( path:String )
      path = File.absolute_filepath( path )
      if (not (path.ends_with('/') or path.ends_with('\\'))) path += '/'
      if (not source_folders.contains(path)) source_folders.add( path )

    method process_args
      local i = 0
      while (i < Runtime.command_line_arguments.count)
        local arg = Runtime.command_line_arguments[i]

        local param = ""
        if (arg.begins_with("--") and arg.contains('='))
          param = arg.after_first('=')
          param = trim_quotes( param )
          arg = arg.before_first('=')
        endIf

        which (arg)
        #{
          case "--define"
            local filename = "[Command Line Argument]"
            if (param.contains(':'))
              local params = param.split(':')
              Keywords.define( params[0], Token[](1).add( StringToken(filename,0,0,params[1]) ) )
            else
              Keywords.define( param, Token[](0) )
            endIf

          case "--include"
            if (param == "") throw Error( "Invalid filepath; must specify '--include=filename.bard' or similar." )

            if     (param.contains(';')) includes.add( param.split(';') )
            elseIf (param.contains(':')) includes.add( param.split(':') )
            else   includes.add( param )

          case "--output"
            if (param == "") throw Error( "Invalid filepath; must specify '--output=filename.bc' or similar." )
            output_filepath = param

          case "--platform"
            # For "--platform=mac":
            # - Define PLATFORM_MAC true
            # - Define PLATFORM     "mac"
            if (param.count?) platform = param

          case "--source-folder", "--source-folders"
            if (param.contains(';'))
              forEach (folder in param.split(';')) add_source_folder( folder )
            elseIf (param.contains(':'))
              forEach (folder in param.split(':')) add_source_folder( folder )
            else
              add_source_folder( param )
            endIf

          case "--target"
            # For "--target=bc" the following will be defined
            # - Define TARGET_BC true
            # - Define TARGET    "bc"
            target = param
            if (target!="bc" and target!="js" and target!="cpp" and target!="html") 
              throw Error( "Invalid compile target; must specify '--target=[bc|js|html]'." )
            endIf

          case "--custom"
            # For "--custom=js" the file "Custom.js" will be the default (and optional)
            # ruleset for cross-compilation (etc.).  You can specify an explicit override here.
            if (param?)
              target_rules = param
            endIf
            }#

          others
            if (arg.begins_with("--"))
              throw Error( "Unknown option $." (arg) )
            endIf

            if (main_filepath?)
              throw Error( //Multiple candidates for initial filepath including "// + main_filepath + //" and "// + arg + //".// )
            else
              main_filepath = arg
            endIf
        endWhich
        ++i
      endWhile

      #{
      local filename = "[Compiler Directive]"
      local def = Token[](1).add( Token(filename,0,0,Token.literal_Logical_true) )

      Keywords.define( "PLATFORM_" + platform.to_uppercase, def )
      Keywords.define( "PLATFORM", Token[](1).add( StringToken(filename,0,0,platform) ) )

      def = Token[](1).add( Token(filename,0,0,Token.literal_Logical_true) )
      Keywords.define( "TARGET_" + target.to_uppercase, def )
      Keywords.define( "TARGET", Token[](1).add( StringToken(filename,0,0,target) ) )

      if (target == "html")
        # Add "TARGET_JS" definition as well.
        def = Token[](1).add( Token(filename,0,0,Token.literal_Logical_true) )
        Keywords.define( "TARGET_JS", def )
      endIf

      if (main_filepath is null) return

      if (output_filepath is null)
        which (target)
          case "bc": output_filepath = main_filepath.before_first(".bard") + ".bc"
          case "html": output_filepath = main_filepath.before_first(".bard") + ".html"
          case "js":   output_filepath = main_filepath.before_first(".bard") + ".js"
          case "cpp": output_filepath = main_filepath.before_first(".bard") + ".cpp"
          others:    throw Error( "Unsupported compile target '" + target + "'." )
        endWhich
      endIf

      if (target_rules is null) target_rules = "Custom." + target
      }#

    method trim_quotes( st:String )->String
      if (st.begins_with('"') or st.begins_with('\'')) st = st.rightmost(-1)
      if (st.ends_with('"') or st.ends_with('\''))     st = st.leftmost(-1)
      return st

      #method get_arg( index:Integer, error_message:String )->String
      #  if (index >= Runtime.command_line_arguments.count)
      #    throw Error( //Output filepath expected.  For example: --output AppName.bc// )
      #  endIf
      #  return Runtime.command_line_arguments[ index ]
      }#

endClass

