$[include "Visitor.bard"]
$[include "BCWriter.bard"]
$[include "JSWriter.bard"]
$[include "CPPWriter.bard"]
$[include "TargetRules.bard"]

class Analyzer [singleton]
  PROPERTIES
    context       : Context
    context_stack = Context[]

    pending_methods = Method[]  # methods awaiting resolution

    method_list     = Method[]  # all methods in use

    #methods_by_signature = Table<<String,Method[]>>()

    empty_args    = CmdArgs()

    next_unique_id : Integer

    target_rules = TargetRules()

  METHODS
    method unique_id->String
      ++next_unique_id
      return ""+next_unique_id

    method resolve_types
      Types.resolve

      # Mark types with an destroy() as requiring cleanup.
      forEach (type in Types.type_list)
        local m = type.find_method( "destroy()" )
        if (m?) 
          if (m.return_type?) throw m.t.error( "destroy() cannot have a return value." )
          type.attributes.add( Attributes.flag_requires_cleanup )
        endIf
      endForEach

      target_rules.load( Cyber.target_rules )

      # Assign property and method indices
      local next_method_index = 0
      forEach (type in Types.type_list)
        if (type.is_generic_map) nextIteration

        # Settings index
        local setting_index = 0
        while (setting_index < type.settings_list.count)
          type.settings_list[setting_index].index = setting_index
          ++setting_index
        endWhile

        # Property index
        local property_index = 0
        while (property_index < type.property_list.count)
          type.property_list[property_index].index = property_index
          ++property_index
        endWhile

        # Method index
        local next_local_method_index = 0
        forEach (m in type.method_list)
          if (m.referenced)
            if (m.global_index == -1)
              if (m.generic_base_signature is null)
                m.global_index = next_method_index
                ++next_method_index
                method_list.add( m )
              endIf
            endIf
            #else
            #println "Unreferenced method " + m.context_signature
          endIf
          m.local_index = next_local_method_index
          ++next_local_method_index  # unreferenced methods still take a slot for vtable purposes
        endForEach
      endForEach

      # Count number of local and object context accesses for methods with
      # just one statement.
      #{
      local counter = AccessCountingVisitor()
      forEach (m in method_list)
        if (m.referenced and not m.type_context.is_aspect)
          if (m.body.count == 1)
            m.dispatch( counter )
            if (m.suitable_for_context_dependent_inlining)
              println "$ is suitable for context-dependent inlining" (m.context_signature)
            elseIf (m.suitable_for_context_independent_inlining)
              println "$ is suitable for context-independent inlining" (m.context_signature)
            endIf
          endIf
        endIf
      endForEach
      }#

      # Perform dynamic -> static call optimizations and use the target rules inline definitions
      # to set up inline mappings for certain methods.
      local optimizer = PostResolutionOptimizationVisitor()
      forEach (m in method_list)
        if (m.referenced and not m.type_context.is_aspect)
          m.dispatch( optimizer )

          m.inline_mapping = target_rules.alias_defs[ m.context_signature ]
        endIf
      endForEach

      # Remove statements that have no side effects.
      # REMOVED: doesn't end up actually removing anything with well-written code
      #forEach (m in method_list)
      #  if (m.referenced and not m.type_context.is_aspect)
      #    m.remove_statements_with_no_side_effects
      #  endIf
      #endForEach

      #if (Types.contains("UISpacerY")) Types["UISpacerY"].print_method("init(Real)")
      #Types["Info"].print
      #if (Types.contains("Info")) Types["Info"].print_method("init(PropertyTable)")
#Types["Writer<<String>>"].print

      # Remove generic map helper types from type list
      local placeholder_types = Type[]
      local surviving_types = Type[]

      forEach (type in Types.type_list)
        if (type.generic_base?)
          placeholder_types.add( type )
        elseIf (not type.is_generic_map)
          surviving_types.add( type )
        endIf
      endForEach
      Types.type_list = surviving_types

      # Assign type indices
      local index = 0
      while (index < Types.type_list.count)
        local type = Types.type_list[index]
        type.index = index
        ++index
      endWhile

      # Change type and method indices of temporary placholder types
      # to map to generic types and methods.
      forEach (type in placeholder_types)
        type.index = type.generic_base.index

        forEach (m in type.method_list)
          if (m.generic_base_method?) m.global_index = m.generic_base_method.global_index
        endForEach
      endForEach

    method push_context
      context_stack.add( context )
      context = Context()

    method pop_context
      context = context_stack.remove_last

    method push_local_scope
      context.push_local_scope

    method add_local( v:Local )
      context.locals.add( v )

    method pop_local_scope
      context.pop_local_scope

    method resolve_call( t:Token, context_type:Type, operand:Cmd, name:String, args:CmdArgs, error_on_fail:Logical, return_type_hint:Type )->Cmd
      if (operand?)
        operand = operand.resolve.require_value
        context_type = operand.type
      endIf

      context_type.resolve

      local m : Method
      contingent
        local name_with_type_hint = name
        if (return_type_hint?) name_with_type_hint += "_" + return_type_hint.name

        # Try aliases first
        if (context_type.aliases?)
          # Name with type hint
          local cmd = resolve_alias( t, context_type, operand, name_with_type_hint, args )
          if (cmd?) return cmd

          # Regular name
          cmd = resolve_alias( t, context_type, operand, name, args )
          if (cmd?) return cmd
        endIf

        # Global aliases
        if (operand is null and Types.type_Global.aliases?)
          # Global with type hint built into name
          local cmd = resolve_alias( t, Types.type_Global, null, name_with_type_hint, args )
          if (cmd?) return cmd

          # Global with regular name
          cmd = resolve_alias( t, Types.type_Global, null, name, args )
          if (cmd?) return cmd
        endIf

        # Regular methods
        if (return_type_hint?)
          # Try type hint: method_name()->Type -> method_name_Type()
          m = find_method( t, context_type, operand, name_with_type_hint, args, false )
          sufficient (m?)
        endIf

        m = find_method( t, context_type, operand, name, args, false )
        sufficient (m?)

        if (operand is null)
          # Look in Global
          if (return_type_hint?)
            # Try Global with type hint: method_name()->Type -> method_name_Type()
            m = find_method( t, Types.type_Global, operand, name + "_" + return_type_hint.name, args, false )
            if (m?)
              operand = CmdReadSingleton( t, Types.type_Global )
              sufficient (true)
            endIf
          endIf

          m = find_method( t, Types.type_Global, operand, name, args, false )  # look in Global
          if (m?)
            operand = CmdReadSingleton( t, Types.type_Global )
            sufficient (true)
          endIf
        endIf

        if (error_on_fail)
          # Generate error with most appropriate method name
          find_method( t, context_type, operand, name, args, true )
        else
          return null
        endIf
      endContingent

      args = m.validate_arguments( args )

      if (m.attributes.is_special)
#println( m.type_context.name + " has base types " + m.type_context.base_types )
        if (m.type_context.instance_of(Types.type_GenericArray))
          if (m.name == "create")
            local m_get = m.type_context.find_method( "get(Integer)" )
            return CmdCreateArray( t, m.type_context, m_get.return_type, args.first ).resolve
          elseIf (m.name == "count")
            return CmdArrayCount( t, operand ).resolve
          elseIf (m.name == "get")
            return CmdReadArrayElement( t, operand, args.first, m.return_type ).resolve
          elseIf (m.name == "set")
            return CmdWriteArrayElement( t, m.type_context, m.parameters[1].type, operand, args[0], args[1] ).resolve
          endIf
        endIf
        throw t.error( "Unhandled call to special method " + m.type_context + "::" + m.full_signature )
      endIf

      if (context_type.is_compound or context_type.is_primitive)
        return CmdStaticCall( t, operand, m, args ).resolve
      else
        return CmdDynamicCall( t, operand, m, args ).resolve
      endIf

    method resolve_alias( t:Token, context_type:Type, operand:Cmd, name:String, args:CmdArgs )->Cmd
      if (args is null) args = empty_args

      local arg_count = args.count
      forEach (a in context_type.aliases)
        if (a.name == name and a.arg_names.count == arg_count)
          local parser = Parser( Analyzer.context.this_type, Analyzer.context.this_method, a.tokens )
          parser.alias_args = Cmd[]

          if (operand is null) operand = CmdReadSingleton( t, context_type )
          parser.alias_args.add( operand )
          forEach (arg in args) parser.alias_args.add( arg )
          local result = parser.parse_expression.resolve
          return result

        endIf
      endForEach

      return null


    method find_method( t:Token, context_type:Type, operand:Cmd, name:String, args:CmdArgs, error_on_fail:Logical )->Method
      local original_args = args
      if (args is null) args = empty_args

      local candidate_methods = Method[]
      local compatible_methods = Method[]
      local exact_matches = Method[]

      context_type.resolve
      forEach (index of args) 
        local arg = args[index]
        arg = args[index].resolve.require_value
        args[index] = arg
        arg.type.resolve
      endForEach

      local arg_count = args.count

      # println( "------------------------ $::$()($)" (context_type,name,args) )
      local m_list = context_type.methods_by_name[ name ]
      local m_default : Method
      if (m_list?)
        forEach (m in m_list)
          if (arg_count >= m.minimum_argument_count and arg_count <= m.parameters.count)
            candidate_methods.add( m )
            if (m.attributes.is_default)
              if (m_default?)
                throw m_default.t.error( //Multiple methods named "$" are marked [default].// (name) )
              else
                m_default = m
              endIf
            endIf
          endIf
        endForEach
      endIf

      args.resolve

      local function_arg_t : Token
      contingent
        necessary  (candidate_methods.count?)
        # Filter out methods with incompatible parameter types, parameter counts, or return types
        forEach (m in candidate_methods)
          contingent
            local index = 0
            while (index < arg_count)
              local parameter_type = m.parameters[index].type
              local arg = args[index]
              local arg_type = arg.type
              ++index

              if (arg.instance_of(parameter_type)) nextIteration

              necessary  (not arg_type.is_Logical and not parameter_type.is_Logical)
              if (arg_type.is_primitive and parameter_type.is_primitive) nextIteration

              if (arg_type is Types.type_Function)
                function_arg_t = arg.t
                if (parameter_type.instance_of(Types.type_GenericDelegate))
                  local fn = (arg as CmdFunction)
                  arg = fn.convert_to_delegate( parameter_type )
                  args[index-1] = arg
                  arg_type = arg.type
                  if (arg_type.instance_of(parameter_type)) nextIteration
                endIf
              endIf

              necessary  (m_default is null and parameter_type is Types.type_Object)
            endWhile
          satisfied
            compatible_methods.add( m )
          endContingent
        endForEach

        combine_match_results( compatible_methods, exact_matches, candidate_methods )

        if (candidate_methods.count == 0)
          if (function_arg_t?)
            throw t.error( "No methods with compatible Delegate parameters exist for given function argument." )
          endIf

          if (m_default?)
            candidate_methods.add( m_default )

            # Add explict casts onto each arg
            forEach (i of m_default.parameters)
              args[i] = CmdConvertToType( t, args[i], m_default.parameters[i].type ).resolve
            endForEach
          endIf
        endIf

        necessary  (candidate_methods.count?)
        sufficient (candidate_methods.count == 1)


        # Look for exact parameter type matches
        forEach (m in candidate_methods)
          contingent
            local index = 0
            while (index < arg_count)
              necessary (m.parameters[index].type is args[index].type)
              ++index
            endWhile
          satisfied
            exact_matches.add( m )
          unsatisfied
            compatible_methods.add( m )
          endContingent
        endForEach

        combine_match_results( compatible_methods, exact_matches, candidate_methods )
        necessary  (candidate_methods.count?)
        sufficient (candidate_methods.count == 1)

        # Look for exact non-reference type matches
        forEach (m in candidate_methods)
          contingent
            local index = 0
            while (index < arg_count)
              local param_type = m.parameters[index].type
              local arg_type = args[index].type
              necessary (param_type.is_reference == arg_type.is_reference)
              if (not param_type.is_reference and not arg_type.is_reference)
                necessary (param_type is arg_type)
              endIf
              ++index
            endWhile
          satisfied
            exact_matches.add( m )
          unsatisfied
            compatible_methods.add( m )
          endContingent
        endForEach

        combine_match_results( compatible_methods, exact_matches, candidate_methods )
        necessary  (candidate_methods.count?)
        sufficient (candidate_methods.count == 1)

        # Look for compatible functional and non-reference type matches
        forEach (m in candidate_methods)
          contingent
            local index = 0
            while (index < arg_count)
              local param_type = m.parameters[index].type
              local arg_type = args[index].type
              necessary (param_type.is_reference == arg_type.is_reference)
              if (param_type.is_reference)
                necessary (param_type.is_functional == arg_type.is_functional)
              else
                necessary (param_type.is_Logical == arg_type.is_Logical)
              endIf
              ++index
            endWhile
          satisfied
            exact_matches.add( m )
          unsatisfied
            compatible_methods.add( m )
          endContingent
        endForEach

        combine_match_results( compatible_methods, exact_matches, candidate_methods )
        necessary  (candidate_methods.count?)
        sufficient (candidate_methods.count == 1)


        # For init() or create() methods, choose extended classes over base classes
        if (name == "init" or name == "create")
          forEach (m1 in candidate_methods)

            contingent

              # Keep m1 if m1 type context instance_of all other type contexts
              forEach (m2 in candidate_methods)
                necessary (m1.type_context.instance_of(m2.type_context))
              endForEach

            satisfied
              compatible_methods.add( m1 )
            endContingent

          endForEach

          combine_match_results( compatible_methods, exact_matches, candidate_methods )
          necessary  (candidate_methods.count?)
          sufficient (candidate_methods.count == 1)
        endIf


        # Choose methods with args that are instanceOf the corresponding args
        # in other methods without the reverse being true.
        forEach (m1 in candidate_methods)

          contingent

            # Only keep m1 if m1.arg[i].type is instance of m2.arg[i].type for all m2
            forEach (m2 in candidate_methods)
              if (m1 is m2) 
                nextIteration
              endIf

              local index = 0
              while (index < arg_count)
                local m1_param_type = m1.parameters[index].type
                local m2_param_type = m2.parameters[index].type
                necessary (m1_param_type.instance_of(m2_param_type))
                ++index
              endWhile

            endForEach

          satisfied
            compatible_methods.add( m1 )
          endContingent

        endForEach

        combine_match_results( compatible_methods, exact_matches, candidate_methods, false )
        necessary  (candidate_methods.count?)
        sufficient (candidate_methods.count == 1)

        necessary (candidate_methods.count == 1)

      satisfied
#if (name=="print" and args.count==1 and args.first.type is Types.type_StringBuilder) println( "Match: " + candidate_methods )
        return candidate_methods.first

      unsatisfied
#if (name=="print" and args.count==1 and args.first.type is Types.type_StringBuilder) println( "No match: " + candidate_methods )
        if (not error_on_fail)
          return null
        endIf

        local buffer = StringBuilder()

        if (name[0] >= 'A' and name[0] <= 'Z')
          buffer.print( "Reference to undefined type '$'." (name) )
        else
          if (candidate_methods.count?)
            buffer.print( "Multiple matches for call to " )
          else
            buffer.print( "No such method" )
            if (original_args is null) buffer.print( " or property" )
            args = original_args
          endIf

          buffer.print( " '" )
          buffer.print( name )
          if (args?)
            buffer.print('(')
            local first = true
            forEach (arg in args)
              if (first) first = false
              else       buffer.print(',')
              buffer.print( arg.type.name )
            endForEach
            buffer.print(')')
          endIf

          buffer.print( "'" )

          buffer.print( " in type " )
          buffer.print( context_type.name )
          #context_type.print
          #println( System.stack_trace )
          buffer.print( "." )

          if (candidate_methods.count?)
            buffer.println( "  Candidates:" )
            buffer.println
            forEach (m in candidate_methods)
              buffer.println( m.full_signature )
            endForEach
          endIf
        endIf

        throw t.error( buffer->String )
      endContingent

    method combine_match_results( compatible_methods:Method[], exact_matches:Method[], candidate_methods:Method[] )
      combine_match_results( compatible_methods, exact_matches, candidate_methods, true )

    method combine_match_results( compatible_methods:Method[], exact_matches:Method[], candidate_methods:Method[], force:Logical )
      if (exact_matches.count?)
        compatible_methods.clear
      elseIf (compatible_methods.count == 0)
        if (force) candidate_methods.clear
        return
      endIf

      candidate_methods.clear
      candidate_methods.add( exact_matches )
      candidate_methods.add( compatible_methods )
      exact_matches.clear
      compatible_methods.clear

    method compile_bc( filepath:String )
      BCWriter().compile( filepath )

    method compile_cpp( filepath:String )
      CPPWriter().compile( filepath )

    method compile_js( filepath:String )
      JSWriter().compile( filepath )

    method convert_string_to_valid_identifier( st:String )->String
      # Similar to get_delegate_class_names_helper but a little different.
      local i1 = st.locate("<<")
      local i2 = st.locate_last(">>")
      while (i1 >= 0 and i2 >= 0)
        st = st.leftmost(i1) + "_of_" + st.substring(i1+2,i2-1) + st.substring(i2+2)
        i1 = st.locate("<<")
        i2 = st.locate_last(">>")
      endWhile

      i1 = st.locate( "[]" )
      while (i1 >= 0)
        st = st.substring(0,i1-1) + "List"
        i1 = st.locate( "[]" )
      endWhile

      i1 = st.locate( "->" )
      while (i1 >= 0)
        st = st.substring( 0, i1-1 ) + "__" + st.substring( i1+2 )
        i1 = st.locate( "->" )
      endWhile

      local type_buffer = StringBuilder()
      forEach(c in st)
        which (c)
          case '+': type_buffer.print("PLUS")
          case '-': type_buffer.print("MINUS")
          case '*': type_buffer.print("TIMES")
          case '/': type_buffer.print("DIVIDE")
          case '%': type_buffer.print("MOD")
          case '^': type_buffer.print("POWER")
          case '&': type_buffer.print("AND")
          case '|': type_buffer.print("OR")
          case '~': type_buffer.print("TILDE")
          case '!': type_buffer.print("BWNOT")
          case '=': type_buffer.print("EQUALS")
          others
            if (c.is_alphanumeric) type_buffer.print(c)
            else                   type_buffer.print('_')
        endWhich
      endForEach
      # println(type_buffer)

      return type_buffer->String


    method create_base_delegate_type( t:Token, base_class_name:String, param_types:Type[], return_type:Type )
      local buffer = StringBuilder()
      local base_delegate_type   = Types.reference( t, base_class_name )
      local base_class_string : String

      if (not Types.reference( t, base_class_name ).is_defined)
        buffer.print( "class " ).print( base_class_name ).println( " : GenericDelegate" )
        buffer.println( "  METHODS" )
        buffer.print( "    method call( " )
        local i = 0
        if(param_types? and param_types.count?)
          local i = 0
          while (i < param_types.count - 1)
            buffer.print( "p" + i + ":" + param_types[i]->String + ", " )
            ++i
          endWhile

          if (param_types.count?) buffer.print( "p" + (param_types.count-1) + ":" + param_types.last->String )
        endIf
        buffer.print(" )")

        if (return_type?) buffer.println( "->" + return_type.name )
        else           buffer.println

        buffer.println( "endClass" )

        base_class_string = buffer->String

        # println(base_class_name)
        #trace base_class_string

        Parser( "[Internal]", base_class_string ).parse_content
        base_delegate_type = Types.reference(t,base_class_name).resolve
        buffer.clear
      endIf

    method get_delegate_signature( name:String, param_types:Type[], return_type:Type )->String
      local sig_buffer = StringBuilder()
      sig_buffer.print("(")
      if (param_types? and param_types.count?)
        local i = 0
        while (i < param_types.count-1)
          sig_buffer.print( param_types[i].name + "," )
          ++i
        endWhile
        sig_buffer.print( param_types.last.name )
      endIf
      sig_buffer.print(")")

      if (return_type?) sig_buffer.println( "->" + return_type.name )

      return name + sig_buffer->String

    method get_delegate_class_names_helper( type_name:String )->String
      local type_buffer = StringBuilder()
      local prev_char = ' '
      forEach(c in type_name)
        which (c)
          case '[': type_buffer.print("List")
          case '<':
            if (prev_char != '<') type_buffer.print("_of_")
          case '>',']': noAction
          case ',': type_buffer.print("_")
          case '+': type_buffer.print("PLUS")
          case '-': type_buffer.print("MINUS")
          case '*': type_buffer.print("TIMES")
          case '/': type_buffer.print("DIVIDE")
          case '%': type_buffer.print("MOD")
          case '^': type_buffer.print("POWER")
          case '&': type_buffer.print("AND")
          case '|': type_buffer.print("OR")
          case '~': type_buffer.print("TILDE")
          case '!': type_buffer.print("BWNOT")
          case '=': type_buffer.print("EQUALS")
          #case '$': type_buffer.print("_")
          others:   type_buffer.print(c)
        endWhich
        prev_char = c
      endForEach
      # println(type_buffer)

      return type_buffer->String


    method get_delegate_class_names( name:String, class_type:Type, parameters:Local[], return_type:Type )->String[]
      local param_types = Type[]
      forEach (p in parameters) param_types.add( p.type )
      return get_delegate_class_names( name, class_type, param_types, return_type )

    method get_delegate_class_names( name:String, class_type:Type, param_types:Type[], return_type:Type )->String[]
      local result = String[]
      local buffer = StringBuilder()

      if (param_types? and param_types.count?)
        local i = 0
        local p_string = ""
        while (i < param_types.count - 1)
          p_string = get_delegate_class_names_helper( param_types[i]->String )
          buffer.print( p_string + "_" )
          ++i
        endWhile
        p_string = get_delegate_class_names_helper( param_types.last->String )
        buffer.print( p_string )
      endIf

      if (return_type?)
        buffer.print( "__" )
        local ret_string = get_delegate_class_names_helper( return_type->String )
        buffer.print( ret_string )
      endIf

      # local test_res

      if (buffer.count?) result.add( "Delegate__" + buffer->String )
      else               result.add( "Delegate" )

      if(class_type?) result.add("Delegate__"+class_type.name+"__"+name+"__"+buffer->String)

      # println(result)

      return result

    method get_task_type_name( t:Token, parameters:Local[], return_type:Type )->String
      local param_types = Type[]
      forEach (parameter in parameters) param_types.add( parameter.type )
      return get_task_type_name( t, param_types, return_type )

    method get_task_type_name( t:Token, param_types:Type[], return_type:Type )->String
      local buffer = StringBuilder()

      buffer.print( "Task__" )
      if (param_types? and param_types.count?)
        local i = 0
        local p_string = ""
        while (i < param_types.count - 1)
          p_string = get_delegate_class_names_helper( param_types[i]->String )
          buffer.print( p_string + "_" )
          ++i
        endWhile
        p_string = get_delegate_class_names_helper( param_types.last->String )
        buffer.print( p_string )
      endIf

      if (return_type?)
        buffer.print( "__" )
        local ret_string = get_delegate_class_names_helper( return_type->String )
        buffer.print( ret_string )
      endIf

      local result = buffer->String
      if (Templates.find( result ) is null) create_task_type( t, result, param_types, return_type )
      return result

    method create_task_type( t:Token, name:String, parameters:Local[], return_type:Type )
      local param_types = Type[]
      forEach (parameter in parameters) param_types.add( parameter.type )
      return create_task_type( t, name, param_types, return_type )

    method create_task_type( t:Token, name:String, param_types:Type[], return_type:Type )
      local buffer = StringBuilder()
      buffer.print( "class " ).print( name ).print( " : " )
      if (param_types.count?)
        # Task(Type1,Type2)->Type3 extends Task->Type3
        buffer.print( get_task_type_name(t,Type[],return_type) )
      else
        buffer.print( "Task" )
      endIf

      if (return_type? and param_types.count == 0)
        buffer.print( ", Reader<<" ).print( return_type ).print( ">>" )
      endIf
      buffer.println

      if (return_type? and param_types.count == 0)
        buffer.print(
          @|  PROPERTIES
           |    result       : $
           |    result_ready : Logical
           |
           |  METHODS
           |    method has_another->Logical
           |      if (result_ready?) return true
           |      if (finished)      return false
           |      result_ready = resume
           |      return result_ready
           |
           |    method read->$
           |      has_another  # prime the pump
           |      result_ready = false
           |      return result
           |
           ...(return_type.name,return_type.name) 
          )
      endIf

      if (param_types.count?)
        buffer.println
        buffer.print( "    method send( " )
        forEach (index of param_types)
          if (index > 0) buffer.print( ", " )
          local param_type = param_types[index]
          buffer.print( "p" ).print( index+1 ).print( ":" ).print( param_type.name )
        endForEach
        buffer.print( " )->" ).println( name )
        buffer.println( "      return this" )
      endIf

      buffer.println( "endClass" )

      #println buffer->String   # debug print

      Parser( "[Internal]", buffer->String ).parse_content
      Types.reference( t, name )

endClass

class Context
  PROPERTIES
    this_type     : Type
    this_method   : Method
    locals        = Local[]
    scope_stack   = Integer[]
    control_structure_stack = CmdControlStructure[]

  METHODS
    method push_local_scope
      scope_stack.add( locals.count )

    method pop_local_scope
      if (scope_stack.count == 0) throw BardError( "Scope stack empty in Analyzer.pop_local_scope()" )
      locals.discard_from( scope_stack.remove_last )

    method find_local( name:String )->Local
      local i = locals.count - 1
      while (i >= 0)
        local v = locals[i]
        if (v.name == name) return v
        --i
      endWhile
      return null
endClass

