$[include "ParseReader.bard"]
$[include "Token.bard"]
$[include "Preprocessor.bard"]

class BardScanner
  PROPERTIES
    tokens      : Token[]
    token_queue = Token[]

    filepath : String
    reader   : ParseReader

    line     : Integer
    column   : Integer

    buffer   = StringBuilder()

    #keep_tokens    = true
    #directive_status_stack = DirectiveStatus[]

  METHODS
    method tokenize( filepath )->Token[]
      reader = ParseReader( File(filepath)->Byte[] )
      return tokenize

    method tokenize( filepath, data:String )->Token[]
      reader = ParseReader( data->Byte[] )
      return tokenize

    method tokenize->Token[]
      Keywords.configure
      tokens = Token[]()

      while (reader.has_another)
        local t = scan_next_token
        if (t?) tokens.add( t )
      endWhile

      tokens.add( Token(filepath, reader.line, reader.column, Token.eol) )

      return Preprocessor.process( tokens )

    method error( message:String )->BardError
      return BardError( filepath, line, column, message )

    method consume( ch:Character )->Logical
      if (reader.peek != ch) return false
      reader.read
      return true

    method consume( st:String )->Logical
      return reader.consume(st)

    method consume_id( st:String )->Logical
      return reader.consume_id(st)

    method consume_spaces->Logical
      if (not reader.consume(' ')) return false
      while (reader.consume(' '))  noAction
      return true

    method make_eol->Token
      return Token( filepath, reader.line, reader.column, Token.eol )

    method scan_next_token->Token
      if (token_queue.count?) return token_queue.remove_first

      consume_spaces

      line = reader.line
      column = reader.column

      local ch = reader.peek

      if (ch == '\n')
        reader.read
        return Token( filepath, line, column, Token.eol )
      endIf

      if (ch.is_letter or ch == '_')
        local st = scan_identifier
        if (Keywords.contains(st))
          local token_type = Keywords[st]
          #{
          if (token_type == Token.definition or token_type == Token.local_definition)
            token_queue.add( Keywords.definitions[st] )
            return null

          }#
          if (token_type != Token.illegal_keyword)
            return Token( filepath, line, column, Keywords[st] )

          else
            local t = IdentifierToken( filepath, line, column, st )
            which (st)
              case "Real64":  throw t.error( "Use 'Real' instead of 'Real64'." )
              case "Real32":  throw t.error( "Bard does not support type Real32." )
              case "Int64":   throw t.error( "Bard does not support type Int64." )
              case "Int32":   throw t.error( "Use 'Integer' instead of 'Int32'." )
              case "Boolean": throw t.error( "Use 'Logical' instead of 'Boolean'." )
              case "var":     throw t.error( //Illegal keyword 'var' - write "local x = value" instead of "local var x = value".// )
              others:         throw t.error( "Illegal keyword '" + st + "'." )
            endWhich
          endIf
        else
          return IdentifierToken( filepath, line, column, st )
        endIf

      elseIf (ch >= '0' and ch <= '9')
        which (reader.peek(1))
          case 'b': return scan_integer_in_base(2)
          case 'c': return scan_integer_in_base(8)
          case 'x': return scan_integer_in_base(16)
          others:   return scan_number
        endWhich

      elseIf (ch == '\'')
        return scan_string( '\'' )

      elseIf (ch == '"')
        return scan_string( '"' )

      elseIf (ch == '#')
        scan_comment
        return null

      elseIf (ch == '@' and reader.peek(1) == '|')
        return scan_actual_string

      else
        # Symbol - could be a decimal like ".1".
        if (ch == '.')
          local next = reader.peek(1)
          if (next >= '0' and next <= '9') return scan_number
        endIf

        local token_type = scan_symbol
        if (token_type == -1) return null
        return Token( filepath, line, column, token_type )

      endIf

      throw error( "Unexpected '" + ch + "'." )

    method scan_identifier->String
      buffer.clear
      local ch = reader.peek
      while ((ch>='a' and ch<='z') or (ch>='A' and ch<='Z') or (ch>='0' and ch<='9') or ch=='_')
        buffer.print( reader.read )
        ch = reader.peek
      endWhile

      if (buffer.count == 0) throw Token( filepath, reader.line, reader.column, Token.eol ).error( "Identifier expected." )
      return buffer->String

    method scan_string( terminator:Character )->Token
      buffer.clear
      reader.read
      while (reader.has_another)
        local ch = reader.peek
        if (ch == terminator)
          reader.read
          # if(reader.peek == '(') scan_String_format_values()
          return buffer_to_String_or_Character(terminator)
        else
          buffer.print( scan_Character )
        endIf
      endWhile

      throw error( "End Of File reached while looking for end of string." )

    method scan_actual_string->Token
      buffer.clear
      reader.read
      reader.read
      while (reader.has_another)
        local ch = reader.peek
        if (ch == 10)
          local eol_line = reader.line
          local eol_column = reader.column
          reader.read
          consume_spaces
          if (consume('|'))
            buffer.print( ch )
          else
            tokens.add( StringToken( filepath, line, column, buffer->String ) )
            if (reader.peek(0) == '.' and reader.peek(1) == '.' and reader.peek(2) == '.')
              reader.read
              reader.read
              reader.read
            else
              tokens.add( Token( filepath, eol_line, eol_column, Token.eol ) )
            endIf
            return null
          endIf
        else
          buffer.print( reader.read )
        endIf
      endWhile

      throw error( "End Of File reached while looking for end of verbatim string." )

    method scan_alternate_String->Token
      buffer.clear

      while (reader.has_another)
        if (reader.has_another)
          local ch = reader.peek
          if (ch == '/')
            reader.read
            ch = reader.peek
            if (ch == '/')
              reader.read
              return buffer_to_String_or_Character('/')
            else
              buffer.print( '/' )
            endIf
          else
            buffer.print( scan_Character )
          endIf
        endIf
      endWhile

      throw error( "End Of File reached while looking for end of string." )

    # method scan_String_format_values

    method scan_Character->Character
      if (not reader.has_another) throw error( "Character expected." )

      local ch = reader.peek
      if (ch == '\n') throw error( "Character expected; found End Of Line." )

      if (ch == '\\')
        reader.read
        if (not reader.has_another) throw error( "Escaped character expected; found End Of File." )

        if (consume('b')) return 8->Character
        if (consume('f')) return 12->Character
        if (consume('n')) return '\n'
        if (consume('r')) return '\r'
        if (consume('t')) return '\t'
        if (consume('v')) return 11->Character
        if (consume('0')) return '\0'
        if (consume('/')) return '/'
        if (consume('\''))return '\''
        if (consume('\\'))return '\\'
        if (consume('"')) return '"'
        if (consume('x')) return scan_hex_value(2)
        if (consume('u')) return scan_hex_value(4)
        throw error( "Invalid escape sequence.  Supported: \\n \\r \\t \\0 \\/ \\' \\\\ \\\" \\" + "uXXXX \\" + "xXX." );
      endIf

      local value = reader.read->Integer
      if ((value & 0x80) != 0)
        # Handle UTF8 encoding
        local ch2 = reader.read->Integer

        if ((value & 0x20) == 0)
          # %110xxxxx 10xxxxxx
          value = value & 0x1f;
          ch2 = value & 0x3f;
          return ((value:<<:6) | ch2)->Character
        else
          # %1110xxxx 10xxxxxx 10xxxxxx
          local ch3 = reader.read->Integer
          value = value & 15;
          ch2 = ch2 & 0x3f;
          ch3 = ch3 & 0x3f;
          return ((value:<<:2) | (ch2:<<:6) | ch3)->Character
        endIf
      endIf
      return value->Character

    method scan_hex_value( digits:Integer )->Character
      local value = 0
      local i = 1
      while (i <= digits)
        if (not reader.has_another) throw error( digits + "-digit hex value expected; found end of file." )
        if (not next_is_hex_digit)
          local ch = reader.peek
          local error_buffer = StringBuilder()
          error_buffer.print( "Invalid hex digit " )
          if (ch < ' ' or ch->Integer == 127) error_buffer.print( ch->Integer )
          else error_buffer.print( "'" + ch + "'" )
          error_buffer.print('.')
          throw error( error_buffer->String )
        endIf
        local intval = reader.read->Integer
        value = (value:<<:4) + intval
        ++i
      endWhile
      return value->Character

    method next_is_hex_digit->Logical
      local ch = reader.peek
      return (ch >= '0' and ch <= '9') or (ch >= 'a' and ch <= 'f') or (ch >= 'A' and ch <= 'F')

    method scan_integer_in_base( base:Integer )->Token
      reader.read  # '0'
      reader.read  # [b,c,x] = [2,8,16]

      local bits_per_value = 1
      while (2^bits_per_value < base) ++bits_per_value

      local count = 0
      local n = 0
      local digit = reader.peek.to_number
      while (reader.has_another and digit != -1)
        if (digit >= base) throw error( "Digit out of range for base " + base + "." )
        ++count
        n = n * base + digit
        reader.read
        digit = reader.peek.to_number
      endWhile

      if (count == 0) throw error( "One or more digits expected." )

      if (bits_per_value * count > 32) throw error( "Number too large for base " + base + "." )

      return IntegerToken( filepath, line, column, n )

    method scan_number->Token
      local is_negative = consume('-')
      local is_Real = false

      local n  = scan_Integer

      if (reader.peek == '.')
        local ch = reader.peek(1)
        if (ch >= '0' and ch <= '9')
          reader.read
          is_Real = true
          local start_pos = reader.position
          local fraction = scan_Integer
          n += fraction / 10^(reader.position - start_pos)
        elseIf (ch == '.')
          # Start of range
          if (is_negative) n = -n
          return IntegerToken( filepath, line, column, n->Integer )
        else
          if (is_negative) n = -n
          return RealToken( filepath, line, column, n )
        endIf
      endIf

      if (consume('E') or consume('e'))
        is_Real = true
        local negative_exponent = consume('-')
        if (not negative_exponent) consume('+')
        local power = scan_Integer
        if (negative_exponent) n /= power
        else                   n *= power
      endIf

      if (is_negative) n = -n;

      if (is_Real)
        return RealToken( filepath, line, column, n )
      else
        return IntegerToken( filepath, line, column, n->Integer )
      endIf


    method scan_Integer->Real
      local n = 0.0
      local ch = reader.peek
      while (ch >= '0' and ch <= '9')
        local intval = reader.read->Integer - '0'
        n = n * 10.0 + intval
        ch = reader.peek
      endWhile
      return n

    method scan_comment
      #if (buffer.count?) buffer.println
      buffer.clear
      reader.read  # '#'
      if (consume('{'))
        local nesting_count = 1
        local keep_reading = true
        while (reader.has_another)
          local ch = reader.read
          which (ch)
            case '#'
              buffer.print('#')
              if (consume('{'))
                buffer.print('{')
                ++nesting_count
              endIf

            case '}'
              if (consume('#'))
                --nesting_count
                if (nesting_count == 0) return
                else buffer.print('}'); buffer.print('#')
              else
                buffer.print('}')
              endIf

            others
              buffer.print( ch )
          endWhich
        endWhile
      else
        while (reader.has_another and reader.peek != '\n') buffer.print( reader.read )
      endIf

    method scan_symbol->Integer
      local ch = reader.read
      if (ch == '\n')
        return Token.eol

      elseIf (ch == '!')
        if (consume('=')) return Token.symbol_ne
        else              return Token.symbol_bitwise_not

      elseIf (ch == '$' )
        ch = reader.peek
        if (ch.is_letter or ch == '_')
          local name = scan_identifier
          tokens.add( TypePlaceholderToken(filepath,line,column,"$"+name) )
          return -1
        elseIf (ch == '[')
          reader.read  # '['
          return Token.symbol_open_directive
          #return check_for_directives( Token.symbol_open_directive )
        endIf
        return Token.symbol_dollar

      elseIf (ch == '%')
        if     (consume('=')) return Token.symbol_mod_assign
        else                  return Token.symbol_percent

      elseIf (ch == '&' )
        if     (consume('&')) throw error( "Use 'and' instead of '&&'." )
        elseIf (consume('=')) return Token.symbol_bitwise_and_assign
        else                  return Token.symbol_ampersand

      elseIf (ch == '(')
        return Token.symbol_open_paren

      elseIf (ch == ')')
      return Token.symbol_close_paren

      elseIf (ch == '*')
        if     (consume('=')) return Token.symbol_multiply_assign
        else                  return Token.symbol_times

      elseIf (ch == '+')
        if     (consume('=')) return Token.symbol_add_assign
        elseIf (consume('+')) return Token.symbol_increment
        else                  return Token.symbol_plus

      elseIf (ch == ',')
        return Token.symbol_comma

      elseIf (ch == '-')
        if     (consume('='))  return Token.symbol_subtract_assign
        elseIf (consume('-'))  return Token.symbol_decrement
        elseIf (reader.peek(0) == '>' and reader.peek(1) == '>') return Token.symbol_minus
        elseIf (consume('>'))  return Token.symbol_arrow
        else                   return Token.symbol_minus

      elseIf (ch == '.' )
        if (consume('.'))
          if (consume('.'))
            # ellipsis
            while (consume(' ')) noAction
            if (not consume('\n')) throw error( "End of line expected after '...'." )
            return -1
          elseIf (consume('<'))
            return Token.symbol_upToLessThan
          elseIf (consume('>'))
            return Token.symbol_downToGreaterThan
          else
            return Token.symbol_upTo
          endIf
        elseIf (consume('='))
          return Token.symbol_access_assign
        else
          return Token.symbol_period
        endIf

      elseIf (ch == '/')
        if (consume('/'))
          tokens.add( scan_alternate_String )
          return -1
        elseIf (consume('='))
          return Token.symbol_divide_assign
        else
          return Token.symbol_divide
        endIf

      elseIf (ch == ':')
        if (consume(':'))
          return Token.symbol_scope
        endIf

        if (consume("<<:"))  return Token.symbol_shl
        elseIf (consume(">>:"))  return Token.symbol_shr
        elseIf (consume(">>>:")) return Token.symbol_shrx
        return Token.symbol_colon

      elseIf (ch == ';')
        return Token.symbol_semicolon

      elseIf (ch == '<' )
        if     (consume('<')) return Token.symbol_open_specialize
        elseIf (consume('=')) return Token.symbol_le
        elseIf (consume('>')) return Token.symbol_compare
        else                  return Token.symbol_lt

      elseIf (ch == '=' )
        if (consume('='))     return Token.symbol_eq
        elseIf (consume('>')) return Token.symbol_fat_arrow
        else                  return Token.symbol_equals

      elseIf (ch == '>' )
        if      (consume('=')) return Token.symbol_ge
        elseIf  (consume('>')) return Token.symbol_close_specialize
        else                   return Token.symbol_gt

      elseIf (ch == '?')
        return Token.symbol_question_mark

      elseIf (ch == '@' )
        return Token.symbol_at

      elseIf (ch == '[')
        if (consume(']')) return Token.symbol_empty_brackets
        return Token.symbol_open_bracket
        #return check_for_directives( Token.symbol_open_bracket )

      elseIf (ch == '\\')
        return Token.symbol_backslash

      elseIf (ch == ']')
        return Token.symbol_close_bracket

      elseIf (ch == '^')
        if     (consume('=')) return Token.symbol_power_assign
        else                  return Token.symbol_power

      elseIf (ch == '{')
        if (consume('}')) return Token.symbol_empty_braces
        return Token.symbol_open_brace

      elseIf (ch == '|' )
        if     (consume('=')) return Token.symbol_bitwise_or_assign
        elseIf (consume('|')) return Token.eol
        else                  return Token.symbol_bitwise_or

      elseIf (ch == '}' )
        if     (consume('#')) return Token.symbol_close_comment # used for error reporting
        else                  return Token.symbol_close_brace

      elseIf (ch == '~')
        if     (consume('=')) return Token.symbol_bitwise_xor_assign
        else                  return Token.symbol_bitwise_xor

      else
        throw error( "Unexpected input '"+ch+"'." )
      endIf

    method buffer_to_String_or_Character( terminator:Character )->Token
      # We have a String already; convert it to a Character if it has count 1.
      if (buffer.count == 1 and terminator == '\'')
        #trace
        #tron
        #CharacterToken(filepath,line,column,33)
        #troff
        #throw Error("TODO")
        return CharacterToken(filepath,line,column,buffer[0]->Integer)
      else
        return StringToken(filepath,line,column,buffer->String)
      endIf

endClass

#{
class DirectiveStatus
  PROPERTIES
    t : Token
    allow_else_ifs           = true
    found_matching_condition = false
    keep_tokens              : Logical

  METHODS
    method init( t )
endClass
}#

#{
class MetaCmd( t:Token )
  METHODS
    method evaluate->Logical
      throw Error( "Call to undefined method $::evaluate()." (type_name) )
endClass

class MetaCmdDefined( t:Token, name:String )
endClass
}#

