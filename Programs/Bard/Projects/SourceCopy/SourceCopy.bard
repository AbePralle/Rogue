#==============================================================================
# Search and replace source file copy
# 
# 2013.12.03 by Abe Pralle
#==============================================================================

class SourceCopy
  PROPERTIES
    mappings : PropertyTable
    hits     : Integer[][]

  METHODS
    method init
      contingent
        necessary (Runtime.command_line_arguments.count == 3)

        mappings = JSON.parse_table( Runtime.command_line_arguments[0] )
        necessary (mappings?)

      unsatisfied
        println @|USAGE
                 |
                 |  bard SourceCopy '{"search text":"replace text",...}' input_filepath output_filepath
        Runtime.exit(1)
      endContingent

      local infile_name = Runtime.command_line_arguments[1]
      local infile = File( infile_name )
      if (not infile.exists)
        println //ERROR: unable to open "$" for reading.// (infile_name)
        Runtime.exit(1)
      endIf

      local data = String( File( Runtime.command_line_arguments[1] )->Byte[] )

      hits = Integer[][]
      forEach (key in mappings.keys)
        hits.add( find_hits(data, key, mappings[key]->String) )
      endForEach

      local writer_name = Runtime.command_line_arguments[2]
      try
        local writer = File( writer_name ).writer
        process( data, writer )
        writer.close
      catch (err:Error)
        println err
        Runtime.exit(1)
      endTry

    method find_hits( data:String, key:String, mapping:String )->Integer[]
      local list = Integer[]
      if (key.count == 0) return list

      local i = data.find( key )
      while (i >= 0)
        list.add( i )
        i = data.find( key, i + key.count )
      endWhile

      return list

    method process( data:String, writer:Printer )
      local i = 0
      local data_count = data.count
      while (i < data_count)
        local next_hit_slot = find_next_hit_slot
        if (next_hit_slot == -1)
          # No more hits
          while (i < data_count)
            writer.write( data[i] )
            ++i
          endWhile
        else
          local next_hit_position = hits[next_hit_slot].remove_first
          while (i < next_hit_position)
            writer.write( data[i] )
            ++i
          endWhile

          local key = mappings.keys[ next_hit_slot ]
          writer.print( mappings[key] )
          i += key.count
        endIf
      endWhile

    method find_next_hit_slot->Integer
      local best_hit_slot = -1
      local best_hit_position = 0
      forEach (slot of hits)
        local list = hits[slot]
        if (list.count?)
          local position = list.first
          if (best_hit_slot == -1 or position < best_hit_position)
            best_hit_slot = slot
            best_hit_position = position
          endIf
        endIf
      endForEach
      return best_hit_slot

endClass
