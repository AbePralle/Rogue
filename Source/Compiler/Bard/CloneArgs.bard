class CloneArgs
endClass


class InlineArgs : CloneArgs
  PROPERTIES
    this_context : Cmd
    method_info  : Method
    arg_lookup : Table<<String,Cmd>>

  METHODS
    method init( this_context, method_info, args:CmdArgs )
      if (args?)
        arg_lookup = Table<<String,Cmd>>()
        forEach (index of args)
          arg_lookup[ method_info.parameters[index].name ] = args[index]
        endForEach
      endIf

    method inlining->Logical
      return true

    method inline_this->Cmd
      return this_context.clone()

    method inline_access( access:CmdAccess )->Cmd
      if (access.context?) return access

      local arg = arg_lookup[ access.name ]
      if (not arg) return access

      local dup = arg.clone
      if (access.args?)
        local new_access = dup as CmdAccess
        if (new_access?)
          if (new_access.args?)
            throw access.t.error( "Illegal arguments on inline code." )
          else
            new_access.args = access.args
          endIf
        else
          throw access.t.error( "Illegal arguments on inline code." )
        endIf
      endIf

      return dup

    method inline_read_local( read_cmd:CmdReadLocal )->Cmd
      local arg = arg_lookup[ read_cmd.local_info.name ]
      if (not arg) return read_cmd
      return arg.clone

    method inline_write_local( write_cmd:CmdWriteLocal )->Cmd
      local arg = arg_lookup[ write_cmd.local_info.name ]
      if (not arg) return write_cmd
      return CmdAssign( write_cmd.t, arg.clone(), write_cmd.new_value )
endClass


class TaskArgs : CloneArgs
  PROPERTIES
    task_type        : Type
    task_method      : Method
    original_type    : Type
    original_method  : Method
    cmd_task_control : CmdTaskControl
    context_property : Property
    ip_property      : Property

  METHODS
    method init( task_type, task_method, original_type, original_method )
      cmd_task_control = CmdTaskControl( task_method.t )

    method add( cmd:Cmd )->TaskArgs
      if (cmd?) cmd_task_control.current_section.statements.add( cmd ) 
      return this

    method add_jump( t:Token, to_section:CmdTaskControlSection )->TaskArgs
      set_next_ip( t, to_section )
      add( CmdReturn(t,CmdLiteralLogical(t,true)) )
      return this

    method add_conditional_jump( condition:Cmd, to_section:CmdTaskControlSection )->TaskArgs
      local t = condition.t
      local cmd_if = CmdIf( t, condition )

      local ip = to_section.ip
      if (cmd_task_control.current_section.ip + 1 != ip)
        cmd_if.statements.add( CmdWriteProperty( t, CmdThisContext(t,task_type), ip_property, CmdLiteralInteger(t,ip-1) ) )
      endIf
      cmd_if.statements.add( CmdReturn(t,CmdLiteralLogical(t,true)) )

      add( cmd_if )
      return this

    method create_return( t:Token, value=null:Cmd )->Cmd
      local result = CmdBlock( t )
      if (value?) result.statements.add( CmdAssign( t, CmdAccess(t,"result"), value ) )
      result.statements.add( CmdWriteProperty( t, CmdThisContext(t,task_type), ip_property, CmdLiteralInteger(t,-1) ) )
      result.statements.add( CmdReturn(t,CmdLiteralLogical(t,false)) )
      return result

    method add_yield( t:Token )->TaskArgs
      local next_section = create_section
      set_next_ip( t, next_section )
      add( CmdReturn(t,CmdLiteralLogical(t,false)) )
      begin_section( next_section )
      return this

    method jump_to_new_section( t:Token )->CmdTaskControlSection
      local new_section = create_section
      add_jump( t, new_section )
      begin_section( new_section )
      return new_section

    method begin_section( section:CmdTaskControlSection )->TaskArgs
      cmd_task_control.current_section = section
      return this

    method converting_task->Logical
      return true

    method create_section->CmdTaskControlSection
      local section = CmdTaskControlSection( cmd_task_control.sections.count+1 )
      cmd_task_control.sections.add( section )
      return section

    method cmd_read_this( t:Token )->Cmd
      return CmdThisContext( t, task_type )

    method cmd_read_context( t:Token )->Cmd
      return CmdReadProperty( t, CmdThisContext(t,task_type), context_property )

    method convert_local_name( local_info:Local )->String
      return "$_$" (local_info.name,local_info.index)

    method cmd_read( t:Token, local_info:Local )->Cmd
      return CmdAccess( t, CmdThisContext(t,task_type), "$_$" (local_info.name,local_info.index) )

    method cmd_write( t:Token, local_info:Local, new_value:Cmd )->Cmd
      return CmdAssign( t, CmdAccess(t, CmdThisContext(t,task_type), "$_$" (local_info.name,local_info.index)), new_value )

    method replace_write_local( t:Token, local_info:Local, new_value:Cmd )->Cmd
      if (new_value is null) new_value = local_info.type.create_default_value(t)
      return CmdAssign( t, CmdAccess(t, CmdThisContext(t,task_type), "$_$" (local_info.name,local_info.index)), new_value )

    method set_next_ip( t:Token, to_section:CmdTaskControlSection )->TaskArgs
      local ip = to_section.ip
      if (cmd_task_control.current_section.ip + 1 != ip)
        cmd_task_control.add( CmdWriteProperty( t, CmdThisContext(t,task_type), ip_property, CmdLiteralInteger(t,ip-1) ) )
      endIf
      return this

    method create_set_next_ip( t:Token, to_section:CmdTaskControlSection )->Cmd
      local ip = to_section.ip
      if (cmd_task_control.current_section.ip + 1 != ip)
        return CmdWriteProperty( t, CmdThisContext(t,task_type), ip_property, CmdLiteralInteger(t,ip-1) )
      endIf
      return null


endClass

