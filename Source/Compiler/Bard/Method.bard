class Method
  PROPERTIES
    t            : Token
    type_context : Type
    name         : String
    signature    : String

    cpp_name     : String
    cpp_typedef  : String

    attributes   = Attributes()

    return_type      : Type

    task_result_type : Type
      # When a [task] is organized, task_result_type gets set to the original return_type
      # and return_type gets set to Task or TaskWithResult<<ResultType>>

    parameters = Local[] : Local[]
    locals     = Local[] : Local[]

    min_args     : Integer

    statements            = CmdStatementList()
    aspect_statements     : CmdStatementList
    incorporating_classes : Type[]

    overridden_method : Method
    generic_method    : Method
    native_code       : String

    organized : Logical
    resolved  : Logical
    index     : Integer

  METHODS
    method init( t, type_context, name )

    method clone->Method
      local result = Method( t, type_context, name )

      result.signature = signature
      result.cpp_name = cpp_name
      result.cpp_typedef = cpp_typedef
      result.attributes = attributes.clone
      result.return_type = return_type
      result.task_result_type = task_result_type

      result.locals = Local[]
      forEach (v in locals) result.locals.add( v.clone )
      result.parameters = Local[]
      forEach (i of parameters) result.parameters.add( locals[i] )

      result.min_args = min_args
      result.statements = statements.clone( null as CloneArgs )
      result.generic_method = generic_method
      result.native_code = native_code
      result.index = index

      return result

    method incorporate( into_type:Type )->Method
      local m = clone.set_type_context( into_type ).set_incorporated
      if (aspect_statements?)
        # If aspect_statements is non-null then the aspect method was already resolved
        # prior to the clone() above and we need to copy the statements.
        # If it's null then we've already cloned the statement list when we clone()d
        # the method above.
        m.statements = aspect_statements.clone( null as CloneArgs )
      endIf

      if (incorporating_classes is null) incorporating_classes = Type[]
      incorporating_classes.add( into_type )

      m.signature = null
      m.cpp_name = null
      m.assign_signature

      return m

    method accepts_arg_count( n:Integer )->Logical
      return n >= min_args and n <= parameters.count

    method add_local( v_t:Token, v_name:String, v_type=null:Type, v_initial_value=null:Cmd )->Local
      local v = Local( v_t, v_name )
      v.index = locals.count
      v.type = v_type
      v.initial_value = v_initial_value
      locals.add( v )
      return v

    method add_parameter( p_t:Token, p_name:String, p_type=null:Type )->Local
      local p = add_local( p_t, p_name, p_type )
      parameters.add( p )
      return p

    method assign_cpp_name
      if (cpp_name?) return
      local buffer = StringBuilder()
      buffer.print( "Rogue" )
      buffer.print( type_context.name ).print( "__" )
      buffer.print( name )
      cpp_name = Program.validate_cpp_name( buffer->String )

    method assign_signature
      if (signature?) return
      local buffer = StringBuilder()
      buffer.print name
      buffer.print "("
      local first = true
      forEach (param in parameters)
        if (first) first = false
        else       buffer.print( "," )
        buffer.print( param.type.name )
      endForEach
      buffer.print ")"
      signature = buffer->String

    method compile_target->Method
      if (generic_method?) return generic_method
      return this

    method is_dynamic->Logical
      return (attributes.flags & Attribute.is_dynamic)?

    method is_generated->Logical
      return (attributes.flags & Attribute.is_generated)?

    method is_incorporated->Logical
      return (attributes.flags & Attribute.is_incorporated)?

    method is_initializer->Logical
      return (attributes.flags & Attribute.is_initializer)?

    method is_inline->Logical
      return (attributes.flags & Attribute.is_inline)?

    method is_native->Logical
      return (attributes.flags & Attribute.is_native)?

    method is_overridden->Logical
      return (attributes.flags & Attribute.is_overridden)?

    method is_routine->Logical
      return (attributes.flags & Attribute.is_routine)?

    method is_task->Logical
      return (attributes.flags & Attribute.is_task)?

    method is_task_conversion->Logical
      return (attributes.flags & Attribute.is_task_conversion)?

    method omit_output->Logical
      return is_native or is_inline or (is_generated and name=="create" and type_context.is_compound)

    method organize( add_to_lookup=true:Logical )->Method
      if (organized) return this
      organized = true

      if (name == "init")
        if (type_context.is_compound)
          throw t.error( "Compounds cannot have initializers.  Use create(...) routines instead." )
        endIf
        attributes.flags |= Attribute.is_initializer
        return_type = type_context
      endIf

      if (is_task)
        task_result_type = return_type
        if (return_type?)
          return_type.organize
          return_type = Program.get_type_reference( t, "TaskWithResult<<$>>"(return_type.name) )
        else
          return_type = Program.get_type_reference( t, "Task" )
        endIf
        return_type.organize
      endIf

      forEach (param in parameters)
        if (not is_routine) 
          local property = type_context.find_property( param.name )

          if (property?)
            if (param.type is null)
              # Autostore parameter
              local new_name = Program.create_unique_id
              local pt = param.t
              statements.insert( CmdAssign(pt,CmdAccess(pt,param.name),CmdAccess(pt,new_name)) )
              param.name = new_name
              param.type = property.type
              param.generic_type = property.generic_type
            else
              throw param.t.error( //A property named "$" already exists.// (param.name) )
            endIf
          endIf
        endIf

        if (not param.type) throw param.t.error( //No type declared for parameter "$".// (param.name) )
      endForEach

      assign_signature

      if (add_to_lookup)
        # Add method to type's lookup table.
        if (is_routine)
          local existing_m = type_context.routine_lookup_by_signature[signature]
          if (existing_m? and existing_m.type_context is type_context)
            throw t.error( "A routine with the signature $ is already defined." (signature) )
          endIf
          type_context.routine_lookup_by_signature[signature] = this
        else
          local existing_m = type_context.method_lookup_by_signature[signature]
          if (existing_m? and existing_m.type_context is type_context)
            throw t.error( "A method with the signature $ is already defined." (signature) )
          endIf
          type_context.method_lookup_by_signature[signature] = this
        endIf
      endIf

      min_args = parameters.count
      while (min_args >= 1 and parameters[min_args-1].initial_value?)
        --min_args
      endWhile

      return this

    method print_prototype( writer:CPPWriter )
      if (omit_output) return
      print_signature( writer )
      writer.println( ";" )

    method print_signature( writer:CPPWriter )
      writer.print( return_type ).print(" ").print( cpp_name )
      writer.print( "(" )
      local first = true
      if (not is_routine)
        first = false
        writer.print( " " )
        if (type_context.is_aspect)
          writer.print( Program.type_Object )
        else
          writer.print( type_context )
        endIf
        writer.print( " THIS" )
      endIf
      if (parameters.count?)
        forEach (param in parameters)
          if (first) writer.print( " " ); first = false
          else       writer.print( ", " )
          writer.print( param.type ).print( " " ).print( param.cpp_name )
        endForEach
      endIf
      if (not first) writer.print( " " )
      writer.print( ")" )

    method print_definition( writer:CPPWriter )
      if (omit_output) return

      print_signature( writer )
      writer.println
      writer.println "{"
      writer.indent += 2
      if (type_context.is_aspect)
        writer.println( "switch (THIS->type->index)" );
        writer.println "{"
        writer.indent += 2
        if (incorporating_classes?)
          forEach (ic in incorporating_classes)
            writer.print("case ").print(ic.index).println(":")
            if (return_type?) writer.print( "  return " )
            else              writer.print( "  " )
            local m = ic.find_method(signature).compile_target
            writer.print( m.cpp_name ).print( "( (" ).print( m.type_context ).print( ")THIS" )
            forEach (param in parameters)
              writer.print( ", " ).print( param.cpp_name )
            endForEach
            writer.println( " );" )
          endForEach
        endIf
        if (return_type?)
          writer.println( "default:" )
          writer.print( "  return " ).print_default_value( return_type ).println( ";" )
        endIf
        writer.indent -= 2
        writer.println "}"
      else
        statements.write_cpp( writer )
      endIf

      writer.indent -= 2
      writer.println "}"
      writer.println


    method resolve
      if (resolved) return
      resolved = true

      forEach (param in parameters) param.type.organize
      if (return_type?) return_type.organize

      if (type_context.generic_type?)
        # Find the generic version of this method
        type_context.generic_type.organize
        local buffer = StringBuilder()
        buffer.print( name ).print( "(" )

        local first = true
        forEach (p in parameters)
          if (first) first = false
          else       buffer.print( "," )
          if (p.generic_type?) buffer.print( p.generic_type.name )
          else                 buffer.print( p.type.name )
        endForEach

        buffer.print( ")" )

        local generic_sig = buffer->String
        generic_method = type_context.generic_type.find_method( generic_sig )
        if (not generic_method)
          trace
          throw t.error( "[INTERNAL] Could not find generic mapping of $::$ -> $::$" (type_context,signature,type_context.generic_type,generic_sig) )
        endIf
      endIf

      if (type_context.is_aspect)
        aspect_statements = statements
        statements = CmdStatementList()
      endIf

      if (is_task) convert_to_task

      local scope = Scope( type_context, this )
      forEach (p in parameters) scope.push_local( p )

      statements.resolve( scope )

      if (scope.local_list.count > parameters.count) throw t.error( "locals left on scope stack" )
      if (scope.control_stack.count?) throw t.error( "control stucture left on scope stack" )

      if (is_initializer)
        local return_t = t
        if (statements.count?) return_t = statements.last.t
        statements.add( CmdReturn(return_t,CmdLiteralThis(return_t,type_context)).resolve(scope) )
      endIf

    method convert_to_task
      # Create the class that will store the converted method
      local task_type = Program.get_type_reference( t, "$__$__task$" (type_context.name,name,Program.next_unique_integer) )
      task_type.attributes.add( Attribute.is_class )
      task_type.base_types.add( return_type )  # Task or TaskWithResult<<ResultType>>

      # Add an init method that accepts the original class context as well as all method parameters
      local m_init = task_type.add_method( t, "init" )
      m_init.add_parameter( t, "context" )
      forEach (p in parameters)
        m_init.add_parameter( t, "$_$" (p.name,p.index) )
      endForEach

      local m_update = task_type.add_method( t, "update" )
      m_update.return_type = Program.type_Logical
      m_update.statements.add( CmdGenericLoop( t, CmdControlStructure.type_while, CmdAccess(t,"execute",CmdArgs()) ) )
      m_update.statements.add( CmdReturn( t, CmdCompareNE(t,CmdAccess(t,"ip"),CmdLiteralInteger(t,-1)) ) )

      local m_execute = task_type.add_method( t, "execute" )
      m_execute.return_type = Program.type_Logical
      task_type.defined = true

      # Create a temporary method to store the task body and resolve all statements and variable
      # binding.  Then convert the resolved method to a task - locals to properties, this.properties
      # to context.properties, etc.
      local m_name = "__task_resolver" + Program.create_unique_id
      local m_temp = Method( t, type_context, m_name )
      m_temp.return_type = task_result_type
      m_temp.attributes.add( Attribute.is_task_conversion )

      # Move the Local var objects to the temp method (since Cmd code might reference them directly)
      # along with the statements and resolve the temp method
      m_temp.parameters = parameters
      m_temp.locals = locals
      m_temp.statements = statements
      m_temp.organize( false )  # organize but don't add to type's method tables
      m_temp.resolve

      # Now come back and fix up this method's parameters and statements
      locals = Local[]
      parameters = Local[]
      forEach (v in m_temp.locals)
        if (v.index < m_temp.parameters.count)
          add_parameter( v.t, v.name, v.type )
        endIf
      endForEach

      # Original method gets a "return TaskObjectName()"
      statements = CmdStatementList()
      local args = CmdArgs()
      args.add( CmdLiteralThis(t,this.type_context) )
      forEach (p in m_temp.parameters) args.add( CmdAccess(t,p.name) )
      statements.add( CmdReturn( t, CmdAccess(t,task_type.name,args) ) )

      # Convert resolved method into task "functor"
      forEach (v in m_temp.locals)
        local p_name = v.name + "_" + v.index
        local p = task_type.add_property( v.t, p_name, v.type )
      endForEach

      local task_args = TaskArgs( task_type, m_execute, this.type_context, this )
      task_args.context_property = task_type.add_property( t, "context", this.type_context )
      task_args.ip_property = task_type.add_property( t, "ip", Program.type_Integer )

      forEach (statement in m_temp.statements)
        statement = statement.clone( task_args )
        if (statement?) task_args.add( statement )
      endForEach
      if (task_args.cmd_task_control.current_section.statements.count == 0)
        task_args.cmd_task_control.current_section.statements.add( task_args.create_return(t) )
      endIf

      m_execute.statements.add( task_args.cmd_task_control )

      task_type.organize

    method set_incorporated->Method
      attributes.add( Attribute.is_incorporated )
      return this

    method set_type_context( @type_context )->Method
      return this

    method to->String
      return signature
endClass

