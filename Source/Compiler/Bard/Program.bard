class Program [requisite singleton]
  PROPERTIES
    code_prefix  = "Rogue"
    program_name = "Rogue_program"

    unique_integer : Integer

    template_list   = Template[]                 : Template[]
    template_lookup = Table<<String,Template>>() : Table<<String,Template>>

    first_filepath           = ""
    explicit_main_class_t    : Token
    explicit_main_class_name : String
    implicit_main_class_t    : Token
    implicit_main_class_name : String
    main_class               : Type

    type_list       = Type[]                 : Type[]
    type_lookup     = Table<<String,Type>>() : Table<<String,Type>>

    type_null        : Type
    type_Real        : Type
    type_Float       : Type
    type_Long        : Type
    type_Integer     : Type
    type_Character   : Type
    type_Byte        : Type
    type_Logical     : Type

    type_Object      : Type
    type_String      : Type
    type_NativeArray : Type
    type_GenericList : Type
    type_Global      : Type
    type_Error       : Type

    type_StringBuilder : Type
    type_FileReader    : Type
    type_FileWriter    : Type

    literal_string_lookup = Table<<String,Integer>>() : Table<<String,Integer>>
    literal_string_list   = String[]

    string_buffer = StringBuilder()

  METHODS
    method configure
      type_null          = create_built_in_type( "null",      Attribute.is_native | Attribute.is_class )
      type_Real          = create_built_in_type( "Real",      Attribute.is_native | Attribute.is_primitive )
      type_Float         = create_built_in_type( "Float",     Attribute.is_native | Attribute.is_primitive )
      type_Long          = create_built_in_type( "Long",      Attribute.is_native | Attribute.is_primitive )
      type_Integer       = create_built_in_type( "Integer",   Attribute.is_native | Attribute.is_primitive )
      type_Character     = create_built_in_type( "Character", Attribute.is_native | Attribute.is_primitive )
      type_Byte          = create_built_in_type( "Byte",      Attribute.is_native | Attribute.is_primitive )
      type_Logical       = create_built_in_type( "Logical",   Attribute.is_native | Attribute.is_primitive )

      type_Object        = create_built_in_type( "Object", Attribute.is_native | Attribute.is_class )
      type_String        = create_built_in_type( "String", Attribute.is_native | Attribute.is_class | Attribute.is_functional )
      type_StringBuilder = create_built_in_type( "StringBuilder", Attribute.is_class )
      type_NativeArray   = create_built_in_type( "NativeArray", Attribute.is_native | Attribute.is_class )
      type_GenericList   = create_built_in_type( "GenericList", Attribute.is_class )
      type_Global        = create_built_in_type( "Global", Attribute.is_class )
      type_Error         = create_built_in_type( "Error", Attribute.is_class )

      type_FileReader    = create_built_in_type( "FileReader", Attribute.is_class | Attribute.is_native )
      type_FileWriter    = create_built_in_type( "FileWriter", Attribute.is_class | Attribute.is_native )

      type_Object.simplify_name = true
      type_String.simplify_name = true
      type_StringBuilder.simplify_name = true
      type_FileReader.simplify_name = true
      type_FileWriter.simplify_name = true

      type_null.organized = true
      type_null.defined   = true

      # Ensure that "" is the first literal string
      literal_string_list.add( "" )
      literal_string_lookup[ "" ] = 0

    method create_unique_id->String
      return "_auto_" + next_unique_integer

    method next_unique_integer->Integer
      ++unique_integer
      return unique_integer - 1

    method find_template( name:String )->Template
      if (name.ends_with(']')) return template_lookup[ "List" ]
      return template_lookup[ name.before_first('<') ]

    method find_type( name:String )->Type
      local type = type_lookup[ name ]
      if (type?) return type

      local template = find_template( name )
      if (template?)
        type = Type( template.t, name )
        type_lookup[name] = type
        return type
      endIf

      return null

    method get_type_reference( t:Token, name:String )->Type
      local type = type_lookup[ name ]
      if (type?) return type

      type = Type( t, name )
      type_lookup[name] = type

      return type

    method get_callback_type_signature( parameter_types:Type[] )->String
      string_buffer.clear.print( "(" )
      if (parameter_types?)
        local first = true
        forEach (type in parameter_types)
          if (first) first = false
          else       string_buffer.print( ',' )
          string_buffer.print( type.name )
        endForEach
      endIf
      string_buffer.print( ')' )
      return string_buffer->String

    method get_callback_type_reference( t:Token, parameter_types:Type[], return_type:Type )->Type
      local name = "Callback" + get_callback_type_signature( parameter_types )
      if (return_type?) name += "->" + return_type.name

      local type = get_type_reference( t, name )
      if (type.defined) return type

      type.defined = true
      type.attributes.add( Attribute.is_class )
      local m_call = type.add_method( t, "call" )
      if (parameter_types?)
        forEach (i of parameter_types) m_call.add_parameter( t, "param"+(i+1), parameter_types[i] )
      endIf
      if (return_type?)
        m_call.return_type = return_type
        m_call.statements.add( CmdReturn(t,return_type.create_default_value(t)) )
      endIf

      return type

    method create_built_in_type( name:String, attributes=0:Integer )->Type
      local t = TokenType("Internal").create_token( "[Built-in Type]", 0, 0 )
      local type = get_type_reference( t, name )
      type.attributes.add( attributes )
      return type

    method resolve
      if (explicit_main_class_t?)
        main_class = get_type_reference( explicit_main_class_t, explicit_main_class_name )
      elseIf (implicit_main_class_t?)
        main_class = get_type_reference( implicit_main_class_t, implicit_main_class_name )
      else
        throw RogueError( "No candidates for main class." )
      endIf

      type_null.resolve
      type_Real.resolve
      type_Float.resolve
      type_Long.resolve
      type_Integer.resolve
      type_Character.resolve
      type_Byte.resolve
      type_Logical.resolve
      type_Global.resolve
      type_Error.resolve

      type_Object.resolve
      type_NativeArray.resolve
      type_GenericList.resolve
      type_String.resolve

      main_class.resolve
      local m = main_class.find_method( "init()" )
      if (m?) m.resolve

      # Reference and resolve all requisite type templates
      forEach (templ in template_list)
        if ((templ.attributes.flags & Attribute.is_requisite)? and not templ.type_parameters)
          get_type_reference( templ.t, templ.name ).resolve
        endIf
      endForEach

      local i = 0
      while (i < type_list.count)
        type_list[i].resolve
        ++i
      endWhile

    method validate_cpp_name( name:String )->String
      local begins_with_code_prefix = false
      if (name.begins_with(code_prefix))
        begins_with_code_prefix = true
        name = name.substring( code_prefix.count )
      endIf

      local i1 = name.locate("<<")
      while (i1 != -1)
        local i2 = name.locate_last(">>")
        if (i2 == -1) escapeWhile

        local before = name.substring(0,i1-1)
        local after  = name.substring(i2+2)
        local middle = name.substring(i1+2,i2-1)

        #name = "$_of_$$" (before,middle,after)

        name = "$$$" (validate_cpp_name(middle),before,after)
        # Example:
        #   Table<<String,Integer>>[] -> StringIntegerTable[]

        i1 = name.locate("<<")
      endWhile

      #   StringIntegerTable[] -> StringIntegerTableList
      i1 = name.locate("[]")
      while (i1 != -1)
        name = name.substring(0,i1-1) + "List" + name.substring(i1+2)
        i1 = name.locate("[]")
      endWhile

      string_buffer.clear
      if (begins_with_code_prefix) string_buffer.print( Program.code_prefix )
      forEach (ch in name)
        if (ch.is_alphanumeric)
          string_buffer.print( ch )
        else
          which (ch)
            case '!': string_buffer.print( "NOT" )
            case '%': string_buffer.print( "MOD" )
            case '&': string_buffer.print( "AND" )
            case '*': string_buffer.print( "TIMES" )
            case '+': string_buffer.print( "PLUS" )
            case '-': string_buffer.print( "MINUS" )
            case '.': string_buffer.print( "DOT" )
            case '/': string_buffer.print( "SLASH" )
            case '<': string_buffer.print( "LESSTHAN" )
            case '=': string_buffer.print( "EQUALS" )
            case '>': string_buffer.print( "GREATERTHAN" )
            case '^': string_buffer.print( "POWER" )
            case '|': string_buffer.print( "OR" )
            case '~': string_buffer.print( "XOR" )
            others:   string_buffer.print( '_' )
          endWhich
        endIf
      endForEach

      return string_buffer->String

    method write_cpp( filepath:String )
      forEach (type in type_list) type.assign_cpp_name
      type_NativeArray.cpp_class_name = "RogueArray"

      forEach (type in type_list)
        forEach (r in type.routine_list) r.assign_cpp_name
        forEach (m in type.method_list)  m.assign_cpp_name
      endForEach

      # .H header -------------------------------------------------------------
      local writer = CPPWriter( filepath + ".h" )
      writer.println

      writer.println //#pragma  once//
      writer.println //#include "Rogue.h"//
      writer.println //#include <cmath>//
      writer.println

      # RogueType forward declarations
      forEach (type in type_list)
        if (not type.omit_output)
          writer.print( "struct " ).print( type.cpp_class_name ).println( "Type;" );
        endIf
      endForEach
      writer.println

      # RogueObject forward declarations
      forEach (type in type_list)
        if (not type.omit_output)
          writer.print( "struct " ).print( type.cpp_class_name ).println( ";" );
        endIf
      endForEach
      writer.println

      # RogueObject definitions
      forEach (type in type_list)
        if (not type.omit_output)
          type.print_data_definition( writer )
          writer.println
        endIf
      endForEach
      writer.println

      # RogueProgram object
      writer.println( "struct RogueProgram : RogueProgramCore" )
      writer.println( "{" )
      forEach (type in type_list)
        if (not type.omit_output)
          writer.print( "  " ).print( type.cpp_class_name ).print( "Type* type_" );
          writer.print( type.cpp_class_name ).println( ";" );
        endIf
      endForEach
      writer.println
      writer.println( "  RogueProgram();" )
      writer.println( "  ~RogueProgram();" )
      writer.println( "  void configure( int argc, char* argv[] );" )
      writer.println( "  void launch();" )
      writer.println( "  void finish_tasks();" )
      writer.println( "};" )
      writer.println

      # method prototypes
      forEach (type in type_list) type.print_method_prototypes( writer )
      writer.println

      writer.println( "extern RogueProgram Rogue_program;" );

      writer.close

      # .CPP implementation ---------------------------------------------------
      writer = CPPWriter( filepath + ".cpp" )
      writer.println

      local base_filename = filepath
      if (base_filename.contains('/')) base_filename = base_filename.after_last('/')
      writer.println //#include <stdio.h>//
      writer.println //#include "$.h"// (base_filename)
      writer.println

      # typedef each unique method signature
      local native_method_signature_list   = String[]
      local native_method_signature_lookup = Table<<String,Method>>()
      forEach (type in type_list)
        type.determine_cpp_method_typedefs( native_method_signature_list, native_method_signature_lookup )
      endForEach

      forEach (sig in native_method_signature_list)
        writer.print( "typedef " ).print( sig.before_first("(*)") ).print( "(*" )
        writer.print( native_method_signature_lookup[sig].cpp_typedef ).print(")")
        writer.print( sig.after_first("(*)") ).println( ";" )
      endForEach
      writer.println

      # write dynamic dipatch methods
      forEach (sig in native_method_signature_list)
        local m = native_method_signature_lookup[sig]  # one of the methods using this signature
        writer.print( m.return_type ).print( " call_" ).print( m.cpp_typedef )
        writer.print( "( int i, " ).print( m.type_context ).print( " THIS" )
        forEach (i of m.parameters)
          local p = m.parameters[i]
          writer.print( ", " ).print(p.type.compile_type).print( " p" ).print( i )
        endForEach
        writer.println( " )" )
        writer.println( "{" )
        writer.print( "  " )
        if (m.return_type?) writer.print( "return " )
        writer.print( "((" ).print( m.cpp_typedef )
        writer.print( ")(THIS->type->methods[i]))( THIS" )
        forEach (i of m.parameters)
          writer.print( ", p" ).print( i )
        endForEach
        writer.println( " );" )
        writer.println( "}" )
        writer.println
      endForEach
      writer.println

      # dynamic method table
      writer.println( "void* Rogue_dynamic_method_table[] =" )
      writer.println( "{" )
      writer.indent += 2
      local table_index = 0
      forEach (type in type_list)
writer.println( "// " + type )
        if (not type.omit_output)
          table_index = type.print_dynamic_method_table_entries( table_index, writer )
        endIf
      endForEach
      writer.println
      writer.indent -= 2
      writer.println( "};" )
      writer.println

      # XType definitions
      forEach (type in type_list)
        type.print_type_definition( writer )
      endForEach
      writer.println

      forEach (type in type_list) type.print_routine_prototypes( writer )
      writer.println

      forEach (type in type_list) type.print_routine_definitions( writer )
      writer.println

      forEach (type in type_list) type.print_method_definitions( writer )
      writer.println

      # RogueProgram constructor
      local type_count = 0
      forEach (type in type_list)
        if (not (type.generic_type? or type.is_array)) ++type_count
      endForEach
      writer.print( "RogueProgram::RogueProgram() : RogueProgramCore(" ).print( type_count ).println( ")" )
      writer.println  "{"
      writer.println  "}"
      writer.println

      # RogueProgram destructor
      writer.println( "RogueProgram::~RogueProgram()" )
      writer.println  "{"
      writer.println  "}"
      writer.println

      # configure() method
      writer.println( "void RogueProgram::configure( int argc, char* argv[] )" )
      writer.println( "{" )
      writer.indent += 2

      # Create types
      forEach (type in type_list)
        if (not type.omit_output)
          writer.print("type_").print(type.cpp_class_name).print(" = new ").print(type.cpp_class_name).println("Type();")
        endIf
      endForEach
      writer.println

      # Assign native type indices
      forEach (type in type_list)
        if (type.is_native or not type.omit_output)
          writer.print("type_").print(type.cpp_class_name).print("->index = ").print( type.index ).println( ";" )
        endIf
      endForEach
      writer.println

      # Configure types
      forEach (type in type_list)
        if (not type.omit_output)
          writer.print("type_").print(type.cpp_class_name).println("->configure();" )
        endIf
      endForEach
      writer.println

      writer.print(   "literal_string_count = " ).print( Program.literal_string_list.count ).println( ";" )
      writer.println( "literal_strings = new RogueString*[literal_string_count];" )
      forEach (i of Program.literal_string_list)
        writer.print(   "literal_strings[" ).print(i).print("] = (RogueString*) RogueString::create( ")
        writer.print_string_utf8( Program.literal_string_list[i] )
        writer.println( " )->retain(); " )
      endForEach
      writer.println

      # Call all init_class() methods
      forEach (type in type_list)
        if (not type.omit_output)
          local m = type.find_routine( "init_class()" )
          if (m?)
            writer.print( m.cpp_name ).println( "();" )
          endIf
        endIf
      endForEach
      writer.println

      # Copy command line args to System class
      writer.println( "RogueClassSystem::executable_filepath = RogueString::create( argv[0] );" );
      writer.println( "for (int i=1; i<argc; ++i)" )
      writer.println( "{" )
      writer.println( "  RogueStringList__add( RogueClassSystem::command_line_arguments, RogueString::create( argv[i] ) );" )
      writer.println( "}" )
      writer.println

      writer.print(   "Rogue_program.main_object = Rogue_program.type_").print(main_class.cpp_class_name).println( "->create_object();" )
      # Call init_object() on main object
      local m = main_class.find_method( "init_object()" )
      if (m?)
        writer.print(m.cpp_name).print("( (").print(main_class.cpp_class_name).println("*)Rogue_program.main_object );")
      endIf

      # End of configure()
      writer.indent -= 2
      writer.println( "}" )
      writer.println

      # launch()
      writer.println( "void RogueProgram::launch()" )
      writer.println( "{" )
      writer.indent += 2

      # Call init() on main object
      m = main_class.find_method( "init()" )
      if (m?)
        writer.print(m.cpp_name).print("( (").print(main_class.cpp_class_name).println("*)Rogue_program.main_object );")
      endIf
      writer.println( "Rogue_program.collect_garbage();" )

      writer.indent -= 2
      writer.println( "}" )
      writer.println

      # finish_tasks() method
      writer.println( @|void RogueProgram::finish_tasks()
                       |{
                       |  while (RogueTaskManager__update(Rogue_program.type_RogueClassTaskManager->singleton()))
                       |  {
                       |    Rogue_program.collect_garbage();
                       |  }
                       |}
                     )


      writer.println "RogueProgram Rogue_program;"
      writer.println

      # Setting (static) declarations 
      forEach (type in type_list) type.declare_settings( writer )

      # Optional main()
      if (RogueC.generate_main)
        writer.println
        writer.println( @|int main( int argc, char* argv[] )
                         |{
                         |  Rogue_program.configure( argc, argv );
                         |  Rogue_program.launch();
                         |  Rogue_program.finish_tasks();
                         |  return 0;
                         |}
        )
      endIf

      writer.close
endClass

