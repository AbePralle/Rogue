class CloneArgs
  PROPERTIES
    task_type    : Type
    method_info  : Method
    this_context : Cmd
    arg_lookup : Table<<String,Cmd>>

  METHODS
    method inlining->Logical
      return false

    method converting_task->Logical
      return false

    method inline_this->Cmd
      throw method_info.t.error( "[INTERNAL] Unsupported call to CloneArgs::inline_this()." )

    method inline_access( access:CmdAccess )->Cmd
      throw method_info.t.error( "[INTERNAL] Unsupported call to CloneArgs::inline_access()." )

    method inline_read_local( read_cmd:CmdReadLocal )->Cmd
      throw method_info.t.error( "[INTERNAL] Unsupported call to CloneArgs::inline_read_local()." )

    method inline_write_local( write_cmd:CmdWriteLocal )->Cmd
      throw method_info.t.error( "[INTERNAL] Unsupported call to CloneArgs::inline_write_local()." )

    method add( cmd:Cmd )->TaskArgs
      throw method_info.t.error( "[INTERNAL] Unsupported call to CloneArgs::add()." )

    method add_return( t:Token, value=null:Cmd )->TaskArgs
      throw method_info.t.error( "[INTERNAL] Unsupported call to CloneArgs::add_return()." )
endClass


class InlineArgs : CloneArgs
  METHODS
    method init( this_context, method_info, args:CmdArgs )
      if (args?)
        arg_lookup = Table<<String,Cmd>>()
        forEach (index of args)
          arg_lookup[ method_info.parameters[index].name ] = args[index]
        endForEach
      endIf

    method inlining->Logical
      return true

    method inline_this->Cmd
      return this_context.clone()

    method inline_access( access:CmdAccess )->Cmd
      if (access.context?) return access

      local arg = arg_lookup[ access.name ]
      if (not arg) return access

      local dup = arg.clone
      if (access.args?)
        local new_access = dup as CmdAccess
        if (new_access?)
          if (new_access.args?)
            throw access.t.error( "Illegal arguments on inline code." )
          else
            new_access.args = access.args
          endIf
        else
          throw access.t.error( "Illegal arguments on inline code." )
        endIf
      endIf

      return dup

    method inline_read_local( read_cmd:CmdReadLocal )->Cmd
      local arg = arg_lookup[ read_cmd.local_info.name ]
      if (not arg) return read_cmd
      return arg.clone.set_modifiers( read_cmd )

    method inline_write_local( write_cmd:CmdWriteLocal )->Cmd
      local arg = arg_lookup[ write_cmd.local_info.name ]
      if (not arg) return write_cmd
      return CmdAssign( write_cmd.t, arg.clone(), write_cmd.new_value )
endClass


class TaskArgs : CloneArgs
  PROPERTIES
    original_context : Type
    original_method  : Method
    cmd_task_control : CmdTaskControl
    ip_property      : Property

  METHODS
    method init( task_type, method_info, original_context, original_method )
      cmd_task_control = CmdTaskControl( method_info.t )

    method add( cmd:Cmd )->TaskArgs
      cmd_task_control.current_section.statements.add( cmd ) 
      return this

    method add_return( t:Token, value=null:Cmd )->TaskArgs
      if (value?) cmd_task_control.add( CmdAssign( t, CmdAccess(t,"result"), value ) )
      cmd_task_control.add( CmdWriteProperty( t, CmdThisContext(t,task_type), ip_property, CmdLiteralInteger(t,-1) ) )
      cmd_task_control.add( CmdReturn(t,CmdLiteralLogical(t,false)) )
      return this

    method converting_task->Logical
      return true

endClass

