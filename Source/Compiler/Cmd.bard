class Cmd
  PROPERTIES
    t : Token

  METHODS
    method exit_scope( scope:Scope )

    method print_cpp( writer:CPPWriter )
      throw t.error( "[INTERNAL] $::print_cpp() is not defined." (type_name) )

    method implicit_type->Type
      return null

    method postmodify( count:Integer )->Cmd
      throw t.error( "Illegal target; ++ and -- can only be applied to specific variables." )

    method premodify( count:Integer )->Cmd
      throw t.error( "Illegal target; ++ and -- can only be applied to specific variables." )

    method require_type->Type
      local result = type
      if (result is null) throw t.error( "Value expected; this statement or expression does not result in a value." )
      return result

    method require_value->Cmd
      require_type
      return this

    method resolve( scope:Scope )->Cmd
      throw t.error( "[INTERNAL] $::resolve() is not defined." (type_name) )
      return this

    method resolve_assignment( scope:Scope, new_value:Cmd )->Cmd
      throw t.error( "[INTERNAL] $::resolve_assignment() is not defined." (type_name) )
      return this

    method type->Type
      throw t.error( "[INTERNAL] $::type() is not defined." (type_name) )

endClass

#------------------------------------------------------------------------------
# StatementList
#------------------------------------------------------------------------------
class CmdStatementList : Cmd[]
  METHODS
    method init
      prior.init

    method init( initial_capacity:Integer)
      prior.init( initial_capacity )

    method init( statement:Cmd )
      init
      add( statement )

    method init( statement1:Cmd, statement2:Cmd )
      init
      add( statement1 ).add( statement2 )

      #{
    method has_side_effects->Logical
      forEach (cmd in this)
        if (cmd.has_side_effects) return true
      endForEach
      return false

    method clone->CmdStatementList
      local result = CmdStatementList( count )
      forEach (cmd in this) result.add( cmd.clone )
      return result

    method dispatch( v:Visitor ) [propagated]
      v.visit( this )

    method print( buffer:StringBuilder )
      Analyzer.context.push_local_scope
      forEach (statement in this)
        buffer.print( "      " )
        buffer.print( statement.type_name )
        buffer.print( " " )
        statement.print( buffer )
        buffer.println
      endForEach
      Analyzer.context.pop_local_scope
      }#

    method print_cpp( writer:CPPWriter )
      forEach (statement in this)
        statement.print_cpp( writer )
        writer.println ";"
      endForEach

    method resolve( scope:Scope )
      forEach (i of this)
        this[i] = this[i].resolve( scope )
      endForEach

      forEach (statement in this) statement.exit_scope( scope )
endClass

#------------------------------------------------------------------------------
# CmdArgs
#------------------------------------------------------------------------------
class CmdArgs : Cmd
endClass

#------------------------------------------------------------------------------
# Statements
#------------------------------------------------------------------------------
class CmdStatement : Cmd
endClass

class CmdLocalDeclaration : CmdStatement
  PROPERTIES
    local_info : Local

  METHODS
    method init( t, local_info )

    method exit_scope( scope:Scope )
      scope.pop_local

    method print_cpp( writer:CPPWriter )
      writer.print( local_info.type ).print(" ").print( local_info.name ).print(" = ")
      if (local_info.initial_value?)
        local_info.initial_value.print_cpp( writer )
      else
        writer.print_default_value( local_info.type )
      endIf

    method resolve( scope:Scope )->Cmd
      scope.push_local( local_info )

      if (local_info.initial_value?)
        local_info.initial_value = local_info.initial_value.resolve( scope )
        local initial_value_type = local_info.initial_value.require_type
        if (local_info.type is null) local_info.type = initial_value_type
      endIf

      if (local_info.type is null)
        throw t.error( "Cannot determine type of local variable - either assign an initial value (local $ = ...) or assign a type (local $ : Integer)." (local_info.name,local_info.name) )
      endIf

      local_info.type.resolve

      return this
endClass

class CmdPrintln : CmdStatement
  PROPERTIES
    expression : Cmd

  METHODS
    method init( t, expression=null )

    method print_cpp( writer:CPPWriter )
      if (expression?)
        local print_type = expression.type
        if (print_type is Program.type_String)
          writer.print "RogueString::println( "
          expression.print_cpp( writer )
          writer.print " )"
        elseIf (print_type is Program.type_Integer)
          writer.print( //printf( "%d\\n", // )
          expression.print_cpp( writer )
          writer.print " )"
        else
          throw t.error( "[INTERNAL/CmdPrintln] Unhandled type in println: " + print_type.name )
        endIf
      else
        writer.print //printf( "\\n" )//
      endIf

    method resolve( scope:Scope )->Cmd
      if (expression is null) return this

      expression = expression.resolve( scope )
      return this
endClass

class CmdReturnValue : CmdStatement
  PROPERTIES
    expression : Cmd

  METHODS
    method init( t, expression )

    method print_cpp( writer:CPPWriter )
      writer.print "return "
      expression.print_cpp( writer )

    method resolve( scope:Scope )->Cmd
      expression = expression.resolve( scope )
      return this
endClass


#------------------------------------------------------------------------------
# Literals
#------------------------------------------------------------------------------
class CmdLiteral : Cmd
  METHODS
    method implicit_type->Type
      return type
endClass


class CmdLiteralReal : CmdLiteral
  PROPERTIES
    value : Real

  METHODS
    method init( t, value )

    method resolve( scope:Scope )->Cmd
      return this

    method type->Type
      return Program.type_Real
endClass


class CmdLiteralInteger : CmdLiteral
  PROPERTIES
    value : Integer

  METHODS
    method init( t, value )

    method print_cpp( writer:CPPWriter )
      writer.print( value )

    method resolve( scope:Scope )->Cmd
      return this

    method type->Type
      return Program.type_Integer
endClass


class CmdLiteralCharacter : CmdLiteral
  PROPERTIES
    value : Character

  METHODS
    method init( t, value )

    method resolve( scope:Scope )->Cmd
      return this

    method type->Type
      return Program.type_Character
endClass


class CmdLiteralLogical : CmdLiteral
  PROPERTIES
    value : Logical

  METHODS
    method init( t, value )

    method resolve( scope:Scope )->Cmd
      return this

    method type->Type
      return Program.type_Logical
endClass


class CmdLiteralString : CmdLiteral
  PROPERTIES
    value : String
    index : Integer

  METHODS
    method init( t, value )

    method print_cpp( writer:CPPWriter )
      if (value?)
        writer.print( "rogue_program.literal_strings[" ).print( index ).print( "]" )
      else
        writer.print( "0" );
      endIf

    method resolve( scope:Scope )->Cmd
      Program.type_String.resolve
      if (value?)
        if (not Program.literal_string_lookup.contains(value))
          index = Program.literal_string_list.count
          Program.literal_string_lookup[value] = index
          Program.literal_string_list.add( value )
        endIf
      endIf
      return this

    method type->Type
      return Program.type_String
endClass


#------------------------------------------------------------------------------
# Access
#------------------------------------------------------------------------------
class CmdAccessWithModify : Cmd
  PROPERTIES
    premodify_count : Integer
    # Sum of pre-increment and pre-decrement

    postmodify_count : Integer
    # Sum of post-increment and post-decrement

  METHODS
    method postmodify( count:Integer )->Cmd
      if (count? and (premodify_count? or postmodify_count?))
        throw t.error( "Only one ++ or -- may be used at a time." )
      endIf
      postmodify_count += count
      return this

    method premodify( count:Integer )->Cmd
      if (count? and (premodify_count? or postmodify_count?))
        throw t.error( "Only one ++ or -- may be used at a time." )
      endIf
      premodify_count += count
      return this
endClass


class CmdAccess : CmdAccessWithModify
  PROPERTIES
    context   : Cmd
    name      : String
    args      : CmdArgs

  METHODS
    method init( t, name )

    method init( t, context, name )

    method resolve( scope:Scope )->Cmd
      local v = scope.find_local( name )
      if (v?)
        if (args?) throw t.error( "Local variable '$' cannot be called like a method."(name) )
        return CmdReadLocal(t,v).premodify(premodify_count).postmodify(postmodify_count).resolve(scope)
      endIf

      throw t.error( //No such method or variable "$" exists in the current scope.// (name) )

    method resolve_assignment( scope:Scope, new_value:Cmd )->Cmd
      local v = scope.find_local( name )
      if (v?)
        if (args?) throw t.error( "Local variable '$' cannot be called like a method."(name) )
        return CmdWriteLocal(t,v,new_value).resolve(scope)
      endIf

      throw t.error( //No such method or variable "$" exists in the current scope.// (name) )
endClass


#------------------------------------------------------------------------------
# Assign
#------------------------------------------------------------------------------
class CmdAssign : Cmd
  PROPERTIES
    target    : Cmd
    new_value : Cmd

  METHODS
    method init( t, target, new_value )

    method resolve( scope:Scope )->Cmd
      return target.resolve_assignment( scope, new_value )
endClass

#------------------------------------------------------------------------------
# Read/Write
#------------------------------------------------------------------------------

class CmdReadThis : Cmd
  PROPERTIES
    this_type : Type

  METHODS
    method init( t, this_type )

    method print_cpp( writer:CPPWriter )
      writer.print "THIS"

    method resolve( scope:Scope )->Cmd
      this_type.resolve
      return this
endClass

class CmdReadLocal : CmdAccessWithModify
  PROPERTIES
    local_info : Local

  METHODS
    method init( t, local_info )

    method print_cpp( writer:CPPWriter )
      if (premodify_count > 0) writer.print("++")
      elseIf (premodify_count < 0) writer.print("--")

      writer.print( local_info.name )

      if (postmodify_count > 0) writer.print("++")
      elseIf (postmodify_count < 0) writer.print("--")

    method resolve( scope:Scope )->Cmd
      local_info.type.resolve
      return this

    method type->Type
      return local_info.type
endClass


class CmdWriteLocal : Cmd
  PROPERTIES
    local_info : Local
    new_value  : Cmd

  METHODS
    method init( t, local_info, new_value )

    method print_cpp( writer:CPPWriter )
      writer.print( local_info.name ).print(" = ")
      new_value.print_cpp( writer )

    method resolve( scope:Scope )->Cmd
      local_info.type.resolve
      new_value = new_value.resolve(scope).require_value
      return this

    method type->Type
      return local_info.type
endClass


#------------------------------------------------------------------------------
# 
#------------------------------------------------------------------------------
