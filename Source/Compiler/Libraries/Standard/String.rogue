class String [native functional]
  ROUTINES
    routine create( characters:Character[] )->String
      $if ("C++") inlineNative 'RogueString::create( $characters )'

    routine create( characters:StringBuilder )->String
      return create( characters.characters )

    routine operator+( left:Integer, right:String )->String
      return StringBuilder().print( left ).print( right )->String

  METHODS
    method after_any( ch:Character )->String
      local i = locate( ch )
      if (i == -1) return this
      return substring( i+1 )

    method after_any( st:String )->String
      local i = locate( st )
      if (i == -1) return this
      return substring( i+st.count )

    method after_first( ch:Character )->String
      local i = locate( ch )
      if (i == -1) return ""
      return substring( i+1 )

    method after_first( st:String )->String
      local i = locate( st )
      if (i == -1) return ""
      return substring( i+st.count )

    method after_last( ch:Character )->String
      local i = locate_last( ch )
      if (i == -1) return ""
      return substring( i+1 )

    method after_last( st:String )->String
      local i = locate_last( st )
      if (i == -1) return ""
      return substring( i+st.count )

    method before_first( ch:Character )->String
      local i = locate( ch )
      if (i == -1) return this
      return substring( 0, i-1 )

    method before_first( st:String )->String
      local i = locate( st )
      if (i == -1) return this
      return substring( 0, i-1 )

    method before_last( ch:Character )->String
      local i = locate_last( ch )
      if (i == -1) return this
      return substring( 0, i-1 )

    method before_last( st:String )->String
      local i = locate_last( st )
      if (i == -1) return this
      return substring( 0, i-1 )

    method begins_with( ch:Character )->Logical
      return (count? and this[0] == ch)

    method begins_with( other:String )->Logical
      local other_count = other.count
      return (count >= other_count and contains_at(other,0))

    method contains( substring:String )->Logical
      return locate(substring) >= 0

    method contains_at( substring:String, at_index:Integer )->Logical
      $if ("C++") inlineNative '$this->contains($substring,$at_index)'

    method count->Integer
      $if ("C++") inlineNative '$this->count'

    method ends_with( other:String )->Logical
      local other_count = other.count
      return (count >= other_count and other_count > 0 and contains_at(other,count-other_count))

    method from_first( ch:Character )->String
      local i = locate( ch )
      if (i == -1) return ""
      return substring( i )

    method from_first( st:String )->String
      local i = locate( st )
      if (i == -1) return ""
      return substring( i )

    method from_last( ch:Character )->String
      local i = locate_last( ch )
      if (i == -1) return ""
      return substring( i )

    method from_last( st:String )->String
      local i = locate_last( st )
      if (i == -1) return ""
      return substring( i )

    method get( index:Integer )->Character
      $if ("C++") inlineNative '$this->characters[$index]'

    method hash_code->Integer
      $if ("C++") inlineNative '$this->hash_code'

    method last->Character
      return this[ count-1 ]

    method leftmost( n:Integer )->String
      if (n >= 0) return substring( 0, n-1 )
      else        return substring( 0, (count + n) - 1 )

    method locate( ch:Character, i1=0:Integer )->Integer
      $if ("C++") inlineNative '$this->locate($ch,$i1)'

    method locate( other:String, i1=0:Integer )->Integer
      $if ("C++") inlineNative '$this->locate($other,$i1)'

    method locate_last( ch:Character )->Integer
      return locate_last( ch, count-1 )

    method locate_last( ch:Character, starting_index:Integer )->Integer
      $if ("C++") inlineNative '$this->locate_last($ch,$starting_index)'

    method locate_last( other:String )->Integer
      return locate_last( other, count-other.count )

    method locate_last( other:String, starting_index:Integer )->Integer
      $if ("C++") inlineNative '$this->locate_last($other,$starting_index)'

    method operator+( value:Byte )->String
      inline this + value->Integer

    method operator+( value:Character )->String
      $if ("C++") inlineNative '$this->plus($value)'

    method operator+( value:Integer )->String
      $if ("C++") inlineNative '$this->plus($value)'

      #{
    method operator+( value:Object )->String
      if (value?) return this + value->String
      else        return this + "null"
      }#

    method operator<>( other:String )->Integer
      $if ("C++") inlineNative '$this->compare_to($other)'

    method operator+( value:Logical )->String
      if (value) return this + "true"
      else       return this + "false"

    method operator+( value:Long )->String
      $if ("C++") inlineNative '$this->plus($value)'

    method operator+( value:Object )->String
      if (value?) return this + value->String
      else        return this + "null"

    method operator+( value:Real )->String
      $if ("C++") inlineNative '$this->plus($value)'

    method operator+( value:String )->String
      $if ("C++") inlineNative '$this->plus($value)'

    method reversed->String
      local buffer = StringBuilder(count)
      forEach (ch in this step -1)
        buffer.print( ch )
      endForEach
      return buffer->String

    method rightmost( n:Integer )->String
      local this_count = count
      if (n < 0) return substring( -n, this_count-1 )
      else       return substring( this_count-n, this_count-1 )

    method substring( i1:Integer, i2=-1:Integer )->String
      $if ("C++") inlineNative '$this->substring($i1,$i2)'

    method to->Integer
      inlineNative "($this->to_integer())"

    method to->Real
      inlineNative "($this->to_real())"

    method to->String
      return this

    method to_lowercase->String
      local has_uc = false
      forEach (ch in this)
        if (ch >= 'A' and ch <= 'Z') has_uc = true #; escapeForEach TODO(abe)
      endForEach

      if (not has_uc) return this

      local result = StringBuilder( count )
      forEach (ch in this)
        if (ch >= 'A' and ch <= 'Z') result.print( ((ch-'A')+'a') )
      endForEach
      return result->String

    method to_uppercase->String
      local has_lc = false
      forEach (ch in this)
        if (ch >= 'a' and ch <= 'a') has_lc = true #; escapeForEach TODO(abe)
      endForEach

      if (not has_lc) return this

      local result = StringBuilder( count )
      forEach (ch in this)
        if (ch >= 'a' and ch <= 'z') result.print( ((ch-'a')+'A') )
      endForEach
      return result->String
endClass
