class Attributes
  ENUMERATE
    flag_type                   = 0b00000000000000011
    flag_class                  = 0b00000000000000000
    flag_aspect                 = 0b00000000000000001
    flag_primitive              = 0b00000000000000010
    flag_compound               = 0b00000000000000011

    flag_native                 = 0b00000000000000100
    flag_automatic              = 0b00000000000001000
      # automatically generated

    flag_singleton              = 0b00000000000010000

    flag_requisite              = 0b00000000000100000
    flag_requisite_all          = 0b00000000001000000
    flag_special                = 0b00000000010000000

    flag_functional             = 0b00000000100000000
    flag_propagated             = 0b00000001000000000
    flag_default                = 0b00000010000000000
    flag_dynamic_access         = 0b00000100000000000

    flag_inheritable            = 0b00000111100000000

    flag_task                   = 0b00001000000000000
    flag_requires_cleanup       = 0b00010000000000000

    flag_marshalling            = 0b00100000000000000
    flag_omit                   = 0b01000000000000000

    flag_auto_return_this       = 0b10000000000000000

  PROPERTIES
    flags : Integer
    tags  = String[]

  METHODS
    method clone->Attributes
      local result = Attributes()
      result.flags = flags
      result.tags = tags.clone
      return result

    method add( flag:Integer )->Attributes
      flags |= flag
      return this

    method add( tag:String )->Attributes
      which (tag)
        case "aspect":           flags |= flag_aspect
        case "automatic":        flags |= flag_automatic
        case "class":            flags |= flag_class
        case "compound":         flags |= flag_compound
        case "default":          flags |= flag_default
        case "dynamicAccess":    flags |= flag_dynamic_access
        case "functional":       flags |= flag_functional
        case "marshalling":      flags |= flag_marshalling
        case "native":           flags |= flag_native
        case "primitive":        flags |= flag_primitive
        case "omit":             flags |= flag_omit
        case "propagated":       flags |= flag_propagated
        case "requiresCleanup":  flags |= flag_requires_cleanup
        case "requisite":        flags |= flag_requisite
        case "requisiteAll":     flags |= flag_requisite | flag_requisite_all
        case "singleton":        flags |= flag_singleton
        case "special":          flags |= flag_special
        case "task":             flags |= flag_task
        others
          tags.add( tag )
      endWhich
      return this

    method add( other:Attributes )->Attributes
      add( other.flags )
      forEach (tag in other.tags) add( tag )
      return this

    method remove( flag:Integer )->Attributes
      flags &= !flag
      return this

    method has_tag( tag:String )->Logical
      return tags.find(tag) != -1

    method auto_return_this->Logical
      return (flags & flag_auto_return_this)?

    method is_primitive->Logical
      return (flags & flag_type) == flag_primitive

    method is_compound->Logical
      return (flags & flag_type) == flag_compound

    method is_class->Logical
      return (flags & flag_type) == flag_class

    method is_aspect->Logical
      return (flags & flag_type) == flag_aspect

    method is_default->Logical
      return (flags & flag_default)?

    method is_dynamic_access->Logical
      return (flags & flag_dynamic_access)?

    method is_reference->Logical
      local type = (flags & flag_type)
      return (type == flag_class or type == flag_aspect)

    method is_native->Logical
      return (flags & flag_native)?

    method is_functional->Logical
      return (flags & flag_functional)?

    method is_automatic->Logical
      return (flags & flag_automatic)?

    method is_marshalling->Logical
      return (flags & flag_marshalling)?

    method is_propagated->Logical
      return (flags & flag_propagated)?

    method is_requisite->Logical
      return (flags & flag_requisite)?

    method is_requisite_all->Logical
      return (flags & flag_requisite_all)?

    method is_task->Logical
      return (flags & flag_task)?

    method is_singleton->Logical
      return (flags & flag_singleton)?

    method is_special->Logical
      return (flags & flag_special)?

    method omit->Logical
      return (flags & flag_omit)?

    method requires_cleanup->Logical
      return (flags & flag_requires_cleanup)?

endClass

