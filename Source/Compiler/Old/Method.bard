$[include "Cmd.bard"]
$[include "Local.bard"]
$[include "TaskVisitor.bard"]

class Method
  PROPERTIES
    t            : Token
    type_context : Type
    name         : String
    return_type  : Type
    yield_type   : Type

    attributes   = Attributes()

    parameters   = Local[]
    locals       = Local[]  # the first parameters.count locals are the same as parameters

    full_signature      : String
    signature : String
    x_signature    : String
    dispatch_signature : String
    generic_base_signature   : String
    generic_base_method      : Method
    minimum_argument_count : Integer

    prior_method : Method
    overridden   : Logical

    inline_mapping : String  # may be set on a per-target basis from definition in target rules file
    body = CmdStatementList()

    literal_string_values = String[]
    literal_real_values   = Real[]

    local_index=-1  : Integer
    global_index=-1 : Integer
    ip              : Integer
    ip_limit        : Integer
      # one beyond end
    line_info_index : Integer

    organized      : Logical
    referenced     : Logical
    resolved       : Logical
    compiled       : Logical
    is_initializer : Logical

    this_access_count : Integer
      # Number of times 'this' object is accessed in this method's code

    parameter_slot_count : Integer
    slot_count           : Integer

    exception_handlers = ExceptionHandler[]

  METHODS
    method init( t, type_context, name )
      # Leave off "init_settings" since it doesn't return a value
      is_initializer = (name == "init" or name == "init_defaults")

    method clone( cmd_list:CmdStatementList )->CmdStatementList
      if (cmd_list?) return cmd_list.clone
      return null

    method clone_for_type( new_type_context:Type )->Method
      local m = Method( t, new_type_context, name )
      m.attributes.flags = attributes.flags

      forEach (parameter in parameters)
        m.add_parameter( parameter.clone )
      endForEach

      forEach (i in parameters.count..<locals.count)
        m.add_local( locals[i].clone )
      endForEach

      m.return_type = return_type
      m.yield_type = yield_type
      m.body = clone( body )
      m.prior_method = this
      overridden = true
      return m

    method append_code( filename:String, code:String )
      Parser( filename, code ).parse_multi_line_statements( body )

    method context_signature->String
      return type_context + "::" + signature

    method contains_tag( tag:String )->Logical
      return attributes.tags.contains( tag )

    method to->String
      return signature

    method add_parameter( v:Local )
      parameters.add( v )
      add_local( v )
      
    method add_local( v:Local )
      v.index = locals.count
      locals.add( v )

    method insert_code( filename:String, code:String )
      local insert_body = CmdStatementList()
      Parser( filename, code ).parse_multi_line_statements( insert_body )
      insert_body.add( body )
      body = insert_body

    method invalidate_signatures
      @full_signature = null
      @signature = null

    method is_requisite->Logical
      return attributes.is_requisite

    method is_task->Logical
      return attributes.is_task

    method mark_requisite->Method
      attributes.add( Attributes.flag_requisite )
      return this

    method mark_referenced->Method
      if (referenced) return this
      referenced = true

      #type_context.mark_used
      if (not resolved) Analyzer.pending_methods.add( this )

      if (generic_base_signature?) 
        type_context.generic_base.resolve( t )
        generic_base_method = type_context.generic_base.find_method( generic_base_signature )
        if (generic_base_method?)
          generic_base_method.mark_referenced
        else
          throw t.error( "Illegal use of generic placeholder type in conjunction with a parameter of $::$()() - type $ will be genericized to $ but the parameter type cannot be converted in a corresponding fashion.  Use an alias instead - for example in class GenericType<<$DataType:Object>>, define \"alias $()(param) => NonGenericType<<$DataType>>.$()(this,param)\"." (type_context.name,name,type_context.name,type_context.generic_base.name,"$",name,"$",name) )
        endIf
      endIf

      #{
      # Thought this was necessary at one point but probably not.
      if (type_context.is_aspect)
        # Mark same-signature methods in all incorporating classes as referenced.
        forEach (incorporating_type in type_context.incorporating_types)
          local m = incorporating_type.find_method( signature )
          m.mark_referenced
        endForEach
      endIf
      }#

      return this

    method full_signature->String
      if (@full_signature?) return @full_signature

      local buffer = StringBuilder()
      buffer.print( name )
      buffer.print( '(' )
      local first = true
      forEach (parameter in parameters)
        if (first) first = false
        else       buffer.print(',')

        if (parameter.type?)
          buffer.print(parameter.type.name)
        else
          throw t.error( "Cannot use auto-intializing parameters in a generic type definition." )
          #{
          contingent
            forEach (p in type_context.property_list)
              if (p.name == name)
                if (p.type?)
                  buffer.print( p.type )
                  sufficient (true)
                else
                  throw t.error( "In a generic type definition the property corresponding to an auto-intializing parameter must have an explicit type." )
                endIf
              endIf
            endForEach
          unsatisfied
          throw parameter.t.error( "In a generic type definition the property corresponding to an auto-initializing parameter must be declared or re-declared in the current class PROPERTIES." )
          endContingent
          }#
        endIf
      endForEach
      buffer.print( ')' )

      @signature = buffer->String

      if (return_type?)
        buffer.print( "->" )
        buffer.print( return_type )
      endIf

      @full_signature = buffer->String

      return @full_signature

    method signature->String
      full_signature  # force full_signature and signature to be built
      return @signature

    method suitable_for_context_dependent_inlining->Logical
      if (this_access_count != 1) return false
      forEach (p in parameters)
        if (p.read_count != 1) return false
      endForEach
      return true

    method suitable_for_context_independent_inlining->Logical
      if (this_access_count != 0) return false
      forEach (p in parameters)
        if (p.read_count != 1) return false
      endForEach
      return true

    method x_method->Method
      if (generic_base_method?) return generic_base_method
      return this


    method x_signature->String
      if (@x_signature?) return @x_signature

      if (generic_base_method?)
        @x_signature = generic_base_method.x_signature
      else
        local buffer = StringBuilder()
        buffer.print( Analyzer.convert_string_to_valid_identifier(name) )
        if (parameters.count? or return_type?)
          if (parameters.count?)
            buffer.print( "_" )
            forEach (parameter in parameters)
              buffer.print('_')
              buffer.print( parameter.type.x_name )
            endForEach
          endIf
        endIf

        @x_signature = buffer->String
      endIf

      return @x_signature

    method dispatch_signature->String
      if (@dispatch_signature?) return @dispatch_signature

      if (generic_base_method?)
        @dispatch_signature = generic_base_method.dispatch_signature
      else
        local buffer = StringBuilder()
        if (parameters.count? or return_type?)
          buffer.print( "__" )
          if (parameters.count?)
            local first = true
            forEach (parameter in parameters)
              if (first) first = false
              else       buffer.print("_")
              buffer.print( parameter.type.dispatch_name )
            endForEach
          endIf
          if (return_type?)
            buffer.print("__")
            buffer.print( return_type.dispatch_name )
          endIf
        endIf

        @dispatch_signature = buffer->String
      endIf

      return @dispatch_signature

    method print( index:Integer )
      print( "    " )
      if (index != -1) print( "[" + index + "]" )
      print( " method " + type_context.name + "::" + full_signature )
      print( "  [referenced:" )
      print( referenced )
      print( ",resolved:" )
      print( resolved )
      print( ",global_index:" )
      print( ""+global_index )
      print( "]" )
      println

      if (type_context.is_aspect and full_signature != "init_settings()") return

      Analyzer.push_context
      Analyzer.context.this_type = type_context
      Analyzer.context.this_method = this
      
      local buffer = StringBuilder()
      body.print( buffer )
      println( buffer )

      Analyzer.pop_context

    method organize
      if (organized) return
      organized = true

      local arg_count = parameters.count
      local found_default_value = true
      minimum_argument_count = arg_count
      while (arg_count > 0)
        --arg_count
        if (parameters[arg_count].initial_value?)
          found_default_value = true
          minimum_argument_count = arg_count
        else
          if (found_default_value) escapeWhile
        endIf
      endWhile

      # Fix up return type
      local return_t = t
      if (is_initializer)
        if (return_type is null)
          return_type = type_context
          invalidate_signatures
        endIf
      endIf

    method set_parameter_indices
      # Assign slot index to each local
      if (not resolved)
        locals.discard_from( parameters.count )
        resolved = true
      endIf

      if (not (type_context.is_generic_map or type_context.generic_base?))
        local next_slot_index = 0
        forEach (v in locals)
          #println( "v.type: " + v.type )
          next_slot_index -= v.type.slot_count
          v.slot_index = next_slot_index
          slot_count += v.type.slot_count
        endForEach
      endIf

    method dispatch( v:Visitor )
      Analyzer.push_context
      Analyzer.context.this_type = type_context

      Analyzer.context.push_local_scope
      forEach (p in parameters) Analyzer.context.locals.add( p )

      Analyzer.context.this_method = this
      v.visit( body )
      Analyzer.context.pop_local_scope

      Analyzer.pop_context

    method remove_statements_with_no_side_effects
      local dest_i = 0
      forEach (i of body)
        local statement = body[i]
        if (statement.has_side_effects)
        else
          Analyzer.push_context
          Analyzer.context.this_type = type_context
          Analyzer.context.this_method = this

          println "In $ removing: $" (context_signature,statement)

          Analyzer.pop_context
        endIf
      endForEach

    method resolve
      if (resolved) return
      resolved = true

      # Mark parameter and return types as used
      forEach (parameter in parameters) parameter.type.mark_used
      if (return_type?)
        return_type.mark_used

        # Ensure override return type is instanceOf the base return type.
        if (prior_method?)
          return_type.organize
          prior_method.return_type.organize
          if (not return_type.instance_of(prior_method.return_type))
            throw t.error( "Return type must be instanceOf prior method return type." )
          endIf
        endIf
      endIf

      # Set parameter slot count
      parameter_slot_count = 0
      forEach (p in parameters)
        parameter_slot_count += p.type.slot_count
      endForEach

      if (type_context.is_aspect and full_signature != "init_settings()") return

      Analyzer.push_context
      Analyzer.context.this_type = type_context

      Analyzer.context.push_local_scope
      forEach (p in parameters) Analyzer.context.locals.add( p )

      Analyzer.context.this_method = this
      body.resolve
      Analyzer.context.pop_local_scope

      # Mark local types as used.  Could not do this earlier as
      # many of them would have been unknown before the body was
      # resolved.
      if (not type_context.is_generic_map)
        forEach (v in locals) 
          if (v.type is null) println v.name + " is null in " + context_signature
          v.type.mark_used
        endForEach
      endIf

      Analyzer.pop_context

      set_parameter_indices

      if (this.is_task)
        local converter = TaskVisitor()
        converter.visit( this )

        # Uncomment to debug
        # forEach (line in LineReader(converter.output,1)) println line

        Parser( "[Internal]", converter.output->String ).parse_content

        # Original body has been rewritten as a Task-based class.  Change this method body
        # to just create and return an object of that class.
        resolved = false
        attributes.remove( Attributes.flag_task )
        local args = CmdArgs()
        args.add( CmdThis(t,type_context) )
        forEach (p in parameters) args.add( CmdReadLocal(p) )
        body = CmdStatementList()
        body.add( CmdReturnValue( t, CmdNewObject(t,Types.reference(t,converter.task_type_name),args) ) )
        resolve

      endIf

    method validate_arguments( args:CmdArgs )->CmdArgs
      if (args is null) args = CmdArgs()

      # TODO:
      #method cast_to( m:Method )->CmdArgs
      #{
      if (m.parameters.count == 1 and m.parameters.first.type == Types.type_DataStack)
        local CmdArgs result()
        local cmd = CmdAccess( m.t, "DataStack" )
        cmd = CmdAccess( m.t, cmd, "push_frame", null )
        forEach(arg in this)
          cmd = CmdAccess( m.t, cmd, "push", CmdArgs( arg.resolve ) )
        endForEach
        result.add(cmd)
        return result
      else
        }#

      # Fill in default arguments
      while (args.count < parameters.count)
        args.add( parameters[args.count].initial_value.clone.resolve )
      endWhile

      local i = 0
      forEach (arg in args)
        local new_arg = arg.cast_to( arg.t, parameters[i].type )
        if (new_arg isNot arg) args.data[i] = new_arg.resolve
        ++i
      endForEach

      return args

endClass

class ExceptionHandler
  PROPERTIES
    ip_start   : Integer
    ip_limit   : Integer
    catches    = ExceptionHandlerCatch[]

  METHODS
    method init( ip_start, ip_limit )
endClass

class ExceptionHandlerCatch( local_info:Local, label_name:String )
  PROPERTIES
    handler_ip : Integer
endClass

