class TaskVisitor : Visitor
  PROPERTIES
    this_method       : Method
    task_type_name : String
    output = StringBuilder()

    next_case_id=1    : Integer
    loop_id_mappings    = Table<<String,Integer>>()
    escape_id_mappings  = Table<<String,Integer>>()

    asynchronous_control_indicator_stack = [true] : Logical[]

  METHODS
    method visit( this_method )
      Analyzer.push_context
      Analyzer.context.this_type = this_method.type_context
      Analyzer.context.this_method = this_method

      task_type_name = "Task_$" (Analyzer.unique_id)
      output.print( "class " ).print(task_type_name).print( " : " )

      local base_type_name = Analyzer.get_task_type_name( this_method.t, this_method.parameters, this_method.yield_type )
      output.print( base_type_name )
      output.println

      output.indent = 2
      output.println( "PROPERTIES" )
      output.indent = 4
      output.print("context : ").println( this_method.type_context.name )
      forEach (v in this_method.locals)
        output.print( v.name ).print( '_' ).print( v.index ).print( " : " ).println(v.type.name)
      endForEach

      output.indent = 2
      output.println
      output.println( "METHODS" )

      output.indent = 4
      output.print( "method init( context" )
      forEach (p in this_method.parameters)
        output.print( ", " )
        print_local_name( p )
      endForEach
      output.println( " )" )
      output.println

      output.print( "method send( " )
      local first = true
      forEach (p in this_method.parameters)
        if (first) first = false
        else       output.print( ", " )

        print_local_name( p )
      endForEach
      output.print( " )" )
      output.print( "->" ).println( task_type_name ).println( "  return this" ).println

      output.println @|method execute->Logical
                      |  loop
                      |    which (task_state)
                      |      case 0
      output.indent = 12

      visit( this_method.body )

      output.indent = 4
      output.println( "        finished = true" )
      output.println( "        return false" )
      output.println( "    endWhich" )
      output.println( "  endLoop" )

      output.indent = 0
      output.println( "endClass" )

      Analyzer.pop_context

    alias contains_asynchronous_control => asynchronous_control_indicator_stack.last

    method create_state_id->Integer
      ++next_case_id
      return next_case_id - 1

    method loop_id_for( control_structure:CmdControlStructure )->Integer
      return loop_id_for( control_structure.control_id )

    method loop_id_for( control_id:String )->Integer
      if (loop_id_mappings.contains(control_id))
        return loop_id_mappings[ control_id ]
      else
        local case_id = create_state_id
        loop_id_mappings[ control_id ] = case_id
        return case_id
      endIf

    method escape_id_for( control_structure:CmdControlStructure )->Integer
      return escape_id_for( control_structure.control_id )

    method escape_id_for( control_id:String )->Integer
      if (escape_id_mappings.contains(control_id))
        return escape_id_mappings[ control_id ]
      else
        local case_id = create_state_id
        escape_id_mappings[ control_id ] = case_id
        return case_id
      endIf

    method print_character( ch:Character, escape_single_quote:Logical )->StringBuilder
      if (ch >= 32 and ch <= 126)
        which (ch)
          case '\\': output.print( "\\\\" )
          case '"':  output.print( "\\\"" )
          case '\''
            if (escape_single_quote) output.print( "\\'" )
            else                     output.print( "'" )
          others:    output.print( ch )
        endWhich
      else
        if (ch < 256)
          which (ch)
            case '\0': output.print("\\0")
            case '\b': output.print("\\b")  # 8
            case '\f': output.print("\\f")  # 12
            case '\n': output.print("\\n")  # 10
            case '\r': output.print("\\r")  # 13
            case '\t': output.print("\\t")  # 9
            case '\v': output.print("\\v")  # 11
            others
            output.print( "\\x" )
            output.print( ch->Integer.to_hex_string(2) )
          endWhich
        else
          output.print( "\\u" )
          output.print( ch->Integer.to_hex_string(4) )
        endIf
      endIf
      return output

    method print_default_value( of_type:Type )->StringBuilder
      which (of_type.classification)
        case Type.reference_type: output.print( "null" )
        case Type.real_type:      output.print( "0.0" )
        case Type.integer_type:   output.print( "0" )
        case Type.character_type: output.print( "0" )
        case Type.byte_type:      output.print( "0" )
        case Type.logical_type:   output.print( "false" )
        others
          output.print( of_type.name ).print('(')
          local first = true
          forEach (property in of_type.property_list)
            if (first) first = false
            else       output.print(',')
            print_default_value( property.type )
          endForEach
          output.print(')')
      endWhich

      return output

    method print_local_name( v:Local )->StringBuilder
      output.print(v.name).print('_').print(v.index)
      return output

    method print_jump_to_state( state_id:Integer )->StringBuilder
      output.print("task_state = ").println(state_id)
      output.println("escapeWhich")
      output.println
      return output

    method print_set_state( state_id:Integer )->StringBuilder
      output.print("task_state = ").println(state_id)
      output.println
      return output

    method print_begin_state( state_id:Integer )->StringBuilder
      output.indent -= 2
      output.print( "case " ).println( state_id )
      output.indent += 2
      return output

    method push_asynchronous_control_indicator( cmd:Cmd )
      if (asynchronous_control_indicator_stack.last?)
        # This nested statement list may not contain asynchronous control statements
        # like the parent scope did; update the stack
        asynchronous_control_indicator_stack.add( cmd.query( function(cmd)=>cmd.contains_asynchronous_control ) )
      else
        asynchronous_control_indicator_stack.add( false )
      endIf

    method pop_asynchronous_control_indicator
      asynchronous_control_indicator_stack.remove_last

    method visit( statements:CmdStatementList )
      Analyzer.context.push_local_scope
      forEach (index of statements)
        local statement = statements[index].dispatch( this )
        statements[index] = statement
        if (statement notInstanceOf CmdLocalDeclaration) output.println
      endForEach
      Analyzer.context.pop_local_scope

    method visit( cmd:CmdTron )->Cmd
      output.print( "tron" )
      return cmd

    method visit( cmd:CmdTroff )->Cmd
      output.print( "troff" )
      return cmd

    method visit( args:CmdArgs )
      output.print( "(" )
      if (args.count?) output.print(' ')
      local first = true
      forEach (index of args)
        if (first) first = false
        else       output.print(',')
        args[index] = args[index].dispatch( this )
      endForEach
      if (args.count?) output.print(' ')
      output.print( ")" )

    method visit( cmd:CmdReturnNil )->Cmd
      output.println( "finished = true" )
      output.println( "return false" )
      return cmd

    method visit( cmd:CmdReturnThis )->Cmd
      output.println( "result = context" )
      output.println( "finished = true" )
      output.println( "return true" )
      return cmd

    method visit( cmd:CmdReturnValue )->Cmd
      output.print( "result = " )
      cmd.operand.dispatch( this )
      output.println
      output.println( "finished = true" )
      output.println( "return true" )
      return cmd

    method visit( cmd:CmdYieldNil )->Cmd
      local next_state = create_state_id
      output.print( "task_state = " ).println( next_state )
      output.println( "return true" )
      print_begin_state( next_state )
      return cmd

    method visit( cmd:CmdYieldValue )->Cmd
      local next_state = create_state_id
      output.print( "task_state = " ).println( next_state )
      output.print( "result = " )
      cmd.operand.dispatch( this )
      output.println
      output.println( "return true" )
      print_begin_state( next_state )
      return cmd

    method visit( cmd:CmdYieldAndWait )->Cmd
      local next_state = create_state_id
      output.print( "task_state = " ).println( next_state )
      output.print( "resume_time = Time.current + " )
      cmd.operand.dispatch( this )
      output.println
      output.println( "return true" )
      print_begin_state( next_state )
      return cmd

    method visit( cmd:CmdSpecializeReference )->Cmd
      output.print("((")
      cmd.operand.dispatch( this )
      output.print(") as ")
      output.print( cmd.as_type.name )
      output.print(')')
      return cmd

    method visit( cmd:CmdConvertIntegerToReal )->Cmd
      cmd.operand.dispatch( this )
      output.print("->").print("Real")
      return cmd

    method visit( cmd:CmdConvertRealToInteger )->Cmd
      cmd.operand.dispatch( this )
      output.print("->").print("Integer")
      return cmd

    method visit( cmd:CmdConvertCharacterToInteger )->Cmd
      cmd.operand.dispatch( this )
      output.print("->").print("Integer")
      return cmd

    method visit( cmd:CmdConvertByteToInteger )->Cmd
      cmd.operand.dispatch( this )
      output.print("->").print("Integer")
      return cmd

    method visit( cmd:CmdConvertIntegerToCharacter )->Cmd
      cmd.operand.dispatch( this )
      output.print("->").print("Character")
      return cmd

    method visit( cmd:CmdConvertIntegerToByte )->Cmd
      cmd.operand.dispatch( this )
      output.print("->").print("Byte")
      return cmd

    method visit( cmd:CmdConvertLogicalToInteger )->Cmd
      cmd.operand.dispatch( this )
      output.print("->").print("Integer")
      return cmd

    method visit( cmd:CmdThrowMissingReturn )->Cmd
      # This will be added back in during recompilation if necessary
      return cmd

    method visit( cmd:CmdLiteralString )->Cmd
      if (cmd.value is null)
        output.print( "null" )
      else
        output.print( '"' )
        forEach (ch in cmd.value) print_character( ch, false )
        output.print( '"' )
      endIf
      return cmd

    method visit( cmd:CmdLiteralNull )->Cmd
      output.print( "null" )
      return cmd

    method format_string( value:Real, decimal_digits:Integer )->String
      return StringBuilder().print(value,decimal_digits)->String

    method visit( cmd:CmdLiteralReal )->Cmd
      local fractional_part = Math.abs(cmd.value) - Math.floor( Math.abs(cmd.value) )
      forEach (decimal_digits in 1..9)
        local magnitude = 10.0 ^ decimal_digits
        if (fractional_part == (fractional_part*magnitude)->Integer / magnitude)
          output.print( format_string(cmd.value, decimal_digits) )
          return cmd
        endIf
      endForEach

      if (cmd.value == pi)
        output.print( "pi" );
      else
        local times = cmd.value / pi
        if (Math.floor(times) == times)
          output.print('(').print(times->Integer).print("*pi)" )
        else
          output.print( format_string( cmd.value, 9) )  # KLUDGE
        endIf
      endIf
      return cmd

    method visit( cmd:CmdLiteralInteger )->Cmd
      output.print( cmd.value )
      return cmd

    method visit( cmd:CmdLiteralCharacter )->Cmd
      output.print('\'')
      print_character( cmd.value, true ).print('\'')
      return cmd

    method visit( cmd:CmdLiteralByte )->Cmd
      output.print( cmd.value )
      return cmd

    method visit( cmd:CmdLiteralLogical )->Cmd
      output.print( cmd.value )
      return cmd

    method visit( cmd:CmdLiteralArray )->Cmd
      output.print( "Array<<" ).print( cmd.element_type.name ).print( ">>(" ).print( cmd.elements.count ).print( ")" )
      forEach (i of cmd.elements)
        local element = cmd.elements[i]
        output.print(".set(").print(i).print(',')
        element.dispatch( this )
        output.print(')')
      endForEach
      return cmd

    method visit( cmd:CmdLogicalNot )->Cmd
      output.print( "not " )
      cmd.operand.dispatch( this )
      return cmd

    method visit( cmd:CmdReadLocal )->Cmd
      print_local_name( cmd.local_info )
      return cmd

    method visit( cmd:CmdWriteLocal )->Cmd
      print_local_name( cmd.local_info ).print(" = ")
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdWriteLocalDefault )->Cmd
      print_local_name( cmd.local_info ).print(" = ")
      print_default_value( cmd.local_info.type )
      return cmd

    method visit( cmd:CmdReadSetting )->Cmd
      if (cmd.context?) cmd.context.dispatch( this )
      else              output.print( cmd.setting.type.name )

      output.print( '.' )
      output.print( cmd.setting.name )

      return cmd

    method visit( cmd:CmdReadProperty )->Cmd
      if (cmd.context?) cmd.context.dispatch( this )
      else              output.print( "context" )

      output.print( '.' )
      output.print( cmd.property.name )

      return cmd

    method visit( cmd:CmdWriteSetting )->Cmd
      if (cmd.context?) cmd.context.dispatch( this )
      else              output.print( cmd.setting.type.name )

      output.print( '.' )
      output.print( cmd.setting.name ).print(" = ")
      cmd.new_value.dispatch( this )

      return cmd

    method visit( cmd:CmdWriteProperty )->Cmd
      if (cmd.context?) cmd.context.dispatch( this )
      else              output.print( "context" )

      output.print( '.' )
      output.print( cmd.property.name ).print(" = ")
      cmd.new_value.dispatch( this )

      return cmd

    method visit( cmd:CmdThis )->Cmd
      output.print( "context" )
      return cmd

    method visit( cmd:CmdReadSingleton )->Cmd
      output.print( cmd.of_type.name )
      return cmd

    method visit( cmd:CmdWriteSingleton )->Cmd
      output.print( cmd.of_type.name )
      output.print( " = " )
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdIncrementLocal )->Cmd
      output.print( "++" )
      print_local_name( cmd.local_info )
      return cmd

    method visit( cmd:CmdDecrementLocal )->Cmd
      output.print( "--" )
      print_local_name( cmd.local_info )
      return cmd

    method visit( cmd:CmdIncrementSetting )->Cmd
      output.print( "++" )
      if (cmd.context?) cmd.context.dispatch( this )
      else              output.print( cmd.setting.type.name )

      output.print( '.' )
      output.print( cmd.setting.name )

      return cmd

    method visit( cmd:CmdDecrementSetting )->Cmd
      output.print( "--" )
      if (cmd.context?) cmd.context.dispatch( this )
      else              output.print( cmd.setting.type.name )

      output.print( '.' )
      output.print( cmd.setting.name )

      return cmd

    method visit( cmd:CmdIncrementProperty )->Cmd
      output.print( "++" )
      if (cmd.context?) cmd.context.dispatch( this )
      else              output.print( "context" )

      output.print( '.' )
      output.print( cmd.property.name )

      return cmd

    method visit( cmd:CmdDecrementProperty )->Cmd
      output.print( "--" )
      if (cmd.context?) cmd.context.dispatch( this )
      else              output.print( "context" )

      output.print( '.' )
      output.print( cmd.property.name )

      return cmd

      #{
    method visit( cmd:CmdAddAssignLocal )->Cmd
      print_local_name( cmd.local_info ).print(" += ")
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdSubtractAssignLocal )->Cmd
      print_local_name( cmd.local_info ).print(" -= ")
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdMultiplyAssignLocal )->Cmd
      print_local_name( cmd.local_info ).print(" *= ")
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdDivideAssignLocal )->Cmd
      print_local_name( cmd.local_info ).print(" /= ")
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdModAssignLocal )->Cmd
      print_local_name( cmd.local_info ).print(" %= ")
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdPowerAssignLocal )->Cmd
      print_local_name( cmd.local_info ).print(" ^= ")
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdBitwiseAndAssignLocal )->Cmd
      print_local_name( cmd.local_info ).print(" &= ")
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdBitwiseOrAssignLocal )->Cmd
      print_local_name( cmd.local_info ).print(" |= ")
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdBitwiseXorAssignLocal )->Cmd
      print_local_name( cmd.local_info ).print(" ~= ")
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdAccessAssignLocal )->Cmd
      print_local_name( cmd.local_info ).print(" .= ")
      cmd.access.dispatch( this )
      return cmd

    method visit( cmd:CmdAddAssignProperty )->Cmd
      if (cmd.context?) cmd.context.dispatch( this )
      else              output.print( "context" )

      output.print('.').print( cmd.property.name ).print( " += " )
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdSubtractAssignProperty )->Cmd
      if (cmd.context?) cmd.context.dispatch( this )
      else              output.print( "context" )

      output.print('.').print( cmd.property.name ).print( " -= " )
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdMultiplyAssignProperty )->Cmd
      if (cmd.context?) cmd.context.dispatch( this )
      else              output.print( "context" )

      output.print('.').print( cmd.property.name ).print( " *= " )
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdDivideAssignProperty )->Cmd
      if (cmd.context?) cmd.context.dispatch( this )
      else              output.print( "context" )

      output.print('.').print( cmd.property.name ).print( " /= " )
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdModAssignProperty )->Cmd
      if (cmd.context?) cmd.context.dispatch( this )
      else              output.print( "context" )

      output.print('.').print( cmd.property.name ).print( " %= " )
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdPowerAssignProperty )->Cmd
      if (cmd.context?) cmd.context.dispatch( this )
      else              output.print( "context" )

      output.print('.').print( cmd.property.name ).print( " ^= " )
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdBitwiseAndAssignProperty )->Cmd
      if (cmd.context?) cmd.context.dispatch( this )
      else              output.print( "context" )

      output.print('.').print( cmd.property.name ).print( " &= " )
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdBitwiseOrAssignProperty )->Cmd
      if (cmd.context?) cmd.context.dispatch( this )
      else              output.print( "context" )

      output.print('.').print( cmd.property.name ).print( " |= " )
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdBitwiseXorAssignProperty )->Cmd
      if (cmd.context?) cmd.context.dispatch( this )
      else              output.print( "context" )

      output.print('.').print( cmd.property.name ).print( " ~= " )
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdAccessAssignSetting )->Cmd
      output.print( cmd.setting.type_context.name ).print('.').print( cmd.setting.name ).print( " .= " )
      cmd.access.dispatch( this )
      return cmd

    method visit( cmd:CmdAddAssignSetting )->Cmd
      output.print( cmd.setting.type_context.name ).print('.').print( cmd.setting.name ).print( " += " )
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdSubtractAssignSetting )->Cmd
      output.print( cmd.setting.type_context.name ).print('.').print( cmd.setting.name ).print( " -= " )
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdMultiplyAssignSetting )->Cmd
      output.print( cmd.setting.type_context.name ).print('.').print( cmd.setting.name ).print( " *= " )
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdDivideAssignSetting )->Cmd
      output.print( cmd.setting.type_context.name ).print('.').print( cmd.setting.name ).print( " /= " )
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdModAssignSetting )->Cmd
      output.print( cmd.setting.type_context.name ).print('.').print( cmd.setting.name ).print( " %= " )
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdPowerAssignSetting )->Cmd
      output.print( cmd.setting.type_context.name ).print('.').print( cmd.setting.name ).print( " ^= " )
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdBitwiseAndAssignSetting )->Cmd
      output.print( cmd.setting.type_context.name ).print('.').print( cmd.setting.name ).print( " &= " )
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdBitwiseOrAssignSetting )->Cmd
      output.print( cmd.setting.type_context.name ).print('.').print( cmd.setting.name ).print( " |= " )
      cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:CmdBitwiseXorAssignSetting )->Cmd
      output.print( cmd.setting.type_context.name ).print('.').print( cmd.setting.name ).print( " ~= " )
      cmd.new_value.dispatch( this )
      return cmd
      }#

    method visit( cmd:CmdLocalDeclaration )->Cmd
      return cmd

    method visit( cmd:CmdNewObject )->Cmd
      output.print( cmd.of_type.name )
      if (cmd.args?) cmd.args.dispatch( this )
      else           output.print( "()" )
      return cmd

    method visit( cmd:CmdStaticCall )->Cmd
      if (cmd.context?) cmd.context.dispatch( this )

      output.print( cmd.method_info.type_context.name ).print( "." ).print( cmd.method_info.name )
      if (cmd.args?) cmd.args.dispatch( this )
      else           output.print( "()" )
      return cmd

    method visit( cmd:CmdSingletonCall )->Cmd
      output.print( cmd.singleton_type.name ).print( "." ).print( cmd.method_info.name )

      if (cmd.args?) cmd.args.dispatch( this )
      else           output.print( "()" )

      return cmd

    method visit( cmd:CmdDynamicCall )->Cmd
      if (cmd.context?) 
        cmd.context.dispatch( this )
      else
        output.print( "context" )
      endIf

      output.print( "." ).print( cmd.method_info.name )

      if (cmd.args?) cmd.args.dispatch( this )
      else           output.print( "()" )

      return cmd

    method visit( cmd:CmdIf )->Cmd
      push_asynchronous_control_indicator(cmd)

      if (not (cmd.control_id_used_in_nested_code or contains_asynchronous_control))
        # No yields; write as a standard control structre.
        output.print( "if (" )
        cmd.condition.dispatch( this )
        output.println( ")" )
        output.indent += 2
        cmd.body.dispatch( this )
        output.indent -= 2

        forEach (i of cmd.elseIf_conditions)
          output.print( "elseIf (" )
          cmd.elseIf_conditions[i].dispatch( this )
          output.println( ")" )
          output.indent += 2
          cmd.elseIf_bodies[i].dispatch( this )
          output.indent -= 2
        endForEach

        if (cmd.else_body?)
          output.println( "else" )
          output.indent += 2
          cmd.else_body.dispatch( this )
          output.indent -= 2
        endIf

        output.println( "endIf" )

      else
        # Separate the control structure into separate state-based case statements.
        local body_states = Integer[]
        forEach (0..cmd.elseIf_conditions.count) body_states.add( create_state_id )
        if (cmd.else_body?) body_states.add( create_state_id )

        local escape_state = escape_id_for( cmd )

        output.print( "if (" )
        cmd.condition.dispatch( this )
        output.print( ") task_state = " ).println( body_states[0] )

        forEach (index of cmd.elseIf_conditions)
          output.print( "elseIf (" )
          cmd.elseIf_conditions[index].dispatch( this )
          output.print( ") task_state = " ).println( body_states[index+1] )
        endForEach

        if (cmd.else_body?)
          output.print( "else task_state = " ).println( body_states.last )
        else
          output.print( "else task_state = " ).println( escape_state )
        endIf
        
        output.println( "escapeWhich" )

        print_begin_state( body_states.first )
        cmd.body.dispatch( this )
        print_jump_to_state( escape_state )

        forEach (index of cmd.elseIf_conditions)
          print_begin_state( body_states[index+1] )
          cmd.elseIf_bodies[index].dispatch( this )
          print_jump_to_state( escape_state )
        endForEach

        if (cmd.else_body?)
          print_begin_state( body_states.last )
          cmd.else_body.dispatch( this )
          print_jump_to_state( escape_state )
        endIf

        print_begin_state( escape_state )
      endIf

      pop_asynchronous_control_indicator
      return cmd

    method visit( cmd:CmdContingent )->Cmd
      local escape_state = escape_id_for( cmd )
      local satisfied_state = create_state_id
      local unsatisfied_state = create_state_id

      cmd.body.dispatch( this )
      print_jump_to_state( satisfied_state )

      print_begin_state( satisfied_state )
      if (cmd.satisfied_body?) cmd.satisfied_body.dispatch( this )
      print_jump_to_state( escape_state )

      print_begin_state( unsatisfied_state )
      if (cmd.unsatisfied_body?) cmd.unsatisfied_body.dispatch( this )
      print_jump_to_state( escape_state )

      print_begin_state( escape_state )

      return cmd

    method visit( cmd:CmdEscapeContingent )->Cmd
      print_jump_to_state( escape_id_for(cmd.target_id) )
      return cmd

    method visit( cmd:CmdSufficient )->Cmd
      output.print( "if (" )
      cmd.operand.dispatch( this )
      output.print( ") task_state = " ).print( escape_id_for(cmd.target_id)+1 ).println( "; escapeWhich" )
      return cmd

    method visit ( cmd:CmdNecessary )->Cmd
      output.print( "if (not (" )
      cmd.operand.dispatch( this )
      output.print( ")) task_state = " ).print( escape_id_for(cmd.target_id)+2 ).println( "; escapeWhich" )
      return cmd

    method visit( cmd:CmdAnonymousBlock )->Cmd
      cmd.body.dispatch( this )
      return cmd

    method visit( cmd:CmdWhile )->Cmd
      push_asynchronous_control_indicator( cmd )

      if (not (cmd.control_id_used_in_nested_code or contains_asynchronous_control))
        # No yields; write as a standard control structre.
        output.print( "while (" )
        cmd.condition.dispatch( this )
        output.println( ")" )
        output.indent += 2
        cmd.body.dispatch( this )
        output.indent -= 2
        output.println( "endWhile" )

      else
        # Separate the control structure into separate state-based case statements.
        local case_id = loop_id_for( cmd )
        local body_state = create_state_id
        local next_state = create_state_id

        print_set_state( case_id )
        print_begin_state( case_id )

        output.print( "if (" )
        cmd.condition.dispatch( this )
        output.print( ") task_state = " ).println( body_state )
        output.print( "else task_state = " ).println( next_state )
        output.println

        print_begin_state( body_state )
        cmd.body.dispatch( this )
        output.print( "task_state = " ).println( case_id )
        output.println

        print_begin_state( next_state )
      endIf

      pop_asynchronous_control_indicator
      return cmd

    method visit( cmd:CmdEscapeWhich )->Cmd
      print_jump_to_state( escape_id_for(cmd.target_id) )
      return cmd

    method visit( cmd:CmdEscapeWhile )->Cmd
      print_jump_to_state( escape_id_for(cmd.target_id) )
      return cmd

    method visit( cmd:CmdLoop )->Cmd
      push_asynchronous_control_indicator( cmd )

      if (not (cmd.control_id_used_in_nested_code or contains_asynchronous_control))
        # No yields; write as a standard control structre.
        output.println( "loop" )
        output.indent += 2
        cmd.body.dispatch( this )
        output.indent -= 2
        output.println( "endLoop" )

      else
        # Separate the control structure into separate state-based case statements.
        local loop_state = loop_id_for( cmd )
        local next_state = escape_id_for( cmd )

        print_jump_to_state( loop_state )
        print_begin_state( loop_state )

        cmd.body.dispatch( this )

        print_jump_to_state( loop_state )
        output.println

        print_begin_state( next_state )
      endIf

      pop_asynchronous_control_indicator
      return cmd

    method visit( cmd:CmdTry )->Cmd
      throw cmd.t.error( "try/catch cannot be used in a task." )

    method visit( cmd:CmdThrow )->Cmd
      output.print( "throw " )
      cmd.operand.dispatch( this )
      return cmd

    method visit( cmd:CmdEscapeLoop )->Cmd
      print_jump_to_state( escape_id_for(cmd.target_id) )
      return cmd

    method visit( cmd:CmdEscapeForEach )->Cmd
      print_jump_to_state( escape_id_for(cmd.target_id) )
      return cmd

    method visit( cmd:CmdEscapeIf )->Cmd
      print_jump_to_state( escape_id_for(cmd.target_id) )
      return cmd

    method visit( cmd:CmdEscapeTry )->Cmd
      throw cmd.t.error( "try/catch cannot be used in a task." )

    method visit( cmd:CmdNextIteration )->Cmd
      print_jump_to_state( loop_id_for(cmd.target_id) )
      return cmd

    method visit( cmd:CmdInstanceOf )->Cmd
      output.print( "(" )
      cmd.operand.dispatch( this )
      output.print( ") instanceOf " ).print( cmd.target_type.name )
      return cmd

    method visit( cmd:CmdAdd )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print(") + (")
      cmd.rhs.dispatch( this )
      output.print(")")
      return cmd

    method visit( cmd:CmdConcatenateStrings )->Cmd
      cmd.builder.dispatch( this )
      return cmd

    method visit( cmd:CmdSubtract )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print(") - (")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdMultiply )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print(") * (")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdDivide )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print(") / (")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdMod )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print(") % (")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdPower )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print(") ^ (")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdBitwiseAnd )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print(") & (")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdBitwiseOr )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print(") | (")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdBitwiseXor )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print(") ~ (")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdNegate )->Cmd
      output.print("-(")
      cmd.operand.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdLogicalize )->Cmd
      output.print('(')
      cmd.operand.dispatch( this )
      output.print(")?")
      return cmd

    method visit( cmd:CmdBitwiseNot )->Cmd
      output.print("!(")
      cmd.operand.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdBitwiseSHL )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print("):<<:(")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdBitwiseSHR )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print("):>>:(")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdBitwiseSHRX )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print("):>>>:(")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdLogicalAnd )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print(")and(")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdLogicalOr )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print(")or(")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdLogicalXor )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print(")xor(")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdCompareEQ )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print(")==(")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdCompareIs )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print(")is(")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdCompareNE )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print(")!=(")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdCompareIsNot )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print(")isNot(")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdCompareLT )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print(")<(")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdCompareLE )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print(")<=(")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdCompareGT )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print(")>(")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdCompareGE )->Cmd
      output.print('(')
      cmd.lhs.dispatch( this )
      output.print(")>=(")
      cmd.rhs.dispatch( this )
      output.print(')')
      return cmd

    method visit( cmd:CmdCreateArray )->Cmd
      output.print( "Array<<" ).print( cmd.array_type.name ).print( ">>(" )
      cmd.size_expression.dispatch( this )
      output.print( ')' )
      return cmd

    method visit( cmd:CmdArrayCount )->Cmd
      cmd.operand.dispatch( this )
      output.print( ".count" )
      return cmd

    method visit( cmd:CmdReadArrayElement )->Cmd
      cmd.operand.dispatch( this )
      output.print( '[' )
      cmd.index_expression.dispatch( this )
      output.print( ']' )
      return cmd

    method visit( cmd:CmdWriteArrayElement )->Cmd
      cmd.operand.dispatch( this )
      output.print( '[' )
      cmd.index_expression.dispatch( this )
      output.print( "] = " )
      cmd.new_value.dispatch( this )
      return cmd
endClass

