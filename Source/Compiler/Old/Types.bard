$[include "Attributes.bard"]
$[include "Augment.bard"]
$[include "Template.bard"]
$[include "Method.bard"]
$[include "Type.bard"]

class Types [singleton]
  PROPERTIES
    type_list    = Type[]
    type_table   = Table<<String,Type>>()

    augments     = Table<<String,Augment[]>>()

    type_Real            : Type
    type_Integer         : Type
    type_Character       : Type
    type_Byte            : Type
    type_Logical         : Type

    type_Object          : Type
    type_String          : Type
    type_StringBuilder   : Type
    type_Array           : Type
    type_GenericArray    : Type
    type_Exception       : Type
    type_Global          : Type
    type_GenericDelegate : Type
    type_Function        : Type

    type_PropertyTable   : Type
    type_PropertyList    : Type
    #type_DataStack      : Type

    main_type_name      : String
    main_type           : Type

    internal_t = Token("[Internal]",1,1,Token.eol )

  METHODS
    method reference( t:Token, name:String )->Type
      return reference( t, name, true )

    method reference( t:Token, name:String, mark_new_types_as_used:Logical )->Type
      local existing = type_table[name]
      if (existing?) 
        #if (mark_new_types_as_used) existing.mark_used
        return existing
      endIf

      local placeholder = Type( t, name )
      #if (mark_new_types_as_used) placeholder.mark_used

      # Set attribute for any new types that are referenced after types are 
      # prepped for organization in Types.organize
      local templ = Templates[ name ]
      if (templ?) placeholder.attributes.add( templ.attributes )

      return placeholder

    method contains( name:String )->Logical
      return find(name)?

    method find( name:String )->Type
      return type_table[name]

    method must_find( name:String )->Type
      return must_find( internal_t, name )

    method must_find( t:Token, name:String )->Type
      local type = find( name )
      if (type?) return type
      #println StackTrace()
      throw t.error( "Reference to undefined type '" + name + "'." )

    method find_type_or_template( t:Token, name:String )->Type
      local result = type_table[ name ]
      if (result?) return result

      if (Templates.contains(name)) return reference(t,name)

      local base_name = name.before_first('<').before_first('[')
      if (type_table.contains(base_name) or Templates.contains(base_name)) return reference(t,name)

      return null


    method count->Integer
      return type_list.count

    method at( index:Integer )->Type
      return type_list[ index ]

    method get( name:String )->Type
      return must_find( name )

    method add( type:Type )
      type_list.add( type )
      type_table[ type .name ] = type

    method define( t:Token, name:String, attribute_flags:Integer )->Type
      local type = reference( t, name )
      type.attributes.add( attribute_flags )
      type.is_defined = true
      return type

    method organize
      local t = internal_t

      type_Real      = reference( t, "Real" ).mark_used
      type_Integer   = reference( t, "Integer" ).mark_used
      type_Character = reference( t, "Character" ).mark_used
      type_Byte      = reference( t, "Byte" ).mark_used
      type_Logical   = reference( t, "Logical" ).mark_used

      type_Object          = reference( t, "Object" ).mark_used
      type_String          = reference( t, "String" ).mark_used
      type_StringBuilder   = reference( t, "StringBuilder" ).mark_used
      type_GenericArray    = reference( t, "GenericArray" ).mark_used
      type_Array           = reference( t, "Array<<Object>>" ).mark_used
      type_Exception       = reference( t, "Exception" ).mark_used
      type_Global          = reference( t, "Global" ).mark_used
      type_GenericDelegate = reference( t, "GenericDelegate" ).mark_used
      type_Function        = reference( t, "Function" ).mark_used

      type_PropertyTable   = find( "PropertyTable" )
      type_PropertyList    = find( "PropertyList" )

      #type_DataStack      = reference( t, "DataStack" )

      main_type = reference( t, main_type_name ).mark_used

      # Reference all requisite, non-template types
      forEach (templ in Templates)
        if (templ.attributes.is_class and templ.attributes.is_requisite)
          if (templ.placeholder_names.count == 0)
            reference( templ.t, templ.name ).mark_used
          endIf
        endIf
      endForEach

      # Assign template attribute flags to all placeholder types
      forEach (type in type_list)
        local templ = Templates[ type.name ]
        if (templ?) type.attributes.add( templ.attributes )
      endForEach

      # Organize every referenced type
      local i = 0
      while (i < type_list.count)
        type_list[i].organize
        ++i
      endWhile

    method resolve
      organize

      while (resolve_pending_types_and_methods) noAction

      # Map generic method signatures to actual generic method objects.
      forEach (type in type_list)
        if (type.generic_base?)
          forEach (m in type.method_list)
            if (m.generic_base_signature?)
              m.generic_base_method = type.generic_base.find_method( m.generic_base_signature )
            endIf
          endForEach
        endIf
      endForEach

      ## Cull unused types from the main list
      local dest_i = 0
      forEach (type in type_list)
        if (type.used) type_list[ dest_i ] = type; ++dest_i
        #if (not type.used) println "Unused type: " + type.name
      endForEach
      type_list.discard_from( dest_i )

      ## Cull unused methods.
      #forEach (type in type_list) type.cull_unused_base_types_and_unreferenced_methods
      #forEach (type in type_list) type.visiting = false
      #forEach (type in type_list) type.re_collect_methods
      #forEach (type in type_list) type.visiting = false

      forEach (type in type_list)
        #if (not type.used) println( "Unused type: " + type.name )
        #if (type.used) println( "used type: " + type.name )
        forEach (m in type.method_list)
          if (not m.referenced) 
            m.set_parameter_indices
            #println "Culling unused method " + m.context_signature
          endIf
        endForEach
      endForEach

    method resolve_pending_types_and_methods->Logical
      local should_repeat = true
      while (should_repeat)
        should_repeat = false

        local i = 0
        while (i < type_list.count or Analyzer.pending_methods.count?)
          if (Analyzer.pending_methods.count?)
            should_repeat = true

            forEach (m in Analyzer.pending_methods) 
              m.resolve
            endForEach

            Analyzer.pending_methods.clear
            nextIteration
          endIf

          local type = type_list[i]
          if (not type.resolved)
            should_repeat = true
            type.resolve
          endIf

          # Overridden methods may not yet be marked as 'referenced' if called on a 
          # base class reference.
          forEach (m in type.method_list)
            if (not m.referenced)
              #trace m.type_context.name "::" m.signature
              local prior_m = m.prior_method
              while (prior_m?)
                #trace prior_m.type_context.name "::" prior_m.signature
                if (prior_m.referenced)
                  should_repeat = true
                  m.mark_referenced
                  escapeWhile
                endIf
                prior_m = prior_m.prior_method
              endWhile
            endIf
          endForEach

          ++i
        endWhile

      endWhile

      # Mark dependency types of used types as also used.
      forEach (type in type_list)
        if (type.used) type.mark_dependency_types_used
      endForEach

      # Reference default creators and initializers of used types as referenced
      # for the singletons that get created.
      local referenced_new_methods = false
      forEach (type in type_list)
        if (type.used)
          forEach (m in type.method_list)
            if (not m.referenced and m.parameters.count == 0)
              if (m.is_initializer or m.name == "init_settings" or m.name == "create")
                m.mark_referenced
                referenced_new_methods = true
              endIf
            endIf
          endForEach
        endIf
      endForEach

      return referenced_new_methods

endClass

