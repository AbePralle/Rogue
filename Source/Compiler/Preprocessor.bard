class Preprocessor [singleton]
  PROPERTIES
    reader : TokenReader
    tokens : Token[]

    found_defines = false

  METHODS
    method consume( type:Integer )->Logical
      if (reader.peek.type != type) return false
      reader.read
      return true

    method process( tokens )->Token[]
      reader = TokenReader( tokens )
      tokens = Token[]( (tokens.count * 1.1)->Integer )
      process( true, 0 )

      Keywords.clear_local_definitions

      return tokens

    method process( keep_tokens:Logical, depth:Integer )
      ++depth
      while (reader.has_another)
        local t = reader.read

        which (t.type)
          case Token.symbol_open_directive
            local t2 = reader.read
            which (t2.type)
              case Token.identifier
                which (t2->String)
                  case "define", "defineLocal"
                    local id = read_identifier
                     
                    # Scan tokens until closing ']'
                    local definition = Token[]

                    loop
                      if (not reader.has_another) throw t.error( "Missing closing ']' on define." )
                      local t3 = reader.read
                      if (t3?)
                        which (t3.type)
                          case Token.symbol_close_bracket
                            escapeLoop
                          case Token.symbol_backslash
                            t3 = reader.read
                          case Token.eol
                            throw t.error( "Missing closing ']' on define." )
                          case Token.identifier
                            local recursive_def = Keywords.definitions[ t3->String ]
                            if (recursive_def?)
                              reader.push( recursive_def )
                              nextIteration
                            endIf
                        endWhich
                        definition.add( t3 )
                      endIf
                    endLoop

                    if (t2->String == "define") Keywords.define( id, definition )
                    else                        Keywords.define_local( id, definition )
                    nextIteration

                  case "include", "requisiteAll"
                  # Leave $[include filepath] for the parser to handle.
                  if (keep_tokens)
                    tokens.add( t )
                    tokens.add( t2 )
                  endIf
                  nextIteration

                endWhich

              case Token.keyword_else
                if (depth == 1) throw t.error( "Syntax error - $[else] does not match any previous $[if]." )
                reader.push( t2 )
                reader.push( t )
                return

              case Token.keyword_elseIf
                if (depth == 1) throw t.error( "Syntax error - $[elseIf] does not match any previous $[if]." )
                reader.push( t2 )
                reader.push( t )
                return

              case Token.keyword_endIf
                if (depth == 1) throw t.error( "Syntax error - $[endIf] does not match any previous $[if]." )
                reader.push( t2 )
                reader.push( t )
                return

              case Token.keyword_if
                local found_true = parse_logical_expression
                must_consume( Token.symbol_close_bracket )

                if (found_true)
                  process( true, depth )
                else
                  process( false, depth )
                endIf

                while (reader.peek.type == Token.symbol_open_directive and reader.peek(1).type == Token.keyword_elseIf)
                  reader.read
                  reader.read
                  local value = parse_logical_expression
                  must_consume( Token.symbol_close_bracket )

                  if (found_true)
                    process( false, depth )
                  else
                    found_true = value
                    if (value) process( true, depth )
                    else       process( false, depth )
                  endIf
                endWhile

                if (reader.peek.type == Token.symbol_open_directive and reader.peek(1).type == Token.keyword_else)
                  reader.read
                  reader.read
                  must_consume( Token.symbol_close_bracket )
                  if (found_true) process( false, depth )
                  else            process( true, depth )
                endIf

                must_consume( Token.symbol_open_directive )
                must_consume( Token.keyword_endIf )
                must_consume( Token.symbol_close_bracket )
                nextIteration

            endWhich
            throw t.error( "Unknown directive '$'.  Expected one of: include, define, if/elseIf/endIf, requisiteAll." (t2->String) )

          case Token.identifier
            local def = Keywords.definitions[ t->String ]
            if (keep_tokens)
              if (def?) tokens.add( def )
              else      tokens.add( t )
            endIf
            nextIteration

          others
            if (keep_tokens) tokens.add( t )
        endWhich

      endWhile

    method must_consume( type:Integer )
      local message = "Expected '$'." (Token.name_of(type))
      if (not reader.has_another) throw BardError( message ) 
      local t = reader.read
      if (t.type != type) throw t.error( message )

    method parse_logical_expression->Logical
      return parse_logical_or

    method parse_logical_or->Logical
      return parse_logical_or( parse_logical_and )

    method parse_logical_or( lhs:Logical )->Logical
      if (consume(Token.keyword_or)) return parse_logical_or( parse_logical_and or lhs )
      return lhs

    method parse_logical_and->Logical
      return parse_logical_and( parse_logical_term )

    method parse_logical_and( lhs:Logical )->Logical
      if (consume(Token.keyword_and)) return parse_logical_and( parse_logical_term and lhs )
      return lhs

    method parse_logical_term->Logical
      loop
        local t = reader.peek
        if (consume(Token.keyword_not))
          return (not parse_logical_term)
        endIf

        if (t.type == Token.identifier)
          which (t->String)
            case "defined"
              reader.read
              must_consume( Token.symbol_open_paren )
              local id = read_identifier
              must_consume( Token.symbol_close_paren )
              return Keywords.definitions.contains( id )

            others
              reader.read
              local def = Keywords.definitions[ t->String ]
              if (def is null) return false
              reader.push( def )
              nextIteration
          endWhich
        endIf

        if (consume(Token.literal_Logical_true))  return true
        if (consume(Token.literal_Logical_false)) return false
        throw reader.peek.error( "Syntax error in directive: '$'." (reader.peek) )
      endLoop

    method read_identifier->String
      local t = reader.peek
      if (t.type != Token.identifier) throw t.error( "Identifier expected instead of '$'." (t) )
      return reader.read->String
endClass
