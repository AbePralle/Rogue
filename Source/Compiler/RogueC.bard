$[include "Parser.bard"]
$[include "Preprocessor.bard"]
$[include "Program.bard"]
$[include "Token.bard"]
$[include "Tokenizer.bard"]
$[include "TokenType.bard"]
$[include "Type.bard"]

class RogueC [singleton]
  PROPERTIES
    included_files = String[]
    compile_targets = Table<<String,Logical>>() : Table<<String,Logical>>

  METHODS
    method init
      try
        println "ROGUEC"

        compile_targets["C++"] = true
        Program.configure
        include( "Test.rogue" )
        Program.resolve

        Program.write_cpp( "CPP/RogueProgram" )

        println "DONE"
      catch (err:Error)
        println err
        Runtime.exit(1)
      endTry

    method include( filepath:String )
      include( null, filepath )

    method include( t:Token, filepath:String )
      # Preemptively (immediately) parses the given file.
      local file = File(filepath)
      if (not file.exists)
        local mesg = //No such file "$".// (filepath)
        if (t?) throw t.error( mesg )
        else    throw RogueError( mesg )
      endIf

      filepath = file.absolute_filepath
      if (included_files.contains(filepath)) return

      included_files.add( filepath )

      println "Parsing " + filepath
      Parser( filepath ).parse_elements
endClass

