$[include "Preprocessor.bard"]
$[include "Token.bard"]
$[include "Tokenizer.bard"]
$[include "TokenType.bard"]

class Roguec [singleton]
  PROPERTIES
    included_files = String[]

  METHODS
    method init
      try
        println "ROGUEC"
        include( "Test.rogue" )
        println "DONE"
      catch (err:Error)
        println err
      endTry

    method include( filepath:String )
      include( null, filepath )

    method include( t:Token, filepath:String )
      # Preemptively (immediately) parses the given file.
      local file = File(filepath)
      if (not file.exists)
        local mesg = //No such file "$".// (filepath)
        if (t?) throw t.error( mesg )
        else    throw RogueError( mesg )
      endIf

      filepath = file.absolute_filepath
      if (included_files.contains(filepath)) return

      included_files.add( filepath )

      println "Including " + filepath
      forEach (t in Preprocessor().process(Tokenizer().tokenize(filepath)))
        println t
      endForEach
endClass

