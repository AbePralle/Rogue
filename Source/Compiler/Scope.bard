$[include "CloneArgs.bard"]

class Scope
  PROPERTIES
    this_type   : Type
    this_method : Method

    local_list = Local[]
    locals_by_name = Table<<String,Local>>() : Table<<String,Local>>

    control_stack = CmdControlStructure[]

  METHODS
    method init( this_type, this_method )

    method find_local( name:String )->Local
      return locals_by_name[ name ]

    method push_local( v:Local )
      local existing = find_local( v.name )
      if (existing?) throw v.t.error( //A local variable named "$" already exists.// (v.name) ) 
      local_list.add( v )
      locals_by_name[v.name] = v

    method pop_local
      if (locals_by_name.count == 0) throw RogueError( "[INTERNAL] Scope::pop_local() called when local list is empty." )
      locals_by_name.remove( local_list.remove_last.name )

    method resolve_call( type_context:Type, access:CmdAccess, error_on_fail:Logical )->Cmd
      local m = find_method( type_context, access, error_on_fail and access.context? )
      if (not m and not access.context)
        # No context specified; try Global context
        m = find_method( Program.type_Global, access, false )
        if (m?)
          type_context = Program.type_Global
          access.context = CmdReadSingleton( access.t, Program.type_Global )
        elseIf (error_on_fail)
          # Create an error message with the most appropriate context
          if (Program.type_Global.has_method_named(access.name))
            find_method( Program.type_Global, access, true )
          else
            find_method( type_context, access, true )
          endIf
        endIf
      endIf

      if (not m) return null

      local t = access.t

      local context = access.context
      if (context?)
        if (m.is_routine and context instanceOf CmdLiteralThis)
          throw t.error( "Cannot call a method from a routine without an object context (obj.$()(...))." (m.name) )
        endIf
      else
        context = CmdThisContext( t, type_context )
      endIf

      local args = access.args
      if (not args) args = CmdArgs()

      # Validate args
      while (args.count < m.parameters.count)
        args.add( m.parameters[args.count].initial_value.clone )
      endWhile

      args.resolve( this )

      local cmd : Cmd
      if (m.is_routine)
        # routine
        if (m.is_native)
          if (m.native_code?)
            context = context.resolve( this )
            context.require_type_context
            cmd = CmdCallInlineNativeRoutine( t, m, args )
          else
            cmd = CmdCallNativeRoutine( t, m, args )
          endIf

        elseIf (m.is_inline)
          local inline_args = InlineArgs( context, m, args )
          local inline_statements = CmdStatementList()
          forEach (statement in m.statements)
            local inline_statement = statement.clone( inline_args )
            if (inline_statement?) inline_statements.add( inline_statement )
          endForEach

          inline_statements.resolve( this )
          if (inline_statements.count == 1) return inline_statements.first

          throw t.error( "TODO: multi-line inline statements" )

        else
          cmd = CmdCallRoutine( t, m, args )

        endIf

      else
        # method
        if (m.is_native)
          if (type_context.is_array)
            which (m.name)
              case "count"
                if (args? and args.count?) throw t.error( "Invalid arguments to array count." )
                return CmdReadArrayCount( t, context ).resolve( this )
              #others
                #throw t.error( "[INTERNAL] No compiler support for native Array call $." (m.signature) )
            endWhich
          endIf

          if (m.native_code?)
            cmd = CmdCallInlineNativeMethod( t, context, m, args )
          else
            cmd = CmdCallNativeMethod( t, context, m, args )
          endIf

        elseIf (m.is_inline)
          local inline_args = InlineArgs( context, m, args )
          local inline_statements = CmdStatementList()
          forEach (statement in m.statements)
            local inline_statement = statement.clone( inline_args )
            if (inline_statement?) inline_statements.add( inline_statement )
          endForEach

          inline_statements.resolve( this )
          if (inline_statements.count == 1) return inline_statements.first

          trace
          throw t.error( "TODO: multi-line inline statements" )

        elseIf (type_context.is_aspect)
          cmd = CmdCallAspectMethod( t, context, m, args )
          
        else
          cmd = CmdCallDynamicMethod( t, context, m, args )
        endIf
      endIf

      return cmd.resolve( this )

    method find_method( type_context:Type, access:CmdAccess, error_on_fail:Logical )->Method
      local candidates = CandidateMethods( type_context, access, error_on_fail )

      local list = type_context.routine_lookup_by_name[ access.name ]
      if (list?)
        forEach (m in list)
          candidates.available.add( m )
        endForEach
      endIf

      list = type_context.method_lookup_by_name[ access.name ]
      if (list?)
        forEach (m in list)
          candidates.available.add( m )
        endForEach
      endIf

      if (not candidates.update_available) return null

      local args = access.args

      local arg_count = 0
      if (args?)
        args.resolve( this )
        arg_count = args.count
      endIf

      forEach (m in candidates.available)
        if (m.accepts_arg_count(arg_count)) candidates.compatible.add( m )
      endForEach
      if (not candidates.update_matches) return null

      if (arg_count?)
        # Exact arg type check
        forEach (m in candidates.available)
          contingent
            forEach (index of args)
              local arg_type = args[index].type
              local param_type = m.parameters[index].type
              necessary (arg_type is param_type)
            endForEach
          satisfied
            candidates.compatible.add( m )
          endContingent
        endForEach
        if (not candidates.refine_matches) return null
      endIf

      if (arg_count?)
        # Compatible arg check
        forEach (m in candidates.available)
          contingent
            forEach (index of args)
              local arg_type = args[index].type
              local param_type = m.parameters[index].type
              necessary (arg_type.is_compatible_with(param_type))
            endForEach
          satisfied
            candidates.compatible.add( m )
          endContingent
        endForEach
        if (not candidates.refine_matches) return null
      endIf

      if (candidates.has_match) return candidates.match

      if (arg_count == 1)
        # 1. Try candidate(arg) -> candidate(arg->toObject)
        # 2. Try candidate(arg) -> candidate(arg->toString)
        # 3. Try candidate(arg) -> candidate(arg->toParameterType)
        forEach (m in candidates.available)
          if (m.parameters.count == 1)
            local arg_type = args.first.type
            local param_type = m.parameters.first.type
            param_type.organize
            if (param_type is Program.type_Object and arg_type.has_method_named("to_Object"))
              args[0] = args[0].cast_to( Program.type_Object )
              return m

            elseIf (param_type is Program.type_String and arg_type.has_method_named("to_String"))
              args[0] = args[0].cast_to( Program.type_String )
              return m

            elseIf (arg_type.has_method_named("to_"+param_type.name))
              args[0] = args[0].cast_to( param_type )
              return m

            endIf

          endIf
        endForEach
      endIf

      candidates.update_matches  # Force error if required
      return null
endClass

class CandidateMethods
  PROPERTIES
    type_context        : Type
    access              : CmdAccess
    available=Method[]  : Method[]
    compatible=Method[] : Method[]
    error_on_fail       : Logical

  METHODS
    method init( type_context, access, error_on_fail )

    method has_match->Logical
      return (available.count == 1)

    method match->Method
      if (available.count != 1) return null
      return available[0]

    method refine_matches->Logical
      return update( false )

    method update_available->Logical
      return update( false )

    method update_matches->Logical
      return update( true )

    method update( require_compatible:Logical )->Logical
      if (compatible.count == 0)

        if (available.count == 0)
          if (not error_on_fail) return false
          throw access.t.error( //No such method or variable "$" exists in current scope of type $.// (access.name,type_context) )

        elseIf (require_compatible)
          if (not error_on_fail) return false

          local call_sig_buffer = StringBuilder()
          call_sig_buffer.print( type_context.name ).print( "::" )
          call_sig_buffer.print( access.name ).print( "(" )
          if (access.args?)
            forEach (index of access.args)
              if (index > 0) call_sig_buffer.print(',')
              call_sig_buffer.print( access.args[index].require_type.name )
            endForEach
          endIf
          call_sig_buffer.print( ")" )
          local call_sig = call_sig_buffer->String

          local buffer = StringBuilder()
          if (available.count > 1)
            buffer.print( //Multiple methods match ambiguous call to $:\n\n// (call_sig) )
          else
            buffer.print( //Call to $ has arguments that are incompatible with the best candidate:\n\n// (call_sig) )
          endIf
          forEach (m in available)
            buffer.print("  ").print(m.type_context.name).print("::").println(m.signature)
          endForEach
          throw access.t.error( buffer->String )

        endIf

        # We didn't find any compatible methods; just keep our available methods
        # for the next refinement.
        return true
      endIf

      available.clear
      available.add( compatible )
      compatible.clear

      return true
endClass
