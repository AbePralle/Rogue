class Test
  METHODS
    method init
      local buffer = StringBuilder()
      println buffer.capacity
      #buffer.print( 5 )
      buffer.print( 5.0 ).print('\n')
      #{
      buffer.print( "test" ).print('\n')
      buffer.print( 3 ).print('\n')
      buffer.print( true ).print('\n')
      buffer.indent += 2
      buffer.print( 5.0 ).print('\n')
      buffer.print( "test" ).print('\n')
      buffer.print( 3 ).print('\n')
      buffer.print( true ).print('\n')
      }#
      println buffer->String
endClass

compound XY( x:Real, y:Real )
endCompound

class Number( value:Real )
  METHODS
    method to->String
      return "" + value
endClass

class Math
  ROUTINES
    routine atan( slope:Real )->Real
      $if ("C++") nativeInline 'atan((double)$n)'

    routine atan2( y:Real, x:Real )->Real
      $if ("C++") nativeInline 'atan2((double)$y,(double)$x)'

    routine ceil( n:Real )->Real
      $if ("C++") nativeInline 'ceil((double)$n)'

    routine cos( n:Real )->Real
      $if ("C++") nativeInline 'cos((double)$n)'

    routine exp( n:Real )->Real
      $if ("C++") nativeInline 'exp((double)$n)'

    routine floor( n:Real )->Real
      $if ("C++") nativeInline 'floor((double)$n)'

    routine log( n:Real )->Real
      $if ("C++") nativeInline 'log((double)$n)'

    routine log2( n:Real )->Real
      $if ("C++") nativeInline 'log2((double)$n)'

    routine log10( n:Real )->Real
      $if ("C++") nativeInline 'log10((double)$n)'

    routine sin( n:Real )->Real
      $if ("C++") nativeInline 'sin((double)$n)'

    routine sqrt( n:Real )->Real
      $if ("C++") nativeInline 'sqrt((double)$n)'

    routine tan( n:Real )->Real
      $if ("C++") nativeInline 'tan((double)$n)'
endClass

primitive Real
endPrimitive

primitive Float
endPrimitive

primitive Long
endPrimitive

primitive Integer
endPrimitive

primitive Character
endPrimitive

primitive Byte
endPrimitive

primitive Logical
endPrimitive

class Object
endClass

class String [native functional]
  ROUTINES
    routine create( characters:Character[] )->String
      $if ("C++") nativeInline 'RogueString::create( $characters )'

    routine create( characters:StringBuilder )->String
      return create( characters.characters )

  METHODS
    method after_any( ch:Character )->String
      local i = locate( ch )
      if (i == -1) return this
      return substring( i+1 )

    method after_any( st:String )->String
      local i = locate( st )
      if (i == -1) return this
      return substring( i+st.count )

    method after_first( ch:Character )->String
      local i = locate( ch )
      if (i == -1) return ""
      return substring( i+1 )

    method after_first( st:String )->String
      local i = locate( st )
      if (i == -1) return ""
      return substring( i+st.count )

    method after_last( ch:Character )->String
      local i = locate_last( ch )
      if (i == -1) return ""
      return substring( i+1 )

    method after_last( st:String )->String
      local i = locate_last( st )
      if (i == -1) return ""
      return substring( i+st.count )

    method before_first( ch:Character )->String
      local i = locate( ch )
      if (i == -1) return this
      return substring( 0, i-1 )

    method before_first( st:String )->String
      local i = locate( st )
      if (i == -1) return this
      return substring( 0, i-1 )

    method before_last( ch:Character )->String
      local i = locate_last( ch )
      if (i == -1) return this
      return substring( 0, i-1 )

    method before_last( st:String )->String
      local i = locate_last( st )
      if (i == -1) return this
      return substring( 0, i-1 )

    method begins_with( ch:Character )->Logical
      return (count? and this[0] == ch)

    method begins_with( other:String )->Logical
      local other_count = other.count
      return (count >= other_count and contains(other,0))

    method contains( substring:String )->Logical
      return locate(substring) >= 0

    method contains( substring:String, at_index:Integer )->Logical
      $if ("C++") nativeInline '$this->contains($substring,$at_index)'

    method count->Integer
      $if ("C++") nativeInline '$this->count'

    method from_first( ch:Character )->String
      local i = locate( ch )
      if (i == -1) return ""
      return substring( i )

    method from_first( st:String )->String
      local i = locate( st )
      if (i == -1) return ""
      return substring( i )

    method from_last( ch:Character )->String
      local i = locate_last( ch )
      if (i == -1) return ""
      return substring( i )

    method from_last( st:String )->String
      local i = locate_last( st )
      if (i == -1) return ""
      return substring( i )

    method get( index:Integer )->Character
      $if ("C++") nativeInline '$this->characters[$index]'

    method hash_code->Integer
      $if ("C++") nativeInline '$this->hash_code'

    method last->Character
      return this[ count-1 ]

    method locate( ch:Character, i1=0:Integer )->Integer
      $if ("C++") nativeInline '$this->locate($ch,$i1)'

    method locate( other:String, i1=0:Integer )->Integer
      $if ("C++") nativeInline '$this->locate($other,$i1)'

    method locate_last( ch:Character )->Integer
      return locate_last( ch, count-1 )

    method locate_last( ch:Character, starting_index:Integer )->Integer
      $if ("C++") nativeInline '$this->locate_last($ch,$starting_index)'

    method locate_last( other:String )->Integer
      return locate_last( other, count-other.count )

    method locate_last( other:String, starting_index:Integer )->Integer
      $if ("C++") nativeInline '$this->locate_last($other,$starting_index)'

    method operator+( value:Character )->String
      $if ("C++") nativeInline '$this->plus($value)'

    method operator+( value:Integer )->String
      $if ("C++") nativeInline '$this->plus($value)'

      #{
    method operator+( value:Object )->String
      if (value?) return this + value->String
      else        return this + "null"
      }#

    method operator<>( other:String )->Integer
      $if ("C++") nativeInline '$this->compare_to($other)'

    method operator+( value:Logical )->String
      if (value) return this + "true"
      else       return this + "false"

    method operator+( value:Real )->String
      $if ("C++") nativeInline '$this->plus($value)'

    method operator+( value:String )->String
      $if ("C++") nativeInline '$this->plus($value)'

    method substring( i1:Integer, i2=-1:Integer )->String
      $if ("C++") nativeInline '$this->substring($i1,$i2)'

endClass

class NativeArray [native]
  METHODS
    method count->Integer [native]

    method element_size->Integer
      $if ("C++") nativeInline '$this->element_size'

    method set( i1:Integer, other:NativeArray, other_i1=0:Integer, other_i2=-1:Integer )->NativeArray
      $if ("C++") nativeInline '$this->set($i1,$other,$other_i1,$other_i2)'
endClass

class Array<<$DataType>> : NativeArray [native]
  METHODS
    method get( index:Integer )->$DataType
      inline this[ index ]
endClass

class GenericList
endClass

class List<<$DataType:Object>> : GenericList
  PROPERTIES
    data  : Array<<$DataType>>
    count : Integer

  METHODS
    method init
      init( 10 )

    method init( initial_capacity:Integer )
      data = Array<<$DataType>>( initial_capacity )

    method add( value:$DataType )->$DataType[]
      reserve(1)[count] = value
      ++count
      return this

    method capacity->Integer
      if (not data) return 0
      return data.count

    method clear->$DataType[]
      count = 0
      return this

    method first->$DataType
      inline this.data[0]

    method get( index:Integer )->$DataType
      inline this.data[index]

    method last->$DataType
      return this.data[ count - 1 ]

    method locate( value:$DataType )->Integer
      forEach (i of this)
        if (data[i] == value) return i
      endForEach
      return -1

    method locate_last( value:$DataType )->Integer
      forEach (i of this step -1)
        if (data[i] == value) return i
      endForEach
      return -1

    method reserve( additional_count:Integer )->$DataType[]
      local required_capacity = count + additional_count

      if (not data)
        data = Array<<$DataType>>( 10 )
      elseIf (required_capacity > data.count)
        local x2 = capacity + capacity
        if (required_capacity < x2) required_capacity = x2 
        local new_data = Array<<$DataType>>( required_capacity )
        new_data.set( 0, data )
        data = new_data
      endIf

      return this

    method remove( value:$DataType )->$DataType
      local index = locate( value )
      if (index == -1)
        local zero_value : $DataType
        return zero_value
      endIf
      return remove_at( index )

    method remove_at( index:Integer )->$DataType
      local result = this[ index ]
      data.set( index, data, index+1 )
      local zero_value : $DataType
      data[count--] = zero_value
      return result

    method set( xyz:Integer, new_value:$DataType )->$DataType[]
      inline this.data[ xyz ] = new_value

    method to->String
      local buffer = "["
      local first = true
      forEach (value in this)
        if (first) first = false
        else       buffer += ","
        buffer += value
      endForEach
      buffer += "]"
      return buffer
endClass


class StringBuilder
  PROPERTIES
    characters   : Character[]
    indent       : Integer
    at_newline   = true

  METHODS
    method init
      init( 40 )

    method init( initial_capacity:Integer )
      characters = Character[]( initial_capacity )

    method capacity->Integer
      inline characters.capacity

    method needs_indent->Logical
      inline (at_newline and indent > 0)

    method print( value:Character )->StringBuilder
      if (value == '\n')    at_newline = true
      elseIf (needs_indent) print_indent
      characters.add( value )
      return this

    method print( value:Integer )->StringBuilder [native]

      #{
    method print( value:Logical )->StringBuilder
      if (value) return print( "true" )
      else       return print( "false" )
      }#

    method print( value:Real, decimal_places=4:Integer )->StringBuilder [native]

      #{
    method print( value:String )->StringBuilder
      if (value?)
        if (indent?)
          forEach (ch in value) print( ch )
        else
          forEach (ch in value) characters.add( ch )
          if (value? and value.last == '\n') at_newline = true
        endIf
      else
        return print( "null" )
      endIf
      }#

    method print_indent
      if (not needs_indent or indent == 0) return
      forEach (i in 1..indent) characters.add( ' ' )
      at_newline = false

    method reserve( additional_count:Integer )->StringBuilder
      characters.reserve( additional_count )
      return this

    method to->String
      return String( characters )
endClass

