class Test
  METHODS
    method init
      #println XY(3,4)
      local abc = "def";
      #println abc.compare_to( "ABCD" )
      #println abc.compare_to( "ABC" )
      #println abc.compare_to( "AB" )
      #println abc.compare_to( abc )
      #println abc == "AB" + 'C'
      println abc == "abc"
      println abc != "abc"
      println abc != "abd"
      println abc < "abc"
      println abc < "abcd"
      println abc <= "abc"
      println abc <= "abcd"
      println abc >= "abc"
      println abc >= "abcd"
      println abc > "abc"
      println abc > "abcd"
endClass

compound XY( x:Real, y:Real )
endCompound

class Number( value:Real )
  METHODS
    method to->String
      return "" + value
endClass

class Math
  ROUTINES
    routine atan( slope:Real )->Real
      $if ("C++") nativeInline 'atan((double)$n)'

    routine atan2( y:Real, x:Real )->Real
      $if ("C++") nativeInline 'atan2((double)$y,(double)$x)'

    routine ceil( n:Real )->Real
      $if ("C++") nativeInline 'ceil((double)$n)'

    routine cos( n:Real )->Real
      $if ("C++") nativeInline 'cos((double)$n)'

    routine exp( n:Real )->Real
      $if ("C++") nativeInline 'exp((double)$n)'

    routine floor( n:Real )->Real
      $if ("C++") nativeInline 'floor((double)$n)'

    routine log( n:Real )->Real
      $if ("C++") nativeInline 'log((double)$n)'

    routine log2( n:Real )->Real
      $if ("C++") nativeInline 'log2((double)$n)'

    routine log10( n:Real )->Real
      $if ("C++") nativeInline 'log10((double)$n)'

    routine sin( n:Real )->Real
      $if ("C++") nativeInline 'sin((double)$n)'

    routine sqrt( n:Real )->Real
      $if ("C++") nativeInline 'sqrt((double)$n)'

    routine tan( n:Real )->Real
      $if ("C++") nativeInline 'tan((double)$n)'
endClass

primitive Real
endPrimitive

primitive Float
endPrimitive

primitive Long
endPrimitive

primitive Integer
endPrimitive

primitive Character
endPrimitive

primitive Byte
endPrimitive

primitive Logical
endPrimitive

class Object
endClass

class String [functional]
  METHODS
    method after_any( ch:Character )->String
      local i = locate( ch )
      if (i == -1) return this
      return substring( i+1 )

    method after_any( st:String )->String
      local i = locate( st )
      if (i == -1) return this
      return substring( i+st.count )

    method after_first( ch:Character )->String
      local i = locate( ch )
      if (i == -1) return ""
      return substring( i+1 )

    method after_first( st:String )->String
      local i = locate( st )
      if (i == -1) return ""
      return substring( i+st.count )

    method after_last( ch:Character )->String
      local i = locate_last( ch )
      if (i == -1) return ""
      return substring( i+1 )

    method after_last( st:String )->String
      local i = locate_last( st )
      if (i == -1) return ""
      return substring( i+st.count )

    method before_first( ch:Character )->String
      local i = locate( ch )
      if (i == -1) return this
      return substring( 0, i-1 )

    method before_first( st:String )->String
      local i = locate( st )
      if (i == -1) return this
      return substring( 0, i-1 )

    method before_last( ch:Character )->String
      local i = locate_last( ch )
      if (i == -1) return this
      return substring( 0, i-1 )

    method before_last( st:String )->String
      local i = locate_last( st )
      if (i == -1) return this
      return substring( 0, i-1 )

    method begins_with( ch:Character )->Logical
      return (count? and this[0] == ch)

    method begins_with( other:String )->Logical
      local other_count = other.count
      return (count >= other_count and contains(other,0))

    method contains( substring:String )->Logical
      return locate(substring) >= 0

    method contains( substring:String, at_index:Integer )->Logical
      $if ("C++") nativeInline '$this->contains($substring,$at_index)'

    method count->Integer
      $if ("C++") nativeInline '$this->count'

    method from_first( ch:Character )->String
      local i = locate( ch )
      if (i == -1) return ""
      return substring( i )

    method from_first( st:String )->String
      local i = locate( st )
      if (i == -1) return ""
      return substring( i )

    method from_last( ch:Character )->String
      local i = locate_last( ch )
      if (i == -1) return ""
      return substring( i )

    method from_last( st:String )->String
      local i = locate_last( st )
      if (i == -1) return ""
      return substring( i )

    method get( index:Integer )->Character
      $if ("C++") nativeInline '$this->characters[$index]'

    method hash_code->Integer
      $if ("C++") nativeInline '$this->hash_code'

    method locate( ch:Character, i1=0:Integer )->Integer
      $if ("C++") nativeInline '$this->locate($ch,$i1)'

    method locate( other:String, i1=0:Integer )->Integer
      $if ("C++") nativeInline '$this->locate($other,$i1)'

    method locate_last( ch:Character )->Integer
      return locate_last( ch, count-1 )

    method locate_last( ch:Character, starting_index:Integer )->Integer
      $if ("C++") nativeInline '$this->locate_last($ch,$starting_index)'

    method locate_last( other:String )->Integer
      return locate_last( other, count-other.count )

    method locate_last( other:String, starting_index:Integer )->Integer
      $if ("C++") nativeInline '$this->locate_last($other,$starting_index)'

    method operator+( value:Character )->String
      $if ("C++") nativeInline '$this->plus($value)'

    method operator+( value:Integer )->String
      $if ("C++") nativeInline '$this->plus($value)'

      #{
    method operator+( value:Object )->String
      if (value?) return this + value->String
      else        return this + "null"
      }#

    method operator<>( other:String )->Integer
      $if ("C++") nativeInline '$this->compare_to($other)'

    method operator+( value:Logical )->String
      if (value) return this + "true"
      else       return this + "false"

    method operator+( value:Real )->String
      $if ("C++") nativeInline '$this->plus($value)'

    method operator+( value:String )->String
      $if ("C++") nativeInline '$this->plus($value)'

    method substring( i1:Integer, i2=-1:Integer )->String
      $if ("C++") nativeInline '$this->substring($i1,$i2)'

endClass

class NativeArray [native]
endClass

class Array<<$DataType>> : NativeArray [native]
  METHODS
    method count->Integer [native]
endClass

class GenericList
endClass

class List<<$DataType:Object>> : GenericList
  PROPERTIES
    data  : Array<<$DataType>>
    count : Integer

  METHODS
    method init
      data = Array<<$DataType>>( 2 )

    method get( index:Integer )->$DataType
      inline this.data[index]

    method set( index:Integer, new_value:$DataType )
      inline this.data[ index ] = new_value
endClass

