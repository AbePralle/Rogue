class Test
  SETTINGS
    woot = 3 : Integer

  PROPERTIES
    nums = Integer[]

  ROUTINES
    routine init_class
      woot = 5

    routine test
      println "routine print"
      println woot++
      println ++woot

  METHODS
    method init
      test
      #Alpha()
      #Alpha.default_a = 5

    method sqrt( n:Integer )->Integer
      $if ("C++") nativeInline '((int)sqrt((double)$n))'
endClass

class Alpha
  SETTINGS
    default_a = 3 : Integer
endClass

primitive Real
endPrimitive

primitive Float
endPrimitive

primitive Long
endPrimitive

primitive Integer
endPrimitive

primitive Character
endPrimitive

primitive Byte
endPrimitive

primitive Logical
endPrimitive

class Object
endClass

class String [functional]
  METHODS
    method count->Integer
      $if ("C++") nativeInline '$this->count'

    method get( index:Integer )->Character
      $if ("C++") nativeInline '$this->characters[$index]'

    method hash_code->Integer
      $if ("C++") nativeInline '$this->hash_code'

    method operator+( value:Character )->String
      $if ("C++") nativeInline '$this->plus($value)'

    method operator+( value:String )->String
      $if ("C++") nativeInline '$this->plus($value)'

    method substring( i1:Integer, i2=-1:Integer )->String
      $if ("C++") nativeInline '$this->substring($i1,$i2)'

endClass

class NativeArray [native]
endClass

class Array<<$DataType>> : NativeArray [native]
  METHODS
    method count->Integer [native]
endClass

class GenericList
endClass

class List<<$DataType:Object>> : GenericList
  PROPERTIES
    data  : Array<<$DataType>>
    count : Integer

  METHODS
    method init
      data = Array<<$DataType>>( 2 )

    method get( index:Integer )->$DataType
      inline this.data[index]

    method set( index:Integer, new_value:$DataType )
      inline this.data[ index ] = new_value
endClass

