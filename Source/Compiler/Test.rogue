class Test
  METHODS
    method init
      #println XY(3,4)
      println Number(3)
endClass

compound XY( x:Real, y:Real )
endCompound

class Number( value:Real )
  METHODS
    method to->String
      return "test"
endClass

class Math
  ROUTINES
    routine atan( slope:Real )->Real
      $if ("C++") nativeInline 'atan((double)$n)'

    routine atan2( y:Real, x:Real )->Real
      $if ("C++") nativeInline 'atan2((double)$y,(double)$x)'

    routine ceil( n:Real )->Real
      $if ("C++") nativeInline 'ceil((double)$n)'

    routine cos( n:Real )->Real
      $if ("C++") nativeInline 'cos((double)$n)'

    routine exp( n:Real )->Real
      $if ("C++") nativeInline 'exp((double)$n)'

    routine floor( n:Real )->Real
      $if ("C++") nativeInline 'floor((double)$n)'

    routine log( n:Real )->Real
      $if ("C++") nativeInline 'log((double)$n)'

    routine log2( n:Real )->Real
      $if ("C++") nativeInline 'log2((double)$n)'

    routine log10( n:Real )->Real
      $if ("C++") nativeInline 'log10((double)$n)'

    routine sin( n:Real )->Real
      $if ("C++") nativeInline 'sin((double)$n)'

    routine sqrt( n:Real )->Real
      $if ("C++") nativeInline 'sqrt((double)$n)'

    routine tan( n:Real )->Real
      $if ("C++") nativeInline 'tan((double)$n)'
endClass

primitive Real
endPrimitive

primitive Float
endPrimitive

primitive Long
endPrimitive

primitive Integer
endPrimitive

primitive Character
endPrimitive

primitive Byte
endPrimitive

primitive Logical
endPrimitive

class Object
endClass

class String [functional]
  METHODS
    method count->Integer
      $if ("C++") nativeInline '$this->count'

    method get( index:Integer )->Character
      $if ("C++") nativeInline '$this->characters[$index]'

    method hash_code->Integer
      $if ("C++") nativeInline '$this->hash_code'

    method operator+( value:Character )->String
      $if ("C++") nativeInline '$this->plus($value)'

    method operator+( value:String )->String
      $if ("C++") nativeInline '$this->plus($value)'

    method substring( i1:Integer, i2=-1:Integer )->String
      $if ("C++") nativeInline '$this->substring($i1,$i2)'

endClass

class NativeArray [native]
endClass

class Array<<$DataType>> : NativeArray [native]
  METHODS
    method count->Integer [native]
endClass

class GenericList
endClass

class List<<$DataType:Object>> : GenericList
  PROPERTIES
    data  : Array<<$DataType>>
    count : Integer

  METHODS
    method init
      data = Array<<$DataType>>( 2 )

    method get( index:Integer )->$DataType
      inline this.data[index]

    method set( index:Integer, new_value:$DataType )
      inline this.data[ index ] = new_value
endClass

