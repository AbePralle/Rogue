$[include "MethodTemplate.bard"]

class Type
  PROPERTIES
    t          : Token
    name       : String
    attributes : Integer

    defined    : Logical
    organized  : Logical
    resolved   : Logical

    method_template_list   = MethodTemplate[]                 : MethodTemplate[]
    method_template_lookup = Table<<String,MethodTemplate>>() : Table<<String,MethodTemplate>>

    method_list                = Method[]                   : Method[]
    method_lookup_by_name      = Table<<String,Method[]>>() : Table<<String,Method[]>>
    method_lookup_by_signature = Table<<String,Method>>()   : Table<<String,Method>>

    cpp_name : String

  METHODS
    method init( t, name )

    method assign_cpp_name
      cpp_name = "Rogue" + name

    method find_method( signature:String )->Method
      local m = method_lookup_by_signature[signature]
      if (m?) return m

      local templated_name = signature.before_first('(')
      local base_name = templated_name.before_first('<')
      local m_template = method_template_lookup[ base_name ]
      if (not m_template) return null

      m = m_template.instantiate()

      return m

    method is_native->Logical
      return (attributes & Attributes.flag_native)?

    method organize->Type
      if (organized) return this
      organized = true

      if (not defined)
        defined = true
        local base_name = name.before_first( "<<" )
        local template = Program.template_lookup[ base_name ]
        if (template?)
          template.instantiate( this )
        else
          throw t.error( "Reference to undefined type '$'." (name) )
        endIf
      endIf

      return this

    method resolve->Type
      if (resolved) return this
      resolved = true
      organize
      return this

    method print_type_declaration( writer:CPPWriter )
      if (is_native) return
      writer.print( "struct " ).print( cpp_name ).println( ";" )

    method print_method_prototypes( writer:CPPWriter )
      if (is_native) return

      forEach (m in method_list) m.print_prototype( writer )

    method print( writer:CPPWriter )
      if (is_native) return
      writer.print( "struct " ).print( cpp_name ).println
      writer.println( "{" )
      writer.println( "};" )

endClass
