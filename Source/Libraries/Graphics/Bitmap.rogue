class Bitmap : Canvas
  PROPERTIES
    pixels : Integer[]

  METHODS
    method init( size ) [requisite]
      pixels = Integer[]( width*height, Color.BLACK )

    method init( file:File )
      init( file.load_as_bytes )

    method init( bytes:Byte[] )
      if (not decode(bytes)) init( XY(1,1) )

    method init( existing:Bitmap, bounds:Box )
      init( bounds.size )
      Graphics.save.canvas = this
      existing.draw( -bounds.position )
      Graphics.restore

    method clear
      local color = background_color
      forEach (i of pixels) pixels[i] = color

    method decode( bytes:Byte[] )->Logical
      native @|ImageIODecoder decoder;
              |ImageIODecoder_init( &decoder );
              |if ( !ImageIODecoder_set_input(&decoder, $bytes->data->bytes, $bytes->count) ) return 0;

      size = XY( native("decoder.width")->Integer, native("decoder.height")->Integer )
      pixels = Integer[]( width * height )

      native @|if ( !ImageIODecoder_decode_argb32(&decoder,(ImageIOARGB32*)$this->pixels->data->integers) ) return 0;
      return true

    method draw( pos:XY )
      local dest_canvas = Graphics.canvas as Bitmap
      if (not dest_canvas)
        println "Cannot draw a Bitmap to a non-Bitmap canvas."
        return
      endIf

      local dest_width = dest_canvas.width
      local x1 = pos.x : Integer
      local y1 = pos.y : Integer
      local x_limit = x1 + width : Integer
      local y_limit = y1 + height : Integer
      local i1 = 0
      local j1 = 0
      if (x1 < 0) i1 -= x1; x1 = 0
      if (y1 < 0) j1 -= y1; y1 = 0
      if (x_limit > dest_width)  x_limit = dest_width
      if (y_limit > dest_canvas.height) y_limit = dest_canvas.height
      if (x1 >= x_limit or y1 >= y_limit) return
      local x2 = x_limit - 1
      local y2 = y_limit - 1

      local w = x_limit - x1
      local src_width = width

      local src = j1 * width + i1 : Integer
      local dest = y1 * dest_width + x1 : Integer
      local src_pixels = pixels.data
      local dest_pixels = dest_canvas.pixels.data
      forEach (y1..y2)
        dest_pixels.set( dest, src_pixels, src, w )
        src  += src_width
        dest += dest_width
      endForEach

    method get( x:Integer, y:Integer )->Integer
      return pixels[ y*width + x ]

    method save_as_png( file:File )->Logical
      return file.save( to_png_bytes )

    method save_as_jpeg( file:File, quality=75:Integer )->Logical
      return file.save( to_jpeg_bytes(quality) )

    method set( x:Integer, y:Integer, color:Integer )->this
      pixels[ y*width + x ] = color
      return this

    method to_png_bytes->Byte[]
      local w = width
      local h = height
      local count : Integer
      native @|ImageIOEncoder encoder;
              |ImageIOEncoder_init( &encoder );
              |ImageIOEncoder_encode_argb32_png( &encoder, (ImageIOARGB32*) $this->pixels->data->integers, $w, $h );
              |$count = (RogueInteger) encoder.encoded_byte_count;

      local bytes = Byte[]( count );
      bytes.count = count
      native @|memcpy( $bytes->data->bytes, encoder.encoded_bytes, $count );

      return bytes

    method to_jpeg_bytes( quality=75:Integer )->Byte[]
      local w = width
      local h = height
      local count : Integer
      native @|ImageIOEncoder encoder;
              |ImageIOEncoder_init( &encoder );
              |encoder.quality = $quality;
              |ImageIOEncoder_encode_argb32_jpeg( &encoder, (ImageIOARGB32*) $this->pixels->data->integers, $w, $h );
              |$count = (RogueInteger) encoder.encoded_byte_count;

      local bytes = Byte[]( count );
      bytes.count = count
      native @|memcpy( $bytes->data->bytes, encoder.encoded_bytes, $count );

      return bytes
endClass

nativeHeader #include "ImageIO.h"

