module ParseKit

$macro ParseRuleFn(LANGUAGE,BODY)
  function( rule:ParseRule<<LANGUAGE>> )->Cmd<<LANGUAGE>>
    BODY
  endFunction
$endMacro

class Parser<<$Language>>
  PROPERTIES
    reader    : TokenReader<<$Language>>
    rules     = StringTable<<ParseRule<<$Language>>>>()
    prev_rule : ParseRule<<$Language>>

  METHODS
    method add( rule:ParseRule<<$Language>> )->ParseRule<<$Language>>
      rules[ rule.name ] = rule
      prev_rule = rule
      rule.parser = this
      return rule

    method chain( rule:ParseRule<<$Language>> )->ParseRule<<$Language>>
      if (prev_rule) prev_rule.next = rule
      return add( rule )

    method create_rule( name:String )->ParseRule<<$Language>>
      return ParseRule<<$Language>>(name)

    method create_binary_rule( name:String )->ParseRule<<$Language>>
      return BinaryParseRule<<$Language>>(name)

    method open( file:File )->this
      reader = TokenReader<<$Language>>( Tokenizer<<$Language>>().tokenize(file) )
      return this

    method open( filename:String, source:String )->this
      reader = TokenReader<<$Language>>( Tokenizer<<$Language>>().tokenize(filename,source) )
      return this

    method parse( file:File )
      open( file )
      parse( "program" )

    method parse( filename:String, source:String )
      open( filename, source )
      parse( "program" )

    method parse( rule_name:String )->Cmd<<$Language>>
      local rule = rules[ rule_name ]
      if (rule)
        return rule.parse
      else
        throw ParseError<<$Language>>( "[INTERNAL] No such parse rule: $." (rule_name) )
      endIf

endClass

