module ParseKit

class TokenReader<<$Language>>
  PROPERTIES
    tokens   : Token<<$Language>>[]
    position : Int32

  METHODS
    method init( tokens )

    method consume( token_type:TokenType<<$Language>> )->Logical
      if (not has_another or peek.type != token_type) return false
      read
      return true

    method has_another->Logical
      return (position < tokens.count)

    method must_consume( token_type:TokenType<<$Language>> )
      if (consume(token_type)) return
      throw peek.error( "$ expected, found $." (token_type.describe,peek->String) )

    method peek->Token<<$Language>>
      if (position == tokens.count) return Token<<$Language>>( TokenType<<$Language>>.EOI ).set_position( tokens.last )
      return tokens[ position ]

    method peek( lookahead:Int32 )->Token<<$Language>>
      local i = position + lookahead
      if (i >= tokens.count) return Token<<$Language>>( TokenType<<$Language>>.EOI ).set_position( tokens.last )
      return tokens[ i ]

    method read->Token<<$Language>>
      if (position == tokens.count) return Token<<$Language>>( TokenType<<$Language>>.EOI ).set_position( tokens.last )
      ++position
      return tokens[ position - 1 ]
endClass

