module ParseKit<<$Language>>
uses $Language

class Visitor [api]
  # FLOW
  #   # Starting point
  #   if (cmd) cmd = visit( cmd )
  #
  #   visit( cmd:Cmd )->Cmd
  #     # In general do not override visit().
  #     return handle(cmd)->Cmd
  #
  #   handle( cmd:Cmd* )->Cmd
  #     # Cmd* indicates that the cmd is automatically promoted to its most specialized type
  #     # Overload handle() and/or any of the following callbacks:
  #     on_enter( cmd:Cmd* )
  #     dispatch( cmd:Cmd* )
  #     on_leave( cmd:Cmd* )
  #     return cmd
  #
  #   on_enter( cmd:Cmd* )
  #     noAction
  #
  #   dispatch( cmd:Cmd* )
  #     forEach (child_cmd in cmd)
  #       if (child_cmd) child_cmd = visit( child_cmd )
  #     endForEach
  #
  #   on_leave( cmd:Cmd* )
  #     noAction
  PROPERTIES
    method_lookup = StringTable<<MethodInfo>>()
    lookup_buffer = StringBuilder()

  METHODS
    method call( method_name:String, cmd:Cmd )->Cmd
      return _find_method( method_name, cmd.type_info ).call( @[this,cmd] )->Object as Cmd

    method dispatch( args:CmdArgs )
      forEach (arg at index in args) args[ index ] = visit( arg )

    method dispatch( statements:CmdStatements )
      forEach (statement at index in statements) statements[ index ] = visit( statement )

    method dispatch( cmd:Cmd )
      forEach (obj_info in cmd.type_info.properties)
        if (obj_info.type.instance_of(<<Cmd>>))
          local i = cmd.introspector
          local obj = i.get( obj_info )->Object
          if (obj instanceOf Cmd)
            local result = visit( obj as Cmd )
            local value = Value(result)
            i.set( obj_info, value )
          elseIf (obj instanceOf CmdStatements)
            visit( obj as CmdStatements )
          elseIf (obj instanceOf CmdArgs)
            visit( obj as CmdArgs )
          endIf
        endIf
      endForEach

    method handle( args:CmdArgs )
      on_enter( args )
      dispatch( args )
      on_leave( args )

    method handle( statements:CmdStatements )
      on_enter( statements )
      dispatch( statements )
      on_leave( statements )

    method handle( cmd:Cmd )->Cmd
      this( "on_enter", cmd )
      this( "dispatch", cmd )
      this( "on_leave", cmd )
      return cmd

    method on_enter( args:CmdArgs )
    method on_enter( statements:CmdStatements )
    method on_enter( cmd:Cmd )

    method on_leave( args:CmdArgs )
    method on_leave( statements:CmdStatements )
    method on_leave( cmd:Cmd )

    method visit( cmd:Cmd )->Cmd
      return this( "handle", cmd )

    method visit( args:CmdArgs )
      handle( args )

    method visit( statements:CmdStatements )
      handle( statements )

    method _compose_signature( method_name:String, param_type_name:String )->StringBuilder
      lookup_buffer.clear
      lookup_buffer.print( method_name ).print( '(' ).print( param_type_name ).print( ')' )
      return lookup_buffer

    method _find_method( method_name:String, param_type:TypeInfo )->MethodInfo
      local this_type = type_info
      local m = method_lookup[ _compose_signature(method_name,param_type.name) ]
      if (m) return m

      local original_param_type_name = param_type.name
      loop
        m = this_type.find_method( _compose_signature(method_name,param_type.name) )
        if (m)
          method_lookup[ _compose_signature(method_name,original_param_type_name) ] = m  # cache using most specialized signature
          escapeLoop
        endIf
        param_type = param_type.base_class
      endLoop

      return m


endClass

