$module Boss

class VM
  PROPERTIES
    method_lookup = Table<<String,Int32>>()  # method name to dynamic slot number
    type_lookup   = Table<<String,Type>>()

    free_tasks    = Task[]
    active_tasks  = Task[]

  METHODS
    method init

    method execute( source:String, filepath="[Internal]":String )->Result
      return execute_new_task( source, filepath ).result

    method execute_new_task( source:String, filepath="[Internal]":String )->Task
      # Internal use.
      local task : Task

      if (free_tasks.count) task = free_tasks.remove_last
      else                  task = Task( this )

      task.reset
      task.result = Result()
      task.load( source, filepath )
      if (task.execute) 
        # Did not finish immediately
        active_tasks.add( task )
      else
        free_tasks.add( task )
      endIf
      return task

    method evaluate( source:String )->Value
      local task = execute_new_task( source )
      if (not task.is_finished)
        throw task.error( "Code cannot be evaluated because it contains a blocking call." )
      endIf
      return task.result.value

    method evaluate_integer( source:String )->Int32 [macro]
      this.evaluate( source )->Int32

    method register_type( name:String, on_create:Function(Task) )
      type_lookup[ name ] = Type( this, name, on_create )

    method update->Logical
      local write_i = 0
      forEach (read_i of active_tasks)
        local task = active_tasks[read_i]
        if (task.execute)
          active_tasks[write_i] = task
          ++write_i
        else
          free_tasks.add( task )
        endIf
      endForEach
      active_tasks.discard_from( write_i )
      return (write_i > 0)
endClass

class Result
  PROPERTIES
    value    : Value
    is_ready : Logical
endClass

class Error : ::Error
  PROPERTIES
    filepath : String
    line     : Int32
    column   : Int32

  METHODS
    method init( t:Token, message )
      filepath = t.filepath
      line = t.line
      column = t.column
endClass

class TaskStatus
  ENUMERATE
    INITIALIZING
    RUNNING
    SUSPENDED
    FINISHED
endClass

class Task
  PROPERTIES
    vm            : VM
    fp            : Int32
    ip            : Int32
    commands      = Cmd[]
    data_stack    = Value[]
    reg_stack     = Int32[]
    command_stack = Cmd[][]

    status        : Int32
    result        : Result
    filepath      : String

  METHODS
    method init( vm )
      println "Creating task"

    method reset->Task
      fp = 0
      ip = 0
      data_stack.clear
      reg_stack.clear
      commands.clear
      command_stack.clear
      status = TaskStatus.INITIALIZING
      return this

    method ensure_arg_count( n:Int32 )->this
      local delta = (data_stack.count - fp) - n

      if (delta == 0) return this

      while (delta > 0) data_stack.remove_last;        --delta
      while (delta < 0) data_stack.add( NullValue() ); ++delta

      return this

    method error( message:String )->Error
      local t : Token
      if (commands.count) t = commands[ip].t
      else                t = Token().set_info( filepath, 0, 0 )
      throw t.error( message )

    method is_finished->Logical
      return (status == TaskStatus.FINISHED)

    method load( source:String, filepath )->this
      try
        commands.add( Parser(this).parse(source,filepath) )
      catch (err:Error)
        println err
      endTry
      return this

    method execute->Logical
      # Returns false if the task is finished
      if (commands.count == 0) return false

      if (status == TaskStatus.INITIALIZING)
        status = TaskStatus.RUNNING
      endIf

      if (status == TaskStatus.RUNNING)
        local cmd = commands[ip]
        ++ip
        while (cmd.execute(this))
          cmd = commands[ip]
          ++ip
        endWhile
      endIf

      if (is_finished)
        result.value = pop
        return false
      else
        return true
      endIf

    method pop->Value
      if (data_stack.count) return data_stack.remove_last
      else              return NullValue()

    method pop_integer->Int32
      if (data_stack.count) return data_stack.remove_last->Int32
      else             return 0

    method pop_object->Object
      if (data_stack.count) return data_stack.remove_last->Object
      else             return null

    method pop_real->Real64
      if (data_stack.count) return data_stack.remove_last->Real64
      else             return 0

    method push( value:Int32 )->this
      data_stack.add( IntegerValue(value) )
      return this

    method push( value:Object )->this
      data_stack.add( ObjectValue(value) )
      return this

    method push( value:Real64 )->this
      data_stack.add( RealValue(value) )
      return this

    method push( value:Value )->this
      data_stack.add( value )
      return this

    method push_frame( new_commands:Cmd[] )
      reg_stack.add( fp )
      reg_stack.add( ip )
      fp = data_stack.count
      command_stack.add( commands )
      commands = new_commands

    method pop_frame
      local result = data_stack.last
      data_stack.discard_from( fp )
      commands = command_stack.remove_last
      ip = reg_stack.remove_last
      fp = reg_stack.remove_last
      data_stack.add( result )

    method resume->this
      status = TaskStatus.RUNNING
      return this

    method suspend->this
      status = TaskStatus.SUSPENDED
      return this

endClass

class Type
  PROPERTIES
    vm        : VM
    name      : String
    on_create : Function(Task)

  METHODS
    method init( vm, name, on_create )
endClass


class Method
  PROPERTIES
    vm   : VM
    name : String
    fn   : Function(Task)

  METHODS
    method init( vm, name, fn )
endClass


class Value
  ENUMERATE
    TYPE_NULL
    TYPE_REAL
    TYPE_INTEGER
    TYPE_LOGICAL
    TYPE_OBJECT
    TYPE_STRING

  PROPERTIES
    type : Int32

  METHODS
    method init( type )

    method operator+( other:Value )->Value
      return RealValue(0)

    method operator*( other:Value )->Value
      return RealValue(0)

    method to->Int32
      return 0

    method to->Object
      return null

    method to->Real64
      return 0

endClass


class IntegerValue : Value
  PROPERTIES
    value : Int32

  METHODS
    method init( value )
      type = TYPE_INTEGER

    method operator+( other:Value )->Value
      which (other.type)
        case TYPE_REAL:    return RealValue( value + other->Real64 )
        case TYPE_INTEGER: return IntegerValue( value + other->Int32 )
        #case TYPE_STRING:  return StringValue( value + other->String )
        others:            return IntegerValue( 0 )
      endWhich

    method operator*( other:Value )->Value
      which (other.type)
        case TYPE_REAL:    return RealValue( value * other->Real64 )
        case TYPE_INTEGER: return IntegerValue( value * other->Int32 )
        #case TYPE_STRING:  return StringValue( value * other->String )
        others:            return IntegerValue( 0 )
      endWhich

    method to->Int32
      return value

    method to->Real64
      return value

    method to->String
      return value->String
endClass


class NullValue : Value
  METHODS
    method init
      type = TYPE_NULL

    method to->String
      return "null"
endClass


class ObjectValue : Value
  PROPERTIES
    value : Object

  METHODS
    method init( value )
      type = TYPE_OBJECT

    method to->Object
      return value

    method to->String
      return value->String
endClass


class RealValue : Value
  PROPERTIES
    value : Real64

  METHODS
    method init( value )
      type = TYPE_REAL

    method to->Int32
      return value->Int32

    method to->Real64
      return value

    method to->String
      return value->String
endClass

class TokenType [requisite]
  ENUMERATE
    INVALID
    EOL
    LITERAL_INTEGER
    SYMBOL_PLUS
    SYMBOL_PLUS_EQUALS
    SYMBOL_PLUS_PLUS
    SYMBOL_TIMES
    SYMBOL_TIMES_EQUALS

  GLOBAL PROPERTIES
    type_to_name = Table<<Int32,String>>()

  GLOBAL METHODS
    method init_class
      type_to_name[ EOL ]                 = "\n"
      type_to_name[ LITERAL_INTEGER ]     = "literal integer"
      type_to_name[ SYMBOL_PLUS ]         = "+"
      type_to_name[ SYMBOL_PLUS_EQUALS ]  = "+="
      type_to_name[ SYMBOL_PLUS_PLUS ]    = "++"
      type_to_name[ SYMBOL_TIMES]         = "*"
      type_to_name[ SYMBOL_TIMES_EQUALS ] = "*="

    method display_name( type:Int32 )->String
      which (type)
        case EOL:             return "[end of line]"
        case LITERAL_INTEGER: return "literal integer"
        others:               return "'$'" (type_to_name[type])
      endWhich

    method name( type:Int32 )->String
      local result = type_to_name[ type ]
      if (result) return result
      return "(???)"

endClass

class Token
  PROPERTIES
    filepath : String
    line     : Int32
    column   : Int32
    type     : Int32

  METHODS
    method init( type )

    method error( message:String )->Error
      return Error( this, message )

    method set_info( filepath, line, column )->this
      return this

    method to->Int32
      return 0

    method to->String
      return TokenType.display_name( type )

endClass

class IntegerToken : Token
  PROPERTIES
    value : Int32

  METHODS
    method init( value )
      type = TokenType.LITERAL_INTEGER

    method to->Int32
      return value

    method to->String
      return value->String
endClass

class Parser
  PROPERTIES
    vm          : VM
    task        : Task
    tokens      : Token[]
    token_index : Int32
    token_count : Int32

    commands    = Cmd[]

  METHODS
    method init( task )
      vm = task.vm

    method add( command:Cmd )
      commands.add( command )

    method consume( token_type:Int32 )->Logical
      if (token_index == token_count) return false
      local t = tokens[ token_index ]
      if (t.type != token_type) return false
      ++token_index
      return true

    method consume_eols->Logical
      local found_any = false
      while (consume(TokenType.EOL)) found_any = true
      return found_any

    method error( message:String )->Error
      if (token_index < token_count)
        return tokens[ token_index ].error( message )
      else
        if (token_count == 0) return Token().error( message )
        else                  return tokens.last.error( message )
      endIf

    method has_another->Logical
      return (token_index < token_count)

    method parse( source:String, filepath:String )->Cmd[]
      tokens = Tokenizer( filepath, source ).tokenize
      token_count = tokens.count
      parse_elements
      add( CmdHalt(Token()) )
      return commands

    method parse_elements
      consume_eols
      while (has_another)
        parse_expression
      endWhile

    method parse_expression
      consume_eols
      parse_add_subtract

    method parse_add_subtract
      parse_multiply_divide
      local t = peek
      if (consume(TokenType.SYMBOL_PLUS))
        parse_multiply_divide
        add( CmdAdd(t) )
      endIf

    method parse_multiply_divide
      parse_term
      local t = peek
      if (consume(TokenType.SYMBOL_TIMES))
        parse_term
        add( CmdMultiply(t) )
      endIf

    method parse_term
      local t = read
      which (t.type)
        case TokenType.LITERAL_INTEGER
          commands.add( CmdReadLiteralInteger(t, t->Int32) )
        others
          throw t.error( "Syntax error." )
      endWhich

    method peek( skip=0:Int32 )->Token
      local peek_index = token_index + skip
      if (peek_index >= token_count) return Token( TokenType.INVALID )
      return tokens[ peek_index ]

    method read->Token
      if (token_index == token_count)
        throw error( "Unexpected end of input." )
      endIf
      ++token_index
      return tokens[ token_index - 1 ]
endClass

class Tokenizer
  PROPERTIES
    reader   : ParseReader
    tokens   : Token[]
    filepath : String
    line     : Int32
    column   : Int32

  METHODS
    method init( filepath, source:String )
      reader = ParseReader( source, 2 )

    method add_token( type:Int32 )->Logical
      tokens.add( Token(type).set_info(filepath,line,column) )
      return true

    method add_integer_token( value:Int32 )->Logical
      tokens.add( IntegerToken(value).set_info(filepath,line,column) )
      return true

    method add_real_token( value:Real64 )->Logical
      tokens.add( IntegerToken(value).set_info(filepath,line,column) )
      return true

    method consume( ch:Character )->Logical [macro]
      this.reader.consume( ch )

    method error( message:String )->Error
      return Token().set_info( filepath, line, column ).error( message )

    method tokenize->Token[]
      tokens = Token[]

      while (tokenize_another) noAction

      return tokens

    method tokenize_another->Logical
      reader.consume_spaces

      line = reader.line
      column = reader.column

      if (not reader.has_another) return false

      local ch = reader.peek

      if (ch >= '0' and ch <= '9')
        which (reader.peek(1))
          case 'b': return tokenize_integer_in_base(2)
          case 'c': return tokenize_integer_in_base(8)
          case 'x': return tokenize_integer_in_base(16)
          others:   return tokenize_number
        endWhich

      else
        # Either a symbol or a decimal like ".1".
        if (ch == '.')
          local next = reader.peek(1)
          if (next >= '0' and next <= '9') return tokenize_number
        endIf

        # Symbol
        local token_type = scan_symbol_token_type
        if (token_type == -1) return true  # something else is happening; it's fine
        return add_token( token_type )
      endIf

    method tokenize_integer_in_base( base:Int32 )->Logical
      reader.read  # '0'
      reader.read  # [b,c,x] = [2,8,16]

      local count = 0
      local n = 0
      local digit = reader.peek.to_number( base )
      while (reader.has_another and digit != -1)
        if (digit >= base) throw error( "Digit out of range for base " + base + "." )
        ++count
        n = n * base + digit
        reader.read
        digit = reader.peek.to_number( base )
      endWhile

      if (count == 0) throw error( "One or more digits expected." )

      tokens.add( IntegerToken(TokenType.LITERAL_INTEGER).set_info(filepath,line,column) )
      return true

    method tokenize_number->Logical
      local is_negative = consume('-')

      local i = 0
      while (reader.has_another(i+1) and reader.peek(i).is_number()) ++i
      local ch = reader.peek(i)
      local is_real = ((ch == '.' and reader.peek(i+1).is_number) or ch == 'e' or ch == 'E')

      if (is_real)
        # We have a real number
        local n = scan_real
        ch = reader.peek

        if (ch == '.')
          ch = reader.peek(1)
          if (ch >= '0' and ch <= '9')
            reader.read
            local start_pos = reader.position
            local fraction = scan_real
            n += fraction / 10.0^(reader.position - start_pos)
          elseIf (ch == '.')
            # Start of range
            if (is_negative) n = -n
            return add_integer_token( n->Int32 )
          elseIf ((ch >= 'a' and ch <= 'z') or (ch >= 'A' and ch <= 'Z') or ch == '_')
            # E.g. 5.hash_code is (5).hash_code, not 5.0hashcode
            return add_integer_token( n->Int32 )
          else
            if (is_negative) n = -n
            return add_real_token( n )
          endIf
        endIf

        if (consume('E') or consume('e'))
          local negative_exponent = consume('-')
          if (not negative_exponent) consume('+')
          local power = scan_real
          if (negative_exponent) n /= 10.0^power
          else                   n *= 10.0^power
        endIf

        if (is_negative) n = -n;
        return add_real_token( n )

      else
        # Int32 or Real64
        local n = scan_long
        if (is_negative) n = -n;

        if (n == n->Int32)
          return add_integer_token( n->Int32 )
        else
          return add_real_token( n )
        endIf
      endIf

    method scan_real->Real64
      local n = 0.0
      local ch = reader.peek
      while (ch >= '0' and ch <= '9')
        local intval = reader.read->Int32 - '0'
        n = n * 10 + intval
        ch = reader.peek
      endWhile
      return n

    method scan_long->Int64
      local n = 0 : Int64
      local ch = reader.peek
      while (ch >= '0' and ch <= '9')
        local intval = reader.read->Int32 - '0'
        n = n * 10 + intval
        ch = reader.peek
      endWhile
      return n

    method scan_symbol_token_type->Int32
      local ch = reader.read

      #{
      if (ch == '!')
        if (consume('=')) return TokenType.symbol_ne
        else              return TokenType.symbol_exclamation_point

      elseIf (ch == '$' )
        local id = read_identifier
        which (id)
          case "define":              add_new_token( TokenType.directive_define )
          case "include":             add_new_token( TokenType.directive_include )
          case "includeNativeCode":   add_new_token( TokenType.directive_includeNativeCode )
          case "includeNativeHeader": add_new_token( TokenType.directive_includeNativeHeader )
          case "if":                  add_new_token( TokenType.directive_if )
          case "elseIf":              add_new_token( TokenType.directive_elseIf )
          case "else":                add_new_token( TokenType.directive_else )
          case "endIf":               add_new_token( TokenType.directive_endIf )
          case "module":              add_new_token( TokenType.directive_module )
          case "requisite":           add_new_token( TokenType.directive_requisite )
          case "using":               add_new_token( TokenType.directive_using )
          others
            add_new_token( TokenType.placeholder_id, "$" + id )
        endWhich
        return null

      elseIf (ch == '%')
        if     (consume('=')) return TokenType.symbol_percent_equals
        else                  return TokenType.symbol_percent


      elseIf (ch == '&' )
        if     (consume('&')) throw error( "Use 'and' instead of '&&'." )
        elseIf (consume('=')) return TokenType.symbol_ampersand_equals
        else                  return TokenType.symbol_ampersand

      elseIf (ch == '(')
        return TokenType.symbol_open_paren

      elseIf (ch == ')')
      return TokenType.symbol_close_paren
        }#

      if (ch == '*')
        if     (consume('=')) return TokenType.SYMBOL_TIMES_EQUALS
        else                  return TokenType.SYMBOL_TIMES

      elseIf (ch == '+')
        if     (consume('=')) return TokenType.SYMBOL_PLUS_EQUALS
        elseIf (consume('+')) return TokenType.SYMBOL_PLUS_PLUS
        else                  return TokenType.SYMBOL_PLUS

        #{
      elseIf (ch == ',')
        return TokenType.symbol_comma

      elseIf (ch == '-')
        if     (consume('='))  return TokenType.symbol_minus_equals
        elseIf (consume('-'))  return TokenType.symbol_minus_minus
        elseIf (reader.peek(0) == '>' and reader.peek(1) == '>') return TokenType.symbol_minus
        elseIf (consume('>'))  return TokenType.symbol_arrow
        else                   return TokenType.symbol_minus

      elseIf (ch == '.' )
        if (consume('.'))
          if (consume('.'))
            # ellipsis
            while (consume(' ')) noAction
            if (not consume('\n')) throw error( "End of line expected after '...'." )
            return null 
          elseIf (consume('<'))
            return TokenType.symbol_upToLessThan
          elseIf (consume('>'))
            return TokenType.symbol_downToGreaterThan
          else
            return TokenType.symbol_upTo
          endIf
        elseIf (consume('='))
          return TokenType.symbol_dot_equals
        else
          return TokenType.symbol_dot
        endIf

      elseIf (ch == '/')
        if (consume('='))
          return TokenType.symbol_slash_equals
        else
          return TokenType.symbol_slash
        endIf

      elseIf (ch == ':')
        if (consume(':'))
          add_new_token( TokenType.identifier, "::" + read_identifier )
          return null
        endIf

        if (consume("<<:"))  return TokenType.symbol_shift_left
        elseIf (consume(">>:"))  return TokenType.symbol_shift_right
        elseIf (consume(">>>:")) return TokenType.symbol_shift_right_x
        return TokenType.symbol_colon

      elseIf (ch == ';')
        return TokenType.symbol_semicolon

      elseIf (ch == '<' )
        if     (consume('<')) return TokenType.symbol_open_specialize
        elseIf (consume('=')) return TokenType.symbol_le
        elseIf (consume('>')) return TokenType.symbol_compare
        else                  return TokenType.symbol_lt

      elseIf (ch == '=' )
        if (consume('='))     return TokenType.symbol_eq
        elseIf (consume('>')) return TokenType.symbol_fat_arrow
        else                  return TokenType.symbol_equals

      elseIf (ch == '>' )
        if      (consume('=')) return TokenType.symbol_ge
        elseIf  (consume('>')) return TokenType.symbol_close_specialize
        else                   return TokenType.symbol_gt

      elseIf (ch == '?')
        return TokenType.symbol_question_mark

      elseIf (ch == '@' )
        return TokenType.symbol_at

      elseIf (ch == '[')
        if (consume(']')) return TokenType.symbol_empty_brackets
        return TokenType.symbol_open_bracket

      elseIf (ch == '\\')
        return TokenType.symbol_backslash

      elseIf (ch == ']')
        return TokenType.symbol_close_bracket

      elseIf (ch == '^')
        if     (consume('=')) return TokenType.symbol_caret_equals
        else                  return TokenType.symbol_caret

      elseIf (ch == '{')
        if (consume('}')) return TokenType.symbol_empty_braces
        return TokenType.symbol_open_brace

      elseIf (ch == '|' )
        if     (consume('|')) throw error( "Use 'or' instead of '||'." )
        elseIf (consume('=')) return TokenType.symbol_vertical_bar_equals
        else                  return TokenType.symbol_vertical_bar

      elseIf (ch == '}' )
        if     (consume('#')) return TokenType.symbol_close_comment # used for error reporting
        else                  return TokenType.symbol_close_brace

      elseIf (ch == '~')
        if     (consume('=')) return TokenType.symbol_tilde_equals
        else                  return TokenType.symbol_tilde
      }#

      else
        throw error( "Unexpected input '"+ch+"'." )
      endIf
endClass

class Cmd
  PROPERTIES
    t : Token

  METHODS
    method init( t )

    method execute( task:Task )->Logical
      throw t.error( "No execute() defined for $." (type_name) )
endClass

class CmdHalt : Cmd
  METHODS
    method execute( task:Task )->Logical
    task.status = TaskStatus.FINISHED
    --task.ip  # stay at the HALT
    return false
endClass

class CmdReadLiteralInteger : Cmd
  PROPERTIES
    value : Int32

  METHODS
    method init( t, value )

    method execute( task:Task )->Logical
      task.push( IntegerValue(value) )
      return true
endClass

class CmdAdd : Cmd
  PROPERTIES

  METHODS
    method execute( task:Task )->Logical
      local b = task.pop
      local a = task.pop
      task.push( a + b )
      return true
endClass

class CmdMultiply : Cmd
  PROPERTIES

  METHODS
    method execute( task:Task )->Logical
      local b = task.pop
      local a = task.pop
      task.push( a * b )
      return true
endClass

