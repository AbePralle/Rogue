class Console : Reader<<Character>>, PrintWriter<<output_buffer>> [singleton]
  DEPENDENCIES
    nativeHeader #include <termios.h>
    nativeHeader #include <unistd.h>

  GLOBAL METHODS
    method input( prompt=null:String )->String
      if (prompt) Global.print( prompt ).flush

      native @|char st[4096];
              |fgets( st, 4096, stdin );
              |
              |// discard \n
              |int len = strlen( st );
              |if (len) st[--len] = 0;
              |
              |return RogueString_create_from_utf8( st, len );

  PROPERTIES
    error             = ConsoleErrorPrinter()

    immediate_mode    = false

    output_buffer        = StringBuilder()
    input_buffer         = StringBuilder()
    next_input_character : Int32?

    native "termios original_terminal_settings;"
    native "int     original_stdin_flags;"

  METHODS
    method init
      native @|tcgetattr( STDIN_FILENO, &$this->original_terminal_settings );
              |$this->original_stdin_flags = fcntl( STDIN_FILENO, F_GETFL );

      on_exit( function with (console=this) => console.reset_input_mode )

    method clear
      print( "\e[2J" ).flush

    method clear_to_eol
      print( "\e[K" ).flush

    method has_another->Logical
      if (not next_input_character.exists)
        next_input_character = native( "(RogueInt32)getc(stdin)" )->Int32
        if (next_input_character.value == -1)
          native @|clearerr( stdin );
          next_input_character = null
        endIf
      endIf
      return next_input_character.exists

    method height->Int32
      nativeHeader #include <sys/ioctl.h>
      nativeHeader #include <unistd.h>

      native @|struct winsize sz;
              |ioctl( STDOUT_FILENO, TIOCGWINSZ, &sz );
              |
              |return sz.ws_row;

    method move_cursor( dx:Int32, dy:Int32 )
      if (dx)
        if (dx > 0) print( "\e[" ).print(  dx ).print( 'C' )
        else        print( "\e[" ).print( -dx ).print( 'D' )
      endIf
      if (dy)
        if (dy > 0) print( "\e[" ).print(  dy ).print( 'B' )
        else        print( "\e[" ).print( -dy ).print( 'A' )
      endIf
      Global.flush

    method peek->Character
      if (has_another) return next_input_character.value
      else             return 0

    method read->Character
      if (not has_another) return 0
      local result = next_input_character.value
      next_input_character = null
      return result

    method read_line->String
      input_buffer.clear
      forEach (byte in this)
        if (byte == 10) escapeForEach
        input_buffer.write( byte )
      endForEach
      return input_buffer->String

    method read_line( prompt:String )->String
      write prompt
      return read_line

    method read_line( prompt:StringBuilder )->String
      write prompt
      return read_line

    method reset_input_mode
      native @|tcsetattr( STDIN_FILENO, TCSANOW, &$this->original_terminal_settings );
              |fcntl( STDIN_FILENO, F_SETFL, $this->original_stdin_flags );

    method restore_cursor_position
      print( "\e[u" ).flush

    method save_cursor_position
      print( "\e[s" ).flush

    method set_cursor( x:Int32, y:Int32 )
      print( "\e[" ).print( y ).print( ';' ).print( x ).print( 'H' ).flush

    method set_immediate_mode( setting:Logical )->this
      if (@immediate_mode != setting)
        @immediate_mode = setting
        if (@immediate_mode)
          # Turn off blocking and line buffering
          native @|termios new_settings;
                  |tcgetattr( STDIN_FILENO, &new_settings );
                  |new_settings.c_lflag &= ~(ECHO | ECHOE | ICANON);
                  |new_settings.c_cc[VMIN] = 0;
                  |new_settings.c_cc[VTIME] = 0;
                  |tcsetattr( STDIN_FILENO, TCSANOW, &new_settings );
                  |fcntl( STDIN_FILENO, F_SETFL, O_NONBLOCK );
        else
          # Restore original settings
          reset_input_mode
        endIf
      endIf
      return this

    method width->Int32
      nativeHeader #include <sys/ioctl.h>
      nativeHeader #include <unistd.h>

      native @|struct winsize sz;
              |ioctl( STDOUT_FILENO, TIOCGWINSZ, &sz );
              |
              |return sz.ws_col;

    method write( value:String )->this
      native @|fwrite( $value->utf8, 1, $value->byte_count, stdout );
              |fflush( stdout );
      return this

    method write( buffer:StringBuilder )->this
      native @|fwrite( $buffer->utf8->data->as_bytes, 1, $buffer->utf8->count, stdout );
      return this

endClass

class ConsoleErrorPrinter : PrintWriter<<output_buffer>>
  PROPERTIES
    output_buffer = StringBuilder()

  METHODS
    method write( value:String )->this
      native @|fwrite( $value->utf8, 1, $value->byte_count, stderr );
              |fflush( stderr );
      return this

    method write( buffer:StringBuilder )->this
      native @|fwrite( $buffer->utf8->data->as_bytes, 1, $buffer->utf8->count, stderr );
              |fflush( stderr );
      return this

endClass

