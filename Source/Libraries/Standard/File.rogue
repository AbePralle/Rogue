class File
  ROUTINES
    routine absolute_filepath( filepath:String )->String [native]

    routine exists( filepath:String )->Logical [native]

    routine filename( filepath:String )->String
      local i = filepath.last_index_of( '/' )
      if (not i?) i = filepath.last_index_of( '\\' )
      if (not i?) return filepath
      return filepath.substring( i.value+1 )

    routine is_folder( filepath:String )->Logical  [native]

    routine load_as_bytes( filepath:String )->Byte[]
      local count = size( filepath )
      local bytes = Byte[]( count )
      local infile = reader( filepath )
      forEach (1..count) bytes.add( infile.read )
      infile.close
      return bytes

    routine load_as_string( filepath:String )->String [native]

    routine path( filepath:String )->String
      local i = filepath.last_index_of( '/' )
      if (not i?) i = filepath.last_index_of( '\\' )
      if (not i?) return ""
      return filepath.substring( 0, i!-1 )

    routine reader( filepath:String )->FileReader
      return FileReader( filepath )

    routine save( filepath:String, data:String )->Logical [native]

    routine size( filepath:String )->Integer [native]

    routine writer( filepath:String )->FileWriter
      return FileWriter( filepath )

  PROPERTIES
    filepath : String

  METHODS
    method init( filepath )

    method absolute_filepath->String
      inline File.absolute_filepath( this.filepath )

    method exists->Logical
      inline File.exists( this.filepath )

    method filename->String
      return filename( filepath )

    method is_folder->Logical
      inline File.is_folder( this.filepath )

    method load_as_bytes->Byte[]
      inline File.load_as_bytes( this.filepath )

    method load_as_string->String
      inline File.load_as_string( this.filepath )

    method path->String
      inline File.path( this.filepath )

    method reader->FileReader
      inline File.reader( this.filepath )

    method save( data:String )->Logical
      inline File.save( this.filepath, data )

    method size->Integer
      inline File.size( this.filepath )

    method writer->FileWriter
      inline File.writer( this.filepath )

    method to->String
      return filepath
endClass

class FileReader : Reader<<Character>> [native]
  ROUTINES
    routine create( filepath:String )->this [native]
    
  METHODS
    method close->FileReader [native]

    method count->Integer [native]

    method has_another->Logical [native]

    method open( filepath:String )->Logical [native]

    method peek->Character [native]

    method position->Integer [native]

    method read->Character [native]

    method remaining->Integer
      return count - position

    method set_position( new_position:Integer )->this [native]
endClass

class FileWriter [native]
  ROUTINES
    routine create( filepath:String )->this [native]
    
  METHODS
    method close->FileWriter [native]

    method count->Integer [native]

    method flush->FileWriter [native]

    method open( filepath:String )->Logical [native]

    method write( ch:Character )->this [native]
endClass

