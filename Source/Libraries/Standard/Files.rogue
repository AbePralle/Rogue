class Files
  # Manages a set of filepath strings.
  PROPERTIES
    base_folder : String
    filepaths   = StringLookupList()

  METHODS
    method init( base_folder:String )
      if (base_folder == "") base_folder = "./"
      base_folder = File.expand_filepath( base_folder )
      this.base_folder = File.fix_slashes( File.ensure_ends_with_separator( base_folder ) )
      if (this.base_folder.begins_with("./") and this.base_folder.count > 2)
        this.base_folder = this.base_folder.rightmost( -2 )
      endIf

    method init( base_folder:String, pattern:FilePattern, &ignore_hidden=true, &include_folders )
      init( File.fix_slashes(base_folder) )
      add( pattern, &=ignore_hidden, &=include_folders )

    method init( base_folder:String, pattern:String, &ignore_hidden=true, &include_folders )
      init( File.fix_slashes(base_folder) )
      add( pattern, &=ignore_hidden, &=include_folders )

    method add( pattern:FilePattern, &ignore_hidden=true, &include_folders )->this
      return add( pattern->String, &=ignore_hidden, &=include_folders )

    method add( pattern:String, &ignore_hidden=true, &include_folders )->this
      local target = base_folder+pattern
      if (File.exists(target) and not File.is_folder(target))
        filepaths.add( target )
      else
        forEach (listing_filepath in File.listing(base_folder,FilePattern(pattern),&=ignore_hidden))
          if (not filepaths.contains(listing_filepath))
            if (include_folders or not File.is_folder(listing_filepath))
              filepaths.add( listing_filepath )
            endIf
          endIf
        endForEach
      endIf

      return this

    method any_newer_than( filepath:String )->Logical
      if (not File.exists(filepath)) return true
      local timestamp = newest_timestamp
      if (not timestamp.exists) return false
      return (timestamp.value > File.timestamp(filepath))

    method contains( filepath:String )->Logical
      return filepaths.contains( filepath )

    method copy( to_folder:String )
      File.create_folder( to_folder )
      to_folder += File.separator
      forEach (filepath in filepaths)
        local to_filepath = to_folder + relative_filepath(filepath)
        File.copy( filepath, to_filepath )
      endForEach

    method copy_newer( to_folder:String )
      File.create_folder( to_folder )
      to_folder += File.separator
      forEach (filepath in filepaths)
        local to_filepath = to_folder + relative_filepath(filepath)
        File.copy_newer( filepath, to_filepath )
      endForEach

    method count->Int32
      return filepaths.count

    method get( index:Int32 )->String
      return filepaths[ index ]

    method newest_timestamp->Real64?
      local result : Real64?
      forEach (filepath in filepaths)
        if (File.exists(filepath))
          local timestamp = File.timestamp( filepath )
          if (not result.exists or timestamp > result.value) result = timestamp
        endIf
      endForEach
      return result

    method oldest_timestamp->Real64?
      local result : Real64?
      forEach (filepath in filepaths)
        if (File.exists(filepath))
          local timestamp = File.timestamp( filepath )
          if (not result.exists or timestamp < result.value) result = timestamp
        endIf
      endForEach
      return result

    method relative_filepath( filepath:String )->String
      if (base_folder.count == 0) return filepath
      return filepath.after_any( base_folder )

    method remove( pattern:String )->this
      if (pattern.contains('*') or pattern.contains('?'))
        forEach (filepath at index in filepaths step -1)
          if (File.matches_wildcard_pattern(filepath,pattern))
            filepaths.remove_at( index )
          endIf
        endForEach
      else
        filepaths.remove( pattern )
      endIf
      return this

    method remove( files:Files )->this
      forEach (filepath in files)
        filepaths.remove( filepath )
      endForEach
      return this

    method to->String
      return filepaths->String[]

    method to->String[]
      return filepaths->String[]
endClass
