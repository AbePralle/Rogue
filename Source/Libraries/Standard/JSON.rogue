class JSON
  GLOBAL PROPERTIES
    buffer = StringBuilder()

  GLOBAL METHODS
    method parse( json:String )->PropertyValue
      return parse_value( ParseReader(json) )

    method parse_list( json:String )->PropertyList
      local list = parse(json) as PropertyList
      if (list) return list
      return PropertyList()

    method parse_table( json:String )->PropertyTable
      local table = parse(json) as PropertyTable
      if (table) return table
      return PropertyTable()

    method parse_value( reader:ParseReader )->PropertyValue
      consume_spaces_and_eols( reader )

      local ch = reader.peek
      if (ch == '{') return parse_table( reader )
      if (ch == '[') return parse_list( reader )

      if (ch == '-')               return parse_number( reader )
      if (ch >= '0' and ch <= '9') return parse_number( reader )

      if (ch == '"' or ch == '\'')
        local result = parse_string( reader )
        if (result.count == 0) return StringProperty.empty_string

        local first_ch = result[ 0 ]
        if (first_ch == 't' and result == "true")  return LogicalProperty.true_value
        if (first_ch == 'f' and result == "false") return LogicalProperty.false_value
        if (first_ch == 'n' and result == "null")  return null

        return StringProperty( result )

      elseIf ((ch >= 'a' and ch <= 'z') or (ch >= 'A' and ch <= 'Z') or (ch == '_' or ch == '$'))
        local result = parse_identifier( reader )
        if (result.count == 0) return StringProperty.empty_string

        local first_ch = result[ 0 ]
        if (first_ch == 't' and result == "true")  return LogicalProperty.true_value
        if (first_ch == 'f' and result == "false") return LogicalProperty.false_value
        if (first_ch == 'n' and result == "null")  return null

        return StringProperty( result )
      else
        return null
      endIf

    method parse_table( reader:ParseReader )->PropertyTable
      consume_spaces_and_eols( reader )

      if (not reader.consume('{')) return null

      consume_spaces_and_eols( reader )

      local table = PropertyTable()
      if (reader.consume('}')) return table

      local first = true
      while (first or reader.consume( ',' ))
        first = false

        consume_spaces_and_eols( reader )

        local key = parse_identifier( reader )
        consume_spaces_and_eols( reader )

        if (reader.consume(':'))
          consume_spaces_and_eols( reader )
          local value = parse_value( reader )
          table.set( key, value )
        else
          table.set( key, true )
        endIf

        consume_spaces_and_eols( reader )
      endWhile

      if (not reader.consume('}')) return null

      return table

    method parse_list( reader:ParseReader )->PropertyList
      consume_spaces_and_eols( reader )

      if (not reader.consume('[')) return null

      consume_spaces_and_eols( reader )

      local list = PropertyList()
      if (reader.consume(']')) return list

      local first = true
      while (first or reader.consume(','))
        first = false
        consume_spaces_and_eols( reader )
        list.add( parse_value( reader ) )
        consume_spaces_and_eols( reader )
      endWhile

      if (not reader.consume(']')) return null

      return list

    method parse_string( reader:ParseReader )->String
      consume_spaces_and_eols( reader )

      local terminator = '"'
      if     (reader.consume( '"' ))  terminator = '"'
      elseIf (reader.consume( '\'' )) terminator = '\''

      if (not reader.has_another) return ""

      buffer.clear
      local ch = reader.read
      while (reader.has_another and ch != terminator)
        if (ch == '\\')
          ch = reader.read
          if (ch == 'b')     buffer.print( '\b' )
          elseIf (ch == 'f') buffer.print( '\f' )
          elseIf (ch == 'n') buffer.print( '\n' )
          elseIf (ch == 'r') buffer.print( '\r' )
          elseIf (ch == 't') buffer.print( '\t' )
          elseIf (ch == 'u') println "parsing hex quad"; buffer.print( parse_hex_quad( reader ) )
          else               buffer.print( ch )
        else
          buffer.print( ch )
        endIf
        ch = reader.read
      endWhile

      return buffer->String

    method hex_character_to_value( ch:Character )->Int32 [macro]
      ch.to_number

    method parse_hex_quad( reader:ParseReader )->Character
      local code = 0
      forEach (i in 1..4)
        if (reader.has_another)
          code = (code :<<: 4) | hex_character_to_value( reader.read )
        endIf
      endForEach
      return code->Character

    method parse_identifier( reader:ParseReader )->String
      consume_spaces_and_eols( reader )

      local ch = reader.peek
      if (ch == '"' or ch == '\'')
        return parse_string( reader )
      else
        buffer.clear
        local finished = false
        while (not finished and reader.has_another)
          if ((ch >= 'a' and ch <= 'z') or (ch >= 'A' and ch <= 'Z') or ch == '_' or ch == '$')
            reader.read
            buffer.print( ch->Character )
            ch = reader.peek
          else
            finished = true
          endIf
        endWhile

        return buffer->String
      endIf

    method parse_number( reader:ParseReader )->PropertyValue
      consume_spaces_and_eols( reader )

      local sign = 1.0
      if (reader.consume( '-' ))
        sign = -1.0
        consume_spaces_and_eols( reader )
      endIf

      local n = 0.0
      local ch = reader.peek
      while (reader.has_another and ch >= '0' and ch <= '9')
        reader.read
        n = n * 10 + (ch - '0')
        ch = reader.peek
      endWhile

      local is_real = false

      if (reader.consume( '.' ))
        is_real = true
        local decimal = 0.0
        local power = 0.0
        ch = reader.peek
        while (reader.has_another and ch >= '0' and ch <= '9')
          reader.read
          decimal = decimal * 10 + (ch - '0')
          power += 1.0
          ch = reader.peek
        endWhile
        n += decimal / (10.0 ^ power)
      endIf

      if (reader.consume( 'e' ) or reader.consume( 'E' ))
        local negexp = false
        if (not reader.consume('+') and reader.consume('-')) negexp = true

        local power = 0.0
        ch = reader.peek
        while (reader.has_another and ch >= '0' and ch <= '9')
          reader.read
          power = power * 10.0 + (ch - '0')
          ch = reader.peek
        endWhile

        if (negexp) n /= 10 ^ power
        else        n *= 10 ^ power
      endIf

      n = n * sign

      if (is_real or n != n->Int32) return Real64Property( n )
      return Int32Property( n->Int32 )

    method consume_spaces_and_eols( reader:ParseReader )->ParseReader
      while (reader.consume_spaces or reader.consume_eols) noAction
      return reader

endClass

