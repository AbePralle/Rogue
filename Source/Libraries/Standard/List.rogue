class GenericList
endClass

class List<<$DataType:Object>> : GenericList
  PROPERTIES
    data  : Array<<$DataType>>
    count : Integer

  METHODS
    method init
      init( 10 )

    method init( initial_capacity:Integer )
      data = Array<<$DataType>>( initial_capacity )

    method init( initial_capacity:Integer, initial_value:$DataType )
      data = Array<<$DataType>>( initial_capacity )
      forEach (i in 1..initial_capacity) add( initial_value )

    method clone->$DataType[]
      local result = $DataType[]( count )
      forEach (value in this)
        result.add( value )
      endForEach
      return result

    method contains( value:$DataType )->Logical
      inline ListOps<<$DataType>>.contains( this, value )

    method add( value:$DataType )->$DataType[]
      reserve(1)[count] = value
      ++count
      return this

    method add( other:$DataType[] )->$DataType[]
      reserve(other.count)
      forEach (value in other) add( value )
      return this

    method capacity->Integer
      if (not data) return 0
      return data.count

    method clear->$DataType[]
      count = 0
      return this

    method first->$DataType
      inline this.data[0]

    method get( index:Integer )->$DataType
      inline this.data[index]

    method insert( value:$DataType, before_index=0:Integer )->this
      if (before_index < 0) before_index = 0

      if (before_index >= count)
        return add( value )
      else
        # Create a dummy spot at the end to size the array and update the count
        add( first )

        # Shift everything over
        data.set( before_index+1, data, before_index, count-2 )

        # Copy in the new value
        data[ before_index ] = value
      endIf
      return this

    method last->$DataType
      return this.data[ count - 1 ]

    method index_of( value:$DataType )->Integer?
      inline ListOps<<$DataType>>.index_of( this, value )

    method last_index_of( value:$DataType )->Integer?
      inline ListOps<<$DataType>>.last_index_of( this, value )

    method random->$DataType
      # Returns an element at random
      local default_value : $DataType
      if (not count) return default_value

      return this[ Random.next_integer(this.count) ]

    method reserve( additional_count:Integer )->$DataType[]
      local required_capacity = count + additional_count

      if (not data)
        data = Array<<$DataType>>( 10 )
      elseIf (required_capacity > data.count)
        local x2 = capacity + capacity
        if (required_capacity < x2) required_capacity = x2 
        local new_data = Array<<$DataType>>( required_capacity )
        new_data.set( 0, data )
        data = new_data
      endIf

      return this

    method remove( value:$DataType )->$DataType
      local index = index_of( value )
      if (index)
        return remove_at( index! )
      else
        local zero_value : $DataType
        return zero_value
      endIf

    method remove_at( index:Integer )->$DataType
      local result = this[ index ]
      data.set( index, data, index+1 )
      local zero_value : $DataType
      data[count] = zero_value
      --count
      return result

    method remove_first->$DataType
      inline this.remove_at(0)

    method remove_last->$DataType
      return remove_at( count - 1 )

    method set( index:Integer, new_value:$DataType )->$DataType[]
      inline this.data[ index ] = new_value

    method to->String
      local buffer = "["
      local first = true
      forEach (value in this)
        if (first) first = false
        else       buffer += ","
        buffer += value
      endForEach
      buffer += "]"
      return buffer
endClass


class ListOps<<$DataType>>
  ROUTINES
    routine contains( list:$DataType[], value:$DataType )->Logical
      return index_of( list, value )?

    routine index_of( list:$DataType[], value:$DataType )->Integer?
      forEach (i of list)
        if (value == list[i]) return i
      endForEach
      return null

    routine last_index_of( list:$DataType[], value:$DataType )->Integer?
      forEach (i of list step -1)
        if (value == list[i]) return i
      endForEach
      return null
endClass

