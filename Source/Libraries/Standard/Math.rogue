class Math
  ROUTINES
    routine acos( n:Real )->Real
      $if ("C++") macro native 'acos((double)$n)'

    routine asin( n:Real )->Real
      $if ("C++") macro native 'asin((double)$n)'

    routine atan( n:Real )->Real
      $if ("C++") macro native 'atan((double)$n)'

    routine atan2( y:Real, x:Real )->Real
      $if ("C++") macro native 'atan2((double)$y,(double)$x)'

    routine ceil( n:Real )->Real
      $if ("C++") macro native 'ceil((double)$n)'

    routine cos( n:Real )->Real
      $if ("C++") macro native 'cos((double)$n)'

    routine exp( n:Real )->Real
      $if ("C++") macro native 'exp((double)$n)'

    routine floor( n:Real )->Real
      $if ("C++") macro native 'floor((double)$n)'

    routine log( n:Real )->Real
      $if ("C++") macro native 'log((double)$n)'

    routine log2( n:Real )->Real
      $if ("C++") macro native 'log2((double)$n)'

    routine log10( n:Real )->Real
      $if ("C++") macro native 'log10((double)$n)'

    routine mod( a:Integer, b:Integer )->Integer
      if ((not a and not b) or b == 1) return 0

      local r = native("$a % $b")->Integer
      if ((a ~ b) < 0)
        if (r) return r + b
        else   return 0
      else
        return r
      endIf

    routine mod( a:Long, b:Long )->Long
      if ((not a and not b) or b == 1) return 0

      local r = native("$a % $b")->Integer
      if ((a ~ b) < 0)
        if (r) return r + b
        else   return 0
      else
        return r
      endIf

    routine mod( a:Real, b:Real )->Real
      local q = a / b
      return a - floor(q)*b

    routine sin( n:Real )->Real
      $if ("C++") macro native 'sin((double)$n)'

    routine sqrt( n:Real )->Real
      $if ("C++") macro native 'sqrt((double)$n)'

    routine tan( n:Real )->Real
      $if ("C++") macro native 'tan((double)$n)'
endClass


class Degrees( value:Real ) [compound]
  ROUTINES
    routine create( degrees:Radians )->Degrees
      return Degrees( (degrees.value / pi) * 180.0 )

  METHODS
    method cos->Real
      macro Math.cos( (this.value / 180.0) * pi )

    method sin->Real
      macro Math.sin( (this.value / 180.0) * pi )

    method tan->Real
      macro Math.sin( (this.value / 180.0) * pi )

    method to->String
      return "" + value
endClass

class Radians( value:Real ) [compound]
  ROUTINES
    routine create( degrees:Degrees )->Radians
      return Radians( (degrees.value / 180.0) * pi )

  METHODS
    method cos->Real
      macro Math.cos( this.value )

    method sin->Real
      macro Math.sin( this.value )

    method tan->Real
      macro Math.tan( this.value )

    method to->String
      return "" + value
endClass


