class Math
  GLOBAL METHODS
    $if ("C++")
    method acos( n:Real64 )->Real64 [macro]
      native 'acos((double)$n)'

    method asin( n:Real64 )->Real64 [macro]
      native 'asin((double)$n)'

    method atan( n:Real64 )->Real64 [macro]
      native 'atan((double)$n)'

    method atan2( y:Real64, x:Real64 )->Real64 [macro]
      native 'atan2((double)$y,(double)$x)'

    method ceil( n:Real64 )->Real64 [macro]
      native 'ceil((double)$n)'

    method cos( n:Real64 )->Real64 [macro]
      native 'cos((double)$n)'

    method exp( n:Real64 )->Real64 [macro]
      native 'exp((double)$n)'

    method floor( n:Real64 )->Real64 [macro]
      native 'floor((double)$n)'

    method log( n:Real64 )->Real64 [macro]
      native 'log((double)$n)'

    method log2( n:Real64 )->Real64 [macro]
      native 'log2((double)$n)'

    method log10( n:Real64 )->Real64 [macro]
      native 'log10((double)$n)'

    method sin( n:Real64 )->Real64 [macro]
      native 'sin((double)$n)'

    method sqrt( n:Real64 )->Real64 [macro]
      native 'sqrt((double)$n)'

    method tan( n:Real64 )->Real64 [macro]
      native 'tan((double)$n)'

    $endIf

    method abs( n:Real64 )->Real64
      if (n >= 0) return  n
      else        return -n

    method abs( n:Int64 )->Int64
      if (n >= 0) return  n
      else        return -n

    method abs( n:Int32 )->Int32
      if (n >= 0) return  n
      else        return -n


    method max( a:Int32, b:Int32 )->Int32
      if (a >= b) return a
      else        return b

    method max( a:Real64, b:Real64 )->Real64
      if (a >= b) return a
      else        return b

    method min( a:Int32, b:Int32 )->Int32
      if (a <= b) return a
      else        return b

    method min( a:Real64, b:Real64 )->Real64
      if (a <= b) return a
      else        return b

    method mod( a:Int32, b:Int32 )->Int32
      if ((not a and not b) or b == 1) return 0

      local r = native("$a % $b")->Int32
      if ((a ~ b) < 0)
        if (r) return r + b
        else   return 0
      else
        return r
      endIf

    method mod( a:Int64, b:Int64 )->Int64
      if ((not a and not b) or b == 1) return 0

      local r = native("$a % $b")->Int64
      if ((a ~ b) < 0)
        if (r) return r + b
        else   return 0
      else
        return r
      endIf

    method mod( a:Real64, b:Real64 )->Real64
      local q = a / b
      return a - floor(q)*b

    method shift_right( value:Int32, bits:Int32 )->Int32
      if (bits <= 0) return value

      --bits
      if (bits) return ((value :>>>: 1) & 0x7fffFFFF) :>>>: bits
      else      return (value :>>>: 1) & 0x7fffFFFF

    method shift_right( value:Int64, bits:Int64 )->Int64
      if (bits <= 0) return value

      --bits
      if (bits) return ((value :>>>: 1) & 0x7fffFFFFffffFFFF) :>>>: bits
      else      return (value :>>>: 1) & 0x7fffFFFFffffFFFF
endClass


class Degrees( value:Real64 ) [compound]
  GLOBAL METHODS
    method create( degrees:Radians )->Degrees
      return Degrees( (degrees.value / pi) * 180.0 )

  METHODS
    method cos->Real64 [macro]
      Math.cos( (this.value / 180.0) * pi )

    method sin->Real64 [macro]
      Math.sin( (this.value / 180.0) * pi )

    method tan->Real64 [macro]
      Math.sin( (this.value / 180.0) * pi )

    method to->String
      return "" + value
endClass

class Radians( value:Real64 ) [compound]
  GLOBAL METHODS
    method create( degrees:Degrees )->Radians
      return Radians( (degrees.value / 180.0) * pi )

  METHODS
    method cos->Real64 [macro]
      Math.cos( this.value )

    method sin->Real64 [macro]
      Math.sin( this.value )

    method tan->Real64 [macro]
      Math.tan( this.value )

    method to->String
      return "" + value
endClass


