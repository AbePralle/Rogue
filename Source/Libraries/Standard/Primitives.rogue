class Real [primitive]
  GLOBAL METHODS
    method create( bits:Long )->Real
      $if ("C++")
        native "return *((RogueReal*)&$bits);"
      $endIf

  METHODS
    method clamped( low:Real, high:Real )->Real
      if (this < low)  return low
      if (this > high) return high
      return this

    method hash_code->Integer
      return Long(this)->Integer

    method to->Object
      return Boxed<<Real>>(this)

    method to->String
      return "" + this

endClass

class Float [primitive]
  METHODS
    method clamped( low:Float, high:Float )->Float
      if (this < low)  return low
      if (this > high) return high
      return this

    method to->Object
      return Boxed<<Float>>(this)
endClass

class Long [primitive]
  GLOBAL METHODS
    method create( bit_source:Real )->Long
      $if ("C++")
        native "return *((RogueLong*)&$bit_source);"
      $endIf

  METHODS
    method clamped( low:Long, high:Long )->Long
      if (this < low)  return low
      if (this > high) return high
      return this

    method hash_code->Integer
      return this

    method print_in_power2_base( base:Integer, digits=16:Integer, buffer:StringBuilder )->StringBuilder
      local bits = 0
      local temp = base
      while (temp > 1) ++bits; temp = temp:>>>:1

      if (digits > 1) (this:>>>:bits).print_in_power2_base( base, digits-1, buffer )
      buffer.print( (this & (base-1)).to_digit )
      return buffer

    method to->Object
      return Boxed<<Long>>(this)

    method to->String
      return StringBuilder().print( this )->String

    method to_digit->Character [macro]
      (this->Integer).to_digit

    method to_binary_string( digits=64:Integer )->String
      return print_in_power2_base( 2, digits, StringBuilder() )->String

    method to_hex_string( digits=16:Integer )->String
      return print_in_power2_base( 16, digits, StringBuilder() )->String

    method to_octal_string( digits=22:Integer )->String
      return print_in_power2_base( 8, digits, StringBuilder() )->String

endClass

class Integer [primitive]
  METHODS
    method clamped( low:Integer, high:Integer )->Integer
      if (this < low)  return low
      if (this > high) return high
      return this

    method hash_code->Integer
      return this

    method to->Long [macro]
      $if ("C++") native "((RogueLong)$this)"

    method to->Object
      return Boxed<<Integer>>(this)

    method to->String
      return "" + this

    method to_digit->Character
      if (this >= 0 and this <= 9)   return (this + '0')->Character
      if (this >= 10 and this <= 35) return ((this - 10) + ('A'))->Character
      return '0'

    method to_binary_string( digits=32:Integer )->String
      return (this->Long).print_in_power2_base( 2, digits, StringBuilder() )->String

    method to_hex_string( digits=8:Integer )->String
      return (this->Long).print_in_power2_base( 16, digits, StringBuilder() )->String

    method to_octal_string( digits=11:Integer )->String
      return (this->Long).print_in_power2_base( 8, digits, StringBuilder() )->String
endClass

class Character [primitive]
  METHODS
    method clamped( low:Character, high:Character )->Character
      if (this < low)  return low
      if (this > high) return high
      return this

    method hash_code->Integer
      return this->Integer

    method is_alphanumeric->Logical
      return (this >= '0' and this <= '9') or
             (this >= 'a' and this <= 'z') or
             (this >= 'A' and this <= 'Z')

    method is_identifier->Logical
      return (this >= '0' and this <= '9') or
             (this >= 'a' and this <= 'z') or
             (this >= 'A' and this <= 'Z') or
             (this == '_')

    method is_letter->Logical
      return (this >= 'a' and this <= 'z') or
             (this >= 'A' and this <= 'Z')

    method is_number( base=10:Integer )->Logical
      return to_number(base) != -1

    method to->Object
      return Boxed<<Character>>(this)

    method to->String
      return "" + this

    method to_binary_string( digits=16:Integer )->String
      return (this->Long).print_in_power2_base( 2, digits, StringBuilder() )->String

    method to_hex_string( digits=4:Integer )->String
      return (this->Long).print_in_power2_base( 16, digits, StringBuilder() )->String

    method to_octal_string( digits=6:Integer )->String
      return (this->Long).print_in_power2_base( 8, digits, StringBuilder() )->String

    method to_number( base=10:Integer )->Integer
      if (this >= '0' and this < '0'+base)      return (this - '0')
      if (this >= 'a' and this < 'a'+(base-10)) return (this - 'a') + 10
      if (this >= 'A' and this < 'A'+(base-10)) return (this - 'A') + 10
      return -1
endClass

class Byte [primitive]
  METHODS
    method clamped( low:Byte, high:Byte )->Byte
      if (this < low)  return low
      if (this > high) return high
      return this

    method hash_code->Integer
      return this->Integer

    method to->Object
      return Boxed<<Byte>>(this)

    method to->String
      return "" + this

    method to_binary_string( digits=8:Integer )->String
      return (this->Long).print_in_power2_base( 2, digits, StringBuilder() )->String

    method to_hex_string( digits=2:Integer )->String
      return (this->Long).print_in_power2_base( 16, digits, StringBuilder() )->String

    method to_octal_string( digits=3:Integer )->String
      return (this->Long).print_in_power2_base( 8, digits, StringBuilder() )->String
endClass

class Logical [primitive]
  METHODS
    method hash_code->Integer
      if (this) return 1
      else      return 0

    method to->Object
      return Boxed<<Logical>>(this)

    method to->String
      return "" + this
endClass

