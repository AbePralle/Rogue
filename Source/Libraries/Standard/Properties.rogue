class PropertyValue
  ROUTINES
    routine create( value:Integer )->PropertyValue
      return IntegerProperty( value )

    routine create( value:Logical )->PropertyValue
      return LogicalProperty( value )

    routine create( value:Real )->PropertyValue
      return RealProperty( value )

    routine create( value:String )->PropertyValue
      return StringProperty( value )

  METHODS
    method add( value:Integer )->PropertyValue [macro]
      this.add( PropertyValue(value) )

    method add( value:Logical )->PropertyValue [macro]
      this.add( PropertyValue(value) )

    method add( value:Real )->PropertyValue [macro]
      this.add( PropertyValue(value) )

    method add( value:String )->PropertyValue [macro]
      this.add( PropertyValue(value) )

    method add( value:PropertyValue )->PropertyValue
      return this

    method add( other:PropertyValue[] )->PropertyValue
      return this

    method clear->PropertyValue
      return this

    method first->PropertyValue
      return null

    method get( index:Integer )->PropertyValue
      return null

    method get( key:String )->PropertyValue
      return null

    method get_integer( index:Integer )->Integer
      local value = get( index )
      if (not value) return 0
      return value->Integer

    method get_logical( index:Integer )->Logical
      local value = get( index )
      if (not value) return false
      return value->Logical

    method get_real( index:Integer )->Real
      local value = get( index )
      if (not value) return 0.0
      return value->Real

    method get_string( index:Integer )->String
      local value = get( index )
      if (not value) return ""
      return value->String

    method get_integer( key:String )->Integer
      local value = get( key )
      if (not value) return 0
      return value->Integer

    method get_logical( key:String )->Logical
      local value = get( key )
      if (not value) return false
      return value->Logical

    method get_real( key:String )->Real
      local value = get( key )
      if (not value) return 0.0
      return value->Real

    method get_string( key:String )->String
      local value = get( key )
      if (not value) return ""
      return value->String

    method last->PropertyValue
      return null

    method remove( value:PropertyValue )->PropertyValue
      return null

    method remove_at( index:Integer )->PropertyValue
      return null

    method remove_first->PropertyValue
      return null

    method remove_last->PropertyValue
      return null

    method save( file:File )
      file.save( to_json.to_utf8 )

    method set( index:Integer, value:Integer )->PropertyValue [macro]
      this.set( index, PropertyValue(value) )

    method set( index:Integer, value:Logical )->PropertyValue [macro]
      this.set( index, PropertyValue(value) )

    method set( index:Integer, value:Real )->PropertyValue [macro]
      this.set( index, PropertyValue(value) )

    method set( index:Integer, value:String )->PropertyValue [macro]
      this.set( index, PropertyValue(value) )

    method set( index:Integer, value:PropertyValue )->PropertyValue
      return this

    method set( key:String, value:Integer )->PropertyValue [macro]
      this.set( key, PropertyValue(value) )

    method set( key:String, value:Logical )->PropertyValue [macro]
      this.set( key, PropertyValue(value) )

    method set( key:String, value:Real )->PropertyValue [macro]
      this.set( key, PropertyValue(value) )

    method set( key:String, value:String )->PropertyValue [macro]
      this.set( key, PropertyValue(value) )

    method set( key:String, value:PropertyValue )->PropertyValue
      return this

    method to->Integer
      return 0

    method to->Logical
      return (this->Integer)

    method to->Real
      return this->Integer->Real

    method to_json->String
      return to_json( StringBuilder() )->String

    method to_json( buffer:StringBuilder )->StringBuilder
      return buffer
endClass

class IntegerProperty( value:Integer ) : PropertyValue
  METHODS
    method to->Integer
      return value

    method to->String
      return value->String

    method to_json( buffer:StringBuilder )->StringBuilder
      buffer.print( value )
      return buffer
endClass

class LogicalProperty( value:Logical ) : PropertyValue
  GLOBALS
    true_value  = LogicalProperty( true )
    false_value = LogicalProperty( false )

  METHODS
    method to->Integer
      if (value) return 1
      else       return 0

    method to->Logical
      return value

    method to->String
      return value->String

    method to_json( buffer:StringBuilder )->StringBuilder
      buffer.print( value )
      return buffer
endClass

class RealProperty( value:Real ) : PropertyValue
  METHODS
    method to->Integer
      return value

    method to->Real
      return value

    method to->String
      return value->String

    method to_json( buffer:StringBuilder )->StringBuilder
      buffer.print( value )
      return buffer
endClass

class StringProperty( value:String ) : PropertyValue
  GLOBALS
    empty_string = StringProperty( "" )

  METHODS
    method to->Character
      if (value.count > 0) return value[0]
      else                 return 0->Character

    method to->Integer
      return value->Integer

    method to->Logical
      return (value == "true" or value == "TRUE" or value == "yes" or value == "YES" or value == "1")
      #{
      which (value)
        case "true", "TRUE", "yes", "YES", "1"
          return true

        others
          return false
      endWhich
      }#

    method to->Real
      return value->Real

    method to->String
      return value

    method to_json( buffer:StringBuilder )->StringBuilder
      return to_json( value, buffer )

  ROUTINES
    routine to_json( value:String, buffer:StringBuilder )->StringBuilder
      if (value)
        buffer.print '"'
        forEach (ch in value)
          which (ch)
            case '"':
              buffer.print( "\\\"" )
            case '\\':
              buffer.print( "\\\\" )
            case '\b':
              buffer.print( "\\b" )
            case '\f':
              buffer.print( "\\f" )
            case '\n':
              buffer.print( "\\n" )
            case '\r':
              buffer.print( "\\r" )
            case '\t':
              buffer.print( "\\t" )
            others
              if (ch >= 32 and ch <= 126)
                buffer.print( ch )
              elseIf (ch < 32 or ch == 127 or ch == 0x2028 or ch == 0x2029)
                # RE: 2028/9:
                # http://stackoverflow.com/questions/2965293/javascript-parse-error-on-u2028-unicode-character
                buffer.print( "\\u" )
                local n = ch : Integer
                forEach (nibble in 0..3)
                  local digit = (n :>>>: 12) & 15
                  n = n:<<:4
                  if (digit <= 9)
                    buffer.print( digit )
                  else
                    buffer.print( ('a' + (digit - 10))->Character )
                  endIf
                endForEach
              else
                # Store printable Unicode without encoding as \\uXXXX
                buffer.print( ch )
              endIf
          endWhich
        endForEach
        buffer.print '"'
      else
        buffer.print "null"
      endIf
      return buffer
endClass

class PropertyList : PropertyValue
  PROPERTIES
    values : PropertyValue[]

  METHODS
    method init
      init( 10 )

    method init( initial_capacity:Integer )
      values = PropertyValue[]( initial_capacity )
      
    method init( values )

    method clone->PropertyList
      return PropertyList( values.clone )

    method add( value:PropertyValue )->PropertyList
      values.add( value )
      return this

    method add( other:PropertyValue[] )->PropertyList
      values.reserve(other.count)
      forEach (value in other) values.add( value )
      return this

    method clear->PropertyList
      values.clear
      return this

    method count->Integer
      return values.count

    method first->PropertyValue
      return this.get(0)

    method get( index:Integer )->PropertyValue
      if (index < 0 or index >= values.count) return null
      return values[ index ]

    method last->PropertyValue
      return this.get( values.count - 1 )

    method remove( value:PropertyValue )->PropertyValue
      return values.remove( value )

    method remove_at( index:Integer )->PropertyValue
      return values.remove_at( index )

    method remove_first->PropertyValue
      return values.remove_first

    method remove_last->PropertyValue
      return values.remove_last

    method set( index:Integer, new_value:PropertyValue )->PropertyValue
      if (index < 0) return this

      while (index >= values.count) add( null as PropertyValue )
      values.set( index, new_value )

      return this

    method to->String
      return values->String

    method to_json( buffer:StringBuilder )->StringBuilder
      buffer.print( '[' )
      local first = true
      forEach (value in values)
        if (first) first = false
        else       buffer.print( ',' )

        if (value) value.to_json( buffer )
        else       buffer.print( "null" )
      endForEach
      buffer.print( ']' )
      return buffer

    ROUTINES
      routine load( file:File )->PropertyList
        if (not file.exists) return PropertyList()
        return JSON.parse_list( file.load_as_string.decode_utf8 )
endClass

class PropertyTable : PropertyValue
  PROPERTIES
    values : Table<<String,PropertyValue>>

  METHODS
    method init
      values = Table<<String,PropertyValue>>()

    method init( values )

    method get( key:String )->PropertyValue
      return values[ key ]

    method set( key:String, new_value:PropertyValue )->PropertyValue
      values.set( key, new_value )
      return this

    method to->String
      return values->String

    method to_json( buffer:StringBuilder )->StringBuilder
      buffer.print( '{' )
      local first = true
      forEach (key in values.keys)
        if (first) first = false
        else       buffer.print( ',' )

        StringProperty.to_json( key, buffer )
        buffer.print( ':' )

        local value = values[key]
        if (value) value.to_json( buffer )
        else       buffer.print( "null" )
      endForEach
      buffer.print( '}' )
      return buffer

    ROUTINES
      routine load( file:File )->PropertyTable
        if (not file.exists) return PropertyTable()
        return JSON.parse_table( file.load_as_string.decode_utf8 )
endClass

