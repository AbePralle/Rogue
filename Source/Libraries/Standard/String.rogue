class String [native functional]
  ROUTINES
    routine create( characters:Character[] )->String
      $if ("C++") inlineNative 'RogueString::create( $characters )'

    routine create( characters:StringBuilder )->String
      return create( characters.characters )

  METHODS
    method after_any( ch:Character )->String
      local i = locate( ch )
      if (i.exists) return substring( i.value+1 )
      else          return this

    method after_any( st:String )->String
      local i = locate( st )
      if (i.exists) return substring( i.value+st.count )
      else          return this

    method after_first( ch:Character )->String
      local i = locate( ch )
      if (i.exists) return substring( i.value+1 )
      else          return ""

    method after_first( st:String )->String
      local i = locate( st )
      if (i.exists) return substring( i.value+st.count )
      else          return ""

    method after_last( ch:Character )->String
      local i = locate_last( ch )
      if (i.exists) return substring( i.value+1 )
      else          return ""

    method after_last( st:String )->String
      local i = locate_last( st )
      if (i.exists) return substring( i.value+st.count )
      else          return ""

    method before_first( ch:Character )->String
      local i = locate( ch )
      if (i.exists) return substring( 0, i.value-1 )
      else          return this

    method before_first( st:String )->String
      local i = locate( st )
      if (i.exists) return substring( 0, i.value-1 )
      else          return this

    method before_last( ch:Character )->String
      local i = locate_last( ch )
      if (i.exists) return substring( 0, i.value-1 )
      else          return this

    method before_last( st:String )->String
      local i = locate_last( st )
      if (i.exists) return substring( 0, i.value-1 )
      else          return this

    method begins_with( ch:Character )->Logical
      return (count and this[0] == ch)

    method begins_with( other:String )->Logical
      local other_count = other.count
      return (count >= other_count and contains_at(other,0))

    method contains( substring:String )->Logical
      return locate(substring)?

    method contains_at( substring:String, at_index:Integer )->Logical
      $if ("C++") inlineNative '$this->contains($substring,$at_index)'

    method count->Integer
      $if ("C++") inlineNative '$this->count'

    method ends_with( other:String )->Logical
      local other_count = other.count
      return (count >= other_count and other_count > 0 and contains_at(other,count-other_count))

    method from_first( ch:Character )->String
      local i = locate( ch )
      if (not i) return ""
      return substring( i! )

    method from_first( st:String )->String
      local i = locate( st )
      if (not i) return ""
      return substring( i! )

    method from_last( ch:Character )->String
      local i = locate_last( ch )
      if (i.exists) return substring( i.value )
      else          return ""

    method from_last( st:String )->String
      local i = locate_last( st )
      if (i.exists) return substring( i.value )
      else          return ""

    method get( index:Integer )->Character
      $if ("C++") inlineNative '$this->characters[$index]'

    method hash_code->Integer
      $if ("C++") inlineNative '$this->hash_code'

    method indented( spaces:Integer )->String
      local lines = split2( '\n' )
      local builder = StringBuilder( count + lines.count*2 )
      forEach (line in lines)
        if (line.count) builder.print( "  " ).print( line )
      endForEach
      return builder->String

    method last->Character
      return this[ count-1 ]

    method left_justified( spaces:Integer )->String
      if (count >= spaces) return this

      local buffer = StringBuilder( spaces )
      buffer.print( this )
      forEach (count..spaces) buffer.print( ' ' )

      return buffer->String

    method leftmost( n:Integer )->String
      if (n >= 0) return substring( 0, n-1 )
      else        return substring( 0, (count + n) - 1 )

    method locate( ch:Character, i1=null:Integer? )->Integer?
      $if ("C++") inlineNative '($this->locate($ch,$i1))'

    method locate( other:String, i1=null:Integer? )->Integer?
      $if ("C++") inlineNative '($this->locate($other,$i1))'

    method locate_last( ch:Character, starting_index=null:Integer? )->Integer?
      $if ("C++") inlineNative '($this->locate_last($ch,$starting_index))'

    method locate_last( other:String, starting_index=null:Integer? )->Integer?
      $if ("C++") inlineNative '($this->locate_last($other,$starting_index))'

    method operator+( value:Byte )->String
      inline this + value->Integer

    method operator+( value:Character )->String
      $if ("C++") inlineNative '$this->plus($value)'

    method operator+( value:Integer )->String
      $if ("C++") inlineNative '$this->plus($value)'

    method operator<>( other:String )->Integer
      $if ("C++") inlineNative '$this->compare_to($other)'

    method operator+( value:Logical )->String
      if (value) return this + "true"
      else       return this + "false"

    method operator+( value:Long )->String
      $if ("C++") inlineNative '$this->plus($value)'

    method operator+( value:Object )->String
      if (value) return this + value->String
      else       return this + "null"

    method operator+( value:Real )->String
      $if ("C++") inlineNative '$this->plus($value)'

    method operator+( value:String )->String
      $if ("C++") inlineNative '$this->plus($value)'

    method reversed->String
      local buffer = StringBuilder(count)
      forEach (ch in this step -1)
        buffer.print( ch )
      endForEach
      return buffer->String

    method right_justified( spaces:Integer )->String
      if (count >= spaces) return this

      local buffer = StringBuilder( spaces )
      forEach (count..spaces) buffer.print( ' ' )
      buffer.print( this )

      return buffer->String

    method rightmost( n:Integer )->String
      local this_count = count
      if (n < 0) return substring( -n, this_count-1 )
      else       return substring( this_count-n, this_count-1 )

    method split2( separator:Character )->String[]
      local result = String[]

      local i1 = 0
      local i2 = locate( separator, i1 )
      while (i2.exists)
        result.add( substring(i1,i2.value-1) )
        i1 = i2.value + 1
        i2 = locate( separator, i1 )
      endWhile

      result.add( substring(i1) )

      return result

    method split2( separator:String )->String[]
      local result = String[]
      local separator_count = separator.count

      local i1 = 0
      local i2 = locate( separator, i1 )
      while (i2.exists)
        result.add( substring(i1,i2.value-1) )
        i1 = i2.value + separator_count
        i2 = locate( separator, i1 )
      endWhile

      result.add( substring(i1) )

      return result

    method substring( i1:Integer )->String
      $if ("C++") inlineNative '$this->substring($i1)'

    method substring( i1:Integer, i2:Integer )->String
      $if ("C++") inlineNative '$this->substring($i1,$i2)'

    method to->Integer
      inlineNative "($this->to_integer())"

    method to->Real
      inlineNative "($this->to_real())"

    method to->String
      return this

    method to_lowercase->String
      local has_uc = false
      forEach (ch in this)
        if (ch >= 'A' and ch <= 'Z') has_uc = true; escapeForEach
      endForEach

      if (not has_uc) return this

      local result = StringBuilder( count )
      forEach (ch in this)
        if (ch >= 'A' and ch <= 'Z') result.print( ((ch-'A')+'a')->Character )
        else                         result.print( ch )
      endForEach
      return result->String

    method to_uppercase->String
      local has_lc = false
      forEach (ch in this)
        if (ch >= 'a' and ch <= 'a') has_lc = true; escapeForEach
      endForEach

      if (not has_lc) return this

      local result = StringBuilder( count )
      forEach (ch in this)
        if (ch >= 'a' and ch <= 'z') result.print( ((ch-'a')+'A')->Character )
        else                         result.print( ch )
      endForEach
      return result->String

    method word_wrapped( width:Integer )->String[]
      # Returns a word-wrapped version of this string as a list of lines.
      # Existing newlines characters will cause a new line to begin
      # immediately.  Spaces immediately following existing newline 
      # characters are preserved.
      return word_wrapped( width, StringBuilder() )->String.split2('\n')

    method word_wrapped( width:Integer, buffer:StringBuilder )->StringBuilder
      # Prints a word-wrapped version of this string to the given
      # StringBuilder.  Existing newlines characters will cause a new line to 
      # begin immediately.  Spaces immediately following existing newline 
      # characters are preserved.
      local i1, i2 : Integer
      local len = count

      if (len == 0) return buffer

      local needs_newline = false
      while (i2 < len)

        # find last space or first \n
        while ((i2-i1) < width and i2 < len and this[i2] != '\n') i2++

        if ((i2-i1) == width)
          if (i2 >= len)
            i2 = len
          else
            while (this[i2]!=' ' and this[i2]!='\n' and i2>i1) i2--
            if (i2 == i1) i2 = i1 + width
          endIf
        endIf

        if (needs_newline) buffer.println
        forEach (i in i1..(i2-1)) buffer.print( this[i] )
        needs_newline = true

        if (i2 == len)
          return buffer
        else
          which (this[i2])
            case ' ':
              while (i2<len and this[i2]==' ') i2++
              if (i2<len and this[i2]=='\n') i2++

            case '\n':
              i2++
          endWhich
          i1 = i2
        endIf
      endWhile

      return buffer

  ROUTINES
    routine joined( lines:String[] )->String
      # Kludge until augments work for List<<String>>
      local total_count = 0
      forEach (line in lines) total_count += line.count

      local builder = StringBuilder( total_count )
      forEach (line in lines)
        builder.print( line )
      endForEach

      return builder->String

endClass
