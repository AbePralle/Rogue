class StringBuilder [requisite]
  GLOBAL PROPERTIES
    work_bytes = Byte[]

  PROPERTIES
    utf8       : Byte[]
    indent     : Int32
    at_newline = true

  METHODS
    method init [requisite]
      init( 40 )

    method init( initial_capacity:Int32 )
      utf8 = Byte[]( initial_capacity )

    method init( initial_content:String )
      if (initial_content is null) initial_content = "null"
      local initial_capacity = initial_content.count
      if (initial_capacity < 40) initial_capacity = 40
      init( initial_capacity )
      print( initial_content )

    method capacity->Int32 [macro]
      this.utf8.capacity

    method clear->this [requisite]
      utf8.clear
      at_newline = true
      return this

    method consolidated->String
      # Returns the equivalent string to the data in this StringBuilder,
      # reusing a previously consolidated String object if possible.
      return StringConsolidationTable[ this ]

    method count->Int32 [macro]
      this.utf8.count

    method get( index:Int32 )->Character [macro]
      this.utf8[ index ]

    method hash_code->Int32
      local code = 0
      forEach (ch in this)
        code = ((code:<<:3) - code) + ch
      endForEach
      return code

    method insert( ch:Character )->this
      utf8.insert( ch )
      return this

    method insert_spaces( index=0:Int32, spaces=2:Int32, character=' ':Character )->this
      if (spaces > 0 and index >= 0 and index < count)
        utf8.shift( index, null, spaces, character->Byte )
      endIf
      return this

    method locate( ch:Character )->Int32?
      forEach (i of this)
        if (utf8[i] == ch) return i
      endForEach
      return null

    method locate_last( ch:Character )->Int32?
      forEach (i of this step -1)
        if (utf8[i] == ch) return i
      endForEach
      return null

    method needs_indent->Logical
      return (at_newline and indent > 0)

    method operator==( value:String )->Logical
      if (count != value.count) return false
      forEach (i of this)
        if (utf8[i] != value[i]) return false
      endForEach
      return true

    method operator==( value:StringBuilder )->Logical
      if (count != value.count) return false
      forEach (i of this)
        if (utf8[i] != value[i]) return false
      endForEach
      return true

    method print( value:Byte )->this
      return print( value->Int32 )

    method print( value:Character )->this
      if (value == '\n')    at_newline = true
      elseIf (needs_indent) print_indent
      utf8.add( value )
      return this

    method print( value:Real32 )->this [macro]
      this.print( value->Real64 )

    method print( value:Int32 )->this
      return print( value->Int64 )

    method print( value:Logical )->this
      if (value) return print( "true" )
      else       return print( "false" )

    method print( value:Int64 )->this
      if (value == (1->Int64 :<<: 63))
        return print( "-9223372036854775808" )
      elseIf (value < 0)
        print( '-' )
        return print( -value )
      elseIf (value >= 10)
        print( value / 10 )
        return print( ('0'+(value%10))->Character )
      else
        return print( ('0'+value)->Character )
      endIf


    method print( value:Object )->this
      if (value) return print( value->String )
      return print( "null" )

    method print( value:Real64 )->StringBuilder
      if (value == 0)
        print( "0.0" )
        return this
      elseIf (value.is_infinite)
        if (value < 0) print( "-infinity" )
        else           print( "infinity" )
        return this
      elseIf (value.is_not_a_number)
        print( "NaN" )
        return this
      endIf

      if (value < 0)
        print( '-' )
        value = -value
      endIf

      # Display power of 10 exponent for numbers >= 1e16 or <= 1e-4
      if (value >= 1000000000000000.0)
        local pow10 = 0
        while (value >= 10.0)
          value /= 10.0
          ++pow10
        endWhile

        return print( value ).print( 'e' ).print( pow10->Int32 )
      endIf

      if (value < 0.00001)
        local pow10 = 0
        while (value < 0.1)
          value *= 10.0
          --pow10
        endWhile

        return print( value ).print( 'e' ).print( pow10->Int32 )
      endIf

      # Standard output
      forEach (decimal_count in 1..18)
        print_to_work_bytes( value, decimal_count )
        if (scan_work_bytes == value) escapeForEach
      endForEach

      print_work_bytes

      return this

    method print( value:Real64, decimal_places:Int32 )->this
      if (value.is_infinite)
        if (value < 0) print( "-infinity" )
        else           print( "infinity" )
        return this
      elseIf (value.is_not_a_number)
        print( "NaN" )
        return this
      endIf

      if (value < 0 )
        print( '-' )
        value = -value
      endIf

      print_to_work_bytes( value, decimal_places )
      print_work_bytes

      return this

    method print( value:String )->this
      if (value)
        if (indent)
          forEach (ch in value) print( ch )
        else
          forEach (ch in value) utf8.add( ch )
          if (value.count and value.last == '\n') at_newline = true
        endIf
        return this
      else
        return print( "null" )
      endIf

    method print_character32( value:Int32 )->this
      if ((value & 0xffe00000) != 0)
        return print( '?' )
      else
        # Surrogate pair
        value -= 0x10000
        print( (0xd800 + ((value :>>>: 10) & 0x3ff))->Character )
        return print( (0xdc00 + (value & 0x3ff))->Character )
      endIf

    method print_indent
      if (not needs_indent or indent == 0) return
      forEach (i in 1..indent) utf8.add( ' ' )
      at_newline = false

    method print_to_work_bytes( value:Real64, decimal_places:Int32 )->this
      work_bytes.clear
      local whole = Math.floor( value )
      value -= whole
      while (whole >= 10)
        work_bytes.add( ('0' + ((whole%10)->Int32))->Character )
        whole /= 10
      endWhile
      work_bytes.add( ('0' + ((whole%10)->Int32))->Character )

      work_bytes.reverse

      if (decimal_places != 0)
        work_bytes.add( '.' )
        forEach (1..decimal_places)
          value *= 10
          local digit = Math.floor(value)->Int32
          value -= digit
          work_bytes.add( ('0' + digit)->Character )
        endForEach
      endIf

      if (value >= 0.5)
        work_bytes.add( '5' )
        round_off_work_bytes
      endIf

      return this

    method print_work_bytes
      forEach (digit in work_bytes)
        print( digit->Character )
      endForEach

    method println()->this
      return print( '\n' )

    method println( value:Byte )->this
      return print( value->Int32 ).print( '\n' )

    method println( value:Character )->this
      return print( value ).print( '\n' )

    method println( value:Real32 )->this [macro]
      this.println( value->Real64 )

    method println( value:Int32 )->this
      return print( value ).print( '\n' )

    method println( value:Logical )->this
      return print( value ).print( '\n' )

    method println( value:Int64 )->this
      return print( value ).print( '\n' )

    method println( value:Real64 )->this
      return print( value ).print( '\n' )

    method println( value:Real64, decimal_places:Int32 )->this
      return print( value, decimal_places ).print( '\n' )

    method println( value:Object )->this
      return print( value ).print( '\n' )

    method println( value:String )->this
      return print( value ).print( '\n' )

    method println_character32( value:Int32 )->this
      return print_character32( value ).print( '\n' )

    method reserve( additional_count:Int32 )->this [requisite]
      utf8.reserve( additional_count )
      return this

    method round_off_work_bytes
      if (work_bytes.remove_last >= '5')
        local i = work_bytes.count - 1
        while (i >= 0)
          if (work_bytes[i] != '.')
            ++work_bytes[i]
            if (work_bytes[i] == ('9'+1)) work_bytes[i] = '0'
            else                          return
          endIf
          --i
        endWhile
        work_bytes.insert( '1' )
      endIf

    method scan_work_bytes->Real64
      local whole = 0.0
      local decimal = 0.0
      local decimal_count = 0
      local scanning_whole = true
      forEach (digit in work_bytes)
        if (scanning_whole)
          if (digit == '.') scanning_whole = false
          else              whole = whole * 10 + (digit - '0')
        else
          decimal = decimal * 10 + (digit - '0')
          ++decimal_count
        endIf
      endForEach
      return whole + decimal / 10.0^decimal_count

    method set( index:Int32, ch:Character )->this
      utf8[index] = ch
      return this

    method to->String
      return String( utf8 )
endClass

