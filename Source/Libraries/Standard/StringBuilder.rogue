class StringBuilder [requisite]
  GLOBALS
    work_bytes = Byte[]

  PROPERTIES
    characters   : Character[]
    indent       : Integer
    at_newline   = true

  METHODS
    method init [requisite]
      init( 40 )

    method init( initial_capacity:Integer )
      characters = Character[]( initial_capacity )

    method init( initial_content:String )
      if (initial_content is null) initial_content = "null"
      local initial_capacity = initial_content.count
      if (initial_capacity < 40) initial_capacity = 40
      init( initial_capacity )
      print( initial_content )

    method add_indent( spaces:Integer )->this
      indent += spaces
      return this

    method capacity->Integer
      macro this.characters.capacity

    method clear->this [requisite]
      characters.clear
      at_newline = true
      return this

    method count->Integer
      macro this.characters.count

    method get( index:Integer )->Character
      macro this.characters[ index ]

    method insert( ch:Character )->this
      characters.insert( ch )
      return this

    method needs_indent->Logical
      return (at_newline and indent > 0)

    method print( value:Byte )->this
      return print( value->Integer )

    method print( value:Character )->this
      if (value == '\n')    at_newline = true
      elseIf (needs_indent) print_indent
      characters.add( value )
      return this

    method print( value:Float )->this
      macro this.print( value->Real )

    method print( value:Integer )->this
      return print( value->Long )

    method print( value:Logical )->this
      if (value) return print( "true" )
      else       return print( "false" )

    method print( value:Long )->this
      if (value == (1->Long :<<: 63))
        return print( "-9223372036854775808" )
      elseIf (value < 0)
        print( '-' )
        return print( -value )
      elseIf (value >= 10)
        print( value / 10 )
        return print( ('0'+(value%10))->Character )
      else
        return print( ('0'+value)->Character )
      endIf


    method print( value:Object )->this
      if (value) return print( value->String )
      return print( "null" )

    method print( value:Real )->StringBuilder
      local original_value = value

      if (value < 0)
        print( '-' )
        value = -value
      endIf

      if (value == 0)
        print( "0.0" )
        return this
      endIf

      # Display power of 10 exponent for numbers >= 1e16 or <= 1e-4
      if (value >= 1000000000000000.0)
        local pow10 = 0
        while (value >= 10.0)
          value /= 10.0
          ++pow10
        endWhile

        return print( value ).print( 'e' ).print( pow10->Integer )
      endIf

      if (value < 0.00001)
        local pow10 = 0
        while (value < 0.1)
          value *= 10.0
          --pow10
        endWhile

        return print( value ).print( 'e' ).print( pow10->Integer )
      endIf

      # Standard output
      forEach (decimal_count in 1..18)
        print_to_work_bytes( value, decimal_count )
        if (scan_work_bytes == value) escapeForEach 
      endForEach

      print_work_bytes

      return this

    method print( value:Real, decimal_places:Integer )->this
      if (value < 0 )
        print( '-' )
        value = -value
      endIf
      
      print_to_work_bytes( value, decimal_places )
      print_work_bytes

      return this

    method print( value:String )->this
      if (value)
        if (indent)
          forEach (ch in value) print( ch )
        else
          forEach (ch in value) characters.add( ch )
          if (value.count and value.last == '\n') at_newline = true
        endIf
        return this
      else
        return print( "null" )
      endIf

    method print_indent
      if (not needs_indent or indent == 0) return
      forEach (i in 1..indent) characters.add( ' ' )
      at_newline = false

    method print_to_work_bytes( value:Real, decimal_places:Integer )->this
      work_bytes.clear
      local whole = Math.floor( value )
      value -= whole
      while (whole >= 10)
        work_bytes.add( ('0' + ((whole%10)->Integer))->Character )
        whole /= 10
      endWhile
      work_bytes.add( ('0' + ((whole%10)->Integer))->Character )

      work_bytes.reverse

      if (decimal_places != 0)
        work_bytes.add( '.' )
        forEach (1..decimal_places)
          value *= 10
          local digit = Math.floor(value)->Integer
          value -= digit
          work_bytes.add( ('0' + digit)->Character )
        endForEach
      endIf

      if (value >= 0.5)
        work_bytes.add( '5' )
        round_off_work_bytes
      endIf

      return this

    method print_work_bytes
      forEach (digit in work_bytes)
        print( digit->Character )
      endForEach

    method println()->this
      return print( '\n' )

    method println( value:Byte )->this
      return print( value->Integer ).print( '\n' )

    method println( value:Character )->this
      return print( value ).print( '\n' )

    method println( value:Float )->this
      macro this.println( value->Real )

    method println( value:Integer )->this
      return print( value ).print( '\n' )

    method println( value:Logical )->this
      return print( value ).print( '\n' )

    method println( value:Long )->this
      return print( value ).print( '\n' )

    method println( value:Real )->this
      return print( value ).print( '\n' )

    method println( value:Real, decimal_places:Integer )->this
      return print( value, decimal_places ).print( '\n' )

    method println( value:Object )->this
      return print( value ).print( '\n' )

    method println( value:String )->this
      return print( value ).print( '\n' )

    method reserve( additional_count:Integer )->this [requisite]
      characters.reserve( additional_count )
      return this

    method round_off_work_bytes
      if (work_bytes.remove_last >= '5')
        local i = work_bytes.count - 1
        while (i >= 0)
          if (work_bytes[i] != '.')
            ++work_bytes[i]
            if (work_bytes[i] == ('9'+1)) work_bytes[i] = '0'
            else                          return
          endIf
          --i
        endWhile
        work_bytes.insert( '1' )
      endIf

    method scan_work_bytes->Real
      local whole = 0.0
      local decimal = 0.0
      local decimal_count = 0
      local scanning_whole = true
      forEach (digit in work_bytes)
        if (scanning_whole)
          if (digit == '.') scanning_whole = false
          else              whole = whole * 10 + (digit - '0')
        else
          decimal = decimal * 10 + (digit - '0')
          ++decimal_count
        endIf
      endForEach
      return whole + decimal / 10.0^decimal_count

    method set( index:Integer, ch:Character )->this
      characters[index] = ch
      return this

    method to->String
      return String( characters )
endClass

