class StringBuilder
  PROPERTIES
    characters   : Character[]
    indent       : Integer
    at_newline   = true

  METHODS
    method init
      init( 40 )

    method init( initial_capacity:Integer )
      characters = Character[]( initial_capacity )

    method add_indent( spaces:Integer )->this
      indent += spaces
      return this

    method capacity->Integer
      inline this.characters.capacity

    method clear->this
      characters.clear
      at_newline = true
      return this

    method count->Integer
      inline this.characters.count

    method get( index:Integer )->Character
      inline this.characters[ index ]

    method needs_indent->Logical
      return (at_newline and indent > 0)

    method print( value:Byte )->this
      return print( value->Integer )

    method print( value:Character )->this
      if (value == '\n')    at_newline = true
      elseIf (needs_indent) print_indent
      characters.add( value )
      return this

    method print( value:Real32 )->this
      inline this.print( value->Real )

    method print( value:Integer )->this [native]

    method print( value:Logical )->this
      if (value) return print( "true" )
      else       return print( "false" )

    method print( value:Long )->this [native]

    method print( value:Object )->this
      if (value) return print( value->String )
      return print( "null" )

    method print( value:Real )->StringBuilder
      local original_value = value

      if (value < 0)
        print( '-' )
        value = -value
      endIf

      if (value == 0)
        print( "0.0" )
        return this
      endIf

      # Display power of 10 exponent for numbers >= 1e16 or <= 1e-4
      if (value >= 1000000000000000.0)
        local pow10 = 0
        while (value >= 10.0)
          value /= 10.0
          ++pow10
        endWhile

        return print( value ).print( 'e' ).print( pow10->Integer )
      endIf

      if (value < 0.00001)
        local pow10 = 0
        while (value < 0.1)
          value *= 10.0
          --pow10
        endWhile

        return print( value ).print( 'e' ).print( pow10->Integer )
      endIf

      # Standard output
      local bytes = Byte[]
      forEach (decimal_count in 1..18)
        encode_as_bytes( value, bytes, decimal_count )
        round_off_bytes( bytes )
        if (scan_bytes(bytes) == value) escapeForEach 
      endForEach

      forEach (digit in bytes)
        if (digit == '.') print( '.' )
        else              print( ('0'+digit)->Character )
      endForEach

      return this

    method encode_as_bytes( value:Real, bytes:Byte[], decimal_count:Integer )
      bytes.clear

      local whole = Math.floor( value )->Long
      value -= whole

      while (whole >= 10)
        bytes.insert( whole % 10 )
        whole /= 10
      endWhile
      bytes.insert( whole )

      bytes.add( '.' )

      forEach (2..decimal_count)
        value *= 10
        local digit = Math.floor(value)->Integer
        bytes.add( digit )
        value -= digit
      endForEach

    method round_off_bytes( bytes:Byte[] )
      if (bytes.remove_last >= 5)
        local i = bytes.count - 1
        while (i >= 0)
          if (bytes[i] != '.')
            ++bytes[i]
            if (bytes[i] == 10) bytes[i] = 0
            else                return
          endIf
          --i
        endWhile
        bytes.insert( 1 )
      endIf

    method scan_bytes( bytes:Byte[] )->Real
      local whole = 0.0
      local decimal = 0.0
      local decimal_count = 0
      local scanning_whole = true
      forEach (digit in bytes)
        if (scanning_whole)
          if (digit == '.') scanning_whole = false
          else              whole = whole * 10 + digit
        else
          decimal = decimal * 10 + digit
          ++decimal_count
        endIf
      endForEach
      return whole + decimal / 10.0^decimal_count

    method print( value:Real, decimal_places:Integer )->this [native]

    method print( value:String )->this
      if (value)
        if (indent)
          forEach (ch in value) print( ch )
        else
          forEach (ch in value) characters.add( ch )
          if (value.count and value.last == '\n') at_newline = true
        endIf
        return this
      else
        return print( "null" )
      endIf

    method print_indent
      if (not needs_indent or indent == 0) return
      forEach (i in 1..indent) characters.add( ' ' )
      at_newline = false

    method println()->this
      return print( '\n' )

    method println( value:Byte )->this
      return print( value->Integer ).print( '\n' )

    method println( value:Character )->this
      return print( value ).print( '\n' )

    method println( value:Real32 )->this
      inline this.println( value->Real )

    method println( value:Integer )->this
      return print( value ).print( '\n' )

    method println( value:Logical )->this
      return print( value ).print( '\n' )

    method println( value:Long )->this
      return print( value ).print( '\n' )

    method println( value:Real, decimal_places=4:Integer )->this
      return print( value, decimal_places ).print( '\n' )

    method println( value:Object )->this
      return print( value ).print( '\n' )

    method println( value:String )->this
      return print( value ).print( '\n' )

    method reserve( additional_count:Integer )->this
      characters.reserve( additional_count )
      return this

    method to->String
      return String( characters )
endClass

