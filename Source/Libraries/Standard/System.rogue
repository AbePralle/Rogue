class System [requisite]
  GLOBAL PROPERTIES
    command_line_arguments = String[]
    executable_filepath    : String
    environment            : SystemEnvironment

    classes = Table<<String,TypeInfo>>()

  GLOBAL METHODS
    method init_class
      local value = environment["ROGUE_GC_THRESHOLD"]
      if (value isNot null)
        local n = value->Real64
        if (value.ends_with('M') or value.ends_with("MB")) n *= 1024*1024
        elseIf (value.ends_with('K') or value.ends_with("KB")) n*= 1024
        gc_threshold = n->Int32
      endIf

    method exit( result_code:Int32 )
      $if ("C++")
        native @|Rogue_quit();
                |exit( $result_code );
      $endIf

    method run( command:String )->Int32
      local return_val = 0
      native @|$return_val = system( (char*)$command->utf8 );
      if (return_val == -1) throw Error("Process was not created")
      return return_val

    method gc_threshold->Int32
      # Returns the current GC threshold in bytes
      local n : Int32
      native "$n = Rogue_gc_threshold;"
      return n

    method set_gc_threshold( value:Int32 )
      if (value <= 0) value = 0x7fffffff
      # We might want -1 to mean max value and 0 to mean never,
      # but for now, just have anything strange mean max value.

      native "Rogue_gc_threshold = $value;"

    method type_info( name:String )->TypeInfo
      local result = classes[ name ]
      if (result) return result

      native @|for (int i=Rogue_type_count; --i>=0; )
              |{
              |  RogueType* cur_type = &Rogue_types[ i ];
              |  if (RogueType_name_equals( cur_type, (char*) $name->utf8 ))
              |  {
              |    $result = RogueType_type_info( cur_type );
              |    break;
              |  }
              |}

      if (result) classes[ name ] = result
      return result

    method collect_garbage ( force=false:Logical )->Logical
      # Runs the garbage collector if possible
      #
      # "force" tries harder to run the GC.
      # Returns true if the collector ran.

      local result = false
      $if ("C++")
        native @|#if ROGUE_GC_MODE_AUTO
                |$result = Rogue_collect_garbage($force);
                |#endif
      $endIf
      return result

    method time->Real64
      $if ("C++")
        native @|#if defined(_WIN32)
                |  struct __timeb64 time_struct;
                |  RogueReal64 time_seconds;
                |  _ftime64_s( &time_struct );
                |  time_seconds = (RogueReal64) time_struct.time;
                |  time_seconds += time_struct.millitm / 1000.0;
                |  return time_seconds;
                |
                |#else
                |  struct timeval time_struct;
                |  RogueReal64 time_seconds;
                |  gettimeofday( &time_struct, 0 );
                |  time_seconds = (RogueReal64) time_struct.tv_sec;
                |  time_seconds += (time_struct.tv_usec / 1000000.0);
                |  return time_seconds;
                |#endif
      $endIf
endClass

class SystemEnvironment [compound]
  METHODS
    method get( name:String )->String
      local result : String

      native @|char* c_result = getenv( (char*)$name->utf8 );
              |if (c_result)
              |{
              |  $result = RogueString_create_from_utf8( c_result );
              |}

      return select{ result:result || null }

    method listing->String[]
      nativeHeader extern "C" char **environ;

      local result = String[]
      native "char** env = environ;"
      while (native("*env")->Logical)
        result.add( native("RogueString_create_from_utf8( *(env++) )")->String.before_first('=') )
      endWhile

      return result;

    method set( name:String, value:String )
      if (value and value.count)
        native @|setenv( (char*)$name->utf8, (char*)$value->utf8, 1 );
      else
        native @|unsetenv( (char*)$name->utf8 );
      endIf
endClass
