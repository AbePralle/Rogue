#==============================================================================
# Time.rogue
#
# Models a time as a number of hours, minutes, seconds, and milliseconds.
# Can be used as both an absolute time and a relative interval.
#==============================================================================

class Time( value:Real64 ) [compound]
  GLOBAL METHODS
    method create( hour:Int32, minute:Int32, second:Int32, millisecond:Int32 )->Time
      hour   %= 24
      minute %= 60
      second %= 60
      millisecond %= 1000
      return Time( ((hour*3600 + minute*60 + second) * 1000 + millisecond) / 1000.0 )

    method from_timestamp( timestamp:Timestamp )->Time
      return Time( timestamp.hour, timestamp.minute, timestamp.second, timestamp.millisecond )

    method now->Time
      return from_timestamp( Timestamp.now )

  METHODS
    method hour->Int32
      return Int32(value / 3600)

    method minute->Int32
      return Int32(value % 3600) / 60

    method second->Int32
      return Int32(value % 60)

    method millisecond->Int32
      return Int32(value * 1000) % 1000

    method to->String
      return this->String( "hh24:mm:ss" )

    method to->String( format:String )
      # format
      #   hh24 - hour in 24-hour format with possible leading 0
      #   hh12 - hour in 12-hour format with possible leading 0
      #   hh   - same as hh24
      #   h24  - hour in 24-hour format without any leading 0
      #   h12  - hour in 12-hour format without any leading 0
      #   h    - same as h24
      #   mm   - minutes with possible leading 0
      #   m    - minutes without any leading 0
      #   ss   - seconds with possible leading 0
      #   s    - seconds without any leading 0
      #   ms   - 3-digit milliseconds with possible leading 0's
      #   ampm - replaced with 'am' or 'pm' as appropriate
      #   AMPM - replaced with 'AM' or 'PM' as appropriate
      #   am   - same as ampm
      #   pm   - same as ampm
      #   AM   - same as AMPM
      #   PM   - same as AMPM
      local is_12 = false
      local ampm  = select{ (hour < 12):"AM" || "PM" }

      if (format.contains("ampm")) format = format.replacing( "ampm", "aplc" ); is_12 = true
      if (format.contains("am"))   format = format.replacing( "am",   "aplc" ); is_12 = true
      if (format.contains("pm"))   format = format.replacing( "pm",   "aplc" ); is_12 = true
      if (format.contains("AMPM")) format = format.replacing( "AMPM", "apuc" ); is_12 = true
      if (format.contains("AM"))   format = format.replacing( "AM",   "apuc" ); is_12 = true
      if (format.contains("PM"))   format = format.replacing( "PM",   "apuc" ); is_12 = true

      format = format.to_lowercase

      if (format.contains("hh12")) format = _replace_hours_12( format, "hh12", hour, "02" )
      if (format.contains("hh24")) format = format.replacing( "hh24", hour.format("02") )
      if (format.contains("hh"))
        if (is_12) format = _replace_hours_12( format, "hh", hour, "02" )
        else       format = format.replacing( "hh", hour.format("02") )
      endIf
      if (format.contains("h12"))  format = _replace_hours_12( format, "h12", hour, "1" )
      if (format.contains("h24"))  format = format.replacing( "h24", hour->String )
      if (format.contains("h"))
        if (is_12) format = _replace_hours_12( format, "h", hour, "1" )
        else       format = format.replacing( "h", hour->String )
      endIf

      if (format.contains("ms")) format = format.replacing( "ms", millisecond.format("03") )

      if (format.contains("mm")) format = format.replacing( "mm", minute.format("02") )
      if (format.contains("m"))  format = format.replacing( "m",  minute->String )

      if (format.contains("ss")) format = format.replacing( "ss", second.format("02") )
      if (format.contains("s"))  format = format.replacing( "s",  second->String )

      if (format.contains("aplc")) format = format.replacing( "aplc", select{(hour<10):"am"||"pm"} )
      if (format.contains("apuc")) format = format.replacing( "apuc", select{(hour<10):"AM"||"PM"} )

      return format

    method _replace_hours_12( text:String, find:String, h:Int32, fmt:String )->String
      if (not text.contains(find)) return text
      if (h == 0)      return text.replacing( find, 12.format(fmt) )
      elseIf (h <= 12) return text.replacing( find, h.format(fmt) )
      else             return text.replacing( find, (h-12).format(fmt) )
endClass

