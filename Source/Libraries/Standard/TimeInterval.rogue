class TimeInterval( total_seconds:Real64 ) [compound]
  # This time interval can be broken down into days, hours, minutes, seconds, and milliseconds.
  # Those values are all independent and precise.
  GLOBAL METHODS
    method create( flag=true:Logical, days=0:Real64, hours=0:Real64, minutes=0:Real64, seconds=0:Real64, milliseconds=0:Real64 )->TimeInterval
      # 'flag' is ignored and is a kludge to disambiguate the compound initializers from this global create method.
      return TimeInterval( days * (3600*24) + hours*3600 + minutes*60 + seconds + (milliseconds/1000.0) )

    method hms( hours:Real64, minutes:Real64, seconds:Real64, ms=0:Real64 )->TimeInterval
      return TimeInterval( &hours=hours, &minutes=minutes, &seconds=seconds, &milliseconds=ms )


  METHODS
    method days->Int32 [macro]
      return Int32( this.total_seconds.abs / (3600*24) )

    method hours->Int32 [macro]
      return Int32( (this.total_seconds.abs % (3600*24)) / 3600 )

    method is_negative->Logical [macro]
      return (this.total_seconds.abs < 0)

    method minutes->Int32 [macro]
      return Int32( (this.total_seconds.abs % 3600) / 60 )

    method seconds->Int32 [macro]
      return Int32( this.total_seconds.abs % 60 )

    method milliseconds->Int32 [macro]
      return Int32( (this.total_seconds.abs * 1000) % 1000 )

    method operator<( other:TimeInterval )->Logical
      return (total_seconds < other.total_seconds)

    method operator==( other:TimeInterval )->Logical
      return (total_seconds == other.total_seconds)

    method to->String
      local buffer = StringBuilder()

      if (total_seconds < 0) buffer.print( '-' )

      local needs_comma = false

      if (days)  buffer.print( days ).print( " day".pluralized(days) ); needs_comma = true

      if (hours)
        if (needs_comma) buffer.print( ", " )
        buffer.print( hours ).print( " hour".pluralized(hours) ); needs_comma = true
      endIf
      if (minutes)
        if (needs_comma) buffer.print( ", " )
        buffer.print( minutes ).print( " minute".pluralized(minutes) ); needs_comma = true
      endIf

      if (seconds or milliseconds)
        if (needs_comma) buffer.print( ", " )
        needs_comma = true

        buffer.print( (total_seconds % 60).format(3) ).print( " seconds" )
      endIf

      if (not buffer.count) return "0.000 seconds"

      return buffer->String

endClass

