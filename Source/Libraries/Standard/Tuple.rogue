class Tuple <<$T1>> (e1:$T1) [compound]
  METHODS
    method to->String
      return "($)" (e1)

    method hash_code->Int32
      return e1.hash_code

    method operator== (other:Tuple<<$T1>>)->Logical
      if (e1 != other.e1) return false
      return true

    method operator< (other:Tuple<<$T1>>)->Logical
      if (e1 < other.e1) return true
      if (e1 > other.e1) return false
      return false

    method cloned->this
      return Tuple<<$T1>>(e1)
endClass


class Tuple <<$T1,$T2>> (e1:$T1,e2:$T2) [compound]
  METHODS
    method to->String
      return "($,$)" (e1,e2)

    method hash_code->Int32
      return e1.hash_code ~ e2.hash_code

    method operator== (other:Tuple<<$T1,$T2>>)->Logical
      if (e1 != other.e1) return false
      if (e2 != other.e2) return false
      return true

    method operator< (other:Tuple<<$T1,$T2>>)->Logical
      if (e1 < other.e1) return true
      if (e1 > other.e1) return false
      if (e2 < other.e2) return true
      if (e2 > other.e2) return false
      return false

    method cloned->this
      return Tuple<<$T1,$T2>>(e1,e2)
endClass


class Tuple <<$T1,$T2,$T3>> (e1:$T1,e2:$T2,e3:$T3) [compound]
  METHODS
    method to->String
      return "($,$,$)" (e1,e2,e3)

    method hash_code->Int32
      return e1.hash_code ~ e2.hash_code ~ e3.hash_code

    method operator== (other:Tuple<<$T1,$T2,$T3>>)->Logical
      if (e1 != other.e1) return false
      if (e2 != other.e2) return false
      if (e3 != other.e3) return false
      return true

    method operator< (other:Tuple<<$T1,$T2,$T3>>)->Logical
      if (e1 < other.e1) return true
      if (e1 > other.e1) return false
      if (e2 < other.e2) return true
      if (e2 > other.e2) return false
      if (e3 < other.e3) return true
      if (e3 > other.e3) return false
      return false

    method cloned->this
      return Tuple<<$T1,$T2,$T3>>(e1,e2,e3)
endClass


class Tuple <<$T1,$T2,$T3,$T4>> (e1:$T1,e2:$T2,e3:$T3,e4:$T4) [compound]
  METHODS
    method to->String
      return "($,$,$,$)" (e1,e2,e3,e4)

    method hash_code->Int32
      return e1.hash_code ~ e2.hash_code ~ e3.hash_code ~ e4.hash_code

    method operator== (other:Tuple<<$T1,$T2,$T3,$T4>>)->Logical
      if (e1 != other.e1) return false
      if (e2 != other.e2) return false
      if (e3 != other.e3) return false
      if (e4 != other.e4) return false
      return true

    method operator< (other:Tuple<<$T1,$T2,$T3,$T4>>)->Logical
      if (e1 < other.e1) return true
      if (e1 > other.e1) return false
      if (e2 < other.e2) return true
      if (e2 > other.e2) return false
      if (e3 < other.e3) return true
      if (e3 > other.e3) return false
      if (e4 < other.e4) return true
      if (e4 > other.e4) return false
      return false

    method cloned->this
      return Tuple<<$T1,$T2,$T3,$T4>>(e1,e2,e3,e4)
endClass


class Tuple <<$T1,$T2,$T3,$T4,$T5>> (e1:$T1,e2:$T2,e3:$T3,e4:$T4,e5:$T5) [compound]
  METHODS
    method to->String
      return "($,$,$,$,$)" (e1,e2,e3,e4,e5)

    method hash_code->Int32
      return e1.hash_code ~ e2.hash_code ~ e3.hash_code ~ e4.hash_code ~ e5.hash_code

    method operator== (other:Tuple<<$T1,$T2,$T3,$T4,$T5>>)->Logical
      if (e1 != other.e1) return false
      if (e2 != other.e2) return false
      if (e3 != other.e3) return false
      if (e4 != other.e4) return false
      if (e5 != other.e5) return false
      return true

    method operator< (other:Tuple<<$T1,$T2,$T3,$T4,$T5>>)->Logical
      if (e1 < other.e1) return true
      if (e1 > other.e1) return false
      if (e2 < other.e2) return true
      if (e2 > other.e2) return false
      if (e3 < other.e3) return true
      if (e3 > other.e3) return false
      if (e4 < other.e4) return true
      if (e4 > other.e4) return false
      if (e5 < other.e5) return true
      if (e5 > other.e5) return false
      return false

    method cloned->this
      return Tuple<<$T1,$T2,$T3,$T4,$T5>>(e1,e2,e3,e4,e5)
endClass


class Tuple <<$T1,$T2,$T3,$T4,$T5,$T6>> (e1:$T1,e2:$T2,e3:$T3,e4:$T4,e5:$T5,e6:$T6) [compound]
  METHODS
    method to->String
      return "($,$,$,$,$,$)" (e1,e2,e3,e4,e5,e6)

    method hash_code->Int32
      return e1.hash_code ~ e2.hash_code ~ e3.hash_code ~ e4.hash_code ~ e5.hash_code ~ e6.hash_code

    method operator== (other:Tuple<<$T1,$T2,$T3,$T4,$T5,$T6>>)->Logical
      if (e1 != other.e1) return false
      if (e2 != other.e2) return false
      if (e3 != other.e3) return false
      if (e4 != other.e4) return false
      if (e5 != other.e5) return false
      if (e6 != other.e6) return false
      return true

    method operator< (other:Tuple<<$T1,$T2,$T3,$T4,$T5,$T6>>)->Logical
      if (e1 < other.e1) return true
      if (e1 > other.e1) return false
      if (e2 < other.e2) return true
      if (e2 > other.e2) return false
      if (e3 < other.e3) return true
      if (e3 > other.e3) return false
      if (e4 < other.e4) return true
      if (e4 > other.e4) return false
      if (e5 < other.e5) return true
      if (e5 > other.e5) return false
      if (e6 < other.e6) return true
      if (e6 > other.e6) return false
      return false

    method cloned->this
      return Tuple<<$T1,$T2,$T3,$T4,$T5,$T6>>(e1,e2,e3,e4,e5,e6)
endClass


class Tuple <<$T1,$T2,$T3,$T4,$T5,$T6,$T7>> (e1:$T1,e2:$T2,e3:$T3,e4:$T4,e5:$T5,e6:$T6,e7:$T7) [compound]
  METHODS
    method to->String
      return "($,$,$,$,$,$,$)" (e1,e2,e3,e4,e5,e6,e7)

    method hash_code->Int32
      return e1.hash_code ~ e2.hash_code ~ e3.hash_code ~ e4.hash_code ~ e5.hash_code ~ e6.hash_code ~ e7.hash_code

    method operator== (other:Tuple<<$T1,$T2,$T3,$T4,$T5,$T6,$T7>>)->Logical
      if (e1 != other.e1) return false
      if (e2 != other.e2) return false
      if (e3 != other.e3) return false
      if (e4 != other.e4) return false
      if (e5 != other.e5) return false
      if (e6 != other.e6) return false
      if (e7 != other.e7) return false
      return true

    method operator< (other:Tuple<<$T1,$T2,$T3,$T4,$T5,$T6,$T7>>)->Logical
      if (e1 < other.e1) return true
      if (e1 > other.e1) return false
      if (e2 < other.e2) return true
      if (e2 > other.e2) return false
      if (e3 < other.e3) return true
      if (e3 > other.e3) return false
      if (e4 < other.e4) return true
      if (e4 > other.e4) return false
      if (e5 < other.e5) return true
      if (e5 > other.e5) return false
      if (e6 < other.e6) return true
      if (e6 > other.e6) return false
      if (e7 < other.e7) return true
      if (e7 > other.e7) return false
      return false

    method cloned->this
      return Tuple<<$T1,$T2,$T3,$T4,$T5,$T6,$T7>>(e1,e2,e3,e4,e5,e6,e7)
endClass


class Tuple <<$T1,$T2,$T3,$T4,$T5,$T6,$T7,$T8>> (e1:$T1,e2:$T2,e3:$T3,e4:$T4,e5:$T5,e6:$T6,e7:$T7,e8:$T8) [compound]
  METHODS
    method to->String
      return "($,$,$,$,$,$,$,$)" (e1,e2,e3,e4,e5,e6,e7,e8)

    method hash_code->Int32
      return e1.hash_code ~ e2.hash_code ~ e3.hash_code ~ e4.hash_code ~ e5.hash_code ~ e6.hash_code ~ e7.hash_code ~ e8.hash_code

    method operator== (other:Tuple<<$T1,$T2,$T3,$T4,$T5,$T6,$T7,$T8>>)->Logical
      if (e1 != other.e1) return false
      if (e2 != other.e2) return false
      if (e3 != other.e3) return false
      if (e4 != other.e4) return false
      if (e5 != other.e5) return false
      if (e6 != other.e6) return false
      if (e7 != other.e7) return false
      if (e8 != other.e8) return false
      return true

    method operator< (other:Tuple<<$T1,$T2,$T3,$T4,$T5,$T6,$T7,$T8>>)->Logical
      if (e1 < other.e1) return true
      if (e1 > other.e1) return false
      if (e2 < other.e2) return true
      if (e2 > other.e2) return false
      if (e3 < other.e3) return true
      if (e3 > other.e3) return false
      if (e4 < other.e4) return true
      if (e4 > other.e4) return false
      if (e5 < other.e5) return true
      if (e5 > other.e5) return false
      if (e6 < other.e6) return true
      if (e6 > other.e6) return false
      if (e7 < other.e7) return true
      if (e7 > other.e7) return false
      if (e8 < other.e8) return true
      if (e8 > other.e8) return false
      return false

    method cloned->this
      return Tuple<<$T1,$T2,$T3,$T4,$T5,$T6,$T7,$T8>>(e1,e2,e3,e4,e5,e6,e7,e8)
endClass


class Tuple <<$T1,$T2,$T3,$T4,$T5,$T6,$T7,$T8,$T9>> (e1:$T1,e2:$T2,e3:$T3,e4:$T4,e5:$T5,e6:$T6,e7:$T7,e8:$T8,e9:$T9) [compound]
  METHODS
    method to->String
      return "($,$,$,$,$,$,$,$,$)" (e1,e2,e3,e4,e5,e6,e7,e8,e9)

    method hash_code->Int32
      return e1.hash_code ~ e2.hash_code ~ e3.hash_code ~ e4.hash_code ~ e5.hash_code ~ e6.hash_code ~ e7.hash_code ~ e8.hash_code ~ e9.hash_code

    method operator== (other:Tuple<<$T1,$T2,$T3,$T4,$T5,$T6,$T7,$T8,$T9>>)->Logical
      if (e1 != other.e1) return false
      if (e2 != other.e2) return false
      if (e3 != other.e3) return false
      if (e4 != other.e4) return false
      if (e5 != other.e5) return false
      if (e6 != other.e6) return false
      if (e7 != other.e7) return false
      if (e8 != other.e8) return false
      if (e9 != other.e9) return false
      return true

    method operator< (other:Tuple<<$T1,$T2,$T3,$T4,$T5,$T6,$T7,$T8,$T9>>)->Logical
      if (e1 < other.e1) return true
      if (e1 > other.e1) return false
      if (e2 < other.e2) return true
      if (e2 > other.e2) return false
      if (e3 < other.e3) return true
      if (e3 > other.e3) return false
      if (e4 < other.e4) return true
      if (e4 > other.e4) return false
      if (e5 < other.e5) return true
      if (e5 > other.e5) return false
      if (e6 < other.e6) return true
      if (e6 > other.e6) return false
      if (e7 < other.e7) return true
      if (e7 > other.e7) return false
      if (e8 < other.e8) return true
      if (e8 > other.e8) return false
      if (e9 < other.e9) return true
      if (e9 > other.e9) return false
      return false

    method cloned->this
      return Tuple<<$T1,$T2,$T3,$T4,$T5,$T6,$T7,$T8,$T9>>(e1,e2,e3,e4,e5,e6,e7,e8,e9)
endClass
