class TypeInfo [requisite]
  PROPERTIES
    index             : Int32
    name              : String
    global_properties = PropertyInfo[]
    properties        = PropertyInfo[]

  METHODS
    method init( index, name ) [requisite]

    method add_global_property_info( global_property_name_index:Int32, global_property_type_index:Int32 ) [requisite]
      global_properties.add( PropertyInfo(global_property_name_index, global_property_type_index) )

    method add_property_info( property_name_index:Int32, property_type_index:Int32 ) [requisite]
      properties.add( PropertyInfo(property_name_index, property_type_index) )

    method create_object->Object
      native @|return RogueType_create_object( &Rogue_types[$index], 0 );

    method get_global_property<<$PropertyType>>( property_name:String )->$PropertyType
      forEach (i in 0..<global_property_count)
        if (global_property_name(i) == property_name)
          if ($PropertyType isReference)
            return native( "*((RogueObject**)(Rogue_types[$index].global_property_pointers[$i]))" )->Object as $PropertyType
          else
            return native( "*(($($PropertyType)*)(Rogue_types[$index].global_property_pointers[$i]))" )->$PropertyType
          endIf
        endIf
      endForEach

      local default_value : $PropertyType
      return default_value

    method global_property_count->Int32
      # Convenience method to provide symmetric interface with per-object `property_count` methods.
      return global_properties.count

    method global_property_name( global_property_index:Int32 )->String
      # Convenience method to provide symmetric interface with per-object `property_name` methods.
      return global_properties[ global_property_index ].property_name

    method is_aspect->Logical
      return native( "Rogue_types[$index].attributes & ROGUE_ATTRIBUTE_IS_ASPECT" )->Logical

    method is_class->Logical
      return native( "Rogue_types[$index].attributes & ROGUE_ATTRIBUTE_IS_CLASS" )->Logical

    method is_compound->Logical
      return native( "Rogue_types[$index].attributes & ROGUE_ATTRIBUTE_IS_COMPOUND" )->Logical

    method is_direct->Logical
      return native( "Rogue_types[$index].attributes & ROGUE_ATTRIBUTE_IS_DIRECT" )->Logical

    method is_primitive->Logical
      return native( "Rogue_types[$index].attributes & ROGUE_ATTRIBUTE_IS_PRIMITIVE" )->Logical

    method is_reference->Logical
      return native( "!(Rogue_types[$index].attributes & ROGUE_ATTRIBUTE_IS_DIRECT)" )->Logical

    method set_global_property<<$PropertyType>>( property_name:String, value:$PropertyType )->this
      forEach (i in 0..<global_property_count)
        if (global_property_name(i) == property_name)
          if ($PropertyType isReference)
            native( "*((RogueObject**)(Rogue_types[$index].global_property_pointers[$i])) = $value;" )
          else
            native( "*(($($PropertyType)*)(Rogue_types[$index].global_property_pointers[$i])) = $value;" )
          endIf
          return this
        endIf
      endForEach

      return this

    method to->String
      return name
endClass

class PropertyInfo
  PROPERTIES
    property_name_index : Int32
    property_type_index : Int32

  METHODS
    method init( property_name_index, property_type_index )

    method property_name->String
      return Runtime.literal_string( property_name_index )

    method property_type_info->TypeInfo
      return Runtime.type_info( property_type_index )

    method to->String
      return "$:$" (property_name,property_type_info.name)

endClass

