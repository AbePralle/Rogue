module ConsoleUI
  uses Geometry [export]
  uses UI [export]
  uses Utility/TextCanvas

class ConsoleUI : UI
  PROPERTIES
    mouse_position : XY?
    button_pressed = Dim<<Logical>>(2)

  METHODS
    method init
      prior.init( ConsoleUITheme )

    method draw
      prior.draw
      ConsoleUICanvas.display( XY(0,0) )
      Console.set_cursor( 0, Console.height-2 )

    method handle( e:PointerEvent )
      if (mouse_position.exists) e.delta = e.position - mouse_position.value
      mouse_position = e.position
      prior.handle( e )

    method handle( type:Int32, index:Int32, e:ConsoleEvent )
      # Only called when e is a pointer or scroll event
      local pos = XY( e.x, e.y )
      Pointer.position = pos
      Pointer.positions.clear.add( pos )
      handle( PointerEvent(type,pos,XY(0,0),index) )

    method on_resize
      Console.clear
      local bounds = current_bounds.value
      ConsoleUICanvas.resize( bounds.size.x, bounds.size.y )
      prior.on_resize

    method on_update
      loop 2048
        if (Console.has_another_event)
          local event = Console.read_event
          which (event.type)
            case ConsoleEventType.CHARACTER
              local unicode = event.unicode
              local (keycode,is_shifted) = Keycode.unicode_to_keycode( unicode )
              local syscode            = which{ keycode==Keycode.UNICODE:unicode->Int32 || 0 }
              local modifier_key_state = which{ is_shifted:Keyboard.SHIFT_MODIFIER_FLAG || 0 }
              Keyboard.key_pressed[ keycode ] = true
              Keyboard.key_pressed[ Keycode.LEFT_SHIFT ]  = is_shifted
              Keyboard.key_pressed[ Keycode.RIGHT_SHIFT ] = is_shifted
              handle( KeyEvent(keycode,syscode,&is_press,&!is_repeat,&=modifier_key_state) )
              Keyboard.key_pressed[ keycode ] = false
              Keyboard.key_pressed[ Keycode.LEFT_SHIFT ]  = false
              Keyboard.key_pressed[ Keycode.RIGHT_SHIFT ] = false
              handle( KeyEvent(keycode,syscode,&!is_press,&!is_repeat,&=modifier_key_state) )
              handle( TextEvent(unicode,null) )

            case ConsoleEventType.POINTER_PRESS_LEFT
              send_release_event( PointerEvent.RIGHT, event )
              button_pressed[ PointerEvent.LEFT ] = true
              handle( PointerEvent.PRESS, PointerEvent.LEFT, event )

            case ConsoleEventType.POINTER_PRESS_RIGHT
              send_release_event( PointerEvent.LEFT, event )
              button_pressed[ PointerEvent.RIGHT ] = true
              handle( PointerEvent.PRESS, PointerEvent.RIGHT, event )

            case ConsoleEventType.POINTER_RELEASE
              send_release_event( PointerEvent.LEFT, event )
              send_release_event( PointerEvent.RIGHT, event )

            case ConsoleEventType.POINTER_MOVE
              handle( PointerEvent.MOVE, 0, event )

            case ConsoleEventType.SCROLL_UP
              handle( ScrollEvent(XY(0,-1)) )

            case ConsoleEventType.SCROLL_DOWN
              handle( ScrollEvent(XY(0, 1)) )

          endWhich
        else
          escapeLoop
        endIf
      endLoop

    method send_release_event( index:Int32, event:ConsoleEvent )
      if (not button_pressed[index]) return
      button_pressed[index] = false
      handle( PointerEvent.RELEASE, index, event )

    method set_clip( @clip )
      if (clip) ConsoleUICanvas.clip = clip.value

endClass

class ConsoleUITheme : UITheme [singleton]
  METHODS
    method default_font->UIFont [override]
      if (not @default_font) @default_font = ConsoleUIFont
      return @default_font

    method on_draw( component:UIComponent )
      ConsoleUICanvas.fill( component.display_bounds, "CCCC CCCC" )

    method on_draw( component:UIBoxFrame )
      ConsoleUICanvas.fill( component.display_bounds, "\[250C]\[2500]\[2510]\[2502] \[2502]\[2514]\[2500]\[2518]" )

    method on_draw( component:UILayout )
      noAction

    method on_draw( component:UIScrollView )
      noAction

    method on_draw( component:UIText )
      if (component.is_style_bold)      ConsoleUICanvas.style.bold
      if (component.is_style_italic)    ConsoleUICanvas.style.underline
      if (component.is_style_inverse)   ConsoleUICanvas.style.inverse
      if (component.is_style_underline) ConsoleUICanvas.style.underline

      local font = component.font
      local text = component.value
      local text_size = font.measure( text )
      local position  = Box(text_size).positioned_within( component.display_bounds, component.alignment ).position.floor
      font.draw( text, position )

      if (component.is_style_bold)      ConsoleUICanvas.style.bold_off
      if (component.is_style_italic)    ConsoleUICanvas.style.underline_off
      if (component.is_style_inverse)   ConsoleUICanvas.style.inverse_off
      if (component.is_style_underline) ConsoleUICanvas.style.underline_off

    method on_draw( component:ConsoleUIButton )
      ConsoleUICanvas.fill( component.display_bounds, "\[250C]\[2500]\[2510]\[2502] \[2502]\[2514]\[2500]\[2518]" )

      if (component.is_pressed)
        ConsoleUICanvas.style.inverse
        ConsoleUICanvas.style.dim
      elseIf (component.is_targeted)
        ConsoleUICanvas.style.inverse
      endIf

      block font=component.font, text=component.text, display_bounds=component.display_bounds
        local text_size = font.measure( text )
        local position  = display_bounds.position + XY(1,1)
        ConsoleUICanvas.set_cursor( position )
        local left_padding = (((display_bounds.width-2) - text_size.x) / 2).floor
        local right_padding = ((display_bounds.width-2) - (left_padding+text_size.x))
        loop (left_padding) ConsoleUICanvas.print ' '
        ConsoleUICanvas.print text
        loop (right_padding) ConsoleUICanvas.print ' '
      endBlock

      ConsoleUICanvas.style.inverse_off
      ConsoleUICanvas.style.dim_off
endClass

class ConsoleUIButton : UIButton
  METHODS
    method draw_subcomponents( draw_bounds:Box )
      noAction

    method on_measure
      default_size = font.measure( text ).floor + XY(2,2)
endClass

class UIBoxFrame : UIComponent
  METHODS
    method padding->UIPadding
      return prior.padding + 1

    method update_subcomponent_sizes( container_size:XY )->XY [override]
      local min_size : XY
      forEach (component in children)
        component.update_layout_size( container_size )
        min_size .= or_larger( component.size )
      endForEach
      return min_size
endClass

class ConsoleUICanvas : TextCanvas [singleton]
  METHODS
    method init
      prior.init( Console.width, Console.height )
endClass

class ConsoleUIFont : UIFont [singleton]
  METHODS
    method init
      prior.init( "ConsoleUIFont" )

    method draw( text:String, position:XY ) [override]
      ConsoleUICanvas.set_cursor( position )
      ConsoleUICanvas.print text

    method height->Real64
      return 1

    method measure( ch:Character )->XY
      which (ch)
        case '\n': return XY(0,1)
        case '\t': return XY(2,1)
        others
          if (ch < 32) return XY.zero
          else         return XY(1,1)
      endWhich

    method word_wrap( text:String, max_width:Int32  )->String[]
      return text.word_wrap( max_width )
endClass

