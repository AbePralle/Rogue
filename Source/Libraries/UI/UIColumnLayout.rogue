module UI

class UIColumnLayout : UILayout
  METHODS
    method horizontal_flex->Real64
      if (not layout) return 0.0

      local flex = 0.0
      forEach (component in layout)
        flex += component.horizontal_flex
      endForEach
      return flex

    method maximum_width( &subcomponents_only )->Real64
      if (not subcomponents_only)
        local fixed_x = fixed_size.x
        if (fixed_x) return fixed_x
      endIf
      if (not layout or layout.is_empty) return 0

      local max_width = 0
      forEach (component in layout)
        local w = component.maximum_width
        if (w == 0) return 0
        max_width += w
      endForEach
      return max_width

    method maximum_height( &subcomponents_only )->Real64
      if (not subcomponents_only)
        local fixed_y = fixed_size.y
        if (fixed_y) return fixed_y
      endIf
      if (not layout or layout.is_empty) return 0

      local max_height = 0
      forEach (component in layout)
        local h = component.maximum_height
        if (h == 0) return 0
        max_height = max_height.or_larger( h )
      endForEach
      return max_height

    method minimum_width( &subcomponents_only )->Real64
      if (not subcomponents_only)
        local fixed_x = fixed_size.x
        if (fixed_x) return fixed_x
      endIf
      if (not layout or layout.is_empty) return 0

      local min_width = 0
      forEach (component in layout)
        min_width += component.minimum_width
      endForEach
      return min_width

    method minimum_height( &subcomponents_only )->Real64
      if (not subcomponents_only)
        local fixed_y = fixed_size.y
        if (fixed_y) return fixed_y
      endIf
      if (not layout or layout.is_empty) return 0

      local min_height = 0
      forEach (component in layout)
        min_height = min_height.or_larger( component.minimum_height )
      endForEach
      return min_height

    method operator+( right_component:UIComponent )->UIComponent
      add( right_component )
      return this

    method operator/( bottom_component:UIComponent )->UIComponent
      return UILayout.v.[ add(this), add(bottom_component) ]

    method update_subcomponent_layout
      # Horizontal
      local content_width = minimum_width( &subcomponents_only )
      local max_width = maximum_width

      local min_width = this.size.x
      if (min_width < content_width) min_width = content_width
      if (max_width and min_width > max_width) min_width = max_width

      if (min_width > content_width)
        # Distribute extra width (beyond minimum) to components before laying out
        local extra = min_width - content_width
        local total_flex = this.horizontal_flex
        forEach (component in layout)
          local flex = component.horizontal_flex
          if (flex)
            local w = Int32( extra * flex / total_flex )
            total_flex -= flex
            component.@size = XY(component.minimum_width+w,0)
            extra -= w
          else
            component.@size = component.minimum_size
          endIf
        endForEach

      else
        # All components get set to their minimum width
        forEach (component in layout)
          component.@size = component.minimum_size
        endForEach
      endIf

      local x = @position.x
      forEach (component in layout)
        local min_height = component.minimum_height
        local max_height = component.maximum_height
        local content_height = this.size.y
        if (content_height < min_height) content_height = min_height
        if (max_height and content_height > max_height) content_height = max_height
        local y = @position.y
        local w = component.size.x
        component.update_layout( Box(x,y,w,this.size.y).subset(XY(w,content_height), component.anchor)+offset )
        x += w
      endForEach

    method vertical_flex->Real64
      return which{ minimum_height:0.0 || 1.0 }
endClass
