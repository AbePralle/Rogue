module UI

class UIManager : UIComponent [singleton]
  # Intended to be the root controller of any number of different UIComponent hierarchies.
  # Tracks current focus and reroutes events to focused components as necessary with cooperation
  # of individual components.
  PROPERTIES
    theme          : UITheme
    drag_threshold = 8

    keyboard_focus : UIComponent
    pointer_focus  : UIComponent
    pointer_press  : PointerEvent  # used to remember origin and timestamp of drag start
    is_dragging    : Logical

  METHODS
    method focus( e:PointerEvent, target:UIComponent )
      pointer_focus = target
      pointer_press = e
      is_dragging = false
      e.is_processed = true
      e.consume

    method handle( e:PointerEvent, root:UIComponent )
      e.is_processed = true
      if (pointer_focus is null)
        root.handle( e )
        return
      endIf

      if (e.is_release)
        if (is_dragging)
          is_dragging = false
          e.type = PointerEvent.DRAG_STOP
        endIf
        pointer_focus.handle( e )
        pointer_focus = null
      elseIf (e.is_move)
        if (is_dragging)
          e.type = PointerEvent.DRAG_MOVE
          pointer_focus.handle( e )
        else
          if ((e.position - pointer_press.position).magnitude_squared >= drag_threshold^2)
            is_dragging = true
            local drag_start = pointer_press.cloned.[ type=PointerEvent.DRAG_START ]
            pointer_focus.handle( drag_start )
            e.type  = PointerEvent.DRAG_STOP
            e.delta = e.position - pointer_press.position
            pointer_focus.handle( e )
          endIf
        endIf
      endIf

    method theme->UITheme
      if (@theme) return @theme

      println "No UITheme selected. Before creating a UI, write e.g.:"
      $if (target("Plasmacore"))
        println "  UIManager.theme = SimpleUITheme"
      $else
        println "  UIManager.theme = SomeUITheme()"
      $endIf

      @theme = UITheme()
      return @theme

endClass

