module UI

class UIModifier : UIComponent
  METHODS
    method attributes->UIAttribute
      if (first_child) return first_child.attributes
      else             return null

    method can_split->Logical
      if (first_child) return first_child.can_split
      else             return false

    method can_split( max_width:Int32 )->Logical
      if (first_child) return first_child.can_split( max_width )
      else             return false

    method contains_newline->Logical
      if (first_child) return first_child.contains_newline
      else             return false

    method content_position->XY
      if (first_child)
        if (parent) return parent.content_position
        else        return XY.zero
      else
        return prior.content_position
      endIf

    method display_position->XY
      if (first_child)
        if (parent) return parent.content_position
        else        return XY.zero
      else
        return prior.display_position
      endIf

    method draw( draw_bounds:Box )
      if (first_child) first_child.draw( draw_bounds )

    method find( pos:XY, &always_check_subcomponents )->UIComponent
      if (next)
        # Recursively find the last sibling that contains 'pos'
        local result = next.find( pos, &=always_check_subcomponents )
        if (result) return result
      endIf

      if (not first_child) return null
      return first_child.find( pos, &=always_check_subcomponents )

    method first_element_width->Real64
      if (first_child) return first_child.first_element_width
      else             return 0

    method flags->Int32
      if (first_child) return first_child.flags
      else             return 0

    method measure [override]
      if (first_child) first_child.measure

    method set_attributes( attributes:UIAttribute )
      if (first_child) first_child.attributes = attributes

    method set_flags( flags:Int32 )
      if (first_child) first_child.flags = flags

    method update_layout( placement:UIIntervalPlacement )->UIIntervalPlacement
      if (first_child)
        placement = first_child.update_layout( placement )
        @position = first_child.@position
        @size     = first_child.@size
      endIf
      return placement
endClass

