module UI

class UIText : UITextComponent
  PROPERTIES
    value : String

  METHODS
    method init

    method init( value )
      if (value.count > 1 and value.contains('\n'))
        local left  = value.before_first('\n')
        local right = value.after_first('\n')
        if (String.exists(left))  add( UIText(left) )
        add( UINewline() )
        if (String.exists(right)) add( UIText(right) )
      endIf

    method on_measure [override]
      size = font.measure( value )

    method text->String
      if (count) return prior.text
      else       return value

    method to->String
      if (count) return prior.to_String
      else       return "UIText($)" (value)

    method update_layout_size( sizer:UIContentSizer )->UIContentSizer
      if (count)
        # Prior version will call update_layout_size() on each child individually
        return prior.update_layout_size( sizer )
      endIf

      local available_w = sizer.available_width
      if (size.x <= available_w or value.count <= 1)
        return prior.update_layout_size( sizer )
      endIf

      # Find a space to break after
      local font = this.font
      local first_i = value.locate( ' ' )
      if (first_i.exists)
        forEach (i in value.count-2 downTo 0)
          if (value[i] == ' ')
            if (font.measure(value,0,i+1).x <= available_w or i == first_i.value)
              add( UIText( value.leftmost(i+1) ).[ measure ] )
              add( UIText( value.from(i+1) ).[ measure ] )
              return update_layout_size( sizer )
            endIf
          endIf
        endForEach
      endIf

      return prior.update_layout_size( sizer )
endClass

