module UI

class UITextComponent : UIComponent
  METHODS
    method anchor->Anchor
      if (parent and parent instanceOf UITextComponent) return parent.anchor
      return prior.anchor

    method content_position->XY
      # Do not add this UITextComponent's position or offset if child fragments exist
      if (first_child)
        if (parent) return parent.content_position
        else        return XY.zero
      else
        return prior.content_position
      endIf

    method display_position->XY
      # Do not add this UITextComponent's position if child fragments exist
      if (first_child)
        if (parent) return parent.content_position
        else        return XY.zero
      else
        return prior.display_position
      endIf

    method draw( clip:Box )
      if (count)
        forEach (child in children)
          child.draw( clip )
        endForEach
      else
        prior.draw( clip )
      endIf

    method find( pos:XY, &always_check_subcomponents )->UIComponent
      return prior.find( pos, &always_check_subcomponents )
      # Note this is passing always_check_subcomponents=true

    method font->UIFont
      if (parent and parent instanceOf UITextComponent) return parent.font
      return prior.font

    method measure [override]
      if (count)
        (forEach in children).measure
      else
        prior.measure
      endIf

    method text->String [override]
      if (count)
        if (count == 1) return first_child.text

        use builder = StringBuilder.pool
          builder.print( (forEach in children).text )
          return builder->String
        endUse
      else
        return prior.text
      endIf

    method to->String
      use builder = StringBuilder.pool
        builder.[ print type_name, print '(' ]
        builder.print( (forEach in children)->String )
        builder.print ')'
        return builder->String
      endUse

    method update_layout_size( container_size:XY )
      if (count)
        (forEach in children).measure
        (forEach in children).update_layout_size( container_size )
      else
        prior.update_layout_size( container_size )
      endIf

    method update_layout( placer:UIContentPlacer )->UIContentPlacer
      if (count)
        # Update position of child fragments
        placer = (forEach in children).update_layout( placer )
        return placer
      else
        return prior.update_layout( placer )
      endIf

    method update_layout_size( sizer:UIContentSizer )->UIContentSizer
      if (count)
        # Update size of child fragments
        forEach (subcomponent in children)
          sizer = subcomponent.update_layout_size( sizer )
        endForEach
        return sizer
      endIf

      return prior.update_layout_size( sizer )

    method update_subcomponent_layout
      if (count)
        (forEach in children).update_subcomponent_layout
        return
      else
        prior.update_subcomponent_layout
      endIf

    method update_subcomponent_sizes( container_size:XY )->XY
      # Returns minimum size to enclose all subcomponents
      local min_size : XY
      if (count)
        min_size .= or_larger( (forEach in children).update_subcomponent_sizes(container_size) )
        return min_size
      else
        return prior.update_subcomponent_sizes( container_size )
      endIf
endClass


class UINewline : UIComponent
  METHODS
    method on_draw
      noAction
    
    method on_measure
      size = XY( 0, font.height )

    method update_layout( placement:UIContentPlacer )->UIContentPlacer
      position = placement.cursor
      return placement.with_newline( size.y )

    method update_layout_size( sizer:UIContentSizer )->UIContentSizer
      return sizer.with_newline( size.y )
endClass

