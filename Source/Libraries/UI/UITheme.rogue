module UI

class UITheme
  PROPERTIES
    _printed_configuration_error_message : Logical

  METHODS
    method renderer( component:UIComponent )->UIRenderer
      return null  # Can return null for anything that doesn't need to be drawn

    method _configure_components( root:UIComponent )
      noAction

    #method _dispatch_assign_renderer( component:UIComponent )
      #component.renderer = null

    #method _dispatch_dispatch_configure( component:UIComponent )
      #noAction
endClass

class UITheme<<$ExtendedType>> : UITheme
  PROPERTIES
    fn_configure = this=>_configure_component : Function(UIComponent)->Logical

  METHODS
    method configure( component:UIComponent )
      noAction

    # write additional configure(ExtendedUIComponent) methods as desired
    method _configure_components( root:UIComponent )
      root.apply( fn_configure )

    method _configure_component( component:UIComponent )->Logical [propagated]
      component._dispatch_configure<<ThisType>>( this )
      #{
      if (ThisType isType $ExtendedType)
        component._dispatch_configure<<$ThisType>>( this )
      elseIf (ThisType instanceOf $ExtendedType)
        component._dispatch_configure<<ThisType>>( this )
        #{
        if (not _printed_configuration_error_message)
          println "Theme configuration incomplete. Add this method to your extended theme:"
          println "  method _configure_component( component:UIComponent )->Logical"
          println "    component._dispatch_configure<<ExtendedTypeName>>( this )"
          println "    return true"
          _printed_configuration_error_message = true
        endIf
        }#
      endIf
      }#
      return true

      #{
    method _dispatch_assign_renderer( component:UIComponent ) [propagated]
      component._assign_renderer<<$ExtendedType>>( this as $ExtendedType )
      }#
endClass

