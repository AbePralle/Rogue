$include "Scope.rogue"

class CmdType
  ENUMERATE
    STATEMENT_LIST
    DECLARE_GLOBAL
    LOG
    LOG_VALUE
    LITERAL_INTEGER
    LITERAL_REAL
    LITERAL_STRING
    ADD
endClass

class Cmd
  PROPERTIES
    t : Token

  METHODS
    method require_value->Cmd
      if (not type)
        throw t.error( "Value expected but expression does not result in a value." );
      endIf
      return this

    method resolve( scope:Scope )->Cmd
      throw t.error( "[INTERNAL] $::resolve(Scope) is undefined." (type_name) )

    method type->Type
      return null

    method write( writer:ETCWriter )
      throw t.error( "[INTERNAL] $::write(ETCWriter) is undefined." (type_name) )
endClass

class CmdStatementList
  PROPERTIES
    statements = Cmd[]

  METHODS
    method add( statement:Cmd )->this
      statements.add( statement )
      return this

    method resolve( scope:Scope )
      forEach (i of statements)
        statements[i] = statements[i].resolve( scope )
      endForEach

    method write( writer:ETCWriter )
      writer.write_integer_x( statements.count )
      forEach (statement in statements)
        statement.write( writer )
      endForEach
endClass

class CmdDeclareGlobal : Cmd
  PROPERTIES
    info : GlobalVar

  METHODS
    method init( t, info )

    method resolve( scope:Scope )->Cmd
      return this

    method write( writer:ETCWriter )
      writer.write_integer_x( CmdType.DECLARE_GLOBAL )
      writer.write_identifier( info.name )
      writer.write_type( info.type )
endClass

class CmdLiteralInteger : Cmd
  PROPERTIES
    value : Integer

  METHODS
    method init( t, value )

    method resolve( scope:Scope )->Cmd
      return this

    method write( writer:ETCWriter )
      writer.write_integer_x( CmdType.LITERAL_INTEGER )
      writer.write_integer_x( value )
endClass

class CmdLiteralReal : Cmd
  PROPERTIES
    value : Real

  METHODS
    method init( t, value )

    method resolve( scope:Scope )->Cmd
      return this

    method write( writer:ETCWriter )
      writer.write_integer_x( CmdType.LITERAL_REAL )
      writer.write_real( value )
endClass

class CmdLiteralString : Cmd
  PROPERTIES
    value : String

  METHODS
    method init( t, value )

    method resolve( scope:Scope )->Cmd
      return this

    method write( writer:ETCWriter )
      writer.write_integer_x( CmdType.LITERAL_STRING )
      writer.write_integer_x( value.count )
      forEach (ch in value)
        writer.write_integer_x( ch )
      endForEach
endClass

class CmdLog : Cmd
  PROPERTIES
    operand : Cmd

  METHODS
    method init( t, operand )

    method resolve( scope:Scope )->Cmd
      if (operand) operand = operand.resolve( scope )
      return this

    method write( writer:ETCWriter )
      if (operand)
        writer.write_integer_x( CmdType.LOG_VALUE )
        operand.write( writer )
      else
        writer.write_integer_x( CmdType.LOG )
      endIf
endClass

class CmdBinaryOp : Cmd
  PROPERTIES
    left  : Cmd
    right : Cmd

  METHODS
    method init( t, left, right )
endClass

class CmdAdd : CmdBinaryOp
  METHODS
    method resolve( scope:Scope )->Cmd
      return this

    method write( writer:ETCWriter )
      writer.write_integer_x( CmdType.ADD )
      left.write( writer )
      right.write( writer )
endClass

