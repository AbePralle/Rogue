class ETCWriter
  PROPERTIES
    buffer  = StringBuilder(1024)
    strings = Table<<String,Integer>>()
    types   = Table<<String,Integer>>()

  METHODS
    method write_byte( value:Integer )->this
      buffer.print( (value & 255)->Character )
      return this

    method write_integer( value:Integer )->this
      write_byte( value :>>: 24 )
      write_byte( value :>>: 16 )
      write_byte( value :>>: 8 )
      write_byte( value )
      return this

    method write_integer_x( value:Integer )->this
      if (value >= -64 and value <= 127)
        # 0ddd dddd (0..127) OR
        # 11dd dddd (-64..-1)
        write_byte( value )

      elseIf (value >= -0x800 and value < 0x800)
        # 1000 cccc  dddddddd - 12-bit SIGNED value in 2 bytes
        value &= 0xFFF
        write_byte( 0x80 | (value:>>:8) )
        write_byte( value )

      elseIf (value >= -0x80000 and value < 0x80000)
        # 1001 bbbb  cccccccc  dddddddd - 20-bit SIGNED value in 3 bytes
        value &= 0xFffFF
        write_byte( 0x90 | (value:>>:16) )
        write_byte( value:>>:8 )
        write_byte( value )

      elseIf (value >= -0x8000000 and value < 0x8000000)
        # 1010 aaaa  bbbbbbbb  cccccccc  dddddddd - 28-bit SIGNED value in 4 bytes
        value &= 0xfFFffFF
        write_byte( 0xA0 | (value:>>:24) )
        write_byte( value:>>:16 )
        write_byte( value:>>:8 )
        write_byte( value )

      else
        # 1011 xxxx  aaaaaaaa bbbbbbbb cccccccc dddddddd - 32-bit signed value in 5 bytes
        write_byte( 0xB0 )
        write_byte( value:>>:24 )
        write_byte( value:>>:16 )
        write_byte( value:>>:8 )
        write_byte( value )
      endIf

      return this

    method write_real( value:Real )->this
      local c1 = buffer.count
      write_integer( value.high_bits )
      write_integer( value.low_bits )
      return this

    method write_string( value:String )->this
      local entry = strings.find( value )
      if (entry)
        write_integer_x( entry.value )
      else
        local index = strings.count
        strings[ value ] = index
        write_integer_x( index )
        write_integer_x( value.count )
        forEach (ch in value)
          write_integer_x( ch )
        endForEach
      endIf
      return this

    method write_type( type:Type )->this
      local entry = types.find( type.name )
      if (entry)
        # Index only, type name already referenced
        write_integer_x( entry.value )
      else
        # Index followed by type name
        local index = types.count
        types[ type.name ] = index
        write_integer_x( index )
        write_string( type.name )
      endIf
      return this

    method to->String
      return buffer->String
endClass

