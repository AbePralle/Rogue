$include "Tokenizer.rogue"
$include "TokenReader.rogue"

class Parser
  PROPERTIES
    reader : TokenReader

  METHODS
    method init( filepath:String )
      println "Parsing $..." (filepath)
      reader = TokenReader( Tokenizer(filepath).tokenize )

    method consume( token_type:Integer )->Logical
      if (reader.peek.type != token_type) return false
      reader.read
      return true

    method consume_end_cmds->Logical
      local success = false
      while (consume(TokenType.EOL) or consume(TokenType.SYMBOL_SEMICOLON))
        success = true
      endWhile
      return success

    method must_consume( token_type:Integer )
      if (consume(token_type)) return
      local t = reader.peek
      throw reader.peek.error( "Expected $, found $." ...
        (Token.describe(token_type),t.describe) )
      
    method must_consume_end_cmds
      if (not consume_end_cmds) must_consume( TokenType.EOL )

    method parse_elements
      while (not consume(TokenType.EOI))
        local cmd = parse_statement
        Program.immediate_statements.add( cmd )
      endWhile

    method parse_statement->Cmd
      local t = peek

      if (consume(TokenType.KEYWORD_LOG))
        local operand=null : Cmd
        if (not consume_end_cmds)
          operand = parse_expression
          must_consume_end_cmds
        endIf
        return CmdLog( t, operand )
      endIf

      local expression = parse_expression
      must_consume_end_cmds
      return expression

    method parse_expression->Cmd
      return parse_add_or_subtract

    method parse_add_or_subtract( left=null:Cmd )->Cmd
      if (left)
        local t = peek
        if (consume(TokenType.SYMBOL_PLUS))
          return parse_add_or_subtract( CmdAdd(t,left,parse_term) )
        endIf
        return left
      else
        return parse_add_or_subtract( parse_term )
      endIf

    method parse_term->Cmd
      local t = reader.read

      which (t.type)
        case TokenType.LITERAL_INTEGER
          return CmdLiteralInteger( t, (t as LiteralIntegerToken).value )

        case TokenType.LITERAL_STRING
          return CmdLiteralString( t, (t as LiteralStringToken).value )
      endWhich

      throw t.error( "Unexpected $." (t.describe) )

    method peek->Token
      return reader.peek

endClass

