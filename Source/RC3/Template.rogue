class Template
  PROPERTIES
    t                  : Token
    name               : String
    tokens=Token[]     : Token[]
    attributes         = Attributes()
    type_parameters    : TypeParameter[]

  METHODS
    method init( t, name, attribute_flags=0:Integer )
      attributes.add( attribute_flags )

    method add_type_parameter( p_t:Token, p_name:String )->TypeParameter
      if (type_parameters is null) type_parameters = TypeParameter[]
      local param = TypeParameter( p_t, p_name )
      type_parameters.add( param )
      return param

    method element_type->Integer
      return (attributes.flags & Attribute.type_mask)

    method instantiate( type:Type )
      type.t = t
      # replace location of first reference to type with location of type definition

      type.attributes.add( attributes )

      if (type.name.ends_with(']'))
        instantiate_list( type )
      elseIf (type.name.ends_with('?'))
        instantiate_optional( type )
      elseIf (type_parameters)
        instantiate_parameterized_type( type )
      else
        instantiate_standard_type( type )
      endIf

    method instantiate_list( type:Type )
      type.is_list = true
      type.element_type = Program.get_type_reference( t, type.name.leftmost(-2) ).organize

      local is_generic = false
      if (type.element_type.instance_of(Program.type_Object) and type.element_type isNot Program.type_Object)
        is_generic = true
        type.generic_type = Program.get_type_reference( t, "Object[]" )
        type.generic_type.resolve
      endIf

      local instance_tokens = Token[]( tokens.count )
      forEach (template_t in tokens)
        if (template_t.type is TokenType.placeholder_id)
          if (template_t->String == "$DataType")
            if (is_generic)
              # Insert type identifier for generic mapping
              local from_type = type.element_type
              local to_type = Program.type_Object
              instance_tokens.add( TokenType.type_identifier.create_token(template_t,from_type,to_type) )
            else
              instance_tokens.add( TokenType.identifier.create_token(template_t,type.element_type.name) )
            endIf
          else
            instance_tokens.add( template_t )
          endIf
        else
          instance_tokens.add( template_t )
        endIf
      endForEach

      Parser(instance_tokens).parse_type_def( type )

    method instantiate_optional( type:Type )
      type.is_optional = true
      type.element_type = Program.get_type_reference( t, type.name.leftmost(-1) ).organize

      local is_generic = false
      if (type.element_type.instance_of(Program.type_Object) and type.element_type isNot Program.type_Object)
        is_generic = true
        type.generic_type = Program.get_type_reference( t, "Object?" )
        type.generic_type.resolve
      endIf

      local instance_tokens = Token[]( tokens.count )
      forEach (template_t in tokens)
        if (template_t.type is TokenType.placeholder_id)
          if (template_t->String == "$DataType")
            if (is_generic)
              # Insert type identifier for generic mapping
              local from_type = type.element_type
              local to_type = Program.type_Object
              instance_tokens.add( TokenType.type_identifier.create_token(template_t,from_type,to_type) )
            else
              instance_tokens.add( TokenType.identifier.create_token(template_t,type.element_type.name) )
            endIf
          else
            instance_tokens.add( template_t )
          endIf
        else
          instance_tokens.add( template_t )
        endIf
      endForEach

      Parser(instance_tokens).parse_type_def( type )

    method instantiate_parameterized_type( type:Type )
      local instance_tokens = tokens
      local found_generic_type_parameters = false

      local type_specializers = Table<<String,TypeSpecializer>>()

      local specialization_string = type.name.from_first('<')
      if (specialization_string.count == 0)
        throw type.t.error( "Reference to $ is missing required type parameters ($<<...>>)." (type.name,type.name) )
      endIf

      local parser = Parser( t, type.name, type.name.from_first('<') )
      parser.read  # '<<'

      local generic_type_name_buffer = StringBuilder()
      generic_type_name_buffer.print( name ).print( "<<" )

      local buffer = StringBuilder()
      local first = true
      while (first or parser.consume(TokenType.symbol_comma))
        first = false
        local specializer_tokens = Token[]
        parser.parse_specializer( buffer.clear, specializer_tokens )

        local index = type_specializers.count
        if (index >= type_parameters.count) throw t.error( "Too many type specializers given." )
        if (index > 0) generic_type_name_buffer.print(',')

        local param = type_parameters[index]
        local specializer = TypeSpecializer( param.name, index )
        type_specializers[specializer.name] = specializer

        local is_generic = false
        if (param.generic_mapping)
          param.generic_mapping.organize
          local specializer_type = Program.find_type( buffer->String )
          if (specializer_type)
            specializer.type = specializer_type
            specializer_type.organize
            if (specializer_type.instance_of(param.generic_mapping))
              is_generic = true
              found_generic_type_parameters = true
              generic_type_name_buffer.print( param.generic_mapping.name )
            else
              generic_type_name_buffer.print( buffer )
            endIf
          endIf
        else
          generic_type_name_buffer.print( buffer )
        endIf

        if (is_generic)
          specializer.generic_mapping = param.generic_mapping
        else
          specializer.tokens = specializer_tokens
        endIf

      endWhile

      if (type_specializers.count < type_parameters.count)
        throw type.t.error( "Insufficient number of type parameters in $; $ given, $ expected." (type.name,type_specializers.count,type_parameters.count) ) 
      endIf

      if (found_generic_type_parameters)
        generic_type_name_buffer.print( ">>" )
        local generic_type = Program.get_type_reference( t, generic_type_name_buffer->String )
        if (generic_type isNot type)
          type.generic_type = generic_type
          type.generic_type.organize
        endIf
      endIf

      # Create specialized instance tokens
      instance_tokens = Token[]( tokens.count * 2 )
      forEach (template_t in tokens)
        if (template_t.type is TokenType.placeholder_id)
          local specializer = type_specializers[ template_t->String ]
          if (specializer)
            if (specializer.tokens)
              # Insert template copy of tokens
              forEach (specializer_t in specializer.tokens)
                instance_tokens.add( specializer_t )
              endForEach
            else
              # Insert type identifier for generic mapping
              local from_type = specializer.type
              local to_type = specializer.generic_mapping
              instance_tokens.add( TokenType.type_identifier.create_token(template_t,from_type,to_type) )
            endIf
          else
            instance_tokens.add( template_t )
          endIf
        else
          instance_tokens.add( template_t )
        endIf
      endForEach

      Parser(instance_tokens).parse_type_def( type )

    method instantiate_standard_type( type:Type )
      if (type.name.contains('<'))
        throw t.error( "Type parameters given for non-template type." )
      endIf

      Parser(tokens).parse_type_def( type )

endClass


class TypeParameter
  PROPERTIES
    t               : Token
    name            : String
    generic_mapping : Type    # optional
 
  METHODS
    method init( t, name )
endClass


class TypeSpecializer
  PROPERTIES
    name            : String
    index           : Integer

    tokens          : Token[]  # for templates

    # For Generics
    type            : Type
    generic_mapping : Type

  METHODS
    method init( name, index )
endClass

