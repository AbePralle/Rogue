#include <stdio.h>
#include "RogueC.h"

//=============================================================================
//  Rogue.cpp
//
//  Rogue runtime.
//
//  ---------------------------------------------------------------------------
//
//  Created 2015.01.19 by Abe Pralle
//
//  This is free and unencumbered software released into the public domain
//  under the terms of the UNLICENSE ( http://unlicense.org ).
//=============================================================================

#include <fcntl.h>
#include <math.h>
#include <string.h>
#include <sys/timeb.h>
#include <sys/types.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <inttypes.h>

#if !defined(ROGUE_PLATFORM_WINDOWS)
#  include <sys/time.h>
#  include <unistd.h>
#  include <signal.h>
#  include <dirent.h>
#  include <sys/socket.h>
#  include <sys/uio.h>
#  include <sys/stat.h>
#  include <netdb.h>
#  include <errno.h>
#  include <pthread.h>
#endif

#if defined(ANDROID)
#  include <netinet/in.h>
#endif

#if defined(_WIN32)
#  include <direct.h>
#  define chdir _chdir
#endif

#if TARGET_OS_IPHONE
#  include <sys/types.h>
#  include <sys/sysctl.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#ifndef PATH_MAX
#  define PATH_MAX 4096
#endif

//-----------------------------------------------------------------------------
//  GLOBAL PROPERTIES
//-----------------------------------------------------------------------------
RogueLogical       Rogue_configured = 0;
RogueErrorHandler* Rogue_error_handler = 0;
RogueObject*       Rogue_error_object  = 0;
int                Rogue_bytes_allocated_since_gc = 0;
int                Rogue_argc;
const char**       Rogue_argv;
RogueCallStack     Rogue_call_stack;
RogueCallbackInfo  Rogue_on_begin_gc;
RogueCallbackInfo  Rogue_on_end_gc;


//-----------------------------------------------------------------------------
//  RogueType
//-----------------------------------------------------------------------------
RogueArray* RogueType_create_array( int count, int element_size, bool is_reference_array )
{
  if (count < 0) count = 0;
  int data_size  = count * element_size;
  int total_size = sizeof(RogueArray) + data_size;

  RogueArray* array = (RogueArray*) RogueAllocator_allocate_object( RogueTypeArray->allocator, RogueTypeArray, total_size );

  memset( array->bytes, 0, data_size );
  array->count = count;
  array->element_size = element_size;
  array->is_reference_array = is_reference_array;

  return array;
}

RogueObject* RogueType_create_object( RogueType* THIS, RogueInt32 size )
{
  RogueObject* obj;
  RogueInitFn  fn;

  if ( !size ) size = THIS->object_size;
  obj = RogueAllocator_allocate_object( THIS->allocator, THIS, size );

  if ((fn = THIS->init_object_fn)) return fn( obj );
  else                             return obj;
}

void RogueType_print_name( RogueType* THIS )
{
  char buffer[256];
  RogueString* st = Rogue_literal_strings[ THIS->name_index ];
  if (st)
  {
    RogueString_to_c_string( st, buffer, 256 );
    printf( "%s", buffer );
  }
}

RogueType* RogueType_retire( RogueType* THIS )
{
  if (THIS->base_types)
  {
    delete THIS->base_types;
    THIS->base_types = 0;
    THIS->base_type_count = 0;
  }

  return THIS;
}

RogueObject* RogueType_singleton( RogueType* THIS )
{
  RogueInitFn fn;

  if (THIS->_singleton) return THIS->_singleton;

  // NOTE: _singleton must be assigned before calling init_object()
  // so we can't just call RogueType_create_object().
  THIS->_singleton = RogueAllocator_allocate_object( THIS->allocator, THIS, THIS->object_size );

  if ((fn = THIS->init_object_fn)) THIS->_singleton = fn( THIS->_singleton );

  if ((fn = THIS->init_fn)) return fn( THIS->_singleton );
  else                      return THIS->_singleton;

  return THIS->_singleton;
}

//-----------------------------------------------------------------------------
//  RogueObject
//-----------------------------------------------------------------------------
RogueObject* RogueObject_as( RogueObject* THIS, RogueType* specialized_type )
{
  if (RogueObject_instance_of(THIS,specialized_type)) return THIS;
  return 0;
}

RogueLogical RogueObject_instance_of( RogueObject* THIS, RogueType* ancestor_type )
{
  RogueType* this_type;

  if ( !THIS ) return true;

  this_type = THIS->type;
  if (this_type == ancestor_type) return true;

  int count = this_type->base_type_count;
  RogueType** base_type_ptr = this_type->base_types - 1;
  while (--count >= 0)
  {
    if (ancestor_type == *(++base_type_ptr)) return true;
  }

  return false;
}

void* RogueObject_retain( RogueObject* THIS )
{
  if (THIS) ++THIS->reference_count;
  return THIS;
}

void* RogueObject_release( RogueObject* THIS )
{
  if (THIS) --THIS->reference_count;
  return THIS;
}

void RogueObject_trace( void* obj )
{
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
}

void RogueString_trace( void* obj )
{
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
}

void RogueArray_trace( void* obj )
{
  int count;
  RogueObject** src;
  RogueArray* array = (RogueArray*) obj;

  if ( !array || array->object_size < 0 ) return;
  array->object_size = ~array->object_size;

  if ( !array->is_reference_array ) return;

  count = array->count;
  src = array->objects + count;
  while (--count >= 0)
  {
    RogueObject* cur = *(--src);
    if (cur && cur->object_size >= 0)
    {
      cur->type->trace_fn( cur );
    }
  }
}

//-----------------------------------------------------------------------------
//  RogueString
//-----------------------------------------------------------------------------
RogueString* RogueString_create_with_count( int count )
{
  if (count < 0) count = 0;

  int total_size = sizeof(RogueString) + (count * sizeof(RogueCharacter));

  RogueString* st = (RogueString*) RogueAllocator_allocate_object( RogueTypeString->allocator, RogueTypeString, total_size );
  st->count = count;
  st->hash_code = 0;

  return st;
}

RogueString* RogueString_create_from_c_string( const char* c_string, int count )
{
  if (count == -1) count = (int) strlen( c_string );

  RogueInt32 decoded_count = RogueString_decoded_utf8_count( c_string, count );

  RogueString* st = RogueString_create_with_count( decoded_count );
  RogueString_decode_utf8( c_string, count, st->characters );

  return RogueString_update_hash_code( st );
}

RogueString* RogueString_create_from_characters( RogueCharacterList* characters )
{
  if ( !characters ) return RogueString_create_with_count(0);

  int count = characters->count;
  RogueString* result = RogueString_create_with_count( characters->count );
  memcpy( result->characters, characters->data->characters, count*sizeof(RogueCharacter) );
  return RogueString_update_hash_code( result );
}

void RogueString_print_string( RogueString* st )
{
  if (st)
  {
    RogueString_print_characters( st->characters, st->count );
  }
  else
  {
    printf( "null" );
  }
}

void RogueString_decode_utf8( const char* utf8_data, RogueInt32 utf8_count, RogueCharacter* dest_buffer )
{
  RogueByte*      src  = (RogueByte*)(utf8_data - 1);
  RogueCharacter* dest = dest_buffer - 1;

  int remaining_count = utf8_count;
  while (--remaining_count >= 0)
  {
    int ch = *(++src);
    if (ch >= 0x80)
    {
      if ((ch & 0xe0) == 0xc0)
      {
        // 110x xxxx  10xx xxxx
        ch = ((ch & 0x1f) << 6) | (*(++src) & 0x3f);
        --remaining_count;
      }
      else if ((ch & 0xf0) == 0xe0)
      {
        // 1110 xxxx  10xx xxxx  10xx xxxx
        ch = ((ch & 0xf) << 6) | (*(++src) & 0x3f);
        ch = (ch << 6) | (*(++src) & 0x3f);
        remaining_count -= 2;
      }
      else
      {
        // 11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
        if (remaining_count >= 3)
        {
          ch = ((ch & 7) << 18) | ((src[1] & 0x3f) << 12);
          ch |= (src[2] & 0x3f) << 6;
          ch |= (src[3] & 0x3f);
          src += 3;
          remaining_count -= 3;
        }
        if (ch >= 0x10000)
        {
          // write surrogate pair
          ch -= 0x10000;
          dest[1] = (RogueCharacter) (0xd800 + ((ch >> 10) & 0x3ff));
          dest[2] = (RogueCharacter) (0xdc00 + (ch & 0x3ff));
          dest += 2;
          continue;
        }
        // else fall through and write a regular character
      }
    }
    *(++dest) = (RogueCharacter) ch;
  }
}

RogueInt32 RogueString_decoded_utf8_count( const char* utf8_data, RogueInt32 utf8_count )
{
  if (utf8_count == -1) utf8_count = (int) strlen( utf8_data );

  const char* cur   = utf8_data - 1;
  const char* limit = utf8_data + utf8_count;

  int result_count = 0;
  while (++cur < limit)
  {
    ++result_count;
    int ch = *((unsigned char*)cur);
    if (ch >= 0x80)
    {
      if ((ch & 0xe0) == 0xc0)      ++cur;
      else if ((ch & 0xf0) == 0xe0) cur += 2;
      else
      {
        if (cur+3 < limit)
        {
          // This 4-byte UTF-8 value will encode to either one or two characters.
          int low = ((unsigned char*)cur)[1];
          cur += 3;

          if ((ch & 7) || (low & 0x30))
          {
            // Decoded value is >= 0x10000 - will be written as a surrogate pair
            ++result_count;
          }
          //else Decoded value is <= 0xffff - will be written normally
        }
      }
    }
  }

  return result_count;
}

void RogueString_print_characters( RogueCharacter* characters, int count )
{
  if (characters)
  {
    RogueCharacter* src = characters - 1;
    while (--count >= 0)
    {
      int ch = *(++src);

      if (ch < 0x80)
      {
        // %0xxxxxxx
        putchar( ch );
      }
      else if (ch < 0x800)
      {
        // %110xxxxx 10xxxxxx
        putchar( ((ch >> 6) & 0x1f) | 0xc0 );
        putchar( (ch & 0x3f) | 0x80 );
      }
      else if (ch >= 0xd800 && ch <= 0xdbff && --count >= 0)
      {
        // 'ch' is the high surrogate beginning of a surrogate pair.
        // Together with the next 16-bit 'low' value, the pair forms
        // a single 21 bit value between 0x10000 and 0x10FFFF.
        int low = *(++src);
        if (low >= 0xdc00 and low <= 0xdfff)
        {
          int value = 0x10000 + (((ch - 0xd800)<<10) | (low-0xdc00));
          putchar( 0xf0 | ((value>>18) & 7) );
          putchar( 0x80 | ((value>>12) & 0x3f) );
          putchar( 0x80 | ((value>>6)  & 0x3f) );
          putchar( (value & 0x3f) | 0x80 );
        }
      }
      else
      {
        // %1110xxxx 10xxxxxx 10xxxxxx
        putchar( ((ch >> 12) & 15) | 0xe0 );
        putchar( ((ch >> 6) & 0x3f) | 0x80 );
        putchar( (ch & 0x3f) | 0x80 );
      }
    }
  }
  else
  {
    printf( "null" );
  }
}

bool RogueString_to_c_string( RogueString* THIS, char* buffer, int buffer_size )
{
  if (THIS->count + 1 > buffer_size) return false;

  RogueCharacter* src = THIS->characters - 1;
  char* dest = buffer - 1;
  int n = THIS->count;

  while (--n >= 0)
  {
    *(++dest) = (char) (*(++src));
  }
  *(++dest) = 0;

  return true;
}

RogueString* RogueString_update_hash_code( RogueString* THIS )
{
  int code = 0;
  int len = THIS->count;
  RogueCharacter* src = THIS->characters - 1;
  while (--len >= 0)
  {
    code = ((code<<3) - code) + *(++src);
  }
  THIS->hash_code = code;
  return THIS;
}

//-----------------------------------------------------------------------------
//  RogueArray
//-----------------------------------------------------------------------------
RogueArray* RogueArray_set( RogueArray* THIS, RogueInt32 dest_i1, RogueArray* src_array, RogueInt32 src_i1, RogueInt32 copy_count )
{
  int element_size;
  int dest_i2, src_i2;

  if ( !src_array || dest_i1 >= THIS->count ) return THIS;
  if (THIS->is_reference_array ^ src_array->is_reference_array) return THIS;

  if (copy_count == -1) src_i2 = src_array->count - 1;
  else                  src_i2 = (src_i1 + copy_count) - 1;

  if (dest_i1 < 0)
  {
    src_i1 -= dest_i1;
    dest_i1 = 0;
  }

  if (src_i1 < 0) src_i1 = 0;
  if (src_i2 >= src_array->count) src_i2 = src_array->count - 1;
  if (src_i1 > src_i2) return THIS;

  copy_count = (src_i2 - src_i1) + 1;
  dest_i2 = dest_i1 + (copy_count - 1);
  if (dest_i2 >= THIS->count)
  {
    dest_i2 = (THIS->count - 1);
    copy_count = (dest_i2 - dest_i1) + 1;
  }
  if ( !copy_count ) return THIS;


#if defined(ROGUE_ARC)
  if (THIS != src_array || dest_i1 >= src_i1 + copy_count || (src_i1 + copy_count) <= dest_i1 || dest_i1 < src_i1)
  {
    // no overlap
    RogueObject** src  = src_array->objects + src_i1 - 1;
    RogueObject** dest = THIS->objects + dest_i1 - 1;
    while (--copy_count >= 0)
    {
      RogueObject* src_obj, dest_obj;
      if ((src_obj = *(++src))) ++src_obj->reference_count;
      if ((dest_obj = *(++dest)) && !(--dest_obj->reference_count))
      {
        // TODO: delete dest_obj
        *dest = src_obj;
      }
    }
  }
  else
  {
    // Copying earlier data to later data; copy in reverse order to
    // avoid accidental overwriting
    if (dest_i1 > src_i1)  // if they're equal then we don't need to copy anything!
    {
      RogueObject** src  = src_array->objects + src_i2 + 1;
      RogueObject** dest = THIS->objects + dest_i2 + 1;
      while (--copy_count >= 0)
      {
        RogueObject* src_obj, dest_obj;
        if ((src_obj = *(--src))) ++src_obj->reference_count;
        if ((dest_obj = *(--dest)) && !(--dest_obj->reference_count))
        {
          // TODO: delete dest_obj
          *dest = src_obj;
        }
      }
    }
  }
  return THIS;
#endif

  element_size = THIS->element_size;
  RogueByte* src = src_array->bytes + src_i1 * element_size;
  RogueByte* dest = THIS->bytes + (dest_i1 * element_size);
  int copy_bytes = copy_count * element_size;

  if (src == dest) return THIS;

  if (src >= dest + copy_bytes || (src + copy_bytes) <= dest)
  {
    // Copy region does not overlap
    memcpy( dest, src, copy_count * element_size );
  }
  else
  {
    // Copy region overlaps
    memmove( dest, src, copy_count * element_size );
  }

  return THIS;
}

//-----------------------------------------------------------------------------
//  RogueAllocationPage
//-----------------------------------------------------------------------------
RogueAllocationPage* RogueAllocationPage_create( RogueAllocationPage* next_page )
{
  RogueAllocationPage* result = (RogueAllocationPage*) malloc( sizeof(RogueAllocationPage) );
  result->next_page = next_page;
  result->cursor = result->data;
  result->remaining = ROGUEMM_PAGE_SIZE;
  return result;
}

RogueAllocationPage* RogueAllocationPage_delete( RogueAllocationPage* THIS )
{
  if (THIS) free( THIS );
  return 0;
};

void* RogueAllocationPage_allocate( RogueAllocationPage* THIS, int size )
{
  // Round size up to multiple of 8.
  if (size > 0) size = (size + 7) & ~7;
  else          size = 8;

  if (size > THIS->remaining) return 0;

  //printf( "Allocating %d bytes from page.\n", size );
  void* result = THIS->cursor;
  THIS->cursor += size;
  THIS->remaining -= size;

  //printf( "%d / %d\n", ROGUEMM_PAGE_SIZE - remaining, ROGUEMM_PAGE_SIZE );
  return result;
}


//-----------------------------------------------------------------------------
//  RogueAllocator
//-----------------------------------------------------------------------------
RogueAllocator* RogueAllocator_create()
{
  RogueAllocator* result = (RogueAllocator*) malloc( sizeof(RogueAllocator) );

  memset( result, 0, sizeof(RogueAllocator) );

  return result;
}

RogueAllocator* RogueAllocator_delete( RogueAllocator* THIS )
{
  while (THIS->pages)
  {
    RogueAllocationPage* next_page = THIS->pages->next_page;
    RogueAllocationPage_delete( THIS->pages );
    THIS->pages = next_page;
  }
  return 0;
}

void* RogueAllocator_allocate( RogueAllocator* THIS, int size )
{
  if (size > ROGUEMM_SMALL_ALLOCATION_SIZE_LIMIT)
  {
    Rogue_bytes_allocated_since_gc += size;
    return malloc( size );
  }

  if (size <= 0) size = ROGUEMM_GRANULARITY_SIZE;
  else           size = (size + ROGUEMM_GRANULARITY_MASK) & ~ROGUEMM_GRANULARITY_MASK;

  Rogue_bytes_allocated_since_gc += size;

  int slot = (size >> ROGUEMM_GRANULARITY_BITS);
  RogueObject* obj = THIS->available_objects[slot];

  if (obj)
  {
    //printf( "found free object\n");
    THIS->available_objects[slot] = obj->next_object;
    return obj;
  }

  // No free objects for requested size.

  // Try allocating a new object from the current page.
  if ( !THIS->pages )
  {
    THIS->pages = RogueAllocationPage_create(0);
  }

  obj = (RogueObject*) RogueAllocationPage_allocate( THIS->pages, size );
  if (obj) return obj;


  // Not enough room on allocation page.  Allocate any smaller blocks
  // we're able to and then move on to a new page.
  int s = slot - 1;
  while (s >= 1)
  {
    obj = (RogueObject*) RogueAllocationPage_allocate( THIS->pages, s << ROGUEMM_GRANULARITY_BITS );
    if (obj)
    {
      //printf( "free obj size %d\n", (s << ROGUEMM_GRANULARITY_BITS) );
      obj->next_object = THIS->available_objects[s];
      THIS->available_objects[s] = obj;
    }
    else
    {
      --s;
    }
  }

  // New page; this will work for sure.
  THIS->pages = RogueAllocationPage_create( THIS->pages );
  return RogueAllocationPage_allocate( THIS->pages, size );
}

RogueObject* RogueAllocator_allocate_object( RogueAllocator* THIS, RogueType* of_type, int size )
{
  RogueObject* obj = (RogueObject*) RogueAllocator_allocate( THIS, size );
  memset( obj, 0, size );
//printf( "Allocating " ); RogueType_print_name(of_type); printf( "\n" );

  if (of_type->clean_up_fn)
  {
    obj->next_object = THIS->objects_requiring_cleanup;
    THIS->objects_requiring_cleanup = obj;
  }
  else
  {
    obj->next_object = THIS->objects;
    THIS->objects = obj;
  }
  obj->type = of_type;
  obj->object_size = size;

  return obj;
}

void* RogueAllocator_free( RogueAllocator* THIS, void* data, int size )
{
  if (data)
  {
    if (size > ROGUEMM_SMALL_ALLOCATION_SIZE_LIMIT)
    {
      free( data );
    }
    else
    {
      // Return object to small allocation pool
      RogueObject* obj = (RogueObject*) data;
      int slot = (size + ROGUEMM_GRANULARITY_MASK) >> ROGUEMM_GRANULARITY_BITS;
      if (slot <= 0) slot = 1;
      obj->next_object = THIS->available_objects[slot];
      THIS->available_objects[slot] = obj;
    }
  }

  // Always returns null, allowing a pointer to be freed and assigned null in
  // a single step.
  return 0;
}


void RogueAllocator_free_objects( RogueAllocator* THIS )
{
  RogueObject* objects = THIS->objects;
  while (objects)
  {
    RogueObject* next_object = objects->next_object;
    RogueAllocator_free( THIS, objects, objects->object_size );
    objects = next_object;
  }

  THIS->objects = 0;
}

void RogueAllocator_collect_garbage( RogueAllocator* THIS )
{
  // Global program objects have already been traced through.

  // Trace through all as-yet unreferenced objects that are manually retained.
  RogueObject* cur = THIS->objects;
  while (cur)
  {
    if (cur->object_size >= 0 && cur->reference_count > 0)
    {
      cur->type->trace_fn( cur );
    }
    cur = cur->next_object;
  }

  cur = THIS->objects_requiring_cleanup;
  while (cur)
  {
    if (cur->object_size >= 0 && cur->reference_count > 0)
    {
      cur->type->trace_fn( cur );
    }
    cur = cur->next_object;
  }

  // For any unreferenced objects requiring clean-up, we'll:
  //   1.  Reference them and move them to a separate short-term list.
  //   2.  Finish the regular GC.
  //   3.  Call clean_up() on each of them, which may create new
  //       objects (which is why we have to wait until after the GC).
  //   4.  Move them to the list of regular objects.
  cur = THIS->objects_requiring_cleanup;
  RogueObject* unreferenced_clean_up_objects = 0;
  RogueObject* survivors = 0;  // local var for speed
  while (cur)
  {
    RogueObject* next_object = cur->next_object;
    if (cur->object_size < 0)
    {
      // Referenced.
      cur->object_size = ~cur->object_size;
      cur->next_object = survivors;
      survivors = cur;
    }
    else
    {
      // Unreferenced - go ahead and trace it since we'll call clean_up
      // on it.
      cur->type->trace_fn( cur );
      cur->next_object = unreferenced_clean_up_objects;
      unreferenced_clean_up_objects = cur;
    }
    cur = next_object;
  }
  THIS->objects_requiring_cleanup = survivors;


  // Reset or delete each general object
  cur = THIS->objects;
  THIS->objects = 0;
  survivors = 0;  // local var for speed

  while (cur)
  {
    RogueObject* next_object = cur->next_object;
    if (cur->object_size < 0)
    {
      cur->object_size = ~cur->object_size;
      cur->next_object = survivors;
      survivors = cur;
    }
    else
    {
//printf( "Freeing " ); RogueType_print_name(cur->type); printf( "\n" );
      RogueAllocator_free( THIS, cur, cur->object_size );
    }
    cur = next_object;
  }

  THIS->objects = survivors;


  // Call clean_up() on unreferenced objects requiring cleanup
  // and move them to the general objects list so they'll be deleted
  // the next time they're unreferenced.  Calling clean_up() may
  // create additional objects so THIS->objects may change during a
  // clean_up() call.
  cur = unreferenced_clean_up_objects;
  while (cur)
  {
    RogueObject* next_object = cur->next_object;

    cur->type->clean_up_fn( cur );

    cur->object_size = ~cur->object_size;
    cur->next_object = THIS->objects;
    THIS->objects = cur;

    cur = next_object;
  }
}

void Rogue_segfault_handler( int signal, siginfo_t *si, void *arg )
{
    printf( "Null reference error.\n\n" );

    int i = Rogue_call_stack.count;
    while (--i >= 0)
    {
      printf( "%s\n", Rogue_call_stack.locations[i] );
    }

    exit(0);
}

void Rogue_configure_types()
{
  int i;
  int* type_info = Rogue_type_info_table - 1;

  // Install seg fault handler
  struct sigaction sa;

  memset( &sa, 0, sizeof(sa) );
  sigemptyset( &sa.sa_mask );
  sa.sa_sigaction = Rogue_segfault_handler;
  sa.sa_flags     = SA_SIGINFO;

  sigaction( SIGSEGV, &sa, NULL );

  // Initialize allocators
  memset( Rogue_allocators, 0, sizeof(RogueAllocator)*Rogue_allocator_count );

  // Initialize types
  for (i=0; i<Rogue_type_count; ++i)
  {
    int j;
    RogueType* type = &Rogue_types[i];

    memset( type, 0, sizeof(RogueType) );

    type->index = i;
    type->name_index = Rogue_type_name_index_table[i];
    type->object_size = Rogue_object_size_table[i];
    type->allocator = &Rogue_allocators[ *(++type_info) ];
    type->methods = Rogue_dynamic_method_table + *(++type_info);
    type->base_type_count = *(++type_info);
    if (type->base_type_count)
    {
      type->base_types = new RogueType*[ type->base_type_count ];
      for (j=0; j<type->base_type_count; ++j)
      {
        type->base_types[j] = &Rogue_types[ *(++type_info) ];
      }
    }
    type->trace_fn = Rogue_trace_fn_table[i];
    type->init_object_fn = Rogue_init_object_fn_table[i];
    type->init_fn        = Rogue_init_fn_table[i];
    type->clean_up_fn    = Rogue_clean_up_fn_table[i];
  }
}

bool Rogue_collect_garbage( bool forced )
{
  int i;

  if (!forced && Rogue_bytes_allocated_since_gc < ROGUE_GC_THRESHOLD_BYTES) return false;

  Rogue_on_begin_gc.call();

//printf( "GC %d\n", Rogue_bytes_allocated_since_gc );
  Rogue_bytes_allocated_since_gc = 0;

  Rogue_trace();

  for (i=0; i<Rogue_allocator_count; ++i)
  {
    RogueAllocator_collect_garbage( &Rogue_allocators[i] );
  }

  Rogue_on_end_gc.call();

  return true;
}

void Rogue_quit()
{
  int i;

  if ( !Rogue_configured ) return;
  Rogue_configured = 0;

  for (i=0; i<Rogue_allocator_count; ++i)
  {
    RogueAllocator_free_objects( &Rogue_allocators[i] );
  }

  for (i=0; i<Rogue_type_count; ++i)
  {
    RogueType_retire( &Rogue_types[i] );
  }
}


typedef RogueString*(*ROGUEM0)(RogueStringBuilder*);
typedef RogueStringBuilder*(*ROGUEM1)(RogueStringBuilder*);
typedef RogueString*(*ROGUEM2)(RogueObject*);
typedef RogueString*(*ROGUEM3)(RogueCharacterList*);
typedef RogueCharacterList*(*ROGUEM4)(RogueCharacterList*);
typedef RogueString*(*ROGUEM5)(RogueClassGenericList*);
typedef RogueClassGenericList*(*ROGUEM6)(RogueClassGenericList*);
typedef RogueString*(*ROGUEM7)(RogueArray*);
typedef RogueString*(*ROGUEM8)(RogueClassStringReader*);
typedef RogueLogical(*ROGUEM9)(RogueClassStringReader*);
typedef RogueCharacter(*ROGUEM10)(RogueClassStringReader*);
typedef RogueString*(*ROGUEM11)(RogueStringList*);
typedef RogueStringList*(*ROGUEM12)(RogueStringList*);
typedef RogueString*(*ROGUEM13)(RogueClassGlobal*);
typedef RogueClassGlobal*(*ROGUEM14)(RogueClassGlobal*,RogueCharacterList*);
typedef RogueString*(*ROGUEM15)(RogueClassConsole*);
typedef RogueString*(*ROGUEM16)(RogueClassRogueC*);
typedef RogueString*(*ROGUEM17)(RogueClassException*);
typedef RogueClassException*(*ROGUEM18)(RogueClassException*);
typedef RogueString*(*ROGUEM19)(RogueClassStackTrace*);
typedef RogueString*(*ROGUEM20)(RogueClassMath*);
typedef RogueString*(*ROGUEM21)(RogueClassProgram*);
typedef RogueString*(*ROGUEM22)(RogueTemplateList*);
typedef RogueTemplateList*(*ROGUEM23)(RogueTemplateList*);
typedef RogueString*(*ROGUEM24)(RogueClassTemplate*);
typedef RogueString*(*ROGUEM25)(RogueClassString_TemplateTable*);
typedef RogueString*(*ROGUEM26)(RogueClassString_AugmentListTable*);
typedef RogueString*(*ROGUEM27)(RogueRequisiteItemList*);
typedef RogueRequisiteItemList*(*ROGUEM28)(RogueRequisiteItemList*);
typedef RogueString*(*ROGUEM29)(RogueClassRequisiteItem*);
typedef RogueString*(*ROGUEM30)(RogueClassMethod*);
typedef RogueString*(*ROGUEM31)(RoguePropertyList*);
typedef RoguePropertyList*(*ROGUEM32)(RoguePropertyList*);
typedef RogueString*(*ROGUEM33)(RogueClassProperty*);
typedef RogueString*(*ROGUEM34)(RogueClassString_MethodListTable*);
typedef RogueString*(*ROGUEM35)(RogueTypeList*);
typedef RogueTypeList*(*ROGUEM36)(RogueTypeList*);
typedef RogueString*(*ROGUEM37)(RogueClassType*);
typedef RogueString*(*ROGUEM38)(RogueClassString_TypeTable*);
typedef RogueString*(*ROGUEM39)(RogueClassString_Int32Table*);
typedef RogueString*(*ROGUEM40)(RogueClassString_StringListTable*);
typedef RogueString*(*ROGUEM41)(RogueClassString_Int32TableEntry*);
typedef RogueString*(*ROGUEM42)(RogueClassInt32_TemplateTable*);
typedef RogueString*(*ROGUEM43)(RogueClassToken*);
typedef RogueCharacter(*ROGUEM44)(RogueClassToken*);
typedef RogueInt32(*ROGUEM45)(RogueClassToken*);
typedef RogueInt64(*ROGUEM46)(RogueClassToken*);
typedef RogueReal64(*ROGUEM47)(RogueClassToken*);
typedef RogueClassType*(*ROGUEM48)(RogueClassToken*);
typedef RogueClassToken*(*ROGUEM49)(RogueClassToken*);
typedef RogueString*(*ROGUEM50)(RogueClassError*);
typedef RogueClassError*(*ROGUEM51)(RogueClassError*);
typedef RogueString*(*ROGUEM52)(RogueClassRogueError*);
typedef RogueClassRogueError*(*ROGUEM53)(RogueClassRogueError*);
typedef RogueString*(*ROGUEM54)(RogueClassAttributes*);
typedef RogueString*(*ROGUEM55)(RogueClassCmd*);
typedef RogueClassCmd*(*ROGUEM56)(RogueClassCmd*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM57)(RogueClassCmd*,RogueClassType*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM58)(RogueClassCmd*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM59)(RogueClassCmd*,RogueClassType*);
typedef void(*ROGUEM60)(RogueClassCmd*,RogueClassScope*);
typedef RogueLogical(*ROGUEM61)(RogueClassCmd*);
typedef RogueClassType*(*ROGUEM62)(RogueClassCmd*,RogueClassScope*);
typedef void(*ROGUEM63)(RogueClassCmd*);
typedef RogueClassType*(*ROGUEM64)(RogueClassCmd*);
typedef RogueClassCmd*(*ROGUEM65)(RogueClassCmd*,RogueClassScope*,RogueClassCmd*);
typedef RogueClassCmd*(*ROGUEM66)(RogueClassCmd*,RogueClassScope*,RogueInt32);
typedef RogueClassCmd*(*ROGUEM67)(RogueClassCmd*,RogueClassScope*,RogueClassTokenType*,RogueClassCmd*);
typedef void(*ROGUEM68)(RogueClassCmd*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmd*(*ROGUEM69)(RogueClassCmd*);
typedef RogueString*(*ROGUEM70)(RogueClassCmdReturn*);
typedef RogueClassCmd*(*ROGUEM71)(RogueClassCmdReturn*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM72)(RogueClassCmdReturn*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM73)(RogueClassCmdReturn*);
typedef void(*ROGUEM74)(RogueClassCmdReturn*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM75)(RogueClassCmdReturn*);
typedef void(*ROGUEM76)(RogueClassCmdReturn*,RogueClassScope*);
typedef RogueClassCmdReturn*(*ROGUEM77)(RogueClassCmdReturn*);
typedef RogueString*(*ROGUEM78)(RogueClassCmdStatement*);
typedef void(*ROGUEM79)(RogueClassCmdStatement*);
typedef void(*ROGUEM80)(RogueClassCmdStatement*,RogueClassScope*);
typedef RogueClassCmdStatement*(*ROGUEM81)(RogueClassCmdStatement*);
typedef RogueString*(*ROGUEM82)(RogueCmdList*);
typedef RogueString*(*ROGUEM83)(RogueClassCmdStatementList*);
typedef RogueClassCmdStatementList*(*ROGUEM84)(RogueClassCmdStatementList*);
typedef RogueClassCmdStatementList*(*ROGUEM85)(RogueClassCmdStatementList*,RogueInt32);
typedef RogueCmdList*(*ROGUEM86)(RogueCmdList*);
typedef RogueCmdList*(*ROGUEM87)(RogueCmdList*,RogueInt32);
typedef RogueString*(*ROGUEM88)(RogueClassTokenType*);
typedef RogueClassToken*(*ROGUEM89)(RogueClassTokenType*,RogueString*,RogueInt32,RogueInt32);
typedef RogueClassToken*(*ROGUEM90)(RogueClassTokenType*,RogueString*,RogueInt32,RogueInt32,RogueString*);
typedef RogueClassToken*(*ROGUEM91)(RogueClassTokenType*,RogueClassToken*,RogueString*);
typedef RogueLogical(*ROGUEM92)(RogueClassTokenType*);
typedef RogueClassTokenType*(*ROGUEM93)(RogueClassTokenType*);
typedef RogueString*(*ROGUEM94)(RogueClassCmdLabel*);
typedef RogueClassCmdLabel*(*ROGUEM95)(RogueClassCmdLabel*,RogueClassCloneArgs*);
typedef RogueLogical(*ROGUEM96)(RogueClassCmdLabel*);
typedef RogueClassCmd*(*ROGUEM97)(RogueClassCmdLabel*,RogueClassScope*);
typedef void(*ROGUEM98)(RogueClassCmdLabel*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM99)(RogueClassCmdLabel*);
typedef void(*ROGUEM100)(RogueClassCmdLabel*,RogueClassScope*);
typedef RogueClassCmdLabel*(*ROGUEM101)(RogueClassCmdLabel*);
typedef RogueString*(*ROGUEM102)(RogueClassScope*);
typedef RogueString*(*ROGUEM103)(RogueMethodList*);
typedef RogueMethodList*(*ROGUEM104)(RogueMethodList*);
typedef RogueString*(*ROGUEM105)(RogueClassFunction_Type_RETURNSLogical*);
typedef RogueLogical(*ROGUEM106)(RogueClassFunction_Type_RETURNSLogical*,RogueClassType*);
typedef RogueClassFunction_Type_RETURNSLogical*(*ROGUEM107)(RogueClassFunction_Type_RETURNSLogical*);
typedef RogueString*(*ROGUEM108)(RogueClassFunction_197*);
typedef RogueLogical(*ROGUEM109)(RogueClassFunction_197*,RogueClassType*);
typedef RogueClassFunction_197*(*ROGUEM110)(RogueClassFunction_197*);
typedef RogueString*(*ROGUEM111)(RogueClassFunction_198*);
typedef RogueLogical(*ROGUEM112)(RogueClassFunction_198*,RogueClassType*);
typedef RogueClassFunction_198*(*ROGUEM113)(RogueClassFunction_198*);
typedef RogueString*(*ROGUEM114)(RogueClassCPPWriter*);
typedef RogueString*(*ROGUEM115)(RogueClassString_MethodTable*);
typedef RogueString*(*ROGUEM116)(RogueLocalList*);
typedef RogueLocalList*(*ROGUEM117)(RogueLocalList*);
typedef RogueString*(*ROGUEM118)(RogueClassLocal*);
typedef RogueString*(*ROGUEM119)(RogueInt32List*);
typedef RogueInt32List*(*ROGUEM120)(RogueInt32List*);
typedef RogueString*(*ROGUEM121)(RogueByteList*);
typedef RogueByteList*(*ROGUEM122)(RogueByteList*);
typedef RogueString*(*ROGUEM123)(RogueClassSystem*);
typedef RogueString*(*ROGUEM124)(RogueClassString_LogicalTable*);
typedef RogueString*(*ROGUEM125)(RogueParserList*);
typedef RogueParserList*(*ROGUEM126)(RogueParserList*);
typedef RogueString*(*ROGUEM127)(RogueClassParser*);
typedef RogueString*(*ROGUEM128)(RogueClassString_ParseReaderTable*);
typedef RogueString*(*ROGUEM129)(RogueClassFile*);
typedef RogueString*(*ROGUEM130)(RogueTokenList*);
typedef RogueTokenList*(*ROGUEM131)(RogueTokenList*);
typedef RogueString*(*ROGUEM132)(RogueClassLineReader*);
typedef RogueLogical(*ROGUEM133)(RogueClassLineReader*);
typedef RogueString*(*ROGUEM134)(RogueTypeParameterList*);
typedef RogueTypeParameterList*(*ROGUEM135)(RogueTypeParameterList*);
typedef RogueString*(*ROGUEM136)(RogueClassTypeParameter*);
typedef RogueString*(*ROGUEM137)(RogueAugmentList*);
typedef RogueAugmentList*(*ROGUEM138)(RogueAugmentList*);
typedef RogueString*(*ROGUEM139)(RogueClassAugment*);
typedef RogueString*(*ROGUEM140)(RogueClassString_TokenTypeTable*);
typedef RogueString*(*ROGUEM141)(RogueClassLiteralCharacterToken*);
typedef RogueCharacter(*ROGUEM142)(RogueClassLiteralCharacterToken*);
typedef RogueClassLiteralCharacterToken*(*ROGUEM143)(RogueClassLiteralCharacterToken*);
typedef RogueString*(*ROGUEM144)(RogueClassLiteralInt64Token*);
typedef RogueInt32(*ROGUEM145)(RogueClassLiteralInt64Token*);
typedef RogueInt64(*ROGUEM146)(RogueClassLiteralInt64Token*);
typedef RogueReal64(*ROGUEM147)(RogueClassLiteralInt64Token*);
typedef RogueClassLiteralInt64Token*(*ROGUEM148)(RogueClassLiteralInt64Token*);
typedef RogueString*(*ROGUEM149)(RogueClassLiteralInt32Token*);
typedef RogueInt32(*ROGUEM150)(RogueClassLiteralInt32Token*);
typedef RogueReal64(*ROGUEM151)(RogueClassLiteralInt32Token*);
typedef RogueClassLiteralInt32Token*(*ROGUEM152)(RogueClassLiteralInt32Token*);
typedef RogueString*(*ROGUEM153)(RogueClassLiteralReal64Token*);
typedef RogueInt32(*ROGUEM154)(RogueClassLiteralReal64Token*);
typedef RogueReal64(*ROGUEM155)(RogueClassLiteralReal64Token*);
typedef RogueClassLiteralReal64Token*(*ROGUEM156)(RogueClassLiteralReal64Token*);
typedef RogueString*(*ROGUEM157)(RogueClassStringDataToken*);
typedef RogueClassStringDataToken*(*ROGUEM158)(RogueClassStringDataToken*);
typedef RogueString*(*ROGUEM159)(RogueClassString_TypeSpecializerTable*);
typedef RogueString*(*ROGUEM160)(RogueClassTypeSpecializer*);
typedef RogueString*(*ROGUEM161)(RogueTypeSpecializerList*);
typedef RogueTypeSpecializerList*(*ROGUEM162)(RogueTypeSpecializerList*);
typedef RogueString*(*ROGUEM163)(RogueTableEntry_of_String_TemplateList*);
typedef RogueTableEntry_of_String_TemplateList*(*ROGUEM164)(RogueTableEntry_of_String_TemplateList*);
typedef RogueString*(*ROGUEM165)(RogueClassString_TemplateTableEntry*);
typedef RogueString*(*ROGUEM166)(RogueTableEntry_of_String_AugmentListList*);
typedef RogueTableEntry_of_String_AugmentListList*(*ROGUEM167)(RogueTableEntry_of_String_AugmentListList*);
typedef RogueString*(*ROGUEM168)(RogueClassString_AugmentListTableEntry*);
typedef RogueString*(*ROGUEM169)(RogueCmdLabelList*);
typedef RogueCmdLabelList*(*ROGUEM170)(RogueCmdLabelList*);
typedef RogueString*(*ROGUEM171)(RogueClassString_CmdLabelTable*);
typedef RogueString*(*ROGUEM172)(RogueClassCloneArgs*);
typedef RogueClassCmdLabel*(*ROGUEM173)(RogueClassCloneArgs*,RogueClassCmdLabel*);
typedef RogueClassCloneArgs*(*ROGUEM174)(RogueClassCloneArgs*);
typedef RogueString*(*ROGUEM175)(RogueClassCloneMethodArgs*);
typedef RogueClassCmdLabel*(*ROGUEM176)(RogueClassCloneMethodArgs*,RogueClassCmdLabel*);
typedef RogueClassCloneMethodArgs*(*ROGUEM177)(RogueClassCloneMethodArgs*);
typedef RogueString*(*ROGUEM178)(RogueClassCmdAccess*);
typedef RogueClassCmd*(*ROGUEM179)(RogueClassCmdAccess*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM180)(RogueClassCmdAccess*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM181)(RogueClassCmdAccess*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM182)(RogueClassCmdAccess*,RogueClassScope*,RogueClassCmd*);
typedef RogueClassCmd*(*ROGUEM183)(RogueClassCmdAccess*,RogueClassScope*,RogueClassTokenType*,RogueClassCmd*);
typedef RogueClassType*(*ROGUEM184)(RogueClassCmdAccess*);
typedef void(*ROGUEM185)(RogueClassCmdAccess*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM186)(RogueClassCmdAccess*);
typedef void(*ROGUEM187)(RogueClassCmdAccess*,RogueClassScope*);
typedef RogueClassCmdAccess*(*ROGUEM188)(RogueClassCmdAccess*);
typedef RogueString*(*ROGUEM189)(RogueClassCmdArgs*);
typedef RogueClassCmdArgs*(*ROGUEM190)(RogueClassCmdArgs*);
typedef RogueClassCmdArgs*(*ROGUEM191)(RogueClassCmdArgs*,RogueInt32);
typedef RogueString*(*ROGUEM192)(RogueCmdFlagArgList*);
typedef RogueCmdFlagArgList*(*ROGUEM193)(RogueCmdFlagArgList*);
typedef RogueString*(*ROGUEM194)(RogueClassCmdFlagArg*);
typedef RogueClassCmdFlagArg*(*ROGUEM195)(RogueClassCmdFlagArg*,RogueClassCloneArgs*);
typedef RogueClassCmdFlagArg*(*ROGUEM196)(RogueClassCmdFlagArg*);
typedef RogueString*(*ROGUEM197)(RogueClassCmdAssign*);
typedef RogueClassCmd*(*ROGUEM198)(RogueClassCmdAssign*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM199)(RogueClassCmdAssign*,RogueClassScope*);
typedef void(*ROGUEM200)(RogueClassCmdAssign*,RogueClassScope*);
typedef RogueClassCmdAssign*(*ROGUEM201)(RogueClassCmdAssign*);
typedef RogueString*(*ROGUEM202)(RogueCmdControlStructureList*);
typedef RogueCmdControlStructureList*(*ROGUEM203)(RogueCmdControlStructureList*);
typedef RogueString*(*ROGUEM204)(RogueClassCmdControlStructure*);
typedef RogueLogical(*ROGUEM205)(RogueClassCmdControlStructure*);
typedef RogueClassCmdControlStructure*(*ROGUEM206)(RogueClassCmdControlStructure*);
typedef RogueClassCmd*(*ROGUEM207)(RogueClassCmdControlStructure*,RogueClassCmdControlStructure*);
typedef RogueString*(*ROGUEM208)(RogueClassCmdLiteralThis*);
typedef RogueClassCmd*(*ROGUEM209)(RogueClassCmdLiteralThis*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM210)(RogueClassCmdThisContext*,RogueClassScope*);
typedef void(*ROGUEM211)(RogueClassCmdLiteralThis*);
typedef RogueClassCmd*(*ROGUEM212)(RogueClassCmdLiteralThis*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM213)(RogueClassCmdThisContext*);
typedef void(*ROGUEM214)(RogueClassCmdThisContext*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM215)(RogueClassCmdThisContext*);
typedef void(*ROGUEM216)(RogueClassCmdThisContext*,RogueClassScope*);
typedef RogueClassCmdLiteralThis*(*ROGUEM217)(RogueClassCmdLiteralThis*);
typedef RogueString*(*ROGUEM218)(RogueClassCmdThisContext*);
typedef RogueClassCmd*(*ROGUEM219)(RogueClassCmdThisContext*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM220)(RogueClassCmdThisContext*,RogueClassScope*);
typedef RogueClassCmdThisContext*(*ROGUEM221)(RogueClassCmdThisContext*);
typedef RogueString*(*ROGUEM222)(RogueClassCmdGenericLoop*);
typedef RogueClassCmd*(*ROGUEM223)(RogueClassCmdGenericLoop*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM224)(RogueClassCmdGenericLoop*,RogueClassScope*);
typedef void(*ROGUEM225)(RogueClassCmdGenericLoop*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM226)(RogueClassCmdGenericLoop*);
typedef void(*ROGUEM227)(RogueClassCmdGenericLoop*,RogueClassScope*);
typedef RogueClassCmdGenericLoop*(*ROGUEM228)(RogueClassCmdGenericLoop*);
typedef RogueString*(*ROGUEM229)(RogueClassCmdLiteralInt32*);
typedef RogueClassCmd*(*ROGUEM230)(RogueClassCmdLiteralInt32*,RogueClassType*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM231)(RogueClassCmdLiteralInt32*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM232)(RogueClassCmdLiteral*,RogueClassScope*);
typedef RogueLogical(*ROGUEM233)(RogueClassCmdLiteral*);
typedef RogueClassCmd*(*ROGUEM234)(RogueClassCmdLiteralInt32*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM235)(RogueClassCmdLiteralInt32*);
typedef void(*ROGUEM236)(RogueClassCmdLiteralInt32*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM237)(RogueClassCmdLiteral*);
typedef void(*ROGUEM238)(RogueClassCmdLiteral*,RogueClassScope*);
typedef RogueClassCmdLiteralInt32*(*ROGUEM239)(RogueClassCmdLiteralInt32*);
typedef RogueString*(*ROGUEM240)(RogueClassCmdLiteral*);
typedef RogueClassCmdLiteral*(*ROGUEM241)(RogueClassCmdLiteral*);
typedef RogueString*(*ROGUEM242)(RogueClassCmdCompareNE*);
typedef RogueClassCmd*(*ROGUEM243)(RogueClassCmdCompareNE*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM244)(RogueClassCmdCompareNE*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM245)(RogueClassCmdBinary*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM246)(RogueClassCmdComparison*);
typedef void(*ROGUEM247)(RogueClassCmdBinary*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM248)(RogueClassCmdBinary*);
typedef void(*ROGUEM249)(RogueClassCmdBinary*,RogueClassScope*);
typedef RogueClassCmdCompareNE*(*ROGUEM250)(RogueClassCmdCompareNE*);
typedef RogueString*(*ROGUEM251)(RogueClassCmdBinary*);
typedef RogueLogical(*ROGUEM252)(RogueClassCmdComparison*);
typedef RogueClassCmd*(*ROGUEM253)(RogueClassCmdComparison*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM254)(RogueClassCmdBinary*,RogueClassScope*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM255)(RogueClassCmdBinary*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM256)(RogueClassCmdCompareNE*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM257)(RogueClassCmdComparison*);
typedef RogueClassCmdComparison*(*ROGUEM258)(RogueClassCmdComparison*);
typedef RogueClassCmd*(*ROGUEM259)(RogueClassCmdComparison*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueClassType*(*ROGUEM260)(RogueClassCmdBinary*);
typedef RogueClassCmdBinary*(*ROGUEM261)(RogueClassCmdBinary*);
typedef RogueLogical(*ROGUEM262)(RogueClassCmdBinary*);
typedef RogueString*(*ROGUEM263)(RogueClassTaskArgs*);
typedef RogueClassTaskArgs*(*ROGUEM264)(RogueClassTaskArgs*);
typedef RogueString*(*ROGUEM265)(RogueClassCmdTaskControl*);
typedef RogueLogical(*ROGUEM266)(RogueClassCmdTaskControl*);
typedef RogueClassCmd*(*ROGUEM267)(RogueClassCmdTaskControl*,RogueClassScope*);
typedef void(*ROGUEM268)(RogueClassCmdTaskControl*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM269)(RogueClassCmdTaskControl*);
typedef void(*ROGUEM270)(RogueClassCmdTaskControl*,RogueClassScope*);
typedef RogueClassCmdTaskControl*(*ROGUEM271)(RogueClassCmdTaskControl*);
typedef RogueString*(*ROGUEM272)(RogueClassCmdTaskControlSection*);
typedef RogueString*(*ROGUEM273)(RogueTableEntry_of_String_MethodListList*);
typedef RogueTableEntry_of_String_MethodListList*(*ROGUEM274)(RogueTableEntry_of_String_MethodListList*);
typedef RogueString*(*ROGUEM275)(RogueClassString_MethodListTableEntry*);
typedef RogueString*(*ROGUEM276)(RogueDefinitionList*);
typedef RogueDefinitionList*(*ROGUEM277)(RogueDefinitionList*);
typedef RogueString*(*ROGUEM278)(RogueClassDefinition*);
typedef RogueString*(*ROGUEM279)(RogueClassString_DefinitionTable*);
typedef RogueString*(*ROGUEM280)(RogueNativePropertyList*);
typedef RogueNativePropertyList*(*ROGUEM281)(RogueNativePropertyList*);
typedef RogueString*(*ROGUEM282)(RogueClassNativeProperty*);
typedef RogueString*(*ROGUEM283)(RogueClassString_PropertyTable*);
typedef RogueString*(*ROGUEM284)(RogueClassCmdLiteralNull*);
typedef RogueClassCmd*(*ROGUEM285)(RogueClassCmdLiteralNull*,RogueClassType*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM286)(RogueClassCmdLiteralNull*,RogueClassCloneArgs*);
typedef RogueClassCmdLiteralNull*(*ROGUEM287)(RogueClassCmdLiteralNull*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM288)(RogueClassCmdLiteralNull*);
typedef void(*ROGUEM289)(RogueClassCmdLiteralNull*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralNull*(*ROGUEM290)(RogueClassCmdLiteralNull*);
typedef RogueString*(*ROGUEM291)(RogueClassCmdCreateCompound*);
typedef RogueClassCmd*(*ROGUEM292)(RogueClassCmdCreateCompound*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM293)(RogueClassCmdCreateCompound*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM294)(RogueClassCmdCreateCompound*);
typedef void(*ROGUEM295)(RogueClassCmdCreateCompound*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM296)(RogueClassCmdCreateCompound*);
typedef void(*ROGUEM297)(RogueClassCmdCreateCompound*,RogueClassScope*);
typedef RogueClassCmdCreateCompound*(*ROGUEM298)(RogueClassCmdCreateCompound*);
typedef RogueString*(*ROGUEM299)(RogueClassCmdLiteralLogical*);
typedef RogueClassCmd*(*ROGUEM300)(RogueClassCmdLiteralLogical*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM301)(RogueClassCmdLiteralLogical*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM302)(RogueClassCmdLiteralLogical*);
typedef void(*ROGUEM303)(RogueClassCmdLiteralLogical*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralLogical*(*ROGUEM304)(RogueClassCmdLiteralLogical*);
typedef RogueString*(*ROGUEM305)(RogueClassCmdLiteralString*);
typedef RogueClassCmd*(*ROGUEM306)(RogueClassCmdLiteralString*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM307)(RogueClassCmdLiteralString*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM308)(RogueClassCmdLiteralString*);
typedef void(*ROGUEM309)(RogueClassCmdLiteralString*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM310)(RogueClassCmdLiteralString*);
typedef void(*ROGUEM311)(RogueClassCmdLiteralString*,RogueClassScope*);
typedef RogueClassCmdLiteralString*(*ROGUEM312)(RogueClassCmdLiteralString*);
typedef RogueString*(*ROGUEM313)(RogueClassCmdWriteGlobal*);
typedef RogueClassCmd*(*ROGUEM314)(RogueClassCmdWriteGlobal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM315)(RogueClassCmdWriteGlobal*,RogueClassScope*);
typedef void(*ROGUEM316)(RogueClassCmdWriteGlobal*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM317)(RogueClassCmdWriteGlobal*);
typedef void(*ROGUEM318)(RogueClassCmdWriteGlobal*,RogueClassScope*);
typedef RogueClassCmdWriteGlobal*(*ROGUEM319)(RogueClassCmdWriteGlobal*);
typedef RogueString*(*ROGUEM320)(RogueClassCmdWriteProperty*);
typedef RogueClassCmd*(*ROGUEM321)(RogueClassCmdWriteProperty*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM322)(RogueClassCmdWriteProperty*,RogueClassScope*);
typedef void(*ROGUEM323)(RogueClassCmdWriteProperty*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM324)(RogueClassCmdWriteProperty*);
typedef void(*ROGUEM325)(RogueClassCmdWriteProperty*,RogueClassScope*);
typedef RogueClassCmdWriteProperty*(*ROGUEM326)(RogueClassCmdWriteProperty*);
typedef RogueString*(*ROGUEM327)(RogueTableEntry_of_String_TypeList*);
typedef RogueTableEntry_of_String_TypeList*(*ROGUEM328)(RogueTableEntry_of_String_TypeList*);
typedef RogueString*(*ROGUEM329)(RogueClassString_TypeTableEntry*);
typedef RogueString*(*ROGUEM330)(RogueTableEntry_of_String_Int32List*);
typedef RogueTableEntry_of_String_Int32List*(*ROGUEM331)(RogueTableEntry_of_String_Int32List*);
typedef RogueString*(*ROGUEM332)(RogueTableEntry_of_String_StringListList*);
typedef RogueTableEntry_of_String_StringListList*(*ROGUEM333)(RogueTableEntry_of_String_StringListList*);
typedef RogueString*(*ROGUEM334)(RogueClassString_StringListTableEntry*);
typedef RogueString*(*ROGUEM335)(RogueTableEntry_of_Int32_TemplateList*);
typedef RogueTableEntry_of_Int32_TemplateList*(*ROGUEM336)(RogueTableEntry_of_Int32_TemplateList*);
typedef RogueString*(*ROGUEM337)(RogueClassInt32_TemplateTableEntry*);
typedef RogueString*(*ROGUEM338)(RogueClassCmdCastToType*);
typedef RogueClassCmd*(*ROGUEM339)(RogueClassCmdCastToType*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM340)(RogueClassCmdCastToType*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM341)(RogueClassCmdTypeOperator*);
typedef void(*ROGUEM342)(RogueClassCmdCastToType*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM343)(RogueClassCmdTypeOperator*);
typedef void(*ROGUEM344)(RogueClassCmdTypeOperator*,RogueClassScope*);
typedef RogueClassCmdCastToType*(*ROGUEM345)(RogueClassCmdCastToType*);
typedef RogueString*(*ROGUEM346)(RogueClassCmdTypeOperator*);
typedef RogueClassCmdTypeOperator*(*ROGUEM347)(RogueClassCmdTypeOperator*);
typedef RogueString*(*ROGUEM348)(RogueClassCmdLogicalize*);
typedef RogueClassCmd*(*ROGUEM349)(RogueClassCmdLogicalize*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM350)(RogueClassCmdLogicalize*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM351)(RogueClassCmdLogicalize*);
typedef void(*ROGUEM352)(RogueClassCmdUnary*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM353)(RogueClassCmdUnary*);
typedef void(*ROGUEM354)(RogueClassCmdUnary*,RogueClassScope*);
typedef RogueClassCmdLogicalize*(*ROGUEM355)(RogueClassCmdLogicalize*);
typedef RogueString*(*ROGUEM356)(RogueClassCmdUnary*);
typedef RogueClassCmd*(*ROGUEM357)(RogueClassCmdUnary*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM358)(RogueClassCmdUnary*);
typedef RogueClassCmdUnary*(*ROGUEM359)(RogueClassCmdUnary*);
typedef RogueString*(*ROGUEM360)(RogueClassCmdCreateOptionalValue*);
typedef RogueClassCmd*(*ROGUEM361)(RogueClassCmdCreateOptionalValue*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM362)(RogueClassCmdCreateOptionalValue*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM363)(RogueClassCmdCreateOptionalValue*);
typedef void(*ROGUEM364)(RogueClassCmdCreateOptionalValue*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM365)(RogueClassCmdCreateOptionalValue*);
typedef void(*ROGUEM366)(RogueClassCmdCreateOptionalValue*,RogueClassScope*);
typedef RogueClassCmdCreateOptionalValue*(*ROGUEM367)(RogueClassCmdCreateOptionalValue*);
typedef RogueString*(*ROGUEM368)(RogueClassCmdReadSingleton*);
typedef RogueClassCmd*(*ROGUEM369)(RogueClassCmdReadSingleton*,RogueClassCloneArgs*);
typedef void(*ROGUEM370)(RogueClassCmdReadSingleton*);
typedef RogueClassCmd*(*ROGUEM371)(RogueClassCmdReadSingleton*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM372)(RogueClassCmdReadSingleton*);
typedef void(*ROGUEM373)(RogueClassCmdReadSingleton*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM374)(RogueClassCmdReadSingleton*,RogueClassScope*);
typedef RogueClassCmdReadSingleton*(*ROGUEM375)(RogueClassCmdReadSingleton*);
typedef RogueString*(*ROGUEM376)(RogueClassCmdCallInlineNative*);
typedef RogueString*(*ROGUEM377)(RogueClassCmdCallInlineNativeRoutine*);
typedef RogueClassCmd*(*ROGUEM378)(RogueClassCmdCallInlineNativeRoutine*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM379)(RogueClassCmdCall*);
typedef RogueClassCmd*(*ROGUEM380)(RogueClassCmdCall*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM381)(RogueClassCmdCallInlineNative*,RogueClassScope*,RogueInt32);
typedef RogueClassType*(*ROGUEM382)(RogueClassCmdCallInlineNativeRoutine*);
typedef void(*ROGUEM383)(RogueClassCmdCallInlineNative*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM384)(RogueClassCmdCall*);
typedef void(*ROGUEM385)(RogueClassCmdCall*,RogueClassScope*);
typedef RogueClassCmdCallInlineNativeRoutine*(*ROGUEM386)(RogueClassCmdCallInlineNativeRoutine*);
typedef void(*ROGUEM387)(RogueClassCmdCallInlineNative*,RogueClassCPPWriter*);
typedef RogueClassCmdCallInlineNative*(*ROGUEM388)(RogueClassCmdCallInlineNative*);
typedef RogueString*(*ROGUEM389)(RogueClassCmdCall*);
typedef RogueClassCmdCall*(*ROGUEM390)(RogueClassCmdCall*);
typedef RogueString*(*ROGUEM391)(RogueClassCmdCallNativeRoutine*);
typedef RogueClassCmd*(*ROGUEM392)(RogueClassCmdCallNativeRoutine*,RogueClassCloneArgs*);
typedef void(*ROGUEM393)(RogueClassCmdCallNativeRoutine*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallNativeRoutine*(*ROGUEM394)(RogueClassCmdCallNativeRoutine*);
typedef RogueString*(*ROGUEM395)(RogueClassMacroArgs*);
typedef RogueClassMacroArgs*(*ROGUEM396)(RogueClassMacroArgs*);
typedef RogueString*(*ROGUEM397)(RogueClassCmdInlineNative*);
typedef RogueClassCmdInlineNative*(*ROGUEM398)(RogueClassCmdInlineNative*,RogueClassCloneArgs*);
typedef RogueLogical(*ROGUEM399)(RogueClassCmdInlineNative*);
typedef RogueClassCmd*(*ROGUEM400)(RogueClassCmdInlineNative*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM401)(RogueClassCmdInlineNative*,RogueClassScope*,RogueClassCmd*);
typedef RogueClassCmd*(*ROGUEM402)(RogueClassCmdInlineNative*,RogueClassScope*,RogueInt32);
typedef RogueClassCmd*(*ROGUEM403)(RogueClassCmdInlineNative*,RogueClassScope*,RogueClassTokenType*,RogueClassCmd*);
typedef RogueClassType*(*ROGUEM404)(RogueClassCmdInlineNative*);
typedef void(*ROGUEM405)(RogueClassCmdInlineNative*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM406)(RogueClassCmdInlineNative*);
typedef void(*ROGUEM407)(RogueClassCmdInlineNative*,RogueClassScope*);
typedef RogueClassCmdInlineNative*(*ROGUEM408)(RogueClassCmdInlineNative*);
typedef RogueString*(*ROGUEM409)(RogueClassCmdCallRoutine*);
typedef RogueClassCmd*(*ROGUEM410)(RogueClassCmdCallRoutine*,RogueClassCloneArgs*);
typedef void(*ROGUEM411)(RogueClassCmdCallRoutine*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallRoutine*(*ROGUEM412)(RogueClassCmdCallRoutine*);
typedef RogueString*(*ROGUEM413)(RogueClassCmdReadArrayCount*);
typedef RogueClassCmd*(*ROGUEM414)(RogueClassCmdReadArrayCount*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM415)(RogueClassCmdReadArrayCount*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM416)(RogueClassCmdReadArrayCount*);
typedef void(*ROGUEM417)(RogueClassCmdReadArrayCount*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM418)(RogueClassCmdReadArrayCount*);
typedef void(*ROGUEM419)(RogueClassCmdReadArrayCount*,RogueClassScope*);
typedef RogueClassCmdReadArrayCount*(*ROGUEM420)(RogueClassCmdReadArrayCount*);
typedef RogueString*(*ROGUEM421)(RogueClassCmdCallInlineNativeMethod*);
typedef RogueClassCmd*(*ROGUEM422)(RogueClassCmdCallInlineNativeMethod*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM423)(RogueClassCmdCallInlineNativeMethod*);
typedef RogueClassCmdCallInlineNativeMethod*(*ROGUEM424)(RogueClassCmdCallInlineNativeMethod*);
typedef void(*ROGUEM425)(RogueClassCmdCallInlineNativeMethod*,RogueClassCPPWriter*);
typedef RogueString*(*ROGUEM426)(RogueClassCmdCallNativeMethod*);
typedef RogueClassCmd*(*ROGUEM427)(RogueClassCmdCallNativeMethod*,RogueClassCloneArgs*);
typedef void(*ROGUEM428)(RogueClassCmdCallNativeMethod*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallNativeMethod*(*ROGUEM429)(RogueClassCmdCallNativeMethod*);
typedef RogueString*(*ROGUEM430)(RogueClassCmdCallAspectMethod*);
typedef RogueClassCmd*(*ROGUEM431)(RogueClassCmdCallAspectMethod*,RogueClassCloneArgs*);
typedef void(*ROGUEM432)(RogueClassCmdCallAspectMethod*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallAspectMethod*(*ROGUEM433)(RogueClassCmdCallAspectMethod*);
typedef RogueString*(*ROGUEM434)(RogueClassCmdCallDynamicMethod*);
typedef RogueClassCmd*(*ROGUEM435)(RogueClassCmdCallMethod*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM436)(RogueClassCmdCallDynamicMethod*,RogueClassCloneArgs*);
typedef void(*ROGUEM437)(RogueClassCmdCallDynamicMethod*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM438)(RogueClassCmdCallDynamicMethod*);
typedef RogueClassCmdCallDynamicMethod*(*ROGUEM439)(RogueClassCmdCallDynamicMethod*);
typedef RogueString*(*ROGUEM440)(RogueClassCmdCallMethod*);
typedef RogueClassCmdCallMethod*(*ROGUEM441)(RogueClassCmdCallMethod*);
typedef RogueString*(*ROGUEM442)(RogueClassCandidateMethods*);
typedef RogueString*(*ROGUEM443)(RogueClassCmdCreateFunction*);
typedef RogueClassCmdCreateFunction*(*ROGUEM444)(RogueClassCmdCreateFunction*,RogueClassCloneArgs*);
typedef RogueLogical(*ROGUEM445)(RogueClassCmdCreateFunction*);
typedef RogueClassCmd*(*ROGUEM446)(RogueClassCmdCreateFunction*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM447)(RogueClassCmdCreateFunction*);
typedef RogueClassCmdCreateFunction*(*ROGUEM448)(RogueClassCmdCreateFunction*);
typedef RogueString*(*ROGUEM449)(RogueFnParamList*);
typedef RogueFnParamList*(*ROGUEM450)(RogueFnParamList*);
typedef RogueString*(*ROGUEM451)(RogueClassFnParam*);
typedef RogueString*(*ROGUEM452)(RogueTableEntry_of_String_MethodList*);
typedef RogueTableEntry_of_String_MethodList*(*ROGUEM453)(RogueTableEntry_of_String_MethodList*);
typedef RogueString*(*ROGUEM454)(RogueClassString_MethodTableEntry*);
typedef RogueString*(*ROGUEM455)(RogueTableEntry_of_String_LogicalList*);
typedef RogueTableEntry_of_String_LogicalList*(*ROGUEM456)(RogueTableEntry_of_String_LogicalList*);
typedef RogueString*(*ROGUEM457)(RogueClassString_LogicalTableEntry*);
typedef RogueString*(*ROGUEM458)(RogueClassTokenReader*);
typedef RogueString*(*ROGUEM459)(RogueClassString_StringTable*);
typedef RogueString*(*ROGUEM460)(RogueClassTokenizer*);
typedef RogueString*(*ROGUEM461)(RogueClassParseReader*);
typedef RogueLogical(*ROGUEM462)(RogueClassParseReader*);
typedef RogueCharacter(*ROGUEM463)(RogueClassParseReader*);
typedef RogueString*(*ROGUEM464)(RogueClassPreprocessor*);
typedef RogueString*(*ROGUEM465)(RogueClassEOLToken*);
typedef RogueClassEOLToken*(*ROGUEM466)(RogueClassEOLToken*);
typedef RogueString*(*ROGUEM467)(RogueClassCmdAdd*);
typedef RogueClassCmd*(*ROGUEM468)(RogueClassCmdAdd*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM469)(RogueClassCmdAdd*,RogueClassType*);
typedef RogueClassCmdAdd*(*ROGUEM470)(RogueClassCmdAdd*);
typedef RogueClassCmd*(*ROGUEM471)(RogueClassCmdAdd*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueString*(*ROGUEM472)(RogueClassCmdNativeHeader*);
typedef RogueClassCmdNativeHeader*(*ROGUEM473)(RogueClassCmdNativeHeader*,RogueClassCloneArgs*);
typedef RogueLogical(*ROGUEM474)(RogueClassCmdNativeHeader*);
typedef RogueClassCmd*(*ROGUEM475)(RogueClassCmdNativeHeader*,RogueClassScope*);
typedef void(*ROGUEM476)(RogueClassCmdNativeHeader*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM477)(RogueClassCmdNativeHeader*);
typedef void(*ROGUEM478)(RogueClassCmdNativeHeader*,RogueClassScope*);
typedef RogueClassCmdNativeHeader*(*ROGUEM479)(RogueClassCmdNativeHeader*);
typedef RogueString*(*ROGUEM480)(RogueClassCmdNativeCode*);
typedef RogueClassCmdNativeCode*(*ROGUEM481)(RogueClassCmdNativeCode*,RogueClassCloneArgs*);
typedef RogueLogical(*ROGUEM482)(RogueClassCmdNativeCode*);
typedef RogueClassCmd*(*ROGUEM483)(RogueClassCmdNativeCode*,RogueClassScope*);
typedef void(*ROGUEM484)(RogueClassCmdNativeCode*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM485)(RogueClassCmdNativeCode*);
typedef void(*ROGUEM486)(RogueClassCmdNativeCode*,RogueClassScope*);
typedef RogueClassCmdNativeCode*(*ROGUEM487)(RogueClassCmdNativeCode*);
typedef RogueString*(*ROGUEM488)(RogueClassCmdIf*);
typedef RogueClassCmd*(*ROGUEM489)(RogueClassCmdIf*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM490)(RogueClassCmdIf*,RogueClassScope*);
typedef void(*ROGUEM491)(RogueClassCmdIf*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM492)(RogueClassCmdIf*);
typedef void(*ROGUEM493)(RogueClassCmdIf*,RogueClassScope*);
typedef RogueClassCmdIf*(*ROGUEM494)(RogueClassCmdIf*);
typedef RogueString*(*ROGUEM495)(RogueClassCmdWhich*);
typedef RogueClassCmdWhich*(*ROGUEM496)(RogueClassCmdWhich*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM497)(RogueClassCmdWhich*,RogueClassScope*);
typedef void(*ROGUEM498)(RogueClassCmdWhich*,RogueClassScope*);
typedef RogueClassCmdWhich*(*ROGUEM499)(RogueClassCmdWhich*);
typedef RogueString*(*ROGUEM500)(RogueClassCmdContingent*);
typedef RogueClassCmd*(*ROGUEM501)(RogueClassCmdContingent*,RogueClassCloneArgs*);
typedef RogueClassCmdContingent*(*ROGUEM502)(RogueClassCmdContingent*,RogueClassScope*);
typedef void(*ROGUEM503)(RogueClassCmdContingent*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM504)(RogueClassCmdContingent*);
typedef void(*ROGUEM505)(RogueClassCmdContingent*,RogueClassScope*);
typedef RogueClassCmdContingent*(*ROGUEM506)(RogueClassCmdContingent*);
typedef RogueClassCmd*(*ROGUEM507)(RogueClassCmdContingent*,RogueClassCmdControlStructure*);
typedef RogueString*(*ROGUEM508)(RogueClassCmdTry*);
typedef RogueClassCmdTry*(*ROGUEM509)(RogueClassCmdTry*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM510)(RogueClassCmdTry*,RogueClassScope*);
typedef void(*ROGUEM511)(RogueClassCmdTry*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM512)(RogueClassCmdTry*);
typedef void(*ROGUEM513)(RogueClassCmdTry*,RogueClassScope*);
typedef RogueClassCmdTry*(*ROGUEM514)(RogueClassCmdTry*);
typedef RogueString*(*ROGUEM515)(RogueClassCmdAwait*);
typedef RogueClassCmd*(*ROGUEM516)(RogueClassCmdAwait*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM517)(RogueClassCmdAwait*,RogueClassScope*);
typedef RogueClassCmdAwait*(*ROGUEM518)(RogueClassCmdAwait*);
typedef RogueString*(*ROGUEM519)(RogueClassCmdYield*);
typedef RogueClassCmd*(*ROGUEM520)(RogueClassCmdYield*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM521)(RogueClassCmdYield*,RogueClassScope*);
typedef RogueClassCmdYield*(*ROGUEM522)(RogueClassCmdYield*);
typedef RogueString*(*ROGUEM523)(RogueClassCmdThrow*);
typedef RogueClassCmdThrow*(*ROGUEM524)(RogueClassCmdThrow*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM525)(RogueClassCmdThrow*,RogueClassScope*);
typedef void(*ROGUEM526)(RogueClassCmdThrow*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM527)(RogueClassCmdThrow*);
typedef void(*ROGUEM528)(RogueClassCmdThrow*,RogueClassScope*);
typedef RogueClassCmdThrow*(*ROGUEM529)(RogueClassCmdThrow*);
typedef RogueString*(*ROGUEM530)(RogueClassCmdFormattedString*);
typedef RogueClassCmd*(*ROGUEM531)(RogueClassCmdFormattedString*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM532)(RogueClassCmdFormattedString*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM533)(RogueClassCmdFormattedString*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM534)(RogueClassCmdFormattedString*);
typedef void(*ROGUEM535)(RogueClassCmdFormattedString*,RogueClassScope*);
typedef RogueClassCmdFormattedString*(*ROGUEM536)(RogueClassCmdFormattedString*);
typedef RogueString*(*ROGUEM537)(RogueClassCmdTrace*);
typedef RogueClassCmdTrace*(*ROGUEM538)(RogueClassCmdTrace*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM539)(RogueClassCmdTrace*,RogueClassScope*);
typedef void(*ROGUEM540)(RogueClassCmdTrace*);
typedef void(*ROGUEM541)(RogueClassCmdTrace*,RogueClassScope*);
typedef RogueClassCmdTrace*(*ROGUEM542)(RogueClassCmdTrace*);
typedef RogueString*(*ROGUEM543)(RogueClassCmdEscape*);
typedef RogueClassCmd*(*ROGUEM544)(RogueClassCmdEscape*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM545)(RogueClassCmdEscape*,RogueClassScope*);
typedef void(*ROGUEM546)(RogueClassCmdEscape*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM547)(RogueClassCmdEscape*);
typedef void(*ROGUEM548)(RogueClassCmdEscape*,RogueClassScope*);
typedef RogueClassCmdEscape*(*ROGUEM549)(RogueClassCmdEscape*);
typedef RogueString*(*ROGUEM550)(RogueClassCmdNextIteration*);
typedef RogueClassCmd*(*ROGUEM551)(RogueClassCmdNextIteration*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM552)(RogueClassCmdNextIteration*,RogueClassScope*);
typedef void(*ROGUEM553)(RogueClassCmdNextIteration*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM554)(RogueClassCmdNextIteration*);
typedef void(*ROGUEM555)(RogueClassCmdNextIteration*,RogueClassScope*);
typedef RogueClassCmdNextIteration*(*ROGUEM556)(RogueClassCmdNextIteration*);
typedef RogueString*(*ROGUEM557)(RogueClassCmdNecessary*);
typedef RogueClassCmd*(*ROGUEM558)(RogueClassCmdNecessary*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM559)(RogueClassCmdNecessary*,RogueClassScope*);
typedef void(*ROGUEM560)(RogueClassCmdNecessary*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM561)(RogueClassCmdNecessary*);
typedef void(*ROGUEM562)(RogueClassCmdNecessary*,RogueClassScope*);
typedef RogueClassCmdNecessary*(*ROGUEM563)(RogueClassCmdNecessary*);
typedef RogueString*(*ROGUEM564)(RogueClassCmdSufficient*);
typedef RogueClassCmd*(*ROGUEM565)(RogueClassCmdSufficient*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM566)(RogueClassCmdSufficient*,RogueClassScope*);
typedef void(*ROGUEM567)(RogueClassCmdSufficient*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM568)(RogueClassCmdSufficient*);
typedef void(*ROGUEM569)(RogueClassCmdSufficient*,RogueClassScope*);
typedef RogueClassCmdSufficient*(*ROGUEM570)(RogueClassCmdSufficient*);
typedef RogueString*(*ROGUEM571)(RogueClassCmdAdjust*);
typedef RogueClassCmd*(*ROGUEM572)(RogueClassCmdAdjust*,RogueClassScope*);
typedef RogueClassCmdAdjust*(*ROGUEM573)(RogueClassCmdAdjust*);
typedef RogueString*(*ROGUEM574)(RogueClassCmdOpWithAssign*);
typedef RogueClassCmd*(*ROGUEM575)(RogueClassCmdOpWithAssign*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM576)(RogueClassCmdOpWithAssign*,RogueClassScope*);
typedef RogueClassCmdOpWithAssign*(*ROGUEM577)(RogueClassCmdOpWithAssign*);
typedef RogueString*(*ROGUEM578)(RogueCmdWhichCaseList*);
typedef RogueCmdWhichCaseList*(*ROGUEM579)(RogueCmdWhichCaseList*);
typedef RogueString*(*ROGUEM580)(RogueClassCmdWhichCase*);
typedef RogueClassCmdWhichCase*(*ROGUEM581)(RogueClassCmdWhichCase*,RogueClassCloneArgs*);
typedef void(*ROGUEM582)(RogueClassCmdWhichCase*);
typedef void(*ROGUEM583)(RogueClassCmdWhichCase*,RogueClassScope*);
typedef RogueClassCmdWhichCase*(*ROGUEM584)(RogueClassCmdWhichCase*);
typedef RogueString*(*ROGUEM585)(RogueCmdCatchList*);
typedef RogueCmdCatchList*(*ROGUEM586)(RogueCmdCatchList*);
typedef RogueString*(*ROGUEM587)(RogueClassCmdCatch*);
typedef RogueClassCmdCatch*(*ROGUEM588)(RogueClassCmdCatch*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM589)(RogueClassCmdCatch*,RogueClassScope*);
typedef void(*ROGUEM590)(RogueClassCmdCatch*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM591)(RogueClassCmdCatch*);
typedef void(*ROGUEM592)(RogueClassCmdCatch*,RogueClassScope*);
typedef RogueClassCmdCatch*(*ROGUEM593)(RogueClassCmdCatch*);
typedef RogueString*(*ROGUEM594)(RogueClassCmdLocalDeclaration*);
typedef RogueClassCmd*(*ROGUEM595)(RogueClassCmdLocalDeclaration*,RogueClassCloneArgs*);
typedef void(*ROGUEM596)(RogueClassCmdLocalDeclaration*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM597)(RogueClassCmdLocalDeclaration*,RogueClassScope*);
typedef void(*ROGUEM598)(RogueClassCmdLocalDeclaration*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM599)(RogueClassCmdLocalDeclaration*);
typedef RogueClassCmdLocalDeclaration*(*ROGUEM600)(RogueClassCmdLocalDeclaration*);
typedef RogueString*(*ROGUEM601)(RogueClassCmdAdjustLocal*);
typedef RogueClassCmd*(*ROGUEM602)(RogueClassCmdAdjustLocal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM603)(RogueClassCmdAdjustLocal*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM604)(RogueClassCmdAdjustLocal*);
typedef void(*ROGUEM605)(RogueClassCmdAdjustLocal*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM606)(RogueClassCmdAdjustLocal*);
typedef void(*ROGUEM607)(RogueClassCmdAdjustLocal*,RogueClassScope*);
typedef RogueClassCmdAdjustLocal*(*ROGUEM608)(RogueClassCmdAdjustLocal*);
typedef RogueString*(*ROGUEM609)(RogueClassCmdReadLocal*);
typedef RogueClassCmd*(*ROGUEM610)(RogueClassCmdReadLocal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM611)(RogueClassCmdReadLocal*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM612)(RogueClassCmdReadLocal*,RogueClassScope*,RogueInt32);
typedef RogueClassType*(*ROGUEM613)(RogueClassCmdReadLocal*);
typedef void(*ROGUEM614)(RogueClassCmdReadLocal*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM615)(RogueClassCmdReadLocal*);
typedef void(*ROGUEM616)(RogueClassCmdReadLocal*,RogueClassScope*);
typedef RogueClassCmdReadLocal*(*ROGUEM617)(RogueClassCmdReadLocal*);
typedef RogueString*(*ROGUEM618)(RogueClassCmdCompareLE*);
typedef RogueClassCmd*(*ROGUEM619)(RogueClassCmdCompareLE*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM620)(RogueClassCmdCompareLE*,RogueClassType*);
typedef RogueClassCmdCompareLE*(*ROGUEM621)(RogueClassCmdCompareLE*);
typedef RogueClassCmd*(*ROGUEM622)(RogueClassCmdCompareLE*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM623)(RogueClassCmdRange*);
typedef RogueClassCmd*(*ROGUEM624)(RogueClassCmdRange*,RogueClassScope*);
typedef void(*ROGUEM625)(RogueClassCmdRange*);
typedef void(*ROGUEM626)(RogueClassCmdRange*,RogueClassScope*);
typedef RogueClassCmdRange*(*ROGUEM627)(RogueClassCmdRange*);
typedef RogueInt32(*ROGUEM628)(RogueClassCmdRange*);
typedef RogueString*(*ROGUEM629)(RogueClassCmdLocalOpWithAssign*);
typedef RogueClassCmd*(*ROGUEM630)(RogueClassCmdLocalOpWithAssign*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM631)(RogueClassCmdLocalOpWithAssign*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM632)(RogueClassCmdLocalOpWithAssign*);
typedef void(*ROGUEM633)(RogueClassCmdLocalOpWithAssign*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM634)(RogueClassCmdLocalOpWithAssign*);
typedef void(*ROGUEM635)(RogueClassCmdLocalOpWithAssign*,RogueClassScope*);
typedef RogueClassCmdLocalOpWithAssign*(*ROGUEM636)(RogueClassCmdLocalOpWithAssign*);
typedef RogueString*(*ROGUEM637)(RogueClassCmdResolvedOpWithAssign*);
typedef RogueClassCmdResolvedOpWithAssign*(*ROGUEM638)(RogueClassCmdResolvedOpWithAssign*);
typedef RogueString*(*ROGUEM639)(RogueClassCmdRangeUpTo*);
typedef RogueClassCmd*(*ROGUEM640)(RogueClassCmdRangeUpTo*,RogueClassCloneArgs*);
typedef RogueClassCmdRangeUpTo*(*ROGUEM641)(RogueClassCmdRangeUpTo*);
typedef RogueString*(*ROGUEM642)(RogueClassCmdCompareGE*);
typedef RogueClassCmd*(*ROGUEM643)(RogueClassCmdCompareGE*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM644)(RogueClassCmdCompareGE*,RogueClassType*);
typedef RogueClassCmdCompareGE*(*ROGUEM645)(RogueClassCmdCompareGE*);
typedef RogueClassCmd*(*ROGUEM646)(RogueClassCmdCompareGE*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM647)(RogueClassCmdForEach*);
typedef RogueClassCmd*(*ROGUEM648)(RogueClassCmdForEach*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM649)(RogueClassCmdForEach*,RogueClassScope*);
typedef void(*ROGUEM650)(RogueClassCmdForEach*);
typedef void(*ROGUEM651)(RogueClassCmdForEach*,RogueClassScope*);
typedef RogueClassCmdForEach*(*ROGUEM652)(RogueClassCmdForEach*);
typedef RogueString*(*ROGUEM653)(RogueClassCmdRangeDownTo*);
typedef RogueClassCmd*(*ROGUEM654)(RogueClassCmdRangeDownTo*,RogueClassCloneArgs*);
typedef RogueClassCmdRangeDownTo*(*ROGUEM655)(RogueClassCmdRangeDownTo*);
typedef RogueInt32(*ROGUEM656)(RogueClassCmdRangeDownTo*);
typedef RogueString*(*ROGUEM657)(RogueClassCmdLogicalXor*);
typedef RogueClassCmd*(*ROGUEM658)(RogueClassCmdLogicalXor*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM659)(RogueClassCmdBinaryLogical*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM660)(RogueClassCmdBinaryLogical*);
typedef RogueClassCmdLogicalXor*(*ROGUEM661)(RogueClassCmdLogicalXor*);
typedef RogueClassCmd*(*ROGUEM662)(RogueClassCmdBinaryLogical*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueLogical(*ROGUEM663)(RogueClassCmdLogicalXor*,RogueLogical,RogueLogical);
typedef RogueString*(*ROGUEM664)(RogueClassCmdBinaryLogical*);
typedef RogueClassCmdBinaryLogical*(*ROGUEM665)(RogueClassCmdBinaryLogical*);
typedef RogueLogical(*ROGUEM666)(RogueClassCmdBinaryLogical*,RogueLogical,RogueLogical);
typedef RogueString*(*ROGUEM667)(RogueClassCmdLogicalOr*);
typedef RogueClassCmd*(*ROGUEM668)(RogueClassCmdLogicalOr*,RogueClassCloneArgs*);
typedef RogueClassCmdLogicalOr*(*ROGUEM669)(RogueClassCmdLogicalOr*);
typedef RogueLogical(*ROGUEM670)(RogueClassCmdLogicalOr*,RogueLogical,RogueLogical);
typedef RogueString*(*ROGUEM671)(RogueClassCmdLogicalAnd*);
typedef RogueClassCmd*(*ROGUEM672)(RogueClassCmdLogicalAnd*,RogueClassCloneArgs*);
typedef RogueClassCmdLogicalAnd*(*ROGUEM673)(RogueClassCmdLogicalAnd*);
typedef RogueLogical(*ROGUEM674)(RogueClassCmdLogicalAnd*,RogueLogical,RogueLogical);
typedef RogueString*(*ROGUEM675)(RogueClassCmdCompareEQ*);
typedef RogueClassCmd*(*ROGUEM676)(RogueClassCmdCompareEQ*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM677)(RogueClassCmdCompareEQ*,RogueClassType*);
typedef RogueClassCmdCompareEQ*(*ROGUEM678)(RogueClassCmdCompareEQ*);
typedef RogueLogical(*ROGUEM679)(RogueClassCmdCompareEQ*);
typedef RogueClassCmd*(*ROGUEM680)(RogueClassCmdCompareEQ*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM681)(RogueClassCmdCompareIs*);
typedef RogueClassCmd*(*ROGUEM682)(RogueClassCmdCompareIs*,RogueClassCloneArgs*);
typedef void(*ROGUEM683)(RogueClassCmdCompareIs*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCompareIs*(*ROGUEM684)(RogueClassCmdCompareIs*);
typedef RogueClassCmd*(*ROGUEM685)(RogueClassCmdCompareIs*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueString*(*ROGUEM686)(RogueClassCmdCompareIsNot*);
typedef RogueClassCmd*(*ROGUEM687)(RogueClassCmdCompareIsNot*,RogueClassCloneArgs*);
typedef void(*ROGUEM688)(RogueClassCmdCompareIsNot*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCompareIsNot*(*ROGUEM689)(RogueClassCmdCompareIsNot*);
typedef RogueClassCmd*(*ROGUEM690)(RogueClassCmdCompareIsNot*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueString*(*ROGUEM691)(RogueClassCmdCompareLT*);
typedef RogueClassCmd*(*ROGUEM692)(RogueClassCmdCompareLT*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM693)(RogueClassCmdCompareLT*,RogueClassType*);
typedef RogueClassCmdCompareLT*(*ROGUEM694)(RogueClassCmdCompareLT*);
typedef RogueClassCmd*(*ROGUEM695)(RogueClassCmdCompareLT*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM696)(RogueClassCmdCompareGT*);
typedef RogueClassCmd*(*ROGUEM697)(RogueClassCmdCompareGT*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM698)(RogueClassCmdCompareGT*,RogueClassType*);
typedef RogueClassCmdCompareGT*(*ROGUEM699)(RogueClassCmdCompareGT*);
typedef RogueClassCmd*(*ROGUEM700)(RogueClassCmdCompareGT*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM701)(RogueClassCmdInstanceOf*);
typedef RogueClassCmd*(*ROGUEM702)(RogueClassCmdInstanceOf*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM703)(RogueClassCmdInstanceOf*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM704)(RogueClassCmdInstanceOf*);
typedef void(*ROGUEM705)(RogueClassCmdInstanceOf*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdInstanceOf*(*ROGUEM706)(RogueClassCmdInstanceOf*);
typedef RogueString*(*ROGUEM707)(RogueClassCmdLogicalNot*);
typedef RogueClassCmd*(*ROGUEM708)(RogueClassCmdLogicalNot*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM709)(RogueClassCmdLogicalNot*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM710)(RogueClassCmdLogicalNot*);
typedef RogueClassCmdLogicalNot*(*ROGUEM711)(RogueClassCmdLogicalNot*);
typedef RogueString*(*ROGUEM712)(RogueClassCmdBitwiseXor*);
typedef RogueClassCmd*(*ROGUEM713)(RogueClassCmdBitwiseXor*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM714)(RogueClassCmdBitwiseXor*,RogueClassType*);
typedef RogueClassCmdBitwiseXor*(*ROGUEM715)(RogueClassCmdBitwiseXor*);
typedef RogueClassCmd*(*ROGUEM716)(RogueClassCmdBitwiseOp*,RogueClassScope*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM717)(RogueClassCmdBitwiseOp*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueString*(*ROGUEM718)(RogueClassCmdBitwiseOp*);
typedef RogueClassCmdBitwiseOp*(*ROGUEM719)(RogueClassCmdBitwiseOp*);
typedef RogueString*(*ROGUEM720)(RogueClassCmdBitwiseOr*);
typedef RogueClassCmd*(*ROGUEM721)(RogueClassCmdBitwiseOr*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM722)(RogueClassCmdBitwiseOr*,RogueClassType*);
typedef RogueClassCmdBitwiseOr*(*ROGUEM723)(RogueClassCmdBitwiseOr*);
typedef RogueString*(*ROGUEM724)(RogueClassCmdBitwiseAnd*);
typedef RogueClassCmd*(*ROGUEM725)(RogueClassCmdBitwiseAnd*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM726)(RogueClassCmdBitwiseAnd*,RogueClassType*);
typedef RogueClassCmdBitwiseAnd*(*ROGUEM727)(RogueClassCmdBitwiseAnd*);
typedef RogueString*(*ROGUEM728)(RogueClassCmdBitwiseShiftLeft*);
typedef RogueClassCmd*(*ROGUEM729)(RogueClassCmdBitwiseShiftLeft*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM730)(RogueClassCmdBitwiseShiftLeft*,RogueClassType*);
typedef RogueClassCmdBitwiseShiftLeft*(*ROGUEM731)(RogueClassCmdBitwiseShiftLeft*);
typedef RogueString*(*ROGUEM732)(RogueClassCmdBitwiseShiftRight*);
typedef RogueClassCmd*(*ROGUEM733)(RogueClassCmdBitwiseShiftRight*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM734)(RogueClassCmdBitwiseShiftRight*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM735)(RogueClassCmdBitwiseShiftRight*,RogueClassScope*);
typedef RogueClassCmdBitwiseShiftRight*(*ROGUEM736)(RogueClassCmdBitwiseShiftRight*);
typedef RogueString*(*ROGUEM737)(RogueClassCmdBitwiseShiftRightX*);
typedef RogueClassCmd*(*ROGUEM738)(RogueClassCmdBitwiseShiftRightX*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM739)(RogueClassCmdBitwiseShiftRightX*,RogueClassType*);
typedef RogueClassCmdBitwiseShiftRightX*(*ROGUEM740)(RogueClassCmdBitwiseShiftRightX*);
typedef RogueString*(*ROGUEM741)(RogueClassCmdSubtract*);
typedef RogueClassCmd*(*ROGUEM742)(RogueClassCmdSubtract*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM743)(RogueClassCmdSubtract*,RogueClassType*);
typedef RogueClassCmdSubtract*(*ROGUEM744)(RogueClassCmdSubtract*);
typedef RogueString*(*ROGUEM745)(RogueClassCmdMultiply*);
typedef RogueClassCmd*(*ROGUEM746)(RogueClassCmdMultiply*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM747)(RogueClassCmdMultiply*,RogueClassType*);
typedef RogueClassCmdMultiply*(*ROGUEM748)(RogueClassCmdMultiply*);
typedef RogueString*(*ROGUEM749)(RogueClassCmdDivide*);
typedef RogueClassCmd*(*ROGUEM750)(RogueClassCmdDivide*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM751)(RogueClassCmdDivide*,RogueClassType*);
typedef RogueClassCmdDivide*(*ROGUEM752)(RogueClassCmdDivide*);
typedef RogueString*(*ROGUEM753)(RogueClassCmdMod*);
typedef RogueClassCmd*(*ROGUEM754)(RogueClassCmdMod*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM755)(RogueClassCmdMod*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM756)(RogueClassCmdMod*,RogueClassScope*);
typedef RogueClassCmdMod*(*ROGUEM757)(RogueClassCmdMod*);
typedef RogueString*(*ROGUEM758)(RogueClassCmdPower*);
typedef RogueClassCmd*(*ROGUEM759)(RogueClassCmdPower*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM760)(RogueClassCmdPower*,RogueClassType*);
typedef void(*ROGUEM761)(RogueClassCmdPower*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdPower*(*ROGUEM762)(RogueClassCmdPower*);
typedef RogueString*(*ROGUEM763)(RogueClassCmdNegate*);
typedef RogueClassCmd*(*ROGUEM764)(RogueClassCmdNegate*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM765)(RogueClassCmdNegate*,RogueClassScope*);
typedef RogueClassCmdNegate*(*ROGUEM766)(RogueClassCmdNegate*);
typedef RogueClassCmd*(*ROGUEM767)(RogueClassCmdNegate*,RogueClassScope*);
typedef RogueString*(*ROGUEM768)(RogueClassCmdBitwiseNot*);
typedef RogueClassCmd*(*ROGUEM769)(RogueClassCmdBitwiseNot*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM770)(RogueClassCmdBitwiseNot*);
typedef RogueClassCmdBitwiseNot*(*ROGUEM771)(RogueClassCmdBitwiseNot*);
typedef RogueClassCmd*(*ROGUEM772)(RogueClassCmdBitwiseNot*,RogueClassScope*);
typedef RogueString*(*ROGUEM773)(RogueClassCmdGetOptionalValue*);
typedef RogueClassCmd*(*ROGUEM774)(RogueClassCmdGetOptionalValue*,RogueClassCloneArgs*);
typedef RogueClassCmdGetOptionalValue*(*ROGUEM775)(RogueClassCmdGetOptionalValue*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM776)(RogueClassCmdGetOptionalValue*);
typedef void(*ROGUEM777)(RogueClassCmdGetOptionalValue*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM778)(RogueClassCmdGetOptionalValue*);
typedef void(*ROGUEM779)(RogueClassCmdGetOptionalValue*,RogueClassScope*);
typedef RogueClassCmdGetOptionalValue*(*ROGUEM780)(RogueClassCmdGetOptionalValue*);
typedef RogueString*(*ROGUEM781)(RogueClassCmdElementAccess*);
typedef RogueClassCmd*(*ROGUEM782)(RogueClassCmdElementAccess*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM783)(RogueClassCmdElementAccess*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM784)(RogueClassCmdElementAccess*,RogueClassScope*,RogueClassCmd*);
typedef RogueClassCmd*(*ROGUEM785)(RogueClassCmdElementAccess*,RogueClassScope*,RogueInt32);
typedef void(*ROGUEM786)(RogueClassCmdElementAccess*,RogueClassScope*);
typedef RogueClassCmdElementAccess*(*ROGUEM787)(RogueClassCmdElementAccess*);
typedef RogueString*(*ROGUEM788)(RogueClassCmdListConvert*);
typedef RogueClassCmdListConvert*(*ROGUEM789)(RogueClassCmdListConvert*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM790)(RogueClassCmdListConvert*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM791)(RogueClassCmdListConvert*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM792)(RogueClassCmdListConvert*);
typedef RogueClassCmdListConvert*(*ROGUEM793)(RogueClassCmdListConvert*);
typedef RogueString*(*ROGUEM794)(RogueClassCmdConvertToType*);
typedef RogueClassCmd*(*ROGUEM795)(RogueClassCmdConvertToType*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM796)(RogueClassCmdConvertToType*,RogueClassScope*);
typedef RogueClassCmdConvertToType*(*ROGUEM797)(RogueClassCmdConvertToType*);
typedef RogueString*(*ROGUEM798)(RogueClassCmdCreateCallback*);
typedef RogueClassCmdCreateCallback*(*ROGUEM799)(RogueClassCmdCreateCallback*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM800)(RogueClassCmdCreateCallback*,RogueClassScope*);
typedef RogueClassCmdCreateCallback*(*ROGUEM801)(RogueClassCmdCreateCallback*);
typedef RogueString*(*ROGUEM802)(RogueClassCmdAs*);
typedef RogueClassCmd*(*ROGUEM803)(RogueClassCmdAs*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM804)(RogueClassCmdAs*,RogueClassScope*);
typedef void(*ROGUEM805)(RogueClassCmdAs*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdAs*(*ROGUEM806)(RogueClassCmdAs*);
typedef RogueString*(*ROGUEM807)(RogueClassCmdDefaultValue*);
typedef RogueClassCmd*(*ROGUEM808)(RogueClassCmdDefaultValue*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM809)(RogueClassCmdDefaultValue*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM810)(RogueClassCmdDefaultValue*);
typedef RogueClassCmdDefaultValue*(*ROGUEM811)(RogueClassCmdDefaultValue*);
typedef RogueString*(*ROGUEM812)(RogueClassCmdLiteralReal64*);
typedef RogueClassCmd*(*ROGUEM813)(RogueClassCmdLiteralReal64*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM814)(RogueClassCmdLiteralReal64*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM815)(RogueClassCmdLiteralReal64*);
typedef void(*ROGUEM816)(RogueClassCmdLiteralReal64*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralReal64*(*ROGUEM817)(RogueClassCmdLiteralReal64*);
typedef RogueString*(*ROGUEM818)(RogueClassCmdLiteralInt64*);
typedef RogueClassCmd*(*ROGUEM819)(RogueClassCmdLiteralInt64*,RogueClassType*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM820)(RogueClassCmdLiteralInt64*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM821)(RogueClassCmdLiteralInt64*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM822)(RogueClassCmdLiteralInt64*);
typedef void(*ROGUEM823)(RogueClassCmdLiteralInt64*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralInt64*(*ROGUEM824)(RogueClassCmdLiteralInt64*);
typedef RogueString*(*ROGUEM825)(RogueClassCmdLiteralCharacter*);
typedef RogueClassCmd*(*ROGUEM826)(RogueClassCmdLiteralCharacter*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM827)(RogueClassCmdLiteralCharacter*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM828)(RogueClassCmdLiteralCharacter*);
typedef void(*ROGUEM829)(RogueClassCmdLiteralCharacter*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralCharacter*(*ROGUEM830)(RogueClassCmdLiteralCharacter*);
typedef RogueString*(*ROGUEM831)(RogueClassCmdCreateList*);
typedef RogueClassCmd*(*ROGUEM832)(RogueClassCmdCreateList*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM833)(RogueClassCmdCreateList*,RogueClassScope*);
typedef RogueClassCmdCreateList*(*ROGUEM834)(RogueClassCmdCreateList*);
typedef RogueString*(*ROGUEM835)(RogueClassCmdCallPriorMethod*);
typedef RogueClassCmd*(*ROGUEM836)(RogueClassCmdCallPriorMethod*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM837)(RogueClassCmdCallPriorMethod*,RogueClassScope*);
typedef void(*ROGUEM838)(RogueClassCmdCallPriorMethod*,RogueClassScope*);
typedef RogueClassCmdCallPriorMethod*(*ROGUEM839)(RogueClassCmdCallPriorMethod*);
typedef RogueString*(*ROGUEM840)(RogueFnArgList*);
typedef RogueFnArgList*(*ROGUEM841)(RogueFnArgList*);
typedef RogueString*(*ROGUEM842)(RogueClassFnArg*);
typedef RogueString*(*ROGUEM843)(RogueClassCmdSelect*);
typedef RogueClassCmdSelect*(*ROGUEM844)(RogueClassCmdSelect*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM845)(RogueClassCmdSelect*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM846)(RogueClassCmdSelect*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM847)(RogueClassCmdSelect*);
typedef void(*ROGUEM848)(RogueClassCmdSelect*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM849)(RogueClassCmdSelect*);
typedef void(*ROGUEM850)(RogueClassCmdSelect*,RogueClassScope*);
typedef RogueClassCmdSelect*(*ROGUEM851)(RogueClassCmdSelect*);
typedef RogueString*(*ROGUEM852)(RogueCmdSelectCaseList*);
typedef RogueCmdSelectCaseList*(*ROGUEM853)(RogueCmdSelectCaseList*);
typedef RogueString*(*ROGUEM854)(RogueClassCmdSelectCase*);
typedef RogueClassCmdSelectCase*(*ROGUEM855)(RogueClassCmdSelectCase*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM856)(RogueClassCmdSelectCase*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM857)(RogueClassCmdSelectCase*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM858)(RogueClassCmdSelectCase*);
typedef void(*ROGUEM859)(RogueClassCmdSelectCase*);
typedef void(*ROGUEM860)(RogueClassCmdSelectCase*,RogueClassScope*);
typedef RogueClassCmdSelectCase*(*ROGUEM861)(RogueClassCmdSelectCase*);
typedef RogueString*(*ROGUEM862)(RogueClassCmdTypedLiteralList*);
typedef RogueClassCmdTypedLiteralList*(*ROGUEM863)(RogueClassCmdTypedLiteralList*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM864)(RogueClassCmdTypedLiteralList*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM865)(RogueClassCmdTypedLiteralList*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM866)(RogueClassCmdTypedLiteralList*);
typedef RogueClassCmdTypedLiteralList*(*ROGUEM867)(RogueClassCmdTypedLiteralList*);
typedef RogueString*(*ROGUEM868)(RogueTableEntry_of_String_ParseReaderList*);
typedef RogueTableEntry_of_String_ParseReaderList*(*ROGUEM869)(RogueTableEntry_of_String_ParseReaderList*);
typedef RogueString*(*ROGUEM870)(RogueClassString_ParseReaderTableEntry*);
typedef RogueString*(*ROGUEM871)(RogueClassFileReader*);
typedef RogueLogical(*ROGUEM872)(RogueClassFileReader*);
typedef RogueCharacter(*ROGUEM873)(RogueClassFileReader*);
typedef RogueString*(*ROGUEM874)(RogueClassFileWriter*);
typedef RogueClassFileWriter*(*ROGUEM875)(RogueClassFileWriter*);
typedef RogueClassFileWriter*(*ROGUEM876)(RogueClassFileWriter*,RogueCharacter);
typedef RogueString*(*ROGUEM877)(RogueClassTokenListRebuilder*);
typedef RogueString*(*ROGUEM878)(RogueTableEntry_of_String_TokenTypeList*);
typedef RogueTableEntry_of_String_TokenTypeList*(*ROGUEM879)(RogueTableEntry_of_String_TokenTypeList*);
typedef RogueString*(*ROGUEM880)(RogueClassString_TokenTypeTableEntry*);
typedef RogueString*(*ROGUEM881)(RogueTableEntry_of_String_TypeSpecializerList*);
typedef RogueTableEntry_of_String_TypeSpecializerList*(*ROGUEM882)(RogueTableEntry_of_String_TypeSpecializerList*);
typedef RogueString*(*ROGUEM883)(RogueClassString_TypeSpecializerTableEntry*);
typedef RogueString*(*ROGUEM884)(RogueTableEntry_of_String_CmdLabelList*);
typedef RogueTableEntry_of_String_CmdLabelList*(*ROGUEM885)(RogueTableEntry_of_String_CmdLabelList*);
typedef RogueString*(*ROGUEM886)(RogueClassString_CmdLabelTableEntry*);
typedef RogueString*(*ROGUEM887)(RogueClassCmdCreateArray*);
typedef RogueClassCmd*(*ROGUEM888)(RogueClassCmdCreateArray*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM889)(RogueClassCmdCreateArray*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM890)(RogueClassCmdCreateArray*);
typedef void(*ROGUEM891)(RogueClassCmdCreateArray*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM892)(RogueClassCmdCreateArray*);
typedef void(*ROGUEM893)(RogueClassCmdCreateArray*,RogueClassScope*);
typedef RogueClassCmdCreateArray*(*ROGUEM894)(RogueClassCmdCreateArray*);
typedef RogueString*(*ROGUEM895)(RogueClassCmdCreateObject*);
typedef RogueClassCmd*(*ROGUEM896)(RogueClassCmdCreateObject*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM897)(RogueClassCmdCreateObject*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM898)(RogueClassCmdCreateObject*);
typedef void(*ROGUEM899)(RogueClassCmdCreateObject*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM900)(RogueClassCmdCreateObject*);
typedef void(*ROGUEM901)(RogueClassCmdCreateObject*,RogueClassScope*);
typedef RogueClassCmdCreateObject*(*ROGUEM902)(RogueClassCmdCreateObject*);
typedef RogueString*(*ROGUEM903)(RogueClassCmdReadGlobal*);
typedef RogueClassCmd*(*ROGUEM904)(RogueClassCmdReadGlobal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM905)(RogueClassCmdReadGlobal*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM906)(RogueClassCmdReadGlobal*,RogueClassScope*,RogueInt32);
typedef RogueClassType*(*ROGUEM907)(RogueClassCmdReadGlobal*);
typedef void(*ROGUEM908)(RogueClassCmdReadGlobal*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM909)(RogueClassCmdReadGlobal*);
typedef void(*ROGUEM910)(RogueClassCmdReadGlobal*,RogueClassScope*);
typedef RogueClassCmdReadGlobal*(*ROGUEM911)(RogueClassCmdReadGlobal*);
typedef RogueString*(*ROGUEM912)(RogueClassCmdReadProperty*);
typedef RogueClassCmd*(*ROGUEM913)(RogueClassCmdReadProperty*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM914)(RogueClassCmdReadProperty*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM915)(RogueClassCmdReadProperty*,RogueClassScope*,RogueInt32);
typedef RogueClassType*(*ROGUEM916)(RogueClassCmdReadProperty*);
typedef void(*ROGUEM917)(RogueClassCmdReadProperty*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM918)(RogueClassCmdReadProperty*);
typedef void(*ROGUEM919)(RogueClassCmdReadProperty*,RogueClassScope*);
typedef RogueClassCmdReadProperty*(*ROGUEM920)(RogueClassCmdReadProperty*);
typedef RogueString*(*ROGUEM921)(RogueClassCmdLogicalizeOptionalValue*);
typedef RogueClassCmd*(*ROGUEM922)(RogueClassCmdLogicalizeOptionalValue*,RogueClassCloneArgs*);
typedef RogueClassCmdLogicalizeOptionalValue*(*ROGUEM923)(RogueClassCmdLogicalizeOptionalValue*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM924)(RogueClassCmdLogicalizeOptionalValue*);
typedef void(*ROGUEM925)(RogueClassCmdLogicalizeOptionalValue*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM926)(RogueClassCmdLogicalizeOptionalValue*);
typedef void(*ROGUEM927)(RogueClassCmdLogicalizeOptionalValue*,RogueClassScope*);
typedef RogueClassCmdLogicalizeOptionalValue*(*ROGUEM928)(RogueClassCmdLogicalizeOptionalValue*);
typedef RogueString*(*ROGUEM929)(RogueClassCmdWriteSingleton*);
typedef RogueClassCmd*(*ROGUEM930)(RogueClassCmdWriteSingleton*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM931)(RogueClassCmdWriteSingleton*,RogueClassScope*);
typedef void(*ROGUEM932)(RogueClassCmdWriteSingleton*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM933)(RogueClassCmdWriteSingleton*);
typedef void(*ROGUEM934)(RogueClassCmdWriteSingleton*,RogueClassScope*);
typedef RogueClassCmdWriteSingleton*(*ROGUEM935)(RogueClassCmdWriteSingleton*);
typedef RogueString*(*ROGUEM936)(RogueClassCmdWriteLocal*);
typedef RogueClassCmd*(*ROGUEM937)(RogueClassCmdWriteLocal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM938)(RogueClassCmdWriteLocal*,RogueClassScope*);
typedef void(*ROGUEM939)(RogueClassCmdWriteLocal*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM940)(RogueClassCmdWriteLocal*);
typedef void(*ROGUEM941)(RogueClassCmdWriteLocal*,RogueClassScope*);
typedef RogueClassCmdWriteLocal*(*ROGUEM942)(RogueClassCmdWriteLocal*);
typedef RogueString*(*ROGUEM943)(RogueClassCmdOpAssignGlobal*);
typedef RogueClassCmd*(*ROGUEM944)(RogueClassCmdOpAssignGlobal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM945)(RogueClassCmdOpAssignGlobal*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM946)(RogueClassCmdOpAssignGlobal*);
typedef void(*ROGUEM947)(RogueClassCmdOpAssignGlobal*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM948)(RogueClassCmdOpAssignGlobal*);
typedef void(*ROGUEM949)(RogueClassCmdOpAssignGlobal*,RogueClassScope*);
typedef RogueClassCmdOpAssignGlobal*(*ROGUEM950)(RogueClassCmdOpAssignGlobal*);
typedef RogueString*(*ROGUEM951)(RogueClassCmdOpAssignProperty*);
typedef RogueClassCmd*(*ROGUEM952)(RogueClassCmdOpAssignProperty*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM953)(RogueClassCmdOpAssignProperty*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM954)(RogueClassCmdOpAssignProperty*);
typedef void(*ROGUEM955)(RogueClassCmdOpAssignProperty*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM956)(RogueClassCmdOpAssignProperty*);
typedef void(*ROGUEM957)(RogueClassCmdOpAssignProperty*,RogueClassScope*);
typedef RogueClassCmdOpAssignProperty*(*ROGUEM958)(RogueClassCmdOpAssignProperty*);
typedef RogueString*(*ROGUEM959)(RogueCmdTaskControlSectionList*);
typedef RogueCmdTaskControlSectionList*(*ROGUEM960)(RogueCmdTaskControlSectionList*);
typedef RogueString*(*ROGUEM961)(RogueClassCmdBlock*);
typedef RogueClassCmd*(*ROGUEM962)(RogueClassCmdBlock*,RogueClassCloneArgs*);
typedef RogueLogical(*ROGUEM963)(RogueClassCmdBlock*);
typedef RogueClassCmdBlock*(*ROGUEM964)(RogueClassCmdBlock*,RogueClassScope*);
typedef void(*ROGUEM965)(RogueClassCmdBlock*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM966)(RogueClassCmdBlock*);
typedef void(*ROGUEM967)(RogueClassCmdBlock*,RogueClassScope*);
typedef RogueClassCmdBlock*(*ROGUEM968)(RogueClassCmdBlock*);
typedef RogueString*(*ROGUEM969)(RogueTableEntry_of_String_DefinitionList*);
typedef RogueTableEntry_of_String_DefinitionList*(*ROGUEM970)(RogueTableEntry_of_String_DefinitionList*);
typedef RogueString*(*ROGUEM971)(RogueClassString_DefinitionTableEntry*);
typedef RogueString*(*ROGUEM972)(RogueTableEntry_of_String_PropertyList*);
typedef RogueTableEntry_of_String_PropertyList*(*ROGUEM973)(RogueTableEntry_of_String_PropertyList*);
typedef RogueString*(*ROGUEM974)(RogueClassString_PropertyTableEntry*);
typedef RogueString*(*ROGUEM975)(RogueClassString_CmdTable*);
typedef RogueString*(*ROGUEM976)(RogueClassCmdCallStaticMethod*);
typedef RogueClassCmd*(*ROGUEM977)(RogueClassCmdCallStaticMethod*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM978)(RogueClassCmdCallStaticMethod*,RogueClassScope*);
typedef void(*ROGUEM979)(RogueClassCmdCallStaticMethod*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallStaticMethod*(*ROGUEM980)(RogueClassCmdCallStaticMethod*);
typedef RogueString*(*ROGUEM981)(RogueTableEntry_of_String_StringList*);
typedef RogueTableEntry_of_String_StringList*(*ROGUEM982)(RogueTableEntry_of_String_StringList*);
typedef RogueString*(*ROGUEM983)(RogueClassString_StringTableEntry*);
typedef RogueString*(*ROGUEM984)(RogueClassDirectiveTokenType*);
typedef RogueClassToken*(*ROGUEM985)(RogueClassDirectiveTokenType*,RogueString*,RogueInt32,RogueInt32);
typedef RogueLogical(*ROGUEM986)(RogueClassDirectiveTokenType*);
typedef RogueClassDirectiveTokenType*(*ROGUEM987)(RogueClassDirectiveTokenType*);
typedef RogueString*(*ROGUEM988)(RogueClassStructuralDirectiveTokenType*);
typedef RogueClassToken*(*ROGUEM989)(RogueClassStructuralDirectiveTokenType*,RogueString*,RogueInt32,RogueInt32);
typedef RogueLogical(*ROGUEM990)(RogueClassStructuralDirectiveTokenType*);
typedef RogueClassStructuralDirectiveTokenType*(*ROGUEM991)(RogueClassStructuralDirectiveTokenType*);
typedef RogueString*(*ROGUEM992)(RogueClassEOLTokenType*);
typedef RogueClassToken*(*ROGUEM993)(RogueClassEOLTokenType*,RogueString*,RogueInt32,RogueInt32);
typedef RogueClassToken*(*ROGUEM994)(RogueClassEOLTokenType*,RogueString*,RogueInt32,RogueInt32,RogueString*);
typedef RogueLogical(*ROGUEM995)(RogueClassEOLTokenType*);
typedef RogueClassEOLTokenType*(*ROGUEM996)(RogueClassEOLTokenType*);
typedef RogueString*(*ROGUEM997)(RogueClassStructureTokenType*);
typedef RogueClassToken*(*ROGUEM998)(RogueClassStructureTokenType*,RogueString*,RogueInt32,RogueInt32);
typedef RogueLogical(*ROGUEM999)(RogueClassStructureTokenType*);
typedef RogueClassStructureTokenType*(*ROGUEM1000)(RogueClassStructureTokenType*);
typedef RogueString*(*ROGUEM1001)(RogueClassNativeCodeTokenType*);
typedef RogueClassToken*(*ROGUEM1002)(RogueClassNativeCodeTokenType*,RogueString*,RogueInt32,RogueInt32,RogueString*);
typedef RogueClassToken*(*ROGUEM1003)(RogueClassNativeCodeTokenType*,RogueClassToken*,RogueString*);
typedef RogueClassNativeCodeTokenType*(*ROGUEM1004)(RogueClassNativeCodeTokenType*);
typedef RogueString*(*ROGUEM1005)(RogueClassOpWithAssignTokenType*);
typedef RogueLogical(*ROGUEM1006)(RogueClassOpWithAssignTokenType*);
typedef RogueClassOpWithAssignTokenType*(*ROGUEM1007)(RogueClassOpWithAssignTokenType*);
typedef RogueString*(*ROGUEM1008)(RogueClassString_TokenListTable*);
typedef RogueString*(*ROGUEM1009)(RogueClassPreprocessorTokenReader*);
typedef RogueString*(*ROGUEM1010)(RogueClassCmdSwitch*);
typedef RogueClassCmdSwitch*(*ROGUEM1011)(RogueClassCmdSwitch*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM1012)(RogueClassCmdSwitch*,RogueClassScope*);
typedef void(*ROGUEM1013)(RogueClassCmdSwitch*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM1014)(RogueClassCmdSwitch*);
typedef void(*ROGUEM1015)(RogueClassCmdSwitch*,RogueClassScope*);
typedef RogueClassCmdSwitch*(*ROGUEM1016)(RogueClassCmdSwitch*);
typedef RogueString*(*ROGUEM1017)(RogueClassCmdReadArrayElement*);
typedef RogueClassCmd*(*ROGUEM1018)(RogueClassCmdReadArrayElement*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM1019)(RogueClassCmdReadArrayElement*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM1020)(RogueClassCmdReadArrayElement*,RogueClassScope*,RogueInt32);
typedef RogueClassType*(*ROGUEM1021)(RogueClassCmdReadArrayElement*);
typedef void(*ROGUEM1022)(RogueClassCmdReadArrayElement*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM1023)(RogueClassCmdReadArrayElement*);
typedef void(*ROGUEM1024)(RogueClassCmdReadArrayElement*,RogueClassScope*);
typedef RogueClassCmdReadArrayElement*(*ROGUEM1025)(RogueClassCmdReadArrayElement*);
typedef RogueString*(*ROGUEM1026)(RogueClassCmdWriteArrayElement*);
typedef RogueClassCmd*(*ROGUEM1027)(RogueClassCmdWriteArrayElement*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM1028)(RogueClassCmdWriteArrayElement*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM1029)(RogueClassCmdWriteArrayElement*);
typedef void(*ROGUEM1030)(RogueClassCmdWriteArrayElement*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM1031)(RogueClassCmdWriteArrayElement*);
typedef void(*ROGUEM1032)(RogueClassCmdWriteArrayElement*,RogueClassScope*);
typedef RogueClassCmdWriteArrayElement*(*ROGUEM1033)(RogueClassCmdWriteArrayElement*);
typedef RogueString*(*ROGUEM1034)(RogueClassCmdConvertToPrimitiveType*);
typedef RogueClassCmd*(*ROGUEM1035)(RogueClassCmdConvertToPrimitiveType*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM1036)(RogueClassCmdConvertToPrimitiveType*,RogueClassScope*);
typedef void(*ROGUEM1037)(RogueClassCmdConvertToPrimitiveType*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdConvertToPrimitiveType*(*ROGUEM1038)(RogueClassCmdConvertToPrimitiveType*);
typedef RogueString*(*ROGUEM1039)(RogueClassCmdSelectCaseListReader*);
typedef RogueLogical(*ROGUEM1040)(RogueClassCmdSelectCaseListReader*);
typedef RogueClassCmdSelectCase*(*ROGUEM1041)(RogueClassCmdSelectCaseListReader*);
typedef RogueString*(*ROGUEM1042)(RogueClassCmdAdjustGlobal*);
typedef RogueClassCmd*(*ROGUEM1043)(RogueClassCmdAdjustGlobal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM1044)(RogueClassCmdAdjustGlobal*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM1045)(RogueClassCmdAdjustGlobal*);
typedef void(*ROGUEM1046)(RogueClassCmdAdjustGlobal*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM1047)(RogueClassCmdAdjustGlobal*);
typedef void(*ROGUEM1048)(RogueClassCmdAdjustGlobal*,RogueClassScope*);
typedef RogueClassCmdAdjustGlobal*(*ROGUEM1049)(RogueClassCmdAdjustGlobal*);
typedef RogueString*(*ROGUEM1050)(RogueClassCmdAdjustProperty*);
typedef RogueClassCmd*(*ROGUEM1051)(RogueClassCmdAdjustProperty*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM1052)(RogueClassCmdAdjustProperty*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM1053)(RogueClassCmdAdjustProperty*);
typedef void(*ROGUEM1054)(RogueClassCmdAdjustProperty*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM1055)(RogueClassCmdAdjustProperty*);
typedef void(*ROGUEM1056)(RogueClassCmdAdjustProperty*,RogueClassScope*);
typedef RogueClassCmdAdjustProperty*(*ROGUEM1057)(RogueClassCmdAdjustProperty*);
typedef RogueString*(*ROGUEM1058)(RogueTableEntry_of_String_CmdList*);
typedef RogueTableEntry_of_String_CmdList*(*ROGUEM1059)(RogueTableEntry_of_String_CmdList*);
typedef RogueString*(*ROGUEM1060)(RogueClassString_CmdTableEntry*);
typedef RogueString*(*ROGUEM1061)(RogueClassNativeCodeToken*);
typedef RogueClassNativeCodeToken*(*ROGUEM1062)(RogueClassNativeCodeToken*);
typedef RogueString*(*ROGUEM1063)(RogueTableEntry_of_String_TokenListList*);
typedef RogueTableEntry_of_String_TokenListList*(*ROGUEM1064)(RogueTableEntry_of_String_TokenListList*);
typedef RogueString*(*ROGUEM1065)(RogueClassString_TokenListTableEntry*);

RogueString* call_ROGUEM2( int i, RogueObject* THIS )
{
  return ((ROGUEM2)(THIS->type->methods[i]))( THIS );
}

RogueString* call_ROGUEM43( int i, RogueClassToken* THIS )
{
  return ((ROGUEM43)(THIS->type->methods[i]))( THIS );
}

RogueCharacter call_ROGUEM44( int i, RogueClassToken* THIS )
{
  return ((ROGUEM44)(THIS->type->methods[i]))( THIS );
}

RogueInt32 call_ROGUEM45( int i, RogueClassToken* THIS )
{
  return ((ROGUEM45)(THIS->type->methods[i]))( THIS );
}

RogueInt64 call_ROGUEM46( int i, RogueClassToken* THIS )
{
  return ((ROGUEM46)(THIS->type->methods[i]))( THIS );
}

RogueReal64 call_ROGUEM47( int i, RogueClassToken* THIS )
{
  return ((ROGUEM47)(THIS->type->methods[i]))( THIS );
}

RogueClassType* call_ROGUEM48( int i, RogueClassToken* THIS )
{
  return ((ROGUEM48)(THIS->type->methods[i]))( THIS );
}

RogueString* call_ROGUEM55( int i, RogueClassCmd* THIS )
{
  return ((ROGUEM55)(THIS->type->methods[i]))( THIS );
}

RogueClassCmd* call_ROGUEM56( int i, RogueClassCmd* THIS, RogueClassScope* p0 )
{
  return ((ROGUEM56)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassCmd* call_ROGUEM57( int i, RogueClassCmd* THIS, RogueClassType* p0, RogueClassScope* p1 )
{
  return ((ROGUEM57)(THIS->type->methods[i]))( THIS, p0, p1 );
}

RogueClassCmd* call_ROGUEM58( int i, RogueClassCmd* THIS, RogueClassCloneArgs* p0 )
{
  return ((ROGUEM58)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassCmd* call_ROGUEM59( int i, RogueClassCmd* THIS, RogueClassType* p0 )
{
  return ((ROGUEM59)(THIS->type->methods[i]))( THIS, p0 );
}

void call_ROGUEM60( int i, RogueClassCmd* THIS, RogueClassScope* p0 )
{
  ((ROGUEM60)(THIS->type->methods[i]))( THIS, p0 );
}

RogueLogical call_ROGUEM61( int i, RogueClassCmd* THIS )
{
  return ((ROGUEM61)(THIS->type->methods[i]))( THIS );
}

RogueClassType* call_ROGUEM62( int i, RogueClassCmd* THIS, RogueClassScope* p0 )
{
  return ((ROGUEM62)(THIS->type->methods[i]))( THIS, p0 );
}

void call_ROGUEM63( int i, RogueClassCmd* THIS )
{
  ((ROGUEM63)(THIS->type->methods[i]))( THIS );
}

RogueClassType* call_ROGUEM64( int i, RogueClassCmd* THIS )
{
  return ((ROGUEM64)(THIS->type->methods[i]))( THIS );
}

RogueClassCmd* call_ROGUEM65( int i, RogueClassCmd* THIS, RogueClassScope* p0, RogueClassCmd* p1 )
{
  return ((ROGUEM65)(THIS->type->methods[i]))( THIS, p0, p1 );
}

RogueClassCmd* call_ROGUEM66( int i, RogueClassCmd* THIS, RogueClassScope* p0, RogueInt32 p1 )
{
  return ((ROGUEM66)(THIS->type->methods[i]))( THIS, p0, p1 );
}

RogueClassCmd* call_ROGUEM67( int i, RogueClassCmd* THIS, RogueClassScope* p0, RogueClassTokenType* p1, RogueClassCmd* p2 )
{
  return ((ROGUEM67)(THIS->type->methods[i]))( THIS, p0, p1, p2 );
}

void call_ROGUEM68( int i, RogueClassCmd* THIS, RogueClassCPPWriter* p0, RogueLogical p1 )
{
  ((ROGUEM68)(THIS->type->methods[i]))( THIS, p0, p1 );
}

RogueCmdList* call_ROGUEM86( int i, RogueCmdList* THIS )
{
  return ((ROGUEM86)(THIS->type->methods[i]))( THIS );
}

RogueCmdList* call_ROGUEM87( int i, RogueCmdList* THIS, RogueInt32 p0 )
{
  return ((ROGUEM87)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassToken* call_ROGUEM89( int i, RogueClassTokenType* THIS, RogueString* p0, RogueInt32 p1, RogueInt32 p2 )
{
  return ((ROGUEM89)(THIS->type->methods[i]))( THIS, p0, p1, p2 );
}

RogueClassToken* call_ROGUEM90( int i, RogueClassTokenType* THIS, RogueString* p0, RogueInt32 p1, RogueInt32 p2, RogueString* p3 )
{
  return ((ROGUEM90)(THIS->type->methods[i]))( THIS, p0, p1, p2, p3 );
}

RogueClassToken* call_ROGUEM91( int i, RogueClassTokenType* THIS, RogueClassToken* p0, RogueString* p1 )
{
  return ((ROGUEM91)(THIS->type->methods[i]))( THIS, p0, p1 );
}

RogueLogical call_ROGUEM92( int i, RogueClassTokenType* THIS )
{
  return ((ROGUEM92)(THIS->type->methods[i]))( THIS );
}

RogueLogical call_ROGUEM106( int i, RogueClassFunction_Type_RETURNSLogical* THIS, RogueClassType* p0 )
{
  return ((ROGUEM106)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassCmdLabel* call_ROGUEM173( int i, RogueClassCloneArgs* THIS, RogueClassCmdLabel* p0 )
{
  return ((ROGUEM173)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassCmd* call_ROGUEM207( int i, RogueClassCmdControlStructure* THIS, RogueClassCmdControlStructure* p0 )
{
  return ((ROGUEM207)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassCmd* call_ROGUEM245( int i, RogueClassCmdBinary* THIS, RogueClassScope* p0 )
{
  return ((ROGUEM245)(THIS->type->methods[i]))( THIS, p0 );
}

RogueString* call_ROGUEM251( int i, RogueClassCmdBinary* THIS )
{
  return ((ROGUEM251)(THIS->type->methods[i]))( THIS );
}

RogueClassCmd* call_ROGUEM254( int i, RogueClassCmdBinary* THIS, RogueClassScope* p0, RogueClassType* p1 )
{
  return ((ROGUEM254)(THIS->type->methods[i]))( THIS, p0, p1 );
}

RogueClassCmd* call_ROGUEM255( int i, RogueClassCmdBinary* THIS, RogueClassScope* p0, RogueClassType* p1, RogueClassType* p2 )
{
  return ((ROGUEM255)(THIS->type->methods[i]))( THIS, p0, p1, p2 );
}

RogueClassCmd* call_ROGUEM259( int i, RogueClassCmdComparison* THIS, RogueClassScope* p0, RogueClassType* p1, RogueClassType* p2, RogueLogical p3 )
{
  return ((ROGUEM259)(THIS->type->methods[i]))( THIS, p0, p1, p2, p3 );
}

RogueLogical call_ROGUEM262( int i, RogueClassCmdBinary* THIS )
{
  return ((ROGUEM262)(THIS->type->methods[i]))( THIS );
}

RogueClassType* call_ROGUEM341( int i, RogueClassCmdTypeOperator* THIS )
{
  return ((ROGUEM341)(THIS->type->methods[i]))( THIS );
}

RogueString* call_ROGUEM356( int i, RogueClassCmdUnary* THIS )
{
  return ((ROGUEM356)(THIS->type->methods[i]))( THIS );
}

RogueClassCmd* call_ROGUEM357( int i, RogueClassCmdUnary* THIS, RogueClassScope* p0 )
{
  return ((ROGUEM357)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassType* call_ROGUEM379( int i, RogueClassCmdCall* THIS )
{
  return ((ROGUEM379)(THIS->type->methods[i]))( THIS );
}

void call_ROGUEM387( int i, RogueClassCmdCallInlineNative* THIS, RogueClassCPPWriter* p0 )
{
  ((ROGUEM387)(THIS->type->methods[i]))( THIS, p0 );
}

RogueInt32 call_ROGUEM628( int i, RogueClassCmdRange* THIS )
{
  return ((ROGUEM628)(THIS->type->methods[i]))( THIS );
}

RogueString* call_ROGUEM664( int i, RogueClassCmdBinaryLogical* THIS )
{
  return ((ROGUEM664)(THIS->type->methods[i]))( THIS );
}

RogueLogical call_ROGUEM666( int i, RogueClassCmdBinaryLogical* THIS, RogueLogical p0, RogueLogical p1 )
{
  return ((ROGUEM666)(THIS->type->methods[i]))( THIS, p0, p1 );
}


// GLOBAL PROPERTIES
RogueByteList* RogueStringBuilder_work_bytes = 0;
RogueClassCmdStatementList* RogueCmdStatementList_current = 0;
RogueClassString_TokenTypeTable* RogueTokenType_lookup = 0;
RogueClassTokenType* RogueTokenType_directive_define = 0;
RogueClassTokenType* RogueTokenType_directive_include = 0;
RogueClassTokenType* RogueTokenType_directive_includeNativeCode = 0;
RogueClassTokenType* RogueTokenType_directive_includeNativeHeader = 0;
RogueClassTokenType* RogueTokenType_directive_if = 0;
RogueClassTokenType* RogueTokenType_directive_elseIf = 0;
RogueClassTokenType* RogueTokenType_directive_else = 0;
RogueClassTokenType* RogueTokenType_directive_endIf = 0;
RogueClassTokenType* RogueTokenType_directive_module = 0;
RogueClassTokenType* RogueTokenType_directive_requisite = 0;
RogueClassTokenType* RogueTokenType_directive_using = 0;
RogueClassTokenType* RogueTokenType_placeholder_id = 0;
RogueClassTokenType* RogueTokenType_begin_augment_tokens = 0;
RogueClassTokenType* RogueTokenType_keyword_augment = 0;
RogueClassTokenType* RogueTokenType_keyword_case = 0;
RogueClassTokenType* RogueTokenType_keyword_catch = 0;
RogueClassTokenType* RogueTokenType_keyword_class = 0;
RogueClassTokenType* RogueTokenType_keyword_DEFINITIONS = 0;
RogueClassTokenType* RogueTokenType_keyword_else = 0;
RogueClassTokenType* RogueTokenType_keyword_elseIf = 0;
RogueClassTokenType* RogueTokenType_keyword_endAugment = 0;
RogueClassTokenType* RogueTokenType_keyword_endClass = 0;
RogueClassTokenType* RogueTokenType_keyword_endContingent = 0;
RogueClassTokenType* RogueTokenType_keyword_endForEach = 0;
RogueClassTokenType* RogueTokenType_keyword_endFunction = 0;
RogueClassTokenType* RogueTokenType_keyword_endIf = 0;
RogueClassTokenType* RogueTokenType_keyword_endLoop = 0;
RogueClassTokenType* RogueTokenType_keyword_endRoutine = 0;
RogueClassTokenType* RogueTokenType_keyword_endTry = 0;
RogueClassTokenType* RogueTokenType_keyword_endWhich = 0;
RogueClassTokenType* RogueTokenType_keyword_endWhile = 0;
RogueClassTokenType* RogueTokenType_keyword_ENUMERATE = 0;
RogueClassTokenType* RogueTokenType_keyword_GLOBAL = 0;
RogueClassTokenType* RogueTokenType_keyword_GLOBAL_METHODS = 0;
RogueClassTokenType* RogueTokenType_keyword_GLOBAL_PROPERTIES = 0;
RogueClassTokenType* RogueTokenType_keyword_macro = 0;
RogueClassTokenType* RogueTokenType_keyword_method = 0;
RogueClassTokenType* RogueTokenType_keyword_METHODS = 0;
RogueClassTokenType* RogueTokenType_keyword_nativeCode = 0;
RogueClassTokenType* RogueTokenType_keyword_nativeHeader = 0;
RogueClassTokenType* RogueTokenType_keyword_others = 0;
RogueClassTokenType* RogueTokenType_keyword_PROPERTIES = 0;
RogueClassTokenType* RogueTokenType_keyword_routine = 0;
RogueClassTokenType* RogueTokenType_keyword_satisfied = 0;
RogueClassTokenType* RogueTokenType_keyword_unsatisfied = 0;
RogueClassTokenType* RogueTokenType_keyword_with = 0;
RogueClassTokenType* RogueTokenType_symbol_close_brace = 0;
RogueClassTokenType* RogueTokenType_symbol_close_bracket = 0;
RogueClassTokenType* RogueTokenType_symbol_close_comment = 0;
RogueClassTokenType* RogueTokenType_symbol_close_paren = 0;
RogueClassTokenType* RogueTokenType_symbol_close_specialize = 0;
RogueClassTokenType* RogueTokenType_eol = 0;
RogueClassTokenType* RogueTokenType_eoi = 0;
RogueClassTokenType* RogueTokenType_keyword_await = 0;
RogueClassTokenType* RogueTokenType_keyword_contingent = 0;
RogueClassTokenType* RogueTokenType_keyword_escapeContingent = 0;
RogueClassTokenType* RogueTokenType_keyword_escapeForEach = 0;
RogueClassTokenType* RogueTokenType_keyword_escapeIf = 0;
RogueClassTokenType* RogueTokenType_keyword_escapeLoop = 0;
RogueClassTokenType* RogueTokenType_keyword_escapeTry = 0;
RogueClassTokenType* RogueTokenType_keyword_escapeWhich = 0;
RogueClassTokenType* RogueTokenType_keyword_escapeWhile = 0;
RogueClassTokenType* RogueTokenType_keyword_forEach = 0;
RogueClassTokenType* RogueTokenType_keyword_function = 0;
RogueClassTokenType* RogueTokenType_keyword_global = 0;
RogueClassTokenType* RogueTokenType_keyword_if = 0;
RogueClassTokenType* RogueTokenType_keyword_in = 0;
RogueClassTokenType* RogueTokenType_keyword_infinity = 0;
RogueClassTokenType* RogueTokenType_keyword_is = 0;
RogueClassTokenType* RogueTokenType_keyword_isNot = 0;
RogueClassTokenType* RogueTokenType_keyword_local = 0;
RogueClassTokenType* RogueTokenType_keyword_loop = 0;
RogueClassTokenType* RogueTokenType_keyword_NaN = 0;
RogueClassTokenType* RogueTokenType_keyword_native = 0;
RogueClassTokenType* RogueTokenType_keyword_necessary = 0;
RogueClassTokenType* RogueTokenType_keyword_nextIteration = 0;
RogueClassTokenType* RogueTokenType_keyword_noAction = 0;
RogueClassTokenType* RogueTokenType_keyword_null = 0;
RogueClassTokenType* RogueTokenType_keyword_of = 0;
RogueClassTokenType* RogueTokenType_keyword_return = 0;
RogueClassTokenType* RogueTokenType_keyword_select = 0;
RogueClassTokenType* RogueTokenType_keyword_step = 0;
RogueClassTokenType* RogueTokenType_keyword_sufficient = 0;
RogueClassTokenType* RogueTokenType_keyword_throw = 0;
RogueClassTokenType* RogueTokenType_keyword_trace = 0;
RogueClassTokenType* RogueTokenType_keyword_trace_position = 0;
RogueClassTokenType* RogueTokenType_keyword_try = 0;
RogueClassTokenType* RogueTokenType_keyword_which = 0;
RogueClassTokenType* RogueTokenType_keyword_while = 0;
RogueClassTokenType* RogueTokenType_keyword_yield = 0;
RogueClassTokenType* RogueTokenType_identifier = 0;
RogueClassTokenType* RogueTokenType_type_identifier = 0;
RogueClassTokenType* RogueTokenType_literal_character = 0;
RogueClassTokenType* RogueTokenType_literal_integer = 0;
RogueClassTokenType* RogueTokenType_literal_long = 0;
RogueClassTokenType* RogueTokenType_literal_real = 0;
RogueClassTokenType* RogueTokenType_literal_string = 0;
RogueClassTokenType* RogueTokenType_keyword_and = 0;
RogueClassTokenType* RogueTokenType_keyword_as = 0;
RogueClassTokenType* RogueTokenType_keyword_downTo = 0;
RogueClassTokenType* RogueTokenType_keyword_false = 0;
RogueClassTokenType* RogueTokenType_keyword_instanceOf = 0;
RogueClassTokenType* RogueTokenType_keyword_meta = 0;
RogueClassTokenType* RogueTokenType_keyword_not = 0;
RogueClassTokenType* RogueTokenType_keyword_notInstanceOf = 0;
RogueClassTokenType* RogueTokenType_keyword_or = 0;
RogueClassTokenType* RogueTokenType_keyword_pi = 0;
RogueClassTokenType* RogueTokenType_keyword_prior = 0;
RogueClassTokenType* RogueTokenType_keyword_this = 0;
RogueClassTokenType* RogueTokenType_keyword_true = 0;
RogueClassTokenType* RogueTokenType_keyword_xor = 0;
RogueClassTokenType* RogueTokenType_symbol_ampersand = 0;
RogueClassTokenType* RogueTokenType_symbol_ampersand_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_arrow = 0;
RogueClassTokenType* RogueTokenType_symbol_at = 0;
RogueClassTokenType* RogueTokenType_symbol_backslash = 0;
RogueClassTokenType* RogueTokenType_symbol_caret = 0;
RogueClassTokenType* RogueTokenType_symbol_caret_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_colon = 0;
RogueClassTokenType* RogueTokenType_symbol_comma = 0;
RogueClassTokenType* RogueTokenType_symbol_compare = 0;
RogueClassTokenType* RogueTokenType_symbol_dot = 0;
RogueClassTokenType* RogueTokenType_symbol_dot_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_downToGreaterThan = 0;
RogueClassTokenType* RogueTokenType_symbol_empty_braces = 0;
RogueClassTokenType* RogueTokenType_symbol_empty_brackets = 0;
RogueClassTokenType* RogueTokenType_symbol_eq = 0;
RogueClassTokenType* RogueTokenType_symbol_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_exclamation_point = 0;
RogueClassTokenType* RogueTokenType_symbol_fat_arrow = 0;
RogueClassTokenType* RogueTokenType_symbol_ge = 0;
RogueClassTokenType* RogueTokenType_symbol_gt = 0;
RogueClassTokenType* RogueTokenType_symbol_le = 0;
RogueClassTokenType* RogueTokenType_symbol_lt = 0;
RogueClassTokenType* RogueTokenType_symbol_minus = 0;
RogueClassTokenType* RogueTokenType_symbol_minus_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_minus_minus = 0;
RogueClassTokenType* RogueTokenType_symbol_ne = 0;
RogueClassTokenType* RogueTokenType_symbol_open_brace = 0;
RogueClassTokenType* RogueTokenType_symbol_open_bracket = 0;
RogueClassTokenType* RogueTokenType_symbol_open_paren = 0;
RogueClassTokenType* RogueTokenType_symbol_open_specialize = 0;
RogueClassTokenType* RogueTokenType_symbol_percent = 0;
RogueClassTokenType* RogueTokenType_symbol_percent_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_plus = 0;
RogueClassTokenType* RogueTokenType_symbol_plus_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_plus_plus = 0;
RogueClassTokenType* RogueTokenType_symbol_question_mark = 0;
RogueClassTokenType* RogueTokenType_symbol_semicolon = 0;
RogueClassTokenType* RogueTokenType_symbol_shift_left = 0;
RogueClassTokenType* RogueTokenType_symbol_shift_right = 0;
RogueClassTokenType* RogueTokenType_symbol_shift_right_x = 0;
RogueClassTokenType* RogueTokenType_symbol_slash = 0;
RogueClassTokenType* RogueTokenType_symbol_slash_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_tilde = 0;
RogueClassTokenType* RogueTokenType_symbol_tilde_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_times = 0;
RogueClassTokenType* RogueTokenType_symbol_times_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_upTo = 0;
RogueClassTokenType* RogueTokenType_symbol_upToLessThan = 0;
RogueClassTokenType* RogueTokenType_symbol_vertical_bar = 0;
RogueClassTokenType* RogueTokenType_symbol_vertical_bar_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_double_vertical_bar = 0;
RogueStringList* RogueSystem_command_line_arguments = 0;
RogueString* RogueSystem_executable_filepath = 0;
RogueClassString_TokenListTable* RoguePreprocessor_definitions = 0;

void RogueStringBuilder_trace( void* obj );
void RogueCharacterList_trace( void* obj );
void RogueStringReader_trace( void* obj );
void RogueStringList_trace( void* obj );
void RogueGlobal_trace( void* obj );
void RoguePrintWriterAspect_trace( void* obj );
void RogueRogueC_trace( void* obj );
void RogueException_trace( void* obj );
void RogueStackTrace_trace( void* obj );
void RogueProgram_trace( void* obj );
void RogueTemplateList_trace( void* obj );
void RogueTemplate_trace( void* obj );
void RogueString_TemplateTable_trace( void* obj );
void RogueString_AugmentListTable_trace( void* obj );
void RogueRequisiteItemList_trace( void* obj );
void RogueRequisiteItem_trace( void* obj );
void RogueMethod_trace( void* obj );
void RoguePropertyList_trace( void* obj );
void RogueProperty_trace( void* obj );
void RogueString_MethodListTable_trace( void* obj );
void RogueTypeList_trace( void* obj );
void RogueType_trace( void* obj );
void RogueString_TypeTable_trace( void* obj );
void RogueString_Int32Table_trace( void* obj );
void RogueString_StringListTable_trace( void* obj );
void RogueString_Int32TableEntry_trace( void* obj );
void RogueInt32_TemplateTable_trace( void* obj );
void RogueToken_trace( void* obj );
void RogueError_trace( void* obj );
void RogueRogueError_trace( void* obj );
void RogueAttributes_trace( void* obj );
void RogueCmd_trace( void* obj );
void RogueCmdReturn_trace( void* obj );
void RogueCmdStatement_trace( void* obj );
void RogueCmdStatementList_trace( void* obj );
void RogueCmdList_trace( void* obj );
void RogueTokenType_trace( void* obj );
void RogueCmdLabel_trace( void* obj );
void RogueScope_trace( void* obj );
void RogueMethodList_trace( void* obj );
void RogueCPPWriter_trace( void* obj );
void RogueString_MethodTable_trace( void* obj );
void RogueLocalList_trace( void* obj );
void RogueLocal_trace( void* obj );
void RogueInt32List_trace( void* obj );
void RogueByteList_trace( void* obj );
void RogueString_LogicalTable_trace( void* obj );
void RogueParserList_trace( void* obj );
void RogueParser_trace( void* obj );
void RogueString_ParseReaderTable_trace( void* obj );
void RogueFile_trace( void* obj );
void RogueTokenList_trace( void* obj );
void RogueLineReader_trace( void* obj );
void RogueTypeParameterList_trace( void* obj );
void RogueTypeParameter_trace( void* obj );
void RogueAugmentList_trace( void* obj );
void RogueAugment_trace( void* obj );
void RogueString_TokenTypeTable_trace( void* obj );
void RogueLiteralCharacterToken_trace( void* obj );
void RogueLiteralInt64Token_trace( void* obj );
void RogueLiteralInt32Token_trace( void* obj );
void RogueLiteralReal64Token_trace( void* obj );
void RogueStringDataToken_trace( void* obj );
void RogueString_TypeSpecializerTable_trace( void* obj );
void RogueTypeSpecializer_trace( void* obj );
void RogueTypeSpecializerList_trace( void* obj );
void RogueTableEntry_of_String_TemplateList_trace( void* obj );
void RogueString_TemplateTableEntry_trace( void* obj );
void RogueTableEntry_of_String_AugmentListList_trace( void* obj );
void RogueString_AugmentListTableEntry_trace( void* obj );
void RogueCmdLabelList_trace( void* obj );
void RogueString_CmdLabelTable_trace( void* obj );
void RogueCloneMethodArgs_trace( void* obj );
void RogueCmdAccess_trace( void* obj );
void RogueCmdArgs_trace( void* obj );
void RogueCmdFlagArgList_trace( void* obj );
void RogueCmdFlagArg_trace( void* obj );
void RogueCmdAssign_trace( void* obj );
void RogueCmdControlStructureList_trace( void* obj );
void RogueCmdControlStructure_trace( void* obj );
void RogueCmdLiteralThis_trace( void* obj );
void RogueCmdThisContext_trace( void* obj );
void RogueCmdGenericLoop_trace( void* obj );
void RogueCmdLiteralInt32_trace( void* obj );
void RogueCmdLiteral_trace( void* obj );
void RogueCmdCompareNE_trace( void* obj );
void RogueCmdComparison_trace( void* obj );
void RogueCmdBinary_trace( void* obj );
void RogueTaskArgs_trace( void* obj );
void RogueCmdTaskControl_trace( void* obj );
void RogueCmdTaskControlSection_trace( void* obj );
void RogueTableEntry_of_String_MethodListList_trace( void* obj );
void RogueString_MethodListTableEntry_trace( void* obj );
void RogueDefinitionList_trace( void* obj );
void RogueDefinition_trace( void* obj );
void RogueString_DefinitionTable_trace( void* obj );
void RogueNativePropertyList_trace( void* obj );
void RogueNativeProperty_trace( void* obj );
void RogueString_PropertyTable_trace( void* obj );
void RogueCmdLiteralNull_trace( void* obj );
void RogueCmdCreateCompound_trace( void* obj );
void RogueCmdLiteralLogical_trace( void* obj );
void RogueCmdLiteralString_trace( void* obj );
void RogueCmdWriteGlobal_trace( void* obj );
void RogueCmdWriteProperty_trace( void* obj );
void RogueTableEntry_of_String_TypeList_trace( void* obj );
void RogueString_TypeTableEntry_trace( void* obj );
void RogueTableEntry_of_String_Int32List_trace( void* obj );
void RogueTableEntry_of_String_StringListList_trace( void* obj );
void RogueString_StringListTableEntry_trace( void* obj );
void RogueTableEntry_of_Int32_TemplateList_trace( void* obj );
void RogueInt32_TemplateTableEntry_trace( void* obj );
void RogueCmdCastToType_trace( void* obj );
void RogueCmdTypeOperator_trace( void* obj );
void RogueCmdLogicalize_trace( void* obj );
void RogueCmdUnary_trace( void* obj );
void RogueCmdCreateOptionalValue_trace( void* obj );
void RogueCmdReadSingleton_trace( void* obj );
void RogueCmdCallInlineNativeRoutine_trace( void* obj );
void RogueCmdCallInlineNative_trace( void* obj );
void RogueCmdCall_trace( void* obj );
void RogueCmdCallNativeRoutine_trace( void* obj );
void RogueMacroArgs_trace( void* obj );
void RogueCmdInlineNative_trace( void* obj );
void RogueCmdCallRoutine_trace( void* obj );
void RogueCmdReadArrayCount_trace( void* obj );
void RogueCmdCallInlineNativeMethod_trace( void* obj );
void RogueCmdCallNativeMethod_trace( void* obj );
void RogueCmdCallAspectMethod_trace( void* obj );
void RogueCmdCallDynamicMethod_trace( void* obj );
void RogueCmdCallMethod_trace( void* obj );
void RogueCandidateMethods_trace( void* obj );
void RogueCmdCreateFunction_trace( void* obj );
void RogueFnParamList_trace( void* obj );
void RogueFnParam_trace( void* obj );
void RogueTableEntry_of_String_MethodList_trace( void* obj );
void RogueString_MethodTableEntry_trace( void* obj );
void RogueTableEntry_of_String_LogicalList_trace( void* obj );
void RogueString_LogicalTableEntry_trace( void* obj );
void RogueTokenReader_trace( void* obj );
void RogueString_StringTable_trace( void* obj );
void RogueTokenizer_trace( void* obj );
void RogueParseReader_trace( void* obj );
void RoguePreprocessor_trace( void* obj );
void RogueEOLToken_trace( void* obj );
void RogueCmdAdd_trace( void* obj );
void RogueCmdNativeHeader_trace( void* obj );
void RogueCmdNativeCode_trace( void* obj );
void RogueCmdIf_trace( void* obj );
void RogueCmdWhich_trace( void* obj );
void RogueCmdContingent_trace( void* obj );
void RogueCmdTry_trace( void* obj );
void RogueCmdAwait_trace( void* obj );
void RogueCmdYield_trace( void* obj );
void RogueCmdThrow_trace( void* obj );
void RogueCmdFormattedString_trace( void* obj );
void RogueCmdTrace_trace( void* obj );
void RogueCmdEscape_trace( void* obj );
void RogueCmdNextIteration_trace( void* obj );
void RogueCmdNecessary_trace( void* obj );
void RogueCmdSufficient_trace( void* obj );
void RogueCmdAdjust_trace( void* obj );
void RogueCmdOpWithAssign_trace( void* obj );
void RogueCmdWhichCaseList_trace( void* obj );
void RogueCmdWhichCase_trace( void* obj );
void RogueCmdCatchList_trace( void* obj );
void RogueCmdCatch_trace( void* obj );
void RogueCmdLocalDeclaration_trace( void* obj );
void RogueCmdAdjustLocal_trace( void* obj );
void RogueCmdReadLocal_trace( void* obj );
void RogueCmdCompareLE_trace( void* obj );
void RogueCmdRange_trace( void* obj );
void RogueCmdLocalOpWithAssign_trace( void* obj );
void RogueCmdResolvedOpWithAssign_trace( void* obj );
void RogueCmdRangeUpTo_trace( void* obj );
void RogueCmdCompareGE_trace( void* obj );
void RogueCmdForEach_trace( void* obj );
void RogueCmdRangeDownTo_trace( void* obj );
void RogueCmdLogicalXor_trace( void* obj );
void RogueCmdBinaryLogical_trace( void* obj );
void RogueCmdLogicalOr_trace( void* obj );
void RogueCmdLogicalAnd_trace( void* obj );
void RogueCmdCompareEQ_trace( void* obj );
void RogueCmdCompareIs_trace( void* obj );
void RogueCmdCompareIsNot_trace( void* obj );
void RogueCmdCompareLT_trace( void* obj );
void RogueCmdCompareGT_trace( void* obj );
void RogueCmdInstanceOf_trace( void* obj );
void RogueCmdLogicalNot_trace( void* obj );
void RogueCmdBitwiseXor_trace( void* obj );
void RogueCmdBitwiseOp_trace( void* obj );
void RogueCmdBitwiseOr_trace( void* obj );
void RogueCmdBitwiseAnd_trace( void* obj );
void RogueCmdBitwiseShiftLeft_trace( void* obj );
void RogueCmdBitwiseShiftRight_trace( void* obj );
void RogueCmdBitwiseShiftRightX_trace( void* obj );
void RogueCmdSubtract_trace( void* obj );
void RogueCmdMultiply_trace( void* obj );
void RogueCmdDivide_trace( void* obj );
void RogueCmdMod_trace( void* obj );
void RogueCmdPower_trace( void* obj );
void RogueCmdNegate_trace( void* obj );
void RogueCmdBitwiseNot_trace( void* obj );
void RogueCmdGetOptionalValue_trace( void* obj );
void RogueCmdElementAccess_trace( void* obj );
void RogueCmdListConvert_trace( void* obj );
void RogueCmdConvertToType_trace( void* obj );
void RogueCmdCreateCallback_trace( void* obj );
void RogueCmdAs_trace( void* obj );
void RogueCmdDefaultValue_trace( void* obj );
void RogueCmdLiteralReal64_trace( void* obj );
void RogueCmdLiteralInt64_trace( void* obj );
void RogueCmdLiteralCharacter_trace( void* obj );
void RogueCmdCreateList_trace( void* obj );
void RogueCmdCallPriorMethod_trace( void* obj );
void RogueFnArgList_trace( void* obj );
void RogueFnArg_trace( void* obj );
void RogueCmdSelect_trace( void* obj );
void RogueCmdSelectCaseList_trace( void* obj );
void RogueCmdSelectCase_trace( void* obj );
void RogueCmdTypedLiteralList_trace( void* obj );
void RogueTableEntry_of_String_ParseReaderList_trace( void* obj );
void RogueString_ParseReaderTableEntry_trace( void* obj );
void RogueFileReader_trace( void* obj );
void RogueFileWriter_trace( void* obj );
void RogueTokenListRebuilder_trace( void* obj );
void RogueTableEntry_of_String_TokenTypeList_trace( void* obj );
void RogueString_TokenTypeTableEntry_trace( void* obj );
void RogueTableEntry_of_String_TypeSpecializerList_trace( void* obj );
void RogueString_TypeSpecializerTableEntry_trace( void* obj );
void RogueTableEntry_of_String_CmdLabelList_trace( void* obj );
void RogueString_CmdLabelTableEntry_trace( void* obj );
void RogueCmdCreateArray_trace( void* obj );
void RogueCmdCreateObject_trace( void* obj );
void RogueCmdReadGlobal_trace( void* obj );
void RogueCmdReadProperty_trace( void* obj );
void RogueCmdLogicalizeOptionalValue_trace( void* obj );
void RogueCmdWriteSingleton_trace( void* obj );
void RogueCmdWriteLocal_trace( void* obj );
void RogueCmdOpAssignGlobal_trace( void* obj );
void RogueCmdOpAssignProperty_trace( void* obj );
void RogueCmdTaskControlSectionList_trace( void* obj );
void RogueCmdBlock_trace( void* obj );
void RogueTableEntry_of_String_DefinitionList_trace( void* obj );
void RogueString_DefinitionTableEntry_trace( void* obj );
void RogueTableEntry_of_String_PropertyList_trace( void* obj );
void RogueString_PropertyTableEntry_trace( void* obj );
void RogueString_CmdTable_trace( void* obj );
void RogueCmdCallStaticMethod_trace( void* obj );
void RogueTableEntry_of_String_StringList_trace( void* obj );
void RogueString_StringTableEntry_trace( void* obj );
void RogueDirectiveTokenType_trace( void* obj );
void RogueStructuralDirectiveTokenType_trace( void* obj );
void RogueEOLTokenType_trace( void* obj );
void RogueStructureTokenType_trace( void* obj );
void RogueNativeCodeTokenType_trace( void* obj );
void RogueOpWithAssignTokenType_trace( void* obj );
void RogueString_TokenListTable_trace( void* obj );
void RoguePreprocessorTokenReader_trace( void* obj );
void RogueCmdSwitch_trace( void* obj );
void RogueCmdReadArrayElement_trace( void* obj );
void RogueCmdWriteArrayElement_trace( void* obj );
void RogueCmdConvertToPrimitiveType_trace( void* obj );
void RogueCmdSelectCaseListReader_trace( void* obj );
void RogueCmdAdjustGlobal_trace( void* obj );
void RogueCmdAdjustProperty_trace( void* obj );
void RogueTableEntry_of_String_CmdList_trace( void* obj );
void RogueString_CmdTableEntry_trace( void* obj );
void RogueNativeCodeToken_trace( void* obj );
void RogueTableEntry_of_String_TokenListList_trace( void* obj );
void RogueString_TokenListTableEntry_trace( void* obj );

void RogueStringBuilder_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueStringBuilder*)obj)->characters)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCharacterList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCharacterList*)obj)->data)) RogueArray_trace( link );
}

void RogueStringReader_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassStringReader*)obj)->string)) RogueString_trace( link );
}

void RogueStringList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueStringList*)obj)->data)) RogueArray_trace( link );
}

void RogueGlobal_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassGlobal*)obj)->printwriter_output_buffer)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassGlobal*)obj)->standard_output)) ((RogueObject*)link)->type->trace_fn( link );
}

void RoguePrintWriterAspect_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassPrintWriterAspect*)obj)->printwriter_output_buffer)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueRogueC_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassRogueC*)obj)->included_files)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->prefix_path_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->prefix_path_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->compile_targets)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->target_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->libraries_folder)) RogueString_trace( link );
  if ((link=((RogueClassRogueC*)obj)->source_files)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->first_filepath)) RogueString_trace( link );
  if ((link=((RogueClassRogueC*)obj)->output_filepath)) RogueString_trace( link );
  if ((link=((RogueClassRogueC*)obj)->supported_targets)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->requisite_declarations)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->execute_args)) RogueString_trace( link );
  if ((link=((RogueClassRogueC*)obj)->package_name)) RogueString_trace( link );
  if ((link=((RogueClassRogueC*)obj)->parsers)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->parsereaders_by_filepath)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueException_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassException*)obj)->message)) RogueString_trace( link );
  if ((link=((RogueClassException*)obj)->stack_trace)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueStackTrace_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassStackTrace*)obj)->entries)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueProgram_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassProgram*)obj)->code_prefix)) RogueString_trace( link );
  if ((link=((RogueClassProgram*)obj)->program_name)) RogueString_trace( link );
  if ((link=((RogueClassProgram*)obj)->template_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->template_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->augment_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->requisite_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->first_filepath)) RogueString_trace( link );
  if ((link=((RogueClassProgram*)obj)->m_on_launch)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->global_properties)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->native_header)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->native_code)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->methods_by_signature)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_null)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Real64)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Real32)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Int64)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Int32)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Character)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Byte)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Logical)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Object)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_String)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_NativeArray)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_GenericList)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Global)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Exception)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_StringBuilder)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->literal_string_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->literal_string_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->string_buffer)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->ids_by_module)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTemplateList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTemplateList*)obj)->data)) RogueArray_trace( link );
}

void RogueTemplate_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTemplate*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTemplate*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassTemplate*)obj)->tokens)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTemplate*)obj)->attributes)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTemplate*)obj)->type_parameters)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTemplate*)obj)->alternates_by_param_count)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_TemplateTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TemplateTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TemplateTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_AugmentListTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_AugmentListTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_AugmentListTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueRequisiteItemList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueRequisiteItemList*)obj)->data)) RogueArray_trace( link );
}

void RogueRequisiteItem_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassRequisiteItem*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRequisiteItem*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRequisiteItem*)obj)->signature)) RogueString_trace( link );
}

void RogueMethod_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->type_context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassMethod*)obj)->signature)) RogueString_trace( link );
  if ((link=((RogueClassMethod*)obj)->attributes)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->_return_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->_task_result_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->parameters)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->locals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->aspect_statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->incorporating_classes)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->overridden_method)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->overriding_methods)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->native_code)) RogueString_trace( link );
  if ((link=((RogueClassMethod*)obj)->label_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->label_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->cur_label)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->cpp_name)) RogueString_trace( link );
  if ((link=((RogueClassMethod*)obj)->cpp_typedef)) RogueString_trace( link );
}

void RoguePropertyList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RoguePropertyList*)obj)->data)) RogueArray_trace( link );
}

void RogueProperty_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassProperty*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProperty*)obj)->type_context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProperty*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassProperty*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProperty*)obj)->initial_value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProperty*)obj)->cpp_name)) RogueString_trace( link );
}

void RogueString_MethodListTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_MethodListTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_MethodListTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTypeList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTypeList*)obj)->data)) RogueArray_trace( link );
}

void RogueType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassType*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassType*)obj)->attributes)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->source_template)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->specializers)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->base_class)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->base_types)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->flat_base_types)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->_element_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->definition_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->definition_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->prev_enum_cmd)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->native_properties)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->global_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->global_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->property_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->property_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->global_method_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->routine_lookup_by_name)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->routine_lookup_by_signature)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->method_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->method_lookup_by_name)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->method_lookup_by_signature)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->callback_parameter_types)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->_callback_return_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->cpp_name)) RogueString_trace( link );
  if ((link=((RogueClassType*)obj)->cpp_class_name)) RogueString_trace( link );
  if ((link=((RogueClassType*)obj)->cpp_type_name)) RogueString_trace( link );
}

void RogueString_TypeTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TypeTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TypeTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_Int32Table_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_Int32Table*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_Int32Table*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_StringListTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_StringListTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_StringListTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_Int32TableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_Int32TableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_Int32TableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueInt32_TemplateTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassInt32_TemplateTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassInt32_TemplateTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueToken_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassToken*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassToken*)obj)->filepath)) RogueString_trace( link );
}

void RogueError_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassError*)obj)->message)) RogueString_trace( link );
  if ((link=((RogueClassError*)obj)->stack_trace)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueRogueError_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassRogueError*)obj)->message)) RogueString_trace( link );
  if ((link=((RogueClassRogueError*)obj)->stack_trace)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueError*)obj)->filepath)) RogueString_trace( link );
}

void RogueAttributes_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassAttributes*)obj)->tags)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmd_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmd*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdReturn_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdReturn*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReturn*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdStatement_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdStatement*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdStatementList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdStatementList*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdList*)obj)->data)) RogueArray_trace( link );
}

void RogueTokenType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTokenType*)obj)->name)) RogueString_trace( link );
}

void RogueCmdLabel_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLabel*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLabel*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassCmdLabel*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueScope_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassScope*)obj)->_this_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassScope*)obj)->this_method)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassScope*)obj)->this_body)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassScope*)obj)->_implicit_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassScope*)obj)->local_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassScope*)obj)->control_stack)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueMethodList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueMethodList*)obj)->data)) RogueArray_trace( link );
}

void RogueCPPWriter_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCPPWriter*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassCPPWriter*)obj)->buffer)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCPPWriter*)obj)->temp_buffer)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_MethodTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_MethodTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_MethodTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueLocalList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueLocalList*)obj)->data)) RogueArray_trace( link );
}

void RogueLocal_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassLocal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLocal*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassLocal*)obj)->original_name)) RogueString_trace( link );
  if ((link=((RogueClassLocal*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLocal*)obj)->initial_value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLocal*)obj)->_cpp_name)) RogueString_trace( link );
}

void RogueInt32List_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueInt32List*)obj)->data)) RogueArray_trace( link );
}

void RogueByteList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueByteList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_LogicalTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_LogicalTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_LogicalTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueParserList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueParserList*)obj)->data)) RogueArray_trace( link );
}

void RogueParser_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassParser*)obj)->reader)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassParser*)obj)->_this_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->this_method)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->local_declarations)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->property_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->string_buffer)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->cur_statement_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->used_modules)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->module_id_map)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_ParseReaderTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_ParseReaderTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_ParseReaderTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueFile_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassFile*)obj)->filepath)) RogueString_trace( link );
}

void RogueTokenList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTokenList*)obj)->data)) RogueArray_trace( link );
}

void RogueLineReader_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassLineReader*)obj)->source)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLineReader*)obj)->next)) RogueString_trace( link );
  if ((link=((RogueClassLineReader*)obj)->buffer)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTypeParameterList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTypeParameterList*)obj)->data)) RogueArray_trace( link );
}

void RogueTypeParameter_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTypeParameter*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTypeParameter*)obj)->name)) RogueString_trace( link );
}

void RogueAugmentList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueAugmentList*)obj)->data)) RogueArray_trace( link );
}

void RogueAugment_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassAugment*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassAugment*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassAugment*)obj)->base_types)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassAugment*)obj)->tokens)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_TokenTypeTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TokenTypeTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TokenTypeTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueLiteralCharacterToken_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassLiteralCharacterToken*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLiteralCharacterToken*)obj)->filepath)) RogueString_trace( link );
}

void RogueLiteralInt64Token_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassLiteralInt64Token*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLiteralInt64Token*)obj)->filepath)) RogueString_trace( link );
}

void RogueLiteralInt32Token_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassLiteralInt32Token*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLiteralInt32Token*)obj)->filepath)) RogueString_trace( link );
}

void RogueLiteralReal64Token_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassLiteralReal64Token*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLiteralReal64Token*)obj)->filepath)) RogueString_trace( link );
}

void RogueStringDataToken_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassStringDataToken*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassStringDataToken*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassStringDataToken*)obj)->value)) RogueString_trace( link );
}

void RogueString_TypeSpecializerTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TypeSpecializerTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TypeSpecializerTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTypeSpecializer_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTypeSpecializer*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassTypeSpecializer*)obj)->tokens)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTypeSpecializerList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTypeSpecializerList*)obj)->data)) RogueArray_trace( link );
}

void RogueTableEntry_of_String_TemplateList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_TemplateList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_TemplateTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TemplateTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_TemplateTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TemplateTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_AugmentListList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_AugmentListList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_AugmentListTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_AugmentListTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_AugmentListTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_AugmentListTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLabelList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdLabelList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_CmdLabelTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_CmdLabelTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_CmdLabelTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCloneMethodArgs_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCloneMethodArgs*)obj)->cloned_method)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAccess_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAccess*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAccess*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAccess*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassCmdAccess*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAccess*)obj)->flag_args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdArgs_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdArgs*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdFlagArgList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdFlagArgList*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdFlagArg_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdFlagArg*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdFlagArg*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassCmdFlagArg*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAssign_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAssign*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAssign*)obj)->target)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAssign*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdControlStructureList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdControlStructureList*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdControlStructure_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdControlStructure*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdControlStructure*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdControlStructure*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdControlStructure*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdControlStructure*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdControlStructure*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdControlStructure*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralThis_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralThis*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLiteralThis*)obj)->_this_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdThisContext_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdThisContext*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdThisContext*)obj)->_this_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdGenericLoop_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdGenericLoop*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->control_statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->condition)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->upkeep)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralInt32_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralInt32*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteral_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteral*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareNE_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareNE*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareNE*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareNE*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdComparison_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdComparison*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdComparison*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdComparison*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBinary_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBinary*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBinary*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBinary*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTaskArgs_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTaskArgs*)obj)->_task_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTaskArgs*)obj)->task_method)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTaskArgs*)obj)->_original_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTaskArgs*)obj)->original_method)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTaskArgs*)obj)->cmd_task_control)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTaskArgs*)obj)->context_property)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTaskArgs*)obj)->ip_property)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdTaskControl_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdTaskControl*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTaskControl*)obj)->sections)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTaskControl*)obj)->current_section)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdTaskControlSection_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdTaskControlSection*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_MethodListList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_MethodListList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_MethodListTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_MethodListTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_MethodListTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_MethodListTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueDefinitionList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueDefinitionList*)obj)->data)) RogueArray_trace( link );
}

void RogueDefinition_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassDefinition*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassDefinition*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassDefinition*)obj)->expression)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_DefinitionTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_DefinitionTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_DefinitionTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueNativePropertyList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueNativePropertyList*)obj)->data)) RogueArray_trace( link );
}

void RogueNativeProperty_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassNativeProperty*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassNativeProperty*)obj)->code)) RogueString_trace( link );
}

void RogueString_PropertyTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_PropertyTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_PropertyTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralNull_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralNull*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCreateCompound_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCreateCompound*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateCompound*)obj)->_of_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateCompound*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralLogical_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralLogical*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralString_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralString*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLiteralString*)obj)->value)) RogueString_trace( link );
}

void RogueCmdWriteGlobal_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdWriteGlobal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteGlobal*)obj)->global_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteGlobal*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdWriteProperty_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdWriteProperty*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteProperty*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteProperty*)obj)->property_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteProperty*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_TypeList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_TypeList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_TypeTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TypeTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_TypeTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TypeTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_Int32List_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_Int32List*)obj)->data)) RogueArray_trace( link );
}

void RogueTableEntry_of_String_StringListList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_StringListList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_StringListTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_StringListTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_StringListTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_StringListTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_Int32_TemplateList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_Int32_TemplateList*)obj)->data)) RogueArray_trace( link );
}

void RogueInt32_TemplateTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassInt32_TemplateTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassInt32_TemplateTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCastToType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCastToType*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCastToType*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCastToType*)obj)->_target_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdTypeOperator_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdTypeOperator*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTypeOperator*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTypeOperator*)obj)->_target_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLogicalize_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLogicalize*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalize*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdUnary_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdUnary*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdUnary*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCreateOptionalValue_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCreateOptionalValue*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateOptionalValue*)obj)->_of_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateOptionalValue*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdReadSingleton_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdReadSingleton*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadSingleton*)obj)->_of_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallInlineNativeRoutine_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallInlineNativeRoutine*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNativeRoutine*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNativeRoutine*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNativeRoutine*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallInlineNative_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallInlineNative*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNative*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNative*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNative*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCall_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCall*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCall*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCall*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCall*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallNativeRoutine_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallNativeRoutine*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallNativeRoutine*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallNativeRoutine*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallNativeRoutine*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueMacroArgs_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassMacroArgs*)obj)->this_context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMacroArgs*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMacroArgs*)obj)->arg_lookup)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdInlineNative_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdInlineNative*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdInlineNative*)obj)->code)) RogueString_trace( link );
  if ((link=((RogueClassCmdInlineNative*)obj)->this_method)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdInlineNative*)obj)->_result_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdInlineNative*)obj)->modify_op)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdInlineNative*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallRoutine_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallRoutine*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallRoutine*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallRoutine*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallRoutine*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdReadArrayCount_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdReadArrayCount*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadArrayCount*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadArrayCount*)obj)->_array_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallInlineNativeMethod_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallInlineNativeMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNativeMethod*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNativeMethod*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNativeMethod*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallNativeMethod_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallNativeMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallNativeMethod*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallNativeMethod*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallNativeMethod*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallAspectMethod_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallAspectMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallAspectMethod*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallAspectMethod*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallAspectMethod*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallDynamicMethod_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallDynamicMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallDynamicMethod*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallDynamicMethod*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallDynamicMethod*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallMethod_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallMethod*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallMethod*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallMethod*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCandidateMethods_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCandidateMethods*)obj)->type_context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCandidateMethods*)obj)->access)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCandidateMethods*)obj)->available)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCandidateMethods*)obj)->compatible)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCreateFunction_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCreateFunction*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateFunction*)obj)->parameters)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateFunction*)obj)->_return_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateFunction*)obj)->with_args)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateFunction*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueFnParamList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueFnParamList*)obj)->data)) RogueArray_trace( link );
}

void RogueFnParam_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassFnParam*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassFnParam*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_MethodList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_MethodList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_MethodTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_MethodTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_MethodTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_MethodTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_LogicalList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_LogicalList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_LogicalTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_LogicalTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_LogicalTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTokenReader_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTokenReader*)obj)->tokens)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_StringTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_StringTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_StringTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTokenizer_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTokenizer*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassTokenizer*)obj)->reader)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTokenizer*)obj)->tokens)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTokenizer*)obj)->buffer)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTokenizer*)obj)->next_filepath)) RogueString_trace( link );
}

void RogueParseReader_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassParseReader*)obj)->data)) ((RogueObject*)link)->type->trace_fn( link );
}

void RoguePreprocessor_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassPreprocessor*)obj)->parser)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassPreprocessor*)obj)->reader)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassPreprocessor*)obj)->tokens)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassPreprocessor*)obj)->cur_module)) RogueString_trace( link );
}

void RogueEOLToken_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassEOLToken*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassEOLToken*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassEOLToken*)obj)->comment)) RogueString_trace( link );
}

void RogueCmdAdd_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAdd*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAdd*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAdd*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdNativeHeader_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdNativeHeader*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdNativeHeader*)obj)->code)) RogueString_trace( link );
}

void RogueCmdNativeCode_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdNativeCode*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdNativeCode*)obj)->code)) RogueString_trace( link );
}

void RogueCmdIf_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdIf*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdIf*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdIf*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdIf*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdIf*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdIf*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdIf*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdIf*)obj)->condition)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdIf*)obj)->else_statements)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdWhich_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdWhich*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhich*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhich*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdWhich*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdWhich*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhich*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhich*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhich*)obj)->expression)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhich*)obj)->cases)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhich*)obj)->case_others)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdContingent_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdContingent*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdContingent*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdContingent*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->satisfied_statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->unsatisfied_statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->satisfied_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdContingent*)obj)->unsatisfied_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdContingent*)obj)->satisfied_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->unsatisfied_section)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdTry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdTry*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTry*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTry*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdTry*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdTry*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTry*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTry*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTry*)obj)->catches)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAwait_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAwait*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAwait*)obj)->expression)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAwait*)obj)->statement_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAwait*)obj)->result_var)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdYield_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdYield*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdThrow_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdThrow*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdThrow*)obj)->expression)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdFormattedString_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdFormattedString*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdFormattedString*)obj)->format)) RogueString_trace( link );
  if ((link=((RogueClassCmdFormattedString*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdTrace_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdTrace*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTrace*)obj)->info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdEscape_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdEscape*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdEscape*)obj)->target_cmd)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdNextIteration_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdNextIteration*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdNextIteration*)obj)->target_cmd)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdNecessary_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdNecessary*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdNecessary*)obj)->target_cmd)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdNecessary*)obj)->condition)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdSufficient_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdSufficient*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSufficient*)obj)->target_cmd)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSufficient*)obj)->condition)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAdjust_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAdjust*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAdjust*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdOpWithAssign_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdOpWithAssign*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdOpWithAssign*)obj)->target)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdOpWithAssign*)obj)->op)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdOpWithAssign*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdWhichCaseList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdWhichCaseList*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdWhichCase_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdWhichCase*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhichCase*)obj)->conditions)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhichCase*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCatchList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdCatchList*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdCatch_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCatch*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCatch*)obj)->error_var)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCatch*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLocalDeclaration_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLocalDeclaration*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLocalDeclaration*)obj)->local_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAdjustLocal_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAdjustLocal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAdjustLocal*)obj)->local_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdReadLocal_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdReadLocal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadLocal*)obj)->local_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareLE_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareLE*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareLE*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareLE*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdRange_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdRange*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRange*)obj)->first)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRange*)obj)->last)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRange*)obj)->step_size)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLocalOpWithAssign_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLocalOpWithAssign*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLocalOpWithAssign*)obj)->op)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLocalOpWithAssign*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLocalOpWithAssign*)obj)->local_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdResolvedOpWithAssign_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdResolvedOpWithAssign*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdResolvedOpWithAssign*)obj)->op)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdResolvedOpWithAssign*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdRangeUpTo_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdRangeUpTo*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRangeUpTo*)obj)->first)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRangeUpTo*)obj)->last)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRangeUpTo*)obj)->step_size)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareGE_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareGE*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareGE*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareGE*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdForEach_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdForEach*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdForEach*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdForEach*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdForEach*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdForEach*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdForEach*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdForEach*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdForEach*)obj)->control_var_name)) RogueString_trace( link );
  if ((link=((RogueClassCmdForEach*)obj)->index_var_name)) RogueString_trace( link );
  if ((link=((RogueClassCmdForEach*)obj)->collection)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdForEach*)obj)->step_cmd)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdRangeDownTo_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdRangeDownTo*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRangeDownTo*)obj)->first)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRangeDownTo*)obj)->last)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRangeDownTo*)obj)->step_size)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLogicalXor_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLogicalXor*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalXor*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalXor*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBinaryLogical_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBinaryLogical*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBinaryLogical*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBinaryLogical*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLogicalOr_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLogicalOr*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalOr*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalOr*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLogicalAnd_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLogicalAnd*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalAnd*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalAnd*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareEQ_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareEQ*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareEQ*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareEQ*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareIs_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareIs*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareIs*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareIs*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareIsNot_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareIsNot*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareIsNot*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareIsNot*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareLT_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareLT*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareLT*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareLT*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareGT_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareGT*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareGT*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareGT*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdInstanceOf_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdInstanceOf*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdInstanceOf*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdInstanceOf*)obj)->_target_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLogicalNot_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLogicalNot*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalNot*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseXor_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseXor*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseXor*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseXor*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseOp_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseOp*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseOp*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseOp*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseOr_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseOr*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseOr*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseOr*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseAnd_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseAnd*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseAnd*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseAnd*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseShiftLeft_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseShiftLeft*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseShiftLeft*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseShiftLeft*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseShiftRight_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseShiftRight*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseShiftRight*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseShiftRight*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseShiftRightX_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseShiftRightX*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseShiftRightX*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseShiftRightX*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdSubtract_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdSubtract*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSubtract*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSubtract*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdMultiply_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdMultiply*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdMultiply*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdMultiply*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdDivide_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdDivide*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdDivide*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdDivide*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdMod_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdMod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdMod*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdMod*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdPower_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdPower*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdPower*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdPower*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdNegate_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdNegate*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdNegate*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseNot_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseNot*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseNot*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdGetOptionalValue_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdGetOptionalValue*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGetOptionalValue*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdElementAccess_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdElementAccess*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdElementAccess*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdElementAccess*)obj)->index)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdListConvert_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdListConvert*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdListConvert*)obj)->list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdListConvert*)obj)->_to_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdListConvert*)obj)->convert_fn)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdConvertToType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdConvertToType*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdConvertToType*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdConvertToType*)obj)->_target_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCreateCallback_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCreateCallback*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateCallback*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateCallback*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassCmdCreateCallback*)obj)->signature)) RogueString_trace( link );
  if ((link=((RogueClassCmdCreateCallback*)obj)->_return_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAs_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAs*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAs*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAs*)obj)->_target_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdDefaultValue_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdDefaultValue*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdDefaultValue*)obj)->_of_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralReal64_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralReal64*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralInt64_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralInt64*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralCharacter_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralCharacter*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCreateList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCreateList*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateList*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateList*)obj)->_list_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallPriorMethod_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallPriorMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallPriorMethod*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassCmdCallPriorMethod*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallPriorMethod*)obj)->flag_args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueFnArgList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueFnArgList*)obj)->data)) RogueArray_trace( link );
}

void RogueFnArg_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassFnArg*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassFnArg*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassFnArg*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdSelect_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdSelect*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSelect*)obj)->local_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSelect*)obj)->expression)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSelect*)obj)->cases)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSelect*)obj)->_value_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdSelectCaseList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdSelectCaseList*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdSelectCase_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdSelectCase*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSelectCase*)obj)->conditions)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSelectCase*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdTypedLiteralList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdTypedLiteralList*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTypedLiteralList*)obj)->list_type_name)) RogueString_trace( link );
  if ((link=((RogueClassCmdTypedLiteralList*)obj)->elements)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_ParseReaderList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_ParseReaderList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_ParseReaderTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_ParseReaderTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_ParseReaderTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_ParseReaderTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueFileReader_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassFileReader*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassFileReader*)obj)->buffer)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueFileWriter_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassFileWriter*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassFileWriter*)obj)->buffer)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTokenListRebuilder_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTokenListRebuilder*)obj)->list)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_TokenTypeList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_TokenTypeList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_TokenTypeTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TokenTypeTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_TokenTypeTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TokenTypeTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_TypeSpecializerList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_TypeSpecializerList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_TypeSpecializerTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TypeSpecializerTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_TypeSpecializerTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TypeSpecializerTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_CmdLabelList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_CmdLabelList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_CmdLabelTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_CmdLabelTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_CmdLabelTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_CmdLabelTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCreateArray_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCreateArray*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateArray*)obj)->_array_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateArray*)obj)->count_cmd)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCreateObject_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCreateObject*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateObject*)obj)->_of_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdReadGlobal_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdReadGlobal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadGlobal*)obj)->global_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdReadProperty_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdReadProperty*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadProperty*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadProperty*)obj)->property_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLogicalizeOptionalValue_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLogicalizeOptionalValue*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalizeOptionalValue*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdWriteSingleton_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdWriteSingleton*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteSingleton*)obj)->_of_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteSingleton*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdWriteLocal_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdWriteLocal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteLocal*)obj)->local_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteLocal*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdOpAssignGlobal_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdOpAssignGlobal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdOpAssignGlobal*)obj)->op)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdOpAssignGlobal*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdOpAssignGlobal*)obj)->global_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdOpAssignProperty_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdOpAssignProperty*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdOpAssignProperty*)obj)->op)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdOpAssignProperty*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdOpAssignProperty*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdOpAssignProperty*)obj)->property_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdTaskControlSectionList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdTaskControlSectionList*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdBlock_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBlock*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBlock*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBlock*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdBlock*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdBlock*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBlock*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBlock*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_DefinitionList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_DefinitionList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_DefinitionTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_DefinitionTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_DefinitionTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_DefinitionTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_PropertyList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_PropertyList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_PropertyTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_PropertyTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_PropertyTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_PropertyTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_CmdTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_CmdTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_CmdTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallStaticMethod_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallStaticMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallStaticMethod*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallStaticMethod*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallStaticMethod*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_StringList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_StringList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_StringTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_StringTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_StringTableEntry*)obj)->value)) RogueString_trace( link );
  if ((link=((RogueClassString_StringTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueDirectiveTokenType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassDirectiveTokenType*)obj)->name)) RogueString_trace( link );
}

void RogueStructuralDirectiveTokenType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassStructuralDirectiveTokenType*)obj)->name)) RogueString_trace( link );
}

void RogueEOLTokenType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassEOLTokenType*)obj)->name)) RogueString_trace( link );
}

void RogueStructureTokenType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassStructureTokenType*)obj)->name)) RogueString_trace( link );
}

void RogueNativeCodeTokenType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassNativeCodeTokenType*)obj)->name)) RogueString_trace( link );
}

void RogueOpWithAssignTokenType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassOpWithAssignTokenType*)obj)->name)) RogueString_trace( link );
}

void RogueString_TokenListTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TokenListTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TokenListTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RoguePreprocessorTokenReader_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassPreprocessorTokenReader*)obj)->tokens)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassPreprocessorTokenReader*)obj)->queue)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdSwitch_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdSwitch*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSwitch*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSwitch*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdSwitch*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdSwitch*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSwitch*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSwitch*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSwitch*)obj)->expression)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSwitch*)obj)->cases)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSwitch*)obj)->case_others)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdReadArrayElement_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdReadArrayElement*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadArrayElement*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadArrayElement*)obj)->_array_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadArrayElement*)obj)->index)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdWriteArrayElement_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdWriteArrayElement*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteArrayElement*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteArrayElement*)obj)->_array_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteArrayElement*)obj)->index)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteArrayElement*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdConvertToPrimitiveType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdConvertToPrimitiveType*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdConvertToPrimitiveType*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdConvertToPrimitiveType*)obj)->_target_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdSelectCaseListReader_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdSelectCaseListReader*)obj)->list)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAdjustGlobal_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAdjustGlobal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAdjustGlobal*)obj)->global_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAdjustProperty_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAdjustProperty*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAdjustProperty*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAdjustProperty*)obj)->property_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_CmdList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_CmdList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_CmdTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_CmdTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_CmdTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_CmdTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueNativeCodeToken_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassNativeCodeToken*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassNativeCodeToken*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassNativeCodeToken*)obj)->value)) RogueString_trace( link );
}

void RogueTableEntry_of_String_TokenListList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_TokenListList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_TokenListTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TokenListTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_TokenListTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TokenListTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}


int Rogue_type_name_index_table[] =
{
  32,34,35,41,39,37,36,38,40,675,43,719,42,602,1150,676,
  720,44,1151,603,1152,604,45,605,1153,606,607,677,608,609,610,678,
  611,612,679,613,614,680,615,616,617,618,619,620,621,769,779,721,
  622,334,1013,780,1016,681,623,781,722,624,723,682,724,725,625,1024,
  1025,626,627,683,628,726,684,727,685,728,629,630,686,631,632,633,
  729,687,634,688,635,689,636,730,637,773,774,775,776,777,731,638,
  732,639,690,691,640,733,692,641,734,693,642,643,1026,782,1017,694,
  783,784,695,1014,1037,785,735,1029,1039,786,1132,1065,787,1027,736,788,
  644,696,645,737,697,646,647,698,648,649,1040,789,1041,1042,790,791,
  738,739,699,650,740,700,741,701,651,742,702,652,743,1075,792,1079,
  793,794,1118,744,1148,1140,1119,1141,1028,795,1142,1120,1149,1143,1144,1146,
  1145,1111,796,703,653,745,746,704,654,747,705,655,748,656,657,658,
  659,660,778,1066,797,798,1030,1031,1032,1033,799,800,801,802,803,804,
  805,806,807,808,809,706,810,707,811,1015,812,813,1133,814,1091,815,
  1089,1134,1034,1090,1094,1047,1095,1096,1135,1136,1137,1138,1139,1076,1080,1104,
  1067,1105,1106,1107,1108,1109,1068,1069,1070,1071,1072,1081,1082,816,817,818,
  1077,819,1078,1043,1044,1045,1046,820,821,708,661,822,709,823,824,710,
  662,749,663,664,665,711,666,750,712,667,751,713,668,752,1121,1122,
  1123,1124,1125,1126,1127,1092,1093,753,714,1035,754,715,669,755,716,670,
  756,1112,1147,757,717,671,758,1018,1019,1020,1021,1022,1023,672,673,759,
  1036,760,1128,1129,1110,761,1113,1154,1130,1131,1115,1114,1116,1117,718,674,
  762,1155,1156
};
RogueInitFn Rogue_init_object_fn_table[] =
{
  0,
  0,
  0,
  (RogueInitFn) RogueStringBuilder__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueGlobal__init_object,
  0,
  0,
  0,
  (RogueInitFn) RogueRogueC__init_object,
  (RogueInitFn) RogueException__init_object,
  0,
  0,
  0,
  (RogueInitFn) RogueProgram__init_object,
  0,
  (RogueInitFn) RogueTemplate__init_object,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueMethod__init_object,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueType__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueError__init_object,
  (RogueInitFn) RogueRogueError__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueScope__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueCPPWriter__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueParser__init_object,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueLineReader__init_object,
  0,
  0,
  0,
  (RogueInitFn) RogueAugment__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueCmdTaskControl__init_object,
  (RogueInitFn) RogueCmdTaskControlSection__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueCandidateMethods__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueTokenizer__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueFileReader__init_object,
  (RogueInitFn) RogueFileWriter__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RoguePreprocessorTokenReader__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
};

RogueInitFn Rogue_init_fn_table[] =
{
  0,
  0,
  0,
  (RogueInitFn) RogueStringBuilder__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueStringList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueTemplateList__init,
  0,
  (RogueInitFn) RogueString_TemplateTable__init,
  (RogueInitFn) RogueString_AugmentListTable__init,
  (RogueInitFn) RogueRequisiteItemList__init,
  0,
  0,
  (RogueInitFn) RoguePropertyList__init,
  0,
  (RogueInitFn) RogueString_MethodListTable__init,
  (RogueInitFn) RogueTypeList__init,
  0,
  (RogueInitFn) RogueString_TypeTable__init,
  (RogueInitFn) RogueString_Int32Table__init,
  (RogueInitFn) RogueString_StringListTable__init,
  0,
  (RogueInitFn) RogueInt32_TemplateTable__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueCmdStatementList__init,
  (RogueInitFn) RogueCmdList__init,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueMethodList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueString_MethodTable__init,
  (RogueInitFn) RogueLocalList__init,
  0,
  0,
  (RogueInitFn) RogueInt32List__init,
  0,
  (RogueInitFn) RogueByteList__init,
  0,
  0,
  (RogueInitFn) RogueString_LogicalTable__init,
  (RogueInitFn) RogueParserList__init,
  0,
  (RogueInitFn) RogueString_ParseReaderTable__init,
  0,
  0,
  (RogueInitFn) RogueTokenList__init,
  0,
  (RogueInitFn) RogueTypeParameterList__init,
  0,
  (RogueInitFn) RogueAugmentList__init,
  0,
  0,
  (RogueInitFn) RogueString_TokenTypeTable__init,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueString_TypeSpecializerTable__init,
  0,
  0,
  (RogueInitFn) RogueTypeSpecializerList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueCmdLabelList__init,
  (RogueInitFn) RogueString_CmdLabelTable__init,
  0,
  0,
  0,
  (RogueInitFn) RogueCmdArgs__init,
  (RogueInitFn) RogueCmdFlagArgList__init,
  0,
  0,
  (RogueInitFn) RogueCmdControlStructureList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueDefinitionList__init,
  0,
  (RogueInitFn) RogueString_DefinitionTable__init,
  (RogueInitFn) RogueNativePropertyList__init,
  0,
  (RogueInitFn) RogueString_PropertyTable__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueFnParamList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueString_StringTable__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueCmdWhichCaseList__init,
  0,
  (RogueInitFn) RogueCmdCatchList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueFnArgList__init,
  0,
  0,
  (RogueInitFn) RogueCmdSelectCaseList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueCmdTaskControlSectionList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueString_CmdTable__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueString_TokenListTable__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
};

RogueCleanUpFn Rogue_clean_up_fn_table[] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
};

RogueTraceFn Rogue_trace_fn_table[] =
{
  RogueObject_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueStringBuilder_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueCharacterList_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueStringReader_trace,
  RogueObject_trace,
  RogueStringList_trace,
  RogueObject_trace,
  RogueGlobal_trace,
  RoguePrintWriterAspect_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueRogueC_trace,
  RogueException_trace,
  RogueStackTrace_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueProgram_trace,
  RogueTemplateList_trace,
  RogueTemplate_trace,
  RogueString_TemplateTable_trace,
  RogueString_AugmentListTable_trace,
  RogueRequisiteItemList_trace,
  RogueRequisiteItem_trace,
  RogueMethod_trace,
  RoguePropertyList_trace,
  RogueProperty_trace,
  RogueString_MethodListTable_trace,
  RogueTypeList_trace,
  RogueType_trace,
  RogueString_TypeTable_trace,
  RogueString_Int32Table_trace,
  RogueString_StringListTable_trace,
  RogueString_Int32TableEntry_trace,
  RogueInt32_TemplateTable_trace,
  RogueToken_trace,
  RogueError_trace,
  RogueRogueError_trace,
  RogueArray_trace,
  RogueAttributes_trace,
  RogueCmd_trace,
  RogueCmdReturn_trace,
  RogueCmdStatement_trace,
  RogueCmdStatementList_trace,
  RogueCmdList_trace,
  RogueTokenType_trace,
  RogueCmdLabel_trace,
  RogueArray_trace,
  RogueScope_trace,
  RogueArray_trace,
  RogueMethodList_trace,
  RogueArray_trace,
  RogueArray_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueCPPWriter_trace,
  RogueString_MethodTable_trace,
  RogueLocalList_trace,
  RogueLocal_trace,
  RogueArray_trace,
  RogueInt32List_trace,
  RogueObject_trace,
  RogueByteList_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueString_LogicalTable_trace,
  RogueParserList_trace,
  RogueParser_trace,
  RogueString_ParseReaderTable_trace,
  RogueFile_trace,
  RogueArray_trace,
  RogueTokenList_trace,
  RogueLineReader_trace,
  RogueTypeParameterList_trace,
  RogueTypeParameter_trace,
  RogueAugmentList_trace,
  RogueAugment_trace,
  RogueArray_trace,
  RogueString_TokenTypeTable_trace,
  RogueLiteralCharacterToken_trace,
  RogueLiteralInt64Token_trace,
  RogueLiteralInt32Token_trace,
  RogueLiteralReal64Token_trace,
  RogueStringDataToken_trace,
  RogueArray_trace,
  RogueString_TypeSpecializerTable_trace,
  RogueArray_trace,
  RogueTypeSpecializer_trace,
  RogueTypeSpecializerList_trace,
  RogueTableEntry_of_String_TemplateList_trace,
  RogueString_TemplateTableEntry_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_AugmentListList_trace,
  RogueString_AugmentListTableEntry_trace,
  RogueArray_trace,
  RogueCmdLabelList_trace,
  RogueString_CmdLabelTable_trace,
  RogueObject_trace,
  RogueCloneMethodArgs_trace,
  RogueCmdAccess_trace,
  RogueCmdArgs_trace,
  RogueCmdFlagArgList_trace,
  RogueCmdFlagArg_trace,
  RogueCmdAssign_trace,
  RogueCmdControlStructureList_trace,
  RogueCmdControlStructure_trace,
  RogueCmdLiteralThis_trace,
  RogueCmdThisContext_trace,
  RogueArray_trace,
  RogueCmdGenericLoop_trace,
  RogueCmdLiteralInt32_trace,
  RogueCmdLiteral_trace,
  RogueCmdCompareNE_trace,
  RogueCmdComparison_trace,
  RogueCmdBinary_trace,
  RogueTaskArgs_trace,
  RogueArray_trace,
  RogueCmdTaskControl_trace,
  RogueCmdTaskControlSection_trace,
  RogueTableEntry_of_String_MethodListList_trace,
  RogueString_MethodListTableEntry_trace,
  RogueArray_trace,
  RogueDefinitionList_trace,
  RogueDefinition_trace,
  RogueString_DefinitionTable_trace,
  RogueNativePropertyList_trace,
  RogueNativeProperty_trace,
  RogueString_PropertyTable_trace,
  RogueCmdLiteralNull_trace,
  RogueCmdCreateCompound_trace,
  RogueCmdLiteralLogical_trace,
  RogueCmdLiteralString_trace,
  RogueCmdWriteGlobal_trace,
  RogueCmdWriteProperty_trace,
  RogueArray_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_TypeList_trace,
  RogueString_TypeTableEntry_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_Int32List_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_StringListList_trace,
  RogueString_StringListTableEntry_trace,
  RogueArray_trace,
  RogueTableEntry_of_Int32_TemplateList_trace,
  RogueInt32_TemplateTableEntry_trace,
  RogueArray_trace,
  RogueCmdCastToType_trace,
  RogueCmdTypeOperator_trace,
  RogueCmdLogicalize_trace,
  RogueCmdUnary_trace,
  RogueCmdCreateOptionalValue_trace,
  RogueCmdReadSingleton_trace,
  RogueArray_trace,
  RogueCmdCallInlineNativeRoutine_trace,
  RogueCmdCallInlineNative_trace,
  RogueCmdCall_trace,
  RogueCmdCallNativeRoutine_trace,
  RogueMacroArgs_trace,
  RogueCmdInlineNative_trace,
  RogueCmdCallRoutine_trace,
  RogueCmdReadArrayCount_trace,
  RogueCmdCallInlineNativeMethod_trace,
  RogueCmdCallNativeMethod_trace,
  RogueCmdCallAspectMethod_trace,
  RogueCmdCallDynamicMethod_trace,
  RogueCmdCallMethod_trace,
  RogueCandidateMethods_trace,
  RogueCmdCreateFunction_trace,
  RogueFnParamList_trace,
  RogueFnParam_trace,
  RogueArray_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_MethodList_trace,
  RogueString_MethodTableEntry_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_LogicalList_trace,
  RogueString_LogicalTableEntry_trace,
  RogueArray_trace,
  RogueTokenReader_trace,
  RogueString_StringTable_trace,
  RogueTokenizer_trace,
  RogueParseReader_trace,
  RoguePreprocessor_trace,
  RogueEOLToken_trace,
  RogueCmdAdd_trace,
  RogueCmdNativeHeader_trace,
  RogueCmdNativeCode_trace,
  RogueCmdIf_trace,
  RogueCmdWhich_trace,
  RogueCmdContingent_trace,
  RogueCmdTry_trace,
  RogueCmdAwait_trace,
  RogueCmdYield_trace,
  RogueCmdThrow_trace,
  RogueCmdFormattedString_trace,
  RogueCmdTrace_trace,
  RogueCmdEscape_trace,
  RogueCmdNextIteration_trace,
  RogueCmdNecessary_trace,
  RogueCmdSufficient_trace,
  RogueCmdAdjust_trace,
  RogueCmdOpWithAssign_trace,
  RogueCmdWhichCaseList_trace,
  RogueCmdWhichCase_trace,
  RogueCmdCatchList_trace,
  RogueCmdCatch_trace,
  RogueCmdLocalDeclaration_trace,
  RogueCmdAdjustLocal_trace,
  RogueCmdReadLocal_trace,
  RogueCmdCompareLE_trace,
  RogueCmdRange_trace,
  RogueCmdLocalOpWithAssign_trace,
  RogueCmdResolvedOpWithAssign_trace,
  RogueCmdRangeUpTo_trace,
  RogueCmdCompareGE_trace,
  RogueCmdForEach_trace,
  RogueCmdRangeDownTo_trace,
  RogueCmdLogicalXor_trace,
  RogueCmdBinaryLogical_trace,
  RogueCmdLogicalOr_trace,
  RogueCmdLogicalAnd_trace,
  RogueCmdCompareEQ_trace,
  RogueCmdCompareIs_trace,
  RogueCmdCompareIsNot_trace,
  RogueCmdCompareLT_trace,
  RogueCmdCompareGT_trace,
  RogueCmdInstanceOf_trace,
  RogueCmdLogicalNot_trace,
  RogueCmdBitwiseXor_trace,
  RogueCmdBitwiseOp_trace,
  RogueCmdBitwiseOr_trace,
  RogueCmdBitwiseAnd_trace,
  RogueCmdBitwiseShiftLeft_trace,
  RogueCmdBitwiseShiftRight_trace,
  RogueCmdBitwiseShiftRightX_trace,
  RogueCmdSubtract_trace,
  RogueCmdMultiply_trace,
  RogueCmdDivide_trace,
  RogueCmdMod_trace,
  RogueCmdPower_trace,
  RogueCmdNegate_trace,
  RogueCmdBitwiseNot_trace,
  RogueCmdGetOptionalValue_trace,
  RogueCmdElementAccess_trace,
  RogueCmdListConvert_trace,
  RogueCmdConvertToType_trace,
  RogueCmdCreateCallback_trace,
  RogueCmdAs_trace,
  RogueCmdDefaultValue_trace,
  RogueCmdLiteralReal64_trace,
  RogueCmdLiteralInt64_trace,
  RogueCmdLiteralCharacter_trace,
  RogueCmdCreateList_trace,
  RogueCmdCallPriorMethod_trace,
  RogueFnArgList_trace,
  RogueFnArg_trace,
  RogueCmdSelect_trace,
  RogueCmdSelectCaseList_trace,
  RogueCmdSelectCase_trace,
  RogueCmdTypedLiteralList_trace,
  RogueTableEntry_of_String_ParseReaderList_trace,
  RogueString_ParseReaderTableEntry_trace,
  RogueArray_trace,
  RogueFileReader_trace,
  RogueFileWriter_trace,
  RogueTokenListRebuilder_trace,
  RogueTableEntry_of_String_TokenTypeList_trace,
  RogueString_TokenTypeTableEntry_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_TypeSpecializerList_trace,
  RogueString_TypeSpecializerTableEntry_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_CmdLabelList_trace,
  RogueString_CmdLabelTableEntry_trace,
  RogueArray_trace,
  RogueCmdCreateArray_trace,
  RogueCmdCreateObject_trace,
  RogueCmdReadGlobal_trace,
  RogueCmdReadProperty_trace,
  RogueCmdLogicalizeOptionalValue_trace,
  RogueCmdWriteSingleton_trace,
  RogueCmdWriteLocal_trace,
  RogueCmdOpAssignGlobal_trace,
  RogueCmdOpAssignProperty_trace,
  RogueArray_trace,
  RogueCmdTaskControlSectionList_trace,
  RogueCmdBlock_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_DefinitionList_trace,
  RogueString_DefinitionTableEntry_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_PropertyList_trace,
  RogueString_PropertyTableEntry_trace,
  RogueArray_trace,
  RogueString_CmdTable_trace,
  RogueCmdCallStaticMethod_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_StringList_trace,
  RogueString_StringTableEntry_trace,
  RogueArray_trace,
  RogueDirectiveTokenType_trace,
  RogueStructuralDirectiveTokenType_trace,
  RogueEOLTokenType_trace,
  RogueStructureTokenType_trace,
  RogueNativeCodeTokenType_trace,
  RogueOpWithAssignTokenType_trace,
  RogueString_TokenListTable_trace,
  RoguePreprocessorTokenReader_trace,
  RogueArray_trace,
  RogueCmdSwitch_trace,
  RogueArray_trace,
  RogueCmdReadArrayElement_trace,
  RogueCmdWriteArrayElement_trace,
  RogueCmdConvertToPrimitiveType_trace,
  RogueArray_trace,
  RogueCmdSelectCaseListReader_trace,
  RogueObject_trace,
  RogueCmdAdjustGlobal_trace,
  RogueCmdAdjustProperty_trace,
  RogueTableEntry_of_String_CmdList_trace,
  RogueString_CmdTableEntry_trace,
  RogueArray_trace,
  RogueNativeCodeToken_trace,
  RogueTableEntry_of_String_TokenListList_trace,
  RogueString_TokenListTableEntry_trace,
  RogueArray_trace,
  RogueObject_trace,
  RogueObject_trace
};

void Rogue_trace()
{
  void* link;
  int i;

  // Trace GLOBAL PROPERTIES
  if ((link=RogueStringBuilder_work_bytes)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueCmdStatementList_current)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_define)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_include)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_includeNativeCode)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_includeNativeHeader)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_if)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_elseIf)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_else)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_endIf)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_module)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_requisite)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_using)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_placeholder_id)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_begin_augment_tokens)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_augment)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_case)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_catch)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_class)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_DEFINITIONS)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_else)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_elseIf)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endAugment)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endClass)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endContingent)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endForEach)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endFunction)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endIf)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endLoop)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endRoutine)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endTry)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endWhich)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endWhile)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_ENUMERATE)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_GLOBAL)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_GLOBAL_METHODS)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_GLOBAL_PROPERTIES)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_macro)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_method)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_METHODS)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_nativeCode)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_nativeHeader)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_others)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_PROPERTIES)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_routine)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_satisfied)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_unsatisfied)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_with)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_close_brace)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_close_bracket)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_close_comment)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_close_paren)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_close_specialize)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_eol)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_eoi)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_await)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_contingent)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_escapeContingent)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_escapeForEach)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_escapeIf)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_escapeLoop)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_escapeTry)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_escapeWhich)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_escapeWhile)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_forEach)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_function)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_global)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_if)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_in)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_infinity)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_is)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_isNot)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_local)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_loop)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_NaN)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_native)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_necessary)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_nextIteration)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_noAction)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_null)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_of)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_return)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_select)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_step)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_sufficient)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_throw)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_trace)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_trace_position)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_try)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_which)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_while)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_yield)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_identifier)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_type_identifier)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_literal_character)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_literal_integer)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_literal_long)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_literal_real)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_literal_string)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_and)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_as)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_downTo)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_false)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_instanceOf)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_meta)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_not)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_notInstanceOf)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_or)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_pi)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_prior)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_this)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_true)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_xor)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_ampersand)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_ampersand_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_arrow)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_at)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_backslash)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_caret)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_caret_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_colon)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_comma)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_compare)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_dot)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_dot_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_downToGreaterThan)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_empty_braces)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_empty_brackets)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_eq)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_exclamation_point)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_fat_arrow)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_ge)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_gt)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_le)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_lt)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_minus)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_minus_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_minus_minus)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_ne)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_open_brace)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_open_bracket)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_open_paren)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_open_specialize)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_percent)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_percent_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_plus)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_plus_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_plus_plus)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_question_mark)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_semicolon)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_shift_left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_shift_right)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_shift_right_x)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_slash)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_slash_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_tilde)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_tilde_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_times)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_times_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_upTo)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_upToLessThan)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_vertical_bar)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_vertical_bar_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_double_vertical_bar)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueSystem_command_line_arguments)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueSystem_executable_filepath)) RogueString_trace( link );
  if ((link=RoguePreprocessor_definitions)) ((RogueObject*)link)->type->trace_fn( link );

  // Trace singletons
  for (i=Rogue_type_count; --i>=0; )
  {
    RogueType* type = &Rogue_types[i];
    if (type->_singleton)
    {
      type->trace_fn( type->_singleton );
    }
  }
}

void* Rogue_dynamic_method_table[] =
{
  0, // StringBuilder
  (void*) (ROGUEM0) RogueStringBuilder__to_String,
  (void*) (ROGUEM0) RogueStringBuilder__type_name,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM1) RogueStringBuilder__init_object,
  0, // Character[]
  (void*) (ROGUEM3) RogueCharacterList__to_String,
  (void*) (ROGUEM3) RogueCharacterList__type_name,
  (void*) (ROGUEM4) RogueCharacterList__init_object,
  0, // GenericList
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM5) RogueGenericList__type_name,
  (void*) (ROGUEM6) RogueGenericList__init_object,
  0, // StringReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM8) RogueStringReader__type_name,
  (void*) (ROGUEM9) RogueStringReader__has_another,
  (void*) (ROGUEM10) RogueStringReader__read,
  0, // Reader<<Character>>
  0, // String[]
  (void*) (ROGUEM11) RogueStringList__to_String,
  (void*) (ROGUEM11) RogueStringList__type_name,
  (void*) (ROGUEM12) RogueStringList__init_object,
  0, // Global
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM13) RogueGlobal__type_name,
  0,
  0,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM14) RogueGlobal__write__CharacterList,
  0, // PrintWriterAspect
  0, // Console
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM15) RogueConsole__type_name,
  0, // Writer<<Character>>
  0, // RogueC
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM16) RogueRogueC__type_name,
  0, // Exception
  (void*) (ROGUEM17) RogueException__to_String,
  (void*) (ROGUEM17) RogueException__type_name,
  0,
  (void*) (ROGUEM18) RogueException__init_object,
  0, // StackTrace
  (void*) (ROGUEM19) RogueStackTrace__to_String,
  (void*) (ROGUEM19) RogueStackTrace__type_name,
  0, // Reader<<String>>
  0, // Math
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM20) RogueMath__type_name,
  0, // Program
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM21) RogueProgram__type_name,
  0, // Template[]
  (void*) (ROGUEM22) RogueTemplateList__to_String,
  (void*) (ROGUEM22) RogueTemplateList__type_name,
  (void*) (ROGUEM23) RogueTemplateList__init_object,
  0, // Template
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM24) RogueTemplate__type_name,
  0, // Table<<String,Template>>
  (void*) (ROGUEM25) RogueString_TemplateTable__to_String,
  (void*) (ROGUEM25) RogueString_TemplateTable__type_name,
  0, // Table<<String,Augment[]>>
  (void*) (ROGUEM26) RogueString_AugmentListTable__to_String,
  (void*) (ROGUEM26) RogueString_AugmentListTable__type_name,
  0, // RequisiteItem[]
  (void*) (ROGUEM27) RogueRequisiteItemList__to_String,
  (void*) (ROGUEM27) RogueRequisiteItemList__type_name,
  (void*) (ROGUEM28) RogueRequisiteItemList__init_object,
  0, // RequisiteItem
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM29) RogueRequisiteItem__type_name,
  0, // Method
  (void*) (ROGUEM30) RogueMethod__to_String,
  (void*) (ROGUEM30) RogueMethod__type_name,
  0, // Property[]
  (void*) (ROGUEM31) RoguePropertyList__to_String,
  (void*) (ROGUEM31) RoguePropertyList__type_name,
  (void*) (ROGUEM32) RoguePropertyList__init_object,
  0, // Property
  (void*) (ROGUEM33) RogueProperty__to_String,
  (void*) (ROGUEM33) RogueProperty__type_name,
  0, // Table<<String,Method[]>>
  (void*) (ROGUEM34) RogueString_MethodListTable__to_String,
  (void*) (ROGUEM34) RogueString_MethodListTable__type_name,
  0, // Type[]
  (void*) (ROGUEM35) RogueTypeList__to_String,
  (void*) (ROGUEM35) RogueTypeList__type_name,
  (void*) (ROGUEM36) RogueTypeList__init_object,
  0, // Type
  (void*) (ROGUEM37) RogueType__to_String,
  (void*) (ROGUEM37) RogueType__type_name,
  0, // Table<<String,Type>>
  (void*) (ROGUEM38) RogueString_TypeTable__to_String,
  (void*) (ROGUEM38) RogueString_TypeTable__type_name,
  0, // Table<<String,Int32>>
  (void*) (ROGUEM39) RogueString_Int32Table__to_String,
  (void*) (ROGUEM39) RogueString_Int32Table__type_name,
  0, // Table<<String,String[]>>
  (void*) (ROGUEM40) RogueString_StringListTable__to_String,
  (void*) (ROGUEM40) RogueString_StringListTable__type_name,
  0, // TableEntry<<String,Int32>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM41) RogueString_Int32TableEntry__type_name,
  0, // Table<<Int32,Template>>
  (void*) (ROGUEM42) RogueInt32_TemplateTable__to_String,
  (void*) (ROGUEM42) RogueInt32_TemplateTable__type_name,
  0, // Token
  (void*) (ROGUEM43) RogueToken__to_String,
  (void*) (ROGUEM43) RogueToken__type_name,
  0,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM43) RogueToken__quoted_name,
  0,
  0,
  (void*) (ROGUEM44) RogueToken__to_Character,
  (void*) (ROGUEM45) RogueToken__to_Int32,
  (void*) (ROGUEM46) RogueToken__to_Int64,
  (void*) (ROGUEM47) RogueToken__to_Real64,
  (void*) (ROGUEM48) RogueToken__to_Type,
  0,
  (void*) (ROGUEM49) RogueToken__init_object,
  0, // Error
  (void*) (ROGUEM17) RogueException__to_String,
  (void*) (ROGUEM50) RogueError__type_name,
  0,
  (void*) (ROGUEM51) RogueError__init_object,
  0, // RogueError
  (void*) (ROGUEM52) RogueRogueError__to_String,
  (void*) (ROGUEM52) RogueRogueError__type_name,
  0,
  (void*) (ROGUEM53) RogueRogueError__init_object,
  0, // Attributes
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM54) RogueAttributes__type_name,
  0, // Cmd
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM55) RogueCmd__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM58) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM56) RogueCmd__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM63) RogueCmd__trace_used_code,
  (void*) (ROGUEM60) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM69) RogueCmd__init_object,
  0, // CmdReturn
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM70) RogueCmdReturn__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM71) RogueCmdReturn__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM72) RogueCmdReturn__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM73) Rogue_CmdReturn__type,
  (void*) (ROGUEM74) RogueCmdReturn__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM75) RogueCmdReturn__trace_used_code,
  (void*) (ROGUEM76) RogueCmdReturn__update_this_type__Scope,
  (void*) (ROGUEM77) RogueCmdReturn__init_object,
  0, // CmdStatement
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM78) RogueCmdStatement__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM58) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM56) RogueCmd__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM79) RogueCmdStatement__trace_used_code,
  (void*) (ROGUEM80) RogueCmdStatement__update_this_type__Scope,
  (void*) (ROGUEM81) RogueCmdStatement__init_object,
  0, // CmdStatementList
  (void*) (ROGUEM82) RogueCmdList__to_String,
  (void*) (ROGUEM83) RogueCmdStatementList__type_name,
  (void*) (ROGUEM84) RogueCmdStatementList__init_object,
  (void*) (ROGUEM84) RogueCmdStatementList__init,
  (void*) (ROGUEM85) RogueCmdStatementList__init__Int32,
  0, // Cmd[]
  (void*) (ROGUEM82) RogueCmdList__to_String,
  (void*) (ROGUEM82) RogueCmdList__type_name,
  (void*) (ROGUEM86) RogueCmdList__init_object,
  (void*) (ROGUEM86) RogueCmdList__init,
  (void*) (ROGUEM87) RogueCmdList__init__Int32,
  0, // TokenType
  (void*) (ROGUEM88) RogueTokenType__to_String,
  (void*) (ROGUEM88) RogueTokenType__type_name,
  0,
  (void*) (ROGUEM89) RogueTokenType__create_token__String_Int32_Int32,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM90) RogueTokenType__create_token__String_Int32_Int32_String,
  0,
  (void*) (ROGUEM91) RogueTokenType__create_token__Token_String,
  0,
  (void*) (ROGUEM92) RogueTokenType__is_directive,
  (void*) (ROGUEM92) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM92) RogueTokenType__is_structure,
  0,
  0,
  (void*) (ROGUEM93) RogueTokenType__init_object,
  0, // CmdLabel
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM94) RogueCmdLabel__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM95) RogueCmdLabel__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM96) RogueCmdLabel__requires_semicolon,
  (void*) (ROGUEM97) RogueCmdLabel__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM98) RogueCmdLabel__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM99) RogueCmdLabel__trace_used_code,
  (void*) (ROGUEM100) RogueCmdLabel__update_this_type__Scope,
  (void*) (ROGUEM101) RogueCmdLabel__init_object,
  0, // Scope
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM102) RogueScope__type_name,
  0, // Method[]
  (void*) (ROGUEM103) RogueMethodList__to_String,
  (void*) (ROGUEM103) RogueMethodList__type_name,
  (void*) (ROGUEM104) RogueMethodList__init_object,
  0, // Function(Type)->Logical
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM105) RogueFunction_Type_RETURNSLogical__type_name,
  (void*) (ROGUEM106) RogueFunction_Type_RETURNSLogical__call__Type,
  (void*) (ROGUEM107) RogueFunction_Type_RETURNSLogical__init_object,
  0, // Function_197
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM108) RogueFunction_197__type_name,
  (void*) (ROGUEM109) RogueFunction_197__call__Type,
  (void*) (ROGUEM110) RogueFunction_197__init_object,
  0, // Function_198
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM111) RogueFunction_198__type_name,
  (void*) (ROGUEM112) RogueFunction_198__call__Type,
  (void*) (ROGUEM113) RogueFunction_198__init_object,
  0, // CPPWriter
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM114) RogueCPPWriter__type_name,
  0, // Table<<String,Method>>
  (void*) (ROGUEM115) RogueString_MethodTable__to_String,
  (void*) (ROGUEM115) RogueString_MethodTable__type_name,
  0, // Local[]
  (void*) (ROGUEM116) RogueLocalList__to_String,
  (void*) (ROGUEM116) RogueLocalList__type_name,
  (void*) (ROGUEM117) RogueLocalList__init_object,
  0, // Local
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM118) RogueLocal__type_name,
  0, // Int32[]
  (void*) (ROGUEM119) RogueInt32List__to_String,
  (void*) (ROGUEM119) RogueInt32List__type_name,
  (void*) (ROGUEM120) RogueInt32List__init_object,
  0, // Byte[]
  (void*) (ROGUEM121) RogueByteList__to_String,
  (void*) (ROGUEM121) RogueByteList__type_name,
  (void*) (ROGUEM122) RogueByteList__init_object,
  0, // System
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM123) RogueSystem__type_name,
  0, // Table<<String,Logical>>
  (void*) (ROGUEM124) RogueString_LogicalTable__to_String,
  (void*) (ROGUEM124) RogueString_LogicalTable__type_name,
  0, // Parser[]
  (void*) (ROGUEM125) RogueParserList__to_String,
  (void*) (ROGUEM125) RogueParserList__type_name,
  (void*) (ROGUEM126) RogueParserList__init_object,
  0, // Parser
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM127) RogueParser__type_name,
  0, // Table<<String,ParseReader>>
  (void*) (ROGUEM128) RogueString_ParseReaderTable__to_String,
  (void*) (ROGUEM128) RogueString_ParseReaderTable__type_name,
  0, // File
  (void*) (ROGUEM129) RogueFile__to_String,
  (void*) (ROGUEM129) RogueFile__type_name,
  0, // Token[]
  (void*) (ROGUEM130) RogueTokenList__to_String,
  (void*) (ROGUEM130) RogueTokenList__type_name,
  (void*) (ROGUEM131) RogueTokenList__init_object,
  0, // LineReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM132) RogueLineReader__type_name,
  (void*) (ROGUEM133) RogueLineReader__has_another,
  (void*) (ROGUEM132) RogueLineReader__read,
  0, // TypeParameter[]
  (void*) (ROGUEM134) RogueTypeParameterList__to_String,
  (void*) (ROGUEM134) RogueTypeParameterList__type_name,
  (void*) (ROGUEM135) RogueTypeParameterList__init_object,
  0, // TypeParameter
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM136) RogueTypeParameter__type_name,
  0, // Augment[]
  (void*) (ROGUEM137) RogueAugmentList__to_String,
  (void*) (ROGUEM137) RogueAugmentList__type_name,
  (void*) (ROGUEM138) RogueAugmentList__init_object,
  0, // Augment
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM139) RogueAugment__type_name,
  0, // Table<<String,TokenType>>
  (void*) (ROGUEM140) RogueString_TokenTypeTable__to_String,
  (void*) (ROGUEM140) RogueString_TokenTypeTable__type_name,
  0, // LiteralCharacterToken
  (void*) (ROGUEM141) RogueLiteralCharacterToken__to_String,
  (void*) (ROGUEM141) RogueLiteralCharacterToken__type_name,
  0,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM43) RogueToken__quoted_name,
  0,
  0,
  (void*) (ROGUEM142) RogueLiteralCharacterToken__to_Character,
  (void*) (ROGUEM45) RogueToken__to_Int32,
  (void*) (ROGUEM46) RogueToken__to_Int64,
  (void*) (ROGUEM47) RogueToken__to_Real64,
  (void*) (ROGUEM48) RogueToken__to_Type,
  0,
  (void*) (ROGUEM143) RogueLiteralCharacterToken__init_object,
  0, // LiteralInt64Token
  (void*) (ROGUEM144) RogueLiteralInt64Token__to_String,
  (void*) (ROGUEM144) RogueLiteralInt64Token__type_name,
  0,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM43) RogueToken__quoted_name,
  0,
  0,
  (void*) (ROGUEM44) RogueToken__to_Character,
  (void*) (ROGUEM145) RogueLiteralInt64Token__to_Int32,
  (void*) (ROGUEM146) RogueLiteralInt64Token__to_Int64,
  (void*) (ROGUEM147) RogueLiteralInt64Token__to_Real64,
  (void*) (ROGUEM48) RogueToken__to_Type,
  0,
  (void*) (ROGUEM148) RogueLiteralInt64Token__init_object,
  0, // LiteralInt32Token
  (void*) (ROGUEM149) RogueLiteralInt32Token__to_String,
  (void*) (ROGUEM149) RogueLiteralInt32Token__type_name,
  0,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM43) RogueToken__quoted_name,
  0,
  0,
  (void*) (ROGUEM44) RogueToken__to_Character,
  (void*) (ROGUEM150) RogueLiteralInt32Token__to_Int32,
  (void*) (ROGUEM46) RogueToken__to_Int64,
  (void*) (ROGUEM151) RogueLiteralInt32Token__to_Real64,
  (void*) (ROGUEM48) RogueToken__to_Type,
  0,
  (void*) (ROGUEM152) RogueLiteralInt32Token__init_object,
  0, // LiteralReal64Token
  (void*) (ROGUEM153) RogueLiteralReal64Token__to_String,
  (void*) (ROGUEM153) RogueLiteralReal64Token__type_name,
  0,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM43) RogueToken__quoted_name,
  0,
  0,
  (void*) (ROGUEM44) RogueToken__to_Character,
  (void*) (ROGUEM154) RogueLiteralReal64Token__to_Int32,
  (void*) (ROGUEM46) RogueToken__to_Int64,
  (void*) (ROGUEM155) RogueLiteralReal64Token__to_Real64,
  (void*) (ROGUEM48) RogueToken__to_Type,
  0,
  (void*) (ROGUEM156) RogueLiteralReal64Token__init_object,
  0, // StringDataToken
  (void*) (ROGUEM157) RogueStringDataToken__to_String,
  (void*) (ROGUEM157) RogueStringDataToken__type_name,
  0,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM43) RogueToken__quoted_name,
  0,
  0,
  (void*) (ROGUEM44) RogueToken__to_Character,
  (void*) (ROGUEM45) RogueToken__to_Int32,
  (void*) (ROGUEM46) RogueToken__to_Int64,
  (void*) (ROGUEM47) RogueToken__to_Real64,
  (void*) (ROGUEM48) RogueToken__to_Type,
  0,
  (void*) (ROGUEM158) RogueStringDataToken__init_object,
  0, // Table<<String,TypeSpecializer>>
  (void*) (ROGUEM159) RogueString_TypeSpecializerTable__to_String,
  (void*) (ROGUEM159) RogueString_TypeSpecializerTable__type_name,
  0, // TypeSpecializer
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM160) RogueTypeSpecializer__type_name,
  0, // TypeSpecializer[]
  (void*) (ROGUEM161) RogueTypeSpecializerList__to_String,
  (void*) (ROGUEM161) RogueTypeSpecializerList__type_name,
  (void*) (ROGUEM162) RogueTypeSpecializerList__init_object,
  0, // TableEntry<<String,Template>>[]
  (void*) (ROGUEM163) RogueString_TemplateTableEntryList__to_String,
  (void*) (ROGUEM163) RogueString_TemplateTableEntryList__type_name,
  (void*) (ROGUEM164) RogueString_TemplateTableEntryList__init_object,
  0, // TableEntry<<String,Template>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM165) RogueString_TemplateTableEntry__type_name,
  0, // TableEntry<<String,Augment[]>>[]
  (void*) (ROGUEM166) RogueString_AugmentListTableEntryList__to_String,
  (void*) (ROGUEM166) RogueString_AugmentListTableEntryList__type_name,
  (void*) (ROGUEM167) RogueString_AugmentListTableEntryList__init_object,
  0, // TableEntry<<String,Augment[]>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM168) RogueString_AugmentListTableEntry__type_name,
  0, // CmdLabel[]
  (void*) (ROGUEM169) RogueCmdLabelList__to_String,
  (void*) (ROGUEM169) RogueCmdLabelList__type_name,
  (void*) (ROGUEM170) RogueCmdLabelList__init_object,
  0, // Table<<String,CmdLabel>>
  (void*) (ROGUEM171) RogueString_CmdLabelTable__to_String,
  (void*) (ROGUEM171) RogueString_CmdLabelTable__type_name,
  0, // CloneArgs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM172) RogueCloneArgs__type_name,
  (void*) (ROGUEM173) RogueCloneArgs__register_label__CmdLabel,
  (void*) (ROGUEM174) RogueCloneArgs__init_object,
  0, // CloneMethodArgs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM175) RogueCloneMethodArgs__type_name,
  (void*) (ROGUEM176) RogueCloneMethodArgs__register_label__CmdLabel,
  (void*) (ROGUEM177) RogueCloneMethodArgs__init_object,
  0, // CmdAccess
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM178) RogueCmdAccess__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM179) RogueCmdAccess__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM180) RogueCmdAccess__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM181) RogueCmdAccess__resolve__Scope,
  (void*) (ROGUEM182) RogueCmdAccess__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM183) RogueCmdAccess__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM184) Rogue_CmdAccess__type,
  (void*) (ROGUEM185) RogueCmdAccess__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM186) RogueCmdAccess__trace_used_code,
  (void*) (ROGUEM187) RogueCmdAccess__update_this_type__Scope,
  (void*) (ROGUEM188) RogueCmdAccess__init_object,
  0, // CmdArgs
  (void*) (ROGUEM82) RogueCmdList__to_String,
  (void*) (ROGUEM189) RogueCmdArgs__type_name,
  (void*) (ROGUEM190) RogueCmdArgs__init_object,
  (void*) (ROGUEM190) RogueCmdArgs__init,
  (void*) (ROGUEM191) RogueCmdArgs__init__Int32,
  0, // CmdFlagArg[]
  (void*) (ROGUEM192) RogueCmdFlagArgList__to_String,
  (void*) (ROGUEM192) RogueCmdFlagArgList__type_name,
  (void*) (ROGUEM193) RogueCmdFlagArgList__init_object,
  0, // CmdFlagArg
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM194) RogueCmdFlagArg__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM195) RogueCmdFlagArg__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM56) RogueCmd__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM63) RogueCmd__trace_used_code,
  (void*) (ROGUEM60) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM196) RogueCmdFlagArg__init_object,
  0, // CmdAssign
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM197) RogueCmdAssign__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM198) RogueCmdAssign__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM199) RogueCmdAssign__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM63) RogueCmd__trace_used_code,
  (void*) (ROGUEM200) RogueCmdAssign__update_this_type__Scope,
  (void*) (ROGUEM201) RogueCmdAssign__init_object,
  0, // CmdControlStructure[]
  (void*) (ROGUEM202) RogueCmdControlStructureList__to_String,
  (void*) (ROGUEM202) RogueCmdControlStructureList__type_name,
  (void*) (ROGUEM203) RogueCmdControlStructureList__init_object,
  0, // CmdControlStructure
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM204) RogueCmdControlStructure__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM58) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM205) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM56) RogueCmd__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM79) RogueCmdStatement__trace_used_code,
  (void*) (ROGUEM80) RogueCmdStatement__update_this_type__Scope,
  (void*) (ROGUEM206) RogueCmdControlStructure__init_object,
  0,
  (void*) (ROGUEM207) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  0, // CmdLiteralThis
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM208) RogueCmdLiteralThis__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM209) RogueCmdLiteralThis__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM210) RogueCmdThisContext__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM211) RogueCmdLiteralThis__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM212) RogueCmdLiteralThis__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM213) Rogue_CmdThisContext__type,
  (void*) (ROGUEM214) RogueCmdThisContext__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM215) RogueCmdThisContext__trace_used_code,
  (void*) (ROGUEM216) RogueCmdThisContext__update_this_type__Scope,
  (void*) (ROGUEM217) RogueCmdLiteralThis__init_object,
  0, // CmdThisContext
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM218) RogueCmdThisContext__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM219) RogueCmdThisContext__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM210) RogueCmdThisContext__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM215) RogueCmdThisContext__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM220) RogueCmdThisContext__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM213) Rogue_CmdThisContext__type,
  (void*) (ROGUEM214) RogueCmdThisContext__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM215) RogueCmdThisContext__trace_used_code,
  (void*) (ROGUEM216) RogueCmdThisContext__update_this_type__Scope,
  (void*) (ROGUEM221) RogueCmdThisContext__init_object,
  0, // CmdGenericLoop
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM222) RogueCmdGenericLoop__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM223) RogueCmdGenericLoop__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM205) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM224) RogueCmdGenericLoop__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM225) RogueCmdGenericLoop__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM226) RogueCmdGenericLoop__trace_used_code,
  (void*) (ROGUEM227) RogueCmdGenericLoop__update_this_type__Scope,
  (void*) (ROGUEM228) RogueCmdGenericLoop__init_object,
  0,
  (void*) (ROGUEM207) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  0, // CmdLiteralInt32
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM229) RogueCmdLiteralInt32__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM230) RogueCmdLiteralInt32__cast_to__Type_Scope,
  (void*) (ROGUEM231) RogueCmdLiteralInt32__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM232) RogueCmdLiteral__implicit_type__Scope,
  (void*) (ROGUEM233) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM234) RogueCmdLiteralInt32__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM235) Rogue_CmdLiteralInt32__type,
  (void*) (ROGUEM236) RogueCmdLiteralInt32__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM237) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM238) RogueCmdLiteral__update_this_type__Scope,
  (void*) (ROGUEM239) RogueCmdLiteralInt32__init_object,
  0, // CmdLiteral
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM240) RogueCmdLiteral__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM58) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM232) RogueCmdLiteral__implicit_type__Scope,
  (void*) (ROGUEM233) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM56) RogueCmd__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM237) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM238) RogueCmdLiteral__update_this_type__Scope,
  (void*) (ROGUEM241) RogueCmdLiteral__init_object,
  0, // CmdCompareNE
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM242) RogueCmdCompareNE__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM243) RogueCmdCompareNE__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM244) RogueCmdCompareNE__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM245) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM246) Rogue_CmdComparison__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM250) RogueCmdCompareNE__init_object,
  0,
  (void*) (ROGUEM251) RogueCmdBinary__fn_name,
  (void*) (ROGUEM252) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM253) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM254) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM242) RogueCmdCompareNE__symbol,
  (void*) (ROGUEM251) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM256) RogueCmdCompareNE__resolve_for_reference__Scope_Type_Type_Logical,
  0, // CmdComparison
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM257) RogueCmdComparison__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM58) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM245) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM246) Rogue_CmdComparison__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM258) RogueCmdComparison__init_object,
  0,
  (void*) (ROGUEM251) RogueCmdBinary__fn_name,
  (void*) (ROGUEM252) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM253) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM254) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM251) RogueCmdBinary__symbol,
  (void*) (ROGUEM251) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM259) RogueCmdComparison__resolve_for_reference__Scope_Type_Type_Logical,
  0, // CmdBinary
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM251) RogueCmdBinary__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM58) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM245) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM260) Rogue_CmdBinary__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM261) RogueCmdBinary__init_object,
  0,
  (void*) (ROGUEM251) RogueCmdBinary__fn_name,
  (void*) (ROGUEM262) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM254) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM251) RogueCmdBinary__symbol,
  (void*) (ROGUEM251) RogueCmdBinary__cpp_symbol,
  0, // TaskArgs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM263) RogueTaskArgs__type_name,
  (void*) (ROGUEM173) RogueCloneArgs__register_label__CmdLabel,
  (void*) (ROGUEM264) RogueTaskArgs__init_object,
  0, // CmdTaskControl
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM265) RogueCmdTaskControl__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM58) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM266) RogueCmdTaskControl__requires_semicolon,
  (void*) (ROGUEM267) RogueCmdTaskControl__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM268) RogueCmdTaskControl__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM269) RogueCmdTaskControl__trace_used_code,
  (void*) (ROGUEM270) RogueCmdTaskControl__update_this_type__Scope,
  (void*) (ROGUEM271) RogueCmdTaskControl__init_object,
  0, // CmdTaskControlSection
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM272) RogueCmdTaskControlSection__type_name,
  0, // TableEntry<<String,Method[]>>[]
  (void*) (ROGUEM273) RogueString_MethodListTableEntryList__to_String,
  (void*) (ROGUEM273) RogueString_MethodListTableEntryList__type_name,
  (void*) (ROGUEM274) RogueString_MethodListTableEntryList__init_object,
  0, // TableEntry<<String,Method[]>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM275) RogueString_MethodListTableEntry__type_name,
  0, // Definition[]
  (void*) (ROGUEM276) RogueDefinitionList__to_String,
  (void*) (ROGUEM276) RogueDefinitionList__type_name,
  (void*) (ROGUEM277) RogueDefinitionList__init_object,
  0, // Definition
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM278) RogueDefinition__type_name,
  0, // Table<<String,Definition>>
  (void*) (ROGUEM279) RogueString_DefinitionTable__to_String,
  (void*) (ROGUEM279) RogueString_DefinitionTable__type_name,
  0, // NativeProperty[]
  (void*) (ROGUEM280) RogueNativePropertyList__to_String,
  (void*) (ROGUEM280) RogueNativePropertyList__type_name,
  (void*) (ROGUEM281) RogueNativePropertyList__init_object,
  0, // NativeProperty
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM282) RogueNativeProperty__type_name,
  0, // Table<<String,Property>>
  (void*) (ROGUEM283) RogueString_PropertyTable__to_String,
  (void*) (ROGUEM283) RogueString_PropertyTable__type_name,
  0, // CmdLiteralNull
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM284) RogueCmdLiteralNull__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM285) RogueCmdLiteralNull__cast_to__Type_Scope,
  (void*) (ROGUEM286) RogueCmdLiteralNull__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM232) RogueCmdLiteral__implicit_type__Scope,
  (void*) (ROGUEM233) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM287) RogueCmdLiteralNull__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM288) Rogue_CmdLiteralNull__type,
  (void*) (ROGUEM289) RogueCmdLiteralNull__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM237) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM238) RogueCmdLiteral__update_this_type__Scope,
  (void*) (ROGUEM290) RogueCmdLiteralNull__init_object,
  0, // CmdCreateCompound
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM291) RogueCmdCreateCompound__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM292) RogueCmdCreateCompound__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM293) RogueCmdCreateCompound__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM294) Rogue_CmdCreateCompound__type,
  (void*) (ROGUEM295) RogueCmdCreateCompound__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM296) RogueCmdCreateCompound__trace_used_code,
  (void*) (ROGUEM297) RogueCmdCreateCompound__update_this_type__Scope,
  (void*) (ROGUEM298) RogueCmdCreateCompound__init_object,
  0, // CmdLiteralLogical
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM299) RogueCmdLiteralLogical__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM300) RogueCmdLiteralLogical__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM232) RogueCmdLiteral__implicit_type__Scope,
  (void*) (ROGUEM233) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM301) RogueCmdLiteralLogical__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM302) Rogue_CmdLiteralLogical__type,
  (void*) (ROGUEM303) RogueCmdLiteralLogical__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM237) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM238) RogueCmdLiteral__update_this_type__Scope,
  (void*) (ROGUEM304) RogueCmdLiteralLogical__init_object,
  0, // CmdLiteralString
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM305) RogueCmdLiteralString__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM306) RogueCmdLiteralString__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM232) RogueCmdLiteral__implicit_type__Scope,
  (void*) (ROGUEM233) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM307) RogueCmdLiteralString__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM308) Rogue_CmdLiteralString__type,
  (void*) (ROGUEM309) RogueCmdLiteralString__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM310) RogueCmdLiteralString__trace_used_code,
  (void*) (ROGUEM311) RogueCmdLiteralString__update_this_type__Scope,
  (void*) (ROGUEM312) RogueCmdLiteralString__init_object,
  0, // CmdWriteGlobal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM313) RogueCmdWriteGlobal__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM314) RogueCmdWriteGlobal__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM315) RogueCmdWriteGlobal__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM316) RogueCmdWriteGlobal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM317) RogueCmdWriteGlobal__trace_used_code,
  (void*) (ROGUEM318) RogueCmdWriteGlobal__update_this_type__Scope,
  (void*) (ROGUEM319) RogueCmdWriteGlobal__init_object,
  0, // CmdWriteProperty
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM320) RogueCmdWriteProperty__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM321) RogueCmdWriteProperty__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM322) RogueCmdWriteProperty__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM323) RogueCmdWriteProperty__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM324) RogueCmdWriteProperty__trace_used_code,
  (void*) (ROGUEM325) RogueCmdWriteProperty__update_this_type__Scope,
  (void*) (ROGUEM326) RogueCmdWriteProperty__init_object,
  0, // TableEntry<<String,Type>>[]
  (void*) (ROGUEM327) RogueString_TypeTableEntryList__to_String,
  (void*) (ROGUEM327) RogueString_TypeTableEntryList__type_name,
  (void*) (ROGUEM328) RogueString_TypeTableEntryList__init_object,
  0, // TableEntry<<String,Type>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM329) RogueString_TypeTableEntry__type_name,
  0, // TableEntry<<String,Int32>>[]
  (void*) (ROGUEM330) RogueString_Int32TableEntryList__to_String,
  (void*) (ROGUEM330) RogueString_Int32TableEntryList__type_name,
  (void*) (ROGUEM331) RogueString_Int32TableEntryList__init_object,
  0, // TableEntry<<String,String[]>>[]
  (void*) (ROGUEM332) RogueString_StringListTableEntryList__to_String,
  (void*) (ROGUEM332) RogueString_StringListTableEntryList__type_name,
  (void*) (ROGUEM333) RogueString_StringListTableEntryList__init_object,
  0, // TableEntry<<String,String[]>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM334) RogueString_StringListTableEntry__type_name,
  0, // TableEntry<<Int32,Template>>[]
  (void*) (ROGUEM335) RogueInt32_TemplateTableEntryList__to_String,
  (void*) (ROGUEM335) RogueInt32_TemplateTableEntryList__type_name,
  (void*) (ROGUEM336) RogueInt32_TemplateTableEntryList__init_object,
  0, // TableEntry<<Int32,Template>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM337) RogueInt32_TemplateTableEntry__type_name,
  0, // CmdCastToType
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM338) RogueCmdCastToType__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM339) RogueCmdCastToType__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM340) RogueCmdCastToType__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM341) Rogue_CmdTypeOperator__type,
  (void*) (ROGUEM342) RogueCmdCastToType__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM343) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM344) RogueCmdTypeOperator__update_this_type__Scope,
  (void*) (ROGUEM345) RogueCmdCastToType__init_object,
  0, // CmdTypeOperator
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM346) RogueCmdTypeOperator__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM58) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM56) RogueCmd__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM341) Rogue_CmdTypeOperator__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM343) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM344) RogueCmdTypeOperator__update_this_type__Scope,
  (void*) (ROGUEM347) RogueCmdTypeOperator__init_object,
  0, // CmdLogicalize
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM348) RogueCmdLogicalize__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM349) RogueCmdLogicalize__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM350) RogueCmdLogicalize__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM351) Rogue_CmdLogicalize__type,
  (void*) (ROGUEM352) RogueCmdUnary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM353) RogueCmdUnary__trace_used_code,
  (void*) (ROGUEM354) RogueCmdUnary__update_this_type__Scope,
  (void*) (ROGUEM355) RogueCmdLogicalize__init_object,
  0,
  (void*) (ROGUEM348) RogueCmdLogicalize__prefix_symbol,
  (void*) (ROGUEM348) RogueCmdLogicalize__fn_name,
  (void*) (ROGUEM350) RogueCmdLogicalize__resolve_for_literal_operand__Scope,
  0,
  (void*) (ROGUEM348) RogueCmdLogicalize__suffix_symbol,
  (void*) (ROGUEM348) RogueCmdLogicalize__cpp_prefix_symbol,
  (void*) (ROGUEM348) RogueCmdLogicalize__cpp_suffix_symbol,
  0, // CmdUnary
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM356) RogueCmdUnary__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM58) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM357) RogueCmdUnary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM358) Rogue_CmdUnary__type,
  (void*) (ROGUEM352) RogueCmdUnary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM353) RogueCmdUnary__trace_used_code,
  (void*) (ROGUEM354) RogueCmdUnary__update_this_type__Scope,
  (void*) (ROGUEM359) RogueCmdUnary__init_object,
  0,
  (void*) (ROGUEM356) RogueCmdUnary__prefix_symbol,
  (void*) (ROGUEM356) RogueCmdUnary__fn_name,
  (void*) (ROGUEM357) RogueCmdUnary__resolve_for_literal_operand__Scope,
  0,
  (void*) (ROGUEM356) RogueCmdUnary__suffix_symbol,
  (void*) (ROGUEM356) RogueCmdUnary__cpp_prefix_symbol,
  (void*) (ROGUEM356) RogueCmdUnary__cpp_suffix_symbol,
  0, // CmdCreateOptionalValue
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM360) RogueCmdCreateOptionalValue__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM361) RogueCmdCreateOptionalValue__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM362) RogueCmdCreateOptionalValue__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM363) Rogue_CmdCreateOptionalValue__type,
  (void*) (ROGUEM364) RogueCmdCreateOptionalValue__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM365) RogueCmdCreateOptionalValue__trace_used_code,
  (void*) (ROGUEM366) RogueCmdCreateOptionalValue__update_this_type__Scope,
  (void*) (ROGUEM367) RogueCmdCreateOptionalValue__init_object,
  0, // CmdReadSingleton
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM368) RogueCmdReadSingleton__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM369) RogueCmdReadSingleton__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM370) RogueCmdReadSingleton__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM371) RogueCmdReadSingleton__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM372) Rogue_CmdReadSingleton__type,
  (void*) (ROGUEM373) RogueCmdReadSingleton__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM370) RogueCmdReadSingleton__trace_used_code,
  (void*) (ROGUEM374) RogueCmdReadSingleton__update_this_type__Scope,
  (void*) (ROGUEM375) RogueCmdReadSingleton__init_object,
  0, // CmdCallInlineNativeRoutine
  (void*) (ROGUEM376) RogueCmdCallInlineNative__to_String,
  (void*) (ROGUEM377) RogueCmdCallInlineNativeRoutine__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM378) RogueCmdCallInlineNativeRoutine__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM379) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM380) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM381) RogueCmdCallInlineNative__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM382) Rogue_CmdCallInlineNativeRoutine__type,
  (void*) (ROGUEM383) RogueCmdCallInlineNative__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM384) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM385) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM386) RogueCmdCallInlineNativeRoutine__init_object,
  0,
  (void*) (ROGUEM387) RogueCmdCallInlineNative__print_this__CPPWriter,
  0, // CmdCallInlineNative
  (void*) (ROGUEM376) RogueCmdCallInlineNative__to_String,
  (void*) (ROGUEM376) RogueCmdCallInlineNative__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM58) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM379) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM380) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM381) RogueCmdCallInlineNative__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM379) Rogue_CmdCall__type,
  (void*) (ROGUEM383) RogueCmdCallInlineNative__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM384) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM385) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM388) RogueCmdCallInlineNative__init_object,
  0,
  (void*) (ROGUEM387) RogueCmdCallInlineNative__print_this__CPPWriter,
  0, // CmdCall
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM389) RogueCmdCall__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM58) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM379) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM380) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM379) Rogue_CmdCall__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM384) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM385) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM390) RogueCmdCall__init_object,
  0, // CmdCallNativeRoutine
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM391) RogueCmdCallNativeRoutine__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM392) RogueCmdCallNativeRoutine__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM379) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM380) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM379) Rogue_CmdCall__type,
  (void*) (ROGUEM393) RogueCmdCallNativeRoutine__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM384) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM385) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM394) RogueCmdCallNativeRoutine__init_object,
  0, // MacroArgs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM395) RogueMacroArgs__type_name,
  (void*) (ROGUEM173) RogueCloneArgs__register_label__CmdLabel,
  (void*) (ROGUEM396) RogueMacroArgs__init_object,
  0, // CmdInlineNative
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM397) RogueCmdInlineNative__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM398) RogueCmdInlineNative__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM399) RogueCmdInlineNative__requires_semicolon,
  (void*) (ROGUEM400) RogueCmdInlineNative__resolve__Scope,
  (void*) (ROGUEM401) RogueCmdInlineNative__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM402) RogueCmdInlineNative__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM403) RogueCmdInlineNative__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM404) Rogue_CmdInlineNative__type,
  (void*) (ROGUEM405) RogueCmdInlineNative__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM406) RogueCmdInlineNative__trace_used_code,
  (void*) (ROGUEM407) RogueCmdInlineNative__update_this_type__Scope,
  (void*) (ROGUEM408) RogueCmdInlineNative__init_object,
  0, // CmdCallRoutine
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM409) RogueCmdCallRoutine__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM410) RogueCmdCallRoutine__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM379) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM380) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM379) Rogue_CmdCall__type,
  (void*) (ROGUEM411) RogueCmdCallRoutine__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM384) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM385) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM412) RogueCmdCallRoutine__init_object,
  0, // CmdReadArrayCount
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM413) RogueCmdReadArrayCount__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM414) RogueCmdReadArrayCount__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM415) RogueCmdReadArrayCount__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM416) Rogue_CmdReadArrayCount__type,
  (void*) (ROGUEM417) RogueCmdReadArrayCount__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM418) RogueCmdReadArrayCount__trace_used_code,
  (void*) (ROGUEM419) RogueCmdReadArrayCount__update_this_type__Scope,
  (void*) (ROGUEM420) RogueCmdReadArrayCount__init_object,
  0, // CmdCallInlineNativeMethod
  (void*) (ROGUEM376) RogueCmdCallInlineNative__to_String,
  (void*) (ROGUEM421) RogueCmdCallInlineNativeMethod__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM422) RogueCmdCallInlineNativeMethod__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM379) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM380) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM381) RogueCmdCallInlineNative__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM423) Rogue_CmdCallInlineNativeMethod__type,
  (void*) (ROGUEM383) RogueCmdCallInlineNative__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM384) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM385) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM424) RogueCmdCallInlineNativeMethod__init_object,
  0,
  (void*) (ROGUEM425) RogueCmdCallInlineNativeMethod__print_this__CPPWriter,
  0, // CmdCallNativeMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM426) RogueCmdCallNativeMethod__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM427) RogueCmdCallNativeMethod__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM379) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM380) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM379) Rogue_CmdCall__type,
  (void*) (ROGUEM428) RogueCmdCallNativeMethod__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM384) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM385) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM429) RogueCmdCallNativeMethod__init_object,
  0, // CmdCallAspectMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM430) RogueCmdCallAspectMethod__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM431) RogueCmdCallAspectMethod__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM379) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM380) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM379) Rogue_CmdCall__type,
  (void*) (ROGUEM432) RogueCmdCallAspectMethod__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM384) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM385) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM433) RogueCmdCallAspectMethod__init_object,
  0, // CmdCallDynamicMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM434) RogueCmdCallDynamicMethod__type_name,
  0,
  (void*) (ROGUEM435) RogueCmdCallMethod__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM436) RogueCmdCallDynamicMethod__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM379) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM380) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM379) Rogue_CmdCall__type,
  (void*) (ROGUEM437) RogueCmdCallDynamicMethod__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM438) RogueCmdCallDynamicMethod__trace_used_code,
  (void*) (ROGUEM385) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM439) RogueCmdCallDynamicMethod__init_object,
  0, // CmdCallMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM440) RogueCmdCallMethod__type_name,
  0,
  (void*) (ROGUEM435) RogueCmdCallMethod__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM58) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM379) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM380) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM379) Rogue_CmdCall__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM384) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM385) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM441) RogueCmdCallMethod__init_object,
  0, // CandidateMethods
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM442) RogueCandidateMethods__type_name,
  0, // CmdCreateFunction
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM443) RogueCmdCreateFunction__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM444) RogueCmdCreateFunction__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM445) RogueCmdCreateFunction__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM446) RogueCmdCreateFunction__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM447) Rogue_CmdCreateFunction__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM63) RogueCmd__trace_used_code,
  (void*) (ROGUEM60) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM448) RogueCmdCreateFunction__init_object,
  0, // FnParam[]
  (void*) (ROGUEM449) RogueFnParamList__to_String,
  (void*) (ROGUEM449) RogueFnParamList__type_name,
  (void*) (ROGUEM450) RogueFnParamList__init_object,
  0, // FnParam
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM451) RogueFnParam__type_name,
  0, // TableEntry<<String,Method>>[]
  (void*) (ROGUEM452) RogueString_MethodTableEntryList__to_String,
  (void*) (ROGUEM452) RogueString_MethodTableEntryList__type_name,
  (void*) (ROGUEM453) RogueString_MethodTableEntryList__init_object,
  0, // TableEntry<<String,Method>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM454) RogueString_MethodTableEntry__type_name,
  0, // TableEntry<<String,Logical>>[]
  (void*) (ROGUEM455) RogueString_LogicalTableEntryList__to_String,
  (void*) (ROGUEM455) RogueString_LogicalTableEntryList__type_name,
  (void*) (ROGUEM456) RogueString_LogicalTableEntryList__init_object,
  0, // TableEntry<<String,Logical>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM457) RogueString_LogicalTableEntry__type_name,
  0, // TokenReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM458) RogueTokenReader__type_name,
  0, // Table<<String,String>>
  (void*) (ROGUEM459) RogueString_StringTable__to_String,
  (void*) (ROGUEM459) RogueString_StringTable__type_name,
  0, // Tokenizer
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM460) RogueTokenizer__type_name,
  0, // ParseReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM461) RogueParseReader__type_name,
  (void*) (ROGUEM462) RogueParseReader__has_another,
  (void*) (ROGUEM463) RogueParseReader__peek,
  (void*) (ROGUEM463) RogueParseReader__read,
  0, // Preprocessor
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM464) RoguePreprocessor__type_name,
  0, // EOLToken
  (void*) (ROGUEM465) RogueEOLToken__to_String,
  (void*) (ROGUEM465) RogueEOLToken__type_name,
  0,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM43) RogueToken__quoted_name,
  0,
  0,
  (void*) (ROGUEM44) RogueToken__to_Character,
  (void*) (ROGUEM45) RogueToken__to_Int32,
  (void*) (ROGUEM46) RogueToken__to_Int64,
  (void*) (ROGUEM47) RogueToken__to_Real64,
  (void*) (ROGUEM48) RogueToken__to_Type,
  0,
  (void*) (ROGUEM466) RogueEOLToken__init_object,
  0, // CmdAdd
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM467) RogueCmdAdd__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM468) RogueCmdAdd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM469) RogueCmdAdd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM245) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM260) Rogue_CmdBinary__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM470) RogueCmdAdd__init_object,
  0,
  (void*) (ROGUEM467) RogueCmdAdd__fn_name,
  (void*) (ROGUEM262) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM254) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM471) RogueCmdAdd__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM467) RogueCmdAdd__symbol,
  (void*) (ROGUEM251) RogueCmdBinary__cpp_symbol,
  0, // CmdNativeHeader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM472) RogueCmdNativeHeader__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM473) RogueCmdNativeHeader__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM474) RogueCmdNativeHeader__requires_semicolon,
  (void*) (ROGUEM475) RogueCmdNativeHeader__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM476) RogueCmdNativeHeader__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM477) RogueCmdNativeHeader__trace_used_code,
  (void*) (ROGUEM478) RogueCmdNativeHeader__update_this_type__Scope,
  (void*) (ROGUEM479) RogueCmdNativeHeader__init_object,
  0, // CmdNativeCode
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM480) RogueCmdNativeCode__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM481) RogueCmdNativeCode__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM482) RogueCmdNativeCode__requires_semicolon,
  (void*) (ROGUEM483) RogueCmdNativeCode__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM484) RogueCmdNativeCode__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM485) RogueCmdNativeCode__trace_used_code,
  (void*) (ROGUEM486) RogueCmdNativeCode__update_this_type__Scope,
  (void*) (ROGUEM487) RogueCmdNativeCode__init_object,
  0, // CmdIf
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM488) RogueCmdIf__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM489) RogueCmdIf__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM205) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM490) RogueCmdIf__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM491) RogueCmdIf__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM492) RogueCmdIf__trace_used_code,
  (void*) (ROGUEM493) RogueCmdIf__update_this_type__Scope,
  (void*) (ROGUEM494) RogueCmdIf__init_object,
  0,
  (void*) (ROGUEM207) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  0, // CmdWhich
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM495) RogueCmdWhich__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM496) RogueCmdWhich__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM205) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM497) RogueCmdWhich__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM79) RogueCmdStatement__trace_used_code,
  (void*) (ROGUEM498) RogueCmdWhich__update_this_type__Scope,
  (void*) (ROGUEM499) RogueCmdWhich__init_object,
  0,
  (void*) (ROGUEM207) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  0, // CmdContingent
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM500) RogueCmdContingent__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM501) RogueCmdContingent__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM205) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM502) RogueCmdContingent__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM503) RogueCmdContingent__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM504) RogueCmdContingent__trace_used_code,
  (void*) (ROGUEM505) RogueCmdContingent__update_this_type__Scope,
  (void*) (ROGUEM506) RogueCmdContingent__init_object,
  0,
  (void*) (ROGUEM507) RogueCmdContingent__set_control_logic__CmdControlStructure,
  0, // CmdTry
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM508) RogueCmdTry__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM509) RogueCmdTry__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM205) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM510) RogueCmdTry__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM511) RogueCmdTry__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM512) RogueCmdTry__trace_used_code,
  (void*) (ROGUEM513) RogueCmdTry__update_this_type__Scope,
  (void*) (ROGUEM514) RogueCmdTry__init_object,
  0,
  (void*) (ROGUEM207) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  0, // CmdAwait
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM515) RogueCmdAwait__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM516) RogueCmdAwait__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM517) RogueCmdAwait__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM63) RogueCmd__trace_used_code,
  (void*) (ROGUEM60) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM518) RogueCmdAwait__init_object,
  0, // CmdYield
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM519) RogueCmdYield__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM520) RogueCmdYield__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM521) RogueCmdYield__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM63) RogueCmd__trace_used_code,
  (void*) (ROGUEM60) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM522) RogueCmdYield__init_object,
  0, // CmdThrow
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM523) RogueCmdThrow__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM524) RogueCmdThrow__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM525) RogueCmdThrow__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM526) RogueCmdThrow__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM527) RogueCmdThrow__trace_used_code,
  (void*) (ROGUEM528) RogueCmdThrow__update_this_type__Scope,
  (void*) (ROGUEM529) RogueCmdThrow__init_object,
  0, // CmdFormattedString
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM530) RogueCmdFormattedString__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM531) RogueCmdFormattedString__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM532) RogueCmdFormattedString__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM533) RogueCmdFormattedString__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM534) Rogue_CmdFormattedString__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM63) RogueCmd__trace_used_code,
  (void*) (ROGUEM535) RogueCmdFormattedString__update_this_type__Scope,
  (void*) (ROGUEM536) RogueCmdFormattedString__init_object,
  0, // CmdTrace
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM537) RogueCmdTrace__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM538) RogueCmdTrace__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM539) RogueCmdTrace__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM540) RogueCmdTrace__trace_used_code,
  (void*) (ROGUEM541) RogueCmdTrace__update_this_type__Scope,
  (void*) (ROGUEM542) RogueCmdTrace__init_object,
  0, // CmdEscape
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM543) RogueCmdEscape__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM544) RogueCmdEscape__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM545) RogueCmdEscape__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM546) RogueCmdEscape__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM547) RogueCmdEscape__trace_used_code,
  (void*) (ROGUEM548) RogueCmdEscape__update_this_type__Scope,
  (void*) (ROGUEM549) RogueCmdEscape__init_object,
  0, // CmdNextIteration
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM550) RogueCmdNextIteration__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM551) RogueCmdNextIteration__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM552) RogueCmdNextIteration__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM553) RogueCmdNextIteration__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM554) RogueCmdNextIteration__trace_used_code,
  (void*) (ROGUEM555) RogueCmdNextIteration__update_this_type__Scope,
  (void*) (ROGUEM556) RogueCmdNextIteration__init_object,
  0, // CmdNecessary
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM557) RogueCmdNecessary__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM558) RogueCmdNecessary__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM559) RogueCmdNecessary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM560) RogueCmdNecessary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM561) RogueCmdNecessary__trace_used_code,
  (void*) (ROGUEM562) RogueCmdNecessary__update_this_type__Scope,
  (void*) (ROGUEM563) RogueCmdNecessary__init_object,
  0, // CmdSufficient
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM564) RogueCmdSufficient__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM565) RogueCmdSufficient__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM566) RogueCmdSufficient__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM567) RogueCmdSufficient__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM568) RogueCmdSufficient__trace_used_code,
  (void*) (ROGUEM569) RogueCmdSufficient__update_this_type__Scope,
  (void*) (ROGUEM570) RogueCmdSufficient__init_object,
  0, // CmdAdjust
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM571) RogueCmdAdjust__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM58) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM572) RogueCmdAdjust__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM63) RogueCmd__trace_used_code,
  (void*) (ROGUEM60) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM573) RogueCmdAdjust__init_object,
  0, // CmdOpWithAssign
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM574) RogueCmdOpWithAssign__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM575) RogueCmdOpWithAssign__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM576) RogueCmdOpWithAssign__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM63) RogueCmd__trace_used_code,
  (void*) (ROGUEM60) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM577) RogueCmdOpWithAssign__init_object,
  0, // CmdWhichCase[]
  (void*) (ROGUEM578) RogueCmdWhichCaseList__to_String,
  (void*) (ROGUEM578) RogueCmdWhichCaseList__type_name,
  (void*) (ROGUEM579) RogueCmdWhichCaseList__init_object,
  0, // CmdWhichCase
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM580) RogueCmdWhichCase__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM581) RogueCmdWhichCase__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM56) RogueCmd__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM582) RogueCmdWhichCase__trace_used_code,
  (void*) (ROGUEM583) RogueCmdWhichCase__update_this_type__Scope,
  (void*) (ROGUEM584) RogueCmdWhichCase__init_object,
  0, // CmdCatch[]
  (void*) (ROGUEM585) RogueCmdCatchList__to_String,
  (void*) (ROGUEM585) RogueCmdCatchList__type_name,
  (void*) (ROGUEM586) RogueCmdCatchList__init_object,
  0, // CmdCatch
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM587) RogueCmdCatch__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM588) RogueCmdCatch__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM589) RogueCmdCatch__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM590) RogueCmdCatch__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM591) RogueCmdCatch__trace_used_code,
  (void*) (ROGUEM592) RogueCmdCatch__update_this_type__Scope,
  (void*) (ROGUEM593) RogueCmdCatch__init_object,
  0, // CmdLocalDeclaration
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM594) RogueCmdLocalDeclaration__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM595) RogueCmdLocalDeclaration__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM596) RogueCmdLocalDeclaration__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM597) RogueCmdLocalDeclaration__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM598) RogueCmdLocalDeclaration__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM599) RogueCmdLocalDeclaration__trace_used_code,
  (void*) (ROGUEM596) RogueCmdLocalDeclaration__update_this_type__Scope,
  (void*) (ROGUEM600) RogueCmdLocalDeclaration__init_object,
  0, // CmdAdjustLocal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM601) RogueCmdAdjustLocal__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM602) RogueCmdAdjustLocal__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM603) RogueCmdAdjustLocal__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM604) Rogue_CmdAdjustLocal__type,
  (void*) (ROGUEM605) RogueCmdAdjustLocal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM606) RogueCmdAdjustLocal__trace_used_code,
  (void*) (ROGUEM607) RogueCmdAdjustLocal__update_this_type__Scope,
  (void*) (ROGUEM608) RogueCmdAdjustLocal__init_object,
  0, // CmdReadLocal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM609) RogueCmdReadLocal__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM610) RogueCmdReadLocal__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM611) RogueCmdReadLocal__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM612) RogueCmdReadLocal__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM613) Rogue_CmdReadLocal__type,
  (void*) (ROGUEM614) RogueCmdReadLocal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM615) RogueCmdReadLocal__trace_used_code,
  (void*) (ROGUEM616) RogueCmdReadLocal__update_this_type__Scope,
  (void*) (ROGUEM617) RogueCmdReadLocal__init_object,
  0, // CmdCompareLE
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM618) RogueCmdCompareLE__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM619) RogueCmdCompareLE__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM620) RogueCmdCompareLE__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM245) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM246) Rogue_CmdComparison__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM621) RogueCmdCompareLE__init_object,
  0,
  (void*) (ROGUEM251) RogueCmdBinary__fn_name,
  (void*) (ROGUEM252) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM253) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM254) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM618) RogueCmdCompareLE__symbol,
  (void*) (ROGUEM251) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM622) RogueCmdCompareLE__resolve_for_reference__Scope_Type_Type_Logical,
  0, // CmdRange
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM623) RogueCmdRange__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM58) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM624) RogueCmdRange__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM625) RogueCmdRange__trace_used_code,
  (void*) (ROGUEM626) RogueCmdRange__update_this_type__Scope,
  (void*) (ROGUEM627) RogueCmdRange__init_object,
  0,
  (void*) (ROGUEM628) RogueCmdRange__default_step_size,
  0, // CmdLocalOpWithAssign
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM629) RogueCmdLocalOpWithAssign__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM630) RogueCmdLocalOpWithAssign__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM631) RogueCmdLocalOpWithAssign__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM632) Rogue_CmdLocalOpWithAssign__type,
  (void*) (ROGUEM633) RogueCmdLocalOpWithAssign__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM634) RogueCmdLocalOpWithAssign__trace_used_code,
  (void*) (ROGUEM635) RogueCmdLocalOpWithAssign__update_this_type__Scope,
  (void*) (ROGUEM636) RogueCmdLocalOpWithAssign__init_object,
  0, // CmdResolvedOpWithAssign
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM637) RogueCmdResolvedOpWithAssign__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM58) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM56) RogueCmd__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM63) RogueCmd__trace_used_code,
  (void*) (ROGUEM60) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM638) RogueCmdResolvedOpWithAssign__init_object,
  0, // CmdRangeUpTo
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM639) RogueCmdRangeUpTo__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM640) RogueCmdRangeUpTo__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM624) RogueCmdRange__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM625) RogueCmdRange__trace_used_code,
  (void*) (ROGUEM626) RogueCmdRange__update_this_type__Scope,
  (void*) (ROGUEM641) RogueCmdRangeUpTo__init_object,
  0,
  (void*) (ROGUEM628) RogueCmdRange__default_step_size,
  0, // CmdCompareGE
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM642) RogueCmdCompareGE__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM643) RogueCmdCompareGE__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM644) RogueCmdCompareGE__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM245) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM246) Rogue_CmdComparison__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM645) RogueCmdCompareGE__init_object,
  0,
  (void*) (ROGUEM251) RogueCmdBinary__fn_name,
  (void*) (ROGUEM252) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM253) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM254) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM642) RogueCmdCompareGE__symbol,
  (void*) (ROGUEM251) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM646) RogueCmdCompareGE__resolve_for_reference__Scope_Type_Type_Logical,
  0, // CmdForEach
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM647) RogueCmdForEach__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM648) RogueCmdForEach__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM205) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM649) RogueCmdForEach__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM650) RogueCmdForEach__trace_used_code,
  (void*) (ROGUEM651) RogueCmdForEach__update_this_type__Scope,
  (void*) (ROGUEM652) RogueCmdForEach__init_object,
  0,
  (void*) (ROGUEM207) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  0, // CmdRangeDownTo
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM653) RogueCmdRangeDownTo__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM654) RogueCmdRangeDownTo__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM624) RogueCmdRange__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM625) RogueCmdRange__trace_used_code,
  (void*) (ROGUEM626) RogueCmdRange__update_this_type__Scope,
  (void*) (ROGUEM655) RogueCmdRangeDownTo__init_object,
  0,
  (void*) (ROGUEM656) RogueCmdRangeDownTo__default_step_size,
  0, // CmdLogicalXor
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM657) RogueCmdLogicalXor__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM658) RogueCmdLogicalXor__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM659) RogueCmdBinaryLogical__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM660) Rogue_CmdBinaryLogical__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM661) RogueCmdLogicalXor__init_object,
  0,
  (void*) (ROGUEM251) RogueCmdBinary__fn_name,
  (void*) (ROGUEM262) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM254) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM662) RogueCmdBinaryLogical__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM657) RogueCmdLogicalXor__symbol,
  (void*) (ROGUEM657) RogueCmdLogicalXor__cpp_symbol,
  (void*) (ROGUEM663) RogueCmdLogicalXor__combine_literal_operands__Logical_Logical,
  0, // CmdBinaryLogical
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM664) RogueCmdBinaryLogical__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM58) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM659) RogueCmdBinaryLogical__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM660) Rogue_CmdBinaryLogical__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM665) RogueCmdBinaryLogical__init_object,
  0,
  (void*) (ROGUEM251) RogueCmdBinary__fn_name,
  (void*) (ROGUEM262) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM254) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM662) RogueCmdBinaryLogical__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM251) RogueCmdBinary__symbol,
  (void*) (ROGUEM251) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM666) RogueCmdBinaryLogical__combine_literal_operands__Logical_Logical,
  0, // CmdLogicalOr
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM667) RogueCmdLogicalOr__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM668) RogueCmdLogicalOr__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM659) RogueCmdBinaryLogical__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM660) Rogue_CmdBinaryLogical__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM669) RogueCmdLogicalOr__init_object,
  0,
  (void*) (ROGUEM251) RogueCmdBinary__fn_name,
  (void*) (ROGUEM262) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM254) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM662) RogueCmdBinaryLogical__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM667) RogueCmdLogicalOr__symbol,
  (void*) (ROGUEM667) RogueCmdLogicalOr__cpp_symbol,
  (void*) (ROGUEM670) RogueCmdLogicalOr__combine_literal_operands__Logical_Logical,
  0, // CmdLogicalAnd
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM671) RogueCmdLogicalAnd__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM672) RogueCmdLogicalAnd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM659) RogueCmdBinaryLogical__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM660) Rogue_CmdBinaryLogical__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM673) RogueCmdLogicalAnd__init_object,
  0,
  (void*) (ROGUEM251) RogueCmdBinary__fn_name,
  (void*) (ROGUEM262) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM254) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM662) RogueCmdBinaryLogical__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM671) RogueCmdLogicalAnd__symbol,
  (void*) (ROGUEM671) RogueCmdLogicalAnd__cpp_symbol,
  (void*) (ROGUEM674) RogueCmdLogicalAnd__combine_literal_operands__Logical_Logical,
  0, // CmdCompareEQ
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM675) RogueCmdCompareEQ__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM676) RogueCmdCompareEQ__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM677) RogueCmdCompareEQ__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM245) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM246) Rogue_CmdComparison__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM678) RogueCmdCompareEQ__init_object,
  0,
  (void*) (ROGUEM251) RogueCmdBinary__fn_name,
  (void*) (ROGUEM679) RogueCmdCompareEQ__requires_parens,
  (void*) (ROGUEM253) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM254) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM675) RogueCmdCompareEQ__symbol,
  (void*) (ROGUEM251) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM680) RogueCmdCompareEQ__resolve_for_reference__Scope_Type_Type_Logical,
  0, // CmdCompareIs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM681) RogueCmdCompareIs__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM682) RogueCmdCompareIs__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM245) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM246) Rogue_CmdComparison__type,
  (void*) (ROGUEM683) RogueCmdCompareIs__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM684) RogueCmdCompareIs__init_object,
  0,
  (void*) (ROGUEM251) RogueCmdBinary__fn_name,
  (void*) (ROGUEM252) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM685) RogueCmdCompareIs__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM254) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM681) RogueCmdCompareIs__symbol,
  (void*) (ROGUEM681) RogueCmdCompareIs__cpp_symbol,
  (void*) (ROGUEM259) RogueCmdComparison__resolve_for_reference__Scope_Type_Type_Logical,
  0, // CmdCompareIsNot
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM686) RogueCmdCompareIsNot__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM687) RogueCmdCompareIsNot__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM245) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM246) Rogue_CmdComparison__type,
  (void*) (ROGUEM688) RogueCmdCompareIsNot__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM689) RogueCmdCompareIsNot__init_object,
  0,
  (void*) (ROGUEM251) RogueCmdBinary__fn_name,
  (void*) (ROGUEM252) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM690) RogueCmdCompareIsNot__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM254) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM686) RogueCmdCompareIsNot__symbol,
  (void*) (ROGUEM686) RogueCmdCompareIsNot__cpp_symbol,
  (void*) (ROGUEM259) RogueCmdComparison__resolve_for_reference__Scope_Type_Type_Logical,
  0, // CmdCompareLT
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM691) RogueCmdCompareLT__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM692) RogueCmdCompareLT__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM693) RogueCmdCompareLT__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM245) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM246) Rogue_CmdComparison__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM694) RogueCmdCompareLT__init_object,
  0,
  (void*) (ROGUEM251) RogueCmdBinary__fn_name,
  (void*) (ROGUEM252) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM253) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM254) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM691) RogueCmdCompareLT__symbol,
  (void*) (ROGUEM251) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM695) RogueCmdCompareLT__resolve_for_reference__Scope_Type_Type_Logical,
  0, // CmdCompareGT
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM696) RogueCmdCompareGT__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM697) RogueCmdCompareGT__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM698) RogueCmdCompareGT__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM245) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM246) Rogue_CmdComparison__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM699) RogueCmdCompareGT__init_object,
  0,
  (void*) (ROGUEM251) RogueCmdBinary__fn_name,
  (void*) (ROGUEM252) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM253) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM254) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM696) RogueCmdCompareGT__symbol,
  (void*) (ROGUEM251) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM700) RogueCmdCompareGT__resolve_for_reference__Scope_Type_Type_Logical,
  0, // CmdInstanceOf
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM701) RogueCmdInstanceOf__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM702) RogueCmdInstanceOf__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM703) RogueCmdInstanceOf__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM704) Rogue_CmdInstanceOf__type,
  (void*) (ROGUEM705) RogueCmdInstanceOf__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM343) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM344) RogueCmdTypeOperator__update_this_type__Scope,
  (void*) (ROGUEM706) RogueCmdInstanceOf__init_object,
  0, // CmdLogicalNot
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM707) RogueCmdLogicalNot__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM708) RogueCmdLogicalNot__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM709) RogueCmdLogicalNot__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM710) Rogue_CmdLogicalNot__type,
  (void*) (ROGUEM352) RogueCmdUnary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM353) RogueCmdUnary__trace_used_code,
  (void*) (ROGUEM354) RogueCmdUnary__update_this_type__Scope,
  (void*) (ROGUEM711) RogueCmdLogicalNot__init_object,
  0,
  (void*) (ROGUEM707) RogueCmdLogicalNot__prefix_symbol,
  (void*) (ROGUEM356) RogueCmdUnary__fn_name,
  (void*) (ROGUEM709) RogueCmdLogicalNot__resolve_for_literal_operand__Scope,
  0,
  (void*) (ROGUEM356) RogueCmdUnary__suffix_symbol,
  (void*) (ROGUEM707) RogueCmdLogicalNot__cpp_prefix_symbol,
  (void*) (ROGUEM356) RogueCmdUnary__cpp_suffix_symbol,
  0, // CmdBitwiseXor
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM712) RogueCmdBitwiseXor__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM713) RogueCmdBitwiseXor__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM714) RogueCmdBitwiseXor__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM245) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM260) Rogue_CmdBinary__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM715) RogueCmdBitwiseXor__init_object,
  0,
  (void*) (ROGUEM251) RogueCmdBinary__fn_name,
  (void*) (ROGUEM262) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM716) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM717) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM712) RogueCmdBitwiseXor__symbol,
  (void*) (ROGUEM712) RogueCmdBitwiseXor__cpp_symbol,
  0, // CmdBitwiseOp
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM718) RogueCmdBitwiseOp__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM58) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM245) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM260) Rogue_CmdBinary__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM719) RogueCmdBitwiseOp__init_object,
  0,
  (void*) (ROGUEM251) RogueCmdBinary__fn_name,
  (void*) (ROGUEM262) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM716) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM717) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM251) RogueCmdBinary__symbol,
  (void*) (ROGUEM251) RogueCmdBinary__cpp_symbol,
  0, // CmdBitwiseOr
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM720) RogueCmdBitwiseOr__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM721) RogueCmdBitwiseOr__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM722) RogueCmdBitwiseOr__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM245) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM260) Rogue_CmdBinary__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM723) RogueCmdBitwiseOr__init_object,
  0,
  (void*) (ROGUEM251) RogueCmdBinary__fn_name,
  (void*) (ROGUEM262) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM716) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM717) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM720) RogueCmdBitwiseOr__symbol,
  (void*) (ROGUEM251) RogueCmdBinary__cpp_symbol,
  0, // CmdBitwiseAnd
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM724) RogueCmdBitwiseAnd__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM725) RogueCmdBitwiseAnd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM726) RogueCmdBitwiseAnd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM245) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM260) Rogue_CmdBinary__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM727) RogueCmdBitwiseAnd__init_object,
  0,
  (void*) (ROGUEM251) RogueCmdBinary__fn_name,
  (void*) (ROGUEM262) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM716) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM717) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM724) RogueCmdBitwiseAnd__symbol,
  (void*) (ROGUEM251) RogueCmdBinary__cpp_symbol,
  0, // CmdBitwiseShiftLeft
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM728) RogueCmdBitwiseShiftLeft__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM729) RogueCmdBitwiseShiftLeft__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM730) RogueCmdBitwiseShiftLeft__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM245) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM260) Rogue_CmdBinary__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM731) RogueCmdBitwiseShiftLeft__init_object,
  0,
  (void*) (ROGUEM251) RogueCmdBinary__fn_name,
  (void*) (ROGUEM262) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM716) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM717) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM728) RogueCmdBitwiseShiftLeft__symbol,
  (void*) (ROGUEM728) RogueCmdBitwiseShiftLeft__cpp_symbol,
  0, // CmdBitwiseShiftRight
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM732) RogueCmdBitwiseShiftRight__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM733) RogueCmdBitwiseShiftRight__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM734) RogueCmdBitwiseShiftRight__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM735) RogueCmdBitwiseShiftRight__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM260) Rogue_CmdBinary__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM736) RogueCmdBitwiseShiftRight__init_object,
  0,
  (void*) (ROGUEM251) RogueCmdBinary__fn_name,
  (void*) (ROGUEM262) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM716) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM717) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM732) RogueCmdBitwiseShiftRight__symbol,
  (void*) (ROGUEM251) RogueCmdBinary__cpp_symbol,
  0, // CmdBitwiseShiftRightX
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM737) RogueCmdBitwiseShiftRightX__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM738) RogueCmdBitwiseShiftRightX__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM739) RogueCmdBitwiseShiftRightX__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM245) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM260) Rogue_CmdBinary__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM740) RogueCmdBitwiseShiftRightX__init_object,
  0,
  (void*) (ROGUEM251) RogueCmdBinary__fn_name,
  (void*) (ROGUEM262) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM716) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM717) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM737) RogueCmdBitwiseShiftRightX__symbol,
  (void*) (ROGUEM737) RogueCmdBitwiseShiftRightX__cpp_symbol,
  0, // CmdSubtract
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM741) RogueCmdSubtract__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM742) RogueCmdSubtract__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM743) RogueCmdSubtract__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM245) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM260) Rogue_CmdBinary__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM744) RogueCmdSubtract__init_object,
  0,
  (void*) (ROGUEM741) RogueCmdSubtract__fn_name,
  (void*) (ROGUEM262) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM254) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM741) RogueCmdSubtract__symbol,
  (void*) (ROGUEM251) RogueCmdBinary__cpp_symbol,
  0, // CmdMultiply
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM745) RogueCmdMultiply__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM746) RogueCmdMultiply__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM747) RogueCmdMultiply__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM245) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM260) Rogue_CmdBinary__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM748) RogueCmdMultiply__init_object,
  0,
  (void*) (ROGUEM745) RogueCmdMultiply__fn_name,
  (void*) (ROGUEM262) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM254) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM745) RogueCmdMultiply__symbol,
  (void*) (ROGUEM251) RogueCmdBinary__cpp_symbol,
  0, // CmdDivide
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM749) RogueCmdDivide__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM750) RogueCmdDivide__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM751) RogueCmdDivide__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM245) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM260) Rogue_CmdBinary__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM752) RogueCmdDivide__init_object,
  0,
  (void*) (ROGUEM749) RogueCmdDivide__fn_name,
  (void*) (ROGUEM262) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM254) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM749) RogueCmdDivide__symbol,
  (void*) (ROGUEM251) RogueCmdBinary__cpp_symbol,
  0, // CmdMod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM753) RogueCmdMod__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM754) RogueCmdMod__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM755) RogueCmdMod__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM756) RogueCmdMod__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM260) Rogue_CmdBinary__type,
  (void*) (ROGUEM247) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM757) RogueCmdMod__init_object,
  0,
  (void*) (ROGUEM753) RogueCmdMod__fn_name,
  (void*) (ROGUEM262) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM254) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM753) RogueCmdMod__symbol,
  (void*) (ROGUEM251) RogueCmdBinary__cpp_symbol,
  0, // CmdPower
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM758) RogueCmdPower__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM759) RogueCmdPower__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM760) RogueCmdPower__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM245) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM260) Rogue_CmdBinary__type,
  (void*) (ROGUEM761) RogueCmdPower__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM249) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM762) RogueCmdPower__init_object,
  0,
  (void*) (ROGUEM758) RogueCmdPower__fn_name,
  (void*) (ROGUEM262) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM254) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM255) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM758) RogueCmdPower__symbol,
  (void*) (ROGUEM251) RogueCmdBinary__cpp_symbol,
  0, // CmdNegate
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM763) RogueCmdNegate__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM764) RogueCmdNegate__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM765) RogueCmdNegate__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM357) RogueCmdUnary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM358) Rogue_CmdUnary__type,
  (void*) (ROGUEM352) RogueCmdUnary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM353) RogueCmdUnary__trace_used_code,
  (void*) (ROGUEM354) RogueCmdUnary__update_this_type__Scope,
  (void*) (ROGUEM766) RogueCmdNegate__init_object,
  0,
  (void*) (ROGUEM763) RogueCmdNegate__prefix_symbol,
  (void*) (ROGUEM763) RogueCmdNegate__fn_name,
  (void*) (ROGUEM767) RogueCmdNegate__resolve_for_literal_operand__Scope,
  0,
  (void*) (ROGUEM763) RogueCmdNegate__suffix_symbol,
  (void*) (ROGUEM356) RogueCmdUnary__cpp_prefix_symbol,
  (void*) (ROGUEM356) RogueCmdUnary__cpp_suffix_symbol,
  0, // CmdBitwiseNot
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM768) RogueCmdBitwiseNot__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM769) RogueCmdBitwiseNot__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM357) RogueCmdUnary__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM770) Rogue_CmdBitwiseNot__type,
  (void*) (ROGUEM352) RogueCmdUnary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM353) RogueCmdUnary__trace_used_code,
  (void*) (ROGUEM354) RogueCmdUnary__update_this_type__Scope,
  (void*) (ROGUEM771) RogueCmdBitwiseNot__init_object,
  0,
  (void*) (ROGUEM768) RogueCmdBitwiseNot__prefix_symbol,
  (void*) (ROGUEM768) RogueCmdBitwiseNot__fn_name,
  (void*) (ROGUEM772) RogueCmdBitwiseNot__resolve_for_literal_operand__Scope,
  0,
  (void*) (ROGUEM356) RogueCmdUnary__suffix_symbol,
  (void*) (ROGUEM768) RogueCmdBitwiseNot__cpp_prefix_symbol,
  (void*) (ROGUEM356) RogueCmdUnary__cpp_suffix_symbol,
  0, // CmdGetOptionalValue
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM773) RogueCmdGetOptionalValue__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM774) RogueCmdGetOptionalValue__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM775) RogueCmdGetOptionalValue__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM776) Rogue_CmdGetOptionalValue__type,
  (void*) (ROGUEM777) RogueCmdGetOptionalValue__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM778) RogueCmdGetOptionalValue__trace_used_code,
  (void*) (ROGUEM779) RogueCmdGetOptionalValue__update_this_type__Scope,
  (void*) (ROGUEM780) RogueCmdGetOptionalValue__init_object,
  0, // CmdElementAccess
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM781) RogueCmdElementAccess__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM782) RogueCmdElementAccess__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM783) RogueCmdElementAccess__resolve__Scope,
  (void*) (ROGUEM784) RogueCmdElementAccess__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM785) RogueCmdElementAccess__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM63) RogueCmd__trace_used_code,
  (void*) (ROGUEM786) RogueCmdElementAccess__update_this_type__Scope,
  (void*) (ROGUEM787) RogueCmdElementAccess__init_object,
  0, // CmdListConvert
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM788) RogueCmdListConvert__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM789) RogueCmdListConvert__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM790) RogueCmdListConvert__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM791) RogueCmdListConvert__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM792) Rogue_CmdListConvert__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM63) RogueCmd__trace_used_code,
  (void*) (ROGUEM60) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM793) RogueCmdListConvert__init_object,
  0, // CmdConvertToType
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM794) RogueCmdConvertToType__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM795) RogueCmdConvertToType__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM796) RogueCmdConvertToType__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM341) Rogue_CmdTypeOperator__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM343) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM344) RogueCmdTypeOperator__update_this_type__Scope,
  (void*) (ROGUEM797) RogueCmdConvertToType__init_object,
  0, // CmdCreateCallback
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM798) RogueCmdCreateCallback__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM799) RogueCmdCreateCallback__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM800) RogueCmdCreateCallback__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM63) RogueCmd__trace_used_code,
  (void*) (ROGUEM60) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM801) RogueCmdCreateCallback__init_object,
  0, // CmdAs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM802) RogueCmdAs__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM803) RogueCmdAs__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM804) RogueCmdAs__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM341) Rogue_CmdTypeOperator__type,
  (void*) (ROGUEM805) RogueCmdAs__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM343) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM344) RogueCmdTypeOperator__update_this_type__Scope,
  (void*) (ROGUEM806) RogueCmdAs__init_object,
  0, // CmdDefaultValue
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM807) RogueCmdDefaultValue__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM808) RogueCmdDefaultValue__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM232) RogueCmdLiteral__implicit_type__Scope,
  (void*) (ROGUEM233) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM809) RogueCmdDefaultValue__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM810) Rogue_CmdDefaultValue__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM237) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM238) RogueCmdLiteral__update_this_type__Scope,
  (void*) (ROGUEM811) RogueCmdDefaultValue__init_object,
  0, // CmdLiteralReal64
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM812) RogueCmdLiteralReal64__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM813) RogueCmdLiteralReal64__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM232) RogueCmdLiteral__implicit_type__Scope,
  (void*) (ROGUEM233) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM814) RogueCmdLiteralReal64__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM815) Rogue_CmdLiteralReal64__type,
  (void*) (ROGUEM816) RogueCmdLiteralReal64__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM237) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM238) RogueCmdLiteral__update_this_type__Scope,
  (void*) (ROGUEM817) RogueCmdLiteralReal64__init_object,
  0, // CmdLiteralInt64
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM818) RogueCmdLiteralInt64__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM819) RogueCmdLiteralInt64__cast_to__Type_Scope,
  (void*) (ROGUEM820) RogueCmdLiteralInt64__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM232) RogueCmdLiteral__implicit_type__Scope,
  (void*) (ROGUEM233) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM821) RogueCmdLiteralInt64__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM822) Rogue_CmdLiteralInt64__type,
  (void*) (ROGUEM823) RogueCmdLiteralInt64__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM237) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM238) RogueCmdLiteral__update_this_type__Scope,
  (void*) (ROGUEM824) RogueCmdLiteralInt64__init_object,
  0, // CmdLiteralCharacter
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM825) RogueCmdLiteralCharacter__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM826) RogueCmdLiteralCharacter__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM232) RogueCmdLiteral__implicit_type__Scope,
  (void*) (ROGUEM233) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM827) RogueCmdLiteralCharacter__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM828) Rogue_CmdLiteralCharacter__type,
  (void*) (ROGUEM829) RogueCmdLiteralCharacter__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM237) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM238) RogueCmdLiteral__update_this_type__Scope,
  (void*) (ROGUEM830) RogueCmdLiteralCharacter__init_object,
  0, // CmdCreateList
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM831) RogueCmdCreateList__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM832) RogueCmdCreateList__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM833) RogueCmdCreateList__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM63) RogueCmd__trace_used_code,
  (void*) (ROGUEM60) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM834) RogueCmdCreateList__init_object,
  0, // CmdCallPriorMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM835) RogueCmdCallPriorMethod__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM836) RogueCmdCallPriorMethod__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM837) RogueCmdCallPriorMethod__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM63) RogueCmd__trace_used_code,
  (void*) (ROGUEM838) RogueCmdCallPriorMethod__update_this_type__Scope,
  (void*) (ROGUEM839) RogueCmdCallPriorMethod__init_object,
  0, // FnArg[]
  (void*) (ROGUEM840) RogueFnArgList__to_String,
  (void*) (ROGUEM840) RogueFnArgList__type_name,
  (void*) (ROGUEM841) RogueFnArgList__init_object,
  0, // FnArg
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM842) RogueFnArg__type_name,
  0, // CmdSelect
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM843) RogueCmdSelect__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM844) RogueCmdSelect__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM845) RogueCmdSelect__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM846) RogueCmdSelect__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM847) Rogue_CmdSelect__type,
  (void*) (ROGUEM848) RogueCmdSelect__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM849) RogueCmdSelect__trace_used_code,
  (void*) (ROGUEM850) RogueCmdSelect__update_this_type__Scope,
  (void*) (ROGUEM851) RogueCmdSelect__init_object,
  0, // CmdSelectCase[]
  (void*) (ROGUEM852) RogueCmdSelectCaseList__to_String,
  (void*) (ROGUEM852) RogueCmdSelectCaseList__type_name,
  (void*) (ROGUEM853) RogueCmdSelectCaseList__init_object,
  0, // CmdSelectCase
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM854) RogueCmdSelectCase__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM855) RogueCmdSelectCase__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM856) RogueCmdSelectCase__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM857) RogueCmdSelectCase__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM858) Rogue_CmdSelectCase__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM859) RogueCmdSelectCase__trace_used_code,
  (void*) (ROGUEM860) RogueCmdSelectCase__update_this_type__Scope,
  (void*) (ROGUEM861) RogueCmdSelectCase__init_object,
  0, // CmdTypedLiteralList
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM862) RogueCmdTypedLiteralList__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM863) RogueCmdTypedLiteralList__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM864) RogueCmdTypedLiteralList__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM865) RogueCmdTypedLiteralList__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM866) Rogue_CmdTypedLiteralList__type,
  (void*) (ROGUEM68) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM63) RogueCmd__trace_used_code,
  (void*) (ROGUEM60) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM867) RogueCmdTypedLiteralList__init_object,
  0, // TableEntry<<String,ParseReader>>[]
  (void*) (ROGUEM868) RogueString_ParseReaderTableEntryList__to_String,
  (void*) (ROGUEM868) RogueString_ParseReaderTableEntryList__type_name,
  (void*) (ROGUEM869) RogueString_ParseReaderTableEntryList__init_object,
  0, // TableEntry<<String,ParseReader>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM870) RogueString_ParseReaderTableEntry__type_name,
  0, // FileReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM871) RogueFileReader__type_name,
  (void*) (ROGUEM872) RogueFileReader__has_another,
  (void*) (ROGUEM873) RogueFileReader__peek,
  (void*) (ROGUEM873) RogueFileReader__read,
  0, // FileWriter
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM874) RogueFileWriter__type_name,
  (void*) (ROGUEM875) RogueFileWriter__close,
  (void*) (ROGUEM875) RogueFileWriter__flush,
  (void*) (ROGUEM876) RogueFileWriter__write__Character,
  0, // ListRebuilder<<Token>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM877) RogueTokenListRebuilder__type_name,
  0, // TableEntry<<String,TokenType>>[]
  (void*) (ROGUEM878) RogueString_TokenTypeTableEntryList__to_String,
  (void*) (ROGUEM878) RogueString_TokenTypeTableEntryList__type_name,
  (void*) (ROGUEM879) RogueString_TokenTypeTableEntryList__init_object,
  0, // TableEntry<<String,TokenType>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM880) RogueString_TokenTypeTableEntry__type_name,
  0, // TableEntry<<String,TypeSpecializer>>[]
  (void*) (ROGUEM881) RogueString_TypeSpecializerTableEntryList__to_String,
  (void*) (ROGUEM881) RogueString_TypeSpecializerTableEntryList__type_name,
  (void*) (ROGUEM882) RogueString_TypeSpecializerTableEntryList__init_object,
  0, // TableEntry<<String,TypeSpecializer>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM883) RogueString_TypeSpecializerTableEntry__type_name,
  0, // TableEntry<<String,CmdLabel>>[]
  (void*) (ROGUEM884) RogueString_CmdLabelTableEntryList__to_String,
  (void*) (ROGUEM884) RogueString_CmdLabelTableEntryList__type_name,
  (void*) (ROGUEM885) RogueString_CmdLabelTableEntryList__init_object,
  0, // TableEntry<<String,CmdLabel>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM886) RogueString_CmdLabelTableEntry__type_name,
  0, // CmdCreateArray
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM887) RogueCmdCreateArray__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM888) RogueCmdCreateArray__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM889) RogueCmdCreateArray__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM890) Rogue_CmdCreateArray__type,
  (void*) (ROGUEM891) RogueCmdCreateArray__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM892) RogueCmdCreateArray__trace_used_code,
  (void*) (ROGUEM893) RogueCmdCreateArray__update_this_type__Scope,
  (void*) (ROGUEM894) RogueCmdCreateArray__init_object,
  0, // CmdCreateObject
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM895) RogueCmdCreateObject__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM896) RogueCmdCreateObject__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM897) RogueCmdCreateObject__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM898) Rogue_CmdCreateObject__type,
  (void*) (ROGUEM899) RogueCmdCreateObject__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM900) RogueCmdCreateObject__trace_used_code,
  (void*) (ROGUEM901) RogueCmdCreateObject__update_this_type__Scope,
  (void*) (ROGUEM902) RogueCmdCreateObject__init_object,
  0, // CmdReadGlobal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM903) RogueCmdReadGlobal__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM904) RogueCmdReadGlobal__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM905) RogueCmdReadGlobal__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM906) RogueCmdReadGlobal__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM907) Rogue_CmdReadGlobal__type,
  (void*) (ROGUEM908) RogueCmdReadGlobal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM909) RogueCmdReadGlobal__trace_used_code,
  (void*) (ROGUEM910) RogueCmdReadGlobal__update_this_type__Scope,
  (void*) (ROGUEM911) RogueCmdReadGlobal__init_object,
  0, // CmdReadProperty
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM912) RogueCmdReadProperty__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM913) RogueCmdReadProperty__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM914) RogueCmdReadProperty__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM915) RogueCmdReadProperty__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM916) Rogue_CmdReadProperty__type,
  (void*) (ROGUEM917) RogueCmdReadProperty__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM918) RogueCmdReadProperty__trace_used_code,
  (void*) (ROGUEM919) RogueCmdReadProperty__update_this_type__Scope,
  (void*) (ROGUEM920) RogueCmdReadProperty__init_object,
  0, // CmdLogicalizeOptionalValue
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM921) RogueCmdLogicalizeOptionalValue__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM922) RogueCmdLogicalizeOptionalValue__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM923) RogueCmdLogicalizeOptionalValue__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM924) Rogue_CmdLogicalizeOptionalValue__type,
  (void*) (ROGUEM925) RogueCmdLogicalizeOptionalValue__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM926) RogueCmdLogicalizeOptionalValue__trace_used_code,
  (void*) (ROGUEM927) RogueCmdLogicalizeOptionalValue__update_this_type__Scope,
  (void*) (ROGUEM928) RogueCmdLogicalizeOptionalValue__init_object,
  0, // CmdWriteSingleton
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM929) RogueCmdWriteSingleton__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM930) RogueCmdWriteSingleton__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM931) RogueCmdWriteSingleton__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM932) RogueCmdWriteSingleton__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM933) RogueCmdWriteSingleton__trace_used_code,
  (void*) (ROGUEM934) RogueCmdWriteSingleton__update_this_type__Scope,
  (void*) (ROGUEM935) RogueCmdWriteSingleton__init_object,
  0, // CmdWriteLocal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM936) RogueCmdWriteLocal__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM937) RogueCmdWriteLocal__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM938) RogueCmdWriteLocal__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM939) RogueCmdWriteLocal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM940) RogueCmdWriteLocal__trace_used_code,
  (void*) (ROGUEM941) RogueCmdWriteLocal__update_this_type__Scope,
  (void*) (ROGUEM942) RogueCmdWriteLocal__init_object,
  0, // CmdOpAssignGlobal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM943) RogueCmdOpAssignGlobal__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM944) RogueCmdOpAssignGlobal__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM945) RogueCmdOpAssignGlobal__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM946) Rogue_CmdOpAssignGlobal__type,
  (void*) (ROGUEM947) RogueCmdOpAssignGlobal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM948) RogueCmdOpAssignGlobal__trace_used_code,
  (void*) (ROGUEM949) RogueCmdOpAssignGlobal__update_this_type__Scope,
  (void*) (ROGUEM950) RogueCmdOpAssignGlobal__init_object,
  0, // CmdOpAssignProperty
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM951) RogueCmdOpAssignProperty__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM952) RogueCmdOpAssignProperty__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM953) RogueCmdOpAssignProperty__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM954) Rogue_CmdOpAssignProperty__type,
  (void*) (ROGUEM955) RogueCmdOpAssignProperty__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM956) RogueCmdOpAssignProperty__trace_used_code,
  (void*) (ROGUEM957) RogueCmdOpAssignProperty__update_this_type__Scope,
  (void*) (ROGUEM958) RogueCmdOpAssignProperty__init_object,
  0, // CmdTaskControlSection[]
  (void*) (ROGUEM959) RogueCmdTaskControlSectionList__to_String,
  (void*) (ROGUEM959) RogueCmdTaskControlSectionList__type_name,
  (void*) (ROGUEM960) RogueCmdTaskControlSectionList__init_object,
  0, // CmdBlock
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM961) RogueCmdBlock__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM962) RogueCmdBlock__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM963) RogueCmdBlock__requires_semicolon,
  (void*) (ROGUEM964) RogueCmdBlock__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM965) RogueCmdBlock__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM966) RogueCmdBlock__trace_used_code,
  (void*) (ROGUEM967) RogueCmdBlock__update_this_type__Scope,
  (void*) (ROGUEM968) RogueCmdBlock__init_object,
  0,
  (void*) (ROGUEM207) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  0, // TableEntry<<String,Definition>>[]
  (void*) (ROGUEM969) RogueString_DefinitionTableEntryList__to_String,
  (void*) (ROGUEM969) RogueString_DefinitionTableEntryList__type_name,
  (void*) (ROGUEM970) RogueString_DefinitionTableEntryList__init_object,
  0, // TableEntry<<String,Definition>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM971) RogueString_DefinitionTableEntry__type_name,
  0, // TableEntry<<String,Property>>[]
  (void*) (ROGUEM972) RogueString_PropertyTableEntryList__to_String,
  (void*) (ROGUEM972) RogueString_PropertyTableEntryList__type_name,
  (void*) (ROGUEM973) RogueString_PropertyTableEntryList__init_object,
  0, // TableEntry<<String,Property>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM974) RogueString_PropertyTableEntry__type_name,
  0, // Table<<String,Cmd>>
  (void*) (ROGUEM975) RogueString_CmdTable__to_String,
  (void*) (ROGUEM975) RogueString_CmdTable__type_name,
  0, // CmdCallStaticMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM976) RogueCmdCallStaticMethod__type_name,
  0,
  (void*) (ROGUEM435) RogueCmdCallMethod__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM977) RogueCmdCallStaticMethod__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM379) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM978) RogueCmdCallStaticMethod__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM379) Rogue_CmdCall__type,
  (void*) (ROGUEM979) RogueCmdCallStaticMethod__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM384) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM385) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM980) RogueCmdCallStaticMethod__init_object,
  0, // TableEntry<<String,String>>[]
  (void*) (ROGUEM981) RogueString_StringTableEntryList__to_String,
  (void*) (ROGUEM981) RogueString_StringTableEntryList__type_name,
  (void*) (ROGUEM982) RogueString_StringTableEntryList__init_object,
  0, // TableEntry<<String,String>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM983) RogueString_StringTableEntry__type_name,
  0, // DirectiveTokenType
  (void*) (ROGUEM88) RogueTokenType__to_String,
  (void*) (ROGUEM984) RogueDirectiveTokenType__type_name,
  0,
  (void*) (ROGUEM985) RogueDirectiveTokenType__create_token__String_Int32_Int32,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM90) RogueTokenType__create_token__String_Int32_Int32_String,
  0,
  (void*) (ROGUEM91) RogueTokenType__create_token__Token_String,
  0,
  (void*) (ROGUEM986) RogueDirectiveTokenType__is_directive,
  (void*) (ROGUEM92) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM92) RogueTokenType__is_structure,
  0,
  0,
  (void*) (ROGUEM987) RogueDirectiveTokenType__init_object,
  0, // StructuralDirectiveTokenType
  (void*) (ROGUEM88) RogueTokenType__to_String,
  (void*) (ROGUEM988) RogueStructuralDirectiveTokenType__type_name,
  0,
  (void*) (ROGUEM989) RogueStructuralDirectiveTokenType__create_token__String_Int32_Int32,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM90) RogueTokenType__create_token__String_Int32_Int32_String,
  0,
  (void*) (ROGUEM91) RogueTokenType__create_token__Token_String,
  0,
  (void*) (ROGUEM990) RogueStructuralDirectiveTokenType__is_directive,
  (void*) (ROGUEM92) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM990) RogueStructuralDirectiveTokenType__is_structure,
  0,
  0,
  (void*) (ROGUEM991) RogueStructuralDirectiveTokenType__init_object,
  0, // EOLTokenType
  (void*) (ROGUEM88) RogueTokenType__to_String,
  (void*) (ROGUEM992) RogueEOLTokenType__type_name,
  0,
  (void*) (ROGUEM993) RogueEOLTokenType__create_token__String_Int32_Int32,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM994) RogueEOLTokenType__create_token__String_Int32_Int32_String,
  0,
  (void*) (ROGUEM91) RogueTokenType__create_token__Token_String,
  0,
  (void*) (ROGUEM92) RogueTokenType__is_directive,
  (void*) (ROGUEM92) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM995) RogueEOLTokenType__is_structure,
  0,
  0,
  (void*) (ROGUEM996) RogueEOLTokenType__init_object,
  0, // StructureTokenType
  (void*) (ROGUEM88) RogueTokenType__to_String,
  (void*) (ROGUEM997) RogueStructureTokenType__type_name,
  0,
  (void*) (ROGUEM998) RogueStructureTokenType__create_token__String_Int32_Int32,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM90) RogueTokenType__create_token__String_Int32_Int32_String,
  0,
  (void*) (ROGUEM91) RogueTokenType__create_token__Token_String,
  0,
  (void*) (ROGUEM92) RogueTokenType__is_directive,
  (void*) (ROGUEM92) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM999) RogueStructureTokenType__is_structure,
  0,
  0,
  (void*) (ROGUEM1000) RogueStructureTokenType__init_object,
  0, // NativeCodeTokenType
  (void*) (ROGUEM88) RogueTokenType__to_String,
  (void*) (ROGUEM1001) RogueNativeCodeTokenType__type_name,
  0,
  (void*) (ROGUEM89) RogueTokenType__create_token__String_Int32_Int32,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM1002) RogueNativeCodeTokenType__create_token__String_Int32_Int32_String,
  0,
  (void*) (ROGUEM1003) RogueNativeCodeTokenType__create_token__Token_String,
  0,
  (void*) (ROGUEM92) RogueTokenType__is_directive,
  (void*) (ROGUEM92) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM92) RogueTokenType__is_structure,
  0,
  0,
  (void*) (ROGUEM1004) RogueNativeCodeTokenType__init_object,
  0, // OpWithAssignTokenType
  (void*) (ROGUEM88) RogueTokenType__to_String,
  (void*) (ROGUEM1005) RogueOpWithAssignTokenType__type_name,
  0,
  (void*) (ROGUEM89) RogueTokenType__create_token__String_Int32_Int32,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM90) RogueTokenType__create_token__String_Int32_Int32_String,
  0,
  (void*) (ROGUEM91) RogueTokenType__create_token__Token_String,
  0,
  (void*) (ROGUEM92) RogueTokenType__is_directive,
  (void*) (ROGUEM1006) RogueOpWithAssignTokenType__is_op_with_assign,
  (void*) (ROGUEM92) RogueTokenType__is_structure,
  0,
  0,
  (void*) (ROGUEM1007) RogueOpWithAssignTokenType__init_object,
  0, // Table<<String,Token[]>>
  (void*) (ROGUEM1008) RogueString_TokenListTable__to_String,
  (void*) (ROGUEM1008) RogueString_TokenListTable__type_name,
  0, // PreprocessorTokenReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM1009) RoguePreprocessorTokenReader__type_name,
  0, // CmdSwitch
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM1010) RogueCmdSwitch__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM1011) RogueCmdSwitch__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM205) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM1012) RogueCmdSwitch__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM64) Rogue_Cmd__type,
  (void*) (ROGUEM1013) RogueCmdSwitch__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM1014) RogueCmdSwitch__trace_used_code,
  (void*) (ROGUEM1015) RogueCmdSwitch__update_this_type__Scope,
  (void*) (ROGUEM1016) RogueCmdSwitch__init_object,
  0,
  (void*) (ROGUEM207) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  0, // CmdReadArrayElement
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM1017) RogueCmdReadArrayElement__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM1018) RogueCmdReadArrayElement__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM1019) RogueCmdReadArrayElement__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM1020) RogueCmdReadArrayElement__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM1021) Rogue_CmdReadArrayElement__type,
  (void*) (ROGUEM1022) RogueCmdReadArrayElement__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM1023) RogueCmdReadArrayElement__trace_used_code,
  (void*) (ROGUEM1024) RogueCmdReadArrayElement__update_this_type__Scope,
  (void*) (ROGUEM1025) RogueCmdReadArrayElement__init_object,
  0, // CmdWriteArrayElement
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM1026) RogueCmdWriteArrayElement__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM1027) RogueCmdWriteArrayElement__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM1028) RogueCmdWriteArrayElement__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM1029) Rogue_CmdWriteArrayElement__type,
  (void*) (ROGUEM1030) RogueCmdWriteArrayElement__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM1031) RogueCmdWriteArrayElement__trace_used_code,
  (void*) (ROGUEM1032) RogueCmdWriteArrayElement__update_this_type__Scope,
  (void*) (ROGUEM1033) RogueCmdWriteArrayElement__init_object,
  0, // CmdConvertToPrimitiveType
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM1034) RogueCmdConvertToPrimitiveType__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM1035) RogueCmdConvertToPrimitiveType__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM1036) RogueCmdConvertToPrimitiveType__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM341) Rogue_CmdTypeOperator__type,
  (void*) (ROGUEM1037) RogueCmdConvertToPrimitiveType__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM343) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM344) RogueCmdTypeOperator__update_this_type__Scope,
  (void*) (ROGUEM1038) RogueCmdConvertToPrimitiveType__init_object,
  0, // ListReader<<CmdSelectCase>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM1039) RogueCmdSelectCaseListReader__type_name,
  (void*) (ROGUEM1040) RogueCmdSelectCaseListReader__has_another,
  (void*) (ROGUEM1041) RogueCmdSelectCaseListReader__read,
  0, // Reader<<CmdSelectCase>>
  0, // CmdAdjustGlobal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM1042) RogueCmdAdjustGlobal__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM1043) RogueCmdAdjustGlobal__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM1044) RogueCmdAdjustGlobal__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM1045) Rogue_CmdAdjustGlobal__type,
  (void*) (ROGUEM1046) RogueCmdAdjustGlobal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM1047) RogueCmdAdjustGlobal__trace_used_code,
  (void*) (ROGUEM1048) RogueCmdAdjustGlobal__update_this_type__Scope,
  (void*) (ROGUEM1049) RogueCmdAdjustGlobal__init_object,
  0, // CmdAdjustProperty
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM1050) RogueCmdAdjustProperty__type_name,
  0,
  (void*) (ROGUEM56) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM57) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM1051) RogueCmdAdjustProperty__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM59) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM60) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM61) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM62) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM61) RogueCmd__is_literal,
  (void*) (ROGUEM63) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM64) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmd__requires_semicolon,
  (void*) (ROGUEM1052) RogueCmdAdjustProperty__resolve__Scope,
  (void*) (ROGUEM65) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM66) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM67) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM1053) Rogue_CmdAdjustProperty__type,
  (void*) (ROGUEM1054) RogueCmdAdjustProperty__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM1055) RogueCmdAdjustProperty__trace_used_code,
  (void*) (ROGUEM1056) RogueCmdAdjustProperty__update_this_type__Scope,
  (void*) (ROGUEM1057) RogueCmdAdjustProperty__init_object,
  0, // TableEntry<<String,Cmd>>[]
  (void*) (ROGUEM1058) RogueString_CmdTableEntryList__to_String,
  (void*) (ROGUEM1058) RogueString_CmdTableEntryList__type_name,
  (void*) (ROGUEM1059) RogueString_CmdTableEntryList__init_object,
  0, // TableEntry<<String,Cmd>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM1060) RogueString_CmdTableEntry__type_name,
  0, // NativeCodeToken
  (void*) (ROGUEM1061) RogueNativeCodeToken__to_String,
  (void*) (ROGUEM1061) RogueNativeCodeToken__type_name,
  0,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM1061) RogueNativeCodeToken__quoted_name,
  0,
  0,
  (void*) (ROGUEM44) RogueToken__to_Character,
  (void*) (ROGUEM45) RogueToken__to_Int32,
  (void*) (ROGUEM46) RogueToken__to_Int64,
  (void*) (ROGUEM47) RogueToken__to_Real64,
  (void*) (ROGUEM48) RogueToken__to_Type,
  0,
  (void*) (ROGUEM1062) RogueNativeCodeToken__init_object,
  0, // TableEntry<<String,Token[]>>[]
  (void*) (ROGUEM1063) RogueString_TokenListTableEntryList__to_String,
  (void*) (ROGUEM1063) RogueString_TokenListTableEntryList__type_name,
  (void*) (ROGUEM1064) RogueString_TokenListTableEntryList__init_object,
  0, // TableEntry<<String,Token[]>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM1065) RogueString_TokenListTableEntry__type_name,

};

int Rogue_type_info_table[1349] =
{
  // allocator_index, dynamic_method_table_index, base_class_count, base_class_index[base_class_count], ...
  0,0,0,0,0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,44,1,10,0,48,1,4,0,0,1,12,0,0,1,4,0,52,2,4,14,
  0,57,0,0,58,1,10,0,0,1,12,0,62,2,4,18,0,72,0,0,73,2,4,20,0,
  76,0,0,77,1,4,0,80,1,4,0,85,1,4,0,88,0,0,89,1,4,0,92,1,4,
  0,95,1,10,0,99,1,4,0,102,1,4,0,105,1,4,0,108,1,10,0,112,1,4,0,
  115,1,4,0,118,1,10,0,122,1,4,0,125,1,4,0,128,1,10,0,132,1,4,0,135,
  1,4,0,138,1,4,0,141,1,4,0,144,1,4,0,147,1,4,0,150,1,4,0,168,1,
  22,0,173,1,45,0,0,1,12,0,178,1,4,0,181,1,4,0,215,1,51,0,249,1,49,
  0,283,1,53,0,289,1,10,0,295,1,4,0,314,1,49,0,0,1,12,0,348,1,4,0,
  0,1,12,0,351,1,10,0,0,1,12,0,0,1,12,0,355,1,4,0,360,1,62,0,365,
  1,62,0,370,1,4,0,373,1,4,0,376,1,10,0,380,1,4,0,0,1,12,0,383,1,
  10,0,0,1,12,0,387,1,10,0,0,1,12,0,391,1,4,0,394,1,4,0,397,1,10,
  0,401,1,4,0,404,1,4,0,407,1,4,0,0,1,12,0,410,1,10,0,414,2,4,24,
  0,419,1,10,0,423,1,4,0,426,1,10,0,430,1,4,0,0,1,12,0,433,1,4,0,
  436,1,44,0,454,1,44,0,472,1,44,0,490,1,44,0,508,1,44,0,0,1,12,0,526,
  1,4,0,0,1,12,0,529,1,4,0,532,1,10,0,536,1,10,0,540,1,4,0,0,1,
  12,0,543,1,10,0,547,1,4,0,0,1,12,0,550,1,10,0,554,1,4,0,557,1,4,
  0,562,1,107,0,567,1,49,0,601,1,53,0,607,1,10,0,611,1,49,0,645,1,49,0,
  679,1,10,0,683,1,51,0,719,1,117,0,753,1,49,0,0,1,12,0,787,1,115,0,823,
  1,121,0,857,1,49,0,891,1,123,0,934,1,124,0,977,1,49,0,1019,1,107,0,0,1,
  12,0,1024,1,49,0,1058,1,4,0,1061,1,10,0,1065,1,4,0,0,1,12,0,1068,1,10,
  0,1072,1,4,0,1075,1,4,0,1078,1,10,0,1082,1,4,0,1085,1,4,0,1088,1,121,0,
  1122,1,49,0,1156,1,121,0,1190,1,121,0,1224,1,49,0,1258,1,49,0,0,1,12,0,0,
  1,12,0,1292,1,10,0,1296,1,4,0,0,1,12,0,1299,1,10,0,0,1,12,0,1303,1,
  10,0,1307,1,4,0,0,1,12,0,1310,1,10,0,1314,1,4,0,0,1,12,0,1317,1,158,
  0,1351,1,49,0,1385,1,160,0,1427,1,49,0,1469,1,49,0,1503,1,49,0,0,1,12,0,
  1537,1,165,0,1573,1,166,0,1609,1,49,0,1643,1,166,0,1677,1,107,0,1682,1,49,0,1716,
  1,166,0,1750,1,49,0,1784,1,165,0,1820,1,166,0,1854,1,166,0,1888,1,176,0,1922,1,
  166,0,1956,1,4,0,1959,1,49,0,1993,1,10,0,1997,1,4,0,0,1,12,0,0,1,12,
  0,2000,1,10,0,2004,1,4,0,0,1,12,0,2007,1,10,0,2011,1,4,0,0,1,12,0,
  2014,1,4,0,2017,1,4,0,2020,1,4,0,2023,2,4,14,0,2029,1,4,0,2032,1,44,0,
  2050,1,124,0,2092,1,49,0,2126,1,49,0,2160,1,115,0,2196,1,115,0,2232,1,115,0,2268,
  1,115,0,2304,1,49,0,2338,1,49,0,2372,1,49,0,2406,1,49,0,2440,1,49,0,2474,1,
  49,0,2508,1,49,0,2542,1,49,0,2576,1,49,0,2610,1,49,0,2644,1,49,0,2678,1,10,
  0,2682,1,49,0,2716,1,10,0,2720,1,49,0,2754,1,51,0,2788,1,49,0,2822,1,49,0,
  2856,1,123,0,2899,1,49,0,2935,1,223,0,2969,1,49,0,3003,1,221,0,3039,1,123,0,3082,
  1,115,0,3118,1,221,0,3154,1,229,0,3197,1,124,0,3240,1,229,0,3283,1,229,0,3326,1,
  123,0,3369,1,123,0,3412,1,123,0,3455,1,123,0,3498,1,123,0,3541,1,158,0,3575,1,160,
  0,3617,1,240,0,3659,1,124,0,3701,1,240,0,3743,1,240,0,3785,1,240,0,3827,1,240,0,
  3869,1,240,0,3911,1,124,0,3953,1,124,0,3995,1,124,0,4037,1,124,0,4079,1,124,0,4121,
  1,160,0,4163,1,160,0,4205,1,49,0,4239,1,49,0,4273,1,49,0,4307,1,158,0,4341,1,
  49,0,4375,1,158,0,4409,1,121,0,4443,1,121,0,4477,1,121,0,4511,1,121,0,4545,1,49,
  0,4579,1,49,0,4613,1,10,0,4617,1,4,0,4620,1,49,0,4654,1,10,0,4658,1,49,0,
  4692,1,49,0,4726,1,10,0,4730,1,4,0,0,1,12,0,4733,2,4,14,0,4739,2,4,20,
  0,4745,1,4,0,4748,1,10,0,4752,1,4,0,0,1,12,0,4755,1,10,0,4759,1,4,0,
  0,1,12,0,4762,1,10,0,4766,1,4,0,0,1,12,0,4769,1,49,0,4803,1,49,0,4837,
  1,49,0,4871,1,49,0,4905,1,49,0,4939,1,49,0,4973,1,49,0,5007,1,223,0,5041,1,
  223,0,0,1,12,0,5075,1,10,0,5079,1,115,0,0,1,12,0,5115,1,10,0,5119,1,4,
  0,0,1,12,0,5122,1,10,0,5126,1,4,0,0,1,12,0,5129,1,4,0,5132,1,176,0,
  0,1,12,0,5166,1,10,0,5170,1,4,0,0,1,12,0,5173,1,54,0,5192,1,54,0,5211,
  1,54,0,5230,1,54,0,5249,1,54,0,5268,1,54,0,5287,1,4,0,5290,1,4,0,0,1,
  12,0,5293,1,115,0,0,1,12,0,5329,1,49,0,5363,1,49,0,5397,1,256,0,0,1,12,
  0,5431,2,4,327,0,5436,0,0,5437,1,49,0,5471,1,49,0,5505,1,10,0,5509,1,4,0,
  0,1,12,0,5512,1,44,0,5530,1,10,0,5534,1,4,0,0,1,12,0,0,0,0,0,0
};

int Rogue_object_size_table[339] =
{
  (int) sizeof(RogueReal64),
  (int) sizeof(RogueInt64),
  (int) sizeof(RogueInt32),
  (int) sizeof(RogueStringBuilder),
  (int) sizeof(RogueObject),
  (int) sizeof(RogueByte),
  (int) sizeof(RogueCharacter),
  (int) sizeof(RogueLogical),
  (int) sizeof(RogueString),
  (int) sizeof(RogueCharacterList),
  (int) sizeof(RogueClassGenericList),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassStringReader),
  (int) sizeof(RogueClassCharacterReader),
  (int) sizeof(RogueStringList),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassGlobal),
  (int) sizeof(RogueClassPrintWriterAspect),
  (int) sizeof(RogueClassConsole),
  (int) sizeof(RogueClassCharacterWriter),
  (int) sizeof(RogueClassRogueC),
  (int) sizeof(RogueClassException),
  (int) sizeof(RogueClassStackTrace),
  (int) sizeof(RogueClassReader_of_String),
  (int) sizeof(RogueClassMath),
  (int) sizeof(RogueClassProgram),
  (int) sizeof(RogueTemplateList),
  (int) sizeof(RogueClassTemplate),
  (int) sizeof(RogueClassString_TemplateTable),
  (int) sizeof(RogueClassString_AugmentListTable),
  (int) sizeof(RogueRequisiteItemList),
  (int) sizeof(RogueClassRequisiteItem),
  (int) sizeof(RogueClassMethod),
  (int) sizeof(RoguePropertyList),
  (int) sizeof(RogueClassProperty),
  (int) sizeof(RogueClassString_MethodListTable),
  (int) sizeof(RogueTypeList),
  (int) sizeof(RogueClassType),
  (int) sizeof(RogueClassString_TypeTable),
  (int) sizeof(RogueClassString_Int32Table),
  (int) sizeof(RogueClassString_StringListTable),
  (int) sizeof(RogueClassString_Int32TableEntry),
  (int) sizeof(RogueClassInt32_TemplateTable),
  (int) sizeof(RogueClassToken),
  (int) sizeof(RogueClassError),
  (int) sizeof(RogueClassRogueError),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassAttributes),
  (int) sizeof(RogueClassCmd),
  (int) sizeof(RogueClassCmdReturn),
  (int) sizeof(RogueClassCmdStatement),
  (int) sizeof(RogueClassCmdStatementList),
  (int) sizeof(RogueCmdList),
  (int) sizeof(RogueClassTokenType),
  (int) sizeof(RogueClassCmdLabel),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassScope),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueMethodList),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassFunction_Type_RETURNSLogical),
  (int) sizeof(RogueClassFunction_197),
  (int) sizeof(RogueClassFunction_198),
  (int) sizeof(RogueClassCPPWriter),
  (int) sizeof(RogueClassString_MethodTable),
  (int) sizeof(RogueLocalList),
  (int) sizeof(RogueClassLocal),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueInt32List),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueByteList),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassSystem),
  (int) sizeof(RogueClassString_LogicalTable),
  (int) sizeof(RogueParserList),
  (int) sizeof(RogueClassParser),
  (int) sizeof(RogueClassString_ParseReaderTable),
  (int) sizeof(RogueClassFile),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTokenList),
  (int) sizeof(RogueClassLineReader),
  (int) sizeof(RogueTypeParameterList),
  (int) sizeof(RogueClassTypeParameter),
  (int) sizeof(RogueAugmentList),
  (int) sizeof(RogueClassAugment),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassString_TokenTypeTable),
  (int) sizeof(RogueClassLiteralCharacterToken),
  (int) sizeof(RogueClassLiteralInt64Token),
  (int) sizeof(RogueClassLiteralInt32Token),
  (int) sizeof(RogueClassLiteralReal64Token),
  (int) sizeof(RogueClassStringDataToken),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassString_TypeSpecializerTable),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassTypeSpecializer),
  (int) sizeof(RogueTypeSpecializerList),
  (int) sizeof(RogueTableEntry_of_String_TemplateList),
  (int) sizeof(RogueClassString_TemplateTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_AugmentListList),
  (int) sizeof(RogueClassString_AugmentListTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueCmdLabelList),
  (int) sizeof(RogueClassString_CmdLabelTable),
  (int) sizeof(RogueClassCloneArgs),
  (int) sizeof(RogueClassCloneMethodArgs),
  (int) sizeof(RogueClassCmdAccess),
  (int) sizeof(RogueClassCmdArgs),
  (int) sizeof(RogueCmdFlagArgList),
  (int) sizeof(RogueClassCmdFlagArg),
  (int) sizeof(RogueClassCmdAssign),
  (int) sizeof(RogueCmdControlStructureList),
  (int) sizeof(RogueClassCmdControlStructure),
  (int) sizeof(RogueClassCmdLiteralThis),
  (int) sizeof(RogueClassCmdThisContext),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdGenericLoop),
  (int) sizeof(RogueClassCmdLiteralInt32),
  (int) sizeof(RogueClassCmdLiteral),
  (int) sizeof(RogueClassCmdCompareNE),
  (int) sizeof(RogueClassCmdComparison),
  (int) sizeof(RogueClassCmdBinary),
  (int) sizeof(RogueClassTaskArgs),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdTaskControl),
  (int) sizeof(RogueClassCmdTaskControlSection),
  (int) sizeof(RogueTableEntry_of_String_MethodListList),
  (int) sizeof(RogueClassString_MethodListTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueDefinitionList),
  (int) sizeof(RogueClassDefinition),
  (int) sizeof(RogueClassString_DefinitionTable),
  (int) sizeof(RogueNativePropertyList),
  (int) sizeof(RogueClassNativeProperty),
  (int) sizeof(RogueClassString_PropertyTable),
  (int) sizeof(RogueClassCmdLiteralNull),
  (int) sizeof(RogueClassCmdCreateCompound),
  (int) sizeof(RogueClassCmdLiteralLogical),
  (int) sizeof(RogueClassCmdLiteralString),
  (int) sizeof(RogueClassCmdWriteGlobal),
  (int) sizeof(RogueClassCmdWriteProperty),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_TypeList),
  (int) sizeof(RogueClassString_TypeTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_Int32List),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_StringListList),
  (int) sizeof(RogueClassString_StringListTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_Int32_TemplateList),
  (int) sizeof(RogueClassInt32_TemplateTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdCastToType),
  (int) sizeof(RogueClassCmdTypeOperator),
  (int) sizeof(RogueClassCmdLogicalize),
  (int) sizeof(RogueClassCmdUnary),
  (int) sizeof(RogueClassCmdCreateOptionalValue),
  (int) sizeof(RogueClassCmdReadSingleton),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdCallInlineNativeRoutine),
  (int) sizeof(RogueClassCmdCallInlineNative),
  (int) sizeof(RogueClassCmdCall),
  (int) sizeof(RogueClassCmdCallNativeRoutine),
  (int) sizeof(RogueClassMacroArgs),
  (int) sizeof(RogueClassCmdInlineNative),
  (int) sizeof(RogueClassCmdCallRoutine),
  (int) sizeof(RogueClassCmdReadArrayCount),
  (int) sizeof(RogueClassCmdCallInlineNativeMethod),
  (int) sizeof(RogueClassCmdCallNativeMethod),
  (int) sizeof(RogueClassCmdCallAspectMethod),
  (int) sizeof(RogueClassCmdCallDynamicMethod),
  (int) sizeof(RogueClassCmdCallMethod),
  (int) sizeof(RogueClassCandidateMethods),
  (int) sizeof(RogueClassCmdCreateFunction),
  (int) sizeof(RogueFnParamList),
  (int) sizeof(RogueClassFnParam),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_MethodList),
  (int) sizeof(RogueClassString_MethodTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_LogicalList),
  (int) sizeof(RogueClassString_LogicalTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassTokenReader),
  (int) sizeof(RogueClassString_StringTable),
  (int) sizeof(RogueClassTokenizer),
  (int) sizeof(RogueClassParseReader),
  (int) sizeof(RogueClassPreprocessor),
  (int) sizeof(RogueClassEOLToken),
  (int) sizeof(RogueClassCmdAdd),
  (int) sizeof(RogueClassCmdNativeHeader),
  (int) sizeof(RogueClassCmdNativeCode),
  (int) sizeof(RogueClassCmdIf),
  (int) sizeof(RogueClassCmdWhich),
  (int) sizeof(RogueClassCmdContingent),
  (int) sizeof(RogueClassCmdTry),
  (int) sizeof(RogueClassCmdAwait),
  (int) sizeof(RogueClassCmdYield),
  (int) sizeof(RogueClassCmdThrow),
  (int) sizeof(RogueClassCmdFormattedString),
  (int) sizeof(RogueClassCmdTrace),
  (int) sizeof(RogueClassCmdEscape),
  (int) sizeof(RogueClassCmdNextIteration),
  (int) sizeof(RogueClassCmdNecessary),
  (int) sizeof(RogueClassCmdSufficient),
  (int) sizeof(RogueClassCmdAdjust),
  (int) sizeof(RogueClassCmdOpWithAssign),
  (int) sizeof(RogueCmdWhichCaseList),
  (int) sizeof(RogueClassCmdWhichCase),
  (int) sizeof(RogueCmdCatchList),
  (int) sizeof(RogueClassCmdCatch),
  (int) sizeof(RogueClassCmdLocalDeclaration),
  (int) sizeof(RogueClassCmdAdjustLocal),
  (int) sizeof(RogueClassCmdReadLocal),
  (int) sizeof(RogueClassCmdCompareLE),
  (int) sizeof(RogueClassCmdRange),
  (int) sizeof(RogueClassCmdLocalOpWithAssign),
  (int) sizeof(RogueClassCmdResolvedOpWithAssign),
  (int) sizeof(RogueClassCmdRangeUpTo),
  (int) sizeof(RogueClassCmdCompareGE),
  (int) sizeof(RogueClassCmdForEach),
  (int) sizeof(RogueClassCmdRangeDownTo),
  (int) sizeof(RogueClassCmdLogicalXor),
  (int) sizeof(RogueClassCmdBinaryLogical),
  (int) sizeof(RogueClassCmdLogicalOr),
  (int) sizeof(RogueClassCmdLogicalAnd),
  (int) sizeof(RogueClassCmdCompareEQ),
  (int) sizeof(RogueClassCmdCompareIs),
  (int) sizeof(RogueClassCmdCompareIsNot),
  (int) sizeof(RogueClassCmdCompareLT),
  (int) sizeof(RogueClassCmdCompareGT),
  (int) sizeof(RogueClassCmdInstanceOf),
  (int) sizeof(RogueClassCmdLogicalNot),
  (int) sizeof(RogueClassCmdBitwiseXor),
  (int) sizeof(RogueClassCmdBitwiseOp),
  (int) sizeof(RogueClassCmdBitwiseOr),
  (int) sizeof(RogueClassCmdBitwiseAnd),
  (int) sizeof(RogueClassCmdBitwiseShiftLeft),
  (int) sizeof(RogueClassCmdBitwiseShiftRight),
  (int) sizeof(RogueClassCmdBitwiseShiftRightX),
  (int) sizeof(RogueClassCmdSubtract),
  (int) sizeof(RogueClassCmdMultiply),
  (int) sizeof(RogueClassCmdDivide),
  (int) sizeof(RogueClassCmdMod),
  (int) sizeof(RogueClassCmdPower),
  (int) sizeof(RogueClassCmdNegate),
  (int) sizeof(RogueClassCmdBitwiseNot),
  (int) sizeof(RogueClassCmdGetOptionalValue),
  (int) sizeof(RogueClassCmdElementAccess),
  (int) sizeof(RogueClassCmdListConvert),
  (int) sizeof(RogueClassCmdConvertToType),
  (int) sizeof(RogueClassCmdCreateCallback),
  (int) sizeof(RogueClassCmdAs),
  (int) sizeof(RogueClassCmdDefaultValue),
  (int) sizeof(RogueClassCmdLiteralReal64),
  (int) sizeof(RogueClassCmdLiteralInt64),
  (int) sizeof(RogueClassCmdLiteralCharacter),
  (int) sizeof(RogueClassCmdCreateList),
  (int) sizeof(RogueClassCmdCallPriorMethod),
  (int) sizeof(RogueFnArgList),
  (int) sizeof(RogueClassFnArg),
  (int) sizeof(RogueClassCmdSelect),
  (int) sizeof(RogueCmdSelectCaseList),
  (int) sizeof(RogueClassCmdSelectCase),
  (int) sizeof(RogueClassCmdTypedLiteralList),
  (int) sizeof(RogueTableEntry_of_String_ParseReaderList),
  (int) sizeof(RogueClassString_ParseReaderTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassFileReader),
  (int) sizeof(RogueClassFileWriter),
  (int) sizeof(RogueClassTokenListRebuilder),
  (int) sizeof(RogueTableEntry_of_String_TokenTypeList),
  (int) sizeof(RogueClassString_TokenTypeTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_TypeSpecializerList),
  (int) sizeof(RogueClassString_TypeSpecializerTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_CmdLabelList),
  (int) sizeof(RogueClassString_CmdLabelTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdCreateArray),
  (int) sizeof(RogueClassCmdCreateObject),
  (int) sizeof(RogueClassCmdReadGlobal),
  (int) sizeof(RogueClassCmdReadProperty),
  (int) sizeof(RogueClassCmdLogicalizeOptionalValue),
  (int) sizeof(RogueClassCmdWriteSingleton),
  (int) sizeof(RogueClassCmdWriteLocal),
  (int) sizeof(RogueClassCmdOpAssignGlobal),
  (int) sizeof(RogueClassCmdOpAssignProperty),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueCmdTaskControlSectionList),
  (int) sizeof(RogueClassCmdBlock),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_DefinitionList),
  (int) sizeof(RogueClassString_DefinitionTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_PropertyList),
  (int) sizeof(RogueClassString_PropertyTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassString_CmdTable),
  (int) sizeof(RogueClassCmdCallStaticMethod),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_StringList),
  (int) sizeof(RogueClassString_StringTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassDirectiveTokenType),
  (int) sizeof(RogueClassStructuralDirectiveTokenType),
  (int) sizeof(RogueClassEOLTokenType),
  (int) sizeof(RogueClassStructureTokenType),
  (int) sizeof(RogueClassNativeCodeTokenType),
  (int) sizeof(RogueClassOpWithAssignTokenType),
  (int) sizeof(RogueClassString_TokenListTable),
  (int) sizeof(RogueClassPreprocessorTokenReader),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdSwitch),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdReadArrayElement),
  (int) sizeof(RogueClassCmdWriteArrayElement),
  (int) sizeof(RogueClassCmdConvertToPrimitiveType),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdSelectCaseListReader),
  (int) sizeof(RogueClassCmdSelectCaseReader),
  (int) sizeof(RogueClassCmdAdjustGlobal),
  (int) sizeof(RogueClassCmdAdjustProperty),
  (int) sizeof(RogueTableEntry_of_String_CmdList),
  (int) sizeof(RogueClassString_CmdTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassNativeCodeToken),
  (int) sizeof(RogueTableEntry_of_String_TokenListList),
  (int) sizeof(RogueClassString_TokenListTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueOptionalInt32),
  (int) sizeof(RogueOptionalCharacter)
};

int Rogue_allocator_count = 1;
RogueAllocator Rogue_allocators[1];

int Rogue_type_count = 339;
RogueType Rogue_types[339];

RogueType* RogueTypeReal64;
RogueType* RogueTypeInt64;
RogueType* RogueTypeInt32;
RogueType* RogueTypeStringBuilder;
RogueType* RogueTypeObject;
RogueType* RogueTypeByte;
RogueType* RogueTypeCharacter;
RogueType* RogueTypeLogical;
RogueType* RogueTypeString;
RogueType* RogueTypeCharacterList;
RogueType* RogueTypeGenericList;
RogueType* RogueTypeArray;
RogueType* RogueTypeStringReader;
RogueType* RogueTypeCharacterReader;
RogueType* RogueTypeStringList;
RogueType* RogueTypeGlobal;
RogueType* RogueTypePrintWriterAspect;
RogueType* RogueTypeConsole;
RogueType* RogueTypeCharacterWriter;
RogueType* RogueTypeRogueC;
RogueType* RogueTypeException;
RogueType* RogueTypeStackTrace;
RogueType* RogueTypeReader_of_String;
RogueType* RogueTypeMath;
RogueType* RogueTypeProgram;
RogueType* RogueTypeTemplateList;
RogueType* RogueTypeTemplate;
RogueType* RogueTypeString_TemplateTable;
RogueType* RogueTypeString_AugmentListTable;
RogueType* RogueTypeRequisiteItemList;
RogueType* RogueTypeRequisiteItem;
RogueType* RogueTypeMethod;
RogueType* RogueTypePropertyList;
RogueType* RogueTypeProperty;
RogueType* RogueTypeString_MethodListTable;
RogueType* RogueTypeTypeList;
RogueType* RogueTypeType;
RogueType* RogueTypeString_TypeTable;
RogueType* RogueTypeString_Int32Table;
RogueType* RogueTypeString_StringListTable;
RogueType* RogueTypeString_Int32TableEntry;
RogueType* RogueTypeInt32_TemplateTable;
RogueType* RogueTypeToken;
RogueType* RogueTypeError;
RogueType* RogueTypeRogueError;
RogueType* RogueTypeAttributes;
RogueType* RogueTypeCmd;
RogueType* RogueTypeCmdReturn;
RogueType* RogueTypeCmdStatement;
RogueType* RogueTypeCmdStatementList;
RogueType* RogueTypeCmdList;
RogueType* RogueTypeTokenType;
RogueType* RogueTypeCmdLabel;
RogueType* RogueTypeScope;
RogueType* RogueTypeMethodList;
RogueType* RogueTypeFunction_Type_RETURNSLogical;
RogueType* RogueTypeFunction_197;
RogueType* RogueTypeFunction_198;
RogueType* RogueTypeCPPWriter;
RogueType* RogueTypeString_MethodTable;
RogueType* RogueTypeLocalList;
RogueType* RogueTypeLocal;
RogueType* RogueTypeInt32List;
RogueType* RogueTypeByteList;
RogueType* RogueTypeSystem;
RogueType* RogueTypeString_LogicalTable;
RogueType* RogueTypeParserList;
RogueType* RogueTypeParser;
RogueType* RogueTypeString_ParseReaderTable;
RogueType* RogueTypeFile;
RogueType* RogueTypeTokenList;
RogueType* RogueTypeLineReader;
RogueType* RogueTypeTypeParameterList;
RogueType* RogueTypeTypeParameter;
RogueType* RogueTypeAugmentList;
RogueType* RogueTypeAugment;
RogueType* RogueTypeString_TokenTypeTable;
RogueType* RogueTypeLiteralCharacterToken;
RogueType* RogueTypeLiteralInt64Token;
RogueType* RogueTypeLiteralInt32Token;
RogueType* RogueTypeLiteralReal64Token;
RogueType* RogueTypeStringDataToken;
RogueType* RogueTypeString_TypeSpecializerTable;
RogueType* RogueTypeTypeSpecializer;
RogueType* RogueTypeTypeSpecializerList;
RogueType* RogueTypeTableEntry_of_String_TemplateList;
RogueType* RogueTypeString_TemplateTableEntry;
RogueType* RogueTypeTableEntry_of_String_AugmentListList;
RogueType* RogueTypeString_AugmentListTableEntry;
RogueType* RogueTypeCmdLabelList;
RogueType* RogueTypeString_CmdLabelTable;
RogueType* RogueTypeCloneArgs;
RogueType* RogueTypeCloneMethodArgs;
RogueType* RogueTypeCmdAccess;
RogueType* RogueTypeCmdArgs;
RogueType* RogueTypeCmdFlagArgList;
RogueType* RogueTypeCmdFlagArg;
RogueType* RogueTypeCmdAssign;
RogueType* RogueTypeCmdControlStructureList;
RogueType* RogueTypeCmdControlStructure;
RogueType* RogueTypeCmdLiteralThis;
RogueType* RogueTypeCmdThisContext;
RogueType* RogueTypeCmdGenericLoop;
RogueType* RogueTypeCmdLiteralInt32;
RogueType* RogueTypeCmdLiteral;
RogueType* RogueTypeCmdCompareNE;
RogueType* RogueTypeCmdComparison;
RogueType* RogueTypeCmdBinary;
RogueType* RogueTypeTaskArgs;
RogueType* RogueTypeCmdTaskControl;
RogueType* RogueTypeCmdTaskControlSection;
RogueType* RogueTypeTableEntry_of_String_MethodListList;
RogueType* RogueTypeString_MethodListTableEntry;
RogueType* RogueTypeDefinitionList;
RogueType* RogueTypeDefinition;
RogueType* RogueTypeString_DefinitionTable;
RogueType* RogueTypeNativePropertyList;
RogueType* RogueTypeNativeProperty;
RogueType* RogueTypeString_PropertyTable;
RogueType* RogueTypeCmdLiteralNull;
RogueType* RogueTypeCmdCreateCompound;
RogueType* RogueTypeCmdLiteralLogical;
RogueType* RogueTypeCmdLiteralString;
RogueType* RogueTypeCmdWriteGlobal;
RogueType* RogueTypeCmdWriteProperty;
RogueType* RogueTypeTableEntry_of_String_TypeList;
RogueType* RogueTypeString_TypeTableEntry;
RogueType* RogueTypeTableEntry_of_String_Int32List;
RogueType* RogueTypeTableEntry_of_String_StringListList;
RogueType* RogueTypeString_StringListTableEntry;
RogueType* RogueTypeTableEntry_of_Int32_TemplateList;
RogueType* RogueTypeInt32_TemplateTableEntry;
RogueType* RogueTypeCmdCastToType;
RogueType* RogueTypeCmdTypeOperator;
RogueType* RogueTypeCmdLogicalize;
RogueType* RogueTypeCmdUnary;
RogueType* RogueTypeCmdCreateOptionalValue;
RogueType* RogueTypeCmdReadSingleton;
RogueType* RogueTypeCmdCallInlineNativeRoutine;
RogueType* RogueTypeCmdCallInlineNative;
RogueType* RogueTypeCmdCall;
RogueType* RogueTypeCmdCallNativeRoutine;
RogueType* RogueTypeMacroArgs;
RogueType* RogueTypeCmdInlineNative;
RogueType* RogueTypeCmdCallRoutine;
RogueType* RogueTypeCmdReadArrayCount;
RogueType* RogueTypeCmdCallInlineNativeMethod;
RogueType* RogueTypeCmdCallNativeMethod;
RogueType* RogueTypeCmdCallAspectMethod;
RogueType* RogueTypeCmdCallDynamicMethod;
RogueType* RogueTypeCmdCallMethod;
RogueType* RogueTypeCandidateMethods;
RogueType* RogueTypeCmdCreateFunction;
RogueType* RogueTypeFnParamList;
RogueType* RogueTypeFnParam;
RogueType* RogueTypeTableEntry_of_String_MethodList;
RogueType* RogueTypeString_MethodTableEntry;
RogueType* RogueTypeTableEntry_of_String_LogicalList;
RogueType* RogueTypeString_LogicalTableEntry;
RogueType* RogueTypeTokenReader;
RogueType* RogueTypeString_StringTable;
RogueType* RogueTypeTokenizer;
RogueType* RogueTypeParseReader;
RogueType* RogueTypePreprocessor;
RogueType* RogueTypeEOLToken;
RogueType* RogueTypeCmdAdd;
RogueType* RogueTypeCmdNativeHeader;
RogueType* RogueTypeCmdNativeCode;
RogueType* RogueTypeCmdIf;
RogueType* RogueTypeCmdWhich;
RogueType* RogueTypeCmdContingent;
RogueType* RogueTypeCmdTry;
RogueType* RogueTypeCmdAwait;
RogueType* RogueTypeCmdYield;
RogueType* RogueTypeCmdThrow;
RogueType* RogueTypeCmdFormattedString;
RogueType* RogueTypeCmdTrace;
RogueType* RogueTypeCmdEscape;
RogueType* RogueTypeCmdNextIteration;
RogueType* RogueTypeCmdNecessary;
RogueType* RogueTypeCmdSufficient;
RogueType* RogueTypeCmdAdjust;
RogueType* RogueTypeCmdOpWithAssign;
RogueType* RogueTypeCmdWhichCaseList;
RogueType* RogueTypeCmdWhichCase;
RogueType* RogueTypeCmdCatchList;
RogueType* RogueTypeCmdCatch;
RogueType* RogueTypeCmdLocalDeclaration;
RogueType* RogueTypeCmdAdjustLocal;
RogueType* RogueTypeCmdReadLocal;
RogueType* RogueTypeCmdCompareLE;
RogueType* RogueTypeCmdRange;
RogueType* RogueTypeCmdLocalOpWithAssign;
RogueType* RogueTypeCmdResolvedOpWithAssign;
RogueType* RogueTypeCmdRangeUpTo;
RogueType* RogueTypeCmdCompareGE;
RogueType* RogueTypeCmdForEach;
RogueType* RogueTypeCmdRangeDownTo;
RogueType* RogueTypeCmdLogicalXor;
RogueType* RogueTypeCmdBinaryLogical;
RogueType* RogueTypeCmdLogicalOr;
RogueType* RogueTypeCmdLogicalAnd;
RogueType* RogueTypeCmdCompareEQ;
RogueType* RogueTypeCmdCompareIs;
RogueType* RogueTypeCmdCompareIsNot;
RogueType* RogueTypeCmdCompareLT;
RogueType* RogueTypeCmdCompareGT;
RogueType* RogueTypeCmdInstanceOf;
RogueType* RogueTypeCmdLogicalNot;
RogueType* RogueTypeCmdBitwiseXor;
RogueType* RogueTypeCmdBitwiseOp;
RogueType* RogueTypeCmdBitwiseOr;
RogueType* RogueTypeCmdBitwiseAnd;
RogueType* RogueTypeCmdBitwiseShiftLeft;
RogueType* RogueTypeCmdBitwiseShiftRight;
RogueType* RogueTypeCmdBitwiseShiftRightX;
RogueType* RogueTypeCmdSubtract;
RogueType* RogueTypeCmdMultiply;
RogueType* RogueTypeCmdDivide;
RogueType* RogueTypeCmdMod;
RogueType* RogueTypeCmdPower;
RogueType* RogueTypeCmdNegate;
RogueType* RogueTypeCmdBitwiseNot;
RogueType* RogueTypeCmdGetOptionalValue;
RogueType* RogueTypeCmdElementAccess;
RogueType* RogueTypeCmdListConvert;
RogueType* RogueTypeCmdConvertToType;
RogueType* RogueTypeCmdCreateCallback;
RogueType* RogueTypeCmdAs;
RogueType* RogueTypeCmdDefaultValue;
RogueType* RogueTypeCmdLiteralReal64;
RogueType* RogueTypeCmdLiteralInt64;
RogueType* RogueTypeCmdLiteralCharacter;
RogueType* RogueTypeCmdCreateList;
RogueType* RogueTypeCmdCallPriorMethod;
RogueType* RogueTypeFnArgList;
RogueType* RogueTypeFnArg;
RogueType* RogueTypeCmdSelect;
RogueType* RogueTypeCmdSelectCaseList;
RogueType* RogueTypeCmdSelectCase;
RogueType* RogueTypeCmdTypedLiteralList;
RogueType* RogueTypeTableEntry_of_String_ParseReaderList;
RogueType* RogueTypeString_ParseReaderTableEntry;
RogueType* RogueTypeFileReader;
RogueType* RogueTypeFileWriter;
RogueType* RogueTypeTokenListRebuilder;
RogueType* RogueTypeTableEntry_of_String_TokenTypeList;
RogueType* RogueTypeString_TokenTypeTableEntry;
RogueType* RogueTypeTableEntry_of_String_TypeSpecializerList;
RogueType* RogueTypeString_TypeSpecializerTableEntry;
RogueType* RogueTypeTableEntry_of_String_CmdLabelList;
RogueType* RogueTypeString_CmdLabelTableEntry;
RogueType* RogueTypeCmdCreateArray;
RogueType* RogueTypeCmdCreateObject;
RogueType* RogueTypeCmdReadGlobal;
RogueType* RogueTypeCmdReadProperty;
RogueType* RogueTypeCmdLogicalizeOptionalValue;
RogueType* RogueTypeCmdWriteSingleton;
RogueType* RogueTypeCmdWriteLocal;
RogueType* RogueTypeCmdOpAssignGlobal;
RogueType* RogueTypeCmdOpAssignProperty;
RogueType* RogueTypeCmdTaskControlSectionList;
RogueType* RogueTypeCmdBlock;
RogueType* RogueTypeTableEntry_of_String_DefinitionList;
RogueType* RogueTypeString_DefinitionTableEntry;
RogueType* RogueTypeTableEntry_of_String_PropertyList;
RogueType* RogueTypeString_PropertyTableEntry;
RogueType* RogueTypeString_CmdTable;
RogueType* RogueTypeCmdCallStaticMethod;
RogueType* RogueTypeTableEntry_of_String_StringList;
RogueType* RogueTypeString_StringTableEntry;
RogueType* RogueTypeDirectiveTokenType;
RogueType* RogueTypeStructuralDirectiveTokenType;
RogueType* RogueTypeEOLTokenType;
RogueType* RogueTypeStructureTokenType;
RogueType* RogueTypeNativeCodeTokenType;
RogueType* RogueTypeOpWithAssignTokenType;
RogueType* RogueTypeString_TokenListTable;
RogueType* RogueTypePreprocessorTokenReader;
RogueType* RogueTypeCmdSwitch;
RogueType* RogueTypeCmdReadArrayElement;
RogueType* RogueTypeCmdWriteArrayElement;
RogueType* RogueTypeCmdConvertToPrimitiveType;
RogueType* RogueTypeCmdSelectCaseListReader;
RogueType* RogueTypeCmdSelectCaseReader;
RogueType* RogueTypeCmdAdjustGlobal;
RogueType* RogueTypeCmdAdjustProperty;
RogueType* RogueTypeTableEntry_of_String_CmdList;
RogueType* RogueTypeString_CmdTableEntry;
RogueType* RogueTypeNativeCodeToken;
RogueType* RogueTypeTableEntry_of_String_TokenListList;
RogueType* RogueTypeString_TokenListTableEntry;
RogueType* RogueTypeOptionalInt32;
RogueType* RogueTypeOptionalCharacter;

int Rogue_literal_string_count = 1157;
RogueString* Rogue_literal_strings[1157];

void RogueStringBuilder__init_class()
{
  RogueStringBuilder_work_bytes = ((RogueByteList__init( ((RogueByteList*)ROGUE_CREATE_OBJECT(ByteList)) )));
}

RogueInt32 RogueMath__max__Int32_Int32( RogueInt32 a_0, RogueInt32 b_1 )
{
  if (a_0 >= b_1)
  {
    return (RogueInt32)(a_0);
  }
  else
  {
    return (RogueInt32)(b_1);
  }
}

RogueInt32 RogueMath__mod__Int32_Int32( RogueInt32 a_0, RogueInt32 b_1 )
{
  if (((!(!!(a_0)) && !(!!(b_1))) || b_1 == 1))
  {
    return (RogueInt32)(0);
  }
  RogueInt32 r_2 = (a_0 % b_1);
  if ((a_0 ^ b_1) < 0)
  {
    if (!!(r_2))
    {
      return (RogueInt32)((r_2 + b_1));
    }
    else
    {
      return (RogueInt32)(0);
    }
  }
  else
  {
    return (RogueInt32)(r_2);
  }
}

RogueInt64 RogueMath__mod__Int64_Int64( RogueInt64 a_0, RogueInt64 b_1 )
{
  if (((!(!!(a_0)) && !(!!(b_1))) || b_1 == ((RogueInt64)1)))
  {
    return (RogueInt64)(((RogueInt64)0));
  }
  RogueInt64 r_2 = (a_0 % b_1);
  if ((a_0 ^ b_1) < ((RogueInt64)0))
  {
    if (!!(r_2))
    {
      return (RogueInt64)((r_2 + b_1));
    }
    else
    {
      return (RogueInt64)(((RogueInt64)0));
    }
  }
  else
  {
    return (RogueInt64)(r_2);
  }
}

RogueReal64 RogueMath__mod__Real64_Real64( RogueReal64 a_0, RogueReal64 b_1 )
{
  RogueReal64 q_2 = ((a_0 / b_1));
  return (RogueReal64)((a_0 - (floor((double)q_2) * b_1)));
}

RogueInt32 RogueMath__shift_right__Int32_Int32( RogueInt32 value_0, RogueInt32 bits_1 )
{
  if (bits_1 <= 0)
  {
    return (RogueInt32)(value_0);
  }
  --bits_1;
  if (!!(bits_1))
  {
    return (RogueInt32)((((value_0 >> 1) & 2147483647) >> bits_1));
  }
  else
  {
    return (RogueInt32)(((value_0 >> 1) & 2147483647));
  }
}

void RogueCmdStatementList__init_class()
{
}

void RogueTokenType__init_class()
{
}

void RogueSystem__exit__Int32( RogueInt32 result_code_0 )
{
  exit( result_code_0 );

}

void RogueSystem__init_class()
{
  RogueSystem_command_line_arguments = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
}

RogueString* RogueFile__absolute_filepath__String( RogueString* filepath_0 )
{
  if (!(!!(filepath_0)))
  {
    return (RogueString*)(((RogueString*)(NULL)));
  }
  if (!((RogueFile__exists__String( filepath_0 ))))
  {
    RogueString* parent_1 = ((RogueFile__path__String( filepath_0 )));
    if (parent_1->count == 0)
    {
      parent_1 = ((RogueString*)Rogue_literal_strings[51]);
    }
    return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (RogueFile__absolute_filepath__String( parent_1 )) ))) ))), Rogue_literal_strings[48] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (RogueFile__filename__String( filepath_0 )) ))) ))) ))));
  }
#if defined(_WIN32)
  {
    char c_filepath[ PATH_MAX ];
    RogueString_to_c_string( filepath_0, c_filepath, PATH_MAX );
    char long_name[PATH_MAX+4];
    char full_name[PATH_MAX+4];
    if (GetInt64PathName(c_filepath, long_name, PATH_MAX+4) == 0)
    {
      strcpy_s( long_name, PATH_MAX+4, c_filepath );
    }
    if (GetFullPathName(long_name, PATH_MAX+4, full_name, 0) == 0)
    {
      // bail with name unchanged
      return filepath_0;
    }
    return RogueString_create_from_c_string( full_name, -1 );
  }
#else
  {
    int original_dir_fd;
    int new_dir_fd;
    char filename[PATH_MAX];
    char c_filepath[ PATH_MAX ];
    bool is_folder;
    is_folder = RogueFile__is_folder__String( filepath_0 );
    RogueString_to_c_string( filepath_0, c_filepath, PATH_MAX );
    // A way to get back to the starting folder when finished.
    original_dir_fd = open( ".", O_RDONLY );
    if (is_folder)
    {
      filename[0] = 0;
    }
    else
    {
      // fchdir only works with a path, not a path+filename (c_filepath).
      // Copy out the filename and null terminate the filepath to be just a path.
      int i = (int) strlen( c_filepath ) - 1;
      while (i >= 0 && c_filepath[i] != '/') --i;
      strcpy( filename, c_filepath+i+1 );
      if (i == -1) strcpy( c_filepath, "." );
      else         c_filepath[i] = 0;
    }
    new_dir_fd = open( c_filepath, O_RDONLY );
    if (original_dir_fd >= 0 && new_dir_fd >= 0)
    {
      fchdir( new_dir_fd );
      getcwd( c_filepath, PATH_MAX );
      if ( !is_folder )
      {
        strcat( c_filepath, "/" );
        strcat( c_filepath, filename );
      }
      fchdir( original_dir_fd );
    }
    if (original_dir_fd >= 0) close( original_dir_fd );
    if (new_dir_fd >= 0) close( new_dir_fd );
    return RogueString_create_from_c_string( c_filepath, -1 );
  }
#endif

}

RogueLogical RogueFile__exists__String( RogueString* filepath_0 )
{
  if ( !filepath_0 ) return false;
  char c_filepath[ PATH_MAX ];
  RogueString_to_c_string( filepath_0, c_filepath, PATH_MAX );
  FILE* fp = fopen( c_filepath, "rb" );
  if ( !fp ) return false;
  fclose( fp );
  return true;

}

RogueString* RogueFile__filename__String( RogueString* filepath_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate_last__Character_OptionalInt32( filepath_0, (RogueCharacter)'/', RogueOptionalInt32() ))));
  if (!(i_1.exists))
  {
    i_1 = ((RogueOptionalInt32)((RogueString__locate_last__Character_OptionalInt32( filepath_0, (RogueCharacter)'\\', RogueOptionalInt32() ))));
  }
  if (!(i_1.exists))
  {
    return (RogueString*)(filepath_0);
  }
  return (RogueString*)(((RogueString__from__Int32( filepath_0, (i_1.value + 1) ))));
}

RogueLogical RogueFile__is_folder__String( RogueString* filepath_0 )
{
  if ( !filepath_0 ) return false;
  char c_filepath[ PATH_MAX ];
  RogueString_to_c_string( filepath_0, c_filepath, PATH_MAX );
#if defined(_WIN32)
    char filepath_copy[PATH_MAX];
    strcpy( filepath_copy, c_filepath );
    int path_len = strlen( c_filepath );
    int i = strlen(filepath_copy)-1;
    while (i > 0 && (filepath_copy[i] == '/' || filepath_copy[i] == '\\')) filepath_copy[i--] = 0;
    // Windows allows dir\* to count as a directory; guard against.
    for (i=0; filepath_copy[i]; ++i)
    {
      if (filepath_copy[i] == '*' || filepath_copy[i] == '?') return 0;
    }
    WIN32_FIND_DATA entry;
    HANDLE dir = FindFirstFile( filepath_copy, &entry );
    if (dir != INVALID_HANDLE_VALUE)
    {
      if (entry.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
      {
        FindClose( dir );
        return 1;
      }
    }
    FindClose( dir );
    return 0;
#else
    DIR* dir = opendir( c_filepath );
    if ( !dir ) return 0;
    closedir( dir );
    return 1;
#endif

}

RogueString* RogueFile__load_as_string__String( RogueString* filepath_0 )
{
  RogueInt32 count_1 = ((RogueFile__size__String( filepath_0 )));
  RogueStringBuilder* buffer_2 = (((RogueStringBuilder__init__Int32( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)), count_1 ))));
  RogueClassFileReader* infile_3 = ((RogueFile__reader__String( filepath_0 )));
  {
    RogueInt32 _auto_372_4 = (1);
    RogueInt32 _auto_373_5 = (count_1);
    for (;_auto_372_4 <= _auto_373_5;++_auto_372_4)
    {
      RogueStringBuilder__print__Character( buffer_2, ((RogueFileReader__read( infile_3 ))) );
    }
  }
  RogueFileReader__close( infile_3 );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_2 ))));
}

RogueString* RogueFile__path__String( RogueString* filepath_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate_last__Character_OptionalInt32( filepath_0, (RogueCharacter)'/', RogueOptionalInt32() ))));
  if (!(i_1.exists))
  {
    i_1 = ((RogueOptionalInt32)((RogueString__locate_last__Character_OptionalInt32( filepath_0, (RogueCharacter)'\\', RogueOptionalInt32() ))));
  }
  if (!(i_1.exists))
  {
    return (RogueString*)(Rogue_literal_strings[0]);
  }
  return (RogueString*)(((RogueString__from__Int32_Int32( filepath_0, 0, (i_1.value - 1) ))));
}

RogueClassFileReader* RogueFile__reader__String( RogueString* filepath_0 )
{
  return (RogueClassFileReader*)(((RogueFileReader__init__String( ((RogueClassFileReader*)ROGUE_CREATE_OBJECT(FileReader)), filepath_0 ))));
}

RogueLogical RogueFile__save__String_String( RogueString* filepath_0, RogueString* data_1 )
{
  RogueClassFileWriter* outfile_2 = ((RogueFile__writer__String( filepath_0 )));
  {
    RogueString* _auto_1393_3 = (data_1);
    RogueInt32 _auto_1394_4 = (0);
    for (;_auto_1394_4 < _auto_1393_3->count;++_auto_1394_4)
    {
      RogueCharacter ch_5 = (_auto_1393_3->characters[_auto_1394_4]);
      RogueFileWriter__write__Character( outfile_2, ch_5 );
    }
  }
  RogueFileWriter__close( outfile_2 );
  return (RogueLogical)(!(outfile_2->error));
}

RogueInt32 RogueFile__size__String( RogueString* filepath_0 )
{
  if ( !filepath_0 ) return 0;
  char c_filepath[ PATH_MAX ];
  RogueString_to_c_string( filepath_0, c_filepath, sizeof(c_filepath) );
  FILE* fp = fopen( c_filepath, "rb" );
  if ( !fp ) return 0;
  fseek( fp, 0, SEEK_END );
  RogueInt32 size = (RogueInt32) ftell( fp );
  fclose( fp );
  return size;

}

RogueClassFileWriter* RogueFile__writer__String( RogueString* filepath_0 )
{
  return (RogueClassFileWriter*)(((RogueFileWriter__init__String( ((RogueClassFileWriter*)ROGUE_CREATE_OBJECT(FileWriter)), filepath_0 ))));
}

void RoguePreprocessor__init_class()
{
  RoguePreprocessor_definitions = ((RogueString_TokenListTable__init( ((RogueClassString_TokenListTable*)ROGUE_CREATE_OBJECT(String_TokenListTable)) )));
}


RogueLogical RogueReal64__is_infinite( RogueReal64 THIS )
{
  return (RogueLogical)((THIS == THIS && (THIS - THIS) != 0.0));
}

RogueLogical RogueReal64__is_not_a_number( RogueReal64 THIS )
{
  return (RogueLogical)(THIS != THIS);
}

RogueInt32 RogueInt32__hash_code( RogueInt32 THIS )
{
  return (RogueInt32)(THIS);
}

RogueString* RogueInt32__to_String( RogueInt32 THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], THIS ))));
}

RogueString* RogueStringBuilder__to_String( RogueStringBuilder* THIS )
{
  return (RogueString*)(RogueString_create_from_characters( THIS->characters ));
}

RogueString* RogueStringBuilder__type_name( RogueStringBuilder* THIS )
{
  return (RogueString*)(Rogue_literal_strings[41]);
}

RogueStringBuilder* RogueStringBuilder__init( RogueStringBuilder* THIS )
{
  RogueStringBuilder__init__Int32( THIS, 40 );
  return (RogueStringBuilder*)(THIS);
}

RogueStringBuilder* RogueStringBuilder__init__Int32( RogueStringBuilder* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->characters = ((RogueCharacterList__init__Int32( ((RogueCharacterList*)ROGUE_CREATE_OBJECT(CharacterList)), initial_capacity_0 )));
  return (RogueStringBuilder*)(THIS);
}

RogueStringBuilder* RogueStringBuilder__clear( RogueStringBuilder* THIS )
{
  RogueCharacterList__clear( THIS->characters );
  THIS->at_newline = true;
  return (RogueStringBuilder*)(THIS);
}

RogueStringBuilder* RogueStringBuilder__insert_spaces__Int32_Int32_Character( RogueStringBuilder* THIS, RogueInt32 index_0, RogueInt32 spaces_1, RogueCharacter character_2 )
{
  if (((spaces_1 > 0 && index_0 >= 0) && index_0 < THIS->characters->count))
  {
    RogueCharacterList__shift__Int32_OptionalInt32_Int32_OptionalCharacter( THIS->characters, index_0, RogueOptionalInt32(), spaces_1, RogueOptionalCharacter( character_2 ) );
  }
  return (RogueStringBuilder*)(THIS);
}

RogueLogical RogueStringBuilder__needs_indent( RogueStringBuilder* THIS )
{
  return (RogueLogical)((THIS->at_newline && THIS->indent > 0));
}

RogueStringBuilder* RogueStringBuilder__print__Character( RogueStringBuilder* THIS, RogueCharacter value_0 )
{
  if (value_0 == (RogueCharacter)10)
  {
    THIS->at_newline = true;
  }
  else if (((RogueStringBuilder__needs_indent( THIS ))))
  {
    RogueStringBuilder__print_indent( THIS );
  }
  RogueCharacterList__add__Character( THIS->characters, value_0 );
  return (RogueStringBuilder*)(THIS);
}

RogueStringBuilder* RogueStringBuilder__print__Int32( RogueStringBuilder* THIS, RogueInt32 value_0 )
{
  return (RogueStringBuilder*)(((RogueStringBuilder__print__Int64( THIS, ((RogueInt64)(value_0)) ))));
}

RogueStringBuilder* RogueStringBuilder__print__Logical( RogueStringBuilder* THIS, RogueLogical value_0 )
{
  if (value_0)
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__String( THIS, Rogue_literal_strings[169] ))));
  }
  else
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__String( THIS, Rogue_literal_strings[158] ))));
  }
}

RogueStringBuilder* RogueStringBuilder__print__Int64( RogueStringBuilder* THIS, RogueInt64 value_0 )
{
  if (value_0 == (((RogueInt64)(1)) << ((RogueInt64)63)))
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__String( THIS, Rogue_literal_strings[227] ))));
  }
  else if (value_0 < ((RogueInt64)0))
  {
    RogueStringBuilder__print__Character( THIS, (RogueCharacter)'-' );
    return (RogueStringBuilder*)(((RogueStringBuilder__print__Int64( THIS, (-(value_0)) ))));
  }
  else if (value_0 >= ((RogueInt64)10))
  {
    RogueStringBuilder__print__Int64( THIS, (value_0 / ((RogueInt64)10)) );
    return (RogueStringBuilder*)(((RogueStringBuilder__print__Character( THIS, ((RogueCharacter)((((RogueInt64)((RogueCharacter)'0')) + (RogueMath__mod__Int64_Int64( value_0, ((RogueInt64)10) ))))) ))));
  }
  else
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__Character( THIS, ((RogueCharacter)((((RogueInt64)((RogueCharacter)'0')) + value_0))) ))));
  }
}

RogueStringBuilder* RogueStringBuilder__print__Object( RogueStringBuilder* THIS, RogueObject* value_0 )
{
  if (!!(value_0))
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__String( THIS, (call_ROGUEM2( 1, (RogueObject*)(value_0) )) ))));
  }
  return (RogueStringBuilder*)(((RogueStringBuilder__print__String( THIS, Rogue_literal_strings[1] ))));
}

RogueStringBuilder* RogueStringBuilder__print__Real64( RogueStringBuilder* THIS, RogueReal64 value_0 )
{
  if (value_0 == 0.0)
  {
    RogueStringBuilder__print__String( THIS, Rogue_literal_strings[770] );
    return (RogueStringBuilder*)(THIS);
  }
  else if (((RogueReal64__is_infinite( value_0 ))))
  {
    if (value_0 < 0.0)
    {
      RogueStringBuilder__print__String( THIS, Rogue_literal_strings[771] );
    }
    else
    {
      RogueStringBuilder__print__String( THIS, Rogue_literal_strings[160] );
    }
    return (RogueStringBuilder*)(THIS);
  }
  else if (((RogueReal64__is_not_a_number( value_0 ))))
  {
    RogueStringBuilder__print__String( THIS, Rogue_literal_strings[162] );
    return (RogueStringBuilder*)(THIS);
  }
  if (value_0 < 0.0)
  {
    RogueStringBuilder__print__Character( THIS, (RogueCharacter)'-' );
    value_0 = ((RogueReal64)(-(value_0)));
  }
  if (value_0 >= 1.0e15)
  {
    RogueInt32 pow10_1 = (0);
    while (value_0 >= 10.0)
    {
      value_0 /= 10.0;
      ++pow10_1;
    }
    return (RogueStringBuilder*)(((RogueStringBuilder__print__Int32( ((RogueStringBuilder__print__Character( ((RogueStringBuilder__print__Real64( THIS, value_0 ))), (RogueCharacter)'e' ))), pow10_1 ))));
  }
  if (value_0 < 0.00001)
  {
    RogueInt32 pow10_2 = (0);
    while (value_0 < 0.1)
    {
      value_0 *= 10.0;
      --pow10_2;
    }
    return (RogueStringBuilder*)(((RogueStringBuilder__print__Int32( ((RogueStringBuilder__print__Character( ((RogueStringBuilder__print__Real64( THIS, value_0 ))), (RogueCharacter)'e' ))), pow10_2 ))));
  }
  {
    RogueInt32 decimal_count_3 = (1);
    RogueInt32 _auto_0_4 = (18);
    for (;decimal_count_3 <= _auto_0_4;++decimal_count_3)
    {
      RogueStringBuilder__print_to_work_bytes__Real64_Int32( THIS, value_0, decimal_count_3 );
      if (((RogueStringBuilder__scan_work_bytes( THIS ))) == value_0)
      {
        goto _auto_326;
      }
    }
  }
  _auto_326:;
  RogueStringBuilder__print_work_bytes( THIS );
  return (RogueStringBuilder*)(THIS);
}

RogueStringBuilder* RogueStringBuilder__print__String( RogueStringBuilder* THIS, RogueString* value_0 )
{
  if (!!(value_0))
  {
    if (!!(THIS->indent))
    {
      {
        RogueString* _auto_327_1 = (value_0);
        RogueInt32 _auto_328_2 = (0);
        for (;_auto_328_2 < _auto_327_1->count;++_auto_328_2)
        {
          RogueCharacter ch_3 = (_auto_327_1->characters[_auto_328_2]);
          RogueStringBuilder__print__Character( THIS, ch_3 );
        }
      }
    }
    else
    {
      {
        RogueString* _auto_329_4 = (value_0);
        RogueInt32 _auto_330_5 = (0);
        for (;_auto_330_5 < _auto_329_4->count;++_auto_330_5)
        {
          RogueCharacter ch_6 = (_auto_329_4->characters[_auto_330_5]);
          RogueCharacterList__add__Character( THIS->characters, ch_6 );
        }
      }
      if ((!!(value_0->count) && ((RogueString__last( value_0 ))) == (RogueCharacter)10))
      {
        THIS->at_newline = true;
      }
    }
    return (RogueStringBuilder*)(THIS);
  }
  else
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__String( THIS, Rogue_literal_strings[1] ))));
  }
}

void RogueStringBuilder__print_indent( RogueStringBuilder* THIS )
{
  if ((!(((RogueStringBuilder__needs_indent( THIS )))) || THIS->indent == 0))
  {
    return;
  }
  {
    RogueInt32 i_0 = (1);
    RogueInt32 _auto_1_1 = (THIS->indent);
    for (;i_0 <= _auto_1_1;++i_0)
    {
      RogueCharacterList__add__Character( THIS->characters, (RogueCharacter)' ' );
    }
  }
  THIS->at_newline = false;
}

RogueStringBuilder* RogueStringBuilder__print_to_work_bytes__Real64_Int32( RogueStringBuilder* THIS, RogueReal64 value_0, RogueInt32 decimal_places_1 )
{
  RogueByteList__clear( RogueStringBuilder_work_bytes );
  RogueReal64 whole_2 = (floor((double)value_0));
  value_0 -= whole_2;
  while (whole_2 >= 10.0)
  {
    RogueByteList__add__Byte( RogueStringBuilder_work_bytes, ((RogueByte)(((RogueCharacter)((((RogueInt32)((RogueCharacter)'0')) + ((RogueInt32)((RogueMath__mod__Real64_Real64( whole_2, 10.0 ))))))))) );
    whole_2 /= 10.0;
  }
  RogueByteList__add__Byte( RogueStringBuilder_work_bytes, ((RogueByte)(((RogueCharacter)((((RogueInt32)((RogueCharacter)'0')) + ((RogueInt32)((RogueMath__mod__Real64_Real64( whole_2, 10.0 ))))))))) );
  RogueByteList__reverse( RogueStringBuilder_work_bytes );
  if (decimal_places_1 != 0)
  {
    RogueByteList__add__Byte( RogueStringBuilder_work_bytes, ((RogueByte)((RogueCharacter)'.')) );
    {
      RogueInt32 _auto_2_3 = (1);
      RogueInt32 _auto_3_4 = (decimal_places_1);
      for (;_auto_2_3 <= _auto_3_4;++_auto_2_3)
      {
        value_0 *= 10.0;
        RogueInt32 digit_5 = (((RogueInt32)(floor((double)value_0))));
        value_0 -= ((RogueReal64)(digit_5));
        RogueByteList__add__Byte( RogueStringBuilder_work_bytes, ((RogueByte)(((RogueCharacter)((((RogueInt32)((RogueCharacter)'0')) + digit_5))))) );
      }
    }
  }
  if (value_0 >= 0.5)
  {
    RogueByteList__add__Byte( RogueStringBuilder_work_bytes, ((RogueByte)((RogueCharacter)'5')) );
    RogueStringBuilder__round_off_work_bytes( THIS );
  }
  return (RogueStringBuilder*)(THIS);
}

void RogueStringBuilder__print_work_bytes( RogueStringBuilder* THIS )
{
  {
    RogueByteList* _auto_331_0 = (RogueStringBuilder_work_bytes);
    RogueInt32 _auto_332_1 = (0);
    for (;_auto_332_1 < _auto_331_0->count;++_auto_332_1)
    {
      RogueByte digit_2 = (_auto_331_0->data->bytes[_auto_332_1]);
      RogueStringBuilder__print__Character( THIS, ((RogueCharacter)(digit_2)) );
    }
  }
}

RogueStringBuilder* RogueStringBuilder__println( RogueStringBuilder* THIS )
{
  return (RogueStringBuilder*)(((RogueStringBuilder__print__Character( THIS, (RogueCharacter)10 ))));
}

RogueStringBuilder* RogueStringBuilder__println__Int32( RogueStringBuilder* THIS, RogueInt32 value_0 )
{
  return (RogueStringBuilder*)(((RogueStringBuilder__print__Character( ((RogueStringBuilder__print__Int32( THIS, value_0 ))), (RogueCharacter)10 ))));
}

RogueStringBuilder* RogueStringBuilder__println__String( RogueStringBuilder* THIS, RogueString* value_0 )
{
  return (RogueStringBuilder*)(((RogueStringBuilder__print__Character( ((RogueStringBuilder__print__String( THIS, value_0 ))), (RogueCharacter)10 ))));
}

RogueStringBuilder* RogueStringBuilder__reserve__Int32( RogueStringBuilder* THIS, RogueInt32 additional_count_0 )
{
  RogueCharacterList__reserve__Int32( THIS->characters, additional_count_0 );
  return (RogueStringBuilder*)(THIS);
}

void RogueStringBuilder__round_off_work_bytes( RogueStringBuilder* THIS )
{
  if (((RogueCharacter)(((RogueByteList__remove_last( RogueStringBuilder_work_bytes ))))) >= (RogueCharacter)'5')
  {
    RogueInt32 i_0 = ((RogueStringBuilder_work_bytes->count - 1));
    while (i_0 >= 0)
    {
      if (((RogueCharacter)(RogueStringBuilder_work_bytes->data->bytes[i_0])) != (RogueCharacter)'.')
      {
        RogueStringBuilder_work_bytes->data->bytes[i_0] = ((RogueByte)((((RogueInt32)(RogueStringBuilder_work_bytes->data->bytes[i_0])) + 1)));
        if (((RogueInt32)(RogueStringBuilder_work_bytes->data->bytes[i_0])) == (((RogueInt32)((RogueCharacter)'9')) + 1))
        {
          RogueStringBuilder_work_bytes->data->bytes[i_0] = ((RogueByte)((RogueCharacter)'0'));
        }
        else
        {
          return;
        }
      }
      --i_0;
    }
    RogueByteList__insert__Byte_Int32( RogueStringBuilder_work_bytes, ((RogueByte)((RogueCharacter)'1')), 0 );
  }
}

RogueReal64 RogueStringBuilder__scan_work_bytes( RogueStringBuilder* THIS )
{
  RogueReal64 whole_0 = (0.0);
  RogueReal64 decimal_1 = (0.0);
  RogueInt32 decimal_count_2 = (0);
  RogueLogical scanning_whole_3 = (true);
  {
    RogueByteList* _auto_333_4 = (RogueStringBuilder_work_bytes);
    RogueInt32 _auto_334_5 = (0);
    for (;_auto_334_5 < _auto_333_4->count;++_auto_334_5)
    {
      RogueByte digit_6 = (_auto_333_4->data->bytes[_auto_334_5]);
      if (scanning_whole_3)
      {
        if (((RogueCharacter)(digit_6)) == (RogueCharacter)'.')
        {
          scanning_whole_3 = ((RogueLogical)false);
        }
        else
        {
          whole_0 = ((RogueReal64)((whole_0 * 10.0) + ((RogueReal64)((((RogueCharacter)(digit_6)) - (RogueCharacter)'0')))));
        }
      }
      else
      {
        decimal_1 = ((RogueReal64)((decimal_1 * 10.0) + ((RogueReal64)((((RogueCharacter)(digit_6)) - (RogueCharacter)'0')))));
        ++decimal_count_2;
      }
    }
  }
  return (RogueReal64)((whole_0 + (decimal_1 / ((RogueReal64) pow((double)10.0, (double)((RogueReal64)(decimal_count_2)))))));
}

RogueStringBuilder* RogueStringBuilder__init_object( RogueStringBuilder* THIS )
{
  THIS->at_newline = true;
  return (RogueStringBuilder*)(THIS);
}

RogueLogical RogueObject__operatorEQUALSEQUALS__Object( RogueObject* THIS, RogueObject* other_0 )
{
  return (RogueLogical)(((void*)THIS) == ((void*)other_0));
}

RogueString* RogueObject__to_String( RogueObject* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( Rogue_literal_strings[66], (call_ROGUEM2( 2, (RogueObject*)(THIS) )) ))), Rogue_literal_strings[67] ))));
}

RogueString* RogueObject__type_name( RogueObject* THIS )
{
  return (RogueString*)(Rogue_literal_strings[39]);
}

RogueString* RogueByte__to_String( RogueByte THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], ((RogueInt32)(THIS)) ))));
}

RogueLogical RogueCharacter__is_alphanumeric( RogueCharacter THIS )
{
  return (RogueLogical)((((THIS >= (RogueCharacter)'0' && THIS <= (RogueCharacter)'9') || (THIS >= (RogueCharacter)'a' && THIS <= (RogueCharacter)'z')) || (THIS >= (RogueCharacter)'A' && THIS <= (RogueCharacter)'Z')));
}

RogueLogical RogueCharacter__is_identifier( RogueCharacter THIS )
{
  return (RogueLogical)(((((THIS >= (RogueCharacter)'a' && THIS <= (RogueCharacter)'z') || (THIS >= (RogueCharacter)'A' && THIS <= (RogueCharacter)'Z')) || THIS == (RogueCharacter)'_') || (THIS >= (RogueCharacter)'0' && THIS <= (RogueCharacter)'9')));
}

RogueLogical RogueCharacter__is_letter( RogueCharacter THIS )
{
  return (RogueLogical)(((THIS >= (RogueCharacter)'a' && THIS <= (RogueCharacter)'z') || (THIS >= (RogueCharacter)'A' && THIS <= (RogueCharacter)'Z')));
}

RogueLogical RogueCharacter__is_number__Int32( RogueCharacter THIS, RogueInt32 base_0 )
{
  return (RogueLogical)(((RogueCharacter__to_number__Int32( THIS, base_0 ))) != -1);
}

RogueString* RogueCharacter__to_String( RogueCharacter THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Character( Rogue_literal_strings[0], THIS ))));
}

RogueInt32 RogueCharacter__to_number__Int32( RogueCharacter THIS, RogueInt32 base_0 )
{
  if ((THIS >= (RogueCharacter)'0' && ((RogueInt32)(THIS)) < (((RogueInt32)((RogueCharacter)'0')) + base_0)))
  {
    return (RogueInt32)((THIS - (RogueCharacter)'0'));
  }
  if ((THIS >= (RogueCharacter)'a' && ((RogueInt32)(THIS)) < (((RogueInt32)((RogueCharacter)'a')) + (base_0 - 10))))
  {
    return (RogueInt32)(((THIS - (RogueCharacter)'a') + 10));
  }
  if ((THIS >= (RogueCharacter)'A' && ((RogueInt32)(THIS)) < (((RogueInt32)((RogueCharacter)'A')) + (base_0 - 10))))
  {
    return (RogueInt32)(((THIS - (RogueCharacter)'A') + 10));
  }
  return (RogueInt32)(-1);
}

RogueString* RogueString__after__Int32( RogueString* THIS, RogueInt32 index_0 )
{
  return (RogueString*)(((RogueString__from__Int32( THIS, (index_0 + 1) ))));
}

RogueString* RogueString__before__Int32( RogueString* THIS, RogueInt32 index_0 )
{
  return (RogueString*)(((RogueString__from__Int32_Int32( THIS, 0, (index_0 - 1) ))));
}

RogueString* RogueString__after_any__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate_last__Character_OptionalInt32( THIS, ch_0, RogueOptionalInt32() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Int32( THIS, (i_1.value + 1) ))));
  }
  else
  {
    return (RogueString*)(THIS);
  }
}

RogueString* RogueString__after_first__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate__Character_OptionalInt32( THIS, ch_0, RogueOptionalInt32() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Int32( THIS, (i_1.value + 1) ))));
  }
  else
  {
    return (RogueString*)(Rogue_literal_strings[0]);
  }
}

RogueString* RogueString__after_first__String( RogueString* THIS, RogueString* st_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate__String_OptionalInt32( THIS, st_0, RogueOptionalInt32() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Int32( THIS, (i_1.value + st_0->count) ))));
  }
  else
  {
    return (RogueString*)(Rogue_literal_strings[0]);
  }
}

RogueString* RogueString__after_last__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate_last__Character_OptionalInt32( THIS, ch_0, RogueOptionalInt32() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Int32( THIS, (i_1.value + 1) ))));
  }
  else
  {
    return (RogueString*)(Rogue_literal_strings[0]);
  }
}

RogueString* RogueString__before_first__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate__Character_OptionalInt32( THIS, ch_0, RogueOptionalInt32() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Int32_Int32( THIS, 0, (i_1.value - 1) ))));
  }
  else
  {
    return (RogueString*)(THIS);
  }
}

RogueString* RogueString__before_first__String( RogueString* THIS, RogueString* st_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate__String_OptionalInt32( THIS, st_0, RogueOptionalInt32() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Int32_Int32( THIS, 0, (i_1.value - 1) ))));
  }
  else
  {
    return (RogueString*)(THIS);
  }
}

RogueString* RogueString__before_last__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate_last__Character_OptionalInt32( THIS, ch_0, RogueOptionalInt32() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Int32_Int32( THIS, 0, (i_1.value - 1) ))));
  }
  else
  {
    return (RogueString*)(THIS);
  }
}

RogueString* RogueString__before_last__String( RogueString* THIS, RogueString* st_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate_last__String_OptionalInt32( THIS, st_0, RogueOptionalInt32() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Int32_Int32( THIS, 0, (i_1.value - 1) ))));
  }
  else
  {
    return (RogueString*)(THIS);
  }
}

RogueLogical RogueString__begins_with__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  return (RogueLogical)((!!(THIS->count) && THIS->characters[0] == ch_0));
}

RogueLogical RogueString__begins_with__String( RogueString* THIS, RogueString* other_0 )
{
  RogueInt32 other_count_1 = (other_0->count);
  return (RogueLogical)((THIS->count >= other_count_1 && ((RogueString__contains_at__String_Int32( THIS, other_0, 0 )))));
}

RogueLogical RogueString__contains__String( RogueString* THIS, RogueString* substring_0 )
{
  return (RogueLogical)(((RogueString__locate__String_OptionalInt32( THIS, substring_0, RogueOptionalInt32() ))).exists);
}

RogueLogical RogueString__contains_at__String_Int32( RogueString* THIS, RogueString* substring_0, RogueInt32 at_index_1 )
{
  RogueInt32 other_count = substring_0->count;
  if (at_index_1 < 0 || at_index_1 + other_count > THIS->count) return false;
  RogueCharacter* this_data  = THIS->characters;
  RogueCharacter* other_data = substring_0->characters;
  int i = -1;
  int i2 = other_count - 1;
  while (++i <= i2)
  {
    if (this_data[at_index_1+i] != other_data[i]) return false;
  }
  return true;

}

RogueString* RogueString__decode_utf8( RogueString* THIS )
{
  RogueLogical needs_decoding_0 = (false);
  {
    RogueString* _auto_17_4 = (THIS);
    RogueInt32 _auto_18_5 = (0);
    for (;_auto_18_5 < _auto_17_4->count;++_auto_18_5)
    {
      RogueCharacter ch_6 = (_auto_17_4->characters[_auto_18_5]);
      if (((RogueInt32)(ch_6)) >= 128)
      {
        needs_decoding_0 = ((RogueLogical)true);
        goto _auto_19;
      }
    }
  }
  _auto_19:;
  if (!(needs_decoding_0))
  {
    return (RogueString*)(THIS);
  }
  RogueStringBuilder* buffer_1 = (((RogueStringBuilder__init__Int32( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)), THIS->count ))));
  RogueClassStringReader* characters_2 = (((RogueString__reader( THIS ))));
  while (((RogueStringReader__has_another( characters_2 ))))
  {
    RogueInt32 value_3 = (((RogueInt32)(((RogueStringReader__read( characters_2 ))))));
    if (value_3 <= 127)
    {
      RogueStringBuilder__print__Character( buffer_1, ((RogueCharacter)(value_3)) );
    }
    else if ((value_3 & 224) == 192)
    {
      value_3 = ((RogueInt32)(((value_3 & 31) << 6) | (((RogueInt32)(((RogueStringReader__read( characters_2 ))))) & 63)));
      RogueStringBuilder__print__Character( buffer_1, ((RogueCharacter)(value_3)) );
    }
    else if ((value_3 & 240) == 224)
    {
      value_3 = ((RogueInt32)(((value_3 & 15) << 6) | (((RogueInt32)(((RogueStringReader__read( characters_2 ))))) & 63)));
      value_3 = ((RogueInt32)((value_3 << 6) | (((RogueInt32)(((RogueStringReader__read( characters_2 ))))) & 63)));
      RogueStringBuilder__print__Character( buffer_1, ((RogueCharacter)(value_3)) );
    }
    else if (((RogueStringReader__has_another__Int32( characters_2, 3 ))))
    {
      value_3 = ((RogueInt32)(((value_3 & 7) << 18) | ((((RogueInt32)(((RogueStringReader__read( characters_2 ))))) & 63) << 12)));
      value_3 |= ((((RogueInt32)(((RogueStringReader__read( characters_2 ))))) & 63) << 6);
      value_3 |= (((RogueInt32)(((RogueStringReader__read( characters_2 ))))) & 63);
      if (value_3 >= 65536)
      {
        value_3 -= 65536;
        RogueStringBuilder__print__Character( buffer_1, ((RogueCharacter)((55296 + ((value_3 >> 10) & 1023)))) );
        RogueStringBuilder__print__Character( buffer_1, ((RogueCharacter)((56320 + (value_3 & 1023)))) );
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_1, ((RogueCharacter)(value_3)) );
      }
    }
  }
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_1 ))));
}

RogueLogical RogueString__ends_with__String( RogueString* THIS, RogueString* other_0 )
{
  RogueInt32 other_count_1 = (other_0->count);
  return (RogueLogical)(((THIS->count >= other_count_1 && other_count_1 > 0) && ((RogueString__contains_at__String_Int32( THIS, other_0, (THIS->count - other_count_1) )))));
}

RogueString* RogueString__from__Int32( RogueString* THIS, RogueInt32 i1_0 )
{
  return (RogueString*)(((RogueString__from__Int32_Int32( THIS, i1_0, (THIS->count - 1) ))));
}

RogueString* RogueString__from__Int32_Int32( RogueString* THIS, RogueInt32 i1_0, RogueInt32 i2_1 )
{
  // Clamp i1 and i2
  if (i1_0 < 0) i1_0 = 0;
  if (i2_1 >= THIS->count) i2_1 = THIS->count - 1;
  // Return empty quotes if zero-length
  if (i1_0 > i2_1) return Rogue_literal_strings[0]; // empty string
  int new_count = (i2_1 - i1_0) + 1;
  RogueString* result = RogueString_create_with_count( new_count );
  // Copy character substring while computing hash code.
  RogueCharacter* dest = result->characters - 1;
  RogueCharacter* src  = (THIS->characters + i1_0) - 1;
  RogueInt32 hash_code = 0;
  while (--new_count >= 0)
  {
    RogueCharacter ch = *(++src);
    *(++dest) = ch;
    hash_code = ((hash_code << 3) - hash_code) + ch;  // hash * 7 + ch
  }
  result->hash_code = hash_code;
  return result;

}

RogueString* RogueString__from_first__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate__Character_OptionalInt32( THIS, ch_0, RogueOptionalInt32() ))));
  if (!(i_1.exists))
  {
    return (RogueString*)(Rogue_literal_strings[0]);
  }
  return (RogueString*)(((RogueString__from__Int32( THIS, i_1.value ))));
}

RogueCharacter RogueString__last( RogueString* THIS )
{
  return (RogueCharacter)(THIS->characters[(THIS->count - 1)]);
}

RogueString* RogueString__left_justified__Int32( RogueString* THIS, RogueInt32 spaces_0 )
{
  if (THIS->count >= spaces_0)
  {
    return (RogueString*)(THIS);
  }
  RogueStringBuilder* buffer_1 = (((RogueStringBuilder__init__Int32( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)), spaces_0 ))));
  RogueStringBuilder__print__String( buffer_1, THIS );
  {
    RogueInt32 _auto_4_2 = (THIS->count);
    RogueInt32 _auto_5_3 = (spaces_0);
    for (;_auto_4_2 <= _auto_5_3;++_auto_4_2)
    {
      RogueStringBuilder__print__Character( buffer_1, (RogueCharacter)' ' );
    }
  }
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_1 ))));
}

RogueString* RogueString__leftmost__Int32( RogueString* THIS, RogueInt32 n_0 )
{
  if (n_0 >= 0)
  {
    return (RogueString*)(((RogueString__from__Int32_Int32( THIS, 0, (n_0 - 1) ))));
  }
  else
  {
    return (RogueString*)(((RogueString__from__Int32_Int32( THIS, 0, ((THIS->count + n_0) - 1) ))));
  }
}

RogueOptionalInt32 RogueString__locate__Character_OptionalInt32( RogueString* THIS, RogueCharacter ch_0, RogueOptionalInt32 optional_i1_1 )
{
  RogueInt32    limit = THIS->count;
  RogueCharacter* data  = THIS->characters;
  RogueInt32    i1 = optional_i1_1.exists ? (optional_i1_1.value-1) : -1;
  while (++i1 < limit)
  {
    if (data[i1] == ch_0)
    {
      return RogueOptionalInt32(i1);
    }
  }
  return RogueOptionalInt32();

}

RogueOptionalInt32 RogueString__locate__String_OptionalInt32( RogueString* THIS, RogueString* other_0, RogueOptionalInt32 optional_i1_1 )
{
  RogueInt32 other_count_2 = (other_0->count);
  if (other_count_2 == 1)
  {
    return (RogueOptionalInt32)(((RogueString__locate__Character_OptionalInt32( THIS, other_0->characters[0], optional_i1_1 ))));
  }
  RogueInt32 this_limit_3 = (((THIS->count - other_count_2) + 1));
  if ((other_count_2 == 0 || this_limit_3 <= 0))
  {
    return (RogueOptionalInt32)(RogueOptionalInt32());
  }
  RogueInt32 i1_4 = 0;
  if (optional_i1_1.exists)
  {
    i1_4 = ((RogueInt32)(optional_i1_1.value - 1));
    if (i1_4 < -1)
    {
      i1_4 = ((RogueInt32)-1);
    }
  }
  else
  {
    i1_4 = ((RogueInt32)-1);
  }
  while (++i1_4 < this_limit_3)
  {
    if (((RogueString__contains_at__String_Int32( THIS, other_0, i1_4 ))))
    {
      return (RogueOptionalInt32)(RogueOptionalInt32( i1_4 ));
    }
  }
  return (RogueOptionalInt32)(RogueOptionalInt32());
}

RogueOptionalInt32 RogueString__locate_last__Character_OptionalInt32( RogueString* THIS, RogueCharacter ch_0, RogueOptionalInt32 starting_index_1 )
{
  RogueInt32    limit = THIS->count;
  RogueCharacter* data  = THIS->characters;
  int i;
  if (starting_index_1.exists)
  {
    i = starting_index_1.value + 1;
    if (i > limit) i = limit;
  }
  else
  {
    i = limit;
  }
  while (--i >= 0)
  {
    if (data[i] == ch_0) return RogueOptionalInt32(i);
  }
  return RogueOptionalInt32();

}

RogueOptionalInt32 RogueString__locate_last__String_OptionalInt32( RogueString* THIS, RogueString* other_0, RogueOptionalInt32 starting_index_1 )
{
  RogueInt32 other_count_2 = (other_0->count);
  if (other_count_2 == 1)
  {
    return (RogueOptionalInt32)(((RogueString__locate_last__Character_OptionalInt32( THIS, other_0->characters[0], starting_index_1 ))));
  }
  RogueInt32 this_limit_3 = (((THIS->count - other_count_2) + 1));
  if ((other_count_2 == 0 || this_limit_3 <= 0))
  {
    return (RogueOptionalInt32)(RogueOptionalInt32());
  }
  RogueInt32 i_4 = 0;
  if (starting_index_1.exists)
  {
    i_4 = ((RogueInt32)(starting_index_1.value + 1));
    if (i_4 > this_limit_3)
    {
      i_4 = ((RogueInt32)this_limit_3);
    }
  }
  else
  {
    i_4 = ((RogueInt32)this_limit_3);
  }
  while (--i_4 >= 0)
  {
    if (((RogueString__contains_at__String_Int32( THIS, other_0, i_4 ))))
    {
      return (RogueOptionalInt32)(RogueOptionalInt32( i_4 ));
    }
  }
  return (RogueOptionalInt32)(RogueOptionalInt32());
}

RogueString* RogueString__operatorPLUS__Character( RogueString* THIS, RogueCharacter value_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__Character( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), THIS ))), value_0 ))) ))));
}

RogueString* RogueString__operatorPLUS__Int32( RogueString* THIS, RogueInt32 value_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__Int32( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), THIS ))), value_0 ))) ))));
}

RogueLogical RogueString__operatorEQUALSEQUALS__String( RogueString* THIS, RogueString* value_0 )
{
  if ((THIS->hash_code != value_0->hash_code || THIS->count != value_0->count))
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)((0==memcmp(THIS->characters,value_0->characters,THIS->count*sizeof(RogueCharacter)))
  );
}

RogueInt32 RogueString__operatorLTGT__String( RogueString* THIS, RogueString* other_0 )
{
  if (THIS == other_0) return 0;
  RogueInt32 other_count = other_0->count;
  RogueInt32 limit = THIS->count;
  int result;
  if (limit == other_count)
  {
    // Strings are same length
    result = memcmp( THIS->characters, other_0->characters, limit * sizeof(RogueCharacter) );
    if (result == 0) return 0;
  }
  else
  {
    // Strings differ in length.  Compare the part that matches first.
    if (limit > other_count) limit = other_count;
    result = memcmp( THIS->characters, other_0->characters, limit * sizeof(RogueCharacter) );
    if (result == 0)
    {
      // Equal so far - the shorter string comes before the longer one.
      if (limit == other_count) return 1;
      return -1;
    }
  }
  if (result < 0) return -1;
  else            return 1;

}

RogueString* RogueString__operatorPLUS__Int64( RogueString* THIS, RogueInt64 value_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__Int64( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), THIS ))), value_0 ))) ))));
}

RogueString* RogueString__operatorPLUS__Object( RogueString* THIS, RogueObject* value_0 )
{
  if (!!(value_0))
  {
    return (RogueString*)(((RogueString__operatorPLUS__String( THIS, (call_ROGUEM2( 1, (RogueObject*)(value_0) )) ))));
  }
  else
  {
    return (RogueString*)(((RogueString__operatorPLUS__String( THIS, Rogue_literal_strings[1] ))));
  }
}

RogueString* RogueString__operatorPLUS__Real64( RogueString* THIS, RogueReal64 value_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__Real64( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), THIS ))), value_0 ))) ))));
}

RogueString* RogueString__operatorPLUS__String( RogueString* THIS, RogueString* value_0 )
{
  if (((void*)value_0) == ((void*)NULL))
  {
    return (RogueString*)(((RogueString__operatorPLUS__String( THIS, Rogue_literal_strings[1] ))));
  }
  if (THIS->count == 0)
  {
    return (RogueString*)(value_0);
  }
  if (value_0->count == 0)
  {
    return (RogueString*)(THIS);
  }
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), THIS ))), value_0 ))) ))));
}

RogueString* RogueString__pluralize__Int32( RogueString* THIS, RogueInt32 quantity_0 )
{
  RogueString* st_1 = (((RogueString__replacing__String_String( THIS, Rogue_literal_strings[325], ((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], quantity_0 ))) ))));
  if (((RogueString__contains__String( st_1, ((RogueCharacter__to_String( (RogueCharacter)'/' ))) ))))
  {
    if (quantity_0 == 1)
    {
      return (RogueString*)(((RogueString__before_first__Character( st_1, (RogueCharacter)'/' ))));
    }
    else
    {
      return (RogueString*)(((RogueString__after_last__Character( st_1, (RogueCharacter)'/' ))));
    }
  }
  else
  {
    RogueOptionalInt32 alt1_2 = (((RogueString__locate__Character_OptionalInt32( st_1, (RogueCharacter)'(', RogueOptionalInt32() ))));
    if (alt1_2.exists)
    {
      RogueOptionalInt32 alt2_3 = (((RogueString__locate__Character_OptionalInt32( st_1, (RogueCharacter)')', RogueOptionalInt32( (alt1_2.value + 1) ) ))));
      if (!(alt2_3.exists))
      {
        return (RogueString*)(THIS);
      }
      if (quantity_0 == 1)
      {
        return (RogueString*)(((RogueString__operatorPLUS__String( ((RogueString__before__Int32( st_1, alt1_2.value ))), ((RogueString__after__Int32( st_1, alt2_3.value ))) ))));
      }
      return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ((RogueString__before__Int32( st_1, alt1_2.value ))) ))) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ((RogueString__from__Int32_Int32( st_1, (alt1_2.value + 1), (alt2_3.value - 1) ))) ))) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ((RogueString__after__Int32( st_1, alt2_3.value ))) ))) ))) ))));
    }
    else
    {
      if (quantity_0 == 1)
      {
        return (RogueString*)(st_1);
      }
      RogueInt32 index_4 = (0);
      RogueInt32 i_5 = (st_1->count);
      while (i_5 > 0)
      {
        --i_5;
        if (((RogueCharacter__is_letter( st_1->characters[i_5] ))))
        {
          index_4 = ((RogueInt32)i_5);
          goto _auto_31;
        }
      }
      _auto_31:;
      if (st_1->characters[index_4] == (RogueCharacter)'s')
      {
        return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ((RogueString__before__Int32( st_1, (index_4 + 1) ))) ))) ))), Rogue_literal_strings[326] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ((RogueString__after__Int32( st_1, index_4 ))) ))) ))) ))));
      }
      else
      {
        return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ((RogueString__before__Int32( st_1, (index_4 + 1) ))) ))) ))), Rogue_literal_strings[327] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ((RogueString__after__Int32( st_1, index_4 ))) ))) ))) ))));
      }
    }
  }
}

RogueClassStringReader* RogueString__reader( RogueString* THIS )
{
  return (RogueClassStringReader*)(((RogueStringReader__init__String( ((RogueClassStringReader*)ROGUE_CREATE_OBJECT(StringReader)), THIS ))));
}

RogueString* RogueString__replacing__Character_Character( RogueString* THIS, RogueCharacter look_for_0, RogueCharacter replace_with_1 )
{
  if (!(((RogueString__contains__String( THIS, ((RogueCharacter__to_String( look_for_0 ))) )))))
  {
    return (RogueString*)(THIS);
  }
  RogueStringBuilder* result_2 = (((RogueStringBuilder__init__Int32( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)), THIS->count ))));
  {
    RogueString* _auto_32_3 = (THIS);
    RogueInt32 _auto_33_4 = (0);
    for (;_auto_33_4 < _auto_32_3->count;++_auto_33_4)
    {
      RogueCharacter ch_5 = (_auto_32_3->characters[_auto_33_4]);
      if (ch_5 == look_for_0)
      {
        RogueStringBuilder__print__Character( result_2, replace_with_1 );
      }
      else
      {
        RogueStringBuilder__print__Character( result_2, ch_5 );
      }
    }
  }
  return (RogueString*)(((RogueStringBuilder__to_String( result_2 ))));
}

RogueString* RogueString__replacing__String_String( RogueString* THIS, RogueString* look_for_0, RogueString* replace_with_1 )
{
  RogueStringBuilder* buffer_2 = (((RogueStringBuilder__init__Int32( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)), (THIS->count * 2) ))));
  RogueString* st_3 = (THIS);
  RogueOptionalInt32 i_4 = (((RogueString__locate__String_OptionalInt32( st_3, look_for_0, RogueOptionalInt32() ))));
  if (!(i_4.exists))
  {
    return (RogueString*)(st_3);
  }
  while (i_4.exists)
  {
    RogueStringBuilder__print__String( buffer_2, ((RogueString__before__Int32( st_3, i_4.value ))) );
    RogueStringBuilder__print__String( buffer_2, replace_with_1 );
    st_3 = ((RogueString*)((RogueString__from__Int32( st_3, (i_4.value + look_for_0->count) ))));
    i_4 = ((RogueOptionalInt32)((RogueString__locate__String_OptionalInt32( st_3, look_for_0, RogueOptionalInt32() ))));
  }
  RogueStringBuilder__print__String( buffer_2, st_3 );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_2 ))));
}

RogueString* RogueString__rightmost__Int32( RogueString* THIS, RogueInt32 n_0 )
{
  RogueInt32 this_count_1 = (THIS->count);
  if (n_0 < 0)
  {
    return (RogueString*)(((RogueString__from__Int32_Int32( THIS, (-(n_0)), (this_count_1 - 1) ))));
  }
  else
  {
    return (RogueString*)(((RogueString__from__Int32_Int32( THIS, (this_count_1 - n_0), (this_count_1 - 1) ))));
  }
}

RogueStringList* RogueString__split__Character( RogueString* THIS, RogueCharacter separator_0 )
{
  RogueStringList* result_1 = (((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) ))));
  RogueInt32 i1_2 = (0);
  RogueOptionalInt32 i2_3 = (((RogueString__locate__Character_OptionalInt32( THIS, separator_0, RogueOptionalInt32( i1_2 ) ))));
  while (i2_3.exists)
  {
    RogueStringList__add__String( result_1, ((RogueString__from__Int32_Int32( THIS, i1_2, (i2_3.value - 1) ))) );
    i1_2 = ((RogueInt32)(i2_3.value + 1));
    i2_3 = ((RogueOptionalInt32)((RogueString__locate__Character_OptionalInt32( THIS, separator_0, RogueOptionalInt32( i1_2 ) ))));
  }
  RogueStringList__add__String( result_1, ((RogueString__from__Int32( THIS, i1_2 ))) );
  return (RogueStringList*)(result_1);
}

RogueString* RogueString__to_lowercase( RogueString* THIS )
{
  RogueLogical has_uc_0 = (false);
  {
    RogueString* _auto_39_2 = (THIS);
    RogueInt32 _auto_40_3 = (0);
    for (;_auto_40_3 < _auto_39_2->count;++_auto_40_3)
    {
      RogueCharacter ch_4 = (_auto_39_2->characters[_auto_40_3]);
      if ((ch_4 >= (RogueCharacter)'A' && ch_4 <= (RogueCharacter)'Z'))
      {
        has_uc_0 = ((RogueLogical)true);
        goto _auto_41;
      }
    }
  }
  _auto_41:;
  if (!(has_uc_0))
  {
    return (RogueString*)(THIS);
  }
  RogueStringBuilder* result_1 = (((RogueStringBuilder__init__Int32( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)), THIS->count ))));
  {
    RogueString* _auto_42_5 = (THIS);
    RogueInt32 _auto_43_6 = (0);
    for (;_auto_43_6 < _auto_42_5->count;++_auto_43_6)
    {
      RogueCharacter ch_7 = (_auto_42_5->characters[_auto_43_6]);
      if ((ch_7 >= (RogueCharacter)'A' && ch_7 <= (RogueCharacter)'Z'))
      {
        RogueStringBuilder__print__Character( result_1, ((RogueCharacter)(((ch_7 - (RogueCharacter)'A') + ((RogueInt32)((RogueCharacter)'a'))))) );
      }
      else
      {
        RogueStringBuilder__print__Character( result_1, ch_7 );
      }
    }
  }
  return (RogueString*)(((RogueStringBuilder__to_String( result_1 ))));
}

RogueString* RogueString__to_utf8( RogueString* THIS )
{
  RogueLogical needs_encoding_0 = (false);
  {
    RogueString* _auto_49_7 = (THIS);
    RogueInt32 _auto_50_8 = (0);
    for (;_auto_50_8 < _auto_49_7->count;++_auto_50_8)
    {
      RogueCharacter ch_9 = (_auto_49_7->characters[_auto_50_8]);
      if (((RogueInt32)(ch_9)) >= 128)
      {
        needs_encoding_0 = ((RogueLogical)true);
        goto _auto_51;
      }
    }
  }
  _auto_51:;
  if (!(needs_encoding_0))
  {
    return (RogueString*)(THIS);
  }
  RogueStringBuilder* result_1 = (((RogueStringBuilder__init__Int32( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)), THIS->count ))));
  RogueInt32 n_2 = (THIS->count);
  RogueInt32 i_3 = (0);
  while (i_3 < n_2)
  {
    RogueCharacter ch_4 = (THIS->characters[i_3]);
    ++i_3;
    if (((RogueInt32)(ch_4)) < 128)
    {
      RogueStringBuilder__print__Character( result_1, ch_4 );
    }
    else if (((RogueInt32)(ch_4)) < 2048)
    {
      RogueStringBuilder__print__Character( result_1, ((RogueCharacter)((((((RogueInt32)(ch_4)) >> 6) & 31) | 192))) );
      RogueStringBuilder__print__Character( result_1, ((RogueCharacter)(((((RogueInt32)(ch_4)) & 63) | 128))) );
    }
    else if (((((RogueInt32)(ch_4)) >= 55296 && ((RogueInt32)(ch_4)) <= 56319) && i_3 < n_2))
    {
      RogueCharacter low_5 = (THIS->characters[i_3]);
      ++i_3;
      if ((((RogueInt32)(low_5)) >= 56320 && ((RogueInt32)(low_5)) <= 57343))
      {
        RogueInt32 value_6 = ((65536 + (((((RogueInt32)(ch_4)) - 55296) << 10) | (((RogueInt32)(low_5)) - 56320))));
        RogueStringBuilder__print__Character( result_1, ((RogueCharacter)((240 | ((value_6 >> 18) & 7)))) );
        RogueStringBuilder__print__Character( result_1, ((RogueCharacter)((128 | ((value_6 >> 12) & 63)))) );
        RogueStringBuilder__print__Character( result_1, ((RogueCharacter)((128 | ((value_6 >> 6) & 63)))) );
        RogueStringBuilder__print__Character( result_1, ((RogueCharacter)(((value_6 & 63) | 128))) );
      }
    }
    else
    {
      RogueStringBuilder__print__Character( result_1, ((RogueCharacter)((((((RogueInt32)(ch_4)) >> 12) & 15) | 224))) );
      RogueStringBuilder__print__Character( result_1, ((RogueCharacter)((((((RogueInt32)(ch_4)) >> 6) & 63) | 128))) );
      RogueStringBuilder__print__Character( result_1, ((RogueCharacter)(((((RogueInt32)(ch_4)) & 63) | 128))) );
    }
  }
  return (RogueString*)(((RogueStringBuilder__to_String( result_1 ))));
}

RogueStringList* RogueString__word_wrapped__Int32( RogueString* THIS, RogueInt32 width_0 )
{
  return (RogueStringList*)(((RogueString__split__Character( ((RogueStringBuilder__to_String( ((RogueString__word_wrapped__Int32_StringBuilder( THIS, width_0, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))), (RogueCharacter)10 ))));
}

RogueStringBuilder* RogueString__word_wrapped__Int32_StringBuilder( RogueString* THIS, RogueInt32 width_0, RogueStringBuilder* buffer_1 )
{
  RogueInt32 i1_2 = 0;
  RogueInt32 i2_3 = 0;
  RogueInt32 len_4 = (THIS->count);
  if (len_4 == 0)
  {
    return (RogueStringBuilder*)(buffer_1);
  }
  RogueLogical needs_newline_5 = (false);
  while (i2_3 < len_4)
  {
    while ((((i2_3 - i1_2) < width_0 && i2_3 < len_4) && THIS->characters[i2_3] != (RogueCharacter)10))
    {
      ++i2_3;
    }
    if ((i2_3 - i1_2) == width_0)
    {
      if (i2_3 >= len_4)
      {
        i2_3 = ((RogueInt32)len_4);
      }
      else
      {
        while (((THIS->characters[i2_3] != (RogueCharacter)' ' && THIS->characters[i2_3] != (RogueCharacter)10) && i2_3 > i1_2))
        {
          --i2_3;
        }
        if (i2_3 == i1_2)
        {
          i2_3 = ((RogueInt32)(i1_2 + width_0));
        }
      }
    }
    if (needs_newline_5)
    {
      RogueStringBuilder__println( buffer_1 );
    }
    {
      RogueInt32 i_6 = (i1_2);
      RogueInt32 _auto_11_7 = ((i2_3 - 1));
      for (;i_6 <= _auto_11_7;++i_6)
      {
        RogueStringBuilder__print__Character( buffer_1, THIS->characters[i_6] );
      }
    }
    needs_newline_5 = ((RogueLogical)true);
    if (i2_3 == len_4)
    {
      return (RogueStringBuilder*)(buffer_1);
    }
    else
    {
      switch (((RogueInt32)(THIS->characters[i2_3])))
      {
        case (RogueCharacter)' ':
        {
          while ((i2_3 < len_4 && THIS->characters[i2_3] == (RogueCharacter)' '))
          {
            ++i2_3;
          }
          if ((i2_3 < len_4 && THIS->characters[i2_3] == (RogueCharacter)10))
          {
            ++i2_3;
          }
          break;
        }
        case (RogueCharacter)10:
        {
          ++i2_3;
          break;
        }
      }
      i1_2 = ((RogueInt32)i2_3);
    }
  }
  return (RogueStringBuilder*)(buffer_1);
}

RogueString* RogueCharacterList__to_String( RogueCharacterList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueCharacterList* _auto_335_2 = (THIS);
    RogueInt32 _auto_336_3 = (0);
    for (;_auto_336_3 < _auto_335_2->count;++_auto_336_3)
    {
      RogueCharacter value_4 = (_auto_335_2->data->characters[_auto_336_3]);
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if ((false))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ((RogueCharacter__to_String( value_4 ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCharacterList__type_name( RogueCharacterList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[675]);
}

RogueCharacterList* RogueCharacterList__init_object( RogueCharacterList* THIS )
{
  return (RogueCharacterList*)(THIS);
}

RogueCharacterList* RogueCharacterList__init__Int32( RogueCharacterList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueCharacter) );
  return (RogueCharacterList*)(THIS);
}

RogueCharacterList* RogueCharacterList__add__Character( RogueCharacterList* THIS, RogueCharacter value_0 )
{
  ((RogueCharacterList__reserve__Int32( THIS, 1 )))->data->characters[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCharacterList*)(THIS);
}

RogueInt32 RogueCharacterList__capacity( RogueCharacterList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueCharacterList* RogueCharacterList__clear( RogueCharacterList* THIS )
{
  THIS->count = 0;
  return (RogueCharacterList*)(THIS);
}

RogueCharacterList* RogueCharacterList__ensure_capacity__Int32( RogueCharacterList* THIS, RogueInt32 desired_capacity_0 )
{
  return (RogueCharacterList*)(((RogueCharacterList__reserve__Int32( THIS, (desired_capacity_0 - THIS->count) ))));
}

RogueCharacterList* RogueCharacterList__expand_to_count__Int32( RogueCharacterList* THIS, RogueInt32 minimum_count_0 )
{
  if (THIS->count < minimum_count_0)
  {
    RogueCharacterList__ensure_capacity__Int32( THIS, minimum_count_0 );
    THIS->count = minimum_count_0;
  }
  return (RogueCharacterList*)(THIS);
}

RogueCharacterList* RogueCharacterList__expand_to_include__Int32( RogueCharacterList* THIS, RogueInt32 index_0 )
{
  return (RogueCharacterList*)(((RogueCharacterList__expand_to_count__Int32( THIS, (index_0 + 1) ))));
}

RogueCharacterList* RogueCharacterList__reserve__Int32( RogueCharacterList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueCharacter) );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueCharacterList__capacity( THIS ))) + ((RogueCharacterList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueCharacter) ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCharacterList*)(THIS);
}

RogueCharacterList* RogueCharacterList__shift__Int32_OptionalInt32_Int32_OptionalCharacter( RogueCharacterList* THIS, RogueInt32 i1_0, RogueOptionalInt32 element_count_1, RogueInt32 delta_2, RogueOptionalCharacter fill_3 )
{
  if (delta_2 == 0)
  {
    return (RogueCharacterList*)(THIS);
  }
  RogueInt32 n_4 = 0;
  if (element_count_1.exists)
  {
    n_4 = ((RogueInt32)element_count_1.value);
  }
  else
  {
    n_4 = ((RogueInt32)(THIS->count - i1_0));
  }
  RogueInt32 dest_i2_5 = ((((i1_0 + delta_2) + n_4) - 1));
  RogueCharacterList__expand_to_include__Int32( THIS, dest_i2_5 );
  RogueArray_set(THIS->data,(i1_0 + delta_2),((RogueArray*)(THIS->data)),i1_0,n_4);
  if (fill_3.exists)
  {
    RogueCharacter value_6 = (fill_3.value);
    if (delta_2 > 0)
    {
      {
        RogueInt32 i_7 = (i1_0);
        RogueInt32 _auto_14_8 = (((i1_0 + delta_2) - 1));
        for (;i_7 <= _auto_14_8;++i_7)
        {
          THIS->data->characters[i_7] = value_6;
        }
      }
    }
    else
    {
      {
        RogueInt32 i_9 = (((i1_0 + delta_2) + n_4));
        RogueInt32 _auto_15_10 = (((i1_0 + n_4) - 1));
        for (;i_9 <= _auto_15_10;++i_9)
        {
          THIS->data->characters[i_9] = value_6;
        }
      }
    }
  }
  return (RogueCharacterList*)(THIS);
}

RogueString* RogueGenericList__type_name( RogueClassGenericList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[43]);
}

RogueClassGenericList* RogueGenericList__init_object( RogueClassGenericList* THIS )
{
  return (RogueClassGenericList*)(THIS);
}

RogueString* RogueCharacterArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[719]);
}

RogueString* RogueNativeArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[42]);
}

RogueString* RogueStringReader__type_name( RogueClassStringReader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[602]);
}

RogueLogical RogueStringReader__has_another( RogueClassStringReader* THIS )
{
  return (RogueLogical)(THIS->position < THIS->count);
}

RogueCharacter RogueStringReader__read( RogueClassStringReader* THIS )
{
  ++THIS->position;
  return (RogueCharacter)(THIS->string->characters[(THIS->position - 1)]);
}

RogueClassStringReader* RogueStringReader__init__String( RogueClassStringReader* THIS, RogueString* _auto_24_0 )
{
  THIS->string = _auto_24_0;
  if (!!(THIS->string))
  {
    THIS->count = THIS->string->count;
  }
  return (RogueClassStringReader*)(THIS);
}

RogueLogical RogueStringReader__has_another__Int32( RogueClassStringReader* THIS, RogueInt32 n_0 )
{
  return (RogueLogical)((THIS->position + n_0) <= THIS->count);
}

RogueClassStringReader* RogueStringReader__init_object( RogueClassStringReader* THIS )
{
  return (RogueClassStringReader*)(THIS);
}

RogueLogical RogueCharacterReader__has_another( RogueObject* THIS )
{
  switch (THIS->type->index)
  {
    case 13:
      return RogueStringReader__has_another( (RogueClassStringReader*)THIS );
    case 192:
      return RogueParseReader__has_another( (RogueClassParseReader*)THIS );
    case 274:
      return RogueFileReader__has_another( (RogueClassFileReader*)THIS );
    default:
      return 0;
  }
}

RogueCharacter RogueCharacterReader__read( RogueObject* THIS )
{
  switch (THIS->type->index)
  {
    case 13:
      return RogueStringReader__read( (RogueClassStringReader*)THIS );
    case 192:
      return RogueParseReader__read( (RogueClassParseReader*)THIS );
    case 274:
      return RogueFileReader__read( (RogueClassFileReader*)THIS );
    default:
      return 0;
  }
}

RogueString* RogueStringList__to_String( RogueStringList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueStringList* _auto_61_2 = (THIS);
    RogueInt32 _auto_62_3 = (0);
    for (;_auto_62_3 < _auto_61_2->count;++_auto_62_3)
    {
      RogueString* value_4 = (((RogueString*)(_auto_61_2->data->objects[_auto_62_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, value_4 );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueStringList__type_name( RogueStringList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[676]);
}

RogueStringList* RogueStringList__init_object( RogueStringList* THIS )
{
  return (RogueStringList*)(THIS);
}

RogueStringList* RogueStringList__init( RogueStringList* THIS )
{
  RogueStringList__init__Int32( THIS, 10 );
  return (RogueStringList*)(THIS);
}

RogueStringList* RogueStringList__init__Int32( RogueStringList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueString*), true );
  return (RogueStringList*)(THIS);
}

RogueStringList* RogueStringList__add__String( RogueStringList* THIS, RogueString* value_0 )
{
  ((RogueStringList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueStringList*)(THIS);
}

RogueStringList* RogueStringList__add__StringList( RogueStringList* THIS, RogueStringList* other_0 )
{
  RogueStringList__reserve__Int32( THIS, other_0->count );
  {
    RogueStringList* _auto_67_1 = (other_0);
    RogueInt32 _auto_68_2 = (0);
    for (;_auto_68_2 < _auto_67_1->count;++_auto_68_2)
    {
      RogueString* value_3 = (((RogueString*)(_auto_67_1->data->objects[_auto_68_2])));
      RogueStringList__add__String( THIS, value_3 );
    }
  }
  return (RogueStringList*)(THIS);
}

RogueInt32 RogueStringList__capacity( RogueStringList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueStringList* RogueStringList__clear( RogueStringList* THIS )
{
  THIS->count = 0;
  return (RogueStringList*)(THIS);
}

RogueOptionalInt32 RogueStringList__locate__String( RogueStringList* THIS, RogueString* value_0 )
{
  {
    RogueStringList* _auto_83_1 = (THIS);
    RogueInt32 i_2 = (0);
    for (;i_2 < _auto_83_1->count;++i_2)
    {
      if (((RogueString__operatorEQUALSEQUALS__String( value_0, ((RogueString*)(THIS->data->objects[i_2])) ))))
      {
        return (RogueOptionalInt32)(RogueOptionalInt32( i_2 ));
      }
    }
  }
  return (RogueOptionalInt32)(RogueOptionalInt32());
}

RogueStringList* RogueStringList__reserve__Int32( RogueStringList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueString*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueStringList__capacity( THIS ))) + ((RogueStringList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueString*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueStringList*)(THIS);
}

RogueString* RogueStringList__joined__String( RogueStringList* THIS, RogueString* separator_0 )
{
  RogueInt32 total_count_1 = (0);
  {
    RogueStringList* _auto_93_3 = (THIS);
    RogueInt32 _auto_94_4 = (0);
    for (;_auto_94_4 < _auto_93_3->count;++_auto_94_4)
    {
      RogueString* line_5 = (((RogueString*)(_auto_93_3->data->objects[_auto_94_4])));
      total_count_1 += line_5->count;
    }
  }
  RogueStringBuilder* builder_2 = (((RogueStringBuilder__init__Int32( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)), total_count_1 ))));
  {
    RogueStringList* _auto_95_6 = (THIS);
    RogueInt32 _auto_96_7 = (0);
    for (;_auto_96_7 < _auto_95_6->count;++_auto_96_7)
    {
      RogueString* line_8 = (((RogueString*)(_auto_95_6->data->objects[_auto_96_7])));
      if (!!(builder_2->characters->count))
      {
        RogueStringBuilder__print__String( builder_2, separator_0 );
      }
      RogueStringBuilder__print__String( builder_2, line_8 );
    }
  }
  return (RogueString*)(((RogueStringBuilder__to_String( builder_2 ))));
}

RogueString* RogueStringArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[720]);
}

RogueString* RogueGlobal__type_name( RogueClassGlobal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[44]);
}

RogueClassPrintWriterAspect* RogueGlobal__flush( RogueClassGlobal* THIS )
{
  if (!!(THIS->printwriter_output_buffer->characters->count))
  {
    RogueGlobal__write__CharacterList( THIS, THIS->printwriter_output_buffer->characters );
    RogueStringBuilder__clear( THIS->printwriter_output_buffer );
  }
  return (RogueClassPrintWriterAspect*)(THIS);
}

RogueClassPrintWriterAspect* RogueGlobal__print__Object( RogueClassGlobal* THIS, RogueObject* value_0 )
{
  RogueStringBuilder__print__Object( THIS->printwriter_output_buffer, value_0 );
  return (RogueClassPrintWriterAspect*)(THIS);
}

RogueClassPrintWriterAspect* RogueGlobal__print__String( RogueClassGlobal* THIS, RogueString* value_0 )
{
  RogueStringBuilder__print__String( THIS->printwriter_output_buffer, value_0 );
  return (RogueClassPrintWriterAspect*)(THIS);
}

RogueClassPrintWriterAspect* RogueGlobal__println( RogueClassGlobal* THIS )
{
  RogueStringBuilder__print__Character( THIS->printwriter_output_buffer, (RogueCharacter)10 );
  return (RogueClassPrintWriterAspect*)(((RogueGlobal__flush( THIS ))));
}

RogueClassPrintWriterAspect* RogueGlobal__println__Object( RogueClassGlobal* THIS, RogueObject* value_0 )
{
  return (RogueClassPrintWriterAspect*)((RoguePrintWriterAspect__println( (RogueObject*)((RogueGlobal__print__Object( THIS, value_0 ))) )));
}

RogueClassPrintWriterAspect* RogueGlobal__println__String( RogueClassGlobal* THIS, RogueString* value_0 )
{
  return (RogueClassPrintWriterAspect*)((RoguePrintWriterAspect__println( (RogueObject*)((RogueGlobal__print__String( THIS, value_0 ))) )));
}

RogueClassGlobal* RogueGlobal__write__CharacterList( RogueClassGlobal* THIS, RogueCharacterList* characters_0 )
{
  RogueConsole__print__StringBuilder( THIS->standard_output, THIS->printwriter_output_buffer );
  return (RogueClassGlobal*)(THIS);
}

void RogueGlobal__on_launch( RogueClassGlobal* THIS )
{
  RogueRogueC__launch( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC)) );
}

RogueClassGlobal* RogueGlobal__init_object( RogueClassGlobal* THIS )
{
  THIS->printwriter_output_buffer = ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) )));
  THIS->standard_output = ((RogueClassConsole*)ROGUE_SINGLETON(Console));
  return (RogueClassGlobal*)(THIS);
}

RogueClassPrintWriterAspect* RoguePrintWriterAspect__println( RogueObject* THIS )
{
  switch (THIS->type->index)
  {
    case 17:
      return RogueGlobal__println( (RogueClassGlobal*)THIS );
    default:
      return 0;
  }
}

RogueString* RogueConsole__type_name( RogueClassConsole* THIS )
{
  return (RogueString*)(Rogue_literal_strings[603]);
}

void RogueConsole__print__StringBuilder( RogueClassConsole* THIS, RogueStringBuilder* value_0 )
{
  RogueString_print_characters( value_0->characters->data->characters, value_0->characters->count );
}

RogueClassConsole* RogueConsole__init_object( RogueClassConsole* THIS )
{
  return (RogueClassConsole*)(THIS);
}

RogueString* RogueRogueC__type_name( RogueClassRogueC* THIS )
{
  return (RogueString*)(Rogue_literal_strings[604]);
}

void RogueRogueC__launch( RogueClassRogueC* THIS )
{
  RogueString* libs_0 = (((RogueString__operatorPLUS__String( (RogueFile__path__String( RogueSystem_executable_filepath )), Rogue_literal_strings[2] ))));
  if ((RogueFile__exists__String( libs_0 )))
  {
    THIS->libraries_folder = libs_0;
    RogueStringList__add__String( THIS->prefix_path_list, libs_0 );
    RogueString_LogicalTable__set__String_Logical( THIS->prefix_path_lookup, libs_0, true );
  }
  RogueStringList__add__String( THIS->supported_targets, Rogue_literal_strings[3] );
  ROGUE_TRY
  {
    RogueRogueC__process_command_line_arguments( THIS );
    if (THIS->source_files->count == 0)
    {
      RogueGlobal__println( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)) );
      RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ((RogueString__operatorPLUS__String( Rogue_literal_strings[22], Rogue_literal_strings[23] ))) );
      RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), Rogue_literal_strings[24] );
      RogueString* usage_1 = (Rogue_literal_strings[25]);
      usage_1 = ((RogueString*)((RogueString__operatorPLUS__String( usage_1, ((RogueString__replacing__String_String( ((RogueString__replacing__Character_Character( ((RogueStringList__to_String( THIS->supported_targets ))), (RogueCharacter)',', (RogueCharacter)'|' ))), Rogue_literal_strings[26], Rogue_literal_strings[27] ))) ))));
      RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), usage_1 );
      RogueSystem__exit__Int32( 1 );
    }
    if (THIS->target_list->count == 0)
    {
      RogueStringList__add__String( THIS->target_list, Rogue_literal_strings[3] );
    }
    {
      RogueStringList* _auto_375_4 = (THIS->target_list);
      RogueInt32 _auto_376_5 = (0);
      for (;_auto_376_5 < _auto_375_4->count;++_auto_376_5)
      {
        RogueString* target_6 = (((RogueString*)(_auto_375_4->data->objects[_auto_376_5])));
        RogueString_LogicalTable__set__String_Logical( THIS->compile_targets, target_6, true );
      }
    }
    RogueProgram__configure( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) );
    {
      RogueStringList* _auto_377_7 = (THIS->source_files);
      RogueInt32 _auto_378_8 = (0);
      for (;_auto_378_8 < _auto_377_7->count;++_auto_378_8)
      {
        RogueString* filepath_9 = (((RogueString*)(_auto_377_7->data->objects[_auto_378_8])));
        RogueRogueC__include_source__String( THIS, filepath_9 );
      }
    }
    RogueRogueC__include_source__String( THIS, Rogue_literal_strings[254] );
    {
      RogueParserList* _auto_379_10 = (THIS->parsers);
      RogueInt32 _auto_380_11 = (0);
      for (;_auto_380_11 < _auto_379_10->count;++_auto_380_11)
      {
        RogueClassParser* parser_12 = (((RogueClassParser*)(_auto_379_10->data->objects[_auto_380_11])));
        RogueParser__insert_module_prefixes( parser_12 );
      }
    }
    {
      RogueParserList* _auto_381_13 = (THIS->parsers);
      RogueInt32 _auto_382_14 = (0);
      for (;_auto_382_14 < _auto_381_13->count;++_auto_382_14)
      {
        RogueClassParser* parser_15 = (((RogueClassParser*)(_auto_381_13->data->objects[_auto_382_14])));
        RogueParser__parse_elements( parser_15 );
      }
    }
    RogueClassToken* t_2 = ((call_ROGUEM89( 4, (RogueClassTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[30] )))), Rogue_literal_strings[315], 0, 0 )));
    {
      RogueStringList* _auto_383_16 = (THIS->requisite_declarations);
      RogueInt32 _auto_384_17 = (0);
      for (;_auto_384_17 < _auto_383_16->count;++_auto_384_17)
      {
        RogueString* declaration_18 = (((RogueString*)(_auto_383_16->data->objects[_auto_384_17])));
        if (((RogueString__contains__String( declaration_18, ((RogueCharacter__to_String( (RogueCharacter)'.' ))) ))))
        {
          RogueRequisiteItemList__add__RequisiteItem( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->requisite_list, ((RogueRequisiteItem__init__Token_Type_String( ((RogueClassRequisiteItem*)ROGUE_CREATE_OBJECT(RequisiteItem)), t_2, ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), t_2, ((RogueString__before_first__Character( declaration_18, (RogueCharacter)'.' ))) ))), ((RogueString__after_first__Character( declaration_18, (RogueCharacter)'.' ))) ))) );
        }
        else
        {
          RogueRequisiteItemList__add__RequisiteItem( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->requisite_list, ((RogueRequisiteItem__init__Token_Type_String( ((RogueClassRequisiteItem*)ROGUE_CREATE_OBJECT(RequisiteItem)), t_2, ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), t_2, declaration_18 ))), ((RogueString*)(NULL)) ))) );
        }
      }
    }
    RogueProgram__resolve( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) );
    RogueRogueC__write_output( THIS );
  }
  ROGUE_CATCH( err_3,RogueClassError* )
  {
    RogueGlobal__println__Object( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ((RogueObject*)(err_3)) );
    RogueSystem__exit__Int32( 1 );
  }
  ROGUE_END_TRY
}

void RogueRogueC__write_output( RogueClassRogueC* THIS )
{
  if (((RogueString_LogicalTable__get__String( THIS->compile_targets, Rogue_literal_strings[3] ))))
  {
    RogueRogueC__write_cpp( THIS );
    return;
  }
  ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[600] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(THIS->target_list)) ))) ))), Rogue_literal_strings[601] ))) ))), ((RogueString*)(NULL)), 0, 0 ))));
}

void RogueRogueC__include_source__String( RogueClassRogueC* THIS, RogueString* filepath_0 )
{
  if (!(!!(THIS->first_filepath)))
  {
    THIS->first_filepath = filepath_0;
  }
  RogueRogueC__include_source__Token_String( THIS, ((RogueClassToken*)(NULL)), filepath_0 );
}

void RogueRogueC__include_source__Token_String( RogueClassRogueC* THIS, RogueClassToken* t_0, RogueString* filepath_1 )
{
  RogueClassFile* file_2 = (((RogueFile__init__String( ((RogueClassFile*)ROGUE_CREATE_OBJECT(File)), filepath_1 ))));
  if ((RogueFile__exists__String( ((RogueString__operatorPLUS__String( filepath_1, Rogue_literal_strings[46] ))) )))
  {
    filepath_1 = ((RogueString*)((RogueString__operatorPLUS__String( filepath_1, Rogue_literal_strings[46] ))));
    file_2 = ((RogueClassFile*)((RogueFile__init__String( ((RogueClassFile*)ROGUE_CREATE_OBJECT(File)), filepath_1 ))));
  }
  if (!((RogueFile__exists__String( file_2->filepath ))))
  {
    {
      RogueStringList* _auto_385_10 = (THIS->prefix_path_list);
      RogueInt32 _auto_386_11 = (0);
      for (;_auto_386_11 < _auto_385_10->count;++_auto_386_11)
      {
        RogueString* prefix_12 = (((RogueString*)(_auto_385_10->data->objects[_auto_386_11])));
        RogueString* prefixed_filepath_3 = (((RogueString__operatorPLUS__String( prefix_12, filepath_1 ))));
        RogueClassFile* prefixed_file_4 = (((RogueFile__init__String( ((RogueClassFile*)ROGUE_CREATE_OBJECT(File)), prefixed_filepath_3 ))));
        if ((RogueFile__exists__String( ((RogueString__operatorPLUS__String( prefixed_filepath_3, Rogue_literal_strings[46] ))) )))
        {
          filepath_1 = ((RogueString*)((RogueString__operatorPLUS__String( prefixed_filepath_3, Rogue_literal_strings[46] ))));
          file_2 = ((RogueClassFile*)((RogueFile__init__String( ((RogueClassFile*)ROGUE_CREATE_OBJECT(File)), filepath_1 ))));
          goto _auto_387;
        }
        else if ((RogueFile__exists__String( prefixed_file_4->filepath )))
        {
          filepath_1 = ((RogueString*)prefixed_filepath_3);
          file_2 = ((RogueClassFile*)prefixed_file_4);
          goto _auto_387;
        }
      }
    }
    _auto_387:;
  }
  if (!((RogueFile__exists__String( file_2->filepath ))))
  {
    RogueString* mesg_5 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[47] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], filepath_1 ))) ))), Rogue_literal_strings[12] ))) ))));
    if (!!(t_0))
    {
      ROGUE_THROW(((RogueToken__error__String( t_0, mesg_5 ))));
    }
    else
    {
      ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), mesg_5, ((RogueString*)(NULL)), 0, 0 ))));
    }
  }
  if ((RogueFile__is_folder__String( file_2->filepath )))
  {
    RogueString* path2_6 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], filepath_1 ))) ))), Rogue_literal_strings[48] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ((RogueFile__filename( file_2 ))) ))) ))), Rogue_literal_strings[46] ))) ))));
    RogueClassFile* file2_7 = (((RogueFile__init__String( ((RogueClassFile*)ROGUE_CREATE_OBJECT(File)), path2_6 ))));
    if ((!((RogueFile__exists__String( file2_7->filepath ))) || (RogueFile__is_folder__String( file2_7->filepath ))))
    {
      RogueString* mesg_8 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[49] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], path2_6 ))) ))), Rogue_literal_strings[50] ))) ))));
      if (!!(t_0))
      {
        ROGUE_THROW(((RogueToken__error__String( t_0, mesg_8 ))));
      }
      else
      {
        ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), mesg_8, ((RogueString*)(NULL)), 0, 0 ))));
      }
    }
    else
    {
      if (!(((RogueString_LogicalTable__contains__String( THIS->prefix_path_lookup, file_2->filepath )))))
      {
        RogueString_LogicalTable__set__String_Logical( THIS->prefix_path_lookup, file_2->filepath, true );
        RogueStringList__add__String( THIS->prefix_path_list, file_2->filepath );
      }
      filepath_1 = ((RogueString*)path2_6);
      file_2 = ((RogueClassFile*)file2_7);
    }
  }
  filepath_1 = ((RogueString*)(RogueFile__absolute_filepath__String( file_2->filepath )));
  if (((RogueStringList__locate__String( THIS->included_files, filepath_1 ))).exists)
  {
    return;
  }
  if (THIS->included_files->count == 0)
  {
    ((RogueClassProgram*)ROGUE_SINGLETON(Program))->first_filepath = filepath_1;
  }
  RogueStringList__add__String( THIS->included_files, filepath_1 );
  RogueString* prefix_9 = (((RogueString__operatorPLUS__String( ((RogueString__before_last__Character( filepath_1, (RogueCharacter)'/' ))), Rogue_literal_strings[48] ))));
  if (!(((RogueString_LogicalTable__contains__String( THIS->prefix_path_lookup, prefix_9 )))))
  {
    RogueString_LogicalTable__set__String_Logical( THIS->prefix_path_lookup, prefix_9, true );
    RogueStringList__add__String( THIS->prefix_path_list, prefix_9 );
  }
  RogueParserList__add__Parser( THIS->parsers, ((RogueParser__init__String( ((RogueClassParser*)ROGUE_CREATE_OBJECT(Parser)), filepath_1 ))) );
}

void RogueRogueC__include_native__Token_String_String( RogueClassRogueC* THIS, RogueClassToken* t_0, RogueString* filepath_1, RogueString* native_type_2 )
{
  RogueClassFile* file_3 = (((RogueFile__init__String( ((RogueClassFile*)ROGUE_CREATE_OBJECT(File)), filepath_1 ))));
  if (!((RogueFile__exists__String( file_3->filepath ))))
  {
    {
      RogueStringList* _auto_392_9 = (THIS->prefix_path_list);
      RogueInt32 _auto_393_10 = (0);
      for (;_auto_393_10 < _auto_392_9->count;++_auto_393_10)
      {
        RogueString* prefix_11 = (((RogueString*)(_auto_392_9->data->objects[_auto_393_10])));
        RogueString* prefixed_filepath_4 = (((RogueString__operatorPLUS__String( prefix_11, filepath_1 ))));
        RogueClassFile* prefixed_file_5 = (((RogueFile__init__String( ((RogueClassFile*)ROGUE_CREATE_OBJECT(File)), prefixed_filepath_4 ))));
        if ((RogueFile__exists__String( prefixed_file_5->filepath )))
        {
          filepath_1 = ((RogueString*)prefixed_filepath_4);
          file_3 = ((RogueClassFile*)prefixed_file_5);
          goto _auto_394;
        }
      }
    }
    _auto_394:;
  }
  if (!((RogueFile__exists__String( file_3->filepath ))))
  {
    RogueString* mesg_6 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[47] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], filepath_1 ))) ))), Rogue_literal_strings[12] ))) ))));
    if (!!(t_0))
    {
      ROGUE_THROW(((RogueToken__error__String( t_0, mesg_6 ))));
    }
    else
    {
      ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), mesg_6, ((RogueString*)(NULL)), 0, 0 ))));
    }
  }
  if ((RogueFile__is_folder__String( file_3->filepath )))
  {
    RogueString* mesg_7 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[57] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], file_3->filepath ))) ))), Rogue_literal_strings[58] ))) ))));
    if (!!(t_0))
    {
      ROGUE_THROW(((RogueToken__error__String( t_0, mesg_7 ))));
    }
    else
    {
      ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), mesg_7, ((RogueString*)(NULL)), 0, 0 ))));
    }
  }
  filepath_1 = ((RogueString*)(RogueFile__absolute_filepath__String( file_3->filepath )));
  if (((RogueStringList__locate__String( THIS->included_files, filepath_1 ))).exists)
  {
    return;
  }
  RogueStringList__add__String( THIS->included_files, filepath_1 );
  RogueString* prefix_8 = (((RogueString__operatorPLUS__String( ((RogueString__before_last__Character( filepath_1, (RogueCharacter)'/' ))), Rogue_literal_strings[48] ))));
  if (!(((RogueString_LogicalTable__contains__String( THIS->prefix_path_lookup, prefix_8 )))))
  {
    RogueString_LogicalTable__set__String_Logical( THIS->prefix_path_lookup, prefix_8, true );
    RogueStringList__add__String( THIS->prefix_path_list, prefix_8 );
  }
  if (((RogueString__operatorEQUALSEQUALS__String( native_type_2, Rogue_literal_strings[59] ))))
  {
    {
      RogueClassLineReader* _auto_396_12 = (((RogueLineReader__init__File( ((RogueClassLineReader*)ROGUE_CREATE_OBJECT(LineReader)), file_3 ))));
      while (((RogueLineReader__has_another( _auto_396_12 ))))
      {
        RogueString* line_13 = (((RogueLineReader__read( _auto_396_12 ))));
        RogueStringList__add__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_header, line_13 );
      }
    }
  }
  else
  {
    {
      RogueClassLineReader* _auto_397_14 = (((RogueLineReader__init__File( ((RogueClassLineReader*)ROGUE_CREATE_OBJECT(LineReader)), file_3 ))));
      while (((RogueLineReader__has_another( _auto_397_14 ))))
      {
        RogueString* line_15 = (((RogueLineReader__read( _auto_397_14 ))));
        RogueStringList__add__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_code, line_15 );
      }
    }
  }
}

void RogueRogueC__process_command_line_arguments( RogueClassRogueC* THIS )
{
  {
    RogueStringList* _auto_398_1 = (RogueSystem_command_line_arguments);
    RogueInt32 _auto_399_2 = (0);
    for (;_auto_399_2 < _auto_398_1->count;++_auto_399_2)
    {
      RogueString* arg_3 = (((RogueString*)(_auto_398_1->data->objects[_auto_399_2])));
      RogueString* value_0 = (((RogueString__after_first__Character( arg_3, (RogueCharacter)'=' ))));
      arg_3 = ((RogueString*)((RogueString__before_first__Character( arg_3, (RogueCharacter)'=' ))));
      if (((RogueString__begins_with__String( arg_3, Rogue_literal_strings[4] ))))
      {
        {
          if (((RogueString__operatorEQUALSEQUALS__String( arg_3, Rogue_literal_strings[5] ))))
          {
            if (value_0->count == 0)
            {
              ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), Rogue_literal_strings[6], ((RogueString*)(NULL)), 0, 0 ))));
            }
            THIS->output_filepath = value_0;
          }
          else if (((RogueString__operatorEQUALSEQUALS__String( arg_3, Rogue_literal_strings[7] ))))
          {
            THIS->generate_main = true;
            THIS->execute_args = value_0;
          }
          else if (((RogueString__operatorEQUALSEQUALS__String( arg_3, Rogue_literal_strings[8] ))))
          {
            THIS->debug_mode = true;
          }
          else if (((RogueString__operatorEQUALSEQUALS__String( arg_3, Rogue_literal_strings[9] ))))
          {
            if (!(!!(value_0->count)))
            {
              ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), Rogue_literal_strings[10], ((RogueString*)(NULL)), 0, 0 ))));
            }
            {
              RogueStringList* _auto_400_4 = (((RogueString__split__Character( value_0, (RogueCharacter)';' ))));
              RogueInt32 _auto_401_5 = (0);
              for (;_auto_401_5 < _auto_400_4->count;++_auto_401_5)
              {
                RogueString* path_6 = (((RogueString*)(_auto_400_4->data->objects[_auto_401_5])));
                if (!((RogueFile__exists__String( path_6 ))))
                {
                  ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[11] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], path_6 ))) ))), Rogue_literal_strings[12] ))) ))), ((RogueString*)(NULL)), 0, 0 ))));
                }
                if ((RogueFile__is_folder__String( path_6 )))
                {
                  if (!(((RogueString__ends_with__String( path_6, ((RogueCharacter__to_String( (RogueCharacter)'/' ))) )))))
                  {
                    path_6 = ((RogueString*)((RogueString__operatorPLUS__Character( path_6, (RogueCharacter)'/' ))));
                  }
                  if (!(((RogueString_LogicalTable__contains__String( THIS->prefix_path_lookup, path_6 )))))
                  {
                    RogueStringList__add__String( THIS->prefix_path_list, path_6 );
                    RogueString_LogicalTable__set__String_Logical( THIS->prefix_path_lookup, path_6, true );
                  }
                }
                else
                {
                  RogueStringList__add__String( THIS->source_files, path_6 );
                }
              }
            }
          }
          else if (((RogueString__operatorEQUALSEQUALS__String( arg_3, Rogue_literal_strings[13] ))))
          {
            if (!!(value_0->count))
            {
              ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), Rogue_literal_strings[14], ((RogueString*)(NULL)), 0, 0 ))));
            }
            THIS->generate_main = true;
          }
          else if (((RogueString__operatorEQUALSEQUALS__String( arg_3, Rogue_literal_strings[15] ))))
          {
            if (!(!!(value_0->count)))
            {
              ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), Rogue_literal_strings[16], ((RogueString*)(NULL)), 0, 0 ))));
            }
            THIS->package_name = value_0;
          }
          else if (((RogueString__operatorEQUALSEQUALS__String( arg_3, Rogue_literal_strings[17] ))))
          {
            if (!!(value_0->count))
            {
              RogueStringList__add__StringList( THIS->requisite_declarations, ((RogueString__split__Character( value_0, (RogueCharacter)',' ))) );
            }
          }
          else if (((RogueString__operatorEQUALSEQUALS__String( arg_3, Rogue_literal_strings[18] ))))
          {
            if (!(!!(value_0->count)))
            {
              ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), Rogue_literal_strings[19], ((RogueString*)(NULL)), 0, 0 ))));
            }
            RogueStringList__add__StringList( THIS->target_list, ((RogueString__split__Character( value_0, (RogueCharacter)',' ))) );
          }
          else
          {
            ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[20] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], arg_3 ))) ))), Rogue_literal_strings[21] ))) ))), ((RogueString*)(NULL)), 0, 0 ))));
          }
        }
      }
      else
      {
        RogueStringList__add__String( THIS->source_files, arg_3 );
      }
    }
  }
}

void RogueRogueC__write_cpp( RogueClassRogueC* THIS )
{
  if (((void*)THIS->output_filepath) == ((void*)NULL))
  {
    THIS->output_filepath = (RogueFile__filename__String( THIS->first_filepath ));
    if (((RogueString__ends_with__String( ((RogueString__to_lowercase( THIS->output_filepath ))), Rogue_literal_strings[46] ))))
    {
      THIS->output_filepath = ((RogueString__leftmost__Int32( THIS->output_filepath, -6 )));
    }
  }
  else if ((RogueFile__is_folder__String( THIS->output_filepath )))
  {
    THIS->output_filepath = ((RogueString__operatorPLUS__String( THIS->output_filepath, Rogue_literal_strings[48] )));
    RogueString* filename_0 = ((RogueFile__filename__String( THIS->first_filepath )));
    if (((RogueString__ends_with__String( ((RogueString__to_lowercase( filename_0 ))), Rogue_literal_strings[46] ))))
    {
      THIS->output_filepath = ((RogueString__operatorPLUS__String( THIS->output_filepath, ((RogueString__leftmost__Int32( filename_0, -6 ))) )));
    }
    else
    {
      THIS->output_filepath = ((RogueString__operatorPLUS__String( THIS->output_filepath, Rogue_literal_strings[424] )));
    }
  }
  else if (((RogueString__ends_with__String( ((RogueString__to_lowercase( THIS->output_filepath ))), Rogue_literal_strings[425] ))))
  {
    THIS->output_filepath = ((RogueString__leftmost__Int32( THIS->output_filepath, -4 )));
  }
  RogueProgram__write_cpp__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->output_filepath );
  if (!!(THIS->execute_args))
  {
    RogueString* exe_1 = (((RogueString__to_lowercase( THIS->output_filepath ))));
    RogueString* cmd_2 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[597] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->output_filepath ))) ))), Rogue_literal_strings[598] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], exe_1 ))) ))), Rogue_literal_strings[599] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], exe_1 ))) ))), Rogue_literal_strings[458] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->execute_args ))) ))) ))));
    RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), cmd_2 );
    RogueGlobal__println( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)) );
    {
      char cmd_buffer[4096];
      RogueString_to_c_string( cmd_2, cmd_buffer, 4096 );
      system( cmd_buffer );
    };
  }
}

RogueClassRogueC* RogueRogueC__init_object( RogueClassRogueC* THIS )
{
  THIS->included_files = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  THIS->prefix_path_list = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  THIS->prefix_path_lookup = ((RogueString_LogicalTable__init( ((RogueClassString_LogicalTable*)ROGUE_CREATE_OBJECT(String_LogicalTable)) )));
  THIS->compile_targets = ((RogueString_LogicalTable__init( ((RogueClassString_LogicalTable*)ROGUE_CREATE_OBJECT(String_LogicalTable)) )));
  THIS->target_list = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  THIS->libraries_folder = Rogue_literal_strings[0];
  THIS->source_files = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  THIS->supported_targets = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  THIS->requisite_declarations = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  THIS->parsers = ((RogueParserList__init( ((RogueParserList*)ROGUE_CREATE_OBJECT(ParserList)) )));
  THIS->parsereaders_by_filepath = ((RogueString_ParseReaderTable__init( ((RogueClassString_ParseReaderTable*)ROGUE_CREATE_OBJECT(String_ParseReaderTable)) )));
  return (RogueClassRogueC*)(THIS);
}

RogueString* RogueException__to_String( RogueClassException* THIS )
{
  return (RogueString*)(THIS->message);
}

RogueString* RogueException__type_name( RogueClassException* THIS )
{
  return (RogueString*)(Rogue_literal_strings[45]);
}

RogueClassException* RogueException__init_object( RogueClassException* THIS )
{
  THIS->stack_trace = ((RogueStackTrace__init__Int32( ((RogueClassStackTrace*)ROGUE_CREATE_OBJECT(StackTrace)), 1 )));
  return (RogueClassException*)(THIS);
}

RogueString* RogueStackTrace__to_String( RogueClassStackTrace* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStackTrace__print__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueStackTrace__type_name( RogueClassStackTrace* THIS )
{
  return (RogueString*)(Rogue_literal_strings[605]);
}

RogueClassStackTrace* RogueStackTrace__init__Int32( RogueClassStackTrace* THIS, RogueInt32 omit_count_0 )
{
  THIS->count = (RogueMath__max__Int32_Int32( (Rogue_call_stack.count
   - (omit_count_0 + 1)), 0 ));
  THIS->entries = ((RogueStringList__init__Int32( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)), THIS->count )));
  {
    RogueInt32 i_1 = ((THIS->count - 1));
    RogueInt32 _auto_60_2 = (0);
    for (;i_1 >= _auto_60_2;--i_1)
    {
      RogueStringList__add__String( THIS->entries, RogueString_create_from_c_string( Rogue_call_stack.locations[i_1] )
       );
    }
  }
  return (RogueClassStackTrace*)(THIS);
}

void RogueStackTrace__format( RogueClassStackTrace* THIS )
{
  if (THIS->is_formatted)
  {
    return;
  }
  THIS->is_formatted = true;
  RogueInt32 max_sp_0 = (0);
  {
    RogueStringList* _auto_311_2 = (THIS->entries);
    RogueInt32 _auto_312_3 = (0);
    for (;_auto_312_3 < _auto_311_2->count;++_auto_312_3)
    {
      RogueString* entry_4 = (((RogueString*)(_auto_311_2->data->objects[_auto_312_3])));
      RogueOptionalInt32 sp_1 = (((RogueString__locate__Character_OptionalInt32( entry_4, (RogueCharacter)' ', RogueOptionalInt32() ))));
      if (sp_1.exists)
      {
        max_sp_0 = ((RogueInt32)(RogueMath__max__Int32_Int32( max_sp_0, sp_1.value )));
      }
    }
  }
  ++max_sp_0;
  {
    RogueStringList* _auto_313_5 = (THIS->entries);
    RogueInt32 i_6 = (0);
    for (;i_6 < _auto_313_5->count;++i_6)
    {
      RogueString* entry_7 = (((RogueString*)(_auto_313_5->data->objects[i_6])));
      if (((RogueString__contains__String( entry_7, ((RogueCharacter__to_String( (RogueCharacter)' ' ))) ))))
      {
        THIS->entries->data->objects[i_6] = ((RogueString__operatorPLUS__String( ((RogueString__left_justified__Int32( ((RogueString__before_first__Character( entry_7, (RogueCharacter)' ' ))), max_sp_0 ))), ((RogueString__from_first__Character( entry_7, (RogueCharacter)' ' ))) )));
      }
    }
  }
}

void RogueStackTrace__print( RogueClassStackTrace* THIS )
{
  RogueStackTrace__print__StringBuilder( THIS, ((RogueClassGlobal*)ROGUE_SINGLETON(Global))->printwriter_output_buffer );
  RogueGlobal__flush( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)) );
}

RogueStringBuilder* RogueStackTrace__print__StringBuilder( RogueClassStackTrace* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStackTrace__format( THIS );
  {
    RogueStringList* _auto_314_1 = (THIS->entries);
    RogueInt32 _auto_315_2 = (0);
    for (;_auto_315_2 < _auto_314_1->count;++_auto_315_2)
    {
      RogueString* entry_3 = (((RogueString*)(_auto_314_1->data->objects[_auto_315_2])));
      RogueStringBuilder__println__String( buffer_0, entry_3 );
    }
  }
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassStackTrace* RogueStackTrace__init_object( RogueClassStackTrace* THIS )
{
  return (RogueClassStackTrace*)(THIS);
}

RogueString* RogueMath__type_name( RogueClassMath* THIS )
{
  return (RogueString*)(Rogue_literal_strings[606]);
}

RogueClassMath* RogueMath__init_object( RogueClassMath* THIS )
{
  return (RogueClassMath*)(THIS);
}

RogueString* RogueProgram__type_name( RogueClassProgram* THIS )
{
  return (RogueString*)(Rogue_literal_strings[607]);
}

RogueInt32 RogueProgram__add_literal_string__String( RogueClassProgram* THIS, RogueString* value_0 )
{
  if (!(!!(value_0)))
  {
    return (RogueInt32)(0);
  }
  RogueClassString_Int32TableEntry* entry_1 = (((RogueString_Int32Table__find__String( THIS->literal_string_lookup, value_0 ))));
  if (!!(entry_1))
  {
    return (RogueInt32)(entry_1->value);
  }
  else
  {
    RogueInt32 index_2 = (THIS->literal_string_list->count);
    RogueString_Int32Table__set__String_Int32( THIS->literal_string_lookup, value_0, index_2 );
    RogueStringList__add__String( THIS->literal_string_list, value_0 );
    return (RogueInt32)(index_2);
  }
}

void RogueProgram__add_module_id__String_String( RogueClassProgram* THIS, RogueString* module_name_0, RogueString* id_name_1 )
{
  RogueStringList* list_2 = (((RogueString_StringListTable__get__String( THIS->ids_by_module, module_name_0 ))));
  if (!(!!(list_2)))
  {
    list_2 = ((RogueStringList*)((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) ))));
    RogueString_StringListTable__set__String_StringList( THIS->ids_by_module, module_name_0, list_2 );
  }
  RogueStringList__add__String( list_2, id_name_1 );
}

void RogueProgram__add_template__Template( RogueClassProgram* THIS, RogueClassTemplate* template_0 )
{
  RogueTemplateList__add__Template( THIS->template_list, template_0 );
  {
    {
      RogueInt32 param_count_1 = (((RogueTemplate__type_parameter_count( template_0 ))));
      RogueClassTemplate* existing_template_2 = (((RogueString_TemplateTable__get__String( THIS->template_lookup, template_0->name ))));
      if (!(!!(existing_template_2))) goto _auto_134;
      if ( !(param_count_1 != ((RogueTemplate__type_parameter_count( existing_template_2 )))) ) goto _auto_135;
      if (!(!!(existing_template_2->alternates_by_param_count)))
      {
        existing_template_2->alternates_by_param_count = ((RogueInt32_TemplateTable__init( ((RogueClassInt32_TemplateTable*)ROGUE_CREATE_OBJECT(Int32_TemplateTable)) )));
      }
      if ( !(!(((RogueInt32_TemplateTable__contains__Int32( existing_template_2->alternates_by_param_count, param_count_1 ))))) ) goto _auto_135;
      RogueInt32_TemplateTable__set__Int32_Template( existing_template_2->alternates_by_param_count, param_count_1, template_0 );
      goto _auto_133;
      _auto_134:;
      RogueString_TemplateTable__set__String_Template( THIS->template_lookup, template_0->name, template_0 );
      goto _auto_133;
    }
    _auto_135:;
    ROGUE_THROW(((RogueToken__error__String( template_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[257] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], template_0->name ))) ))), Rogue_literal_strings[258] ))) ))) ))));
  }
  _auto_133:;
}

void RogueProgram__configure( RogueClassProgram* THIS )
{
  THIS->type_null = ((RogueProgram__create_built_in_type__String_Int32( THIS, Rogue_literal_strings[1], 32 )));
  THIS->type_Real64 = ((RogueProgram__create_built_in_type__String_Int32( THIS, Rogue_literal_strings[32], 1 )));
  THIS->type_Real32 = ((RogueProgram__create_built_in_type__String_Int32( THIS, Rogue_literal_strings[33], 1 )));
  THIS->type_Int64 = ((RogueProgram__create_built_in_type__String_Int32( THIS, Rogue_literal_strings[34], 1 )));
  THIS->type_Int32 = ((RogueProgram__create_built_in_type__String_Int32( THIS, Rogue_literal_strings[35], 1 )));
  THIS->type_Character = ((RogueProgram__create_built_in_type__String_Int32( THIS, Rogue_literal_strings[36], 1 )));
  THIS->type_Byte = ((RogueProgram__create_built_in_type__String_Int32( THIS, Rogue_literal_strings[37], 1 )));
  THIS->type_Logical = ((RogueProgram__create_built_in_type__String_Int32( THIS, Rogue_literal_strings[38], 1 )));
  THIS->type_Object = ((RogueProgram__create_built_in_type__String_Int32( THIS, Rogue_literal_strings[39], 32 )));
  THIS->type_String = ((RogueProgram__create_built_in_type__String_Int32( THIS, Rogue_literal_strings[40], 48 )));
  THIS->type_StringBuilder = ((RogueProgram__create_built_in_type__String_Int32( THIS, Rogue_literal_strings[41], 0 )));
  THIS->type_NativeArray = ((RogueProgram__create_built_in_type__String_Int32( THIS, Rogue_literal_strings[42], 32 )));
  THIS->type_GenericList = ((RogueProgram__create_built_in_type__String_Int32( THIS, Rogue_literal_strings[43], 0 )));
  THIS->type_Global = ((RogueProgram__create_built_in_type__String_Int32( THIS, Rogue_literal_strings[44], 0 )));
  THIS->type_Exception = ((RogueProgram__create_built_in_type__String_Int32( THIS, Rogue_literal_strings[45], 0 )));
  THIS->type_Object->simplify_name = true;
  THIS->type_String->simplify_name = true;
  THIS->type_StringBuilder->simplify_name = true;
  THIS->type_null->organized = true;
  THIS->type_null->defined = true;
  RogueStringList__add__String( THIS->literal_string_list, Rogue_literal_strings[0] );
  RogueString_Int32Table__set__String_Int32( THIS->literal_string_lookup, Rogue_literal_strings[0], 0 );
}

RogueString* RogueProgram__create_unique_id( RogueClassProgram* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[270], ((RogueProgram__next_unique_integer( THIS ))) ))));
}

RogueInt32 RogueProgram__next_unique_integer( RogueClassProgram* THIS )
{
  ++THIS->unique_integer;
  return (RogueInt32)((THIS->unique_integer - 1));
}

RogueClassTemplate* RogueProgram__find_template__String( RogueClassProgram* THIS, RogueString* name_0 )
{
  RogueClassTemplate* template_1 = 0;
  switch (((RogueInt32)(((RogueString__last( name_0 ))))))
  {
    case (RogueCharacter)'?':
    {
      if (!!(((RogueProgram__find_type__String( THIS, ((RogueString__leftmost__Int32( name_0, -1 ))) )))))
      {
        return (RogueClassTemplate*)(((RogueString_TemplateTable__get__String( THIS->template_lookup, Rogue_literal_strings[320] ))));
      }
      else
      {
        return (RogueClassTemplate*)(((RogueClassTemplate*)(NULL)));
      }
      break;
    }
    case (RogueCharacter)']':
    {
      template_1 = ((RogueClassTemplate*)((RogueString_TemplateTable__get__String( THIS->template_lookup, Rogue_literal_strings[321] ))));
      break;
    }
    default:
    {
      template_1 = ((RogueClassTemplate*)((RogueString_TemplateTable__get__String( THIS->template_lookup, ((RogueString__before_first__Character( name_0, (RogueCharacter)'<' ))) ))));
    }
  }
  if (!!(template_1))
  {
    return (RogueClassTemplate*)(template_1);
  }
  return (RogueClassTemplate*)(((RogueClassTemplate*)(NULL)));
}

RogueClassType* RogueProgram__find_type__String( RogueClassProgram* THIS, RogueString* name_0 )
{
  RogueClassType* type_1 = (((RogueString_TypeTable__get__String( THIS->type_lookup, name_0 ))));
  if (!!(type_1))
  {
    return (RogueClassType*)(type_1);
  }
  RogueClassTemplate* template_2 = (((RogueProgram__find_template__String( THIS, name_0 ))));
  if (!!(template_2))
  {
    type_1 = ((RogueClassType*)((RogueType__init__Token_String( ((RogueClassType*)ROGUE_CREATE_OBJECT(Type)), template_2->t, name_0 ))));
    RogueString_TypeTable__set__String_Type( THIS->type_lookup, name_0, type_1 );
    return (RogueClassType*)(type_1);
  }
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

RogueClassType* RogueProgram__get_type_reference__Token_String( RogueClassProgram* THIS, RogueClassToken* t_0, RogueString* name_1 )
{
  RogueClassType* type_2 = (((RogueString_TypeTable__get__String( THIS->type_lookup, name_1 ))));
  if (!!(type_2))
  {
    return (RogueClassType*)(type_2);
  }
  type_2 = ((RogueClassType*)((RogueType__init__Token_String( ((RogueClassType*)ROGUE_CREATE_OBJECT(Type)), t_0, name_1 ))));
  RogueString_TypeTable__set__String_Type( THIS->type_lookup, name_1, type_2 );
  return (RogueClassType*)(type_2);
}

RogueString* RogueProgram__get_callback_type_signature__TypeList( RogueClassProgram* THIS, RogueTypeList* parameter_types_0 )
{
  RogueStringBuilder__print__String( ((RogueStringBuilder__clear( THIS->string_buffer ))), Rogue_literal_strings[66] );
  if (!!(parameter_types_0))
  {
    RogueLogical first_1 = (true);
    {
      RogueTypeList* _auto_144_2 = (parameter_types_0);
      RogueInt32 _auto_145_3 = (0);
      for (;_auto_145_3 < _auto_144_2->count;++_auto_145_3)
      {
        RogueClassType* type_4 = (((RogueClassType*)(_auto_144_2->data->objects[_auto_145_3])));
        if (first_1)
        {
          first_1 = ((RogueLogical)false);
        }
        else
        {
          RogueStringBuilder__print__Character( THIS->string_buffer, (RogueCharacter)',' );
        }
        RogueStringBuilder__print__String( THIS->string_buffer, type_4->name );
      }
    }
  }
  RogueStringBuilder__print__Character( THIS->string_buffer, (RogueCharacter)')' );
  return (RogueString*)(((RogueStringBuilder__to_String( THIS->string_buffer ))));
}

RogueClassType* RogueProgram__get_callback_type_reference__Token_TypeList_Type( RogueClassProgram* THIS, RogueClassToken* t_0, RogueTypeList* parameter_types_1, RogueClassType* return_type_2 )
{
  RogueString* name_3 = (((RogueString__operatorPLUS__String( Rogue_literal_strings[263], ((RogueProgram__get_callback_type_signature__TypeList( THIS, parameter_types_1 ))) ))));
  if (!!(return_type_2))
  {
    name_3 = ((RogueString*)((RogueString__operatorPLUS__String( name_3, ((RogueString__operatorPLUS__String( Rogue_literal_strings[173], return_type_2->name ))) ))));
  }
  RogueClassType* type_4 = (((RogueProgram__get_type_reference__Token_String( THIS, t_0, name_3 ))));
  if (type_4->defined)
  {
    return (RogueClassType*)(type_4);
  }
  type_4->defined = true;
  type_4->callback_parameter_types = parameter_types_1;
  type_4->_callback_return_type = return_type_2;
  RogueAttributes__add__Int32( type_4->attributes, 0 );
  RogueClassMethod* m_call_5 = (((RogueType__add_method__Token_String( type_4, t_0, Rogue_literal_strings[256] ))));
  if (!!(parameter_types_1))
  {
    {
      RogueTypeList* _auto_147_6 = (parameter_types_1);
      RogueInt32 i_7 = (0);
      for (;i_7 < _auto_147_6->count;++i_7)
      {
        RogueMethod__add_parameter__Token_String_Type( m_call_5, t_0, ((RogueString__operatorPLUS__Int32( Rogue_literal_strings[264], (i_7 + 1) ))), ((RogueClassType*)(parameter_types_1->data->objects[i_7])) );
      }
    }
  }
  if (!!(return_type_2))
  {
    m_call_5->_return_type = return_type_2;
    RogueCmdList__add__Cmd( ((RogueCmdList*)m_call_5->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), t_0, ((RogueType__create_default_value__Token( return_type_2, t_0 ))) ))))) );
  }
  return (RogueClassType*)(type_4);
}

RogueLogical RogueProgram__is_type_defined__String( RogueClassProgram* THIS, RogueString* name_0 )
{
  RogueClassType* type_1 = (((RogueString_TypeTable__get__String( THIS->type_lookup, name_0 ))));
  if (!(!!(type_1)))
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(type_1->defined);
}

RogueClassType* RogueProgram__create_built_in_type__String_Int32( RogueClassProgram* THIS, RogueString* name_0, RogueInt32 attributes_1 )
{
  RogueClassToken* t_2 = ((call_ROGUEM89( 4, (RogueClassTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[30] )))), Rogue_literal_strings[31], 0, 0 )));
  RogueClassType* type_3 = (((RogueProgram__get_type_reference__Token_String( THIS, t_2, name_0 ))));
  RogueAttributes__add__Int32( type_3->attributes, attributes_1 );
  return (RogueClassType*)(type_3);
}

void RogueProgram__resolve( RogueClassProgram* THIS )
{
  if (!!(THIS->m_on_launch))
  {
    RogueType__add_method__Method( THIS->type_Global, THIS->m_on_launch );
  }
  else
  {
    THIS->m_on_launch = ((RogueType__add_method__Token_String( THIS->type_Global, THIS->type_Global->t, Rogue_literal_strings[313] )));
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->m_on_launch->statements), ((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( THIS->m_on_launch, THIS->m_on_launch->t, Rogue_literal_strings[292], false ))))) );
  RogueAttributes__add__Int32( THIS->m_on_launch->attributes, 32768 );
  {
    RoguePropertyList* _auto_159_4 = (THIS->global_properties);
    RogueInt32 _auto_160_5 = (0);
    for (;_auto_160_5 < _auto_159_4->count;++_auto_160_5)
    {
      RogueClassProperty* p_6 = (((RogueClassProperty*)(_auto_159_4->data->objects[_auto_160_5])));
      if (!(!!(p_6->_type)))
      {
        if (!!(p_6->initial_value))
        {
          p_6->_type = (call_ROGUEM62( 17, (RogueClassCmd*)(p_6->initial_value), ((RogueScope__init__Type_Method( ((RogueClassScope*)ROGUE_CREATE_OBJECT(Scope)), THIS->type_Global, ((RogueClassMethod*)(NULL)) ))) ));
          if (!(!!(p_6->_type)))
          {
            RogueString* mesg_0 = (Rogue_literal_strings[316]);
            ROGUE_THROW(((RogueToken__error__String( p_6->t, mesg_0 ))));
          }
        }
        else
        {
          RogueString* mesg_1 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[317] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], p_6->name ))) ))), Rogue_literal_strings[318] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], p_6->name ))) ))), Rogue_literal_strings[319] ))) ))));
          ROGUE_THROW(((RogueToken__error__String( p_6->t, mesg_1 ))));
        }
      }
      RogueType__add_property__Property( THIS->type_Global, p_6 );
    }
  }
  RogueType__resolve( THIS->type_null );
  RogueType__resolve( THIS->type_Real64 );
  RogueType__resolve( THIS->type_Real32 );
  RogueType__resolve( THIS->type_Int64 );
  RogueType__resolve( THIS->type_Int32 );
  RogueType__resolve( THIS->type_Character );
  RogueType__resolve( THIS->type_Byte );
  RogueType__resolve( THIS->type_Logical );
  RogueType__resolve( THIS->type_Global );
  RogueType__resolve( THIS->type_Exception );
  RogueType__resolve( THIS->type_Object );
  RogueType__resolve( THIS->type_NativeArray );
  RogueType__resolve( THIS->type_GenericList );
  RogueType__resolve( THIS->type_String );
  {
    RogueRequisiteItemList* _auto_163_7 = (THIS->requisite_list);
    RogueInt32 _auto_164_8 = (0);
    for (;_auto_164_8 < _auto_163_7->count;++_auto_164_8)
    {
      RogueClassRequisiteItem* req_9 = (((RogueClassRequisiteItem*)(_auto_163_7->data->objects[_auto_164_8])));
      RogueType__resolve( req_9->_type );
      RogueAttributes__add__Int32( req_9->_type->attributes, 32768 );
      if (!!(req_9->signature))
      {
        if (((RogueString__operatorEQUALSEQUALS__String( req_9->signature, Rogue_literal_strings[212] ))))
        {
          {
            RogueMethodList* _auto_169_10 = (req_9->_type->global_method_list);
            RogueInt32 _auto_170_11 = (0);
            for (;_auto_170_11 < _auto_169_10->count;++_auto_170_11)
            {
              RogueClassMethod* r_12 = (((RogueClassMethod*)(_auto_169_10->data->objects[_auto_170_11])));
              RogueAttributes__add__Int32( r_12->attributes, 32768 );
            }
          }
          {
            RogueMethodList* _auto_171_13 = (req_9->_type->method_list);
            RogueInt32 _auto_172_14 = (0);
            for (;_auto_172_14 < _auto_171_13->count;++_auto_172_14)
            {
              RogueClassMethod* m_15 = (((RogueClassMethod*)(_auto_171_13->data->objects[_auto_172_14])));
              RogueAttributes__add__Int32( m_15->attributes, 32768 );
            }
          }
        }
        else
        {
          RogueClassMethod* m_2 = (((RogueType__find_method__String( req_9->_type, req_9->signature ))));
          if (!!(m_2))
          {
            RogueAttributes__add__Int32( m_2->attributes, 32768 );
          }
          else
          {
            ROGUE_THROW(((RogueToken__error__String( req_9->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[420] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], req_9->signature ))) ))), Rogue_literal_strings[421] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], req_9->_type->name ))) ))), Rogue_literal_strings[51] ))) ))) ))));
          }
        }
      }
    }
  }
  {
    RogueTemplateList* _auto_173_16 = (THIS->template_list);
    RogueInt32 _auto_174_17 = (0);
    for (;_auto_174_17 < _auto_173_16->count;++_auto_174_17)
    {
      RogueClassTemplate* templ_18 = (((RogueClassTemplate*)(_auto_173_16->data->objects[_auto_174_17])));
      if ((!!((templ_18->attributes->flags & 32768)) && !(!!(templ_18->type_parameters))))
      {
        RogueType__resolve( ((RogueProgram__get_type_reference__Token_String( THIS, templ_18->t, templ_18->name ))) );
      }
    }
  }
  RogueInt32 i_3 = (0);
  while (i_3 < THIS->type_list->count)
  {
    RogueType__resolve( ((RogueClassType*)(THIS->type_list->data->objects[i_3])) );
    ++i_3;
  }
  RogueProgram__cull_unused_code( THIS );
  RogueProgram__reorder_compounds( THIS );
}

void RogueProgram__reorder_compounds( RogueClassProgram* THIS )
{
  RogueTypeList* compounds_0 = (((RogueTypeList__init( ((RogueTypeList*)ROGUE_CREATE_OBJECT(TypeList)) ))));
  RogueInt32 write_i_1 = (0);
  {
    RogueTypeList* _auto_175_5 = (THIS->type_list);
    RogueInt32 read_i_6 = (0);
    for (;read_i_6 < _auto_175_5->count;++read_i_6)
    {
      RogueClassType* type_2 = (((RogueClassType*)(THIS->type_list->data->objects[read_i_6])));
      if (((RogueType__is_compound( type_2 ))))
      {
        RogueProgram__collect_compound_dependencies__Type_TypeList( THIS, type_2, compounds_0 );
      }
      else
      {
        THIS->type_list->data->objects[write_i_1] = type_2;
        type_2->index = write_i_1;
        ++write_i_1;
      }
    }
  }
  RogueTypeList__discard_from__Int32( THIS->type_list, write_i_1 );
  {
    RogueTypeList* _auto_176_7 = (compounds_0);
    RogueInt32 _auto_177_8 = (0);
    for (;_auto_177_8 < _auto_176_7->count;++_auto_177_8)
    {
      RogueClassType* type_9 = (((RogueClassType*)(_auto_176_7->data->objects[_auto_177_8])));
      type_9->index = THIS->type_list->count;
      RogueTypeList__add__Type( THIS->type_list, type_9 );
    }
  }
  {
    RogueTypeList* _auto_178_10 = (THIS->type_list);
    RogueInt32 _auto_179_11 = (0);
    for (;_auto_179_11 < _auto_178_10->count;++_auto_179_11)
    {
      RogueClassType* type_12 = (((RogueClassType*)(_auto_178_10->data->objects[_auto_179_11])));
      if ((((RogueType__instance_of__Type( type_12, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Exception ))) && ((void*)type_12) != ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Exception)))
      {
        if (type_12->base_class->index > type_12->index)
        {
          RogueInt32 i1_3 = (type_12->base_class->index);
          RogueInt32 i2_4 = (type_12->index);
          RogueTypeList__swap__Int32_Int32( THIS->type_list, i1_3, i2_4 );
          type_12->index = i1_3;
          type_12->base_class->index = i2_4;
        }
      }
    }
  }
}

void RogueProgram__collect_compound_dependencies__Type_TypeList( RogueClassProgram* THIS, RogueClassType* type_0, RogueTypeList* compounds_1 )
{
  if (type_0->index == -1)
  {
    return;
  }
  type_0->index = -1;
  {
    RoguePropertyList* _auto_180_2 = (type_0->property_list);
    RogueInt32 _auto_181_3 = (0);
    for (;_auto_181_3 < _auto_180_2->count;++_auto_181_3)
    {
      RogueClassProperty* p_4 = (((RogueClassProperty*)(_auto_180_2->data->objects[_auto_181_3])));
      if (((RogueType__is_compound( p_4->_type ))))
      {
        RogueProgram__collect_compound_dependencies__Type_TypeList( THIS, p_4->_type, compounds_1 );
      }
    }
  }
  RogueTypeList__add__Type( compounds_1, type_0 );
}

void RogueProgram__cull_unused_code( RogueClassProgram* THIS )
{
  {
    RogueTypeList* _auto_182_2 = (THIS->type_list);
    RogueInt32 _auto_183_3 = (0);
    for (;_auto_183_3 < _auto_182_2->count;++_auto_183_3)
    {
      RogueClassType* type_4 = (((RogueClassType*)(_auto_182_2->data->objects[_auto_183_3])));
      if (((RogueType__is_requisite( type_4 ))))
      {
        RogueType__trace_used_code( type_4 );
      }
    }
  }
  RogueProgram__trace_overridden_methods( THIS );
  {
    RogueTypeList* _auto_184_5 = (THIS->type_list);
    RogueInt32 _auto_185_6 = (0);
    for (;_auto_185_6 < _auto_184_5->count;++_auto_185_6)
    {
      RogueClassType* type_7 = (((RogueClassType*)(_auto_184_5->data->objects[_auto_185_6])));
      RogueType__cull_unused_methods( type_7 );
    }
  }
  RogueInt32 write_i_0 = (0);
  {
    RogueTypeList* _auto_186_8 = (THIS->type_list);
    RogueInt32 read_i_9 = (0);
    for (;read_i_9 < _auto_186_8->count;++read_i_9)
    {
      RogueClassType* type_1 = (((RogueClassType*)(THIS->type_list->data->objects[read_i_9])));
      if (!(((RogueType__should_cull( type_1 )))))
      {
        THIS->type_list->data->objects[write_i_0] = type_1;
        type_1->index = write_i_0;
        ++write_i_0;
      }
    }
  }
  RogueTypeList__discard_from__Int32( THIS->type_list, write_i_0 );
}

void RogueProgram__trace_overridden_methods( RogueClassProgram* THIS )
{
  RogueLogical traced_new_methods_0 = (true);
  while (traced_new_methods_0)
  {
    traced_new_methods_0 = ((RogueLogical)false);
    {
      RogueTypeList* _auto_187_5 = (THIS->type_list);
      RogueInt32 _auto_188_6 = (0);
      for (;_auto_188_6 < _auto_187_5->count;++_auto_188_6)
      {
        RogueClassType* type_7 = (((RogueClassType*)(_auto_187_5->data->objects[_auto_188_6])));
        if (type_7->is_used)
        {
          if (((RogueType__is_aspect( type_7 ))))
          {
            {
              RogueMethodList* _auto_189_8 = (type_7->method_list);
              RogueInt32 _auto_190_9 = (0);
              for (;_auto_190_9 < _auto_189_8->count;++_auto_190_9)
              {
                RogueClassMethod* m_10 = (((RogueClassMethod*)(_auto_189_8->data->objects[_auto_190_9])));
                if (m_10->is_used)
                {
                  {
                    RogueTypeList* _auto_191_11 = (m_10->incorporating_classes);
                    RogueInt32 _auto_192_12 = (0);
                    for (;_auto_192_12 < _auto_191_11->count;++_auto_192_12)
                    {
                      RogueClassType* ic_13 = (((RogueClassType*)(_auto_191_11->data->objects[_auto_192_12])));
                      if (ic_13->is_used)
                      {
                        RogueClassMethod* im_1 = (((RogueType__find_method__String( ic_13, m_10->signature ))));
                        if (!(im_1->is_used))
                        {
                          traced_new_methods_0 = ((RogueLogical)true);
                          RogueMethod__trace_used_code( im_1 );
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            {
              RogueMethodList* _auto_193_14 = (type_7->method_list);
              RogueInt32 _auto_194_15 = (0);
              for (;_auto_194_15 < _auto_193_14->count;++_auto_194_15)
              {
                RogueClassMethod* m_16 = (((RogueClassMethod*)(_auto_193_14->data->objects[_auto_194_15])));
                if (m_16->is_used)
                {
                  if ((!!(m_16->overridden_method) && !(m_16->overridden_method->is_used)))
                  {
                    traced_new_methods_0 = ((RogueLogical)true);
                    RogueMethod__trace_used_code( m_16->overridden_method );
                  }
                  {
                    RogueMethodList* _auto_195_17 = (m_16->overriding_methods);
                    RogueInt32 _auto_196_18 = (0);
                    for (;_auto_196_18 < _auto_195_17->count;++_auto_196_18)
                    {
                      RogueClassMethod* overriding_m_19 = (((RogueClassMethod*)(_auto_195_17->data->objects[_auto_196_18])));
                      if ((!(overriding_m_19->is_used) && overriding_m_19->type_context->is_used))
                      {
                        traced_new_methods_0 = ((RogueLogical)true);
                        RogueMethod__trace_used_code( overriding_m_19 );
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  RogueTypeList* class_list_2 = (((RogueTypeList__choose__Function_Type_RETURNSLogical( THIS->type_list, ((RogueClassFunction_Type_RETURNSLogical*)(((RogueClassFunction_197*)ROGUE_SINGLETON(Function_197)))) ))));
  RogueTypeList* aspect_list_3 = (((RogueTypeList__choose__Function_Type_RETURNSLogical( THIS->type_list, ((RogueClassFunction_Type_RETURNSLogical*)(((RogueClassFunction_198*)ROGUE_SINGLETON(Function_198)))) ))));
  {
    RogueTypeList* _auto_199_20 = (aspect_list_3);
    RogueInt32 _auto_200_21 = (0);
    for (;_auto_200_21 < _auto_199_20->count;++_auto_200_21)
    {
      RogueClassType* aspect_22 = (((RogueClassType*)(_auto_199_20->data->objects[_auto_200_21])));
      {
        RogueMethodList* _auto_201_23 = (aspect_22->method_list);
        RogueInt32 _auto_202_24 = (0);
        for (;_auto_202_24 < _auto_201_23->count;++_auto_202_24)
        {
          RogueClassMethod* aspect_m_25 = (((RogueClassMethod*)(_auto_201_23->data->objects[_auto_202_24])));
          if (aspect_m_25->is_used)
          {
            RogueTypeList__clear( aspect_m_25->incorporating_classes );
          }
        }
      }
    }
  }
  {
    RogueTypeList* _auto_203_26 = (aspect_list_3);
    RogueInt32 _auto_204_27 = (0);
    for (;_auto_204_27 < _auto_203_26->count;++_auto_204_27)
    {
      RogueClassType* aspect_28 = (((RogueClassType*)(_auto_203_26->data->objects[_auto_204_27])));
      {
        RogueTypeList* _auto_205_29 = (class_list_2);
        RogueInt32 _auto_206_30 = (0);
        for (;_auto_206_30 < _auto_205_29->count;++_auto_206_30)
        {
          RogueClassType* type_31 = (((RogueClassType*)(_auto_205_29->data->objects[_auto_206_30])));
          if (((RogueType__instance_of__Type( type_31, aspect_28 ))))
          {
            {
              RogueMethodList* _auto_207_32 = (aspect_28->method_list);
              RogueInt32 _auto_208_33 = (0);
              for (;_auto_208_33 < _auto_207_32->count;++_auto_208_33)
              {
                RogueClassMethod* aspect_m_34 = (((RogueClassMethod*)(_auto_207_32->data->objects[_auto_208_33])));
                if (aspect_m_34->is_used)
                {
                  RogueClassMethod* class_m_4 = (((RogueType__find_method__String( type_31, aspect_m_34->signature ))));
                  if ((!!(class_m_4) && class_m_4->is_used))
                  {
                    RogueTypeList__add__Type( aspect_m_34->incorporating_classes, type_31 );
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

RogueString* RogueProgram__validate_cpp_name__String( RogueClassProgram* THIS, RogueString* name_0 )
{
  RogueLogical begins_with_code_prefix_1 = (false);
  if (((RogueString__begins_with__String( name_0, THIS->code_prefix ))))
  {
    begins_with_code_prefix_1 = ((RogueLogical)true);
    name_0 = ((RogueString*)((RogueString__from__Int32( name_0, THIS->code_prefix->count ))));
  }
  RogueLogical all_underscores_2 = (true);
  if (((RogueString__ends_with__String( name_0, Rogue_literal_strings[426] ))))
  {
    {
      RogueInt32 i_3 = (0);
      RogueInt32 _auto_98_4 = ((name_0->count - 5));
      for (;i_3 <= _auto_98_4;++i_3)
      {
        if (name_0->characters[i_3] != (RogueCharacter)'_')
        {
          all_underscores_2 = ((RogueLogical)false);
          goto _auto_209;
        }
      }
    }
    _auto_209:;
    name_0 = ((RogueString*)((RogueString__operatorPLUS__String( Rogue_literal_strings[406], name_0 ))));
  }
  RogueOptionalInt32 i1_5 = (((RogueString__locate__Character_OptionalInt32( name_0, (RogueCharacter)'?', RogueOptionalInt32() ))));
  while (i1_5.exists)
  {
    name_0 = ((RogueString*)((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( Rogue_literal_strings[320], ((RogueString__leftmost__Int32( name_0, i1_5.value ))) ))), ((RogueString__from__Int32( name_0, (i1_5.value + 1) ))) ))));
    i1_5 = ((RogueOptionalInt32)((RogueString__locate__Character_OptionalInt32( name_0, (RogueCharacter)'?', RogueOptionalInt32() ))));
  }
  i1_5 = ((RogueOptionalInt32)((RogueString__locate__String_OptionalInt32( name_0, Rogue_literal_strings[198], RogueOptionalInt32() ))));
  while (i1_5.exists)
  {
    RogueOptionalInt32 i2_6 = (((RogueString__locate_last__String_OptionalInt32( name_0, Rogue_literal_strings[116], RogueOptionalInt32() ))));
    if (!(i2_6.exists))
    {
      goto _auto_210;
    }
    RogueString* before_7 = (((RogueString__from__Int32_Int32( name_0, 0, (i1_5.value - 1) ))));
    RogueString* after_8 = (((RogueString__from__Int32( name_0, (i2_6.value + 2) ))));
    RogueString* middle_9 = (((RogueString__from__Int32_Int32( name_0, (i1_5.value + 2), (i2_6.value - 1) ))));
    name_0 = ((RogueString*)((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ((RogueProgram__validate_cpp_name__String( THIS, middle_9 ))) ))) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], before_7 ))) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], after_8 ))) ))) ))));
    if (!!(((RogueProgram__find_type__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), name_0 )))))
    {
      name_0 = ((RogueString*)((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], before_7 ))) ))), Rogue_literal_strings[427] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], middle_9 ))) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], after_8 ))) ))) ))));
    }
    i1_5 = ((RogueOptionalInt32)((RogueString__locate__String_OptionalInt32( name_0, Rogue_literal_strings[198], RogueOptionalInt32() ))));
  }
  _auto_210:;
  i1_5 = ((RogueOptionalInt32)((RogueString__locate__String_OptionalInt32( name_0, Rogue_literal_strings[184], RogueOptionalInt32() ))));
  while (i1_5.exists)
  {
    name_0 = ((RogueString*)((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( ((RogueString__from__Int32_Int32( name_0, 0, (i1_5.value - 1) ))), Rogue_literal_strings[321] ))), ((RogueString__from__Int32( name_0, (i1_5.value + 2) ))) ))));
    i1_5 = ((RogueOptionalInt32)((RogueString__locate__String_OptionalInt32( name_0, Rogue_literal_strings[184], RogueOptionalInt32() ))));
  }
  RogueStringBuilder__clear( THIS->string_buffer );
  if (begins_with_code_prefix_1)
  {
    RogueStringBuilder__print__String( THIS->string_buffer, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->code_prefix );
  }
  RogueInt32 count_10 = (name_0->count);
  {
    RogueString* _auto_211_12 = (name_0);
    RogueInt32 i_13 = (0);
    for (;i_13 < _auto_211_12->count;++i_13)
    {
      RogueCharacter ch_11 = (name_0->characters[i_13]);
      if (((RogueCharacter__is_alphanumeric( ch_11 ))))
      {
        RogueStringBuilder__print__Character( THIS->string_buffer, ch_11 );
      }
      else
      {
        switch (((RogueInt32)(ch_11)))
        {
          case (RogueCharacter)'!':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[428] );
            break;
          }
          case (RogueCharacter)'%':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[429] );
            break;
          }
          case (RogueCharacter)'&':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[430] );
            break;
          }
          case (RogueCharacter)'*':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[431] );
            break;
          }
          case (RogueCharacter)'+':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[432] );
            break;
          }
          case (RogueCharacter)'-':
          {
            if ((i_13 + 1) < name_0->count)
            {
              switch (((RogueInt32)(name_0->characters[(i_13 + 1)])))
              {
                case (RogueCharacter)'>':
                {
                  RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[433] );
                  ++i_13;
                  break;
                }
                default:
                {
                  RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[434] );
                }
              }
            }
            break;
          }
          case (RogueCharacter)'.':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[406] );
            break;
          }
          case (RogueCharacter)'/':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[435] );
            break;
          }
          case (RogueCharacter)'<':
          {
            if ((i_13 + 1) < name_0->count)
            {
              switch (((RogueInt32)(name_0->characters[(i_13 + 1)])))
              {
                case (RogueCharacter)'=':
                {
                  RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[436] );
                  ++i_13;
                  break;
                }
                default:
                {
                  RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[437] );
                }
              }
            }
            break;
          }
          case (RogueCharacter)'=':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[438] );
            break;
          }
          case (RogueCharacter)'>':
          {
            if ((i_13 + 1) < name_0->count)
            {
              switch (((RogueInt32)(name_0->characters[(i_13 + 1)])))
              {
                case (RogueCharacter)'=':
                {
                  RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[439] );
                  ++i_13;
                  break;
                }
                default:
                {
                  RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[440] );
                }
              }
            }
            break;
          }
          case (RogueCharacter)'^':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[441] );
            break;
          }
          case (RogueCharacter)'|':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[442] );
            break;
          }
          case (RogueCharacter)'~':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[443] );
            break;
          }
          default:
          {
            RogueStringBuilder__print__Character( THIS->string_buffer, (RogueCharacter)'_' );
          }
        }
      }
    }
  }
  return (RogueString*)(((RogueStringBuilder__to_String( THIS->string_buffer ))));
}

void RogueProgram__write_cpp__String( RogueClassProgram* THIS, RogueString* filepath_0 )
{
  {
    RogueTypeList* _auto_212_24 = (THIS->type_list);
    RogueInt32 _auto_213_25 = (0);
    for (;_auto_213_25 < _auto_212_24->count;++_auto_213_25)
    {
      RogueClassType* type_26 = (((RogueClassType*)(_auto_212_24->data->objects[_auto_213_25])));
      RogueType__assign_cpp_name( type_26 );
    }
  }
  THIS->type_NativeArray->cpp_class_name = Rogue_literal_strings[444];
  {
    RogueTypeList* _auto_214_27 = (THIS->type_list);
    RogueInt32 _auto_215_28 = (0);
    for (;_auto_215_28 < _auto_214_27->count;++_auto_215_28)
    {
      RogueClassType* type_29 = (((RogueClassType*)(_auto_214_27->data->objects[_auto_215_28])));
      {
        RogueMethodList* _auto_216_30 = (type_29->global_method_list);
        RogueInt32 _auto_217_31 = (0);
        for (;_auto_217_31 < _auto_216_30->count;++_auto_217_31)
        {
          RogueClassMethod* r_32 = (((RogueClassMethod*)(_auto_216_30->data->objects[_auto_217_31])));
          RogueMethod__assign_cpp_name( r_32 );
        }
      }
      {
        RogueMethodList* _auto_218_33 = (type_29->method_list);
        RogueInt32 _auto_219_34 = (0);
        for (;_auto_219_34 < _auto_218_33->count;++_auto_219_34)
        {
          RogueClassMethod* m_35 = (((RogueClassMethod*)(_auto_218_33->data->objects[_auto_219_34])));
          RogueMethod__assign_cpp_name( m_35 );
        }
      }
    }
  }
  RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[448] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], filepath_0 ))) ))), Rogue_literal_strings[449] ))) ))) );
  RogueClassCPPWriter* writer_1 = (((RogueCPPWriter__init__String( ((RogueClassCPPWriter*)ROGUE_CREATE_OBJECT(CPPWriter)), ((RogueString__operatorPLUS__String( filepath_0, Rogue_literal_strings[450] ))) ))));
  {
    RogueStringList* _auto_223_36 = (THIS->native_header);
    RogueInt32 _auto_224_37 = (0);
    for (;_auto_224_37 < _auto_223_36->count;++_auto_224_37)
    {
      RogueString* line_38 = (((RogueString*)(_auto_223_36->data->objects[_auto_224_37])));
      RogueCPPWriter__println__String( writer_1, line_38 );
    }
  }
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[451] );
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_225_39 = (THIS->type_list);
    RogueInt32 _auto_226_40 = (0);
    for (;_auto_226_40 < _auto_225_39->count;++_auto_226_40)
    {
      RogueClassType* type_41 = (((RogueClassType*)(_auto_225_39->data->objects[_auto_226_40])));
      if ((!(((RogueType__omit_output( type_41 )))) && !(((RogueType__is_primitive( type_41 ))))))
      {
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[452] ))), type_41->cpp_class_name ))), Rogue_literal_strings[205] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_227_42 = (THIS->type_list);
    RogueInt32 _auto_228_43 = (0);
    for (;_auto_228_43 < _auto_227_42->count;++_auto_228_43)
    {
      RogueClassType* type_44 = (((RogueClassType*)(_auto_227_42->data->objects[_auto_228_43])));
      if ((((RogueType__is_compound( type_44 ))) && !(((RogueType__omit_output( type_44 ))))))
      {
        RogueType__print_data_definition__CPPWriter( type_44, writer_1 );
        RogueCPPWriter__println( writer_1 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[456] );
  {
    RogueTypeList* _auto_229_45 = (THIS->type_list);
    RogueInt32 _auto_230_46 = (0);
    for (;_auto_230_46 < _auto_229_45->count;++_auto_230_46)
    {
      RogueClassType* type_47 = (((RogueClassType*)(_auto_229_45->data->objects[_auto_230_46])));
      {
        RoguePropertyList* _auto_231_48 = (type_47->global_list);
        RogueInt32 _auto_232_49 = (0);
        for (;_auto_232_49 < _auto_231_48->count;++_auto_232_49)
        {
          RogueClassProperty* g_50 = (((RogueClassProperty*)(_auto_231_48->data->objects[_auto_232_49])));
          RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[486] ))), g_50->_type ))), Rogue_literal_strings[487] );
          RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, type_47->cpp_name ))), Rogue_literal_strings[406] ))), g_50->cpp_name ))), Rogue_literal_strings[205] );
        }
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_233_51 = (THIS->type_list);
    RogueInt32 _auto_234_52 = (0);
    for (;_auto_234_52 < _auto_233_51->count;++_auto_234_52)
    {
      RogueClassType* type_53 = (((RogueClassType*)(_auto_233_51->data->objects[_auto_234_52])));
      if ((!(((RogueType__is_compound( type_53 )))) && !(((RogueType__omit_output( type_53 ))))))
      {
        RogueType__print_data_definition__CPPWriter( type_53, writer_1 );
        RogueCPPWriter__println( writer_1 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_235_54 = (THIS->type_list);
    RogueInt32 _auto_236_55 = (0);
    for (;_auto_236_55 < _auto_235_54->count;++_auto_236_55)
    {
      RogueClassType* type_56 = (((RogueClassType*)(_auto_235_54->data->objects[_auto_236_55])));
      if ((!(((RogueType__omit_output( type_56 )))) || (((RogueType__is_native( type_56 ))) && !(type_56->is_array))))
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[488] );
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_1, type_56->cpp_name ))), Rogue_literal_strings[205] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_237_57 = (THIS->type_list);
    RogueInt32 _auto_238_58 = (0);
    for (;_auto_238_58 < _auto_237_57->count;++_auto_238_58)
    {
      RogueClassType* type_59 = (((RogueClassType*)(_auto_237_57->data->objects[_auto_238_58])));
      RogueType__print_global_method_prototypes__CPPWriter( type_59, writer_1 );
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_239_60 = (THIS->type_list);
    RogueInt32 _auto_240_61 = (0);
    for (;_auto_240_61 < _auto_239_60->count;++_auto_240_61)
    {
      RogueClassType* type_62 = (((RogueClassType*)(_auto_239_60->data->objects[_auto_240_61])));
      RogueType__print_method_prototypes__CPPWriter( type_62, writer_1 );
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[490] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__close( writer_1 );
  RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[448] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], filepath_0 ))) ))), Rogue_literal_strings[491] ))) ))) );
  writer_1 = ((RogueClassCPPWriter*)((RogueCPPWriter__init__String( ((RogueClassCPPWriter*)ROGUE_CREATE_OBJECT(CPPWriter)), ((RogueString__operatorPLUS__String( filepath_0, Rogue_literal_strings[425] ))) ))));
  RogueString* base_filename_2 = (filepath_0);
  if (((RogueString__contains__String( base_filename_2, ((RogueCharacter__to_String( (RogueCharacter)'/' ))) ))))
  {
    base_filename_2 = ((RogueString*)((RogueString__after_last__Character( base_filename_2, (RogueCharacter)'/' ))));
  }
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[492] );
  RogueCPPWriter__println__String( writer_1, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[493] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], base_filename_2 ))) ))), Rogue_literal_strings[494] ))) ))) );
  RogueCPPWriter__println( writer_1 );
  {
    RogueStringList* _auto_241_63 = (THIS->native_code);
    RogueInt32 _auto_242_64 = (0);
    for (;_auto_242_64 < _auto_241_63->count;++_auto_242_64)
    {
      RogueString* line_65 = (((RogueString*)(_auto_241_63->data->objects[_auto_242_64])));
      RogueCPPWriter__println__String( writer_1, line_65 );
    }
  }
  RogueStringList* native_method_signature_list_3 = (((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) ))));
  RogueClassString_MethodTable* native_method_signature_lookup_4 = (((RogueString_MethodTable__init( ((RogueClassString_MethodTable*)ROGUE_CREATE_OBJECT(String_MethodTable)) ))));
  {
    RogueTypeList* _auto_243_66 = (THIS->type_list);
    RogueInt32 _auto_244_67 = (0);
    for (;_auto_244_67 < _auto_243_66->count;++_auto_244_67)
    {
      RogueClassType* type_68 = (((RogueClassType*)(_auto_243_66->data->objects[_auto_244_67])));
      if (type_68->is_used)
      {
        RogueType__determine_cpp_method_typedefs__StringList_String_MethodTable( type_68, native_method_signature_list_3, native_method_signature_lookup_4 );
      }
    }
  }
  {
    RogueStringList* _auto_245_69 = (native_method_signature_list_3);
    RogueInt32 _auto_246_70 = (0);
    for (;_auto_246_70 < _auto_245_69->count;++_auto_246_70)
    {
      RogueString* sig_71 = (((RogueString*)(_auto_245_69->data->objects[_auto_246_70])));
      RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[497] ))), ((RogueString__before_first__String( sig_71, Rogue_literal_strings[498] ))) ))), Rogue_literal_strings[499] );
      RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, ((RogueString_MethodTable__get__String( native_method_signature_lookup_4, sig_71 )))->cpp_typedef ))), Rogue_literal_strings[67] );
      RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_1, ((RogueString__after_first__String( sig_71, Rogue_literal_strings[498] ))) ))), Rogue_literal_strings[205] );
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueStringList* _auto_247_72 = (native_method_signature_list_3);
    RogueInt32 _auto_248_73 = (0);
    for (;_auto_248_73 < _auto_247_72->count;++_auto_248_73)
    {
      RogueString* sig_74 = (((RogueString*)(_auto_247_72->data->objects[_auto_248_73])));
      RogueClassMethod* m_5 = (((RogueString_MethodTable__get__String( native_method_signature_lookup_4, sig_74 ))));
      if (m_5->called_dynamically)
      {
        RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_1, m_5->_return_type ))), Rogue_literal_strings[500] ))), m_5->cpp_typedef );
        RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[501] ))), m_5->type_context ))), Rogue_literal_strings[489] );
        {
          RogueLocalList* _auto_255_75 = (m_5->parameters);
          RogueInt32 i_76 = (0);
          for (;i_76 < _auto_255_75->count;++i_76)
          {
            RogueClassLocal* p_6 = (((RogueClassLocal*)(m_5->parameters->data->objects[i_76])));
            RogueCPPWriter__print__Int32( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[469] ))), p_6->_type ))), Rogue_literal_strings[502] ))), i_76 );
          }
        }
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[503] );
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[196] );
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[286] );
        if (!!(m_5->_return_type))
        {
          RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[504] );
        }
        RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[505] ))), m_5->cpp_typedef );
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[506] );
        {
          RogueLocalList* _auto_256_77 = (m_5->parameters);
          RogueInt32 i_78 = (0);
          for (;i_78 < _auto_256_77->count;++i_78)
          {
            RogueCPPWriter__print__Int32( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[507] ))), i_78 );
          }
        }
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[508] );
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[114] );
        RogueCPPWriter__println( writer_1 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[456] );
  {
    RogueTypeList* _auto_257_79 = (THIS->type_list);
    RogueInt32 _auto_258_80 = (0);
    for (;_auto_258_80 < _auto_257_79->count;++_auto_258_80)
    {
      RogueClassType* type_81 = (((RogueClassType*)(_auto_257_79->data->objects[_auto_258_80])));
      {
        RoguePropertyList* _auto_259_82 = (type_81->global_list);
        RogueInt32 _auto_260_83 = (0);
        for (;_auto_260_83 < _auto_259_82->count;++_auto_260_83)
        {
          RogueClassProperty* g_84 = (((RogueClassProperty*)(_auto_259_82->data->objects[_auto_260_83])));
          RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_1, g_84->_type ))), Rogue_literal_strings[487] );
          RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, type_81->cpp_name ))), Rogue_literal_strings[406] ))), g_84->cpp_name );
          RogueCPPWriter__print_default_value__Type( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[509] ))), g_84->_type );
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[205] );
        }
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_261_85 = (THIS->type_list);
    RogueInt32 _auto_262_86 = (0);
    for (;_auto_262_86 < _auto_261_85->count;++_auto_262_86)
    {
      RogueClassType* type_87 = (((RogueClassType*)(_auto_261_85->data->objects[_auto_262_86])));
      if ((((RogueType__has_object_references( type_87 ))) && !(((RogueType__is_reference_array( type_87 ))))))
      {
        RogueString* trace_name_7 = (type_87->cpp_name);
        if ((type_87->is_array && ((RogueType__is_compound( type_87->_element_type )))))
        {
          trace_name_7 = ((RogueString*)((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), type_87->name ))));
        }
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[510] ))), trace_name_7 ))), Rogue_literal_strings[511] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_263_88 = (THIS->type_list);
    RogueInt32 _auto_264_89 = (0);
    for (;_auto_264_89 < _auto_263_88->count;++_auto_264_89)
    {
      RogueClassType* type_90 = (((RogueClassType*)(_auto_263_88->data->objects[_auto_264_89])));
      if ((((RogueType__has_object_references( type_90 ))) && !(((RogueType__is_reference_array( type_90 ))))))
      {
        RogueString* trace_name_8 = (type_90->cpp_name);
        if ((type_90->is_array && ((RogueType__is_compound( type_90->_element_type )))))
        {
          trace_name_8 = ((RogueString*)((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), type_90->name ))));
        }
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[510] ))), trace_name_8 ))), Rogue_literal_strings[512] );
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[196] );
        writer_1->indent += 2;
        if (((RogueType__is_compound( type_90 ))))
        {
          RogueLogical uses_link_9 = (false);
          {
            RoguePropertyList* _auto_265_91 = (type_90->property_list);
            RogueInt32 _auto_266_92 = (0);
            for (;_auto_266_92 < _auto_265_91->count;++_auto_266_92)
            {
              RogueClassProperty* p_93 = (((RogueClassProperty*)(_auto_265_91->data->objects[_auto_266_92])));
              if (((RogueType__is_reference( p_93->_type ))))
              {
                uses_link_9 = ((RogueLogical)true);
                goto _auto_267;
              }
            }
          }
          _auto_267:;
          if (uses_link_9)
          {
            RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[513] );
          }
          RogueProgram__print_property_trace_code__Type_CPPWriter( THIS, type_90, writer_1 );
        }
        else if (type_90->is_array)
        {
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[521] );
          RogueCPPWriter__println__String( ((RogueCPPWriter__print__Type( writer_1, type_90->_element_type ))), Rogue_literal_strings[522] );
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[523] );
          RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[524] ))), type_90->_element_type->cpp_class_name ))), Rogue_literal_strings[525] );
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[526] );
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[196] );
          RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[527] ))), type_90->_element_type->cpp_name ))), Rogue_literal_strings[528] );
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[114] );
        }
        else
        {
          RogueLogical uses_link_10 = (false);
          {
            RoguePropertyList* _auto_268_94 = (type_90->property_list);
            RogueInt32 _auto_269_95 = (0);
            for (;_auto_269_95 < _auto_268_94->count;++_auto_269_95)
            {
              RogueClassProperty* p_96 = (((RogueClassProperty*)(_auto_268_94->data->objects[_auto_269_95])));
              if (((RogueType__is_reference( p_96->_type ))))
              {
                uses_link_10 = ((RogueLogical)true);
                goto _auto_270;
              }
            }
          }
          _auto_270:;
          if (uses_link_10)
          {
            RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[513] );
          }
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[529] );
          RogueProgram__print_property_trace_code__Type_CPPWriter( THIS, type_90, writer_1 );
        }
        writer_1->indent -= 2;
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[114] );
        RogueCPPWriter__println( writer_1 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[530] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[196] );
  writer_1->indent += 2;
  {
    RogueTypeList* _auto_271_97 = (THIS->type_list);
    RogueInt32 i_98 = (0);
    for (;i_98 < _auto_271_97->count;++i_98)
    {
      RogueClassType* type_11 = (((RogueClassType*)(THIS->type_list->data->objects[i_98])));
      if (i_98 > 0)
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[179] );
        if ((i_98 & 15) == 0)
        {
          RogueCPPWriter__println( writer_1 );
        }
      }
      RogueCPPWriter__print__Int32( writer_1, ((RogueProgram__add_literal_string__String( THIS, type_11->name ))) );
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[485] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[531] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[196] );
  writer_1->indent += 2;
  RogueLogical first_12 = (true);
  {
    RogueTypeList* _auto_272_99 = (THIS->type_list);
    RogueInt32 _auto_273_100 = (0);
    for (;_auto_273_100 < _auto_272_99->count;++_auto_273_100)
    {
      RogueClassType* type_101 = (((RogueClassType*)(_auto_272_99->data->objects[_auto_273_100])));
      if (first_12)
      {
        first_12 = ((RogueLogical)false);
      }
      else
      {
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[179] );
      }
      RogueClassMethod* m_13 = (((RogueType__find_method__String( type_101, Rogue_literal_strings[394] ))));
      if ((((!!(m_13) && !(((RogueType__omit_output( type_101 ))))) && m_13->is_used) && m_13->statements->count > 1))
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[532] );
        RogueCPPWriter__print__String( writer_1, m_13->cpp_name );
      }
      else
      {
        RogueCPPWriter__print__Int32( writer_1, 0 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[485] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[533] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[196] );
  writer_1->indent += 2;
  first_12 = ((RogueLogical)true);
  {
    RogueTypeList* _auto_274_102 = (THIS->type_list);
    RogueInt32 _auto_275_103 = (0);
    for (;_auto_275_103 < _auto_274_102->count;++_auto_275_103)
    {
      RogueClassType* type_104 = (((RogueClassType*)(_auto_274_102->data->objects[_auto_275_103])));
      if (first_12)
      {
        first_12 = ((RogueLogical)false);
      }
      else
      {
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[179] );
      }
      RogueClassMethod* m_14 = (((RogueType__find_method__String( type_104, Rogue_literal_strings[422] ))));
      if ((((!!(m_14) && !(((RogueType__omit_output( type_104 ))))) && m_14->is_used) && m_14->statements->count > 1))
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[532] );
        RogueCPPWriter__print__String( writer_1, m_14->cpp_name );
      }
      else
      {
        RogueCPPWriter__print__Int32( writer_1, 0 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[485] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[534] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[196] );
  writer_1->indent += 2;
  first_12 = ((RogueLogical)true);
  {
    RogueTypeList* _auto_276_105 = (THIS->type_list);
    RogueInt32 _auto_277_106 = (0);
    for (;_auto_277_106 < _auto_276_105->count;++_auto_277_106)
    {
      RogueClassType* type_107 = (((RogueClassType*)(_auto_276_105->data->objects[_auto_277_106])));
      if (first_12)
      {
        first_12 = ((RogueLogical)false);
      }
      else
      {
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[179] );
      }
      RogueClassMethod* m_15 = (((RogueType__find_method__String( type_107, Rogue_literal_strings[397] ))));
      if ((((!!(m_15) && !(((RogueType__omit_output( type_107 ))))) && m_15->is_used) && !!(m_15->statements->count)))
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[535] );
        RogueCPPWriter__print__String( writer_1, m_15->cpp_name );
      }
      else
      {
        RogueCPPWriter__print__Int32( writer_1, 0 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[485] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[536] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[196] );
  writer_1->indent += 2;
  first_12 = ((RogueLogical)true);
  {
    RogueTypeList* _auto_278_108 = (THIS->type_list);
    RogueInt32 _auto_279_109 = (0);
    for (;_auto_279_109 < _auto_278_108->count;++_auto_279_109)
    {
      RogueClassType* type_110 = (((RogueClassType*)(_auto_278_108->data->objects[_auto_279_109])));
      if (first_12)
      {
        first_12 = ((RogueLogical)false);
      }
      else
      {
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[179] );
      }
      if (((RogueType__has_object_references( type_110 ))))
      {
        if (((RogueType__is_reference_array( type_110 ))))
        {
          RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[537] );
        }
        else
        {
          RogueString* trace_name_16 = (type_110->cpp_name);
          if ((type_110->is_array && ((RogueType__is_compound( type_110->_element_type )))))
          {
            trace_name_16 = ((RogueString*)((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), type_110->name ))));
          }
          RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[28] ))), trace_name_16 ))), Rogue_literal_strings[538] );
        }
      }
      else
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[539] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[485] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[540] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[196] );
  writer_1->indent += 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[513] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[541] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[542] );
  {
    RogueTypeList* _auto_280_111 = (THIS->type_list);
    RogueInt32 _auto_281_112 = (0);
    for (;_auto_281_112 < _auto_280_111->count;++_auto_281_112)
    {
      RogueClassType* type_113 = (((RogueClassType*)(_auto_280_111->data->objects[_auto_281_112])));
      if (((RogueType__has_global_references( type_113 ))))
      {
        {
          RoguePropertyList* _auto_282_114 = (type_113->global_list);
          RogueInt32 _auto_283_115 = (0);
          for (;_auto_283_115 < _auto_282_114->count;++_auto_283_115)
          {
            RogueClassProperty* g_116 = (((RogueClassProperty*)(_auto_282_114->data->objects[_auto_283_115])));
            if ((((RogueType__is_reference( g_116->_type ))) || ((RogueType__has_object_references( g_116->_type )))))
            {
              if (((((RogueType__is_reference( g_116->_type ))) && !(((RogueType__is_functional( g_116->_type ))))) && !(g_116->_type->is_array)))
              {
                RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[543] ))), type_113->cpp_name ))), Rogue_literal_strings[406] ))), g_116->cpp_name );
                RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[516] );
              }
              else
              {
                RogueString* trace_class_name_17 = (Rogue_literal_strings[39]);
                if (g_116->_type->is_array)
                {
                  if ((((RogueType__is_compound( g_116->_type->_element_type ))) && ((RogueType__has_object_references( g_116->_type->_element_type )))))
                  {
                    trace_class_name_17 = ((RogueString*)((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), g_116->_type->name ))));
                  }
                  else
                  {
                    trace_class_name_17 = ((RogueString*)Rogue_literal_strings[445]);
                  }
                }
                else
                {
                  trace_class_name_17 = ((RogueString*)((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), g_116->_type->cpp_name ))));
                }
                RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[518] );
                if (!(((RogueType__is_reference( g_116->_type )))))
                {
                  RogueCPPWriter__print__Character( writer_1, (RogueCharacter)'&' );
                }
                RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[28] ))), type_113->cpp_name ))), Rogue_literal_strings[406] ))), g_116->cpp_name );
                RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[519] ))), trace_class_name_17 ))), Rogue_literal_strings[520] );
              }
            }
          }
        }
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[544] );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[114] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[545] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[196] );
  writer_1->indent += 2;
  RogueInt32 table_index_18 = (0);
  {
    RogueTypeList* _auto_284_117 = (THIS->type_list);
    RogueInt32 _auto_285_118 = (0);
    for (;_auto_285_118 < _auto_284_117->count;++_auto_285_118)
    {
      RogueClassType* type_119 = (((RogueClassType*)(_auto_284_117->data->objects[_auto_285_118])));
      if (!(((RogueType__omit_output( type_119 )))))
      {
        table_index_18 = ((RogueInt32)((RogueType__print_dynamic_method_table_entries__Int32_CPPWriter( type_119, table_index_18, writer_1 ))));
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[485] );
  RogueCPPWriter__println( writer_1 );
  RogueInt32List* info_19 = (((RogueInt32List__init( ((RogueInt32List*)ROGUE_CREATE_OBJECT(Int32List)) ))));
  {
    RogueTypeList* _auto_290_120 = (THIS->type_list);
    RogueInt32 _auto_291_121 = (0);
    for (;_auto_291_121 < _auto_290_120->count;++_auto_291_121)
    {
      RogueClassType* type_122 = (((RogueClassType*)(_auto_290_120->data->objects[_auto_291_121])));
      RogueType__collect_type_info__Int32List( type_122, info_19 );
    }
  }
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__Int32( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[550] ))), info_19->count ))), Rogue_literal_strings[551] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[196] );
  writer_1->indent += 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[552] );
  first_12 = ((RogueLogical)true);
  RogueInt32 items_20 = (0);
  {
    RogueInt32List* _auto_292_123 = (info_19);
    RogueInt32 _auto_293_124 = (0);
    for (;_auto_293_124 < _auto_292_123->count;++_auto_293_124)
    {
      RogueInt32 n_125 = (_auto_292_123->data->integers[_auto_293_124]);
      if (first_12)
      {
        first_12 = ((RogueLogical)false);
      }
      else
      {
        RogueCPPWriter__print_literal_character__Character_Logical( writer_1, (RogueCharacter)',', false );
      }
      ++items_20;
      if (items_20 == 25)
      {
        RogueCPPWriter__println( writer_1 );
        items_20 = ((RogueInt32)0);
      }
      RogueCPPWriter__print__Int32( writer_1, n_125 );
    }
  }
  if (items_20 > 0)
  {
    RogueCPPWriter__println( writer_1 );
  }
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[485] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__Int32( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[558] ))), THIS->type_list->count ))), Rogue_literal_strings[551] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[196] );
  writer_1->indent += 2;
  first_12 = ((RogueLogical)true);
  {
    RogueTypeList* _auto_294_126 = (THIS->type_list);
    RogueInt32 _auto_295_127 = (0);
    for (;_auto_295_127 < _auto_294_126->count;++_auto_295_127)
    {
      RogueClassType* type_128 = (((RogueClassType*)(_auto_294_126->data->objects[_auto_295_127])));
      if (first_12)
      {
        first_12 = ((RogueLogical)false);
      }
      else
      {
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[179] );
      }
      RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[559] ))), type_128->cpp_class_name ))), Rogue_literal_strings[67] );
    }
  }
  if (items_20 > 0)
  {
    RogueCPPWriter__println( writer_1 );
  }
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[485] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__Int32( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[560] ))), 1 ))), Rogue_literal_strings[205] );
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__Int32( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[561] ))), 1 ))), Rogue_literal_strings[562] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__Int32( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[563] ))), THIS->type_list->count ))), Rogue_literal_strings[205] );
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__Int32( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[564] ))), THIS->type_list->count ))), Rogue_literal_strings[562] );
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_296_129 = (THIS->type_list);
    RogueInt32 _auto_297_130 = (0);
    for (;_auto_297_130 < _auto_296_129->count;++_auto_297_130)
    {
      RogueClassType* type_131 = (((RogueClassType*)(_auto_296_129->data->objects[_auto_297_130])));
      if ((!(((RogueType__omit_output( type_131 )))) || (((RogueType__is_native( type_131 ))) && !(type_131->is_array))))
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[565] );
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_1, type_131->cpp_name ))), Rogue_literal_strings[205] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__Int32( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[566] ))), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_list->count ))), Rogue_literal_strings[205] );
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__Int32( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[567] ))), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_list->count ))), Rogue_literal_strings[562] );
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_298_132 = (THIS->type_list);
    RogueInt32 _auto_299_133 = (0);
    for (;_auto_299_133 < _auto_298_132->count;++_auto_299_133)
    {
      RogueClassType* type_134 = (((RogueClassType*)(_auto_298_132->data->objects[_auto_299_133])));
      RogueType__print_global_method_definitions__CPPWriter( type_134, writer_1 );
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_300_135 = (THIS->type_list);
    RogueInt32 _auto_301_136 = (0);
    for (;_auto_301_136 < _auto_300_135->count;++_auto_301_136)
    {
      RogueClassType* type_137 = (((RogueClassType*)(_auto_300_135->data->objects[_auto_301_136])));
      RogueType__print_method_definitions__CPPWriter( type_137, writer_1 );
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[577] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[196] );
  writer_1->indent += 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[578] );
  {
    RogueTypeList* _auto_302_138 = (THIS->type_list);
    RogueInt32 _auto_303_139 = (0);
    for (;_auto_303_139 < _auto_302_138->count;++_auto_303_139)
    {
      RogueClassType* type_140 = (((RogueClassType*)(_auto_302_138->data->objects[_auto_303_139])));
      if ((!(((RogueType__omit_output( type_140 )))) || (((RogueType__is_native( type_140 ))) && !(type_140->is_array))))
      {
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__Int32( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[447] ))), type_140->cpp_name ))), Rogue_literal_strings[579] ))), type_140->index ))), Rogue_literal_strings[580] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueStringList* _auto_304_141 = (((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_list);
    RogueInt32 i_142 = (0);
    for (;i_142 < _auto_304_141->count;++i_142)
    {
      RogueCPPWriter__print__Int32( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[581] ))), i_142 );
      RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[582] );
      RogueString* st_21 = (((RogueString__to_utf8( ((RogueString*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_list->data->objects[i_142])) ))));
      RogueClassCPPWriter* encoded_count_22 = (((RogueCPPWriter__print_literal_string__String( writer_1, st_21 ))));
      RogueCPPWriter__print__Int32( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[469] ))), st_21->count );
      RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[583] );
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[114] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[584] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[196] );
  writer_1->indent += 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[585] );
  {
    RogueTypeList* _auto_305_143 = (THIS->type_list);
    RogueInt32 _auto_306_144 = (0);
    for (;_auto_306_144 < _auto_305_143->count;++_auto_306_144)
    {
      RogueClassType* type_145 = (((RogueClassType*)(_auto_305_143->data->objects[_auto_306_144])));
      if (!(((RogueType__omit_output( type_145 )))))
      {
        RogueClassMethod* m_23 = (((RogueType__find_routine__String( type_145, Rogue_literal_strings[391] ))));
        if ((!!(m_23) && ((void*)m_23->type_context) == ((void*)type_145)))
        {
          RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_1, m_23->cpp_name ))), Rogue_literal_strings[586] );
        }
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[587] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[588] );
  {
    RogueTypeList* _auto_307_146 = (THIS->type_list);
    RogueInt32 _auto_308_147 = (0);
    for (;_auto_308_147 < _auto_307_146->count;++_auto_308_147)
    {
      RogueClassType* type_148 = (((RogueClassType*)(_auto_307_146->data->objects[_auto_308_147])));
      if ((!(((RogueType__omit_output( type_148 )))) && ((RogueType__is_singleton( type_148 )))))
      {
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[589] ))), type_148->cpp_name ))), Rogue_literal_strings[508] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[590] );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[114] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[591] );
  if (((RogueProgram__is_type_defined__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), Rogue_literal_strings[592] ))))
  {
    RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[593] );
  }
  else
  {
    RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[594] );
  }
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[595] );
  if (((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->generate_main)
  {
    RogueCPPWriter__println( writer_1 );
    RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[596] );
  }
  RogueCPPWriter__close( writer_1 );
}

void RogueProgram__print_property_trace_code__Type_CPPWriter( RogueClassProgram* THIS, RogueClassType* type_0, RogueClassCPPWriter* writer_1 )
{
  {
    RoguePropertyList* _auto_309_3 = (type_0->property_list);
    RogueInt32 _auto_310_4 = (0);
    for (;_auto_310_4 < _auto_309_3->count;++_auto_310_4)
    {
      RogueClassProperty* p_5 = (((RogueClassProperty*)(_auto_309_3->data->objects[_auto_310_4])));
      if ((((RogueType__is_reference( p_5->_type ))) || ((RogueType__has_object_references( p_5->_type )))))
      {
        if (((((RogueType__is_reference( p_5->_type ))) && !(((RogueType__is_functional( p_5->_type ))))) && !(p_5->_type->is_array)))
        {
          RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[514] ))), type_0->cpp_class_name ))), Rogue_literal_strings[515] ))), p_5->cpp_name );
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[516] );
        }
        else if (((RogueType__is_compound( p_5->_type ))))
        {
          RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[28] ))), p_5->_type->cpp_name ))), Rogue_literal_strings[517] );
          RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[505] ))), type_0->cpp_class_name ))), Rogue_literal_strings[515] ))), p_5->cpp_name );
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[508] );
        }
        else
        {
          RogueString* trace_class_name_2 = (Rogue_literal_strings[39]);
          if (p_5->_type->is_array)
          {
            if ((((RogueType__is_compound( p_5->_type->_element_type ))) && ((RogueType__has_object_references( p_5->_type->_element_type )))))
            {
              trace_class_name_2 = ((RogueString*)((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), p_5->_type->name ))));
            }
            else
            {
              trace_class_name_2 = ((RogueString*)Rogue_literal_strings[445]);
            }
          }
          else
          {
            trace_class_name_2 = ((RogueString*)((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), p_5->_type->cpp_name ))));
          }
          RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[518] );
          RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[505] ))), type_0->cpp_class_name ))), Rogue_literal_strings[515] ))), p_5->cpp_name );
          RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[519] ))), trace_class_name_2 ))), Rogue_literal_strings[520] );
        }
      }
    }
  }
}

RogueClassProgram* RogueProgram__init_object( RogueClassProgram* THIS )
{
  THIS->code_prefix = Rogue_literal_strings[28];
  THIS->program_name = Rogue_literal_strings[29];
  THIS->template_list = ((RogueTemplateList__init( ((RogueTemplateList*)ROGUE_CREATE_OBJECT(TemplateList)) )));
  THIS->template_lookup = ((RogueString_TemplateTable__init( ((RogueClassString_TemplateTable*)ROGUE_CREATE_OBJECT(String_TemplateTable)) )));
  THIS->augment_lookup = ((RogueString_AugmentListTable__init( ((RogueClassString_AugmentListTable*)ROGUE_CREATE_OBJECT(String_AugmentListTable)) )));
  THIS->requisite_list = ((RogueRequisiteItemList__init( ((RogueRequisiteItemList*)ROGUE_CREATE_OBJECT(RequisiteItemList)) )));
  THIS->first_filepath = Rogue_literal_strings[0];
  THIS->global_properties = ((RoguePropertyList__init( ((RoguePropertyList*)ROGUE_CREATE_OBJECT(PropertyList)) )));
  THIS->native_header = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  THIS->native_code = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  THIS->methods_by_signature = ((RogueString_MethodListTable__init( ((RogueClassString_MethodListTable*)ROGUE_CREATE_OBJECT(String_MethodListTable)) )));
  THIS->type_list = ((RogueTypeList__init( ((RogueTypeList*)ROGUE_CREATE_OBJECT(TypeList)) )));
  THIS->type_lookup = ((RogueString_TypeTable__init( ((RogueClassString_TypeTable*)ROGUE_CREATE_OBJECT(String_TypeTable)) )));
  THIS->literal_string_lookup = ((RogueString_Int32Table__init( ((RogueClassString_Int32Table*)ROGUE_CREATE_OBJECT(String_Int32Table)) )));
  THIS->literal_string_list = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  THIS->string_buffer = ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) )));
  THIS->ids_by_module = ((RogueString_StringListTable__init( ((RogueClassString_StringListTable*)ROGUE_CREATE_OBJECT(String_StringListTable)) )));
  return (RogueClassProgram*)(THIS);
}

RogueString* RogueTemplateList__to_String( RogueTemplateList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTemplateList* _auto_407_2 = (THIS);
    RogueInt32 _auto_408_3 = (0);
    for (;_auto_408_3 < _auto_407_2->count;++_auto_408_3)
    {
      RogueClassTemplate* value_4 = (((RogueClassTemplate*)(_auto_407_2->data->objects[_auto_408_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueTemplateList__type_name( RogueTemplateList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[677]);
}

RogueTemplateList* RogueTemplateList__init_object( RogueTemplateList* THIS )
{
  return (RogueTemplateList*)(THIS);
}

RogueTemplateList* RogueTemplateList__init( RogueTemplateList* THIS )
{
  RogueTemplateList__init__Int32( THIS, 10 );
  return (RogueTemplateList*)(THIS);
}

RogueTemplateList* RogueTemplateList__init__Int32( RogueTemplateList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassTemplate*), true );
  return (RogueTemplateList*)(THIS);
}

RogueTemplateList* RogueTemplateList__add__Template( RogueTemplateList* THIS, RogueClassTemplate* value_0 )
{
  ((RogueTemplateList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTemplateList*)(THIS);
}

RogueInt32 RogueTemplateList__capacity( RogueTemplateList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTemplateList* RogueTemplateList__reserve__Int32( RogueTemplateList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassTemplate*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueTemplateList__capacity( THIS ))) + ((RogueTemplateList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassTemplate*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTemplateList*)(THIS);
}

RogueString* RogueTemplate__type_name( RogueClassTemplate* THIS )
{
  return (RogueString*)(Rogue_literal_strings[608]);
}

RogueClassTemplate* RogueTemplate__init__Token_String_Int32( RogueClassTemplate* THIS, RogueClassToken* _auto_99_0, RogueString* _auto_100_1, RogueInt32 attribute_flags_2 )
{
  THIS->name = _auto_100_1;
  THIS->t = _auto_99_0;
  RogueAttributes__add__Int32( THIS->attributes, attribute_flags_2 );
  return (RogueClassTemplate*)(THIS);
}

RogueClassTypeParameter* RogueTemplate__add_type_parameter__Token_String( RogueClassTemplate* THIS, RogueClassToken* p_t_0, RogueString* p_name_1 )
{
  if (((void*)THIS->type_parameters) == ((void*)NULL))
  {
    THIS->type_parameters = ((RogueTypeParameterList__init( ((RogueTypeParameterList*)ROGUE_CREATE_OBJECT(TypeParameterList)) )));
  }
  RogueClassTypeParameter* param_2 = (((RogueTypeParameter__init__Token_String( ((RogueClassTypeParameter*)ROGUE_CREATE_OBJECT(TypeParameter)), p_t_0, p_name_1 ))));
  RogueTypeParameterList__add__TypeParameter( THIS->type_parameters, param_2 );
  return (RogueClassTypeParameter*)(param_2);
}

RogueInt32 Rogue_Template__element_type( RogueClassTemplate* THIS )
{
  return (RogueInt32)((THIS->attributes->flags & 7));
}

void RogueTemplate__instantiate__Type_Scope( RogueClassTemplate* THIS, RogueClassType* type_0, RogueClassScope* scope_1 )
{
  if (!!(THIS->alternates_by_param_count))
  {
    RogueInt32 specializer_count_2 = (0);
    if (((RogueString__contains__String( type_0->name, ((RogueCharacter__to_String( (RogueCharacter)'<' ))) ))))
    {
      specializer_count_2 = ((RogueInt32)((RogueParser__parse_specializer_count( ((RogueParser__init__Token_String_String( ((RogueClassParser*)ROGUE_CREATE_OBJECT(Parser)), type_0->t, type_0->name, ((RogueString__from_first__Character( type_0->name, (RogueCharacter)'<' ))) ))) ))));
    }
    if (((RogueTemplate__type_parameter_count( THIS ))) != specializer_count_2)
    {
      RogueClassTemplate* alternate_3 = (((RogueInt32_TemplateTable__get__Int32( THIS->alternates_by_param_count, specializer_count_2 ))));
      if (!!(alternate_3))
      {
        RogueTemplate__instantiate__Type_Scope( alternate_3, type_0, scope_1 );
        return;
      }
      else
      {
        ROGUE_THROW(((RogueToken__error__String( type_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[322] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->name ))) ))), Rogue_literal_strings[323] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ((RogueString__pluralize__Int32( Rogue_literal_strings[324], specializer_count_2 ))) ))) ))), Rogue_literal_strings[328] ))) ))) ))));
      }
    }
  }
  type_0->t = THIS->t;
  RogueAttributes__add__Attributes( type_0->attributes, THIS->attributes );
  type_0->source_template = THIS;
  RogueTokenList* augmented_tokens_4 = (THIS->tokens);
  RogueAugmentList* augments_5 = (((RogueString_AugmentListTable__get__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->augment_lookup, type_0->name ))));
  if (!!(augments_5))
  {
    RogueInt32 t_count_6 = (THIS->tokens->count);
    {
      RogueAugmentList* _auto_451_7 = (augments_5);
      RogueInt32 _auto_452_8 = (0);
      for (;_auto_452_8 < _auto_451_7->count;++_auto_452_8)
      {
        RogueClassAugment* aug_9 = (((RogueClassAugment*)(_auto_451_7->data->objects[_auto_452_8])));
        t_count_6 += aug_9->tokens->count;
      }
    }
    augmented_tokens_4 = ((RogueTokenList*)((RogueTokenList__init__Int32( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)), t_count_6 ))));
    RogueTokenList__add__TokenList( augmented_tokens_4, THIS->tokens );
    RogueTokenList__remove_last( augmented_tokens_4 );
    RogueTokenList__add__Token( augmented_tokens_4, ((RogueToken__init__TokenType( ((RogueClassToken*)ROGUE_CREATE_OBJECT(Token)), RogueTokenType_begin_augment_tokens ))) );
    {
      RogueAugmentList* _auto_466_10 = (augments_5);
      RogueInt32 _auto_467_11 = (0);
      for (;_auto_467_11 < _auto_466_10->count;++_auto_467_11)
      {
        RogueClassAugment* aug_12 = (((RogueClassAugment*)(_auto_466_10->data->objects[_auto_467_11])));
        {
          RogueTypeList* _auto_468_13 = (aug_12->base_types);
          RogueInt32 _auto_469_14 = (0);
          for (;_auto_469_14 < _auto_468_13->count;++_auto_469_14)
          {
            RogueClassType* base_type_15 = (((RogueClassType*)(_auto_468_13->data->objects[_auto_469_14])));
            RogueTypeList__add__Type( type_0->base_types, base_type_15 );
          }
        }
        RogueTokenList__add__TokenList( augmented_tokens_4, aug_12->tokens );
      }
    }
    RogueTokenList__add__Token( augmented_tokens_4, ((RogueTokenList__last( THIS->tokens ))) );
  }
  if (((RogueString__ends_with__String( type_0->name, ((RogueCharacter__to_String( (RogueCharacter)']' ))) ))))
  {
    RogueTemplate__instantiate_list__Type_TokenList( THIS, type_0, augmented_tokens_4 );
  }
  else if (((RogueString__ends_with__String( type_0->name, ((RogueCharacter__to_String( (RogueCharacter)'?' ))) ))))
  {
    RogueTemplate__instantiate_optional__Type_TokenList( THIS, type_0, augmented_tokens_4 );
  }
  else if (!!(THIS->type_parameters))
  {
    RogueTemplate__instantiate_parameterized_type__Type_TokenList_Scope( THIS, type_0, augmented_tokens_4, scope_1 );
  }
  else
  {
    RogueTemplate__instantiate_standard_type__Type_TokenList( THIS, type_0, augmented_tokens_4 );
  }
}

void RogueTemplate__instantiate_list__Type_TokenList( RogueClassTemplate* THIS, RogueClassType* type_0, RogueTokenList* augmented_tokens_1 )
{
  type_0->is_list = true;
  type_0->_element_type = ((RogueType__organize__Scope( ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, ((RogueString__leftmost__Int32( type_0->name, -2 ))) ))), ((RogueClassScope*)(NULL)) )));
  RogueTokenList* instance_tokens_2 = (((RogueTokenList__init__Int32( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)), augmented_tokens_1->count ))));
  {
    RogueTokenList* _auto_470_3 = (augmented_tokens_1);
    RogueInt32 _auto_471_4 = (0);
    for (;_auto_471_4 < _auto_470_3->count;++_auto_471_4)
    {
      RogueClassToken* template_t_5 = (((RogueClassToken*)(_auto_470_3->data->objects[_auto_471_4])));
      if (((void*)template_t_5->_type) == ((void*)RogueTokenType_placeholder_id))
      {
        if (((RogueString__operatorEQUALSEQUALS__String( (call_ROGUEM43( 1, (RogueClassToken*)(template_t_5) )), Rogue_literal_strings[329] ))))
        {
          RogueTokenList__add__Token( instance_tokens_2, (call_ROGUEM91( 11, (RogueClassTokenType*)(RogueTokenType_identifier), template_t_5, type_0->_element_type->name )) );
        }
        else
        {
          RogueTokenList__add__Token( instance_tokens_2, template_t_5 );
        }
      }
      else
      {
        RogueTokenList__add__Token( instance_tokens_2, template_t_5 );
      }
    }
  }
  RogueParser__parse_type_def__Type( ((RogueParser__init__TokenList_Logical( ((RogueClassParser*)ROGUE_CREATE_OBJECT(Parser)), instance_tokens_2, false ))), type_0 );
}

void RogueTemplate__instantiate_optional__Type_TokenList( RogueClassTemplate* THIS, RogueClassType* type_0, RogueTokenList* augmented_tokens_1 )
{
  type_0->is_optional = true;
  type_0->_element_type = ((RogueType__organize__Scope( ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, ((RogueString__leftmost__Int32( type_0->name, -1 ))) ))), ((RogueClassScope*)(NULL)) )));
  RogueTokenList* instance_tokens_2 = (((RogueTokenList__init__Int32( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)), augmented_tokens_1->count ))));
  {
    RogueTokenList* _auto_472_3 = (augmented_tokens_1);
    RogueInt32 _auto_473_4 = (0);
    for (;_auto_473_4 < _auto_472_3->count;++_auto_473_4)
    {
      RogueClassToken* template_t_5 = (((RogueClassToken*)(_auto_472_3->data->objects[_auto_473_4])));
      if (((void*)template_t_5->_type) == ((void*)RogueTokenType_placeholder_id))
      {
        if (((RogueString__operatorEQUALSEQUALS__String( (call_ROGUEM43( 1, (RogueClassToken*)(template_t_5) )), Rogue_literal_strings[329] ))))
        {
          RogueTokenList__add__Token( instance_tokens_2, (call_ROGUEM91( 11, (RogueClassTokenType*)(RogueTokenType_identifier), template_t_5, type_0->_element_type->name )) );
        }
        else
        {
          RogueTokenList__add__Token( instance_tokens_2, template_t_5 );
        }
      }
      else
      {
        RogueTokenList__add__Token( instance_tokens_2, template_t_5 );
      }
    }
  }
  RogueParser__parse_type_def__Type( ((RogueParser__init__TokenList_Logical( ((RogueClassParser*)ROGUE_CREATE_OBJECT(Parser)), instance_tokens_2, false ))), type_0 );
}

void RogueTemplate__instantiate_parameterized_type__Type_TokenList_Scope( RogueClassTemplate* THIS, RogueClassType* type_0, RogueTokenList* augmented_tokens_1, RogueClassScope* scope_2 )
{
  RogueTokenList* instance_tokens_3 = (augmented_tokens_1);
  RogueClassString_TypeSpecializerTable* type_specializers_4 = (((RogueString_TypeSpecializerTable__init( ((RogueClassString_TypeSpecializerTable*)ROGUE_CREATE_OBJECT(String_TypeSpecializerTable)) ))));
  RogueString* specialization_string_5 = (((RogueString__from_first__Character( type_0->name, (RogueCharacter)'<' ))));
  if (specialization_string_5->count == 0)
  {
    ROGUE_THROW(((RogueToken__error__String( type_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[346] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], type_0->name ))) ))), Rogue_literal_strings[347] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], type_0->name ))) ))), Rogue_literal_strings[348] ))) ))) ))));
  }
  RogueClassParser* parser_6 = (((RogueParser__init__Token_String_String( ((RogueClassParser*)ROGUE_CREATE_OBJECT(Parser)), THIS->t, type_0->name, ((RogueString__from_first__Character( type_0->name, (RogueCharacter)'<' ))) ))));
  RogueParser__read( parser_6 );
  RogueStringBuilder* buffer_7 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueLogical first_8 = (true);
  while ((first_8 || ((RogueParser__consume__TokenType( parser_6, RogueTokenType_symbol_comma )))))
  {
    first_8 = ((RogueLogical)false);
    RogueTokenList* specializer_tokens_9 = (((RogueTokenList__init( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)) ))));
    RogueParser__parse_specializer__StringBuilder_TokenList( parser_6, ((RogueStringBuilder__clear( buffer_7 ))), specializer_tokens_9 );
    RogueInt32 index_10 = (((RogueString_TypeSpecializerTable__count( type_specializers_4 ))));
    if (index_10 >= THIS->type_parameters->count)
    {
      ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[349] ))));
    }
    RogueClassTypeParameter* param_11 = (((RogueClassTypeParameter*)(THIS->type_parameters->data->objects[index_10])));
    RogueClassTypeSpecializer* specializer_12 = (((RogueTypeSpecializer__init__String_Int32( ((RogueClassTypeSpecializer*)ROGUE_CREATE_OBJECT(TypeSpecializer)), param_11->name, index_10 ))));
    specializer_12->tokens = specializer_tokens_9;
    RogueString_TypeSpecializerTable__set__String_TypeSpecializer( type_specializers_4, specializer_12->name, specializer_12 );
    if (!(!!(type_0->specializers)))
    {
      type_0->specializers = ((RogueTypeSpecializerList__init( ((RogueTypeSpecializerList*)ROGUE_CREATE_OBJECT(TypeSpecializerList)) )));
    }
    RogueTypeSpecializerList__add__TypeSpecializer( type_0->specializers, specializer_12 );
  }
  if (((RogueString_TypeSpecializerTable__count( type_specializers_4 ))) < THIS->type_parameters->count)
  {
    ROGUE_THROW(((RogueToken__error__String( type_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[350] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], type_0->name ))) ))), Rogue_literal_strings[351] ))), ((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], ((RogueString_TypeSpecializerTable__count( type_specializers_4 ))) ))) ))), Rogue_literal_strings[352] ))), ((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], THIS->type_parameters->count ))) ))), Rogue_literal_strings[353] ))) ))) ))));
  }
  instance_tokens_3 = ((RogueTokenList*)((RogueTokenList__init__Int32( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)), (augmented_tokens_1->count * 2) ))));
  {
    RogueTokenList* _auto_480_14 = (augmented_tokens_1);
    RogueInt32 _auto_481_15 = (0);
    for (;_auto_481_15 < _auto_480_14->count;++_auto_481_15)
    {
      RogueClassToken* template_t_16 = (((RogueClassToken*)(_auto_480_14->data->objects[_auto_481_15])));
      if (((void*)template_t_16->_type) == ((void*)RogueTokenType_placeholder_id))
      {
        RogueClassTypeSpecializer* specializer_13 = (((RogueString_TypeSpecializerTable__get__String( type_specializers_4, (call_ROGUEM43( 1, (RogueClassToken*)(template_t_16) )) ))));
        if (!!(specializer_13))
        {
          {
            RogueTokenList* _auto_482_17 = (specializer_13->tokens);
            RogueInt32 _auto_483_18 = (0);
            for (;_auto_483_18 < _auto_482_17->count;++_auto_483_18)
            {
              RogueClassToken* specializer_t_19 = (((RogueClassToken*)(_auto_482_17->data->objects[_auto_483_18])));
              RogueTokenList__add__Token( instance_tokens_3, specializer_t_19 );
            }
          }
        }
        else
        {
          RogueTokenList__add__Token( instance_tokens_3, template_t_16 );
        }
      }
      else
      {
        RogueTokenList__add__Token( instance_tokens_3, template_t_16 );
      }
    }
  }
  RogueParser__parse_type_def__Type( ((RogueParser__init__TokenList_Logical( ((RogueClassParser*)ROGUE_CREATE_OBJECT(Parser)), instance_tokens_3, false ))), type_0 );
}

void RogueTemplate__instantiate_standard_type__Type_TokenList( RogueClassTemplate* THIS, RogueClassType* type_0, RogueTokenList* augmented_tokens_1 )
{
  if (((RogueString__contains__String( type_0->name, ((RogueCharacter__to_String( (RogueCharacter)'<' ))) ))))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[354] ))));
  }
  RogueParser__parse_type_def__Type( ((RogueParser__init__TokenList_Logical( ((RogueClassParser*)ROGUE_CREATE_OBJECT(Parser)), augmented_tokens_1, false ))), type_0 );
}

RogueInt32 RogueTemplate__type_parameter_count( RogueClassTemplate* THIS )
{
  if (!!(THIS->type_parameters))
  {
    return (RogueInt32)(THIS->type_parameters->count);
  }
  return (RogueInt32)(0);
}

RogueClassTemplate* RogueTemplate__init_object( RogueClassTemplate* THIS )
{
  THIS->tokens = ((RogueTokenList__init( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)) )));
  THIS->attributes = ((RogueClassAttributes*)ROGUE_CREATE_OBJECT(Attributes));
  return (RogueClassTemplate*)(THIS);
}

RogueString* RogueString_TemplateTable__to_String( RogueClassString_TemplateTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_TemplateTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_TemplateTable__type_name( RogueClassString_TemplateTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[609]);
}

RogueClassString_TemplateTable* RogueString_TemplateTable__init( RogueClassString_TemplateTable* THIS )
{
  RogueString_TemplateTable__init__Int32( THIS, 16 );
  return (RogueClassString_TemplateTable*)(THIS);
}

RogueClassString_TemplateTable* RogueString_TemplateTable__init__Int32( RogueClassString_TemplateTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_TemplateTableEntryList__init__Int32_String_TemplateTableEntry( ((RogueTableEntry_of_String_TemplateList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_TemplateList)), bin_count_0, ((RogueClassString_TemplateTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_TemplateTable*)(THIS);
}

RogueClassString_TemplateTableEntry* RogueString_TemplateTable__find__String( RogueClassString_TemplateTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  RogueClassString_TemplateTableEntry* entry_2 = (((RogueClassString_TemplateTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( entry_2->key, key_0 )))))
    {
      return (RogueClassString_TemplateTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_TemplateTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_TemplateTableEntry*)(((RogueClassString_TemplateTableEntry*)(NULL)));
}

RogueClassTemplate* RogueString_TemplateTable__get__String( RogueClassString_TemplateTable* THIS, RogueString* key_0 )
{
  RogueClassString_TemplateTableEntry* entry_1 = (((RogueString_TemplateTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassTemplate*)(entry_1->value);
  }
  else
  {
    RogueClassTemplate* default_value_2 = 0;
    return (RogueClassTemplate*)(default_value_2);
  }
}

RogueClassString_TemplateTable* RogueString_TemplateTable__set__String_Template( RogueClassString_TemplateTable* THIS, RogueString* key_0, RogueClassTemplate* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_TemplateTableEntry* entry_4 = (((RogueClassString_TemplateTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( entry_4->key, key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_TemplateTable*)(THIS);
    }
    entry_4 = ((RogueClassString_TemplateTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_TemplateTableEntry*)((RogueString_TemplateTableEntry__init__String_Template_Int32( ((RogueClassString_TemplateTableEntry*)ROGUE_CREATE_OBJECT(String_TemplateTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_TemplateTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
  return (RogueClassString_TemplateTable*)(THIS);
}

RogueStringBuilder* RogueString_TemplateTable__print_to__StringBuilder( RogueClassString_TemplateTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_TemplateTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_TemplateTable* RogueString_TemplateTable__init_object( RogueClassString_TemplateTable* THIS )
{
  return (RogueClassString_TemplateTable*)(THIS);
}

RogueString* RogueString_AugmentListTable__to_String( RogueClassString_AugmentListTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_AugmentListTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_AugmentListTable__type_name( RogueClassString_AugmentListTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[610]);
}

RogueClassString_AugmentListTable* RogueString_AugmentListTable__init( RogueClassString_AugmentListTable* THIS )
{
  RogueString_AugmentListTable__init__Int32( THIS, 16 );
  return (RogueClassString_AugmentListTable*)(THIS);
}

RogueClassString_AugmentListTable* RogueString_AugmentListTable__init__Int32( RogueClassString_AugmentListTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_AugmentListTableEntryList__init__Int32_String_AugmentListTableEntry( ((RogueTableEntry_of_String_AugmentListList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_AugmentListList)), bin_count_0, ((RogueClassString_AugmentListTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_AugmentListTable*)(THIS);
}

RogueClassString_AugmentListTableEntry* RogueString_AugmentListTable__find__String( RogueClassString_AugmentListTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  RogueClassString_AugmentListTableEntry* entry_2 = (((RogueClassString_AugmentListTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( entry_2->key, key_0 )))))
    {
      return (RogueClassString_AugmentListTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_AugmentListTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_AugmentListTableEntry*)(((RogueClassString_AugmentListTableEntry*)(NULL)));
}

RogueAugmentList* RogueString_AugmentListTable__get__String( RogueClassString_AugmentListTable* THIS, RogueString* key_0 )
{
  RogueClassString_AugmentListTableEntry* entry_1 = (((RogueString_AugmentListTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueAugmentList*)(entry_1->value);
  }
  else
  {
    RogueAugmentList* default_value_2 = 0;
    return (RogueAugmentList*)(default_value_2);
  }
}

RogueClassString_AugmentListTable* RogueString_AugmentListTable__set__String_AugmentList( RogueClassString_AugmentListTable* THIS, RogueString* key_0, RogueAugmentList* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_AugmentListTableEntry* entry_4 = (((RogueClassString_AugmentListTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( entry_4->key, key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_AugmentListTable*)(THIS);
    }
    entry_4 = ((RogueClassString_AugmentListTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_AugmentListTableEntry*)((RogueString_AugmentListTableEntry__init__String_AugmentList_Int32( ((RogueClassString_AugmentListTableEntry*)ROGUE_CREATE_OBJECT(String_AugmentListTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_AugmentListTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
  return (RogueClassString_AugmentListTable*)(THIS);
}

RogueStringBuilder* RogueString_AugmentListTable__print_to__StringBuilder( RogueClassString_AugmentListTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_AugmentListTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_AugmentListTable* RogueString_AugmentListTable__init_object( RogueClassString_AugmentListTable* THIS )
{
  return (RogueClassString_AugmentListTable*)(THIS);
}

RogueString* RogueRequisiteItemList__to_String( RogueRequisiteItemList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueRequisiteItemList* _auto_498_2 = (THIS);
    RogueInt32 _auto_499_3 = (0);
    for (;_auto_499_3 < _auto_498_2->count;++_auto_499_3)
    {
      RogueClassRequisiteItem* value_4 = (((RogueClassRequisiteItem*)(_auto_498_2->data->objects[_auto_499_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueRequisiteItemList__type_name( RogueRequisiteItemList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[678]);
}

RogueRequisiteItemList* RogueRequisiteItemList__init_object( RogueRequisiteItemList* THIS )
{
  return (RogueRequisiteItemList*)(THIS);
}

RogueRequisiteItemList* RogueRequisiteItemList__init( RogueRequisiteItemList* THIS )
{
  RogueRequisiteItemList__init__Int32( THIS, 10 );
  return (RogueRequisiteItemList*)(THIS);
}

RogueRequisiteItemList* RogueRequisiteItemList__init__Int32( RogueRequisiteItemList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassRequisiteItem*), true );
  return (RogueRequisiteItemList*)(THIS);
}

RogueRequisiteItemList* RogueRequisiteItemList__add__RequisiteItem( RogueRequisiteItemList* THIS, RogueClassRequisiteItem* value_0 )
{
  ((RogueRequisiteItemList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueRequisiteItemList*)(THIS);
}

RogueInt32 RogueRequisiteItemList__capacity( RogueRequisiteItemList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueRequisiteItemList* RogueRequisiteItemList__reserve__Int32( RogueRequisiteItemList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassRequisiteItem*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueRequisiteItemList__capacity( THIS ))) + ((RogueRequisiteItemList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassRequisiteItem*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueRequisiteItemList*)(THIS);
}

RogueString* RogueRequisiteItem__type_name( RogueClassRequisiteItem* THIS )
{
  return (RogueString*)(Rogue_literal_strings[611]);
}

RogueClassRequisiteItem* RogueRequisiteItem__init__Token_Type_String( RogueClassRequisiteItem* THIS, RogueClassToken* _auto_105_0, RogueClassType* _auto_106_1, RogueString* _auto_107_2 )
{
  THIS->signature = _auto_107_2;
  THIS->_type = _auto_106_1;
  THIS->t = _auto_105_0;
  return (RogueClassRequisiteItem*)(THIS);
}

RogueClassRequisiteItem* RogueRequisiteItem__init_object( RogueClassRequisiteItem* THIS )
{
  return (RogueClassRequisiteItem*)(THIS);
}

RogueString* RogueMethod__to_String( RogueClassMethod* THIS )
{
  return (RogueString*)(THIS->signature);
}

RogueString* RogueMethod__type_name( RogueClassMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[612]);
}

RogueClassMethod* RogueMethod__init__Token_Type_String( RogueClassMethod* THIS, RogueClassToken* _auto_112_0, RogueClassType* _auto_113_1, RogueString* _auto_114_2 )
{
  THIS->name = _auto_114_2;
  RogueMethod__set_type_context__Type( THIS, _auto_113_1 );
  THIS->t = _auto_112_0;
  return (RogueClassMethod*)(THIS);
}

RogueClassMethod* RogueMethod__clone( RogueClassMethod* THIS )
{
  RogueClassMethod* result_0 = (((RogueMethod__init__Token_Type_String( ((RogueClassMethod*)ROGUE_CREATE_OBJECT(Method)), THIS->t, THIS->type_context, THIS->name ))));
  result_0->cpp_name = THIS->cpp_name;
  result_0->cpp_typedef = THIS->cpp_typedef;
  result_0->signature = THIS->signature;
  result_0->attributes = ((RogueAttributes__clone( THIS->attributes )));
  result_0->_return_type = THIS->_return_type;
  result_0->_task_result_type = THIS->_task_result_type;
  result_0->locals = ((RogueLocalList__init( ((RogueLocalList*)ROGUE_CREATE_OBJECT(LocalList)) )));
  {
    RogueLocalList* _auto_534_1 = (THIS->locals);
    RogueInt32 _auto_535_2 = (0);
    for (;_auto_535_2 < _auto_534_1->count;++_auto_535_2)
    {
      RogueClassLocal* v_3 = (((RogueClassLocal*)(_auto_534_1->data->objects[_auto_535_2])));
      RogueLocalList__add__Local( result_0->locals, ((RogueLocal__clone__CloneArgs( v_3, ((RogueClassCloneArgs*)(NULL)) ))) );
    }
  }
  result_0->parameters = ((RogueLocalList__init( ((RogueLocalList*)ROGUE_CREATE_OBJECT(LocalList)) )));
  {
    RogueLocalList* _auto_536_4 = (THIS->parameters);
    RogueInt32 i_5 = (0);
    for (;i_5 < _auto_536_4->count;++i_5)
    {
      RogueLocalList__add__Local( result_0->parameters, ((RogueClassLocal*)(THIS->locals->data->objects[i_5])) );
    }
  }
  result_0->label_list = ((RogueCmdLabelList__init__Int32( ((RogueCmdLabelList*)ROGUE_CREATE_OBJECT(CmdLabelList)), THIS->label_list->count )));
  result_0->label_lookup = ((RogueString_CmdLabelTable__init( ((RogueClassString_CmdLabelTable*)ROGUE_CREATE_OBJECT(String_CmdLabelTable)) )));
  result_0->min_args = THIS->min_args;
  result_0->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, ((RogueClassCloneArgs*)(((RogueCloneMethodArgs__init__Method( ((RogueClassCloneMethodArgs*)ROGUE_CREATE_OBJECT(CloneMethodArgs)), result_0 ))))) )));
  result_0->native_code = THIS->native_code;
  result_0->index = THIS->index;
  return (RogueClassMethod*)(result_0);
}

RogueClassMethod* RogueMethod__incorporate__Type( RogueClassMethod* THIS, RogueClassType* into_type_0 )
{
  RogueClassMethod* m_1 = (((RogueMethod__set_incorporated( ((RogueMethod__set_type_context__Type( ((RogueMethod__clone( THIS ))), into_type_0 ))) ))));
  m_1->cpp_name = ((RogueString*)(NULL));
  if (!!(THIS->aspect_statements))
  {
    m_1->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->aspect_statements, ((RogueClassCloneArgs*)(RogueObject_as(NULL,RogueTypeCloneArgs))) )));
  }
  if (((void*)THIS->incorporating_classes) == ((void*)NULL))
  {
    THIS->incorporating_classes = ((RogueTypeList__init( ((RogueTypeList*)ROGUE_CREATE_OBJECT(TypeList)) )));
  }
  RogueTypeList__add__Type( THIS->incorporating_classes, into_type_0 );
  m_1->signature = ((RogueString*)(NULL));
  RogueMethod__assign_signature( m_1 );
  return (RogueClassMethod*)(m_1);
}

RogueLogical RogueMethod__accepts_arg_count__Int32( RogueClassMethod* THIS, RogueInt32 n_0 )
{
  return (RogueLogical)((n_0 >= THIS->min_args && n_0 <= THIS->parameters->count));
}

RogueClassLocal* RogueMethod__add_local__Token_String_Type_Cmd( RogueClassMethod* THIS, RogueClassToken* v_t_0, RogueString* v_name_1, RogueClassType* v_type_2, RogueClassCmd* v_initial_value_3 )
{
  RogueClassLocal* v_4 = (((RogueLocal__init__Token_String( ((RogueClassLocal*)ROGUE_CREATE_OBJECT(Local)), v_t_0, v_name_1 ))));
  v_4->index = THIS->locals->count;
  v_4->_type = v_type_2;
  v_4->initial_value = v_initial_value_3;
  RogueLocalList__add__Local( THIS->locals, v_4 );
  return (RogueClassLocal*)(v_4);
}

RogueClassLocal* RogueMethod__add_parameter__Token_String_Type( RogueClassMethod* THIS, RogueClassToken* p_t_0, RogueString* p_name_1, RogueClassType* p_type_2 )
{
  RogueClassLocal* p_3 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS, p_t_0, p_name_1, p_type_2, ((RogueClassCmd*)(NULL)) ))));
  RogueLocalList__add__Local( THIS->parameters, p_3 );
  return (RogueClassLocal*)(p_3);
}

void RogueMethod__assign_signature( RogueClassMethod* THIS )
{
  if (!!(THIS->signature))
  {
    return;
  }
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__String( buffer_0, THIS->name );
  RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[66] );
  RogueLogical first_1 = (true);
  {
    RogueLocalList* _auto_538_2 = (THIS->parameters);
    RogueInt32 _auto_539_3 = (0);
    for (;_auto_539_3 < _auto_538_2->count;++_auto_539_3)
    {
      RogueClassLocal* param_4 = (((RogueClassLocal*)(_auto_538_2->data->objects[_auto_539_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[179] );
      }
      RogueStringBuilder__print__String( buffer_0, param_4->_type->name );
    }
  }
  RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[67] );
  THIS->signature = ((RogueStringBuilder__to_String( buffer_0 )));
}

RogueClassCmdLabel* RogueMethod__begin_label__Token_String_Logical( RogueClassMethod* THIS, RogueClassToken* label_t_0, RogueString* label_name_1, RogueLogical consolidate_duplicates_2 )
{
  if (consolidate_duplicates_2)
  {
    THIS->cur_label = ((RogueString_CmdLabelTable__get__String( THIS->label_lookup, label_name_1 )));
    if (!!(THIS->cur_label))
    {
      return (RogueClassCmdLabel*)(THIS->cur_label);
    }
  }
  else if ((((RogueString__operatorEQUALSEQUALS__String( label_name_1, Rogue_literal_strings[290] ))) && ((RogueString_CmdLabelTable__contains__String( THIS->label_lookup, label_name_1 )))))
  {
    ROGUE_THROW(((RogueToken__error__String( label_t_0, Rogue_literal_strings[291] ))));
  }
  else if ((((RogueString__operatorEQUALSEQUALS__String( label_name_1, Rogue_literal_strings[292] ))) && ((RogueString_CmdLabelTable__contains__String( THIS->label_lookup, label_name_1 )))))
  {
    ROGUE_THROW(((RogueToken__error__String( ((RogueString_CmdLabelTable__get__String( THIS->label_lookup, label_name_1 )))->t, Rogue_literal_strings[293] ))));
  }
  THIS->cur_label = ((RogueCmdLabel__init__Token_String_CmdStatementList( ((RogueClassCmdLabel*)ROGUE_CREATE_OBJECT(CmdLabel)), label_t_0, label_name_1, ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))) )));
  RogueString_CmdLabelTable__set__String_CmdLabel( THIS->label_lookup, label_name_1, THIS->cur_label );
  RogueCmdLabelList__add__CmdLabel( THIS->label_list, THIS->cur_label );
  return (RogueClassCmdLabel*)(THIS->cur_label);
}

RogueLogical RogueMethod__is_abstract( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 524288)));
}

RogueLogical RogueMethod__is_augment( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 262144)));
}

RogueLogical RogueMethod__is_dynamic( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 2048)));
}

RogueLogical RogueMethod__is_fallback( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 2097152)));
}

RogueLogical RogueMethod__is_generated( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 16384)));
}

RogueLogical RogueMethod__is_incorporated( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 8192)));
}

RogueLogical RogueMethod__is_initializer( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 128)));
}

RogueLogical RogueMethod__is_macro( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 64)));
}

RogueLogical RogueMethod__is_native( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 32)));
}

RogueLogical RogueMethod__is_overridden( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 4096)));
}

RogueLogical RogueMethod__is_requisite( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 32768)));
}

RogueLogical RogueMethod__is_global( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 512)));
}

RogueLogical RogueMethod__is_task( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 65536)));
}

RogueLogical RogueMethod__is_task_conversion( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 131072)));
}

RogueLogical RogueMethod__omit_output( RogueClassMethod* THIS )
{
  return (RogueLogical)((((((RogueMethod__is_native( THIS ))) || ((RogueMethod__is_macro( THIS )))) || !(THIS->is_used)) || ((((RogueMethod__is_generated( THIS ))) && ((RogueString__operatorEQUALSEQUALS__String( THIS->name, Rogue_literal_strings[330] )))) && ((RogueType__is_compound( THIS->type_context ))))));
}

RogueClassMethod* RogueMethod__organize__Scope_Logical( RogueClassMethod* THIS, RogueClassScope* scope_0, RogueLogical add_to_lookup_1 )
{
  if (THIS->organized)
  {
    return (RogueClassMethod*)(THIS);
  }
  THIS->organized = true;
  if (((RogueString__operatorEQUALSEQUALS__String( THIS->name, Rogue_literal_strings[331] ))))
  {
    if (((RogueType__is_compound( THIS->type_context ))))
    {
      ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[374] ))));
    }
    THIS->attributes->flags |= 128;
    THIS->_return_type = THIS->type_context;
  }
  if (((RogueMethod__is_task( THIS ))))
  {
    if (((RogueMethod__is_global( THIS ))))
    {
      ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[375] ))));
    }
    THIS->_task_result_type = THIS->_return_type;
    if (!!(THIS->_return_type))
    {
      RogueType__organize__Scope( THIS->_return_type, ((RogueClassScope*)(NULL)) );
      THIS->_return_type = ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[376] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->_return_type->name ))) ))), Rogue_literal_strings[116] ))) ))) )));
    }
    else
    {
      THIS->_return_type = ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, Rogue_literal_strings[377] )));
    }
    RogueType__organize__Scope( THIS->_return_type, ((RogueClassScope*)(NULL)) );
  }
  {
    RogueLocalList* _auto_540_8 = (THIS->parameters);
    RogueInt32 _auto_541_9 = (0);
    for (;_auto_541_9 < _auto_540_8->count;++_auto_541_9)
    {
      RogueClassLocal* param_10 = (((RogueClassLocal*)(_auto_540_8->data->objects[_auto_541_9])));
      if (!(((RogueMethod__is_global( THIS )))))
      {
        RogueClassProperty* property_2 = (((RogueType__find_property__String( THIS->type_context, param_10->name ))));
        if (!!(property_2))
        {
          if (((void*)param_10->_type) == ((void*)NULL))
          {
            RogueString* new_name_3 = (((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))));
            RogueClassToken* pt_4 = (param_10->t);
            RogueCmdList__insert__Cmd_Int32( ((RogueCmdList*)THIS->statements), ((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)ROGUE_CREATE_OBJECT(CmdAssign)), pt_4, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), pt_4, param_10->name ))))), ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), pt_4, new_name_3 ))))) ))))), 0 );
            param_10->name = new_name_3;
            param_10->_type = property_2->_type;
          }
          else
          {
            ROGUE_THROW(((RogueToken__error__String( param_10->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[366] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], param_10->name ))) ))), Rogue_literal_strings[367] ))) ))) ))));
          }
        }
      }
      if (!(!!(param_10->_type)))
      {
        ROGUE_THROW(((RogueToken__error__String( param_10->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[378] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], param_10->name ))) ))), Rogue_literal_strings[12] ))) ))) ))));
      }
    }
  }
  RogueMethod__assign_signature( THIS );
  if ((add_to_lookup_1 && !(((RogueMethod__is_augment( THIS ))))))
  {
    RogueMethodList* list_5 = (((RogueString_MethodListTable__get__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->methods_by_signature, THIS->signature ))));
    if (!(!!(list_5)))
    {
      list_5 = ((RogueMethodList*)((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) ))));
      RogueString_MethodListTable__set__String_MethodList( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->methods_by_signature, THIS->signature, list_5 );
    }
    RogueMethodList__add__Method( list_5, THIS );
    if (((RogueMethod__is_global( THIS ))))
    {
      RogueClassMethod* existing_m_6 = (((RogueString_MethodTable__get__String( THIS->type_context->routine_lookup_by_signature, THIS->signature ))));
      if ((!!(existing_m_6) && ((void*)existing_m_6->type_context) == ((void*)THIS->type_context)))
      {
        ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[379] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->signature ))) ))), Rogue_literal_strings[380] ))) ))) ))));
      }
      RogueString_MethodTable__set__String_Method( THIS->type_context->routine_lookup_by_signature, THIS->signature, THIS );
    }
    else
    {
      RogueClassMethod* existing_m_7 = (((RogueString_MethodTable__get__String( THIS->type_context->method_lookup_by_signature, THIS->signature ))));
      if ((!!(existing_m_7) && ((void*)existing_m_7->type_context) == ((void*)THIS->type_context)))
      {
        ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[381] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->signature ))) ))), Rogue_literal_strings[380] ))) ))) ))));
      }
      RogueString_MethodTable__set__String_Method( THIS->type_context->method_lookup_by_signature, THIS->signature, THIS );
    }
  }
  THIS->min_args = THIS->parameters->count;
  while ((THIS->min_args >= 1 && !!(((RogueClassLocal*)(THIS->parameters->data->objects[(THIS->min_args - 1)]))->initial_value)))
  {
    --THIS->min_args;
  }
  return (RogueClassMethod*)(THIS);
}

void RogueMethod__resolve( RogueClassMethod* THIS )
{
  if (THIS->resolved)
  {
    return;
  }
  THIS->resolved = true;
  {
    RogueLocalList* _auto_577_2 = (THIS->parameters);
    RogueInt32 _auto_578_3 = (0);
    for (;_auto_578_3 < _auto_577_2->count;++_auto_578_3)
    {
      RogueClassLocal* param_4 = (((RogueClassLocal*)(_auto_577_2->data->objects[_auto_578_3])));
      RogueType__organize__Scope( param_4->_type, ((RogueClassScope*)(NULL)) );
    }
  }
  if (!!(THIS->_return_type))
  {
    RogueType__organize__Scope( THIS->_return_type, ((RogueClassScope*)(NULL)) );
  }
  if (((RogueType__is_aspect( THIS->type_context ))))
  {
    THIS->aspect_statements = THIS->statements;
    THIS->statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
  }
  if (((RogueMethod__is_task( THIS ))))
  {
    RogueMethod__convert_to_task( THIS );
  }
  RogueClassScope* scope_0 = (((RogueScope__init__Type_Method( ((RogueClassScope*)ROGUE_CREATE_OBJECT(Scope)), THIS->type_context, THIS ))));
  {
    RogueLocalList* _auto_579_5 = (THIS->parameters);
    RogueInt32 _auto_580_6 = (0);
    for (;_auto_580_6 < _auto_579_5->count;++_auto_580_6)
    {
      RogueClassLocal* p_7 = (((RogueClassLocal*)(_auto_579_5->data->objects[_auto_580_6])));
      RogueScope__push_local__Local_Logical( scope_0, p_7, true );
    }
  }
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  if (scope_0->local_list->count > THIS->parameters->count)
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[414] ))));
  }
  if (!!(scope_0->control_stack->count))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[415] ))));
  }
  if (((RogueMethod__is_initializer( THIS ))))
  {
    RogueClassToken* return_t_1 = (THIS->t);
    if (!!(THIS->statements->count))
    {
      return_t_1 = ((RogueClassToken*)((RogueCmdList__last( ((RogueCmdList*)THIS->statements) )))->t);
    }
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->statements), ((RogueCmdReturn__resolve__Scope( ((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), return_t_1, ((RogueClassCmd*)(((RogueClassCmdLiteralThis*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)((RogueClassCmdLiteralThis*)ROGUE_CREATE_OBJECT(CmdLiteralThis))), return_t_1, THIS->type_context ))))))) ))), scope_0 ))) );
  }
}

void RogueMethod__convert_augment_to_standalone( RogueClassMethod* THIS )
{
  THIS->attributes->flags &= -262145;
  if (!(!!(THIS->native_code)))
  {
    if (THIS->label_list->count > 2)
    {
      RogueClassCmdLabel* label_0 = (((RogueClassCmdLabel*)(THIS->label_list->data->objects[2])));
      ROGUE_THROW(((RogueToken__error__String( label_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[382] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], label_0->name ))) ))), Rogue_literal_strings[383] ))) ))) ))));
    }
    RogueClassCmdLabel* insert_label_1 = (((RogueString_CmdLabelTable__get__String( THIS->label_lookup, Rogue_literal_strings[290] ))));
    RogueClassCmdLabel* append_label_2 = (((RogueString_CmdLabelTable__get__String( THIS->label_lookup, Rogue_literal_strings[292] ))));
    RogueString_CmdLabelTable__clear( THIS->label_lookup );
    RogueCmdLabelList__clear( THIS->label_list );
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->statements), ((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( THIS, THIS->t, Rogue_literal_strings[290], false ))))) );
    RogueCmdList__add__CmdList( ((RogueCmdList*)THIS->statements), ((RogueCmdList*)(insert_label_1->statements)) );
    RogueCmdList__add__CmdList( ((RogueCmdList*)THIS->statements), ((RogueCmdList*)(append_label_2->statements)) );
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->statements), ((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( THIS, THIS->t, Rogue_literal_strings[292], false ))))) );
  }
}

void RogueMethod__convert_to_task( RogueClassMethod* THIS )
{
  RogueClassType* task_type_0 = (((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->type_context->name ))) ))), Rogue_literal_strings[403] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->name ))) ))), Rogue_literal_strings[404] ))), ((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], ((RogueProgram__next_unique_integer( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))) ))) ))) ))) ))));
  RogueAttributes__add__Int32( task_type_0->attributes, 0 );
  RogueTypeList__add__Type( task_type_0->base_types, THIS->_return_type );
  RogueClassMethod* m_init_1 = (((RogueType__add_method__Token_String( task_type_0, THIS->t, Rogue_literal_strings[331] ))));
  RogueMethod__add_parameter__Token_String_Type( m_init_1, THIS->t, Rogue_literal_strings[405], ((RogueClassType*)(NULL)) );
  {
    RogueLocalList* _auto_588_9 = (THIS->parameters);
    RogueInt32 _auto_589_10 = (0);
    for (;_auto_589_10 < _auto_588_9->count;++_auto_589_10)
    {
      RogueClassLocal* p_11 = (((RogueClassLocal*)(_auto_588_9->data->objects[_auto_589_10])));
      RogueMethod__add_parameter__Token_String_Type( m_init_1, THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], p_11->name ))) ))), Rogue_literal_strings[406] ))), ((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], p_11->index ))) ))) ))), ((RogueClassType*)(NULL)) );
    }
  }
  RogueClassMethod* m_update_2 = (((RogueType__add_method__Token_String( task_type_0, THIS->t, Rogue_literal_strings[407] ))));
  m_update_2->_return_type = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical;
  RogueCmdList__add__Cmd( ((RogueCmdList*)m_update_2->statements), ((RogueClassCmd*)(((RogueCmdGenericLoop__init__Token_Int32_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)ROGUE_CREATE_OBJECT(CmdGenericLoop)), THIS->t, 8, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, Rogue_literal_strings[408], ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))) ))))), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))))) );
  RogueCmdList__add__Cmd( ((RogueCmdList*)m_update_2->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), THIS->t, ((RogueClassCmd*)(((RogueClassCmdCompareNE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareNE*)ROGUE_CREATE_OBJECT(CmdCompareNE))), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, Rogue_literal_strings[409] ))))), ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, -1 ))))) ))))))) ))))) );
  RogueClassMethod* m_execute_3 = (((RogueType__add_method__Token_String( task_type_0, THIS->t, Rogue_literal_strings[408] ))));
  m_execute_3->_return_type = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical;
  task_type_0->defined = true;
  RogueString* m_name_4 = (((RogueString__operatorPLUS__String( Rogue_literal_strings[410], ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))) ))));
  RogueClassMethod* m_temp_5 = (((RogueMethod__init__Token_Type_String( ((RogueClassMethod*)ROGUE_CREATE_OBJECT(Method)), THIS->t, THIS->type_context, m_name_4 ))));
  m_temp_5->_return_type = THIS->_task_result_type;
  RogueAttributes__add__Int32( m_temp_5->attributes, 131072 );
  m_temp_5->parameters = THIS->parameters;
  m_temp_5->locals = THIS->locals;
  m_temp_5->statements = THIS->statements;
  RogueMethod__organize__Scope_Logical( m_temp_5, ((RogueClassScope*)(NULL)), false );
  RogueMethod__resolve( m_temp_5 );
  THIS->locals = ((RogueLocalList__init( ((RogueLocalList*)ROGUE_CREATE_OBJECT(LocalList)) )));
  THIS->parameters = ((RogueLocalList__init( ((RogueLocalList*)ROGUE_CREATE_OBJECT(LocalList)) )));
  {
    RogueLocalList* _auto_606_12 = (m_temp_5->locals);
    RogueInt32 _auto_607_13 = (0);
    for (;_auto_607_13 < _auto_606_12->count;++_auto_607_13)
    {
      RogueClassLocal* v_14 = (((RogueClassLocal*)(_auto_606_12->data->objects[_auto_607_13])));
      if (v_14->index < m_temp_5->parameters->count)
      {
        RogueMethod__add_parameter__Token_String_Type( THIS, v_14->t, v_14->name, v_14->_type );
      }
    }
  }
  THIS->statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
  RogueClassCmdArgs* args_6 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))));
  RogueCmdList__add__Cmd( ((RogueCmdList*)args_6), ((RogueClassCmd*)(((RogueClassCmdLiteralThis*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)((RogueClassCmdLiteralThis*)ROGUE_CREATE_OBJECT(CmdLiteralThis))), THIS->t, THIS->type_context ))))))) );
  {
    RogueLocalList* _auto_608_15 = (m_temp_5->parameters);
    RogueInt32 _auto_609_16 = (0);
    for (;_auto_609_16 < _auto_608_15->count;++_auto_609_16)
    {
      RogueClassLocal* p_17 = (((RogueClassLocal*)(_auto_608_15->data->objects[_auto_609_16])));
      RogueCmdList__add__Cmd( ((RogueCmdList*)args_6), ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, p_17->name ))))) );
    }
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, task_type_0->name, args_6 ))))) ))))) );
  {
    RogueLocalList* _auto_610_18 = (m_temp_5->locals);
    RogueInt32 _auto_611_19 = (0);
    for (;_auto_611_19 < _auto_610_18->count;++_auto_611_19)
    {
      RogueClassLocal* v_20 = (((RogueClassLocal*)(_auto_610_18->data->objects[_auto_611_19])));
      RogueString* p_name_7 = (((RogueString__operatorPLUS__Int32( ((RogueString__operatorPLUS__String( v_20->name, Rogue_literal_strings[406] ))), v_20->index ))));
      RogueType__add_property__Token_String_Type_Cmd( task_type_0, v_20->t, p_name_7, v_20->_type, ((RogueClassCmd*)(NULL)) );
    }
  }
  RogueClassTaskArgs* task_args_8 = (((RogueTaskArgs__init__Type_Method_Type_Method( ((RogueClassTaskArgs*)ROGUE_CREATE_OBJECT(TaskArgs)), task_type_0, m_execute_3, THIS->type_context, THIS ))));
  task_args_8->context_property = ((RogueType__add_property__Token_String_Type_Cmd( task_type_0, THIS->t, Rogue_literal_strings[405], THIS->type_context, ((RogueClassCmd*)(NULL)) )));
  task_args_8->ip_property = ((RogueType__add_property__Token_String_Type_Cmd( task_type_0, THIS->t, Rogue_literal_strings[409], ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32, ((RogueClassCmd*)(NULL)) )));
  {
    RogueClassCmdStatementList* _auto_616_21 = (m_temp_5->statements);
    RogueInt32 _auto_617_22 = (0);
    for (;_auto_617_22 < _auto_616_21->count;++_auto_617_22)
    {
      RogueClassCmd* statement_23 = (((RogueClassCmd*)(_auto_616_21->data->objects[_auto_617_22])));
      statement_23 = ((RogueClassCmd*)(call_ROGUEM58( 6, (RogueClassCmd*)(statement_23), ((RogueClassCloneArgs*)(task_args_8)) )));
      if (!!(statement_23))
      {
        RogueTaskArgs__add__Cmd( task_args_8, statement_23 );
      }
    }
  }
  if (task_args_8->cmd_task_control->current_section->statements->count == 0)
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)task_args_8->cmd_task_control->current_section->statements), ((RogueTaskArgs__create_return__Token_Cmd( task_args_8, THIS->t, ((RogueClassCmd*)(NULL)) ))) );
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)m_execute_3->statements), ((RogueClassCmd*)(task_args_8->cmd_task_control)) );
  RogueType__organize__Scope( task_type_0, ((RogueClassScope*)(NULL)) );
}

RogueClassMethod* RogueMethod__set_incorporated( RogueClassMethod* THIS )
{
  RogueAttributes__add__Int32( THIS->attributes, 8192 );
  return (RogueClassMethod*)(THIS);
}

RogueClassMethod* RogueMethod__set_type_context__Type( RogueClassMethod* THIS, RogueClassType* _auto_115_0 )
{
  THIS->type_context = _auto_115_0;
  return (RogueClassMethod*)(THIS);
}

void RogueMethod__trace_used_code( RogueClassMethod* THIS )
{
  if (THIS->is_used)
  {
    return;
  }
  THIS->is_used = true;
  RogueType__trace_used_code( THIS->type_context );
  {
    RogueLocalList* _auto_620_0 = (THIS->parameters);
    RogueInt32 _auto_621_1 = (0);
    for (;_auto_621_1 < _auto_620_0->count;++_auto_621_1)
    {
      RogueClassLocal* param_2 = (((RogueClassLocal*)(_auto_620_0->data->objects[_auto_621_1])));
      RogueType__trace_used_code( param_2->_type );
    }
  }
  if (!!(THIS->_return_type))
  {
    RogueType__trace_used_code( THIS->_return_type );
  }
  RogueCmdStatementList__trace_used_code( THIS->statements );
}

void RogueMethod__assign_cpp_name( RogueClassMethod* THIS )
{
  if (!!(THIS->cpp_name))
  {
    return;
  }
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( buffer_0, THIS->type_context->name ))), Rogue_literal_strings[403] );
  RogueStringBuilder__print__String( buffer_0, THIS->name );
  if (!!(THIS->parameters->count))
  {
    RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[406] );
    {
      RogueLocalList* _auto_622_1 = (THIS->parameters);
      RogueInt32 _auto_623_2 = (0);
      for (;_auto_623_2 < _auto_622_1->count;++_auto_623_2)
      {
        RogueClassLocal* param_3 = (((RogueClassLocal*)(_auto_622_1->data->objects[_auto_623_2])));
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[406] );
        RogueStringBuilder__print__String( buffer_0, param_3->_type->cpp_name );
      }
    }
  }
  THIS->cpp_name = ((RogueString__operatorPLUS__String( Rogue_literal_strings[28], ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ((RogueStringBuilder__to_String( buffer_0 ))) ))) )));
}

void RogueMethod__print_prototype__CPPWriter( RogueClassMethod* THIS, RogueClassCPPWriter* writer_0 )
{
  if (((RogueMethod__omit_output( THIS ))))
  {
    return;
  }
  RogueMethod__print_signature__CPPWriter( THIS, writer_0 );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[205] );
}

void RogueMethod__print_signature__CPPWriter( RogueClassMethod* THIS, RogueClassCPPWriter* writer_0 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, THIS->_return_type ))), Rogue_literal_strings[458] ))), THIS->cpp_name );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[66] );
  RogueLogical first_1 = (true);
  if (!(((RogueMethod__is_global( THIS )))))
  {
    first_1 = ((RogueLogical)false);
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[458] );
    if (((RogueType__is_aspect( THIS->type_context ))))
    {
      RogueCPPWriter__print__Type( writer_0, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object );
    }
    else
    {
      RogueCPPWriter__print__Type( writer_0, THIS->type_context );
    }
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[489] );
  }
  if (!!(THIS->parameters->count))
  {
    {
      RogueLocalList* _auto_624_2 = (THIS->parameters);
      RogueInt32 _auto_625_3 = (0);
      for (;_auto_625_3 < _auto_624_2->count;++_auto_625_3)
      {
        RogueClassLocal* param_4 = (((RogueClassLocal*)(_auto_624_2->data->objects[_auto_625_3])));
        if (first_1)
        {
          RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[458] );
          first_1 = ((RogueLogical)false);
        }
        else
        {
          RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[469] );
        }
        RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, param_4->_type ))), Rogue_literal_strings[458] ))), ((RogueLocal__cpp_name( param_4 ))) );
      }
    }
  }
  if (!(first_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[458] );
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
}

void RogueMethod__print_definition__CPPWriter( RogueClassMethod* THIS, RogueClassCPPWriter* writer_0 )
{
  if (((RogueMethod__omit_output( THIS ))))
  {
    return;
  }
  RogueMethod__print_signature__CPPWriter( THIS, writer_0 );
  RogueCPPWriter__println( writer_0 );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[196] );
  writer_0->indent += 2;
  if (((RogueType__is_aspect( THIS->type_context ))))
  {
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[568] );
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[196] );
    writer_0->indent += 2;
    if (!!(THIS->incorporating_classes))
    {
      {
        RogueTypeList* _auto_626_2 = (THIS->incorporating_classes);
        RogueInt32 _auto_627_3 = (0);
        for (;_auto_627_3 < _auto_626_2->count;++_auto_627_3)
        {
          RogueClassType* ic_4 = (((RogueClassType*)(_auto_626_2->data->objects[_auto_627_3])));
          if (ic_4->is_used)
          {
            RogueClassMethod* m_1 = (((RogueType__find_method__String( ic_4, THIS->signature ))));
            if (m_1->is_used)
            {
              RogueCPPWriter__println__String( ((RogueCPPWriter__print__Int32( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[569] ))), ic_4->index ))), Rogue_literal_strings[178] );
              if (!!(THIS->_return_type))
              {
                RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[570] );
                if (((void*)THIS->_return_type) != ((void*)m_1->_return_type))
                {
                  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[66] ))), THIS->_return_type ))), Rogue_literal_strings[67] );
                }
              }
              else
              {
                RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[286] );
              }
              RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, m_1->cpp_name ))), Rogue_literal_strings[571] ))), m_1->type_context ))), Rogue_literal_strings[572] );
              {
                RogueLocalList* _auto_628_5 = (THIS->parameters);
                RogueInt32 _auto_629_6 = (0);
                for (;_auto_629_6 < _auto_628_5->count;++_auto_629_6)
                {
                  RogueClassLocal* param_7 = (((RogueClassLocal*)(_auto_628_5->data->objects[_auto_629_6])));
                  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[469] ))), ((RogueLocal__cpp_name( param_7 ))) );
                }
              }
              RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[508] );
            }
          }
        }
      }
    }
    if (!!(THIS->_return_type))
    {
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[573] );
      RogueCPPWriter__println__String( ((RogueCPPWriter__print_default_value__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[570] ))), THIS->_return_type ))), Rogue_literal_strings[205] );
    }
    writer_0->indent -= 2;
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[114] );
  }
  else
  {
    if (((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->debug_mode)
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[574] );
      RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[197] ))), THIS->type_context->name ))), Rogue_literal_strings[51] ))), THIS->signature ))), Rogue_literal_strings[458] );
      RogueCPPWriter__print__String( ((RogueCPPWriter__print__Int32( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, (RogueFile__filename__String( THIS->t->filepath )) ))), Rogue_literal_strings[178] ))), THIS->t->line ))), Rogue_literal_strings[26] );
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[575] );
    }
    RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, false );
  }
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[114] );
  RogueCPPWriter__println( writer_0 );
}

RogueClassMethod* RogueMethod__init_object( RogueClassMethod* THIS )
{
  THIS->attributes = ((RogueClassAttributes*)ROGUE_CREATE_OBJECT(Attributes));
  THIS->parameters = ((RogueLocalList__init( ((RogueLocalList*)ROGUE_CREATE_OBJECT(LocalList)) )));
  THIS->locals = ((RogueLocalList__init( ((RogueLocalList*)ROGUE_CREATE_OBJECT(LocalList)) )));
  THIS->statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
  THIS->overriding_methods = ((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) )));
  THIS->label_list = ((RogueCmdLabelList__init( ((RogueCmdLabelList*)ROGUE_CREATE_OBJECT(CmdLabelList)) )));
  THIS->label_lookup = ((RogueString_CmdLabelTable__init( ((RogueClassString_CmdLabelTable*)ROGUE_CREATE_OBJECT(String_CmdLabelTable)) )));
  return (RogueClassMethod*)(THIS);
}

RogueString* RoguePropertyList__to_String( RoguePropertyList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RoguePropertyList* _auto_630_2 = (THIS);
    RogueInt32 _auto_631_3 = (0);
    for (;_auto_631_3 < _auto_630_2->count;++_auto_631_3)
    {
      RogueClassProperty* value_4 = (((RogueClassProperty*)(_auto_630_2->data->objects[_auto_631_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ((RogueProperty__to_String( value_4 ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RoguePropertyList__type_name( RoguePropertyList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[679]);
}

RoguePropertyList* RoguePropertyList__init_object( RoguePropertyList* THIS )
{
  return (RoguePropertyList*)(THIS);
}

RoguePropertyList* RoguePropertyList__init( RoguePropertyList* THIS )
{
  RoguePropertyList__init__Int32( THIS, 10 );
  return (RoguePropertyList*)(THIS);
}

RoguePropertyList* RoguePropertyList__init__Int32( RoguePropertyList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassProperty*), true );
  return (RoguePropertyList*)(THIS);
}

RoguePropertyList* RoguePropertyList__add__Property( RoguePropertyList* THIS, RogueClassProperty* value_0 )
{
  ((RoguePropertyList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RoguePropertyList*)(THIS);
}

RogueInt32 RoguePropertyList__capacity( RoguePropertyList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RoguePropertyList* RoguePropertyList__clear( RoguePropertyList* THIS )
{
  THIS->count = 0;
  return (RoguePropertyList*)(THIS);
}

RogueOptionalInt32 RoguePropertyList__locate__Property( RoguePropertyList* THIS, RogueClassProperty* value_0 )
{
  {
    RoguePropertyList* _auto_652_1 = (THIS);
    RogueInt32 i_2 = (0);
    for (;i_2 < _auto_652_1->count;++i_2)
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)value_0), ((RogueObject*)(((RogueClassProperty*)(THIS->data->objects[i_2])))) ))))
      {
        return (RogueOptionalInt32)(RogueOptionalInt32( i_2 ));
      }
    }
  }
  return (RogueOptionalInt32)(RogueOptionalInt32());
}

RoguePropertyList* RoguePropertyList__reserve__Int32( RoguePropertyList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassProperty*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RoguePropertyList__capacity( THIS ))) + ((RoguePropertyList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassProperty*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RoguePropertyList*)(THIS);
}

RogueString* RogueProperty__to_String( RogueClassProperty* THIS )
{
  return (RogueString*)(THIS->name);
}

RogueString* RogueProperty__type_name( RogueClassProperty* THIS )
{
  return (RogueString*)(Rogue_literal_strings[613]);
}

RogueClassProperty* RogueProperty__init__Token_Type_String_Type_Cmd( RogueClassProperty* THIS, RogueClassToken* _auto_116_0, RogueClassType* _auto_117_1, RogueString* _auto_118_2, RogueClassType* _auto_119_3, RogueClassCmd* _auto_120_4 )
{
  THIS->initial_value = _auto_120_4;
  THIS->_type = _auto_119_3;
  THIS->name = _auto_118_2;
  RogueProperty__set_type_context__Type( THIS, _auto_117_1 );
  THIS->t = _auto_116_0;
  return (RogueClassProperty*)(THIS);
}

RogueClassProperty* RogueProperty__clone( RogueClassProperty* THIS )
{
  RogueClassProperty* result_0 = (((RogueProperty__init__Token_Type_String_Type_Cmd( ((RogueClassProperty*)ROGUE_CREATE_OBJECT(Property)), THIS->t, THIS->type_context, THIS->name, ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
  result_0->cpp_name = THIS->cpp_name;
  result_0->_type = THIS->_type;
  result_0->attributes = THIS->attributes;
  if (!!(THIS->initial_value))
  {
    result_0->initial_value = (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->initial_value), ((RogueClassCloneArgs*)(NULL)) ));
  }
  return (RogueClassProperty*)(result_0);
}

RogueLogical RogueProperty__is_incorporated( RogueClassProperty* THIS )
{
  return (RogueLogical)(!!((THIS->attributes & 8192)));
}

void RogueProperty__mark_incorporated( RogueClassProperty* THIS )
{
  THIS->attributes |= 8192;
}

RogueClassProperty* RogueProperty__set_type_context__Type( RogueClassProperty* THIS, RogueClassType* _auto_121_0 )
{
  THIS->type_context = _auto_121_0;
  return (RogueClassProperty*)(THIS);
}

RogueClassProperty* RogueProperty__init_object( RogueClassProperty* THIS )
{
  return (RogueClassProperty*)(THIS);
}

RogueString* RogueString_MethodListTable__to_String( RogueClassString_MethodListTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_MethodListTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_MethodListTable__type_name( RogueClassString_MethodListTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[614]);
}

RogueClassString_MethodListTable* RogueString_MethodListTable__init( RogueClassString_MethodListTable* THIS )
{
  RogueString_MethodListTable__init__Int32( THIS, 16 );
  return (RogueClassString_MethodListTable*)(THIS);
}

RogueClassString_MethodListTable* RogueString_MethodListTable__init__Int32( RogueClassString_MethodListTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_MethodListTableEntryList__init__Int32_String_MethodListTableEntry( ((RogueTableEntry_of_String_MethodListList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_MethodListList)), bin_count_0, ((RogueClassString_MethodListTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_MethodListTable*)(THIS);
}

void RogueString_MethodListTable__clear( RogueClassString_MethodListTable* THIS )
{
  {
    RogueTableEntry_of_String_MethodListList* _auto_668_0 = (THIS->bins);
    RogueInt32 i_1 = (0);
    for (;i_1 < _auto_668_0->count;++i_1)
    {
      THIS->bins->data->objects[i_1] = ((RogueClassString_MethodListTableEntry*)(NULL));
    }
  }
  RogueStringList__clear( THIS->keys );
}

RogueClassString_MethodListTableEntry* RogueString_MethodListTable__find__String( RogueClassString_MethodListTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  RogueClassString_MethodListTableEntry* entry_2 = (((RogueClassString_MethodListTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( entry_2->key, key_0 )))))
    {
      return (RogueClassString_MethodListTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_MethodListTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_MethodListTableEntry*)(((RogueClassString_MethodListTableEntry*)(NULL)));
}

RogueMethodList* RogueString_MethodListTable__get__String( RogueClassString_MethodListTable* THIS, RogueString* key_0 )
{
  RogueClassString_MethodListTableEntry* entry_1 = (((RogueString_MethodListTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueMethodList*)(entry_1->value);
  }
  else
  {
    RogueMethodList* default_value_2 = 0;
    return (RogueMethodList*)(default_value_2);
  }
}

RogueClassString_MethodListTable* RogueString_MethodListTable__set__String_MethodList( RogueClassString_MethodListTable* THIS, RogueString* key_0, RogueMethodList* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_MethodListTableEntry* entry_4 = (((RogueClassString_MethodListTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( entry_4->key, key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_MethodListTable*)(THIS);
    }
    entry_4 = ((RogueClassString_MethodListTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_MethodListTableEntry*)((RogueString_MethodListTableEntry__init__String_MethodList_Int32( ((RogueClassString_MethodListTableEntry*)ROGUE_CREATE_OBJECT(String_MethodListTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_MethodListTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
  return (RogueClassString_MethodListTable*)(THIS);
}

RogueStringBuilder* RogueString_MethodListTable__print_to__StringBuilder( RogueClassString_MethodListTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_MethodListTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_MethodListTable* RogueString_MethodListTable__init_object( RogueClassString_MethodListTable* THIS )
{
  return (RogueClassString_MethodListTable*)(THIS);
}

RogueString* RogueTypeList__to_String( RogueTypeList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTypeList* _auto_669_2 = (THIS);
    RogueInt32 _auto_670_3 = (0);
    for (;_auto_670_3 < _auto_669_2->count;++_auto_670_3)
    {
      RogueClassType* value_4 = (((RogueClassType*)(_auto_669_2->data->objects[_auto_670_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ((RogueType__to_String( value_4 ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueTypeList__type_name( RogueTypeList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[680]);
}

RogueTypeList* RogueTypeList__init_object( RogueTypeList* THIS )
{
  return (RogueTypeList*)(THIS);
}

RogueTypeList* RogueTypeList__init( RogueTypeList* THIS )
{
  RogueTypeList__init__Int32( THIS, 10 );
  return (RogueTypeList*)(THIS);
}

RogueTypeList* RogueTypeList__init__Int32( RogueTypeList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassType*), true );
  return (RogueTypeList*)(THIS);
}

RogueTypeList* RogueTypeList__add__Type( RogueTypeList* THIS, RogueClassType* value_0 )
{
  ((RogueTypeList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTypeList*)(THIS);
}

RogueInt32 RogueTypeList__capacity( RogueTypeList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTypeList* RogueTypeList__choose__Function_Type_RETURNSLogical( RogueTypeList* THIS, RogueClassFunction_Type_RETURNSLogical* fn_0 )
{
  RogueTypeList* result_1 = (((RogueTypeList__init__Int32( ((RogueTypeList*)ROGUE_CREATE_OBJECT(TypeList)), THIS->count ))));
  {
    RogueTypeList* _auto_677_2 = (THIS);
    RogueInt32 _auto_678_3 = (0);
    for (;_auto_678_3 < _auto_677_2->count;++_auto_678_3)
    {
      RogueClassType* value_4 = (((RogueClassType*)(_auto_677_2->data->objects[_auto_678_3])));
      if ((call_ROGUEM106( 3, (RogueClassFunction_Type_RETURNSLogical*)(fn_0), value_4 )))
      {
        RogueTypeList__add__Type( result_1, value_4 );
      }
    }
  }
  return (RogueTypeList*)(result_1);
}

RogueTypeList* RogueTypeList__clear( RogueTypeList* THIS )
{
  THIS->count = 0;
  return (RogueTypeList*)(THIS);
}

void RogueTypeList__discard_from__Int32( RogueTypeList* THIS, RogueInt32 index_0 )
{
  RogueClassType* zero_value_1 = 0;
  RogueInt32 c_2 = (THIS->count);
  while (c_2 > index_0)
  {
    --c_2;
    THIS->data->objects[c_2] = zero_value_1;
  }
  THIS->count = c_2;
}

RogueTypeList* RogueTypeList__insert__Type_Int32( RogueTypeList* THIS, RogueClassType* value_0, RogueInt32 before_index_1 )
{
  if (before_index_1 < 0)
  {
    before_index_1 = ((RogueInt32)0);
  }
  if (before_index_1 >= THIS->count)
  {
    return (RogueTypeList*)(((RogueTypeList__add__Type( THIS, value_0 ))));
  }
  else
  {
    RogueTypeList__reserve__Int32( THIS, 1 );
    RogueArray_set(THIS->data,(before_index_1 + 1),((RogueArray*)(THIS->data)),before_index_1,(THIS->count - before_index_1));
    ++THIS->count;
    THIS->data->objects[before_index_1] = value_0;
  }
  return (RogueTypeList*)(THIS);
}

RogueOptionalInt32 RogueTypeList__locate__Type( RogueTypeList* THIS, RogueClassType* value_0 )
{
  {
    RogueTypeList* _auto_691_1 = (THIS);
    RogueInt32 i_2 = (0);
    for (;i_2 < _auto_691_1->count;++i_2)
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)value_0), ((RogueObject*)(((RogueClassType*)(THIS->data->objects[i_2])))) ))))
      {
        return (RogueOptionalInt32)(RogueOptionalInt32( i_2 ));
      }
    }
  }
  return (RogueOptionalInt32)(RogueOptionalInt32());
}

RogueTypeList* RogueTypeList__reserve__Int32( RogueTypeList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassType*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueTypeList__capacity( THIS ))) + ((RogueTypeList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassType*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTypeList*)(THIS);
}

RogueClassType* RogueTypeList__remove__Type( RogueTypeList* THIS, RogueClassType* value_0 )
{
  RogueOptionalInt32 index_1 = (((RogueTypeList__locate__Type( THIS, value_0 ))));
  if (index_1.exists)
  {
    return (RogueClassType*)(((RogueTypeList__remove_at__Int32( THIS, index_1.value ))));
  }
  else
  {
    RogueClassType* zero_value_2 = 0;
    return (RogueClassType*)(zero_value_2);
  }
}

RogueClassType* RogueTypeList__remove_at__Int32( RogueTypeList* THIS, RogueInt32 index_0 )
{
  RogueClassType* result_1 = (((RogueClassType*)(THIS->data->objects[index_0])));
  RogueArray_set(THIS->data,index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  RogueClassType* zero_value_2 = 0;
  --THIS->count;
  THIS->data->objects[THIS->count] = zero_value_2;
  return (RogueClassType*)(result_1);
}

RogueTypeList* RogueTypeList__swap__Int32_Int32( RogueTypeList* THIS, RogueInt32 i1_0, RogueInt32 i2_1 )
{
  RogueClassType* temp_2 = (((RogueClassType*)(THIS->data->objects[i1_0])));
  THIS->data->objects[i1_0] = ((RogueClassType*)(THIS->data->objects[i2_1]));
  THIS->data->objects[i2_1] = temp_2;
  return (RogueTypeList*)(THIS);
}

RogueString* RogueType__to_String( RogueClassType* THIS )
{
  return (RogueString*)(THIS->name);
}

RogueString* RogueType__type_name( RogueClassType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[615]);
}

RogueClassType* RogueType__init__Token_String( RogueClassType* THIS, RogueClassToken* _auto_127_0, RogueString* _auto_128_1 )
{
  THIS->name = _auto_128_1;
  THIS->t = _auto_127_0;
  return (RogueClassType*)(THIS);
}

RogueClassMethod* RogueType__add_method__Token_String( RogueClassType* THIS, RogueClassToken* m_t_0, RogueString* m_name_1 )
{
  return (RogueClassMethod*)(((RogueType__add_method__Method( THIS, ((RogueMethod__init__Token_Type_String( ((RogueClassMethod*)ROGUE_CREATE_OBJECT(Method)), m_t_0, THIS, m_name_1 ))) ))));
}

RogueClassMethod* RogueType__add_method__Method( RogueClassType* THIS, RogueClassMethod* m_0 )
{
  RogueMethodList__add__Method( THIS->method_list, m_0 );
  RogueMethodList* list_1 = (((RogueString_MethodListTable__get__String( THIS->method_lookup_by_name, m_0->name ))));
  if (!(!!(list_1)))
  {
    list_1 = ((RogueMethodList*)((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) ))));
    RogueString_MethodListTable__set__String_MethodList( THIS->method_lookup_by_name, m_0->name, list_1 );
  }
  RogueMethodList__add__Method( list_1, m_0 );
  return (RogueClassMethod*)(m_0);
}

RogueClassMethod* RogueType__replace_method__Method_Token_String( RogueClassType* THIS, RogueClassMethod* existing_0, RogueClassToken* m_t_1, RogueString* m_name_2 )
{
  RogueClassMethod* m_3 = (((RogueMethod__init__Token_Type_String( ((RogueClassMethod*)ROGUE_CREATE_OBJECT(Method)), m_t_1, THIS, m_name_2 ))));
  m_3->index = existing_0->index;
  THIS->method_list->data->objects[m_3->index] = m_3;
  RogueMethodList* list_4 = (((RogueString_MethodListTable__get__String( THIS->method_lookup_by_name, m_name_2 ))));
  RogueMethodList__remove__Method( list_4, existing_0 );
  RogueMethodList__add__Method( list_4, m_3 );
  return (RogueClassMethod*)(m_3);
}

RogueClassMethod* RogueType__add_routine__Token_String( RogueClassType* THIS, RogueClassToken* r_t_0, RogueString* r_name_1 )
{
  RogueClassMethod* r_2 = (((RogueMethod__init__Token_Type_String( ((RogueClassMethod*)ROGUE_CREATE_OBJECT(Method)), r_t_0, THIS, r_name_1 ))));
  RogueAttributes__add__Int32( r_2->attributes, 512 );
  RogueMethodList__add__Method( THIS->global_method_list, r_2 );
  RogueMethodList* list_3 = (((RogueString_MethodListTable__get__String( THIS->routine_lookup_by_name, r_name_1 ))));
  if (!(!!(list_3)))
  {
    list_3 = ((RogueMethodList*)((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) ))));
    RogueString_MethodListTable__set__String_MethodList( THIS->routine_lookup_by_name, r_name_1, list_3 );
  }
  RogueMethodList__add__Method( list_3, r_2 );
  return (RogueClassMethod*)(r_2);
}

RogueClassProperty* RogueType__add_global__Token_String( RogueClassType* THIS, RogueClassToken* s_t_0, RogueString* s_name_1 )
{
  RogueClassProperty* s_2 = (((RogueProperty__init__Token_Type_String_Type_Cmd( ((RogueClassProperty*)ROGUE_CREATE_OBJECT(Property)), s_t_0, THIS, s_name_1, ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
  RoguePropertyList__add__Property( THIS->global_list, s_2 );
  RogueString_PropertyTable__set__String_Property( THIS->global_lookup, s_name_1, s_2 );
  return (RogueClassProperty*)(s_2);
}

RogueClassProperty* RogueType__add_property__Token_String_Type_Cmd( RogueClassType* THIS, RogueClassToken* p_t_0, RogueString* p_name_1, RogueClassType* p_type_2, RogueClassCmd* initial_value_3 )
{
  return (RogueClassProperty*)(((RogueType__add_property__Property( THIS, ((RogueProperty__init__Token_Type_String_Type_Cmd( ((RogueClassProperty*)ROGUE_CREATE_OBJECT(Property)), p_t_0, THIS, p_name_1, p_type_2, initial_value_3 ))) ))));
}

RogueClassProperty* RogueType__add_property__Property( RogueClassType* THIS, RogueClassProperty* p_0 )
{
  RoguePropertyList__add__Property( THIS->property_list, p_0 );
  RogueString_PropertyTable__set__String_Property( THIS->property_lookup, p_0->name, p_0 );
  return (RogueClassProperty*)(p_0);
}

void RogueType__collect_type_info__Int32List( RogueClassType* THIS, RogueInt32List* info_0 )
{
  RogueInt32List__add__Int32( info_0, 0 );
  if (((RogueType__is_primitive( THIS ))))
  {
    RogueInt32List__add__Int32( info_0, 0 );
  }
  else
  {
    RogueInt32List__add__Int32( info_0, THIS->dynamic_method_table_index );
  }
  RogueInt32List__add__Int32( info_0, THIS->base_types->count );
  {
    RogueTypeList* _auto_715_1 = (THIS->base_types);
    RogueInt32 _auto_716_2 = (0);
    for (;_auto_716_2 < _auto_715_1->count;++_auto_716_2)
    {
      RogueClassType* base_type_3 = (((RogueClassType*)(_auto_715_1->data->objects[_auto_716_2])));
      RogueInt32List__add__Int32( info_0, base_type_3->index );
    }
  }
}

RogueClassCmd* RogueType__create_default_value__Token( RogueClassType* THIS, RogueClassToken* _t_0 )
{
  if (((RogueType__is_reference( THIS ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralNull__init__Token( ((RogueClassCmdLiteralNull*)ROGUE_CREATE_OBJECT(CmdLiteralNull)), _t_0 ))))));
  }
  if (((RogueType__is_compound( THIS ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateCompound__init__Token_Type_CmdArgs( ((RogueClassCmdCreateCompound*)ROGUE_CREATE_OBJECT(CmdCreateCompound)), _t_0, THIS, ((RogueClassCmdArgs*)(NULL)) ))))));
  }
  if (((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), _t_0, false ))))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), _t_0, 0 ))))));
}

RogueClassMethod* RogueType__find_method__String( RogueClassType* THIS, RogueString* signature_0 )
{
  RogueClassMethod* m_1 = (((RogueString_MethodTable__get__String( THIS->method_lookup_by_signature, signature_0 ))));
  if (!!(m_1))
  {
    return (RogueClassMethod*)(m_1);
  }
  return (RogueClassMethod*)(((RogueType__find_routine__String( THIS, signature_0 ))));
}

RogueClassMethod* RogueType__find_routine__String( RogueClassType* THIS, RogueString* signature_0 )
{
  RogueClassMethod* m_1 = (((RogueString_MethodTable__get__String( THIS->routine_lookup_by_signature, signature_0 ))));
  if (!!(m_1))
  {
    return (RogueClassMethod*)(m_1);
  }
  return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
}

RogueClassProperty* RogueType__find_property__String( RogueClassType* THIS, RogueString* p_name_0 )
{
  if (p_name_0->characters[0] == (RogueCharacter)'@')
  {
    p_name_0 = ((RogueString*)((RogueString__rightmost__Int32( p_name_0, -1 ))));
  }
  return (RogueClassProperty*)(((RogueString_PropertyTable__get__String( THIS->property_lookup, p_name_0 ))));
}

RogueClassProperty* RogueType__find_global__String( RogueClassType* THIS, RogueString* s_name_0 )
{
  if (s_name_0->characters[0] == (RogueCharacter)'@')
  {
    s_name_0 = ((RogueString*)((RogueString__rightmost__Int32( s_name_0, -1 ))));
  }
  return (RogueClassProperty*)(((RogueString_PropertyTable__get__String( THIS->global_lookup, s_name_0 ))));
}

RogueLogical RogueType__has_method_named__String( RogueClassType* THIS, RogueString* m_name_0 )
{
  RogueMethodList* list_1 = (((RogueString_MethodListTable__get__String( THIS->method_lookup_by_name, m_name_0 ))));
  return (RogueLogical)((!!(list_1) && !!(list_1->count)));
}

RogueLogical RogueType__has_routine_named__String( RogueClassType* THIS, RogueString* r_name_0 )
{
  RogueMethodList* list_1 = (((RogueString_MethodListTable__get__String( THIS->routine_lookup_by_name, r_name_0 ))));
  return (RogueLogical)((!!(list_1) && !!(list_1->count)));
}

RogueLogical RogueType__instance_of__Type( RogueClassType* THIS, RogueClassType* ancestor_type_0 )
{
  if (((void*)THIS) == ((void*)ancestor_type_0))
  {
    return (RogueLogical)(true);
  }
  if ((((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_null) && ((RogueType__is_reference( ancestor_type_0 )))))
  {
    return (RogueLogical)(true);
  }
  {
    RogueTypeList* _auto_723_1 = (THIS->base_types);
    RogueInt32 _auto_724_2 = (0);
    for (;_auto_724_2 < _auto_723_1->count;++_auto_724_2)
    {
      RogueClassType* base_type_3 = (((RogueClassType*)(_auto_723_1->data->objects[_auto_724_2])));
      if (((RogueType__instance_of__Type( base_type_3, ancestor_type_0 ))))
      {
        return (RogueLogical)(true);
      }
    }
  }
  return (RogueLogical)(false);
}

RogueLogical RogueType__is_compatible_with__Type( RogueClassType* THIS, RogueClassType* other_0 )
{
  if (((void*)THIS) == ((void*)other_0))
  {
    return (RogueLogical)(true);
  }
  if ((((RogueType__is_primitive( THIS ))) && ((RogueType__is_primitive( other_0 )))))
  {
    if ((((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical) ^ ((void*)other_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)))
    {
      return (RogueLogical)(false);
    }
    return (RogueLogical)(true);
  }
  if ((other_0->is_optional && ((void*)other_0->_element_type) == ((void*)THIS)))
  {
    return (RogueLogical)(true);
  }
  return (RogueLogical)(((RogueType__instance_of__Type( THIS, other_0 ))));
}

RogueLogical RogueType__is_equivalent_or_more_specific_than__Type( RogueClassType* THIS, RogueClassType* other_0 )
{
  if (((void*)THIS) == ((void*)other_0))
  {
    return (RogueLogical)(true);
  }
  if ((((RogueType__is_primitive( THIS ))) && ((RogueType__is_primitive( other_0 )))))
  {
    return (RogueLogical)(((RogueType__primitive_rank( THIS ))) >= ((RogueType__primitive_rank( other_0 ))));
  }
  if (((RogueType__instance_of__Type( THIS, other_0 ))))
  {
    return (RogueLogical)(true);
  }
  if ((other_0->is_list && ((void*)other_0->_element_type) == ((void*)THIS)))
  {
    return (RogueLogical)(true);
  }
  return (RogueLogical)(false);
}

RogueLogical RogueType__is_aspect( RogueClassType* THIS )
{
  return (RogueLogical)((THIS->attributes->flags & 7) == 2);
}

RogueLogical RogueType__is_class( RogueClassType* THIS )
{
  return (RogueLogical)((THIS->attributes->flags & 7) == 0);
}

RogueLogical RogueType__is_compound( RogueClassType* THIS )
{
  return (RogueLogical)((THIS->attributes->flags & 7) == 3);
}

RogueLogical RogueType__is_functional( RogueClassType* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 16)));
}

RogueLogical RogueType__is_native( RogueClassType* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 32)));
}

RogueLogical RogueType__is_primitive( RogueClassType* THIS )
{
  return (RogueLogical)((THIS->attributes->flags & 7) == 1);
}

RogueLogical RogueType__is_reference( RogueClassType* THIS )
{
  switch ((THIS->attributes->flags & 7))
  {
    case 0:
    case 2:
    {
      return (RogueLogical)(true);
      break;
    }
    default:
    {
      return (RogueLogical)(false);
    }
  }
}

RogueLogical RogueType__is_requisite( RogueClassType* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 32768)));
}

RogueLogical RogueType__is_routine( RogueClassType* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 1048576)));
}

RogueLogical RogueType__is_singleton( RogueClassType* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 1024)));
}

RogueClassType* RogueType__organize__Scope( RogueClassType* THIS, RogueClassScope* scope_0 )
{
  if (THIS->organized)
  {
    return (RogueClassType*)(THIS);
  }
  THIS->organized = true;
  THIS->index = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_list->count;
  RogueTypeList__add__Type( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_list, THIS );
  if (!(THIS->defined))
  {
    THIS->defined = true;
    RogueClassTemplate* template_1 = (((RogueProgram__find_template__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->name ))));
    if (!!(template_1))
    {
      RogueTemplate__instantiate__Type_Scope( template_1, THIS, scope_0 );
    }
    else
    {
      ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[355] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->name ))) ))), Rogue_literal_strings[21] ))) ))) ))));
    }
  }
  {
    RogueTypeList* _auto_725_20 = (THIS->base_types);
    RogueInt32 _auto_726_21 = (0);
    for (;_auto_726_21 < _auto_725_20->count;++_auto_726_21)
    {
      RogueClassType* base_type_22 = (((RogueClassType*)(_auto_725_20->data->objects[_auto_726_21])));
      RogueType__organize__Scope( base_type_22, scope_0 );
      if (!(((RogueType__is_aspect( base_type_22 )))))
      {
        if (((RogueType__is_aspect( THIS ))))
        {
          ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[356] ))));
        }
        else if (((RogueType__is_compound( THIS ))))
        {
          ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[357] ))));
        }
      }
      if (((RogueType__instance_of__Type( base_type_22, THIS ))))
      {
        ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[358] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(THIS)) ))) ))), Rogue_literal_strings[359] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(base_type_22)) ))) ))), Rogue_literal_strings[360] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(base_type_22)) ))) ))), Rogue_literal_strings[361] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(THIS)) ))) ))), Rogue_literal_strings[51] ))) ))) ))));
      }
    }
  }
  if (((RogueType__is_class( THIS ))))
  {
    {
      RogueTypeList* _auto_727_23 = (THIS->base_types);
      RogueInt32 _auto_728_24 = (0);
      for (;_auto_728_24 < _auto_727_23->count;++_auto_728_24)
      {
        RogueClassType* base_type_25 = (((RogueClassType*)(_auto_727_23->data->objects[_auto_728_24])));
        if (((RogueType__is_class( base_type_25 ))))
        {
          if ((!!(THIS->base_class) && ((void*)THIS->base_class) != ((void*)base_type_25)))
          {
            ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[362] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->name ))) ))), Rogue_literal_strings[363] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(THIS->base_class)) ))) ))), Rogue_literal_strings[364] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(base_type_25)) ))) ))), Rogue_literal_strings[365] ))) ))) ))));
          }
          else
          {
            THIS->base_class = base_type_25;
          }
        }
      }
    }
    if (((!(!!(THIS->base_class)) && !(((RogueType__is_functional( THIS ))))) && ((void*)THIS) != ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object)))
    {
      RogueType__organize__Scope( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object, ((RogueClassScope*)(NULL)) );
      THIS->base_class = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object;
      RogueTypeList__insert__Type_Int32( THIS->base_types, THIS->base_class, 0 );
    }
  }
  if (!!(THIS->base_class))
  {
    RogueTypeList__insert__Type_Int32( THIS->base_types, ((RogueTypeList__remove__Type( THIS->base_types, THIS->base_class ))), 0 );
  }
  RogueTypeList__clear( THIS->flat_base_types );
  if (!!(THIS->base_class))
  {
    RogueType__collect_base_types__TypeList( THIS->base_class, THIS->flat_base_types );
  }
  {
    RogueTypeList* _auto_729_26 = (THIS->base_types);
    RogueInt32 _auto_730_27 = (0);
    for (;_auto_730_27 < _auto_729_26->count;++_auto_730_27)
    {
      RogueClassType* base_type_28 = (((RogueClassType*)(_auto_729_26->data->objects[_auto_730_27])));
      RogueType__collect_base_types__TypeList( base_type_28, THIS->flat_base_types );
    }
  }
  {
    RogueTypeList* _auto_731_29 = (THIS->base_types);
    RogueInt32 _auto_732_30 = (0);
    for (;_auto_732_30 < _auto_731_29->count;++_auto_732_30)
    {
      RogueClassType* base_type_31 = (((RogueClassType*)(_auto_731_29->data->objects[_auto_732_30])));
      RogueType__inherit_definitions__Type( THIS, base_type_31 );
    }
  }
  RoguePropertyList* full_property_list_2 = (((RoguePropertyList__init( ((RoguePropertyList*)ROGUE_CREATE_OBJECT(PropertyList)) ))));
  RogueString_PropertyTable__clear( THIS->property_lookup );
  RogueType__inherit_properties__PropertyList_String_PropertyTable( THIS, full_property_list_2, THIS->property_lookup );
  THIS->property_list = full_property_list_2;
  RogueClassMethod* m_type_name_3 = (((RogueType__add_method__Token_String( THIS, THIS->t, Rogue_literal_strings[373] ))));
  m_type_name_3->_return_type = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String;
  RogueCmdList__add__Cmd( ((RogueCmdList*)m_type_name_3->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), THIS->t, ((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Int32( ((RogueClassCmdLiteralString*)ROGUE_CREATE_OBJECT(CmdLiteralString)), THIS->t, THIS->name, 0 ))))) ))))) );
  {
    RogueMethodList* _auto_736_32 = (THIS->global_method_list);
    RogueInt32 _auto_737_33 = (0);
    for (;_auto_737_33 < _auto_736_32->count;++_auto_737_33)
    {
      RogueClassMethod* r_34 = (((RogueClassMethod*)(_auto_736_32->data->objects[_auto_737_33])));
      RogueMethod__organize__Scope_Logical( r_34, scope_0, true );
    }
  }
  {
    RogueMethodList* _auto_738_35 = (THIS->method_list);
    RogueInt32 _auto_739_36 = (0);
    for (;_auto_739_36 < _auto_738_35->count;++_auto_739_36)
    {
      RogueClassMethod* m_37 = (((RogueClassMethod*)(_auto_738_35->data->objects[_auto_739_36])));
      RogueMethod__organize__Scope_Logical( m_37, scope_0, true );
    }
  }
  RogueMethodList* full_routine_list_4 = (((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) ))));
  RogueString_MethodTable__clear( THIS->routine_lookup_by_signature );
  RogueType__inherit_routines__MethodList_String_MethodTable( THIS, full_routine_list_4, THIS->routine_lookup_by_signature );
  THIS->global_method_list = full_routine_list_4;
  RogueString_MethodListTable__clear( THIS->routine_lookup_by_name );
  {
    RogueMethodList* _auto_740_38 = (THIS->global_method_list);
    RogueInt32 _auto_741_39 = (0);
    for (;_auto_741_39 < _auto_740_38->count;++_auto_741_39)
    {
      RogueClassMethod* r_40 = (((RogueClassMethod*)(_auto_740_38->data->objects[_auto_741_39])));
      RogueMethodList* list_5 = (((RogueString_MethodListTable__get__String( THIS->routine_lookup_by_name, r_40->name ))));
      if (!(!!(list_5)))
      {
        list_5 = ((RogueMethodList*)((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) ))));
        RogueString_MethodListTable__set__String_MethodList( THIS->routine_lookup_by_name, r_40->name, list_5 );
      }
      RogueMethodList__add__Method( list_5, r_40 );
    }
  }
  RogueMethodList* full_method_list_6 = (((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) ))));
  RogueString_MethodTable__clear( THIS->method_lookup_by_signature );
  RogueType__inherit_methods__MethodList_String_MethodTable( THIS, full_method_list_6, THIS->method_lookup_by_signature );
  THIS->method_list = full_method_list_6;
  RogueString_MethodListTable__clear( THIS->method_lookup_by_name );
  {
    RogueMethodList* _auto_742_41 = (THIS->method_list);
    RogueInt32 _auto_743_42 = (0);
    for (;_auto_743_42 < _auto_742_41->count;++_auto_743_42)
    {
      RogueClassMethod* m_43 = (((RogueClassMethod*)(_auto_742_41->data->objects[_auto_743_42])));
      RogueMethodList* list_7 = (((RogueString_MethodListTable__get__String( THIS->method_lookup_by_name, m_43->name ))));
      if (!(!!(list_7)))
      {
        list_7 = ((RogueMethodList*)((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) ))));
        RogueString_MethodListTable__set__String_MethodList( THIS->method_lookup_by_name, m_43->name, list_7 );
      }
      RogueMethodList__add__Method( list_7, m_43 );
    }
  }
  RogueClassMethod* m_init_class_8 = (((RogueType__find_routine__String( THIS, Rogue_literal_strings[391] ))));
  if (!!(m_init_class_8))
  {
    if (((void*)m_init_class_8->type_context) == ((void*)THIS))
    {
      RogueAttributes__add__Int32( m_init_class_8->attributes, 32768 );
    }
  }
  else
  {
    m_init_class_8 = ((RogueClassMethod*)((RogueType__find_method__String( THIS, Rogue_literal_strings[391] ))));
    if (!!(m_init_class_8))
    {
      ROGUE_THROW(((RogueToken__error__String( m_init_class_8->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->name ))) ))), Rogue_literal_strings[392] ))) ))) ))));
    }
  }
  if ((!!(THIS->global_list->count) && !(((RogueType__is_native( THIS ))))))
  {
    RogueClassMethod* m_9 = (((RogueType__find_routine__String( THIS, Rogue_literal_strings[391] ))));
    if ((!(!!(m_9)) || ((void*)m_9->type_context) != ((void*)THIS)))
    {
      m_9 = ((RogueClassMethod*)((RogueMethod__organize__Scope_Logical( ((RogueType__add_routine__Token_String( THIS, THIS->t, Rogue_literal_strings[393] ))), scope_0, true ))));
    }
    RogueAttributes__add__Int32( m_9->attributes, 32768 );
    RogueInt32 i_10 = ((THIS->global_list->count - 1));
    while (i_10 >= 0)
    {
      RogueClassProperty* s_11 = (((RogueClassProperty*)(THIS->global_list->data->objects[i_10])));
      if (!!(s_11->initial_value))
      {
        RogueCmdList__insert__Cmd_Int32( ((RogueCmdList*)m_9->statements), ((RogueClassCmd*)(((RogueCmdWriteGlobal__init__Token_Property_Cmd( ((RogueClassCmdWriteGlobal*)ROGUE_CREATE_OBJECT(CmdWriteGlobal)), s_11->t, s_11, (call_ROGUEM58( 6, (RogueClassCmd*)(s_11->initial_value), ((RogueClassCloneArgs*)(NULL)) )) ))))), 0 );
      }
      --i_10;
    }
  }
  if ((((RogueType__is_class( THIS ))) && !(((RogueType__is_native( THIS ))))))
  {
    RogueClassMethod* m_12 = (((RogueType__find_method__String( THIS, Rogue_literal_strings[394] ))));
    RogueClassMethod* prior_m_13 = (m_12);
    if ((!!(m_12) && ((void*)m_12->type_context) == ((void*)THIS)))
    {
      RogueAttributes__add__Int32( m_12->attributes, 32768 );
    }
    else
    {
      m_12 = ((RogueClassMethod*)((RogueMethod__organize__Scope_Logical( ((RogueType__add_method__Token_String( THIS, THIS->t, Rogue_literal_strings[395] ))), scope_0, true ))));
      RogueAttributes__add__Int32( m_12->attributes, 32768 );
      if (!!(prior_m_13))
      {
        RogueAttributes__add__Int32( prior_m_13->attributes, 2048 );
        RogueAttributes__add__Int32( prior_m_13->attributes, 4096 );
        RogueAttributes__add__Int32( m_12->attributes, 2048 );
        RogueMethodList__remove__Method( THIS->method_list, m_12 );
        THIS->method_list->data->objects[((RogueMethodList__locate__Method( THIS->method_list, prior_m_13 ))).value] = m_12;
      }
    }
    m_12->_return_type = THIS;
    RogueCmdList__add__Cmd( ((RogueCmdList*)m_12->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), THIS->t, ((RogueClassCmd*)(((RogueClassCmdLiteralThis*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)((RogueClassCmdLiteralThis*)ROGUE_CREATE_OBJECT(CmdLiteralThis))), THIS->t, THIS ))))))) ))))) );
    RogueInt32 i_14 = ((THIS->property_list->count - 1));
    while (i_14 >= 0)
    {
      RogueClassProperty* p_15 = (((RogueClassProperty*)(THIS->property_list->data->objects[i_14])));
      if (!!(p_15->initial_value))
      {
        RogueCmdList__insert__Cmd_Int32( ((RogueCmdList*)m_12->statements), ((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), p_15->t, ((RogueClassCmd*)(((RogueClassCmdLiteralThis*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)((RogueClassCmdLiteralThis*)ROGUE_CREATE_OBJECT(CmdLiteralThis))), p_15->t, p_15->type_context ))))))), p_15, (call_ROGUEM58( 6, (RogueClassCmd*)(p_15->initial_value), ((RogueClassCloneArgs*)(NULL)) )) ))))), 0 );
      }
      --i_14;
    }
  }
  if ((((RogueType__is_class( THIS ))) && !(((RogueType__is_native( THIS ))))))
  {
    if (((RogueString__operatorEQUALSEQUALS__String( THIS->name, Rogue_literal_strings[396] ))))
    {
      RogueGlobal__println( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)) );
    }
    RogueClassMethod* m_16 = (((RogueType__find_method__String( THIS, Rogue_literal_strings[397] ))));
    if ((!!(m_16) && ((void*)m_16->type_context) == ((void*)THIS)))
    {
      if (!!(m_16->_return_type))
      {
        ROGUE_THROW(((RogueToken__error__String( m_16->t, Rogue_literal_strings[398] ))));
      }
      RogueAttributes__add__Int32( m_16->attributes, 32768 );
    }
  }
  if ((((RogueType__is_compound( THIS ))) || ((RogueType__is_primitive( THIS )))))
  {
    RogueClassMethod* m_17 = (((RogueType__find_method__String( THIS, Rogue_literal_strings[399] ))));
    if ((!(!!(m_17)) || ((void*)m_17->type_context) != ((void*)THIS)))
    {
      if (!!(m_17))
      {
        m_17 = ((RogueClassMethod*)((RogueType__replace_method__Method_Token_String( THIS, m_17, THIS->t, Rogue_literal_strings[400] ))));
      }
      else
      {
        m_17 = ((RogueClassMethod*)((RogueType__add_method__Token_String( THIS, THIS->t, Rogue_literal_strings[400] ))));
      }
      m_17->_return_type = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String;
      RogueCmdList__add__Cmd( ((RogueCmdList*)m_17->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), THIS->t, ((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Int32( ((RogueClassCmdLiteralString*)ROGUE_CREATE_OBJECT(CmdLiteralString)), THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[66] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->name ))) ))), Rogue_literal_strings[67] ))) ))), 0 ))))) ))))) );
      RogueMethod__organize__Scope_Logical( m_17, scope_0, true );
    }
  }
  if (((void*)THIS) != ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_NativeArray))
  {
    THIS->is_array = ((RogueType__instance_of__Type( THIS, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_NativeArray )));
    if (THIS->is_array)
    {
      RogueClassType* cur_type_18 = (THIS);
      while (!(((RogueString__begins_with__String( cur_type_18->name, Rogue_literal_strings[402] )))))
      {
        cur_type_18 = ((RogueClassType*)cur_type_18->base_class);
        if (((void*)cur_type_18) == ((void*)NULL))
        {
          ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[401] ))));
        }
      }
      RogueString* element_type_name_19 = (((RogueString__before_last__String( ((RogueString__after_first__String( cur_type_18->name, Rogue_literal_strings[198] ))), Rogue_literal_strings[116] ))));
      THIS->_element_type = ((RogueType__organize__Scope( ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, element_type_name_19 ))), scope_0 )));
    }
  }
  RogueType__index_and_move_inline_to_end__MethodList( THIS, THIS->global_method_list );
  RogueType__index_and_move_inline_to_end__MethodList( THIS, THIS->method_list );
  return (RogueClassType*)(THIS);
}

RogueInt32 RogueType__primitive_rank( RogueClassType* THIS )
{
  if (((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueInt32)(7);
  }
  if (((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real32))
  {
    return (RogueInt32)(6);
  }
  if (((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int64))
  {
    return (RogueInt32)(5);
  }
  if (((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueInt32)(4);
  }
  if (((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character))
  {
    return (RogueInt32)(3);
  }
  if (((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte))
  {
    return (RogueInt32)(2);
  }
  if (((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))
  {
    return (RogueInt32)(1);
  }
  return (RogueInt32)(0);
}

void RogueType__collect_base_types__TypeList( RogueClassType* THIS, RogueTypeList* list_0 )
{
  THIS->has_extended_class = true;
  if (((RogueTypeList__locate__Type( list_0, THIS ))).exists)
  {
    return;
  }
  RogueTypeList__add__Type( list_0, THIS );
  {
    RogueTypeList* _auto_751_1 = (THIS->base_types);
    RogueInt32 _auto_752_2 = (0);
    for (;_auto_752_2 < _auto_751_1->count;++_auto_752_2)
    {
      RogueClassType* base_type_3 = (((RogueClassType*)(_auto_751_1->data->objects[_auto_752_2])));
      RogueType__collect_base_types__TypeList( base_type_3, list_0 );
    }
  }
}

void RogueType__cull_unused_methods( RogueClassType* THIS )
{
  if (THIS->culled)
  {
    return;
  }
  THIS->culled = true;
  {
    RogueTypeList* _auto_753_3 = (THIS->base_types);
    RogueInt32 _auto_754_4 = (0);
    for (;_auto_754_4 < _auto_753_3->count;++_auto_754_4)
    {
      RogueClassType* base_type_5 = (((RogueClassType*)(_auto_753_3->data->objects[_auto_754_4])));
      RogueType__cull_unused_methods( base_type_5 );
    }
  }
  RogueInt32 i_0 = ((THIS->method_list->count - 1));
  while (i_0 >= 0)
  {
    RogueClassMethod* m_1 = (((RogueClassMethod*)(THIS->method_list->data->objects[i_0])));
    if (((RogueMethod__is_macro( m_1 ))))
    {
      RogueMethodList__remove__Method( THIS->method_list, m_1 );
    }
    --i_0;
  }
  if (!(THIS->has_extended_class))
  {
    i_0 = ((RogueInt32)(THIS->method_list->count - 1));
    while (i_0 >= 0)
    {
      RogueClassMethod* m_2 = (((RogueClassMethod*)(THIS->method_list->data->objects[i_0])));
      if (!(m_2->is_used))
      {
        if ((!(!!(THIS->base_class)) || THIS->base_class->method_list->count <= i_0))
        {
          RogueMethodList__remove__Method( THIS->method_list, m_2 );
        }
      }
      --i_0;
    }
  }
  i_0 = ((RogueInt32)0);
  {
    RogueMethodList* _auto_755_6 = (THIS->method_list);
    RogueInt32 _auto_756_7 = (0);
    for (;_auto_756_7 < _auto_755_6->count;++_auto_756_7)
    {
      RogueClassMethod* m_8 = (((RogueClassMethod*)(_auto_755_6->data->objects[_auto_756_7])));
      m_8->index = i_0;
      ++i_0;
    }
  }
}

RogueLogical RogueType__has_global_references( RogueClassType* THIS )
{
  {
    RoguePropertyList* _auto_757_0 = (THIS->global_list);
    RogueInt32 _auto_758_1 = (0);
    for (;_auto_758_1 < _auto_757_0->count;++_auto_758_1)
    {
      RogueClassProperty* g_2 = (((RogueClassProperty*)(_auto_757_0->data->objects[_auto_758_1])));
      if (((RogueType__is_reference( g_2->_type ))))
      {
        return (RogueLogical)(true);
      }
      if ((((RogueType__is_compound( g_2->_type ))) && ((RogueType__has_object_references( g_2->_type )))))
      {
        return (RogueLogical)(true);
      }
    }
  }
  return (RogueLogical)(false);
}

RogueLogical RogueType__has_object_references( RogueClassType* THIS )
{
  {
    RoguePropertyList* _auto_759_0 = (THIS->property_list);
    RogueInt32 _auto_760_1 = (0);
    for (;_auto_760_1 < _auto_759_0->count;++_auto_760_1)
    {
      RogueClassProperty* p_2 = (((RogueClassProperty*)(_auto_759_0->data->objects[_auto_760_1])));
      if (((RogueType__is_reference( p_2->_type ))))
      {
        return (RogueLogical)(true);
      }
      if ((((RogueType__is_compound( p_2->_type ))) && ((RogueType__has_object_references( p_2->_type )))))
      {
        return (RogueLogical)(true);
      }
    }
  }
  return (RogueLogical)((THIS->is_array && ((RogueType__has_object_references( THIS->_element_type )))));
}

RogueLogical RogueType__is_reference_array( RogueClassType* THIS )
{
  return (RogueLogical)((THIS->is_array && ((RogueType__is_reference( THIS->_element_type )))));
}

void RogueType__inherit_definitions__Type( RogueClassType* THIS, RogueClassType* from_type_0 )
{
  {
    RogueDefinitionList* _auto_761_1 = (from_type_0->definition_list);
    RogueInt32 _auto_762_2 = (0);
    for (;_auto_762_2 < _auto_761_1->count;++_auto_762_2)
    {
      RogueClassDefinition* def_3 = (((RogueClassDefinition*)(_auto_761_1->data->objects[_auto_762_2])));
      if (!(((RogueString_DefinitionTable__contains__String( THIS->definition_lookup, def_3->name )))))
      {
        RogueDefinitionList__add__Definition( THIS->definition_list, def_3 );
        RogueString_DefinitionTable__set__String_Definition( THIS->definition_lookup, def_3->name, ((RogueString_DefinitionTable__get__String( from_type_0->definition_lookup, def_3->name ))) );
      }
    }
  }
  {
    RogueTypeList* _auto_763_4 = (from_type_0->base_types);
    RogueInt32 _auto_764_5 = (0);
    for (;_auto_764_5 < _auto_763_4->count;++_auto_764_5)
    {
      RogueClassType* base_type_6 = (((RogueClassType*)(_auto_763_4->data->objects[_auto_764_5])));
      RogueType__inherit_definitions__Type( THIS, base_type_6 );
    }
  }
}

void RogueType__inherit_properties__PropertyList_String_PropertyTable( RogueClassType* THIS, RoguePropertyList* list_0, RogueClassString_PropertyTable* lookup_1 )
{
  {
    RogueTypeList* _auto_765_2 = (THIS->base_types);
    RogueInt32 _auto_766_3 = (0);
    for (;_auto_766_3 < _auto_765_2->count;++_auto_766_3)
    {
      RogueClassType* base_type_4 = (((RogueClassType*)(_auto_765_2->data->objects[_auto_766_3])));
      {
        RoguePropertyList* _auto_767_5 = (base_type_4->property_list);
        RogueInt32 _auto_768_6 = (0);
        for (;_auto_768_6 < _auto_767_5->count;++_auto_768_6)
        {
          RogueClassProperty* base_p_7 = (((RogueClassProperty*)(_auto_767_5->data->objects[_auto_768_6])));
          RogueType__inherit_property__Property_PropertyList_String_PropertyTable( THIS, base_p_7, list_0, lookup_1 );
        }
      }
    }
  }
  {
    RoguePropertyList* _auto_769_8 = (THIS->property_list);
    RogueInt32 _auto_770_9 = (0);
    for (;_auto_770_9 < _auto_769_8->count;++_auto_770_9)
    {
      RogueClassProperty* p_10 = (((RogueClassProperty*)(_auto_769_8->data->objects[_auto_770_9])));
      RogueType__inherit_property__Property_PropertyList_String_PropertyTable( THIS, p_10, list_0, lookup_1 );
    }
  }
}

void RogueType__inherit_property__Property_PropertyList_String_PropertyTable( RogueClassType* THIS, RogueClassProperty* p_0, RoguePropertyList* list_1, RogueClassString_PropertyTable* lookup_2 )
{
  RogueClassProperty* existing_p_3 = (((RogueString_PropertyTable__get__String( lookup_2, p_0->name ))));
  if (!!(existing_p_3))
  {
    RogueInt32 i_4 = (((RoguePropertyList__locate__Property( list_1, existing_p_3 ))).value);
    if (((((void*)p_0->type_context) == ((void*)existing_p_3->type_context) && !(((RogueProperty__is_incorporated( p_0 ))))) && !(((RogueProperty__is_incorporated( existing_p_3 ))))))
    {
      ROGUE_THROW(((RogueToken__error__String( p_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[366] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], p_0->name ))) ))), Rogue_literal_strings[367] ))) ))) ))));
    }
    else if (((void*)p_0->_type) == ((void*)existing_p_3->_type))
    {
      if (!!(p_0->initial_value))
      {
        if (!!(existing_p_3->initial_value))
        {
          if (((RogueType__instance_of__Type( p_0->_type, existing_p_3->_type ))))
          {
            if (((RogueType__is_aspect( p_0->type_context ))))
            {
              p_0 = ((RogueClassProperty*)((RogueProperty__set_type_context__Type( ((RogueProperty__clone( p_0 ))), THIS ))));
              RogueProperty__mark_incorporated( p_0 );
            }
            list_1->data->objects[i_4] = p_0;
            RogueString_PropertyTable__set__String_Property( lookup_2, p_0->name, p_0 );
          }
          else
          {
            ROGUE_THROW(((RogueToken__error__String( p_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[368] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], p_0->name ))) ))), Rogue_literal_strings[369] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(p_0->type_context)) ))) ))), Rogue_literal_strings[364] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(existing_p_3->type_context)) ))) ))), Rogue_literal_strings[51] ))) ))) ))));
          }
        }
        else
        {
          if (((RogueType__is_aspect( p_0->type_context ))))
          {
            p_0 = ((RogueClassProperty*)((RogueProperty__set_type_context__Type( ((RogueProperty__clone( p_0 ))), THIS ))));
            RogueProperty__mark_incorporated( p_0 );
          }
          list_1->data->objects[i_4] = p_0;
          RogueString_PropertyTable__set__String_Property( lookup_2, p_0->name, p_0 );
        }
      }
    }
    else
    {
      ROGUE_THROW(((RogueToken__error__String( p_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[370] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], p_0->name ))) ))), Rogue_literal_strings[371] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], p_0->name ))) ))), Rogue_literal_strings[178] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(p_0->_type)) ))) ))), Rogue_literal_strings[372] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(p_0->type_context)) ))) ))), Rogue_literal_strings[364] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], p_0->name ))) ))), Rogue_literal_strings[178] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(existing_p_3->_type)) ))) ))), Rogue_literal_strings[372] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(existing_p_3->type_context)) ))) ))), Rogue_literal_strings[51] ))) ))) ))));
    }
  }
  else
  {
    if (((RogueType__is_aspect( p_0->type_context ))))
    {
      p_0 = ((RogueClassProperty*)((RogueProperty__set_type_context__Type( ((RogueProperty__clone( p_0 ))), THIS ))));
      RogueProperty__mark_incorporated( p_0 );
    }
    RoguePropertyList__add__Property( list_1, p_0 );
    RogueString_PropertyTable__set__String_Property( lookup_2, p_0->name, p_0 );
  }
}

void RogueType__inherit_methods__MethodList_String_MethodTable( RogueClassType* THIS, RogueMethodList* list_0, RogueClassString_MethodTable* lookup_1 )
{
  {
    RogueTypeList* _auto_771_2 = (THIS->base_types);
    RogueInt32 _auto_772_3 = (0);
    for (;_auto_772_3 < _auto_771_2->count;++_auto_772_3)
    {
      RogueClassType* base_type_4 = (((RogueClassType*)(_auto_771_2->data->objects[_auto_772_3])));
      {
        RogueMethodList* _auto_773_5 = (base_type_4->method_list);
        RogueInt32 _auto_774_6 = (0);
        for (;_auto_774_6 < _auto_773_5->count;++_auto_774_6)
        {
          RogueClassMethod* base_m_7 = (((RogueClassMethod*)(_auto_773_5->data->objects[_auto_774_6])));
          RogueType__inherit_method__Method_MethodList_String_MethodTable( THIS, base_m_7, list_0, lookup_1 );
        }
      }
    }
  }
  {
    RogueMethodList* _auto_775_8 = (THIS->method_list);
    RogueInt32 _auto_776_9 = (0);
    for (;_auto_776_9 < _auto_775_8->count;++_auto_776_9)
    {
      RogueClassMethod* m_10 = (((RogueClassMethod*)(_auto_775_8->data->objects[_auto_776_9])));
      RogueType__inherit_method__Method_MethodList_String_MethodTable( THIS, m_10, list_0, lookup_1 );
    }
  }
}

void RogueType__inherit_method__Method_MethodList_String_MethodTable( RogueClassType* THIS, RogueClassMethod* m_0, RogueMethodList* list_1, RogueClassString_MethodTable* lookup_2 )
{
  RogueClassMethod* existing_m_3 = (((RogueString_MethodTable__get__String( lookup_2, m_0->signature ))));
  if (!!(existing_m_3))
  {
    RogueInt32 i_4 = (((RogueMethodList__locate__Method( list_1, existing_m_3 ))).value);
    if (!(((RogueMethod__is_incorporated( existing_m_3 )))))
    {
      if (((void*)m_0->type_context) == ((void*)existing_m_3->type_context))
      {
        if (((RogueMethod__is_augment( m_0 ))))
        {
          RogueType__apply_augment_labels__Method_Method( THIS, m_0, existing_m_3 );
          return;
        }
        else
        {
          ROGUE_THROW(((RogueToken__error__String( m_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[384] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(m_0->type_context)) ))) ))), Rogue_literal_strings[386] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], m_0->signature ))) ))), Rogue_literal_strings[51] ))) ))) ))));
        }
      }
      else if (((void*)m_0->_return_type) != ((void*)existing_m_3->_return_type))
      {
        if (((((void*)m_0->_return_type) == ((void*)NULL) || ((void*)existing_m_3->_return_type) == ((void*)NULL)) || !(((RogueType__instance_of__Type( m_0->_return_type, existing_m_3->_return_type ))))))
        {
          ROGUE_THROW(((RogueToken__error__String( m_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[387] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], m_0->type_context->name ))) ))), Rogue_literal_strings[68] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], m_0->signature ))) ))), Rogue_literal_strings[388] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(m_0->_return_type)) ))) ))), Rogue_literal_strings[389] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(existing_m_3->_return_type)) ))) ))), Rogue_literal_strings[390] ))) ))) ))));
        }
      }
    }
    if (((RogueType__is_aspect( m_0->type_context ))))
    {
      RogueMethodList__add__Method( m_0->overriding_methods, existing_m_3 );
      if (((RogueMethod__is_abstract( m_0 ))))
      {
        return;
      }
      m_0 = ((RogueClassMethod*)((RogueMethod__incorporate__Type( m_0, THIS ))));
    }
    else if (((RogueMethod__is_augment( m_0 ))))
    {
      RogueMethod__convert_augment_to_standalone( m_0 );
    }
    if (!(((RogueType__is_aspect( existing_m_3->type_context )))))
    {
      RogueAttributes__add__Int32( existing_m_3->attributes, 2048 );
      RogueAttributes__add__Int32( existing_m_3->attributes, 4096 );
      RogueAttributes__add__Int32( m_0->attributes, 2048 );
    }
    m_0->overridden_method = existing_m_3;
    while ((!!(m_0->overridden_method) && ((void*)m_0->type_context) == ((void*)m_0->overridden_method->type_context)))
    {
      if (!!(m_0->overridden_method->overridden_method))
      {
        RogueMethodList__remove__Method( m_0->overridden_method->overridden_method->overriding_methods, m_0->overridden_method );
      }
      m_0->overridden_method = m_0->overridden_method->overridden_method;
    }
    if (!!(m_0->overridden_method))
    {
      RogueMethodList__add__Method( m_0->overridden_method->overriding_methods, m_0 );
    }
    list_1->data->objects[i_4] = m_0;
    RogueString_MethodTable__set__String_Method( lookup_2, m_0->signature, m_0 );
  }
  else
  {
    if (((RogueType__is_aspect( m_0->type_context ))))
    {
      m_0 = ((RogueClassMethod*)((RogueMethod__incorporate__Type( m_0, THIS ))));
    }
    else if (((RogueMethod__is_augment( m_0 ))))
    {
      RogueMethod__convert_augment_to_standalone( m_0 );
    }
    RogueMethodList__add__Method( list_1, m_0 );
    RogueString_MethodTable__set__String_Method( lookup_2, m_0->signature, m_0 );
  }
}

void RogueType__inherit_routines__MethodList_String_MethodTable( RogueClassType* THIS, RogueMethodList* list_0, RogueClassString_MethodTable* lookup_1 )
{
  {
    RogueTypeList* _auto_777_2 = (THIS->base_types);
    RogueInt32 _auto_778_3 = (0);
    for (;_auto_778_3 < _auto_777_2->count;++_auto_778_3)
    {
      RogueClassType* base_type_4 = (((RogueClassType*)(_auto_777_2->data->objects[_auto_778_3])));
      {
        RogueMethodList* _auto_779_5 = (base_type_4->global_method_list);
        RogueInt32 _auto_780_6 = (0);
        for (;_auto_780_6 < _auto_779_5->count;++_auto_780_6)
        {
          RogueClassMethod* base_m_7 = (((RogueClassMethod*)(_auto_779_5->data->objects[_auto_780_6])));
          RogueType__inherit_routine__Method_MethodList_String_MethodTable( THIS, base_m_7, list_0, lookup_1 );
        }
      }
    }
  }
  {
    RogueMethodList* _auto_781_8 = (THIS->global_method_list);
    RogueInt32 _auto_782_9 = (0);
    for (;_auto_782_9 < _auto_781_8->count;++_auto_782_9)
    {
      RogueClassMethod* m_10 = (((RogueClassMethod*)(_auto_781_8->data->objects[_auto_782_9])));
      RogueType__inherit_routine__Method_MethodList_String_MethodTable( THIS, m_10, list_0, lookup_1 );
    }
  }
}

void RogueType__inherit_routine__Method_MethodList_String_MethodTable( RogueClassType* THIS, RogueClassMethod* m_0, RogueMethodList* list_1, RogueClassString_MethodTable* lookup_2 )
{
  RogueClassMethod* existing_m_3 = (((RogueString_MethodTable__get__String( lookup_2, m_0->signature ))));
  if (!!(existing_m_3))
  {
    if (((void*)m_0->type_context) == ((void*)existing_m_3->type_context))
    {
      if (((RogueMethod__is_augment( m_0 ))))
      {
        RogueType__apply_augment_labels__Method_Method( THIS, m_0, existing_m_3 );
        return;
      }
      else
      {
        ROGUE_THROW(((RogueToken__error__String( m_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[384] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(m_0->type_context)) ))) ))), Rogue_literal_strings[385] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], m_0->signature ))) ))), Rogue_literal_strings[51] ))) ))) ))));
      }
    }
    RogueInt32 i_4 = (((RogueMethodList__locate__Method( list_1, existing_m_3 ))).value);
    if (((RogueType__is_aspect( m_0->type_context ))))
    {
      return;
    }
    if (((RogueMethod__is_augment( m_0 ))))
    {
      RogueMethod__convert_augment_to_standalone( m_0 );
    }
    list_1->data->objects[i_4] = m_0;
    RogueString_MethodTable__set__String_Method( lookup_2, m_0->signature, m_0 );
  }
  else
  {
    if (((RogueType__is_aspect( m_0->type_context ))))
    {
      return;
    }
    if (((RogueMethod__is_augment( m_0 ))))
    {
      RogueMethod__convert_augment_to_standalone( m_0 );
    }
    RogueMethodList__add__Method( list_1, m_0 );
    RogueString_MethodTable__set__String_Method( lookup_2, m_0->signature, m_0 );
  }
}

void RogueType__apply_augment_labels__Method_Method( RogueClassType* THIS, RogueClassMethod* aug_m_0, RogueClassMethod* existing_m_1 )
{
  {
    RogueCmdLabelList* _auto_783_3 = (existing_m_1->label_list);
    RogueInt32 _auto_784_4 = (0);
    for (;_auto_784_4 < _auto_783_3->count;++_auto_784_4)
    {
      RogueClassCmdLabel* method_label_5 = (((RogueClassCmdLabel*)(_auto_783_3->data->objects[_auto_784_4])));
      RogueClassCmdLabel* aug_label_2 = (((RogueString_CmdLabelTable__get__String( aug_m_0->label_lookup, method_label_5->name ))));
      if (!!(aug_label_2))
      {
        RogueCmdList__add__CmdList( ((RogueCmdList*)method_label_5->statements), ((RogueCmdList*)(aug_label_2->statements)) );
        aug_label_2->is_referenced = true;
      }
    }
  }
  {
    RogueCmdLabelList* _auto_785_6 = (aug_m_0->label_list);
    RogueInt32 _auto_786_7 = (0);
    for (;_auto_786_7 < _auto_785_6->count;++_auto_786_7)
    {
      RogueClassCmdLabel* label_8 = (((RogueClassCmdLabel*)(_auto_785_6->data->objects[_auto_786_7])));
      if (!(label_8->is_referenced))
      {
        ROGUE_THROW(((RogueToken__error__String( label_8->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[382] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], label_8->name ))) ))), Rogue_literal_strings[383] ))) ))) ))));
      }
    }
  }
}

void RogueType__index_and_move_inline_to_end__MethodList( RogueClassType* THIS, RogueMethodList* list_0 )
{
  RogueInt32 i_1 = ((list_0->count - 1));
  while (i_1 >= 0)
  {
    RogueClassMethod* m_2 = (((RogueClassMethod*)(list_0->data->objects[i_1])));
    if (((RogueMethod__is_macro( m_2 ))))
    {
      RogueMethodList__remove__Method( list_0, m_2 );
      RogueMethodList__add__Method( list_0, m_2 );
    }
    --i_1;
  }
  i_1 = ((RogueInt32)0);
  {
    RogueMethodList* _auto_787_3 = (list_0);
    RogueInt32 _auto_788_4 = (0);
    for (;_auto_788_4 < _auto_787_3->count;++_auto_788_4)
    {
      RogueClassMethod* m_5 = (((RogueClassMethod*)(_auto_787_3->data->objects[_auto_788_4])));
      m_5->index = i_1;
      ++i_1;
    }
  }
}

RogueLogical RogueType__omit_output( RogueClassType* THIS )
{
  return (RogueLogical)(((((RogueType__is_native( THIS ))) || !(THIS->is_used)) || (THIS->is_optional && ((RogueType__is_reference( THIS->_element_type ))))));
}

RogueClassType* RogueType__resolve( RogueClassType* THIS )
{
  if (THIS->resolved)
  {
    return (RogueClassType*)(THIS);
  }
  THIS->resolved = true;
  RogueType__organize__Scope( THIS, ((RogueClassScope*)(NULL)) );
  if (!!(THIS->_element_type))
  {
    RogueType__organize__Scope( THIS->_element_type, ((RogueClassScope*)(NULL)) );
  }
  {
    RoguePropertyList* _auto_789_0 = (THIS->global_list);
    RogueInt32 _auto_790_1 = (0);
    for (;_auto_790_1 < _auto_789_0->count;++_auto_790_1)
    {
      RogueClassProperty* s_2 = (((RogueClassProperty*)(_auto_789_0->data->objects[_auto_790_1])));
      RogueType__organize__Scope( s_2->_type, ((RogueClassScope*)(NULL)) );
    }
  }
  {
    RoguePropertyList* _auto_791_3 = (THIS->property_list);
    RogueInt32 _auto_792_4 = (0);
    for (;_auto_792_4 < _auto_791_3->count;++_auto_792_4)
    {
      RogueClassProperty* p_5 = (((RogueClassProperty*)(_auto_791_3->data->objects[_auto_792_4])));
      RogueType__organize__Scope( p_5->_type, ((RogueClassScope*)(NULL)) );
    }
  }
  {
    RogueMethodList* _auto_793_6 = (THIS->global_method_list);
    RogueInt32 _auto_794_7 = (0);
    for (;_auto_794_7 < _auto_793_6->count;++_auto_794_7)
    {
      RogueClassMethod* r_8 = (((RogueClassMethod*)(_auto_793_6->data->objects[_auto_794_7])));
      RogueMethod__resolve( r_8 );
    }
  }
  {
    RogueMethodList* _auto_795_9 = (THIS->method_list);
    RogueInt32 _auto_796_10 = (0);
    for (;_auto_796_10 < _auto_795_9->count;++_auto_796_10)
    {
      RogueClassMethod* m_11 = (((RogueClassMethod*)(_auto_795_9->data->objects[_auto_796_10])));
      RogueMethod__resolve( m_11 );
    }
  }
  return (RogueClassType*)(THIS);
}

RogueLogical RogueType__should_cull( RogueClassType* THIS )
{
  return (RogueLogical)((!(THIS->is_used) || (THIS->is_optional && ((RogueType__is_reference( THIS->_element_type ))))));
}

void RogueType__trace_used_code( RogueClassType* THIS )
{
  if (THIS->is_used)
  {
    return;
  }
  THIS->is_used = true;
  if (((RogueType__is_singleton( THIS ))))
  {
    RogueClassMethod* m_0 = (((RogueType__find_method__String( THIS, Rogue_literal_strings[422] ))));
    if (!!(m_0))
    {
      RogueAttributes__add__Int32( m_0->attributes, 32768 );
    }
  }
  if (!!(THIS->_element_type))
  {
    RogueType__trace_used_code( THIS->_element_type );
  }
  {
    RogueTypeList* _auto_797_1 = (THIS->base_types);
    RogueInt32 _auto_798_2 = (0);
    for (;_auto_798_2 < _auto_797_1->count;++_auto_798_2)
    {
      RogueClassType* base_type_3 = (((RogueClassType*)(_auto_797_1->data->objects[_auto_798_2])));
      RogueType__trace_used_code( base_type_3 );
    }
  }
  {
    RoguePropertyList* _auto_799_4 = (THIS->global_list);
    RogueInt32 _auto_800_5 = (0);
    for (;_auto_800_5 < _auto_799_4->count;++_auto_800_5)
    {
      RogueClassProperty* s_6 = (((RogueClassProperty*)(_auto_799_4->data->objects[_auto_800_5])));
      RogueType__trace_used_code( s_6->_type );
    }
  }
  {
    RoguePropertyList* _auto_801_7 = (THIS->property_list);
    RogueInt32 _auto_802_8 = (0);
    for (;_auto_802_8 < _auto_801_7->count;++_auto_802_8)
    {
      RogueClassProperty* p_9 = (((RogueClassProperty*)(_auto_801_7->data->objects[_auto_802_8])));
      RogueType__trace_used_code( p_9->_type );
    }
  }
  {
    RogueMethodList* _auto_803_10 = (THIS->global_method_list);
    RogueInt32 _auto_804_11 = (0);
    for (;_auto_804_11 < _auto_803_10->count;++_auto_804_11)
    {
      RogueClassMethod* r_12 = (((RogueClassMethod*)(_auto_803_10->data->objects[_auto_804_11])));
      if (((RogueMethod__is_requisite( r_12 ))))
      {
        RogueMethod__trace_used_code( r_12 );
      }
    }
  }
  {
    RogueMethodList* _auto_805_13 = (THIS->method_list);
    RogueInt32 _auto_806_14 = (0);
    for (;_auto_806_14 < _auto_805_13->count;++_auto_806_14)
    {
      RogueClassMethod* m_15 = (((RogueClassMethod*)(_auto_805_13->data->objects[_auto_806_14])));
      if (((RogueMethod__is_requisite( m_15 ))))
      {
        RogueMethod__trace_used_code( m_15 );
      }
    }
  }
}

void RogueType__assign_cpp_name( RogueClassType* THIS )
{
  THIS->cpp_name = ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->name )));
  if ((THIS->is_array || ((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_NativeArray)))
  {
    THIS->cpp_class_name = Rogue_literal_strings[444];
    THIS->cpp_name = Rogue_literal_strings[445];
  }
  else if ((((RogueType__is_primitive( THIS ))) || THIS->simplify_name))
  {
    THIS->cpp_class_name = ((RogueString__operatorPLUS__String( Rogue_literal_strings[28], THIS->cpp_name )));
  }
  else if (THIS->is_list)
  {
    THIS->cpp_class_name = ((RogueString__operatorPLUS__String( Rogue_literal_strings[28], THIS->cpp_name )));
  }
  else if ((THIS->is_optional && ((RogueType__is_primitive( THIS->_element_type )))))
  {
    THIS->cpp_name = ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ((RogueString__operatorPLUS__String( Rogue_literal_strings[320], THIS->_element_type->name ))) )));
    THIS->cpp_class_name = ((RogueString__operatorPLUS__String( Rogue_literal_strings[28], THIS->cpp_name )));
  }
  else
  {
    THIS->cpp_class_name = ((RogueString__operatorPLUS__String( Rogue_literal_strings[446], THIS->cpp_name )));
  }
  THIS->cpp_type_name = ((RogueString__operatorPLUS__String( Rogue_literal_strings[447], THIS->cpp_name )));
  {
    RoguePropertyList* _auto_807_0 = (THIS->global_list);
    RogueInt32 _auto_808_1 = (0);
    for (;_auto_808_1 < _auto_807_0->count;++_auto_808_1)
    {
      RogueClassProperty* s_2 = (((RogueClassProperty*)(_auto_807_0->data->objects[_auto_808_1])));
      s_2->cpp_name = ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), s_2->name )));
    }
  }
  {
    RoguePropertyList* _auto_809_3 = (THIS->property_list);
    RogueInt32 _auto_810_4 = (0);
    for (;_auto_810_4 < _auto_809_3->count;++_auto_810_4)
    {
      RogueClassProperty* p_5 = (((RogueClassProperty*)(_auto_809_3->data->objects[_auto_810_4])));
      p_5->cpp_name = ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), p_5->name )));
    }
  }
}

void RogueType__print_data_definition__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  if ((((RogueType__omit_output( THIS ))) || ((RogueType__is_primitive( THIS )))))
  {
    return;
  }
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[452] ))), THIS->cpp_class_name );
  RogueLogical is_error_1 = (false);
  if (((RogueType__is_class( THIS ))))
  {
    if (((RogueType__instance_of__Type( THIS, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Exception ))))
    {
      is_error_1 = ((RogueLogical)true);
      RogueCPPWriter__print_type_name__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[453] ))), THIS->base_class );
    }
    else
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[455] );
    }
  }
  RogueCPPWriter__println__String( ((RogueCPPWriter__println( writer_0 ))), Rogue_literal_strings[196] );
  writer_0->indent += 2;
  if (!!(THIS->global_list->count))
  {
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[456] );
    {
      RoguePropertyList* _auto_811_3 = (THIS->global_list);
      RogueInt32 _auto_812_4 = (0);
      for (;_auto_812_4 < _auto_811_3->count;++_auto_812_4)
      {
        RogueClassProperty* s_5 = (((RogueClassProperty*)(_auto_811_3->data->objects[_auto_812_4])));
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[457] ))), s_5->_type ))), Rogue_literal_strings[458] ))), s_5->cpp_name ))), Rogue_literal_strings[205] );
      }
    }
    RogueCPPWriter__println( writer_0 );
  }
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[459] );
  if (!!(THIS->native_properties))
  {
    {
      RogueNativePropertyList* _auto_813_6 = (THIS->native_properties);
      RogueInt32 _auto_814_7 = (0);
      for (;_auto_814_7 < _auto_813_6->count;++_auto_814_7)
      {
        RogueClassNativeProperty* p_8 = (((RogueClassNativeProperty*)(_auto_813_6->data->objects[_auto_814_7])));
        RogueCPPWriter__print_native_code__Token_Type_Method_String( writer_0, p_8->t, THIS, ((RogueClassMethod*)(NULL)), p_8->code );
      }
    }
  }
  {
    RoguePropertyList* _auto_815_9 = (THIS->property_list);
    RogueInt32 _auto_816_10 = (0);
    for (;_auto_816_10 < _auto_815_9->count;++_auto_816_10)
    {
      RogueClassProperty* p_11 = (((RogueClassProperty*)(_auto_815_9->data->objects[_auto_816_10])));
      if ((!(is_error_1) || ((void*)p_11->type_context) == ((void*)THIS)))
      {
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, p_11->_type ))), Rogue_literal_strings[458] ))), p_11->cpp_name ))), Rogue_literal_strings[205] );
      }
    }
  }
  RogueCPPWriter__println( writer_0 );
  if (((RogueType__is_compound( THIS ))))
  {
    if (!!(THIS->property_list->count))
    {
      RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, THIS ))), Rogue_literal_strings[468] );
      RogueLogical first_2 = (true);
      {
        RoguePropertyList* _auto_817_12 = (THIS->property_list);
        RogueInt32 _auto_818_13 = (0);
        for (;_auto_818_13 < _auto_817_12->count;++_auto_818_13)
        {
          RogueClassProperty* p_14 = (((RogueClassProperty*)(_auto_817_12->data->objects[_auto_818_13])));
          if (first_2)
          {
            first_2 = ((RogueLogical)false);
          }
          else
          {
            RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[469] );
          }
          RogueCPPWriter__print__String( ((RogueCPPWriter__print_default_value__Type( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, p_14->cpp_name ))), Rogue_literal_strings[66] ))), p_14->_type ))), Rogue_literal_strings[67] );
        }
      }
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[472] );
      RogueCPPWriter__println( writer_0 );
      if (THIS->is_optional)
      {
        RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, THIS ))), Rogue_literal_strings[473] ))), ((RogueClassProperty*)(THIS->property_list->data->objects[0]))->_type );
        RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[474] );
      }
      else
      {
        RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, THIS ))), Rogue_literal_strings[473] );
        first_2 = ((RogueLogical)true);
        {
          RoguePropertyList* _auto_819_15 = (THIS->property_list);
          RogueInt32 _auto_820_16 = (0);
          for (;_auto_820_16 < _auto_819_15->count;++_auto_820_16)
          {
            RogueClassProperty* p_17 = (((RogueClassProperty*)(_auto_819_15->data->objects[_auto_820_16])));
            if (first_2)
            {
              first_2 = ((RogueLogical)false);
            }
            else
            {
              RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[469] );
            }
            RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, p_17->_type ))), Rogue_literal_strings[458] ))), p_17->cpp_name );
          }
        }
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[475] );
        first_2 = ((RogueLogical)true);
        {
          RoguePropertyList* _auto_821_18 = (THIS->property_list);
          RogueInt32 _auto_822_19 = (0);
          for (;_auto_822_19 < _auto_821_18->count;++_auto_822_19)
          {
            RogueClassProperty* p_20 = (((RogueClassProperty*)(_auto_821_18->data->objects[_auto_822_19])));
            if (first_2)
            {
              first_2 = ((RogueLogical)false);
            }
            else
            {
              RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[469] );
            }
            RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, p_20->cpp_name ))), Rogue_literal_strings[66] ))), p_20->cpp_name ))), Rogue_literal_strings[67] );
          }
        }
        RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[472] );
        RogueCPPWriter__println( writer_0 );
      }
    }
    RogueCPPWriter__println__String( ((RogueCPPWriter__print_type_name__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[476] ))), THIS ))), Rogue_literal_strings[477] );
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[196] );
    if (THIS->is_optional)
    {
      writer_0->indent += 2;
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[478] );
      writer_0->indent -= 2;
    }
    else
    {
      {
        RoguePropertyList* _auto_823_21 = (THIS->property_list);
        RogueInt32 _auto_824_22 = (0);
        for (;_auto_824_22 < _auto_823_21->count;++_auto_824_22)
        {
          RogueClassProperty* p_23 = (((RogueClassProperty*)(_auto_823_21->data->objects[_auto_824_22])));
          RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[479] ))), p_23->cpp_name ))), Rogue_literal_strings[480] ))), p_23->cpp_name ))), Rogue_literal_strings[481] );
        }
      }
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[482] );
    }
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[114] );
    RogueCPPWriter__println( writer_0 );
    RogueCPPWriter__println__String( ((RogueCPPWriter__print_type_name__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[483] ))), THIS ))), Rogue_literal_strings[477] );
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[484] );
  }
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[485] );
}

void RogueType__print_global_method_prototypes__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  {
    RogueMethodList* _auto_825_1 = (THIS->global_method_list);
    RogueInt32 _auto_826_2 = (0);
    for (;_auto_826_2 < _auto_825_1->count;++_auto_826_2)
    {
      RogueClassMethod* m_3 = (((RogueClassMethod*)(_auto_825_1->data->objects[_auto_826_2])));
      if (((void*)m_3->type_context) == ((void*)THIS))
      {
        RogueMethod__print_prototype__CPPWriter( m_3, writer_0 );
      }
    }
  }
}

void RogueType__print_global_method_definitions__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  {
    RogueMethodList* _auto_827_1 = (THIS->global_method_list);
    RogueInt32 _auto_828_2 = (0);
    for (;_auto_828_2 < _auto_827_1->count;++_auto_828_2)
    {
      RogueClassMethod* m_3 = (((RogueClassMethod*)(_auto_827_1->data->objects[_auto_828_2])));
      if (((void*)m_3->type_context) == ((void*)THIS))
      {
        RogueCPPWriter__mark_routine_start__Method( writer_0, m_3 );
        RogueMethod__print_definition__CPPWriter( m_3, writer_0 );
        RogueCPPWriter__mark_routine_end( writer_0 );
      }
    }
  }
}

void RogueType__print_method_prototypes__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  {
    RogueMethodList* _auto_829_1 = (THIS->method_list);
    RogueInt32 _auto_830_2 = (0);
    for (;_auto_830_2 < _auto_829_1->count;++_auto_830_2)
    {
      RogueClassMethod* m_3 = (((RogueClassMethod*)(_auto_829_1->data->objects[_auto_830_2])));
      if (((void*)m_3->type_context) == ((void*)THIS))
      {
        RogueMethod__print_prototype__CPPWriter( m_3, writer_0 );
      }
    }
  }
}

void RogueType__determine_cpp_method_typedefs__StringList_String_MethodTable( RogueClassType* THIS, RogueStringList* list_0, RogueClassString_MethodTable* lookup_1 )
{
  RogueStringBuilder* buffer_2 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  {
    RogueMethodList* _auto_831_6 = (THIS->method_list);
    RogueInt32 _auto_832_7 = (0);
    for (;_auto_832_7 < _auto_831_6->count;++_auto_832_7)
    {
      RogueClassMethod* m_8 = (((RogueClassMethod*)(_auto_831_6->data->objects[_auto_832_7])));
      if (((!(((RogueMethod__is_macro( m_8 )))) && ((RogueMethod__is_dynamic( m_8 )))) && m_8->is_used))
      {
        RogueStringBuilder__clear( buffer_2 );
        if (!!(m_8->_return_type))
        {
          RogueStringBuilder__print__String( buffer_2, m_8->_return_type->cpp_class_name );
          if (((RogueType__is_reference( m_8->_return_type ))))
          {
            RogueStringBuilder__print__Character( buffer_2, (RogueCharacter)'*' );
          }
        }
        else
        {
          RogueStringBuilder__print__String( buffer_2, Rogue_literal_strings[454] );
        }
        RogueStringBuilder__print__String( buffer_2, Rogue_literal_strings[495] );
        RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( buffer_2, m_8->type_context->cpp_class_name ))), Rogue_literal_strings[212] );
        {
          RogueLocalList* _auto_833_9 = (m_8->parameters);
          RogueInt32 i_10 = (0);
          for (;i_10 < _auto_833_9->count;++i_10)
          {
            RogueStringBuilder__print__Character( buffer_2, (RogueCharacter)',' );
            RogueClassType* param_type_3 = (((RogueClassLocal*)(m_8->parameters->data->objects[i_10]))->_type);
            RogueStringBuilder__print__String( buffer_2, param_type_3->cpp_class_name );
            if (((RogueType__is_reference( param_type_3 ))))
            {
              RogueStringBuilder__print__Character( buffer_2, (RogueCharacter)'*' );
            }
          }
        }
        RogueStringBuilder__print__String( buffer_2, Rogue_literal_strings[67] );
        RogueString* sig_4 = (((RogueStringBuilder__to_String( buffer_2 ))));
        RogueClassMethod* mapping_5 = (((RogueString_MethodTable__get__String( lookup_1, sig_4 ))));
        if (!!(mapping_5))
        {
          m_8->cpp_typedef = mapping_5->cpp_typedef;
          if ((!(mapping_5->called_dynamically) && m_8->called_dynamically))
          {
            RogueString_MethodTable__set__String_Method( lookup_1, sig_4, m_8 );
          }
        }
        else
        {
          m_8->cpp_typedef = ((RogueString__operatorPLUS__Int32( Rogue_literal_strings[496], list_0->count )));
          RogueString_MethodTable__set__String_Method( lookup_1, sig_4, m_8 );
          RogueStringList__add__String( list_0, sig_4 );
        }
      }
    }
  }
}

RogueInt32 RogueType__print_dynamic_method_table_entries__Int32_CPPWriter( RogueClassType* THIS, RogueInt32 at_index_0, RogueClassCPPWriter* writer_1 )
{
  if (!(((RogueType__is_reference( THIS )))))
  {
    return (RogueInt32)(at_index_0);
  }
  THIS->dynamic_method_table_index = at_index_0;
  RogueInt32 i2_2 = ((THIS->method_list->count - 1));
  while (i2_2 > 0)
  {
    RogueClassMethod* m_3 = (((RogueClassMethod*)(THIS->method_list->data->objects[i2_2])));
    if (((!(((RogueMethod__is_macro( m_3 )))) && ((RogueMethod__is_dynamic( m_3 )))) && m_3->is_used))
    {
      goto _auto_834;
    }
    --i2_2;
  }
  _auto_834:;
  RogueLogical print_type_name_4 = (true);
  {
    RogueInt32 i_5 = (0);
    RogueInt32 _auto_126_6 = (i2_2);
    for (;i_5 <= _auto_126_6;++i_5)
    {
      RogueClassMethod* m_7 = (((RogueClassMethod*)(THIS->method_list->data->objects[i_5])));
      if (!(((RogueMethod__is_macro( m_7 )))))
      {
        if ((((RogueMethod__is_dynamic( m_7 ))) && m_7->is_used))
        {
          RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[546] ))), m_7->cpp_typedef ))), Rogue_literal_strings[547] ))), m_7->cpp_name ))), Rogue_literal_strings[179] );
        }
        else
        {
          RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[548] );
        }
        if (print_type_name_4)
        {
          print_type_name_4 = ((RogueLogical)false);
          RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[549] ))), THIS->name );
        }
        RogueCPPWriter__println( writer_1 );
        ++at_index_0;
      }
    }
  }
  return (RogueInt32)(at_index_0);
}

void RogueType__print_method_definitions__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  {
    RogueMethodList* _auto_835_1 = (THIS->method_list);
    RogueInt32 _auto_836_2 = (0);
    for (;_auto_836_2 < _auto_835_1->count;++_auto_836_2)
    {
      RogueClassMethod* m_3 = (((RogueClassMethod*)(_auto_835_1->data->objects[_auto_836_2])));
      if (((void*)m_3->type_context) == ((void*)THIS))
      {
        RogueCPPWriter__mark_method_start__Type_Method( writer_0, THIS, m_3 );
        RogueMethod__print_definition__CPPWriter( m_3, writer_0 );
        RogueCPPWriter__mark_method_end( writer_0 );
      }
    }
  }
}

RogueClassType* RogueType__init_object( RogueClassType* THIS )
{
  THIS->attributes = ((RogueClassAttributes*)ROGUE_CREATE_OBJECT(Attributes));
  THIS->index = -1;
  THIS->base_types = ((RogueTypeList__init( ((RogueTypeList*)ROGUE_CREATE_OBJECT(TypeList)) )));
  THIS->flat_base_types = ((RogueTypeList__init( ((RogueTypeList*)ROGUE_CREATE_OBJECT(TypeList)) )));
  THIS->definition_list = ((RogueDefinitionList__init( ((RogueDefinitionList*)ROGUE_CREATE_OBJECT(DefinitionList)) )));
  THIS->definition_lookup = ((RogueString_DefinitionTable__init( ((RogueClassString_DefinitionTable*)ROGUE_CREATE_OBJECT(String_DefinitionTable)) )));
  THIS->next_enum_offset = 0;
  THIS->global_list = ((RoguePropertyList__init( ((RoguePropertyList*)ROGUE_CREATE_OBJECT(PropertyList)) )));
  THIS->global_lookup = ((RogueString_PropertyTable__init( ((RogueClassString_PropertyTable*)ROGUE_CREATE_OBJECT(String_PropertyTable)) )));
  THIS->property_list = ((RoguePropertyList__init( ((RoguePropertyList*)ROGUE_CREATE_OBJECT(PropertyList)) )));
  THIS->property_lookup = ((RogueString_PropertyTable__init( ((RogueClassString_PropertyTable*)ROGUE_CREATE_OBJECT(String_PropertyTable)) )));
  THIS->global_method_list = ((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) )));
  THIS->routine_lookup_by_name = ((RogueString_MethodListTable__init( ((RogueClassString_MethodListTable*)ROGUE_CREATE_OBJECT(String_MethodListTable)) )));
  THIS->routine_lookup_by_signature = ((RogueString_MethodTable__init( ((RogueClassString_MethodTable*)ROGUE_CREATE_OBJECT(String_MethodTable)) )));
  THIS->method_list = ((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) )));
  THIS->method_lookup_by_name = ((RogueString_MethodListTable__init( ((RogueClassString_MethodListTable*)ROGUE_CREATE_OBJECT(String_MethodListTable)) )));
  THIS->method_lookup_by_signature = ((RogueString_MethodTable__init( ((RogueClassString_MethodTable*)ROGUE_CREATE_OBJECT(String_MethodTable)) )));
  return (RogueClassType*)(THIS);
}

RogueString* RogueString_TypeTable__to_String( RogueClassString_TypeTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_TypeTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_TypeTable__type_name( RogueClassString_TypeTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[616]);
}

RogueClassString_TypeTable* RogueString_TypeTable__init( RogueClassString_TypeTable* THIS )
{
  RogueString_TypeTable__init__Int32( THIS, 16 );
  return (RogueClassString_TypeTable*)(THIS);
}

RogueClassString_TypeTable* RogueString_TypeTable__init__Int32( RogueClassString_TypeTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_TypeTableEntryList__init__Int32_String_TypeTableEntry( ((RogueTableEntry_of_String_TypeList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_TypeList)), bin_count_0, ((RogueClassString_TypeTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_TypeTable*)(THIS);
}

RogueClassString_TypeTableEntry* RogueString_TypeTable__find__String( RogueClassString_TypeTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  RogueClassString_TypeTableEntry* entry_2 = (((RogueClassString_TypeTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( entry_2->key, key_0 )))))
    {
      return (RogueClassString_TypeTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_TypeTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_TypeTableEntry*)(((RogueClassString_TypeTableEntry*)(NULL)));
}

RogueClassType* RogueString_TypeTable__get__String( RogueClassString_TypeTable* THIS, RogueString* key_0 )
{
  RogueClassString_TypeTableEntry* entry_1 = (((RogueString_TypeTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassType*)(entry_1->value);
  }
  else
  {
    RogueClassType* default_value_2 = 0;
    return (RogueClassType*)(default_value_2);
  }
}

RogueClassString_TypeTable* RogueString_TypeTable__set__String_Type( RogueClassString_TypeTable* THIS, RogueString* key_0, RogueClassType* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_TypeTableEntry* entry_4 = (((RogueClassString_TypeTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( entry_4->key, key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_TypeTable*)(THIS);
    }
    entry_4 = ((RogueClassString_TypeTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_TypeTableEntry*)((RogueString_TypeTableEntry__init__String_Type_Int32( ((RogueClassString_TypeTableEntry*)ROGUE_CREATE_OBJECT(String_TypeTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_TypeTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
  return (RogueClassString_TypeTable*)(THIS);
}

RogueStringBuilder* RogueString_TypeTable__print_to__StringBuilder( RogueClassString_TypeTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_TypeTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_TypeTable* RogueString_TypeTable__init_object( RogueClassString_TypeTable* THIS )
{
  return (RogueClassString_TypeTable*)(THIS);
}

RogueString* RogueString_Int32Table__to_String( RogueClassString_Int32Table* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_Int32Table__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_Int32Table__type_name( RogueClassString_Int32Table* THIS )
{
  return (RogueString*)(Rogue_literal_strings[617]);
}

RogueClassString_Int32Table* RogueString_Int32Table__init( RogueClassString_Int32Table* THIS )
{
  RogueString_Int32Table__init__Int32( THIS, 16 );
  return (RogueClassString_Int32Table*)(THIS);
}

RogueClassString_Int32Table* RogueString_Int32Table__init__Int32( RogueClassString_Int32Table* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_Int32TableEntryList__init__Int32_String_Int32TableEntry( ((RogueTableEntry_of_String_Int32List*)ROGUE_CREATE_OBJECT(TableEntry_of_String_Int32List)), bin_count_0, ((RogueClassString_Int32TableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_Int32Table*)(THIS);
}

RogueClassString_Int32TableEntry* RogueString_Int32Table__find__String( RogueClassString_Int32Table* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  RogueClassString_Int32TableEntry* entry_2 = (((RogueClassString_Int32TableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( entry_2->key, key_0 )))))
    {
      return (RogueClassString_Int32TableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_Int32TableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_Int32TableEntry*)(((RogueClassString_Int32TableEntry*)(NULL)));
}

RogueInt32 RogueString_Int32Table__get__String( RogueClassString_Int32Table* THIS, RogueString* key_0 )
{
  RogueClassString_Int32TableEntry* entry_1 = (((RogueString_Int32Table__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueInt32)(entry_1->value);
  }
  else
  {
    RogueInt32 default_value_2 = 0;
    return (RogueInt32)(default_value_2);
  }
}

RogueClassString_Int32Table* RogueString_Int32Table__set__String_Int32( RogueClassString_Int32Table* THIS, RogueString* key_0, RogueInt32 value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_Int32TableEntry* entry_4 = (((RogueClassString_Int32TableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( entry_4->key, key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_Int32Table*)(THIS);
    }
    entry_4 = ((RogueClassString_Int32TableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_Int32TableEntry*)((RogueString_Int32TableEntry__init__String_Int32_Int32( ((RogueClassString_Int32TableEntry*)ROGUE_CREATE_OBJECT(String_Int32TableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_Int32TableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
  return (RogueClassString_Int32Table*)(THIS);
}

RogueStringBuilder* RogueString_Int32Table__print_to__StringBuilder( RogueClassString_Int32Table* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Int32( buffer_0, ((RogueString_Int32Table__get__String( THIS, key_2 ))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_Int32Table* RogueString_Int32Table__init_object( RogueClassString_Int32Table* THIS )
{
  return (RogueClassString_Int32Table*)(THIS);
}

RogueString* RogueString_StringListTable__to_String( RogueClassString_StringListTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_StringListTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_StringListTable__type_name( RogueClassString_StringListTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[618]);
}

RogueClassString_StringListTable* RogueString_StringListTable__init( RogueClassString_StringListTable* THIS )
{
  RogueString_StringListTable__init__Int32( THIS, 16 );
  return (RogueClassString_StringListTable*)(THIS);
}

RogueClassString_StringListTable* RogueString_StringListTable__init__Int32( RogueClassString_StringListTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_StringListTableEntryList__init__Int32_String_StringListTableEntry( ((RogueTableEntry_of_String_StringListList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_StringListList)), bin_count_0, ((RogueClassString_StringListTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_StringListTable*)(THIS);
}

RogueClassString_StringListTableEntry* RogueString_StringListTable__find__String( RogueClassString_StringListTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  RogueClassString_StringListTableEntry* entry_2 = (((RogueClassString_StringListTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( entry_2->key, key_0 )))))
    {
      return (RogueClassString_StringListTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_StringListTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_StringListTableEntry*)(((RogueClassString_StringListTableEntry*)(NULL)));
}

RogueStringList* RogueString_StringListTable__get__String( RogueClassString_StringListTable* THIS, RogueString* key_0 )
{
  RogueClassString_StringListTableEntry* entry_1 = (((RogueString_StringListTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueStringList*)(entry_1->value);
  }
  else
  {
    RogueStringList* default_value_2 = 0;
    return (RogueStringList*)(default_value_2);
  }
}

RogueClassString_StringListTable* RogueString_StringListTable__set__String_StringList( RogueClassString_StringListTable* THIS, RogueString* key_0, RogueStringList* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_StringListTableEntry* entry_4 = (((RogueClassString_StringListTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( entry_4->key, key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_StringListTable*)(THIS);
    }
    entry_4 = ((RogueClassString_StringListTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_StringListTableEntry*)((RogueString_StringListTableEntry__init__String_StringList_Int32( ((RogueClassString_StringListTableEntry*)ROGUE_CREATE_OBJECT(String_StringListTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_StringListTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
  return (RogueClassString_StringListTable*)(THIS);
}

RogueStringBuilder* RogueString_StringListTable__print_to__StringBuilder( RogueClassString_StringListTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_StringListTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_StringListTable* RogueString_StringListTable__init_object( RogueClassString_StringListTable* THIS )
{
  return (RogueClassString_StringListTable*)(THIS);
}

RogueString* RogueString_Int32TableEntry__type_name( RogueClassString_Int32TableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[619]);
}

RogueClassString_Int32TableEntry* RogueString_Int32TableEntry__init__String_Int32_Int32( RogueClassString_Int32TableEntry* THIS, RogueString* _key_0, RogueInt32 _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_Int32TableEntry*)(THIS);
}

RogueClassString_Int32TableEntry* RogueString_Int32TableEntry__init_object( RogueClassString_Int32TableEntry* THIS )
{
  return (RogueClassString_Int32TableEntry*)(THIS);
}

RogueString* RogueInt32_TemplateTable__to_String( RogueClassInt32_TemplateTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueInt32_TemplateTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueInt32_TemplateTable__type_name( RogueClassInt32_TemplateTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[620]);
}

RogueClassInt32_TemplateTable* RogueInt32_TemplateTable__init( RogueClassInt32_TemplateTable* THIS )
{
  RogueInt32_TemplateTable__init__Int32( THIS, 16 );
  return (RogueClassInt32_TemplateTable*)(THIS);
}

RogueClassInt32_TemplateTable* RogueInt32_TemplateTable__init__Int32( RogueClassInt32_TemplateTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueInt32_TemplateTableEntryList__init__Int32_Int32_TemplateTableEntry( ((RogueTableEntry_of_Int32_TemplateList*)ROGUE_CREATE_OBJECT(TableEntry_of_Int32_TemplateList)), bin_count_0, ((RogueClassInt32_TemplateTableEntry*)(NULL)) )));
  THIS->keys = ((RogueInt32List__init( ((RogueInt32List*)ROGUE_CREATE_OBJECT(Int32List)) )));
  return (RogueClassInt32_TemplateTable*)(THIS);
}

RogueLogical RogueInt32_TemplateTable__contains__Int32( RogueClassInt32_TemplateTable* THIS, RogueInt32 key_0 )
{
  return (RogueLogical)(!!(((RogueInt32_TemplateTable__find__Int32( THIS, key_0 )))));
}

RogueClassInt32_TemplateTableEntry* RogueInt32_TemplateTable__find__Int32( RogueClassInt32_TemplateTable* THIS, RogueInt32 key_0 )
{
  RogueInt32 hash_1 = (((RogueInt32__hash_code( key_0 ))));
  RogueClassInt32_TemplateTableEntry* entry_2 = (((RogueClassInt32_TemplateTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && entry_2->key == key_0))
    {
      return (RogueClassInt32_TemplateTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassInt32_TemplateTableEntry*)entry_2->next_entry);
  }
  return (RogueClassInt32_TemplateTableEntry*)(((RogueClassInt32_TemplateTableEntry*)(NULL)));
}

RogueClassTemplate* RogueInt32_TemplateTable__get__Int32( RogueClassInt32_TemplateTable* THIS, RogueInt32 key_0 )
{
  RogueClassInt32_TemplateTableEntry* entry_1 = (((RogueInt32_TemplateTable__find__Int32( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassTemplate*)(entry_1->value);
  }
  else
  {
    RogueClassTemplate* default_value_2 = 0;
    return (RogueClassTemplate*)(default_value_2);
  }
}

RogueClassInt32_TemplateTable* RogueInt32_TemplateTable__set__Int32_Template( RogueClassInt32_TemplateTable* THIS, RogueInt32 key_0, RogueClassTemplate* value_1 )
{
  RogueInt32 hash_2 = (((RogueInt32__hash_code( key_0 ))));
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassInt32_TemplateTableEntry* entry_4 = (((RogueClassInt32_TemplateTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && entry_4->key == key_0))
    {
      entry_4->value = value_1;
      return (RogueClassInt32_TemplateTable*)(THIS);
    }
    entry_4 = ((RogueClassInt32_TemplateTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassInt32_TemplateTableEntry*)((RogueInt32_TemplateTableEntry__init__Int32_Template_Int32( ((RogueClassInt32_TemplateTableEntry*)ROGUE_CREATE_OBJECT(Int32_TemplateTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassInt32_TemplateTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueInt32List__add__Int32( THIS->keys, key_0 );
  return (RogueClassInt32_TemplateTable*)(THIS);
}

RogueStringBuilder* RogueInt32_TemplateTable__print_to__StringBuilder( RogueClassInt32_TemplateTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueInt32 key_2 = (THIS->keys->data->integers[i_1]);
    RogueStringBuilder__print__Int32( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueInt32_TemplateTable__get__Int32( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassInt32_TemplateTable* RogueInt32_TemplateTable__init_object( RogueClassInt32_TemplateTable* THIS )
{
  return (RogueClassInt32_TemplateTable*)(THIS);
}

RogueString* RogueToken__to_String( RogueClassToken* THIS )
{
  return (RogueString*)(((RogueTokenType__to_String__Token( THIS->_type, THIS ))));
}

RogueString* RogueToken__type_name( RogueClassToken* THIS )
{
  return (RogueString*)(Rogue_literal_strings[621]);
}

RogueClassToken* RogueToken__init__TokenType( RogueClassToken* THIS, RogueClassTokenType* _auto_136_0 )
{
  THIS->_type = _auto_136_0;
  return (RogueClassToken*)(THIS);
}

RogueClassRogueError* RogueToken__error__String( RogueClassToken* THIS, RogueString* message_0 )
{
  return (RogueClassRogueError*)(((RogueRogueError__init__String_String_Int32_Int32( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), message_0, THIS->filepath, THIS->line, THIS->column ))));
}

RogueLogical RogueToken__is_directive( RogueClassToken* THIS )
{
  return (RogueLogical)((call_ROGUEM92( 13, (RogueClassTokenType*)(THIS->_type) )));
}

RogueLogical RogueToken__is_structure( RogueClassToken* THIS )
{
  return (RogueLogical)((call_ROGUEM92( 15, (RogueClassTokenType*)(THIS->_type) )));
}

RogueString* RogueToken__quoted_name( RogueClassToken* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[55] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM43( 1, (RogueClassToken*)(THIS) )) ))) ))), Rogue_literal_strings[55] ))) ))));
}

RogueClassToken* RogueToken__set_location__String_Int32_Int32( RogueClassToken* THIS, RogueString* _auto_137_0, RogueInt32 _auto_138_1, RogueInt32 _auto_139_2 )
{
  THIS->column = _auto_139_2;
  THIS->line = _auto_138_1;
  THIS->filepath = _auto_137_0;
  return (RogueClassToken*)(THIS);
}

RogueClassToken* RogueToken__set_location__Token( RogueClassToken* THIS, RogueClassToken* existing_0 )
{
  THIS->filepath = existing_0->filepath;
  THIS->line = existing_0->line;
  THIS->column = existing_0->column;
  return (RogueClassToken*)(THIS);
}

RogueCharacter RogueToken__to_Character( RogueClassToken* THIS )
{
  return (RogueCharacter)(((RogueCharacter)(0)));
}

RogueInt32 RogueToken__to_Int32( RogueClassToken* THIS )
{
  return (RogueInt32)(0);
}

RogueInt64 RogueToken__to_Int64( RogueClassToken* THIS )
{
  return (RogueInt64)(((RogueInt64)(call_ROGUEM45( 12, (RogueClassToken*)(THIS) ))));
}

RogueReal64 RogueToken__to_Real64( RogueClassToken* THIS )
{
  return (RogueReal64)(0.0);
}

RogueClassType* RogueToken__to_Type( RogueClassToken* THIS )
{
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

RogueClassToken* RogueToken__init_object( RogueClassToken* THIS )
{
  return (RogueClassToken*)(THIS);
}

RogueString* RogueError__type_name( RogueClassError* THIS )
{
  return (RogueString*)(Rogue_literal_strings[769]);
}

RogueClassError* RogueError__init_object( RogueClassError* THIS )
{
  THIS->stack_trace = ((RogueStackTrace__init__Int32( ((RogueClassStackTrace*)ROGUE_CREATE_OBJECT(StackTrace)), 1 )));
  return (RogueClassError*)(THIS);
}

RogueString* RogueRogueError__to_String( RogueClassRogueError* THIS )
{
  RogueStringBuilder* builder_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueString* m_1 = (((RogueStringList__joined__String( ((RogueString__word_wrapped__Int32( THIS->message, 79 ))), Rogue_literal_strings[763] ))));
  if (!!(THIS->filepath))
  {
    RogueStringBuilder__println__String( builder_0, Rogue_literal_strings[764] );
    RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( builder_0, Rogue_literal_strings[765] ))), (RogueFile__filename__String( THIS->filepath )) );
    RogueStringBuilder__println__Int32( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__Int32( ((RogueStringBuilder__print__String( builder_0, Rogue_literal_strings[766] ))), THIS->line ))), Rogue_literal_strings[767] ))), THIS->column );
    RogueStringBuilder__println( builder_0 );
    RogueStringBuilder__println__String( builder_0, m_1 );
    RogueStringBuilder__println__String( builder_0, Rogue_literal_strings[764] );
  }
  else
  {
    RogueStringBuilder__println__String( builder_0, Rogue_literal_strings[764] );
    RogueStringBuilder__print__String( builder_0, Rogue_literal_strings[768] );
    RogueStringBuilder__println( builder_0 );
    RogueStringBuilder__println__String( builder_0, m_1 );
    RogueStringBuilder__println__String( builder_0, Rogue_literal_strings[764] );
  }
  return (RogueString*)(((RogueStringBuilder__to_String( builder_0 ))));
}

RogueString* RogueRogueError__type_name( RogueClassRogueError* THIS )
{
  return (RogueString*)(Rogue_literal_strings[779]);
}

RogueClassRogueError* RogueRogueError__init_object( RogueClassRogueError* THIS )
{
  THIS->stack_trace = ((RogueStackTrace__init__Int32( ((RogueClassStackTrace*)ROGUE_CREATE_OBJECT(StackTrace)), 1 )));
  return (RogueClassRogueError*)(THIS);
}

RogueClassRogueError* RogueRogueError__init__String_String_Int32_Int32( RogueClassRogueError* THIS, RogueString* _auto_140_0, RogueString* _auto_141_1, RogueInt32 _auto_142_2, RogueInt32 _auto_143_3 )
{
  THIS->column = _auto_143_3;
  THIS->line = _auto_142_2;
  THIS->filepath = _auto_141_1;
  THIS->message = _auto_140_0;
  return (RogueClassRogueError*)(THIS);
}

RogueString* RogueTypeArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[721]);
}

RogueString* RogueAttributes__type_name( RogueClassAttributes* THIS )
{
  return (RogueString*)(Rogue_literal_strings[622]);
}

RogueClassAttributes* RogueAttributes__init__Int32( RogueClassAttributes* THIS, RogueInt32 _auto_146_0 )
{
  THIS->flags = _auto_146_0;
  return (RogueClassAttributes*)(THIS);
}

RogueClassAttributes* RogueAttributes__clone( RogueClassAttributes* THIS )
{
  RogueClassAttributes* result_0 = (((RogueAttributes__init__Int32( ((RogueClassAttributes*)ROGUE_CREATE_OBJECT(Attributes)), THIS->flags ))));
  if (!!(THIS->tags))
  {
    {
      RogueStringList* _auto_865_1 = (THIS->tags);
      RogueInt32 _auto_866_2 = (0);
      for (;_auto_866_2 < _auto_865_1->count;++_auto_866_2)
      {
        RogueString* tag_3 = (((RogueString*)(_auto_865_1->data->objects[_auto_866_2])));
        RogueAttributes__add__String( result_0, tag_3 );
      }
    }
  }
  return (RogueClassAttributes*)(result_0);
}

RogueClassAttributes* RogueAttributes__add__Int32( RogueClassAttributes* THIS, RogueInt32 flag_0 )
{
  THIS->flags |= flag_0;
  return (RogueClassAttributes*)(THIS);
}

RogueClassAttributes* RogueAttributes__add__String( RogueClassAttributes* THIS, RogueString* tag_0 )
{
  if (((void*)THIS->tags) == ((void*)NULL))
  {
    THIS->tags = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  }
  RogueStringList__add__String( THIS->tags, tag_0 );
  return (RogueClassAttributes*)(THIS);
}

RogueClassAttributes* RogueAttributes__add__Attributes( RogueClassAttributes* THIS, RogueClassAttributes* other_0 )
{
  THIS->flags |= other_0->flags;
  if (!!(other_0->tags))
  {
    {
      RogueStringList* _auto_867_1 = (other_0->tags);
      RogueInt32 _auto_868_2 = (0);
      for (;_auto_868_2 < _auto_867_1->count;++_auto_868_2)
      {
        RogueString* tag_3 = (((RogueString*)(_auto_867_1->data->objects[_auto_868_2])));
        RogueAttributes__add__String( THIS, tag_3 );
      }
    }
  }
  return (RogueClassAttributes*)(THIS);
}

RogueString* RogueAttributes__element_type_name( RogueClassAttributes* THIS )
{
  switch ((THIS->flags & 7))
  {
    case 1:
    {
      return (RogueString*)(Rogue_literal_strings[300]);
      break;
    }
    case 2:
    {
      return (RogueString*)(Rogue_literal_strings[297]);
      break;
    }
    case 3:
    {
      return (RogueString*)(Rogue_literal_strings[301]);
      break;
    }
    default:
    {
      return (RogueString*)(Rogue_literal_strings[86]);
    }
  }
}

RogueClassAttributes* RogueAttributes__init_object( RogueClassAttributes* THIS )
{
  return (RogueClassAttributes*)(THIS);
}

RogueString* RogueCmd__type_name( RogueClassCmd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[334]);
}

void RogueCmd__add_to__CmdStatementList( RogueClassCmd* THIS, RogueClassCmdStatementList* statements_0 )
{
  RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), THIS );
}

RogueClassCmd* RogueCmd__call_prior__Scope( RogueClassCmd* THIS, RogueClassScope* scope_0 )
{
  ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[924] ))));
}

RogueClassCmd* RogueCmd__cast_to__Type_Scope( RogueClassCmd* THIS, RogueClassType* target_type_0, RogueClassScope* scope_1 )
{
  RogueClassType* this_type_2 = ((call_ROGUEM64( 22, (RogueClassCmd*)(THIS) )));
  if (((void*)this_type_2) == ((void*)target_type_0))
  {
    return (RogueClassCmd*)(THIS);
  }
  RogueType__organize__Scope( this_type_2, scope_1 );
  RogueType__organize__Scope( target_type_0, scope_1 );
  if ((((RogueType__instance_of__Type( this_type_2, target_type_0 ))) || ((RogueType__instance_of__Type( target_type_0, this_type_2 )))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCastToType*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdCastToType*)ROGUE_CREATE_OBJECT(CmdCastToType))), THIS->t, THIS, target_type_0 ))))))));
  }
  else
  {
    RogueString* m_name_3 = (((RogueString__operatorPLUS__String( Rogue_literal_strings[344], target_type_0->name ))));
    if (((RogueType__has_method_named__String( this_type_2, m_name_3 ))))
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS, m_name_3 ))))));
    }
    if ((((RogueType__is_primitive( this_type_2 ))) && ((RogueType__is_primitive( target_type_0 )))))
    {
      if (!((((void*)this_type_2) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical) || ((void*)target_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))))
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCastToType*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdCastToType*)ROGUE_CREATE_OBJECT(CmdCastToType))), THIS->t, THIS, target_type_0 ))))))));
      }
    }
    if (((void*)target_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalize*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalize*)ROGUE_CREATE_OBJECT(CmdLogicalize))), THIS->t, THIS ))))))));
    }
    if (target_type_0->is_optional)
    {
      if (((void*)this_type_2) == ((void*)target_type_0->_element_type))
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateOptionalValue__init__Token_Type_Cmd( ((RogueClassCmdCreateOptionalValue*)ROGUE_CREATE_OBJECT(CmdCreateOptionalValue)), THIS->t, target_type_0, THIS ))))));
      }
      else if (((void*)this_type_2) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_null))
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateOptionalValue__init__Token_Type_Cmd( ((RogueClassCmdCreateOptionalValue*)ROGUE_CREATE_OBJECT(CmdCreateOptionalValue)), THIS->t, target_type_0, ((RogueClassCmd*)(NULL)) ))))));
      }
    }
    ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[384] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(this_type_2)) ))) ))), Rogue_literal_strings[419] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(target_type_0)) ))) ))), Rogue_literal_strings[51] ))) ))) ))));
  }
}

RogueClassCmd* RogueCmd__clone__CloneArgs( RogueClassCmd* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[333] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM55( 2, (RogueClassCmd*)(THIS) )) ))) ))), Rogue_literal_strings[335] ))) ))) ))));
}

RogueClassCmd* RogueCmd__clone__Cmd_CloneArgs( RogueClassCmd* THIS, RogueClassCmd* other_0, RogueClassCloneArgs* clone_args_1 )
{
  if (!!(other_0))
  {
    return (RogueClassCmd*)((call_ROGUEM58( 6, (RogueClassCmd*)(other_0), clone_args_1 )));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
}

RogueClassCmdArgs* RogueCmd__clone__CmdArgs_CloneArgs( RogueClassCmd* THIS, RogueClassCmdArgs* args_0, RogueClassCloneArgs* clone_args_1 )
{
  if (!!(args_0))
  {
    return (RogueClassCmdArgs*)(((RogueCmdArgs__clone__CloneArgs( args_0, clone_args_1 ))));
  }
  return (RogueClassCmdArgs*)(((RogueClassCmdArgs*)(NULL)));
}

RogueClassCmdStatementList* RogueCmd__clone__CmdStatementList_CloneArgs( RogueClassCmd* THIS, RogueClassCmdStatementList* statements_0, RogueClassCloneArgs* clone_args_1 )
{
  if (!!(statements_0))
  {
    return (RogueClassCmdStatementList*)(((RogueCmdStatementList__clone__CloneArgs( statements_0, clone_args_1 ))));
  }
  return (RogueClassCmdStatementList*)(((RogueClassCmdStatementList*)(NULL)));
}

RogueClassCmd* RogueCmd__combine_literal_operands__Type( RogueClassCmd* THIS, RogueClassType* common_type_0 )
{
  return (RogueClassCmd*)(THIS);
}

void RogueCmd__exit_scope__Scope( RogueClassCmd* THIS, RogueClassScope* scope_0 )
{
}

RogueClassType* RogueCmd__find_operation_result_type__Type_Type( RogueClassCmd* THIS, RogueClassType* left_type_0, RogueClassType* right_type_1 )
{
  RogueClassType* result_2 = (((RogueCmd__find_common_type__Type_Type( THIS, left_type_0, right_type_1 ))));
  if (!(!!(result_2)))
  {
    return (RogueClassType*)(left_type_0);
  }
  if ((((void*)result_2) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte) || ((void*)result_2) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character)))
  {
    return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32);
  }
  return (RogueClassType*)(result_2);
}

RogueClassType* RogueCmd__find_common_type__Type_Type( RogueClassCmd* THIS, RogueClassType* left_type_0, RogueClassType* right_type_1 )
{
  if (((void*)left_type_0) == ((void*)NULL))
  {
    return (RogueClassType*)(right_type_1);
  }
  if (((void*)right_type_1) == ((void*)NULL))
  {
    return (RogueClassType*)(left_type_0);
  }
  if (((void*)left_type_0) == ((void*)right_type_1))
  {
    return (RogueClassType*)(left_type_0);
  }
  if (((RogueType__is_primitive( left_type_0 ))))
  {
    if (((RogueType__is_primitive( right_type_1 ))))
    {
      if ((((void*)left_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64) || ((void*)right_type_1) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64)))
      {
        return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64);
      }
      if ((((void*)left_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real32) || ((void*)right_type_1) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real32)))
      {
        return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real32);
      }
      if ((((void*)left_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int64) || ((void*)right_type_1) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int64)))
      {
        return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int64);
      }
      if ((((void*)left_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32) || ((void*)right_type_1) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32)))
      {
        return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32);
      }
      if ((((void*)left_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character) || ((void*)right_type_1) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character)))
      {
        return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character);
      }
    }
  }
  if (((RogueType__instance_of__Type( left_type_0, right_type_1 ))))
  {
    return (RogueClassType*)(right_type_1);
  }
  if (((RogueType__instance_of__Type( right_type_1, left_type_0 ))))
  {
    return (RogueClassType*)(left_type_0);
  }
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

RogueLogical RogueCmd__is_generic_function( RogueClassCmd* THIS )
{
  return (RogueLogical)(false);
}

RogueClassType* RogueCmd__must_find_common_type__Type_Type( RogueClassCmd* THIS, RogueClassType* left_type_0, RogueClassType* right_type_1 )
{
  RogueClassType* common_type_2 = (((RogueCmd__find_common_type__Type_Type( THIS, left_type_0, right_type_1 ))));
  if (!!(common_type_2))
  {
    return (RogueClassType*)(common_type_2);
  }
  ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[869] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(left_type_0)) ))) ))), Rogue_literal_strings[364] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(right_type_1)) ))) ))), Rogue_literal_strings[870] ))) ))) ))));
}

RogueClassType* RogueCmd__implicit_type__Scope( RogueClassCmd* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

RogueLogical RogueCmd__is_literal( RogueClassCmd* THIS )
{
  return (RogueLogical)(false);
}

void RogueCmd__require_type_context( RogueClassCmd* THIS )
{
  if (!!((call_ROGUEM64( 29, (RogueClassCmd*)(THIS) ))))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[843] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)((call_ROGUEM64( 29, (RogueClassCmd*)(THIS) )))) ))) ))), Rogue_literal_strings[844] ))) ))) ))));
  }
  else
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[845] ))));
  }
}

RogueClassCmd* RogueCmd__require_integer( RogueClassCmd* THIS )
{
  RogueClassType* _type_0 = ((call_ROGUEM64( 29, (RogueClassCmd*)(THIS) )));
  if ((((void*)_type_0) == ((void*)NULL) || ((void*)_type_0) != ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32)))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[831] ))));
  }
  return (RogueClassCmd*)(THIS);
}

RogueClassCmd* RogueCmd__require_logical__Scope( RogueClassCmd* THIS, RogueClassScope* scope_0 )
{
  if (((void*)(call_ROGUEM64( 22, (RogueClassCmd*)(THIS) ))) != ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))
  {
    return (RogueClassCmd*)(((RogueCmdLogicalize__resolve__Scope( ((RogueClassCmdLogicalize*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalize*)ROGUE_CREATE_OBJECT(CmdLogicalize))), THIS->t, THIS ))))), scope_0 ))));
  }
  return (RogueClassCmd*)(THIS);
}

RogueClassType* Rogue_Cmd__require_type( RogueClassCmd* THIS )
{
  RogueClassType* result_0 = ((call_ROGUEM64( 29, (RogueClassCmd*)(THIS) )));
  if (((void*)result_0) == ((void*)NULL))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[418] ))));
  }
  return (RogueClassType*)(result_0);
}

RogueClassCmd* RogueCmd__require_value( RogueClassCmd* THIS )
{
  call_ROGUEM64( 22, (RogueClassCmd*)(THIS) );
  return (RogueClassCmd*)(THIS);
}

RogueLogical RogueCmd__requires_semicolon( RogueClassCmd* THIS )
{
  return (RogueLogical)(true);
}

RogueClassCmd* RogueCmd__resolve__Scope( RogueClassCmd* THIS, RogueClassScope* scope_0 )
{
  ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[333] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM55( 2, (RogueClassCmd*)(THIS) )) ))) ))), Rogue_literal_strings[413] ))) ))) ))));
  return (RogueClassCmd*)(THIS);
}

RogueClassCmd* RogueCmd__resolve_assignment__Scope_Cmd( RogueClassCmd* THIS, RogueClassScope* scope_0, RogueClassCmd* new_value_1 )
{
  ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[862] ))));
}

RogueClassCmd* RogueCmd__resolve_adjust__Scope_Int32( RogueClassCmd* THIS, RogueClassScope* scope_0, RogueInt32 delta_1 )
{
  ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[889] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM55( 2, (RogueClassCmd*)(THIS) )) ))) ))), Rogue_literal_strings[67] ))) ))) ))));
}

RogueClassCmd* RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd( RogueClassCmd* THIS, RogueClassScope* scope_0, RogueClassTokenType* op_1, RogueClassCmd* new_value_2 )
{
  ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[862] ))));
}

RogueClassType* Rogue_Cmd__type( RogueClassCmd* THIS )
{
  ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[333] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM55( 2, (RogueClassCmd*)(THIS) )) ))) ))), Rogue_literal_strings[417] ))) ))) ))));
}

void RogueCmd__write_cpp__CPPWriter_Logical( RogueClassCmd* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[333] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM55( 2, (RogueClassCmd*)(THIS) )) ))) ))), Rogue_literal_strings[576] ))) ))) ))));
}

void RogueCmd__trace_used_code( RogueClassCmd* THIS )
{
  ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[333] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM55( 2, (RogueClassCmd*)(THIS) )) ))) ))), Rogue_literal_strings[423] ))) ))) ))));
}

void RogueCmd__update_this_type__Scope( RogueClassCmd* THIS, RogueClassScope* scope_0 )
{
  ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[333] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM55( 2, (RogueClassCmd*)(THIS) )) ))) ))), Rogue_literal_strings[828] ))) ))) ))));
}

RogueClassCmd* RogueCmd__init_object( RogueClassCmd* THIS )
{
  return (RogueClassCmd*)(THIS);
}

RogueString* RogueCmdReturn__type_name( RogueClassCmdReturn* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1013]);
}

RogueClassCmd* RogueCmdReturn__clone__CloneArgs( RogueClassCmdReturn* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if (!!(task_args_1))
  {
    return (RogueClassCmd*)(((RogueTaskArgs__create_return__Token_Cmd( task_args_1, THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->value, clone_args_0 ))) ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->value, clone_args_0 ))) ))))));
  }
}

RogueClassCmd* RogueCmdReturn__resolve__Scope( RogueClassCmdReturn* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->value))
  {
    if (!(!!(scope_0->this_method->_return_type)))
    {
      ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], scope_0->this_method->signature ))) ))), Rogue_literal_strings[416] ))) ))) ))));
    }
    THIS->value = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)((call_ROGUEM56( 25, (RogueClassCmd*)(THIS->value), scope_0 ))), scope_0->this_method->_return_type, scope_0 ))), scope_0 ));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdReturn__type( RogueClassCmdReturn* THIS )
{
  return (RogueClassType*)((call_ROGUEM64( 29, (RogueClassCmd*)(THIS->value) )));
}

void RogueCmdReturn__write_cpp__CPPWriter_Logical( RogueClassCmdReturn* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!!(THIS->value))
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[943] ))), (call_ROGUEM64( 29, (RogueClassCmd*)(THIS->value) )) ))), Rogue_literal_strings[944] );
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->value), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[142] );
  }
}

void RogueCmdReturn__trace_used_code( RogueClassCmdReturn* THIS )
{
  if (!!(THIS->value))
  {
    call_ROGUEM63( 31, (RogueClassCmd*)(THIS->value) );
  }
}

void RogueCmdReturn__update_this_type__Scope( RogueClassCmdReturn* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->value))
  {
    call_ROGUEM60( 32, (RogueClassCmd*)(THIS->value), scope_0 );
  }
}

RogueClassCmdReturn* RogueCmdReturn__init_object( RogueClassCmdReturn* THIS )
{
  return (RogueClassCmdReturn*)(THIS);
}

RogueClassCmdReturn* RogueCmdReturn__init__Token_Cmd( RogueClassCmdReturn* THIS, RogueClassToken* _auto_148_0, RogueClassCmd* _auto_149_1 )
{
  THIS->value = _auto_149_1;
  THIS->t = _auto_148_0;
  return (RogueClassCmdReturn*)(THIS);
}

RogueString* RogueCmdStatement__type_name( RogueClassCmdStatement* THIS )
{
  return (RogueString*)(Rogue_literal_strings[780]);
}

void RogueCmdStatement__trace_used_code( RogueClassCmdStatement* THIS )
{
}

void RogueCmdStatement__update_this_type__Scope( RogueClassCmdStatement* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdStatement* RogueCmdStatement__init_object( RogueClassCmdStatement* THIS )
{
  return (RogueClassCmdStatement*)(THIS);
}

RogueString* RogueCmdStatementList__type_name( RogueClassCmdStatementList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1016]);
}

RogueClassCmdStatementList* RogueCmdStatementList__init_object( RogueClassCmdStatementList* THIS )
{
  return (RogueClassCmdStatementList*)(THIS);
}

RogueClassCmdStatementList* RogueCmdStatementList__init( RogueClassCmdStatementList* THIS )
{
  RogueCmdList__init( ((RogueCmdList*)THIS) );
  return (RogueClassCmdStatementList*)(THIS);
}

RogueClassCmdStatementList* RogueCmdStatementList__init__Int32( RogueClassCmdStatementList* THIS, RogueInt32 initial_capacity_0 )
{
  RogueCmdList__init__Int32( ((RogueCmdList*)THIS), initial_capacity_0 );
  return (RogueClassCmdStatementList*)(THIS);
}

RogueClassCmdStatementList* RogueCmdStatementList__init__Cmd( RogueClassCmdStatementList* THIS, RogueClassCmd* statement_0 )
{
  RogueCmdStatementList__init( THIS );
  if (!!(statement_0))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS), statement_0 );
  }
  return (RogueClassCmdStatementList*)(THIS);
}

RogueClassCmdStatementList* RogueCmdStatementList__clone__CloneArgs( RogueClassCmdStatementList* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdStatementList* result_1 = (((RogueCmdStatementList__init__Int32( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)), THIS->count ))));
  {
    RogueClassCmdStatementList* _auto_908_2 = (THIS);
    RogueInt32 _auto_909_3 = (0);
    for (;_auto_909_3 < _auto_908_2->count;++_auto_909_3)
    {
      RogueClassCmd* cmd_4 = (((RogueClassCmd*)(_auto_908_2->data->objects[_auto_909_3])));
      cmd_4 = ((RogueClassCmd*)(call_ROGUEM58( 6, (RogueClassCmd*)(cmd_4), clone_args_0 )));
      if (!!(cmd_4))
      {
        RogueCmdList__add__Cmd( ((RogueCmdList*)result_1), cmd_4 );
      }
    }
  }
  return (RogueClassCmdStatementList*)(result_1);
}

void RogueCmdStatementList__resolve__Scope( RogueClassCmdStatementList* THIS, RogueClassScope* scope_0 )
{
  RogueClassCmdStatementList* original_body_1 = (scope_0->this_body);
  scope_0->this_body = THIS;
  RogueInt32 n_2 = (THIS->count);
  {
    RogueInt32 i_3 = (0);
    RogueInt32 _auto_150_4 = ((n_2 - 1));
    for (;i_3 <= _auto_150_4;++i_3)
    {
      RogueCmd__add_to__CmdStatementList( (call_ROGUEM56( 25, (RogueClassCmd*)(((RogueClassCmd*)(THIS->data->objects[i_3]))), scope_0 )), THIS );
    }
  }
  RogueCmdList__discard__Int32_Int32( ((RogueCmdList*)THIS), 0, n_2 );
  {
    RogueClassCmdStatementList* _auto_910_5 = (THIS);
    RogueInt32 _auto_911_6 = (0);
    for (;_auto_911_6 < _auto_910_5->count;++_auto_911_6)
    {
      RogueClassCmd* statement_7 = (((RogueClassCmd*)(_auto_910_5->data->objects[_auto_911_6])));
      call_ROGUEM60( 12, (RogueClassCmd*)(statement_7), scope_0 );
    }
  }
  scope_0->this_body = original_body_1;
}

void RogueCmdStatementList__write_cpp__CPPWriter_Logical( RogueClassCmdStatementList* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!!(THIS->count))
  {
    RogueCPPWriter__mark_statement_start__String_Int32_Int32( writer_0, ((RogueClassCmd*)(THIS->data->objects[0]))->t->filepath, ((RogueClassCmd*)(THIS->data->objects[0]))->t->line, ((RogueClassCmd*)(THIS->data->objects[(THIS->count - 1)]))->t->line );
  }
  {
    RogueClassCmdStatementList* _auto_912_2 = (THIS);
    RogueInt32 _auto_913_3 = (0);
    for (;_auto_913_3 < _auto_912_2->count;++_auto_913_3)
    {
      RogueClassCmd* statement_4 = (((RogueClassCmd*)(_auto_912_2->data->objects[_auto_913_3])));
      call_ROGUEM68( 30, (RogueClassCmd*)(statement_4), writer_0, true );
      if ((call_ROGUEM61( 24, (RogueClassCmd*)(statement_4) )))
      {
        RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[205] );
      }
    }
  }
  if (!!(THIS->count))
  {
    RogueCPPWriter__mark_statement_end( writer_0 );
  }
}

void RogueCmdStatementList__trace_used_code( RogueClassCmdStatementList* THIS )
{
  {
    RogueClassCmdStatementList* _auto_914_0 = (THIS);
    RogueInt32 _auto_915_1 = (0);
    for (;_auto_915_1 < _auto_914_0->count;++_auto_915_1)
    {
      RogueClassCmd* statement_2 = (((RogueClassCmd*)(_auto_914_0->data->objects[_auto_915_1])));
      call_ROGUEM63( 31, (RogueClassCmd*)(statement_2) );
    }
  }
}

void RogueCmdStatementList__update_this_type__Scope( RogueClassCmdStatementList* THIS, RogueClassScope* scope_0 )
{
  {
    RogueClassCmdStatementList* _auto_916_1 = (THIS);
    RogueInt32 _auto_917_2 = (0);
    for (;_auto_917_2 < _auto_916_1->count;++_auto_917_2)
    {
      RogueClassCmd* statement_3 = (((RogueClassCmd*)(_auto_916_1->data->objects[_auto_917_2])));
      call_ROGUEM60( 32, (RogueClassCmd*)(statement_3), scope_0 );
    }
  }
}

RogueString* RogueCmdList__to_String( RogueCmdList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueCmdList* _auto_877_2 = (THIS);
    RogueInt32 _auto_878_3 = (0);
    for (;_auto_878_3 < _auto_877_2->count;++_auto_878_3)
    {
      RogueClassCmd* value_4 = (((RogueClassCmd*)(_auto_877_2->data->objects[_auto_878_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdList__type_name( RogueCmdList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[681]);
}

RogueCmdList* RogueCmdList__init_object( RogueCmdList* THIS )
{
  return (RogueCmdList*)(THIS);
}

RogueCmdList* RogueCmdList__init( RogueCmdList* THIS )
{
  call_ROGUEM87( 5, (RogueCmdList*)(THIS), 10 );
  return (RogueCmdList*)(THIS);
}

RogueCmdList* RogueCmdList__init__Int32( RogueCmdList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassCmd*), true );
  return (RogueCmdList*)(THIS);
}

RogueCmdList* RogueCmdList__add__Cmd( RogueCmdList* THIS, RogueClassCmd* value_0 )
{
  ((RogueCmdList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdList*)(THIS);
}

RogueCmdList* RogueCmdList__add__CmdList( RogueCmdList* THIS, RogueCmdList* other_0 )
{
  RogueCmdList__reserve__Int32( THIS, other_0->count );
  {
    RogueCmdList* _auto_883_1 = (other_0);
    RogueInt32 _auto_884_2 = (0);
    for (;_auto_884_2 < _auto_883_1->count;++_auto_884_2)
    {
      RogueClassCmd* value_3 = (((RogueClassCmd*)(_auto_883_1->data->objects[_auto_884_2])));
      RogueCmdList__add__Cmd( THIS, value_3 );
    }
  }
  return (RogueCmdList*)(THIS);
}

RogueInt32 RogueCmdList__capacity( RogueCmdList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

void RogueCmdList__discard__Int32_Int32( RogueCmdList* THIS, RogueInt32 i1_0, RogueInt32 n_1 )
{
  RogueInt32 i2_2 = ((i1_0 + n_1));
  RogueArray_set(THIS->data,i1_0,((RogueArray*)(THIS->data)),i2_2,(THIS->count - i2_2));
  RogueCmdList__discard_from__Int32( THIS, (THIS->count - n_1) );
}

void RogueCmdList__discard_from__Int32( RogueCmdList* THIS, RogueInt32 index_0 )
{
  RogueClassCmd* zero_value_1 = 0;
  RogueInt32 c_2 = (THIS->count);
  while (c_2 > index_0)
  {
    --c_2;
    THIS->data->objects[c_2] = zero_value_1;
  }
  THIS->count = c_2;
}

RogueCmdList* RogueCmdList__insert__Cmd_Int32( RogueCmdList* THIS, RogueClassCmd* value_0, RogueInt32 before_index_1 )
{
  if (before_index_1 < 0)
  {
    before_index_1 = ((RogueInt32)0);
  }
  if (before_index_1 >= THIS->count)
  {
    return (RogueCmdList*)(((RogueCmdList__add__Cmd( THIS, value_0 ))));
  }
  else
  {
    RogueCmdList__reserve__Int32( THIS, 1 );
    RogueArray_set(THIS->data,(before_index_1 + 1),((RogueArray*)(THIS->data)),before_index_1,(THIS->count - before_index_1));
    ++THIS->count;
    THIS->data->objects[before_index_1] = value_0;
  }
  return (RogueCmdList*)(THIS);
}

RogueClassCmd* RogueCmdList__last( RogueCmdList* THIS )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS->data->objects[(THIS->count - 1)])));
}

RogueCmdList* RogueCmdList__reserve__Int32( RogueCmdList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassCmd*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueCmdList__capacity( THIS ))) + ((RogueCmdList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassCmd*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdList*)(THIS);
}

RogueString* RogueTokenType__to_String( RogueClassTokenType* THIS )
{
  return (RogueString*)(THIS->name);
}

RogueString* RogueTokenType__type_name( RogueClassTokenType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[623]);
}

RogueClassTokenType* RogueTokenType__init__String( RogueClassTokenType* THIS, RogueString* _auto_155_0 )
{
  THIS->name = _auto_155_0;
  return (RogueClassTokenType*)(THIS);
}

RogueClassToken* RogueTokenType__create_token__String_Int32_Int32( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ((RogueToken__init__TokenType( ((RogueClassToken*)ROGUE_CREATE_OBJECT(Token)), THIS ))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__String_Int32_Int32_Character( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2, RogueCharacter value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ((RogueClassToken*)((RogueLiteralCharacterToken__init__TokenType_Character( ((RogueClassLiteralCharacterToken*)ROGUE_CREATE_OBJECT(LiteralCharacterToken)), THIS, value_3 )))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__String_Int32_Int32_Int64( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2, RogueInt64 value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ((RogueClassToken*)((RogueLiteralInt64Token__init__TokenType_Int64( ((RogueClassLiteralInt64Token*)ROGUE_CREATE_OBJECT(LiteralInt64Token)), THIS, value_3 )))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__String_Int32_Int32_Int32( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2, RogueInt32 value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ((RogueClassToken*)((RogueLiteralInt32Token__init__TokenType_Int32( ((RogueClassLiteralInt32Token*)ROGUE_CREATE_OBJECT(LiteralInt32Token)), THIS, value_3 )))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__String_Int32_Int32_Real64( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2, RogueReal64 value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ((RogueClassToken*)((RogueLiteralReal64Token__init__TokenType_Real64( ((RogueClassLiteralReal64Token*)ROGUE_CREATE_OBJECT(LiteralReal64Token)), THIS, value_3 )))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__String_Int32_Int32_String( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2, RogueString* value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ((RogueClassToken*)((RogueStringDataToken__init__TokenType_String( ((RogueClassStringDataToken*)ROGUE_CREATE_OBJECT(StringDataToken)), THIS, value_3 )))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__Token( RogueClassTokenType* THIS, RogueClassToken* existing_0 )
{
  return (RogueClassToken*)((call_ROGUEM89( 4, (RogueClassTokenType*)(THIS), existing_0->filepath, existing_0->line, existing_0->column )));
}

RogueClassToken* RogueTokenType__create_token__Token_String( RogueClassTokenType* THIS, RogueClassToken* existing_0, RogueString* value_1 )
{
  return (RogueClassToken*)((call_ROGUEM90( 9, (RogueClassTokenType*)(THIS), existing_0->filepath, existing_0->line, existing_0->column, value_1 )));
}

RogueLogical RogueTokenType__is_directive( RogueClassTokenType* THIS )
{
  return (RogueLogical)(false);
}

RogueLogical RogueTokenType__is_op_with_assign( RogueClassTokenType* THIS )
{
  return (RogueLogical)(false);
}

RogueLogical RogueTokenType__is_structure( RogueClassTokenType* THIS )
{
  return (RogueLogical)(false);
}

RogueString* RogueTokenType__quoted_name( RogueClassTokenType* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[55] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->name ))) ))), Rogue_literal_strings[55] ))) ))));
}

RogueString* RogueTokenType__to_String__Token( RogueClassTokenType* THIS, RogueClassToken* t_0 )
{
  return (RogueString*)(THIS->name);
}

RogueClassTokenType* RogueTokenType__init_object( RogueClassTokenType* THIS )
{
  return (RogueClassTokenType*)(THIS);
}

RogueString* RogueCmdLabel__type_name( RogueClassCmdLabel* THIS )
{
  return (RogueString*)(Rogue_literal_strings[781]);
}

RogueClassCmdLabel* RogueCmdLabel__clone__CloneArgs( RogueClassCmdLabel* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdLabel* result_1 = (((RogueCmdLabel__init__Token_String_CmdStatementList( ((RogueClassCmdLabel*)ROGUE_CREATE_OBJECT(CmdLabel)), THIS->t, THIS->name, ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 ))) ))));
  if (!!(clone_args_0))
  {
    call_ROGUEM173( 3, (RogueClassCloneArgs*)(clone_args_0), result_1 );
  }
  return (RogueClassCmdLabel*)(result_1);
}

RogueLogical RogueCmdLabel__requires_semicolon( RogueClassCmdLabel* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdLabel__resolve__Scope( RogueClassCmdLabel* THIS, RogueClassScope* scope_0 )
{
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdLabel__write_cpp__CPPWriter_Logical( RogueClassCmdLabel* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, is_statement_1 );
}

void RogueCmdLabel__trace_used_code( RogueClassCmdLabel* THIS )
{
  RogueCmdStatementList__trace_used_code( THIS->statements );
}

void RogueCmdLabel__update_this_type__Scope( RogueClassCmdLabel* THIS, RogueClassScope* scope_0 )
{
  RogueCmdStatementList__update_this_type__Scope( THIS->statements, scope_0 );
}

RogueClassCmdLabel* RogueCmdLabel__init_object( RogueClassCmdLabel* THIS )
{
  return (RogueClassCmdLabel*)(THIS);
}

RogueClassCmdLabel* RogueCmdLabel__init__Token_String_CmdStatementList( RogueClassCmdLabel* THIS, RogueClassToken* _auto_156_0, RogueString* _auto_157_1, RogueClassCmdStatementList* _auto_158_2 )
{
  THIS->statements = _auto_158_2;
  THIS->name = _auto_157_1;
  THIS->t = _auto_156_0;
  return (RogueClassCmdLabel*)(THIS);
}

RogueString* RoguePropertyArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[722]);
}

RogueString* RogueScope__type_name( RogueClassScope* THIS )
{
  return (RogueString*)(Rogue_literal_strings[624]);
}

RogueClassScope* RogueScope__init__Type_Method( RogueClassScope* THIS, RogueClassType* _auto_161_0, RogueClassMethod* _auto_162_1 )
{
  THIS->this_method = _auto_162_1;
  THIS->_this_type = _auto_161_0;
  return (RogueClassScope*)(THIS);
}

RogueClassLocal* RogueScope__find_local__String( RogueClassScope* THIS, RogueString* name_0 )
{
  RogueInt32 i_1 = ((THIS->local_list->count - 1));
  while (i_1 >= 0)
  {
    if (((RogueString__operatorEQUALSEQUALS__String( ((RogueClassLocal*)(THIS->local_list->data->objects[i_1]))->name, name_0 ))))
    {
      return (RogueClassLocal*)(((RogueClassLocal*)(THIS->local_list->data->objects[i_1])));
    }
    --i_1;
  }
  return (RogueClassLocal*)(((RogueClassLocal*)(NULL)));
}

RogueClassType* RogueScope__find_type__String( RogueClassScope* THIS, RogueString* name_0 )
{
  RogueClassType* type_1 = (((RogueProgram__find_type__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), name_0 ))));
  if (!!(type_1))
  {
    return (RogueClassType*)(type_1);
  }
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

void RogueScope__push_local__Local_Logical( RogueClassScope* THIS, RogueClassLocal* v_0, RogueLogical validate_name_1 )
{
  if (validate_name_1)
  {
    RogueClassLocal* existing_2 = (((RogueScope__find_local__String( THIS, v_0->name ))));
    if (!!(existing_2))
    {
      ROGUE_THROW(((RogueToken__error__String( v_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[412] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], v_0->name ))) ))), Rogue_literal_strings[367] ))) ))) ))));
    }
  }
  RogueLocalList__add__Local( THIS->local_list, v_0 );
}

void RogueScope__pop_local( RogueClassScope* THIS )
{
  RogueLocalList__remove_last( THIS->local_list );
}

RogueClassType* RogueScope__set_implicit_type__Type( RogueClassScope* THIS, RogueClassType* new_implicit_type_0 )
{
  RogueClassType* result_1 = (THIS->_implicit_type);
  THIS->_implicit_type = new_implicit_type_0;
  return (RogueClassType*)(result_1);
}

RogueClassCmd* RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( RogueClassScope* THIS, RogueClassType* type_context_0, RogueClassCmdAccess* access_1, RogueLogical error_on_fail_2, RogueLogical suppress_inherited_3 )
{
  RogueClassMethod* m_4 = (((RogueScope__find_method__Type_CmdAccess_Logical_Logical( THIS, type_context_0, access_1, (error_on_fail_2 && !!(access_1->context)), suppress_inherited_3 ))));
  if ((!(!!(m_4)) && !(!!(access_1->context))))
  {
    m_4 = ((RogueClassMethod*)((RogueScope__find_method__Type_CmdAccess_Logical_Logical( THIS, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global, access_1, false, suppress_inherited_3 ))));
    if (!!(m_4))
    {
      type_context_0 = ((RogueClassType*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global);
      access_1->context = ((RogueClassCmd*)(((RogueCmdReadSingleton__init__Token_Type( ((RogueClassCmdReadSingleton*)ROGUE_CREATE_OBJECT(CmdReadSingleton)), access_1->t, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global )))));
    }
    else if (error_on_fail_2)
    {
      if (((RogueType__has_method_named__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global, access_1->name ))))
      {
        RogueScope__find_method__Type_CmdAccess_Logical_Logical( THIS, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global, access_1, true, suppress_inherited_3 );
      }
      else
      {
        RogueScope__find_method__Type_CmdAccess_Logical_Logical( THIS, type_context_0, access_1, true, suppress_inherited_3 );
      }
    }
  }
  if (!(!!(m_4)))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  if (((!(error_on_fail_2) && ((RogueMethod__is_fallback( m_4 )))) && !(((RogueType__is_aspect( m_4->type_context ))))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  RogueClassToken* t_5 = (access_1->t);
  RogueClassCmd* context_6 = (access_1->context);
  if (!(!!(context_6)))
  {
    if ((((RogueMethod__is_global( THIS->this_method ))) && !(((RogueMethod__is_global( m_4 ))))))
    {
      context_6 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdReadSingleton__init__Token_Type( ((RogueClassCmdReadSingleton*)ROGUE_CREATE_OBJECT(CmdReadSingleton)), t_5, type_context_0 ))))));
    }
    else
    {
      context_6 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), t_5, type_context_0 ))))));
    }
  }
  RogueClassCmdArgs* args_7 = (access_1->args);
  if (!(!!(args_7)))
  {
    args_7 = ((RogueClassCmdArgs*)((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))));
  }
  while (args_7->count < m_4->parameters->count)
  {
    RogueClassLocal* param_8 = (((RogueClassLocal*)(m_4->parameters->data->objects[args_7->count])));
    RogueClassCmdFlagArg* flag_arg_9 = 0;
    if (!!(access_1->flag_args))
    {
      {
        RogueCmdFlagArgList* _auto_921_18 = (access_1->flag_args);
        RogueInt32 _auto_922_19 = (0);
        for (;_auto_922_19 < _auto_921_18->count;++_auto_922_19)
        {
          RogueClassCmdFlagArg* arg_20 = (((RogueClassCmdFlagArg*)(_auto_921_18->data->objects[_auto_922_19])));
          if (((RogueString__operatorEQUALSEQUALS__String( arg_20->name, param_8->original_name ))))
          {
            flag_arg_9 = ((RogueClassCmdFlagArg*)arg_20);
            RogueCmdFlagArgList__remove__CmdFlagArg( access_1->flag_args, arg_20 );
            goto _auto_923;
          }
        }
      }
      _auto_923:;
    }
    if (!!(flag_arg_9))
    {
      if (!!(flag_arg_9->value))
      {
        RogueCmdList__add__Cmd( ((RogueCmdList*)args_7), flag_arg_9->value );
      }
      else if (((void*)param_8->_type) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))
      {
        if (flag_arg_9->is_negative)
        {
          RogueCmdList__add__Cmd( ((RogueCmdList*)args_7), ((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), flag_arg_9->t, false ))))) );
        }
        else
        {
          RogueCmdList__add__Cmd( ((RogueCmdList*)args_7), ((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), flag_arg_9->t, true ))))) );
        }
      }
      else if (flag_arg_9->is_negative)
      {
        RogueCmdList__add__Cmd( ((RogueCmdList*)args_7), ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), flag_arg_9->t, 0 ))))) );
      }
      else
      {
        RogueCmdList__add__Cmd( ((RogueCmdList*)args_7), ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), flag_arg_9->t, 1 ))))) );
      }
    }
    else
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)args_7), (call_ROGUEM58( 6, (RogueClassCmd*)(param_8->initial_value), ((RogueClassCloneArgs*)(NULL)) )) );
    }
  }
  if ((!!(access_1->flag_args) && !!(access_1->flag_args->count)))
  {
    RogueClassCmdFlagArg* arg_10 = (((RogueClassCmdFlagArg*)(access_1->flag_args->data->objects[0])));
    ROGUE_THROW(((RogueToken__error__String( arg_10->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[842] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], arg_10->name ))) ))), Rogue_literal_strings[21] ))) ))) ))));
  }
  RogueCmdArgs__resolve__Scope( args_7, THIS );
  {
    RogueClassCmdArgs* _auto_924_21 = (args_7);
    RogueInt32 i_22 = (0);
    for (;i_22 < _auto_924_21->count;++i_22)
    {
      args_7->data->objects[i_22] = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)(((RogueClassCmd*)(args_7->data->objects[i_22]))), ((RogueClassLocal*)(m_4->parameters->data->objects[i_22]))->_type, THIS ))), THIS ));
    }
  }
  RogueClassCmd* cmd_11 = 0;
  if (((RogueMethod__is_global( m_4 ))))
  {
    if (((RogueMethod__is_native( m_4 ))))
    {
      if (!!(m_4->native_code))
      {
        context_6 = ((RogueClassCmd*)(call_ROGUEM56( 25, (RogueClassCmd*)(context_6), THIS )));
        call_ROGUEM63( 19, (RogueClassCmd*)(context_6) );
        cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdCallInlineNativeRoutine__init__Token_Method_CmdArgs( ((RogueClassCmdCallInlineNativeRoutine*)ROGUE_CREATE_OBJECT(CmdCallInlineNativeRoutine)), t_5, m_4, args_7 ))))));
      }
      else
      {
        cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdCallNativeRoutine__init__Token_Method_CmdArgs( ((RogueClassCmdCallNativeRoutine*)ROGUE_CREATE_OBJECT(CmdCallNativeRoutine)), t_5, m_4, args_7 ))))));
      }
    }
    else if (((RogueMethod__is_macro( m_4 ))))
    {
      RogueClassMacroArgs* macro_args_12 = (((RogueMacroArgs__init__Cmd_Method_CmdArgs( ((RogueClassMacroArgs*)ROGUE_CREATE_OBJECT(MacroArgs)), context_6, m_4, args_7 ))));
      RogueClassCmdStatementList* inline_statements_13 = (((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))));
      {
        RogueClassCmdStatementList* _auto_938_23 = (m_4->statements);
        RogueInt32 _auto_939_24 = (0);
        for (;_auto_939_24 < _auto_938_23->count;++_auto_939_24)
        {
          RogueClassCmd* statement_25 = (((RogueClassCmd*)(_auto_938_23->data->objects[_auto_939_24])));
          RogueClassCmd* inline_statement_14 = ((call_ROGUEM58( 6, (RogueClassCmd*)(statement_25), ((RogueClassCloneArgs*)(macro_args_12)) )));
          if (!!(inline_statement_14))
          {
            RogueCmdList__add__Cmd( ((RogueCmdList*)inline_statements_13), inline_statement_14 );
          }
        }
      }
      RogueCmdStatementList__resolve__Scope( inline_statements_13, THIS );
      switch (inline_statements_13->count)
      {
        case 0:
        {
          if (!!(m_4->_return_type))
          {
            ROGUE_THROW(((RogueToken__error__String( t_5, Rogue_literal_strings[846] ))));
          }
          return (RogueClassCmd*)(((RogueCmdInlineNative__resolve__Scope( ((RogueCmdInlineNative__init__Token_String_Type( ((RogueClassCmdInlineNative*)ROGUE_CREATE_OBJECT(CmdInlineNative)), t_5, Rogue_literal_strings[0], ((RogueClassType*)(NULL)) ))), THIS ))));
          break;
        }
        case 1:
        {
          return (RogueClassCmd*)(((RogueClassCmd*)(inline_statements_13->data->objects[0])));
          break;
        }
        case 2:
        {
          ROGUE_THROW(((RogueToken__error__String( t_5, Rogue_literal_strings[847] ))));
          break;
        }
      }
    }
    else
    {
      cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdCallRoutine__init__Token_Method_CmdArgs( ((RogueClassCmdCallRoutine*)ROGUE_CREATE_OBJECT(CmdCallRoutine)), t_5, m_4, args_7 ))))));
    }
  }
  else if (((RogueMethod__is_native( m_4 ))))
  {
    if (type_context_0->is_array)
    {
      {
        RogueString* _auto_952_26 = (m_4->name);
        if (((RogueString__operatorEQUALSEQUALS__String( _auto_952_26, Rogue_literal_strings[848] ))))
        {
          if ((!!(args_7) && !!(args_7->count)))
          {
            ROGUE_THROW(((RogueToken__error__String( t_5, Rogue_literal_strings[849] ))));
          }
          return (RogueClassCmd*)(((RogueCmdReadArrayCount__resolve__Scope( ((RogueCmdReadArrayCount__init__Token_Cmd( ((RogueClassCmdReadArrayCount*)ROGUE_CREATE_OBJECT(CmdReadArrayCount)), t_5, context_6 ))), THIS ))));
        }
      }
    }
    if (!!(m_4->native_code))
    {
      cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCallInlineNativeMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallInlineNativeMethod*)ROGUE_CREATE_OBJECT(CmdCallInlineNativeMethod))), t_5, context_6, m_4, args_7 ))))))));
    }
    else
    {
      cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCallNativeMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallNativeMethod*)ROGUE_CREATE_OBJECT(CmdCallNativeMethod))), t_5, context_6, m_4, args_7 ))))))));
    }
  }
  else if (((RogueMethod__is_macro( m_4 ))))
  {
    RogueClassMacroArgs* macro_args_15 = (((RogueMacroArgs__init__Cmd_Method_CmdArgs( ((RogueClassMacroArgs*)ROGUE_CREATE_OBJECT(MacroArgs)), context_6, m_4, args_7 ))));
    RogueClassCmdStatementList* inline_statements_16 = (((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))));
    {
      RogueClassCmdStatementList* _auto_953_27 = (m_4->statements);
      RogueInt32 _auto_954_28 = (0);
      for (;_auto_954_28 < _auto_953_27->count;++_auto_954_28)
      {
        RogueClassCmd* statement_29 = (((RogueClassCmd*)(_auto_953_27->data->objects[_auto_954_28])));
        RogueClassCmd* inline_statement_17 = ((call_ROGUEM58( 6, (RogueClassCmd*)(statement_29), ((RogueClassCloneArgs*)(macro_args_15)) )));
        if (!!(inline_statement_17))
        {
          RogueCmdList__add__Cmd( ((RogueCmdList*)inline_statements_16), inline_statement_17 );
        }
      }
    }
    RogueCmdStatementList__resolve__Scope( inline_statements_16, THIS );
    switch (inline_statements_16->count)
    {
      case 0:
      {
        if (!!(m_4->_return_type))
        {
          ROGUE_THROW(((RogueToken__error__String( t_5, Rogue_literal_strings[846] ))));
        }
        return (RogueClassCmd*)(((RogueCmdInlineNative__resolve__Scope( ((RogueCmdInlineNative__init__Token_String_Type( ((RogueClassCmdInlineNative*)ROGUE_CREATE_OBJECT(CmdInlineNative)), t_5, Rogue_literal_strings[0], ((RogueClassType*)(NULL)) ))), THIS ))));
        break;
      }
      case 1:
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(inline_statements_16->data->objects[0])));
        break;
      }
      case 2:
      {
        ROGUE_THROW(((RogueToken__error__String( t_5, Rogue_literal_strings[847] ))));
        break;
      }
    }
  }
  else if (((RogueType__is_aspect( type_context_0 ))))
  {
    cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCallAspectMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallAspectMethod*)ROGUE_CREATE_OBJECT(CmdCallAspectMethod))), t_5, context_6, m_4, args_7 ))))))));
  }
  else
  {
    cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCallDynamicMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallDynamicMethod*)ROGUE_CREATE_OBJECT(CmdCallDynamicMethod))), t_5, context_6, m_4, args_7 ))))))));
  }
  return (RogueClassCmd*)((call_ROGUEM56( 25, (RogueClassCmd*)(cmd_11), THIS )));
}

RogueClassMethod* RogueScope__find_method__Type_CmdAccess_Logical_Logical( RogueClassScope* THIS, RogueClassType* type_context_0, RogueClassCmdAccess* access_1, RogueLogical error_on_fail_2, RogueLogical suppress_inherited_3 )
{
  RogueClassCandidateMethods* candidates_4 = (((RogueCandidateMethods__init__Type_CmdAccess_Logical( ((RogueClassCandidateMethods*)ROGUE_CREATE_OBJECT(CandidateMethods)), type_context_0, access_1, error_on_fail_2 ))));
  RogueMethodList* list_5 = (((RogueString_MethodListTable__get__String( type_context_0->routine_lookup_by_name, access_1->name ))));
  if (!!(list_5))
  {
    {
      RogueMethodList* _auto_958_31 = (list_5);
      RogueInt32 _auto_959_32 = (0);
      for (;_auto_959_32 < _auto_958_31->count;++_auto_959_32)
      {
        RogueClassMethod* m_33 = (((RogueClassMethod*)(_auto_958_31->data->objects[_auto_959_32])));
        RogueMethodList__add__Method( candidates_4->available, m_33 );
      }
    }
  }
  list_5 = ((RogueMethodList*)((RogueString_MethodListTable__get__String( type_context_0->method_lookup_by_name, access_1->name ))));
  if (!!(list_5))
  {
    {
      RogueMethodList* _auto_960_34 = (list_5);
      RogueInt32 _auto_961_35 = (0);
      for (;_auto_961_35 < _auto_960_34->count;++_auto_961_35)
      {
        RogueClassMethod* m_36 = (((RogueClassMethod*)(_auto_960_34->data->objects[_auto_961_35])));
        RogueMethodList__add__Method( candidates_4->available, m_36 );
      }
    }
  }
  if (!(((RogueCandidateMethods__update_available( candidates_4 )))))
  {
    return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
  }
  if (suppress_inherited_3)
  {
    RogueClassType* most_specific_type_6 = 0;
    {
      RogueMethodList* _auto_962_37 = (candidates_4->available);
      RogueInt32 _auto_963_38 = (0);
      for (;_auto_963_38 < _auto_962_37->count;++_auto_963_38)
      {
        RogueClassMethod* m_39 = (((RogueClassMethod*)(_auto_962_37->data->objects[_auto_963_38])));
        if (((RogueMethod__is_initializer( m_39 ))))
        {
          RogueClassType* m_type_context_7 = (m_39->type_context);
          if ((((void*)most_specific_type_6) == ((void*)NULL) || ((RogueType__instance_of__Type( m_type_context_7, most_specific_type_6 )))))
          {
            most_specific_type_6 = ((RogueClassType*)m_type_context_7);
          }
        }
      }
    }
    if (!!(most_specific_type_6))
    {
      {
        RogueMethodList* _auto_964_40 = (candidates_4->available);
        RogueInt32 _auto_965_41 = (0);
        for (;_auto_965_41 < _auto_964_40->count;++_auto_965_41)
        {
          RogueClassMethod* m_42 = (((RogueClassMethod*)(_auto_964_40->data->objects[_auto_965_41])));
          if (((void*)m_42->type_context) == ((void*)most_specific_type_6))
          {
            RogueMethodList__add__Method( candidates_4->compatible, m_42 );
          }
        }
      }
      if (!(((RogueCandidateMethods__update_matches( candidates_4 )))))
      {
        return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
      }
    }
  }
  RogueClassCmdArgs* args_8 = (access_1->args);
  RogueInt32 arg_count_9 = (0);
  if (!!(args_8))
  {
    RogueCmdArgs__resolve__Scope( args_8, THIS );
    arg_count_9 = ((RogueInt32)args_8->count);
    {
      RogueClassCmdArgs* _auto_966_43 = (args_8);
      RogueInt32 _auto_967_44 = (0);
      for (;_auto_967_44 < _auto_966_43->count;++_auto_967_44)
      {
        RogueClassCmd* arg_45 = (((RogueClassCmd*)(_auto_966_43->data->objects[_auto_967_44])));
        RogueType__organize__Scope( (call_ROGUEM64( 29, (RogueClassCmd*)(arg_45) )), ((RogueClassScope*)(NULL)) );
      }
    }
  }
  {
    RogueMethodList* _auto_968_46 = (candidates_4->available);
    RogueInt32 _auto_969_47 = (0);
    for (;_auto_969_47 < _auto_968_46->count;++_auto_969_47)
    {
      RogueClassMethod* m_48 = (((RogueClassMethod*)(_auto_968_46->data->objects[_auto_969_47])));
      {
        RogueLocalList* _auto_970_49 = (m_48->parameters);
        RogueInt32 _auto_971_50 = (0);
        for (;_auto_971_50 < _auto_970_49->count;++_auto_971_50)
        {
          RogueClassLocal* param_51 = (((RogueClassLocal*)(_auto_970_49->data->objects[_auto_971_50])));
          RogueType__organize__Scope( param_51->_type, ((RogueClassScope*)(NULL)) );
        }
      }
      if (((RogueMethod__accepts_arg_count__Int32( m_48, arg_count_9 ))))
      {
        RogueMethodList__add__Method( candidates_4->compatible, m_48 );
      }
    }
  }
  if (!(((RogueCandidateMethods__update_matches( candidates_4 )))))
  {
    return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
  }
  if (!!(arg_count_9))
  {
    {
      RogueMethodList* _auto_972_52 = (candidates_4->available);
      RogueInt32 _auto_973_53 = (0);
      for (;_auto_973_53 < _auto_972_52->count;++_auto_973_53)
      {
        RogueClassMethod* m_54 = (((RogueClassMethod*)(_auto_972_52->data->objects[_auto_973_53])));
        {
          {
            {
              RogueClassCmdArgs* _auto_975_55 = (args_8);
              RogueInt32 index_56 = (0);
              for (;index_56 < _auto_975_55->count;++index_56)
              {
                RogueClassType* arg_type_10 = ((call_ROGUEM64( 29, (RogueClassCmd*)(((RogueClassCmd*)(args_8->data->objects[index_56]))) )));
                RogueClassType* param_type_11 = (((RogueClassLocal*)(m_54->parameters->data->objects[index_56]))->_type);
                if ( !(((void*)arg_type_10) == ((void*)param_type_11)) ) goto _auto_976;
              }
            }
            RogueMethodList__add__Method( candidates_4->compatible, m_54 );
            goto _auto_974;
          }
          _auto_976:;
        }
        _auto_974:;
      }
    }
    if (!(((RogueCandidateMethods__refine_matches( candidates_4 )))))
    {
      return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
    }
    RogueLogical has_generic_fn_12 = (false);
    {
      RogueClassCmdArgs* _auto_977_57 = (args_8);
      RogueInt32 _auto_978_58 = (0);
      for (;_auto_978_58 < _auto_977_57->count;++_auto_978_58)
      {
        RogueClassCmd* arg_59 = (((RogueClassCmd*)(_auto_977_57->data->objects[_auto_978_58])));
        if ((call_ROGUEM61( 15, (RogueClassCmd*)(arg_59) )))
        {
          has_generic_fn_12 = ((RogueLogical)true);
          goto _auto_979;
        }
      }
    }
    _auto_979:;
    if (has_generic_fn_12)
    {
      RogueClassToken* first_generic_fn_t_13 = 0;
      {
        RogueMethodList* _auto_980_60 = (candidates_4->available);
        RogueInt32 _auto_981_61 = (0);
        for (;_auto_981_61 < _auto_980_60->count;++_auto_981_61)
        {
          RogueClassMethod* m_62 = (((RogueClassMethod*)(_auto_980_60->data->objects[_auto_981_61])));
          {
            {
              {
                RogueClassCmdArgs* _auto_983_63 = (args_8);
                RogueInt32 index_64 = (0);
                for (;index_64 < _auto_983_63->count;++index_64)
                {
                  RogueClassCmd* arg_14 = (((RogueClassCmd*)(args_8->data->objects[index_64])));
                  if ((call_ROGUEM61( 15, (RogueClassCmd*)(arg_14) )))
                  {
                    if (!(!!(first_generic_fn_t_13)))
                    {
                      first_generic_fn_t_13 = ((RogueClassToken*)arg_14->t);
                    }
                    RogueClassCmdCreateFunction* fn_15 = (((RogueClassCmdCreateFunction*)(RogueObject_as(arg_14,RogueTypeCmdCreateFunction))));
                    RogueClassType* param_type_16 = (((RogueClassLocal*)(m_62->parameters->data->objects[index_64]))->_type);
                    if ( !(((RogueString__begins_with__String( param_type_16->name, Rogue_literal_strings[838] )))) ) goto _auto_990;
                    RogueInt32 callback_param_count_17 = (0);
                    if (!!(param_type_16->callback_parameter_types))
                    {
                      callback_param_count_17 = ((RogueInt32)param_type_16->callback_parameter_types->count);
                    }
                    RogueInt32 fn_param_count_18 = (0);
                    if (!!(fn_15->parameters))
                    {
                      fn_param_count_18 = ((RogueInt32)fn_15->parameters->count);
                    }
                    if ( !(fn_param_count_18 == callback_param_count_17) ) goto _auto_990;
                  }
                }
              }
              RogueMethodList__add__Method( candidates_4->compatible, m_62 );
              goto _auto_982;
            }
            _auto_990:;
          }
          _auto_982:;
        }
      }
      if (!(((RogueCandidateMethods__refine_matches( candidates_4 )))))
      {
        return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
      }
      if (((RogueCandidateMethods__has_match( candidates_4 ))))
      {
        RogueClassMethod* m_19 = (((RogueCandidateMethods__match( candidates_4 ))));
        {
          RogueClassCmdArgs* _auto_996_65 = (args_8);
          RogueInt32 index_66 = (0);
          for (;index_66 < _auto_996_65->count;++index_66)
          {
            RogueClassCmd* arg_20 = (((RogueClassCmd*)(args_8->data->objects[index_66])));
            if ((call_ROGUEM61( 15, (RogueClassCmd*)(arg_20) )))
            {
              RogueClassCmdCreateFunction* fn_21 = (((RogueCmdCreateFunction__clone__CloneArgs( ((RogueClassCmdCreateFunction*)(RogueObject_as(arg_20,RogueTypeCmdCreateFunction))), ((RogueClassCloneArgs*)(RogueObject_as(NULL,RogueTypeCloneArgs))) ))));
              fn_21->is_generic = false;
              args_8->data->objects[index_66] = ((RogueClassCmd*)(fn_21));
              RogueClassType* callback_type_22 = (((RogueClassLocal*)(m_19->parameters->data->objects[index_66]))->_type);
              if (!!(fn_21->parameters))
              {
                {
                  RogueFnParamList* _auto_997_67 = (fn_21->parameters);
                  RogueInt32 i_68 = (0);
                  for (;i_68 < _auto_997_67->count;++i_68)
                  {
                    ((RogueClassFnParam*)(fn_21->parameters->data->objects[i_68]))->_type = ((RogueClassType*)(callback_type_22->callback_parameter_types->data->objects[i_68]));
                  }
                }
              }
              fn_21->_return_type = callback_type_22->_callback_return_type;
              if ((!!(fn_21->_return_type) && !!(fn_21->statements->count)))
              {
                RogueClassCmd* last_expression_23 = (((RogueCmdList__last( ((RogueCmdList*)fn_21->statements) ))));
                if (!(RogueObject_instance_of(last_expression_23,RogueTypeCmdReturn)))
                {
                  fn_21->statements->data->objects[(fn_21->statements->count - 1)] = ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), last_expression_23->t, last_expression_23 )))));
                }
              }
            }
          }
        }
        return (RogueClassMethod*)(((RogueScope__find_method__Type_CmdAccess_Logical_Logical( THIS, type_context_0, access_1, error_on_fail_2, suppress_inherited_3 ))));
      }
      else if (candidates_4->available->count == 0)
      {
        ROGUE_THROW(((RogueToken__error__String( first_generic_fn_t_13, Rogue_literal_strings[839] ))));
      }
      else
      {
        ROGUE_THROW(((RogueToken__error__String( first_generic_fn_t_13, Rogue_literal_strings[840] ))));
      }
    }
    {
      RogueMethodList* _auto_998_69 = (candidates_4->available);
      RogueInt32 _auto_999_70 = (0);
      for (;_auto_999_70 < _auto_998_69->count;++_auto_999_70)
      {
        RogueClassMethod* m_71 = (((RogueClassMethod*)(_auto_998_69->data->objects[_auto_999_70])));
        {
          {
            {
              RogueClassCmdArgs* _auto_1001_72 = (args_8);
              RogueInt32 index_73 = (0);
              for (;index_73 < _auto_1001_72->count;++index_73)
              {
                RogueClassType* arg_type_24 = ((call_ROGUEM64( 29, (RogueClassCmd*)(((RogueClassCmd*)(args_8->data->objects[index_73]))) )));
                RogueClassType* param_type_25 = (((RogueClassLocal*)(m_71->parameters->data->objects[index_73]))->_type);
                if ( !(((RogueType__is_compatible_with__Type( arg_type_24, param_type_25 )))) ) goto _auto_1002;
              }
            }
            RogueMethodList__add__Method( candidates_4->compatible, m_71 );
            goto _auto_1000;
          }
          _auto_1002:;
        }
        _auto_1000:;
      }
    }
    if (!(((RogueCandidateMethods__refine_matches( candidates_4 )))))
    {
      return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
    }
  }
  if (((RogueCandidateMethods__has_match( candidates_4 ))))
  {
    return (RogueClassMethod*)(((RogueCandidateMethods__match( candidates_4 ))));
  }
  if (!!(arg_count_9))
  {
    if (candidates_4->available->count > 1)
    {
      {
        RogueMethodList* _auto_1003_74 = (candidates_4->available);
        RogueInt32 _auto_1004_75 = (0);
        for (;_auto_1004_75 < _auto_1003_74->count;++_auto_1004_75)
        {
          RogueClassMethod* m1_76 = (((RogueClassMethod*)(_auto_1003_74->data->objects[_auto_1004_75])));
          {
            {
              {
                RogueMethodList* _auto_1006_77 = (candidates_4->available);
                RogueInt32 _auto_1007_78 = (0);
                for (;_auto_1007_78 < _auto_1006_77->count;++_auto_1007_78)
                {
                  RogueClassMethod* m2_79 = (((RogueClassMethod*)(_auto_1006_77->data->objects[_auto_1007_78])));
                  if (((void*)m1_76) != ((void*)m2_79))
                  {
                    RogueLogical m2_is_better_26 = (true);
                    {
                      RogueClassCmdArgs* _auto_1008_80 = (args_8);
                      RogueInt32 index_81 = (0);
                      for (;index_81 < _auto_1008_80->count;++index_81)
                      {
                        RogueClassType* m1_arg_type_27 = (((RogueClassLocal*)(m1_76->parameters->data->objects[index_81]))->_type);
                        RogueClassType* m2_arg_type_28 = (((RogueClassLocal*)(m2_79->parameters->data->objects[index_81]))->_type);
                        if ( !(((RogueType__is_equivalent_or_more_specific_than__Type( m2_arg_type_28, m1_arg_type_27 )))) ) goto _auto_1009;
                      }
                    }
                    if (true) goto _auto_1010;
                  }
                }
              }
              _auto_1010:;
              goto _auto_1005;
            }
            _auto_1009:;
            RogueMethodList__add__Method( candidates_4->compatible, m1_76 );
          }
          _auto_1005:;
        }
      }
      if (!(((RogueCandidateMethods__refine_matches( candidates_4 )))))
      {
        return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
      }
      if (((RogueCandidateMethods__has_match( candidates_4 ))))
      {
        return (RogueClassMethod*)(((RogueCandidateMethods__match( candidates_4 ))));
      }
    }
  }
  if (((RogueCandidateMethods__has_match( candidates_4 ))))
  {
    return (RogueClassMethod*)(((RogueCandidateMethods__match( candidates_4 ))));
  }
  if (arg_count_9 == 1)
  {
    {
      RogueMethodList* _auto_1011_82 = (candidates_4->available);
      RogueInt32 _auto_1012_83 = (0);
      for (;_auto_1012_83 < _auto_1011_82->count;++_auto_1012_83)
      {
        RogueClassMethod* m_84 = (((RogueClassMethod*)(_auto_1011_82->data->objects[_auto_1012_83])));
        if (m_84->parameters->count == 1)
        {
          RogueClassType* arg_type_29 = ((call_ROGUEM64( 29, (RogueClassCmd*)(((RogueClassCmd*)(args_8->data->objects[0]))) )));
          RogueClassType* param_type_30 = (((RogueClassLocal*)(m_84->parameters->data->objects[0]))->_type);
          RogueType__organize__Scope( param_type_30, ((RogueClassScope*)(NULL)) );
          if ((((void*)param_type_30) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object) && ((RogueType__has_method_named__String( arg_type_29, Rogue_literal_strings[841] )))))
          {
            args_8->data->objects[0] = (call_ROGUEM57( 5, (RogueClassCmd*)(((RogueClassCmd*)(args_8->data->objects[0]))), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object, THIS ));
            return (RogueClassMethod*)(m_84);
          }
          else if ((((void*)param_type_30) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String) && ((RogueType__has_method_named__String( arg_type_29, Rogue_literal_strings[400] )))))
          {
            args_8->data->objects[0] = (call_ROGUEM57( 5, (RogueClassCmd*)(((RogueClassCmd*)(args_8->data->objects[0]))), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String, THIS ));
            return (RogueClassMethod*)(m_84);
          }
          else if (((RogueType__has_method_named__String( arg_type_29, ((RogueString__operatorPLUS__String( Rogue_literal_strings[344], param_type_30->name ))) ))))
          {
            args_8->data->objects[0] = (call_ROGUEM57( 5, (RogueClassCmd*)(((RogueClassCmd*)(args_8->data->objects[0]))), param_type_30, THIS ));
            return (RogueClassMethod*)(m_84);
          }
        }
      }
    }
  }
  RogueCandidateMethods__update_matches( candidates_4 );
  return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
}

RogueClassScope* RogueScope__init_object( RogueClassScope* THIS )
{
  THIS->local_list = ((RogueLocalList__init( ((RogueLocalList*)ROGUE_CREATE_OBJECT(LocalList)) )));
  THIS->control_stack = ((RogueCmdControlStructureList__init( ((RogueCmdControlStructureList*)ROGUE_CREATE_OBJECT(CmdControlStructureList)) )));
  return (RogueClassScope*)(THIS);
}

RogueString* RogueRequisiteItemArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[723]);
}

RogueString* RogueMethodList__to_String( RogueMethodList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueMethodList* _auto_1013_2 = (THIS);
    RogueInt32 _auto_1014_3 = (0);
    for (;_auto_1014_3 < _auto_1013_2->count;++_auto_1014_3)
    {
      RogueClassMethod* value_4 = (((RogueClassMethod*)(_auto_1013_2->data->objects[_auto_1014_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ((RogueMethod__to_String( value_4 ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueMethodList__type_name( RogueMethodList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[682]);
}

RogueMethodList* RogueMethodList__init_object( RogueMethodList* THIS )
{
  return (RogueMethodList*)(THIS);
}

RogueMethodList* RogueMethodList__init( RogueMethodList* THIS )
{
  RogueMethodList__init__Int32( THIS, 10 );
  return (RogueMethodList*)(THIS);
}

RogueMethodList* RogueMethodList__init__Int32( RogueMethodList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassMethod*), true );
  return (RogueMethodList*)(THIS);
}

RogueMethodList* RogueMethodList__add__Method( RogueMethodList* THIS, RogueClassMethod* value_0 )
{
  ((RogueMethodList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueMethodList*)(THIS);
}

RogueMethodList* RogueMethodList__add__MethodList( RogueMethodList* THIS, RogueMethodList* other_0 )
{
  RogueMethodList__reserve__Int32( THIS, other_0->count );
  {
    RogueMethodList* _auto_1019_1 = (other_0);
    RogueInt32 _auto_1020_2 = (0);
    for (;_auto_1020_2 < _auto_1019_1->count;++_auto_1020_2)
    {
      RogueClassMethod* value_3 = (((RogueClassMethod*)(_auto_1019_1->data->objects[_auto_1020_2])));
      RogueMethodList__add__Method( THIS, value_3 );
    }
  }
  return (RogueMethodList*)(THIS);
}

RogueInt32 RogueMethodList__capacity( RogueMethodList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueMethodList* RogueMethodList__clear( RogueMethodList* THIS )
{
  THIS->count = 0;
  return (RogueMethodList*)(THIS);
}

RogueOptionalInt32 RogueMethodList__locate__Method( RogueMethodList* THIS, RogueClassMethod* value_0 )
{
  {
    RogueMethodList* _auto_1035_1 = (THIS);
    RogueInt32 i_2 = (0);
    for (;i_2 < _auto_1035_1->count;++i_2)
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)value_0), ((RogueObject*)(((RogueClassMethod*)(THIS->data->objects[i_2])))) ))))
      {
        return (RogueOptionalInt32)(RogueOptionalInt32( i_2 ));
      }
    }
  }
  return (RogueOptionalInt32)(RogueOptionalInt32());
}

RogueMethodList* RogueMethodList__reserve__Int32( RogueMethodList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassMethod*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueMethodList__capacity( THIS ))) + ((RogueMethodList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassMethod*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueMethodList*)(THIS);
}

RogueClassMethod* RogueMethodList__remove__Method( RogueMethodList* THIS, RogueClassMethod* value_0 )
{
  RogueOptionalInt32 index_1 = (((RogueMethodList__locate__Method( THIS, value_0 ))));
  if (index_1.exists)
  {
    return (RogueClassMethod*)(((RogueMethodList__remove_at__Int32( THIS, index_1.value ))));
  }
  else
  {
    RogueClassMethod* zero_value_2 = 0;
    return (RogueClassMethod*)(zero_value_2);
  }
}

RogueClassMethod* RogueMethodList__remove_at__Int32( RogueMethodList* THIS, RogueInt32 index_0 )
{
  RogueClassMethod* result_1 = (((RogueClassMethod*)(THIS->data->objects[index_0])));
  RogueArray_set(THIS->data,index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  RogueClassMethod* zero_value_2 = 0;
  --THIS->count;
  THIS->data->objects[THIS->count] = zero_value_2;
  return (RogueClassMethod*)(result_1);
}

RogueString* RogueMethodArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[724]);
}

RogueString* RogueTemplateArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[725]);
}

RogueString* RogueFunction_Type_RETURNSLogical__type_name( RogueClassFunction_Type_RETURNSLogical* THIS )
{
  return (RogueString*)(Rogue_literal_strings[625]);
}

RogueLogical RogueFunction_Type_RETURNSLogical__call__Type( RogueClassFunction_Type_RETURNSLogical* THIS, RogueClassType* param1_0 )
{
  return (RogueLogical)(false);
}

RogueClassFunction_Type_RETURNSLogical* RogueFunction_Type_RETURNSLogical__init_object( RogueClassFunction_Type_RETURNSLogical* THIS )
{
  return (RogueClassFunction_Type_RETURNSLogical*)(THIS);
}

RogueString* RogueFunction_197__type_name( RogueClassFunction_197* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1024]);
}

RogueLogical RogueFunction_197__call__Type( RogueClassFunction_197* THIS, RogueClassType* type_0 )
{
  return (RogueLogical)((((RogueType__is_class( type_0 ))) && type_0->is_used));
}

RogueClassFunction_197* RogueFunction_197__init_object( RogueClassFunction_197* THIS )
{
  return (RogueClassFunction_197*)(THIS);
}

RogueString* RogueFunction_198__type_name( RogueClassFunction_198* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1025]);
}

RogueLogical RogueFunction_198__call__Type( RogueClassFunction_198* THIS, RogueClassType* type_0 )
{
  return (RogueLogical)((((RogueType__is_aspect( type_0 ))) && type_0->is_used));
}

RogueClassFunction_198* RogueFunction_198__init_object( RogueClassFunction_198* THIS )
{
  return (RogueClassFunction_198*)(THIS);
}

RogueString* RogueCPPWriter__type_name( RogueClassCPPWriter* THIS )
{
  return (RogueString*)(Rogue_literal_strings[626]);
}

RogueClassCPPWriter* RogueCPPWriter__init__String( RogueClassCPPWriter* THIS, RogueString* _auto_222_0 )
{
  THIS->filepath = _auto_222_0;
  return (RogueClassCPPWriter*)(THIS);
}

void RogueCPPWriter__close( RogueClassCPPWriter* THIS )
{
  RogueFile__save__String_String( ((RogueFile__init__String( ((RogueClassFile*)ROGUE_CREATE_OBJECT(File)), THIS->filepath )))->filepath, ((RogueStringBuilder__to_String( THIS->buffer ))) );
}

void RogueCPPWriter__print_indent( RogueClassCPPWriter* THIS )
{
  if (THIS->needs_indent)
  {
    THIS->needs_indent = false;
    {
      RogueInt32 _auto_220_0 = (1);
      RogueInt32 _auto_221_1 = (THIS->indent);
      for (;_auto_220_0 <= _auto_221_1;++_auto_220_0)
      {
        RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)' ' );
      }
    }
  }
}

RogueClassCPPWriter* RogueCPPWriter__print__Int64( RogueClassCPPWriter* THIS, RogueInt64 value_0 )
{
  RogueCPPWriter__print_indent( THIS );
  RogueStringBuilder__print__Int64( THIS->buffer, value_0 );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print__Int32( RogueClassCPPWriter* THIS, RogueInt32 value_0 )
{
  RogueCPPWriter__print_indent( THIS );
  RogueStringBuilder__print__Int32( THIS->buffer, value_0 );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print__Real64( RogueClassCPPWriter* THIS, RogueReal64 value_0 )
{
  RogueCPPWriter__print_indent( THIS );
  RogueStringBuilder__print__Real64( THIS->buffer, value_0 );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print__Character( RogueClassCPPWriter* THIS, RogueCharacter value_0 )
{
  RogueCPPWriter__print_indent( THIS );
  RogueStringBuilder__print__Character( THIS->buffer, value_0 );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print__String( RogueClassCPPWriter* THIS, RogueString* value_0 )
{
  RogueLogical needs_newline_1 = (false);
  if (((RogueString__contains__String( value_0, ((RogueCharacter__to_String( (RogueCharacter)10 ))) ))))
  {
    {
      RogueClassLineReader* _auto_1045_2 = (((RogueLineReader__init__String( ((RogueClassLineReader*)ROGUE_CREATE_OBJECT(LineReader)), value_0 ))));
      while (((RogueLineReader__has_another( _auto_1045_2 ))))
      {
        RogueString* line_3 = (((RogueLineReader__read( _auto_1045_2 ))));
        if (needs_newline_1)
        {
          RogueCPPWriter__println( THIS );
        }
        RogueCPPWriter__print_indent( THIS );
        RogueStringBuilder__print__String( THIS->buffer, line_3 );
        needs_newline_1 = ((RogueLogical)true);
      }
    }
  }
  else
  {
    RogueCPPWriter__print_indent( THIS );
    RogueStringBuilder__print__String( THIS->buffer, value_0 );
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__println( RogueClassCPPWriter* THIS )
{
  RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)10 );
  ++THIS->line_number;
  THIS->needs_indent = true;
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__println__String( RogueClassCPPWriter* THIS, RogueString* value_0 )
{
  RogueCPPWriter__print__String( THIS, value_0 );
  RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)10 );
  ++THIS->line_number;
  THIS->needs_indent = true;
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print__Type( RogueClassCPPWriter* THIS, RogueClassType* type_0 )
{
  if (((!!(type_0) && type_0->is_optional) && ((RogueType__is_reference( type_0->_element_type )))))
  {
    return (RogueClassCPPWriter*)(((RogueCPPWriter__print__Type( THIS, type_0->_element_type ))));
  }
  else
  {
    RogueCPPWriter__print_type_name__Type( THIS, type_0 );
    if ((!!(type_0) && ((RogueType__is_reference( type_0 )))))
    {
      RogueStringBuilder__print__String( THIS->buffer, Rogue_literal_strings[212] );
    }
    return (RogueClassCPPWriter*)(THIS);
  }
}

RogueClassCPPWriter* RogueCPPWriter__print_cast__Type_Type( RogueClassCPPWriter* THIS, RogueClassType* from_type_0, RogueClassType* to_type_1 )
{
  if (((void*)from_type_0) == ((void*)to_type_1))
  {
    return (RogueClassCPPWriter*)(THIS);
  }
  return (RogueClassCPPWriter*)(((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( THIS, Rogue_literal_strings[66] ))), to_type_1 ))), Rogue_literal_strings[67] ))));
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_open_cast__Type_Type( RogueClassCPPWriter* THIS, RogueClassType* from_type_0, RogueClassType* to_type_1 )
{
  if (((void*)from_type_0) == ((void*)to_type_1))
  {
    return (RogueClassCPPWriter*)(THIS);
  }
  RogueCPPWriter__print__String( THIS, Rogue_literal_strings[66] );
  return (RogueClassCPPWriter*)(((RogueCPPWriter__print_cast__Type_Type( THIS, from_type_0, to_type_1 ))));
}

RogueClassCPPWriter* RogueCPPWriter__print_close_cast__Type_Type( RogueClassCPPWriter* THIS, RogueClassType* from_type_0, RogueClassType* to_type_1 )
{
  if (((void*)from_type_0) == ((void*)to_type_1))
  {
    return (RogueClassCPPWriter*)(THIS);
  }
  RogueCPPWriter__print__String( THIS, Rogue_literal_strings[67] );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_cast__Type_Type_Cmd( RogueClassCPPWriter* THIS, RogueClassType* from_type_0, RogueClassType* to_type_1, RogueClassCmd* cmd_2 )
{
  if (((void*)from_type_0) == ((void*)to_type_1))
  {
    call_ROGUEM68( 30, (RogueClassCmd*)(cmd_2), THIS, false );
  }
  else
  {
    RogueCPPWriter__print__String( THIS, Rogue_literal_strings[66] );
    RogueCPPWriter__print_cast__Type_Type( THIS, from_type_0, to_type_1 );
    call_ROGUEM68( 30, (RogueClassCmd*)(cmd_2), THIS, false );
    RogueCPPWriter__print__String( THIS, Rogue_literal_strings[67] );
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_access_operator__Type( RogueClassCPPWriter* THIS, RogueClassType* type_0 )
{
  if (((RogueType__is_reference( type_0 ))))
  {
    return (RogueClassCPPWriter*)(((RogueCPPWriter__print__String( THIS, Rogue_literal_strings[173] ))));
  }
  else
  {
    return (RogueClassCPPWriter*)(((RogueCPPWriter__print__String( THIS, Rogue_literal_strings[51] ))));
  }
}

RogueClassCPPWriter* RogueCPPWriter__print_type_name__Type( RogueClassCPPWriter* THIS, RogueClassType* type_0 )
{
  RogueCPPWriter__print_indent( THIS );
  if (!!(type_0))
  {
    RogueStringBuilder__print__String( THIS->buffer, type_0->cpp_class_name );
  }
  else
  {
    RogueStringBuilder__print__String( THIS->buffer, Rogue_literal_strings[454] );
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_type_info__Type( RogueClassCPPWriter* THIS, RogueClassType* type_0 )
{
  RogueCPPWriter__print_indent( THIS );
  RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( THIS->buffer, Rogue_literal_strings[447] ))), type_0->cpp_name );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_default_value__Type( RogueClassCPPWriter* THIS, RogueClassType* type_0 )
{
  if (((type_0->is_optional && ((RogueType__is_reference( type_0->_element_type )))) || !(((RogueType__is_compound( type_0 ))))))
  {
    RogueStringBuilder__print__String( THIS->buffer, Rogue_literal_strings[470] );
  }
  else
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( THIS, type_0 ))), Rogue_literal_strings[471] );
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_literal_character__Character_Logical( RogueClassCPPWriter* THIS, RogueCharacter ch_0, RogueLogical in_string_1 )
{
  if ((((RogueInt32)(ch_0)) >= 32 && ((RogueInt32)(ch_0)) <= 126))
  {
    switch (((RogueInt32)(ch_0)))
    {
      case (RogueCharacter)'"':
      {
        if (in_string_1)
        {
          RogueCPPWriter__print__String( THIS, Rogue_literal_strings[553] );
        }
        else
        {
          RogueCPPWriter__print__String( THIS, Rogue_literal_strings[554] );
        }
        break;
      }
      case (RogueCharacter)'\'':
      {
        if (in_string_1)
        {
          RogueCPPWriter__print__String( THIS, Rogue_literal_strings[55] );
        }
        else
        {
          RogueCPPWriter__print__String( THIS, Rogue_literal_strings[555] );
        }
        break;
      }
      case (RogueCharacter)'\\':
      {
        RogueCPPWriter__print__String( THIS, Rogue_literal_strings[556] );
        break;
      }
      default:
      {
        RogueCPPWriter__print__Character( THIS, ch_0 );
      }
    }
  }
  else
  {
    switch (((RogueInt32)(ch_0)))
    {
      case 10:
      {
        RogueCPPWriter__print__String( THIS, Rogue_literal_strings[557] );
        break;
      }
      default:
      {
        RogueCPPWriter__print__String( THIS, Rogue_literal_strings[175] );
        RogueCPPWriter__print__Int32( THIS, (((RogueInt32)(ch_0)) / 64) );
        RogueCPPWriter__print__Int32( THIS, ((((RogueInt32)(ch_0)) & 63) / 8) );
        RogueCPPWriter__print__Int32( THIS, (((RogueInt32)(ch_0)) & 7) );
      }
    }
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_literal_string__String( RogueClassCPPWriter* THIS, RogueString* st_0 )
{
  if (((void*)st_0) == ((void*)NULL))
  {
    RogueCPPWriter__print__String( THIS, Rogue_literal_strings[470] );
    return (RogueClassCPPWriter*)(THIS);
  }
  RogueCPPWriter__print__String( THIS, Rogue_literal_strings[554] );
  {
    RogueString* _auto_1047_1 = (st_0);
    RogueInt32 _auto_1048_2 = (0);
    for (;_auto_1048_2 < _auto_1047_1->count;++_auto_1048_2)
    {
      RogueCharacter ch_3 = (_auto_1047_1->characters[_auto_1048_2]);
      RogueCPPWriter__print_literal_character__Character_Logical( THIS, ch_3, true );
    }
  }
  RogueCPPWriter__print__String( THIS, Rogue_literal_strings[554] );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_native_code__Token_Type_Method_String( RogueClassCPPWriter* THIS, RogueClassToken* t_0, RogueClassType* type_context_1, RogueClassMethod* method_context_2, RogueString* code_3 )
{
  {
    RogueClassLineReader* _auto_1049_9 = (((RogueLineReader__init__String( ((RogueClassLineReader*)ROGUE_CREATE_OBJECT(LineReader)), code_3 ))));
    while (((RogueLineReader__has_another( _auto_1049_9 ))))
    {
      RogueString* line_10 = (((RogueLineReader__read( _auto_1049_9 ))));
      RogueInt32 original_indent_4 = (THIS->indent);
      if (((RogueString__begins_with__Character( line_10, (RogueCharacter)'#' ))))
      {
        THIS->indent = 0;
      }
      RogueOptionalInt32 marker_5 = (((RogueString__locate__Character_OptionalInt32( line_10, (RogueCharacter)'$', RogueOptionalInt32() ))));
      while (marker_5.exists)
      {
        RogueString* name_6 = 0;
        RogueInt32 i1_7 = (marker_5.value);
        if (i1_7 > 0)
        {
          RogueCPPWriter__print__String( THIS, ((RogueString__leftmost__Int32( line_10, i1_7 ))) );
        }
        RogueInt32 i2_8 = ((i1_7 + 1));
        if ((i2_8 < line_10->count && line_10->characters[i2_8] == (RogueCharacter)'('))
        {
          ++i2_8;
          while ((i2_8 < line_10->count && line_10->characters[i2_8] != (RogueCharacter)')'))
          {
            ++i2_8;
          }
          name_6 = ((RogueString*)((RogueString__from__Int32_Int32( line_10, (i1_7 + 2), (i2_8 - 1) ))));
          line_10 = ((RogueString*)((RogueString__from__Int32( line_10, (i2_8 + 1) ))));
        }
        else
        {
          while ((i2_8 < line_10->count && ((RogueCharacter__is_identifier( line_10->characters[i2_8] )))))
          {
            ++i2_8;
          }
          name_6 = ((RogueString*)((RogueString__from__Int32_Int32( line_10, (i1_7 + 1), (i2_8 - 1) ))));
          line_10 = ((RogueString*)((RogueString__from__Int32( line_10, i2_8 ))));
        }
        RogueCPPWriter__print_native_marker__Token_Type_Method_String( THIS, t_0, type_context_1, method_context_2, name_6 );
        marker_5 = ((RogueOptionalInt32)((RogueString__locate__Character_OptionalInt32( line_10, (RogueCharacter)'$', RogueOptionalInt32() ))));
      }
      if (!!(line_10->count))
      {
        RogueCPPWriter__println__String( THIS, line_10 );
      }
      THIS->indent = original_indent_4;
    }
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_native_marker__Token_Type_Method_String( RogueClassCPPWriter* THIS, RogueClassToken* t_0, RogueClassType* type_context_1, RogueClassMethod* method_context_2, RogueString* name_3 )
{
  RogueString* operation_4 = (((RogueString__after_first__Character( name_3, (RogueCharacter)'.' ))));
  name_3 = ((RogueString*)((RogueString__before_first__Character( name_3, (RogueCharacter)'.' ))));
  {
    if (((RogueString__operatorEQUALSEQUALS__String( name_3, Rogue_literal_strings[243] ))))
    {
      RogueCPPWriter__print__String( THIS, Rogue_literal_strings[243] );
    }
    else if (((RogueString__operatorEQUALSEQUALS__String( name_3, Rogue_literal_strings[168] ))))
    {
      RogueCPPWriter__print_native_code_marker_value__Token_String_String_String_Type( THIS, t_0, name_3, operation_4, Rogue_literal_strings[466], type_context_1 );
    }
    else
    {
      if (((RogueString__begins_with__Character( name_3, (RogueCharacter)'$' ))))
      {
        if (!!(type_context_1->specializers))
        {
          {
            RogueTypeSpecializerList* _auto_1050_7 = (type_context_1->specializers);
            RogueInt32 _auto_1051_8 = (0);
            for (;_auto_1051_8 < _auto_1050_7->count;++_auto_1051_8)
            {
              RogueClassTypeSpecializer* specializer_9 = (((RogueClassTypeSpecializer*)(_auto_1050_7->data->objects[_auto_1051_8])));
              if (((RogueString__operatorEQUALSEQUALS__String( specializer_9->name, name_3 ))))
              {
                {
                  if (((RogueString__operatorEQUALSEQUALS__String( operation_4, Rogue_literal_strings[0] ))))
                  {
                    RogueClassType* type_5 = (((RogueType__organize__Scope( ((Rogue_Parser__parse_type( ((RogueParser__init__TokenList_Logical( ((RogueClassParser*)ROGUE_CREATE_OBJECT(Parser)), specializer_9->tokens, false ))) ))), ((RogueClassScope*)(NULL)) ))));
                    RogueCPPWriter__print__Type( THIS, type_5 );
                  }
                  else
                  {
                    ROGUE_THROW(((RogueToken__error__String( t_0, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[465] ))), ((RogueString__operatorPLUS__Character( Rogue_literal_strings[0], (RogueCharacter)'$' ))) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], name_3 ))) ))), Rogue_literal_strings[51] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], operation_4 ))) ))) ))) ))));
                  }
                }
                goto _auto_1052;
              }
            }
          }
        }
      }
      if (!!(method_context_2))
      {
        {
          RogueLocalList* _auto_1053_10 = (method_context_2->locals);
          RogueInt32 _auto_1054_11 = (0);
          for (;_auto_1054_11 < _auto_1053_10->count;++_auto_1054_11)
          {
            RogueClassLocal* v_12 = (((RogueClassLocal*)(_auto_1053_10->data->objects[_auto_1054_11])));
            if (((RogueString__operatorEQUALSEQUALS__String( v_12->name, name_3 ))))
            {
              RogueCPPWriter__print_native_code_marker_value__Token_String_String_String_Type( THIS, t_0, name_3, operation_4, ((RogueLocal__cpp_name( v_12 ))), v_12->_type );
              goto _auto_1052;
            }
          }
        }
      }
      RogueClassProperty* p_6 = (((RogueString_PropertyTable__get__String( type_context_1->property_lookup, name_3 ))));
      if (!!(p_6))
      {
        RogueCPPWriter__print_native_code_marker_value__Token_String_String_String_Type( THIS, t_0, name_3, operation_4, ((RogueString__operatorPLUS__String( Rogue_literal_strings[467], p_6->cpp_name ))), p_6->_type );
        goto _auto_1052;
      }
      RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( THIS, Rogue_literal_strings[243] ))), name_3 );
    }
  }
  _auto_1052:;
  return (RogueClassCPPWriter*)(THIS);
}

void RogueCPPWriter__print_native_code_marker_value__Token_String_String_String_Type( RogueClassCPPWriter* THIS, RogueClassToken* t_0, RogueString* name_1, RogueString* operation_2, RogueString* default_3, RogueClassType* type_4 )
{
  {
    if (((RogueString__operatorEQUALSEQUALS__String( operation_2, Rogue_literal_strings[460] ))))
    {
      if ((!!(type_4) && ((RogueType__is_reference( type_4 )))))
      {
        RogueCPPWriter__print__String( ((RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__Character( THIS, (RogueCharacter)'(' ))), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object, type_4 ))), Rogue_literal_strings[461] );
        RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print_cast__Type_Type( THIS, type_4, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object ))), default_3 ))), Rogue_literal_strings[462] );
      }
      else
      {
        RogueCPPWriter__print__String( THIS, default_3 );
      }
    }
    else if (((RogueString__operatorEQUALSEQUALS__String( operation_2, Rogue_literal_strings[463] ))))
    {
      if ((!!(type_4) && ((RogueType__is_reference( type_4 )))))
      {
        RogueCPPWriter__print__String( ((RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__Character( THIS, (RogueCharacter)'(' ))), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object, type_4 ))), Rogue_literal_strings[464] );
        RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print_cast__Type_Type( THIS, type_4, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object ))), default_3 ))), Rogue_literal_strings[462] );
      }
      else
      {
        RogueCPPWriter__print__String( THIS, default_3 );
      }
    }
    else if (((RogueString__operatorEQUALSEQUALS__String( operation_2, Rogue_literal_strings[426] ))))
    {
      RogueCPPWriter__print__Type( THIS, type_4 );
    }
    else if (((RogueString__operatorEQUALSEQUALS__String( operation_2, Rogue_literal_strings[0] ))))
    {
      RogueCPPWriter__print__String( THIS, default_3 );
    }
    else
    {
      ROGUE_THROW(((RogueToken__error__String( t_0, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[465] ))), ((RogueString__operatorPLUS__Character( Rogue_literal_strings[0], (RogueCharacter)'$' ))) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], name_1 ))) ))), Rogue_literal_strings[51] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], operation_2 ))) ))) ))) ))));
    }
  }
}

void RogueCPPWriter__mark_statement_start__String_Int32_Int32( RogueClassCPPWriter* THIS, RogueString* statement_filepath_0, RogueInt32 start_line_1, RogueInt32 end_line_2 )
{
}

void RogueCPPWriter__mark_statement_end( RogueClassCPPWriter* THIS )
{
}

void RogueCPPWriter__mark_method_start__Type_Method( RogueClassCPPWriter* THIS, RogueClassType* t_0, RogueClassMethod* m_1 )
{
  if (((RogueMethod__omit_output( m_1 ))))
  {
    return;
  }
}

void RogueCPPWriter__mark_method_end( RogueClassCPPWriter* THIS )
{
}

void RogueCPPWriter__mark_routine_start__Method( RogueClassCPPWriter* THIS, RogueClassMethod* m_0 )
{
  if (((RogueMethod__omit_output( m_0 ))))
  {
    return;
  }
}

void RogueCPPWriter__mark_routine_end( RogueClassCPPWriter* THIS )
{
}

RogueClassCPPWriter* RogueCPPWriter__init_object( RogueClassCPPWriter* THIS )
{
  THIS->buffer = ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) )));
  THIS->indent = 0;
  THIS->needs_indent = true;
  THIS->line_number = 1;
  THIS->temp_buffer = ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) )));
  return (RogueClassCPPWriter*)(THIS);
}

RogueString* RogueString_MethodTable__to_String( RogueClassString_MethodTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_MethodTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_MethodTable__type_name( RogueClassString_MethodTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[627]);
}

RogueClassString_MethodTable* RogueString_MethodTable__init( RogueClassString_MethodTable* THIS )
{
  RogueString_MethodTable__init__Int32( THIS, 16 );
  return (RogueClassString_MethodTable*)(THIS);
}

RogueClassString_MethodTable* RogueString_MethodTable__init__Int32( RogueClassString_MethodTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_MethodTableEntryList__init__Int32_String_MethodTableEntry( ((RogueTableEntry_of_String_MethodList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_MethodList)), bin_count_0, ((RogueClassString_MethodTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_MethodTable*)(THIS);
}

void RogueString_MethodTable__clear( RogueClassString_MethodTable* THIS )
{
  {
    RogueTableEntry_of_String_MethodList* _auto_1061_0 = (THIS->bins);
    RogueInt32 i_1 = (0);
    for (;i_1 < _auto_1061_0->count;++i_1)
    {
      THIS->bins->data->objects[i_1] = ((RogueClassString_MethodTableEntry*)(NULL));
    }
  }
  RogueStringList__clear( THIS->keys );
}

RogueClassString_MethodTableEntry* RogueString_MethodTable__find__String( RogueClassString_MethodTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  RogueClassString_MethodTableEntry* entry_2 = (((RogueClassString_MethodTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( entry_2->key, key_0 )))))
    {
      return (RogueClassString_MethodTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_MethodTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_MethodTableEntry*)(((RogueClassString_MethodTableEntry*)(NULL)));
}

RogueClassMethod* RogueString_MethodTable__get__String( RogueClassString_MethodTable* THIS, RogueString* key_0 )
{
  RogueClassString_MethodTableEntry* entry_1 = (((RogueString_MethodTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassMethod*)(entry_1->value);
  }
  else
  {
    RogueClassMethod* default_value_2 = 0;
    return (RogueClassMethod*)(default_value_2);
  }
}

RogueClassString_MethodTable* RogueString_MethodTable__set__String_Method( RogueClassString_MethodTable* THIS, RogueString* key_0, RogueClassMethod* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_MethodTableEntry* entry_4 = (((RogueClassString_MethodTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( entry_4->key, key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_MethodTable*)(THIS);
    }
    entry_4 = ((RogueClassString_MethodTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_MethodTableEntry*)((RogueString_MethodTableEntry__init__String_Method_Int32( ((RogueClassString_MethodTableEntry*)ROGUE_CREATE_OBJECT(String_MethodTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_MethodTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
  return (RogueClassString_MethodTable*)(THIS);
}

RogueStringBuilder* RogueString_MethodTable__print_to__StringBuilder( RogueClassString_MethodTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_MethodTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_MethodTable* RogueString_MethodTable__init_object( RogueClassString_MethodTable* THIS )
{
  return (RogueClassString_MethodTable*)(THIS);
}

RogueString* RogueLocalList__to_String( RogueLocalList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueLocalList* _auto_1062_2 = (THIS);
    RogueInt32 _auto_1063_3 = (0);
    for (;_auto_1063_3 < _auto_1062_2->count;++_auto_1063_3)
    {
      RogueClassLocal* value_4 = (((RogueClassLocal*)(_auto_1062_2->data->objects[_auto_1063_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueLocalList__type_name( RogueLocalList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[683]);
}

RogueLocalList* RogueLocalList__init_object( RogueLocalList* THIS )
{
  return (RogueLocalList*)(THIS);
}

RogueLocalList* RogueLocalList__init( RogueLocalList* THIS )
{
  RogueLocalList__init__Int32( THIS, 10 );
  return (RogueLocalList*)(THIS);
}

RogueLocalList* RogueLocalList__init__Int32( RogueLocalList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassLocal*), true );
  return (RogueLocalList*)(THIS);
}

RogueLocalList* RogueLocalList__add__Local( RogueLocalList* THIS, RogueClassLocal* value_0 )
{
  ((RogueLocalList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueLocalList*)(THIS);
}

RogueInt32 RogueLocalList__capacity( RogueLocalList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueLocalList* RogueLocalList__clear( RogueLocalList* THIS )
{
  THIS->count = 0;
  return (RogueLocalList*)(THIS);
}

RogueLocalList* RogueLocalList__reserve__Int32( RogueLocalList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassLocal*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueLocalList__capacity( THIS ))) + ((RogueLocalList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassLocal*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueLocalList*)(THIS);
}

RogueClassLocal* RogueLocalList__remove_at__Int32( RogueLocalList* THIS, RogueInt32 index_0 )
{
  RogueClassLocal* result_1 = (((RogueClassLocal*)(THIS->data->objects[index_0])));
  RogueArray_set(THIS->data,index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  RogueClassLocal* zero_value_2 = 0;
  --THIS->count;
  THIS->data->objects[THIS->count] = zero_value_2;
  return (RogueClassLocal*)(result_1);
}

RogueClassLocal* RogueLocalList__remove_last( RogueLocalList* THIS )
{
  return (RogueClassLocal*)(((RogueLocalList__remove_at__Int32( THIS, (THIS->count - 1) ))));
}

RogueString* RogueLocal__type_name( RogueClassLocal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[628]);
}

RogueClassLocal* RogueLocal__init__Token_String( RogueClassLocal* THIS, RogueClassToken* _auto_249_0, RogueString* _auto_250_1 )
{
  THIS->name = _auto_250_1;
  THIS->t = _auto_249_0;
  THIS->original_name = THIS->name;
  return (RogueClassLocal*)(THIS);
}

RogueClassLocal* RogueLocal__clone__CloneArgs( RogueClassLocal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassLocal* result_1 = (((RogueLocal__init__Token_String( ((RogueClassLocal*)ROGUE_CREATE_OBJECT(Local)), THIS->t, THIS->name ))));
  result_1->original_name = THIS->original_name;
  result_1->_cpp_name = THIS->_cpp_name;
  result_1->_type = THIS->_type;
  result_1->index = THIS->index;
  if (!!(THIS->initial_value))
  {
    result_1->initial_value = (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->initial_value), clone_args_0 ));
  }
  return (RogueClassLocal*)(result_1);
}

RogueString* RogueLocal__cpp_name( RogueClassLocal* THIS )
{
  if (!(!!(THIS->_cpp_name)))
  {
    THIS->_cpp_name = ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ((RogueString__operatorPLUS__Int32( ((RogueString__operatorPLUS__String( THIS->name, Rogue_literal_strings[406] ))), THIS->index ))) )));
  }
  return (RogueString*)(THIS->_cpp_name);
}

RogueClassLocal* RogueLocal__init_object( RogueClassLocal* THIS )
{
  return (RogueClassLocal*)(THIS);
}

RogueString* RogueLocalArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[726]);
}

RogueString* RogueInt32List__to_String( RogueInt32List* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueInt32List* _auto_1094_2 = (THIS);
    RogueInt32 _auto_1095_3 = (0);
    for (;_auto_1095_3 < _auto_1094_2->count;++_auto_1095_3)
    {
      RogueInt32 value_4 = (_auto_1094_2->data->integers[_auto_1095_3]);
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if ((false))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ((RogueInt32__to_String( value_4 ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueInt32List__type_name( RogueInt32List* THIS )
{
  return (RogueString*)(Rogue_literal_strings[684]);
}

RogueInt32List* RogueInt32List__init_object( RogueInt32List* THIS )
{
  return (RogueInt32List*)(THIS);
}

RogueInt32List* RogueInt32List__init( RogueInt32List* THIS )
{
  RogueInt32List__init__Int32( THIS, 10 );
  return (RogueInt32List*)(THIS);
}

RogueInt32List* RogueInt32List__init__Int32( RogueInt32List* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueInt32) );
  return (RogueInt32List*)(THIS);
}

RogueInt32List* RogueInt32List__add__Int32( RogueInt32List* THIS, RogueInt32 value_0 )
{
  ((RogueInt32List__reserve__Int32( THIS, 1 )))->data->integers[THIS->count] = value_0;
  ++THIS->count;
  return (RogueInt32List*)(THIS);
}

RogueInt32 RogueInt32List__capacity( RogueInt32List* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueInt32List* RogueInt32List__reserve__Int32( RogueInt32List* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueInt32) );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueInt32List__capacity( THIS ))) + ((RogueInt32List__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueInt32) ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueInt32List*)(THIS);
}

RogueString* RogueInt32Array__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[727]);
}

RogueString* RogueByteList__to_String( RogueByteList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueByteList* _auto_1126_2 = (THIS);
    RogueInt32 _auto_1127_3 = (0);
    for (;_auto_1127_3 < _auto_1126_2->count;++_auto_1127_3)
    {
      RogueByte value_4 = (_auto_1126_2->data->bytes[_auto_1127_3]);
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if ((false))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ((RogueByte__to_String( value_4 ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueByteList__type_name( RogueByteList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[685]);
}

RogueByteList* RogueByteList__init_object( RogueByteList* THIS )
{
  return (RogueByteList*)(THIS);
}

RogueByteList* RogueByteList__init( RogueByteList* THIS )
{
  RogueByteList__init__Int32( THIS, 10 );
  return (RogueByteList*)(THIS);
}

RogueByteList* RogueByteList__init__Int32( RogueByteList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueByte) );
  return (RogueByteList*)(THIS);
}

RogueByteList* RogueByteList__add__Byte( RogueByteList* THIS, RogueByte value_0 )
{
  ((RogueByteList__reserve__Int32( THIS, 1 )))->data->bytes[THIS->count] = value_0;
  ++THIS->count;
  return (RogueByteList*)(THIS);
}

RogueInt32 RogueByteList__capacity( RogueByteList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueByteList* RogueByteList__clear( RogueByteList* THIS )
{
  THIS->count = 0;
  return (RogueByteList*)(THIS);
}

RogueByteList* RogueByteList__insert__Byte_Int32( RogueByteList* THIS, RogueByte value_0, RogueInt32 before_index_1 )
{
  if (before_index_1 < 0)
  {
    before_index_1 = ((RogueInt32)0);
  }
  if (before_index_1 >= THIS->count)
  {
    return (RogueByteList*)(((RogueByteList__add__Byte( THIS, value_0 ))));
  }
  else
  {
    RogueByteList__reserve__Int32( THIS, 1 );
    RogueArray_set(THIS->data,(before_index_1 + 1),((RogueArray*)(THIS->data)),before_index_1,(THIS->count - before_index_1));
    ++THIS->count;
    THIS->data->bytes[before_index_1] = value_0;
  }
  return (RogueByteList*)(THIS);
}

RogueByteList* RogueByteList__reserve__Int32( RogueByteList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueByte) );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueByteList__capacity( THIS ))) + ((RogueByteList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueByte) ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueByteList*)(THIS);
}

RogueByte RogueByteList__remove_at__Int32( RogueByteList* THIS, RogueInt32 index_0 )
{
  RogueByte result_1 = (THIS->data->bytes[index_0]);
  RogueArray_set(THIS->data,index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  RogueByte zero_value_2 = 0;
  --THIS->count;
  THIS->data->bytes[THIS->count] = zero_value_2;
  return (RogueByte)(result_1);
}

RogueByte RogueByteList__remove_last( RogueByteList* THIS )
{
  return (RogueByte)(((RogueByteList__remove_at__Int32( THIS, (THIS->count - 1) ))));
}

RogueByteList* RogueByteList__reverse( RogueByteList* THIS )
{
  return (RogueByteList*)(((RogueByteList__reverse__Int32_Int32( THIS, 0, (THIS->count - 1) ))));
}

RogueByteList* RogueByteList__reverse__Int32_Int32( RogueByteList* THIS, RogueInt32 i1_0, RogueInt32 i2_1 )
{
  if (i1_0 < 0)
  {
    i1_0 = ((RogueInt32)0);
  }
  if (i2_1 >= THIS->count)
  {
    i2_1 = ((RogueInt32)(THIS->count - 1));
  }
  RogueArray* _data_2 = (THIS->data);
  while (i1_0 < i2_1)
  {
    RogueByte temp_3 = (_data_2->bytes[i1_0]);
    _data_2->bytes[i1_0] = _data_2->bytes[i2_1];
    _data_2->bytes[i2_1] = temp_3;
    ++i1_0;
    --i2_1;
  }
  return (RogueByteList*)(THIS);
}

RogueString* RogueByteArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[728]);
}

RogueString* RogueSystem__type_name( RogueClassSystem* THIS )
{
  return (RogueString*)(Rogue_literal_strings[629]);
}

RogueClassSystem* RogueSystem__init_object( RogueClassSystem* THIS )
{
  return (RogueClassSystem*)(THIS);
}

RogueString* RogueString_LogicalTable__to_String( RogueClassString_LogicalTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_LogicalTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_LogicalTable__type_name( RogueClassString_LogicalTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[630]);
}

RogueClassString_LogicalTable* RogueString_LogicalTable__init( RogueClassString_LogicalTable* THIS )
{
  RogueString_LogicalTable__init__Int32( THIS, 16 );
  return (RogueClassString_LogicalTable*)(THIS);
}

RogueClassString_LogicalTable* RogueString_LogicalTable__init__Int32( RogueClassString_LogicalTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_LogicalTableEntryList__init__Int32_String_LogicalTableEntry( ((RogueTableEntry_of_String_LogicalList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_LogicalList)), bin_count_0, ((RogueClassString_LogicalTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_LogicalTable*)(THIS);
}

RogueLogical RogueString_LogicalTable__contains__String( RogueClassString_LogicalTable* THIS, RogueString* key_0 )
{
  return (RogueLogical)(!!(((RogueString_LogicalTable__find__String( THIS, key_0 )))));
}

RogueClassString_LogicalTableEntry* RogueString_LogicalTable__find__String( RogueClassString_LogicalTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  RogueClassString_LogicalTableEntry* entry_2 = (((RogueClassString_LogicalTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( entry_2->key, key_0 )))))
    {
      return (RogueClassString_LogicalTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_LogicalTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_LogicalTableEntry*)(((RogueClassString_LogicalTableEntry*)(NULL)));
}

RogueLogical RogueString_LogicalTable__get__String( RogueClassString_LogicalTable* THIS, RogueString* key_0 )
{
  RogueClassString_LogicalTableEntry* entry_1 = (((RogueString_LogicalTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueLogical)(entry_1->value);
  }
  else
  {
    RogueLogical default_value_2 = 0;
    return (RogueLogical)(default_value_2);
  }
}

RogueClassString_LogicalTable* RogueString_LogicalTable__set__String_Logical( RogueClassString_LogicalTable* THIS, RogueString* key_0, RogueLogical value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_LogicalTableEntry* entry_4 = (((RogueClassString_LogicalTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( entry_4->key, key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_LogicalTable*)(THIS);
    }
    entry_4 = ((RogueClassString_LogicalTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_LogicalTableEntry*)((RogueString_LogicalTableEntry__init__String_Logical_Int32( ((RogueClassString_LogicalTableEntry*)ROGUE_CREATE_OBJECT(String_LogicalTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_LogicalTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
  return (RogueClassString_LogicalTable*)(THIS);
}

RogueStringBuilder* RogueString_LogicalTable__print_to__StringBuilder( RogueClassString_LogicalTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Logical( buffer_0, ((RogueString_LogicalTable__get__String( THIS, key_2 ))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_LogicalTable* RogueString_LogicalTable__init_object( RogueClassString_LogicalTable* THIS )
{
  return (RogueClassString_LogicalTable*)(THIS);
}

RogueString* RogueParserList__to_String( RogueParserList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueParserList* _auto_1170_2 = (THIS);
    RogueInt32 _auto_1171_3 = (0);
    for (;_auto_1171_3 < _auto_1170_2->count;++_auto_1171_3)
    {
      RogueClassParser* value_4 = (((RogueClassParser*)(_auto_1170_2->data->objects[_auto_1171_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueParserList__type_name( RogueParserList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[686]);
}

RogueParserList* RogueParserList__init_object( RogueParserList* THIS )
{
  return (RogueParserList*)(THIS);
}

RogueParserList* RogueParserList__init( RogueParserList* THIS )
{
  RogueParserList__init__Int32( THIS, 10 );
  return (RogueParserList*)(THIS);
}

RogueParserList* RogueParserList__init__Int32( RogueParserList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassParser*), true );
  return (RogueParserList*)(THIS);
}

RogueParserList* RogueParserList__add__Parser( RogueParserList* THIS, RogueClassParser* value_0 )
{
  ((RogueParserList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueParserList*)(THIS);
}

RogueInt32 RogueParserList__capacity( RogueParserList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueParserList* RogueParserList__reserve__Int32( RogueParserList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassParser*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueParserList__capacity( THIS ))) + ((RogueParserList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassParser*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueParserList*)(THIS);
}

RogueString* RogueParser__type_name( RogueClassParser* THIS )
{
  return (RogueString*)(Rogue_literal_strings[631]);
}

RogueClassParser* RogueParser__init__String( RogueClassParser* THIS, RogueString* _auto_363_0 )
{
  THIS->filepath = _auto_363_0;
  RogueParser__init__TokenList_Logical( THIS, ((RoguePreprocessor__process__TokenList( ((RoguePreprocessor__init__Parser( ((RogueClassPreprocessor*)ROGUE_CREATE_OBJECT(Preprocessor)), THIS ))), ((RogueTokenizer__tokenize__String( ((RogueClassTokenizer*)ROGUE_CREATE_OBJECT(Tokenizer)), THIS->filepath ))) ))), true );
  return (RogueClassParser*)(THIS);
}

RogueClassParser* RogueParser__init__Token_String_String( RogueClassParser* THIS, RogueClassToken* t_0, RogueString* _auto_364_1, RogueString* data_2 )
{
  THIS->filepath = _auto_364_1;
  RogueParser__init__TokenList_Logical( THIS, ((RoguePreprocessor__process__TokenList( ((RoguePreprocessor__init__Parser( ((RogueClassPreprocessor*)ROGUE_CREATE_OBJECT(Preprocessor)), THIS ))), ((RogueTokenizer__tokenize__Token_String_String( ((RogueClassTokenizer*)ROGUE_CREATE_OBJECT(Tokenizer)), t_0, THIS->filepath, data_2 ))) ))), true );
  return (RogueClassParser*)(THIS);
}

RogueClassParser* RogueParser__init__TokenList_Logical( RogueClassParser* THIS, RogueTokenList* tokens_0, RogueLogical skip_reprocess_1 )
{
  if (!(skip_reprocess_1))
  {
    tokens_0 = ((RogueTokenList*)((RoguePreprocessor__reprocess__TokenList( ((RoguePreprocessor__init__Parser( ((RogueClassPreprocessor*)ROGUE_CREATE_OBJECT(Preprocessor)), THIS ))), tokens_0 ))));
  }
  THIS->reader = ((RogueTokenReader__init__TokenList( ((RogueClassTokenReader*)ROGUE_CREATE_OBJECT(TokenReader)), tokens_0 )));
  return (RogueClassParser*)(THIS);
}

void RogueParser__add_used_module__String( RogueClassParser* THIS, RogueString* module_name_0 )
{
  if (((RogueStringList__locate__String( THIS->used_modules, module_name_0 ))).exists)
  {
    return;
  }
  RogueStringList__add__String( THIS->used_modules, module_name_0 );
  RogueStringList* module_ids_1 = (((RogueString_StringListTable__get__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->ids_by_module, module_name_0 ))));
  if (!!(module_ids_1))
  {
    if (!(!!(THIS->module_id_map)))
    {
      THIS->module_id_map = ((RogueString_StringTable__init( ((RogueClassString_StringTable*)ROGUE_CREATE_OBJECT(String_StringTable)) )));
    }
    {
      RogueStringList* _auto_1222_2 = (module_ids_1);
      RogueInt32 _auto_1223_3 = (0);
      for (;_auto_1223_3 < _auto_1222_2->count;++_auto_1223_3)
      {
        RogueString* m_id_4 = (((RogueString*)(_auto_1222_2->data->objects[_auto_1223_3])));
        RogueString_StringTable__set__String_String( THIS->module_id_map, m_id_4, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], module_name_0 ))) ))), Rogue_literal_strings[68] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], m_id_4 ))) ))) ))) );
      }
    }
  }
}

RogueLogical RogueParser__consume__TokenType( RogueClassParser* THIS, RogueClassTokenType* type_0 )
{
  if (!(((RogueTokenReader__next_is__TokenType( THIS->reader, type_0 )))))
  {
    return (RogueLogical)(false);
  }
  RogueTokenReader__read( THIS->reader );
  return (RogueLogical)(true);
}

RogueLogical RogueParser__consume__String( RogueClassParser* THIS, RogueString* identifier_0 )
{
  RogueClassToken* t_1 = (((RogueTokenReader__peek( THIS->reader ))));
  if (((void*)t_1->_type) != ((void*)RogueTokenType_identifier))
  {
    return (RogueLogical)(false);
  }
  if (((RogueString__operatorLTGT__String( (call_ROGUEM43( 1, (RogueClassToken*)(t_1) )), identifier_0 ))) != 0)
  {
    return (RogueLogical)(false);
  }
  RogueParser__read( THIS );
  return (RogueLogical)(true);
}

RogueLogical RogueParser__consume_end_commands( RogueClassParser* THIS )
{
  RogueLogical found_0 = (false);
  while ((((RogueParser__consume__TokenType( THIS, RogueTokenType_eol ))) || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_semicolon )))))
  {
    found_0 = ((RogueLogical)true);
  }
  return (RogueLogical)(found_0);
}

RogueLogical RogueParser__consume_eols( RogueClassParser* THIS )
{
  RogueLogical found_any_0 = (false);
  while (((RogueParser__consume__TokenType( THIS, RogueTokenType_eol ))))
  {
    found_any_0 = ((RogueLogical)true);
  }
  return (RogueLogical)(found_any_0);
}

RogueClassRogueError* RogueParser__error__String( RogueClassParser* THIS, RogueString* message_0 )
{
  ROGUE_THROW(((RogueToken__error__String( ((RogueTokenReader__peek( THIS->reader ))), message_0 ))));
}

void RogueParser__insert_module_prefixes( RogueClassParser* THIS )
{
  while (((RogueTokenReader__has_another( THIS->reader ))))
  {
    RogueClassToken* t_0 = (((RogueTokenReader__read( THIS->reader ))));
    if (((void*)t_0->_type) == ((void*)RogueTokenType_identifier))
    {
      RogueString* name_1 = ((call_ROGUEM43( 1, (RogueClassToken*)(t_0) )));
      if (name_1->characters[0] == (RogueCharacter)':')
      {
        THIS->reader->tokens->data->objects[(THIS->reader->position - 1)] = (call_ROGUEM91( 11, (RogueClassTokenType*)(t_0->_type), t_0, ((RogueString__from__Int32( name_1, 2 ))) ));
      }
      else if (!!(THIS->module_id_map))
      {
        RogueString* mapping_2 = (((RogueString_StringTable__get__String( THIS->module_id_map, name_1 ))));
        if (!!(mapping_2))
        {
          THIS->reader->tokens->data->objects[(THIS->reader->position - 1)] = (call_ROGUEM91( 11, (RogueClassTokenType*)(t_0->_type), t_0, mapping_2 ));
        }
      }
    }
    else if (((void*)t_0->_type) == ((void*)RogueTokenType_directive_module))
    {
      RogueParser__add_used_module__String( THIS, ((RogueParser__read_identifier__Logical( THIS, false ))) );
    }
    else if (((void*)t_0->_type) == ((void*)RogueTokenType_directive_using))
    {
      RogueParser__add_used_module__String( THIS, ((RogueParser__read_identifier__Logical( THIS, false ))) );
    }
  }
  THIS->reader->position = 0;
}

void RogueParser__must_consume__TokenType_String( RogueClassParser* THIS, RogueClassTokenType* type_0, RogueString* error_message_1 )
{
  if (((RogueParser__consume__TokenType( THIS, type_0 ))))
  {
    return;
  }
  RogueClassToken* t_2 = (((RogueParser__peek( THIS ))));
  if (!(!!(error_message_1)))
  {
    error_message_1 = ((RogueString*)((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ((RogueTokenType__quoted_name( type_0 ))) ))) ))), Rogue_literal_strings[255] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM43( 8, (RogueClassToken*)(t_2) )) ))) ))), Rogue_literal_strings[51] ))) ))));
  }
  ROGUE_THROW(((RogueToken__error__String( t_2, error_message_1 ))));
}

void RogueParser__must_consume_eols( RogueClassParser* THIS )
{
  RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_eol, ((RogueString*)(NULL)) );
  RogueParser__consume_eols( THIS );
}

RogueClassToken* RogueParser__must_read__TokenType( RogueClassParser* THIS, RogueClassTokenType* type_0 )
{
  RogueClassToken* t_1 = (((RogueTokenReader__peek( THIS->reader ))));
  if (((void*)t_1->_type) != ((void*)type_0))
  {
    RogueParser__must_consume__TokenType_String( THIS, type_0, ((RogueString*)(NULL)) );
  }
  return (RogueClassToken*)(((RogueTokenReader__read( THIS->reader ))));
}

RogueLogical RogueParser__next_is__TokenType( RogueClassParser* THIS, RogueClassTokenType* type_0 )
{
  return (RogueLogical)(((RogueTokenReader__next_is__TokenType( THIS->reader, type_0 ))));
}

RogueLogical RogueParser__next_is_end_command( RogueClassParser* THIS )
{
  if (!(((RogueTokenReader__has_another( THIS->reader )))))
  {
    return (RogueLogical)(false);
  }
  RogueClassTokenType* type_0 = (((RogueTokenReader__peek( THIS->reader )))->_type);
  return (RogueLogical)((((void*)type_0) == ((void*)RogueTokenType_eol) || ((void*)type_0) == ((void*)RogueTokenType_symbol_semicolon)));
}

RogueLogical RogueParser__next_is_statement( RogueClassParser* THIS )
{
  if (!(((RogueTokenReader__has_another( THIS->reader )))))
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(((RogueTokenReader__next_is_statement_token( THIS->reader ))));
}

void RogueParser__parse_elements( RogueClassParser* THIS )
{
  while (((RogueParser__parse_element( THIS ))))
  {
  }
  if (((RogueTokenReader__has_another( THIS->reader ))))
  {
    RogueClassToken* t_0 = (((RogueParser__peek( THIS ))));
    ROGUE_THROW(((RogueToken__error__String( t_0, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[314] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM43( 8, (RogueClassToken*)(t_0) )) ))) ))), Rogue_literal_strings[51] ))) ))) ))));
  }
}

RogueLogical RogueParser__parse_element( RogueClassParser* THIS )
{
  RogueParser__consume_eols( THIS );
  if (!(((RogueTokenReader__has_another( THIS->reader )))))
  {
    return (RogueLogical)(false);
  }
  if (((RogueParser__parse_native_elements( THIS ))))
  {
    return (RogueLogical)(true);
  }
  RogueClassToken* t_0 = (((RogueParser__peek( THIS ))));
  if (((void*)t_0->_type) == ((void*)RogueTokenType_keyword_class))
  {
    RogueParser__parse_class_template( THIS );
    return (RogueLogical)(true);
  }
  else if (((void*)t_0->_type) == ((void*)RogueTokenType_keyword_routine))
  {
    RogueParser__parse_routine( THIS );
    return (RogueLogical)(true);
  }
  else if (((void*)t_0->_type) == ((void*)RogueTokenType_keyword_augment))
  {
    RogueParser__parse_augment( THIS );
    return (RogueLogical)(true);
  }
  else if (((void*)t_0->_type) == ((void*)RogueTokenType_directive_module))
  {
    RogueParser__read( THIS );
    RogueParser__read_identifier__Logical( THIS, false );
    RogueParser__must_consume_eols( THIS );
    return (RogueLogical)(true);
  }
  else if (((void*)t_0->_type) == ((void*)RogueTokenType_directive_using))
  {
    RogueParser__read( THIS );
    RogueParser__read_identifier__Logical( THIS, false );
    RogueParser__must_consume_eols( THIS );
    return (RogueLogical)(true);
  }
  else if (((void*)t_0->_type) == ((void*)RogueTokenType_directive_requisite))
  {
    RogueParser__read( THIS );
    RogueLogical first_1 = (true);
    while ((first_1 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
    {
      first_1 = ((RogueLogical)false);
      RogueParser__consume_eols( THIS );
      RogueClassType* type_2 = (((Rogue_Parser__parse_type( THIS ))));
      RogueString* signature_3 = 0;
      if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_dot ))))
      {
        if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_times ))))
        {
          signature_3 = ((RogueString*)Rogue_literal_strings[212]);
        }
        else
        {
          RogueStringBuilder* buffer_4 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
          RogueStringBuilder__print__String( buffer_4, ((RogueParser__read_identifier__Logical( THIS, false ))) );
          if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
          {
            RogueStringBuilder__print__Character( buffer_4, (RogueCharacter)'(' );
            if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_close_paren )))))
            {
              RogueLogical first_param_5 = (true);
              while ((first_param_5 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
              {
                if (first_param_5)
                {
                  first_param_5 = ((RogueLogical)false);
                }
                else
                {
                  RogueStringBuilder__print__Character( buffer_4, (RogueCharacter)',' );
                }
                RogueStringBuilder__print__String( buffer_4, ((RogueParser__parse_possible_type__Logical( THIS, false ))) );
              }
              RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
            }
            RogueStringBuilder__print__Character( buffer_4, (RogueCharacter)')' );
          }
          signature_3 = ((RogueString*)((RogueStringBuilder__to_String( buffer_4 ))));
        }
      }
      RogueRequisiteItemList__add__RequisiteItem( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->requisite_list, ((RogueRequisiteItem__init__Token_Type_String( ((RogueClassRequisiteItem*)ROGUE_CREATE_OBJECT(RequisiteItem)), t_0, type_2, signature_3 ))) );
      RogueParser__consume_eols( THIS );
    }
    return (RogueLogical)(true);
  }
  else if (((RogueParser__next_is_statement( THIS ))))
  {
    THIS->_this_type = ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ((RogueParser__peek( THIS ))), Rogue_literal_strings[44] )));
    if (!(!!(((RogueClassProgram*)ROGUE_SINGLETON(Program))->m_on_launch)))
    {
      ((RogueClassProgram*)ROGUE_SINGLETON(Program))->m_on_launch = ((RogueMethod__init__Token_Type_String( ((RogueClassMethod*)ROGUE_CREATE_OBJECT(Method)), ((RogueParser__peek( THIS ))), THIS->_this_type, Rogue_literal_strings[313] )));
      RogueCmdList__add__Cmd( ((RogueCmdList*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->m_on_launch->statements), ((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->m_on_launch, ((RogueParser__peek( THIS ))), Rogue_literal_strings[290], false ))))) );
    }
    THIS->this_method = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->m_on_launch;
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, THIS->this_method->statements );
    return (RogueLogical)(true);
  }
  return (RogueLogical)(false);
}

void RogueParser__parse_class_template( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueString* name_1 = (((RogueParser__read_identifier__Logical( THIS, false ))));
  RogueClassTemplate* template_2 = (((RogueTemplate__init__Token_String_Int32( ((RogueClassTemplate*)ROGUE_CREATE_OBJECT(Template)), t_0, name_1, 0 ))));
  RogueParser__parse_template_tokens__Template_TokenType( THIS, template_2, RogueTokenType_keyword_endClass );
  switch (((Rogue_Template__element_type( template_2 ))))
  {
    case 3:
    {
      RogueAttributes__add__Int32( template_2->attributes, 16 );
      break;
    }
  }
}

void RogueParser__parse_routine( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueString* name_1 = (((RogueParser__read_identifier__Logical( THIS, false ))));
  RogueClassTemplate* template_2 = (((RogueTemplate__init__Token_String_Int32( ((RogueClassTemplate*)ROGUE_CREATE_OBJECT(Template)), t_0, name_1, 1048576 ))));
  RogueParser__parse_template_tokens__Template_TokenType( THIS, template_2, RogueTokenType_keyword_endRoutine );
}

void RogueParser__parse_template_tokens__Template_TokenType( RogueClassParser* THIS, RogueClassTemplate* template_0, RogueClassTokenType* end_type_1 )
{
  RogueClassToken* first_t_2 = (((RogueParser__peek( THIS ))));
  RogueLogical is_routine_3 = (((void*)end_type_1) == ((void*)RogueTokenType_keyword_endRoutine));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_specialize ))))
  {
    RogueLogical first_4 = (true);
    while ((first_4 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
    {
      first_4 = ((RogueLogical)false);
      RogueClassToken* t_5 = (((RogueParser__must_read__TokenType( THIS, RogueTokenType_placeholder_id ))));
      RogueClassTypeParameter* param_6 = (((RogueTemplate__add_type_parameter__Token_String( template_0, t_5, (call_ROGUEM43( 1, (RogueClassToken*)(t_5) )) ))));
    }
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_specialize, ((RogueString*)(NULL)) );
  }
  if (is_routine_3)
  {
    RogueParser__consume_eols( THIS );
    RogueTokenList__add__Token( template_0->tokens, ((RogueClassToken*)(((RogueEOLToken__init__Token( ((RogueClassEOLToken*)ROGUE_CREATE_OBJECT(EOLToken)), first_t_2 ))))) );
    RogueTokenList__add__Token( template_0->tokens, ((RogueTokenType__create_token__Token( RogueTokenType_keyword_GLOBAL, first_t_2 ))) );
    RogueTokenList__add__Token( template_0->tokens, ((RogueTokenType__create_token__Token( RogueTokenType_keyword_METHODS, first_t_2 ))) );
    RogueTokenList__add__Token( template_0->tokens, ((RogueClassToken*)(((RogueEOLToken__init__Token( ((RogueClassEOLToken*)ROGUE_CREATE_OBJECT(EOLToken)), first_t_2 ))))) );
    RogueTokenList__add__Token( template_0->tokens, ((RogueTokenType__create_token__Token( RogueTokenType_keyword_method, first_t_2 ))) );
    RogueTokenList__add__Token( template_0->tokens, (call_ROGUEM91( 11, (RogueClassTokenType*)(RogueTokenType_identifier), first_t_2, Rogue_literal_strings[256] )) );
    RogueProgram__add_template__Template( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), template_0 );
  }
  else
  {
    RogueInt32 starting_pos_7 = (THIS->reader->position);
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
    {
      RogueParser__consume_eols( THIS );
      if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_close_paren )))))
      {
        RogueLogical first_8 = (true);
        while ((first_8 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
        {
          first_8 = ((RogueLogical)false);
          RogueParser__consume_eols( THIS );
          RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_ampersand );
          RogueParser__read_identifier__Logical( THIS, false );
          RogueParser__consume_eols( THIS );
          if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_equals ))))
          {
            RogueParser__parse_expression( THIS );
          }
          RogueParser__consume_eols( THIS );
          if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
          {
            if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_placeholder_id )))))
            {
              RogueParser__parse_possible_type__Logical( THIS, false );
            }
          }
          RogueParser__consume_eols( THIS );
        }
        RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
      }
    }
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
    {
      RogueParser__parse_possible_type__Logical( THIS, false );
      while (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma ))))
      {
        RogueParser__parse_possible_type__Logical( THIS, false );
      }
    }
    RogueInt32 final_pos_9 = (THIS->reader->position);
    THIS->reader->position = starting_pos_7;
    while (THIS->reader->position < final_pos_9)
    {
      RogueTokenList__add__Token( template_0->tokens, ((RogueParser__read( THIS ))) );
    }
    RogueParser__parse_attributes__Attributes( THIS, template_0->attributes );
    RogueProgram__add_template__Template( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), template_0 );
    RogueClassToken* semi_t_10 = (((RogueParser__peek( THIS ))));
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_semicolon ))))
    {
      if (template_0->tokens->count == 0)
      {
        RogueTokenList__add__Token( template_0->tokens, ((RogueTokenType__create_token__Token( RogueTokenType_eol, semi_t_10 ))) );
      }
      return;
    }
  }
  while (((RogueTokenReader__has_another( THIS->reader ))))
  {
    RogueClassToken* t_11 = (((RogueTokenReader__read( THIS->reader ))));
    if (((void*)t_11->_type) == ((void*)end_type_1))
    {
      return;
    }
    RogueTokenList__add__Token( template_0->tokens, t_11 );
  }
  RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[308] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(end_type_1)) ))) ))) ))) );
  ROGUE_THROW(((RogueTokenReader__error__String( THIS->reader, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ((RogueTokenType__quoted_name( end_type_1 ))) ))) ))), Rogue_literal_strings[309] ))) ))) ))));
}

void RogueParser__parse_augment( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueTokenReader__read( THIS->reader ))));
  RogueString* name_1 = (((RogueParser__parse_possible_type__Logical( THIS, false ))));
  if (((RogueString__contains__String( name_1, ((RogueCharacter__to_String( (RogueCharacter)'$' ))) ))))
  {
    RogueString* base_name_2 = (((RogueString__before_first__Character( name_1, (RogueCharacter)'<' ))));
    ROGUE_THROW(((RogueToken__error__String( t_0, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[310] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], base_name_2 ))) ))), Rogue_literal_strings[311] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], base_name_2 ))) ))), Rogue_literal_strings[312] ))) ))) ))));
  }
  RogueClassAugment* aug_3 = (((RogueAugment__init__Token_String( ((RogueClassAugment*)ROGUE_CREATE_OBJECT(Augment)), t_0, name_1 ))));
  RogueAugmentList* augments_4 = (((RogueString_AugmentListTable__get__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->augment_lookup, name_1 ))));
  if (!(!!(augments_4)))
  {
    augments_4 = ((RogueAugmentList*)((RogueAugmentList__init( ((RogueAugmentList*)ROGUE_CREATE_OBJECT(AugmentList)) ))));
    RogueString_AugmentListTable__set__String_AugmentList( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->augment_lookup, name_1, augments_4 );
  }
  RogueAugmentList__add__Augment( augments_4, aug_3 );
  RogueString* base_name_5 = (((RogueString__after_any__Character( name_1, (RogueCharacter)':' ))));
  if (base_name_5->count < name_1->count)
  {
    augments_4 = ((RogueAugmentList*)((RogueString_AugmentListTable__get__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->augment_lookup, base_name_5 ))));
    if (!(!!(augments_4)))
    {
      augments_4 = ((RogueAugmentList*)((RogueAugmentList__init( ((RogueAugmentList*)ROGUE_CREATE_OBJECT(AugmentList)) ))));
      RogueString_AugmentListTable__set__String_AugmentList( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->augment_lookup, base_name_5, augments_4 );
    }
    RogueAugmentList__add__Augment( augments_4, aug_3 );
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_semicolon ))))
  {
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
  {
    RogueTypeList__add__Type( aug_3->base_types, ((Rogue_Parser__parse_type( THIS ))) );
    RogueParser__consume_eols( THIS );
    while (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma ))))
    {
      RogueParser__consume_eols( THIS );
      RogueTypeList__add__Type( aug_3->base_types, ((Rogue_Parser__parse_type( THIS ))) );
      RogueParser__consume_eols( THIS );
    }
  }
  RogueParser__consume_eols( THIS );
  while ((((RogueTokenReader__has_another( THIS->reader ))) && !(((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_endAugment ))))))
  {
    RogueTokenList__add__Token( aug_3->tokens, ((RogueTokenReader__read( THIS->reader ))) );
  }
  RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_keyword_endAugment, ((RogueString*)(NULL)) );
}

void RogueParser__parse_attributes__Attributes( RogueClassParser* THIS, RogueClassAttributes* attributes_0 )
{
  if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_bracket )))))
  {
    return;
  }
  while ((((RogueTokenReader__has_another( THIS->reader ))) && !(((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_close_bracket ))))))
  {
    RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_macro ))))
    {
      RogueAttributes__add__Int32( attributes_0, 64 );
    }
    else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_native ))))
    {
      RogueAttributes__add__Int32( attributes_0, 32 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_literal_strings[296] ))))
    {
      RogueAttributes__add__Int32( attributes_0, 524288 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_literal_strings[297] ))))
    {
      RogueParser__ensure_unspecialized_element_type__Token_Attributes( THIS, t_1, attributes_0 );
      RogueAttributes__add__Int32( attributes_0, 2 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_literal_strings[301] ))))
    {
      RogueParser__ensure_unspecialized_element_type__Token_Attributes( THIS, t_1, attributes_0 );
      RogueAttributes__add__Int32( attributes_0, 3 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_literal_strings[302] ))))
    {
      RogueAttributes__add__Int32( attributes_0, 2097152 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_literal_strings[303] ))))
    {
      RogueAttributes__add__Int32( attributes_0, 16 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_literal_strings[304] ))))
    {
      RogueAttributes__add__Int32( attributes_0, 256 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_literal_strings[300] ))))
    {
      RogueParser__ensure_unspecialized_element_type__Token_Attributes( THIS, t_1, attributes_0 );
      RogueAttributes__add__Int32( attributes_0, 1 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_literal_strings[242] ))))
    {
      RogueAttributes__add__Int32( attributes_0, 32768 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_literal_strings[305] ))))
    {
      RogueAttributes__add__Int32( attributes_0, 1024 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_literal_strings[306] ))))
    {
      RogueAttributes__add__Int32( attributes_0, 65536 );
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_identifier ))))
    {
      RogueAttributes__add__String( attributes_0, (call_ROGUEM43( 1, (RogueClassToken*)(((RogueParser__read( THIS )))) )) );
    }
    else
    {
      ROGUE_THROW(((RogueToken__error__String( ((RogueParser__peek( THIS ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[307], ((RogueObject*)(((RogueParser__peek( THIS ))))) ))) ))));
    }
  }
  RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_bracket, ((RogueString*)(NULL)) );
}

void RogueParser__ensure_unspecialized_element_type__Token_Attributes( RogueClassParser* THIS, RogueClassToken* t_0, RogueClassAttributes* attributes_1 )
{
  if (!!((attributes_1->flags & 7)))
  {
    ROGUE_THROW(((RogueToken__error__String( t_0, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[298] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM43( 1, (RogueClassToken*)(t_0) )) ))) ))), Rogue_literal_strings[299] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ((RogueAttributes__element_type_name( attributes_1 ))) ))) ))), Rogue_literal_strings[21] ))) ))) ))));
  }
}

void RogueParser__parse_type_def__Type( RogueClassParser* THIS, RogueClassType* _auto_365_0 )
{
  THIS->_this_type = _auto_365_0;
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
  {
    RogueParser__consume_eols( THIS );
    if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_close_paren )))))
    {
      RogueClassMethod* m_2 = 0;
      if (((RogueType__is_compound( THIS->_this_type ))))
      {
        m_2 = ((RogueClassMethod*)((RogueType__add_routine__Token_String( THIS->_this_type, t_1, Rogue_literal_strings[330] ))));
        RogueAttributes__add__Int32( m_2->attributes, 16384 );
      }
      else
      {
        m_2 = ((RogueClassMethod*)((RogueType__add_method__Token_String( THIS->_this_type, t_1, Rogue_literal_strings[331] ))));
      }
      m_2->_return_type = THIS->_this_type;
      RogueLogical first_3 = (true);
      while ((first_3 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
      {
        first_3 = ((RogueLogical)false);
        RogueParser__consume_eols( THIS );
        t_1 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
        RogueLogical is_flag_4 = (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_ampersand ))));
        RogueString* p_name_5 = (((RogueParser__read_identifier__Logical( THIS, false ))));
        RogueClassLocal* param_6 = (((RogueMethod__add_parameter__Token_String_Type( m_2, t_1, p_name_5, ((RogueClassType*)(NULL)) ))));
        RogueParser__consume_eols( THIS );
        if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_equals ))))
        {
          param_6->initial_value = ((RogueParser__parse_expression( THIS )));
        }
        RogueParser__consume_eols( THIS );
        RogueClassType* p_type_7 = 0;
        if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
        {
          RogueParser__consume_eols( THIS );
          p_type_7 = ((RogueClassType*)((Rogue_Parser__parse_type( THIS ))));
          if (((RogueType__is_compound( THIS->_this_type ))))
          {
            param_6->_type = p_type_7;
          }
          RogueType__add_property__Token_String_Type_Cmd( THIS->_this_type, t_1, p_name_5, p_type_7, ((RogueClassCmd*)(NULL)) );
        }
        else if (is_flag_4)
        {
          p_type_7 = ((RogueClassType*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
          if (((RogueType__is_compound( THIS->_this_type ))))
          {
            param_6->_type = p_type_7;
          }
          RogueType__add_property__Token_String_Type_Cmd( THIS->_this_type, t_1, p_name_5, p_type_7, ((RogueClassCmd*)(NULL)) );
        }
        if ((is_flag_4 && !(!!(param_6->initial_value))))
        {
          if (((void*)p_type_7) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))
          {
            param_6->initial_value = ((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), t_1, false )))));
          }
          else
          {
            param_6->initial_value = ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), t_1, 0 )))));
          }
        }
        RogueParser__consume_eols( THIS );
      }
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
    }
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
  {
    RogueLogical first_8 = (true);
    while ((first_8 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
    {
      first_8 = ((RogueLogical)false);
      RogueParser__consume_eols( THIS );
      RogueTypeList__add__Type( THIS->_this_type->base_types, ((Rogue_Parser__parse_type( THIS ))) );
      RogueParser__consume_eols( THIS );
    }
  }
  while (((RogueParser__parse_section( THIS ))))
  {
  }
  if (((RogueTokenReader__has_another( THIS->reader ))))
  {
    ROGUE_THROW(((RogueToken__error__String( ((RogueParser__peek( THIS ))), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[314] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM43( 8, (RogueClassToken*)(((RogueParser__peek( THIS )))) )) ))) ))), Rogue_literal_strings[51] ))) ))) ))));
  }
}

RogueLogical RogueParser__parse_section( RogueClassParser* THIS )
{
  RogueParser__consume_eols( THIS );
  if (((RogueParser__parse_native_elements( THIS ))))
  {
    return (RogueLogical)(true);
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_begin_augment_tokens ))))
  {
    THIS->parsing_augment = true;
    RogueParser__consume_eols( THIS );
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_ENUMERATE ))))
  {
    while (((RogueParser__parse_definitions__Logical( THIS, true ))))
    {
    }
    return (RogueLogical)(true);
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_DEFINITIONS ))))
  {
    while (((RogueParser__parse_definitions__Logical( THIS, false ))))
    {
    }
    return (RogueLogical)(true);
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_GLOBAL ))))
  {
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_PROPERTIES ))))
    {
      while (((RogueParser__parse_properties__Logical( THIS, true ))))
      {
      }
      return (RogueLogical)(true);
    }
    else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_METHODS ))))
    {
      while (((RogueParser__parse_method__Logical( THIS, true ))))
      {
      }
      return (RogueLogical)(true);
    }
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_PROPERTIES ))))
  {
    while (((RogueParser__parse_properties__Logical( THIS, false ))))
    {
    }
    return (RogueLogical)(true);
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_METHODS ))))
  {
    while (((RogueParser__parse_method__Logical( THIS, false ))))
    {
    }
    return (RogueLogical)(true);
  }
  return (RogueLogical)(false);
}

RogueLogical RogueParser__parse_definitions__Logical( RogueClassParser* THIS, RogueLogical enumerate_0 )
{
  RogueParser__consume_eols( THIS );
  if (!(((RogueParser__next_is__TokenType( THIS, RogueTokenType_identifier )))))
  {
    return (RogueLogical)(false);
  }
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  RogueString* name_2 = (((RogueParser__read_identifier__Logical( THIS, false ))));
  RogueClassCmd* value_3 = 0;
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_equals ))))
  {
    RogueParser__consume_eols( THIS );
    value_3 = ((RogueClassCmd*)((RogueParser__parse_expression( THIS ))));
  }
  else if (!(((RogueParser__consume_eols( THIS )))))
  {
    value_3 = ((RogueClassCmd*)((RogueParser__parse_expression( THIS ))));
  }
  if ((!(enumerate_0) && !(!!(value_3))))
  {
    ROGUE_THROW(((RogueToken__error__String( ((RogueParser__peek( THIS ))), Rogue_literal_strings[332] ))));
  }
  if (!!(value_3))
  {
    if (RogueObject_instance_of(value_3,RogueTypeCmdLiteralInt32))
    {
      THIS->_this_type->prev_enum_cmd = ((RogueClassCmd*)(NULL));
      THIS->_this_type->next_enum_offset = (((RogueClassCmdLiteralInt32*)(RogueObject_as(value_3,RogueTypeCmdLiteralInt32)))->value + 1);
    }
    else
    {
      THIS->_this_type->prev_enum_cmd = value_3;
      THIS->_this_type->next_enum_offset = 1;
    }
  }
  else
  {
    if (!!(THIS->_this_type->prev_enum_cmd))
    {
      value_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdAdd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdAdd*)ROGUE_CREATE_OBJECT(CmdAdd))), t_1, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->_this_type->prev_enum_cmd), ((RogueClassCloneArgs*)(NULL)) )), ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), t_1, THIS->_this_type->next_enum_offset ))))) ))))))));
    }
    else
    {
      value_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), t_1, THIS->_this_type->next_enum_offset ))))));
    }
    ++THIS->_this_type->next_enum_offset;
  }
  RogueClassDefinition* def_4 = (((RogueDefinition__init__Token_String_Cmd_Logical( ((RogueClassDefinition*)ROGUE_CREATE_OBJECT(Definition)), t_1, name_2, value_3, enumerate_0 ))));
  RogueString_DefinitionTable__set__String_Definition( THIS->_this_type->definition_lookup, name_2, def_4 );
  RogueDefinitionList__add__Definition( THIS->_this_type->definition_list, def_4 );
  return (RogueLogical)(true);
}

RogueLogical RogueParser__parse_properties__Logical( RogueClassParser* THIS, RogueLogical as_global_0 )
{
  RogueParser__consume_eols( THIS );
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_native ))))
  {
    if (!(((RogueParser__next_is__TokenType( THIS, RogueTokenType_literal_string )))))
    {
      ROGUE_THROW(((RogueToken__error__String( ((RogueParser__peek( THIS ))), Rogue_literal_strings[294] ))));
    }
    if (!(!!(THIS->_this_type->native_properties)))
    {
      THIS->_this_type->native_properties = ((RogueNativePropertyList__init( ((RogueNativePropertyList*)ROGUE_CREATE_OBJECT(NativePropertyList)) )));
    }
    RogueClassToken* native_t_1 = (((RogueParser__read( THIS ))));
    RogueNativePropertyList__add__NativeProperty( THIS->_this_type->native_properties, ((RogueNativeProperty__init__Token_String( ((RogueClassNativeProperty*)ROGUE_CREATE_OBJECT(NativeProperty)), native_t_1, (call_ROGUEM43( 1, (RogueClassToken*)(native_t_1) )) ))) );
    RogueParser__must_consume_eols( THIS );
    return (RogueLogical)(true);
  }
  if (!(((RogueParser__next_is__TokenType( THIS, RogueTokenType_identifier )))))
  {
    return (RogueLogical)(false);
  }
  RoguePropertyList__clear( THIS->property_list );
  RogueLogical first_2 = (true);
  while ((first_2 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
  {
    first_2 = ((RogueLogical)false);
    RogueParser__consume_eols( THIS );
    RogueClassToken* t_3 = (((RogueParser__peek( THIS ))));
    RogueString* name_4 = (((RogueParser__read_identifier__Logical( THIS, false ))));
    RogueClassProperty* p_5 = 0;
    if (as_global_0)
    {
      p_5 = ((RogueClassProperty*)((RogueType__add_global__Token_String( THIS->_this_type, t_3, name_4 ))));
    }
    else
    {
      p_5 = ((RogueClassProperty*)((RogueType__add_property__Token_String_Type_Cmd( THIS->_this_type, t_3, name_4, ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
    }
    RoguePropertyList__add__Property( THIS->property_list, p_5 );
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_equals ))))
    {
      p_5->initial_value = ((RogueParser__parse_expression( THIS )));
    }
  }
  RogueParser__consume_eols( THIS );
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
  {
    RogueClassType* p_type_6 = (((Rogue_Parser__parse_type( THIS ))));
    {
      RoguePropertyList* _auto_1226_8 = (THIS->property_list);
      RogueInt32 _auto_1227_9 = (0);
      for (;_auto_1227_9 < _auto_1226_8->count;++_auto_1227_9)
      {
        RogueClassProperty* p_10 = (((RogueClassProperty*)(_auto_1226_8->data->objects[_auto_1227_9])));
        p_10->_type = p_type_6;
      }
    }
  }
  else
  {
    {
      RoguePropertyList* _auto_1228_11 = (THIS->property_list);
      RogueInt32 _auto_1229_12 = (0);
      for (;_auto_1229_12 < _auto_1228_11->count;++_auto_1229_12)
      {
        RogueClassProperty* p_13 = (((RogueClassProperty*)(_auto_1228_11->data->objects[_auto_1229_12])));
        RogueString* name_7 = (Rogue_literal_strings[336]);
        if (as_global_0)
        {
          name_7 = ((RogueString*)Rogue_literal_strings[337]);
        }
        if (!!(p_13->initial_value))
        {
          p_13->_type = (call_ROGUEM62( 17, (RogueClassCmd*)(p_13->initial_value), ((RogueScope__init__Type_Method( ((RogueClassScope*)ROGUE_CREATE_OBJECT(Scope)), THIS->_this_type, ((RogueClassMethod*)(NULL)) ))) ));
          if (((void*)p_13->_type) == ((void*)NULL))
          {
            RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), (call_ROGUEM55( 2, (RogueClassCmd*)(p_13->initial_value) )) );
            ROGUE_THROW(((RogueToken__error__String( p_13->initial_value->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[338] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], name_7 ))) ))), Rogue_literal_strings[339] ))) ))) ))));
          }
        }
        else
        {
          ROGUE_THROW(((RogueToken__error__String( p_13->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[340] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], name_7 ))) ))), Rogue_literal_strings[341] ))) ))) ))));
        }
      }
    }
  }
  return (RogueLogical)(true);
}

RogueLogical RogueParser__parse_method__Logical( RogueClassParser* THIS, RogueLogical as_routine_0 )
{
  RogueParser__consume_eols( THIS );
  if (!(((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_method )))))
  {
    return (RogueLogical)(false);
  }
  RogueClassToken* t_1 = (((RogueParser__read( THIS ))));
  RogueString* name_2 = (((RogueParser__read_identifier__Logical( THIS, false ))));
  RogueClassType* return_type_3 = 0;
  {
    if (((RogueString__operatorEQUALSEQUALS__String( name_2, Rogue_literal_strings[342] ))))
    {
      name_2 = ((RogueString*)((RogueString__operatorPLUS__String( name_2, (call_ROGUEM43( 1, (RogueClassToken*)(((RogueTokenReader__read( THIS->reader )))) )) ))));
    }
    else if (((RogueString__operatorEQUALSEQUALS__String( name_2, Rogue_literal_strings[343] ))))
    {
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_arrow, ((RogueString*)(NULL)) );
      return_type_3 = ((RogueClassType*)((Rogue_Parser__parse_type( THIS ))));
      name_2 = ((RogueString*)((RogueString__operatorPLUS__String( Rogue_literal_strings[344], return_type_3->name ))));
    }
  }
  if (as_routine_0)
  {
    THIS->this_method = ((RogueType__add_routine__Token_String( THIS->_this_type, t_1, name_2 )));
  }
  else
  {
    THIS->this_method = ((RogueType__add_method__Token_String( THIS->_this_type, t_1, name_2 )));
  }
  THIS->this_method->_return_type = return_type_3;
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
  {
    if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_close_paren )))))
    {
      RogueLogical first_4 = (true);
      while ((first_4 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
      {
        first_4 = ((RogueLogical)false);
        RogueParser__consume_eols( THIS );
        RogueLogical is_flag_5 = (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_ampersand ))));
        t_1 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
        RogueClassLocal* param_6 = (((RogueMethod__add_parameter__Token_String_Type( THIS->this_method, t_1, ((RogueParser__read_identifier__Logical( THIS, true ))), ((RogueClassType*)(NULL)) ))));
        if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_equals ))))
        {
          param_6->initial_value = ((RogueParser__parse_expression( THIS )));
        }
        if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
        {
          param_6->_type = ((Rogue_Parser__parse_type( THIS )));
        }
        if (is_flag_5)
        {
          if (!(!!(param_6->_type)))
          {
            param_6->_type = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical;
          }
          if (!(!!(param_6->initial_value)))
          {
            param_6->initial_value = ((RogueType__create_default_value__Token( param_6->_type, param_6->t )));
          }
        }
      }
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
    }
  }
  if (!(!!(return_type_3)))
  {
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_arrow ))))
    {
      if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_this ))))
      {
        THIS->this_method->_return_type = THIS->_this_type;
      }
      else
      {
        THIS->this_method->_return_type = ((Rogue_Parser__parse_type( THIS )));
      }
    }
  }
  RogueParser__parse_attributes__Attributes( THIS, THIS->this_method->attributes );
  if (THIS->parsing_augment)
  {
    RogueAttributes__add__Int32( THIS->this_method->attributes, 262144 );
  }
  RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon );
  RogueParser__consume_eols( THIS );
  if (((RogueMethod__is_macro( THIS->this_method ))))
  {
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_native ))))
    {
      RogueAttributes__add__Int32( THIS->this_method->attributes, 32 );
    }
    if (((RogueMethod__is_native( THIS->this_method ))))
    {
      RogueLogical has_parens_7 = (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))));
      RogueParser__consume_eols( THIS );
      if (!(((RogueParser__next_is__TokenType( THIS, RogueTokenType_literal_string )))))
      {
        ROGUE_THROW(((RogueToken__error__String( ((RogueParser__peek( THIS ))), Rogue_literal_strings[294] ))));
      }
      THIS->this_method->native_code = (call_ROGUEM43( 1, (RogueClassToken*)(((RogueParser__read( THIS )))) ));
      if (has_parens_7)
      {
        RogueParser__consume_eols( THIS );
        RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
      }
      if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_arrow ))))
      {
        RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_arrow );
        RogueClassType* type_8 = (((Rogue_Parser__parse_type( THIS ))));
        ROGUE_THROW(((RogueToken__error__String( ((RogueParser__peek( THIS ))), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[345] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(type_8)) ))) ))), Rogue_literal_strings[12] ))) ))) ))));
      }
    }
    else
    {
      RogueParser__parse_single_line_statements__CmdStatementList( THIS, THIS->this_method->statements );
    }
  }
  else if (THIS->parsing_augment)
  {
    RogueParser__parse_augment_statements( THIS );
  }
  else
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->this_method->statements), ((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( THIS->this_method, ((RogueParser__peek( THIS ))), Rogue_literal_strings[290], false ))))) );
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, THIS->this_method->statements );
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->this_method->statements), ((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( THIS->this_method, ((RogueParser__peek( THIS ))), Rogue_literal_strings[292], false ))))) );
  }
  return (RogueLogical)(true);
}

void RogueParser__parse_single_or_multi_line_statements__CmdStatementList_TokenType( RogueClassParser* THIS, RogueClassCmdStatementList* statements_0, RogueClassTokenType* end_type_1 )
{
  if (((RogueParser__consume_eols( THIS ))))
  {
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, statements_0 );
    RogueParser__must_consume__TokenType_String( THIS, end_type_1, ((RogueString*)(NULL)) );
  }
  else
  {
    RogueParser__parse_single_line_statements__CmdStatementList( THIS, statements_0 );
    RogueParser__consume_eols( THIS );
  }
}

void RogueParser__parse_multi_line_statements__CmdStatementList( RogueClassParser* THIS, RogueClassCmdStatementList* statements_0 )
{
  RogueClassCmdStatementList* prev_statement_list_1 = (THIS->cur_statement_list);
  THIS->cur_statement_list = statements_0;
  RogueParser__consume_end_commands( THIS );
  while (((RogueParser__next_is_statement( THIS ))))
  {
    RogueParser__parse_statement__CmdStatementList_Logical( THIS, statements_0, true );
    while ((((RogueParser__consume__TokenType( THIS, RogueTokenType_eol ))) || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_semicolon )))))
    {
    }
    RogueParser__consume_end_commands( THIS );
  }
  THIS->cur_statement_list = prev_statement_list_1;
}

void RogueParser__parse_augment_statements( RogueClassParser* THIS )
{
  RogueClassCmdStatementList* prev_statement_list_0 = (THIS->cur_statement_list);
  RogueMethod__begin_label__Token_String_Logical( THIS->this_method, ((RogueParser__peek( THIS ))), Rogue_literal_strings[290], true );
  RogueMethod__begin_label__Token_String_Logical( THIS->this_method, ((RogueParser__peek( THIS ))), Rogue_literal_strings[292], true );
  RogueClassCmdLabel* cur_label_1 = (((RogueMethod__begin_label__Token_String_Logical( THIS->this_method, ((RogueParser__peek( THIS ))), Rogue_literal_strings[290], true ))));
  THIS->cur_statement_list = cur_label_1->statements;
  RogueParser__consume_end_commands( THIS );
  while (((RogueParser__next_is_statement( THIS ))))
  {
    RogueClassToken* t_2 = (((RogueParser__peek( THIS ))));
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_specialize ))))
    {
      cur_label_1 = ((RogueClassCmdLabel*)((RogueMethod__begin_label__Token_String_Logical( THIS->this_method, t_2, ((RogueParser__read_identifier__Logical( THIS, false ))), true ))));
      THIS->cur_statement_list = cur_label_1->statements;
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_specialize, ((RogueString*)(NULL)) );
      RogueParser__consume_end_commands( THIS );
      continue;
    }
    RogueParser__parse_statement__CmdStatementList_Logical( THIS, cur_label_1->statements, true );
    while ((((RogueParser__consume__TokenType( THIS, RogueTokenType_eol ))) || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_semicolon )))))
    {
    }
    RogueParser__consume_end_commands( THIS );
  }
  THIS->cur_statement_list = prev_statement_list_0;
}

void RogueParser__parse_single_line_statements__CmdStatementList( RogueClassParser* THIS, RogueClassCmdStatementList* statements_0 )
{
  RogueClassCmdStatementList* prev_statement_list_1 = (THIS->cur_statement_list);
  THIS->cur_statement_list = statements_0;
  while (((RogueParser__next_is_statement( THIS ))))
  {
    RogueParser__parse_statement__CmdStatementList_Logical( THIS, statements_0, false );
    if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_semicolon )))))
    {
      THIS->cur_statement_list = prev_statement_list_1;
      return;
    }
    while (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_semicolon ))))
    {
    }
    if (((RogueParser__next_is_end_command( THIS ))))
    {
      goto _auto_1231;
    }
  }
  _auto_1231:;
  if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_eol )))))
  {
    if (!(((RogueToken__is_structure( ((RogueParser__peek( THIS ))) )))))
    {
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_eol, ((RogueString*)(NULL)) );
    }
  }
  THIS->cur_statement_list = prev_statement_list_1;
}

void RogueParser__parse_statement__CmdStatementList_Logical( RogueClassParser* THIS, RogueClassCmdStatementList* statements_0, RogueLogical allow_control_structures_1 )
{
  RogueClassToken* t_2 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_nativeHeader ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdNativeHeader__init__Token_String( ((RogueClassCmdNativeHeader*)ROGUE_CREATE_OBJECT(CmdNativeHeader)), t_2, (call_ROGUEM43( 1, (RogueClassToken*)(t_2) )) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_nativeCode ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdNativeCode__init__Token_String( ((RogueClassCmdNativeCode*)ROGUE_CREATE_OBJECT(CmdNativeCode)), t_2, (call_ROGUEM43( 1, (RogueClassToken*)(t_2) )) ))))) );
    return;
  }
  if (allow_control_structures_1)
  {
    if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_if ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueParser__parse_if( THIS ))))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_which ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueParser__parse_which( THIS ))))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_forEach ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueParser__parse_for_each( THIS ))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_contingent ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueParser__parse_contingent( THIS ))))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_while ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueParser__parse_while( THIS ))))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_loop ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueParser__parse_loop( THIS ))))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_try ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueParser__parse_try( THIS ))))) );
      return;
    }
  }
  if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_local ))))
  {
    RogueParser__parse_local_or_global__CmdStatementList( THIS, statements_0 );
    return;
  }
  else if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_global ))))
  {
    RogueParser__parse_local_or_global__CmdStatementList( THIS, ((RogueClassCmdStatementList*)(NULL)) );
    return;
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_return ))))
  {
    if ((((RogueMethod__is_macro( THIS->this_method ))) && !!(THIS->this_method->_return_type)))
    {
      ROGUE_THROW(((RogueToken__error__String( t_2, Rogue_literal_strings[284] ))));
    }
    if (((RogueParser__next_is_end_command( THIS ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), t_2, ((RogueClassCmd*)(NULL)) ))))) );
    }
    else
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), t_2, ((RogueParser__parse_expression( THIS ))) ))))) );
    }
    return;
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_await ))))
  {
    RogueClassCmdStatementList* statement_list_3 = (((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))));
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdAwait__init__Token_Cmd_CmdStatementList_Local( ((RogueClassCmdAwait*)ROGUE_CREATE_OBJECT(CmdAwait)), t_2, ((RogueParser__parse_expression( THIS ))), statement_list_3, ((RogueClassLocal*)(NULL)) ))))) );
    return;
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_yield ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdYield__init__Token( ((RogueClassCmdYield*)ROGUE_CREATE_OBJECT(CmdYield)), t_2 ))))) );
    return;
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_throw ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdThrow__init__Token_Cmd( ((RogueClassCmdThrow*)ROGUE_CREATE_OBJECT(CmdThrow)), t_2, ((RogueParser__parse_expression( THIS ))) ))))) );
    return;
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_noAction ))))
  {
    return;
  }
  else if ((((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_trace ))) || ((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_trace_position )))))
  {
    RogueLogical include_position_4 = (((void*)t_2->_type) == ((void*)RogueTokenType_keyword_trace_position));
    RogueStringBuilder* buffer_5 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
    RogueStringBuilder__print__String( ((RogueStringBuilder__print__Character( buffer_5, (RogueCharacter)'[' ))), THIS->_this_type->name );
    if (!!(THIS->this_method))
    {
      RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( buffer_5, Rogue_literal_strings[51] ))), THIS->this_method->name ))), Rogue_literal_strings[285] );
    }
    RogueStringBuilder__print__String( buffer_5, ((RogueFile__filename( ((RogueFile__init__String( ((RogueClassFile*)ROGUE_CREATE_OBJECT(File)), t_2->filepath ))) ))) );
    RogueStringBuilder__print__Character( ((RogueStringBuilder__print__Int32( ((RogueStringBuilder__print__Character( buffer_5, (RogueCharacter)':' ))), t_2->line ))), (RogueCharacter)']' );
    RogueInt32 data_pos_6 = ((buffer_5->characters->count + 2));
    RogueClassCmdArgs* args_7 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))));
    RogueLogical needs_space_8 = (false);
    RogueLogical first_9 = (true);
    while (((((RogueTokenReader__has_another( THIS->reader ))) && !(((RogueParser__next_is_end_command( THIS ))))) && (first_9 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma ))))))
    {
      if (first_9)
      {
        if (include_position_4)
        {
          RogueStringBuilder__print__String( buffer_5, Rogue_literal_strings[286] );
        }
        else
        {
          RogueStringBuilder__clear( buffer_5 );
        }
      }
      first_9 = ((RogueLogical)false);
      RogueClassToken* start_t_10 = (((RogueParser__peek( THIS ))));
      RogueClassCmd* expr_11 = (((RogueParser__parse_expression( THIS ))));
      if (RogueObject_instance_of(expr_11,RogueTypeCmdLiteralString))
      {
        RogueStringBuilder__print__String( buffer_5, ((RogueClassCmdLiteralString*)(RogueObject_as(expr_11,RogueTypeCmdLiteralString)))->value );
        needs_space_8 = ((RogueLogical)false);
      }
      else
      {
        if (needs_space_8)
        {
          RogueStringBuilder__print__Character( buffer_5, (RogueCharacter)' ' );
        }
        RogueClassToken* end_t_12 = (((RogueParser__peek( THIS ))));
        RogueClassParseReader* parse_reader_13 = (((RogueString_ParseReaderTable__get__String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->parsereaders_by_filepath, start_t_10->filepath ))));
        if ((((!!(parse_reader_13) && !!(start_t_10->line)) && !!(start_t_10->column)) && ((RogueString__operatorEQUALSEQUALS__String( start_t_10->filepath, end_t_12->filepath )))))
        {
          RogueParseReader__seek_location__Int32_Int32( parse_reader_13, start_t_10->line, start_t_10->column );
          while ((((RogueParseReader__has_another( parse_reader_13 ))) && (parse_reader_13->line < end_t_12->line || (parse_reader_13->line == end_t_12->line && parse_reader_13->column < end_t_12->column))))
          {
            RogueStringBuilder__print__Character( buffer_5, ((RogueParseReader__read( parse_reader_13 ))) );
          }
          RogueStringBuilder__print__String( buffer_5, Rogue_literal_strings[287] );
          RogueCmdList__add__Cmd( ((RogueCmdList*)args_7), expr_11 );
          needs_space_8 = ((RogueLogical)true);
        }
      }
    }
    if ((include_position_4 && !!(args_7->count)))
    {
      RogueStringBuilder__insert_spaces__Int32_Int32_Character( buffer_5, data_pos_6, (((data_pos_6 + 3) & -4) - data_pos_6), (RogueCharacter)' ' );
    }
    if ((((RogueTokenReader__has_another( THIS->reader ))) && !(((RogueParser__next_is_end_command( THIS ))))))
    {
      ROGUE_THROW(((RogueToken__error__String( ((RogueParser__peek( THIS ))), Rogue_literal_strings[288] ))));
    }
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdTrace__init__Token_Cmd( ((RogueClassCmdTrace*)ROGUE_CREATE_OBJECT(CmdTrace)), t_2, ((RogueClassCmd*)(((RogueCmdFormattedString__init__Token_String_CmdArgs( ((RogueClassCmdFormattedString*)ROGUE_CREATE_OBJECT(CmdFormattedString)), t_2, ((RogueStringBuilder__to_String( buffer_5 ))), args_7 ))))) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_specialize ))))
  {
    if (THIS->parsing_augment)
    {
      ROGUE_THROW(((RogueToken__error__String( t_2, Rogue_literal_strings[289] ))));
    }
    else
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( THIS->this_method, t_2, ((RogueParser__read_identifier__Logical( THIS, false ))), false ))))) );
    }
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_specialize, ((RogueString*)(NULL)) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_escapeWhile ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdEscape__init__Token_Int32_CmdControlStructure( ((RogueClassCmdEscape*)ROGUE_CREATE_OBJECT(CmdEscape)), t_2, 8, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_escapeForEach ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdEscape__init__Token_Int32_CmdControlStructure( ((RogueClassCmdEscape*)ROGUE_CREATE_OBJECT(CmdEscape)), t_2, 9, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_escapeContingent ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdEscape__init__Token_Int32_CmdControlStructure( ((RogueClassCmdEscape*)ROGUE_CREATE_OBJECT(CmdEscape)), t_2, 1, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_escapeLoop ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdEscape__init__Token_Int32_CmdControlStructure( ((RogueClassCmdEscape*)ROGUE_CREATE_OBJECT(CmdEscape)), t_2, 7, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_escapeIf ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdEscape__init__Token_Int32_CmdControlStructure( ((RogueClassCmdEscape*)ROGUE_CREATE_OBJECT(CmdEscape)), t_2, 2, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_escapeTry ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdEscape__init__Token_Int32_CmdControlStructure( ((RogueClassCmdEscape*)ROGUE_CREATE_OBJECT(CmdEscape)), t_2, 4, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_escapeWhich ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdEscape__init__Token_Int32_CmdControlStructure( ((RogueClassCmdEscape*)ROGUE_CREATE_OBJECT(CmdEscape)), t_2, 5, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_nextIteration ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdNextIteration__init__Token_CmdControlStructure( ((RogueClassCmdNextIteration*)ROGUE_CREATE_OBJECT(CmdNextIteration)), t_2, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_necessary ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdNecessary__init__Token_Cmd_CmdContingent( ((RogueClassCmdNecessary*)ROGUE_CREATE_OBJECT(CmdNecessary)), t_2, ((RogueParser__parse_expression( THIS ))), ((RogueClassCmdContingent*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_sufficient ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdSufficient__init__Token_Cmd_CmdContingent( ((RogueClassCmdSufficient*)ROGUE_CREATE_OBJECT(CmdSufficient)), t_2, ((RogueParser__parse_expression( THIS ))), ((RogueClassCmdContingent*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_plus_plus ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdAdjust__init__Token_Cmd_Int32( ((RogueClassCmdAdjust*)ROGUE_CREATE_OBJECT(CmdAdjust)), t_2, ((RogueParser__parse_expression( THIS ))), 1 ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_minus_minus ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdAdjust__init__Token_Cmd_Int32( ((RogueClassCmdAdjust*)ROGUE_CREATE_OBJECT(CmdAdjust)), t_2, ((RogueParser__parse_expression( THIS ))), -1 ))))) );
    return;
  }
  RogueClassCmd* expression_14 = (((RogueParser__parse_expression( THIS ))));
  t_2 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_equals ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)ROGUE_CREATE_OBJECT(CmdAssign)), t_2, expression_14, ((RogueParser__parse_expression( THIS ))) ))))) );
    return;
  }
  if ((call_ROGUEM92( 14, (RogueClassTokenType*)(t_2->_type) )))
  {
    RogueParser__read( THIS );
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdOpWithAssign__init__Token_Cmd_TokenType_Cmd( ((RogueClassCmdOpWithAssign*)ROGUE_CREATE_OBJECT(CmdOpWithAssign)), t_2, expression_14, t_2->_type, ((RogueParser__parse_expression( THIS ))) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_plus_plus ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdAdjust__init__Token_Cmd_Int32( ((RogueClassCmdAdjust*)ROGUE_CREATE_OBJECT(CmdAdjust)), t_2, expression_14, 1 ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_minus_minus ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdAdjust__init__Token_Cmd_Int32( ((RogueClassCmdAdjust*)ROGUE_CREATE_OBJECT(CmdAdjust)), t_2, expression_14, -1 ))))) );
    return;
  }
  RogueClassTokenType* t_type_15 = (t_2->_type);
  if ((call_ROGUEM92( 14, (RogueClassTokenType*)(t_type_15) )))
  {
    RogueParser__read( THIS );
    RogueClassCmd* target_16 = (expression_14);
    RogueClassCmd* new_value_17 = (((RogueParser__parse_expression( THIS ))));
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdOpWithAssign__init__Token_Cmd_TokenType_Cmd( ((RogueClassCmdOpWithAssign*)ROGUE_CREATE_OBJECT(CmdOpWithAssign)), t_2, target_16, t_type_15, new_value_17 ))))) );
    return;
  }
  if (!(((RogueParser__next_is_end_command( THIS )))))
  {
    RogueClassCmdAccess* access_18 = (((RogueClassCmdAccess*)(RogueObject_as(expression_14,RogueTypeCmdAccess))));
    if ((!!(access_18) && ((void*)access_18->args) == ((void*)NULL)))
    {
      RogueClassCmdArgs* args_19 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))));
      while ((!(((RogueParser__next_is_end_command( THIS )))) && !(((RogueToken__is_structure( ((RogueParser__peek( THIS ))) ))))))
      {
        RogueCmdList__add__Cmd( ((RogueCmdList*)args_19), ((RogueParser__parse_expression( THIS ))) );
      }
      access_18->args = args_19;
    }
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), expression_14 );
}

RogueClassCmdWhich* RogueParser__parse_which( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueClassCmdWhich* cmd_which_1 = (((RogueCmdWhich__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Int32( ((RogueClassCmdWhich*)ROGUE_CREATE_OBJECT(CmdWhich)), t_0, ((RogueParser__parse_expression( THIS ))), ((RogueCmdWhichCaseList__init( ((RogueCmdWhichCaseList*)ROGUE_CREATE_OBJECT(CmdWhichCaseList)) ))), ((RogueClassCmdWhichCase*)(NULL)), 5 ))));
  RogueParser__must_consume_eols( THIS );
  while (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_case ))))
  {
    t_0 = ((RogueClassToken*)((RogueParser__read( THIS ))));
    RogueParser__consume_eols( THIS );
    RogueClassCmdWhichCase* cmd_case_2 = (((RogueCmdWhich__add_case__Token( cmd_which_1, t_0 ))));
    RogueLogical first_3 = (true);
    while ((first_3 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
    {
      first_3 = ((RogueLogical)false);
      RogueCmdList__add__Cmd( ((RogueCmdList*)cmd_case_2->conditions), ((RogueParser__parse_expression( THIS ))) );
      RogueParser__consume_eols( THIS );
    }
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
    {
      RogueParser__consume_eols( THIS );
    }
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_case_2->statements );
  }
  if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_others ))))
  {
    t_0 = ((RogueClassToken*)((RogueParser__read( THIS ))));
    RogueParser__consume_eols( THIS );
    RogueClassCmdWhichCase* cmd_case_4 = (((RogueCmdWhich__add_case_others__Token( cmd_which_1, t_0 ))));
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
    {
      RogueParser__consume_eols( THIS );
    }
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_case_4->statements );
  }
  RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_keyword_endWhich, ((RogueString*)(NULL)) );
  return (RogueClassCmdWhich*)(cmd_which_1);
}

RogueLogical RogueParser__parse_native_elements( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_nativeHeader ))))
  {
    RogueString* code_1 = ((call_ROGUEM43( 1, (RogueClassToken*)(t_0) )));
    if (!(((RogueStringList__locate__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_header, code_1 ))).exists))
    {
      RogueStringList__add__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_header, code_1 );
    }
    return (RogueLogical)(true);
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_nativeCode ))))
  {
    RogueString* code_2 = ((call_ROGUEM43( 1, (RogueClassToken*)(t_0) )));
    if (!(((RogueStringList__locate__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_header, code_2 ))).exists))
    {
      RogueStringList__add__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_code, code_2 );
    }
    return (RogueLogical)(true);
  }
  else
  {
    return (RogueLogical)(false);
  }
}

RogueClassCmdContingent* RogueParser__parse_contingent( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueClassCmdContingent* cmd_contingent_1 = (((RogueCmdContingent__init__Token_CmdStatementList( ((RogueClassCmdContingent*)ROGUE_CREATE_OBJECT(CmdContingent)), t_0, ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))) ))));
  RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_contingent_1->statements );
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_satisfied ))))
  {
    cmd_contingent_1->satisfied_statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_contingent_1->satisfied_statements );
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_unsatisfied ))))
  {
    cmd_contingent_1->unsatisfied_statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_contingent_1->unsatisfied_statements );
  }
  RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_keyword_endContingent, ((RogueString*)(NULL)) );
  return (RogueClassCmdContingent*)(cmd_contingent_1);
}

RogueClassCmdTry* RogueParser__parse_try( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueClassCmdTry* cmd_try_1 = (((RogueCmdTry__init__Token_CmdStatementList_CmdCatchList( ((RogueClassCmdTry*)ROGUE_CREATE_OBJECT(CmdTry)), t_0, ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))), ((RogueCmdCatchList__init( ((RogueCmdCatchList*)ROGUE_CREATE_OBJECT(CmdCatchList)) ))) ))));
  RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_try_1->statements );
  while (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_catch ))))
  {
    RogueClassCmdCatch* cmd_catch_2 = (((RogueCmdTry__add_catch__Token( cmd_try_1, ((RogueParser__read( THIS ))) ))));
    RogueParser__consume_eols( THIS );
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_open_paren, ((RogueString*)(NULL)) );
    RogueClassToken* error_t_3 = (((RogueParser__peek( THIS ))));
    RogueString* error_name_4 = (((RogueParser__read_identifier__Logical( THIS, false ))));
    RogueParser__consume_eols( THIS );
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_colon, ((RogueString*)(NULL)) );
    RogueParser__consume_eols( THIS );
    cmd_catch_2->error_var = ((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, error_t_3, error_name_4, ((Rogue_Parser__parse_type( THIS ))), ((RogueClassCmd*)(NULL)) )));
    RogueParser__consume_eols( THIS );
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_catch_2->statements );
  }
  RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_keyword_endTry, ((RogueString*)(NULL)) );
  return (RogueClassCmdTry*)(cmd_try_1);
}

void RogueParser__parse_local_or_global__CmdStatementList( RogueClassParser* THIS, RogueClassCmdStatementList* statements_0 )
{
  RogueLocalList__clear( THIS->local_declarations );
  RogueClassToken* t_1 = (((RogueParser__read( THIS ))));
  RogueLogical first_2 = (true);
  while ((first_2 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
  {
    first_2 = ((RogueLogical)false);
    t_1 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
    RogueString* name_3 = (((RogueParser__read_identifier__Logical( THIS, false ))));
    RogueClassLocal* v_4 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_1, name_3, ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
    RogueLocalList__add__Local( THIS->local_declarations, v_4 );
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_equals ))))
    {
      v_4->initial_value = ((RogueParser__parse_expression( THIS )));
    }
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
  {
    RogueClassType* type_5 = (((Rogue_Parser__parse_type( THIS ))));
    {
      RogueLocalList* _auto_1297_6 = (THIS->local_declarations);
      RogueInt32 _auto_1298_7 = (0);
      for (;_auto_1298_7 < _auto_1297_6->count;++_auto_1298_7)
      {
        RogueClassLocal* v_8 = (((RogueClassLocal*)(_auto_1297_6->data->objects[_auto_1298_7])));
        v_8->_type = type_5;
      }
    }
  }
  else
  {
    {
      RogueLocalList* _auto_1299_9 = (THIS->local_declarations);
      RogueInt32 _auto_1300_10 = (0);
      for (;_auto_1300_10 < _auto_1299_9->count;++_auto_1300_10)
      {
        RogueClassLocal* v_11 = (((RogueClassLocal*)(_auto_1299_9->data->objects[_auto_1300_10])));
        if ((((void*)v_11->_type) == ((void*)NULL) && !!(v_11->initial_value)))
        {
          v_11->_type = (call_ROGUEM62( 17, (RogueClassCmd*)(v_11->initial_value), ((RogueScope__init__Type_Method( ((RogueClassScope*)ROGUE_CREATE_OBJECT(Scope)), THIS->_this_type, ((RogueClassMethod*)(NULL)) ))) ));
        }
      }
    }
  }
  if (!!(statements_0))
  {
    {
      RogueLocalList* _auto_1301_12 = (THIS->local_declarations);
      RogueInt32 _auto_1302_13 = (0);
      for (;_auto_1302_13 < _auto_1301_12->count;++_auto_1302_13)
      {
        RogueClassLocal* v_14 = (((RogueClassLocal*)(_auto_1301_12->data->objects[_auto_1302_13])));
        RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local_Logical( ((RogueClassCmdLocalDeclaration*)ROGUE_CREATE_OBJECT(CmdLocalDeclaration)), v_14->t, v_14, false ))))) );
      }
    }
  }
  else
  {
    {
      RogueLocalList* _auto_1306_15 = (THIS->local_declarations);
      RogueInt32 _auto_1307_16 = (0);
      for (;_auto_1307_16 < _auto_1306_15->count;++_auto_1307_16)
      {
        RogueClassLocal* v_17 = (((RogueClassLocal*)(_auto_1306_15->data->objects[_auto_1307_16])));
        RoguePropertyList__add__Property( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->global_properties, ((RogueProperty__init__Token_Type_String_Type_Cmd( ((RogueClassProperty*)ROGUE_CREATE_OBJECT(Property)), v_17->t, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global, v_17->name, v_17->_type, v_17->initial_value ))) );
      }
    }
  }
}

RogueClassType* Rogue_Parser__parse_type( RogueClassParser* THIS )
{
  RogueString* name_0 = 0;
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (!!((call_ROGUEM48( 15, (RogueClassToken*)(t_1) ))))
  {
    RogueClassType* type_2 = ((call_ROGUEM48( 15, (RogueClassToken*)(((RogueParser__read( THIS )))) )));
    if ((((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_empty_brackets ))) || ((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_question_mark )))))
    {
      name_0 = ((RogueString*)type_2->name);
      for (;;)
      {
        if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_empty_brackets ))))
        {
          name_0 = ((RogueString*)((RogueString__operatorPLUS__String( name_0, Rogue_literal_strings[184] ))));
        }
        else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_question_mark ))))
        {
          name_0 = ((RogueString*)((RogueString__operatorPLUS__String( name_0, Rogue_literal_strings[204] ))));
        }
        else
        {
          goto _auto_1308;
        }
      }
      _auto_1308:;
    }
    else
    {
      return (RogueClassType*)(type_2);
    }
  }
  else
  {
    name_0 = ((RogueString*)((RogueParser__parse_possible_type__Logical( THIS, false ))));
  }
  RogueClassType* type_3 = (((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), t_1, name_0 ))));
  return (RogueClassType*)(type_3);
}

RogueString* RogueParser__parse_possible_type__Logical( RogueClassParser* THIS, RogueLogical allow_at_sign_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  RogueString* name_2 = (((RogueParser__read_identifier__Logical( THIS, allow_at_sign_0 ))));
  if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_open_specialize ))))
  {
    name_2 = ((RogueString*)((RogueString__operatorPLUS__String( name_2, ((RogueParser__parse_specialization_string( THIS ))) ))));
  }
  else if (((RogueString__operatorEQUALSEQUALS__String( name_2, Rogue_literal_strings[263] ))))
  {
    RogueTypeList* parameter_types_3 = 0;
    RogueClassType* return_type_4 = 0;
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
    {
      if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_close_paren )))))
      {
        parameter_types_3 = ((RogueTypeList*)((RogueTypeList__init( ((RogueTypeList*)ROGUE_CREATE_OBJECT(TypeList)) ))));
        RogueLogical first_5 = (true);
        while ((first_5 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
        {
          first_5 = ((RogueLogical)false);
          RogueClassToken* type_t_6 = (((RogueParser__peek( THIS ))));
          RogueString* type_name_7 = (((RogueParser__parse_possible_type__Logical( THIS, false ))));
          if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
          {
            RogueTypeList__add__Type( parameter_types_3, ((Rogue_Parser__parse_type( THIS ))) );
          }
          else
          {
            RogueTypeList__add__Type( parameter_types_3, ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), type_t_6, type_name_7 ))) );
          }
        }
        RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
      }
    }
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_arrow ))))
    {
      RogueLogical has_parens_8 = (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))));
      return_type_4 = ((RogueClassType*)((Rogue_Parser__parse_type( THIS ))));
      if (has_parens_8)
      {
        RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
      }
    }
    name_2 = ((RogueString*)((RogueProgram__get_callback_type_reference__Token_TypeList_Type( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), t_1, parameter_types_3, return_type_4 )))->name);
  }
  for (;;)
  {
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_empty_brackets ))))
    {
      name_2 = ((RogueString*)((RogueString__operatorPLUS__String( name_2, Rogue_literal_strings[184] ))));
    }
    else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_question_mark ))))
    {
      name_2 = ((RogueString*)((RogueString__operatorPLUS__String( name_2, Rogue_literal_strings[204] ))));
    }
    else
    {
      goto _auto_1309;
    }
  }
  _auto_1309:;
  return (RogueString*)(name_2);
}

RogueClassCmdIf* RogueParser__parse_if( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueClassCmdIf* cmd_if_1 = (((RogueCmdIf__init__Token_Cmd_Int32( ((RogueClassCmdIf*)ROGUE_CREATE_OBJECT(CmdIf)), t_0, ((RogueClassCmd*)(NULL)), 2 ))));
  cmd_if_1->condition = ((RogueParser__parse_expression( THIS )));
  if (((RogueParser__consume_eols( THIS ))))
  {
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_if_1->statements );
    t_0 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
    RogueClassCmdIf* cur_if_2 = (cmd_if_1);
    while (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_elseIf ))))
    {
      RogueInt32 starting_position_3 = (THIS->reader->position);
      RogueParser__read( THIS );
      RogueClassCmd* elseIf_condition_4 = (((RogueParser__parse_expression( THIS ))));
      if (((RogueParser__consume__TokenType( THIS, RogueTokenType_eol ))))
      {
        RogueClassCmdIf* cmd_else_if_5 = (((RogueCmdIf__init__Token_Cmd_Int32( ((RogueClassCmdIf*)ROGUE_CREATE_OBJECT(CmdIf)), t_0, elseIf_condition_4, 3 ))));
        RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_else_if_5->statements );
        cur_if_2->else_statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
        RogueCmdList__add__Cmd( ((RogueCmdList*)cur_if_2->else_statements), ((RogueClassCmd*)(cmd_else_if_5)) );
        cur_if_2 = ((RogueClassCmdIf*)cmd_else_if_5);
      }
      else
      {
        THIS->reader->position = starting_position_3;
        goto _auto_1310;
      }
      t_0 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
    }
    _auto_1310:;
    if ((((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_else ))) && ((void*)((RogueTokenReader__peek__Int32( THIS->reader, 1 )))->_type) == ((void*)RogueTokenType_eol)))
    {
      RogueParser__read( THIS );
      cur_if_2->else_statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
      RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cur_if_2->else_statements );
    }
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_keyword_endIf, ((RogueString*)(NULL)) );
  }
  else
  {
    RogueParser__parse_single_line_statements__CmdStatementList( THIS, cmd_if_1->statements );
    RogueParser__consume_eols( THIS );
    t_0 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
    RogueClassCmdIf* cur_if_6 = (cmd_if_1);
    while (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_elseIf ))))
    {
      RogueInt32 starting_position_7 = (THIS->reader->position);
      RogueParser__read( THIS );
      RogueClassCmd* elseIf_condition_8 = (((RogueParser__parse_expression( THIS ))));
      if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_eol ))))
      {
        THIS->reader->position = starting_position_7;
        goto _auto_1311;
      }
      else
      {
        RogueClassCmdIf* cmd_else_if_9 = (((RogueCmdIf__init__Token_Cmd_Int32( ((RogueClassCmdIf*)ROGUE_CREATE_OBJECT(CmdIf)), t_0, elseIf_condition_8, 3 ))));
        RogueParser__parse_single_line_statements__CmdStatementList( THIS, cmd_else_if_9->statements );
        cur_if_6->else_statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
        RogueCmdList__add__Cmd( ((RogueCmdList*)cur_if_6->else_statements), ((RogueClassCmd*)(cmd_else_if_9)) );
        cur_if_6 = ((RogueClassCmdIf*)cmd_else_if_9);
        RogueParser__must_consume_eols( THIS );
      }
      t_0 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
    }
    _auto_1311:;
    if ((((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_else ))) && ((void*)((RogueTokenReader__peek__Int32( THIS->reader, 1 )))->_type) != ((void*)RogueTokenType_eol)))
    {
      RogueParser__read( THIS );
      cur_if_6->else_statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
      RogueParser__parse_single_line_statements__CmdStatementList( THIS, cur_if_6->else_statements );
    }
  }
  return (RogueClassCmdIf*)(cmd_if_1);
}

RogueClassCmdGenericLoop* RogueParser__parse_loop( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueClassCmdGenericLoop* cmd_loop_1 = (((RogueCmdGenericLoop__init__Token_Int32_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)ROGUE_CREATE_OBJECT(CmdGenericLoop)), t_0, 7, ((RogueClassCmd*)(NULL)), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
  if (!(((RogueParser__consume_eols( THIS )))))
  {
    RogueClassLocal* control_var_2 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
    control_var_2->initial_value = ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), t_0, 1 )))));
    RogueClassLocal* last_var_3 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
    last_var_3->initial_value = ((RogueParser__parse_expression( THIS )));
    RogueParser__must_consume_eols( THIS );
    RogueClassCmdAdjustLocal* step_cmd_4 = (((RogueCmdAdjustLocal__init__Token_Local_Int32( ((RogueClassCmdAdjustLocal*)ROGUE_CREATE_OBJECT(CmdAdjustLocal)), t_0, control_var_2, 1 ))));
    cmd_loop_1->condition = ((RogueClassCmd*)(((RogueClassCmdCompareLE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLE*)ROGUE_CREATE_OBJECT(CmdCompareLE))), t_0, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), t_0, control_var_2 ))))), ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), t_0, last_var_3 ))))) )))))));
    RogueCmdGenericLoop__add_control_var__Local( cmd_loop_1, control_var_2 );
    RogueCmdGenericLoop__add_control_var__Local( cmd_loop_1, last_var_3 );
    RogueCmdGenericLoop__add_upkeep__Cmd( cmd_loop_1, ((RogueClassCmd*)(step_cmd_4)) );
  }
  RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_loop_1->statements );
  RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_keyword_endLoop, ((RogueString*)(NULL)) );
  return (RogueClassCmdGenericLoop*)(cmd_loop_1);
}

RogueClassCmdGenericLoop* RogueParser__parse_while( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueClassCmdGenericLoop* cmd_while_1 = (((RogueCmdGenericLoop__init__Token_Int32_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)ROGUE_CREATE_OBJECT(CmdGenericLoop)), t_0, 8, ((RogueParser__parse_expression( THIS ))), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
  if (((RogueParser__consume_eols( THIS ))))
  {
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_while_1->statements );
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_keyword_endWhile, ((RogueString*)(NULL)) );
  }
  else
  {
    RogueParser__parse_single_line_statements__CmdStatementList( THIS, cmd_while_1->statements );
    RogueParser__consume_eols( THIS );
  }
  return (RogueClassCmdGenericLoop*)(cmd_while_1);
}

RogueClassCmd* RogueParser__parse_for_each( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueLogical has_parens_1 = (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))));
  RogueClassCmd* expr_2 = (((RogueParser__parse_expression( THIS ))));
  RogueClassCmdAccess* access_3 = (((RogueClassCmdAccess*)(RogueObject_as(expr_2,RogueTypeCmdAccess))));
  if (!!(access_3))
  {
    if ((!!(access_3->context) || !!(access_3->args)))
    {
      ROGUE_THROW(((RogueToken__error__String( access_3->t, Rogue_literal_strings[274] ))));
    }
    else
    {
      RogueString* index_var_name_4 = 0;
      if (((RogueString__operatorEQUALSEQUALS__String( access_3->name, Rogue_literal_strings[275] ))))
      {
        ROGUE_THROW(((RogueToken__error__String( access_3->t, Rogue_literal_strings[276] ))));
      }
      else if (((RogueParser__consume__String( THIS, Rogue_literal_strings[275] ))))
      {
        index_var_name_4 = ((RogueString*)((RogueParser__read_identifier__Logical( THIS, false ))));
      }
      if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_in ))))
      {
        RogueClassCmd* collection_5 = (((RogueParser__parse_expression( THIS ))));
        RogueClassCmdRange* range_6 = (((RogueClassCmdRange*)(RogueObject_as(collection_5,RogueTypeCmdRange))));
        if (!!(range_6))
        {
          if (!!(index_var_name_4))
          {
            ROGUE_THROW(((RogueToken__error__String( range_6->t, Rogue_literal_strings[277] ))));
          }
          RogueClassLocal* control_var_7 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, access_3->name, ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
          control_var_7->initial_value = range_6->first;
          RogueClassLocal* last_var_8 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
          last_var_8->initial_value = range_6->last;
          RogueClassCmd* step_cmd_9 = (((RogueClassCmd*)(NULL)));
          if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_step ))))
          {
            RogueClassCmd* step_value_10 = (((RogueParser__parse_expression( THIS ))));
            step_cmd_9 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdLocalOpWithAssign__init__Token_Local_TokenType_Cmd( ((RogueClassCmdLocalOpWithAssign*)ROGUE_CREATE_OBJECT(CmdLocalOpWithAssign)), range_6->t, control_var_7, RogueTokenType_symbol_plus_equals, step_value_10 ))))));
          }
          else if (RogueObject_instance_of(range_6,RogueTypeCmdRangeUpTo))
          {
            step_cmd_9 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Int32( ((RogueClassCmdAdjustLocal*)ROGUE_CREATE_OBJECT(CmdAdjustLocal)), range_6->t, control_var_7, 1 ))))));
          }
          else
          {
            step_cmd_9 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Int32( ((RogueClassCmdAdjustLocal*)ROGUE_CREATE_OBJECT(CmdAdjustLocal)), range_6->t, control_var_7, -1 ))))));
          }
          RogueClassCmd* compare_cmd_11 = 0;
          if (RogueObject_instance_of(range_6,RogueTypeCmdRangeUpTo))
          {
            compare_cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCompareLE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLE*)ROGUE_CREATE_OBJECT(CmdCompareLE))), t_0, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), t_0, control_var_7 ))))), ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), t_0, last_var_8 ))))) ))))))));
          }
          else
          {
            compare_cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCompareGE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareGE*)ROGUE_CREATE_OBJECT(CmdCompareGE))), t_0, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), t_0, control_var_7 ))))), ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), t_0, last_var_8 ))))) ))))))));
          }
          RogueClassCmdGenericLoop* cmd_for_each_12 = (((RogueCmdGenericLoop__init__Token_Int32_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)ROGUE_CREATE_OBJECT(CmdGenericLoop)), t_0, 9, compare_cmd_11, ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
          RogueCmdGenericLoop__add_control_var__Local( cmd_for_each_12, control_var_7 );
          RogueCmdGenericLoop__add_control_var__Local( cmd_for_each_12, last_var_8 );
          RogueCmdGenericLoop__add_upkeep__Cmd( cmd_for_each_12, step_cmd_9 );
          if (has_parens_1)
          {
            RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
          }
          RogueParser__parse_single_or_multi_line_statements__CmdStatementList_TokenType( THIS, cmd_for_each_12->statements, RogueTokenType_keyword_endForEach );
          return (RogueClassCmd*)(((RogueClassCmd*)(cmd_for_each_12)));
        }
        else
        {
          RogueClassCmd* step_cmd_13 = 0;
          if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_step ))))
          {
            step_cmd_13 = ((RogueClassCmd*)((RogueParser__parse_expression( THIS ))));
          }
          if (has_parens_1)
          {
            RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
          }
          RogueClassCmdForEach* cmd_for_each_14 = (((RogueCmdForEach__init__Token_String_String_Cmd_Cmd_CmdStatementList( ((RogueClassCmdForEach*)ROGUE_CREATE_OBJECT(CmdForEach)), t_0, access_3->name, index_var_name_4, collection_5, step_cmd_13, ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))) ))));
          RogueParser__parse_single_or_multi_line_statements__CmdStatementList_TokenType( THIS, cmd_for_each_14->statements, RogueTokenType_keyword_endForEach );
          return (RogueClassCmd*)(((RogueClassCmd*)(cmd_for_each_14)));
        }
      }
      else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_of ))))
      {
        if (!!(index_var_name_4))
        {
          ROGUE_THROW(((RogueToken__error__String( t_0, Rogue_literal_strings[278] ))));
        }
        RogueClassCmd* collection_15 = (((RogueParser__parse_expression( THIS ))));
        RogueClassCmdRange* range_16 = (((RogueClassCmdRange*)(RogueObject_as(collection_15,RogueTypeCmdRange))));
        if (!!(range_16))
        {
          ROGUE_THROW(((RogueToken__error__String( t_0, Rogue_literal_strings[279] ))));
        }
        else
        {
          RogueClassCmd* step_cmd_17 = 0;
          if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_step ))))
          {
            step_cmd_17 = ((RogueClassCmd*)((RogueParser__parse_expression( THIS ))));
          }
          if (has_parens_1)
          {
            RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
          }
          RogueClassCmdForEach* cmd_for_each_18 = (((RogueCmdForEach__init__Token_String_String_Cmd_Cmd_CmdStatementList( ((RogueClassCmdForEach*)ROGUE_CREATE_OBJECT(CmdForEach)), t_0, ((RogueString*)(NULL)), access_3->name, collection_15, step_cmd_17, ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))) ))));
          RogueParser__parse_single_or_multi_line_statements__CmdStatementList_TokenType( THIS, cmd_for_each_18->statements, RogueTokenType_keyword_endForEach );
          return (RogueClassCmd*)(((RogueClassCmd*)(cmd_for_each_18)));
        }
      }
      else
      {
        ROGUE_THROW(((RogueToken__error__String( t_0, Rogue_literal_strings[280] ))));
      }
    }
  }
  else
  {
    RogueClassCmdRange* range_19 = (((RogueClassCmdRange*)(RogueObject_as(expr_2,RogueTypeCmdRange))));
    if (!!(range_19))
    {
      RogueClassLocal* control_var_20 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
      control_var_20->initial_value = range_19->first;
      RogueClassLocal* last_var_21 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
      last_var_21->initial_value = range_19->last;
      RogueClassCmd* step_cmd_22 = 0;
      if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_step ))))
      {
        RogueClassCmd* step_value_23 = (((RogueParser__parse_expression( THIS ))));
        step_cmd_22 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdLocalOpWithAssign__init__Token_Local_TokenType_Cmd( ((RogueClassCmdLocalOpWithAssign*)ROGUE_CREATE_OBJECT(CmdLocalOpWithAssign)), range_19->t, control_var_20, RogueTokenType_symbol_plus_equals, step_value_23 ))))));
      }
      else if (RogueObject_instance_of(range_19,RogueTypeCmdRangeUpTo))
      {
        step_cmd_22 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Int32( ((RogueClassCmdAdjustLocal*)ROGUE_CREATE_OBJECT(CmdAdjustLocal)), range_19->t, control_var_20, 1 ))))));
      }
      else
      {
        step_cmd_22 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Int32( ((RogueClassCmdAdjustLocal*)ROGUE_CREATE_OBJECT(CmdAdjustLocal)), range_19->t, control_var_20, -1 ))))));
      }
      RogueClassCmd* compare_cmd_24 = 0;
      if (RogueObject_instance_of(range_19,RogueTypeCmdRangeUpTo))
      {
        compare_cmd_24 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCompareLE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLE*)ROGUE_CREATE_OBJECT(CmdCompareLE))), t_0, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), t_0, control_var_20 ))))), ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), t_0, last_var_21 ))))) ))))))));
      }
      else
      {
        compare_cmd_24 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCompareGE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareGE*)ROGUE_CREATE_OBJECT(CmdCompareGE))), t_0, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), t_0, control_var_20 ))))), ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), t_0, last_var_21 ))))) ))))))));
      }
      RogueClassCmdGenericLoop* cmd_for_each_25 = (((RogueCmdGenericLoop__init__Token_Int32_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)ROGUE_CREATE_OBJECT(CmdGenericLoop)), t_0, 9, compare_cmd_24, ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
      RogueCmdGenericLoop__add_control_var__Local( cmd_for_each_25, control_var_20 );
      RogueCmdGenericLoop__add_control_var__Local( cmd_for_each_25, last_var_21 );
      RogueCmdGenericLoop__add_upkeep__Cmd( cmd_for_each_25, step_cmd_22 );
      if (has_parens_1)
      {
        RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
      }
      RogueParser__parse_single_or_multi_line_statements__CmdStatementList_TokenType( THIS, cmd_for_each_25->statements, RogueTokenType_keyword_endForEach );
      return (RogueClassCmd*)(((RogueClassCmd*)(cmd_for_each_25)));
    }
    else
    {
      ROGUE_THROW(((RogueToken__error__String( t_0, Rogue_literal_strings[281] ))));
    }
  }
  RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[282] ))) ))) );
  ROGUE_THROW(((RogueToken__error__String( expr_2->t, Rogue_literal_strings[283] ))));
}

RogueClassToken* RogueParser__peek( RogueClassParser* THIS )
{
  return (RogueClassToken*)(((RogueTokenReader__peek( THIS->reader ))));
}

RogueClassToken* RogueParser__read( RogueClassParser* THIS )
{
  return (RogueClassToken*)(((RogueTokenReader__read( THIS->reader ))));
}

RogueString* RogueParser__read_identifier__Logical( RogueClassParser* THIS, RogueLogical allow_at_sign_0 )
{
  RogueLogical direct_access_1 = (false);
  if (allow_at_sign_0)
  {
    direct_access_1 = ((RogueLogical)((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_at ))));
  }
  if (!(((RogueParser__next_is__TokenType( THIS, RogueTokenType_identifier )))))
  {
    if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_type_identifier ))))
    {
      RogueString* result_2 = ((call_ROGUEM48( 15, (RogueClassToken*)(((RogueParser__read( THIS )))) ))->name);
      if (direct_access_1)
      {
        result_2 = ((RogueString*)((RogueString__operatorPLUS__String( Rogue_literal_strings[174], result_2 ))));
      }
      return (RogueString*)(result_2);
    }
    ROGUE_THROW(((RogueParser__error__String( THIS, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[54] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM43( 8, (RogueClassToken*)(((RogueParser__peek( THIS )))) )) ))) ))), Rogue_literal_strings[51] ))) ))) ))));
  }
  RogueString* result_3 = ((call_ROGUEM43( 1, (RogueClassToken*)(((RogueParser__read( THIS )))) )));
  if (direct_access_1)
  {
    result_3 = ((RogueString*)((RogueString__operatorPLUS__String( Rogue_literal_strings[174], result_3 ))));
  }
  return (RogueString*)(result_3);
}

RogueClassCmd* RogueParser__parse_expression( RogueClassParser* THIS )
{
  RogueParser__consume_eols( THIS );
  return (RogueClassCmd*)(((RogueParser__parse_range( THIS ))));
}

RogueClassCmd* RogueParser__parse_range( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_range__Cmd( THIS, ((RogueParser__parse_logical_xor( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_range__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_upTo ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdRangeUpTo*)(((RogueCmdRange__init__Token_Cmd_Cmd_Cmd( ((RogueClassCmdRange*)((RogueClassCmdRangeUpTo*)ROGUE_CREATE_OBJECT(CmdRangeUpTo))), t_1, lhs_0, ((RogueParser__parse_logical_xor( THIS ))), ((RogueClassCmd*)(NULL)) ))))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_downTo ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdRangeDownTo*)(((RogueCmdRange__init__Token_Cmd_Cmd_Cmd( ((RogueClassCmdRange*)((RogueClassCmdRangeDownTo*)ROGUE_CREATE_OBJECT(CmdRangeDownTo))), t_1, lhs_0, ((RogueParser__parse_logical_xor( THIS ))), ((RogueClassCmd*)(NULL)) ))))))));
  }
  else
  {
    return (RogueClassCmd*)(lhs_0);
  }
}

RogueClassCmd* RogueParser__parse_logical_xor( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_logical_xor__Cmd( THIS, ((RogueParser__parse_logical_or( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_logical_xor__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_xor ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_logical_xor__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdLogicalXor*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdLogicalXor*)ROGUE_CREATE_OBJECT(CmdLogicalXor))), t_1, lhs_0, ((RogueParser__parse_logical_or( THIS ))) ))))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_logical_or( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_logical_or__Cmd( THIS, ((RogueParser__parse_logical_and( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_logical_or__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_or ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_logical_or__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdLogicalOr*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdLogicalOr*)ROGUE_CREATE_OBJECT(CmdLogicalOr))), t_1, lhs_0, ((RogueParser__parse_logical_and( THIS ))) ))))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_logical_and( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_logical_and__Cmd( THIS, ((RogueParser__parse_comparison( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_logical_and__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_and ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_logical_and__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdLogicalAnd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdLogicalAnd*)ROGUE_CREATE_OBJECT(CmdLogicalAnd))), t_1, lhs_0, ((RogueParser__parse_comparison( THIS ))) ))))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_comparison( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueParser__parse_bitwise_xor( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_comparison__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_eq ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdCompareEQ*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)ROGUE_CREATE_OBJECT(CmdCompareEQ))), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_is ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdCompareIs*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareIs*)ROGUE_CREATE_OBJECT(CmdCompareIs))), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_ne ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdCompareNE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareNE*)ROGUE_CREATE_OBJECT(CmdCompareNE))), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_isNot ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdCompareIsNot*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareIsNot*)ROGUE_CREATE_OBJECT(CmdCompareIsNot))), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_lt ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdCompareLT*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLT*)ROGUE_CREATE_OBJECT(CmdCompareLT))), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_gt ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdCompareGT*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareGT*)ROGUE_CREATE_OBJECT(CmdCompareGT))), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_le ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdCompareLE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLE*)ROGUE_CREATE_OBJECT(CmdCompareLE))), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_ge ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdCompareGE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareGE*)ROGUE_CREATE_OBJECT(CmdCompareGE))), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_instanceOf ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdInstanceOf*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdInstanceOf*)ROGUE_CREATE_OBJECT(CmdInstanceOf))), t_1, lhs_0, ((Rogue_Parser__parse_type( THIS ))) ))))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_notInstanceOf ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), t_1, ((RogueClassCmd*)(((RogueClassCmdInstanceOf*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdInstanceOf*)ROGUE_CREATE_OBJECT(CmdInstanceOf))), t_1, lhs_0, ((Rogue_Parser__parse_type( THIS ))) ))))))) ))))))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_bitwise_xor( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_bitwise_xor__Cmd( THIS, ((RogueParser__parse_bitwise_or( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_bitwise_xor__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_tilde ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_bitwise_xor__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdBitwiseXor*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseXor*)ROGUE_CREATE_OBJECT(CmdBitwiseXor))), t_1, lhs_0, ((RogueParser__parse_bitwise_or( THIS ))) ))))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_bitwise_or( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_bitwise_or__Cmd( THIS, ((RogueParser__parse_bitwise_and( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_bitwise_or__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  RogueInt32 starting_pos_2 = (THIS->reader->position);
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_vertical_bar ))))
  {
    RogueParser__consume_eols( THIS );
    RogueClassCmd* rhs_3 = (((RogueParser__parse_bitwise_and( THIS ))));
    return (RogueClassCmd*)(((RogueParser__parse_bitwise_or__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdBitwiseOr*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseOr*)ROGUE_CREATE_OBJECT(CmdBitwiseOr))), t_1, lhs_0, rhs_3 ))))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_bitwise_and( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_bitwise_and__Cmd( THIS, ((RogueParser__parse_bitwise_shift( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_bitwise_and__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_ampersand ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_bitwise_and__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdBitwiseAnd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseAnd*)ROGUE_CREATE_OBJECT(CmdBitwiseAnd))), t_1, lhs_0, ((RogueParser__parse_bitwise_shift( THIS ))) ))))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_bitwise_shift( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_bitwise_shift__Cmd( THIS, ((RogueParser__parse_add_subtract( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_bitwise_shift__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_shift_left ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdBitwiseShiftLeft*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseShiftLeft*)ROGUE_CREATE_OBJECT(CmdBitwiseShiftLeft))), t_1, lhs_0, ((RogueParser__parse_add_subtract( THIS ))) ))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_shift_right ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdBitwiseShiftRight*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseShiftRight*)ROGUE_CREATE_OBJECT(CmdBitwiseShiftRight))), t_1, lhs_0, ((RogueParser__parse_add_subtract( THIS ))) ))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_shift_right_x ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdBitwiseShiftRightX*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseShiftRightX*)ROGUE_CREATE_OBJECT(CmdBitwiseShiftRightX))), t_1, lhs_0, ((RogueParser__parse_add_subtract( THIS ))) ))))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_add_subtract( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( THIS, ((RogueParser__parse_multiply_divide_mod( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_add_subtract__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_plus ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdAdd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdAdd*)ROGUE_CREATE_OBJECT(CmdAdd))), t_1, lhs_0, ((RogueParser__parse_multiply_divide_mod( THIS ))) ))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_minus ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdSubtract*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdSubtract*)ROGUE_CREATE_OBJECT(CmdSubtract))), t_1, lhs_0, ((RogueParser__parse_multiply_divide_mod( THIS ))) ))))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_multiply_divide_mod( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_multiply_divide_mod__Cmd( THIS, ((RogueParser__parse_power( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_multiply_divide_mod__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_times ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_multiply_divide_mod__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdMultiply*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMultiply*)ROGUE_CREATE_OBJECT(CmdMultiply))), t_1, lhs_0, ((RogueParser__parse_power( THIS ))) ))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_slash ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_multiply_divide_mod__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdDivide*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdDivide*)ROGUE_CREATE_OBJECT(CmdDivide))), t_1, lhs_0, ((RogueParser__parse_power( THIS ))) ))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_percent ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_multiply_divide_mod__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdMod*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMod*)ROGUE_CREATE_OBJECT(CmdMod))), t_1, lhs_0, ((RogueParser__parse_power( THIS ))) ))))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_power( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_power__Cmd( THIS, ((RogueParser__parse_pre_unary( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_power__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_caret ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_power__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdPower*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdPower*)ROGUE_CREATE_OBJECT(CmdPower))), t_1, lhs_0, ((RogueParser__parse_pre_unary( THIS ))) ))))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_pre_unary( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_minus ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdNegate*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdNegate*)ROGUE_CREATE_OBJECT(CmdNegate))), t_0, ((RogueParser__parse_pre_unary( THIS ))) ))))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_not ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), t_0, ((RogueParser__parse_pre_unary( THIS ))) ))))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_exclamation_point ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdBitwiseNot*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdBitwiseNot*)ROGUE_CREATE_OBJECT(CmdBitwiseNot))), t_0, ((RogueParser__parse_pre_unary( THIS ))) ))))))));
  }
  return (RogueClassCmd*)(((RogueParser__parse_post_unary( THIS ))));
}

RogueClassCmd* RogueParser__parse_post_unary( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_post_unary__Cmd( THIS, ((RogueParser__parse_member_access( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_post_unary__Cmd( RogueClassParser* THIS, RogueClassCmd* operand_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_question_mark ))))
  {
    return (RogueClassCmd*)(((RogueParser__parse_post_unary__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdLogicalize*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalize*)ROGUE_CREATE_OBJECT(CmdLogicalize))), t_1, operand_0 ))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_exclamation_point ))))
  {
    return (RogueClassCmd*)(((RogueParser__parse_post_unary__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdGetOptionalValue__init__Token_Cmd( ((RogueClassCmdGetOptionalValue*)ROGUE_CREATE_OBJECT(CmdGetOptionalValue)), t_1, operand_0 ))))) ))));
  }
  return (RogueClassCmd*)(operand_0);
}

RogueClassCmd* RogueParser__parse_member_access( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( THIS, ((RogueParser__parse_term( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_member_access__Cmd( RogueClassParser* THIS, RogueClassCmd* context_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_dot ))))
  {
    RogueClassCmd* access_2 = (((RogueParser__parse_access__Token_Cmd( THIS, t_1, context_0 ))));
    return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( THIS, access_2 ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_bracket ))))
  {
    RogueParser__consume_eols( THIS );
    RogueClassCmdElementAccess* access_3 = (((RogueCmdElementAccess__init__Token_Cmd_Cmd( ((RogueClassCmdElementAccess*)ROGUE_CREATE_OBJECT(CmdElementAccess)), t_1, context_0, ((RogueParser__parse_expression( THIS ))) ))));
    RogueParser__consume_eols( THIS );
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_bracket, ((RogueString*)(NULL)) );
    return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( THIS, ((RogueClassCmd*)(access_3)) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_arrow ))))
  {
    RogueParser__consume_eols( THIS );
    RogueClassType* to_type_4 = (((Rogue_Parser__parse_type( THIS ))));
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
    {
      if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_close_paren ))))
      {
        ROGUE_THROW(((RogueToken__error__String( ((RogueParser__peek( THIS ))), Rogue_literal_strings[265] ))));
      }
      RogueClassCmd* convert_fn_5 = (((RogueParser__parse_expression( THIS ))));
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
      return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdListConvert__init__Token_Cmd_Type_Cmd( ((RogueClassCmdListConvert*)ROGUE_CREATE_OBJECT(CmdListConvert)), t_1, context_0, to_type_4, convert_fn_5 ))))) ))));
    }
    return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdConvertToType*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdConvertToType*)ROGUE_CREATE_OBJECT(CmdConvertToType))), t_1, context_0, to_type_4 ))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_fat_arrow ))))
  {
    RogueParser__consume_eols( THIS );
    RogueString* name_6 = (((RogueParser__read_identifier__Logical( THIS, false ))));
    RogueTypeList* arg_types_7 = 0;
    RogueParser__consume_eols( THIS );
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
    {
      arg_types_7 = ((RogueTypeList*)((RogueTypeList__init( ((RogueTypeList*)ROGUE_CREATE_OBJECT(TypeList)) ))));
      RogueLogical first_8 = (true);
      while ((first_8 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
      {
        first_8 = ((RogueLogical)false);
        RogueParser__consume_eols( THIS );
        RogueTypeList__add__Type( arg_types_7, ((Rogue_Parser__parse_type( THIS ))) );
        RogueParser__consume_eols( THIS );
      }
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
      RogueParser__consume_eols( THIS );
    }
    RogueClassType* return_type_9 = 0;
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_arrow ))))
    {
      return_type_9 = ((RogueClassType*)((Rogue_Parser__parse_type( THIS ))));
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateCallback__init__Token_Cmd_String_String_Type( ((RogueClassCmdCreateCallback*)ROGUE_CREATE_OBJECT(CmdCreateCallback)), t_1, context_0, name_6, ((RogueProgram__get_callback_type_signature__TypeList( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), arg_types_7 ))), return_type_9 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_as ))))
  {
    RogueParser__consume_eols( THIS );
    RogueClassType* as_type_10 = (((Rogue_Parser__parse_type( THIS ))));
    return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( THIS, ((RogueClassCmd*)(((RogueClassCmdAs*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdAs*)ROGUE_CREATE_OBJECT(CmdAs))), t_1, context_0, as_type_10 ))))))) ))));
  }
  return (RogueClassCmd*)(context_0);
}

RogueClassCmd* RogueParser__parse_access__Token_Cmd( RogueClassParser* THIS, RogueClassToken* t_0, RogueClassCmd* context_1 )
{
  RogueParser__consume_eols( THIS );
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_meta ))))
  {
    RogueClassType* context_type_2 = 0;
    if (!!(context_1))
    {
      context_type_2 = ((RogueClassType*)(call_ROGUEM62( 17, (RogueClassCmd*)(context_1), ((RogueScope__init__Type_Method( ((RogueClassScope*)ROGUE_CREATE_OBJECT(Scope)), THIS->_this_type, ((RogueClassMethod*)(NULL)) ))) )));
    }
    else
    {
      context_type_2 = ((RogueClassType*)THIS->_this_type);
    }
    if (!(!!(context_type_2)))
    {
      ROGUE_THROW(((RogueToken__error__String( t_0, Rogue_literal_strings[259] ))));
    }
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_dot, ((RogueString*)(NULL)) );
    t_0 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
    RogueString* id_3 = (((RogueParser__read_identifier__Logical( THIS, false ))));
    {
      if (((RogueString__operatorEQUALSEQUALS__String( id_3, Rogue_literal_strings[260] ))))
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdDefaultValue__init__Token_Type( ((RogueClassCmdDefaultValue*)ROGUE_CREATE_OBJECT(CmdDefaultValue)), t_0, context_type_2 ))))));
      }
      else
      {
        ROGUE_THROW(((RogueToken__error__String( t_0, Rogue_literal_strings[261] ))));
      }
    }
  }
  RogueClassCmdAccess* access_4 = (((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), t_0, ((RogueParser__parse_possible_type__Logical( THIS, true ))) ))));
  if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
  {
    access_4->args = ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) )));
    access_4->flag_args = ((RogueParser__parse_args__CmdArgs( THIS, access_4->args )));
  }
  access_4->context = context_1;
  return (RogueClassCmd*)(((RogueClassCmd*)(access_4)));
}

RogueCmdFlagArgList* RogueParser__parse_args__CmdArgs( RogueClassParser* THIS, RogueClassCmdArgs* args_0 )
{
  RogueCmdFlagArgList* flag_args_1 = 0;
  RogueClassTokenType* end_type_2 = (RogueTokenType_symbol_close_paren);
  RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren );
  RogueParser__consume_eols( THIS );
  if (!(((RogueParser__consume__TokenType( THIS, end_type_2 )))))
  {
    RogueLogical first_3 = (true);
    while ((first_3 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
    {
      first_3 = ((RogueLogical)false);
      RogueParser__consume_eols( THIS );
      if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_ampersand ))))
      {
        if (!(!!(flag_args_1)))
        {
          flag_args_1 = ((RogueCmdFlagArgList*)((RogueCmdFlagArgList__init( ((RogueCmdFlagArgList*)ROGUE_CREATE_OBJECT(CmdFlagArgList)) ))));
        }
        RogueLogical is_negative_4 = (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_exclamation_point ))));
        RogueClassToken* arg_t_5 = (((RogueParser__peek( THIS ))));
        RogueClassCmdFlagArg* arg_6 = (((RogueCmdFlagArg__init__Token_String_Cmd_Logical( ((RogueClassCmdFlagArg*)ROGUE_CREATE_OBJECT(CmdFlagArg)), arg_t_5, ((RogueParser__read_identifier__Logical( THIS, false ))), ((RogueClassCmd*)(NULL)), false ))));
        arg_6->is_negative = is_negative_4;
        RogueCmdFlagArgList__add__CmdFlagArg( flag_args_1, arg_6 );
        if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_equals ))))
        {
          arg_6->value = ((RogueParser__parse_expression( THIS )));
        }
      }
      else
      {
        RogueCmdList__add__Cmd( ((RogueCmdList*)args_0), ((RogueParser__parse_expression( THIS ))) );
      }
    }
    RogueParser__consume_eols( THIS );
    RogueParser__must_consume__TokenType_String( THIS, end_type_2, ((RogueString*)(NULL)) );
  }
  return (RogueCmdFlagArgList*)(flag_args_1);
}

RogueString* RogueParser__parse_specialization_string( RogueClassParser* THIS )
{
  RogueStringBuilder__clear( THIS->string_buffer );
  RogueParser__read( THIS );
  RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[198] );
  RogueLogical first_0 = (true);
  while ((first_0 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
  {
    if (first_0)
    {
      first_0 = ((RogueLogical)false);
    }
    else
    {
      RogueStringBuilder__print__Character( THIS->string_buffer, (RogueCharacter)',' );
    }
    RogueParser__parse_specializer__StringBuilder_TokenList( THIS, THIS->string_buffer, ((RogueTokenList*)(NULL)) );
  }
  RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_specialize, ((RogueString*)(NULL)) );
  RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[116] );
  return (RogueString*)(((RogueStringBuilder__to_String( THIS->string_buffer ))));
}

RogueInt32 RogueParser__parse_specializer_count( RogueClassParser* THIS )
{
  RogueInt32 num_specializers_0 = (0);
  RogueParser__read( THIS );
  RogueLogical first_1 = (true);
  while ((first_1 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
  {
    if (first_1)
    {
      first_1 = ((RogueLogical)false);
    }
    RogueParser__parse_specializer__StringBuilder_TokenList( THIS, ((RogueStringBuilder__clear( THIS->string_buffer ))), ((RogueTokenList*)(NULL)) );
    ++num_specializers_0;
  }
  RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_specialize, ((RogueString*)(NULL)) );
  return (RogueInt32)(num_specializers_0);
}

void RogueParser__parse_specializer__StringBuilder_TokenList( RogueClassParser* THIS, RogueStringBuilder* buffer_0, RogueTokenList* tokens_1 )
{
  RogueInt32 nesting_level_2 = (1);
  while (((RogueTokenReader__has_another( THIS->reader ))))
  {
    if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_eol ))))
    {
      ROGUE_THROW(((RogueToken__error__String( ((RogueParser__peek( THIS ))), Rogue_literal_strings[262] ))));
    }
    RogueClassToken* t_3 = (((RogueParser__peek( THIS ))));
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_backslash ))))
    {
      RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[175] );
      if (!(((RogueTokenReader__has_another( THIS->reader )))))
      {
        ROGUE_THROW(((RogueToken__error__String( t_3, Rogue_literal_strings[53] ))));
      }
      t_3 = ((RogueClassToken*)((RogueParser__read( THIS ))));
      RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(t_3)) );
      if (!!(tokens_1))
      {
        RogueTokenList__add__Token( tokens_1, t_3 );
      }
    }
    else if (((void*)t_3->_type) == ((void*)RogueTokenType_symbol_comma))
    {
      if (nesting_level_2 == 1)
      {
        return;
      }
      RogueParser__read( THIS );
      if (!!(tokens_1))
      {
        RogueTokenList__add__Token( tokens_1, t_3 );
      }
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_specialize ))))
    {
      if (!!(tokens_1))
      {
        RogueTokenList__add__Token( tokens_1, t_3 );
      }
      RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[198] );
      ++nesting_level_2;
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_close_specialize ))))
    {
      --nesting_level_2;
      if (nesting_level_2 == 0)
      {
        return;
      }
      else
      {
        RogueParser__read( THIS );
        if (!!(tokens_1))
        {
          RogueTokenList__add__Token( tokens_1, t_3 );
        }
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[116] );
      }
    }
    else
    {
      if (!!(tokens_1))
      {
        RogueTokenList__add__Token( tokens_1, t_3 );
      }
      RogueString* st_4 = ((call_ROGUEM43( 1, (RogueClassToken*)(((RogueParser__read( THIS )))) )));
      if (((void*)t_3->_type) == ((void*)RogueTokenType_literal_string))
      {
        RogueStringBuilder__print__Character( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'"' ))), st_4 ))), (RogueCharacter)'"' );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, st_4 );
      }
    }
  }
}

RogueClassCmd* RogueParser__parse_term( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
  {
    RogueParser__consume_eols( THIS );
    if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_close_paren ))))
    {
      ROGUE_THROW(((RogueToken__error__String( t_0, Rogue_literal_strings[266] ))));
    }
    RogueClassCmd* result_1 = (((RogueParser__parse_expression( THIS ))));
    RogueParser__consume_eols( THIS );
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
    return (RogueClassCmd*)(result_1);
  }
  else if (((((RogueParser__next_is__TokenType( THIS, RogueTokenType_identifier ))) || ((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_at )))) || ((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_meta )))))
  {
    RogueClassCmd* result_2 = (((RogueParser__parse_access__Token_Cmd( THIS, t_0, ((RogueClassCmd*)(NULL)) ))));
    RogueClassCmdAccess* access_3 = (((RogueClassCmdAccess*)(RogueObject_as(result_2,RogueTypeCmdAccess))));
    if (((!!(access_3) && ((RogueString__ends_with__String( access_3->name, ((RogueCharacter__to_String( (RogueCharacter)']' ))) )))) && !(!!(access_3->args))))
    {
      if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_open_bracket ))))
      {
        return (RogueClassCmd*)(((RogueParser__parse_typed_literal_list__Token_String( THIS, access_3->t, access_3->name ))));
      }
    }
    return (RogueClassCmd*)(result_2);
  }
  else if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_type_identifier ))))
  {
    RogueClassCmd* result_4 = (((RogueParser__parse_access__Token_Cmd( THIS, t_0, ((RogueClassCmd*)(NULL)) ))));
    return (RogueClassCmd*)(result_4);
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_literal_string ))))
  {
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
    {
      RogueLogical first_5 = (true);
      RogueClassCmdArgs* args_6 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))));
      while ((first_5 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
      {
        first_5 = ((RogueLogical)false);
        RogueCmdList__add__Cmd( ((RogueCmdList*)args_6), ((RogueParser__parse_expression( THIS ))) );
      }
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdFormattedString__init__Token_String_CmdArgs( ((RogueClassCmdFormattedString*)ROGUE_CREATE_OBJECT(CmdFormattedString)), t_0, (call_ROGUEM43( 1, (RogueClassToken*)(t_0) )), args_6 ))))));
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Int32( ((RogueClassCmdLiteralString*)ROGUE_CREATE_OBJECT(CmdLiteralString)), t_0, (call_ROGUEM43( 1, (RogueClassToken*)(t_0) )), 0 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_null ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralNull__init__Token( ((RogueClassCmdLiteralNull*)ROGUE_CREATE_OBJECT(CmdLiteralNull)), t_0 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_literal_real ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ((RogueClassCmdLiteralReal64*)ROGUE_CREATE_OBJECT(CmdLiteralReal64)), t_0, (call_ROGUEM47( 14, (RogueClassToken*)(t_0) )) ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_literal_integer ))))
  {
    RogueInt32 value_7 = ((call_ROGUEM45( 12, (RogueClassToken*)(t_0) )));
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), t_0, value_7 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_literal_long ))))
  {
    RogueInt64 value_8 = ((call_ROGUEM46( 13, (RogueClassToken*)(t_0) )));
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt64__init__Token_Int64( ((RogueClassCmdLiteralInt64*)ROGUE_CREATE_OBJECT(CmdLiteralInt64)), t_0, value_8 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_literal_character ))))
  {
    RogueCharacter value_9 = ((call_ROGUEM44( 11, (RogueClassToken*)(t_0) )));
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralCharacter__init__Token_Character( ((RogueClassCmdLiteralCharacter*)ROGUE_CREATE_OBJECT(CmdLiteralCharacter)), t_0, value_9 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_this ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLiteralThis*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)((RogueClassCmdLiteralThis*)ROGUE_CREATE_OBJECT(CmdLiteralThis))), t_0, THIS->_this_type ))))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_true ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), t_0, true ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_false ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), t_0, false ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_pi ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ((RogueClassCmdLiteralReal64*)ROGUE_CREATE_OBJECT(CmdLiteralReal64)), t_0, 3.141592653589793 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_infinity ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ((RogueClassCmdLiteralReal64*)ROGUE_CREATE_OBJECT(CmdLiteralReal64)), t_0, (1.0/0.0) ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_NaN ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ((RogueClassCmdLiteralReal64*)ROGUE_CREATE_OBJECT(CmdLiteralReal64)), t_0, (0.0/0.0) ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_bracket ))))
  {
    RogueClassCmdCreateList* list_10 = (((RogueCmdCreateList__init__Token_CmdArgs_Type( ((RogueClassCmdCreateList*)ROGUE_CREATE_OBJECT(CmdCreateList)), t_0, ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))), ((RogueClassType*)(NULL)) ))));
    RogueParser__consume_eols( THIS );
    if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_close_bracket )))))
    {
      RogueLogical first_11 = (true);
      while ((first_11 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
      {
        first_11 = ((RogueLogical)false);
        RogueCmdList__add__Cmd( ((RogueCmdList*)list_10->args), ((RogueParser__parse_expression( THIS ))) );
        RogueParser__consume_eols( THIS );
      }
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_bracket, ((RogueString*)(NULL)) );
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(list_10)));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_empty_brackets ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), t_0, Rogue_literal_strings[269], ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))) ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_prior ))))
  {
    RogueParser__consume_eols( THIS );
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_dot, ((RogueString*)(NULL)) );
    RogueParser__consume_eols( THIS );
    RogueString* name_12 = (((RogueParser__read_identifier__Logical( THIS, false ))));
    RogueClassCmdArgs* args_13 = 0;
    RogueCmdFlagArgList* flag_args_14 = 0;
    if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
    {
      args_13 = ((RogueClassCmdArgs*)((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))));
      flag_args_14 = ((RogueCmdFlagArgList*)((RogueParser__parse_args__CmdArgs( THIS, args_13 ))));
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCallPriorMethod__init__Token_String_CmdArgs_CmdFlagArgList( ((RogueClassCmdCallPriorMethod*)ROGUE_CREATE_OBJECT(CmdCallPriorMethod)), t_0, name_12, args_13, flag_args_14 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_await ))))
  {
    RogueClassLocal* result_var_15 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object, ((RogueClassCmd*)(NULL)) ))));
    RogueClassCmdStatementList* statement_list_16 = (((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))));
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->cur_statement_list), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local_Logical( ((RogueClassCmdLocalDeclaration*)ROGUE_CREATE_OBJECT(CmdLocalDeclaration)), t_0, result_var_15, false ))))) );
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->cur_statement_list), ((RogueClassCmd*)(((RogueCmdAwait__init__Token_Cmd_CmdStatementList_Local( ((RogueClassCmdAwait*)ROGUE_CREATE_OBJECT(CmdAwait)), t_0, ((RogueParser__parse_expression( THIS ))), statement_list_16, result_var_15 ))))) );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), t_0, result_var_15->name ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_function ))))
  {
    RogueFnParamList* parameters_17 = 0;
    RogueClassType* return_type_18 = 0;
    RogueLogical is_generic_19 = (false);
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
    {
      if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_close_paren )))))
      {
        parameters_17 = ((RogueFnParamList*)((RogueFnParamList__init( ((RogueFnParamList*)ROGUE_CREATE_OBJECT(FnParamList)) ))));
        RogueLogical first_20 = (true);
        while ((first_20 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
        {
          first_20 = ((RogueLogical)false);
          RogueClassFnParam* param_21 = (((RogueFnParam__init__String( ((RogueClassFnParam*)ROGUE_CREATE_OBJECT(FnParam)), ((RogueParser__read_identifier__Logical( THIS, false ))) ))));
          RogueClassToken* t2_22 = (((RogueParser__peek( THIS ))));
          RogueLogical cur_generic_23 = (false);
          if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
          {
            param_21->_type = ((Rogue_Parser__parse_type( THIS )));
          }
          else
          {
            cur_generic_23 = ((RogueLogical)true);
          }
          if ((!!(parameters_17->count) && is_generic_19 != cur_generic_23))
          {
            ROGUE_THROW(((RogueToken__error__String( t2_22, Rogue_literal_strings[271] ))));
          }
          is_generic_19 = ((RogueLogical)cur_generic_23);
          RogueFnParamList__add__FnParam( parameters_17, param_21 );
        }
        RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
      }
    }
    RogueLogical parsed_arrow_24 = (false);
    RogueClassToken* t2_25 = (((RogueParser__peek( THIS ))));
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_arrow ))))
    {
      if (is_generic_19)
      {
        ROGUE_THROW(((RogueToken__error__String( t2_25, Rogue_literal_strings[272] ))));
      }
      parsed_arrow_24 = ((RogueLogical)true);
      return_type_18 = ((RogueClassType*)((Rogue_Parser__parse_type( THIS ))));
    }
    RogueFnArgList* with_args_26 = 0;
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_with ))))
    {
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_open_paren, ((RogueString*)(NULL)) );
      if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_close_paren )))))
      {
        with_args_26 = ((RogueFnArgList*)((RogueFnArgList__init( ((RogueFnArgList*)ROGUE_CREATE_OBJECT(FnArgList)) ))));
        RogueLogical first_27 = (true);
        while ((first_27 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
        {
          first_27 = ((RogueLogical)false);
          t2_25 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
          RogueString* name_28 = (((RogueParser__read_identifier__Logical( THIS, false ))));
          RogueClassCmd* value_29 = 0;
          if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_equals ))))
          {
            value_29 = ((RogueClassCmd*)((RogueParser__parse_expression( THIS ))));
          }
          else
          {
            value_29 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), t2_25, name_28 ))))));
          }
          RogueClassFnArg* arg_30 = (((RogueFnArg__init__String_Cmd( ((RogueClassFnArg*)ROGUE_CREATE_OBJECT(FnArg)), name_28, value_29 ))));
          if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
          {
            arg_30->_type = ((Rogue_Parser__parse_type( THIS )));
          }
          RogueFnArgList__add__FnArg( with_args_26, arg_30 );
        }
        RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
      }
    }
    RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon );
    if (!(parsed_arrow_24))
    {
      t2_25 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
      if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_equals ))))
      {
        if (((!!(parameters_17) && !!(parameters_17->count)) && !(is_generic_19)))
        {
          ROGUE_THROW(((RogueToken__error__String( t2_25, Rogue_literal_strings[273] ))));
        }
        is_generic_19 = ((RogueLogical)true);
      }
    }
    RogueClassCmdStatementList* statements_31 = (((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))));
    if ((!(is_generic_19) && ((RogueParser__consume_eols( THIS )))))
    {
      RogueParser__parse_multi_line_statements__CmdStatementList( THIS, statements_31 );
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_keyword_endFunction, ((RogueString*)(NULL)) );
    }
    else
    {
      RogueParser__parse_single_line_statements__CmdStatementList( THIS, statements_31 );
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateFunction__init__Token_FnParamList_Type_FnArgList_CmdStatementList_Logical( ((RogueClassCmdCreateFunction*)ROGUE_CREATE_OBJECT(CmdCreateFunction)), t_0, parameters_17, return_type_18, with_args_26, statements_31, is_generic_19 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_native ))))
  {
    RogueParser__consume_eols( THIS );
    RogueLogical has_parens_32 = (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))));
    if (has_parens_32)
    {
      RogueParser__consume_eols( THIS );
    }
    if (!(((RogueParser__next_is__TokenType( THIS, RogueTokenType_literal_string )))))
    {
      ROGUE_THROW(((RogueToken__error__String( ((RogueParser__peek( THIS ))), Rogue_literal_strings[294] ))));
    }
    RogueString* code_33 = ((call_ROGUEM43( 1, (RogueClassToken*)(((RogueParser__read( THIS )))) )));
    if (has_parens_32)
    {
      RogueParser__consume_eols( THIS );
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
    }
    RogueClassType* result_type_34 = 0;
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_arrow ))))
    {
      result_type_34 = ((RogueClassType*)((Rogue_Parser__parse_type( THIS ))));
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdInlineNative__init__Token_String_Type( ((RogueClassCmdInlineNative*)ROGUE_CREATE_OBJECT(CmdInlineNative)), t_0, code_33, result_type_34 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_select ))))
  {
    RogueParser__consume_eols( THIS );
    RogueClassCmdSelect* cmd_select_35 = (((RogueCmdSelect__init__Token_Local_Cmd_CmdSelectCaseList( ((RogueClassCmdSelect*)ROGUE_CREATE_OBJECT(CmdSelect)), t_0, ((RogueClassLocal*)(NULL)), ((RogueClassCmd*)(NULL)), ((RogueCmdSelectCaseList__init( ((RogueCmdSelectCaseList*)ROGUE_CREATE_OBJECT(CmdSelectCaseList)) ))) ))));
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
    {
      RogueParser__consume_eols( THIS );
      RogueClassLocal* comparison_var_36 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
      RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->cur_statement_list), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local_Logical( ((RogueClassCmdLocalDeclaration*)ROGUE_CREATE_OBJECT(CmdLocalDeclaration)), t_0, comparison_var_36, true ))))) );
      comparison_var_36->initial_value = ((RogueParser__parse_expression( THIS )));
      cmd_select_35->local_info = comparison_var_36;
      cmd_select_35->expression = comparison_var_36->initial_value;
      RogueParser__consume_eols( THIS );
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
      RogueParser__consume_eols( THIS );
    }
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_open_brace, ((RogueString*)(NULL)) );
    RogueLogical first_37 = (true);
    while ((first_37 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
    {
      first_37 = ((RogueLogical)false);
      RogueParser__consume_eols( THIS );
      RogueClassCmdSelectCase* select_case_38 = (((RogueCmdSelectCase__init__Token_CmdList_Cmd( ((RogueClassCmdSelectCase*)ROGUE_CREATE_OBJECT(CmdSelectCase)), ((RogueParser__peek( THIS ))), ((RogueCmdList*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
      RogueCmdSelectCaseList__add__CmdSelectCase( cmd_select_35->cases, select_case_38 );
      RogueLogical found_case_others_39 = (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_others ))));
      if (found_case_others_39)
      {
        RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_colon, ((RogueString*)(NULL)) );
      }
      RogueClassCmd* expr_40 = (((RogueParser__parse_expression( THIS ))));
      RogueParser__consume_eols( THIS );
      if ((!(found_case_others_39) && (((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_comma ))) || ((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_colon ))))))
      {
        select_case_38->conditions = ((RogueCmdList__add__Cmd( (call_ROGUEM86( 4, (RogueCmdList*)(((RogueCmdList*)ROGUE_CREATE_OBJECT(CmdList))) )), expr_40 )));
        while (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma ))))
        {
          RogueParser__consume_eols( THIS );
          RogueCmdList__add__Cmd( select_case_38->conditions, ((RogueParser__parse_expression( THIS ))) );
          RogueParser__consume_eols( THIS );
        }
        RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_colon, ((RogueString*)(NULL)) );
        RogueParser__consume_eols( THIS );
        select_case_38->value = ((RogueParser__parse_expression( THIS )));
        RogueParser__consume_eols( THIS );
      }
      else
      {
        select_case_38->value = expr_40;
      }
      if (found_case_others_39)
      {
        goto _auto_1378;
      }
    }
    _auto_1378:;
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_brace, ((RogueString*)(NULL)) );
    return (RogueClassCmd*)(((RogueClassCmd*)(cmd_select_35)));
  }
  else
  {
    ROGUE_THROW(((RogueToken__error__String( ((RogueParser__peek( THIS ))), ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__Object( Rogue_literal_strings[295], ((RogueObject*)(((RogueParser__peek( THIS ))))) ))), Rogue_literal_strings[21] ))) ))));
  }
}

RogueClassCmd* RogueParser__parse_typed_literal_list__Token_String( RogueClassParser* THIS, RogueClassToken* t_0, RogueString* list_type_name_1 )
{
  RogueClassCmdTypedLiteralList* list_2 = (((RogueCmdTypedLiteralList__init__Token_String_CmdArgs( ((RogueClassCmdTypedLiteralList*)ROGUE_CREATE_OBJECT(CmdTypedLiteralList)), t_0, list_type_name_1, ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))) ))));
  RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_open_bracket, ((RogueString*)(NULL)) );
  RogueParser__consume_eols( THIS );
  RogueLogical first_3 = (true);
  while ((first_3 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
  {
    first_3 = ((RogueLogical)false);
    RogueParser__consume_eols( THIS );
    t_0 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
    if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_open_bracket ))))
    {
      if (((RogueString__ends_with__String( list_type_name_1, Rogue_literal_strings[267] ))))
      {
        RogueClassCmd* item_4 = (((RogueParser__parse_typed_literal_list__Token_String( THIS, t_0, ((RogueString__leftmost__Int32( list_type_name_1, -2 ))) ))));
        RogueCmdTypedLiteralList__add__Cmd( list_2, item_4 );
      }
      else
      {
        ROGUE_THROW(((RogueToken__error__String( t_0, Rogue_literal_strings[268] ))));
      }
    }
    else
    {
      RogueCmdTypedLiteralList__add__Cmd( list_2, ((RogueParser__parse_expression( THIS ))) );
    }
    RogueParser__consume_eols( THIS );
  }
  RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_bracket, ((RogueString*)(NULL)) );
  return (RogueClassCmd*)(((RogueClassCmd*)(list_2)));
}

RogueClassParser* RogueParser__init_object( RogueClassParser* THIS )
{
  THIS->local_declarations = ((RogueLocalList__init( ((RogueLocalList*)ROGUE_CREATE_OBJECT(LocalList)) )));
  THIS->property_list = ((RoguePropertyList__init( ((RoguePropertyList*)ROGUE_CREATE_OBJECT(PropertyList)) )));
  THIS->string_buffer = ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) )));
  THIS->used_modules = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassParser*)(THIS);
}

RogueString* RogueString_ParseReaderTable__to_String( RogueClassString_ParseReaderTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_ParseReaderTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_ParseReaderTable__type_name( RogueClassString_ParseReaderTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[632]);
}

RogueClassString_ParseReaderTable* RogueString_ParseReaderTable__init( RogueClassString_ParseReaderTable* THIS )
{
  RogueString_ParseReaderTable__init__Int32( THIS, 16 );
  return (RogueClassString_ParseReaderTable*)(THIS);
}

RogueClassString_ParseReaderTable* RogueString_ParseReaderTable__init__Int32( RogueClassString_ParseReaderTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_ParseReaderTableEntryList__init__Int32_String_ParseReaderTableEntry( ((RogueTableEntry_of_String_ParseReaderList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_ParseReaderList)), bin_count_0, ((RogueClassString_ParseReaderTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_ParseReaderTable*)(THIS);
}

RogueClassString_ParseReaderTableEntry* RogueString_ParseReaderTable__find__String( RogueClassString_ParseReaderTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  RogueClassString_ParseReaderTableEntry* entry_2 = (((RogueClassString_ParseReaderTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( entry_2->key, key_0 )))))
    {
      return (RogueClassString_ParseReaderTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_ParseReaderTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_ParseReaderTableEntry*)(((RogueClassString_ParseReaderTableEntry*)(NULL)));
}

RogueClassParseReader* RogueString_ParseReaderTable__get__String( RogueClassString_ParseReaderTable* THIS, RogueString* key_0 )
{
  RogueClassString_ParseReaderTableEntry* entry_1 = (((RogueString_ParseReaderTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassParseReader*)(entry_1->value);
  }
  else
  {
    RogueClassParseReader* default_value_2 = 0;
    return (RogueClassParseReader*)(default_value_2);
  }
}

RogueClassString_ParseReaderTable* RogueString_ParseReaderTable__set__String_ParseReader( RogueClassString_ParseReaderTable* THIS, RogueString* key_0, RogueClassParseReader* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_ParseReaderTableEntry* entry_4 = (((RogueClassString_ParseReaderTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( entry_4->key, key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_ParseReaderTable*)(THIS);
    }
    entry_4 = ((RogueClassString_ParseReaderTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_ParseReaderTableEntry*)((RogueString_ParseReaderTableEntry__init__String_ParseReader_Int32( ((RogueClassString_ParseReaderTableEntry*)ROGUE_CREATE_OBJECT(String_ParseReaderTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_ParseReaderTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
  return (RogueClassString_ParseReaderTable*)(THIS);
}

RogueStringBuilder* RogueString_ParseReaderTable__print_to__StringBuilder( RogueClassString_ParseReaderTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_ParseReaderTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_ParseReaderTable* RogueString_ParseReaderTable__init_object( RogueClassString_ParseReaderTable* THIS )
{
  return (RogueClassString_ParseReaderTable*)(THIS);
}

RogueString* RogueFile__to_String( RogueClassFile* THIS )
{
  return (RogueString*)(THIS->filepath);
}

RogueString* RogueFile__type_name( RogueClassFile* THIS )
{
  return (RogueString*)(Rogue_literal_strings[633]);
}

RogueClassFile* RogueFile__init__String( RogueClassFile* THIS, RogueString* _auto_374_0 )
{
  THIS->filepath = _auto_374_0;
  return (RogueClassFile*)(THIS);
}

RogueString* RogueFile__filename( RogueClassFile* THIS )
{
  return (RogueString*)((RogueFile__filename__String( THIS->filepath )));
}

RogueClassFile* RogueFile__init_object( RogueClassFile* THIS )
{
  return (RogueClassFile*)(THIS);
}

RogueString* RogueParserArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[729]);
}

RogueString* RogueTokenList__to_String( RogueTokenList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTokenList* _auto_1395_2 = (THIS);
    RogueInt32 _auto_1396_3 = (0);
    for (;_auto_1396_3 < _auto_1395_2->count;++_auto_1396_3)
    {
      RogueClassToken* value_4 = (((RogueClassToken*)(_auto_1395_2->data->objects[_auto_1396_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM43( 1, (RogueClassToken*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueTokenList__type_name( RogueTokenList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[687]);
}

RogueTokenList* RogueTokenList__init_object( RogueTokenList* THIS )
{
  return (RogueTokenList*)(THIS);
}

RogueTokenList* RogueTokenList__init( RogueTokenList* THIS )
{
  RogueTokenList__init__Int32( THIS, 10 );
  return (RogueTokenList*)(THIS);
}

RogueTokenList* RogueTokenList__init__Int32( RogueTokenList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassToken*), true );
  return (RogueTokenList*)(THIS);
}

RogueTokenList* RogueTokenList__add__Token( RogueTokenList* THIS, RogueClassToken* value_0 )
{
  ((RogueTokenList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTokenList*)(THIS);
}

RogueTokenList* RogueTokenList__add__TokenList( RogueTokenList* THIS, RogueTokenList* other_0 )
{
  RogueTokenList__reserve__Int32( THIS, other_0->count );
  {
    RogueTokenList* _auto_1401_1 = (other_0);
    RogueInt32 _auto_1402_2 = (0);
    for (;_auto_1402_2 < _auto_1401_1->count;++_auto_1402_2)
    {
      RogueClassToken* value_3 = (((RogueClassToken*)(_auto_1401_1->data->objects[_auto_1402_2])));
      RogueTokenList__add__Token( THIS, value_3 );
    }
  }
  return (RogueTokenList*)(THIS);
}

RogueInt32 RogueTokenList__capacity( RogueTokenList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

void RogueTokenList__discard_from__Int32( RogueTokenList* THIS, RogueInt32 index_0 )
{
  RogueClassToken* zero_value_1 = 0;
  RogueInt32 c_2 = (THIS->count);
  while (c_2 > index_0)
  {
    --c_2;
    THIS->data->objects[c_2] = zero_value_1;
  }
  THIS->count = c_2;
}

RogueClassToken* RogueTokenList__last( RogueTokenList* THIS )
{
  return (RogueClassToken*)(((RogueClassToken*)(THIS->data->objects[(THIS->count - 1)])));
}

RogueClassTokenListRebuilder* RogueTokenList__rebuilder( RogueTokenList* THIS )
{
  return (RogueClassTokenListRebuilder*)(((RogueTokenListRebuilder__init__TokenList( ((RogueClassTokenListRebuilder*)ROGUE_CREATE_OBJECT(TokenListRebuilder)), THIS ))));
}

RogueTokenList* RogueTokenList__reserve__Int32( RogueTokenList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassToken*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueTokenList__capacity( THIS ))) + ((RogueTokenList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassToken*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTokenList*)(THIS);
}

RogueClassToken* RogueTokenList__remove_at__Int32( RogueTokenList* THIS, RogueInt32 index_0 )
{
  RogueClassToken* result_1 = (((RogueClassToken*)(THIS->data->objects[index_0])));
  RogueArray_set(THIS->data,index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  RogueClassToken* zero_value_2 = 0;
  --THIS->count;
  THIS->data->objects[THIS->count] = zero_value_2;
  return (RogueClassToken*)(result_1);
}

RogueClassToken* RogueTokenList__remove_last( RogueTokenList* THIS )
{
  return (RogueClassToken*)(((RogueTokenList__remove_at__Int32( THIS, (THIS->count - 1) ))));
}

RogueString* RogueLineReader__type_name( RogueClassLineReader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[634]);
}

RogueLogical RogueLineReader__has_another( RogueClassLineReader* THIS )
{
  return (RogueLogical)(!!(THIS->next));
}

RogueString* RogueLineReader__read( RogueClassLineReader* THIS )
{
  RogueString* result_0 = (THIS->next);
  THIS->next = ((RogueLineReader__prepare_next( THIS )));
  ++THIS->position;
  return (RogueString*)(result_0);
}

RogueClassLineReader* RogueLineReader__init__CharacterReader( RogueClassLineReader* THIS, RogueClassCharacterReader* _auto_395_0 )
{
  THIS->source = _auto_395_0;
  THIS->next = ((RogueLineReader__prepare_next( THIS )));
  return (RogueClassLineReader*)(THIS);
}

RogueClassLineReader* RogueLineReader__init__File( RogueClassLineReader* THIS, RogueClassFile* file_0 )
{
  RogueLineReader__init__CharacterReader( THIS, (((RogueClassCharacterReader*)((RogueFile__reader__String( file_0->filepath ))))) );
  return (RogueClassLineReader*)(THIS);
}

RogueClassLineReader* RogueLineReader__init__String( RogueClassLineReader* THIS, RogueString* string_0 )
{
  RogueLineReader__init__CharacterReader( THIS, (((RogueClassCharacterReader*)(((RogueString__reader( string_0 )))))) );
  return (RogueClassLineReader*)(THIS);
}

RogueString* RogueLineReader__prepare_next( RogueClassLineReader* THIS )
{
  if (!((RogueCharacterReader__has_another( (RogueObject*)THIS->source ))))
  {
    if (THIS->prev == (RogueCharacter)10)
    {
      THIS->prev = ((RogueCharacter)(0));
      return (RogueString*)(Rogue_literal_strings[0]);
    }
    else
    {
      return (RogueString*)(((RogueString*)(NULL)));
    }
  }
  THIS->prev = ((RogueCharacter)(0));
  RogueStringBuilder__clear( THIS->buffer );
  while ((RogueCharacterReader__has_another( (RogueObject*)THIS->source )))
  {
    RogueCharacter ch_0 = ((RogueCharacterReader__read( (RogueObject*)THIS->source )));
    if (ch_0 == (RogueCharacter)10)
    {
      THIS->prev = (RogueCharacter)10;
      return (RogueString*)(((RogueStringBuilder__to_String( THIS->buffer ))));
    }
    RogueStringBuilder__print__Character( THIS->buffer, ch_0 );
  }
  return (RogueString*)(((RogueStringBuilder__to_String( THIS->buffer ))));
}

RogueClassLineReader* RogueLineReader__init_object( RogueClassLineReader* THIS )
{
  THIS->buffer = ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) )));
  return (RogueClassLineReader*)(THIS);
}

RogueString* RogueTypeParameterList__to_String( RogueTypeParameterList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTypeParameterList* _auto_1432_2 = (THIS);
    RogueInt32 _auto_1433_3 = (0);
    for (;_auto_1433_3 < _auto_1432_2->count;++_auto_1433_3)
    {
      RogueClassTypeParameter* value_4 = (((RogueClassTypeParameter*)(_auto_1432_2->data->objects[_auto_1433_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueTypeParameterList__type_name( RogueTypeParameterList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[688]);
}

RogueTypeParameterList* RogueTypeParameterList__init_object( RogueTypeParameterList* THIS )
{
  return (RogueTypeParameterList*)(THIS);
}

RogueTypeParameterList* RogueTypeParameterList__init( RogueTypeParameterList* THIS )
{
  RogueTypeParameterList__init__Int32( THIS, 10 );
  return (RogueTypeParameterList*)(THIS);
}

RogueTypeParameterList* RogueTypeParameterList__init__Int32( RogueTypeParameterList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassTypeParameter*), true );
  return (RogueTypeParameterList*)(THIS);
}

RogueTypeParameterList* RogueTypeParameterList__add__TypeParameter( RogueTypeParameterList* THIS, RogueClassTypeParameter* value_0 )
{
  ((RogueTypeParameterList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTypeParameterList*)(THIS);
}

RogueInt32 RogueTypeParameterList__capacity( RogueTypeParameterList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTypeParameterList* RogueTypeParameterList__reserve__Int32( RogueTypeParameterList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassTypeParameter*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueTypeParameterList__capacity( THIS ))) + ((RogueTypeParameterList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassTypeParameter*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTypeParameterList*)(THIS);
}

RogueString* RogueTypeParameter__type_name( RogueClassTypeParameter* THIS )
{
  return (RogueString*)(Rogue_literal_strings[635]);
}

RogueClassTypeParameter* RogueTypeParameter__init__Token_String( RogueClassTypeParameter* THIS, RogueClassToken* _auto_439_0, RogueString* _auto_440_1 )
{
  THIS->name = _auto_440_1;
  THIS->t = _auto_439_0;
  return (RogueClassTypeParameter*)(THIS);
}

RogueClassTypeParameter* RogueTypeParameter__init_object( RogueClassTypeParameter* THIS )
{
  return (RogueClassTypeParameter*)(THIS);
}

RogueString* RogueAugmentList__to_String( RogueAugmentList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueAugmentList* _auto_1464_2 = (THIS);
    RogueInt32 _auto_1465_3 = (0);
    for (;_auto_1465_3 < _auto_1464_2->count;++_auto_1465_3)
    {
      RogueClassAugment* value_4 = (((RogueClassAugment*)(_auto_1464_2->data->objects[_auto_1465_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueAugmentList__type_name( RogueAugmentList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[689]);
}

RogueAugmentList* RogueAugmentList__init_object( RogueAugmentList* THIS )
{
  return (RogueAugmentList*)(THIS);
}

RogueAugmentList* RogueAugmentList__init( RogueAugmentList* THIS )
{
  RogueAugmentList__init__Int32( THIS, 10 );
  return (RogueAugmentList*)(THIS);
}

RogueAugmentList* RogueAugmentList__init__Int32( RogueAugmentList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassAugment*), true );
  return (RogueAugmentList*)(THIS);
}

RogueAugmentList* RogueAugmentList__add__Augment( RogueAugmentList* THIS, RogueClassAugment* value_0 )
{
  ((RogueAugmentList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueAugmentList*)(THIS);
}

RogueInt32 RogueAugmentList__capacity( RogueAugmentList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueAugmentList* RogueAugmentList__reserve__Int32( RogueAugmentList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassAugment*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueAugmentList__capacity( THIS ))) + ((RogueAugmentList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassAugment*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueAugmentList*)(THIS);
}

RogueString* RogueAugment__type_name( RogueClassAugment* THIS )
{
  return (RogueString*)(Rogue_literal_strings[636]);
}

RogueClassAugment* RogueAugment__init__Token_String( RogueClassAugment* THIS, RogueClassToken* _auto_445_0, RogueString* _auto_446_1 )
{
  THIS->name = _auto_446_1;
  THIS->t = _auto_445_0;
  return (RogueClassAugment*)(THIS);
}

RogueClassAugment* RogueAugment__init_object( RogueClassAugment* THIS )
{
  THIS->base_types = ((RogueTypeList__init( ((RogueTypeList*)ROGUE_CREATE_OBJECT(TypeList)) )));
  THIS->tokens = ((RogueTokenList__init( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)) )));
  return (RogueClassAugment*)(THIS);
}

RogueString* RogueAugmentArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[730]);
}

RogueString* RogueString_TokenTypeTable__to_String( RogueClassString_TokenTypeTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_TokenTypeTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_TokenTypeTable__type_name( RogueClassString_TokenTypeTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[637]);
}

RogueClassString_TokenTypeTable* RogueString_TokenTypeTable__init( RogueClassString_TokenTypeTable* THIS )
{
  RogueString_TokenTypeTable__init__Int32( THIS, 16 );
  return (RogueClassString_TokenTypeTable*)(THIS);
}

RogueClassString_TokenTypeTable* RogueString_TokenTypeTable__init__Int32( RogueClassString_TokenTypeTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_TokenTypeTableEntryList__init__Int32_String_TokenTypeTableEntry( ((RogueTableEntry_of_String_TokenTypeList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_TokenTypeList)), bin_count_0, ((RogueClassString_TokenTypeTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_TokenTypeTable*)(THIS);
}

RogueClassString_TokenTypeTableEntry* RogueString_TokenTypeTable__find__String( RogueClassString_TokenTypeTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  RogueClassString_TokenTypeTableEntry* entry_2 = (((RogueClassString_TokenTypeTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( entry_2->key, key_0 )))))
    {
      return (RogueClassString_TokenTypeTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_TokenTypeTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_TokenTypeTableEntry*)(((RogueClassString_TokenTypeTableEntry*)(NULL)));
}

RogueClassTokenType* RogueString_TokenTypeTable__get__String( RogueClassString_TokenTypeTable* THIS, RogueString* key_0 )
{
  RogueClassString_TokenTypeTableEntry* entry_1 = (((RogueString_TokenTypeTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassTokenType*)(entry_1->value);
  }
  else
  {
    RogueClassTokenType* default_value_2 = 0;
    return (RogueClassTokenType*)(default_value_2);
  }
}

RogueClassString_TokenTypeTable* RogueString_TokenTypeTable__set__String_TokenType( RogueClassString_TokenTypeTable* THIS, RogueString* key_0, RogueClassTokenType* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_TokenTypeTableEntry* entry_4 = (((RogueClassString_TokenTypeTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( entry_4->key, key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_TokenTypeTable*)(THIS);
    }
    entry_4 = ((RogueClassString_TokenTypeTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_TokenTypeTableEntry*)((RogueString_TokenTypeTableEntry__init__String_TokenType_Int32( ((RogueClassString_TokenTypeTableEntry*)ROGUE_CREATE_OBJECT(String_TokenTypeTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_TokenTypeTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
  return (RogueClassString_TokenTypeTable*)(THIS);
}

RogueStringBuilder* RogueString_TokenTypeTable__print_to__StringBuilder( RogueClassString_TokenTypeTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_TokenTypeTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_TokenTypeTable* RogueString_TokenTypeTable__init_object( RogueClassString_TokenTypeTable* THIS )
{
  return (RogueClassString_TokenTypeTable*)(THIS);
}

RogueString* RogueLiteralCharacterToken__to_String( RogueClassLiteralCharacterToken* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Character( Rogue_literal_strings[0], THIS->value ))));
}

RogueString* RogueLiteralCharacterToken__type_name( RogueClassLiteralCharacterToken* THIS )
{
  return (RogueString*)(Rogue_literal_strings[773]);
}

RogueCharacter RogueLiteralCharacterToken__to_Character( RogueClassLiteralCharacterToken* THIS )
{
  return (RogueCharacter)(THIS->value);
}

RogueClassLiteralCharacterToken* RogueLiteralCharacterToken__init_object( RogueClassLiteralCharacterToken* THIS )
{
  return (RogueClassLiteralCharacterToken*)(THIS);
}

RogueClassLiteralCharacterToken* RogueLiteralCharacterToken__init__TokenType_Character( RogueClassLiteralCharacterToken* THIS, RogueClassTokenType* _auto_453_0, RogueCharacter _auto_454_1 )
{
  THIS->value = _auto_454_1;
  THIS->_type = _auto_453_0;
  return (RogueClassLiteralCharacterToken*)(THIS);
}

RogueString* RogueLiteralInt64Token__to_String( RogueClassLiteralInt64Token* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Int64( Rogue_literal_strings[0], THIS->value ))));
}

RogueString* RogueLiteralInt64Token__type_name( RogueClassLiteralInt64Token* THIS )
{
  return (RogueString*)(Rogue_literal_strings[774]);
}

RogueInt32 RogueLiteralInt64Token__to_Int32( RogueClassLiteralInt64Token* THIS )
{
  return (RogueInt32)(((RogueInt32)(THIS->value)));
}

RogueInt64 RogueLiteralInt64Token__to_Int64( RogueClassLiteralInt64Token* THIS )
{
  return (RogueInt64)(THIS->value);
}

RogueReal64 RogueLiteralInt64Token__to_Real64( RogueClassLiteralInt64Token* THIS )
{
  return (RogueReal64)(((RogueReal64)(THIS->value)));
}

RogueClassLiteralInt64Token* RogueLiteralInt64Token__init_object( RogueClassLiteralInt64Token* THIS )
{
  return (RogueClassLiteralInt64Token*)(THIS);
}

RogueClassLiteralInt64Token* RogueLiteralInt64Token__init__TokenType_Int64( RogueClassLiteralInt64Token* THIS, RogueClassTokenType* _auto_455_0, RogueInt64 _auto_456_1 )
{
  THIS->value = _auto_456_1;
  THIS->_type = _auto_455_0;
  return (RogueClassLiteralInt64Token*)(THIS);
}

RogueString* RogueLiteralInt32Token__to_String( RogueClassLiteralInt32Token* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], THIS->value ))));
}

RogueString* RogueLiteralInt32Token__type_name( RogueClassLiteralInt32Token* THIS )
{
  return (RogueString*)(Rogue_literal_strings[775]);
}

RogueInt32 RogueLiteralInt32Token__to_Int32( RogueClassLiteralInt32Token* THIS )
{
  return (RogueInt32)(THIS->value);
}

RogueReal64 RogueLiteralInt32Token__to_Real64( RogueClassLiteralInt32Token* THIS )
{
  return (RogueReal64)(((RogueReal64)(THIS->value)));
}

RogueClassLiteralInt32Token* RogueLiteralInt32Token__init_object( RogueClassLiteralInt32Token* THIS )
{
  return (RogueClassLiteralInt32Token*)(THIS);
}

RogueClassLiteralInt32Token* RogueLiteralInt32Token__init__TokenType_Int32( RogueClassLiteralInt32Token* THIS, RogueClassTokenType* _auto_457_0, RogueInt32 _auto_458_1 )
{
  THIS->value = _auto_458_1;
  THIS->_type = _auto_457_0;
  return (RogueClassLiteralInt32Token*)(THIS);
}

RogueString* RogueLiteralReal64Token__to_String( RogueClassLiteralReal64Token* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Real64( Rogue_literal_strings[0], THIS->value ))));
}

RogueString* RogueLiteralReal64Token__type_name( RogueClassLiteralReal64Token* THIS )
{
  return (RogueString*)(Rogue_literal_strings[776]);
}

RogueInt32 RogueLiteralReal64Token__to_Int32( RogueClassLiteralReal64Token* THIS )
{
  return (RogueInt32)(((RogueInt32)(THIS->value)));
}

RogueReal64 RogueLiteralReal64Token__to_Real64( RogueClassLiteralReal64Token* THIS )
{
  return (RogueReal64)(THIS->value);
}

RogueClassLiteralReal64Token* RogueLiteralReal64Token__init_object( RogueClassLiteralReal64Token* THIS )
{
  return (RogueClassLiteralReal64Token*)(THIS);
}

RogueClassLiteralReal64Token* RogueLiteralReal64Token__init__TokenType_Real64( RogueClassLiteralReal64Token* THIS, RogueClassTokenType* _auto_459_0, RogueReal64 _auto_460_1 )
{
  THIS->value = _auto_460_1;
  THIS->_type = _auto_459_0;
  return (RogueClassLiteralReal64Token*)(THIS);
}

RogueString* RogueStringDataToken__to_String( RogueClassStringDataToken* THIS )
{
  return (RogueString*)(THIS->value);
}

RogueString* RogueStringDataToken__type_name( RogueClassStringDataToken* THIS )
{
  return (RogueString*)(Rogue_literal_strings[777]);
}

RogueClassStringDataToken* RogueStringDataToken__init_object( RogueClassStringDataToken* THIS )
{
  return (RogueClassStringDataToken*)(THIS);
}

RogueClassStringDataToken* RogueStringDataToken__init__TokenType_String( RogueClassStringDataToken* THIS, RogueClassTokenType* _auto_461_0, RogueString* _auto_462_1 )
{
  THIS->value = _auto_462_1;
  THIS->_type = _auto_461_0;
  return (RogueClassStringDataToken*)(THIS);
}

RogueString* RogueTokenArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[731]);
}

RogueString* RogueString_TypeSpecializerTable__to_String( RogueClassString_TypeSpecializerTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_TypeSpecializerTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_TypeSpecializerTable__type_name( RogueClassString_TypeSpecializerTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[638]);
}

RogueClassString_TypeSpecializerTable* RogueString_TypeSpecializerTable__init( RogueClassString_TypeSpecializerTable* THIS )
{
  RogueString_TypeSpecializerTable__init__Int32( THIS, 16 );
  return (RogueClassString_TypeSpecializerTable*)(THIS);
}

RogueClassString_TypeSpecializerTable* RogueString_TypeSpecializerTable__init__Int32( RogueClassString_TypeSpecializerTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_TypeSpecializerTableEntryList__init__Int32_String_TypeSpecializerTableEntry( ((RogueTableEntry_of_String_TypeSpecializerList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_TypeSpecializerList)), bin_count_0, ((RogueClassString_TypeSpecializerTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_TypeSpecializerTable*)(THIS);
}

RogueInt32 RogueString_TypeSpecializerTable__count( RogueClassString_TypeSpecializerTable* THIS )
{
  return (RogueInt32)(THIS->keys->count);
}

RogueClassString_TypeSpecializerTableEntry* RogueString_TypeSpecializerTable__find__String( RogueClassString_TypeSpecializerTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  RogueClassString_TypeSpecializerTableEntry* entry_2 = (((RogueClassString_TypeSpecializerTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( entry_2->key, key_0 )))))
    {
      return (RogueClassString_TypeSpecializerTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_TypeSpecializerTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_TypeSpecializerTableEntry*)(((RogueClassString_TypeSpecializerTableEntry*)(NULL)));
}

RogueClassTypeSpecializer* RogueString_TypeSpecializerTable__get__String( RogueClassString_TypeSpecializerTable* THIS, RogueString* key_0 )
{
  RogueClassString_TypeSpecializerTableEntry* entry_1 = (((RogueString_TypeSpecializerTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassTypeSpecializer*)(entry_1->value);
  }
  else
  {
    RogueClassTypeSpecializer* default_value_2 = 0;
    return (RogueClassTypeSpecializer*)(default_value_2);
  }
}

RogueClassString_TypeSpecializerTable* RogueString_TypeSpecializerTable__set__String_TypeSpecializer( RogueClassString_TypeSpecializerTable* THIS, RogueString* key_0, RogueClassTypeSpecializer* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_TypeSpecializerTableEntry* entry_4 = (((RogueClassString_TypeSpecializerTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( entry_4->key, key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_TypeSpecializerTable*)(THIS);
    }
    entry_4 = ((RogueClassString_TypeSpecializerTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_TypeSpecializerTableEntry*)((RogueString_TypeSpecializerTableEntry__init__String_TypeSpecializer_Int32( ((RogueClassString_TypeSpecializerTableEntry*)ROGUE_CREATE_OBJECT(String_TypeSpecializerTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_TypeSpecializerTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
  return (RogueClassString_TypeSpecializerTable*)(THIS);
}

RogueStringBuilder* RogueString_TypeSpecializerTable__print_to__StringBuilder( RogueClassString_TypeSpecializerTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_TypeSpecializerTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_TypeSpecializerTable* RogueString_TypeSpecializerTable__init_object( RogueClassString_TypeSpecializerTable* THIS )
{
  return (RogueClassString_TypeSpecializerTable*)(THIS);
}

RogueString* RogueTypeParameterArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[732]);
}

RogueString* RogueTypeSpecializer__type_name( RogueClassTypeSpecializer* THIS )
{
  return (RogueString*)(Rogue_literal_strings[639]);
}

RogueClassTypeSpecializer* RogueTypeSpecializer__init__String_Int32( RogueClassTypeSpecializer* THIS, RogueString* _auto_474_0, RogueInt32 _auto_475_1 )
{
  THIS->index = _auto_475_1;
  THIS->name = _auto_474_0;
  return (RogueClassTypeSpecializer*)(THIS);
}

RogueClassTypeSpecializer* RogueTypeSpecializer__init_object( RogueClassTypeSpecializer* THIS )
{
  return (RogueClassTypeSpecializer*)(THIS);
}

RogueString* RogueTypeSpecializerList__to_String( RogueTypeSpecializerList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTypeSpecializerList* _auto_1510_2 = (THIS);
    RogueInt32 _auto_1511_3 = (0);
    for (;_auto_1511_3 < _auto_1510_2->count;++_auto_1511_3)
    {
      RogueClassTypeSpecializer* value_4 = (((RogueClassTypeSpecializer*)(_auto_1510_2->data->objects[_auto_1511_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueTypeSpecializerList__type_name( RogueTypeSpecializerList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[690]);
}

RogueTypeSpecializerList* RogueTypeSpecializerList__init_object( RogueTypeSpecializerList* THIS )
{
  return (RogueTypeSpecializerList*)(THIS);
}

RogueTypeSpecializerList* RogueTypeSpecializerList__init( RogueTypeSpecializerList* THIS )
{
  RogueTypeSpecializerList__init__Int32( THIS, 10 );
  return (RogueTypeSpecializerList*)(THIS);
}

RogueTypeSpecializerList* RogueTypeSpecializerList__init__Int32( RogueTypeSpecializerList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassTypeSpecializer*), true );
  return (RogueTypeSpecializerList*)(THIS);
}

RogueTypeSpecializerList* RogueTypeSpecializerList__add__TypeSpecializer( RogueTypeSpecializerList* THIS, RogueClassTypeSpecializer* value_0 )
{
  ((RogueTypeSpecializerList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTypeSpecializerList*)(THIS);
}

RogueInt32 RogueTypeSpecializerList__capacity( RogueTypeSpecializerList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTypeSpecializerList* RogueTypeSpecializerList__reserve__Int32( RogueTypeSpecializerList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassTypeSpecializer*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueTypeSpecializerList__capacity( THIS ))) + ((RogueTypeSpecializerList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassTypeSpecializer*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTypeSpecializerList*)(THIS);
}

RogueString* RogueString_TemplateTableEntryList__to_String( RogueTableEntry_of_String_TemplateList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_TemplateList* _auto_1542_2 = (THIS);
    RogueInt32 _auto_1543_3 = (0);
    for (;_auto_1543_3 < _auto_1542_2->count;++_auto_1543_3)
    {
      RogueClassString_TemplateTableEntry* value_4 = (((RogueClassString_TemplateTableEntry*)(_auto_1542_2->data->objects[_auto_1543_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_TemplateTableEntryList__type_name( RogueTableEntry_of_String_TemplateList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[691]);
}

RogueTableEntry_of_String_TemplateList* RogueString_TemplateTableEntryList__init_object( RogueTableEntry_of_String_TemplateList* THIS )
{
  return (RogueTableEntry_of_String_TemplateList*)(THIS);
}

RogueTableEntry_of_String_TemplateList* RogueString_TemplateTableEntryList__init__Int32_String_TemplateTableEntry( RogueTableEntry_of_String_TemplateList* THIS, RogueInt32 initial_capacity_0, RogueClassString_TemplateTableEntry* initial_value_1 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_TemplateTableEntry*), true );
  {
    RogueInt32 i_2 = (1);
    RogueInt32 _auto_484_3 = (initial_capacity_0);
    for (;i_2 <= _auto_484_3;++i_2)
    {
      RogueString_TemplateTableEntryList__add__String_TemplateTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_TemplateList*)(THIS);
}

RogueTableEntry_of_String_TemplateList* RogueString_TemplateTableEntryList__add__String_TemplateTableEntry( RogueTableEntry_of_String_TemplateList* THIS, RogueClassString_TemplateTableEntry* value_0 )
{
  ((RogueString_TemplateTableEntryList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_TemplateList*)(THIS);
}

RogueInt32 RogueString_TemplateTableEntryList__capacity( RogueTableEntry_of_String_TemplateList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_TemplateList* RogueString_TemplateTableEntryList__reserve__Int32( RogueTableEntry_of_String_TemplateList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassString_TemplateTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueString_TemplateTableEntryList__capacity( THIS ))) + ((RogueString_TemplateTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassString_TemplateTableEntry*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_TemplateList*)(THIS);
}

RogueString* RogueString_TemplateTableEntry__type_name( RogueClassString_TemplateTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[640]);
}

RogueClassString_TemplateTableEntry* RogueString_TemplateTableEntry__init__String_Template_Int32( RogueClassString_TemplateTableEntry* THIS, RogueString* _key_0, RogueClassTemplate* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_TemplateTableEntry*)(THIS);
}

RogueClassString_TemplateTableEntry* RogueString_TemplateTableEntry__init_object( RogueClassString_TemplateTableEntry* THIS )
{
  return (RogueClassString_TemplateTableEntry*)(THIS);
}

RogueString* RogueString_TemplateTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[733]);
}

RogueString* RogueString_AugmentListTableEntryList__to_String( RogueTableEntry_of_String_AugmentListList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_AugmentListList* _auto_1574_2 = (THIS);
    RogueInt32 _auto_1575_3 = (0);
    for (;_auto_1575_3 < _auto_1574_2->count;++_auto_1575_3)
    {
      RogueClassString_AugmentListTableEntry* value_4 = (((RogueClassString_AugmentListTableEntry*)(_auto_1574_2->data->objects[_auto_1575_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_AugmentListTableEntryList__type_name( RogueTableEntry_of_String_AugmentListList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[692]);
}

RogueTableEntry_of_String_AugmentListList* RogueString_AugmentListTableEntryList__init_object( RogueTableEntry_of_String_AugmentListList* THIS )
{
  return (RogueTableEntry_of_String_AugmentListList*)(THIS);
}

RogueTableEntry_of_String_AugmentListList* RogueString_AugmentListTableEntryList__init__Int32_String_AugmentListTableEntry( RogueTableEntry_of_String_AugmentListList* THIS, RogueInt32 initial_capacity_0, RogueClassString_AugmentListTableEntry* initial_value_1 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_AugmentListTableEntry*), true );
  {
    RogueInt32 i_2 = (1);
    RogueInt32 _auto_491_3 = (initial_capacity_0);
    for (;i_2 <= _auto_491_3;++i_2)
    {
      RogueString_AugmentListTableEntryList__add__String_AugmentListTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_AugmentListList*)(THIS);
}

RogueTableEntry_of_String_AugmentListList* RogueString_AugmentListTableEntryList__add__String_AugmentListTableEntry( RogueTableEntry_of_String_AugmentListList* THIS, RogueClassString_AugmentListTableEntry* value_0 )
{
  ((RogueString_AugmentListTableEntryList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_AugmentListList*)(THIS);
}

RogueInt32 RogueString_AugmentListTableEntryList__capacity( RogueTableEntry_of_String_AugmentListList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_AugmentListList* RogueString_AugmentListTableEntryList__reserve__Int32( RogueTableEntry_of_String_AugmentListList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassString_AugmentListTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueString_AugmentListTableEntryList__capacity( THIS ))) + ((RogueString_AugmentListTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassString_AugmentListTableEntry*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_AugmentListList*)(THIS);
}

RogueString* RogueString_AugmentListTableEntry__type_name( RogueClassString_AugmentListTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[641]);
}

RogueClassString_AugmentListTableEntry* RogueString_AugmentListTableEntry__init__String_AugmentList_Int32( RogueClassString_AugmentListTableEntry* THIS, RogueString* _key_0, RogueAugmentList* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_AugmentListTableEntry*)(THIS);
}

RogueClassString_AugmentListTableEntry* RogueString_AugmentListTableEntry__init_object( RogueClassString_AugmentListTableEntry* THIS )
{
  return (RogueClassString_AugmentListTableEntry*)(THIS);
}

RogueString* RogueString_AugmentListTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[734]);
}

RogueString* RogueCmdLabelList__to_String( RogueCmdLabelList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueCmdLabelList* _auto_1611_2 = (THIS);
    RogueInt32 _auto_1612_3 = (0);
    for (;_auto_1612_3 < _auto_1611_2->count;++_auto_1612_3)
    {
      RogueClassCmdLabel* value_4 = (((RogueClassCmdLabel*)(_auto_1611_2->data->objects[_auto_1612_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdLabelList__type_name( RogueCmdLabelList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[693]);
}

RogueCmdLabelList* RogueCmdLabelList__init_object( RogueCmdLabelList* THIS )
{
  return (RogueCmdLabelList*)(THIS);
}

RogueCmdLabelList* RogueCmdLabelList__init( RogueCmdLabelList* THIS )
{
  RogueCmdLabelList__init__Int32( THIS, 10 );
  return (RogueCmdLabelList*)(THIS);
}

RogueCmdLabelList* RogueCmdLabelList__init__Int32( RogueCmdLabelList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassCmdLabel*), true );
  return (RogueCmdLabelList*)(THIS);
}

RogueCmdLabelList* RogueCmdLabelList__add__CmdLabel( RogueCmdLabelList* THIS, RogueClassCmdLabel* value_0 )
{
  ((RogueCmdLabelList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdLabelList*)(THIS);
}

RogueInt32 RogueCmdLabelList__capacity( RogueCmdLabelList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueCmdLabelList* RogueCmdLabelList__clear( RogueCmdLabelList* THIS )
{
  THIS->count = 0;
  return (RogueCmdLabelList*)(THIS);
}

RogueCmdLabelList* RogueCmdLabelList__reserve__Int32( RogueCmdLabelList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassCmdLabel*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueCmdLabelList__capacity( THIS ))) + ((RogueCmdLabelList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassCmdLabel*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdLabelList*)(THIS);
}

RogueString* RogueString_CmdLabelTable__to_String( RogueClassString_CmdLabelTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_CmdLabelTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_CmdLabelTable__type_name( RogueClassString_CmdLabelTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[642]);
}

RogueClassString_CmdLabelTable* RogueString_CmdLabelTable__init( RogueClassString_CmdLabelTable* THIS )
{
  RogueString_CmdLabelTable__init__Int32( THIS, 16 );
  return (RogueClassString_CmdLabelTable*)(THIS);
}

RogueClassString_CmdLabelTable* RogueString_CmdLabelTable__init__Int32( RogueClassString_CmdLabelTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_CmdLabelTableEntryList__init__Int32_String_CmdLabelTableEntry( ((RogueTableEntry_of_String_CmdLabelList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_CmdLabelList)), bin_count_0, ((RogueClassString_CmdLabelTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_CmdLabelTable*)(THIS);
}

void RogueString_CmdLabelTable__clear( RogueClassString_CmdLabelTable* THIS )
{
  {
    RogueTableEntry_of_String_CmdLabelList* _auto_1649_0 = (THIS->bins);
    RogueInt32 i_1 = (0);
    for (;i_1 < _auto_1649_0->count;++i_1)
    {
      THIS->bins->data->objects[i_1] = ((RogueClassString_CmdLabelTableEntry*)(NULL));
    }
  }
  RogueStringList__clear( THIS->keys );
}

RogueLogical RogueString_CmdLabelTable__contains__String( RogueClassString_CmdLabelTable* THIS, RogueString* key_0 )
{
  return (RogueLogical)(!!(((RogueString_CmdLabelTable__find__String( THIS, key_0 )))));
}

RogueClassString_CmdLabelTableEntry* RogueString_CmdLabelTable__find__String( RogueClassString_CmdLabelTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  RogueClassString_CmdLabelTableEntry* entry_2 = (((RogueClassString_CmdLabelTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( entry_2->key, key_0 )))))
    {
      return (RogueClassString_CmdLabelTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_CmdLabelTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_CmdLabelTableEntry*)(((RogueClassString_CmdLabelTableEntry*)(NULL)));
}

RogueClassCmdLabel* RogueString_CmdLabelTable__get__String( RogueClassString_CmdLabelTable* THIS, RogueString* key_0 )
{
  RogueClassString_CmdLabelTableEntry* entry_1 = (((RogueString_CmdLabelTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassCmdLabel*)(entry_1->value);
  }
  else
  {
    RogueClassCmdLabel* default_value_2 = 0;
    return (RogueClassCmdLabel*)(default_value_2);
  }
}

RogueClassString_CmdLabelTable* RogueString_CmdLabelTable__set__String_CmdLabel( RogueClassString_CmdLabelTable* THIS, RogueString* key_0, RogueClassCmdLabel* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_CmdLabelTableEntry* entry_4 = (((RogueClassString_CmdLabelTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( entry_4->key, key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_CmdLabelTable*)(THIS);
    }
    entry_4 = ((RogueClassString_CmdLabelTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_CmdLabelTableEntry*)((RogueString_CmdLabelTableEntry__init__String_CmdLabel_Int32( ((RogueClassString_CmdLabelTableEntry*)ROGUE_CREATE_OBJECT(String_CmdLabelTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_CmdLabelTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
  return (RogueClassString_CmdLabelTable*)(THIS);
}

RogueStringBuilder* RogueString_CmdLabelTable__print_to__StringBuilder( RogueClassString_CmdLabelTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_CmdLabelTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_CmdLabelTable* RogueString_CmdLabelTable__init_object( RogueClassString_CmdLabelTable* THIS )
{
  return (RogueClassString_CmdLabelTable*)(THIS);
}

RogueString* RogueCloneArgs__type_name( RogueClassCloneArgs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[643]);
}

RogueClassCmdLabel* RogueCloneArgs__register_label__CmdLabel( RogueClassCloneArgs* THIS, RogueClassCmdLabel* label_0 )
{
  return (RogueClassCmdLabel*)(label_0);
}

RogueClassCloneArgs* RogueCloneArgs__init_object( RogueClassCloneArgs* THIS )
{
  return (RogueClassCloneArgs*)(THIS);
}

RogueString* RogueCloneMethodArgs__type_name( RogueClassCloneMethodArgs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1026]);
}

RogueClassCmdLabel* RogueCloneMethodArgs__register_label__CmdLabel( RogueClassCloneMethodArgs* THIS, RogueClassCmdLabel* label_0 )
{
  RogueCmdLabelList__add__CmdLabel( THIS->cloned_method->label_list, label_0 );
  RogueString_CmdLabelTable__set__String_CmdLabel( THIS->cloned_method->label_lookup, label_0->name, label_0 );
  return (RogueClassCmdLabel*)(label_0);
}

RogueClassCloneMethodArgs* RogueCloneMethodArgs__init_object( RogueClassCloneMethodArgs* THIS )
{
  return (RogueClassCloneMethodArgs*)(THIS);
}

RogueClassCloneMethodArgs* RogueCloneMethodArgs__init__Method( RogueClassCloneMethodArgs* THIS, RogueClassMethod* _auto_537_0 )
{
  THIS->cloned_method = _auto_537_0;
  return (RogueClassCloneMethodArgs*)(THIS);
}

RogueString* RogueCmdAccess__type_name( RogueClassCmdAccess* THIS )
{
  return (RogueString*)(Rogue_literal_strings[782]);
}

RogueClassCmd* RogueCmdAccess__clone__CloneArgs( RogueClassCmdAccess* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdAccess* result_1 = (((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, clone_args_0 ))), THIS->name, ((RogueCmd__clone__CmdArgs_CloneArgs( ((RogueClassCmd*)THIS), THIS->args, clone_args_0 ))) ))));
  if (!!(THIS->flag_args))
  {
    result_1->flag_args = ((RogueCmdFlagArgList__init__Int32( ((RogueCmdFlagArgList*)ROGUE_CREATE_OBJECT(CmdFlagArgList)), THIS->flag_args->count )));
    {
      RogueCmdFlagArgList* _auto_1650_3 = (THIS->flag_args);
      RogueInt32 _auto_1651_4 = (0);
      for (;_auto_1651_4 < _auto_1650_3->count;++_auto_1651_4)
      {
        RogueClassCmdFlagArg* flag_arg_5 = (((RogueClassCmdFlagArg*)(_auto_1650_3->data->objects[_auto_1651_4])));
        RogueCmdFlagArgList__add__CmdFlagArg( result_1->flag_args, ((RogueCmdFlagArg__clone__CloneArgs( flag_arg_5, ((RogueClassCloneArgs*)(NULL)) ))) );
      }
    }
  }
  RogueClassMacroArgs* macro_args_2 = (((RogueClassMacroArgs*)(RogueObject_as(clone_args_0,RogueTypeMacroArgs))));
  if (!!(macro_args_2))
  {
    return (RogueClassCmd*)(((RogueMacroArgs__inline_access__CmdAccess( macro_args_2, result_1 ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(result_1)));
}

RogueClassType* RogueCmdAccess__implicit_type__Scope( RogueClassCmdAccess* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassType*)(((RogueScope__find_type__String( scope_0, THIS->name ))));
}

RogueClassCmd* RogueCmdAccess__resolve__Scope( RogueClassCmdAccess* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->args))
  {
    RogueCmdArgs__resolve__Scope( THIS->args, scope_0 );
  }
  if (!!(THIS->context))
  {
    if (((RogueString__ends_with__String( THIS->name, ((RogueCharacter__to_String( (RogueCharacter)'?' ))) ))))
    {
      return (RogueClassCmd*)(((RogueCmdLogicalize__resolve__Scope( ((RogueClassCmdLogicalize*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalize*)ROGUE_CREATE_OBJECT(CmdLogicalize))), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->context, ((RogueString__leftmost__Int32( THIS->name, -1 ))), THIS->args ))))) ))))), scope_0 ))));
    }
    THIS->context = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->context), scope_0 ));
  }
  else
  {
    RogueClassLocal* v_1 = (((RogueScope__find_local__String( scope_0, THIS->name ))));
    if (!!(v_1))
    {
      if (!!(THIS->args))
      {
        return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->context, THIS->name ))))), Rogue_literal_strings[256], THIS->args ))), scope_0 ))));
      }
      return (RogueClassCmd*)(((RogueCmdReadLocal__resolve__Scope( ((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, v_1 ))), scope_0 ))));
    }
    RogueClassType* new_type_2 = (((RogueScope__find_type__String( scope_0, ((RogueString__after_any__Character( THIS->name, (RogueCharacter)'@' ))) ))));
    if (!!(new_type_2))
    {
      RogueType__organize__Scope( new_type_2, scope_0 );
      if (((RogueType__is_routine( new_type_2 ))))
      {
        if (((RogueString__begins_with__Character( THIS->name, (RogueCharacter)'@' ))))
        {
          RogueMethodList* m_call_list_3 = (((RogueString_MethodListTable__get__String( new_type_2->routine_lookup_by_name, Rogue_literal_strings[256] ))));
          if ((!!(m_call_list_3) && m_call_list_3->count == 1))
          {
            RogueClassMethod* m_call_4 = (((RogueClassMethod*)(m_call_list_3->data->objects[0])));
            RogueFnParamList* parameters_5 = (((RogueFnParamList__init__Int32( ((RogueFnParamList*)ROGUE_CREATE_OBJECT(FnParamList)), m_call_4->parameters->count ))));
            RogueClassCmdArgs* args_6 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))));
            {
              RogueLocalList* _auto_1652_23 = (m_call_4->parameters);
              RogueInt32 _auto_1653_24 = (0);
              for (;_auto_1653_24 < _auto_1652_23->count;++_auto_1653_24)
              {
                RogueClassLocal* param_25 = (((RogueClassLocal*)(_auto_1652_23->data->objects[_auto_1653_24])));
                RogueFnParamList__add__FnParam( parameters_5, ((RogueFnParam__init__String( ((RogueClassFnParam*)ROGUE_CREATE_OBJECT(FnParam)), param_25->name ))) );
                ((RogueFnParamList__last( parameters_5 )))->_type = param_25->_type;
                RogueCmdList__add__Cmd( ((RogueCmdList*)args_6), ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, param_25->name ))))) );
              }
            }
            RogueClassCmdStatementList* statements_7 = (((RogueCmdStatementList__init__Int32( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)), 1 ))));
            if (!!(m_call_4->_return_type))
            {
              RogueCmdList__add__Cmd( ((RogueCmdList*)statements_7), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, new_type_2->name, args_6 ))))) ))))) );
            }
            else
            {
              RogueCmdList__add__Cmd( ((RogueCmdList*)statements_7), ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, new_type_2->name, args_6 ))))) );
            }
            return (RogueClassCmd*)(((RogueCmdCreateFunction__resolve__Scope( ((RogueCmdCreateFunction__init__Token_FnParamList_Type_FnArgList_CmdStatementList_Logical( ((RogueClassCmdCreateFunction*)ROGUE_CREATE_OBJECT(CmdCreateFunction)), THIS->t, parameters_5, m_call_4->_return_type, ((RogueFnArgList*)(NULL)), statements_7, false ))), scope_0 ))));
          }
        }
        else
        {
          return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), THIS->t, new_type_2 ))))), Rogue_literal_strings[256], THIS->args ))), scope_0 ))));
        }
      }
      if (((RogueString__begins_with__Character( THIS->name, (RogueCharacter)'@' ))))
      {
        ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[829] ))));
      }
      if (((void*)THIS->args) == ((void*)NULL))
      {
        if (((RogueString__ends_with__String( THIS->name, ((RogueCharacter__to_String( (RogueCharacter)']' ))) ))))
        {
          THIS->args = ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) )));
        }
        else
        {
          return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadSingleton__init__Token_Type( ((RogueClassCmdReadSingleton*)ROGUE_CREATE_OBJECT(CmdReadSingleton)), THIS->t, new_type_2 ))))));
        }
      }
      if (new_type_2->is_array)
      {
        return (RogueClassCmd*)(((RogueCmdCreateArray__resolve__Scope( ((RogueCmdCreateArray__init__Token_Type_CmdArgs( ((RogueClassCmdCreateArray*)ROGUE_CREATE_OBJECT(CmdCreateArray)), THIS->t, new_type_2, THIS->args ))), scope_0 ))));
      }
      if (((RogueType__is_compound( new_type_2 ))))
      {
        RogueClassCmd* cmd_8 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, new_type_2, ((RogueCmdAccess__init__Token_String_CmdArgs_CmdFlagArgList( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, Rogue_literal_strings[330], THIS->args, THIS->flag_args ))), true, false ))));
        RogueClassCmdCall* cmd_call_9 = (((RogueClassCmdCall*)(RogueObject_as(cmd_8,RogueTypeCmdCall))));
        if ((!!(cmd_call_9) && ((RogueMethod__is_generated( cmd_call_9->method_info )))))
        {
          return (RogueClassCmd*)(((RogueCmdCreateCompound__resolve__Scope( ((RogueCmdCreateCompound__init__Token_Type_CmdArgs( ((RogueClassCmdCreateCompound*)ROGUE_CREATE_OBJECT(CmdCreateCompound)), THIS->t, new_type_2, cmd_call_9->args ))), scope_0 ))));
        }
        else if (!!(cmd_call_9))
        {
          return (RogueClassCmd*)(((RogueClassCmd*)(cmd_call_9)));
        }
        else
        {
          return (RogueClassCmd*)(cmd_8);
        }
      }
      RogueClassCmdCreateObject* cmd_create_10 = (((RogueCmdCreateObject__init__Token_Type( ((RogueClassCmdCreateObject*)ROGUE_CREATE_OBJECT(CmdCreateObject)), THIS->t, new_type_2 ))));
      RogueClassCmd* cmd_new_11 = (((RogueClassCmd*)(cmd_create_10)));
      RogueLogical must_find_12 = ((!!(THIS->args->count) || ((RogueType__is_native( new_type_2 )))));
      RogueClassCmd* cmd_call_13 = 0;
      if (!(((RogueType__is_native( new_type_2 )))))
      {
        cmd_call_13 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, new_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs_CmdFlagArgList( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, cmd_new_11, Rogue_literal_strings[331], THIS->args, THIS->flag_args ))), false, true ))));
      }
      if (!(!!(cmd_call_13)))
      {
        cmd_call_13 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, new_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs_CmdFlagArgList( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, new_type_2->name ))))), Rogue_literal_strings[330], THIS->args, THIS->flag_args ))), false, false ))));
        if ((!(!!(cmd_call_13)) && must_find_12))
        {
          if (!(((RogueType__is_native( new_type_2 )))))
          {
            cmd_call_13 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, new_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs_CmdFlagArgList( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, cmd_new_11, Rogue_literal_strings[331], THIS->args, THIS->flag_args ))), true, true ))));
          }
          cmd_call_13 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, new_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs_CmdFlagArgList( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, new_type_2->name ))))), Rogue_literal_strings[330], THIS->args, THIS->flag_args ))), true, false ))));
        }
      }
      if (!!(cmd_call_13))
      {
        return (RogueClassCmd*)((call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)(cmd_call_13), new_type_2, scope_0 ))), scope_0 )));
      }
      else
      {
        return (RogueClassCmd*)((call_ROGUEM56( 25, (RogueClassCmd*)(cmd_new_11), scope_0 )));
      }
    }
    else if (((RogueString__ends_with__String( THIS->name, ((RogueCharacter__to_String( (RogueCharacter)'?' ))) ))))
    {
      return (RogueClassCmd*)(((RogueCmdLogicalize__resolve__Scope( ((RogueClassCmdLogicalize*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalize*)ROGUE_CREATE_OBJECT(CmdLogicalize))), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->context, ((RogueString__leftmost__Int32( THIS->name, -1 ))), THIS->args ))))) ))))), scope_0 ))));
    }
    RogueClassCmd* result_14 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, scope_0->_this_type, THIS, false, false ))));
    if (!!(result_14))
    {
      RogueCmdAccess__check_for_recursive_getter__Scope( THIS, scope_0 );
      return (RogueClassCmd*)(result_14);
    }
    RogueClassProperty* p_15 = (((RogueType__find_global__String( scope_0->_this_type, THIS->name ))));
    if (!!(p_15))
    {
      if (!!(THIS->args))
      {
        return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->context, THIS->name ))))), Rogue_literal_strings[256], THIS->args ))), scope_0 ))));
      }
      else
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ((RogueClassCmdReadGlobal*)ROGUE_CREATE_OBJECT(CmdReadGlobal)), THIS->t, p_15 ))))));
      }
    }
    p_15 = ((RogueClassProperty*)((RogueType__find_property__String( scope_0->_this_type, THIS->name ))));
    if (!!(p_15))
    {
      if (!!(THIS->args))
      {
        return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->context, THIS->name ))))), Rogue_literal_strings[256], THIS->args ))), scope_0 ))));
      }
      if (((RogueMethod__is_global( scope_0->this_method ))))
      {
        ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[853] ))));
      }
      THIS->context = ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), THIS->t, scope_0->_this_type )))));
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)ROGUE_CREATE_OBJECT(CmdReadProperty)), THIS->t, THIS->context, p_15 ))))));
    }
    if (!(!!(THIS->args)))
    {
      RogueClassDefinition* def_16 = (((RogueString_DefinitionTable__get__String( scope_0->_this_type->definition_lookup, THIS->name ))));
      if ((!(!!(def_16)) && !!(scope_0->_implicit_type)))
      {
        def_16 = ((RogueClassDefinition*)((RogueString_DefinitionTable__get__String( scope_0->_implicit_type->definition_lookup, THIS->name ))));
      }
      if (!!(def_16))
      {
        return (RogueClassCmd*)((call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM58( 6, (RogueClassCmd*)(def_16->expression), ((RogueClassCloneArgs*)(NULL)) ))), scope_0 )));
      }
      p_15 = ((RogueClassProperty*)((RogueType__find_property__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global, THIS->name ))));
      if (!!(p_15))
      {
        return (RogueClassCmd*)(((RogueCmdReadProperty__resolve__Scope( ((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)ROGUE_CREATE_OBJECT(CmdReadProperty)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadSingleton__init__Token_Type( ((RogueClassCmdReadSingleton*)ROGUE_CREATE_OBJECT(CmdReadSingleton)), THIS->t, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global ))))), p_15 ))), scope_0 ))));
      }
    }
    return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, scope_0->_this_type, THIS, true, false ))));
  }
  RogueClassType* context_type_17 = ((call_ROGUEM64( 22, (RogueClassCmd*)(THIS->context) )));
  RogueType__organize__Scope( context_type_17, scope_0 );
  if (context_type_17->is_optional)
  {
    {
      RogueString* _auto_1669_26 = (THIS->name);
      if (((RogueString__operatorEQUALSEQUALS__String( _auto_1669_26, Rogue_literal_strings[857] ))))
      {
        if ((!!(THIS->args) && !!(THIS->args->count)))
        {
          ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[858] ))));
        }
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLogicalizeOptionalValue__init__Token_Cmd_Logical( ((RogueClassCmdLogicalizeOptionalValue*)ROGUE_CREATE_OBJECT(CmdLogicalizeOptionalValue)), THIS->t, THIS->context, true ))))));
      }
      else if (((RogueString__operatorEQUALSEQUALS__String( _auto_1669_26, Rogue_literal_strings[859] ))))
      {
        if ((!!(THIS->args) && !!(THIS->args->count)))
        {
          ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[860] ))));
        }
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdGetOptionalValue__init__Token_Cmd( ((RogueClassCmdGetOptionalValue*)ROGUE_CREATE_OBJECT(CmdGetOptionalValue)), THIS->t, THIS->context ))))));
      }
      else
      {
        ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[861] ))));
      }
    }
  }
  RogueClassCmd* result_18 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_17, THIS, false, false ))));
  if (!!(result_18))
  {
    return (RogueClassCmd*)(result_18);
  }
  RogueClassProperty* p_19 = (((RogueType__find_global__String( context_type_17, THIS->name ))));
  if (!!(p_19))
  {
    if (!!(THIS->args))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->context, THIS->name ))))), Rogue_literal_strings[256], THIS->args ))), scope_0 ))));
    }
    call_ROGUEM63( 19, (RogueClassCmd*)(THIS->context) );
    return (RogueClassCmd*)(((RogueCmdReadGlobal__resolve__Scope( ((RogueCmdReadGlobal__init__Token_Property( ((RogueClassCmdReadGlobal*)ROGUE_CREATE_OBJECT(CmdReadGlobal)), THIS->t, p_19 ))), scope_0 ))));
  }
  p_19 = ((RogueClassProperty*)((RogueType__find_property__String( context_type_17, THIS->name ))));
  if (!!(p_19))
  {
    if (!!(THIS->args))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->context, THIS->name ))))), Rogue_literal_strings[256], THIS->args ))), scope_0 ))));
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)ROGUE_CREATE_OBJECT(CmdReadProperty)), THIS->t, THIS->context, p_19 ))))));
  }
  if (!(!!(THIS->args)))
  {
    RogueClassDefinition* def_20 = (((RogueString_DefinitionTable__get__String( context_type_17->definition_lookup, THIS->name ))));
    if (!!(def_20))
    {
      RogueClassType* old_implicit_type_21 = (((RogueScope__set_implicit_type__Type( scope_0, context_type_17 ))));
      RogueClassCmd* def_result_22 = ((call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM58( 6, (RogueClassCmd*)(def_20->expression), ((RogueClassCloneArgs*)(NULL)) ))), scope_0 )));
      RogueScope__set_implicit_type__Type( scope_0, old_implicit_type_21 );
      return (RogueClassCmd*)(def_result_22);
    }
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_17, THIS, true, false ))));
}

RogueClassCmd* RogueCmdAccess__resolve_assignment__Scope_Cmd( RogueClassCmdAccess* THIS, RogueClassScope* scope_0, RogueClassCmd* new_value_1 )
{
  if (!!(THIS->args))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[927] ))));
  }
  RogueLogical explicit_context_2 = (!!(THIS->context));
  RogueString* setter_name_3 = 0;
  if (((void*)THIS->context) == ((void*)NULL))
  {
    if (THIS->name->characters[0] != (RogueCharacter)'@')
    {
      setter_name_3 = ((RogueString*)((RogueString__operatorPLUS__String( Rogue_literal_strings[928], THIS->name ))));
      RogueClassCmd* setter_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, scope_0->_this_type, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(NULL)), setter_name_3, ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), new_value_1 ))) ))), false, false ))));
      if (!!(setter_4))
      {
        if (((RogueString__operatorEQUALSEQUALS__String( scope_0->this_method->name, setter_name_3 ))))
        {
          ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( Rogue_literal_strings[929], THIS->name ))), Rogue_literal_strings[930] ))), THIS->name ))), Rogue_literal_strings[931] ))) ))));
        }
        return (RogueClassCmd*)(setter_4);
      }
    }
    RogueClassType* as_type_5 = (((RogueScope__find_type__String( scope_0, THIS->name ))));
    if ((!!(as_type_5) && ((RogueType__is_singleton( as_type_5 )))))
    {
      return (RogueClassCmd*)(((RogueCmdWriteSingleton__resolve__Scope( ((RogueCmdWriteSingleton__init__Token_Type_Cmd( ((RogueClassCmdWriteSingleton*)ROGUE_CREATE_OBJECT(CmdWriteSingleton)), THIS->t, as_type_5, new_value_1 ))), scope_0 ))));
    }
    RogueClassLocal* v_6 = (((RogueScope__find_local__String( scope_0, THIS->name ))));
    if (!!(v_6))
    {
      return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ((RogueCmdWriteLocal__init__Token_Local_Cmd( ((RogueClassCmdWriteLocal*)ROGUE_CREATE_OBJECT(CmdWriteLocal)), THIS->t, v_6, new_value_1 ))), scope_0 ))));
    }
    RogueClassDefinition* def_7 = (((RogueString_DefinitionTable__get__String( scope_0->_this_type->definition_lookup, THIS->name ))));
    if ((!(!!(def_7)) && !!(scope_0->_implicit_type)))
    {
      def_7 = ((RogueClassDefinition*)((RogueString_DefinitionTable__get__String( scope_0->_implicit_type->definition_lookup, THIS->name ))));
    }
    if (!!(def_7))
    {
      return (RogueClassCmd*)((call_ROGUEM65( 26, (RogueClassCmd*)((call_ROGUEM58( 6, (RogueClassCmd*)(def_7->expression), ((RogueClassCloneArgs*)(NULL)) ))), scope_0, new_value_1 )));
    }
    RogueClassProperty* p_8 = (((RogueType__find_global__String( scope_0->this_method->type_context, THIS->name ))));
    if (!!(p_8))
    {
      return (RogueClassCmd*)(((RogueCmdWriteGlobal__resolve__Scope( ((RogueCmdWriteGlobal__init__Token_Property_Cmd( ((RogueClassCmdWriteGlobal*)ROGUE_CREATE_OBJECT(CmdWriteGlobal)), THIS->t, p_8, new_value_1 ))), scope_0 ))));
    }
    if (((RogueMethod__is_global( scope_0->this_method ))))
    {
      p_8 = ((RogueClassProperty*)((RogueType__find_property__String( scope_0->this_method->type_context, THIS->name ))));
      if (!!(p_8))
      {
        ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[853] ))));
      }
    }
    if (((void*)scope_0->_this_type) != ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global))
    {
      p_8 = ((RogueClassProperty*)((RogueType__find_property__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global, THIS->name ))));
      if (!!(p_8))
      {
        return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadSingleton__init__Token_Type( ((RogueClassCmdReadSingleton*)ROGUE_CREATE_OBJECT(CmdReadSingleton)), THIS->t, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global ))))), p_8, new_value_1 ))), scope_0 ))));
      }
    }
    THIS->context = ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), THIS->t, scope_0->_this_type )))));
  }
  else
  {
    THIS->context = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->context), scope_0 ));
  }
  RogueClassType* context_type_9 = ((call_ROGUEM64( 22, (RogueClassCmd*)(THIS->context) )));
  RogueType__organize__Scope( context_type_9, scope_0 );
  if (!!(setter_name_3))
  {
    RogueClassCmd* setter_10 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_9, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->context, setter_name_3, ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), new_value_1 ))) ))), false, false ))));
    if (!!(setter_10))
    {
      return (RogueClassCmd*)(setter_10);
    }
  }
  RogueClassProperty* p_11 = (((RogueType__find_global__String( context_type_9, THIS->name ))));
  if (!!(p_11))
  {
    call_ROGUEM63( 19, (RogueClassCmd*)(THIS->context) );
    return (RogueClassCmd*)(((RogueCmdWriteGlobal__resolve__Scope( ((RogueCmdWriteGlobal__init__Token_Property_Cmd( ((RogueClassCmdWriteGlobal*)ROGUE_CREATE_OBJECT(CmdWriteGlobal)), THIS->t, p_11, new_value_1 ))), scope_0 ))));
  }
  p_11 = ((RogueClassProperty*)((RogueType__find_property__String( context_type_9, THIS->name ))));
  if (!!(p_11))
  {
    if ((((RogueMethod__is_global( scope_0->this_method ))) && !(explicit_context_2)))
    {
      ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[853] ))));
    }
    else
    {
      return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), THIS->t, THIS->context, p_11, new_value_1 ))), scope_0 ))));
    }
  }
  RogueClassDefinition* def_12 = (((RogueString_DefinitionTable__get__String( context_type_9->definition_lookup, THIS->name ))));
  if ((!(!!(def_12)) && !!(scope_0->_implicit_type)))
  {
    def_12 = ((RogueClassDefinition*)((RogueString_DefinitionTable__get__String( scope_0->_implicit_type->definition_lookup, THIS->name ))));
  }
  if (!!(def_12))
  {
    return (RogueClassCmd*)((call_ROGUEM65( 26, (RogueClassCmd*)((call_ROGUEM58( 6, (RogueClassCmd*)(def_12->expression), ((RogueClassCloneArgs*)(NULL)) ))), scope_0, new_value_1 )));
  }
  if (!!(setter_name_3))
  {
    RogueClassCmd* setter_13 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_9, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->context, setter_name_3, ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), new_value_1 ))) ))), true, false ))));
    if (!!(setter_13))
    {
      return (RogueClassCmd*)(setter_13);
    }
  }
  ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[832] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->name ))) ))), Rogue_literal_strings[932] ))) ))) ))));
}

RogueClassCmd* RogueCmdAccess__resolve_modify_and_assign__Scope_TokenType_Cmd( RogueClassCmdAccess* THIS, RogueClassScope* scope_0, RogueClassTokenType* op_1, RogueClassCmd* new_value_2 )
{
  RogueClassType* context_type_3 = 0;
  if (!!(THIS->context))
  {
    THIS->context = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->context), scope_0 ));
    context_type_3 = ((RogueClassType*)(call_ROGUEM64( 22, (RogueClassCmd*)(THIS->context) )));
  }
  else
  {
    if (((void*)THIS->args) == ((void*)NULL))
    {
      RogueClassLocal* v_4 = (((RogueScope__find_local__String( scope_0, THIS->name ))));
      if (!!(v_4))
      {
        if (!!(THIS->args))
        {
          ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[936] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->name ))) ))), Rogue_literal_strings[937] ))) ))) ))));
        }
        return (RogueClassCmd*)(((RogueCmdLocalOpWithAssign__resolve__Scope( ((RogueCmdLocalOpWithAssign__init__Token_Local_TokenType_Cmd( ((RogueClassCmdLocalOpWithAssign*)ROGUE_CREATE_OBJECT(CmdLocalOpWithAssign)), THIS->t, v_4, op_1, new_value_2 ))), scope_0 ))));
      }
    }
    context_type_3 = ((RogueClassType*)scope_0->_this_type);
  }
  RogueString* setter_name_5 = 0;
  if (THIS->name->characters[0] != (RogueCharacter)'@')
  {
    setter_name_5 = ((RogueString*)((RogueString__operatorPLUS__String( Rogue_literal_strings[928], THIS->name ))));
    RogueClassCmd* setter_6 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_3, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(NULL)), setter_name_5, ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), new_value_2 ))) ))), false, false ))));
    if (!!(setter_6))
    {
      return (RogueClassCmd*)((call_ROGUEM56( 25, (RogueClassCmd*)(((RogueCmdAccess__expand_modify_and_assign__Scope_TokenType_Cmd( THIS, scope_0, op_1, new_value_2 )))), scope_0 )));
    }
  }
  RogueClassProperty* p_7 = (((RogueType__find_global__String( context_type_3, THIS->name ))));
  if (!!(p_7))
  {
    if (!!(THIS->context))
    {
      call_ROGUEM63( 19, (RogueClassCmd*)(THIS->context) );
    }
    return (RogueClassCmd*)(((RogueCmdOpAssignGlobal__resolve__Scope( ((RogueCmdOpAssignGlobal__init__Token_Property_TokenType_Cmd( ((RogueClassCmdOpAssignGlobal*)ROGUE_CREATE_OBJECT(CmdOpAssignGlobal)), THIS->t, p_7, op_1, new_value_2 ))), scope_0 ))));
  }
  p_7 = ((RogueClassProperty*)((RogueType__find_property__String( context_type_3, THIS->name ))));
  if (!!(p_7))
  {
    if (!(!!(THIS->context)))
    {
      THIS->context = ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), THIS->t, context_type_3 )))));
    }
    if (((RogueMethod__is_global( scope_0->this_method ))))
    {
      ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[853] ))));
    }
    return (RogueClassCmd*)(((RogueCmdOpAssignProperty__resolve__Scope( ((RogueCmdOpAssignProperty__init__Token_Cmd_Property_TokenType_Cmd( ((RogueClassCmdOpAssignProperty*)ROGUE_CREATE_OBJECT(CmdOpAssignProperty)), THIS->t, THIS->context, p_7, op_1, new_value_2 ))), scope_0 ))));
  }
  RogueClassDefinition* def_8 = (((RogueString_DefinitionTable__get__String( context_type_3->definition_lookup, THIS->name ))));
  if ((!(!!(def_8)) && !!(scope_0->_implicit_type)))
  {
    def_8 = ((RogueClassDefinition*)((RogueString_DefinitionTable__get__String( scope_0->_implicit_type->definition_lookup, THIS->name ))));
  }
  if (!!(def_8))
  {
    return (RogueClassCmd*)((call_ROGUEM67( 28, (RogueClassCmd*)((call_ROGUEM58( 6, (RogueClassCmd*)(def_8->expression), ((RogueClassCloneArgs*)(NULL)) ))), scope_0, op_1, new_value_2 )));
  }
  if (!!(setter_name_5))
  {
    RogueClassCmd* setter_9 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_3, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(NULL)), setter_name_5, ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), new_value_2 ))) ))), true, false ))));
    if (!!(setter_9))
    {
      return (RogueClassCmd*)((call_ROGUEM56( 25, (RogueClassCmd*)(((RogueCmdAccess__expand_modify_and_assign__Scope_TokenType_Cmd( THIS, scope_0, op_1, new_value_2 )))), scope_0 )));
    }
  }
  ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[832] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->name ))) ))), Rogue_literal_strings[932] ))) ))) ))));
}

RogueClassType* Rogue_CmdAccess__type( RogueClassCmdAccess* THIS )
{
  RogueClassRogueError* err_0 = (((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[333] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ((RogueCmdAccess__type_name( THIS ))) ))) ))), Rogue_literal_strings[941] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->name ))) ))), Rogue_literal_strings[942] ))) ))) ))));
  ROGUE_THROW(err_0);
}

void RogueCmdAccess__write_cpp__CPPWriter_Logical( RogueClassCmdAccess* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[333] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ((RogueCmdAccess__type_name( THIS ))) ))) ))), Rogue_literal_strings[945] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->name ))) ))), Rogue_literal_strings[390] ))) ))) ))));
}

void RogueCmdAccess__trace_used_code( RogueClassCmdAccess* THIS )
{
  ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[333] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ((RogueCmdAccess__type_name( THIS ))) ))) ))), Rogue_literal_strings[1008] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->name ))) ))), Rogue_literal_strings[1009] ))) ))) ))));
}

void RogueCmdAccess__update_this_type__Scope( RogueClassCmdAccess* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->context))
  {
    call_ROGUEM60( 32, (RogueClassCmd*)(THIS->context), scope_0 );
  }
  if (!!(THIS->args))
  {
    RogueCmdArgs__update_this_type__Scope( THIS->args, scope_0 );
  }
}

RogueClassCmdAccess* RogueCmdAccess__init_object( RogueClassCmdAccess* THIS )
{
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_String( RogueClassCmdAccess* THIS, RogueClassToken* _auto_542_0, RogueString* _auto_543_1 )
{
  THIS->name = _auto_543_1;
  THIS->t = _auto_542_0;
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_String_CmdArgs( RogueClassCmdAccess* THIS, RogueClassToken* _auto_544_0, RogueString* _auto_545_1, RogueClassCmdArgs* _auto_546_2 )
{
  THIS->args = _auto_546_2;
  THIS->name = _auto_545_1;
  THIS->t = _auto_544_0;
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_String_CmdArgs_CmdFlagArgList( RogueClassCmdAccess* THIS, RogueClassToken* _auto_547_0, RogueString* _auto_548_1, RogueClassCmdArgs* _auto_549_2, RogueCmdFlagArgList* _auto_550_3 )
{
  THIS->flag_args = _auto_550_3;
  THIS->args = _auto_549_2;
  THIS->name = _auto_548_1;
  THIS->t = _auto_547_0;
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_Cmd_String( RogueClassCmdAccess* THIS, RogueClassToken* _auto_551_0, RogueClassCmd* _auto_552_1, RogueString* _auto_553_2 )
{
  THIS->name = _auto_553_2;
  THIS->context = _auto_552_1;
  THIS->t = _auto_551_0;
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_Cmd_String_CmdArgs( RogueClassCmdAccess* THIS, RogueClassToken* _auto_554_0, RogueClassCmd* _auto_555_1, RogueString* _auto_556_2, RogueClassCmdArgs* _auto_557_3 )
{
  THIS->args = _auto_557_3;
  THIS->name = _auto_556_2;
  THIS->context = _auto_555_1;
  THIS->t = _auto_554_0;
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_Cmd_String_CmdArgs_CmdFlagArgList( RogueClassCmdAccess* THIS, RogueClassToken* _auto_558_0, RogueClassCmd* _auto_559_1, RogueString* _auto_560_2, RogueClassCmdArgs* _auto_561_3, RogueCmdFlagArgList* _auto_562_4 )
{
  THIS->flag_args = _auto_562_4;
  THIS->args = _auto_561_3;
  THIS->name = _auto_560_2;
  THIS->context = _auto_559_1;
  THIS->t = _auto_558_0;
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_Cmd_String_Cmd( RogueClassCmdAccess* THIS, RogueClassToken* _auto_563_0, RogueClassCmd* _auto_564_1, RogueString* _auto_565_2, RogueClassCmd* arg_3 )
{
  THIS->name = _auto_565_2;
  THIS->context = _auto_564_1;
  THIS->t = _auto_563_0;
  THIS->args = ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) )));
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->args), arg_3 );
  return (RogueClassCmdAccess*)(THIS);
}

void RogueCmdAccess__check_for_recursive_getter__Scope( RogueClassCmdAccess* THIS, RogueClassScope* scope_0 )
{
  RogueClassType* this_type_1 = (scope_0->_this_type);
  if (((RogueString__operatorLTGT__String( THIS->name, scope_0->this_method->name ))) != 0)
  {
    return;
  }
  if ((!!(THIS->args) && THIS->args->count > 0))
  {
    return;
  }
  if (!((!!(((RogueType__find_property__String( this_type_1, THIS->name )))) || !!(((RogueType__find_global__String( this_type_1, THIS->name )))))))
  {
    return;
  }
  ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( Rogue_literal_strings[850], THIS->name ))), Rogue_literal_strings[851] ))), THIS->name ))), Rogue_literal_strings[852] ))) ))));
}

RogueClassCmd* RogueCmdAccess__expand_modify_and_assign__Scope_TokenType_Cmd( RogueClassCmdAccess* THIS, RogueClassScope* scope_0, RogueClassTokenType* op_1, RogueClassCmd* new_value_2 )
{
  RogueClassCmd* cmd_3 = 0;
  {
    if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)op_1), ((RogueObject*)(RogueTokenType_symbol_ampersand_equals)) ))))
    {
      cmd_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdBitwiseAnd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseAnd*)ROGUE_CREATE_OBJECT(CmdBitwiseAnd))), THIS->t, ((RogueClassCmd*)(THIS)), new_value_2 ))))))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)op_1), ((RogueObject*)(RogueTokenType_symbol_caret_equals)) ))))
    {
      cmd_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdPower*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdPower*)ROGUE_CREATE_OBJECT(CmdPower))), THIS->t, ((RogueClassCmd*)(THIS)), new_value_2 ))))))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)op_1), ((RogueObject*)(RogueTokenType_symbol_dot_equals)) ))))
    {
      cmd_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(THIS)), THIS->name, new_value_2 ))))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)op_1), ((RogueObject*)(RogueTokenType_symbol_minus_equals)) ))))
    {
      cmd_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdSubtract*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdSubtract*)ROGUE_CREATE_OBJECT(CmdSubtract))), THIS->t, ((RogueClassCmd*)(THIS)), new_value_2 ))))))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)op_1), ((RogueObject*)(RogueTokenType_symbol_percent_equals)) ))))
    {
      cmd_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdMod*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMod*)ROGUE_CREATE_OBJECT(CmdMod))), THIS->t, ((RogueClassCmd*)(THIS)), new_value_2 ))))))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)op_1), ((RogueObject*)(RogueTokenType_symbol_plus_equals)) ))))
    {
      cmd_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdAdd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdAdd*)ROGUE_CREATE_OBJECT(CmdAdd))), THIS->t, ((RogueClassCmd*)(THIS)), new_value_2 ))))))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)op_1), ((RogueObject*)(RogueTokenType_symbol_slash_equals)) ))))
    {
      cmd_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdDivide*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdDivide*)ROGUE_CREATE_OBJECT(CmdDivide))), THIS->t, ((RogueClassCmd*)(THIS)), new_value_2 ))))))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)op_1), ((RogueObject*)(RogueTokenType_symbol_tilde_equals)) ))))
    {
      cmd_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdBitwiseXor*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseXor*)ROGUE_CREATE_OBJECT(CmdBitwiseXor))), THIS->t, ((RogueClassCmd*)(THIS)), new_value_2 ))))))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)op_1), ((RogueObject*)(RogueTokenType_symbol_times_equals)) ))))
    {
      cmd_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdMultiply*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMultiply*)ROGUE_CREATE_OBJECT(CmdMultiply))), THIS->t, ((RogueClassCmd*)(THIS)), new_value_2 ))))))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)op_1), ((RogueObject*)(RogueTokenType_symbol_vertical_bar_equals)) ))))
    {
      cmd_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdBitwiseOr*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseOr*)ROGUE_CREATE_OBJECT(CmdBitwiseOr))), THIS->t, ((RogueClassCmd*)(THIS)), new_value_2 ))))))));
    }
    else
    {
      RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[938] ))) ))) );
      ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[939] ))));
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)ROGUE_CREATE_OBJECT(CmdAssign)), THIS->t, ((RogueCmdAccess__clone__CloneArgs( THIS, ((RogueClassCloneArgs*)(NULL)) ))), cmd_3 ))))));
}

RogueString* RogueCmdArgs__type_name( RogueClassCmdArgs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1017]);
}

RogueClassCmdArgs* RogueCmdArgs__init_object( RogueClassCmdArgs* THIS )
{
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__init( RogueClassCmdArgs* THIS )
{
  RogueCmdList__init( ((RogueCmdList*)THIS) );
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__init__Int32( RogueClassCmdArgs* THIS, RogueInt32 initial_capacity_0 )
{
  RogueCmdList__init__Int32( ((RogueCmdList*)THIS), initial_capacity_0 );
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__init__Cmd( RogueClassCmdArgs* THIS, RogueClassCmd* arg_0 )
{
  RogueCmdArgs__init( THIS );
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS), arg_0 );
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__init__Cmd_Cmd( RogueClassCmdArgs* THIS, RogueClassCmd* arg1_0, RogueClassCmd* arg2_1 )
{
  RogueCmdArgs__init( THIS );
  RogueCmdList__add__Cmd( ((RogueCmdList__add__Cmd( ((RogueCmdList*)THIS), arg1_0 ))), arg2_1 );
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__init__Cmd_Cmd_Cmd( RogueClassCmdArgs* THIS, RogueClassCmd* arg1_0, RogueClassCmd* arg2_1, RogueClassCmd* arg3_2 )
{
  RogueCmdArgs__init( THIS );
  RogueCmdList__add__Cmd( ((RogueCmdList__add__Cmd( ((RogueCmdList__add__Cmd( ((RogueCmdList*)THIS), arg1_0 ))), arg2_1 ))), arg3_2 );
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__clone__CloneArgs( RogueClassCmdArgs* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdArgs* result_1 = (((RogueCmdArgs__init__Int32( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->count ))));
  {
    RogueClassCmdArgs* _auto_1685_2 = (THIS);
    RogueInt32 _auto_1686_3 = (0);
    for (;_auto_1686_3 < _auto_1685_2->count;++_auto_1686_3)
    {
      RogueClassCmd* cmd_4 = (((RogueClassCmd*)(_auto_1685_2->data->objects[_auto_1686_3])));
      RogueCmdList__add__Cmd( ((RogueCmdList*)result_1), (call_ROGUEM58( 6, (RogueClassCmd*)(cmd_4), clone_args_0 )) );
    }
  }
  return (RogueClassCmdArgs*)(result_1);
}

void RogueCmdArgs__resolve__Scope( RogueClassCmdArgs* THIS, RogueClassScope* scope_0 )
{
  {
    RogueClassCmdArgs* _auto_1687_2 = (THIS);
    RogueInt32 i_3 = (0);
    for (;i_3 < _auto_1687_2->count;++i_3)
    {
      RogueClassCmd* arg_1 = ((call_ROGUEM56( 25, (RogueClassCmd*)(((RogueClassCmd*)(THIS->data->objects[i_3]))), scope_0 )));
      THIS->data->objects[i_3] = arg_1;
      RogueType__organize__Scope( (call_ROGUEM64( 22, (RogueClassCmd*)(arg_1) )), scope_0 );
    }
  }
}

void RogueCmdArgs__update_this_type__Scope( RogueClassCmdArgs* THIS, RogueClassScope* scope_0 )
{
  {
    RogueClassCmdArgs* _auto_1692_1 = (THIS);
    RogueInt32 _auto_1693_2 = (0);
    for (;_auto_1693_2 < _auto_1692_1->count;++_auto_1693_2)
    {
      RogueClassCmd* arg_3 = (((RogueClassCmd*)(_auto_1692_1->data->objects[_auto_1693_2])));
      call_ROGUEM60( 32, (RogueClassCmd*)(arg_3), scope_0 );
    }
  }
}

RogueString* RogueCmdFlagArgList__to_String( RogueCmdFlagArgList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueCmdFlagArgList* _auto_1694_2 = (THIS);
    RogueInt32 _auto_1695_3 = (0);
    for (;_auto_1695_3 < _auto_1694_2->count;++_auto_1695_3)
    {
      RogueClassCmdFlagArg* value_4 = (((RogueClassCmdFlagArg*)(_auto_1694_2->data->objects[_auto_1695_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdFlagArgList__type_name( RogueCmdFlagArgList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[694]);
}

RogueCmdFlagArgList* RogueCmdFlagArgList__init_object( RogueCmdFlagArgList* THIS )
{
  return (RogueCmdFlagArgList*)(THIS);
}

RogueCmdFlagArgList* RogueCmdFlagArgList__init( RogueCmdFlagArgList* THIS )
{
  RogueCmdFlagArgList__init__Int32( THIS, 10 );
  return (RogueCmdFlagArgList*)(THIS);
}

RogueCmdFlagArgList* RogueCmdFlagArgList__init__Int32( RogueCmdFlagArgList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassCmdFlagArg*), true );
  return (RogueCmdFlagArgList*)(THIS);
}

RogueCmdFlagArgList* RogueCmdFlagArgList__add__CmdFlagArg( RogueCmdFlagArgList* THIS, RogueClassCmdFlagArg* value_0 )
{
  ((RogueCmdFlagArgList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdFlagArgList*)(THIS);
}

RogueInt32 RogueCmdFlagArgList__capacity( RogueCmdFlagArgList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueOptionalInt32 RogueCmdFlagArgList__locate__CmdFlagArg( RogueCmdFlagArgList* THIS, RogueClassCmdFlagArg* value_0 )
{
  {
    RogueCmdFlagArgList* _auto_1716_1 = (THIS);
    RogueInt32 i_2 = (0);
    for (;i_2 < _auto_1716_1->count;++i_2)
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)value_0), ((RogueObject*)(((RogueClassCmdFlagArg*)(THIS->data->objects[i_2])))) ))))
      {
        return (RogueOptionalInt32)(RogueOptionalInt32( i_2 ));
      }
    }
  }
  return (RogueOptionalInt32)(RogueOptionalInt32());
}

RogueCmdFlagArgList* RogueCmdFlagArgList__reserve__Int32( RogueCmdFlagArgList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassCmdFlagArg*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueCmdFlagArgList__capacity( THIS ))) + ((RogueCmdFlagArgList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassCmdFlagArg*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdFlagArgList*)(THIS);
}

RogueClassCmdFlagArg* RogueCmdFlagArgList__remove__CmdFlagArg( RogueCmdFlagArgList* THIS, RogueClassCmdFlagArg* value_0 )
{
  RogueOptionalInt32 index_1 = (((RogueCmdFlagArgList__locate__CmdFlagArg( THIS, value_0 ))));
  if (index_1.exists)
  {
    return (RogueClassCmdFlagArg*)(((RogueCmdFlagArgList__remove_at__Int32( THIS, index_1.value ))));
  }
  else
  {
    RogueClassCmdFlagArg* zero_value_2 = 0;
    return (RogueClassCmdFlagArg*)(zero_value_2);
  }
}

RogueClassCmdFlagArg* RogueCmdFlagArgList__remove_at__Int32( RogueCmdFlagArgList* THIS, RogueInt32 index_0 )
{
  RogueClassCmdFlagArg* result_1 = (((RogueClassCmdFlagArg*)(THIS->data->objects[index_0])));
  RogueArray_set(THIS->data,index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  RogueClassCmdFlagArg* zero_value_2 = 0;
  --THIS->count;
  THIS->data->objects[THIS->count] = zero_value_2;
  return (RogueClassCmdFlagArg*)(result_1);
}

RogueString* RogueCmdFlagArg__type_name( RogueClassCmdFlagArg* THIS )
{
  return (RogueString*)(Rogue_literal_strings[783]);
}

RogueClassCmdFlagArg* RogueCmdFlagArg__clone__CloneArgs( RogueClassCmdFlagArg* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdFlagArg*)(((RogueCmdFlagArg__init__Token_String_Cmd_Logical( ((RogueClassCmdFlagArg*)ROGUE_CREATE_OBJECT(CmdFlagArg)), THIS->t, THIS->name, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->value, ((RogueClassCloneArgs*)(NULL)) ))), THIS->is_negative ))));
}

RogueClassCmdFlagArg* RogueCmdFlagArg__init_object( RogueClassCmdFlagArg* THIS )
{
  return (RogueClassCmdFlagArg*)(THIS);
}

RogueClassCmdFlagArg* RogueCmdFlagArg__init__Token_String_Cmd_Logical( RogueClassCmdFlagArg* THIS, RogueClassToken* _auto_566_0, RogueString* _auto_567_1, RogueClassCmd* _auto_568_2, RogueLogical _auto_569_3 )
{
  THIS->is_negative = _auto_569_3;
  THIS->value = _auto_568_2;
  THIS->name = _auto_567_1;
  THIS->t = _auto_566_0;
  return (RogueClassCmdFlagArg*)(THIS);
}

RogueString* RogueCmdAssign__type_name( RogueClassCmdAssign* THIS )
{
  return (RogueString*)(Rogue_literal_strings[784]);
}

RogueClassCmd* RogueCmdAssign__clone__CloneArgs( RogueClassCmdAssign* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)ROGUE_CREATE_OBJECT(CmdAssign)), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->target), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdAssign__resolve__Scope( RogueClassCmdAssign* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)((call_ROGUEM65( 26, (RogueClassCmd*)(THIS->target), scope_0, THIS->new_value )));
}

void RogueCmdAssign__update_this_type__Scope( RogueClassCmdAssign* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->target), scope_0 );
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->new_value), scope_0 );
}

RogueClassCmdAssign* RogueCmdAssign__init_object( RogueClassCmdAssign* THIS )
{
  return (RogueClassCmdAssign*)(THIS);
}

RogueClassCmdAssign* RogueCmdAssign__init__Token_Cmd_Cmd( RogueClassCmdAssign* THIS, RogueClassToken* _auto_574_0, RogueClassCmd* _auto_575_1, RogueClassCmd* _auto_576_2 )
{
  THIS->new_value = _auto_576_2;
  THIS->target = _auto_575_1;
  THIS->t = _auto_574_0;
  return (RogueClassCmdAssign*)(THIS);
}

RogueString* RogueCmdControlStructureList__to_String( RogueCmdControlStructureList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueCmdControlStructureList* _auto_1726_2 = (THIS);
    RogueInt32 _auto_1727_3 = (0);
    for (;_auto_1727_3 < _auto_1726_2->count;++_auto_1727_3)
    {
      RogueClassCmdControlStructure* value_4 = (((RogueClassCmdControlStructure*)(_auto_1726_2->data->objects[_auto_1727_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdControlStructureList__type_name( RogueCmdControlStructureList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[695]);
}

RogueCmdControlStructureList* RogueCmdControlStructureList__init_object( RogueCmdControlStructureList* THIS )
{
  return (RogueCmdControlStructureList*)(THIS);
}

RogueCmdControlStructureList* RogueCmdControlStructureList__init( RogueCmdControlStructureList* THIS )
{
  RogueCmdControlStructureList__init__Int32( THIS, 10 );
  return (RogueCmdControlStructureList*)(THIS);
}

RogueCmdControlStructureList* RogueCmdControlStructureList__init__Int32( RogueCmdControlStructureList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassCmdControlStructure*), true );
  return (RogueCmdControlStructureList*)(THIS);
}

RogueCmdControlStructureList* RogueCmdControlStructureList__add__CmdControlStructure( RogueCmdControlStructureList* THIS, RogueClassCmdControlStructure* value_0 )
{
  ((RogueCmdControlStructureList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdControlStructureList*)(THIS);
}

RogueInt32 RogueCmdControlStructureList__capacity( RogueCmdControlStructureList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueCmdControlStructureList* RogueCmdControlStructureList__reserve__Int32( RogueCmdControlStructureList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassCmdControlStructure*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueCmdControlStructureList__capacity( THIS ))) + ((RogueCmdControlStructureList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassCmdControlStructure*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdControlStructureList*)(THIS);
}

RogueClassCmdControlStructure* RogueCmdControlStructureList__remove_at__Int32( RogueCmdControlStructureList* THIS, RogueInt32 index_0 )
{
  RogueClassCmdControlStructure* result_1 = (((RogueClassCmdControlStructure*)(THIS->data->objects[index_0])));
  RogueArray_set(THIS->data,index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  RogueClassCmdControlStructure* zero_value_2 = 0;
  --THIS->count;
  THIS->data->objects[THIS->count] = zero_value_2;
  return (RogueClassCmdControlStructure*)(result_1);
}

RogueClassCmdControlStructure* RogueCmdControlStructureList__remove_last( RogueCmdControlStructureList* THIS )
{
  return (RogueClassCmdControlStructure*)(((RogueCmdControlStructureList__remove_at__Int32( THIS, (THIS->count - 1) ))));
}

RogueString* RogueCmdControlStructure__type_name( RogueClassCmdControlStructure* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1014]);
}

RogueLogical RogueCmdControlStructure__requires_semicolon( RogueClassCmdControlStructure* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmdControlStructure* RogueCmdControlStructure__init_object( RogueClassCmdControlStructure* THIS )
{
  return (RogueClassCmdControlStructure*)(THIS);
}

RogueClassCmd* RogueCmdControlStructure__set_control_logic__CmdControlStructure( RogueClassCmdControlStructure* THIS, RogueClassCmdControlStructure* control_structure_0 )
{
  THIS->_control_type = control_structure_0->_control_type;
  THIS->contains_yield = control_structure_0->contains_yield;
  THIS->escape_label = control_structure_0->escape_label;
  THIS->upkeep_label = control_structure_0->upkeep_label;
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdLiteralThis__type_name( RogueClassCmdLiteralThis* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1037]);
}

RogueClassCmd* RogueCmdLiteralThis__clone__CloneArgs( RogueClassCmdLiteralThis* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassMacroArgs* macro_args_1 = (((RogueClassMacroArgs*)(RogueObject_as(clone_args_0,RogueTypeMacroArgs))));
  if (!!(macro_args_1))
  {
    return (RogueClassCmd*)(((RogueMacroArgs__inline_this( macro_args_1 ))));
  }
  RogueClassTaskArgs* task_args_2 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if (!!(task_args_2))
  {
    return (RogueClassCmd*)(((RogueTaskArgs__cmd_read_context__Token( task_args_2, THIS->t ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLiteralThis*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)((RogueClassCmdLiteralThis*)ROGUE_CREATE_OBJECT(CmdLiteralThis))), THIS->t, THIS->_this_type ))))))));
  }
}

void RogueCmdLiteralThis__require_type_context( RogueClassCmdLiteralThis* THIS )
{
  ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[845] ))));
}

RogueClassCmd* RogueCmdLiteralThis__resolve__Scope( RogueClassCmdLiteralThis* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( THIS->_this_type, scope_0 );
  if (((RogueMethod__is_global( scope_0->this_method ))))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[1038] ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmdLiteralThis* RogueCmdLiteralThis__init_object( RogueClassCmdLiteralThis* THIS )
{
  return (RogueClassCmdLiteralThis*)(THIS);
}

RogueString* RogueCmdThisContext__type_name( RogueClassCmdThisContext* THIS )
{
  return (RogueString*)(Rogue_literal_strings[785]);
}

RogueClassCmd* RogueCmdThisContext__clone__CloneArgs( RogueClassCmdThisContext* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassMacroArgs* macro_args_1 = (((RogueClassMacroArgs*)(RogueObject_as(clone_args_0,RogueTypeMacroArgs))));
  if (!!(macro_args_1))
  {
    return (RogueClassCmd*)(((RogueMacroArgs__inline_this( macro_args_1 ))));
  }
  RogueClassTaskArgs* task_args_2 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if (!!(task_args_2))
  {
    return (RogueClassCmd*)(((RogueTaskArgs__cmd_read_context__Token( task_args_2, THIS->t ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), THIS->t, THIS->_this_type ))))));
  }
}

RogueClassType* RogueCmdThisContext__implicit_type__Scope( RogueClassCmdThisContext* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassType*)(THIS->_this_type);
}

void RogueCmdThisContext__require_type_context( RogueClassCmdThisContext* THIS )
{
}

RogueClassCmd* RogueCmdThisContext__resolve__Scope( RogueClassCmdThisContext* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( THIS->_this_type, scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdThisContext__type( RogueClassCmdThisContext* THIS )
{
  return (RogueClassType*)(THIS->_this_type);
}

void RogueCmdThisContext__write_cpp__CPPWriter_Logical( RogueClassCmdThisContext* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[466] );
}

void RogueCmdThisContext__trace_used_code( RogueClassCmdThisContext* THIS )
{
}

void RogueCmdThisContext__update_this_type__Scope( RogueClassCmdThisContext* THIS, RogueClassScope* scope_0 )
{
  THIS->_this_type = scope_0->_this_type;
}

RogueClassCmdThisContext* RogueCmdThisContext__init_object( RogueClassCmdThisContext* THIS )
{
  return (RogueClassCmdThisContext*)(THIS);
}

RogueClassCmdThisContext* RogueCmdThisContext__init__Token_Type( RogueClassCmdThisContext* THIS, RogueClassToken* _auto_586_0, RogueClassType* _auto_587_1 )
{
  THIS->_this_type = _auto_587_1;
  THIS->t = _auto_586_0;
  return (RogueClassCmdThisContext*)(THIS);
}

RogueString* RogueCmdLabelArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[735]);
}

RogueString* RogueCmdGenericLoop__type_name( RogueClassCmdGenericLoop* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1029]);
}

RogueClassCmd* RogueCmdGenericLoop__clone__CloneArgs( RogueClassCmdGenericLoop* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if ((!!(task_args_1) && THIS->contains_yield))
  {
    if (!!(THIS->control_statements))
    {
      {
        RogueClassCmdStatementList* _auto_1758_5 = (THIS->control_statements);
        RogueInt32 _auto_1759_6 = (0);
        for (;_auto_1759_6 < _auto_1758_5->count;++_auto_1759_6)
        {
          RogueClassCmd* statement_7 = (((RogueClassCmd*)(_auto_1758_5->data->objects[_auto_1759_6])));
          RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM58( 6, (RogueClassCmd*)(statement_7), ((RogueClassCloneArgs*)(task_args_1)) )) );
        }
      }
    }
    RogueClassCmdTaskControlSection* condition_section_2 = (((RogueTaskArgs__jump_to_new_section__Token( task_args_1, THIS->t ))));
    RogueClassCmdTaskControlSection* after_section_3 = (((RogueTaskArgs__create_section( task_args_1 ))));
    THIS->task_escape_section = after_section_3;
    THIS->task_upkeep_section = ((RogueTaskArgs__create_section( task_args_1 )));
    if (!!(THIS->condition))
    {
      RogueTaskArgs__add_conditional_jump__Cmd_CmdTaskControlSection( task_args_1, ((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->condition, clone_args_0 ))) ))))))), after_section_3 );
    }
    {
      RogueClassCmdStatementList* _auto_1760_8 = (THIS->statements);
      RogueInt32 _auto_1761_9 = (0);
      for (;_auto_1761_9 < _auto_1760_8->count;++_auto_1761_9)
      {
        RogueClassCmd* statement_10 = (((RogueClassCmd*)(_auto_1760_8->data->objects[_auto_1761_9])));
        RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM58( 6, (RogueClassCmd*)(statement_10), ((RogueClassCloneArgs*)(task_args_1)) )) );
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, THIS->t, THIS->task_upkeep_section );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, THIS->task_upkeep_section );
    if (!!(THIS->upkeep))
    {
      {
        RogueClassCmdStatementList* _auto_1762_11 = (THIS->upkeep);
        RogueInt32 _auto_1763_12 = (0);
        for (;_auto_1763_12 < _auto_1762_11->count;++_auto_1763_12)
        {
          RogueClassCmd* statement_13 = (((RogueClassCmd*)(_auto_1762_11->data->objects[_auto_1763_12])));
          RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM58( 6, (RogueClassCmd*)(statement_13), ((RogueClassCloneArgs*)(task_args_1)) )) );
        }
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, THIS->t, condition_section_2 );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, after_section_3 );
    if (after_section_3->ip < task_args_1->cmd_task_control->sections->count)
    {
      RogueTaskArgs__jump_to_new_section__Token( task_args_1, THIS->t );
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  else
  {
    RogueClassCmdGenericLoop* result_4 = (((RogueCmdGenericLoop__init__Token_Int32_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)ROGUE_CREATE_OBJECT(CmdGenericLoop)), THIS->t, THIS->_control_type, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->condition, clone_args_0 ))), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
    call_ROGUEM207( 35, (RogueClassCmdControlStructure*)(result_4), ((RogueClassCmdControlStructure*)(THIS)) );
    THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_4));
    result_4->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 )));
    result_4->upkeep = ((RogueCmd__clone__CmdStatementList_CloneArgs( ((RogueClassCmd*)THIS), THIS->upkeep, clone_args_0 )));
    result_4->control_statements = ((RogueCmd__clone__CmdStatementList_CloneArgs( ((RogueClassCmd*)THIS), THIS->control_statements, clone_args_0 )));
    return (RogueClassCmd*)(((RogueClassCmd*)(result_4)));
  }
}

RogueClassCmd* RogueCmdGenericLoop__resolve__Scope( RogueClassCmdGenericLoop* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  if (!!(THIS->control_statements))
  {
    {
      RogueClassCmdStatementList* _auto_1768_1 = (THIS->control_statements);
      RogueInt32 i_2 = (0);
      for (;i_2 < _auto_1768_1->count;++i_2)
      {
        THIS->control_statements->data->objects[i_2] = (call_ROGUEM56( 25, (RogueClassCmd*)(((RogueClassCmd*)(THIS->control_statements->data->objects[i_2]))), scope_0 ));
      }
    }
  }
  if (!!(THIS->condition))
  {
    THIS->condition = ((RogueCmd__require_logical__Scope( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->condition), scope_0 )), scope_0 )));
  }
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  if (!!(THIS->upkeep))
  {
    RogueCmdStatementList__resolve__Scope( THIS->upkeep, scope_0 );
  }
  if (!!(THIS->control_statements))
  {
    {
      RogueClassCmdStatementList* _auto_1769_3 = (THIS->control_statements);
      RogueInt32 _auto_1770_4 = (0);
      for (;_auto_1770_4 < _auto_1769_3->count;++_auto_1770_4)
      {
        RogueClassCmd* statement_5 = (((RogueClassCmd*)(_auto_1769_3->data->objects[_auto_1770_4])));
        call_ROGUEM60( 12, (RogueClassCmd*)(statement_5), scope_0 );
      }
    }
  }
  RogueCmdControlStructureList__remove_last( scope_0->control_stack );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdGenericLoop__write_cpp__CPPWriter_Logical( RogueClassCmdGenericLoop* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!!(THIS->control_statements))
  {
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[196] );
    writer_0->indent += 2;
    if (!!(THIS->control_statements))
    {
      {
        RogueClassCmdStatementList* _auto_1771_3 = (THIS->control_statements);
        RogueInt32 _auto_1772_4 = (0);
        for (;_auto_1772_4 < _auto_1771_3->count;++_auto_1772_4)
        {
          RogueClassCmd* statement_5 = (((RogueClassCmd*)(_auto_1771_3->data->objects[_auto_1772_4])));
          call_ROGUEM68( 30, (RogueClassCmd*)(statement_5), writer_0, false );
          RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[205] );
        }
      }
    }
  }
  if ((!!(THIS->upkeep) || !(!!(THIS->condition))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[946] );
    if (!!(THIS->condition))
    {
      call_ROGUEM68( 30, (RogueClassCmd*)(THIS->condition), writer_0, false );
    }
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[205] );
    RogueLogical first_2 = (true);
    if (!!(THIS->upkeep))
    {
      {
        RogueClassCmdStatementList* _auto_1773_6 = (THIS->upkeep);
        RogueInt32 _auto_1774_7 = (0);
        for (;_auto_1774_7 < _auto_1773_6->count;++_auto_1774_7)
        {
          RogueClassCmd* statement_8 = (((RogueClassCmd*)(_auto_1773_6->data->objects[_auto_1774_7])));
          if (first_2)
          {
            first_2 = ((RogueLogical)false);
          }
          else
          {
            RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[179] );
          }
          call_ROGUEM68( 30, (RogueClassCmd*)(statement_8), writer_0, false );
        }
      }
    }
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[67] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[947] );
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->condition), writer_0, false );
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[67] );
  }
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[196] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, false );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[114] );
  if (!!(THIS->control_statements))
  {
    writer_0->indent -= 2;
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[114] );
  }
  if (!!(THIS->escape_label))
  {
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, THIS->escape_label ))), Rogue_literal_strings[948] );
  }
}

void RogueCmdGenericLoop__trace_used_code( RogueClassCmdGenericLoop* THIS )
{
  RogueCmdStatementList__trace_used_code( THIS->statements );
  if (!!(THIS->control_statements))
  {
    RogueCmdStatementList__trace_used_code( THIS->control_statements );
  }
  if (!!(THIS->condition))
  {
    call_ROGUEM63( 31, (RogueClassCmd*)(THIS->condition) );
  }
  if (!!(THIS->upkeep))
  {
    RogueCmdStatementList__trace_used_code( THIS->upkeep );
  }
}

void RogueCmdGenericLoop__update_this_type__Scope( RogueClassCmdGenericLoop* THIS, RogueClassScope* scope_0 )
{
  RogueCmdStatementList__update_this_type__Scope( THIS->statements, scope_0 );
  if (!!(THIS->control_statements))
  {
    RogueCmdStatementList__update_this_type__Scope( THIS->control_statements, scope_0 );
  }
  if (!!(THIS->condition))
  {
    call_ROGUEM60( 32, (RogueClassCmd*)(THIS->condition), scope_0 );
  }
  if (!!(THIS->upkeep))
  {
    RogueCmdStatementList__update_this_type__Scope( THIS->upkeep, scope_0 );
  }
}

RogueClassCmdGenericLoop* RogueCmdGenericLoop__init_object( RogueClassCmdGenericLoop* THIS )
{
  return (RogueClassCmdGenericLoop*)(THIS);
}

RogueClassCmdGenericLoop* RogueCmdGenericLoop__init__Token_Int32_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( RogueClassCmdGenericLoop* THIS, RogueClassToken* _auto_590_0, RogueInt32 _auto_591_1, RogueClassCmd* _auto_592_2, RogueClassCmdStatementList* _auto_593_3, RogueClassCmdStatementList* _auto_594_4, RogueClassCmdStatementList* _auto_595_5 )
{
  THIS->control_statements = _auto_595_5;
  THIS->upkeep = _auto_594_4;
  THIS->statements = _auto_593_3;
  THIS->condition = _auto_592_2;
  THIS->_control_type = _auto_591_1;
  THIS->t = _auto_590_0;
  return (RogueClassCmdGenericLoop*)(THIS);
}

void RogueCmdGenericLoop__add_control_var__Local( RogueClassCmdGenericLoop* THIS, RogueClassLocal* v_0 )
{
  if (!(!!(THIS->control_statements)))
  {
    THIS->control_statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->control_statements), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local_Logical( ((RogueClassCmdLocalDeclaration*)ROGUE_CREATE_OBJECT(CmdLocalDeclaration)), v_0->t, v_0, false ))))) );
}

void RogueCmdGenericLoop__add_upkeep__Cmd( RogueClassCmdGenericLoop* THIS, RogueClassCmd* cmd_0 )
{
  if (!(!!(THIS->upkeep)))
  {
    THIS->upkeep = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->upkeep), cmd_0 );
}

RogueString* RogueCmdLiteralInt32__type_name( RogueClassCmdLiteralInt32* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1039]);
}

RogueClassCmd* RogueCmdLiteralInt32__cast_to__Type_Scope( RogueClassCmdLiteralInt32* THIS, RogueClassType* target_type_0, RogueClassScope* scope_1 )
{
  if (((void*)target_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ((RogueClassCmdLiteralReal64*)ROGUE_CREATE_OBJECT(CmdLiteralReal64)), THIS->t, ((RogueReal64)(THIS->value)) ))))));
  }
  else
  {
    return (RogueClassCmd*)((RogueCmd__cast_to__Type_Scope( ((RogueClassCmd*)THIS), target_type_0, scope_1 )));
  }
}

RogueClassCmd* RogueCmdLiteralInt32__clone__CloneArgs( RogueClassCmdLiteralInt32* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, THIS->value ))))));
}

RogueClassCmd* RogueCmdLiteralInt32__resolve__Scope( RogueClassCmdLiteralInt32* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralInt32__type( RogueClassCmdLiteralInt32* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32);
}

void RogueCmdLiteralInt32__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralInt32* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__Int32( writer_0, THIS->value );
}

RogueClassCmdLiteralInt32* RogueCmdLiteralInt32__init_object( RogueClassCmdLiteralInt32* THIS )
{
  return (RogueClassCmdLiteralInt32*)(THIS);
}

RogueClassCmdLiteralInt32* RogueCmdLiteralInt32__init__Token_Int32( RogueClassCmdLiteralInt32* THIS, RogueClassToken* _auto_601_0, RogueInt32 _auto_602_1 )
{
  THIS->value = _auto_602_1;
  THIS->t = _auto_601_0;
  return (RogueClassCmdLiteralInt32*)(THIS);
}

RogueString* RogueCmdLiteral__type_name( RogueClassCmdLiteral* THIS )
{
  return (RogueString*)(Rogue_literal_strings[786]);
}

RogueClassType* RogueCmdLiteral__implicit_type__Scope( RogueClassCmdLiteral* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassType*)((call_ROGUEM64( 29, (RogueClassCmd*)(THIS) )));
}

RogueLogical RogueCmdLiteral__is_literal( RogueClassCmdLiteral* THIS )
{
  return (RogueLogical)(true);
}

void RogueCmdLiteral__trace_used_code( RogueClassCmdLiteral* THIS )
{
}

void RogueCmdLiteral__update_this_type__Scope( RogueClassCmdLiteral* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdLiteral* RogueCmdLiteral__init_object( RogueClassCmdLiteral* THIS )
{
  return (RogueClassCmdLiteral*)(THIS);
}

RogueString* RogueCmdCompareNE__type_name( RogueClassCmdCompareNE* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1132]);
}

RogueClassCmd* RogueCmdCompareNE__clone__CloneArgs( RogueClassCmdCompareNE* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCompareNE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareNE*)ROGUE_CREATE_OBJECT(CmdCompareNE))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

RogueClassCmd* RogueCmdCompareNE__combine_literal_operands__Type( RogueClassCmdCompareNE* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value != ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value != ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareNE* RogueCmdCompareNE__init_object( RogueClassCmdCompareNE* THIS )
{
  return (RogueClassCmdCompareNE*)(THIS);
}

RogueString* RogueCmdCompareNE__symbol( RogueClassCmdCompareNE* THIS )
{
  return (RogueString*)(Rogue_literal_strings[195]);
}

RogueClassCmd* RogueCmdCompareNE__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareNE* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  RogueClassCmd* cmd_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1097], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1098], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM245( 25, (RogueClassCmdBinary*)(((RogueClassCmdCompareNE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareNE*)ROGUE_CREATE_OBJECT(CmdCompareNE))), THIS->t, cmd_4, ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, 0 ))))) )))))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1099], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[1097], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[1099], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1097], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), true, false ))));
}

RogueString* RogueCmdComparison__type_name( RogueClassCmdComparison* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1065]);
}

RogueClassType* Rogue_CmdComparison__type( RogueClassCmdComparison* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

RogueClassCmdComparison* RogueCmdComparison__init_object( RogueClassCmdComparison* THIS )
{
  return (RogueClassCmdComparison*)(THIS);
}

RogueLogical RogueCmdComparison__requires_parens( RogueClassCmdComparison* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdComparison__resolve_for_types__Scope_Type_Type( RogueClassCmdComparison* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  THIS->resolved = true;
  if ((((RogueType__is_compound( left_type_1 ))) || ((RogueType__is_compound( right_type_2 )))))
  {
    RogueClassCmd* result_3 = ((call_ROGUEM259( 42, (RogueClassCmdComparison*)(THIS), scope_0, left_type_1, right_type_2, false )));
    if (!!(result_3))
    {
      return (RogueClassCmd*)(result_3);
    }
    if (((void*)left_type_1) == ((void*)right_type_2))
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
    }
    ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[1074] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(left_type_1)) ))) ))), Rogue_literal_strings[364] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(right_type_2)) ))) ))), Rogue_literal_strings[51] ))) ))) ))));
  }
  else if ((((RogueType__is_reference( left_type_1 ))) || ((RogueType__is_reference( right_type_2 )))))
  {
    return (RogueClassCmd*)((call_ROGUEM259( 42, (RogueClassCmdComparison*)(THIS), scope_0, left_type_1, right_type_2, true )));
  }
  RogueClassType* common_type_4 = (((RogueCmd__must_find_common_type__Type_Type( ((RogueClassCmd*)THIS), left_type_1, right_type_2 ))));
  THIS->left = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)(THIS->left), common_type_4, scope_0 ))), scope_0 ));
  THIS->right = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)(THIS->right), common_type_4, scope_0 ))), scope_0 ));
  if (((call_ROGUEM61( 18, (RogueClassCmd*)(THIS->left) )) && (call_ROGUEM61( 18, (RogueClassCmd*)(THIS->right) ))))
  {
    return (RogueClassCmd*)((call_ROGUEM59( 10, (RogueClassCmd*)(THIS), common_type_4 )));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdComparison__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdComparison* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[1073] ))));
}

RogueString* RogueCmdBinary__type_name( RogueClassCmdBinary* THIS )
{
  return (RogueString*)(Rogue_literal_strings[787]);
}

RogueClassCmd* RogueCmdBinary__resolve__Scope( RogueClassCmdBinary* THIS, RogueClassScope* scope_0 )
{
  THIS->left = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->left), scope_0 ));
  THIS->right = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->right), scope_0 ));
  RogueClassType* left_type_1 = ((call_ROGUEM64( 22, (RogueClassCmd*)(THIS->left) )));
  RogueClassType* right_type_2 = ((call_ROGUEM64( 22, (RogueClassCmd*)(THIS->right) )));
  RogueClassCmd* result_3 = ((call_ROGUEM255( 37, (RogueClassCmdBinary*)(THIS), scope_0, left_type_1, right_type_2 )));
  return (RogueClassCmd*)(result_3);
}

RogueClassType* Rogue_CmdBinary__type( RogueClassCmdBinary* THIS )
{
  return (RogueClassType*)(((RogueCmd__find_operation_result_type__Type_Type( ((RogueClassCmd*)THIS), (call_ROGUEM64( 22, (RogueClassCmd*)(THIS->left) )), (call_ROGUEM64( 22, (RogueClassCmd*)(THIS->right) )) ))));
}

void RogueCmdBinary__write_cpp__CPPWriter_Logical( RogueClassCmdBinary* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if ((call_ROGUEM262( 36, (RogueClassCmdBinary*)(THIS) )))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[66] );
  }
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->left), writer_0, false );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[458] ))), (call_ROGUEM251( 41, (RogueClassCmdBinary*)(THIS) )) ))), Rogue_literal_strings[458] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->right), writer_0, false );
  if ((call_ROGUEM262( 36, (RogueClassCmdBinary*)(THIS) )))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
  }
}

void RogueCmdBinary__trace_used_code( RogueClassCmdBinary* THIS )
{
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->left) );
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->right) );
}

void RogueCmdBinary__update_this_type__Scope( RogueClassCmdBinary* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->left), scope_0 );
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->right), scope_0 );
}

RogueClassCmdBinary* RogueCmdBinary__init_object( RogueClassCmdBinary* THIS )
{
  return (RogueClassCmdBinary*)(THIS);
}

RogueClassCmdBinary* RogueCmdBinary__init__Token_Cmd_Cmd( RogueClassCmdBinary* THIS, RogueClassToken* _auto_603_0, RogueClassCmd* _auto_604_1, RogueClassCmd* _auto_605_2 )
{
  THIS->right = _auto_605_2;
  THIS->left = _auto_604_1;
  THIS->t = _auto_603_0;
  return (RogueClassCmdBinary*)(THIS);
}

RogueString* RogueCmdBinary__fn_name( RogueClassCmdBinary* THIS )
{
  ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[333] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM251( 2, (RogueClassCmdBinary*)(THIS) )) ))) ))), Rogue_literal_strings[863] ))) ))) ))));
}

RogueLogical RogueCmdBinary__requires_parens( RogueClassCmdBinary* THIS )
{
  return (RogueLogical)(true);
}

RogueClassCmd* RogueCmdBinary__resolve_for_types__Scope_Type_Type( RogueClassCmdBinary* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  RogueClassCmd* operator_method_call_3 = ((call_ROGUEM255( 39, (RogueClassCmdBinary*)(THIS), scope_0, left_type_1, right_type_2 )));
  if (!!(operator_method_call_3))
  {
    return (RogueClassCmd*)(operator_method_call_3);
  }
  RogueClassType* common_type_4 = (((RogueCmd__must_find_common_type__Type_Type( ((RogueClassCmd*)THIS), left_type_1, right_type_2 ))));
  THIS->left = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)(THIS->left), common_type_4, scope_0 ))), scope_0 ));
  THIS->right = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)(THIS->right), common_type_4, scope_0 ))), scope_0 ));
  if (((call_ROGUEM61( 18, (RogueClassCmd*)(THIS->left) )) && (call_ROGUEM61( 18, (RogueClassCmd*)(THIS->right) ))))
  {
    return (RogueClassCmd*)((call_ROGUEM59( 10, (RogueClassCmd*)(THIS), common_type_4 )));
  }
  return (RogueClassCmd*)((call_ROGUEM254( 38, (RogueClassCmdBinary*)(THIS), scope_0, common_type_4 )));
}

RogueClassCmd* RogueCmdBinary__resolve_for_common_type__Scope_Type( RogueClassCmdBinary* THIS, RogueClassScope* scope_0, RogueClassType* common_type_1 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdBinary__resolve_operator_method__Scope_Type_Type( RogueClassCmdBinary* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  if (((RogueType__has_method_named__String( left_type_1, (call_ROGUEM251( 35, (RogueClassCmdBinary*)(THIS) )) ))))
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, (call_ROGUEM251( 35, (RogueClassCmdBinary*)(THIS) )), ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), scope_0 ))));
  }
  else if (((RogueType__has_routine_named__String( left_type_1, (call_ROGUEM251( 35, (RogueClassCmdBinary*)(THIS) )) ))))
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, left_type_1->name ))))), (call_ROGUEM251( 35, (RogueClassCmdBinary*)(THIS) )), ((RogueCmdArgs__init__Cmd_Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left, THIS->right ))) ))), scope_0 ))));
  }
  else if (((RogueType__has_routine_named__String( right_type_2, (call_ROGUEM251( 35, (RogueClassCmdBinary*)(THIS) )) ))))
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, right_type_2->name ))))), (call_ROGUEM251( 35, (RogueClassCmdBinary*)(THIS) )), ((RogueCmdArgs__init__Cmd_Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left, THIS->right ))) ))), scope_0 ))));
  }
  else if (!((((RogueType__is_primitive( left_type_1 ))) && ((RogueType__is_primitive( right_type_2 ))))))
  {
    if (((void*)left_type_1) == ((void*)right_type_2))
    {
      ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[864] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(left_type_1)) ))) ))), Rogue_literal_strings[51] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM251( 35, (RogueClassCmdBinary*)(THIS) )) ))) ))), Rogue_literal_strings[865] ))) ))) ))));
    }
    else
    {
      ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[866] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(left_type_1)) ))) ))), Rogue_literal_strings[51] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM251( 35, (RogueClassCmdBinary*)(THIS) )) ))) ))), Rogue_literal_strings[867] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(right_type_2)) ))) ))), Rogue_literal_strings[51] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM251( 35, (RogueClassCmdBinary*)(THIS) )) ))) ))), Rogue_literal_strings[868] ))) ))) ))));
    }
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
}

RogueString* RogueCmdBinary__symbol( RogueClassCmdBinary* THIS )
{
  ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[333] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM251( 2, (RogueClassCmdBinary*)(THIS) )) ))) ))), Rogue_literal_strings[949] ))) ))) ))));
}

RogueString* RogueCmdBinary__cpp_symbol( RogueClassCmdBinary* THIS )
{
  return (RogueString*)((call_ROGUEM251( 40, (RogueClassCmdBinary*)(THIS) )));
}

RogueString* RogueTaskArgs__type_name( RogueClassTaskArgs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1027]);
}

RogueClassTaskArgs* RogueTaskArgs__init_object( RogueClassTaskArgs* THIS )
{
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassTaskArgs* RogueTaskArgs__init__Type_Method_Type_Method( RogueClassTaskArgs* THIS, RogueClassType* _auto_612_0, RogueClassMethod* _auto_613_1, RogueClassType* _auto_614_2, RogueClassMethod* _auto_615_3 )
{
  THIS->original_method = _auto_615_3;
  THIS->_original_type = _auto_614_2;
  THIS->task_method = _auto_613_1;
  THIS->_task_type = _auto_612_0;
  THIS->cmd_task_control = ((RogueCmdTaskControl__init__Token( ((RogueClassCmdTaskControl*)ROGUE_CREATE_OBJECT(CmdTaskControl)), THIS->task_method->t )));
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassTaskArgs* RogueTaskArgs__add__Cmd( RogueClassTaskArgs* THIS, RogueClassCmd* cmd_0 )
{
  if (!!(cmd_0))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->cmd_task_control->current_section->statements), cmd_0 );
  }
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassTaskArgs* RogueTaskArgs__add_jump__Token_CmdTaskControlSection( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassCmdTaskControlSection* to_section_1 )
{
  RogueTaskArgs__set_next_ip__Token_CmdTaskControlSection( THIS, t_0, to_section_1 );
  RogueTaskArgs__add__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), t_0, ((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), t_0, true ))))) ))))) );
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassTaskArgs* RogueTaskArgs__add_conditional_jump__Cmd_CmdTaskControlSection( RogueClassTaskArgs* THIS, RogueClassCmd* condition_0, RogueClassCmdTaskControlSection* to_section_1 )
{
  RogueClassToken* t_2 = (condition_0->t);
  RogueClassCmdIf* cmd_if_3 = (((RogueCmdIf__init__Token_Cmd_Int32( ((RogueClassCmdIf*)ROGUE_CREATE_OBJECT(CmdIf)), t_2, condition_0, 2 ))));
  RogueInt32 ip_4 = (to_section_1->ip);
  if ((THIS->cmd_task_control->current_section->ip + 1) != ip_4)
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)cmd_if_3->statements), ((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), t_2, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), t_2, THIS->_task_type ))))), THIS->ip_property, ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), t_2, (ip_4 - 1) ))))) ))))) );
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)cmd_if_3->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), t_2, ((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), t_2, true ))))) ))))) );
  RogueTaskArgs__add__Cmd( THIS, ((RogueClassCmd*)(cmd_if_3)) );
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassCmd* RogueTaskArgs__create_return__Token_Cmd( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassCmd* value_1 )
{
  RogueClassCmdBlock* result_2 = (((RogueCmdBlock__init__Token_Int32( ((RogueClassCmdBlock*)ROGUE_CREATE_OBJECT(CmdBlock)), t_0, 0 ))));
  if (!!(value_1))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)result_2->statements), ((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)ROGUE_CREATE_OBJECT(CmdAssign)), t_0, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), t_0, Rogue_literal_strings[411] ))))), value_1 ))))) );
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)result_2->statements), ((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), t_0, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), t_0, THIS->_task_type ))))), THIS->ip_property, ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), t_0, -1 ))))) ))))) );
  RogueCmdList__add__Cmd( ((RogueCmdList*)result_2->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), t_0, ((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), t_0, false ))))) ))))) );
  return (RogueClassCmd*)(((RogueClassCmd*)(result_2)));
}

RogueClassCmd* RogueTaskArgs__create_escape__Token_CmdTaskControlSection( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassCmdTaskControlSection* escape_section_1 )
{
  RogueClassCmdBlock* result_2 = (((RogueCmdBlock__init__Token_Int32( ((RogueClassCmdBlock*)ROGUE_CREATE_OBJECT(CmdBlock)), t_0, 0 ))));
  RogueCmdList__add__Cmd( ((RogueCmdList*)result_2->statements), ((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), t_0, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), t_0, THIS->_task_type ))))), THIS->ip_property, ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), t_0, (escape_section_1->ip - 1) ))))) ))))) );
  RogueCmdList__add__Cmd( ((RogueCmdList*)result_2->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), t_0, ((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), t_0, false ))))) ))))) );
  return (RogueClassCmd*)(((RogueClassCmd*)(result_2)));
}

RogueClassTaskArgs* RogueTaskArgs__add_yield__Token( RogueClassTaskArgs* THIS, RogueClassToken* t_0 )
{
  RogueClassCmdTaskControlSection* next_section_1 = (((RogueTaskArgs__create_section( THIS ))));
  RogueTaskArgs__set_next_ip__Token_CmdTaskControlSection( THIS, t_0, next_section_1 );
  RogueTaskArgs__add__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), t_0, ((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), t_0, false ))))) ))))) );
  RogueTaskArgs__begin_section__CmdTaskControlSection( THIS, next_section_1 );
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassCmdTaskControlSection* RogueTaskArgs__jump_to_new_section__Token( RogueClassTaskArgs* THIS, RogueClassToken* t_0 )
{
  RogueClassCmdTaskControlSection* new_section_1 = (((RogueTaskArgs__create_section( THIS ))));
  RogueTaskArgs__add_jump__Token_CmdTaskControlSection( THIS, t_0, new_section_1 );
  RogueTaskArgs__begin_section__CmdTaskControlSection( THIS, new_section_1 );
  return (RogueClassCmdTaskControlSection*)(new_section_1);
}

RogueClassTaskArgs* RogueTaskArgs__begin_section__CmdTaskControlSection( RogueClassTaskArgs* THIS, RogueClassCmdTaskControlSection* section_0 )
{
  THIS->cmd_task_control->current_section = section_0;
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassCmdTaskControlSection* RogueTaskArgs__create_section( RogueClassTaskArgs* THIS )
{
  RogueClassCmdTaskControlSection* section_0 = (((RogueCmdTaskControlSection__init__Int32( ((RogueClassCmdTaskControlSection*)ROGUE_CREATE_OBJECT(CmdTaskControlSection)), (THIS->cmd_task_control->sections->count + 1) ))));
  RogueCmdTaskControlSectionList__add__CmdTaskControlSection( THIS->cmd_task_control->sections, section_0 );
  return (RogueClassCmdTaskControlSection*)(section_0);
}

RogueClassCmd* RogueTaskArgs__cmd_read_this__Token( RogueClassTaskArgs* THIS, RogueClassToken* t_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), t_0, THIS->_task_type ))))));
}

RogueClassCmd* RogueTaskArgs__cmd_read_context__Token( RogueClassTaskArgs* THIS, RogueClassToken* t_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)ROGUE_CREATE_OBJECT(CmdReadProperty)), t_0, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), t_0, THIS->_task_type ))))), THIS->context_property ))))));
}

RogueString* RogueTaskArgs__convert_local_name__Local( RogueClassTaskArgs* THIS, RogueClassLocal* local_info_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], local_info_0->name ))) ))), Rogue_literal_strings[406] ))), ((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], local_info_0->index ))) ))) ))));
}

RogueClassCmd* RogueTaskArgs__cmd_read__Token_Local( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassLocal* local_info_1 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), t_0, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), t_0, THIS->_task_type ))))), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], local_info_1->name ))) ))), Rogue_literal_strings[406] ))), ((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], local_info_1->index ))) ))) ))) ))))));
}

RogueClassCmd* RogueTaskArgs__cmd_write__Token_Local_Cmd( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassLocal* local_info_1, RogueClassCmd* new_value_2 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)ROGUE_CREATE_OBJECT(CmdAssign)), t_0, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), t_0, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), t_0, THIS->_task_type ))))), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], local_info_1->name ))) ))), Rogue_literal_strings[406] ))), ((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], local_info_1->index ))) ))) ))) ))))), new_value_2 ))))));
}

RogueClassCmd* RogueTaskArgs__replace_write_local__Token_Local_Cmd( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassLocal* local_info_1, RogueClassCmd* new_value_2 )
{
  if (((void*)new_value_2) == ((void*)NULL))
  {
    new_value_2 = ((RogueClassCmd*)((RogueType__create_default_value__Token( local_info_1->_type, t_0 ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)ROGUE_CREATE_OBJECT(CmdAssign)), t_0, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), t_0, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), t_0, THIS->_task_type ))))), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], local_info_1->name ))) ))), Rogue_literal_strings[406] ))), ((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], local_info_1->index ))) ))) ))) ))))), new_value_2 ))))));
}

RogueClassTaskArgs* RogueTaskArgs__set_next_ip__Token_CmdTaskControlSection( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassCmdTaskControlSection* to_section_1 )
{
  RogueInt32 ip_2 = (to_section_1->ip);
  if ((THIS->cmd_task_control->current_section->ip + 1) != ip_2)
  {
    RogueCmdTaskControl__add__Cmd( THIS->cmd_task_control, ((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), t_0, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), t_0, THIS->_task_type ))))), THIS->ip_property, ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), t_0, (ip_2 - 1) ))))) ))))) );
  }
  return (RogueClassTaskArgs*)(THIS);
}

RogueString* RogueCmdArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[736]);
}

RogueString* RogueCmdTaskControl__type_name( RogueClassCmdTaskControl* THIS )
{
  return (RogueString*)(Rogue_literal_strings[788]);
}

RogueLogical RogueCmdTaskControl__requires_semicolon( RogueClassCmdTaskControl* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdTaskControl__resolve__Scope( RogueClassCmdTaskControl* THIS, RogueClassScope* scope_0 )
{
  {
    RogueCmdTaskControlSectionList* _auto_1780_1 = (THIS->sections);
    RogueInt32 _auto_1781_2 = (0);
    for (;_auto_1781_2 < _auto_1780_1->count;++_auto_1781_2)
    {
      RogueClassCmdTaskControlSection* section_3 = (((RogueClassCmdTaskControlSection*)(_auto_1780_1->data->objects[_auto_1781_2])));
      RogueCmdStatementList__resolve__Scope( section_3->statements, scope_0 );
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdTaskControl__write_cpp__CPPWriter_Logical( RogueClassCmdTaskControl* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[950] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[196] );
  writer_0->indent += 2;
  {
    RogueCmdTaskControlSectionList* _auto_1782_2 = (THIS->sections);
    RogueInt32 _auto_1783_3 = (0);
    for (;_auto_1783_3 < _auto_1782_2->count;++_auto_1783_3)
    {
      RogueClassCmdTaskControlSection* section_4 = (((RogueClassCmdTaskControlSection*)(_auto_1782_2->data->objects[_auto_1783_3])));
      RogueCPPWriter__println__String( ((RogueCPPWriter__print__Int32( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[569] ))), section_4->ip ))), Rogue_literal_strings[178] );
      RogueCmdStatementList__write_cpp__CPPWriter_Logical( section_4->statements, writer_0, false );
    }
  }
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[573] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[951] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[952] );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[114] );
}

void RogueCmdTaskControl__trace_used_code( RogueClassCmdTaskControl* THIS )
{
  {
    RogueCmdTaskControlSectionList* _auto_1784_0 = (THIS->sections);
    RogueInt32 _auto_1785_1 = (0);
    for (;_auto_1785_1 < _auto_1784_0->count;++_auto_1785_1)
    {
      RogueClassCmdTaskControlSection* section_2 = (((RogueClassCmdTaskControlSection*)(_auto_1784_0->data->objects[_auto_1785_1])));
      RogueCmdStatementList__trace_used_code( section_2->statements );
    }
  }
}

void RogueCmdTaskControl__update_this_type__Scope( RogueClassCmdTaskControl* THIS, RogueClassScope* scope_0 )
{
  {
    RogueCmdTaskControlSectionList* _auto_1786_1 = (THIS->sections);
    RogueInt32 _auto_1787_2 = (0);
    for (;_auto_1787_2 < _auto_1786_1->count;++_auto_1787_2)
    {
      RogueClassCmdTaskControlSection* section_3 = (((RogueClassCmdTaskControlSection*)(_auto_1786_1->data->objects[_auto_1787_2])));
      RogueCmdStatementList__update_this_type__Scope( section_3->statements, scope_0 );
    }
  }
}

RogueClassCmdTaskControl* RogueCmdTaskControl__init_object( RogueClassCmdTaskControl* THIS )
{
  THIS->sections = ((RogueCmdTaskControlSectionList__init( ((RogueCmdTaskControlSectionList*)ROGUE_CREATE_OBJECT(CmdTaskControlSectionList)) )));
  return (RogueClassCmdTaskControl*)(THIS);
}

RogueClassCmdTaskControl* RogueCmdTaskControl__init__Token( RogueClassCmdTaskControl* THIS, RogueClassToken* _auto_618_0 )
{
  THIS->t = _auto_618_0;
  THIS->current_section = ((RogueCmdTaskControlSection__init__Int32( ((RogueClassCmdTaskControlSection*)ROGUE_CREATE_OBJECT(CmdTaskControlSection)), 1 )));
  RogueCmdTaskControlSectionList__add__CmdTaskControlSection( THIS->sections, THIS->current_section );
  return (RogueClassCmdTaskControl*)(THIS);
}

RogueClassCmdTaskControl* RogueCmdTaskControl__add__Cmd( RogueClassCmdTaskControl* THIS, RogueClassCmd* cmd_0 )
{
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->current_section->statements), cmd_0 );
  return (RogueClassCmdTaskControl*)(THIS);
}

RogueString* RogueCmdTaskControlSection__type_name( RogueClassCmdTaskControlSection* THIS )
{
  return (RogueString*)(Rogue_literal_strings[644]);
}

RogueClassCmdTaskControlSection* RogueCmdTaskControlSection__init__Int32( RogueClassCmdTaskControlSection* THIS, RogueInt32 _auto_619_0 )
{
  THIS->ip = _auto_619_0;
  return (RogueClassCmdTaskControlSection*)(THIS);
}

RogueClassCmdTaskControlSection* RogueCmdTaskControlSection__init_object( RogueClassCmdTaskControlSection* THIS )
{
  THIS->statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
  return (RogueClassCmdTaskControlSection*)(THIS);
}

RogueString* RogueString_MethodListTableEntryList__to_String( RogueTableEntry_of_String_MethodListList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_MethodListList* _auto_1793_2 = (THIS);
    RogueInt32 _auto_1794_3 = (0);
    for (;_auto_1794_3 < _auto_1793_2->count;++_auto_1794_3)
    {
      RogueClassString_MethodListTableEntry* value_4 = (((RogueClassString_MethodListTableEntry*)(_auto_1793_2->data->objects[_auto_1794_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_MethodListTableEntryList__type_name( RogueTableEntry_of_String_MethodListList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[696]);
}

RogueTableEntry_of_String_MethodListList* RogueString_MethodListTableEntryList__init_object( RogueTableEntry_of_String_MethodListList* THIS )
{
  return (RogueTableEntry_of_String_MethodListList*)(THIS);
}

RogueTableEntry_of_String_MethodListList* RogueString_MethodListTableEntryList__init__Int32_String_MethodListTableEntry( RogueTableEntry_of_String_MethodListList* THIS, RogueInt32 initial_capacity_0, RogueClassString_MethodListTableEntry* initial_value_1 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_MethodListTableEntry*), true );
  {
    RogueInt32 i_2 = (1);
    RogueInt32 _auto_662_3 = (initial_capacity_0);
    for (;i_2 <= _auto_662_3;++i_2)
    {
      RogueString_MethodListTableEntryList__add__String_MethodListTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_MethodListList*)(THIS);
}

RogueTableEntry_of_String_MethodListList* RogueString_MethodListTableEntryList__add__String_MethodListTableEntry( RogueTableEntry_of_String_MethodListList* THIS, RogueClassString_MethodListTableEntry* value_0 )
{
  ((RogueString_MethodListTableEntryList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_MethodListList*)(THIS);
}

RogueInt32 RogueString_MethodListTableEntryList__capacity( RogueTableEntry_of_String_MethodListList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_MethodListList* RogueString_MethodListTableEntryList__reserve__Int32( RogueTableEntry_of_String_MethodListList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassString_MethodListTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueString_MethodListTableEntryList__capacity( THIS ))) + ((RogueString_MethodListTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassString_MethodListTableEntry*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_MethodListList*)(THIS);
}

RogueString* RogueString_MethodListTableEntry__type_name( RogueClassString_MethodListTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[645]);
}

RogueClassString_MethodListTableEntry* RogueString_MethodListTableEntry__init__String_MethodList_Int32( RogueClassString_MethodListTableEntry* THIS, RogueString* _key_0, RogueMethodList* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_MethodListTableEntry*)(THIS);
}

RogueClassString_MethodListTableEntry* RogueString_MethodListTableEntry__init_object( RogueClassString_MethodListTableEntry* THIS )
{
  return (RogueClassString_MethodListTableEntry*)(THIS);
}

RogueString* RogueString_MethodListTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[737]);
}

RogueString* RogueDefinitionList__to_String( RogueDefinitionList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueDefinitionList* _auto_1830_2 = (THIS);
    RogueInt32 _auto_1831_3 = (0);
    for (;_auto_1831_3 < _auto_1830_2->count;++_auto_1831_3)
    {
      RogueClassDefinition* value_4 = (((RogueClassDefinition*)(_auto_1830_2->data->objects[_auto_1831_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueDefinitionList__type_name( RogueDefinitionList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[697]);
}

RogueDefinitionList* RogueDefinitionList__init_object( RogueDefinitionList* THIS )
{
  return (RogueDefinitionList*)(THIS);
}

RogueDefinitionList* RogueDefinitionList__init( RogueDefinitionList* THIS )
{
  RogueDefinitionList__init__Int32( THIS, 10 );
  return (RogueDefinitionList*)(THIS);
}

RogueDefinitionList* RogueDefinitionList__init__Int32( RogueDefinitionList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassDefinition*), true );
  return (RogueDefinitionList*)(THIS);
}

RogueDefinitionList* RogueDefinitionList__add__Definition( RogueDefinitionList* THIS, RogueClassDefinition* value_0 )
{
  ((RogueDefinitionList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueDefinitionList*)(THIS);
}

RogueInt32 RogueDefinitionList__capacity( RogueDefinitionList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueDefinitionList* RogueDefinitionList__reserve__Int32( RogueDefinitionList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassDefinition*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueDefinitionList__capacity( THIS ))) + ((RogueDefinitionList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassDefinition*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueDefinitionList*)(THIS);
}

RogueString* RogueDefinition__type_name( RogueClassDefinition* THIS )
{
  return (RogueString*)(Rogue_literal_strings[646]);
}

RogueClassDefinition* RogueDefinition__init__Token_String_Cmd_Logical( RogueClassDefinition* THIS, RogueClassToken* _auto_701_0, RogueString* _auto_702_1, RogueClassCmd* _auto_703_2, RogueLogical _auto_704_3 )
{
  THIS->is_enumeration = _auto_704_3;
  THIS->expression = _auto_703_2;
  THIS->name = _auto_702_1;
  THIS->t = _auto_701_0;
  return (RogueClassDefinition*)(THIS);
}

RogueClassDefinition* RogueDefinition__init_object( RogueClassDefinition* THIS )
{
  return (RogueClassDefinition*)(THIS);
}

RogueString* RogueString_DefinitionTable__to_String( RogueClassString_DefinitionTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_DefinitionTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_DefinitionTable__type_name( RogueClassString_DefinitionTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[647]);
}

RogueClassString_DefinitionTable* RogueString_DefinitionTable__init( RogueClassString_DefinitionTable* THIS )
{
  RogueString_DefinitionTable__init__Int32( THIS, 16 );
  return (RogueClassString_DefinitionTable*)(THIS);
}

RogueClassString_DefinitionTable* RogueString_DefinitionTable__init__Int32( RogueClassString_DefinitionTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_DefinitionTableEntryList__init__Int32_String_DefinitionTableEntry( ((RogueTableEntry_of_String_DefinitionList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_DefinitionList)), bin_count_0, ((RogueClassString_DefinitionTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_DefinitionTable*)(THIS);
}

RogueLogical RogueString_DefinitionTable__contains__String( RogueClassString_DefinitionTable* THIS, RogueString* key_0 )
{
  return (RogueLogical)(!!(((RogueString_DefinitionTable__find__String( THIS, key_0 )))));
}

RogueClassString_DefinitionTableEntry* RogueString_DefinitionTable__find__String( RogueClassString_DefinitionTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  RogueClassString_DefinitionTableEntry* entry_2 = (((RogueClassString_DefinitionTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( entry_2->key, key_0 )))))
    {
      return (RogueClassString_DefinitionTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_DefinitionTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_DefinitionTableEntry*)(((RogueClassString_DefinitionTableEntry*)(NULL)));
}

RogueClassDefinition* RogueString_DefinitionTable__get__String( RogueClassString_DefinitionTable* THIS, RogueString* key_0 )
{
  RogueClassString_DefinitionTableEntry* entry_1 = (((RogueString_DefinitionTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassDefinition*)(entry_1->value);
  }
  else
  {
    RogueClassDefinition* default_value_2 = 0;
    return (RogueClassDefinition*)(default_value_2);
  }
}

RogueClassString_DefinitionTable* RogueString_DefinitionTable__set__String_Definition( RogueClassString_DefinitionTable* THIS, RogueString* key_0, RogueClassDefinition* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_DefinitionTableEntry* entry_4 = (((RogueClassString_DefinitionTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( entry_4->key, key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_DefinitionTable*)(THIS);
    }
    entry_4 = ((RogueClassString_DefinitionTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_DefinitionTableEntry*)((RogueString_DefinitionTableEntry__init__String_Definition_Int32( ((RogueClassString_DefinitionTableEntry*)ROGUE_CREATE_OBJECT(String_DefinitionTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_DefinitionTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
  return (RogueClassString_DefinitionTable*)(THIS);
}

RogueStringBuilder* RogueString_DefinitionTable__print_to__StringBuilder( RogueClassString_DefinitionTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_DefinitionTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_DefinitionTable* RogueString_DefinitionTable__init_object( RogueClassString_DefinitionTable* THIS )
{
  return (RogueClassString_DefinitionTable*)(THIS);
}

RogueString* RogueNativePropertyList__to_String( RogueNativePropertyList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueNativePropertyList* _auto_1869_2 = (THIS);
    RogueInt32 _auto_1870_3 = (0);
    for (;_auto_1870_3 < _auto_1869_2->count;++_auto_1870_3)
    {
      RogueClassNativeProperty* value_4 = (((RogueClassNativeProperty*)(_auto_1869_2->data->objects[_auto_1870_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueNativePropertyList__type_name( RogueNativePropertyList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[698]);
}

RogueNativePropertyList* RogueNativePropertyList__init_object( RogueNativePropertyList* THIS )
{
  return (RogueNativePropertyList*)(THIS);
}

RogueNativePropertyList* RogueNativePropertyList__init( RogueNativePropertyList* THIS )
{
  RogueNativePropertyList__init__Int32( THIS, 10 );
  return (RogueNativePropertyList*)(THIS);
}

RogueNativePropertyList* RogueNativePropertyList__init__Int32( RogueNativePropertyList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassNativeProperty*), true );
  return (RogueNativePropertyList*)(THIS);
}

RogueNativePropertyList* RogueNativePropertyList__add__NativeProperty( RogueNativePropertyList* THIS, RogueClassNativeProperty* value_0 )
{
  ((RogueNativePropertyList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueNativePropertyList*)(THIS);
}

RogueInt32 RogueNativePropertyList__capacity( RogueNativePropertyList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueNativePropertyList* RogueNativePropertyList__reserve__Int32( RogueNativePropertyList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassNativeProperty*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueNativePropertyList__capacity( THIS ))) + ((RogueNativePropertyList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassNativeProperty*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueNativePropertyList*)(THIS);
}

RogueString* RogueNativeProperty__type_name( RogueClassNativeProperty* THIS )
{
  return (RogueString*)(Rogue_literal_strings[648]);
}

RogueClassNativeProperty* RogueNativeProperty__init__Token_String( RogueClassNativeProperty* THIS, RogueClassToken* _auto_709_0, RogueString* _auto_710_1 )
{
  THIS->code = _auto_710_1;
  THIS->t = _auto_709_0;
  return (RogueClassNativeProperty*)(THIS);
}

RogueClassNativeProperty* RogueNativeProperty__init_object( RogueClassNativeProperty* THIS )
{
  return (RogueClassNativeProperty*)(THIS);
}

RogueString* RogueString_PropertyTable__to_String( RogueClassString_PropertyTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_PropertyTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_PropertyTable__type_name( RogueClassString_PropertyTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[649]);
}

RogueClassString_PropertyTable* RogueString_PropertyTable__init( RogueClassString_PropertyTable* THIS )
{
  RogueString_PropertyTable__init__Int32( THIS, 16 );
  return (RogueClassString_PropertyTable*)(THIS);
}

RogueClassString_PropertyTable* RogueString_PropertyTable__init__Int32( RogueClassString_PropertyTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_PropertyTableEntryList__init__Int32_String_PropertyTableEntry( ((RogueTableEntry_of_String_PropertyList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_PropertyList)), bin_count_0, ((RogueClassString_PropertyTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_PropertyTable*)(THIS);
}

void RogueString_PropertyTable__clear( RogueClassString_PropertyTable* THIS )
{
  {
    RogueTableEntry_of_String_PropertyList* _auto_1907_0 = (THIS->bins);
    RogueInt32 i_1 = (0);
    for (;i_1 < _auto_1907_0->count;++i_1)
    {
      THIS->bins->data->objects[i_1] = ((RogueClassString_PropertyTableEntry*)(NULL));
    }
  }
  RogueStringList__clear( THIS->keys );
}

RogueClassString_PropertyTableEntry* RogueString_PropertyTable__find__String( RogueClassString_PropertyTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  RogueClassString_PropertyTableEntry* entry_2 = (((RogueClassString_PropertyTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( entry_2->key, key_0 )))))
    {
      return (RogueClassString_PropertyTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_PropertyTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_PropertyTableEntry*)(((RogueClassString_PropertyTableEntry*)(NULL)));
}

RogueClassProperty* RogueString_PropertyTable__get__String( RogueClassString_PropertyTable* THIS, RogueString* key_0 )
{
  RogueClassString_PropertyTableEntry* entry_1 = (((RogueString_PropertyTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassProperty*)(entry_1->value);
  }
  else
  {
    RogueClassProperty* default_value_2 = 0;
    return (RogueClassProperty*)(default_value_2);
  }
}

RogueClassString_PropertyTable* RogueString_PropertyTable__set__String_Property( RogueClassString_PropertyTable* THIS, RogueString* key_0, RogueClassProperty* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_PropertyTableEntry* entry_4 = (((RogueClassString_PropertyTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( entry_4->key, key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_PropertyTable*)(THIS);
    }
    entry_4 = ((RogueClassString_PropertyTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_PropertyTableEntry*)((RogueString_PropertyTableEntry__init__String_Property_Int32( ((RogueClassString_PropertyTableEntry*)ROGUE_CREATE_OBJECT(String_PropertyTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_PropertyTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
  return (RogueClassString_PropertyTable*)(THIS);
}

RogueStringBuilder* RogueString_PropertyTable__print_to__StringBuilder( RogueClassString_PropertyTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_PropertyTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_PropertyTable* RogueString_PropertyTable__init_object( RogueClassString_PropertyTable* THIS )
{
  return (RogueClassString_PropertyTable*)(THIS);
}

RogueString* RogueCmdLiteralNull__type_name( RogueClassCmdLiteralNull* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1040]);
}

RogueClassCmd* RogueCmdLiteralNull__cast_to__Type_Scope( RogueClassCmdLiteralNull* THIS, RogueClassType* target_type_0, RogueClassScope* scope_1 )
{
  if (target_type_0->is_optional)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateOptionalValue__init__Token_Type_Cmd( ((RogueClassCmdCreateOptionalValue*)ROGUE_CREATE_OBJECT(CmdCreateOptionalValue)), THIS->t, target_type_0, ((RogueClassCmd*)(NULL)) ))))));
  }
  else
  {
    return (RogueClassCmd*)((RogueCmd__cast_to__Type_Scope( ((RogueClassCmd*)THIS), target_type_0, scope_1 )));
  }
}

RogueClassCmd* RogueCmdLiteralNull__clone__CloneArgs( RogueClassCmdLiteralNull* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralNull__init__Token( ((RogueClassCmdLiteralNull*)ROGUE_CREATE_OBJECT(CmdLiteralNull)), THIS->t ))))));
}

RogueClassCmdLiteralNull* RogueCmdLiteralNull__resolve__Scope( RogueClassCmdLiteralNull* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmdLiteralNull*)(THIS);
}

RogueClassType* Rogue_CmdLiteralNull__type( RogueClassCmdLiteralNull* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_null);
}

void RogueCmdLiteralNull__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralNull* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[953] );
}

RogueClassCmdLiteralNull* RogueCmdLiteralNull__init_object( RogueClassCmdLiteralNull* THIS )
{
  return (RogueClassCmdLiteralNull*)(THIS);
}

RogueClassCmdLiteralNull* RogueCmdLiteralNull__init__Token( RogueClassCmdLiteralNull* THIS, RogueClassToken* _auto_717_0 )
{
  THIS->t = _auto_717_0;
  return (RogueClassCmdLiteralNull*)(THIS);
}

RogueString* RogueCmdCreateCompound__type_name( RogueClassCmdCreateCompound* THIS )
{
  return (RogueString*)(Rogue_literal_strings[789]);
}

RogueClassCmd* RogueCmdCreateCompound__clone__CloneArgs( RogueClassCmdCreateCompound* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateCompound__init__Token_Type_CmdArgs( ((RogueClassCmdCreateCompound*)ROGUE_CREATE_OBJECT(CmdCreateCompound)), THIS->t, THIS->_of_type, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdCreateCompound__resolve__Scope( RogueClassCmdCreateCompound* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( THIS->_of_type, scope_0 );
  if (((void*)THIS->args) == ((void*)NULL))
  {
    THIS->args = ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) )));
  }
  while (THIS->args->count < THIS->_of_type->property_list->count)
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->args), ((RogueType__create_default_value__Token( ((RogueClassProperty*)(THIS->_of_type->property_list->data->objects[THIS->args->count]))->_type, THIS->t ))) );
  }
  RogueCmdArgs__resolve__Scope( THIS->args, scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdCreateCompound__type( RogueClassCmdCreateCompound* THIS )
{
  return (RogueClassType*)(THIS->_of_type);
}

void RogueCmdCreateCompound__write_cpp__CPPWriter_Logical( RogueClassCmdCreateCompound* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, THIS->_of_type ))), Rogue_literal_strings[66] );
  if (!!(THIS->args->count))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[458] );
    RogueLogical first_2 = (true);
    {
      RogueClassCmdArgs* _auto_1908_3 = (THIS->args);
      RogueInt32 _auto_1909_4 = (0);
      for (;_auto_1909_4 < _auto_1908_3->count;++_auto_1909_4)
      {
        RogueClassCmd* arg_5 = (((RogueClassCmd*)(_auto_1908_3->data->objects[_auto_1909_4])));
        if (first_2)
        {
          first_2 = ((RogueLogical)false);
        }
        else
        {
          RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[469] );
        }
        call_ROGUEM68( 30, (RogueClassCmd*)(arg_5), writer_0, false );
      }
    }
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[458] );
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
}

void RogueCmdCreateCompound__trace_used_code( RogueClassCmdCreateCompound* THIS )
{
  RogueType__trace_used_code( THIS->_of_type );
  {
    RogueClassCmdArgs* _auto_1910_0 = (THIS->args);
    RogueInt32 _auto_1911_1 = (0);
    for (;_auto_1911_1 < _auto_1910_0->count;++_auto_1911_1)
    {
      RogueClassCmd* arg_2 = (((RogueClassCmd*)(_auto_1910_0->data->objects[_auto_1911_1])));
      call_ROGUEM63( 31, (RogueClassCmd*)(arg_2) );
    }
  }
}

void RogueCmdCreateCompound__update_this_type__Scope( RogueClassCmdCreateCompound* THIS, RogueClassScope* scope_0 )
{
  {
    RogueClassCmdArgs* _auto_1912_1 = (THIS->args);
    RogueInt32 _auto_1913_2 = (0);
    for (;_auto_1913_2 < _auto_1912_1->count;++_auto_1913_2)
    {
      RogueClassCmd* arg_3 = (((RogueClassCmd*)(_auto_1912_1->data->objects[_auto_1913_2])));
      call_ROGUEM60( 32, (RogueClassCmd*)(arg_3), scope_0 );
    }
  }
}

RogueClassCmdCreateCompound* RogueCmdCreateCompound__init_object( RogueClassCmdCreateCompound* THIS )
{
  return (RogueClassCmdCreateCompound*)(THIS);
}

RogueClassCmdCreateCompound* RogueCmdCreateCompound__init__Token_Type_CmdArgs( RogueClassCmdCreateCompound* THIS, RogueClassToken* _auto_718_0, RogueClassType* _auto_719_1, RogueClassCmdArgs* _auto_720_2 )
{
  THIS->args = _auto_720_2;
  THIS->_of_type = _auto_719_1;
  THIS->t = _auto_718_0;
  return (RogueClassCmdCreateCompound*)(THIS);
}

RogueString* RogueCmdLiteralLogical__type_name( RogueClassCmdLiteralLogical* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1041]);
}

RogueClassCmd* RogueCmdLiteralLogical__clone__CloneArgs( RogueClassCmdLiteralLogical* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, THIS->value ))))));
}

RogueClassCmd* RogueCmdLiteralLogical__resolve__Scope( RogueClassCmdLiteralLogical* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralLogical__type( RogueClassCmdLiteralLogical* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

void RogueCmdLiteralLogical__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralLogical* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (THIS->value)
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[169] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[158] );
  }
}

RogueClassCmdLiteralLogical* RogueCmdLiteralLogical__init_object( RogueClassCmdLiteralLogical* THIS )
{
  return (RogueClassCmdLiteralLogical*)(THIS);
}

RogueClassCmdLiteralLogical* RogueCmdLiteralLogical__init__Token_Logical( RogueClassCmdLiteralLogical* THIS, RogueClassToken* _auto_721_0, RogueLogical _auto_722_1 )
{
  THIS->value = _auto_722_1;
  THIS->t = _auto_721_0;
  return (RogueClassCmdLiteralLogical*)(THIS);
}

RogueString* RogueCmdLiteralString__type_name( RogueClassCmdLiteralString* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1042]);
}

RogueClassCmd* RogueCmdLiteralString__clone__CloneArgs( RogueClassCmdLiteralString* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Int32( ((RogueClassCmdLiteralString*)ROGUE_CREATE_OBJECT(CmdLiteralString)), THIS->t, THIS->value, THIS->index ))))));
}

RogueClassCmd* RogueCmdLiteralString__resolve__Scope( RogueClassCmdLiteralString* THIS, RogueClassScope* scope_0 )
{
  RogueType__resolve( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralString__type( RogueClassCmdLiteralString* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String);
}

void RogueCmdLiteralString__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralString* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!!(THIS->value))
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Int32( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[581] ))), THIS->index ))), Rogue_literal_strings[26] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[470] );
  }
}

void RogueCmdLiteralString__trace_used_code( RogueClassCmdLiteralString* THIS )
{
  THIS->index = ((RogueProgram__add_literal_string__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->value )));
}

void RogueCmdLiteralString__update_this_type__Scope( RogueClassCmdLiteralString* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdLiteralString* RogueCmdLiteralString__init_object( RogueClassCmdLiteralString* THIS )
{
  return (RogueClassCmdLiteralString*)(THIS);
}

RogueClassCmdLiteralString* RogueCmdLiteralString__init__Token_String_Int32( RogueClassCmdLiteralString* THIS, RogueClassToken* _auto_733_0, RogueString* _auto_734_1, RogueInt32 _auto_735_2 )
{
  THIS->index = _auto_735_2;
  THIS->value = _auto_734_1;
  THIS->t = _auto_733_0;
  return (RogueClassCmdLiteralString*)(THIS);
}

RogueString* RogueCmdWriteGlobal__type_name( RogueClassCmdWriteGlobal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[790]);
}

RogueClassCmd* RogueCmdWriteGlobal__clone__CloneArgs( RogueClassCmdWriteGlobal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdWriteGlobal__init__Token_Property_Cmd( ((RogueClassCmdWriteGlobal*)ROGUE_CREATE_OBJECT(CmdWriteGlobal)), THIS->t, THIS->global_info, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdWriteGlobal__resolve__Scope( RogueClassCmdWriteGlobal* THIS, RogueClassScope* scope_0 )
{
  THIS->new_value = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)((call_ROGUEM56( 25, (RogueClassCmd*)(THIS->new_value), scope_0 ))), THIS->global_info->_type, scope_0 ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdWriteGlobal__write_cpp__CPPWriter_Logical( RogueClassCmdWriteGlobal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] ))), THIS->global_info->type_context->cpp_name ))), Rogue_literal_strings[406] );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, THIS->global_info->cpp_name ))), Rogue_literal_strings[509] );
  if (((void*)THIS->global_info->_type) == ((void*)(call_ROGUEM64( 29, (RogueClassCmd*)(THIS->new_value) ))))
  {
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->new_value), writer_0, false );
  }
  else
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[505] ))), THIS->global_info->_type ))), Rogue_literal_strings[67] );
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->new_value), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
  }
}

void RogueCmdWriteGlobal__trace_used_code( RogueClassCmdWriteGlobal* THIS )
{
  RogueType__trace_used_code( THIS->global_info->type_context );
  RogueType__trace_used_code( THIS->global_info->_type );
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->new_value) );
}

void RogueCmdWriteGlobal__update_this_type__Scope( RogueClassCmdWriteGlobal* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->new_value), scope_0 );
}

RogueClassCmdWriteGlobal* RogueCmdWriteGlobal__init_object( RogueClassCmdWriteGlobal* THIS )
{
  return (RogueClassCmdWriteGlobal*)(THIS);
}

RogueClassCmdWriteGlobal* RogueCmdWriteGlobal__init__Token_Property_Cmd( RogueClassCmdWriteGlobal* THIS, RogueClassToken* _auto_744_0, RogueClassProperty* _auto_745_1, RogueClassCmd* _auto_746_2 )
{
  THIS->new_value = _auto_746_2;
  THIS->global_info = _auto_745_1;
  THIS->t = _auto_744_0;
  return (RogueClassCmdWriteGlobal*)(THIS);
}

RogueString* RogueCmdWriteProperty__type_name( RogueClassCmdWriteProperty* THIS )
{
  return (RogueString*)(Rogue_literal_strings[791]);
}

RogueClassCmd* RogueCmdWriteProperty__clone__CloneArgs( RogueClassCmdWriteProperty* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->context), clone_args_0 )), THIS->property_info, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdWriteProperty__resolve__Scope( RogueClassCmdWriteProperty* THIS, RogueClassScope* scope_0 )
{
  THIS->context = ((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->context), scope_0 )) )));
  if (((RogueType__is_aspect( (call_ROGUEM64( 29, (RogueClassCmd*)(THIS->context) )) ))))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueString__operatorPLUS__String( Rogue_literal_strings[871], ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[872] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->property_info->name ))) ))), Rogue_literal_strings[873] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->property_info->name ))) ))), Rogue_literal_strings[874] ))) ))) ))) ))));
  }
  THIS->new_value = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)(((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->new_value), scope_0 )) )))), THIS->property_info->_type, scope_0 ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdWriteProperty__write_cpp__CPPWriter_Logical( RogueClassCmdWriteProperty* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->context), writer_0, false );
  RogueCPPWriter__print_access_operator__Type( writer_0, (call_ROGUEM64( 29, (RogueClassCmd*)(THIS->context) )) );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, THIS->property_info->cpp_name ))), Rogue_literal_strings[509] );
  if (((void*)THIS->property_info->_type) == ((void*)(call_ROGUEM64( 29, (RogueClassCmd*)(THIS->new_value) ))))
  {
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->new_value), writer_0, false );
  }
  else
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[505] ))), THIS->property_info->_type ))), Rogue_literal_strings[67] );
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->new_value), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
  }
}

void RogueCmdWriteProperty__trace_used_code( RogueClassCmdWriteProperty* THIS )
{
  if (!!(THIS->context))
  {
    call_ROGUEM63( 31, (RogueClassCmd*)(THIS->context) );
  }
  RogueType__trace_used_code( THIS->property_info->type_context );
  RogueType__trace_used_code( THIS->property_info->_type );
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->new_value) );
}

void RogueCmdWriteProperty__update_this_type__Scope( RogueClassCmdWriteProperty* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->context))
  {
    call_ROGUEM60( 32, (RogueClassCmd*)(THIS->context), scope_0 );
  }
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->new_value), scope_0 );
}

RogueClassCmdWriteProperty* RogueCmdWriteProperty__init_object( RogueClassCmdWriteProperty* THIS )
{
  return (RogueClassCmdWriteProperty*)(THIS);
}

RogueClassCmdWriteProperty* RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( RogueClassCmdWriteProperty* THIS, RogueClassToken* _auto_747_0, RogueClassCmd* _auto_748_1, RogueClassProperty* _auto_749_2, RogueClassCmd* _auto_750_3 )
{
  THIS->new_value = _auto_750_3;
  THIS->property_info = _auto_749_2;
  THIS->context = _auto_748_1;
  THIS->t = _auto_747_0;
  return (RogueClassCmdWriteProperty*)(THIS);
}

RogueString* RogueDefinitionArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[738]);
}

RogueString* RogueNativePropertyArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[739]);
}

RogueString* RogueString_TypeTableEntryList__to_String( RogueTableEntry_of_String_TypeList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_TypeList* _auto_1914_2 = (THIS);
    RogueInt32 _auto_1915_3 = (0);
    for (;_auto_1915_3 < _auto_1914_2->count;++_auto_1915_3)
    {
      RogueClassString_TypeTableEntry* value_4 = (((RogueClassString_TypeTableEntry*)(_auto_1914_2->data->objects[_auto_1915_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_TypeTableEntryList__type_name( RogueTableEntry_of_String_TypeList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[699]);
}

RogueTableEntry_of_String_TypeList* RogueString_TypeTableEntryList__init_object( RogueTableEntry_of_String_TypeList* THIS )
{
  return (RogueTableEntry_of_String_TypeList*)(THIS);
}

RogueTableEntry_of_String_TypeList* RogueString_TypeTableEntryList__init__Int32_String_TypeTableEntry( RogueTableEntry_of_String_TypeList* THIS, RogueInt32 initial_capacity_0, RogueClassString_TypeTableEntry* initial_value_1 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_TypeTableEntry*), true );
  {
    RogueInt32 i_2 = (1);
    RogueInt32 _auto_837_3 = (initial_capacity_0);
    for (;i_2 <= _auto_837_3;++i_2)
    {
      RogueString_TypeTableEntryList__add__String_TypeTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_TypeList*)(THIS);
}

RogueTableEntry_of_String_TypeList* RogueString_TypeTableEntryList__add__String_TypeTableEntry( RogueTableEntry_of_String_TypeList* THIS, RogueClassString_TypeTableEntry* value_0 )
{
  ((RogueString_TypeTableEntryList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_TypeList*)(THIS);
}

RogueInt32 RogueString_TypeTableEntryList__capacity( RogueTableEntry_of_String_TypeList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_TypeList* RogueString_TypeTableEntryList__reserve__Int32( RogueTableEntry_of_String_TypeList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassString_TypeTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueString_TypeTableEntryList__capacity( THIS ))) + ((RogueString_TypeTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassString_TypeTableEntry*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_TypeList*)(THIS);
}

RogueString* RogueString_TypeTableEntry__type_name( RogueClassString_TypeTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[650]);
}

RogueClassString_TypeTableEntry* RogueString_TypeTableEntry__init__String_Type_Int32( RogueClassString_TypeTableEntry* THIS, RogueString* _key_0, RogueClassType* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_TypeTableEntry*)(THIS);
}

RogueClassString_TypeTableEntry* RogueString_TypeTableEntry__init_object( RogueClassString_TypeTableEntry* THIS )
{
  return (RogueClassString_TypeTableEntry*)(THIS);
}

RogueString* RogueString_TypeTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[740]);
}

RogueString* RogueString_Int32TableEntryList__to_String( RogueTableEntry_of_String_Int32List* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_Int32List* _auto_1946_2 = (THIS);
    RogueInt32 _auto_1947_3 = (0);
    for (;_auto_1947_3 < _auto_1946_2->count;++_auto_1947_3)
    {
      RogueClassString_Int32TableEntry* value_4 = (((RogueClassString_Int32TableEntry*)(_auto_1946_2->data->objects[_auto_1947_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_Int32TableEntryList__type_name( RogueTableEntry_of_String_Int32List* THIS )
{
  return (RogueString*)(Rogue_literal_strings[700]);
}

RogueTableEntry_of_String_Int32List* RogueString_Int32TableEntryList__init_object( RogueTableEntry_of_String_Int32List* THIS )
{
  return (RogueTableEntry_of_String_Int32List*)(THIS);
}

RogueTableEntry_of_String_Int32List* RogueString_Int32TableEntryList__init__Int32_String_Int32TableEntry( RogueTableEntry_of_String_Int32List* THIS, RogueInt32 initial_capacity_0, RogueClassString_Int32TableEntry* initial_value_1 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_Int32TableEntry*), true );
  {
    RogueInt32 i_2 = (1);
    RogueInt32 _auto_844_3 = (initial_capacity_0);
    for (;i_2 <= _auto_844_3;++i_2)
    {
      RogueString_Int32TableEntryList__add__String_Int32TableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_Int32List*)(THIS);
}

RogueTableEntry_of_String_Int32List* RogueString_Int32TableEntryList__add__String_Int32TableEntry( RogueTableEntry_of_String_Int32List* THIS, RogueClassString_Int32TableEntry* value_0 )
{
  ((RogueString_Int32TableEntryList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_Int32List*)(THIS);
}

RogueInt32 RogueString_Int32TableEntryList__capacity( RogueTableEntry_of_String_Int32List* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_Int32List* RogueString_Int32TableEntryList__reserve__Int32( RogueTableEntry_of_String_Int32List* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassString_Int32TableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueString_Int32TableEntryList__capacity( THIS ))) + ((RogueString_Int32TableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassString_Int32TableEntry*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_Int32List*)(THIS);
}

RogueString* RogueString_Int32TableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[741]);
}

RogueString* RogueString_StringListTableEntryList__to_String( RogueTableEntry_of_String_StringListList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_StringListList* _auto_1978_2 = (THIS);
    RogueInt32 _auto_1979_3 = (0);
    for (;_auto_1979_3 < _auto_1978_2->count;++_auto_1979_3)
    {
      RogueClassString_StringListTableEntry* value_4 = (((RogueClassString_StringListTableEntry*)(_auto_1978_2->data->objects[_auto_1979_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_StringListTableEntryList__type_name( RogueTableEntry_of_String_StringListList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[701]);
}

RogueTableEntry_of_String_StringListList* RogueString_StringListTableEntryList__init_object( RogueTableEntry_of_String_StringListList* THIS )
{
  return (RogueTableEntry_of_String_StringListList*)(THIS);
}

RogueTableEntry_of_String_StringListList* RogueString_StringListTableEntryList__init__Int32_String_StringListTableEntry( RogueTableEntry_of_String_StringListList* THIS, RogueInt32 initial_capacity_0, RogueClassString_StringListTableEntry* initial_value_1 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_StringListTableEntry*), true );
  {
    RogueInt32 i_2 = (1);
    RogueInt32 _auto_851_3 = (initial_capacity_0);
    for (;i_2 <= _auto_851_3;++i_2)
    {
      RogueString_StringListTableEntryList__add__String_StringListTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_StringListList*)(THIS);
}

RogueTableEntry_of_String_StringListList* RogueString_StringListTableEntryList__add__String_StringListTableEntry( RogueTableEntry_of_String_StringListList* THIS, RogueClassString_StringListTableEntry* value_0 )
{
  ((RogueString_StringListTableEntryList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_StringListList*)(THIS);
}

RogueInt32 RogueString_StringListTableEntryList__capacity( RogueTableEntry_of_String_StringListList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_StringListList* RogueString_StringListTableEntryList__reserve__Int32( RogueTableEntry_of_String_StringListList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassString_StringListTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueString_StringListTableEntryList__capacity( THIS ))) + ((RogueString_StringListTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassString_StringListTableEntry*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_StringListList*)(THIS);
}

RogueString* RogueString_StringListTableEntry__type_name( RogueClassString_StringListTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[651]);
}

RogueClassString_StringListTableEntry* RogueString_StringListTableEntry__init__String_StringList_Int32( RogueClassString_StringListTableEntry* THIS, RogueString* _key_0, RogueStringList* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_StringListTableEntry*)(THIS);
}

RogueClassString_StringListTableEntry* RogueString_StringListTableEntry__init_object( RogueClassString_StringListTableEntry* THIS )
{
  return (RogueClassString_StringListTableEntry*)(THIS);
}

RogueString* RogueString_StringListTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[742]);
}

RogueString* RogueInt32_TemplateTableEntryList__to_String( RogueTableEntry_of_Int32_TemplateList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_Int32_TemplateList* _auto_2010_2 = (THIS);
    RogueInt32 _auto_2011_3 = (0);
    for (;_auto_2011_3 < _auto_2010_2->count;++_auto_2011_3)
    {
      RogueClassInt32_TemplateTableEntry* value_4 = (((RogueClassInt32_TemplateTableEntry*)(_auto_2010_2->data->objects[_auto_2011_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueInt32_TemplateTableEntryList__type_name( RogueTableEntry_of_Int32_TemplateList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[702]);
}

RogueTableEntry_of_Int32_TemplateList* RogueInt32_TemplateTableEntryList__init_object( RogueTableEntry_of_Int32_TemplateList* THIS )
{
  return (RogueTableEntry_of_Int32_TemplateList*)(THIS);
}

RogueTableEntry_of_Int32_TemplateList* RogueInt32_TemplateTableEntryList__init__Int32_Int32_TemplateTableEntry( RogueTableEntry_of_Int32_TemplateList* THIS, RogueInt32 initial_capacity_0, RogueClassInt32_TemplateTableEntry* initial_value_1 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassInt32_TemplateTableEntry*), true );
  {
    RogueInt32 i_2 = (1);
    RogueInt32 _auto_858_3 = (initial_capacity_0);
    for (;i_2 <= _auto_858_3;++i_2)
    {
      RogueInt32_TemplateTableEntryList__add__Int32_TemplateTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_Int32_TemplateList*)(THIS);
}

RogueTableEntry_of_Int32_TemplateList* RogueInt32_TemplateTableEntryList__add__Int32_TemplateTableEntry( RogueTableEntry_of_Int32_TemplateList* THIS, RogueClassInt32_TemplateTableEntry* value_0 )
{
  ((RogueInt32_TemplateTableEntryList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_Int32_TemplateList*)(THIS);
}

RogueInt32 RogueInt32_TemplateTableEntryList__capacity( RogueTableEntry_of_Int32_TemplateList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_Int32_TemplateList* RogueInt32_TemplateTableEntryList__reserve__Int32( RogueTableEntry_of_Int32_TemplateList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassInt32_TemplateTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueInt32_TemplateTableEntryList__capacity( THIS ))) + ((RogueInt32_TemplateTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassInt32_TemplateTableEntry*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_Int32_TemplateList*)(THIS);
}

RogueString* RogueInt32_TemplateTableEntry__type_name( RogueClassInt32_TemplateTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[652]);
}

RogueClassInt32_TemplateTableEntry* RogueInt32_TemplateTableEntry__init__Int32_Template_Int32( RogueClassInt32_TemplateTableEntry* THIS, RogueInt32 _key_0, RogueClassTemplate* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassInt32_TemplateTableEntry*)(THIS);
}

RogueClassInt32_TemplateTableEntry* RogueInt32_TemplateTableEntry__init_object( RogueClassInt32_TemplateTableEntry* THIS )
{
  return (RogueClassInt32_TemplateTableEntry*)(THIS);
}

RogueString* RogueInt32_TemplateTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[743]);
}

RogueString* RogueCmdCastToType__type_name( RogueClassCmdCastToType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1075]);
}

RogueClassCmd* RogueCmdCastToType__clone__CloneArgs( RogueClassCmdCastToType* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCastToType*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdCastToType*)ROGUE_CREATE_OBJECT(CmdCastToType))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->operand), clone_args_0 )), THIS->_target_type ))))))));
}

RogueClassCmd* RogueCmdCastToType__resolve__Scope( RogueClassCmdCastToType* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->operand), scope_0 ));
  RogueType__organize__Scope( THIS->_target_type, scope_0 );
  if (((void*)(call_ROGUEM64( 22, (RogueClassCmd*)(THIS->operand) ))) == ((void*)THIS->_target_type))
  {
    return (RogueClassCmd*)(THIS->operand);
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdCastToType__write_cpp__CPPWriter_Logical( RogueClassCmdCastToType* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[505] ))), THIS->_target_type ))), Rogue_literal_strings[944] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->operand), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[462] );
}

RogueClassCmdCastToType* RogueCmdCastToType__init_object( RogueClassCmdCastToType* THIS )
{
  return (RogueClassCmdCastToType*)(THIS);
}

RogueString* RogueCmdTypeOperator__type_name( RogueClassCmdTypeOperator* THIS )
{
  return (RogueString*)(Rogue_literal_strings[792]);
}

RogueClassType* Rogue_CmdTypeOperator__type( RogueClassCmdTypeOperator* THIS )
{
  return (RogueClassType*)(THIS->_target_type);
}

void RogueCmdTypeOperator__trace_used_code( RogueClassCmdTypeOperator* THIS )
{
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->operand) );
  RogueType__trace_used_code( THIS->_target_type );
}

void RogueCmdTypeOperator__update_this_type__Scope( RogueClassCmdTypeOperator* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->operand), scope_0 );
}

RogueClassCmdTypeOperator* RogueCmdTypeOperator__init_object( RogueClassCmdTypeOperator* THIS )
{
  return (RogueClassCmdTypeOperator*)(THIS);
}

RogueClassCmdTypeOperator* RogueCmdTypeOperator__init__Token_Cmd_Type( RogueClassCmdTypeOperator* THIS, RogueClassToken* _auto_869_0, RogueClassCmd* _auto_870_1, RogueClassType* _auto_871_2 )
{
  THIS->_target_type = _auto_871_2;
  THIS->operand = _auto_870_1;
  THIS->t = _auto_869_0;
  return (RogueClassCmdTypeOperator*)(THIS);
}

RogueString* RogueCmdLogicalize__type_name( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1079]);
}

RogueClassCmd* RogueCmdLogicalize__clone__CloneArgs( RogueClassCmdLogicalize* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalize*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalize*)ROGUE_CREATE_OBJECT(CmdLogicalize))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->operand), clone_args_0 )) ))))))));
}

RogueClassCmd* RogueCmdLogicalize__resolve__Scope( RogueClassCmdLogicalize* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->operand), scope_0 ));
  if ((call_ROGUEM64( 22, (RogueClassCmd*)(THIS->operand) ))->is_optional)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLogicalizeOptionalValue__init__Token_Cmd_Logical( ((RogueClassCmdLogicalizeOptionalValue*)ROGUE_CREATE_OBJECT(CmdLogicalizeOptionalValue)), THIS->t, THIS->operand, true ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassType* Rogue_CmdLogicalize__type( RogueClassCmdLogicalize* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

RogueClassCmdLogicalize* RogueCmdLogicalize__init_object( RogueClassCmdLogicalize* THIS )
{
  return (RogueClassCmdLogicalize*)(THIS);
}

RogueString* RogueCmdLogicalize__prefix_symbol( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_literal_strings[0]);
}

RogueString* RogueCmdLogicalize__fn_name( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1085]);
}

RogueClassCmd* RogueCmdLogicalize__resolve_for_literal_operand__Scope( RogueClassCmdLogicalize* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = ((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->operand), scope_0 )) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdLogicalize__suffix_symbol( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_literal_strings[204]);
}

RogueString* RogueCmdLogicalize__cpp_prefix_symbol( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_literal_strings[989]);
}

RogueString* RogueCmdLogicalize__cpp_suffix_symbol( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_literal_strings[0]);
}

RogueString* RogueCmdUnary__type_name( RogueClassCmdUnary* THIS )
{
  return (RogueString*)(Rogue_literal_strings[793]);
}

RogueClassCmd* RogueCmdUnary__resolve__Scope( RogueClassCmdUnary* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = ((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->operand), scope_0 )) )));
  if ((call_ROGUEM61( 18, (RogueClassCmd*)(THIS->operand) )))
  {
    return (RogueClassCmd*)((call_ROGUEM357( 37, (RogueClassCmdUnary*)(THIS), scope_0 )));
  }
  else
  {
    return (RogueClassCmd*)(((RogueCmdUnary__resolve_for_operand_type__Scope_Type( THIS, scope_0, (call_ROGUEM64( 22, (RogueClassCmd*)(THIS->operand) )) ))));
  }
}

RogueClassType* Rogue_CmdUnary__type( RogueClassCmdUnary* THIS )
{
  return (RogueClassType*)((call_ROGUEM64( 29, (RogueClassCmd*)(THIS->operand) )));
}

void RogueCmdUnary__write_cpp__CPPWriter_Logical( RogueClassCmdUnary* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, (call_ROGUEM356( 40, (RogueClassCmdUnary*)(THIS) )) ))), Rogue_literal_strings[66] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->operand), writer_0, false );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] ))), (call_ROGUEM356( 41, (RogueClassCmdUnary*)(THIS) )) );
}

void RogueCmdUnary__trace_used_code( RogueClassCmdUnary* THIS )
{
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->operand) );
}

void RogueCmdUnary__update_this_type__Scope( RogueClassCmdUnary* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->operand), scope_0 );
}

RogueClassCmdUnary* RogueCmdUnary__init_object( RogueClassCmdUnary* THIS )
{
  return (RogueClassCmdUnary*)(THIS);
}

RogueClassCmdUnary* RogueCmdUnary__init__Token_Cmd( RogueClassCmdUnary* THIS, RogueClassToken* _auto_872_0, RogueClassCmd* _auto_873_1 )
{
  THIS->operand = _auto_873_1;
  THIS->t = _auto_872_0;
  return (RogueClassCmdUnary*)(THIS);
}

RogueString* RogueCmdUnary__prefix_symbol( RogueClassCmdUnary* THIS )
{
  return (RogueString*)(Rogue_literal_strings[0]);
}

RogueString* RogueCmdUnary__fn_name( RogueClassCmdUnary* THIS )
{
  return (RogueString*)(((RogueString*)(NULL)));
}

RogueClassCmd* RogueCmdUnary__resolve_for_literal_operand__Scope( RogueClassCmdUnary* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdUnary__resolve_for_operand_type__Scope_Type( RogueClassCmdUnary* THIS, RogueClassScope* scope_0, RogueClassType* operand_type_1 )
{
  RogueString* name_2 = ((call_ROGUEM356( 36, (RogueClassCmdUnary*)(THIS) )));
  if (!!(name_2))
  {
    if (((RogueType__has_method_named__String( operand_type_1, name_2 ))))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->operand, name_2 ))), scope_0 ))));
    }
    if (!(((RogueType__is_primitive( operand_type_1 )))))
    {
      ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[864] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(operand_type_1)) ))) ))), Rogue_literal_strings[51] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], name_2 ))) ))), Rogue_literal_strings[875] ))) ))) ))));
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdUnary__suffix_symbol( RogueClassCmdUnary* THIS )
{
  return (RogueString*)(Rogue_literal_strings[0]);
}

RogueString* RogueCmdUnary__cpp_prefix_symbol( RogueClassCmdUnary* THIS )
{
  return (RogueString*)((call_ROGUEM356( 35, (RogueClassCmdUnary*)(THIS) )));
}

RogueString* RogueCmdUnary__cpp_suffix_symbol( RogueClassCmdUnary* THIS )
{
  return (RogueString*)((call_ROGUEM356( 39, (RogueClassCmdUnary*)(THIS) )));
}

RogueString* RogueCmdCreateOptionalValue__type_name( RogueClassCmdCreateOptionalValue* THIS )
{
  return (RogueString*)(Rogue_literal_strings[794]);
}

RogueClassCmd* RogueCmdCreateOptionalValue__clone__CloneArgs( RogueClassCmdCreateOptionalValue* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateOptionalValue__init__Token_Type_Cmd( ((RogueClassCmdCreateOptionalValue*)ROGUE_CREATE_OBJECT(CmdCreateOptionalValue)), THIS->t, THIS->_of_type, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->value, clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdCreateOptionalValue__resolve__Scope( RogueClassCmdCreateOptionalValue* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( THIS->_of_type, scope_0 );
  if (!!(THIS->value))
  {
    THIS->value = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->value), scope_0 ));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdCreateOptionalValue__type( RogueClassCmdCreateOptionalValue* THIS )
{
  return (RogueClassType*)(THIS->_of_type);
}

void RogueCmdCreateOptionalValue__write_cpp__CPPWriter_Logical( RogueClassCmdCreateOptionalValue* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (((RogueType__is_reference( THIS->_of_type->_element_type ))))
  {
    if (!!(THIS->value))
    {
      call_ROGUEM68( 30, (RogueClassCmd*)(THIS->value), writer_0, false );
    }
    else
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[953] );
    }
  }
  else
  {
    RogueCPPWriter__print__Type( writer_0, THIS->_of_type );
    if (!!(THIS->value))
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[473] );
      call_ROGUEM68( 30, (RogueClassCmd*)(THIS->value), writer_0, false );
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[503] );
    }
    else
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[471] );
    }
  }
}

void RogueCmdCreateOptionalValue__trace_used_code( RogueClassCmdCreateOptionalValue* THIS )
{
  RogueType__trace_used_code( THIS->_of_type );
  if (!!(THIS->value))
  {
    call_ROGUEM63( 31, (RogueClassCmd*)(THIS->value) );
  }
}

void RogueCmdCreateOptionalValue__update_this_type__Scope( RogueClassCmdCreateOptionalValue* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->value))
  {
    call_ROGUEM60( 32, (RogueClassCmd*)(THIS->value), scope_0 );
  }
}

RogueClassCmdCreateOptionalValue* RogueCmdCreateOptionalValue__init_object( RogueClassCmdCreateOptionalValue* THIS )
{
  return (RogueClassCmdCreateOptionalValue*)(THIS);
}

RogueClassCmdCreateOptionalValue* RogueCmdCreateOptionalValue__init__Token_Type_Cmd( RogueClassCmdCreateOptionalValue* THIS, RogueClassToken* _auto_874_0, RogueClassType* _auto_875_1, RogueClassCmd* _auto_876_2 )
{
  THIS->value = _auto_876_2;
  THIS->_of_type = _auto_875_1;
  THIS->t = _auto_874_0;
  return (RogueClassCmdCreateOptionalValue*)(THIS);
}

RogueString* RogueCmdReadSingleton__type_name( RogueClassCmdReadSingleton* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1118]);
}

RogueClassCmd* RogueCmdReadSingleton__clone__CloneArgs( RogueClassCmdReadSingleton* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadSingleton__init__Token_Type( ((RogueClassCmdReadSingleton*)ROGUE_CREATE_OBJECT(CmdReadSingleton)), THIS->t, THIS->_of_type ))))));
}

void RogueCmdReadSingleton__require_type_context( RogueClassCmdReadSingleton* THIS )
{
}

RogueClassCmd* RogueCmdReadSingleton__resolve__Scope( RogueClassCmdReadSingleton* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( THIS->_of_type, scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdReadSingleton__type( RogueClassCmdReadSingleton* THIS )
{
  return (RogueClassType*)(THIS->_of_type);
}

void RogueCmdReadSingleton__write_cpp__CPPWriter_Logical( RogueClassCmdReadSingleton* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(((RogueType__is_singleton( THIS->_of_type )))))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->_of_type->name ))) ))), Rogue_literal_strings[954] ))) ))) ))));
  }
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[505] ))), THIS->_of_type->cpp_class_name );
  if (((RogueType__is_reference( THIS->_of_type ))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[212] );
  }
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[955] ))), THIS->_of_type->cpp_name ))), Rogue_literal_strings[462] );
}

void RogueCmdReadSingleton__trace_used_code( RogueClassCmdReadSingleton* THIS )
{
  RogueType__trace_used_code( THIS->_of_type );
}

void RogueCmdReadSingleton__update_this_type__Scope( RogueClassCmdReadSingleton* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdReadSingleton* RogueCmdReadSingleton__init_object( RogueClassCmdReadSingleton* THIS )
{
  return (RogueClassCmdReadSingleton*)(THIS);
}

RogueClassCmdReadSingleton* RogueCmdReadSingleton__init__Token_Type( RogueClassCmdReadSingleton* THIS, RogueClassToken* _auto_919_0, RogueClassType* _auto_920_1 )
{
  THIS->_of_type = _auto_920_1;
  THIS->t = _auto_919_0;
  return (RogueClassCmdReadSingleton*)(THIS);
}

RogueString* RogueCmdFlagArgArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[744]);
}

RogueString* RogueCmdCallInlineNativeRoutine__type_name( RogueClassCmdCallInlineNativeRoutine* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1148]);
}

RogueClassCmd* RogueCmdCallInlineNativeRoutine__clone__CloneArgs( RogueClassCmdCallInlineNativeRoutine* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCallInlineNativeRoutine__init__Token_Method_CmdArgs( ((RogueClassCmdCallInlineNativeRoutine*)ROGUE_CREATE_OBJECT(CmdCallInlineNativeRoutine)), THIS->t, THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

RogueClassType* Rogue_CmdCallInlineNativeRoutine__type( RogueClassCmdCallInlineNativeRoutine* THIS )
{
  return (RogueClassType*)(THIS->method_info->_return_type);
}

RogueClassCmdCallInlineNativeRoutine* RogueCmdCallInlineNativeRoutine__init_object( RogueClassCmdCallInlineNativeRoutine* THIS )
{
  return (RogueClassCmdCallInlineNativeRoutine*)(THIS);
}

RogueClassCmdCallInlineNativeRoutine* RogueCmdCallInlineNativeRoutine__init__Token_Method_CmdArgs( RogueClassCmdCallInlineNativeRoutine* THIS, RogueClassToken* _auto_930_0, RogueClassMethod* _auto_931_1, RogueClassCmdArgs* _auto_932_2 )
{
  THIS->args = _auto_932_2;
  THIS->method_info = _auto_931_1;
  THIS->t = _auto_930_0;
  return (RogueClassCmdCallInlineNativeRoutine*)(THIS);
}

RogueString* RogueCmdCallInlineNative__to_String( RogueClassCmdCallInlineNative* THIS )
{
  return (RogueString*)(THIS->method_info->signature);
}

RogueString* RogueCmdCallInlineNative__type_name( RogueClassCmdCallInlineNative* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1140]);
}

RogueClassCmd* RogueCmdCallInlineNative__resolve_adjust__Scope_Int32( RogueClassCmdCallInlineNative* THIS, RogueClassScope* scope_0, RogueInt32 _auto_929_1 )
{
  THIS->adjust_delta = _auto_929_1;
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdCallInlineNative__write_cpp__CPPWriter_Logical( RogueClassCmdCallInlineNative* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  switch (THIS->adjust_delta)
  {
    case -1:
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[4] );
      break;
    }
    case 1:
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[203] );
      break;
    }
  }
  RogueString* st_2 = (THIS->method_info->native_code);
  RogueOptionalInt32 dollar_3 = (((RogueString__locate__Character_OptionalInt32( st_2, (RogueCharacter)'$', RogueOptionalInt32() ))));
  while (dollar_3.exists)
  {
    RogueCPPWriter__print__String( writer_0, ((RogueString__from__Int32_Int32( st_2, 0, (dollar_3.value - 1) ))) );
    st_2 = ((RogueString*)((RogueString__from__Int32( st_2, (dollar_3.value + 1) ))));
    RogueString* name_4 = 0;
    RogueClassLocal* param_5 = 0;
    if (((RogueString__begins_with__Character( st_2, (RogueCharacter)'(' ))))
    {
      name_4 = ((RogueString*)((RogueString__from__Int32( ((RogueString__before_first__Character( st_2, (RogueCharacter)')' ))), 1 ))));
      st_2 = ((RogueString*)((RogueString__after_first__Character( st_2, (RogueCharacter)')' ))));
      {
        RogueLocalList* _auto_2047_7 = (THIS->method_info->parameters);
        RogueInt32 _auto_2048_8 = (0);
        for (;_auto_2048_8 < _auto_2047_7->count;++_auto_2048_8)
        {
          RogueClassLocal* p_9 = (((RogueClassLocal*)(_auto_2047_7->data->objects[_auto_2048_8])));
          if (((RogueString__operatorEQUALSEQUALS__String( p_9->name, name_4 ))))
          {
            param_5 = ((RogueClassLocal*)p_9);
            goto _auto_2049;
          }
        }
      }
      _auto_2049:;
    }
    else
    {
      RogueClassLocal* best_match_6 = 0;
      {
        RogueLocalList* _auto_2050_10 = (THIS->method_info->parameters);
        RogueInt32 _auto_2051_11 = (0);
        for (;_auto_2051_11 < _auto_2050_10->count;++_auto_2051_11)
        {
          RogueClassLocal* p_12 = (((RogueClassLocal*)(_auto_2050_10->data->objects[_auto_2051_11])));
          if (((RogueString__begins_with__String( st_2, p_12->name ))))
          {
            if ((((void*)best_match_6) == ((void*)NULL) || p_12->name->count > best_match_6->name->count))
            {
              best_match_6 = ((RogueClassLocal*)p_12);
            }
          }
        }
      }
      if (!!(best_match_6))
      {
        param_5 = ((RogueClassLocal*)best_match_6);
        name_4 = ((RogueString*)param_5->name);
        st_2 = ((RogueString*)((RogueString__from__Int32( st_2, best_match_6->name->count ))));
      }
      else if (((RogueString__begins_with__String( st_2, Rogue_literal_strings[168] ))))
      {
        call_ROGUEM387( 35, (RogueClassCmdCallInlineNative*)(THIS), writer_0 );
        st_2 = ((RogueString*)((RogueString__from__Int32( st_2, 4 ))));
      }
    }
    if (!!(param_5))
    {
      call_ROGUEM68( 30, (RogueClassCmd*)(((RogueClassCmd*)(THIS->args->data->objects[param_5->index]))), writer_0, false );
    }
    else if (!!(name_4))
    {
      RogueCPPWriter__print_native_marker__Token_Type_Method_String( writer_0, THIS->t, THIS->method_info->type_context, THIS->method_info, name_4 );
    }
    dollar_3 = ((RogueOptionalInt32)((RogueString__locate__Character_OptionalInt32( st_2, (RogueCharacter)'$', RogueOptionalInt32() ))));
  }
  RogueCPPWriter__print__String( writer_0, st_2 );
}

RogueClassCmdCallInlineNative* RogueCmdCallInlineNative__init_object( RogueClassCmdCallInlineNative* THIS )
{
  return (RogueClassCmdCallInlineNative*)(THIS);
}

void RogueCmdCallInlineNative__print_this__CPPWriter( RogueClassCmdCallInlineNative* THIS, RogueClassCPPWriter* writer_0 )
{
  ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[956] ))));
}

RogueString* RogueCmdCall__type_name( RogueClassCmdCall* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1119]);
}

RogueClassType* Rogue_CmdCall__require_type( RogueClassCmdCall* THIS )
{
  RogueClassType* result_0 = ((call_ROGUEM379( 29, (RogueClassCmdCall*)(THIS) )));
  if (((void*)result_0) == ((void*)NULL))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[1011] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(THIS->method_info->type_context)) ))) ))), Rogue_literal_strings[51] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->method_info->signature ))) ))), Rogue_literal_strings[1012] ))) ))) ))));
  }
  return (RogueClassType*)(result_0);
}

RogueClassCmd* RogueCmdCall__resolve__Scope( RogueClassCmdCall* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->context))
  {
    THIS->context = ((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->context), scope_0 )) )));
  }
  RogueCmdArgs__resolve__Scope( THIS->args, scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdCall__type( RogueClassCmdCall* THIS )
{
  return (RogueClassType*)(THIS->method_info->_return_type);
}

void RogueCmdCall__trace_used_code( RogueClassCmdCall* THIS )
{
  if (!!(THIS->context))
  {
    call_ROGUEM63( 31, (RogueClassCmd*)(THIS->context) );
  }
  RogueMethod__trace_used_code( THIS->method_info );
  {
    RogueClassCmdArgs* _auto_2052_0 = (THIS->args);
    RogueInt32 _auto_2053_1 = (0);
    for (;_auto_2053_1 < _auto_2052_0->count;++_auto_2053_1)
    {
      RogueClassCmd* arg_2 = (((RogueClassCmd*)(_auto_2052_0->data->objects[_auto_2053_1])));
      call_ROGUEM63( 31, (RogueClassCmd*)(arg_2) );
    }
  }
}

void RogueCmdCall__update_this_type__Scope( RogueClassCmdCall* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->context))
  {
    call_ROGUEM60( 32, (RogueClassCmd*)(THIS->context), scope_0 );
  }
  {
    RogueClassCmdArgs* _auto_2054_1 = (THIS->args);
    RogueInt32 _auto_2055_2 = (0);
    for (;_auto_2055_2 < _auto_2054_1->count;++_auto_2055_2)
    {
      RogueClassCmd* arg_3 = (((RogueClassCmd*)(_auto_2054_1->data->objects[_auto_2055_2])));
      call_ROGUEM60( 32, (RogueClassCmd*)(arg_3), scope_0 );
    }
  }
}

RogueClassCmdCall* RogueCmdCall__init_object( RogueClassCmdCall* THIS )
{
  return (RogueClassCmdCall*)(THIS);
}

RogueClassCmdCall* RogueCmdCall__init__Token_Cmd_Method_CmdArgs( RogueClassCmdCall* THIS, RogueClassToken* _auto_925_0, RogueClassCmd* _auto_926_1, RogueClassMethod* _auto_927_2, RogueClassCmdArgs* _auto_928_3 )
{
  THIS->args = _auto_928_3;
  THIS->method_info = _auto_927_2;
  THIS->context = _auto_926_1;
  THIS->t = _auto_925_0;
  return (RogueClassCmdCall*)(THIS);
}

RogueString* RogueCmdCallNativeRoutine__type_name( RogueClassCmdCallNativeRoutine* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1141]);
}

RogueClassCmd* RogueCmdCallNativeRoutine__clone__CloneArgs( RogueClassCmdCallNativeRoutine* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCallNativeRoutine__init__Token_Method_CmdArgs( ((RogueClassCmdCallNativeRoutine*)ROGUE_CREATE_OBJECT(CmdCallNativeRoutine)), THIS->t, THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

void RogueCmdCallNativeRoutine__write_cpp__CPPWriter_Logical( RogueClassCmdCallNativeRoutine* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[66] ))), THIS->method_info->_return_type, THIS->method_info->_return_type );
  }
  RogueCPPWriter__print__String( writer_0, THIS->method_info->cpp_name );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[473] );
  RogueInt32 i_2 = (0);
  {
    RogueClassCmdArgs* _auto_2056_4 = (THIS->args);
    RogueInt32 _auto_2057_5 = (0);
    for (;_auto_2057_5 < _auto_2056_4->count;++_auto_2057_5)
    {
      RogueClassCmd* arg_6 = (((RogueClassCmd*)(_auto_2056_4->data->objects[_auto_2057_5])));
      if (i_2 > 0)
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[469] );
      }
      RogueClassType* param_type_3 = (((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type);
      if (((RogueType__is_aspect( param_type_3 ))))
      {
        RogueCPPWriter__print__String( ((RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[66] ))), (call_ROGUEM64( 29, (RogueClassCmd*)(arg_6) )), ((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type ))), Rogue_literal_strings[66] );
        call_ROGUEM68( 30, (RogueClassCmd*)(arg_6), writer_0, false );
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[462] );
      }
      else
      {
        call_ROGUEM68( 30, (RogueClassCmd*)(arg_6), writer_0, false );
      }
      ++i_2;
    }
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[503] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
  }
}

RogueClassCmdCallNativeRoutine* RogueCmdCallNativeRoutine__init_object( RogueClassCmdCallNativeRoutine* THIS )
{
  return (RogueClassCmdCallNativeRoutine*)(THIS);
}

RogueClassCmdCallNativeRoutine* RogueCmdCallNativeRoutine__init__Token_Method_CmdArgs( RogueClassCmdCallNativeRoutine* THIS, RogueClassToken* _auto_933_0, RogueClassMethod* _auto_934_1, RogueClassCmdArgs* _auto_935_2 )
{
  THIS->args = _auto_935_2;
  THIS->method_info = _auto_934_1;
  THIS->t = _auto_933_0;
  return (RogueClassCmdCallNativeRoutine*)(THIS);
}

RogueString* RogueMacroArgs__type_name( RogueClassMacroArgs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1028]);
}

RogueClassMacroArgs* RogueMacroArgs__init_object( RogueClassMacroArgs* THIS )
{
  return (RogueClassMacroArgs*)(THIS);
}

RogueClassMacroArgs* RogueMacroArgs__init__Cmd_Method_CmdArgs( RogueClassMacroArgs* THIS, RogueClassCmd* _auto_936_0, RogueClassMethod* _auto_937_1, RogueClassCmdArgs* args_2 )
{
  THIS->method_info = _auto_937_1;
  THIS->this_context = _auto_936_0;
  if (!!(args_2))
  {
    THIS->arg_lookup = ((RogueString_CmdTable__init( ((RogueClassString_CmdTable*)ROGUE_CREATE_OBJECT(String_CmdTable)) )));
    {
      RogueClassCmdArgs* _auto_2058_3 = (args_2);
      RogueInt32 index_4 = (0);
      for (;index_4 < _auto_2058_3->count;++index_4)
      {
        RogueString_CmdTable__set__String_Cmd( THIS->arg_lookup, ((RogueClassLocal*)(THIS->method_info->parameters->data->objects[index_4]))->name, ((RogueClassCmd*)(args_2->data->objects[index_4])) );
      }
    }
  }
  return (RogueClassMacroArgs*)(THIS);
}

RogueClassCmd* RogueMacroArgs__inline_this( RogueClassMacroArgs* THIS )
{
  return (RogueClassCmd*)((call_ROGUEM58( 6, (RogueClassCmd*)(THIS->this_context), ((RogueClassCloneArgs*)(NULL)) )));
}

RogueClassCmd* RogueMacroArgs__inline_access__CmdAccess( RogueClassMacroArgs* THIS, RogueClassCmdAccess* access_0 )
{
  if (!!(access_0->context))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(access_0)));
  }
  RogueClassCmd* arg_1 = (((RogueString_CmdTable__get__String( THIS->arg_lookup, access_0->name ))));
  if (!(!!(arg_1)))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(access_0)));
  }
  RogueClassCmd* dup_2 = ((call_ROGUEM58( 6, (RogueClassCmd*)(arg_1), ((RogueClassCloneArgs*)(NULL)) )));
  if (!!(access_0->args))
  {
    RogueClassCmdAccess* new_access_3 = (((RogueClassCmdAccess*)(RogueObject_as(dup_2,RogueTypeCmdAccess))));
    if (!!(new_access_3))
    {
      if (!!(new_access_3->args))
      {
        ROGUE_THROW(((RogueToken__error__String( access_0->t, Rogue_literal_strings[825] ))));
      }
      else
      {
        new_access_3->args = access_0->args;
      }
    }
    else
    {
      ROGUE_THROW(((RogueToken__error__String( access_0->t, Rogue_literal_strings[825] ))));
    }
  }
  return (RogueClassCmd*)(dup_2);
}

RogueClassCmd* RogueMacroArgs__inline_read_local__CmdReadLocal( RogueClassMacroArgs* THIS, RogueClassCmdReadLocal* read_cmd_0 )
{
  RogueClassCmd* arg_1 = (((RogueString_CmdTable__get__String( THIS->arg_lookup, read_cmd_0->local_info->name ))));
  if (!(!!(arg_1)))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(read_cmd_0)));
  }
  return (RogueClassCmd*)((call_ROGUEM58( 6, (RogueClassCmd*)(arg_1), ((RogueClassCloneArgs*)(NULL)) )));
}

RogueClassCmd* RogueMacroArgs__inline_write_local__CmdWriteLocal( RogueClassMacroArgs* THIS, RogueClassCmdWriteLocal* write_cmd_0 )
{
  RogueClassCmd* arg_1 = (((RogueString_CmdTable__get__String( THIS->arg_lookup, write_cmd_0->local_info->name ))));
  if (!(!!(arg_1)))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(write_cmd_0)));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)ROGUE_CREATE_OBJECT(CmdAssign)), write_cmd_0->t, (call_ROGUEM58( 6, (RogueClassCmd*)(arg_1), ((RogueClassCloneArgs*)(NULL)) )), write_cmd_0->new_value ))))));
}

RogueString* RogueCmdInlineNative__type_name( RogueClassCmdInlineNative* THIS )
{
  return (RogueString*)(Rogue_literal_strings[795]);
}

RogueClassCmdInlineNative* RogueCmdInlineNative__clone__CloneArgs( RogueClassCmdInlineNative* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdInlineNative* result_1 = (((RogueCmdInlineNative__init__Token_String_Type( ((RogueClassCmdInlineNative*)ROGUE_CREATE_OBJECT(CmdInlineNative)), THIS->t, THIS->code, THIS->_result_type ))));
  result_1->modify_op = THIS->modify_op;
  result_1->adjust_delta = THIS->adjust_delta;
  result_1->new_value = THIS->new_value;
  return (RogueClassCmdInlineNative*)(result_1);
}

RogueLogical RogueCmdInlineNative__requires_semicolon( RogueClassCmdInlineNative* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdInlineNative__resolve__Scope( RogueClassCmdInlineNative* THIS, RogueClassScope* scope_0 )
{
  THIS->this_method = scope_0->this_method;
  if (!!(THIS->_result_type))
  {
    RogueType__organize__Scope( THIS->_result_type, scope_0 );
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdInlineNative__resolve_assignment__Scope_Cmd( RogueClassCmdInlineNative* THIS, RogueClassScope* scope_0, RogueClassCmd* _auto_943_1 )
{
  THIS->new_value = _auto_943_1;
  THIS->this_method = scope_0->this_method;
  THIS->new_value = ((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->new_value), scope_0 )) )));
  if (!!(THIS->_result_type))
  {
    RogueType__organize__Scope( THIS->_result_type, scope_0 );
  }
  else
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[933] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)((call_ROGUEM64( 29, (RogueClassCmd*)(THIS->new_value) )))) ))) ))) ))) ))));
  }
  THIS->new_value = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)(THIS->new_value), THIS->_result_type, scope_0 ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdInlineNative__resolve_adjust__Scope_Int32( RogueClassCmdInlineNative* THIS, RogueClassScope* scope_0, RogueInt32 _auto_946_1 )
{
  THIS->adjust_delta = _auto_946_1;
  THIS->this_method = scope_0->this_method;
  if (!!(THIS->_result_type))
  {
    RogueType__organize__Scope( THIS->_result_type, scope_0 );
  }
  else
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[935] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)((call_ROGUEM64( 29, (RogueClassCmd*)(THIS->new_value) )))) ))) ))) ))) ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdInlineNative__resolve_modify_and_assign__Scope_TokenType_Cmd( RogueClassCmdInlineNative* THIS, RogueClassScope* scope_0, RogueClassTokenType* _auto_944_1, RogueClassCmd* _auto_945_2 )
{
  THIS->new_value = _auto_945_2;
  THIS->modify_op = _auto_944_1;
  THIS->this_method = scope_0->this_method;
  THIS->new_value = ((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->new_value), scope_0 )) )));
  if (!!(THIS->_result_type))
  {
    RogueType__organize__Scope( THIS->_result_type, scope_0 );
  }
  else
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[940] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)((call_ROGUEM64( 29, (RogueClassCmd*)(THIS->new_value) )))) ))) ))) ))) ))));
  }
  THIS->new_value = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)(THIS->new_value), THIS->_result_type, scope_0 ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdInlineNative__type( RogueClassCmdInlineNative* THIS )
{
  return (RogueClassType*)(THIS->_result_type);
}

void RogueCmdInlineNative__write_cpp__CPPWriter_Logical( RogueClassCmdInlineNative* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  switch (THIS->adjust_delta)
  {
    case -1:
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[4] );
      break;
    }
    case 1:
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[203] );
      break;
    }
  }
  RogueCPPWriter__print_native_code__Token_Type_Method_String( writer_0, THIS->t, THIS->this_method->type_context, THIS->this_method, THIS->code );
  if (!!(THIS->adjust_delta))
  {
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[205] );
    return;
  }
  if ((((RogueString__contains__String( THIS->code, ((RogueCharacter__to_String( (RogueCharacter)10 ))) ))) || !(!!(THIS->_result_type))))
  {
    RogueCPPWriter__println( writer_0 );
  }
  if (!!(THIS->new_value))
  {
    if (!!(THIS->modify_op))
    {
      RogueCPPWriter__print__Character( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Character( writer_0, (RogueCharacter)' ' ))), ((RogueTokenType__to_String( THIS->modify_op ))) ))), (RogueCharacter)' ' );
    }
    else
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[509] );
    }
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->new_value), writer_0, false );
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[205] );
  }
}

void RogueCmdInlineNative__trace_used_code( RogueClassCmdInlineNative* THIS )
{
  if (!!(THIS->new_value))
  {
    call_ROGUEM63( 31, (RogueClassCmd*)(THIS->new_value) );
  }
}

void RogueCmdInlineNative__update_this_type__Scope( RogueClassCmdInlineNative* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->new_value))
  {
    call_ROGUEM60( 32, (RogueClassCmd*)(THIS->new_value), scope_0 );
  }
}

RogueClassCmdInlineNative* RogueCmdInlineNative__init_object( RogueClassCmdInlineNative* THIS )
{
  return (RogueClassCmdInlineNative*)(THIS);
}

RogueClassCmdInlineNative* RogueCmdInlineNative__init__Token_String_Type( RogueClassCmdInlineNative* THIS, RogueClassToken* _auto_940_0, RogueString* _auto_941_1, RogueClassType* _auto_942_2 )
{
  THIS->_result_type = _auto_942_2;
  THIS->code = _auto_941_1;
  THIS->t = _auto_940_0;
  return (RogueClassCmdInlineNative*)(THIS);
}

RogueString* RogueCmdCallRoutine__type_name( RogueClassCmdCallRoutine* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1142]);
}

RogueClassCmd* RogueCmdCallRoutine__clone__CloneArgs( RogueClassCmdCallRoutine* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCallRoutine__init__Token_Method_CmdArgs( ((RogueClassCmdCallRoutine*)ROGUE_CREATE_OBJECT(CmdCallRoutine)), THIS->t, THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

void RogueCmdCallRoutine__write_cpp__CPPWriter_Logical( RogueClassCmdCallRoutine* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[66] ))), THIS->method_info->_return_type, THIS->method_info->_return_type );
  }
  RogueCPPWriter__print__String( writer_0, THIS->method_info->cpp_name );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[66] );
  if (!!(THIS->args->count))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[458] );
    RogueInt32 i_2 = (0);
    {
      RogueClassCmdArgs* _auto_2059_4 = (THIS->args);
      RogueInt32 _auto_2060_5 = (0);
      for (;_auto_2060_5 < _auto_2059_4->count;++_auto_2060_5)
      {
        RogueClassCmd* arg_6 = (((RogueClassCmd*)(_auto_2059_4->data->objects[_auto_2060_5])));
        if (i_2 > 0)
        {
          RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[469] );
        }
        RogueClassType* param_type_3 = (((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type);
        if (((RogueType__is_aspect( param_type_3 ))))
        {
          RogueCPPWriter__print__String( ((RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[66] ))), (call_ROGUEM64( 29, (RogueClassCmd*)(arg_6) )), ((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type ))), Rogue_literal_strings[66] );
          call_ROGUEM68( 30, (RogueClassCmd*)(arg_6), writer_0, false );
          RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[462] );
        }
        else
        {
          call_ROGUEM68( 30, (RogueClassCmd*)(arg_6), writer_0, false );
        }
        ++i_2;
      }
    }
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[458] );
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
  }
}

RogueClassCmdCallRoutine* RogueCmdCallRoutine__init_object( RogueClassCmdCallRoutine* THIS )
{
  return (RogueClassCmdCallRoutine*)(THIS);
}

RogueClassCmdCallRoutine* RogueCmdCallRoutine__init__Token_Method_CmdArgs( RogueClassCmdCallRoutine* THIS, RogueClassToken* _auto_947_0, RogueClassMethod* _auto_948_1, RogueClassCmdArgs* _auto_949_2 )
{
  THIS->args = _auto_949_2;
  THIS->method_info = _auto_948_1;
  THIS->t = _auto_947_0;
  return (RogueClassCmdCallRoutine*)(THIS);
}

RogueString* RogueCmdReadArrayCount__type_name( RogueClassCmdReadArrayCount* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1120]);
}

RogueClassCmd* RogueCmdReadArrayCount__clone__CloneArgs( RogueClassCmdReadArrayCount* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadArrayCount__init__Token_Cmd( ((RogueClassCmdReadArrayCount*)ROGUE_CREATE_OBJECT(CmdReadArrayCount)), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->context), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdReadArrayCount__resolve__Scope( RogueClassCmdReadArrayCount* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->_array_type))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  THIS->context = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->context), scope_0 ));
  THIS->_array_type = (call_ROGUEM64( 22, (RogueClassCmd*)(THIS->context) ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdReadArrayCount__type( RogueClassCmdReadArrayCount* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32);
}

void RogueCmdReadArrayCount__write_cpp__CPPWriter_Logical( RogueClassCmdReadArrayCount* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->context), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[957] );
}

void RogueCmdReadArrayCount__trace_used_code( RogueClassCmdReadArrayCount* THIS )
{
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->context) );
  RogueType__trace_used_code( THIS->_array_type );
}

void RogueCmdReadArrayCount__update_this_type__Scope( RogueClassCmdReadArrayCount* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->context), scope_0 );
}

RogueClassCmdReadArrayCount* RogueCmdReadArrayCount__init_object( RogueClassCmdReadArrayCount* THIS )
{
  return (RogueClassCmdReadArrayCount*)(THIS);
}

RogueClassCmdReadArrayCount* RogueCmdReadArrayCount__init__Token_Cmd( RogueClassCmdReadArrayCount* THIS, RogueClassToken* _auto_950_0, RogueClassCmd* _auto_951_1 )
{
  THIS->context = _auto_951_1;
  THIS->t = _auto_950_0;
  return (RogueClassCmdReadArrayCount*)(THIS);
}

RogueString* RogueCmdCallInlineNativeMethod__type_name( RogueClassCmdCallInlineNativeMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1149]);
}

RogueClassCmd* RogueCmdCallInlineNativeMethod__clone__CloneArgs( RogueClassCmdCallInlineNativeMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCallInlineNativeMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallInlineNativeMethod*)ROGUE_CREATE_OBJECT(CmdCallInlineNativeMethod))), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, clone_args_0 ))), THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))))));
}

RogueClassType* Rogue_CmdCallInlineNativeMethod__type( RogueClassCmdCallInlineNativeMethod* THIS )
{
  return (RogueClassType*)(THIS->method_info->_return_type);
}

RogueClassCmdCallInlineNativeMethod* RogueCmdCallInlineNativeMethod__init_object( RogueClassCmdCallInlineNativeMethod* THIS )
{
  return (RogueClassCmdCallInlineNativeMethod*)(THIS);
}

void RogueCmdCallInlineNativeMethod__print_this__CPPWriter( RogueClassCmdCallInlineNativeMethod* THIS, RogueClassCPPWriter* writer_0 )
{
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->context), writer_0, false );
}

RogueString* RogueCmdCallNativeMethod__type_name( RogueClassCmdCallNativeMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1143]);
}

RogueClassCmd* RogueCmdCallNativeMethod__clone__CloneArgs( RogueClassCmdCallNativeMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCallNativeMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallNativeMethod*)ROGUE_CREATE_OBJECT(CmdCallNativeMethod))), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, clone_args_0 ))), THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))))));
}

void RogueCmdCallNativeMethod__write_cpp__CPPWriter_Logical( RogueClassCmdCallNativeMethod* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[66] ))), THIS->method_info->_return_type, THIS->method_info->_return_type );
  }
  RogueCPPWriter__print__String( writer_0, THIS->method_info->cpp_name );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[473] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->context), writer_0, false );
  RogueInt32 i_2 = (0);
  {
    RogueClassCmdArgs* _auto_2061_4 = (THIS->args);
    RogueInt32 _auto_2062_5 = (0);
    for (;_auto_2062_5 < _auto_2061_4->count;++_auto_2062_5)
    {
      RogueClassCmd* arg_6 = (((RogueClassCmd*)(_auto_2061_4->data->objects[_auto_2062_5])));
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[469] );
      RogueClassType* param_type_3 = (((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type);
      if (((RogueType__is_aspect( param_type_3 ))))
      {
        RogueCPPWriter__print__String( ((RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[66] ))), (call_ROGUEM64( 29, (RogueClassCmd*)(arg_6) )), ((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type ))), Rogue_literal_strings[66] );
        call_ROGUEM68( 30, (RogueClassCmd*)(arg_6), writer_0, false );
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[462] );
      }
      else
      {
        call_ROGUEM68( 30, (RogueClassCmd*)(arg_6), writer_0, false );
      }
      ++i_2;
    }
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[503] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
  }
}

RogueClassCmdCallNativeMethod* RogueCmdCallNativeMethod__init_object( RogueClassCmdCallNativeMethod* THIS )
{
  return (RogueClassCmdCallNativeMethod*)(THIS);
}

RogueString* RogueCmdCallAspectMethod__type_name( RogueClassCmdCallAspectMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1144]);
}

RogueClassCmd* RogueCmdCallAspectMethod__clone__CloneArgs( RogueClassCmdCallAspectMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCallAspectMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallAspectMethod*)ROGUE_CREATE_OBJECT(CmdCallAspectMethod))), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, clone_args_0 ))), THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))))));
}

void RogueCmdCallAspectMethod__write_cpp__CPPWriter_Logical( RogueClassCmdCallAspectMethod* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[66] ))), THIS->method_info->_return_type, THIS->method_info->_return_type );
  }
  RogueCPPWriter__print__String( writer_0, THIS->method_info->cpp_name );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[473] );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[66] );
  RogueCPPWriter__print__Type( writer_0, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->context), writer_0, false );
  RogueInt32 i_2 = (0);
  {
    RogueClassCmdArgs* _auto_2063_4 = (THIS->args);
    RogueInt32 _auto_2064_5 = (0);
    for (;_auto_2064_5 < _auto_2063_4->count;++_auto_2064_5)
    {
      RogueClassCmd* arg_6 = (((RogueClassCmd*)(_auto_2063_4->data->objects[_auto_2064_5])));
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[469] );
      RogueClassType* param_type_3 = (((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type);
      if (((RogueType__is_aspect( param_type_3 ))))
      {
        RogueCPPWriter__print__String( ((RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[66] ))), (call_ROGUEM64( 29, (RogueClassCmd*)(arg_6) )), ((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type ))), Rogue_literal_strings[66] );
        call_ROGUEM68( 30, (RogueClassCmd*)(arg_6), writer_0, false );
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[462] );
      }
      else
      {
        call_ROGUEM68( 30, (RogueClassCmd*)(arg_6), writer_0, false );
      }
      ++i_2;
    }
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[503] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
  }
}

RogueClassCmdCallAspectMethod* RogueCmdCallAspectMethod__init_object( RogueClassCmdCallAspectMethod* THIS )
{
  return (RogueClassCmdCallAspectMethod*)(THIS);
}

RogueString* RogueCmdCallDynamicMethod__type_name( RogueClassCmdCallDynamicMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1146]);
}

RogueClassCmd* RogueCmdCallDynamicMethod__clone__CloneArgs( RogueClassCmdCallDynamicMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCallDynamicMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallDynamicMethod*)ROGUE_CREATE_OBJECT(CmdCallDynamicMethod))), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, clone_args_0 ))), THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))))));
}

void RogueCmdCallDynamicMethod__write_cpp__CPPWriter_Logical( RogueClassCmdCallDynamicMethod* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[66] ))), THIS->method_info->_return_type, THIS->method_info->_return_type );
  }
  if (((RogueMethod__is_overridden( THIS->method_info ))))
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[958] ))), THIS->method_info->cpp_typedef );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[473] );
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Int32( writer_0, THIS->method_info->index ))), Rogue_literal_strings[469] );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[66] );
    RogueCPPWriter__print__Type( writer_0, THIS->method_info->type_context );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[944] );
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
    RogueInt32 i_2 = (0);
    {
      RogueClassCmdArgs* _auto_2065_4 = (THIS->args);
      RogueInt32 _auto_2066_5 = (0);
      for (;_auto_2066_5 < _auto_2065_4->count;++_auto_2066_5)
      {
        RogueClassCmd* arg_6 = (((RogueClassCmd*)(_auto_2065_4->data->objects[_auto_2066_5])));
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[469] );
        RogueClassType* param_type_3 = (((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type);
        if (((RogueType__is_aspect( param_type_3 ))))
        {
          RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[66] ))), (call_ROGUEM64( 29, (RogueClassCmd*)(arg_6) )), ((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type );
          call_ROGUEM68( 30, (RogueClassCmd*)(arg_6), writer_0, false );
          RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
        }
        else
        {
          call_ROGUEM68( 30, (RogueClassCmd*)(arg_6), writer_0, false );
        }
        ++i_2;
      }
    }
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[503] );
  }
  else
  {
    RogueCmdCallStaticMethod__write_cpp__CPPWriter_Logical( ((RogueClassCmdCallStaticMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallStaticMethod*)ROGUE_CREATE_OBJECT(CmdCallStaticMethod))), THIS->t, THIS->context, THIS->method_info, THIS->args ))))), writer_0, is_statement_1 );
  }
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
  }
}

void RogueCmdCallDynamicMethod__trace_used_code( RogueClassCmdCallDynamicMethod* THIS )
{
  RogueCmdCall__trace_used_code( ((RogueClassCmdCall*)THIS) );
  if (((RogueMethod__is_overridden( THIS->method_info ))))
  {
    THIS->method_info->called_dynamically = true;
  }
}

RogueClassCmdCallDynamicMethod* RogueCmdCallDynamicMethod__init_object( RogueClassCmdCallDynamicMethod* THIS )
{
  return (RogueClassCmdCallDynamicMethod*)(THIS);
}

RogueString* RogueCmdCallMethod__type_name( RogueClassCmdCallMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1145]);
}

RogueClassCmd* RogueCmdCallMethod__call_prior__Scope( RogueClassCmdCallMethod* THIS, RogueClassScope* scope_0 )
{
  if ((((RogueMethod__is_initializer( THIS->method_info ))) && ((void*)THIS->method_info->type_context) != ((void*)scope_0->_this_type)))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCallStaticMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallStaticMethod*)ROGUE_CREATE_OBJECT(CmdCallStaticMethod))), THIS->t, THIS->context, THIS->method_info, THIS->args ))))))));
  }
  if (!(!!(THIS->method_info->overridden_method)))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->method_info->signature ))) ))), Rogue_literal_strings[1010] ))) ))) ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCallStaticMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallStaticMethod*)ROGUE_CREATE_OBJECT(CmdCallStaticMethod))), THIS->t, THIS->context, THIS->method_info->overridden_method, THIS->args ))))))));
}

RogueClassCmdCallMethod* RogueCmdCallMethod__init_object( RogueClassCmdCallMethod* THIS )
{
  return (RogueClassCmdCallMethod*)(THIS);
}

RogueString* RogueCandidateMethods__type_name( RogueClassCandidateMethods* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1111]);
}

RogueClassCandidateMethods* RogueCandidateMethods__init__Type_CmdAccess_Logical( RogueClassCandidateMethods* THIS, RogueClassType* _auto_955_0, RogueClassCmdAccess* _auto_956_1, RogueLogical _auto_957_2 )
{
  THIS->error_on_fail = _auto_957_2;
  THIS->access = _auto_956_1;
  THIS->type_context = _auto_955_0;
  return (RogueClassCandidateMethods*)(THIS);
}

RogueLogical RogueCandidateMethods__has_match( RogueClassCandidateMethods* THIS )
{
  return (RogueLogical)(THIS->available->count == 1);
}

RogueClassMethod* RogueCandidateMethods__match( RogueClassCandidateMethods* THIS )
{
  if (THIS->available->count != 1)
  {
    return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
  }
  return (RogueClassMethod*)(((RogueClassMethod*)(THIS->available->data->objects[0])));
}

RogueLogical RogueCandidateMethods__refine_matches( RogueClassCandidateMethods* THIS )
{
  return (RogueLogical)(((RogueCandidateMethods__update__Logical( THIS, false ))));
}

RogueLogical RogueCandidateMethods__update_available( RogueClassCandidateMethods* THIS )
{
  return (RogueLogical)(((RogueCandidateMethods__update__Logical( THIS, false ))));
}

RogueLogical RogueCandidateMethods__update_matches( RogueClassCandidateMethods* THIS )
{
  return (RogueLogical)(((RogueCandidateMethods__update__Logical( THIS, true ))));
}

RogueLogical RogueCandidateMethods__update__Logical( RogueClassCandidateMethods* THIS, RogueLogical require_compatible_0 )
{
  if (THIS->compatible->count == 0)
  {
    if (THIS->available->count == 0)
    {
      if (!(THIS->error_on_fail))
      {
        return (RogueLogical)(false);
      }
      ROGUE_THROW(((RogueToken__error__String( THIS->access->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[832] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->access->name ))) ))), Rogue_literal_strings[833] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(THIS->type_context)) ))) ))), Rogue_literal_strings[51] ))) ))) ))));
    }
    else if (require_compatible_0)
    {
      if (!(THIS->error_on_fail))
      {
        return (RogueLogical)(false);
      }
      RogueStringBuilder* call_sig_buffer_1 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
      RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( call_sig_buffer_1, THIS->type_context->name ))), Rogue_literal_strings[68] );
      RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( call_sig_buffer_1, THIS->access->name ))), Rogue_literal_strings[66] );
      if (!!(THIS->access->args))
      {
        {
          RogueClassCmdArgs* _auto_2067_4 = (THIS->access->args);
          RogueInt32 index_5 = (0);
          for (;index_5 < _auto_2067_4->count;++index_5)
          {
            if (index_5 > 0)
            {
              RogueStringBuilder__print__Character( call_sig_buffer_1, (RogueCharacter)',' );
            }
            RogueStringBuilder__print__String( call_sig_buffer_1, (call_ROGUEM64( 22, (RogueClassCmd*)(((RogueClassCmd*)(THIS->access->args->data->objects[index_5]))) ))->name );
          }
        }
      }
      RogueStringBuilder__print__String( call_sig_buffer_1, Rogue_literal_strings[67] );
      RogueString* call_sig_2 = (((RogueStringBuilder__to_String( call_sig_buffer_1 ))));
      RogueStringBuilder* buffer_3 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
      if (THIS->available->count > 1)
      {
        RogueStringBuilder__print__String( buffer_3, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[834] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], call_sig_2 ))) ))), Rogue_literal_strings[835] ))) ))) );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_3, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[836] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], call_sig_2 ))) ))), Rogue_literal_strings[837] ))) ))) );
      }
      {
        RogueMethodList* _auto_2068_6 = (THIS->available);
        RogueInt32 _auto_2069_7 = (0);
        for (;_auto_2069_7 < _auto_2068_6->count;++_auto_2069_7)
        {
          RogueClassMethod* m_8 = (((RogueClassMethod*)(_auto_2068_6->data->objects[_auto_2069_7])));
          RogueStringBuilder__println__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( buffer_3, Rogue_literal_strings[286] ))), m_8->type_context->name ))), Rogue_literal_strings[68] ))), m_8->signature );
        }
      }
      ROGUE_THROW(((RogueToken__error__String( THIS->access->t, ((RogueStringBuilder__to_String( buffer_3 ))) ))));
    }
    return (RogueLogical)(true);
  }
  RogueMethodList__clear( THIS->available );
  RogueMethodList__add__MethodList( THIS->available, THIS->compatible );
  RogueMethodList__clear( THIS->compatible );
  return (RogueLogical)(true);
}

RogueClassCandidateMethods* RogueCandidateMethods__init_object( RogueClassCandidateMethods* THIS )
{
  THIS->available = ((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) )));
  THIS->compatible = ((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) )));
  return (RogueClassCandidateMethods*)(THIS);
}

RogueString* RogueCmdCreateFunction__type_name( RogueClassCmdCreateFunction* THIS )
{
  return (RogueString*)(Rogue_literal_strings[796]);
}

RogueClassCmdCreateFunction* RogueCmdCreateFunction__clone__CloneArgs( RogueClassCmdCreateFunction* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueFnArgList* args2_1 = 0;
  if (!!(THIS->with_args))
  {
    args2_1 = ((RogueFnArgList*)((RogueFnArgList__init( ((RogueFnArgList*)ROGUE_CREATE_OBJECT(FnArgList)) ))));
    {
      RogueFnArgList* _auto_2070_2 = (THIS->with_args);
      RogueInt32 _auto_2071_3 = (0);
      for (;_auto_2071_3 < _auto_2070_2->count;++_auto_2071_3)
      {
        RogueClassFnArg* arg_4 = (((RogueClassFnArg*)(_auto_2070_2->data->objects[_auto_2071_3])));
        RogueFnArgList__add__FnArg( args2_1, ((RogueFnArg__set_type__Type( ((RogueFnArg__init__String_Cmd( ((RogueClassFnArg*)ROGUE_CREATE_OBJECT(FnArg)), arg_4->name, (call_ROGUEM58( 6, (RogueClassCmd*)(arg_4->value), clone_args_0 )) ))), arg_4->_type ))) );
      }
    }
  }
  return (RogueClassCmdCreateFunction*)(((RogueCmdCreateFunction__init__Token_FnParamList_Type_FnArgList_CmdStatementList_Logical( ((RogueClassCmdCreateFunction*)ROGUE_CREATE_OBJECT(CmdCreateFunction)), THIS->t, THIS->parameters, THIS->_return_type, args2_1, ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 ))), THIS->is_generic ))));
}

RogueLogical RogueCmdCreateFunction__is_generic_function( RogueClassCmdCreateFunction* THIS )
{
  return (RogueLogical)(THIS->is_generic);
}

RogueClassCmd* RogueCmdCreateFunction__resolve__Scope( RogueClassCmdCreateFunction* THIS, RogueClassScope* scope_0 )
{
  if (THIS->is_generic)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  RogueTypeList* parameter_types_1 = 0;
  if ((!!(THIS->parameters) && !!(THIS->parameters->count)))
  {
    parameter_types_1 = ((RogueTypeList*)((RogueTypeList__init( ((RogueTypeList*)ROGUE_CREATE_OBJECT(TypeList)) ))));
    {
      RogueFnParamList* _auto_2072_9 = (THIS->parameters);
      RogueInt32 _auto_2073_10 = (0);
      for (;_auto_2073_10 < _auto_2072_9->count;++_auto_2073_10)
      {
        RogueClassFnParam* param_11 = (((RogueClassFnParam*)(_auto_2072_9->data->objects[_auto_2073_10])));
        RogueTypeList__add__Type( parameter_types_1, param_11->_type );
      }
    }
  }
  RogueString* fn_name_2 = (((RogueString__operatorPLUS__Int32( Rogue_literal_strings[827], ((RogueProgram__next_unique_integer( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))) ))));
  RogueClassType* fn_type_3 = (((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, fn_name_2 ))));
  fn_type_3->defined = true;
  RogueAttributes__add__Int32( fn_type_3->attributes, 0 );
  RogueClassType* base_type_4 = (((RogueProgram__get_callback_type_reference__Token_TypeList_Type( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, parameter_types_1, THIS->_return_type ))));
  RogueTypeList__add__Type( fn_type_3->base_types, base_type_4 );
  RogueClassMethod* m_call_5 = (((RogueType__add_method__Token_String( fn_type_3, THIS->t, Rogue_literal_strings[256] ))));
  if (!!(THIS->parameters))
  {
    {
      RogueFnParamList* _auto_2074_12 = (THIS->parameters);
      RogueInt32 _auto_2075_13 = (0);
      for (;_auto_2075_13 < _auto_2074_12->count;++_auto_2075_13)
      {
        RogueClassFnParam* param_14 = (((RogueClassFnParam*)(_auto_2074_12->data->objects[_auto_2075_13])));
        RogueMethod__add_parameter__Token_String_Type( m_call_5, THIS->t, param_14->name, param_14->_type );
      }
    }
  }
  m_call_5->_return_type = THIS->_return_type;
  m_call_5->statements = THIS->statements;
  RogueCmdStatementList__update_this_type__Scope( m_call_5->statements, ((RogueScope__init__Type_Method( ((RogueClassScope*)ROGUE_CREATE_OBJECT(Scope)), fn_type_3, m_call_5 ))) );
  if (!!(THIS->with_args))
  {
    RogueClassMethod* m_init_6 = (((RogueType__add_method__Token_String( fn_type_3, THIS->t, Rogue_literal_strings[331] ))));
    RogueClassCmdArgs* create_args_7 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))));
    {
      RogueFnArgList* _auto_2076_15 = (THIS->with_args);
      RogueInt32 _auto_2077_16 = (0);
      for (;_auto_2077_16 < _auto_2076_15->count;++_auto_2077_16)
      {
        RogueClassFnArg* fn_arg_17 = (((RogueClassFnArg*)(_auto_2076_15->data->objects[_auto_2077_16])));
        RogueClassCmd* arg_8 = (((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)(fn_arg_17->value), scope_0 )) ))));
        RogueCmdList__add__Cmd( ((RogueCmdList*)create_args_7), arg_8 );
        RogueType__add_property__Token_String_Type_Cmd( fn_type_3, fn_arg_17->value->t, fn_arg_17->name, (call_ROGUEM64( 29, (RogueClassCmd*)(arg_8) )), ((RogueClassCmd*)(NULL)) );
        RogueMethod__add_parameter__Token_String_Type( m_init_6, fn_arg_17->value->t, fn_arg_17->name, ((RogueClassType*)(NULL)) );
      }
    }
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, fn_name_2, create_args_7 ))), scope_0 ))));
  }
  else
  {
    RogueAttributes__add__Int32( fn_type_3->attributes, 1024 );
    return (RogueClassCmd*)(((RogueCmdReadSingleton__resolve__Scope( ((RogueCmdReadSingleton__init__Token_Type( ((RogueClassCmdReadSingleton*)ROGUE_CREATE_OBJECT(CmdReadSingleton)), THIS->t, fn_type_3 ))), scope_0 ))));
  }
}

RogueClassType* Rogue_CmdCreateFunction__type( RogueClassCmdCreateFunction* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object);
}

RogueClassCmdCreateFunction* RogueCmdCreateFunction__init_object( RogueClassCmdCreateFunction* THIS )
{
  return (RogueClassCmdCreateFunction*)(THIS);
}

RogueClassCmdCreateFunction* RogueCmdCreateFunction__init__Token_FnParamList_Type_FnArgList_CmdStatementList_Logical( RogueClassCmdCreateFunction* THIS, RogueClassToken* _auto_984_0, RogueFnParamList* _auto_985_1, RogueClassType* _auto_986_2, RogueFnArgList* _auto_987_3, RogueClassCmdStatementList* _auto_988_4, RogueLogical _auto_989_5 )
{
  THIS->is_generic = _auto_989_5;
  THIS->statements = _auto_988_4;
  THIS->with_args = _auto_987_3;
  THIS->_return_type = _auto_986_2;
  THIS->parameters = _auto_985_1;
  THIS->t = _auto_984_0;
  return (RogueClassCmdCreateFunction*)(THIS);
}

RogueString* RogueFnParamList__to_String( RogueFnParamList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueFnParamList* _auto_2078_2 = (THIS);
    RogueInt32 _auto_2079_3 = (0);
    for (;_auto_2079_3 < _auto_2078_2->count;++_auto_2079_3)
    {
      RogueClassFnParam* value_4 = (((RogueClassFnParam*)(_auto_2078_2->data->objects[_auto_2079_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueFnParamList__type_name( RogueFnParamList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[703]);
}

RogueFnParamList* RogueFnParamList__init_object( RogueFnParamList* THIS )
{
  return (RogueFnParamList*)(THIS);
}

RogueFnParamList* RogueFnParamList__init( RogueFnParamList* THIS )
{
  RogueFnParamList__init__Int32( THIS, 10 );
  return (RogueFnParamList*)(THIS);
}

RogueFnParamList* RogueFnParamList__init__Int32( RogueFnParamList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassFnParam*), true );
  return (RogueFnParamList*)(THIS);
}

RogueFnParamList* RogueFnParamList__add__FnParam( RogueFnParamList* THIS, RogueClassFnParam* value_0 )
{
  ((RogueFnParamList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueFnParamList*)(THIS);
}

RogueInt32 RogueFnParamList__capacity( RogueFnParamList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueClassFnParam* RogueFnParamList__last( RogueFnParamList* THIS )
{
  return (RogueClassFnParam*)(((RogueClassFnParam*)(THIS->data->objects[(THIS->count - 1)])));
}

RogueFnParamList* RogueFnParamList__reserve__Int32( RogueFnParamList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassFnParam*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueFnParamList__capacity( THIS ))) + ((RogueFnParamList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassFnParam*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueFnParamList*)(THIS);
}

RogueString* RogueFnParam__type_name( RogueClassFnParam* THIS )
{
  return (RogueString*)(Rogue_literal_strings[653]);
}

RogueClassFnParam* RogueFnParam__init__String( RogueClassFnParam* THIS, RogueString* _auto_991_0 )
{
  THIS->name = _auto_991_0;
  return (RogueClassFnParam*)(THIS);
}

RogueClassFnParam* RogueFnParam__init_object( RogueClassFnParam* THIS )
{
  return (RogueClassFnParam*)(THIS);
}

RogueString* RogueFnParamArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[745]);
}

RogueString* RogueTypeSpecializerArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[746]);
}

RogueString* RogueString_MethodTableEntryList__to_String( RogueTableEntry_of_String_MethodList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_MethodList* _auto_2115_2 = (THIS);
    RogueInt32 _auto_2116_3 = (0);
    for (;_auto_2116_3 < _auto_2115_2->count;++_auto_2116_3)
    {
      RogueClassString_MethodTableEntry* value_4 = (((RogueClassString_MethodTableEntry*)(_auto_2115_2->data->objects[_auto_2116_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_MethodTableEntryList__type_name( RogueTableEntry_of_String_MethodList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[704]);
}

RogueTableEntry_of_String_MethodList* RogueString_MethodTableEntryList__init_object( RogueTableEntry_of_String_MethodList* THIS )
{
  return (RogueTableEntry_of_String_MethodList*)(THIS);
}

RogueTableEntry_of_String_MethodList* RogueString_MethodTableEntryList__init__Int32_String_MethodTableEntry( RogueTableEntry_of_String_MethodList* THIS, RogueInt32 initial_capacity_0, RogueClassString_MethodTableEntry* initial_value_1 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_MethodTableEntry*), true );
  {
    RogueInt32 i_2 = (1);
    RogueInt32 _auto_1055_3 = (initial_capacity_0);
    for (;i_2 <= _auto_1055_3;++i_2)
    {
      RogueString_MethodTableEntryList__add__String_MethodTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_MethodList*)(THIS);
}

RogueTableEntry_of_String_MethodList* RogueString_MethodTableEntryList__add__String_MethodTableEntry( RogueTableEntry_of_String_MethodList* THIS, RogueClassString_MethodTableEntry* value_0 )
{
  ((RogueString_MethodTableEntryList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_MethodList*)(THIS);
}

RogueInt32 RogueString_MethodTableEntryList__capacity( RogueTableEntry_of_String_MethodList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_MethodList* RogueString_MethodTableEntryList__reserve__Int32( RogueTableEntry_of_String_MethodList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassString_MethodTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueString_MethodTableEntryList__capacity( THIS ))) + ((RogueString_MethodTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassString_MethodTableEntry*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_MethodList*)(THIS);
}

RogueString* RogueString_MethodTableEntry__type_name( RogueClassString_MethodTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[654]);
}

RogueClassString_MethodTableEntry* RogueString_MethodTableEntry__init__String_Method_Int32( RogueClassString_MethodTableEntry* THIS, RogueString* _key_0, RogueClassMethod* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_MethodTableEntry*)(THIS);
}

RogueClassString_MethodTableEntry* RogueString_MethodTableEntry__init_object( RogueClassString_MethodTableEntry* THIS )
{
  return (RogueClassString_MethodTableEntry*)(THIS);
}

RogueString* RogueString_MethodTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[747]);
}

RogueString* RogueString_LogicalTableEntryList__to_String( RogueTableEntry_of_String_LogicalList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_LogicalList* _auto_2162_2 = (THIS);
    RogueInt32 _auto_2163_3 = (0);
    for (;_auto_2163_3 < _auto_2162_2->count;++_auto_2163_3)
    {
      RogueClassString_LogicalTableEntry* value_4 = (((RogueClassString_LogicalTableEntry*)(_auto_2162_2->data->objects[_auto_2163_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_LogicalTableEntryList__type_name( RogueTableEntry_of_String_LogicalList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[705]);
}

RogueTableEntry_of_String_LogicalList* RogueString_LogicalTableEntryList__init_object( RogueTableEntry_of_String_LogicalList* THIS )
{
  return (RogueTableEntry_of_String_LogicalList*)(THIS);
}

RogueTableEntry_of_String_LogicalList* RogueString_LogicalTableEntryList__init__Int32_String_LogicalTableEntry( RogueTableEntry_of_String_LogicalList* THIS, RogueInt32 initial_capacity_0, RogueClassString_LogicalTableEntry* initial_value_1 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_LogicalTableEntry*), true );
  {
    RogueInt32 i_2 = (1);
    RogueInt32 _auto_1163_3 = (initial_capacity_0);
    for (;i_2 <= _auto_1163_3;++i_2)
    {
      RogueString_LogicalTableEntryList__add__String_LogicalTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_LogicalList*)(THIS);
}

RogueTableEntry_of_String_LogicalList* RogueString_LogicalTableEntryList__add__String_LogicalTableEntry( RogueTableEntry_of_String_LogicalList* THIS, RogueClassString_LogicalTableEntry* value_0 )
{
  ((RogueString_LogicalTableEntryList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_LogicalList*)(THIS);
}

RogueInt32 RogueString_LogicalTableEntryList__capacity( RogueTableEntry_of_String_LogicalList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_LogicalList* RogueString_LogicalTableEntryList__reserve__Int32( RogueTableEntry_of_String_LogicalList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassString_LogicalTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueString_LogicalTableEntryList__capacity( THIS ))) + ((RogueString_LogicalTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassString_LogicalTableEntry*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_LogicalList*)(THIS);
}

RogueString* RogueString_LogicalTableEntry__type_name( RogueClassString_LogicalTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[655]);
}

RogueClassString_LogicalTableEntry* RogueString_LogicalTableEntry__init__String_Logical_Int32( RogueClassString_LogicalTableEntry* THIS, RogueString* _key_0, RogueLogical _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_LogicalTableEntry*)(THIS);
}

RogueClassString_LogicalTableEntry* RogueString_LogicalTableEntry__init_object( RogueClassString_LogicalTableEntry* THIS )
{
  return (RogueClassString_LogicalTableEntry*)(THIS);
}

RogueString* RogueString_LogicalTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[748]);
}

RogueString* RogueTokenReader__type_name( RogueClassTokenReader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[656]);
}

RogueClassTokenReader* RogueTokenReader__init__TokenList( RogueClassTokenReader* THIS, RogueTokenList* _auto_1202_0 )
{
  THIS->tokens = _auto_1202_0;
  THIS->count = THIS->tokens->count;
  return (RogueClassTokenReader*)(THIS);
}

RogueClassError* RogueTokenReader__error__String( RogueClassTokenReader* THIS, RogueString* message_0 )
{
  if (((RogueTokenReader__has_another( THIS ))))
  {
    return (RogueClassError*)(((RogueClassError*)(((RogueToken__error__String( ((RogueTokenReader__peek( THIS ))), message_0 ))))));
  }
  if (!!(THIS->count))
  {
    return (RogueClassError*)(((RogueClassError*)(((RogueToken__error__String( ((RogueTokenList__last( THIS->tokens ))), message_0 ))))));
  }
  return (RogueClassError*)(((RogueClassError*)(((RogueRogueError__init__String_String_Int32_Int32( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), message_0, ((RogueString*)(NULL)), 0, 0 ))))));
}

RogueLogical RogueTokenReader__has_another( RogueClassTokenReader* THIS )
{
  return (RogueLogical)(THIS->position < THIS->count);
}

RogueLogical RogueTokenReader__next_is__TokenType( RogueClassTokenReader* THIS, RogueClassTokenType* type_0 )
{
  if (THIS->position == THIS->count)
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(((void*)((RogueClassToken*)(THIS->tokens->data->objects[THIS->position]))->_type) == ((void*)type_0));
}

RogueLogical RogueTokenReader__next_is_statement_token( RogueClassTokenReader* THIS )
{
  if (THIS->position == THIS->count)
  {
    return (RogueLogical)(false);
  }
  if ((call_ROGUEM92( 15, (RogueClassTokenType*)(((RogueClassToken*)(THIS->tokens->data->objects[THIS->position]))->_type) )))
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(true);
}

RogueClassToken* RogueTokenReader__peek( RogueClassTokenReader* THIS )
{
  if (THIS->position == THIS->count)
  {
    return (RogueClassToken*)(((RogueTokenType__create_token__Token( RogueTokenType_eoi, ((RogueTokenList__last( THIS->tokens ))) ))));
  }
  return (RogueClassToken*)(((RogueClassToken*)(THIS->tokens->data->objects[THIS->position])));
}

RogueClassToken* RogueTokenReader__peek__Int32( RogueClassTokenReader* THIS, RogueInt32 num_ahead_0 )
{
  if ((THIS->position + num_ahead_0) >= THIS->count)
  {
    return (RogueClassToken*)(((RogueTokenType__create_token__Token( RogueTokenType_eoi, ((RogueTokenList__last( THIS->tokens ))) ))));
  }
  return (RogueClassToken*)(((RogueClassToken*)(THIS->tokens->data->objects[(THIS->position + num_ahead_0)])));
}

RogueClassToken* RogueTokenReader__read( RogueClassTokenReader* THIS )
{
  ++THIS->position;
  return (RogueClassToken*)(((RogueClassToken*)(THIS->tokens->data->objects[(THIS->position - 1)])));
}

RogueClassTokenReader* RogueTokenReader__init_object( RogueClassTokenReader* THIS )
{
  return (RogueClassTokenReader*)(THIS);
}

RogueString* RogueString_StringTable__to_String( RogueClassString_StringTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_StringTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_StringTable__type_name( RogueClassString_StringTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[657]);
}

RogueClassString_StringTable* RogueString_StringTable__init( RogueClassString_StringTable* THIS )
{
  RogueString_StringTable__init__Int32( THIS, 16 );
  return (RogueClassString_StringTable*)(THIS);
}

RogueClassString_StringTable* RogueString_StringTable__init__Int32( RogueClassString_StringTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_StringTableEntryList__init__Int32_String_StringTableEntry( ((RogueTableEntry_of_String_StringList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_StringList)), bin_count_0, ((RogueClassString_StringTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_StringTable*)(THIS);
}

RogueClassString_StringTableEntry* RogueString_StringTable__find__String( RogueClassString_StringTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  RogueClassString_StringTableEntry* entry_2 = (((RogueClassString_StringTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( entry_2->key, key_0 )))))
    {
      return (RogueClassString_StringTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_StringTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_StringTableEntry*)(((RogueClassString_StringTableEntry*)(NULL)));
}

RogueString* RogueString_StringTable__get__String( RogueClassString_StringTable* THIS, RogueString* key_0 )
{
  RogueClassString_StringTableEntry* entry_1 = (((RogueString_StringTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueString*)(entry_1->value);
  }
  else
  {
    RogueString* default_value_2 = 0;
    return (RogueString*)(default_value_2);
  }
}

RogueClassString_StringTable* RogueString_StringTable__set__String_String( RogueClassString_StringTable* THIS, RogueString* key_0, RogueString* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_StringTableEntry* entry_4 = (((RogueClassString_StringTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( entry_4->key, key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_StringTable*)(THIS);
    }
    entry_4 = ((RogueClassString_StringTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_StringTableEntry*)((RogueString_StringTableEntry__init__String_String_Int32( ((RogueClassString_StringTableEntry*)ROGUE_CREATE_OBJECT(String_StringTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_StringTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
  return (RogueClassString_StringTable*)(THIS);
}

RogueStringBuilder* RogueString_StringTable__print_to__StringBuilder( RogueClassString_StringTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__String( buffer_0, ((RogueString_StringTable__get__String( THIS, key_2 ))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_StringTable* RogueString_StringTable__init_object( RogueClassString_StringTable* THIS )
{
  return (RogueClassString_StringTable*)(THIS);
}

RogueString* RogueTokenizer__type_name( RogueClassTokenizer* THIS )
{
  return (RogueString*)(Rogue_literal_strings[658]);
}

RogueTokenList* RogueTokenizer__tokenize__String( RogueClassTokenizer* THIS, RogueString* _auto_1207_0 )
{
  THIS->filepath = _auto_1207_0;
  return (RogueTokenList*)(((RogueTokenizer__tokenize__ParseReader( THIS, ((RogueParseReader__init__File_Int32( ((RogueClassParseReader*)ROGUE_CREATE_OBJECT(ParseReader)), ((RogueFile__init__String( ((RogueClassFile*)ROGUE_CREATE_OBJECT(File)), THIS->filepath ))), 2 ))) ))));
}

RogueTokenList* RogueTokenizer__tokenize__Token_String_String( RogueClassTokenizer* THIS, RogueClassToken* reference_t_0, RogueString* _auto_1208_1, RogueString* data_2 )
{
  THIS->filepath = _auto_1208_1;
  RogueCharacterList* characters_3 = (((RogueCharacterList__init__Int32( ((RogueCharacterList*)ROGUE_CREATE_OBJECT(CharacterList)), data_2->count ))));
  {
    RogueString* _auto_2206_4 = (data_2);
    RogueInt32 _auto_2207_5 = (0);
    for (;_auto_2207_5 < _auto_2206_4->count;++_auto_2207_5)
    {
      RogueCharacter ch_6 = (_auto_2206_4->characters[_auto_2207_5]);
      RogueCharacterList__add__Character( characters_3, ch_6 );
    }
  }
  return (RogueTokenList*)(((RogueTokenizer__tokenize__ParseReader( THIS, ((RogueParseReader__set_location__Int32_Int32( ((RogueParseReader__init__CharacterList_Int32( ((RogueClassParseReader*)ROGUE_CREATE_OBJECT(ParseReader)), characters_3, 2 ))), reference_t_0->line, reference_t_0->column ))) ))));
}

RogueTokenList* RogueTokenizer__tokenize__ParseReader( RogueClassTokenizer* THIS, RogueClassParseReader* _auto_1209_0 )
{
  THIS->reader = _auto_1209_0;
  RogueString_ParseReaderTable__set__String_ParseReader( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->parsereaders_by_filepath, THIS->filepath, THIS->reader );
  RogueTokenizer__configure_token_types( THIS );
  while (((RogueTokenizer__tokenize_another( THIS ))))
  {
  }
  if (THIS->tokens->count == 0)
  {
    if ((THIS->tokens->count == 0 || ((void*)((RogueTokenList__last( THIS->tokens )))->_type) != ((void*)RogueTokenType_eol)))
    {
      RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_eol );
    }
  }
  return (RogueTokenList*)(THIS->tokens);
}

RogueLogical RogueTokenizer__add_new_string_or_character_token_from_buffer__Character( RogueClassTokenizer* THIS, RogueCharacter terminator_0 )
{
  if ((THIS->buffer->characters->count == 1 && terminator_0 == (RogueCharacter)'\''))
  {
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Character( THIS, RogueTokenType_literal_character, THIS->buffer->characters->data->characters[0] ))));
  }
  else
  {
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_String( THIS, RogueTokenType_literal_string, ((RogueStringBuilder__to_String( THIS->buffer ))) ))));
  }
}

RogueLogical RogueTokenizer__add_new_token__TokenType( RogueClassTokenizer* THIS, RogueClassTokenType* type_0 )
{
  RogueTokenList__add__Token( THIS->tokens, (call_ROGUEM89( 4, (RogueClassTokenType*)(type_0), THIS->next_filepath, THIS->next_line, THIS->next_column )) );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__add_new_token__TokenType_Character( RogueClassTokenizer* THIS, RogueClassTokenType* type_0, RogueCharacter value_1 )
{
  RogueTokenList__add__Token( THIS->tokens, ((RogueTokenType__create_token__String_Int32_Int32_Character( type_0, THIS->next_filepath, THIS->next_line, THIS->next_column, value_1 ))) );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__add_new_token__TokenType_Int64( RogueClassTokenizer* THIS, RogueClassTokenType* type_0, RogueInt64 value_1 )
{
  RogueTokenList__add__Token( THIS->tokens, ((RogueTokenType__create_token__String_Int32_Int32_Int64( type_0, THIS->next_filepath, THIS->next_line, THIS->next_column, value_1 ))) );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__add_new_token__TokenType_Int32( RogueClassTokenizer* THIS, RogueClassTokenType* type_0, RogueInt32 value_1 )
{
  RogueTokenList__add__Token( THIS->tokens, ((RogueTokenType__create_token__String_Int32_Int32_Int32( type_0, THIS->next_filepath, THIS->next_line, THIS->next_column, value_1 ))) );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__add_new_token__TokenType_Real64( RogueClassTokenizer* THIS, RogueClassTokenType* type_0, RogueReal64 value_1 )
{
  RogueTokenList__add__Token( THIS->tokens, ((RogueTokenType__create_token__String_Int32_Int32_Real64( type_0, THIS->next_filepath, THIS->next_line, THIS->next_column, value_1 ))) );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__add_new_token__TokenType_String( RogueClassTokenizer* THIS, RogueClassTokenType* type_0, RogueString* value_1 )
{
  RogueTokenList__add__Token( THIS->tokens, (call_ROGUEM90( 9, (RogueClassTokenType*)(type_0), THIS->next_filepath, THIS->next_line, THIS->next_column, value_1 )) );
  return (RogueLogical)(true);
}

void RogueTokenizer__configure_token_types( RogueClassTokenizer* THIS )
{
  if (!!(RogueTokenType_lookup))
  {
    return;
  }
  RogueTokenType_lookup = ((RogueString_TokenTypeTable__init( ((RogueClassString_TokenTypeTable*)ROGUE_CREATE_OBJECT(String_TokenTypeTable)) )));
  RogueTokenType_directive_define = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassDirectiveTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)ROGUE_CREATE_OBJECT(DirectiveTokenType))), Rogue_literal_strings[69] ))))))) )));
  RogueTokenType_directive_include = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassDirectiveTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)ROGUE_CREATE_OBJECT(DirectiveTokenType))), Rogue_literal_strings[70] ))))))) )));
  RogueTokenType_directive_includeNativeCode = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassDirectiveTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)ROGUE_CREATE_OBJECT(DirectiveTokenType))), Rogue_literal_strings[71] ))))))) )));
  RogueTokenType_directive_includeNativeHeader = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassDirectiveTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)ROGUE_CREATE_OBJECT(DirectiveTokenType))), Rogue_literal_strings[72] ))))))) )));
  RogueTokenType_directive_if = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassDirectiveTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)ROGUE_CREATE_OBJECT(DirectiveTokenType))), Rogue_literal_strings[73] ))))))) )));
  RogueTokenType_directive_elseIf = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassDirectiveTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)ROGUE_CREATE_OBJECT(DirectiveTokenType))), Rogue_literal_strings[74] ))))))) )));
  RogueTokenType_directive_else = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassDirectiveTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)ROGUE_CREATE_OBJECT(DirectiveTokenType))), Rogue_literal_strings[75] ))))))) )));
  RogueTokenType_directive_endIf = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassDirectiveTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)ROGUE_CREATE_OBJECT(DirectiveTokenType))), Rogue_literal_strings[76] ))))))) )));
  RogueTokenType_directive_requisite = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructuralDirectiveTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructuralDirectiveTokenType*)ROGUE_CREATE_OBJECT(StructuralDirectiveTokenType))), Rogue_literal_strings[77] ))))))) )));
  RogueTokenType_directive_module = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructuralDirectiveTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructuralDirectiveTokenType*)ROGUE_CREATE_OBJECT(StructuralDirectiveTokenType))), Rogue_literal_strings[78] ))))))) )));
  RogueTokenType_directive_using = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructuralDirectiveTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructuralDirectiveTokenType*)ROGUE_CREATE_OBJECT(StructuralDirectiveTokenType))), Rogue_literal_strings[79] ))))))) )));
  RogueTokenType_placeholder_id = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[80] ))) )));
  RogueTokenType_eol = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassEOLTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassEOLTokenType*)ROGUE_CREATE_OBJECT(EOLTokenType))), Rogue_literal_strings[81] ))))))) )));
  RogueTokenType_eoi = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[82] ))))))) )));
  RogueTokenType_begin_augment_tokens = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[81] ))))))) )));
  RogueTokenType_keyword_augment = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[83] ))))))) )));
  RogueTokenType_keyword_case = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[84] ))))))) )));
  RogueTokenType_keyword_catch = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[85] ))))))) )));
  RogueTokenType_keyword_class = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[86] ))))))) )));
  RogueTokenType_keyword_DEFINITIONS = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[87] ))))))) )));
  RogueTokenType_keyword_else = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[88] ))))))) )));
  RogueTokenType_keyword_elseIf = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[89] ))))))) )));
  RogueTokenType_keyword_endAugment = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[90] ))))))) )));
  RogueTokenType_keyword_endClass = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[91] ))))))) )));
  RogueTokenType_keyword_endContingent = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[92] ))))))) )));
  RogueTokenType_keyword_endForEach = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[93] ))))))) )));
  RogueTokenType_keyword_endFunction = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[94] ))))))) )));
  RogueTokenType_keyword_endIf = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[95] ))))))) )));
  RogueTokenType_keyword_endLoop = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[96] ))))))) )));
  RogueTokenType_keyword_endRoutine = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[97] ))))))) )));
  RogueTokenType_keyword_endTry = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[98] ))))))) )));
  RogueTokenType_keyword_endWhich = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[99] ))))))) )));
  RogueTokenType_keyword_endWhile = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[100] ))))))) )));
  RogueTokenType_keyword_ENUMERATE = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[101] ))))))) )));
  RogueTokenType_keyword_GLOBAL = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[102] ))))))) )));
  RogueTokenType_keyword_GLOBAL_METHODS = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[103] ))))))) )));
  RogueTokenType_keyword_GLOBAL_PROPERTIES = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[104] ))))))) )));
  RogueTokenType_keyword_macro = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[105] ))))))) )));
  RogueTokenType_keyword_method = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[106] ))))))) )));
  RogueTokenType_keyword_METHODS = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[107] ))))))) )));
  RogueTokenType_keyword_others = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[108] ))))))) )));
  RogueTokenType_keyword_PROPERTIES = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[109] ))))))) )));
  RogueTokenType_keyword_routine = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[110] ))))))) )));
  RogueTokenType_keyword_satisfied = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[111] ))))))) )));
  RogueTokenType_keyword_unsatisfied = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[112] ))))))) )));
  RogueTokenType_keyword_with = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[113] ))))))) )));
  RogueTokenType_symbol_close_brace = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[114] ))))))) )));
  RogueTokenType_symbol_close_bracket = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[26] ))))))) )));
  RogueTokenType_symbol_close_comment = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[115] ))))))) )));
  RogueTokenType_symbol_close_paren = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[67] ))))))) )));
  RogueTokenType_symbol_close_specialize = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[116] ))))))) )));
  RogueTokenType_keyword_await = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[117] ))) )));
  RogueTokenType_keyword_contingent = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[118] ))) )));
  RogueTokenType_keyword_escapeContingent = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[119] ))) )));
  RogueTokenType_keyword_escapeForEach = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[120] ))) )));
  RogueTokenType_keyword_escapeIf = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[121] ))) )));
  RogueTokenType_keyword_escapeLoop = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[122] ))) )));
  RogueTokenType_keyword_escapeTry = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[123] ))) )));
  RogueTokenType_keyword_escapeWhich = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[124] ))) )));
  RogueTokenType_keyword_escapeWhile = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[125] ))) )));
  RogueTokenType_keyword_forEach = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[126] ))) )));
  RogueTokenType_keyword_function = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[127] ))) )));
  RogueTokenType_keyword_global = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[128] ))) )));
  RogueTokenType_keyword_if = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[129] ))) )));
  RogueTokenType_keyword_in = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[130] ))) )));
  RogueTokenType_keyword_is = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[131] ))) )));
  RogueTokenType_keyword_isNot = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[132] ))) )));
  RogueTokenType_keyword_local = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[133] ))) )));
  RogueTokenType_keyword_loop = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[134] ))) )));
  RogueTokenType_keyword_native = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[135] ))) )));
  RogueTokenType_keyword_nativeCode = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassNativeCodeTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassNativeCodeTokenType*)ROGUE_CREATE_OBJECT(NativeCodeTokenType))), Rogue_literal_strings[136] ))))))) )));
  RogueTokenType_keyword_nativeHeader = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassNativeCodeTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassNativeCodeTokenType*)ROGUE_CREATE_OBJECT(NativeCodeTokenType))), Rogue_literal_strings[137] ))))))) )));
  RogueTokenType_keyword_necessary = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[138] ))) )));
  RogueTokenType_keyword_nextIteration = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[139] ))) )));
  RogueTokenType_keyword_noAction = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[140] ))) )));
  RogueTokenType_keyword_null = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[1] ))) )));
  RogueTokenType_keyword_of = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[141] ))) )));
  RogueTokenType_keyword_return = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[142] ))) )));
  RogueTokenType_keyword_select = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[143] ))) )));
  RogueTokenType_keyword_step = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[144] ))) )));
  RogueTokenType_keyword_sufficient = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[145] ))) )));
  RogueTokenType_keyword_throw = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[146] ))) )));
  RogueTokenType_keyword_trace = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[147] ))) )));
  RogueTokenType_keyword_trace_position = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[148] ))) )));
  RogueTokenType_keyword_try = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[149] ))) )));
  RogueTokenType_keyword_which = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[150] ))) )));
  RogueTokenType_keyword_while = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[151] ))) )));
  RogueTokenType_keyword_yield = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[152] ))) )));
  RogueTokenType_identifier = ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[153] )));
  RogueTokenType_type_identifier = ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[154] )));
  RogueTokenType_literal_character = ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[36] )));
  RogueTokenType_literal_integer = ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[35] )));
  RogueTokenType_literal_long = ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[34] )));
  RogueTokenType_literal_real = ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[32] )));
  RogueTokenType_literal_string = ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[40] )));
  RogueTokenType_keyword_and = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[155] ))) )));
  RogueTokenType_keyword_as = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[156] ))) )));
  RogueTokenType_keyword_downTo = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[157] ))) )));
  RogueTokenType_keyword_false = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[158] ))) )));
  RogueTokenType_keyword_instanceOf = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[159] ))) )));
  RogueTokenType_keyword_infinity = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[160] ))) )));
  RogueTokenType_keyword_meta = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[161] ))) )));
  RogueTokenType_keyword_NaN = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[162] ))) )));
  RogueTokenType_keyword_not = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[163] ))) )));
  RogueTokenType_keyword_notInstanceOf = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[164] ))) )));
  RogueTokenType_keyword_or = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[165] ))) )));
  RogueTokenType_keyword_pi = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[166] ))) )));
  RogueTokenType_keyword_prior = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[167] ))) )));
  RogueTokenType_keyword_this = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[168] ))) )));
  RogueTokenType_keyword_true = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[169] ))) )));
  RogueTokenType_keyword_xor = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[170] ))) )));
  RogueTokenType_symbol_ampersand = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[171] ))) )));
  RogueTokenType_symbol_ampersand_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassOpWithAssignTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[172] ))))))) )));
  RogueTokenType_symbol_arrow = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[173] ))) )));
  RogueTokenType_symbol_at = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[174] ))) )));
  RogueTokenType_symbol_backslash = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[175] ))) )));
  RogueTokenType_symbol_caret = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[176] ))) )));
  RogueTokenType_symbol_caret_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassOpWithAssignTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[177] ))))))) )));
  RogueTokenType_symbol_colon = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[178] ))) )));
  RogueTokenType_symbol_comma = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[179] ))) )));
  RogueTokenType_symbol_compare = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[180] ))) )));
  RogueTokenType_symbol_dot = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[51] ))) )));
  RogueTokenType_symbol_dot_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassOpWithAssignTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[181] ))))))) )));
  RogueTokenType_symbol_downToGreaterThan = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[182] ))) )));
  RogueTokenType_symbol_empty_braces = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[183] ))) )));
  RogueTokenType_symbol_empty_brackets = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[184] ))) )));
  RogueTokenType_symbol_eq = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[185] ))) )));
  RogueTokenType_symbol_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[186] ))) )));
  RogueTokenType_symbol_exclamation_point = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[187] ))) )));
  RogueTokenType_symbol_fat_arrow = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[188] ))) )));
  RogueTokenType_symbol_ge = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[189] ))) )));
  RogueTokenType_symbol_gt = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[190] ))) )));
  RogueTokenType_symbol_le = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[191] ))) )));
  RogueTokenType_symbol_lt = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[192] ))) )));
  RogueTokenType_symbol_minus = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[193] ))) )));
  RogueTokenType_symbol_minus_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassOpWithAssignTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[194] ))))))) )));
  RogueTokenType_symbol_minus_minus = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[4] ))) )));
  RogueTokenType_symbol_ne = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[195] ))) )));
  RogueTokenType_symbol_open_brace = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[196] ))) )));
  RogueTokenType_symbol_open_bracket = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[197] ))) )));
  RogueTokenType_symbol_open_paren = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[66] ))) )));
  RogueTokenType_symbol_open_specialize = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[198] ))) )));
  RogueTokenType_symbol_percent = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[199] ))) )));
  RogueTokenType_symbol_percent_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassOpWithAssignTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[200] ))))))) )));
  RogueTokenType_symbol_plus = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[201] ))) )));
  RogueTokenType_symbol_plus_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassOpWithAssignTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[202] ))))))) )));
  RogueTokenType_symbol_plus_plus = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[203] ))) )));
  RogueTokenType_symbol_question_mark = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[204] ))) )));
  RogueTokenType_symbol_semicolon = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[205] ))) )));
  RogueTokenType_symbol_shift_left = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[206] ))) )));
  RogueTokenType_symbol_shift_right = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[207] ))) )));
  RogueTokenType_symbol_shift_right_x = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[208] ))) )));
  RogueTokenType_symbol_slash = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[48] ))) )));
  RogueTokenType_symbol_slash_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassOpWithAssignTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[209] ))))))) )));
  RogueTokenType_symbol_tilde = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[210] ))) )));
  RogueTokenType_symbol_tilde_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassOpWithAssignTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[211] ))))))) )));
  RogueTokenType_symbol_times = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[212] ))) )));
  RogueTokenType_symbol_times_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassOpWithAssignTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[213] ))))))) )));
  RogueTokenType_symbol_upTo = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[214] ))) )));
  RogueTokenType_symbol_upToLessThan = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[215] ))) )));
  RogueTokenType_symbol_vertical_bar = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[216] ))) )));
  RogueTokenType_symbol_vertical_bar_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueClassTokenType*)(((RogueClassOpWithAssignTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[217] ))))))) )));
  RogueTokenType_symbol_double_vertical_bar = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[218] ))) )));
}

RogueLogical RogueTokenizer__consume__Character( RogueClassTokenizer* THIS, RogueCharacter ch_0 )
{
  if (((RogueParseReader__peek( THIS->reader ))) != ch_0)
  {
    return (RogueLogical)(false);
  }
  RogueParseReader__read( THIS->reader );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__consume__String( RogueClassTokenizer* THIS, RogueString* st_0 )
{
  return (RogueLogical)(((RogueParseReader__consume__String( THIS->reader, st_0 ))));
}

RogueLogical RogueTokenizer__consume_id__String( RogueClassTokenizer* THIS, RogueString* st_0 )
{
  return (RogueLogical)(((RogueParseReader__consume_id__String( THIS->reader, st_0 ))));
}

RogueLogical RogueTokenizer__consume_spaces( RogueClassTokenizer* THIS )
{
  if (!(((RogueParseReader__consume__Character( THIS->reader, (RogueCharacter)' ' )))))
  {
    return (RogueLogical)(false);
  }
  while (((RogueParseReader__consume__Character( THIS->reader, (RogueCharacter)' ' ))))
  {
  }
  return (RogueLogical)(true);
}

RogueClassTokenType* RogueTokenizer__define__TokenType( RogueClassTokenizer* THIS, RogueClassTokenType* type_0 )
{
  RogueString_TokenTypeTable__set__String_TokenType( RogueTokenType_lookup, type_0->name, type_0 );
  return (RogueClassTokenType*)(type_0);
}

RogueClassRogueError* RogueTokenizer__error__String( RogueClassTokenizer* THIS, RogueString* message_0 )
{
  return (RogueClassRogueError*)(((RogueRogueError__init__String_String_Int32_Int32( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), message_0, THIS->filepath, THIS->reader->line, THIS->reader->column ))));
}

RogueClassTokenType* Rogue_Tokenizer__get_symbol_token_type( RogueClassTokenizer* THIS )
{
  RogueCharacter ch_0 = (((RogueParseReader__read( THIS->reader ))));
  if (ch_0 == (RogueCharacter)'!')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_ne);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_exclamation_point);
    }
  }
  else if (ch_0 == (RogueCharacter)'$')
  {
    RogueString* id_1 = (((RogueTokenizer__read_identifier( THIS ))));
    {
      if (((RogueString__operatorEQUALSEQUALS__String( id_1, Rogue_literal_strings[238] ))))
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_directive_define );
      }
      else if (((RogueString__operatorEQUALSEQUALS__String( id_1, Rogue_literal_strings[239] ))))
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_directive_include );
      }
      else if (((RogueString__operatorEQUALSEQUALS__String( id_1, Rogue_literal_strings[240] ))))
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_directive_includeNativeCode );
      }
      else if (((RogueString__operatorEQUALSEQUALS__String( id_1, Rogue_literal_strings[241] ))))
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_directive_includeNativeHeader );
      }
      else if (((RogueString__operatorEQUALSEQUALS__String( id_1, Rogue_literal_strings[129] ))))
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_directive_if );
      }
      else if (((RogueString__operatorEQUALSEQUALS__String( id_1, Rogue_literal_strings[89] ))))
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_directive_elseIf );
      }
      else if (((RogueString__operatorEQUALSEQUALS__String( id_1, Rogue_literal_strings[88] ))))
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_directive_else );
      }
      else if (((RogueString__operatorEQUALSEQUALS__String( id_1, Rogue_literal_strings[95] ))))
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_directive_endIf );
      }
      else if (((RogueString__operatorEQUALSEQUALS__String( id_1, Rogue_literal_strings[242] ))))
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_directive_requisite );
      }
      else
      {
        RogueTokenizer__add_new_token__TokenType_String( THIS, RogueTokenType_placeholder_id, ((RogueString__operatorPLUS__String( Rogue_literal_strings[243], id_1 ))) );
      }
    }
    return (RogueClassTokenType*)(((RogueClassTokenType*)(NULL)));
  }
  else if (ch_0 == (RogueCharacter)'%')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_percent_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_percent);
    }
  }
  else if (ch_0 == (RogueCharacter)'&')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'&' ))))
    {
      ROGUE_THROW(((RogueTokenizer__error__String( THIS, Rogue_literal_strings[244] ))));
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_ampersand_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_ampersand);
    }
  }
  else if (ch_0 == (RogueCharacter)'(')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_open_paren);
  }
  else if (ch_0 == (RogueCharacter)')')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_close_paren);
  }
  else if (ch_0 == (RogueCharacter)'*')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_times_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_times);
    }
  }
  else if (ch_0 == (RogueCharacter)'+')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_plus_equals);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'+' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_plus_plus);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_plus);
    }
  }
  else if (ch_0 == (RogueCharacter)',')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_comma);
  }
  else if (ch_0 == (RogueCharacter)'-')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_minus_equals);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'-' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_minus_minus);
    }
    else if ((((RogueParseReader__peek__Int32( THIS->reader, 0 ))) == (RogueCharacter)'>' && ((RogueParseReader__peek__Int32( THIS->reader, 1 ))) == (RogueCharacter)'>'))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_minus);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'>' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_arrow);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_minus);
    }
  }
  else if (ch_0 == (RogueCharacter)'.')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'.' ))))
    {
      if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'.' ))))
      {
        while (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)' ' ))))
        {
        }
        if (!(((RogueTokenizer__consume__Character( THIS, (RogueCharacter)10 )))))
        {
          ROGUE_THROW(((RogueTokenizer__error__String( THIS, Rogue_literal_strings[245] ))));
        }
        return (RogueClassTokenType*)(((RogueClassTokenType*)(NULL)));
      }
      else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'<' ))))
      {
        return (RogueClassTokenType*)(RogueTokenType_symbol_upToLessThan);
      }
      else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'>' ))))
      {
        return (RogueClassTokenType*)(RogueTokenType_symbol_downToGreaterThan);
      }
      else
      {
        return (RogueClassTokenType*)(RogueTokenType_symbol_upTo);
      }
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_dot_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_dot);
    }
  }
  else if (ch_0 == (RogueCharacter)'/')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_slash_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_slash);
    }
  }
  else if (ch_0 == (RogueCharacter)':')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)':' ))))
    {
      RogueTokenizer__add_new_token__TokenType_String( THIS, RogueTokenType_identifier, ((RogueString__operatorPLUS__String( Rogue_literal_strings[68], ((RogueTokenizer__read_identifier( THIS ))) ))) );
      return (RogueClassTokenType*)(((RogueClassTokenType*)(NULL)));
    }
    if (((RogueTokenizer__consume__String( THIS, Rogue_literal_strings[246] ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_shift_left);
    }
    else if (((RogueTokenizer__consume__String( THIS, Rogue_literal_strings[247] ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_shift_right);
    }
    else if (((RogueTokenizer__consume__String( THIS, Rogue_literal_strings[248] ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_shift_right_x);
    }
    return (RogueClassTokenType*)(RogueTokenType_symbol_colon);
  }
  else if (ch_0 == (RogueCharacter)';')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_semicolon);
  }
  else if (ch_0 == (RogueCharacter)'<')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'<' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_open_specialize);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_le);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'>' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_compare);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_lt);
    }
  }
  else if (ch_0 == (RogueCharacter)'=')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_eq);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'>' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_fat_arrow);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_equals);
    }
  }
  else if (ch_0 == (RogueCharacter)'>')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_ge);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'>' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_close_specialize);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_gt);
    }
  }
  else if (ch_0 == (RogueCharacter)'?')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_question_mark);
  }
  else if (ch_0 == (RogueCharacter)'@')
  {
    if (((RogueTokenizer__consume_id__String( THIS, Rogue_literal_strings[147] ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_keyword_trace_position);
    }
    return (RogueClassTokenType*)(RogueTokenType_symbol_at);
  }
  else if (ch_0 == (RogueCharacter)'[')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)']' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_empty_brackets);
    }
    return (RogueClassTokenType*)(RogueTokenType_symbol_open_bracket);
  }
  else if (ch_0 == (RogueCharacter)'\\')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_backslash);
  }
  else if (ch_0 == (RogueCharacter)']')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_close_bracket);
  }
  else if (ch_0 == (RogueCharacter)'^')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_caret_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_caret);
    }
  }
  else if (ch_0 == (RogueCharacter)'{')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'}' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_empty_braces);
    }
    return (RogueClassTokenType*)(RogueTokenType_symbol_open_brace);
  }
  else if (ch_0 == (RogueCharacter)'|')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'|' ))))
    {
      ROGUE_THROW(((RogueTokenizer__error__String( THIS, Rogue_literal_strings[249] ))));
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_vertical_bar_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_vertical_bar);
    }
  }
  else if (ch_0 == (RogueCharacter)'}')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'#' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_close_comment);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_close_brace);
    }
  }
  else if (ch_0 == (RogueCharacter)'~')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_tilde_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_tilde);
    }
  }
  else
  {
    ROGUE_THROW(((RogueTokenizer__error__String( THIS, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__Character( Rogue_literal_strings[250], ch_0 ))), Rogue_literal_strings[21] ))) ))));
  }
}

RogueLogical RogueTokenizer__next_is_hex_digit( RogueClassTokenizer* THIS )
{
  RogueCharacter ch_0 = (((RogueParseReader__peek( THIS->reader ))));
  return (RogueLogical)((((ch_0 >= (RogueCharacter)'0' && ch_0 <= (RogueCharacter)'9') || (ch_0 >= (RogueCharacter)'a' && ch_0 <= (RogueCharacter)'f')) || (ch_0 >= (RogueCharacter)'A' && ch_0 <= (RogueCharacter)'F')));
}

void RogueTokenizer__read_character( RogueClassTokenizer* THIS )
{
  if (!(((RogueParseReader__has_another( THIS->reader )))))
  {
    ROGUE_THROW(((RogueTokenizer__error__String( THIS, Rogue_literal_strings[224] ))));
  }
  RogueCharacter ch_0 = (((RogueParseReader__peek( THIS->reader ))));
  if (ch_0 == (RogueCharacter)10)
  {
    ROGUE_THROW(((RogueTokenizer__error__String( THIS, Rogue_literal_strings[225] ))));
  }
  if (ch_0 == (RogueCharacter)'\\')
  {
    RogueParseReader__read( THIS->reader );
    if (!(((RogueParseReader__has_another( THIS->reader )))))
    {
      ROGUE_THROW(((RogueTokenizer__error__String( THIS, Rogue_literal_strings[226] ))));
    }
    RogueInt32 value_1 = 0;
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'b' ))))
    {
      value_1 = ((RogueInt32)8);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'f' ))))
    {
      value_1 = ((RogueInt32)12);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'n' ))))
    {
      value_1 = ((RogueInt32)((RogueInt32)((RogueCharacter)10)));
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'r' ))))
    {
      value_1 = ((RogueInt32)((RogueInt32)((RogueCharacter)13)));
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'t' ))))
    {
      value_1 = ((RogueInt32)((RogueInt32)((RogueCharacter)9)));
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'v' ))))
    {
      value_1 = ((RogueInt32)11);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'0' ))))
    {
      value_1 = ((RogueInt32)((RogueInt32)((RogueCharacter)0)));
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'/' ))))
    {
      value_1 = ((RogueInt32)((RogueInt32)((RogueCharacter)'/')));
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'\'' ))))
    {
      value_1 = ((RogueInt32)((RogueInt32)((RogueCharacter)'\'')));
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'\\' ))))
    {
      value_1 = ((RogueInt32)((RogueInt32)((RogueCharacter)'\\')));
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'"' ))))
    {
      value_1 = ((RogueInt32)((RogueInt32)((RogueCharacter)'"')));
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'x' ))))
    {
      value_1 = ((RogueInt32)((RogueTokenizer__read_hex_value__Int32( THIS, 2 ))));
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'u' ))))
    {
      value_1 = ((RogueInt32)((RogueTokenizer__read_hex_value__Int32( THIS, 4 ))));
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'s' ))))
    {
      value_1 = ((RogueInt32)((RogueTokenizer__read_hex_value__Int32( THIS, 6 ))));
    }
    else
    {
      ROGUE_THROW(((RogueTokenizer__error__String( THIS, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( Rogue_literal_strings[230], Rogue_literal_strings[231] ))), Rogue_literal_strings[232] ))) ))));
    }
    if (value_1 < 65536)
    {
      RogueStringBuilder__print__Character( THIS->buffer, ((RogueCharacter)(value_1)) );
    }
    else
    {
      value_1 -= 65536;
      RogueStringBuilder__print__Character( THIS->buffer, ((RogueCharacter)((55296 + ((RogueMath__shift_right__Int32_Int32( value_1, 10 )) & 1023)))) );
      RogueStringBuilder__print__Character( THIS->buffer, ((RogueCharacter)((56320 + (value_1 & 1023)))) );
    }
  }
  else
  {
    RogueInt32 value_2 = (((RogueInt32)(((RogueParseReader__read( THIS->reader ))))));
    if ((value_2 & 128) != 0)
    {
      RogueInt32 ch2_3 = (((RogueInt32)(((RogueParseReader__read( THIS->reader ))))));
      if ((value_2 & 32) == 0)
      {
        value_2 = ((RogueInt32)(value_2 & 31));
        ch2_3 = ((RogueInt32)(value_2 & 63));
        RogueStringBuilder__print__Character( THIS->buffer, ((RogueCharacter)(((value_2 << 6) | ch2_3))) );
      }
      else
      {
        RogueInt32 ch3_4 = (((RogueInt32)(((RogueParseReader__read( THIS->reader ))))));
        value_2 = ((RogueInt32)(value_2 & 15));
        ch2_3 = ((RogueInt32)(ch2_3 & 63));
        ch3_4 = ((RogueInt32)(ch3_4 & 63));
        RogueStringBuilder__print__Character( THIS->buffer, ((RogueCharacter)((((value_2 << 2) | (ch2_3 << 6)) | ch3_4))) );
      }
    }
    else
    {
      RogueStringBuilder__print__Character( THIS->buffer, ((RogueCharacter)(value_2)) );
    }
  }
}

RogueInt32 RogueTokenizer__read_hex_value__Int32( RogueClassTokenizer* THIS, RogueInt32 digits_0 )
{
  RogueInt32 value_1 = (0);
  RogueInt32 i_2 = (1);
  while (i_2 <= digits_0)
  {
    if (!(((RogueParseReader__has_another( THIS->reader )))))
    {
      ROGUE_THROW(((RogueTokenizer__error__String( THIS, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], digits_0 ))), Rogue_literal_strings[228] ))) ))));
    }
    if (!(((RogueTokenizer__next_is_hex_digit( THIS )))))
    {
      RogueCharacter ch_3 = (((RogueParseReader__peek( THIS->reader ))));
      RogueStringBuilder* error_buffer_4 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
      RogueStringBuilder__print__String( error_buffer_4, Rogue_literal_strings[229] );
      if ((ch_3 < (RogueCharacter)' ' || ((RogueInt32)(ch_3)) == 127))
      {
        RogueStringBuilder__print__Int32( error_buffer_4, ((RogueInt32)(ch_3)) );
      }
      else
      {
        RogueStringBuilder__print__String( error_buffer_4, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__Character( Rogue_literal_strings[55], ch_3 ))), Rogue_literal_strings[55] ))) );
      }
      RogueStringBuilder__print__Character( error_buffer_4, (RogueCharacter)'.' );
      ROGUE_THROW(((RogueTokenizer__error__String( THIS, ((RogueStringBuilder__to_String( error_buffer_4 ))) ))));
    }
    RogueInt32 intval_5 = (((RogueCharacter__to_number__Int32( ((RogueParseReader__read( THIS->reader ))), 16 ))));
    value_1 = ((RogueInt32)((value_1 << 4) + intval_5));
    ++i_2;
  }
  return (RogueInt32)(value_1);
}

RogueString* RogueTokenizer__read_identifier( RogueClassTokenizer* THIS )
{
  RogueStringBuilder__clear( THIS->buffer );
  RogueCharacter ch_0 = (((RogueParseReader__peek( THIS->reader ))));
  while (((((ch_0 >= (RogueCharacter)'a' && ch_0 <= (RogueCharacter)'z') || (ch_0 >= (RogueCharacter)'A' && ch_0 <= (RogueCharacter)'Z')) || (ch_0 >= (RogueCharacter)'0' && ch_0 <= (RogueCharacter)'9')) || ch_0 == (RogueCharacter)'_'))
  {
    RogueStringBuilder__print__Character( THIS->buffer, ((RogueParseReader__read( THIS->reader ))) );
    ch_0 = ((RogueCharacter)((RogueParseReader__peek( THIS->reader ))));
    while ((ch_0 == (RogueCharacter)':' && ((RogueParseReader__peek__Int32( THIS->reader, 1 ))) == (RogueCharacter)':'))
    {
      RogueParseReader__read( THIS->reader );
      RogueParseReader__read( THIS->reader );
      RogueStringBuilder__print__String( THIS->buffer, Rogue_literal_strings[68] );
      ch_0 = ((RogueCharacter)((RogueParseReader__peek( THIS->reader ))));
    }
  }
  if (THIS->buffer->characters->count == 0)
  {
    ROGUE_THROW(((RogueTokenizer__error__String( THIS, Rogue_literal_strings[219] ))));
  }
  return (RogueString*)(((RogueStringBuilder__to_String( THIS->buffer ))));
}

RogueLogical RogueTokenizer__tokenize_alternate_string__Character( RogueClassTokenizer* THIS, RogueCharacter terminator_0 )
{
  RogueStringBuilder__clear( THIS->buffer );
  while (((RogueParseReader__has_another( THIS->reader ))))
  {
    if (((RogueParseReader__has_another( THIS->reader ))))
    {
      RogueCharacter ch_1 = (((RogueParseReader__peek( THIS->reader ))));
      if (ch_1 == terminator_0)
      {
        RogueParseReader__read( THIS->reader );
        ch_1 = ((RogueCharacter)((RogueParseReader__peek( THIS->reader ))));
        if (ch_1 == terminator_0)
        {
          RogueParseReader__read( THIS->reader );
          return (RogueLogical)(((RogueTokenizer__add_new_string_or_character_token_from_buffer__Character( THIS, ((RogueCharacter)(0)) ))));
        }
        else
        {
          RogueStringBuilder__print__Character( THIS->buffer, terminator_0 );
        }
      }
      else
      {
        RogueTokenizer__read_character( THIS );
      }
    }
  }
  ROGUE_THROW(((RogueTokenizer__error__String( THIS, Rogue_literal_strings[233] ))));
}

RogueLogical RogueTokenizer__tokenize_another( RogueClassTokenizer* THIS )
{
  RogueParseReader__consume_spaces( THIS->reader );
  THIS->next_filepath = THIS->filepath;
  THIS->next_line = THIS->reader->line;
  THIS->next_column = THIS->reader->column;
  if (!(((RogueParseReader__has_another( THIS->reader )))))
  {
    return (RogueLogical)(false);
  }
  RogueCharacter ch_0 = (((RogueParseReader__peek( THIS->reader ))));
  if (ch_0 == (RogueCharacter)10)
  {
    RogueParseReader__read( THIS->reader );
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_eol ))));
  }
  if ((((RogueCharacter__is_letter( ch_0 ))) || ch_0 == (RogueCharacter)'_'))
  {
    RogueString* id_1 = (((RogueTokenizer__read_identifier( THIS ))));
    RogueClassTokenType* keyword_type_2 = (((RogueString_TokenTypeTable__get__String( RogueTokenType_lookup, id_1 ))));
    if (!!(keyword_type_2))
    {
      if (((void*)keyword_type_2) == ((void*)RogueTokenType_keyword_nativeCode))
      {
        return (RogueLogical)(((RogueTokenizer__scan_native_code( THIS ))));
      }
      else if (((void*)keyword_type_2) == ((void*)RogueTokenType_keyword_nativeHeader))
      {
        return (RogueLogical)(((RogueTokenizer__scan_native_header( THIS ))));
      }
      else
      {
        return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType( THIS, keyword_type_2 ))));
      }
    }
    else
    {
      return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_String( THIS, RogueTokenType_identifier, id_1 ))));
    }
    return (RogueLogical)(true);
  }
  else if (ch_0 == (RogueCharacter)'\'')
  {
    if (((RogueParseReader__peek__Int32( THIS->reader, 1 ))) == (RogueCharacter)'\'')
    {
      RogueParseReader__read( THIS->reader );
      RogueParseReader__read( THIS->reader );
      return (RogueLogical)(((RogueTokenizer__tokenize_alternate_string__Character( THIS, (RogueCharacter)'\'' ))));
    }
    else
    {
      return (RogueLogical)(((RogueTokenizer__tokenize_string__Character( THIS, (RogueCharacter)'\'' ))));
    }
  }
  else if (ch_0 == (RogueCharacter)'"')
  {
    return (RogueLogical)(((RogueTokenizer__tokenize_string__Character( THIS, (RogueCharacter)'"' ))));
  }
  else if (ch_0 == (RogueCharacter)'#')
  {
    return (RogueLogical)(((RogueTokenizer__tokenize_comment( THIS ))));
  }
  else if ((ch_0 >= (RogueCharacter)'0' && ch_0 <= (RogueCharacter)'9'))
  {
    switch (((RogueInt32)(((RogueParseReader__peek__Int32( THIS->reader, 1 ))))))
    {
      case (RogueCharacter)'b':
      {
        return (RogueLogical)(((RogueTokenizer__tokenize_integer_in_base__Int32( THIS, 2 ))));
        break;
      }
      case (RogueCharacter)'c':
      {
        return (RogueLogical)(((RogueTokenizer__tokenize_integer_in_base__Int32( THIS, 8 ))));
        break;
      }
      case (RogueCharacter)'x':
      {
        return (RogueLogical)(((RogueTokenizer__tokenize_integer_in_base__Int32( THIS, 16 ))));
        break;
      }
      default:
      {
        return (RogueLogical)(((RogueTokenizer__tokenize_number( THIS ))));
      }
    }
  }
  else if ((ch_0 == (RogueCharacter)'@' && ((RogueParseReader__peek__Int32( THIS->reader, 1 ))) == (RogueCharacter)'|'))
  {
    return (RogueLogical)(((RogueTokenizer__tokenize_verbatim_string( THIS ))));
  }
  else
  {
    if (ch_0 == (RogueCharacter)'.')
    {
      RogueCharacter next_3 = (((RogueParseReader__peek__Int32( THIS->reader, 1 ))));
      if ((next_3 >= (RogueCharacter)'0' && next_3 <= (RogueCharacter)'9'))
      {
        return (RogueLogical)(((RogueTokenizer__tokenize_number( THIS ))));
      }
    }
    RogueClassTokenType* token_type_4 = (((Rogue_Tokenizer__get_symbol_token_type( THIS ))));
    if (((void*)token_type_4) == ((void*)NULL))
    {
      return (RogueLogical)(true);
    }
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType( THIS, token_type_4 ))));
  }
  RogueString* name_5 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[55] ))), ((RogueString__operatorPLUS__Character( Rogue_literal_strings[0], ch_0 ))) ))), Rogue_literal_strings[55] ))) ))));
  if (((RogueInt32)(ch_0)) == 10)
  {
    name_5 = ((RogueString*)Rogue_literal_strings[251]);
  }
  else if ((((RogueInt32)(ch_0)) < 32 || ((RogueInt32)(ch_0)) > 126))
  {
    name_5 = ((RogueString*)((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[252] ))), ((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], ((RogueInt32)(ch_0)) ))) ))), Rogue_literal_strings[67] ))) ))));
  }
  ROGUE_THROW(((RogueTokenizer__error__String( THIS, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[253] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], name_5 ))) ))), Rogue_literal_strings[51] ))) ))) ))));
}

RogueLogical RogueTokenizer__tokenize_comment( RogueClassTokenizer* THIS )
{
  RogueStringBuilder__clear( THIS->buffer );
  RogueParseReader__read( THIS->reader );
  if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'{' ))))
  {
    RogueInt32 nesting_count_0 = (1);
    while (((RogueParseReader__has_another( THIS->reader ))))
    {
      RogueCharacter ch_1 = (((RogueParseReader__read( THIS->reader ))));
      switch (((RogueInt32)(ch_1)))
      {
        case (RogueCharacter)'#':
        {
          RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)'#' );
          if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'{' ))))
          {
            RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)'{' );
            ++nesting_count_0;
          }
          break;
        }
        case (RogueCharacter)'}':
        {
          if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'#' ))))
          {
            --nesting_count_0;
            if (nesting_count_0 == 0)
            {
              goto _auto_2208;
            }
            else
            {
              RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)'}' );
              RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)'#' );
            }
          }
          else
          {
            RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)'}' );
          }
          break;
        }
        default:
        {
          RogueStringBuilder__print__Character( THIS->buffer, ch_1 );
        }
      }
    }
    _auto_2208:;
  }
  else
  {
    while ((((RogueParseReader__has_another( THIS->reader ))) && ((RogueParseReader__peek( THIS->reader ))) != (RogueCharacter)10))
    {
      RogueStringBuilder__print__Character( THIS->buffer, ((RogueParseReader__read( THIS->reader ))) );
    }
  }
  if ((!!(THIS->tokens->count) && ((void*)((RogueTokenList__last( THIS->tokens )))->_type) == ((void*)RogueTokenType_eol)))
  {
    ((RogueClassEOLToken*)(RogueObject_as(((RogueTokenList__last( THIS->tokens ))),RogueTypeEOLToken)))->comment = ((RogueString__operatorPLUS__String( ((RogueClassEOLToken*)(RogueObject_as(((RogueTokenList__last( THIS->tokens ))),RogueTypeEOLToken)))->comment, ((RogueStringBuilder__to_String( THIS->buffer ))) )));
  }
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__tokenize_integer_in_base__Int32( RogueClassTokenizer* THIS, RogueInt32 base_0 )
{
  RogueParseReader__read( THIS->reader );
  RogueParseReader__read( THIS->reader );
  RogueInt32 count_1 = (0);
  RogueInt64 n_2 = (((RogueInt64)0));
  RogueInt32 digit_3 = (((RogueCharacter__to_number__Int32( ((RogueParseReader__peek( THIS->reader ))), base_0 ))));
  while ((((RogueParseReader__has_another( THIS->reader ))) && digit_3 != -1))
  {
    if (digit_3 >= base_0)
    {
      ROGUE_THROW(((RogueTokenizer__error__String( THIS, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__Int32( Rogue_literal_strings[235], base_0 ))), Rogue_literal_strings[51] ))) ))));
    }
    ++count_1;
    n_2 = ((RogueInt64)((n_2 * ((RogueInt64)base_0)) + ((RogueInt64)digit_3)));
    RogueParseReader__read( THIS->reader );
    digit_3 = ((RogueInt32)((RogueCharacter__to_number__Int32( ((RogueParseReader__peek( THIS->reader ))), base_0 ))));
  }
  if (count_1 == 0)
  {
    ROGUE_THROW(((RogueTokenizer__error__String( THIS, Rogue_literal_strings[236] ))));
  }
  if ((((base_0 == 2 && count_1 > 32) || (base_0 == 8 && count_1 > 11)) || (base_0 == 16 && count_1 > 8)))
  {
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Int64( THIS, RogueTokenType_literal_long, n_2 ))));
  }
  else
  {
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Int64( THIS, RogueTokenType_literal_integer, n_2 ))));
  }
}

RogueLogical RogueTokenizer__tokenize_number( RogueClassTokenizer* THIS )
{
  RogueLogical is_negative_0 = (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'-' ))));
  RogueInt32 i_1 = (0);
  while ((((RogueParseReader__has_another__Int32( THIS->reader, (i_1 + 1) ))) && ((RogueCharacter__is_number__Int32( ((RogueParseReader__peek__Int32( THIS->reader, i_1 ))), 10 )))))
  {
    ++i_1;
  }
  RogueCharacter ch_2 = (((RogueParseReader__peek__Int32( THIS->reader, i_1 ))));
  RogueLogical is_real_3 = ((((ch_2 == (RogueCharacter)'.' && ((RogueCharacter__is_number__Int32( ((RogueParseReader__peek__Int32( THIS->reader, (i_1 + 1) ))), 10 )))) || ch_2 == (RogueCharacter)'e') || ch_2 == (RogueCharacter)'E'));
  if (is_real_3)
  {
    RogueReal64 n_4 = (((RogueTokenizer__scan_real( THIS ))));
    ch_2 = ((RogueCharacter)((RogueParseReader__peek( THIS->reader ))));
    if (ch_2 == (RogueCharacter)'.')
    {
      ch_2 = ((RogueCharacter)((RogueParseReader__peek__Int32( THIS->reader, 1 ))));
      if ((ch_2 >= (RogueCharacter)'0' && ch_2 <= (RogueCharacter)'9'))
      {
        RogueParseReader__read( THIS->reader );
        RogueInt32 start_pos_5 = (THIS->reader->position);
        RogueReal64 fraction_6 = (((RogueTokenizer__scan_real( THIS ))));
        n_4 += (fraction_6 / ((RogueReal64) pow((double)10.0, (double)((RogueReal64)((THIS->reader->position - start_pos_5))))));
      }
      else if (ch_2 == (RogueCharacter)'.')
      {
        if (is_negative_0)
        {
          n_4 = ((RogueReal64)(-(n_4)));
        }
        return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Int32( THIS, RogueTokenType_literal_integer, ((RogueInt32)(n_4)) ))));
      }
      else if ((((ch_2 >= (RogueCharacter)'a' && ch_2 <= (RogueCharacter)'z') || (ch_2 >= (RogueCharacter)'A' && ch_2 <= (RogueCharacter)'Z')) || ch_2 == (RogueCharacter)'_'))
      {
        return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Int32( THIS, RogueTokenType_literal_integer, ((RogueInt32)(n_4)) ))));
      }
      else
      {
        if (is_negative_0)
        {
          n_4 = ((RogueReal64)(-(n_4)));
        }
        return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Real64( THIS, RogueTokenType_literal_real, n_4 ))));
      }
    }
    if ((((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'E' ))) || ((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'e' )))))
    {
      RogueLogical negative_exponent_7 = (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'-' ))));
      if (!(negative_exponent_7))
      {
        RogueTokenizer__consume__Character( THIS, (RogueCharacter)'+' );
      }
      RogueReal64 power_8 = (((RogueTokenizer__scan_real( THIS ))));
      if (negative_exponent_7)
      {
        n_4 /= ((RogueReal64) pow((double)10.0, (double)power_8));
      }
      else
      {
        n_4 *= ((RogueReal64) pow((double)10.0, (double)power_8));
      }
    }
    if (is_negative_0)
    {
      n_4 = ((RogueReal64)(-(n_4)));
    }
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Real64( THIS, RogueTokenType_literal_real, n_4 ))));
  }
  else
  {
    RogueInt64 n_9 = (((RogueTokenizer__scan_long( THIS ))));
    if (is_negative_0)
    {
      n_9 = ((RogueInt64)(-(n_9)));
    }
    if (n_9 == ((RogueInt64)((RogueInt32)(n_9))))
    {
      return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Int32( THIS, RogueTokenType_literal_integer, ((RogueInt32)(n_9)) ))));
    }
    else
    {
      return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Int64( THIS, RogueTokenType_literal_long, n_9 ))));
    }
  }
}

RogueReal64 RogueTokenizer__scan_real( RogueClassTokenizer* THIS )
{
  RogueReal64 n_0 = (0.0);
  RogueCharacter ch_1 = (((RogueParseReader__peek( THIS->reader ))));
  while ((ch_1 >= (RogueCharacter)'0' && ch_1 <= (RogueCharacter)'9'))
  {
    RogueInt32 intval_2 = ((((RogueInt32)(((RogueParseReader__read( THIS->reader ))))) - ((RogueInt32)((RogueCharacter)'0'))));
    n_0 = ((RogueReal64)((n_0 * 10.0) + ((RogueReal64)(intval_2))));
    ch_1 = ((RogueCharacter)((RogueParseReader__peek( THIS->reader ))));
  }
  return (RogueReal64)(n_0);
}

RogueInt64 RogueTokenizer__scan_long( RogueClassTokenizer* THIS )
{
  RogueInt64 n_0 = (((RogueInt64)0));
  RogueCharacter ch_1 = (((RogueParseReader__peek( THIS->reader ))));
  while ((ch_1 >= (RogueCharacter)'0' && ch_1 <= (RogueCharacter)'9'))
  {
    RogueInt32 intval_2 = ((((RogueInt32)(((RogueParseReader__read( THIS->reader ))))) - ((RogueInt32)((RogueCharacter)'0'))));
    n_0 = ((RogueInt64)((n_0 * ((RogueInt64)10)) + ((RogueInt64)intval_2)));
    ch_1 = ((RogueCharacter)((RogueParseReader__peek( THIS->reader ))));
  }
  return (RogueInt64)(n_0);
}

RogueLogical RogueTokenizer__scan_native_code( RogueClassTokenizer* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueParseReader__consume_spaces( THIS->reader );
  if (((RogueParseReader__consume__Character( THIS->reader, (RogueCharacter)10 ))))
  {
    RogueLogical found_end_1 = (false);
    while (((RogueParseReader__has_another( THIS->reader ))))
    {
      if (THIS->reader->column == 1)
      {
        RogueInt32 spaces_2 = (0);
        while (((RogueParseReader__consume__Character( THIS->reader, (RogueCharacter)' ' ))))
        {
          ++spaces_2;
        }
        if (((RogueParseReader__consume_id__String( THIS->reader, Rogue_literal_strings[220] ))))
        {
          found_end_1 = ((RogueLogical)true);
          goto _auto_2209;
        }
        else
        {
          {
            RogueInt32 _auto_1203_3 = (1);
            RogueInt32 _auto_1204_4 = (spaces_2);
            for (;_auto_1203_3 <= _auto_1204_4;++_auto_1203_3)
            {
              RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)' ' );
            }
          }
        }
      }
      RogueStringBuilder__print__Character( buffer_0, ((RogueParseReader__read( THIS->reader ))) );
    }
    _auto_2209:;
    if (!(found_end_1))
    {
      ROGUE_THROW(((RogueTokenizer__error__String( THIS, Rogue_literal_strings[221] ))));
    }
  }
  else
  {
    while (((RogueParseReader__has_another( THIS->reader ))))
    {
      if (((RogueParseReader__consume__Character( THIS->reader, (RogueCharacter)10 ))))
      {
        goto _auto_2210;
      }
      RogueStringBuilder__print__Character( buffer_0, ((RogueParseReader__read( THIS->reader ))) );
    }
    _auto_2210:;
  }
  return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_String( THIS, RogueTokenType_keyword_nativeCode, ((RogueStringBuilder__to_String( buffer_0 ))) ))));
}

RogueLogical RogueTokenizer__scan_native_header( RogueClassTokenizer* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueParseReader__consume_spaces( THIS->reader );
  if (((RogueParseReader__consume__Character( THIS->reader, (RogueCharacter)10 ))))
  {
    RogueLogical found_end_1 = (false);
    while (((RogueParseReader__has_another( THIS->reader ))))
    {
      if (THIS->reader->column == 1)
      {
        RogueInt32 spaces_2 = (0);
        while (((RogueParseReader__consume__Character( THIS->reader, (RogueCharacter)' ' ))))
        {
          ++spaces_2;
        }
        if (((RogueParseReader__consume_id__String( THIS->reader, Rogue_literal_strings[222] ))))
        {
          found_end_1 = ((RogueLogical)true);
          goto _auto_2211;
        }
        else
        {
          {
            RogueInt32 _auto_1205_3 = (1);
            RogueInt32 _auto_1206_4 = (spaces_2);
            for (;_auto_1205_3 <= _auto_1206_4;++_auto_1205_3)
            {
              RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)' ' );
            }
          }
        }
      }
      RogueStringBuilder__print__Character( buffer_0, ((RogueParseReader__read( THIS->reader ))) );
    }
    _auto_2211:;
    if (!(found_end_1))
    {
      ROGUE_THROW(((RogueTokenizer__error__String( THIS, Rogue_literal_strings[223] ))));
    }
  }
  else
  {
    while (((RogueParseReader__has_another( THIS->reader ))))
    {
      if (((RogueParseReader__consume__Character( THIS->reader, (RogueCharacter)10 ))))
      {
        goto _auto_2212;
      }
      RogueStringBuilder__print__Character( buffer_0, ((RogueParseReader__read( THIS->reader ))) );
    }
    _auto_2212:;
  }
  return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_String( THIS, RogueTokenType_keyword_nativeHeader, ((RogueStringBuilder__to_String( buffer_0 ))) ))));
}

RogueLogical RogueTokenizer__tokenize_string__Character( RogueClassTokenizer* THIS, RogueCharacter terminator_0 )
{
  RogueStringBuilder__clear( THIS->buffer );
  RogueParseReader__read( THIS->reader );
  while (((RogueParseReader__has_another( THIS->reader ))))
  {
    RogueCharacter ch_1 = (((RogueParseReader__peek( THIS->reader ))));
    if (ch_1 == terminator_0)
    {
      RogueParseReader__read( THIS->reader );
      return (RogueLogical)(((RogueTokenizer__add_new_string_or_character_token_from_buffer__Character( THIS, terminator_0 ))));
    }
    else
    {
      RogueTokenizer__read_character( THIS );
    }
  }
  ROGUE_THROW(((RogueTokenizer__error__String( THIS, Rogue_literal_strings[234] ))));
}

RogueLogical RogueTokenizer__tokenize_verbatim_string( RogueClassTokenizer* THIS )
{
  RogueStringBuilder__clear( THIS->buffer );
  RogueParseReader__read( THIS->reader );
  RogueParseReader__read( THIS->reader );
  while (((RogueParseReader__has_another( THIS->reader ))))
  {
    RogueCharacter ch_0 = (((RogueParseReader__read( THIS->reader ))));
    if (((RogueInt32)(ch_0)) == 10)
    {
      RogueTokenizer__consume_spaces( THIS );
      if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'|' ))))
      {
        RogueStringBuilder__print__Character( THIS->buffer, ch_0 );
      }
      else
      {
        RogueTokenizer__add_new_token__TokenType_String( THIS, RogueTokenType_literal_string, ((RogueStringBuilder__to_String( THIS->buffer ))) );
        return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_eol ))));
      }
    }
    else
    {
      RogueStringBuilder__print__Character( THIS->buffer, ch_0 );
    }
  }
  ROGUE_THROW(((RogueTokenizer__error__String( THIS, Rogue_literal_strings[237] ))));
}

RogueClassTokenizer* RogueTokenizer__init_object( RogueClassTokenizer* THIS )
{
  THIS->tokens = ((RogueTokenList__init( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)) )));
  THIS->buffer = ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) )));
  return (RogueClassTokenizer*)(THIS);
}

RogueString* RogueParseReader__type_name( RogueClassParseReader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[659]);
}

RogueLogical RogueParseReader__has_another( RogueClassParseReader* THIS )
{
  return (RogueLogical)(THIS->position < THIS->count);
}

RogueCharacter RogueParseReader__peek( RogueClassParseReader* THIS )
{
  if (THIS->position == THIS->count)
  {
    return (RogueCharacter)(((RogueCharacter)(0)));
  }
  return (RogueCharacter)(THIS->data->data->characters[THIS->position]);
}

RogueCharacter RogueParseReader__read( RogueClassParseReader* THIS )
{
  RogueCharacter result_0 = (THIS->data->data->characters[THIS->position]);
  ++THIS->position;
  if (((RogueInt32)(result_0)) == 10)
  {
    ++THIS->line;
    THIS->column = 1;
  }
  else
  {
    ++THIS->column;
  }
  return (RogueCharacter)(result_0);
}

RogueClassParseReader* RogueParseReader__init__String_Int32( RogueClassParseReader* THIS, RogueString* source_0, RogueInt32 _auto_1214_1 )
{
  THIS->spaces_per_tab = _auto_1214_1;
  RogueInt32 tab_count_2 = (0);
  if (!!(THIS->spaces_per_tab))
  {
    {
      RogueString* _auto_2213_5 = (source_0);
      RogueInt32 _auto_2214_6 = (0);
      for (;_auto_2214_6 < _auto_2213_5->count;++_auto_2214_6)
      {
        RogueCharacter b_7 = (_auto_2213_5->characters[_auto_2214_6]);
        if (b_7 == (RogueCharacter)9)
        {
          ++tab_count_2;
        }
      }
    }
  }
  THIS->data = ((RogueCharacterList__init__Int32( ((RogueCharacterList*)ROGUE_CREATE_OBJECT(CharacterList)), (source_0->count + tab_count_2) )));
  {
    RogueString* _auto_2215_8 = (source_0);
    RogueInt32 _auto_2216_9 = (0);
    for (;_auto_2216_9 < _auto_2215_8->count;++_auto_2216_9)
    {
      RogueCharacter b_10 = (_auto_2215_8->characters[_auto_2216_9]);
      if ((b_10 == (RogueCharacter)9 && !!(THIS->spaces_per_tab)))
      {
        {
          RogueInt32 _auto_1210_3 = (1);
          RogueInt32 _auto_1211_4 = (THIS->spaces_per_tab);
          for (;_auto_1210_3 <= _auto_1211_4;++_auto_1210_3)
          {
            RogueCharacterList__add__Character( THIS->data, ((RogueCharacter)(32)) );
          }
        }
      }
      else
      {
        RogueCharacterList__add__Character( THIS->data, b_10 );
      }
    }
  }
  THIS->count = THIS->data->count;
  THIS->line = 1;
  THIS->column = 1;
  return (RogueClassParseReader*)(THIS);
}

RogueClassParseReader* RogueParseReader__init__File_Int32( RogueClassParseReader* THIS, RogueClassFile* file_0, RogueInt32 _auto_1215_1 )
{
  THIS->spaces_per_tab = _auto_1215_1;
  RogueParseReader__init__String_Int32( THIS, ((RogueString__decode_utf8( (RogueFile__load_as_string__String( file_0->filepath )) ))), THIS->spaces_per_tab );
  return (RogueClassParseReader*)(THIS);
}

RogueClassParseReader* RogueParseReader__init__CharacterList_Int32( RogueClassParseReader* THIS, RogueCharacterList* source_0, RogueInt32 _auto_1216_1 )
{
  THIS->spaces_per_tab = _auto_1216_1;
  RogueInt32 tab_count_2 = (0);
  if (!!(THIS->spaces_per_tab))
  {
    {
      RogueCharacterList* _auto_2217_5 = (source_0);
      RogueInt32 _auto_2218_6 = (0);
      for (;_auto_2218_6 < _auto_2217_5->count;++_auto_2218_6)
      {
        RogueCharacter b_7 = (_auto_2217_5->data->characters[_auto_2218_6]);
        if (b_7 == (RogueCharacter)9)
        {
          ++tab_count_2;
        }
      }
    }
  }
  THIS->data = ((RogueCharacterList__init__Int32( ((RogueCharacterList*)ROGUE_CREATE_OBJECT(CharacterList)), (source_0->count + tab_count_2) )));
  {
    RogueCharacterList* _auto_2219_8 = (source_0);
    RogueInt32 _auto_2220_9 = (0);
    for (;_auto_2220_9 < _auto_2219_8->count;++_auto_2220_9)
    {
      RogueCharacter b_10 = (_auto_2219_8->data->characters[_auto_2220_9]);
      if ((b_10 == (RogueCharacter)9 && !!(THIS->spaces_per_tab)))
      {
        {
          RogueInt32 _auto_1212_3 = (1);
          RogueInt32 _auto_1213_4 = (THIS->spaces_per_tab);
          for (;_auto_1212_3 <= _auto_1213_4;++_auto_1212_3)
          {
            RogueCharacterList__add__Character( THIS->data, ((RogueCharacter)(32)) );
          }
        }
      }
      else
      {
        RogueCharacterList__add__Character( THIS->data, b_10 );
      }
    }
  }
  THIS->count = THIS->data->count;
  THIS->line = 1;
  THIS->column = 1;
  return (RogueClassParseReader*)(THIS);
}

RogueLogical RogueParseReader__consume__Character( RogueClassParseReader* THIS, RogueCharacter ch_0 )
{
  if (((RogueParseReader__peek( THIS ))) != ch_0)
  {
    return (RogueLogical)(false);
  }
  RogueParseReader__read( THIS );
  return (RogueLogical)(true);
}

RogueLogical RogueParseReader__consume__String( RogueClassParseReader* THIS, RogueString* text_0 )
{
  RogueInt32 limit_1 = (text_0->count);
  RogueInt32 i_2 = (0);
  while (i_2 < limit_1)
  {
    if (((RogueParseReader__peek__Int32( THIS, i_2 ))) != text_0->characters[i_2])
    {
      return (RogueLogical)(false);
    }
    ++i_2;
  }
  i_2 = ((RogueInt32)0);
  while (i_2 < limit_1)
  {
    RogueParseReader__read( THIS );
    ++i_2;
  }
  return (RogueLogical)(true);
}

RogueLogical RogueParseReader__consume_id__String( RogueClassParseReader* THIS, RogueString* text_0 )
{
  RogueCharacter ch_1 = (((RogueParseReader__peek__Int32( THIS, text_0->count ))));
  if ((((RogueCharacter__is_alphanumeric( ch_1 ))) || ch_1 == (RogueCharacter)'_'))
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(((RogueParseReader__consume__String( THIS, text_0 ))));
}

RogueLogical RogueParseReader__consume_spaces( RogueClassParseReader* THIS )
{
  RogueLogical found_0 = (false);
  while (((RogueParseReader__consume__Character( THIS, (RogueCharacter)' ' ))))
  {
    found_0 = ((RogueLogical)true);
  }
  return (RogueLogical)(found_0);
}

RogueLogical RogueParseReader__has_another__Int32( RogueClassParseReader* THIS, RogueInt32 n_0 )
{
  return (RogueLogical)((THIS->position + n_0) <= THIS->count);
}

RogueCharacter RogueParseReader__peek__Int32( RogueClassParseReader* THIS, RogueInt32 num_ahead_0 )
{
  RogueInt32 peek_pos_1 = ((THIS->position + num_ahead_0));
  if (peek_pos_1 >= THIS->count)
  {
    return (RogueCharacter)(((RogueCharacter)(0)));
  }
  return (RogueCharacter)(THIS->data->data->characters[peek_pos_1]);
}

RogueClassParseReader* RogueParseReader__seek_location__Int32_Int32( RogueClassParseReader* THIS, RogueInt32 new_line_0, RogueInt32 new_column_1 )
{
  if ((new_line_0 < THIS->line || (new_line_0 == THIS->line && new_column_1 < THIS->column)))
  {
    THIS->position = 0;
    THIS->line = 1;
    THIS->column = 1;
  }
  while ((((RogueParseReader__has_another( THIS ))) && THIS->line < new_line_0))
  {
    RogueParseReader__read( THIS );
  }
  while ((((RogueParseReader__has_another( THIS ))) && THIS->column < new_column_1))
  {
    RogueParseReader__read( THIS );
  }
  return (RogueClassParseReader*)(THIS);
}

RogueClassParseReader* RogueParseReader__set_location__Int32_Int32( RogueClassParseReader* THIS, RogueInt32 _auto_1217_0, RogueInt32 _auto_1218_1 )
{
  THIS->column = _auto_1218_1;
  THIS->line = _auto_1217_0;
  return (RogueClassParseReader*)(THIS);
}

RogueClassParseReader* RogueParseReader__init_object( RogueClassParseReader* THIS )
{
  return (RogueClassParseReader*)(THIS);
}

RogueString* RoguePreprocessor__type_name( RogueClassPreprocessor* THIS )
{
  return (RogueString*)(Rogue_literal_strings[660]);
}

RogueClassPreprocessor* RoguePreprocessor__init__Parser( RogueClassPreprocessor* THIS, RogueClassParser* _auto_1219_0 )
{
  THIS->parser = _auto_1219_0;
  return (RogueClassPreprocessor*)(THIS);
}

RogueTokenList* RoguePreprocessor__process__TokenList( RogueClassPreprocessor* THIS, RogueTokenList* _auto_1220_0 )
{
  THIS->tokens = _auto_1220_0;
  THIS->reader = ((RoguePreprocessorTokenReader__init__TokenList( ((RogueClassPreprocessorTokenReader*)ROGUE_CREATE_OBJECT(PreprocessorTokenReader)), THIS->tokens )));
  THIS->tokens = ((RogueTokenList__init__Int32( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)), ((RogueInt32)((((RogueReal64)(THIS->tokens->count)) * 1.1))) )));
  RoguePreprocessor__process__Logical_Int32_Logical( THIS, true, 0, false );
  return (RogueTokenList*)(THIS->tokens);
}

RogueLogical RoguePreprocessor__consume__TokenType( RogueClassPreprocessor* THIS, RogueClassTokenType* type_0 )
{
  if (((void*)((RoguePreprocessorTokenReader__peek( THIS->reader )))->_type) != ((void*)type_0))
  {
    return (RogueLogical)(false);
  }
  RoguePreprocessorTokenReader__read( THIS->reader );
  return (RogueLogical)(true);
}

void RoguePreprocessor__process__Logical_Int32_Logical( RogueClassPreprocessor* THIS, RogueLogical keep_tokens_0, RogueInt32 depth_1, RogueLogical stop_on_eol_2 )
{
  ++depth_1;
  while (((RoguePreprocessorTokenReader__has_another( THIS->reader ))))
  {
    RogueClassToken* t_3 = (((RoguePreprocessorTokenReader__read( THIS->reader ))));
    if (((RogueToken__is_directive( t_3 ))))
    {
      if (((void*)t_3->_type) == ((void*)RogueTokenType_directive_define))
      {
        RogueString* defined_word_4 = (((RoguePreprocessorTokenReader__read_identifier( THIS->reader ))));
        RogueTokenList* defined_tokens_5 = (((RogueTokenList__init( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)) ))));
        while (((RoguePreprocessorTokenReader__has_another( THIS->reader ))))
        {
          RogueClassToken* def_t_6 = (((RoguePreprocessorTokenReader__read( THIS->reader ))));
          if (((void*)def_t_6->_type) == ((void*)RogueTokenType_eol))
          {
            goto _auto_2222;
          }
          RogueTokenList__add__Token( defined_tokens_5, def_t_6 );
        }
        _auto_2222:;
        if (keep_tokens_0)
        {
          RogueString_TokenListTable__set__String_TokenList( RoguePreprocessor_definitions, defined_word_4, defined_tokens_5 );
        }
        continue;
      }
      else if (((void*)t_3->_type) == ((void*)RogueTokenType_directive_include))
      {
        RogueClassToken* filepath_t_7 = (((RoguePreprocessorTokenReader__read( THIS->reader ))));
        if (keep_tokens_0)
        {
          if (((void*)filepath_t_7->_type) != ((void*)RogueTokenType_literal_string))
          {
            ROGUE_THROW(((RoguePreprocessorTokenReader__error__String( THIS->reader, Rogue_literal_strings[56] ))));
          }
          RogueRogueC__include_source__Token_String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC)), t_3, (call_ROGUEM43( 1, (RogueClassToken*)(filepath_t_7) )) );
        }
        continue;
      }
      else if (((void*)t_3->_type) == ((void*)RogueTokenType_directive_includeNativeCode))
      {
        RogueClassToken* filepath_t_8 = (((RoguePreprocessorTokenReader__read( THIS->reader ))));
        if (keep_tokens_0)
        {
          if (((void*)filepath_t_8->_type) != ((void*)RogueTokenType_literal_string))
          {
            ROGUE_THROW(((RoguePreprocessorTokenReader__error__String( THIS->reader, Rogue_literal_strings[56] ))));
          }
          RogueRogueC__include_native__Token_String_String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC)), t_3, (call_ROGUEM43( 1, (RogueClassToken*)(filepath_t_8) )), Rogue_literal_strings[60] );
        }
        continue;
      }
      else if (((void*)t_3->_type) == ((void*)RogueTokenType_directive_includeNativeHeader))
      {
        RogueClassToken* filepath_t_9 = (((RoguePreprocessorTokenReader__read( THIS->reader ))));
        if (keep_tokens_0)
        {
          if (((void*)filepath_t_9->_type) != ((void*)RogueTokenType_literal_string))
          {
            ROGUE_THROW(((RoguePreprocessorTokenReader__error__String( THIS->reader, Rogue_literal_strings[56] ))));
          }
          RogueRogueC__include_native__Token_String_String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC)), t_3, (call_ROGUEM43( 1, (RogueClassToken*)(filepath_t_9) )), Rogue_literal_strings[59] );
        }
        continue;
      }
      else if (((void*)t_3->_type) == ((void*)RogueTokenType_directive_elseIf))
      {
        if (depth_1 == 1)
        {
          ROGUE_THROW(((RogueToken__error__String( t_3, Rogue_literal_strings[61] ))));
        }
        RoguePreprocessorTokenReader__push__Token( THIS->reader, t_3 );
        return;
      }
      else if (((void*)t_3->_type) == ((void*)RogueTokenType_directive_else))
      {
        if (depth_1 == 1)
        {
          ROGUE_THROW(((RogueToken__error__String( t_3, Rogue_literal_strings[62] ))));
        }
        RoguePreprocessorTokenReader__push__Token( THIS->reader, t_3 );
        return;
      }
      else if (((void*)t_3->_type) == ((void*)RogueTokenType_directive_endIf))
      {
        if (depth_1 == 1)
        {
          ROGUE_THROW(((RogueToken__error__String( t_3, Rogue_literal_strings[63] ))));
        }
        RoguePreprocessorTokenReader__push__Token( THIS->reader, t_3 );
        return;
      }
      else if (((void*)t_3->_type) == ((void*)RogueTokenType_directive_if))
      {
        RogueLogical found_true_10 = (((RoguePreprocessor__parse_logical_expression( THIS ))));
        RogueLogical single_line_11 = (!(((RoguePreprocessorTokenReader__next_is__TokenType( THIS->reader, RogueTokenType_eol )))));
        if (found_true_10)
        {
          RoguePreprocessor__process__Logical_Int32_Logical( THIS, keep_tokens_0, depth_1, single_line_11 );
        }
        else
        {
          RoguePreprocessor__process__Logical_Int32_Logical( THIS, false, depth_1, single_line_11 );
        }
        while (((void*)((RoguePreprocessorTokenReader__peek( THIS->reader )))->_type) == ((void*)RogueTokenType_directive_elseIf))
        {
          RoguePreprocessorTokenReader__read( THIS->reader );
          RogueLogical value_12 = (((RoguePreprocessor__parse_logical_expression( THIS ))));
          if (found_true_10)
          {
            RoguePreprocessor__process__Logical_Int32_Logical( THIS, false, depth_1, single_line_11 );
          }
          else
          {
            found_true_10 = ((RogueLogical)value_12);
            if (value_12)
            {
              RoguePreprocessor__process__Logical_Int32_Logical( THIS, keep_tokens_0, depth_1, single_line_11 );
            }
            else
            {
              RoguePreprocessor__process__Logical_Int32_Logical( THIS, false, depth_1, single_line_11 );
            }
          }
        }
        if (((void*)((RoguePreprocessorTokenReader__peek( THIS->reader )))->_type) == ((void*)RogueTokenType_directive_else))
        {
          RoguePreprocessorTokenReader__read( THIS->reader );
          if (found_true_10)
          {
            RoguePreprocessor__process__Logical_Int32_Logical( THIS, false, depth_1, single_line_11 );
          }
          else
          {
            RoguePreprocessor__process__Logical_Int32_Logical( THIS, keep_tokens_0, depth_1, single_line_11 );
          }
        }
        if (!(single_line_11))
        {
          RoguePreprocessor__must_consume__TokenType( THIS, RogueTokenType_directive_endIf );
        }
        continue;
      }
      else if (((void*)t_3->_type) == ((void*)RogueTokenType_directive_module))
      {
        if (keep_tokens_0)
        {
          RogueTokenList__add__Token( THIS->tokens, t_3 );
          RogueTokenList__add__Token( THIS->tokens, ((RoguePreprocessorTokenReader__peek( THIS->reader ))) );
        }
        THIS->cur_module = ((RoguePreprocessorTokenReader__read_identifier( THIS->reader )));
        continue;
      }
    }
    if ((((void*)t_3->_type) == ((void*)RogueTokenType_keyword_class) || ((void*)t_3->_type) == ((void*)RogueTokenType_keyword_routine)))
    {
      if ((!!(THIS->cur_module) && ((void*)((RoguePreprocessorTokenReader__peek( THIS->reader )))->_type) == ((void*)RogueTokenType_identifier)))
      {
        if (keep_tokens_0)
        {
          RogueTokenList__add__Token( THIS->tokens, t_3 );
        }
        t_3 = ((RogueClassToken*)((RoguePreprocessorTokenReader__read( THIS->reader ))));
        RogueString* class_name_13 = ((call_ROGUEM43( 1, (RogueClassToken*)(t_3) )));
        RogueProgram__add_module_id__String_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->cur_module, class_name_13 );
        if (keep_tokens_0)
        {
          RogueTokenList__add__Token( THIS->tokens, (call_ROGUEM91( 11, (RogueClassTokenType*)(t_3->_type), t_3, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->cur_module ))) ))), Rogue_literal_strings[68] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], class_name_13 ))) ))) ))) )) );
        }
        continue;
      }
    }
    if (((void*)t_3->_type) == ((void*)RogueTokenType_literal_string))
    {
      while (((void*)((RoguePreprocessorTokenReader__peek( THIS->reader )))->_type) == ((void*)RogueTokenType_literal_string))
      {
        t_3 = ((RogueClassToken*)(call_ROGUEM91( 11, (RogueClassTokenType*)(t_3->_type), t_3, ((RogueString__operatorPLUS__String( (call_ROGUEM43( 1, (RogueClassToken*)(t_3) )), (call_ROGUEM43( 1, (RogueClassToken*)(((RoguePreprocessorTokenReader__read( THIS->reader )))) )) ))) )));
      }
    }
    if (keep_tokens_0)
    {
      RogueTokenList__add__Token( THIS->tokens, t_3 );
    }
    if ((stop_on_eol_2 && ((void*)t_3->_type) == ((void*)RogueTokenType_eol)))
    {
      return;
    }
  }
}

void RoguePreprocessor__must_consume__TokenType( RogueClassPreprocessor* THIS, RogueClassTokenType* type_0 )
{
  RogueString* message_1 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[64] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], type_0->name ))) ))), Rogue_literal_strings[21] ))) ))));
  if (!(((RoguePreprocessorTokenReader__has_another( THIS->reader )))))
  {
    ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), message_1, ((RogueString*)(NULL)), 0, 0 ))));
  }
  RogueClassToken* t_2 = (((RoguePreprocessorTokenReader__read( THIS->reader ))));
  if (((void*)t_2->_type) != ((void*)type_0))
  {
    ROGUE_THROW(((RogueToken__error__String( t_2, message_1 ))));
  }
}

RogueLogical RoguePreprocessor__parse_logical_expression( RogueClassPreprocessor* THIS )
{
  return (RogueLogical)(((RoguePreprocessor__parse_logical_or( THIS ))));
}

RogueLogical RoguePreprocessor__parse_logical_or( RogueClassPreprocessor* THIS )
{
  return (RogueLogical)(((RoguePreprocessor__parse_logical_or__Logical( THIS, ((RoguePreprocessor__parse_logical_and( THIS ))) ))));
}

RogueLogical RoguePreprocessor__parse_logical_or__Logical( RogueClassPreprocessor* THIS, RogueLogical lhs_0 )
{
  if (((RoguePreprocessor__consume__TokenType( THIS, RogueTokenType_keyword_or ))))
  {
    return (RogueLogical)(((RoguePreprocessor__parse_logical_or__Logical( THIS, (((RoguePreprocessor__parse_logical_and( THIS ))) || lhs_0) ))));
  }
  return (RogueLogical)(lhs_0);
}

RogueLogical RoguePreprocessor__parse_logical_and( RogueClassPreprocessor* THIS )
{
  return (RogueLogical)(((RoguePreprocessor__parse_logical_and__Logical( THIS, ((RoguePreprocessor__parse_logical_term( THIS ))) ))));
}

RogueLogical RoguePreprocessor__parse_logical_and__Logical( RogueClassPreprocessor* THIS, RogueLogical lhs_0 )
{
  if (((RoguePreprocessor__consume__TokenType( THIS, RogueTokenType_keyword_and ))))
  {
    return (RogueLogical)(((RoguePreprocessor__parse_logical_and__Logical( THIS, (((RoguePreprocessor__parse_logical_term( THIS ))) && lhs_0) ))));
  }
  return (RogueLogical)(lhs_0);
}

RogueLogical RoguePreprocessor__parse_logical_term( RogueClassPreprocessor* THIS )
{
  for (;;)
  {
    RogueClassToken* t_0 = (((RoguePreprocessorTokenReader__peek( THIS->reader ))));
    if (((RoguePreprocessor__consume__TokenType( THIS, RogueTokenType_keyword_not ))))
    {
      return (RogueLogical)(!(((RoguePreprocessor__parse_logical_term( THIS )))));
    }
    if (((RoguePreprocessor__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
    {
      RogueLogical result_1 = (((RoguePreprocessor__parse_logical_expression( THIS ))));
      RoguePreprocessor__must_consume__TokenType( THIS, RogueTokenType_symbol_close_paren );
      return (RogueLogical)(result_1);
    }
    if (((void*)t_0->_type) == ((void*)RogueTokenType_literal_string))
    {
      RogueString* target_2 = ((call_ROGUEM43( 1, (RogueClassToken*)(((RoguePreprocessorTokenReader__read( THIS->reader )))) )));
      return (RogueLogical)(((RogueString_LogicalTable__get__String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->compile_targets, target_2 ))));
    }
    if (((RoguePreprocessor__consume__TokenType( THIS, RogueTokenType_keyword_true ))))
    {
      return (RogueLogical)(true);
    }
    if (((RoguePreprocessor__consume__TokenType( THIS, RogueTokenType_keyword_false ))))
    {
      return (RogueLogical)(false);
    }
    ROGUE_THROW(((RogueToken__error__String( ((RoguePreprocessorTokenReader__peek( THIS->reader ))), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[65] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(((RoguePreprocessorTokenReader__peek( THIS->reader ))))) ))) ))), Rogue_literal_strings[21] ))) ))) ))));
  }
}

RogueTokenList* RoguePreprocessor__reprocess__TokenList( RogueClassPreprocessor* THIS, RogueTokenList* _auto_1221_0 )
{
  THIS->tokens = _auto_1221_0;
  RogueClassTokenListRebuilder* rebuilder_1 = (((RogueTokenList__rebuilder( THIS->tokens ))));
  while (((RogueTokenListRebuilder__has_another( rebuilder_1 ))))
  {
    RogueClassToken* t_2 = (((RogueTokenListRebuilder__read( rebuilder_1 ))));
    while (((((void*)t_2->_type) == ((void*)RogueTokenType_literal_string) && ((RogueTokenListRebuilder__has_another( rebuilder_1 )))) && ((void*)((RogueTokenListRebuilder__peek__Int32( rebuilder_1, 0 )))->_type) == ((void*)RogueTokenType_literal_string)))
    {
      t_2 = ((RogueClassToken*)(call_ROGUEM91( 11, (RogueClassTokenType*)(t_2->_type), t_2, ((RogueString__operatorPLUS__String( (call_ROGUEM43( 1, (RogueClassToken*)(t_2) )), (call_ROGUEM43( 1, (RogueClassToken*)(((RogueTokenListRebuilder__read( rebuilder_1 )))) )) ))) )));
    }
    RogueTokenListRebuilder__write__Token( rebuilder_1, t_2 );
  }
  return (RogueTokenList*)(THIS->tokens);
}

RogueClassPreprocessor* RoguePreprocessor__init_object( RogueClassPreprocessor* THIS )
{
  return (RogueClassPreprocessor*)(THIS);
}

RogueString* RogueEOLToken__to_String( RogueClassEOLToken* THIS )
{
  if ((!!(THIS->comment) && !!(THIS->comment->count)))
  {
    return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[772] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->comment ))) ))) ))));
  }
  return (RogueString*)(Rogue_literal_strings[251]);
}

RogueString* RogueEOLToken__type_name( RogueClassEOLToken* THIS )
{
  return (RogueString*)(Rogue_literal_strings[778]);
}

RogueClassEOLToken* RogueEOLToken__init_object( RogueClassEOLToken* THIS )
{
  return (RogueClassEOLToken*)(THIS);
}

RogueClassEOLToken* RogueEOLToken__init__TokenType_String( RogueClassEOLToken* THIS, RogueClassTokenType* _auto_1224_0, RogueString* _auto_1225_1 )
{
  THIS->comment = _auto_1225_1;
  THIS->_type = _auto_1224_0;
  return (RogueClassEOLToken*)(THIS);
}

RogueClassEOLToken* RogueEOLToken__init__Token( RogueClassEOLToken* THIS, RogueClassToken* existing_0 )
{
  THIS->_type = RogueTokenType_eol;
  RogueToken__set_location__Token( ((RogueClassToken*)THIS), existing_0 );
  return (RogueClassEOLToken*)(THIS);
}

RogueString* RogueCmdAdd__type_name( RogueClassCmdAdd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1066]);
}

RogueClassCmd* RogueCmdAdd__clone__CloneArgs( RogueClassCmdAdd* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdAdd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdAdd*)ROGUE_CREATE_OBJECT(CmdAdd))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

RogueClassCmd* RogueCmdAdd__combine_literal_operands__Type( RogueClassCmdAdd* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ((RogueClassCmdLiteralReal64*)ROGUE_CREATE_OBJECT(CmdLiteralReal64)), THIS->t, (((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value + ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, (((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value + ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdAdd* RogueCmdAdd__init_object( RogueClassCmdAdd* THIS )
{
  return (RogueClassCmdAdd*)(THIS);
}

RogueString* RogueCmdAdd__fn_name( RogueClassCmdAdd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1056]);
}

RogueClassCmd* RogueCmdAdd__resolve_operator_method__Scope_Type_Type( RogueClassCmdAdd* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  if ((((void*)left_type_1) != ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String) && ((void*)right_type_2) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String)))
  {
    THIS->left = (call_ROGUEM245( 25, (RogueClassCmdBinary*)(((RogueClassCmdAdd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdAdd*)ROGUE_CREATE_OBJECT(CmdAdd))), THIS->t, ((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Int32( ((RogueClassCmdLiteralString*)ROGUE_CREATE_OBJECT(CmdLiteralString)), THIS->t, Rogue_literal_strings[0], 0 ))))), THIS->left )))))), scope_0 ));
    left_type_1 = ((RogueClassType*)(call_ROGUEM64( 22, (RogueClassCmd*)(THIS->left) )));
  }
  return (RogueClassCmd*)((RogueCmdBinary__resolve_operator_method__Scope_Type_Type( ((RogueClassCmdBinary*)THIS), scope_0, left_type_1, right_type_2 )));
}

RogueString* RogueCmdAdd__symbol( RogueClassCmdAdd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[201]);
}

RogueString* RogueCmdNativeHeader__type_name( RogueClassCmdNativeHeader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[797]);
}

RogueClassCmdNativeHeader* RogueCmdNativeHeader__clone__CloneArgs( RogueClassCmdNativeHeader* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdNativeHeader*)(((RogueCmdNativeHeader__init__Token_String( ((RogueClassCmdNativeHeader*)ROGUE_CREATE_OBJECT(CmdNativeHeader)), THIS->t, THIS->code ))));
}

RogueLogical RogueCmdNativeHeader__requires_semicolon( RogueClassCmdNativeHeader* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdNativeHeader__resolve__Scope( RogueClassCmdNativeHeader* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->code))
  {
    if (!(((RogueStringList__locate__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_header, THIS->code ))).exists))
    {
      RogueStringList__add__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_header, THIS->code );
    }
    THIS->code = ((RogueString*)(NULL));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdNativeHeader__write_cpp__CPPWriter_Logical( RogueClassCmdNativeHeader* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
}

void RogueCmdNativeHeader__trace_used_code( RogueClassCmdNativeHeader* THIS )
{
}

void RogueCmdNativeHeader__update_this_type__Scope( RogueClassCmdNativeHeader* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdNativeHeader* RogueCmdNativeHeader__init_object( RogueClassCmdNativeHeader* THIS )
{
  return (RogueClassCmdNativeHeader*)(THIS);
}

RogueClassCmdNativeHeader* RogueCmdNativeHeader__init__Token_String( RogueClassCmdNativeHeader* THIS, RogueClassToken* _auto_1232_0, RogueString* _auto_1233_1 )
{
  THIS->code = _auto_1233_1;
  THIS->t = _auto_1232_0;
  return (RogueClassCmdNativeHeader*)(THIS);
}

RogueString* RogueCmdNativeCode__type_name( RogueClassCmdNativeCode* THIS )
{
  return (RogueString*)(Rogue_literal_strings[798]);
}

RogueClassCmdNativeCode* RogueCmdNativeCode__clone__CloneArgs( RogueClassCmdNativeCode* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdNativeCode*)(((RogueCmdNativeCode__init__Token_String( ((RogueClassCmdNativeCode*)ROGUE_CREATE_OBJECT(CmdNativeCode)), THIS->t, THIS->code ))));
}

RogueLogical RogueCmdNativeCode__requires_semicolon( RogueClassCmdNativeCode* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdNativeCode__resolve__Scope( RogueClassCmdNativeCode* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->code))
  {
    if (!(((RogueStringList__locate__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_code, THIS->code ))).exists))
    {
      RogueStringList__add__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_code, THIS->code );
    }
    THIS->code = ((RogueString*)(NULL));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdNativeCode__write_cpp__CPPWriter_Logical( RogueClassCmdNativeCode* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
}

void RogueCmdNativeCode__trace_used_code( RogueClassCmdNativeCode* THIS )
{
}

void RogueCmdNativeCode__update_this_type__Scope( RogueClassCmdNativeCode* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdNativeCode* RogueCmdNativeCode__init_object( RogueClassCmdNativeCode* THIS )
{
  return (RogueClassCmdNativeCode*)(THIS);
}

RogueClassCmdNativeCode* RogueCmdNativeCode__init__Token_String( RogueClassCmdNativeCode* THIS, RogueClassToken* _auto_1234_0, RogueString* _auto_1235_1 )
{
  THIS->code = _auto_1235_1;
  THIS->t = _auto_1234_0;
  return (RogueClassCmdNativeCode*)(THIS);
}

RogueString* RogueCmdIf__type_name( RogueClassCmdIf* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1030]);
}

RogueClassCmd* RogueCmdIf__clone__CloneArgs( RogueClassCmdIf* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if ((!!(task_args_1) && THIS->contains_yield))
  {
    RogueClassCmdTaskControlSection* next_section_2 = (((RogueTaskArgs__create_section( task_args_1 ))));
    RogueClassCmdTaskControlSection* end_section_3 = (((RogueTaskArgs__create_section( task_args_1 ))));
    THIS->task_escape_section = end_section_3;
    RogueTaskArgs__add_conditional_jump__Cmd_CmdTaskControlSection( task_args_1, ((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->condition), clone_args_0 )) ))))))), next_section_2 );
    {
      RogueClassCmdStatementList* _auto_2224_5 = (THIS->statements);
      RogueInt32 _auto_2225_6 = (0);
      for (;_auto_2225_6 < _auto_2224_5->count;++_auto_2225_6)
      {
        RogueClassCmd* statement_7 = (((RogueClassCmd*)(_auto_2224_5->data->objects[_auto_2225_6])));
        RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM58( 6, (RogueClassCmd*)(statement_7), ((RogueClassCloneArgs*)(task_args_1)) )) );
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, THIS->t, end_section_3 );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, next_section_2 );
    if (!!(THIS->else_statements))
    {
      {
        RogueClassCmdStatementList* _auto_2226_8 = (THIS->else_statements);
        RogueInt32 _auto_2227_9 = (0);
        for (;_auto_2227_9 < _auto_2226_8->count;++_auto_2227_9)
        {
          RogueClassCmd* statement_10 = (((RogueClassCmd*)(_auto_2226_8->data->objects[_auto_2227_9])));
          RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM58( 6, (RogueClassCmd*)(statement_10), ((RogueClassCloneArgs*)(task_args_1)) )) );
        }
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, THIS->t, end_section_3 );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, end_section_3 );
    if (end_section_3->ip < task_args_1->cmd_task_control->sections->count)
    {
      RogueTaskArgs__jump_to_new_section__Token( task_args_1, THIS->t );
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  else
  {
    RogueClassCmdIf* result_4 = (((RogueCmdIf__init__Token_Cmd_Int32( ((RogueClassCmdIf*)ROGUE_CREATE_OBJECT(CmdIf)), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->condition), clone_args_0 )), THIS->_control_type ))));
    call_ROGUEM207( 35, (RogueClassCmdControlStructure*)(result_4), ((RogueClassCmdControlStructure*)(THIS)) );
    THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_4));
    result_4->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 )));
    result_4->else_statements = ((RogueCmd__clone__CmdStatementList_CloneArgs( ((RogueClassCmd*)THIS), THIS->else_statements, clone_args_0 )));
    return (RogueClassCmd*)(((RogueClassCmd*)(result_4)));
  }
}

RogueClassCmd* RogueCmdIf__resolve__Scope( RogueClassCmdIf* THIS, RogueClassScope* scope_0 )
{
  THIS->condition = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->condition), scope_0 ));
  THIS->condition = ((RogueCmd__require_logical__Scope( THIS->condition, scope_0 )));
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  if (!!(THIS->else_statements))
  {
    RogueCmdStatementList__resolve__Scope( THIS->else_statements, scope_0 );
  }
  RogueCmdControlStructureList__remove_last( scope_0->control_stack );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdIf__write_cpp__CPPWriter_Logical( RogueClassCmdIf* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[959] );
  if ((RogueObject_instance_of(THIS->condition,RogueTypeCmdLiteralLogical) && !(((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->condition,RogueTypeCmdLiteralLogical)))->value)))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[66] );
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->condition), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
  }
  else
  {
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->condition), writer_0, false );
  }
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[67] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[196] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, false );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[114] );
  if (!!(THIS->else_statements))
  {
    if ((THIS->else_statements->count == 1 && RogueObject_instance_of(((RogueClassCmd*)(THIS->else_statements->data->objects[0])),RogueTypeCmdIf)))
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[960] );
      RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->else_statements, writer_0, false );
    }
    else
    {
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[88] );
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[196] );
      writer_0->indent += 2;
      RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->else_statements, writer_0, false );
      writer_0->indent -= 2;
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[114] );
    }
  }
  if (!!(THIS->escape_label))
  {
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, THIS->escape_label ))), Rogue_literal_strings[948] );
  }
}

void RogueCmdIf__trace_used_code( RogueClassCmdIf* THIS )
{
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->condition) );
  RogueCmdStatementList__trace_used_code( THIS->statements );
  if (!!(THIS->else_statements))
  {
    RogueCmdStatementList__trace_used_code( THIS->else_statements );
  }
}

void RogueCmdIf__update_this_type__Scope( RogueClassCmdIf* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->condition), scope_0 );
  RogueCmdStatementList__update_this_type__Scope( THIS->statements, scope_0 );
  if (!!(THIS->else_statements))
  {
    RogueCmdStatementList__update_this_type__Scope( THIS->else_statements, scope_0 );
  }
}

RogueClassCmdIf* RogueCmdIf__init_object( RogueClassCmdIf* THIS )
{
  return (RogueClassCmdIf*)(THIS);
}

RogueClassCmdIf* RogueCmdIf__init__Token_Cmd_Int32( RogueClassCmdIf* THIS, RogueClassToken* _auto_1236_0, RogueClassCmd* _auto_1237_1, RogueInt32 _auto_1238_2 )
{
  THIS->_control_type = _auto_1238_2;
  THIS->condition = _auto_1237_1;
  THIS->t = _auto_1236_0;
  THIS->statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
  return (RogueClassCmdIf*)(THIS);
}

RogueClassCmdIf* RogueCmdIf__init__Token_Cmd_CmdStatementList_Int32( RogueClassCmdIf* THIS, RogueClassToken* _auto_1239_0, RogueClassCmd* _auto_1240_1, RogueClassCmdStatementList* _auto_1241_2, RogueInt32 _auto_1242_3 )
{
  THIS->_control_type = _auto_1242_3;
  THIS->statements = _auto_1241_2;
  THIS->condition = _auto_1240_1;
  THIS->t = _auto_1239_0;
  return (RogueClassCmdIf*)(THIS);
}

RogueString* RogueCmdWhich__type_name( RogueClassCmdWhich* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1031]);
}

RogueClassCmdWhich* RogueCmdWhich__clone__CloneArgs( RogueClassCmdWhich* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdWhich* result_1 = (((RogueCmdWhich__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Int32( ((RogueClassCmdWhich*)ROGUE_CREATE_OBJECT(CmdWhich)), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->expression), clone_args_0 )), ((RogueCmdWhichCaseList*)(NULL)), ((RogueClassCmdWhichCase*)(NULL)), 5 ))));
  call_ROGUEM207( 35, (RogueClassCmdControlStructure*)(result_1), ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_1));
  RogueCmdWhichCaseList* cloned_cases_2 = (((RogueCmdWhichCaseList__init__Int32( ((RogueCmdWhichCaseList*)ROGUE_CREATE_OBJECT(CmdWhichCaseList)), THIS->cases->count ))));
  {
    RogueCmdWhichCaseList* _auto_2228_3 = (THIS->cases);
    RogueInt32 _auto_2229_4 = (0);
    for (;_auto_2229_4 < _auto_2228_3->count;++_auto_2229_4)
    {
      RogueClassCmdWhichCase* c_5 = (((RogueClassCmdWhichCase*)(_auto_2228_3->data->objects[_auto_2229_4])));
      RogueCmdWhichCaseList__add__CmdWhichCase( cloned_cases_2, ((RogueCmdWhichCase__clone__CloneArgs( c_5, clone_args_0 ))) );
    }
  }
  result_1->cases = cloned_cases_2;
  if (!!(THIS->case_others))
  {
    result_1->case_others = ((RogueCmdWhichCase__clone__CloneArgs( THIS->case_others, clone_args_0 )));
  }
  return (RogueClassCmdWhich*)(result_1);
}

RogueClassCmd* RogueCmdWhich__resolve__Scope( RogueClassCmdWhich* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->expression = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->expression), scope_0 ));
  RogueLogical all_literal_cases_1 = (true);
  RogueClassType* expression_type_2 = ((call_ROGUEM64( 22, (RogueClassCmd*)(THIS->expression) )));
  if (((void*)expression_type_2) != ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    if ((((void*)expression_type_2) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte) || ((void*)expression_type_2) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character)))
    {
      THIS->expression = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)(THIS->expression), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32, scope_0 ))), scope_0 ));
    }
    else
    {
      all_literal_cases_1 = ((RogueLogical)false);
    }
  }
  {
    RogueCmdWhichCaseList* _auto_2230_10 = (THIS->cases);
    RogueInt32 _auto_2231_11 = (0);
    for (;_auto_2231_11 < _auto_2230_10->count;++_auto_2231_11)
    {
      RogueClassCmdWhichCase* c_12 = (((RogueClassCmdWhichCase*)(_auto_2230_10->data->objects[_auto_2231_11])));
      RogueCmdArgs__resolve__Scope( c_12->conditions, scope_0 );
      if (all_literal_cases_1)
      {
        {
          RogueClassCmdArgs* _auto_2232_13 = (c_12->conditions);
          RogueInt32 _auto_2233_14 = (0);
          for (;_auto_2233_14 < _auto_2232_13->count;++_auto_2233_14)
          {
            RogueClassCmd* condition_15 = (((RogueClassCmd*)(_auto_2232_13->data->objects[_auto_2233_14])));
            if ((!((call_ROGUEM61( 18, (RogueClassCmd*)(condition_15) ))) || RogueObject_instance_of(condition_15,RogueTypeCmdLiteralString)))
            {
              all_literal_cases_1 = ((RogueLogical)false);
              goto _auto_2234;
            }
          }
        }
        _auto_2234:;
      }
      RogueCmdStatementList__resolve__Scope( c_12->statements, scope_0 );
    }
  }
  if (!!(THIS->case_others))
  {
    RogueCmdArgs__resolve__Scope( THIS->case_others->conditions, scope_0 );
    RogueCmdStatementList__resolve__Scope( THIS->case_others->statements, scope_0 );
  }
  RogueCmdControlStructureList__remove_last( scope_0->control_stack );
  if ((all_literal_cases_1 && !(THIS->contains_yield)))
  {
    return (RogueClassCmd*)((call_ROGUEM207( 35, (RogueClassCmdControlStructure*)(((RogueCmdSwitch__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Int32( ((RogueClassCmdSwitch*)ROGUE_CREATE_OBJECT(CmdSwitch)), THIS->t, THIS->expression, THIS->cases, THIS->case_others, 5 )))), ((RogueClassCmdControlStructure*)(THIS)) )));
  }
  RogueClassCmdBlock* result_3 = (((RogueCmdBlock__init__Token_Int32( ((RogueClassCmdBlock*)ROGUE_CREATE_OBJECT(CmdBlock)), THIS->t, 5 ))));
  call_ROGUEM207( 35, (RogueClassCmdControlStructure*)(result_3), ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->expression = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->expression), scope_0 ));
  RogueString* var_name_4 = 0;
  RogueClassLocal* expression_var_5 = 0;
  if (RogueObject_instance_of(THIS->expression,RogueTypeCmdReadLocal))
  {
    expression_var_5 = ((RogueClassLocal*)((RogueClassCmdReadLocal*)(RogueObject_as(THIS->expression,RogueTypeCmdReadLocal)))->local_info);
    var_name_4 = ((RogueString*)expression_var_5->name);
  }
  else
  {
    var_name_4 = ((RogueString*)((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))));
    expression_var_5 = ((RogueClassLocal*)((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, var_name_4, (call_ROGUEM64( 22, (RogueClassCmd*)(THIS->expression) )), THIS->expression ))));
    RogueCmdList__add__Cmd( ((RogueCmdList*)result_3->statements), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local_Logical( ((RogueClassCmdLocalDeclaration*)ROGUE_CREATE_OBJECT(CmdLocalDeclaration)), THIS->t, expression_var_5, false ))))) );
  }
  if (!!(THIS->cases->count))
  {
    RogueClassCmdIf* cmd_if_6 = (((RogueCmdIf__init__Token_Cmd_CmdStatementList_Int32( ((RogueClassCmdIf*)ROGUE_CREATE_OBJECT(CmdIf)), THIS->expression->t, ((RogueCmdWhichCase__as_conditional__String( ((RogueClassCmdWhichCase*)(THIS->cases->data->objects[0])), var_name_4 ))), ((RogueClassCmdWhichCase*)(THIS->cases->data->objects[0]))->statements, 2 ))));
    RogueClassCmdIf* cur_if_7 = (cmd_if_6);
    {
      RogueCmdWhichCaseList* _auto_2240_16 = (THIS->cases);
      RogueInt32 i_17 = (0);
      for (;i_17 < _auto_2240_16->count;++i_17)
      {
        if (i_17 > 0)
        {
          RogueClassCmdWhichCase* c_8 = (((RogueClassCmdWhichCase*)(THIS->cases->data->objects[i_17])));
          RogueClassCmdIf* cmd_else_if_9 = (((RogueCmdIf__init__Token_Cmd_Int32( ((RogueClassCmdIf*)ROGUE_CREATE_OBJECT(CmdIf)), c_8->t, ((RogueCmdWhichCase__as_conditional__String( c_8, var_name_4 ))), 3 ))));
          cmd_else_if_9->statements = c_8->statements;
          cur_if_7->else_statements = ((RogueCmdStatementList__init__Cmd( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)), ((RogueClassCmd*)(cmd_else_if_9)) )));
          cur_if_7 = ((RogueClassCmdIf*)cmd_else_if_9);
        }
      }
    }
    if (!!(THIS->case_others))
    {
      cur_if_7->else_statements = THIS->case_others->statements;
    }
    RogueCmdList__add__Cmd( ((RogueCmdList*)result_3->statements), ((RogueClassCmd*)(cmd_if_6)) );
  }
  else if (!!(THIS->case_others))
  {
    {
      RogueClassCmdStatementList* _auto_2241_18 = (THIS->case_others->statements);
      RogueInt32 _auto_2242_19 = (0);
      for (;_auto_2242_19 < _auto_2241_18->count;++_auto_2242_19)
      {
        RogueClassCmd* cmd_20 = (((RogueClassCmd*)(_auto_2241_18->data->objects[_auto_2242_19])));
        RogueCmdList__add__Cmd( ((RogueCmdList*)result_3->statements), cmd_20 );
      }
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBlock__resolve__Scope( result_3, scope_0 ))))));
}

void RogueCmdWhich__update_this_type__Scope( RogueClassCmdWhich* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->expression), scope_0 );
  {
    RogueCmdWhichCaseList* _auto_2243_1 = (THIS->cases);
    RogueInt32 _auto_2244_2 = (0);
    for (;_auto_2244_2 < _auto_2243_1->count;++_auto_2244_2)
    {
      RogueClassCmdWhichCase* c_3 = (((RogueClassCmdWhichCase*)(_auto_2243_1->data->objects[_auto_2244_2])));
      RogueCmdWhichCase__update_this_type__Scope( c_3, scope_0 );
    }
  }
  if (!!(THIS->case_others))
  {
    RogueCmdWhichCase__update_this_type__Scope( THIS->case_others, scope_0 );
  }
}

RogueClassCmdWhich* RogueCmdWhich__init_object( RogueClassCmdWhich* THIS )
{
  return (RogueClassCmdWhich*)(THIS);
}

RogueClassCmdWhich* RogueCmdWhich__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Int32( RogueClassCmdWhich* THIS, RogueClassToken* _auto_1243_0, RogueClassCmd* _auto_1244_1, RogueCmdWhichCaseList* _auto_1245_2, RogueClassCmdWhichCase* _auto_1246_3, RogueInt32 _auto_1247_4 )
{
  THIS->_control_type = _auto_1247_4;
  THIS->case_others = _auto_1246_3;
  THIS->cases = _auto_1245_2;
  THIS->expression = _auto_1244_1;
  THIS->t = _auto_1243_0;
  return (RogueClassCmdWhich*)(THIS);
}

RogueClassCmdWhichCase* RogueCmdWhich__add_case__Token( RogueClassCmdWhich* THIS, RogueClassToken* case_t_0 )
{
  RogueClassCmdWhichCase* result_1 = (((RogueCmdWhichCase__init__Token_CmdArgs_CmdStatementList( ((RogueClassCmdWhichCase*)ROGUE_CREATE_OBJECT(CmdWhichCase)), case_t_0, ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))) ))));
  RogueCmdWhichCaseList__add__CmdWhichCase( THIS->cases, result_1 );
  return (RogueClassCmdWhichCase*)(result_1);
}

RogueClassCmdWhichCase* RogueCmdWhich__add_case_others__Token( RogueClassCmdWhich* THIS, RogueClassToken* case_t_0 )
{
  RogueClassCmdWhichCase* result_1 = (((RogueCmdWhichCase__init__Token_CmdArgs_CmdStatementList( ((RogueClassCmdWhichCase*)ROGUE_CREATE_OBJECT(CmdWhichCase)), case_t_0, ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))) ))));
  THIS->case_others = result_1;
  return (RogueClassCmdWhichCase*)(result_1);
}

RogueString* RogueCmdContingent__type_name( RogueClassCmdContingent* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1032]);
}

RogueClassCmd* RogueCmdContingent__clone__CloneArgs( RogueClassCmdContingent* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if ((!!(task_args_1) && THIS->contains_yield))
  {
    THIS->satisfied_section = ((RogueTaskArgs__create_section( task_args_1 )));
    THIS->unsatisfied_section = ((RogueTaskArgs__create_section( task_args_1 )));
    RogueClassCmdTaskControlSection* end_section_2 = (((RogueTaskArgs__create_section( task_args_1 ))));
    THIS->task_escape_section = end_section_2;
    {
      RogueClassCmdStatementList* _auto_2245_4 = (THIS->statements);
      RogueInt32 _auto_2246_5 = (0);
      for (;_auto_2246_5 < _auto_2245_4->count;++_auto_2246_5)
      {
        RogueClassCmd* statement_6 = (((RogueClassCmd*)(_auto_2245_4->data->objects[_auto_2246_5])));
        RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM58( 6, (RogueClassCmd*)(statement_6), ((RogueClassCloneArgs*)(task_args_1)) )) );
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, THIS->t, THIS->satisfied_section );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, THIS->satisfied_section );
    if (!!(THIS->satisfied_statements))
    {
      {
        RogueClassCmdStatementList* _auto_2247_7 = (THIS->satisfied_statements);
        RogueInt32 _auto_2248_8 = (0);
        for (;_auto_2248_8 < _auto_2247_7->count;++_auto_2248_8)
        {
          RogueClassCmd* statement_9 = (((RogueClassCmd*)(_auto_2247_7->data->objects[_auto_2248_8])));
          RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM58( 6, (RogueClassCmd*)(statement_9), ((RogueClassCloneArgs*)(task_args_1)) )) );
        }
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, THIS->t, end_section_2 );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, THIS->unsatisfied_section );
    if (!!(THIS->unsatisfied_statements))
    {
      {
        RogueClassCmdStatementList* _auto_2249_10 = (THIS->unsatisfied_statements);
        RogueInt32 _auto_2250_11 = (0);
        for (;_auto_2250_11 < _auto_2249_10->count;++_auto_2250_11)
        {
          RogueClassCmd* statement_12 = (((RogueClassCmd*)(_auto_2249_10->data->objects[_auto_2250_11])));
          RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM58( 6, (RogueClassCmd*)(statement_12), ((RogueClassCloneArgs*)(task_args_1)) )) );
        }
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, THIS->t, end_section_2 );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, end_section_2 );
    if (end_section_2->ip < task_args_1->cmd_task_control->sections->count)
    {
      RogueTaskArgs__jump_to_new_section__Token( task_args_1, THIS->t );
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  else
  {
    RogueClassCmdContingent* result_3 = (((RogueCmdContingent__init__Token_CmdStatementList( ((RogueClassCmdContingent*)ROGUE_CREATE_OBJECT(CmdContingent)), THIS->t, ((RogueClassCmdStatementList*)(NULL)) ))));
    RogueCmdContingent__set_control_logic__CmdControlStructure( result_3, ((RogueClassCmdControlStructure*)(THIS)) );
    THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_3));
    result_3->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 )));
    result_3->satisfied_statements = ((RogueCmd__clone__CmdStatementList_CloneArgs( ((RogueClassCmd*)THIS), THIS->satisfied_statements, clone_args_0 )));
    result_3->unsatisfied_statements = ((RogueCmd__clone__CmdStatementList_CloneArgs( ((RogueClassCmd*)THIS), THIS->unsatisfied_statements, clone_args_0 )));
    return (RogueClassCmd*)(((RogueClassCmd*)(result_3)));
  }
}

RogueClassCmdContingent* RogueCmdContingent__resolve__Scope( RogueClassCmdContingent* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  if (!(!!(THIS->escape_label)))
  {
    THIS->escape_label = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
  }
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  if (!!(THIS->satisfied_statements))
  {
    RogueCmdStatementList__resolve__Scope( THIS->satisfied_statements, scope_0 );
  }
  if (!!(THIS->unsatisfied_statements))
  {
    RogueCmdStatementList__resolve__Scope( THIS->unsatisfied_statements, scope_0 );
  }
  RogueCmdControlStructureList__remove_last( scope_0->control_stack );
  return (RogueClassCmdContingent*)(THIS);
}

void RogueCmdContingent__write_cpp__CPPWriter_Logical( RogueClassCmdContingent* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[196] );
  writer_0->indent += 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[196] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, false );
  if (!!(THIS->satisfied_label))
  {
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, THIS->satisfied_label ))), Rogue_literal_strings[948] );
  }
  if (!!(THIS->satisfied_statements))
  {
    RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->satisfied_statements, writer_0, false );
  }
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[961] ))), THIS->escape_label ))), Rogue_literal_strings[205] );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[114] );
  if (!!(THIS->unsatisfied_label))
  {
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, THIS->unsatisfied_label ))), Rogue_literal_strings[948] );
  }
  if (!!(THIS->unsatisfied_statements))
  {
    RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->unsatisfied_statements, writer_0, false );
  }
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[114] );
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, THIS->escape_label ))), Rogue_literal_strings[948] );
}

void RogueCmdContingent__trace_used_code( RogueClassCmdContingent* THIS )
{
  RogueCmdStatementList__trace_used_code( THIS->statements );
  if (!!(THIS->satisfied_statements))
  {
    RogueCmdStatementList__trace_used_code( THIS->satisfied_statements );
  }
  if (!!(THIS->unsatisfied_statements))
  {
    RogueCmdStatementList__trace_used_code( THIS->unsatisfied_statements );
  }
}

void RogueCmdContingent__update_this_type__Scope( RogueClassCmdContingent* THIS, RogueClassScope* scope_0 )
{
  RogueCmdStatementList__update_this_type__Scope( THIS->statements, scope_0 );
  if (!!(THIS->satisfied_statements))
  {
    RogueCmdStatementList__update_this_type__Scope( THIS->satisfied_statements, scope_0 );
  }
  if (!!(THIS->unsatisfied_statements))
  {
    RogueCmdStatementList__update_this_type__Scope( THIS->unsatisfied_statements, scope_0 );
  }
}

RogueClassCmdContingent* RogueCmdContingent__init_object( RogueClassCmdContingent* THIS )
{
  return (RogueClassCmdContingent*)(THIS);
}

RogueClassCmd* RogueCmdContingent__set_control_logic__CmdControlStructure( RogueClassCmdContingent* THIS, RogueClassCmdControlStructure* original_0 )
{
  RogueCmdControlStructure__set_control_logic__CmdControlStructure( ((RogueClassCmdControlStructure*)THIS), original_0 );
  THIS->satisfied_label = ((RogueClassCmdContingent*)(RogueObject_as(original_0,RogueTypeCmdContingent)))->satisfied_label;
  THIS->unsatisfied_label = ((RogueClassCmdContingent*)(RogueObject_as(original_0,RogueTypeCmdContingent)))->unsatisfied_label;
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmdContingent* RogueCmdContingent__init__Token_CmdStatementList( RogueClassCmdContingent* THIS, RogueClassToken* _auto_1248_0, RogueClassCmdStatementList* _auto_1249_1 )
{
  THIS->statements = _auto_1249_1;
  THIS->t = _auto_1248_0;
  THIS->_control_type = 1;
  return (RogueClassCmdContingent*)(THIS);
}

RogueString* RogueCmdTry__type_name( RogueClassCmdTry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1033]);
}

RogueClassCmdTry* RogueCmdTry__clone__CloneArgs( RogueClassCmdTry* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdTry* result_1 = (((RogueCmdTry__init__Token_CmdStatementList_CmdCatchList( ((RogueClassCmdTry*)ROGUE_CREATE_OBJECT(CmdTry)), THIS->t, ((RogueClassCmdStatementList*)(NULL)), ((RogueCmdCatchList*)(NULL)) ))));
  call_ROGUEM207( 35, (RogueClassCmdControlStructure*)(result_1), ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_1));
  result_1->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 )));
  RogueCmdCatchList* new_catches_2 = (((RogueCmdCatchList__init( ((RogueCmdCatchList*)ROGUE_CREATE_OBJECT(CmdCatchList)) ))));
  {
    RogueCmdCatchList* _auto_2251_3 = (THIS->catches);
    RogueInt32 _auto_2252_4 = (0);
    for (;_auto_2252_4 < _auto_2251_3->count;++_auto_2252_4)
    {
      RogueClassCmdCatch* c_5 = (((RogueClassCmdCatch*)(_auto_2251_3->data->objects[_auto_2252_4])));
      RogueCmdCatchList__add__CmdCatch( new_catches_2, ((RogueCmdCatch__clone__CloneArgs( c_5, clone_args_0 ))) );
    }
  }
  result_1->catches = new_catches_2;
  return (RogueClassCmdTry*)(result_1);
}

RogueClassCmd* RogueCmdTry__resolve__Scope( RogueClassCmdTry* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  {
    RogueCmdCatchList* _auto_2253_1 = (THIS->catches);
    RogueInt32 _auto_2254_2 = (0);
    for (;_auto_2254_2 < _auto_2253_1->count;++_auto_2254_2)
    {
      RogueClassCmdCatch* c_3 = (((RogueClassCmdCatch*)(_auto_2253_1->data->objects[_auto_2254_2])));
      RogueCmdCatch__resolve__Scope( c_3, scope_0 );
    }
  }
  if (THIS->contains_yield)
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[877] ))));
  }
  RogueCmdControlStructureList__remove_last( scope_0->control_stack );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdTry__write_cpp__CPPWriter_Logical( RogueClassCmdTry* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[962] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[196] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, false );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[114] );
  {
    RogueCmdCatchList* _auto_2255_2 = (THIS->catches);
    RogueInt32 _auto_2256_3 = (0);
    for (;_auto_2256_3 < _auto_2255_2->count;++_auto_2256_3)
    {
      RogueClassCmdCatch* c_4 = (((RogueClassCmdCatch*)(_auto_2255_2->data->objects[_auto_2256_3])));
      RogueCmdCatch__write_cpp__CPPWriter_Logical( c_4, writer_0, false );
    }
  }
  if (!!(THIS->escape_label))
  {
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, THIS->escape_label ))), Rogue_literal_strings[948] );
  }
}

void RogueCmdTry__trace_used_code( RogueClassCmdTry* THIS )
{
  RogueCmdStatementList__trace_used_code( THIS->statements );
  {
    RogueCmdCatchList* _auto_2257_0 = (THIS->catches);
    RogueInt32 _auto_2258_1 = (0);
    for (;_auto_2258_1 < _auto_2257_0->count;++_auto_2258_1)
    {
      RogueClassCmdCatch* c_2 = (((RogueClassCmdCatch*)(_auto_2257_0->data->objects[_auto_2258_1])));
      RogueCmdCatch__trace_used_code( c_2 );
    }
  }
}

void RogueCmdTry__update_this_type__Scope( RogueClassCmdTry* THIS, RogueClassScope* scope_0 )
{
  RogueCmdStatementList__update_this_type__Scope( THIS->statements, scope_0 );
  {
    RogueCmdCatchList* _auto_2259_1 = (THIS->catches);
    RogueInt32 _auto_2260_2 = (0);
    for (;_auto_2260_2 < _auto_2259_1->count;++_auto_2260_2)
    {
      RogueClassCmdCatch* c_3 = (((RogueClassCmdCatch*)(_auto_2259_1->data->objects[_auto_2260_2])));
      RogueCmdCatch__update_this_type__Scope( c_3, scope_0 );
    }
  }
}

RogueClassCmdTry* RogueCmdTry__init_object( RogueClassCmdTry* THIS )
{
  return (RogueClassCmdTry*)(THIS);
}

RogueClassCmdTry* RogueCmdTry__init__Token_CmdStatementList_CmdCatchList( RogueClassCmdTry* THIS, RogueClassToken* _auto_1250_0, RogueClassCmdStatementList* _auto_1251_1, RogueCmdCatchList* _auto_1252_2 )
{
  THIS->catches = _auto_1252_2;
  THIS->statements = _auto_1251_1;
  THIS->t = _auto_1250_0;
  THIS->_control_type = 4;
  return (RogueClassCmdTry*)(THIS);
}

RogueClassCmdCatch* RogueCmdTry__add_catch__Token( RogueClassCmdTry* THIS, RogueClassToken* catch_t_0 )
{
  RogueClassCmdCatch* c_1 = (((RogueCmdCatch__init__Token_Local_CmdStatementList( ((RogueClassCmdCatch*)ROGUE_CREATE_OBJECT(CmdCatch)), catch_t_0, ((RogueClassLocal*)(NULL)), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))) ))));
  RogueCmdCatchList__add__CmdCatch( THIS->catches, c_1 );
  return (RogueClassCmdCatch*)(c_1);
}

RogueString* RogueCmdAwait__type_name( RogueClassCmdAwait* THIS )
{
  return (RogueString*)(Rogue_literal_strings[799]);
}

RogueClassCmd* RogueCmdAwait__clone__CloneArgs( RogueClassCmdAwait* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if (!!(task_args_1))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[826] ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAwait__init__Token_Cmd_CmdStatementList_Local( ((RogueClassCmdAwait*)ROGUE_CREATE_OBJECT(CmdAwait)), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->expression), ((RogueClassCloneArgs*)(task_args_1)) )), ((RogueCmdStatementList__clone__CloneArgs( THIS->statement_list, ((RogueClassCloneArgs*)(task_args_1)) ))), THIS->result_var ))))));
  }
}

RogueClassCmd* RogueCmdAwait__resolve__Scope( RogueClassCmdAwait* THIS, RogueClassScope* scope_0 )
{
  if (!(((RogueMethod__is_task_conversion( scope_0->this_method )))))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[878] ))));
  }
  THIS->expression = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->expression), scope_0 ));
  RogueClassType* task_type_1 = ((call_ROGUEM64( 22, (RogueClassCmd*)(THIS->expression) )));
  RogueClassProperty* p_result_2 = (((RogueType__find_property__String( task_type_1, Rogue_literal_strings[411] ))));
  if (!!(THIS->result_var))
  {
    if (!!(p_result_2))
    {
      THIS->result_var->_type = p_result_2->_type;
    }
    else
    {
      ROGUE_THROW(((RogueToken__error__String( THIS->expression->t, Rogue_literal_strings[879] ))));
    }
  }
  RogueClassLocal* task_var_3 = (((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
  task_var_3->initial_value = THIS->expression;
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->statement_list), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local_Logical( ((RogueClassCmdLocalDeclaration*)ROGUE_CREATE_OBJECT(CmdLocalDeclaration)), THIS->t, task_var_3, false ))))) );
  RogueClassCmdGenericLoop* cmd_while_4 = (((RogueCmdGenericLoop__init__Token_Int32_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)ROGUE_CREATE_OBJECT(CmdGenericLoop)), THIS->t, 8, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, task_var_3 ))))), Rogue_literal_strings[407] ))))), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
  RogueCmdList__add__Cmd( ((RogueCmdList*)cmd_while_4->statements), ((RogueClassCmd*)(((RogueCmdYield__init__Token( ((RogueClassCmdYield*)ROGUE_CREATE_OBJECT(CmdYield)), THIS->t ))))) );
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->statement_list), ((RogueClassCmd*)(cmd_while_4)) );
  if (!!(THIS->result_var))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->statement_list), ((RogueClassCmd*)(((RogueCmdWriteLocal__init__Token_Local_Cmd( ((RogueClassCmdWriteLocal*)ROGUE_CREATE_OBJECT(CmdWriteLocal)), THIS->t, THIS->result_var, ((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)ROGUE_CREATE_OBJECT(CmdReadProperty)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, task_var_3 ))))), p_result_2 ))))) ))))) );
  }
  RogueCmdStatementList__resolve__Scope( THIS->statement_list, scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBlock__resolve__Scope( ((RogueCmdBlock__init__Token_CmdStatementList_Int32( ((RogueClassCmdBlock*)ROGUE_CREATE_OBJECT(CmdBlock)), THIS->t, THIS->statement_list, 0 ))), scope_0 ))))));
}

RogueClassCmdAwait* RogueCmdAwait__init_object( RogueClassCmdAwait* THIS )
{
  return (RogueClassCmdAwait*)(THIS);
}

RogueClassCmdAwait* RogueCmdAwait__init__Token_Cmd_CmdStatementList_Local( RogueClassCmdAwait* THIS, RogueClassToken* _auto_1253_0, RogueClassCmd* _auto_1254_1, RogueClassCmdStatementList* _auto_1255_2, RogueClassLocal* _auto_1256_3 )
{
  THIS->result_var = _auto_1256_3;
  THIS->statement_list = _auto_1255_2;
  THIS->expression = _auto_1254_1;
  THIS->t = _auto_1253_0;
  return (RogueClassCmdAwait*)(THIS);
}

RogueString* RogueCmdYield__type_name( RogueClassCmdYield* THIS )
{
  return (RogueString*)(Rogue_literal_strings[800]);
}

RogueClassCmd* RogueCmdYield__clone__CloneArgs( RogueClassCmdYield* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if (!!(task_args_1))
  {
    RogueTaskArgs__add_yield__Token( task_args_1, THIS->t );
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdYield__init__Token( ((RogueClassCmdYield*)ROGUE_CREATE_OBJECT(CmdYield)), THIS->t ))))));
  }
}

RogueClassCmd* RogueCmdYield__resolve__Scope( RogueClassCmdYield* THIS, RogueClassScope* scope_0 )
{
  if (!(((RogueMethod__is_task_conversion( scope_0->this_method )))))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[880] ))));
  }
  {
    RogueCmdControlStructureList* _auto_2261_1 = (scope_0->control_stack);
    RogueInt32 _auto_2262_2 = (0);
    for (;_auto_2262_2 < _auto_2261_1->count;++_auto_2262_2)
    {
      RogueClassCmdControlStructure* control_structure_3 = (((RogueClassCmdControlStructure*)(_auto_2261_1->data->objects[_auto_2262_2])));
      control_structure_3->contains_yield = true;
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmdYield* RogueCmdYield__init_object( RogueClassCmdYield* THIS )
{
  return (RogueClassCmdYield*)(THIS);
}

RogueClassCmdYield* RogueCmdYield__init__Token( RogueClassCmdYield* THIS, RogueClassToken* _auto_1257_0 )
{
  THIS->t = _auto_1257_0;
  return (RogueClassCmdYield*)(THIS);
}

RogueString* RogueCmdThrow__type_name( RogueClassCmdThrow* THIS )
{
  return (RogueString*)(Rogue_literal_strings[801]);
}

RogueClassCmdThrow* RogueCmdThrow__clone__CloneArgs( RogueClassCmdThrow* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdThrow*)(((RogueCmdThrow__init__Token_Cmd( ((RogueClassCmdThrow*)ROGUE_CREATE_OBJECT(CmdThrow)), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->expression), clone_args_0 )) ))));
}

RogueClassCmd* RogueCmdThrow__resolve__Scope( RogueClassCmdThrow* THIS, RogueClassScope* scope_0 )
{
  THIS->expression = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->expression), scope_0 ));
  RogueClassType* expression_type_1 = ((call_ROGUEM64( 22, (RogueClassCmd*)(THIS->expression) )));
  RogueType__organize__Scope( expression_type_1, scope_0 );
  if (!(((RogueType__instance_of__Type( expression_type_1, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Exception )))))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->expression->t, Rogue_literal_strings[881] ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdThrow__write_cpp__CPPWriter_Logical( RogueClassCmdThrow* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[965] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->expression), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
}

void RogueCmdThrow__trace_used_code( RogueClassCmdThrow* THIS )
{
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->expression) );
}

void RogueCmdThrow__update_this_type__Scope( RogueClassCmdThrow* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->expression), scope_0 );
}

RogueClassCmdThrow* RogueCmdThrow__init_object( RogueClassCmdThrow* THIS )
{
  return (RogueClassCmdThrow*)(THIS);
}

RogueClassCmdThrow* RogueCmdThrow__init__Token_Cmd( RogueClassCmdThrow* THIS, RogueClassToken* _auto_1258_0, RogueClassCmd* _auto_1259_1 )
{
  THIS->expression = _auto_1259_1;
  THIS->t = _auto_1258_0;
  return (RogueClassCmdThrow*)(THIS);
}

RogueString* RogueCmdFormattedString__type_name( RogueClassCmdFormattedString* THIS )
{
  return (RogueString*)(Rogue_literal_strings[802]);
}

RogueClassCmd* RogueCmdFormattedString__clone__CloneArgs( RogueClassCmdFormattedString* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdFormattedString__init__Token_String_CmdArgs( ((RogueClassCmdFormattedString*)ROGUE_CREATE_OBJECT(CmdFormattedString)), THIS->t, THIS->format, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

RogueClassType* RogueCmdFormattedString__implicit_type__Scope( RogueClassCmdFormattedString* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String);
}

RogueClassCmd* RogueCmdFormattedString__resolve__Scope( RogueClassCmdFormattedString* THIS, RogueClassScope* scope_0 )
{
  RogueClassCmdAccess* cmd_1 = (((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, Rogue_literal_strings[41], ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))) ))));
  RogueString* fmt_2 = (THIS->format);
  {
    RogueClassCmdArgs* _auto_2263_4 = (THIS->args);
    RogueInt32 _auto_2264_5 = (0);
    for (;_auto_2264_5 < _auto_2263_4->count;++_auto_2264_5)
    {
      RogueClassCmd* arg_6 = (((RogueClassCmd*)(_auto_2263_4->data->objects[_auto_2264_5])));
      arg_6 = ((RogueClassCmd*)((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)(arg_6), scope_0 )) ))));
      RogueOptionalInt32 i_3 = (((RogueString__locate__Character_OptionalInt32( fmt_2, (RogueCharacter)'$', RogueOptionalInt32() ))));
      if (!(i_3.exists))
      {
        ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[882] ))));
      }
      if (i_3.value > 0)
      {
        cmd_1 = ((RogueClassCmdAccess*)((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(cmd_1)), Rogue_literal_strings[883], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), ((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Int32( ((RogueClassCmdLiteralString*)ROGUE_CREATE_OBJECT(CmdLiteralString)), THIS->t, ((RogueString__leftmost__Int32( fmt_2, i_3.value ))), 0 ))))) ))) ))));
        fmt_2 = ((RogueString*)((RogueString__from__Int32( fmt_2, (i_3.value + 1) ))));
      }
      else
      {
        fmt_2 = ((RogueString*)((RogueString__from__Int32( fmt_2, 1 ))));
      }
      cmd_1 = ((RogueClassCmdAccess*)((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(cmd_1)), Rogue_literal_strings[883], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), ((RogueClassCmd*)(((RogueClassCmdAdd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdAdd*)ROGUE_CREATE_OBJECT(CmdAdd))), THIS->t, ((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Int32( ((RogueClassCmdLiteralString*)ROGUE_CREATE_OBJECT(CmdLiteralString)), THIS->t, Rogue_literal_strings[0], 0 ))))), arg_6 ))))))) ))) ))));
    }
  }
  if (!!(fmt_2->count))
  {
    if (((RogueString__locate__Character_OptionalInt32( fmt_2, (RogueCharacter)'$', RogueOptionalInt32() ))).exists)
    {
      ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[884] ))));
    }
    cmd_1 = ((RogueClassCmdAccess*)((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(cmd_1)), Rogue_literal_strings[883], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), ((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Int32( ((RogueClassCmdLiteralString*)ROGUE_CREATE_OBJECT(CmdLiteralString)), THIS->t, fmt_2, 0 ))))) ))) ))));
  }
  return (RogueClassCmd*)((call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( cmd_1, scope_0 )))), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String, scope_0 ))), scope_0 )));
}

RogueClassType* Rogue_CmdFormattedString__type( RogueClassCmdFormattedString* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String);
}

void RogueCmdFormattedString__update_this_type__Scope( RogueClassCmdFormattedString* THIS, RogueClassScope* scope_0 )
{
  RogueCmdArgs__update_this_type__Scope( THIS->args, scope_0 );
}

RogueClassCmdFormattedString* RogueCmdFormattedString__init_object( RogueClassCmdFormattedString* THIS )
{
  return (RogueClassCmdFormattedString*)(THIS);
}

RogueClassCmdFormattedString* RogueCmdFormattedString__init__Token_String_CmdArgs( RogueClassCmdFormattedString* THIS, RogueClassToken* _auto_1260_0, RogueString* _auto_1261_1, RogueClassCmdArgs* _auto_1262_2 )
{
  THIS->args = _auto_1262_2;
  THIS->format = _auto_1261_1;
  THIS->t = _auto_1260_0;
  return (RogueClassCmdFormattedString*)(THIS);
}

RogueString* RogueCmdTrace__type_name( RogueClassCmdTrace* THIS )
{
  return (RogueString*)(Rogue_literal_strings[803]);
}

RogueClassCmdTrace* RogueCmdTrace__clone__CloneArgs( RogueClassCmdTrace* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdTrace*)(((RogueCmdTrace__init__Token_Cmd( ((RogueClassCmdTrace*)ROGUE_CREATE_OBJECT(CmdTrace)), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->info, clone_args_0 ))) ))));
}

RogueClassCmd* RogueCmdTrace__resolve__Scope( RogueClassCmdTrace* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, Rogue_literal_strings[44] ))))), Rogue_literal_strings[885], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->info ))) ))), scope_0 ))));
}

void RogueCmdTrace__trace_used_code( RogueClassCmdTrace* THIS )
{
}

void RogueCmdTrace__update_this_type__Scope( RogueClassCmdTrace* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdTrace* RogueCmdTrace__init_object( RogueClassCmdTrace* THIS )
{
  return (RogueClassCmdTrace*)(THIS);
}

RogueClassCmdTrace* RogueCmdTrace__init__Token_Cmd( RogueClassCmdTrace* THIS, RogueClassToken* _auto_1263_0, RogueClassCmd* _auto_1264_1 )
{
  THIS->info = _auto_1264_1;
  THIS->t = _auto_1263_0;
  return (RogueClassCmdTrace*)(THIS);
}

RogueString* RogueCmdEscape__type_name( RogueClassCmdEscape* THIS )
{
  return (RogueString*)(Rogue_literal_strings[804]);
}

RogueClassCmd* RogueCmdEscape__clone__CloneArgs( RogueClassCmdEscape* THIS, RogueClassCloneArgs* clone_args_0 )
{
  if (!!(THIS->target_cmd->task_escape_section))
  {
    RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
    return (RogueClassCmd*)(((RogueTaskArgs__create_escape__Token_CmdTaskControlSection( task_args_1, THIS->t, THIS->target_cmd->task_escape_section ))));
  }
  else
  {
    RogueClassCmdControlStructure* new_target_2 = (THIS->target_cmd);
    while (!!(new_target_2->cloned_command))
    {
      new_target_2 = ((RogueClassCmdControlStructure*)new_target_2->cloned_command);
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdEscape__init__Token_Int32_CmdControlStructure( ((RogueClassCmdEscape*)ROGUE_CREATE_OBJECT(CmdEscape)), THIS->t, THIS->_control_type, new_target_2 ))))));
  }
}

RogueClassCmd* RogueCmdEscape__resolve__Scope( RogueClassCmdEscape* THIS, RogueClassScope* scope_0 )
{
  RogueInt32 i_1 = (scope_0->control_stack->count);
  while (i_1 > 0)
  {
    --i_1;
    RogueClassCmdControlStructure* cmd_2 = (((RogueClassCmdControlStructure*)(scope_0->control_stack->data->objects[i_1])));
    if (cmd_2->_control_type == THIS->_control_type)
    {
      while (!!(cmd_2->cloned_command))
      {
        cmd_2 = ((RogueClassCmdControlStructure*)cmd_2->cloned_command);
      }
      if (!(!!(cmd_2->escape_label)))
      {
        cmd_2->escape_label = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
      }
      THIS->target_cmd = cmd_2;
      return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
    }
  }
  ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[886] ))));
}

void RogueCmdEscape__write_cpp__CPPWriter_Logical( RogueClassCmdEscape* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, ((RogueString__operatorPLUS__String( Rogue_literal_strings[961], THIS->target_cmd->escape_label ))) );
}

void RogueCmdEscape__trace_used_code( RogueClassCmdEscape* THIS )
{
}

void RogueCmdEscape__update_this_type__Scope( RogueClassCmdEscape* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdEscape* RogueCmdEscape__init_object( RogueClassCmdEscape* THIS )
{
  return (RogueClassCmdEscape*)(THIS);
}

RogueClassCmdEscape* RogueCmdEscape__init__Token_Int32_CmdControlStructure( RogueClassCmdEscape* THIS, RogueClassToken* _auto_1265_0, RogueInt32 _auto_1266_1, RogueClassCmdControlStructure* _auto_1267_2 )
{
  THIS->target_cmd = _auto_1267_2;
  THIS->_control_type = _auto_1266_1;
  THIS->t = _auto_1265_0;
  return (RogueClassCmdEscape*)(THIS);
}

RogueString* RogueCmdNextIteration__type_name( RogueClassCmdNextIteration* THIS )
{
  return (RogueString*)(Rogue_literal_strings[805]);
}

RogueClassCmd* RogueCmdNextIteration__clone__CloneArgs( RogueClassCmdNextIteration* THIS, RogueClassCloneArgs* clone_args_0 )
{
  if (!!(THIS->target_cmd->task_upkeep_section))
  {
    RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
    return (RogueClassCmd*)(((RogueTaskArgs__create_escape__Token_CmdTaskControlSection( task_args_1, THIS->t, THIS->target_cmd->task_upkeep_section ))));
  }
  else
  {
    RogueClassCmdControlStructure* new_target_2 = (THIS->target_cmd);
    while (!!(new_target_2->cloned_command))
    {
      new_target_2 = ((RogueClassCmdControlStructure*)new_target_2->cloned_command);
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdNextIteration__init__Token_CmdControlStructure( ((RogueClassCmdNextIteration*)ROGUE_CREATE_OBJECT(CmdNextIteration)), THIS->t, new_target_2 ))))));
  }
}

RogueClassCmd* RogueCmdNextIteration__resolve__Scope( RogueClassCmdNextIteration* THIS, RogueClassScope* scope_0 )
{
  RogueInt32 i_1 = (scope_0->control_stack->count);
  while (i_1 > 0)
  {
    --i_1;
    RogueClassCmdControlStructure* cmd_2 = (((RogueClassCmdControlStructure*)(scope_0->control_stack->data->objects[i_1])));
    if (cmd_2->_control_type >= 6)
    {
      while (!!(cmd_2->cloned_command))
      {
        cmd_2 = ((RogueClassCmdControlStructure*)cmd_2->cloned_command);
      }
      if (!(!!(cmd_2->upkeep_label)))
      {
        cmd_2->upkeep_label = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
      }
      THIS->target_cmd = cmd_2;
      return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
    }
  }
  ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[887] ))));
}

void RogueCmdNextIteration__write_cpp__CPPWriter_Logical( RogueClassCmdNextIteration* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[966] );
}

void RogueCmdNextIteration__trace_used_code( RogueClassCmdNextIteration* THIS )
{
}

void RogueCmdNextIteration__update_this_type__Scope( RogueClassCmdNextIteration* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdNextIteration* RogueCmdNextIteration__init_object( RogueClassCmdNextIteration* THIS )
{
  return (RogueClassCmdNextIteration*)(THIS);
}

RogueClassCmdNextIteration* RogueCmdNextIteration__init__Token_CmdControlStructure( RogueClassCmdNextIteration* THIS, RogueClassToken* _auto_1268_0, RogueClassCmdControlStructure* _auto_1269_1 )
{
  THIS->target_cmd = _auto_1269_1;
  THIS->t = _auto_1268_0;
  return (RogueClassCmdNextIteration*)(THIS);
}

RogueString* RogueCmdNecessary__type_name( RogueClassCmdNecessary* THIS )
{
  return (RogueString*)(Rogue_literal_strings[806]);
}

RogueClassCmd* RogueCmdNecessary__clone__CloneArgs( RogueClassCmdNecessary* THIS, RogueClassCloneArgs* clone_args_0 )
{
  if (!!(THIS->target_cmd->unsatisfied_section))
  {
    RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
    RogueClassCmd* cmd_jump_2 = (((RogueTaskArgs__create_escape__Token_CmdTaskControlSection( task_args_1, THIS->t, THIS->target_cmd->unsatisfied_section ))));
    if (!!(THIS->condition))
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdIf__init__Token_Cmd_CmdStatementList_Int32( ((RogueClassCmdIf*)ROGUE_CREATE_OBJECT(CmdIf)), THIS->t, ((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->condition), ((RogueClassCloneArgs*)(task_args_1)) )) ))))))), ((RogueCmdStatementList__init__Cmd( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)), cmd_jump_2 ))), 2 ))))));
    }
    else
    {
      return (RogueClassCmd*)(cmd_jump_2);
    }
  }
  else
  {
    RogueClassCmdControlStructure* new_target_3 = (((RogueClassCmdControlStructure*)(THIS->target_cmd)));
    while (!!(new_target_3->cloned_command))
    {
      new_target_3 = ((RogueClassCmdControlStructure*)new_target_3->cloned_command);
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdNecessary__init__Token_Cmd_CmdContingent( ((RogueClassCmdNecessary*)ROGUE_CREATE_OBJECT(CmdNecessary)), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->condition, clone_args_0 ))), ((RogueClassCmdContingent*)(RogueObject_as(new_target_3,RogueTypeCmdContingent))) ))))));
  }
}

RogueClassCmd* RogueCmdNecessary__resolve__Scope( RogueClassCmdNecessary* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->condition))
  {
    THIS->condition = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->condition), scope_0 ));
  }
  RogueInt32 i_1 = (scope_0->control_stack->count);
  while (i_1 > 0)
  {
    --i_1;
    RogueClassCmdControlStructure* cmd_2 = (((RogueClassCmdControlStructure*)(scope_0->control_stack->data->objects[i_1])));
    if (cmd_2->_control_type == 1)
    {
      while (!!(cmd_2->cloned_command))
      {
        cmd_2 = ((RogueClassCmdControlStructure*)cmd_2->cloned_command);
      }
      RogueClassCmdContingent* cmd_contingent_3 = (((RogueClassCmdContingent*)(RogueObject_as(cmd_2,RogueTypeCmdContingent))));
      if (!(!!(cmd_contingent_3->unsatisfied_label)))
      {
        cmd_contingent_3->unsatisfied_label = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
      }
      THIS->target_cmd = cmd_contingent_3;
      return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
    }
  }
  ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[888] ))));
}

void RogueCmdNecessary__write_cpp__CPPWriter_Logical( RogueClassCmdNecessary* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[967] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->condition), writer_0, false );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[968] ))), THIS->target_cmd->unsatisfied_label );
}

void RogueCmdNecessary__trace_used_code( RogueClassCmdNecessary* THIS )
{
  if (!!(THIS->condition))
  {
    call_ROGUEM63( 31, (RogueClassCmd*)(THIS->condition) );
  }
}

void RogueCmdNecessary__update_this_type__Scope( RogueClassCmdNecessary* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->condition))
  {
    call_ROGUEM60( 32, (RogueClassCmd*)(THIS->condition), scope_0 );
  }
}

RogueClassCmdNecessary* RogueCmdNecessary__init_object( RogueClassCmdNecessary* THIS )
{
  return (RogueClassCmdNecessary*)(THIS);
}

RogueClassCmdNecessary* RogueCmdNecessary__init__Token_Cmd_CmdContingent( RogueClassCmdNecessary* THIS, RogueClassToken* _auto_1270_0, RogueClassCmd* _auto_1271_1, RogueClassCmdContingent* _auto_1272_2 )
{
  THIS->target_cmd = _auto_1272_2;
  THIS->condition = _auto_1271_1;
  THIS->t = _auto_1270_0;
  return (RogueClassCmdNecessary*)(THIS);
}

RogueString* RogueCmdSufficient__type_name( RogueClassCmdSufficient* THIS )
{
  return (RogueString*)(Rogue_literal_strings[807]);
}

RogueClassCmd* RogueCmdSufficient__clone__CloneArgs( RogueClassCmdSufficient* THIS, RogueClassCloneArgs* clone_args_0 )
{
  if (!!(THIS->target_cmd->satisfied_section))
  {
    RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
    RogueClassCmd* cmd_jump_2 = (((RogueTaskArgs__create_escape__Token_CmdTaskControlSection( task_args_1, THIS->t, THIS->target_cmd->satisfied_section ))));
    if (!!(THIS->condition))
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdIf__init__Token_Cmd_CmdStatementList_Int32( ((RogueClassCmdIf*)ROGUE_CREATE_OBJECT(CmdIf)), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->condition), ((RogueClassCloneArgs*)(task_args_1)) )), ((RogueCmdStatementList__init__Cmd( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)), cmd_jump_2 ))), 2 ))))));
    }
    else
    {
      return (RogueClassCmd*)(cmd_jump_2);
    }
  }
  else
  {
    RogueClassCmdControlStructure* new_target_3 = (((RogueClassCmdControlStructure*)(THIS->target_cmd)));
    while (!!(new_target_3->cloned_command))
    {
      new_target_3 = ((RogueClassCmdControlStructure*)new_target_3->cloned_command);
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdSufficient__init__Token_Cmd_CmdContingent( ((RogueClassCmdSufficient*)ROGUE_CREATE_OBJECT(CmdSufficient)), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->condition, clone_args_0 ))), ((RogueClassCmdContingent*)(RogueObject_as(new_target_3,RogueTypeCmdContingent))) ))))));
  }
}

RogueClassCmd* RogueCmdSufficient__resolve__Scope( RogueClassCmdSufficient* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->condition))
  {
    THIS->condition = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->condition), scope_0 ));
  }
  RogueInt32 i_1 = (scope_0->control_stack->count);
  while (i_1 > 0)
  {
    --i_1;
    RogueClassCmdControlStructure* cmd_2 = (((RogueClassCmdControlStructure*)(scope_0->control_stack->data->objects[i_1])));
    if (cmd_2->_control_type == 1)
    {
      while (!!(cmd_2->cloned_command))
      {
        cmd_2 = ((RogueClassCmdControlStructure*)cmd_2->cloned_command);
      }
      RogueClassCmdContingent* cmd_contingent_3 = (((RogueClassCmdContingent*)(RogueObject_as(cmd_2,RogueTypeCmdContingent))));
      if (!(!!(cmd_contingent_3->satisfied_label)))
      {
        cmd_contingent_3->satisfied_label = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
      }
      THIS->target_cmd = cmd_contingent_3;
      return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
    }
  }
  ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[888] ))));
}

void RogueCmdSufficient__write_cpp__CPPWriter_Logical( RogueClassCmdSufficient* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[959] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->condition), writer_0, false );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[969] ))), THIS->target_cmd->satisfied_label );
}

void RogueCmdSufficient__trace_used_code( RogueClassCmdSufficient* THIS )
{
  if (!!(THIS->condition))
  {
    call_ROGUEM63( 31, (RogueClassCmd*)(THIS->condition) );
  }
}

void RogueCmdSufficient__update_this_type__Scope( RogueClassCmdSufficient* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->condition))
  {
    call_ROGUEM60( 32, (RogueClassCmd*)(THIS->condition), scope_0 );
  }
}

RogueClassCmdSufficient* RogueCmdSufficient__init_object( RogueClassCmdSufficient* THIS )
{
  return (RogueClassCmdSufficient*)(THIS);
}

RogueClassCmdSufficient* RogueCmdSufficient__init__Token_Cmd_CmdContingent( RogueClassCmdSufficient* THIS, RogueClassToken* _auto_1273_0, RogueClassCmd* _auto_1274_1, RogueClassCmdContingent* _auto_1275_2 )
{
  THIS->target_cmd = _auto_1275_2;
  THIS->condition = _auto_1274_1;
  THIS->t = _auto_1273_0;
  return (RogueClassCmdSufficient*)(THIS);
}

RogueString* RogueCmdAdjust__type_name( RogueClassCmdAdjust* THIS )
{
  return (RogueString*)(Rogue_literal_strings[808]);
}

RogueClassCmd* RogueCmdAdjust__resolve__Scope( RogueClassCmdAdjust* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->operand), scope_0 ));
  return (RogueClassCmd*)((call_ROGUEM66( 27, (RogueClassCmd*)(THIS->operand), scope_0, THIS->delta )));
}

RogueClassCmdAdjust* RogueCmdAdjust__init_object( RogueClassCmdAdjust* THIS )
{
  return (RogueClassCmdAdjust*)(THIS);
}

RogueClassCmdAdjust* RogueCmdAdjust__init__Token_Cmd_Int32( RogueClassCmdAdjust* THIS, RogueClassToken* _auto_1276_0, RogueClassCmd* _auto_1277_1, RogueInt32 _auto_1278_2 )
{
  THIS->delta = _auto_1278_2;
  THIS->operand = _auto_1277_1;
  THIS->t = _auto_1276_0;
  return (RogueClassCmdAdjust*)(THIS);
}

RogueString* RogueCmdOpWithAssign__type_name( RogueClassCmdOpWithAssign* THIS )
{
  return (RogueString*)(Rogue_literal_strings[809]);
}

RogueClassCmd* RogueCmdOpWithAssign__clone__CloneArgs( RogueClassCmdOpWithAssign* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdOpWithAssign__init__Token_Cmd_TokenType_Cmd( ((RogueClassCmdOpWithAssign*)ROGUE_CREATE_OBJECT(CmdOpWithAssign)), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->target), clone_args_0 )), THIS->op, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdOpWithAssign__resolve__Scope( RogueClassCmdOpWithAssign* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)((call_ROGUEM67( 28, (RogueClassCmd*)(THIS->target), scope_0, THIS->op, THIS->new_value )));
}

RogueClassCmdOpWithAssign* RogueCmdOpWithAssign__init_object( RogueClassCmdOpWithAssign* THIS )
{
  return (RogueClassCmdOpWithAssign*)(THIS);
}

RogueClassCmdOpWithAssign* RogueCmdOpWithAssign__init__Token_Cmd_TokenType_Cmd( RogueClassCmdOpWithAssign* THIS, RogueClassToken* _auto_1279_0, RogueClassCmd* _auto_1280_1, RogueClassTokenType* _auto_1281_2, RogueClassCmd* _auto_1282_3 )
{
  THIS->new_value = _auto_1282_3;
  THIS->op = _auto_1281_2;
  THIS->target = _auto_1280_1;
  THIS->t = _auto_1279_0;
  return (RogueClassCmdOpWithAssign*)(THIS);
}

RogueString* RogueCmdWhichCaseList__to_String( RogueCmdWhichCaseList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueCmdWhichCaseList* _auto_2265_2 = (THIS);
    RogueInt32 _auto_2266_3 = (0);
    for (;_auto_2266_3 < _auto_2265_2->count;++_auto_2266_3)
    {
      RogueClassCmdWhichCase* value_4 = (((RogueClassCmdWhichCase*)(_auto_2265_2->data->objects[_auto_2266_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdWhichCaseList__type_name( RogueCmdWhichCaseList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[706]);
}

RogueCmdWhichCaseList* RogueCmdWhichCaseList__init_object( RogueCmdWhichCaseList* THIS )
{
  return (RogueCmdWhichCaseList*)(THIS);
}

RogueCmdWhichCaseList* RogueCmdWhichCaseList__init( RogueCmdWhichCaseList* THIS )
{
  RogueCmdWhichCaseList__init__Int32( THIS, 10 );
  return (RogueCmdWhichCaseList*)(THIS);
}

RogueCmdWhichCaseList* RogueCmdWhichCaseList__init__Int32( RogueCmdWhichCaseList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassCmdWhichCase*), true );
  return (RogueCmdWhichCaseList*)(THIS);
}

RogueCmdWhichCaseList* RogueCmdWhichCaseList__add__CmdWhichCase( RogueCmdWhichCaseList* THIS, RogueClassCmdWhichCase* value_0 )
{
  ((RogueCmdWhichCaseList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdWhichCaseList*)(THIS);
}

RogueInt32 RogueCmdWhichCaseList__capacity( RogueCmdWhichCaseList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueCmdWhichCaseList* RogueCmdWhichCaseList__reserve__Int32( RogueCmdWhichCaseList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassCmdWhichCase*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueCmdWhichCaseList__capacity( THIS ))) + ((RogueCmdWhichCaseList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassCmdWhichCase*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdWhichCaseList*)(THIS);
}

RogueString* RogueCmdWhichCase__type_name( RogueClassCmdWhichCase* THIS )
{
  return (RogueString*)(Rogue_literal_strings[810]);
}

RogueClassCmdWhichCase* RogueCmdWhichCase__clone__CloneArgs( RogueClassCmdWhichCase* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdWhichCase*)(((RogueCmdWhichCase__init__Token_CmdArgs_CmdStatementList( ((RogueClassCmdWhichCase*)ROGUE_CREATE_OBJECT(CmdWhichCase)), THIS->t, ((RogueCmdArgs__clone__CloneArgs( THIS->conditions, clone_args_0 ))), ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 ))) ))));
}

void RogueCmdWhichCase__trace_used_code( RogueClassCmdWhichCase* THIS )
{
  {
    RogueClassCmdArgs* _auto_2297_0 = (THIS->conditions);
    RogueInt32 _auto_2298_1 = (0);
    for (;_auto_2298_1 < _auto_2297_0->count;++_auto_2298_1)
    {
      RogueClassCmd* condition_2 = (((RogueClassCmd*)(_auto_2297_0->data->objects[_auto_2298_1])));
      call_ROGUEM63( 31, (RogueClassCmd*)(condition_2) );
    }
  }
  RogueCmdStatementList__trace_used_code( THIS->statements );
}

void RogueCmdWhichCase__update_this_type__Scope( RogueClassCmdWhichCase* THIS, RogueClassScope* scope_0 )
{
  {
    RogueClassCmdArgs* _auto_2299_1 = (THIS->conditions);
    RogueInt32 _auto_2300_2 = (0);
    for (;_auto_2300_2 < _auto_2299_1->count;++_auto_2300_2)
    {
      RogueClassCmd* condition_3 = (((RogueClassCmd*)(_auto_2299_1->data->objects[_auto_2300_2])));
      call_ROGUEM60( 32, (RogueClassCmd*)(condition_3), scope_0 );
    }
  }
  RogueCmdStatementList__update_this_type__Scope( THIS->statements, scope_0 );
}

RogueClassCmdWhichCase* RogueCmdWhichCase__init_object( RogueClassCmdWhichCase* THIS )
{
  return (RogueClassCmdWhichCase*)(THIS);
}

RogueClassCmdWhichCase* RogueCmdWhichCase__init__Token_CmdArgs_CmdStatementList( RogueClassCmdWhichCase* THIS, RogueClassToken* _auto_1283_0, RogueClassCmdArgs* _auto_1284_1, RogueClassCmdStatementList* _auto_1285_2 )
{
  THIS->statements = _auto_1285_2;
  THIS->conditions = _auto_1284_1;
  THIS->t = _auto_1283_0;
  return (RogueClassCmdWhichCase*)(THIS);
}

RogueClassCmd* RogueCmdWhichCase__as_conditional__String( RogueClassCmdWhichCase* THIS, RogueString* expression_var_name_0 )
{
  RogueClassCmd* cmd_1 = 0;
  {
    RogueClassCmdArgs* _auto_2301_2 = (THIS->conditions);
    RogueInt32 _auto_2302_3 = (0);
    for (;_auto_2302_3 < _auto_2301_2->count;++_auto_2302_3)
    {
      RogueClassCmd* condition_4 = (((RogueClassCmd*)(_auto_2301_2->data->objects[_auto_2302_3])));
      if (!!(cmd_1))
      {
        cmd_1 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdLogicalOr*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdLogicalOr*)ROGUE_CREATE_OBJECT(CmdLogicalOr))), THIS->t, cmd_1, ((RogueClassCmd*)(((RogueClassCmdCompareEQ*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)ROGUE_CREATE_OBJECT(CmdCompareEQ))), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, expression_var_name_0 ))))), condition_4 ))))))) ))))))));
      }
      else
      {
        cmd_1 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCompareEQ*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)ROGUE_CREATE_OBJECT(CmdCompareEQ))), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, expression_var_name_0 ))))), condition_4 ))))))));
      }
    }
  }
  return (RogueClassCmd*)(cmd_1);
}

RogueString* RogueCmdCatchList__to_String( RogueCmdCatchList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueCmdCatchList* _auto_2303_2 = (THIS);
    RogueInt32 _auto_2304_3 = (0);
    for (;_auto_2304_3 < _auto_2303_2->count;++_auto_2304_3)
    {
      RogueClassCmdCatch* value_4 = (((RogueClassCmdCatch*)(_auto_2303_2->data->objects[_auto_2304_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdCatchList__type_name( RogueCmdCatchList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[707]);
}

RogueCmdCatchList* RogueCmdCatchList__init_object( RogueCmdCatchList* THIS )
{
  return (RogueCmdCatchList*)(THIS);
}

RogueCmdCatchList* RogueCmdCatchList__init( RogueCmdCatchList* THIS )
{
  RogueCmdCatchList__init__Int32( THIS, 10 );
  return (RogueCmdCatchList*)(THIS);
}

RogueCmdCatchList* RogueCmdCatchList__init__Int32( RogueCmdCatchList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassCmdCatch*), true );
  return (RogueCmdCatchList*)(THIS);
}

RogueCmdCatchList* RogueCmdCatchList__add__CmdCatch( RogueCmdCatchList* THIS, RogueClassCmdCatch* value_0 )
{
  ((RogueCmdCatchList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdCatchList*)(THIS);
}

RogueInt32 RogueCmdCatchList__capacity( RogueCmdCatchList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueCmdCatchList* RogueCmdCatchList__reserve__Int32( RogueCmdCatchList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassCmdCatch*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueCmdCatchList__capacity( THIS ))) + ((RogueCmdCatchList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassCmdCatch*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdCatchList*)(THIS);
}

RogueString* RogueCmdCatch__type_name( RogueClassCmdCatch* THIS )
{
  return (RogueString*)(Rogue_literal_strings[811]);
}

RogueClassCmdCatch* RogueCmdCatch__clone__CloneArgs( RogueClassCmdCatch* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdCatch*)(((RogueCmdCatch__init__Token_Local_CmdStatementList( ((RogueClassCmdCatch*)ROGUE_CREATE_OBJECT(CmdCatch)), THIS->t, THIS->error_var, ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 ))) ))));
}

RogueClassCmd* RogueCmdCatch__resolve__Scope( RogueClassCmdCatch* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( THIS->error_var->_type, scope_0 );
  if (!(((RogueType__instance_of__Type( THIS->error_var->_type, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Exception )))))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[876] ))));
  }
  RogueScope__push_local__Local_Logical( scope_0, THIS->error_var, true );
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  RogueScope__pop_local( scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdCatch__write_cpp__CPPWriter_Logical( RogueClassCmdCatch* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[963] ))), ((RogueLocal__cpp_name( THIS->error_var ))) ))), Rogue_literal_strings[179] ))), THIS->error_var->_type ))), Rogue_literal_strings[503] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[196] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, false );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[114] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[964] );
}

void RogueCmdCatch__trace_used_code( RogueClassCmdCatch* THIS )
{
  RogueCmdStatementList__trace_used_code( THIS->statements );
}

void RogueCmdCatch__update_this_type__Scope( RogueClassCmdCatch* THIS, RogueClassScope* scope_0 )
{
  RogueCmdStatementList__update_this_type__Scope( THIS->statements, scope_0 );
}

RogueClassCmdCatch* RogueCmdCatch__init_object( RogueClassCmdCatch* THIS )
{
  return (RogueClassCmdCatch*)(THIS);
}

RogueClassCmdCatch* RogueCmdCatch__init__Token_Local_CmdStatementList( RogueClassCmdCatch* THIS, RogueClassToken* _auto_1290_0, RogueClassLocal* _auto_1291_1, RogueClassCmdStatementList* _auto_1292_2 )
{
  THIS->statements = _auto_1292_2;
  THIS->error_var = _auto_1291_1;
  THIS->t = _auto_1290_0;
  return (RogueClassCmdCatch*)(THIS);
}

RogueString* RogueCmdLocalDeclaration__type_name( RogueClassCmdLocalDeclaration* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1015]);
}

RogueClassCmd* RogueCmdLocalDeclaration__clone__CloneArgs( RogueClassCmdLocalDeclaration* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if (!!(task_args_1))
  {
    RogueClassCmd* new_value_2 = (THIS->local_info->initial_value);
    if (!!(new_value_2))
    {
      new_value_2 = ((RogueClassCmd*)(call_ROGUEM58( 6, (RogueClassCmd*)(new_value_2), clone_args_0 )));
    }
    return (RogueClassCmd*)(((RogueTaskArgs__replace_write_local__Token_Local_Cmd( task_args_1, THIS->t, THIS->local_info, new_value_2 ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local_Logical( ((RogueClassCmdLocalDeclaration*)ROGUE_CREATE_OBJECT(CmdLocalDeclaration)), THIS->t, THIS->local_info, THIS->skip_initialization ))))));
  }
}

void RogueCmdLocalDeclaration__exit_scope__Scope( RogueClassCmdLocalDeclaration* THIS, RogueClassScope* scope_0 )
{
  RogueScope__pop_local( scope_0 );
}

RogueClassCmd* RogueCmdLocalDeclaration__resolve__Scope( RogueClassCmdLocalDeclaration* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->local_info->initial_value))
  {
    THIS->local_info->initial_value = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->local_info->initial_value), scope_0 ));
    RogueClassType* initial_value_type_1 = ((call_ROGUEM64( 22, (RogueClassCmd*)(THIS->local_info->initial_value) )));
    if (((void*)THIS->local_info->_type) == ((void*)NULL))
    {
      THIS->local_info->_type = initial_value_type_1;
    }
  }
  if (((void*)THIS->local_info->_type) == ((void*)NULL))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[890] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->local_info->name ))) ))), Rogue_literal_strings[891] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->local_info->name ))) ))), Rogue_literal_strings[319] ))) ))) ))));
  }
  if (!!(THIS->local_info->initial_value))
  {
    THIS->local_info->initial_value = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)(THIS->local_info->initial_value), THIS->local_info->_type, scope_0 ))), scope_0 ));
  }
  RogueType__organize__Scope( THIS->local_info->_type, scope_0 );
  RogueScope__push_local__Local_Logical( scope_0, THIS->local_info, true );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdLocalDeclaration__write_cpp__CPPWriter_Logical( RogueClassCmdLocalDeclaration* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, THIS->local_info->_type ))), Rogue_literal_strings[458] ))), ((RogueLocal__cpp_name( THIS->local_info ))) );
  if (!(THIS->skip_initialization))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[509] );
    if (!!(THIS->local_info->initial_value))
    {
      RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[66] ))), (call_ROGUEM64( 29, (RogueClassCmd*)(THIS->local_info->initial_value) )), THIS->local_info->_type );
      call_ROGUEM68( 30, (RogueClassCmd*)(THIS->local_info->initial_value), writer_0, false );
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
    }
    else
    {
      RogueCPPWriter__print_default_value__Type( writer_0, THIS->local_info->_type );
    }
  }
}

void RogueCmdLocalDeclaration__trace_used_code( RogueClassCmdLocalDeclaration* THIS )
{
  RogueType__trace_used_code( THIS->local_info->_type );
  if (!!(THIS->local_info->initial_value))
  {
    call_ROGUEM63( 31, (RogueClassCmd*)(THIS->local_info->initial_value) );
  }
}

void RogueCmdLocalDeclaration__update_this_type__Scope( RogueClassCmdLocalDeclaration* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->local_info->initial_value))
  {
    call_ROGUEM60( 32, (RogueClassCmd*)(THIS->local_info->initial_value), scope_0 );
  }
}

RogueClassCmdLocalDeclaration* RogueCmdLocalDeclaration__init_object( RogueClassCmdLocalDeclaration* THIS )
{
  return (RogueClassCmdLocalDeclaration*)(THIS);
}

RogueClassCmdLocalDeclaration* RogueCmdLocalDeclaration__init__Token_Local_Logical( RogueClassCmdLocalDeclaration* THIS, RogueClassToken* _auto_1303_0, RogueClassLocal* _auto_1304_1, RogueLogical _auto_1305_2 )
{
  THIS->skip_initialization = _auto_1305_2;
  THIS->local_info = _auto_1304_1;
  THIS->t = _auto_1303_0;
  return (RogueClassCmdLocalDeclaration*)(THIS);
}

RogueString* RogueCmdAdjustLocal__type_name( RogueClassCmdAdjustLocal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[812]);
}

RogueClassCmd* RogueCmdAdjustLocal__clone__CloneArgs( RogueClassCmdAdjustLocal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if (!!(task_args_1))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAdjust__init__Token_Cmd_Int32( ((RogueClassCmdAdjust*)ROGUE_CREATE_OBJECT(CmdAdjust)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueTaskArgs__cmd_read_this__Token( task_args_1, THIS->t ))), ((RogueTaskArgs__convert_local_name__Local( task_args_1, THIS->local_info ))) ))))), THIS->delta ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Int32( ((RogueClassCmdAdjustLocal*)ROGUE_CREATE_OBJECT(CmdAdjustLocal)), THIS->t, THIS->local_info, THIS->delta ))))));
  }
}

RogueClassCmd* RogueCmdAdjustLocal__resolve__Scope( RogueClassCmdAdjustLocal* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdAdjustLocal__type( RogueClassCmdAdjustLocal* THIS )
{
  return (RogueClassType*)(THIS->local_info->_type);
}

void RogueCmdAdjustLocal__write_cpp__CPPWriter_Logical( RogueClassCmdAdjustLocal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (THIS->delta > 0)
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[203] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[4] );
  }
  RogueCPPWriter__print__String( writer_0, ((RogueLocal__cpp_name( THIS->local_info ))) );
}

void RogueCmdAdjustLocal__trace_used_code( RogueClassCmdAdjustLocal* THIS )
{
  RogueType__trace_used_code( THIS->local_info->_type );
}

void RogueCmdAdjustLocal__update_this_type__Scope( RogueClassCmdAdjustLocal* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdAdjustLocal* RogueCmdAdjustLocal__init_object( RogueClassCmdAdjustLocal* THIS )
{
  return (RogueClassCmdAdjustLocal*)(THIS);
}

RogueClassCmdAdjustLocal* RogueCmdAdjustLocal__init__Token_Local_Int32( RogueClassCmdAdjustLocal* THIS, RogueClassToken* _auto_1312_0, RogueClassLocal* _auto_1313_1, RogueInt32 _auto_1314_2 )
{
  THIS->delta = _auto_1314_2;
  THIS->local_info = _auto_1313_1;
  THIS->t = _auto_1312_0;
  return (RogueClassCmdAdjustLocal*)(THIS);
}

RogueString* RogueCmdReadLocal__type_name( RogueClassCmdReadLocal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[813]);
}

RogueClassCmd* RogueCmdReadLocal__clone__CloneArgs( RogueClassCmdReadLocal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassMacroArgs* macro_args_1 = (((RogueClassMacroArgs*)(RogueObject_as(clone_args_0,RogueTypeMacroArgs))));
  if (!!(macro_args_1))
  {
    return (RogueClassCmd*)(((RogueMacroArgs__inline_read_local__CmdReadLocal( macro_args_1, THIS ))));
  }
  else
  {
    RogueClassTaskArgs* task_args_2 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
    if (!!(task_args_2))
    {
      return (RogueClassCmd*)(((RogueTaskArgs__cmd_read__Token_Local( task_args_2, THIS->t, THIS->local_info ))));
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, THIS->local_info ))))));
}

RogueClassCmd* RogueCmdReadLocal__resolve__Scope( RogueClassCmdReadLocal* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( THIS->local_info->_type, scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdReadLocal__resolve_adjust__Scope_Int32( RogueClassCmdReadLocal* THIS, RogueClassScope* scope_0, RogueInt32 delta_1 )
{
  return (RogueClassCmd*)(((RogueCmdAdjustLocal__resolve__Scope( ((RogueCmdAdjustLocal__init__Token_Local_Int32( ((RogueClassCmdAdjustLocal*)ROGUE_CREATE_OBJECT(CmdAdjustLocal)), THIS->t, THIS->local_info, delta_1 ))), scope_0 ))));
}

RogueClassType* Rogue_CmdReadLocal__type( RogueClassCmdReadLocal* THIS )
{
  return (RogueClassType*)(THIS->local_info->_type);
}

void RogueCmdReadLocal__write_cpp__CPPWriter_Logical( RogueClassCmdReadLocal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, ((RogueLocal__cpp_name( THIS->local_info ))) );
}

void RogueCmdReadLocal__trace_used_code( RogueClassCmdReadLocal* THIS )
{
  RogueType__trace_used_code( THIS->local_info->_type );
}

void RogueCmdReadLocal__update_this_type__Scope( RogueClassCmdReadLocal* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdReadLocal* RogueCmdReadLocal__init_object( RogueClassCmdReadLocal* THIS )
{
  return (RogueClassCmdReadLocal*)(THIS);
}

RogueClassCmdReadLocal* RogueCmdReadLocal__init__Token_Local( RogueClassCmdReadLocal* THIS, RogueClassToken* _auto_1315_0, RogueClassLocal* _auto_1316_1 )
{
  THIS->local_info = _auto_1316_1;
  THIS->t = _auto_1315_0;
  return (RogueClassCmdReadLocal*)(THIS);
}

RogueString* RogueCmdCompareLE__type_name( RogueClassCmdCompareLE* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1133]);
}

RogueClassCmd* RogueCmdCompareLE__clone__CloneArgs( RogueClassCmdCompareLE* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCompareLE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLE*)ROGUE_CREATE_OBJECT(CmdCompareLE))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

RogueClassCmd* RogueCmdCompareLE__combine_literal_operands__Type( RogueClassCmdCompareLE* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value <= ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value <= ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareLE* RogueCmdCompareLE__init_object( RogueClassCmdCompareLE* THIS )
{
  return (RogueClassCmdCompareLE*)(THIS);
}

RogueString* RogueCmdCompareLE__symbol( RogueClassCmdCompareLE* THIS )
{
  return (RogueString*)(Rogue_literal_strings[191]);
}

RogueClassCmd* RogueCmdCompareLE__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareLE* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  RogueClassCmd* cmd_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1100], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1098], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM245( 25, (RogueClassCmdBinary*)(((RogueClassCmdCompareNE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareNE*)ROGUE_CREATE_OBJECT(CmdCompareNE))), THIS->t, cmd_4, ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, 1 ))))) )))))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1101], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[1102], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[1103], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1100], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), true, false ))));
}

RogueString* RogueCmdRange__type_name( RogueClassCmdRange* THIS )
{
  return (RogueString*)(Rogue_literal_strings[814]);
}

RogueClassCmd* RogueCmdRange__resolve__Scope( RogueClassCmdRange* THIS, RogueClassScope* scope_0 )
{
  THIS->first = ((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->first), scope_0 )) )));
  THIS->last = ((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->last), scope_0 )) )));
  if (!!(THIS->step_size))
  {
    THIS->step_size = ((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->step_size), scope_0 )) )));
  }
  else
  {
    THIS->step_size = ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, (call_ROGUEM628( 35, (RogueClassCmdRange*)(THIS) )) )))));
  }
  RogueClassType* range_type_1 = (((RogueCmd__must_find_common_type__Type_Type( ((RogueClassCmd*)THIS), ((RogueCmd__must_find_common_type__Type_Type( ((RogueClassCmd*)THIS), (call_ROGUEM64( 29, (RogueClassCmd*)(THIS->first) )), (call_ROGUEM64( 29, (RogueClassCmd*)(THIS->last) )) ))), (call_ROGUEM64( 29, (RogueClassCmd*)(THIS->step_size) )) ))));
  return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[892] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(range_type_1)) ))) ))), Rogue_literal_strings[116] ))) ))), ((RogueCmdArgs__init__Cmd_Cmd_Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->first, THIS->last, THIS->step_size ))) ))), scope_0 ))));
}

void RogueCmdRange__trace_used_code( RogueClassCmdRange* THIS )
{
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->first) );
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->last) );
  if (!!(THIS->step_size))
  {
    call_ROGUEM63( 31, (RogueClassCmd*)(THIS->step_size) );
  }
}

void RogueCmdRange__update_this_type__Scope( RogueClassCmdRange* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->first), scope_0 );
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->last), scope_0 );
  if (!!(THIS->step_size))
  {
    call_ROGUEM60( 32, (RogueClassCmd*)(THIS->step_size), scope_0 );
  }
}

RogueClassCmdRange* RogueCmdRange__init_object( RogueClassCmdRange* THIS )
{
  return (RogueClassCmdRange*)(THIS);
}

RogueClassCmdRange* RogueCmdRange__init__Token_Cmd_Cmd_Cmd( RogueClassCmdRange* THIS, RogueClassToken* _auto_1317_0, RogueClassCmd* _auto_1318_1, RogueClassCmd* _auto_1319_2, RogueClassCmd* _auto_1320_3 )
{
  THIS->step_size = _auto_1320_3;
  THIS->last = _auto_1319_2;
  THIS->first = _auto_1318_1;
  THIS->t = _auto_1317_0;
  return (RogueClassCmdRange*)(THIS);
}

RogueInt32 RogueCmdRange__default_step_size( RogueClassCmdRange* THIS )
{
  return (RogueInt32)(1);
}

RogueString* RogueCmdLocalOpWithAssign__type_name( RogueClassCmdLocalOpWithAssign* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1091]);
}

RogueClassCmd* RogueCmdLocalOpWithAssign__clone__CloneArgs( RogueClassCmdLocalOpWithAssign* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if (!!(task_args_1))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdOpWithAssign__init__Token_Cmd_TokenType_Cmd( ((RogueClassCmdOpWithAssign*)ROGUE_CREATE_OBJECT(CmdOpWithAssign)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), THIS->t, task_args_1->_task_type ))))), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->local_info->name ))) ))), Rogue_literal_strings[406] ))), ((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], THIS->local_info->index ))) ))) ))) ))))), THIS->op, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->new_value), ((RogueClassCloneArgs*)(task_args_1)) )) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLocalOpWithAssign__init__Token_Local_TokenType_Cmd( ((RogueClassCmdLocalOpWithAssign*)ROGUE_CREATE_OBJECT(CmdLocalOpWithAssign)), THIS->t, THIS->local_info, THIS->op, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
  }
}

RogueClassCmd* RogueCmdLocalOpWithAssign__resolve__Scope( RogueClassCmdLocalOpWithAssign* THIS, RogueClassScope* scope_0 )
{
  if (((RogueType__is_reference( THIS->local_info->_type ))))
  {
    RogueString* m_name_1 = (((RogueString__operatorPLUS__String( Rogue_literal_strings[342], ((RogueTokenType__to_String( THIS->op ))) ))));
    if (!!(((RogueString_MethodListTable__get__String( THIS->local_info->_type->method_lookup_by_name, m_name_1 )))))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_Cmd( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, THIS->local_info ))))), m_name_1, THIS->new_value ))), scope_0 ))));
    }
    else
    {
      m_name_1 = ((RogueString*)((RogueString__leftmost__Int32( m_name_1, -1 ))));
      if (!!(((RogueString_MethodListTable__get__String( THIS->local_info->_type->method_lookup_by_name, m_name_1 )))))
      {
        return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ((RogueCmdWriteLocal__init__Token_Local_Cmd( ((RogueClassCmdWriteLocal*)ROGUE_CREATE_OBJECT(CmdWriteLocal)), THIS->t, THIS->local_info, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, THIS->local_info ))))), m_name_1, THIS->new_value ))))) ))), scope_0 ))));
      }
      else
      {
        RogueString* arg_type_2 = ((call_ROGUEM64( 29, (RogueClassCmd*)(THIS->new_value) ))->name);
        ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[893] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(THIS->local_info->_type)) ))) ))), Rogue_literal_strings[894] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], m_name_1 ))) ))), Rogue_literal_strings[895] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], arg_type_2 ))) ))), Rogue_literal_strings[896] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], m_name_1 ))) ))), Rogue_literal_strings[897] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], arg_type_2 ))) ))), Rogue_literal_strings[390] ))) ))) ))));
      }
    }
  }
  {
    RogueClassTokenType* _auto_2335_4 = (THIS->op);
    if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_2335_4), ((RogueObject*)(RogueTokenType_symbol_caret_equals)) ))))
    {
      return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ((RogueCmdWriteLocal__init__Token_Local_Cmd( ((RogueClassCmdWriteLocal*)ROGUE_CREATE_OBJECT(CmdWriteLocal)), THIS->t, THIS->local_info, ((RogueClassCmd*)(((RogueClassCmdPower*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdPower*)ROGUE_CREATE_OBJECT(CmdPower))), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, THIS->local_info ))))), THIS->new_value ))))))) ))), scope_0 ))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_2335_4), ((RogueObject*)(RogueTokenType_symbol_percent_equals)) ))))
    {
      return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ((RogueCmdWriteLocal__init__Token_Local_Cmd( ((RogueClassCmdWriteLocal*)ROGUE_CREATE_OBJECT(CmdWriteLocal)), THIS->t, THIS->local_info, ((RogueClassCmd*)(((RogueClassCmdMod*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMod*)ROGUE_CREATE_OBJECT(CmdMod))), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, THIS->local_info ))))), THIS->new_value ))))))) ))), scope_0 ))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_2335_4), ((RogueObject*)(RogueTokenType_symbol_dot_equals)) ))))
    {
      RogueClassCmdAccess* access_3 = (((RogueClassCmdAccess*)(RogueObject_as(THIS->new_value,RogueTypeCmdAccess))));
      if (!(!!(access_3)))
      {
        ROGUE_THROW(((RogueToken__error__String( THIS->new_value->t, Rogue_literal_strings[898] ))));
      }
      if (!!(access_3->context))
      {
        ROGUE_THROW(((RogueToken__error__String( access_3->t, Rogue_literal_strings[899] ))));
      }
      access_3->context = ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, THIS->local_info )))));
      return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ((RogueCmdWriteLocal__init__Token_Local_Cmd( ((RogueClassCmdWriteLocal*)ROGUE_CREATE_OBJECT(CmdWriteLocal)), THIS->t, THIS->local_info, ((RogueClassCmd*)(access_3)) ))), scope_0 ))));
    }
  }
  THIS->new_value = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)((call_ROGUEM56( 25, (RogueClassCmd*)(THIS->new_value), scope_0 ))), THIS->local_info->_type, scope_0 ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLocalOpWithAssign__type( RogueClassCmdLocalOpWithAssign* THIS )
{
  return (RogueClassType*)(THIS->local_info->_type);
}

void RogueCmdLocalOpWithAssign__write_cpp__CPPWriter_Logical( RogueClassCmdLocalOpWithAssign* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, ((RogueLocal__cpp_name( THIS->local_info ))) ))), Rogue_literal_strings[458] ))), ((RogueCmdResolvedOpWithAssign__cpp_symbol( ((RogueClassCmdResolvedOpWithAssign*)THIS) ))) ))), Rogue_literal_strings[458] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->new_value), writer_0, false );
}

void RogueCmdLocalOpWithAssign__trace_used_code( RogueClassCmdLocalOpWithAssign* THIS )
{
  RogueType__trace_used_code( THIS->local_info->_type );
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->new_value) );
}

void RogueCmdLocalOpWithAssign__update_this_type__Scope( RogueClassCmdLocalOpWithAssign* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->new_value), scope_0 );
}

RogueClassCmdLocalOpWithAssign* RogueCmdLocalOpWithAssign__init_object( RogueClassCmdLocalOpWithAssign* THIS )
{
  return (RogueClassCmdLocalOpWithAssign*)(THIS);
}

RogueClassCmdLocalOpWithAssign* RogueCmdLocalOpWithAssign__init__Token_Local_TokenType_Cmd( RogueClassCmdLocalOpWithAssign* THIS, RogueClassToken* _auto_1321_0, RogueClassLocal* _auto_1322_1, RogueClassTokenType* _auto_1323_2, RogueClassCmd* _auto_1324_3 )
{
  THIS->new_value = _auto_1324_3;
  THIS->op = _auto_1323_2;
  THIS->local_info = _auto_1322_1;
  THIS->t = _auto_1321_0;
  return (RogueClassCmdLocalOpWithAssign*)(THIS);
}

RogueString* RogueCmdResolvedOpWithAssign__type_name( RogueClassCmdResolvedOpWithAssign* THIS )
{
  return (RogueString*)(Rogue_literal_strings[815]);
}

RogueClassCmdResolvedOpWithAssign* RogueCmdResolvedOpWithAssign__init_object( RogueClassCmdResolvedOpWithAssign* THIS )
{
  return (RogueClassCmdResolvedOpWithAssign*)(THIS);
}

RogueString* RogueCmdResolvedOpWithAssign__symbol( RogueClassCmdResolvedOpWithAssign* THIS )
{
  if (((void*)THIS->op) == ((void*)RogueTokenType_symbol_tilde_equals))
  {
    return (RogueString*)(Rogue_literal_strings[177]);
  }
  return (RogueString*)(((RogueTokenType__to_String( THIS->op ))));
}

RogueString* RogueCmdResolvedOpWithAssign__cpp_symbol( RogueClassCmdResolvedOpWithAssign* THIS )
{
  return (RogueString*)(((RogueCmdResolvedOpWithAssign__symbol( THIS ))));
}

RogueString* RogueCmdRangeUpTo__type_name( RogueClassCmdRangeUpTo* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1089]);
}

RogueClassCmd* RogueCmdRangeUpTo__clone__CloneArgs( RogueClassCmdRangeUpTo* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdRangeUpTo*)(((RogueCmdRange__init__Token_Cmd_Cmd_Cmd( ((RogueClassCmdRange*)((RogueClassCmdRangeUpTo*)ROGUE_CREATE_OBJECT(CmdRangeUpTo))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->first), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->last), clone_args_0 )), ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->step_size, clone_args_0 ))) ))))))));
}

RogueClassCmdRangeUpTo* RogueCmdRangeUpTo__init_object( RogueClassCmdRangeUpTo* THIS )
{
  return (RogueClassCmdRangeUpTo*)(THIS);
}

RogueString* RogueCmdCompareGE__type_name( RogueClassCmdCompareGE* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1134]);
}

RogueClassCmd* RogueCmdCompareGE__clone__CloneArgs( RogueClassCmdCompareGE* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCompareGE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareGE*)ROGUE_CREATE_OBJECT(CmdCompareGE))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

RogueClassCmd* RogueCmdCompareGE__combine_literal_operands__Type( RogueClassCmdCompareGE* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value >= ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value >= ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareGE* RogueCmdCompareGE__init_object( RogueClassCmdCompareGE* THIS )
{
  return (RogueClassCmdCompareGE*)(THIS);
}

RogueString* RogueCmdCompareGE__symbol( RogueClassCmdCompareGE* THIS )
{
  return (RogueString*)(Rogue_literal_strings[189]);
}

RogueClassCmd* RogueCmdCompareGE__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareGE* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  RogueClassCmd* cmd_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1102], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1098], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM245( 25, (RogueClassCmdBinary*)(((RogueClassCmdCompareNE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareNE*)ROGUE_CREATE_OBJECT(CmdCompareNE))), THIS->t, cmd_4, ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, -1 ))))) )))))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1103], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[1100], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[1101], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1102], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), true, false ))));
}

RogueString* RogueCmdForEach__type_name( RogueClassCmdForEach* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1034]);
}

RogueClassCmd* RogueCmdForEach__clone__CloneArgs( RogueClassCmdForEach* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdForEach* result_1 = (((RogueCmdForEach__init__Token_String_String_Cmd_Cmd_CmdStatementList( ((RogueClassCmdForEach*)ROGUE_CREATE_OBJECT(CmdForEach)), THIS->t, THIS->control_var_name, THIS->index_var_name, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->collection), clone_args_0 )), ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->step_cmd, clone_args_0 ))), ((RogueClassCmdStatementList*)(NULL)) ))));
  call_ROGUEM207( 35, (RogueClassCmdControlStructure*)(result_1), ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_1));
  result_1->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 )));
  return (RogueClassCmd*)(((RogueClassCmd*)(result_1)));
}

RogueClassCmd* RogueCmdForEach__resolve__Scope( RogueClassCmdForEach* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->collection = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->collection), scope_0 ));
  RogueClassType* collection_type_1 = (((RogueType__organize__Scope( (call_ROGUEM64( 22, (RogueClassCmd*)(THIS->collection) )), scope_0 ))));
  RogueLogical has_count_2 = ((!!(((RogueType__find_property__String( collection_type_1, Rogue_literal_strings[848] )))) || !!(((RogueType__find_method__String( collection_type_1, Rogue_literal_strings[900] ))))));
  RogueClassMethod* m_at_3 = (((RogueType__find_method__String( collection_type_1, Rogue_literal_strings[901] ))));
  RogueClassMethod* m_get_4 = (((RogueType__find_method__String( collection_type_1, Rogue_literal_strings[902] ))));
  RogueLogical has_get_5 = ((!!(m_get_4) || !!(m_at_3)));
  RogueInt32 step_size_6 = (1);
  if (!!(THIS->step_cmd))
  {
    THIS->step_cmd = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->step_cmd), scope_0 ));
    RogueClassCmdLiteralInt32* literal_integer_cmd_7 = (((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->step_cmd,RogueTypeCmdLiteralInt32))));
    if (!!(literal_integer_cmd_7))
    {
      step_size_6 = ((RogueInt32)literal_integer_cmd_7->value);
    }
    else
    {
      ROGUE_THROW(((RogueToken__error__String( THIS->step_cmd->t, Rogue_literal_strings[903] ))));
    }
  }
  if ((has_count_2 && has_get_5))
  {
    if (!!(m_at_3))
    {
      m_get_4 = ((RogueClassMethod*)m_at_3);
    }
    THIS->collection = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->collection), scope_0 ));
    RogueClassLocal* collection_var_8 = (((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), (call_ROGUEM64( 22, (RogueClassCmd*)(THIS->collection) )), THIS->collection ))));
    if (!(!!(THIS->index_var_name)))
    {
      THIS->index_var_name = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
    }
    RogueClassLocal* index_var_9 = (((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, THIS->index_var_name, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32, ((RogueClassCmd*)(NULL)) ))));
    RogueClassCmd* last_cmd_10 = 0;
    if (step_size_6 >= 0)
    {
      index_var_9->initial_value = ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, 0 )))));
      last_cmd_10 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, collection_var_8 ))))), Rogue_literal_strings[848] ))))));
    }
    else
    {
      index_var_9->initial_value = ((RogueClassCmd*)(((RogueClassCmdSubtract*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdSubtract*)ROGUE_CREATE_OBJECT(CmdSubtract))), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, collection_var_8 ))))), Rogue_literal_strings[848] ))))), ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, 1 ))))) )))))));
      last_cmd_10 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, 0 ))))));
    }
    RogueClassLocal* control_var_11 = 0;
    if (!!(THIS->control_var_name))
    {
      control_var_11 = ((RogueClassLocal*)((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, THIS->control_var_name, ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
      control_var_11->initial_value = ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, collection_var_8 ))))), m_get_4->name, ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, index_var_9 ))))) ))) )))));
      RogueCmdList__insert__Cmd_Int32( ((RogueCmdList*)THIS->statements), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local_Logical( ((RogueClassCmdLocalDeclaration*)ROGUE_CREATE_OBJECT(CmdLocalDeclaration)), control_var_11->t, control_var_11, false ))))), 0 );
    }
    RogueClassCmd* modifier_12 = 0;
    if ((step_size_6 >= -1 && step_size_6 <= 1))
    {
      modifier_12 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Int32( ((RogueClassCmdAdjustLocal*)ROGUE_CREATE_OBJECT(CmdAdjustLocal)), THIS->t, index_var_9, step_size_6 ))))));
    }
    else if (step_size_6 >= 0)
    {
      modifier_12 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdOpWithAssign__init__Token_Cmd_TokenType_Cmd( ((RogueClassCmdOpWithAssign*)ROGUE_CREATE_OBJECT(CmdOpWithAssign)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, index_var_9->name ))))), RogueTokenType_symbol_plus_equals, ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, step_size_6 ))))) ))))));
    }
    else
    {
      modifier_12 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdOpWithAssign__init__Token_Cmd_TokenType_Cmd( ((RogueClassCmdOpWithAssign*)ROGUE_CREATE_OBJECT(CmdOpWithAssign)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, index_var_9->name ))))), RogueTokenType_symbol_minus_equals, ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, (-(step_size_6)) ))))) ))))));
    }
    RogueClassCmd* condition_13 = 0;
    if (step_size_6 >= 0)
    {
      condition_13 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCompareLT*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLT*)ROGUE_CREATE_OBJECT(CmdCompareLT))), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, index_var_9 ))))), last_cmd_10 ))))))));
    }
    else
    {
      condition_13 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCompareGE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareGE*)ROGUE_CREATE_OBJECT(CmdCompareGE))), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, index_var_9 ))))), last_cmd_10 ))))))));
    }
    RogueClassCmdGenericLoop* result_14 = (((RogueCmdGenericLoop__init__Token_Int32_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)ROGUE_CREATE_OBJECT(CmdGenericLoop)), THIS->t, 9, condition_13, THIS->statements, ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
    call_ROGUEM207( 35, (RogueClassCmdControlStructure*)(result_14), ((RogueClassCmdControlStructure*)(THIS)) );
    RogueCmdGenericLoop__add_control_var__Local( result_14, collection_var_8 );
    RogueCmdGenericLoop__add_control_var__Local( result_14, index_var_9 );
    RogueCmdGenericLoop__add_upkeep__Cmd( result_14, modifier_12 );
    RogueCmdControlStructureList__remove_last( scope_0->control_stack );
    return (RogueClassCmd*)(((RogueCmdGenericLoop__resolve__Scope( result_14, scope_0 ))));
  }
  else
  {
    RogueLogical has_another_15 = ((!!(((RogueType__find_property__String( collection_type_1, Rogue_literal_strings[904] )))) || !!(((RogueType__find_method__String( collection_type_1, Rogue_literal_strings[905] ))))));
    RogueClassMethod* m_read_16 = (((RogueType__find_method__String( collection_type_1, Rogue_literal_strings[906] ))));
    if ((!(has_another_15) || !(!!(m_read_16))))
    {
      ROGUE_THROW(((RogueToken__error__String( THIS->collection->t, Rogue_literal_strings[907] ))));
    }
    if (!(!!(m_read_16->_return_type)))
    {
      ROGUE_THROW(((RogueToken__error__String( THIS->collection->t, Rogue_literal_strings[908] ))));
    }
    if (!!(THIS->step_cmd))
    {
      ROGUE_THROW(((RogueToken__error__String( THIS->step_cmd->t, Rogue_literal_strings[909] ))));
    }
    RogueClassLocal* reader_var_17 = (((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), collection_type_1, THIS->collection ))));
    RogueClassLocal* index_var_18 = 0;
    if (!!(THIS->index_var_name))
    {
      index_var_18 = ((RogueClassLocal*)((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, THIS->index_var_name, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32, ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, 0 ))))) ))));
    }
    if (!!(THIS->control_var_name))
    {
      RogueClassLocal* control_var_19 = (((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, THIS->control_var_name, m_read_16->_return_type, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->collection->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->collection->t, reader_var_17->name ))))), Rogue_literal_strings[910] ))))) ))));
      RogueCmdList__insert__Cmd_Int32( ((RogueCmdList*)THIS->statements), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local_Logical( ((RogueClassCmdLocalDeclaration*)ROGUE_CREATE_OBJECT(CmdLocalDeclaration)), THIS->collection->t, control_var_19, false ))))), 0 );
    }
    else
    {
      RogueCmdList__insert__Cmd_Int32( ((RogueCmdList*)THIS->statements), ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->collection->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->collection->t, reader_var_17->name ))))), Rogue_literal_strings[910] ))))), 0 );
    }
    RogueClassToken* rt_20 = (reader_var_17->t);
    RogueClassCmdGenericLoop* cmd_loop_21 = (((RogueCmdGenericLoop__init__Token_Int32_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)ROGUE_CREATE_OBJECT(CmdGenericLoop)), THIS->t, 9, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), rt_20, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), rt_20, reader_var_17 ))))), Rogue_literal_strings[904] ))))), THIS->statements, ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
    call_ROGUEM207( 35, (RogueClassCmdControlStructure*)(cmd_loop_21), ((RogueClassCmdControlStructure*)(THIS)) );
    RogueCmdGenericLoop__add_control_var__Local( cmd_loop_21, reader_var_17 );
    if (!!(index_var_18))
    {
      RogueCmdGenericLoop__add_control_var__Local( cmd_loop_21, index_var_18 );
      RogueCmdGenericLoop__add_upkeep__Cmd( cmd_loop_21, ((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Int32( ((RogueClassCmdAdjustLocal*)ROGUE_CREATE_OBJECT(CmdAdjustLocal)), THIS->t, index_var_18, 1 ))))) );
    }
    RogueCmdControlStructureList__remove_last( scope_0->control_stack );
    return (RogueClassCmd*)(((RogueCmdGenericLoop__resolve__Scope( cmd_loop_21, scope_0 ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdForEach__trace_used_code( RogueClassCmdForEach* THIS )
{
  RogueCmdStatementList__trace_used_code( THIS->statements );
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->collection) );
  if (!!(THIS->step_cmd))
  {
    call_ROGUEM63( 31, (RogueClassCmd*)(THIS->step_cmd) );
  }
}

void RogueCmdForEach__update_this_type__Scope( RogueClassCmdForEach* THIS, RogueClassScope* scope_0 )
{
  RogueCmdStatementList__update_this_type__Scope( THIS->statements, scope_0 );
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->collection), scope_0 );
  if (!!(THIS->step_cmd))
  {
    call_ROGUEM60( 32, (RogueClassCmd*)(THIS->step_cmd), scope_0 );
  }
}

RogueClassCmdForEach* RogueCmdForEach__init_object( RogueClassCmdForEach* THIS )
{
  return (RogueClassCmdForEach*)(THIS);
}

RogueClassCmdForEach* RogueCmdForEach__init__Token_String_String_Cmd_Cmd_CmdStatementList( RogueClassCmdForEach* THIS, RogueClassToken* _auto_1325_0, RogueString* _auto_1326_1, RogueString* _auto_1327_2, RogueClassCmd* _auto_1328_3, RogueClassCmd* _auto_1329_4, RogueClassCmdStatementList* _auto_1330_5 )
{
  THIS->statements = _auto_1330_5;
  THIS->step_cmd = _auto_1329_4;
  THIS->collection = _auto_1328_3;
  THIS->index_var_name = _auto_1327_2;
  THIS->control_var_name = _auto_1326_1;
  THIS->t = _auto_1325_0;
  THIS->_control_type = 9;
  return (RogueClassCmdForEach*)(THIS);
}

RogueString* RogueCmdRangeDownTo__type_name( RogueClassCmdRangeDownTo* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1090]);
}

RogueClassCmd* RogueCmdRangeDownTo__clone__CloneArgs( RogueClassCmdRangeDownTo* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdRangeDownTo*)(((RogueCmdRange__init__Token_Cmd_Cmd_Cmd( ((RogueClassCmdRange*)((RogueClassCmdRangeDownTo*)ROGUE_CREATE_OBJECT(CmdRangeDownTo))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->first), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->last), clone_args_0 )), ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->step_size, clone_args_0 ))) ))))))));
}

RogueClassCmdRangeDownTo* RogueCmdRangeDownTo__init_object( RogueClassCmdRangeDownTo* THIS )
{
  return (RogueClassCmdRangeDownTo*)(THIS);
}

RogueInt32 RogueCmdRangeDownTo__default_step_size( RogueClassCmdRangeDownTo* THIS )
{
  return (RogueInt32)(-1);
}

RogueString* RogueCmdLogicalXor__type_name( RogueClassCmdLogicalXor* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1094]);
}

RogueClassCmd* RogueCmdLogicalXor__clone__CloneArgs( RogueClassCmdLogicalXor* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalXor*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdLogicalXor*)ROGUE_CREATE_OBJECT(CmdLogicalXor))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

RogueClassCmdLogicalXor* RogueCmdLogicalXor__init_object( RogueClassCmdLogicalXor* THIS )
{
  return (RogueClassCmdLogicalXor*)(THIS);
}

RogueString* RogueCmdLogicalXor__symbol( RogueClassCmdLogicalXor* THIS )
{
  return (RogueString*)(Rogue_literal_strings[170]);
}

RogueString* RogueCmdLogicalXor__cpp_symbol( RogueClassCmdLogicalXor* THIS )
{
  return (RogueString*)(Rogue_literal_strings[176]);
}

RogueLogical RogueCmdLogicalXor__combine_literal_operands__Logical_Logical( RogueClassCmdLogicalXor* THIS, RogueLogical a_0, RogueLogical b_1 )
{
  return (RogueLogical)((a_0 ^ b_1));
}

RogueString* RogueCmdBinaryLogical__type_name( RogueClassCmdBinaryLogical* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1047]);
}

RogueClassCmd* RogueCmdBinaryLogical__resolve__Scope( RogueClassCmdBinaryLogical* THIS, RogueClassScope* scope_0 )
{
  THIS->left = ((RogueCmd__require_logical__Scope( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->left), scope_0 )), scope_0 )));
  THIS->right = ((RogueCmd__require_logical__Scope( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->right), scope_0 )), scope_0 )));
  if (((call_ROGUEM61( 18, (RogueClassCmd*)(THIS->left) )) && (call_ROGUEM61( 18, (RogueClassCmd*)(THIS->right) ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, (call_ROGUEM666( 42, (RogueClassCmdBinaryLogical*)(THIS), ((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralLogical)))->value, ((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralLogical)))->value )) ))))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdBinaryLogical__type( RogueClassCmdBinaryLogical* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

RogueClassCmdBinaryLogical* RogueCmdBinaryLogical__init_object( RogueClassCmdBinaryLogical* THIS )
{
  return (RogueClassCmdBinaryLogical*)(THIS);
}

RogueClassCmd* RogueCmdBinaryLogical__resolve_operator_method__Scope_Type_Type( RogueClassCmdBinaryLogical* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
}

RogueLogical RogueCmdBinaryLogical__combine_literal_operands__Logical_Logical( RogueClassCmdBinaryLogical* THIS, RogueLogical a_0, RogueLogical b_1 )
{
  ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[333] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM664( 2, (RogueClassCmdBinaryLogical*)(THIS) )) ))) ))), Rogue_literal_strings[1048] ))) ))) ))));
}

RogueString* RogueCmdLogicalOr__type_name( RogueClassCmdLogicalOr* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1095]);
}

RogueClassCmd* RogueCmdLogicalOr__clone__CloneArgs( RogueClassCmdLogicalOr* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalOr*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdLogicalOr*)ROGUE_CREATE_OBJECT(CmdLogicalOr))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

RogueClassCmdLogicalOr* RogueCmdLogicalOr__init_object( RogueClassCmdLogicalOr* THIS )
{
  return (RogueClassCmdLogicalOr*)(THIS);
}

RogueString* RogueCmdLogicalOr__symbol( RogueClassCmdLogicalOr* THIS )
{
  return (RogueString*)(Rogue_literal_strings[165]);
}

RogueString* RogueCmdLogicalOr__cpp_symbol( RogueClassCmdLogicalOr* THIS )
{
  return (RogueString*)(Rogue_literal_strings[218]);
}

RogueLogical RogueCmdLogicalOr__combine_literal_operands__Logical_Logical( RogueClassCmdLogicalOr* THIS, RogueLogical a_0, RogueLogical b_1 )
{
  return (RogueLogical)((a_0 || b_1));
}

RogueString* RogueCmdLogicalAnd__type_name( RogueClassCmdLogicalAnd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1096]);
}

RogueClassCmd* RogueCmdLogicalAnd__clone__CloneArgs( RogueClassCmdLogicalAnd* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalAnd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdLogicalAnd*)ROGUE_CREATE_OBJECT(CmdLogicalAnd))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

RogueClassCmdLogicalAnd* RogueCmdLogicalAnd__init_object( RogueClassCmdLogicalAnd* THIS )
{
  return (RogueClassCmdLogicalAnd*)(THIS);
}

RogueString* RogueCmdLogicalAnd__symbol( RogueClassCmdLogicalAnd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[155]);
}

RogueString* RogueCmdLogicalAnd__cpp_symbol( RogueClassCmdLogicalAnd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1064]);
}

RogueLogical RogueCmdLogicalAnd__combine_literal_operands__Logical_Logical( RogueClassCmdLogicalAnd* THIS, RogueLogical a_0, RogueLogical b_1 )
{
  return (RogueLogical)((a_0 && b_1));
}

RogueString* RogueCmdCompareEQ__type_name( RogueClassCmdCompareEQ* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1135]);
}

RogueClassCmd* RogueCmdCompareEQ__clone__CloneArgs( RogueClassCmdCompareEQ* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCompareEQ*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)ROGUE_CREATE_OBJECT(CmdCompareEQ))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

RogueClassCmd* RogueCmdCompareEQ__combine_literal_operands__Type( RogueClassCmdCompareEQ* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value == ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value == ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareEQ* RogueCmdCompareEQ__init_object( RogueClassCmdCompareEQ* THIS )
{
  return (RogueClassCmdCompareEQ*)(THIS);
}

RogueLogical RogueCmdCompareEQ__requires_parens( RogueClassCmdCompareEQ* THIS )
{
  return (RogueLogical)(false);
}

RogueString* RogueCmdCompareEQ__symbol( RogueClassCmdCompareEQ* THIS )
{
  return (RogueString*)(Rogue_literal_strings[185]);
}

RogueClassCmd* RogueCmdCompareEQ__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareEQ* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  RogueClassCmd* cmd_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1099], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1098], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM245( 25, (RogueClassCmdBinary*)(((RogueClassCmdCompareEQ*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)ROGUE_CREATE_OBJECT(CmdCompareEQ))), THIS->t, cmd_4, ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, 0 ))))) )))))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1097], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[1099], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[1097], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1099], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), true, false ))));
}

RogueString* RogueCmdCompareIs__type_name( RogueClassCmdCompareIs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1136]);
}

RogueClassCmd* RogueCmdCompareIs__clone__CloneArgs( RogueClassCmdCompareIs* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCompareIs*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareIs*)ROGUE_CREATE_OBJECT(CmdCompareIs))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

void RogueCmdCompareIs__write_cpp__CPPWriter_Logical( RogueClassCmdCompareIs* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1051] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->left), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1052] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->right), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
}

RogueClassCmdCompareIs* RogueCmdCompareIs__init_object( RogueClassCmdCompareIs* THIS )
{
  return (RogueClassCmdCompareIs*)(THIS);
}

RogueClassCmd* RogueCmdCompareIs__resolve_for_types__Scope_Type_Type( RogueClassCmdCompareIs* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  if ((((RogueType__is_reference( left_type_1 ))) && ((RogueType__is_reference( right_type_2 )))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  else if ((((RogueType__is_primitive( left_type_1 ))) && ((RogueType__is_primitive( right_type_2 )))))
  {
    return (RogueClassCmd*)((call_ROGUEM245( 25, (RogueClassCmdBinary*)(((RogueClassCmdCompareEQ*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)ROGUE_CREATE_OBJECT(CmdCompareEQ))), THIS->t, THIS->left, THIS->right )))))), scope_0 )));
  }
  else if ((((RogueType__is_compound( left_type_1 ))) && ((RogueType__is_compound( right_type_2 )))))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[1087] ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, false ))))));
  }
}

RogueString* RogueCmdCompareIs__symbol( RogueClassCmdCompareIs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[131]);
}

RogueString* RogueCmdCompareIs__cpp_symbol( RogueClassCmdCompareIs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[185]);
}

RogueString* RogueCmdCompareIsNot__type_name( RogueClassCmdCompareIsNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1137]);
}

RogueClassCmd* RogueCmdCompareIsNot__clone__CloneArgs( RogueClassCmdCompareIsNot* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCompareIsNot*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareIsNot*)ROGUE_CREATE_OBJECT(CmdCompareIsNot))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

void RogueCmdCompareIsNot__write_cpp__CPPWriter_Logical( RogueClassCmdCompareIsNot* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1051] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->left), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1053] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->right), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
}

RogueClassCmdCompareIsNot* RogueCmdCompareIsNot__init_object( RogueClassCmdCompareIsNot* THIS )
{
  return (RogueClassCmdCompareIsNot*)(THIS);
}

RogueClassCmd* RogueCmdCompareIsNot__resolve_for_types__Scope_Type_Type( RogueClassCmdCompareIsNot* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  if ((((RogueType__is_reference( left_type_1 ))) && ((RogueType__is_reference( right_type_2 )))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  else if ((((RogueType__is_primitive( left_type_1 ))) && ((RogueType__is_primitive( right_type_2 )))))
  {
    return (RogueClassCmd*)((call_ROGUEM245( 25, (RogueClassCmdBinary*)(((RogueClassCmdCompareEQ*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)ROGUE_CREATE_OBJECT(CmdCompareEQ))), THIS->t, THIS->left, THIS->right )))))), scope_0 )));
  }
  else if ((((RogueType__is_compound( left_type_1 ))) && ((RogueType__is_compound( right_type_2 )))))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[1087] ))));
  }
  else
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[1088] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(left_type_1)) ))) ))), Rogue_literal_strings[364] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(right_type_2)) ))) ))), Rogue_literal_strings[51] ))) ))) ))));
  }
}

RogueString* RogueCmdCompareIsNot__symbol( RogueClassCmdCompareIsNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[132]);
}

RogueString* RogueCmdCompareIsNot__cpp_symbol( RogueClassCmdCompareIsNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[195]);
}

RogueString* RogueCmdCompareLT__type_name( RogueClassCmdCompareLT* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1138]);
}

RogueClassCmd* RogueCmdCompareLT__clone__CloneArgs( RogueClassCmdCompareLT* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCompareLT*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLT*)ROGUE_CREATE_OBJECT(CmdCompareLT))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

RogueClassCmd* RogueCmdCompareLT__combine_literal_operands__Type( RogueClassCmdCompareLT* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value < ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value < ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareLT* RogueCmdCompareLT__init_object( RogueClassCmdCompareLT* THIS )
{
  return (RogueClassCmdCompareLT*)(THIS);
}

RogueString* RogueCmdCompareLT__symbol( RogueClassCmdCompareLT* THIS )
{
  return (RogueString*)(Rogue_literal_strings[192]);
}

RogueClassCmd* RogueCmdCompareLT__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareLT* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  RogueClassCmd* cmd_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1103], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1098], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM245( 25, (RogueClassCmdBinary*)(((RogueClassCmdCompareEQ*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)ROGUE_CREATE_OBJECT(CmdCompareEQ))), THIS->t, cmd_4, ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, -1 ))))) )))))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1102], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[1101], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[1100], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1103], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), true, false ))));
}

RogueString* RogueCmdCompareGT__type_name( RogueClassCmdCompareGT* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1139]);
}

RogueClassCmd* RogueCmdCompareGT__clone__CloneArgs( RogueClassCmdCompareGT* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCompareGT*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareGT*)ROGUE_CREATE_OBJECT(CmdCompareGT))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

RogueClassCmd* RogueCmdCompareGT__combine_literal_operands__Type( RogueClassCmdCompareGT* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value > ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value > ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareGT* RogueCmdCompareGT__init_object( RogueClassCmdCompareGT* THIS )
{
  return (RogueClassCmdCompareGT*)(THIS);
}

RogueString* RogueCmdCompareGT__symbol( RogueClassCmdCompareGT* THIS )
{
  return (RogueString*)(Rogue_literal_strings[190]);
}

RogueClassCmd* RogueCmdCompareGT__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareGT* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  RogueClassCmd* cmd_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1101], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1098], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM245( 25, (RogueClassCmdBinary*)(((RogueClassCmdCompareEQ*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)ROGUE_CREATE_OBJECT(CmdCompareEQ))), THIS->t, cmd_4, ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, 1 ))))) )))))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1100], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[1103], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[1102], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[1101], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), true, false ))));
}

RogueString* RogueCmdInstanceOf__type_name( RogueClassCmdInstanceOf* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1076]);
}

RogueClassCmd* RogueCmdInstanceOf__clone__CloneArgs( RogueClassCmdInstanceOf* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdInstanceOf*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdInstanceOf*)ROGUE_CREATE_OBJECT(CmdInstanceOf))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->operand), clone_args_0 )), THIS->_target_type ))))))));
}

RogueClassCmd* RogueCmdInstanceOf__resolve__Scope( RogueClassCmdInstanceOf* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->operand), scope_0 ));
  RogueType__organize__Scope( THIS->_target_type, scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdInstanceOf__type( RogueClassCmdInstanceOf* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

void RogueCmdInstanceOf__write_cpp__CPPWriter_Logical( RogueClassCmdInstanceOf* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[970] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->operand), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[179] );
  RogueCPPWriter__print_type_info__Type( writer_0, THIS->_target_type );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
}

RogueClassCmdInstanceOf* RogueCmdInstanceOf__init_object( RogueClassCmdInstanceOf* THIS )
{
  return (RogueClassCmdInstanceOf*)(THIS);
}

RogueString* RogueCmdLogicalNot__type_name( RogueClassCmdLogicalNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1080]);
}

RogueClassCmd* RogueCmdLogicalNot__clone__CloneArgs( RogueClassCmdLogicalNot* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->operand), clone_args_0 )) ))))))));
}

RogueClassCmd* RogueCmdLogicalNot__resolve__Scope( RogueClassCmdLogicalNot* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = ((RogueCmd__require_logical__Scope( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->operand), scope_0 )), scope_0 )));
  if ((call_ROGUEM61( 18, (RogueClassCmd*)(THIS->operand) )))
  {
    return (RogueClassCmd*)(((RogueCmdLogicalNot__resolve_for_literal_operand__Scope( THIS, scope_0 ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueCmdUnary__resolve_for_operand_type__Scope_Type( ((RogueClassCmdUnary*)THIS), scope_0, (call_ROGUEM64( 22, (RogueClassCmd*)(THIS->operand) )) ))));
  }
}

RogueClassType* Rogue_CmdLogicalNot__type( RogueClassCmdLogicalNot* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

RogueClassCmdLogicalNot* RogueCmdLogicalNot__init_object( RogueClassCmdLogicalNot* THIS )
{
  return (RogueClassCmdLogicalNot*)(THIS);
}

RogueString* RogueCmdLogicalNot__prefix_symbol( RogueClassCmdLogicalNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1083]);
}

RogueClassCmd* RogueCmdLogicalNot__resolve_for_literal_operand__Scope( RogueClassCmdLogicalNot* THIS, RogueClassScope* scope_0 )
{
  if (RogueObject_instance_of(THIS->operand,RogueTypeCmdLiteralReal64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, !(!!(((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->operand,RogueTypeCmdLiteralReal64)))->value)) ))))));
  }
  else if (RogueObject_instance_of(THIS->operand,RogueTypeCmdLiteralInt32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, !(!!(((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->operand,RogueTypeCmdLiteralInt32)))->value)) ))))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdLogicalNot__cpp_prefix_symbol( RogueClassCmdLogicalNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[187]);
}

RogueString* RogueCmdBitwiseXor__type_name( RogueClassCmdBitwiseXor* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1104]);
}

RogueClassCmd* RogueCmdBitwiseXor__clone__CloneArgs( RogueClassCmdBitwiseXor* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdBitwiseXor*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseXor*)ROGUE_CREATE_OBJECT(CmdBitwiseXor))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

RogueClassCmd* RogueCmdBitwiseXor__combine_literal_operands__Type( RogueClassCmdBitwiseXor* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, (((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value ^ ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, (((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralLogical)))->value ^ ((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralLogical)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdBitwiseXor* RogueCmdBitwiseXor__init_object( RogueClassCmdBitwiseXor* THIS )
{
  return (RogueClassCmdBitwiseXor*)(THIS);
}

RogueString* RogueCmdBitwiseXor__symbol( RogueClassCmdBitwiseXor* THIS )
{
  return (RogueString*)(Rogue_literal_strings[210]);
}

RogueString* RogueCmdBitwiseXor__cpp_symbol( RogueClassCmdBitwiseXor* THIS )
{
  return (RogueString*)(Rogue_literal_strings[176]);
}

RogueString* RogueCmdBitwiseOp__type_name( RogueClassCmdBitwiseOp* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1067]);
}

RogueClassCmdBitwiseOp* RogueCmdBitwiseOp__init_object( RogueClassCmdBitwiseOp* THIS )
{
  return (RogueClassCmdBitwiseOp*)(THIS);
}

RogueClassCmd* RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type( RogueClassCmdBitwiseOp* THIS, RogueClassScope* scope_0, RogueClassType* common_type_1 )
{
  if (((((void*)common_type_1) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte) || ((void*)common_type_1) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character)) || ((void*)common_type_1) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32)))
  {
    THIS->left = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)(THIS->left), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32, scope_0 ))), scope_0 ));
    THIS->right = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)(THIS->right), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32, scope_0 ))), scope_0 ));
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  if (((void*)common_type_1) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int64))
  {
    THIS->left = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)(THIS->left), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int64, scope_0 ))), scope_0 ));
    THIS->right = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)(THIS->right), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int64, scope_0 ))), scope_0 ));
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[1062] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM251( 40, (RogueClassCmdBinary*)(THIS) )) ))) ))), Rogue_literal_strings[1063] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(common_type_1)) ))) ))), Rogue_literal_strings[51] ))) ))) ))));
}

RogueClassCmd* RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type( RogueClassCmdBitwiseOp* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
}

RogueString* RogueCmdBitwiseOr__type_name( RogueClassCmdBitwiseOr* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1105]);
}

RogueClassCmd* RogueCmdBitwiseOr__clone__CloneArgs( RogueClassCmdBitwiseOr* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdBitwiseOr*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseOr*)ROGUE_CREATE_OBJECT(CmdBitwiseOr))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

RogueClassCmd* RogueCmdBitwiseOr__combine_literal_operands__Type( RogueClassCmdBitwiseOr* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, (((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value | ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, (((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralLogical)))->value || ((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralLogical)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdBitwiseOr* RogueCmdBitwiseOr__init_object( RogueClassCmdBitwiseOr* THIS )
{
  return (RogueClassCmdBitwiseOr*)(THIS);
}

RogueString* RogueCmdBitwiseOr__symbol( RogueClassCmdBitwiseOr* THIS )
{
  return (RogueString*)(Rogue_literal_strings[216]);
}

RogueString* RogueCmdBitwiseAnd__type_name( RogueClassCmdBitwiseAnd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1106]);
}

RogueClassCmd* RogueCmdBitwiseAnd__clone__CloneArgs( RogueClassCmdBitwiseAnd* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdBitwiseAnd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseAnd*)ROGUE_CREATE_OBJECT(CmdBitwiseAnd))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

RogueClassCmd* RogueCmdBitwiseAnd__combine_literal_operands__Type( RogueClassCmdBitwiseAnd* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, (((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value & ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, (((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralLogical)))->value && ((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralLogical)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdBitwiseAnd* RogueCmdBitwiseAnd__init_object( RogueClassCmdBitwiseAnd* THIS )
{
  return (RogueClassCmdBitwiseAnd*)(THIS);
}

RogueString* RogueCmdBitwiseAnd__symbol( RogueClassCmdBitwiseAnd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[171]);
}

RogueString* RogueCmdBitwiseShiftLeft__type_name( RogueClassCmdBitwiseShiftLeft* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1107]);
}

RogueClassCmd* RogueCmdBitwiseShiftLeft__clone__CloneArgs( RogueClassCmdBitwiseShiftLeft* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdBitwiseShiftLeft*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseShiftLeft*)ROGUE_CREATE_OBJECT(CmdBitwiseShiftLeft))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

RogueClassCmd* RogueCmdBitwiseShiftLeft__combine_literal_operands__Type( RogueClassCmdBitwiseShiftLeft* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, (((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value << ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdBitwiseShiftLeft* RogueCmdBitwiseShiftLeft__init_object( RogueClassCmdBitwiseShiftLeft* THIS )
{
  return (RogueClassCmdBitwiseShiftLeft*)(THIS);
}

RogueString* RogueCmdBitwiseShiftLeft__symbol( RogueClassCmdBitwiseShiftLeft* THIS )
{
  return (RogueString*)(Rogue_literal_strings[206]);
}

RogueString* RogueCmdBitwiseShiftLeft__cpp_symbol( RogueClassCmdBitwiseShiftLeft* THIS )
{
  return (RogueString*)(Rogue_literal_strings[198]);
}

RogueString* RogueCmdBitwiseShiftRight__type_name( RogueClassCmdBitwiseShiftRight* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1108]);
}

RogueClassCmd* RogueCmdBitwiseShiftRight__clone__CloneArgs( RogueClassCmdBitwiseShiftRight* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdBitwiseShiftRight*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseShiftRight*)ROGUE_CREATE_OBJECT(CmdBitwiseShiftRight))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

RogueClassCmd* RogueCmdBitwiseShiftRight__combine_literal_operands__Type( RogueClassCmdBitwiseShiftRight* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, (((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value << ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmd* RogueCmdBitwiseShiftRight__resolve__Scope( RogueClassCmdBitwiseShiftRight* THIS, RogueClassScope* scope_0 )
{
  RogueClassCmd* result_1 = ((RogueCmdBinary__resolve__Scope( ((RogueClassCmdBinary*)THIS), scope_0 )));
  RogueClassCmdBitwiseShiftRight* cmd_shift_2 = (((RogueClassCmdBitwiseShiftRight*)(RogueObject_as(result_1,RogueTypeCmdBitwiseShiftRight))));
  if (!(!!(cmd_shift_2)))
  {
    return (RogueClassCmd*)(result_1);
  }
  return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, Rogue_literal_strings[606] ))))), Rogue_literal_strings[1049], ((RogueCmdArgs__init__Cmd_Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), cmd_shift_2->left, cmd_shift_2->right ))) ))), scope_0 ))));
}

RogueClassCmdBitwiseShiftRight* RogueCmdBitwiseShiftRight__init_object( RogueClassCmdBitwiseShiftRight* THIS )
{
  return (RogueClassCmdBitwiseShiftRight*)(THIS);
}

RogueString* RogueCmdBitwiseShiftRight__symbol( RogueClassCmdBitwiseShiftRight* THIS )
{
  return (RogueString*)(Rogue_literal_strings[207]);
}

RogueString* RogueCmdBitwiseShiftRightX__type_name( RogueClassCmdBitwiseShiftRightX* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1109]);
}

RogueClassCmd* RogueCmdBitwiseShiftRightX__clone__CloneArgs( RogueClassCmdBitwiseShiftRightX* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdBitwiseShiftRightX*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseShiftRightX*)ROGUE_CREATE_OBJECT(CmdBitwiseShiftRightX))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

RogueClassCmd* RogueCmdBitwiseShiftRightX__combine_literal_operands__Type( RogueClassCmdBitwiseShiftRightX* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, (((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value << ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdBitwiseShiftRightX* RogueCmdBitwiseShiftRightX__init_object( RogueClassCmdBitwiseShiftRightX* THIS )
{
  return (RogueClassCmdBitwiseShiftRightX*)(THIS);
}

RogueString* RogueCmdBitwiseShiftRightX__symbol( RogueClassCmdBitwiseShiftRightX* THIS )
{
  return (RogueString*)(Rogue_literal_strings[208]);
}

RogueString* RogueCmdBitwiseShiftRightX__cpp_symbol( RogueClassCmdBitwiseShiftRightX* THIS )
{
  return (RogueString*)(Rogue_literal_strings[116]);
}

RogueString* RogueCmdSubtract__type_name( RogueClassCmdSubtract* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1068]);
}

RogueClassCmd* RogueCmdSubtract__clone__CloneArgs( RogueClassCmdSubtract* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdSubtract*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdSubtract*)ROGUE_CREATE_OBJECT(CmdSubtract))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

RogueClassCmd* RogueCmdSubtract__combine_literal_operands__Type( RogueClassCmdSubtract* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ((RogueClassCmdLiteralReal64*)ROGUE_CREATE_OBJECT(CmdLiteralReal64)), THIS->t, (((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value - ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, (((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value - ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdSubtract* RogueCmdSubtract__init_object( RogueClassCmdSubtract* THIS )
{
  return (RogueClassCmdSubtract*)(THIS);
}

RogueString* RogueCmdSubtract__fn_name( RogueClassCmdSubtract* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1057]);
}

RogueString* RogueCmdSubtract__symbol( RogueClassCmdSubtract* THIS )
{
  return (RogueString*)(Rogue_literal_strings[193]);
}

RogueString* RogueCmdMultiply__type_name( RogueClassCmdMultiply* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1069]);
}

RogueClassCmd* RogueCmdMultiply__clone__CloneArgs( RogueClassCmdMultiply* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdMultiply*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMultiply*)ROGUE_CREATE_OBJECT(CmdMultiply))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

RogueClassCmd* RogueCmdMultiply__combine_literal_operands__Type( RogueClassCmdMultiply* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ((RogueClassCmdLiteralReal64*)ROGUE_CREATE_OBJECT(CmdLiteralReal64)), THIS->t, (((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value * ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, (((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value * ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdMultiply* RogueCmdMultiply__init_object( RogueClassCmdMultiply* THIS )
{
  return (RogueClassCmdMultiply*)(THIS);
}

RogueString* RogueCmdMultiply__fn_name( RogueClassCmdMultiply* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1058]);
}

RogueString* RogueCmdMultiply__symbol( RogueClassCmdMultiply* THIS )
{
  return (RogueString*)(Rogue_literal_strings[212]);
}

RogueString* RogueCmdDivide__type_name( RogueClassCmdDivide* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1070]);
}

RogueClassCmd* RogueCmdDivide__clone__CloneArgs( RogueClassCmdDivide* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdDivide*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdDivide*)ROGUE_CREATE_OBJECT(CmdDivide))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

RogueClassCmd* RogueCmdDivide__combine_literal_operands__Type( RogueClassCmdDivide* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ((RogueClassCmdLiteralReal64*)ROGUE_CREATE_OBJECT(CmdLiteralReal64)), THIS->t, (((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value / ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, (((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value / ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdDivide* RogueCmdDivide__init_object( RogueClassCmdDivide* THIS )
{
  return (RogueClassCmdDivide*)(THIS);
}

RogueString* RogueCmdDivide__fn_name( RogueClassCmdDivide* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1059]);
}

RogueString* RogueCmdDivide__symbol( RogueClassCmdDivide* THIS )
{
  return (RogueString*)(Rogue_literal_strings[48]);
}

RogueString* RogueCmdMod__type_name( RogueClassCmdMod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1071]);
}

RogueClassCmd* RogueCmdMod__clone__CloneArgs( RogueClassCmdMod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdMod*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMod*)ROGUE_CREATE_OBJECT(CmdMod))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

RogueClassCmd* RogueCmdMod__combine_literal_operands__Type( RogueClassCmdMod* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ((RogueClassCmdLiteralReal64*)ROGUE_CREATE_OBJECT(CmdLiteralReal64)), THIS->t, (RogueMath__mod__Real64_Real64( ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value, ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value )) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, (RogueMath__mod__Int32_Int32( ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value, ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value )) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmd* RogueCmdMod__resolve__Scope( RogueClassCmdMod* THIS, RogueClassScope* scope_0 )
{
  RogueClassCmd* result_1 = ((RogueCmdBinary__resolve__Scope( ((RogueClassCmdBinary*)THIS), scope_0 )));
  if ((call_ROGUEM61( 18, (RogueClassCmd*)(result_1) )))
  {
    return (RogueClassCmd*)(result_1);
  }
  RogueClassCmdMod* cmd_mod_2 = (((RogueClassCmdMod*)(RogueObject_as(result_1,RogueTypeCmdMod))));
  if (!(!!(cmd_mod_2)))
  {
    return (RogueClassCmd*)(result_1);
  }
  return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, Rogue_literal_strings[606] ))))), Rogue_literal_strings[1050], ((RogueCmdArgs__init__Cmd_Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), cmd_mod_2->left, cmd_mod_2->right ))) ))), scope_0 ))));
}

RogueClassCmdMod* RogueCmdMod__init_object( RogueClassCmdMod* THIS )
{
  return (RogueClassCmdMod*)(THIS);
}

RogueString* RogueCmdMod__fn_name( RogueClassCmdMod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1060]);
}

RogueString* RogueCmdMod__symbol( RogueClassCmdMod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[199]);
}

RogueString* RogueCmdPower__type_name( RogueClassCmdPower* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1072]);
}

RogueClassCmd* RogueCmdPower__clone__CloneArgs( RogueClassCmdPower* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdPower*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdPower*)ROGUE_CREATE_OBJECT(CmdPower))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))))));
}

RogueClassCmd* RogueCmdPower__combine_literal_operands__Type( RogueClassCmdPower* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ((RogueClassCmdLiteralReal64*)ROGUE_CREATE_OBJECT(CmdLiteralReal64)), THIS->t, ((RogueReal64) pow((double)((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value, (double)((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value)) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, ((RogueInt32) pow((double)((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value, (double)((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value)) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

void RogueCmdPower__write_cpp__CPPWriter_Logical( RogueClassCmdPower* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[505] ))), (call_ROGUEM64( 29, (RogueClassCmd*)(THIS->left) )) ))), Rogue_literal_strings[1054] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->left), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1055] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->right), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[462] );
}

RogueClassCmdPower* RogueCmdPower__init_object( RogueClassCmdPower* THIS )
{
  return (RogueClassCmdPower*)(THIS);
}

RogueString* RogueCmdPower__fn_name( RogueClassCmdPower* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1061]);
}

RogueString* RogueCmdPower__symbol( RogueClassCmdPower* THIS )
{
  return (RogueString*)(Rogue_literal_strings[176]);
}

RogueString* RogueCmdNegate__type_name( RogueClassCmdNegate* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1081]);
}

RogueClassCmd* RogueCmdNegate__clone__CloneArgs( RogueClassCmdNegate* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdNegate*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdNegate*)ROGUE_CREATE_OBJECT(CmdNegate))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->operand), clone_args_0 )) ))))))));
}

RogueClassType* RogueCmdNegate__implicit_type__Scope( RogueClassCmdNegate* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassType*)((call_ROGUEM62( 17, (RogueClassCmd*)(THIS->operand), scope_0 )));
}

RogueClassCmdNegate* RogueCmdNegate__init_object( RogueClassCmdNegate* THIS )
{
  return (RogueClassCmdNegate*)(THIS);
}

RogueString* RogueCmdNegate__prefix_symbol( RogueClassCmdNegate* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1084]);
}

RogueString* RogueCmdNegate__fn_name( RogueClassCmdNegate* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1057]);
}

RogueClassCmd* RogueCmdNegate__resolve_for_literal_operand__Scope( RogueClassCmdNegate* THIS, RogueClassScope* scope_0 )
{
  if (RogueObject_instance_of(THIS->operand,RogueTypeCmdLiteralReal64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ((RogueClassCmdLiteralReal64*)ROGUE_CREATE_OBJECT(CmdLiteralReal64)), THIS->t, (-(((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->operand,RogueTypeCmdLiteralReal64)))->value)) ))))));
  }
  else if (RogueObject_instance_of(THIS->operand,RogueTypeCmdLiteralInt32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, (-(((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->operand,RogueTypeCmdLiteralInt32)))->value)) ))))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdNegate__suffix_symbol( RogueClassCmdNegate* THIS )
{
  return (RogueString*)(Rogue_literal_strings[67]);
}

RogueString* RogueCmdBitwiseNot__type_name( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1082]);
}

RogueClassCmd* RogueCmdBitwiseNot__clone__CloneArgs( RogueClassCmdBitwiseNot* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdBitwiseNot*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdBitwiseNot*)ROGUE_CREATE_OBJECT(CmdBitwiseNot))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->operand), clone_args_0 )) ))))))));
}

RogueClassType* Rogue_CmdBitwiseNot__type( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueClassType*)((call_ROGUEM64( 29, (RogueClassCmd*)(THIS->operand) )));
}

RogueClassCmdBitwiseNot* RogueCmdBitwiseNot__init_object( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueClassCmdBitwiseNot*)(THIS);
}

RogueString* RogueCmdBitwiseNot__prefix_symbol( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[187]);
}

RogueString* RogueCmdBitwiseNot__fn_name( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1086]);
}

RogueClassCmd* RogueCmdBitwiseNot__resolve_for_literal_operand__Scope( RogueClassCmdBitwiseNot* THIS, RogueClassScope* scope_0 )
{
  if (RogueObject_instance_of(THIS->operand,RogueTypeCmdLiteralInt32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, ~(((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->operand,RogueTypeCmdLiteralInt32)))->value) ))))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdBitwiseNot__cpp_prefix_symbol( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[210]);
}

RogueString* RogueCmdGetOptionalValue__type_name( RogueClassCmdGetOptionalValue* THIS )
{
  return (RogueString*)(Rogue_literal_strings[816]);
}

RogueClassCmd* RogueCmdGetOptionalValue__clone__CloneArgs( RogueClassCmdGetOptionalValue* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdGetOptionalValue__init__Token_Cmd( ((RogueClassCmdGetOptionalValue*)ROGUE_CREATE_OBJECT(CmdGetOptionalValue)), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->value), clone_args_0 )) ))))));
}

RogueClassCmdGetOptionalValue* RogueCmdGetOptionalValue__resolve__Scope( RogueClassCmdGetOptionalValue* THIS, RogueClassScope* scope_0 )
{
  THIS->value = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->value), scope_0 ));
  if (!((call_ROGUEM64( 22, (RogueClassCmd*)(THIS->value) ))->is_optional))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[911] ))));
  }
  return (RogueClassCmdGetOptionalValue*)(THIS);
}

RogueClassType* Rogue_CmdGetOptionalValue__type( RogueClassCmdGetOptionalValue* THIS )
{
  return (RogueClassType*)((call_ROGUEM64( 29, (RogueClassCmd*)(THIS->value) ))->_element_type);
}

void RogueCmdGetOptionalValue__write_cpp__CPPWriter_Logical( RogueClassCmdGetOptionalValue* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->value), writer_0, false );
  if (!(((RogueType__is_reference( (call_ROGUEM64( 29, (RogueClassCmd*)(THIS->value) ))->_element_type )))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[971] );
  }
}

void RogueCmdGetOptionalValue__trace_used_code( RogueClassCmdGetOptionalValue* THIS )
{
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->value) );
}

void RogueCmdGetOptionalValue__update_this_type__Scope( RogueClassCmdGetOptionalValue* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->value), scope_0 );
}

RogueClassCmdGetOptionalValue* RogueCmdGetOptionalValue__init_object( RogueClassCmdGetOptionalValue* THIS )
{
  return (RogueClassCmdGetOptionalValue*)(THIS);
}

RogueClassCmdGetOptionalValue* RogueCmdGetOptionalValue__init__Token_Cmd( RogueClassCmdGetOptionalValue* THIS, RogueClassToken* _auto_1331_0, RogueClassCmd* _auto_1332_1 )
{
  THIS->value = _auto_1332_1;
  THIS->t = _auto_1331_0;
  return (RogueClassCmdGetOptionalValue*)(THIS);
}

RogueString* RogueCmdElementAccess__type_name( RogueClassCmdElementAccess* THIS )
{
  return (RogueString*)(Rogue_literal_strings[817]);
}

RogueClassCmd* RogueCmdElementAccess__clone__CloneArgs( RogueClassCmdElementAccess* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdElementAccess__init__Token_Cmd_Cmd( ((RogueClassCmdElementAccess*)ROGUE_CREATE_OBJECT(CmdElementAccess)), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->context), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->index), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdElementAccess__resolve__Scope( RogueClassCmdElementAccess* THIS, RogueClassScope* scope_0 )
{
  THIS->context = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->context), scope_0 ));
  RogueClassType* context_type_1 = ((call_ROGUEM64( 22, (RogueClassCmd*)(THIS->context) )));
  RogueType__organize__Scope( context_type_1, scope_0 );
  if (context_type_1->is_array)
  {
    return (RogueClassCmd*)(((RogueCmdReadArrayElement__resolve__Scope( ((RogueCmdReadArrayElement__init__Token_Cmd_Cmd( ((RogueClassCmdReadArrayElement*)ROGUE_CREATE_OBJECT(CmdReadArrayElement)), THIS->t, THIS->context, THIS->index ))), scope_0 ))));
  }
  else
  {
    RogueClassCmdArgs* args_2 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))));
    RogueCmdList__add__Cmd( ((RogueCmdList*)args_2), THIS->index );
    return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->context, Rogue_literal_strings[912], args_2 ))), true, false ))));
  }
}

RogueClassCmd* RogueCmdElementAccess__resolve_assignment__Scope_Cmd( RogueClassCmdElementAccess* THIS, RogueClassScope* scope_0, RogueClassCmd* new_value_1 )
{
  THIS->context = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->context), scope_0 ));
  RogueClassType* context_type_2 = ((call_ROGUEM64( 22, (RogueClassCmd*)(THIS->context) )));
  RogueType__organize__Scope( context_type_2, scope_0 );
  if (context_type_2->is_array)
  {
    return (RogueClassCmd*)(((RogueCmdWriteArrayElement__resolve__Scope( ((RogueCmdWriteArrayElement__init__Token_Cmd_Cmd_Cmd( ((RogueClassCmdWriteArrayElement*)ROGUE_CREATE_OBJECT(CmdWriteArrayElement)), THIS->t, THIS->context, THIS->index, new_value_1 ))), scope_0 ))));
  }
  else
  {
    RogueClassCmdArgs* args_3 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))));
    RogueCmdList__add__Cmd( ((RogueCmdList__add__Cmd( ((RogueCmdList*)args_3), THIS->index ))), new_value_1 );
    RogueClassCmd* result_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->context, Rogue_literal_strings[934], args_3 ))), true, false ))));
    return (RogueClassCmd*)(result_4);
  }
}

RogueClassCmd* RogueCmdElementAccess__resolve_adjust__Scope_Int32( RogueClassCmdElementAccess* THIS, RogueClassScope* scope_0, RogueInt32 delta_1 )
{
  return (RogueClassCmd*)((call_ROGUEM65( 26, (RogueClassCmd*)(((RogueCmdElementAccess__clone__CloneArgs( THIS, ((RogueClassCloneArgs*)(NULL)) )))), scope_0, ((RogueClassCmd*)(((RogueClassCmdAdd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdAdd*)ROGUE_CREATE_OBJECT(CmdAdd))), THIS->t, ((RogueClassCmd*)(THIS)), ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, delta_1 ))))) ))))))) )));
}

void RogueCmdElementAccess__update_this_type__Scope( RogueClassCmdElementAccess* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->context), scope_0 );
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->index), scope_0 );
}

RogueClassCmdElementAccess* RogueCmdElementAccess__init_object( RogueClassCmdElementAccess* THIS )
{
  return (RogueClassCmdElementAccess*)(THIS);
}

RogueClassCmdElementAccess* RogueCmdElementAccess__init__Token_Cmd_Cmd( RogueClassCmdElementAccess* THIS, RogueClassToken* _auto_1333_0, RogueClassCmd* _auto_1334_1, RogueClassCmd* _auto_1335_2 )
{
  THIS->index = _auto_1335_2;
  THIS->context = _auto_1334_1;
  THIS->t = _auto_1333_0;
  return (RogueClassCmdElementAccess*)(THIS);
}

RogueString* RogueCmdListConvert__type_name( RogueClassCmdListConvert* THIS )
{
  return (RogueString*)(Rogue_literal_strings[818]);
}

RogueClassCmdListConvert* RogueCmdListConvert__clone__CloneArgs( RogueClassCmdListConvert* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdListConvert*)(((RogueCmdListConvert__init__Token_Cmd_Type_Cmd( ((RogueClassCmdListConvert*)ROGUE_CREATE_OBJECT(CmdListConvert)), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->list), clone_args_0 )), THIS->_to_type, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->convert_fn), clone_args_0 )) ))));
}

RogueClassType* RogueCmdListConvert__implicit_type__Scope( RogueClassCmdListConvert* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassType*)(THIS->_to_type);
}

RogueClassCmd* RogueCmdListConvert__resolve__Scope( RogueClassCmdListConvert* THIS, RogueClassScope* scope_0 )
{
  THIS->list = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->list), scope_0 ));
  RogueClassType* list_type_1 = (((RogueType__organize__Scope( (call_ROGUEM64( 22, (RogueClassCmd*)(THIS->list) )), scope_0 ))));
  RogueType__organize__Scope( THIS->_to_type, scope_0 );
  if (!(list_type_1->is_list))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[913] ))));
  }
  if (THIS->_to_type->is_list)
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[914] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(list_type_1->_element_type)) ))) ))), Rogue_literal_strings[179] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(THIS->_to_type->_element_type)) ))) ))), Rogue_literal_strings[116] ))) ))) ))))), Rogue_literal_strings[915], ((RogueCmdArgs__init__Cmd_Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->list, THIS->convert_fn ))) ))), scope_0 ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[916] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(list_type_1->_element_type)) ))) ))), Rogue_literal_strings[179] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(THIS->_to_type)) ))) ))), Rogue_literal_strings[116] ))) ))) ))))), Rogue_literal_strings[915], ((RogueCmdArgs__init__Cmd_Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->list, THIS->convert_fn ))) ))), scope_0 ))));
  }
}

RogueClassType* Rogue_CmdListConvert__type( RogueClassCmdListConvert* THIS )
{
  return (RogueClassType*)(THIS->_to_type);
}

RogueClassCmdListConvert* RogueCmdListConvert__init_object( RogueClassCmdListConvert* THIS )
{
  return (RogueClassCmdListConvert*)(THIS);
}

RogueClassCmdListConvert* RogueCmdListConvert__init__Token_Cmd_Type_Cmd( RogueClassCmdListConvert* THIS, RogueClassToken* _auto_1336_0, RogueClassCmd* _auto_1337_1, RogueClassType* _auto_1338_2, RogueClassCmd* _auto_1339_3 )
{
  THIS->convert_fn = _auto_1339_3;
  THIS->_to_type = _auto_1338_2;
  THIS->list = _auto_1337_1;
  THIS->t = _auto_1336_0;
  return (RogueClassCmdListConvert*)(THIS);
}

RogueString* RogueCmdConvertToType__type_name( RogueClassCmdConvertToType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1077]);
}

RogueClassCmd* RogueCmdConvertToType__clone__CloneArgs( RogueClassCmdConvertToType* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdConvertToType*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdConvertToType*)ROGUE_CREATE_OBJECT(CmdConvertToType))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->operand), clone_args_0 )), THIS->_target_type ))))))));
}

RogueClassCmd* RogueCmdConvertToType__resolve__Scope( RogueClassCmdConvertToType* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->operand), scope_0 ));
  RogueClassType* operand_type_1 = ((call_ROGUEM64( 22, (RogueClassCmd*)(THIS->operand) )));
  RogueType__organize__Scope( THIS->_target_type, scope_0 );
  if (((void*)operand_type_1) == ((void*)THIS->_target_type))
  {
    return (RogueClassCmd*)(THIS->operand);
  }
  if ((((RogueType__is_primitive( operand_type_1 ))) && ((RogueType__is_primitive( THIS->_target_type )))))
  {
    return (RogueClassCmd*)(((RogueCmdConvertToPrimitiveType__resolve__Scope( ((RogueClassCmdConvertToPrimitiveType*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdConvertToPrimitiveType*)ROGUE_CREATE_OBJECT(CmdConvertToPrimitiveType))), THIS->t, THIS->operand, THIS->_target_type ))))), scope_0 ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->operand, ((RogueString__operatorPLUS__String( Rogue_literal_strings[344], THIS->_target_type->name ))) ))), scope_0 ))));
  }
}

RogueClassCmdConvertToType* RogueCmdConvertToType__init_object( RogueClassCmdConvertToType* THIS )
{
  return (RogueClassCmdConvertToType*)(THIS);
}

RogueString* RogueCmdCreateCallback__type_name( RogueClassCmdCreateCallback* THIS )
{
  return (RogueString*)(Rogue_literal_strings[819]);
}

RogueClassCmdCreateCallback* RogueCmdCreateCallback__clone__CloneArgs( RogueClassCmdCreateCallback* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdCreateCallback*)(((RogueCmdCreateCallback__init__Token_Cmd_String_String_Type( ((RogueClassCmdCreateCallback*)ROGUE_CREATE_OBJECT(CmdCreateCallback)), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->context), clone_args_0 )), THIS->name, THIS->signature, THIS->_return_type ))));
}

RogueClassCmd* RogueCmdCreateCallback__resolve__Scope( RogueClassCmdCreateCallback* THIS, RogueClassScope* scope_0 )
{
  if ((((RogueString__operatorEQUALSEQUALS__String( THIS->name, Rogue_literal_strings[343] ))) && !!(THIS->_return_type)))
  {
    THIS->name = ((RogueString__operatorPLUS__String( Rogue_literal_strings[344], THIS->_return_type->name )));
  }
  THIS->context = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->context), scope_0 ));
  RogueClassType* context_type_1 = ((call_ROGUEM64( 22, (RogueClassCmd*)(THIS->context) )));
  RogueType__organize__Scope( context_type_1, scope_0 );
  RogueClassMethod* m_2 = (((RogueType__find_method__String( context_type_1, ((RogueString__operatorPLUS__String( THIS->name, THIS->signature ))) ))));
  if (!(!!(m_2)))
  {
    RogueMethodList* methods_3 = (((RogueString_MethodListTable__get__String( context_type_1->method_lookup_by_name, THIS->name ))));
    if (!(!!(methods_3)))
    {
      methods_3 = ((RogueMethodList*)((RogueString_MethodListTable__get__String( context_type_1->routine_lookup_by_name, THIS->name ))));
    }
    if (!(!!(methods_3)))
    {
      ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[917] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->name ))) ))), Rogue_literal_strings[918] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], context_type_1->name ))) ))), Rogue_literal_strings[51] ))) ))) ))));
    }
    if (methods_3->count != 1)
    {
      ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[919] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->name ))) ))), Rogue_literal_strings[920] ))) ))) ))));
    }
    m_2 = ((RogueClassMethod*)((RogueClassMethod*)(methods_3->data->objects[0])));
  }
  RogueTypeList* parameter_types_4 = 0;
  if (!!(m_2->parameters->count))
  {
    parameter_types_4 = ((RogueTypeList*)((RogueTypeList__init( ((RogueTypeList*)ROGUE_CREATE_OBJECT(TypeList)) ))));
    {
      RogueLocalList* _auto_2343_13 = (m_2->parameters);
      RogueInt32 _auto_2344_14 = (0);
      for (;_auto_2344_14 < _auto_2343_13->count;++_auto_2344_14)
      {
        RogueClassLocal* p_15 = (((RogueClassLocal*)(_auto_2343_13->data->objects[_auto_2344_14])));
        RogueTypeList__add__Type( parameter_types_4, p_15->_type );
      }
    }
  }
  RogueString* callback_type_name_5 = (((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( context_type_1->name, Rogue_literal_strings[68] ))), THIS->name ))), ((RogueProgram__get_callback_type_signature__TypeList( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), parameter_types_4 ))) ))));
  RogueClassType* callback_type_6 = (((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, callback_type_name_5 ))));
  if (!(callback_type_6->defined))
  {
    callback_type_6->defined = true;
    RogueAttributes__add__Int32( callback_type_6->attributes, 0 );
    RogueClassType* base_type_7 = (((RogueProgram__get_callback_type_reference__Token_TypeList_Type( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, parameter_types_4, m_2->_return_type ))));
    RogueTypeList__add__Type( callback_type_6->base_types, base_type_7 );
    RogueClassMethod* m_call_8 = (((RogueType__add_method__Token_String( callback_type_6, THIS->t, Rogue_literal_strings[256] ))));
    RogueClassCmdArgs* args_9 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))));
    if (!!(parameter_types_4))
    {
      {
        RogueTypeList* _auto_2345_16 = (parameter_types_4);
        RogueInt32 i_17 = (0);
        for (;i_17 < _auto_2345_16->count;++i_17)
        {
          RogueString* param_name_10 = (((RogueString__operatorPLUS__Int32( Rogue_literal_strings[264], (i_17 + 1) ))));
          RogueMethod__add_parameter__Token_String_Type( m_call_8, THIS->t, param_name_10, ((RogueClassType*)(parameter_types_4->data->objects[i_17])) );
          RogueCmdList__add__Cmd( ((RogueCmdList*)args_9), ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, param_name_10 ))))) );
        }
      }
    }
    RogueClassCmd* cmd_11 = 0;
    if (((RogueMethod__is_global( m_2 ))))
    {
      RogueAttributes__add__Int32( callback_type_6->attributes, 1024 );
      cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, context_type_1->name ))))), THIS->name, args_9 ))))));
    }
    else
    {
      RogueType__add_property__Token_String_Type_Cmd( callback_type_6, THIS->t, Rogue_literal_strings[405], context_type_1, ((RogueClassCmd*)(NULL)) );
      RogueClassMethod* m_init_12 = (((RogueType__add_method__Token_String( callback_type_6, THIS->t, Rogue_literal_strings[331] ))));
      RogueMethod__add_parameter__Token_String_Type( m_init_12, THIS->t, Rogue_literal_strings[405], ((RogueClassType*)(NULL)) );
      cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, Rogue_literal_strings[405] ))))), THIS->name, args_9 ))))));
    }
    if (!!(m_2->_return_type))
    {
      m_call_8->_return_type = m_2->_return_type;
      cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), THIS->t, cmd_11 ))))));
    }
    RogueCmdList__add__Cmd( ((RogueCmdList*)m_call_8->statements), cmd_11 );
  }
  if (((RogueMethod__is_global( m_2 ))))
  {
    return (RogueClassCmd*)(((RogueCmdReadSingleton__resolve__Scope( ((RogueCmdReadSingleton__init__Token_Type( ((RogueClassCmdReadSingleton*)ROGUE_CREATE_OBJECT(CmdReadSingleton)), THIS->t, callback_type_6 ))), scope_0 ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, callback_type_name_5, ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->context ))) ))), scope_0 ))));
  }
}

RogueClassCmdCreateCallback* RogueCmdCreateCallback__init_object( RogueClassCmdCreateCallback* THIS )
{
  return (RogueClassCmdCreateCallback*)(THIS);
}

RogueClassCmdCreateCallback* RogueCmdCreateCallback__init__Token_Cmd_String_String_Type( RogueClassCmdCreateCallback* THIS, RogueClassToken* _auto_1340_0, RogueClassCmd* _auto_1341_1, RogueString* _auto_1342_2, RogueString* _auto_1343_3, RogueClassType* _auto_1344_4 )
{
  THIS->_return_type = _auto_1344_4;
  THIS->signature = _auto_1343_3;
  THIS->name = _auto_1342_2;
  THIS->context = _auto_1341_1;
  THIS->t = _auto_1340_0;
  return (RogueClassCmdCreateCallback*)(THIS);
}

RogueString* RogueCmdAs__type_name( RogueClassCmdAs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1078]);
}

RogueClassCmd* RogueCmdAs__clone__CloneArgs( RogueClassCmdAs* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdAs*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdAs*)ROGUE_CREATE_OBJECT(CmdAs))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->operand), clone_args_0 )), THIS->_target_type ))))))));
}

RogueClassCmd* RogueCmdAs__resolve__Scope( RogueClassCmdAs* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->operand), scope_0 ));
  RogueType__organize__Scope( THIS->_target_type, scope_0 );
  if (!(((!!((call_ROGUEM341( 29, (RogueClassCmdTypeOperator*)(THIS) ))) && ((RogueType__is_reference( (call_ROGUEM341( 29, (RogueClassCmdTypeOperator*)(THIS) )) )))) && ((RogueType__is_reference( THIS->_target_type ))))))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[921] ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdAs__write_cpp__CPPWriter_Logical( RogueClassCmdAs* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[505] ))), THIS->_target_type ))), Rogue_literal_strings[972] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->operand), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[179] );
  RogueCPPWriter__print_type_info__Type( writer_0, THIS->_target_type );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[973] );
}

RogueClassCmdAs* RogueCmdAs__init_object( RogueClassCmdAs* THIS )
{
  return (RogueClassCmdAs*)(THIS);
}

RogueString* RogueCmdDefaultValue__type_name( RogueClassCmdDefaultValue* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1043]);
}

RogueClassCmd* RogueCmdDefaultValue__clone__CloneArgs( RogueClassCmdDefaultValue* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdDefaultValue__init__Token_Type( ((RogueClassCmdDefaultValue*)ROGUE_CREATE_OBJECT(CmdDefaultValue)), THIS->t, THIS->_of_type ))))));
}

RogueClassCmd* RogueCmdDefaultValue__resolve__Scope( RogueClassCmdDefaultValue* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( THIS->_of_type, scope_0 );
  RogueClassCmd* default_value_1 = (((RogueType__create_default_value__Token( THIS->_of_type, THIS->t ))));
  if (((RogueType__is_reference( THIS->_of_type ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCastToType*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdCastToType*)ROGUE_CREATE_OBJECT(CmdCastToType))), THIS->t, default_value_1, THIS->_of_type ))))))));
  }
  else
  {
    return (RogueClassCmd*)(default_value_1);
  }
}

RogueClassType* Rogue_CmdDefaultValue__type( RogueClassCmdDefaultValue* THIS )
{
  return (RogueClassType*)(THIS->_of_type);
}

RogueClassCmdDefaultValue* RogueCmdDefaultValue__init_object( RogueClassCmdDefaultValue* THIS )
{
  return (RogueClassCmdDefaultValue*)(THIS);
}

RogueClassCmdDefaultValue* RogueCmdDefaultValue__init__Token_Type( RogueClassCmdDefaultValue* THIS, RogueClassToken* _auto_1345_0, RogueClassType* _auto_1346_1 )
{
  THIS->_of_type = _auto_1346_1;
  THIS->t = _auto_1345_0;
  return (RogueClassCmdDefaultValue*)(THIS);
}

RogueString* RogueCmdLiteralReal64__type_name( RogueClassCmdLiteralReal64* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1044]);
}

RogueClassCmd* RogueCmdLiteralReal64__clone__CloneArgs( RogueClassCmdLiteralReal64* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ((RogueClassCmdLiteralReal64*)ROGUE_CREATE_OBJECT(CmdLiteralReal64)), THIS->t, THIS->value ))))));
}

RogueClassCmd* RogueCmdLiteralReal64__resolve__Scope( RogueClassCmdLiteralReal64* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralReal64__type( RogueClassCmdLiteralReal64* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64);
}

void RogueCmdLiteralReal64__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralReal64* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (THIS->value == THIS->value)
  {
    if ((THIS->value - THIS->value) == 0.0)
    {
      RogueCPPWriter__print__Real64( writer_0, THIS->value );
    }
    else if (THIS->value > 0.0)
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[974] );
    }
    else
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[975] );
    }
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[976] );
  }
}

RogueClassCmdLiteralReal64* RogueCmdLiteralReal64__init_object( RogueClassCmdLiteralReal64* THIS )
{
  return (RogueClassCmdLiteralReal64*)(THIS);
}

RogueClassCmdLiteralReal64* RogueCmdLiteralReal64__init__Token_Real64( RogueClassCmdLiteralReal64* THIS, RogueClassToken* _auto_1347_0, RogueReal64 _auto_1348_1 )
{
  THIS->value = _auto_1348_1;
  THIS->t = _auto_1347_0;
  return (RogueClassCmdLiteralReal64*)(THIS);
}

RogueString* RogueCmdLiteralInt64__type_name( RogueClassCmdLiteralInt64* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1045]);
}

RogueClassCmd* RogueCmdLiteralInt64__cast_to__Type_Scope( RogueClassCmdLiteralInt64* THIS, RogueClassType* target_type_0, RogueClassScope* scope_1 )
{
  if (((void*)target_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ((RogueClassCmdLiteralReal64*)ROGUE_CREATE_OBJECT(CmdLiteralReal64)), THIS->t, ((RogueReal64)(THIS->value)) ))))));
  }
  else if (((void*)target_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, ((RogueInt32)(THIS->value)) ))))));
  }
  else
  {
    return (RogueClassCmd*)((RogueCmd__cast_to__Type_Scope( ((RogueClassCmd*)THIS), target_type_0, scope_1 )));
  }
}

RogueClassCmd* RogueCmdLiteralInt64__clone__CloneArgs( RogueClassCmdLiteralInt64* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt64__init__Token_Int64( ((RogueClassCmdLiteralInt64*)ROGUE_CREATE_OBJECT(CmdLiteralInt64)), THIS->t, THIS->value ))))));
}

RogueClassCmd* RogueCmdLiteralInt64__resolve__Scope( RogueClassCmdLiteralInt64* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralInt64__type( RogueClassCmdLiteralInt64* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int64);
}

void RogueCmdLiteralInt64__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralInt64* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Int64( writer_0, THIS->value ))), Rogue_literal_strings[977] );
}

RogueClassCmdLiteralInt64* RogueCmdLiteralInt64__init_object( RogueClassCmdLiteralInt64* THIS )
{
  return (RogueClassCmdLiteralInt64*)(THIS);
}

RogueClassCmdLiteralInt64* RogueCmdLiteralInt64__init__Token_Int64( RogueClassCmdLiteralInt64* THIS, RogueClassToken* _auto_1349_0, RogueInt64 _auto_1350_1 )
{
  THIS->value = _auto_1350_1;
  THIS->t = _auto_1349_0;
  return (RogueClassCmdLiteralInt64*)(THIS);
}

RogueString* RogueCmdLiteralCharacter__type_name( RogueClassCmdLiteralCharacter* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1046]);
}

RogueClassCmd* RogueCmdLiteralCharacter__clone__CloneArgs( RogueClassCmdLiteralCharacter* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralCharacter__init__Token_Character( ((RogueClassCmdLiteralCharacter*)ROGUE_CREATE_OBJECT(CmdLiteralCharacter)), THIS->t, THIS->value ))))));
}

RogueClassCmd* RogueCmdLiteralCharacter__resolve__Scope( RogueClassCmdLiteralCharacter* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralCharacter__type( RogueClassCmdLiteralCharacter* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character);
}

void RogueCmdLiteralCharacter__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralCharacter* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[978] );
  if ((((RogueInt32)(THIS->value)) >= 32 && ((RogueInt32)(THIS->value)) <= 126))
  {
    switch (((RogueInt32)(THIS->value)))
    {
      case 10:
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[979] );
        break;
      }
      case (RogueCharacter)'\\':
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[980] );
        break;
      }
      case (RogueCharacter)'\'':
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[981] );
        break;
      }
      default:
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[55] );
        RogueCPPWriter__print_literal_character__Character_Logical( writer_0, THIS->value, false );
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[55] );
      }
    }
  }
  else
  {
    RogueCPPWriter__print__Int32( writer_0, ((RogueInt32)(THIS->value)) );
  }
}

RogueClassCmdLiteralCharacter* RogueCmdLiteralCharacter__init_object( RogueClassCmdLiteralCharacter* THIS )
{
  return (RogueClassCmdLiteralCharacter*)(THIS);
}

RogueClassCmdLiteralCharacter* RogueCmdLiteralCharacter__init__Token_Character( RogueClassCmdLiteralCharacter* THIS, RogueClassToken* _auto_1351_0, RogueCharacter _auto_1352_1 )
{
  THIS->value = _auto_1352_1;
  THIS->t = _auto_1351_0;
  return (RogueClassCmdLiteralCharacter*)(THIS);
}

RogueString* RogueCmdCreateList__type_name( RogueClassCmdCreateList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[820]);
}

RogueClassCmd* RogueCmdCreateList__clone__CloneArgs( RogueClassCmdCreateList* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateList__init__Token_CmdArgs_Type( ((RogueClassCmdCreateList*)ROGUE_CREATE_OBJECT(CmdCreateList)), THIS->t, ((RogueCmd__clone__CmdArgs_CloneArgs( ((RogueClassCmd*)THIS), THIS->args, clone_args_0 ))), THIS->_list_type ))))));
}

RogueClassCmd* RogueCmdCreateList__resolve__Scope( RogueClassCmdCreateList* THIS, RogueClassScope* scope_0 )
{
  RogueCmdArgs__resolve__Scope( THIS->args, scope_0 );
  if ((!(!!(THIS->_list_type)) && !!(THIS->args->count)))
  {
    RogueClassType* common_type_1 = ((call_ROGUEM64( 29, (RogueClassCmd*)(((RogueClassCmd*)(THIS->args->data->objects[0]))) )));
    {
      RogueClassCmdArgs* _auto_2346_5 = (THIS->args);
      RogueInt32 _auto_2347_6 = (0);
      for (;_auto_2347_6 < _auto_2346_5->count;++_auto_2347_6)
      {
        RogueClassCmd* arg_7 = (((RogueClassCmd*)(_auto_2346_5->data->objects[_auto_2347_6])));
        common_type_1 = ((RogueClassType*)((RogueCmd__find_common_type__Type_Type( ((RogueClassCmd*)THIS), common_type_1, (call_ROGUEM64( 29, (RogueClassCmd*)(arg_7) )) ))));
      }
    }
    THIS->_list_type = ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(common_type_1)) ))), Rogue_literal_strings[184] ))) )));
    RogueType__organize__Scope( THIS->_list_type, scope_0 );
  }
  if (!!(THIS->_list_type))
  {
    RogueClassType* element_type_2 = (THIS->_list_type->_element_type);
    {
      RogueClassCmdArgs* _auto_2348_8 = (THIS->args);
      RogueInt32 index_9 = (0);
      for (;index_9 < _auto_2348_8->count;++index_9)
      {
        THIS->args->data->objects[index_9] = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)((call_ROGUEM56( 25, (RogueClassCmd*)(((RogueClassCmd*)(THIS->args->data->objects[index_9]))), scope_0 ))), element_type_2, scope_0 ))), scope_0 ));
      }
    }
  }
  if (!(!!(THIS->_list_type)))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[922] ))));
  }
  RogueInt32 initial_capacity_3 = (10);
  if (!!(THIS->args->count))
  {
    initial_capacity_3 = ((RogueInt32)THIS->args->count);
  }
  RogueClassCmd* cmd_4 = 0;
  cmd_4 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->_list_type->name, ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, initial_capacity_3 ))))) ))) ))))));
  {
    RogueClassCmdArgs* _auto_2349_10 = (THIS->args);
    RogueInt32 _auto_2350_11 = (0);
    for (;_auto_2350_11 < _auto_2349_10->count;++_auto_2350_11)
    {
      RogueClassCmd* arg_12 = (((RogueClassCmd*)(_auto_2349_10->data->objects[_auto_2350_11])));
      cmd_4 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, cmd_4, Rogue_literal_strings[923], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), arg_12 ))) ))))));
    }
  }
  return (RogueClassCmd*)((call_ROGUEM56( 25, (RogueClassCmd*)(cmd_4), scope_0 )));
}

RogueClassCmdCreateList* RogueCmdCreateList__init_object( RogueClassCmdCreateList* THIS )
{
  return (RogueClassCmdCreateList*)(THIS);
}

RogueClassCmdCreateList* RogueCmdCreateList__init__Token_CmdArgs_Type( RogueClassCmdCreateList* THIS, RogueClassToken* _auto_1353_0, RogueClassCmdArgs* _auto_1354_1, RogueClassType* _auto_1355_2 )
{
  THIS->_list_type = _auto_1355_2;
  THIS->args = _auto_1354_1;
  THIS->t = _auto_1353_0;
  return (RogueClassCmdCreateList*)(THIS);
}

RogueString* RogueCmdCallPriorMethod__type_name( RogueClassCmdCallPriorMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[821]);
}

RogueClassCmd* RogueCmdCallPriorMethod__clone__CloneArgs( RogueClassCmdCallPriorMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueCmdFlagArgList* cloned_flag_args_1 = 0;
  if (!!(THIS->flag_args))
  {
    cloned_flag_args_1 = ((RogueCmdFlagArgList*)((RogueCmdFlagArgList__init__Int32( ((RogueCmdFlagArgList*)ROGUE_CREATE_OBJECT(CmdFlagArgList)), THIS->flag_args->count ))));
    {
      RogueCmdFlagArgList* _auto_2351_2 = (THIS->flag_args);
      RogueInt32 _auto_2352_3 = (0);
      for (;_auto_2352_3 < _auto_2351_2->count;++_auto_2352_3)
      {
        RogueClassCmdFlagArg* flag_arg_4 = (((RogueClassCmdFlagArg*)(_auto_2351_2->data->objects[_auto_2352_3])));
        RogueCmdFlagArgList__add__CmdFlagArg( cloned_flag_args_1, ((RogueCmdFlagArg__clone__CloneArgs( flag_arg_4, ((RogueClassCloneArgs*)(NULL)) ))) );
      }
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCallPriorMethod__init__Token_String_CmdArgs_CmdFlagArgList( ((RogueClassCmdCallPriorMethod*)ROGUE_CREATE_OBJECT(CmdCallPriorMethod)), THIS->t, THIS->name, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))), cloned_flag_args_1 ))))));
}

RogueClassCmd* RogueCmdCallPriorMethod__resolve__Scope( RogueClassCmdCallPriorMethod* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)((call_ROGUEM56( 4, (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_String_CmdArgs_CmdFlagArgList( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->name, THIS->args, THIS->flag_args ))), scope_0 )))), scope_0 )));
}

void RogueCmdCallPriorMethod__update_this_type__Scope( RogueClassCmdCallPriorMethod* THIS, RogueClassScope* scope_0 )
{
  RogueCmdArgs__update_this_type__Scope( THIS->args, scope_0 );
}

RogueClassCmdCallPriorMethod* RogueCmdCallPriorMethod__init_object( RogueClassCmdCallPriorMethod* THIS )
{
  return (RogueClassCmdCallPriorMethod*)(THIS);
}

RogueClassCmdCallPriorMethod* RogueCmdCallPriorMethod__init__Token_String_CmdArgs_CmdFlagArgList( RogueClassCmdCallPriorMethod* THIS, RogueClassToken* _auto_1356_0, RogueString* _auto_1357_1, RogueClassCmdArgs* _auto_1358_2, RogueCmdFlagArgList* _auto_1359_3 )
{
  THIS->flag_args = _auto_1359_3;
  THIS->args = _auto_1358_2;
  THIS->name = _auto_1357_1;
  THIS->t = _auto_1356_0;
  return (RogueClassCmdCallPriorMethod*)(THIS);
}

RogueString* RogueFnArgList__to_String( RogueFnArgList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueFnArgList* _auto_2353_2 = (THIS);
    RogueInt32 _auto_2354_3 = (0);
    for (;_auto_2354_3 < _auto_2353_2->count;++_auto_2354_3)
    {
      RogueClassFnArg* value_4 = (((RogueClassFnArg*)(_auto_2353_2->data->objects[_auto_2354_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueFnArgList__type_name( RogueFnArgList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[708]);
}

RogueFnArgList* RogueFnArgList__init_object( RogueFnArgList* THIS )
{
  return (RogueFnArgList*)(THIS);
}

RogueFnArgList* RogueFnArgList__init( RogueFnArgList* THIS )
{
  RogueFnArgList__init__Int32( THIS, 10 );
  return (RogueFnArgList*)(THIS);
}

RogueFnArgList* RogueFnArgList__init__Int32( RogueFnArgList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassFnArg*), true );
  return (RogueFnArgList*)(THIS);
}

RogueFnArgList* RogueFnArgList__add__FnArg( RogueFnArgList* THIS, RogueClassFnArg* value_0 )
{
  ((RogueFnArgList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueFnArgList*)(THIS);
}

RogueInt32 RogueFnArgList__capacity( RogueFnArgList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueFnArgList* RogueFnArgList__reserve__Int32( RogueFnArgList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassFnArg*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueFnArgList__capacity( THIS ))) + ((RogueFnArgList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassFnArg*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueFnArgList*)(THIS);
}

RogueString* RogueFnArg__type_name( RogueClassFnArg* THIS )
{
  return (RogueString*)(Rogue_literal_strings[661]);
}

RogueClassFnArg* RogueFnArg__init__String_Cmd( RogueClassFnArg* THIS, RogueString* _auto_1360_0, RogueClassCmd* _auto_1361_1 )
{
  THIS->value = _auto_1361_1;
  THIS->name = _auto_1360_0;
  return (RogueClassFnArg*)(THIS);
}

RogueClassFnArg* RogueFnArg__set_type__Type( RogueClassFnArg* THIS, RogueClassType* _auto_1362_0 )
{
  THIS->_type = _auto_1362_0;
  return (RogueClassFnArg*)(THIS);
}

RogueClassFnArg* RogueFnArg__init_object( RogueClassFnArg* THIS )
{
  return (RogueClassFnArg*)(THIS);
}

RogueString* RogueCmdSelect__type_name( RogueClassCmdSelect* THIS )
{
  return (RogueString*)(Rogue_literal_strings[822]);
}

RogueClassCmdSelect* RogueCmdSelect__clone__CloneArgs( RogueClassCmdSelect* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdSelect* result_1 = (((RogueCmdSelect__init__Token_Local_Cmd_CmdSelectCaseList( ((RogueClassCmdSelect*)ROGUE_CREATE_OBJECT(CmdSelect)), THIS->t, THIS->local_info, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->expression, clone_args_0 ))), ((RogueCmdSelectCaseList__init__Int32( ((RogueCmdSelectCaseList*)ROGUE_CREATE_OBJECT(CmdSelectCaseList)), THIS->cases->count ))) ))));
  {
    RogueCmdSelectCaseList* _auto_2385_2 = (THIS->cases);
    RogueInt32 _auto_2386_3 = (0);
    for (;_auto_2386_3 < _auto_2385_2->count;++_auto_2386_3)
    {
      RogueClassCmdSelectCase* c_4 = (((RogueClassCmdSelectCase*)(_auto_2385_2->data->objects[_auto_2386_3])));
      RogueCmdSelectCaseList__add__CmdSelectCase( result_1->cases, ((RogueCmdSelectCase__clone__CloneArgs( c_4, clone_args_0 ))) );
    }
  }
  return (RogueClassCmdSelect*)(result_1);
}

RogueClassType* RogueCmdSelect__implicit_type__Scope( RogueClassCmdSelect* THIS, RogueClassScope* scope_0 )
{
  RogueClassType* common_type_1 = 0;
  {
    RogueCmdSelectCaseList* _auto_2387_3 = (THIS->cases);
    RogueInt32 _auto_2388_4 = (0);
    for (;_auto_2388_4 < _auto_2387_3->count;++_auto_2388_4)
    {
      RogueClassCmdSelectCase* c_5 = (((RogueClassCmdSelectCase*)(_auto_2387_3->data->objects[_auto_2388_4])));
      RogueClassType* case_type_2 = (((RogueCmdSelectCase__implicit_type__Scope( c_5, scope_0 ))));
      if (!(!!(common_type_1)))
      {
        common_type_1 = ((RogueClassType*)case_type_2);
      }
      else if (((void*)common_type_1) != ((void*)case_type_2))
      {
        return (RogueClassType*)(((RogueClassType*)(NULL)));
      }
    }
  }
  return (RogueClassType*)(common_type_1);
}

RogueClassCmd* RogueCmdSelect__resolve__Scope( RogueClassCmdSelect* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->_value_type))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  if (!(!!(THIS->cases->count)))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[925] ))));
  }
  if (!!(((RogueCmdSelectCaseList__last( THIS->cases )))->conditions))
  {
    ROGUE_THROW(((RogueToken__error__String( ((RogueCmdSelectCaseList__last( THIS->cases )))->t, Rogue_literal_strings[926] ))));
  }
  {
    RogueCmdSelectCaseList* _auto_2389_3 = (THIS->cases);
    RogueInt32 _auto_2390_4 = (0);
    for (;_auto_2390_4 < _auto_2389_3->count;++_auto_2390_4)
    {
      RogueClassCmdSelectCase* c_5 = (((RogueClassCmdSelectCase*)(_auto_2389_3->data->objects[_auto_2390_4])));
      RogueCmdSelectCase__resolve__Scope( c_5, scope_0 );
      RogueClassType* case_type_1 = (((Rogue_CmdSelectCase__type( c_5 ))));
      THIS->_value_type = ((RogueCmd__must_find_common_type__Type_Type( ((RogueClassCmd*)THIS), THIS->_value_type, case_type_1 )));
    }
  }
  {
    RogueCmdSelectCaseList* _auto_2391_6 = (THIS->cases);
    RogueInt32 _auto_2392_7 = (0);
    for (;_auto_2392_7 < _auto_2391_6->count;++_auto_2392_7)
    {
      RogueClassCmdSelectCase* c_8 = (((RogueClassCmdSelectCase*)(_auto_2391_6->data->objects[_auto_2392_7])));
      c_8->value = ((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)(c_8->value), THIS->_value_type, scope_0 ))), scope_0 )) )));
    }
  }
  if (!!(THIS->expression))
  {
    THIS->expression = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->expression), scope_0 ));
    RogueClassType* expr_type_2 = ((call_ROGUEM64( 22, (RogueClassCmd*)(THIS->expression) )));
    {
      RogueCmdSelectCaseList* _auto_2393_9 = (THIS->cases);
      RogueInt32 _auto_2394_10 = (0);
      for (;_auto_2394_10 < _auto_2393_9->count;++_auto_2394_10)
      {
        RogueClassCmdSelectCase* c_11 = (((RogueClassCmdSelectCase*)(_auto_2393_9->data->objects[_auto_2394_10])));
        RogueCmdSelectCase__cast_conditions__Type_Scope( c_11, expr_type_2, scope_0 );
      }
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdSelect__type( RogueClassCmdSelect* THIS )
{
  return (RogueClassType*)(THIS->_value_type);
}

void RogueCmdSelect__write_cpp__CPPWriter_Logical( RogueClassCmdSelect* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCmdSelect__write_cpp__CmdSelectCaseListReader_CPPWriter_Logical( THIS, ((RogueCmdSelectCaseList__reader( THIS->cases ))), writer_0, true );
}

void RogueCmdSelect__trace_used_code( RogueClassCmdSelect* THIS )
{
  if (!!(THIS->expression))
  {
    call_ROGUEM63( 31, (RogueClassCmd*)(THIS->expression) );
  }
  {
    RogueCmdSelectCaseList* _auto_2404_0 = (THIS->cases);
    RogueInt32 _auto_2405_1 = (0);
    for (;_auto_2405_1 < _auto_2404_0->count;++_auto_2405_1)
    {
      RogueClassCmdSelectCase* c_2 = (((RogueClassCmdSelectCase*)(_auto_2404_0->data->objects[_auto_2405_1])));
      RogueCmdSelectCase__trace_used_code( c_2 );
    }
  }
}

void RogueCmdSelect__update_this_type__Scope( RogueClassCmdSelect* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->expression))
  {
    call_ROGUEM60( 32, (RogueClassCmd*)(THIS->expression), scope_0 );
  }
  {
    RogueCmdSelectCaseList* _auto_2406_1 = (THIS->cases);
    RogueInt32 _auto_2407_2 = (0);
    for (;_auto_2407_2 < _auto_2406_1->count;++_auto_2407_2)
    {
      RogueClassCmdSelectCase* c_3 = (((RogueClassCmdSelectCase*)(_auto_2406_1->data->objects[_auto_2407_2])));
      RogueCmdSelectCase__update_this_type__Scope( c_3, scope_0 );
    }
  }
}

RogueClassCmdSelect* RogueCmdSelect__init_object( RogueClassCmdSelect* THIS )
{
  return (RogueClassCmdSelect*)(THIS);
}

RogueClassCmdSelect* RogueCmdSelect__init__Token_Local_Cmd_CmdSelectCaseList( RogueClassCmdSelect* THIS, RogueClassToken* _auto_1367_0, RogueClassLocal* _auto_1368_1, RogueClassCmd* _auto_1369_2, RogueCmdSelectCaseList* _auto_1370_3 )
{
  THIS->cases = _auto_1370_3;
  THIS->expression = _auto_1369_2;
  THIS->local_info = _auto_1368_1;
  THIS->t = _auto_1367_0;
  return (RogueClassCmdSelect*)(THIS);
}

void RogueCmdSelect__write_cpp__CmdSelectCaseListReader_CPPWriter_Logical( RogueClassCmdSelect* THIS, RogueClassCmdSelectCaseListReader* reader_0, RogueClassCPPWriter* writer_1, RogueLogical first_case_2 )
{
  RogueClassCmdSelectCase* select_case_3 = (((RogueCmdSelectCaseListReader__read( reader_0 ))));
  if (!(((RogueCmdSelectCaseListReader__has_another( reader_0 )))))
  {
    call_ROGUEM68( 30, (RogueClassCmd*)(select_case_3->value), writer_1, false );
    return;
  }
  RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[505] );
  RogueLogical first_condition_4 = (true);
  {
    RogueCmdList* _auto_2408_5 = (select_case_3->conditions);
    RogueInt32 _auto_2409_6 = (0);
    for (;_auto_2409_6 < _auto_2408_5->count;++_auto_2409_6)
    {
      RogueClassCmd* c_7 = (((RogueClassCmd*)(_auto_2408_5->data->objects[_auto_2409_6])));
      if (first_condition_4)
      {
        first_condition_4 = ((RogueLogical)false);
      }
      else
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[982] );
      }
      RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[66] );
      if (!!(THIS->expression))
      {
        if (first_case_2)
        {
          RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[66] ))), ((RogueLocal__cpp_name( THIS->local_info ))) ))), Rogue_literal_strings[186] );
          call_ROGUEM68( 30, (RogueClassCmd*)(THIS->expression), writer_1, false );
          RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[67] );
          first_case_2 = ((RogueLogical)false);
        }
        else
        {
          RogueCPPWriter__print__String( writer_1, ((RogueLocal__cpp_name( THIS->local_info ))) );
        }
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[185] );
      }
      RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[66] );
      call_ROGUEM68( 30, (RogueClassCmd*)(c_7), writer_1, false );
      RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[462] );
    }
  }
  RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[983] );
  call_ROGUEM68( 30, (RogueClassCmd*)(select_case_3->value), writer_1, false );
  RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[984] );
  RogueCmdSelect__write_cpp__CmdSelectCaseListReader_CPPWriter_Logical( THIS, reader_0, writer_1, false );
  RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[67] );
}

RogueString* RogueCmdSelectCaseList__to_String( RogueCmdSelectCaseList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueCmdSelectCaseList* _auto_2410_2 = (THIS);
    RogueInt32 _auto_2411_3 = (0);
    for (;_auto_2411_3 < _auto_2410_2->count;++_auto_2411_3)
    {
      RogueClassCmdSelectCase* value_4 = (((RogueClassCmdSelectCase*)(_auto_2410_2->data->objects[_auto_2411_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdSelectCaseList__type_name( RogueCmdSelectCaseList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[709]);
}

RogueCmdSelectCaseList* RogueCmdSelectCaseList__init_object( RogueCmdSelectCaseList* THIS )
{
  return (RogueCmdSelectCaseList*)(THIS);
}

RogueCmdSelectCaseList* RogueCmdSelectCaseList__init( RogueCmdSelectCaseList* THIS )
{
  RogueCmdSelectCaseList__init__Int32( THIS, 10 );
  return (RogueCmdSelectCaseList*)(THIS);
}

RogueCmdSelectCaseList* RogueCmdSelectCaseList__init__Int32( RogueCmdSelectCaseList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassCmdSelectCase*), true );
  return (RogueCmdSelectCaseList*)(THIS);
}

RogueCmdSelectCaseList* RogueCmdSelectCaseList__add__CmdSelectCase( RogueCmdSelectCaseList* THIS, RogueClassCmdSelectCase* value_0 )
{
  ((RogueCmdSelectCaseList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdSelectCaseList*)(THIS);
}

RogueInt32 RogueCmdSelectCaseList__capacity( RogueCmdSelectCaseList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueClassCmdSelectCase* RogueCmdSelectCaseList__last( RogueCmdSelectCaseList* THIS )
{
  return (RogueClassCmdSelectCase*)(((RogueClassCmdSelectCase*)(THIS->data->objects[(THIS->count - 1)])));
}

RogueClassCmdSelectCaseListReader* RogueCmdSelectCaseList__reader( RogueCmdSelectCaseList* THIS )
{
  return (RogueClassCmdSelectCaseListReader*)(((RogueCmdSelectCaseListReader__init__CmdSelectCaseList_Int32( ((RogueClassCmdSelectCaseListReader*)ROGUE_CREATE_OBJECT(CmdSelectCaseListReader)), THIS, 0 ))));
}

RogueCmdSelectCaseList* RogueCmdSelectCaseList__reserve__Int32( RogueCmdSelectCaseList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassCmdSelectCase*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueCmdSelectCaseList__capacity( THIS ))) + ((RogueCmdSelectCaseList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassCmdSelectCase*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdSelectCaseList*)(THIS);
}

RogueString* RogueCmdSelectCase__type_name( RogueClassCmdSelectCase* THIS )
{
  return (RogueString*)(Rogue_literal_strings[823]);
}

RogueClassCmdSelectCase* RogueCmdSelectCase__clone__CloneArgs( RogueClassCmdSelectCase* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdSelectCase* result_1 = (((RogueCmdSelectCase__init__Token_CmdList_Cmd( ((RogueClassCmdSelectCase*)ROGUE_CREATE_OBJECT(CmdSelectCase)), THIS->t, ((RogueCmdList*)(NULL)), ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->value, clone_args_0 ))) ))));
  if (!!(THIS->conditions))
  {
    result_1->conditions = (call_ROGUEM87( 5, (RogueCmdList*)(((RogueCmdList*)ROGUE_CREATE_OBJECT(CmdList))), THIS->conditions->count ));
    {
      RogueCmdList* _auto_2433_2 = (THIS->conditions);
      RogueInt32 _auto_2434_3 = (0);
      for (;_auto_2434_3 < _auto_2433_2->count;++_auto_2434_3)
      {
        RogueClassCmd* c_4 = (((RogueClassCmd*)(_auto_2433_2->data->objects[_auto_2434_3])));
        RogueCmdList__add__Cmd( result_1->conditions, (call_ROGUEM58( 6, (RogueClassCmd*)(c_4), clone_args_0 )) );
      }
    }
  }
  return (RogueClassCmdSelectCase*)(result_1);
}

RogueClassType* RogueCmdSelectCase__implicit_type__Scope( RogueClassCmdSelectCase* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassType*)((call_ROGUEM62( 17, (RogueClassCmd*)(THIS->value), scope_0 )));
}

RogueClassCmd* RogueCmdSelectCase__resolve__Scope( RogueClassCmdSelectCase* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->conditions))
  {
    {
      RogueCmdList* _auto_2435_1 = (THIS->conditions);
      RogueInt32 i_2 = (0);
      for (;i_2 < _auto_2435_1->count;++i_2)
      {
        THIS->conditions->data->objects[i_2] = ((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)(((RogueClassCmd*)(THIS->conditions->data->objects[i_2]))), scope_0 )) )));
      }
    }
  }
  THIS->value = ((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->value), scope_0 )) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdSelectCase__type( RogueClassCmdSelectCase* THIS )
{
  return (RogueClassType*)((call_ROGUEM64( 29, (RogueClassCmd*)(THIS->value) )));
}

void RogueCmdSelectCase__trace_used_code( RogueClassCmdSelectCase* THIS )
{
  if (!!(THIS->conditions))
  {
    {
      RogueCmdList* _auto_2436_0 = (THIS->conditions);
      RogueInt32 _auto_2437_1 = (0);
      for (;_auto_2437_1 < _auto_2436_0->count;++_auto_2437_1)
      {
        RogueClassCmd* c_2 = (((RogueClassCmd*)(_auto_2436_0->data->objects[_auto_2437_1])));
        call_ROGUEM63( 31, (RogueClassCmd*)(c_2) );
      }
    }
  }
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->value) );
}

void RogueCmdSelectCase__update_this_type__Scope( RogueClassCmdSelectCase* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->conditions))
  {
    {
      RogueCmdList* _auto_2438_1 = (THIS->conditions);
      RogueInt32 _auto_2439_2 = (0);
      for (;_auto_2439_2 < _auto_2438_1->count;++_auto_2439_2)
      {
        RogueClassCmd* c_3 = (((RogueClassCmd*)(_auto_2438_1->data->objects[_auto_2439_2])));
        call_ROGUEM60( 32, (RogueClassCmd*)(c_3), scope_0 );
      }
    }
  }
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->value), scope_0 );
}

RogueClassCmdSelectCase* RogueCmdSelectCase__init_object( RogueClassCmdSelectCase* THIS )
{
  return (RogueClassCmdSelectCase*)(THIS);
}

RogueClassCmdSelectCase* RogueCmdSelectCase__init__Token_CmdList_Cmd( RogueClassCmdSelectCase* THIS, RogueClassToken* _auto_1371_0, RogueCmdList* _auto_1372_1, RogueClassCmd* _auto_1373_2 )
{
  THIS->value = _auto_1373_2;
  THIS->conditions = _auto_1372_1;
  THIS->t = _auto_1371_0;
  return (RogueClassCmdSelectCase*)(THIS);
}

void RogueCmdSelectCase__cast_conditions__Type_Scope( RogueClassCmdSelectCase* THIS, RogueClassType* to_type_0, RogueClassScope* scope_1 )
{
  if (!!(THIS->conditions))
  {
    {
      RogueCmdList* _auto_2440_2 = (THIS->conditions);
      RogueInt32 i_3 = (0);
      for (;i_3 < _auto_2440_2->count;++i_3)
      {
        THIS->conditions->data->objects[i_3] = ((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)(((RogueClassCmd*)(THIS->conditions->data->objects[i_3]))), to_type_0, scope_1 ))), scope_1 )) )));
      }
    }
  }
}

RogueString* RogueCmdTypedLiteralList__type_name( RogueClassCmdTypedLiteralList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[824]);
}

RogueClassCmdTypedLiteralList* RogueCmdTypedLiteralList__clone__CloneArgs( RogueClassCmdTypedLiteralList* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdTypedLiteralList*)(((RogueCmdTypedLiteralList__init__Token_String_CmdArgs( ((RogueClassCmdTypedLiteralList*)ROGUE_CREATE_OBJECT(CmdTypedLiteralList)), THIS->t, THIS->list_type_name, ((RogueCmdArgs__clone__CloneArgs( THIS->elements, clone_args_0 ))) ))));
}

RogueClassType* RogueCmdTypedLiteralList__implicit_type__Scope( RogueClassCmdTypedLiteralList* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassType*)(((Rogue_CmdTypedLiteralList__type( THIS ))));
}

RogueClassCmd* RogueCmdTypedLiteralList__resolve__Scope( RogueClassCmdTypedLiteralList* THIS, RogueClassScope* scope_0 )
{
  if (THIS->elements->count <= 32)
  {
    RogueClassCmd* result_1 = (((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->list_type_name, ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))) ))))));
    {
      RogueClassCmdArgs* _auto_2441_4 = (THIS->elements);
      RogueInt32 _auto_2442_5 = (0);
      for (;_auto_2442_5 < _auto_2441_4->count;++_auto_2442_5)
      {
        RogueClassCmd* element_6 = (((RogueClassCmd*)(_auto_2441_4->data->objects[_auto_2442_5])));
        result_1 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, result_1, Rogue_literal_strings[923], element_6 ))))));
      }
    }
    return (RogueClassCmd*)((call_ROGUEM56( 25, (RogueClassCmd*)(result_1), scope_0 )));
  }
  else
  {
    RogueString* list_var_name_2 = (((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))));
    RogueClassLocal* list_var_3 = (((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, list_var_name_2, ((RogueClassType*)(NULL)), ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->list_type_name, ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))) ))))) ))));
    RogueCmdList__add__Cmd( ((RogueCmdList*)scope_0->this_body), ((RogueCmdLocalDeclaration__resolve__Scope( ((RogueCmdLocalDeclaration__init__Token_Local_Logical( ((RogueClassCmdLocalDeclaration*)ROGUE_CREATE_OBJECT(CmdLocalDeclaration)), THIS->t, list_var_3, false ))), scope_0 ))) );
    {
      RogueClassCmdArgs* _auto_2443_7 = (THIS->elements);
      RogueInt32 _auto_2444_8 = (0);
      for (;_auto_2444_8 < _auto_2443_7->count;++_auto_2444_8)
      {
        RogueClassCmd* element_9 = (((RogueClassCmd*)(_auto_2443_7->data->objects[_auto_2444_8])));
        RogueCmdList__add__Cmd( ((RogueCmdList*)scope_0->this_body), ((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_Cmd( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, list_var_name_2 ))))), Rogue_literal_strings[923], element_9 ))), scope_0 ))) );
      }
    }
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, list_var_name_2 ))), scope_0 ))));
  }
}

RogueClassType* Rogue_CmdTypedLiteralList__type( RogueClassCmdTypedLiteralList* THIS )
{
  return (RogueClassType*)(((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, THIS->list_type_name ))));
}

RogueClassCmdTypedLiteralList* RogueCmdTypedLiteralList__init_object( RogueClassCmdTypedLiteralList* THIS )
{
  return (RogueClassCmdTypedLiteralList*)(THIS);
}

RogueClassCmdTypedLiteralList* RogueCmdTypedLiteralList__init__Token_String_CmdArgs( RogueClassCmdTypedLiteralList* THIS, RogueClassToken* _auto_1379_0, RogueString* _auto_1380_1, RogueClassCmdArgs* _auto_1381_2 )
{
  THIS->elements = _auto_1381_2;
  THIS->list_type_name = _auto_1380_1;
  THIS->t = _auto_1379_0;
  return (RogueClassCmdTypedLiteralList*)(THIS);
}

RogueClassCmdTypedLiteralList* RogueCmdTypedLiteralList__add__Cmd( RogueClassCmdTypedLiteralList* THIS, RogueClassCmd* element_0 )
{
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->elements), element_0 );
  return (RogueClassCmdTypedLiteralList*)(THIS);
}

RogueString* RogueString_ParseReaderTableEntryList__to_String( RogueTableEntry_of_String_ParseReaderList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_ParseReaderList* _auto_2445_2 = (THIS);
    RogueInt32 _auto_2446_3 = (0);
    for (;_auto_2446_3 < _auto_2445_2->count;++_auto_2446_3)
    {
      RogueClassString_ParseReaderTableEntry* value_4 = (((RogueClassString_ParseReaderTableEntry*)(_auto_2445_2->data->objects[_auto_2446_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_ParseReaderTableEntryList__type_name( RogueTableEntry_of_String_ParseReaderList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[710]);
}

RogueTableEntry_of_String_ParseReaderList* RogueString_ParseReaderTableEntryList__init_object( RogueTableEntry_of_String_ParseReaderList* THIS )
{
  return (RogueTableEntry_of_String_ParseReaderList*)(THIS);
}

RogueTableEntry_of_String_ParseReaderList* RogueString_ParseReaderTableEntryList__init__Int32_String_ParseReaderTableEntry( RogueTableEntry_of_String_ParseReaderList* THIS, RogueInt32 initial_capacity_0, RogueClassString_ParseReaderTableEntry* initial_value_1 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_ParseReaderTableEntry*), true );
  {
    RogueInt32 i_2 = (1);
    RogueInt32 _auto_1382_3 = (initial_capacity_0);
    for (;i_2 <= _auto_1382_3;++i_2)
    {
      RogueString_ParseReaderTableEntryList__add__String_ParseReaderTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_ParseReaderList*)(THIS);
}

RogueTableEntry_of_String_ParseReaderList* RogueString_ParseReaderTableEntryList__add__String_ParseReaderTableEntry( RogueTableEntry_of_String_ParseReaderList* THIS, RogueClassString_ParseReaderTableEntry* value_0 )
{
  ((RogueString_ParseReaderTableEntryList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_ParseReaderList*)(THIS);
}

RogueInt32 RogueString_ParseReaderTableEntryList__capacity( RogueTableEntry_of_String_ParseReaderList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_ParseReaderList* RogueString_ParseReaderTableEntryList__reserve__Int32( RogueTableEntry_of_String_ParseReaderList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassString_ParseReaderTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueString_ParseReaderTableEntryList__capacity( THIS ))) + ((RogueString_ParseReaderTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassString_ParseReaderTableEntry*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_ParseReaderList*)(THIS);
}

RogueString* RogueString_ParseReaderTableEntry__type_name( RogueClassString_ParseReaderTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[662]);
}

RogueClassString_ParseReaderTableEntry* RogueString_ParseReaderTableEntry__init__String_ParseReader_Int32( RogueClassString_ParseReaderTableEntry* THIS, RogueString* _key_0, RogueClassParseReader* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_ParseReaderTableEntry*)(THIS);
}

RogueClassString_ParseReaderTableEntry* RogueString_ParseReaderTableEntry__init_object( RogueClassString_ParseReaderTableEntry* THIS )
{
  return (RogueClassString_ParseReaderTableEntry*)(THIS);
}

RogueString* RogueString_ParseReaderTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[749]);
}

RogueString* RogueFileReader__type_name( RogueClassFileReader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[663]);
}

RogueLogical RogueFileReader__has_another( RogueClassFileReader* THIS )
{
  return (RogueLogical)(THIS->position < THIS->count);
}

RogueCharacter RogueFileReader__peek( RogueClassFileReader* THIS )
{
  if (THIS->position == THIS->count)
  {
    return (RogueCharacter)(((RogueCharacter)(0)));
  }
  if (THIS->buffer_position == THIS->buffer->count)
  {
    THIS->buffer->count = (RogueInt32) fread( THIS->buffer->data->bytes, 1, 1024, THIS->fp );

    THIS->buffer_position = 0;
  }
  return (RogueCharacter)(((RogueCharacter)(THIS->buffer->data->bytes[THIS->buffer_position])));
}

RogueCharacter RogueFileReader__read( RogueClassFileReader* THIS )
{
  if (THIS->position == THIS->count)
  {
    return (RogueCharacter)(((RogueCharacter)(0)));
  }
  RogueCharacter result_0 = (((RogueFileReader__peek( THIS ))));
  ++THIS->position;
  ++THIS->buffer_position;
  if (THIS->position == THIS->count)
  {
    RogueFileReader__close( THIS );
  }
  return (RogueCharacter)(result_0);
}

RogueClassFileReader* RogueFileReader__init__String( RogueClassFileReader* THIS, RogueString* _filepath_0 )
{
  RogueFileReader__open__String( THIS, _filepath_0 );
  return (RogueClassFileReader*)(THIS);
}

RogueClassFileReader* RogueFileReader__close( RogueClassFileReader* THIS )
{
  if (!!(THIS->fp))
  {
    fclose( THIS->fp );
    THIS->fp = 0;

  }
  THIS->position = 0;
  THIS->count = 0;
  return (RogueClassFileReader*)(THIS);
}

RogueLogical RogueFileReader__open__String( RogueClassFileReader* THIS, RogueString* _auto_1389_0 )
{
  THIS->filepath = _auto_1389_0;
  RogueFileReader__close( THIS );
  char path[ PATH_MAX ];
  RogueString_to_c_string( THIS->filepath, path, PATH_MAX );
  THIS->fp = fopen( path, "rb" );
  if (THIS->fp)
  {
    fseek( THIS->fp, 0, SEEK_END );
    THIS->count = (RogueInt32) ftell( THIS->fp );
    fseek( THIS->fp, 0, SEEK_SET );
  }

  if (THIS->count == 0)
  {
    RogueFileReader__close( THIS );
  }
  return (RogueLogical)(THIS->position < THIS->count);
}

RogueClassFileReader* RogueFileReader__init_object( RogueClassFileReader* THIS )
{
  THIS->buffer = ((RogueByteList__init__Int32( ((RogueByteList*)ROGUE_CREATE_OBJECT(ByteList)), 1024 )));
  return (RogueClassFileReader*)(THIS);
}

RogueString* RogueFileWriter__type_name( RogueClassFileWriter* THIS )
{
  return (RogueString*)(Rogue_literal_strings[664]);
}

RogueClassFileWriter* RogueFileWriter__close( RogueClassFileWriter* THIS )
{
  RogueFileWriter__flush( THIS );
  if (!!(THIS->fp))
  {
    fclose( THIS->fp ); THIS->fp = 0;

  }
  return (RogueClassFileWriter*)(THIS);
}

RogueClassFileWriter* RogueFileWriter__flush( RogueClassFileWriter* THIS )
{
  if ((THIS->buffer->count == 0 || !(!!(THIS->fp))))
  {
    return (RogueClassFileWriter*)(THIS);
  }
  fwrite( THIS->buffer->data->bytes, 1, THIS->buffer->count, THIS->fp );

  fflush( THIS->fp );

  RogueByteList__clear( THIS->buffer );
  return (RogueClassFileWriter*)(THIS);
}

RogueClassFileWriter* RogueFileWriter__write__Character( RogueClassFileWriter* THIS, RogueCharacter ch_0 )
{
  if (!(!!(THIS->fp)))
  {
    return (RogueClassFileWriter*)(THIS);
  }
  ++THIS->position;
  RogueByteList__add__Byte( THIS->buffer, ((RogueByte)(ch_0)) );
  if (THIS->buffer->count == 1024)
  {
    return (RogueClassFileWriter*)(((RogueFileWriter__flush( THIS ))));
  }
  return (RogueClassFileWriter*)(THIS);
}

RogueClassFileWriter* RogueFileWriter__init__String( RogueClassFileWriter* THIS, RogueString* _filepath_0 )
{
  RogueFileWriter__open__String( THIS, _filepath_0 );
  return (RogueClassFileWriter*)(THIS);
}

RogueLogical RogueFileWriter__open__String( RogueClassFileWriter* THIS, RogueString* _auto_1390_0 )
{
  THIS->filepath = _auto_1390_0;
  RogueFileWriter__close( THIS );
  THIS->error = false;
  char path[ PATH_MAX ];
  RogueString_to_c_string( THIS->filepath, path, PATH_MAX );
  THIS->fp = fopen( path, "wb" );
  THIS->error = !(THIS->fp);
  return !THIS->error;

}

RogueClassFileWriter* RogueFileWriter__init_object( RogueClassFileWriter* THIS )
{
  THIS->buffer = ((RogueByteList__init__Int32( ((RogueByteList*)ROGUE_CREATE_OBJECT(ByteList)), 1024 )));
  return (RogueClassFileWriter*)(THIS);
}

RogueString* RogueTokenListRebuilder__type_name( RogueClassTokenListRebuilder* THIS )
{
  return (RogueString*)(Rogue_literal_strings[665]);
}

RogueClassTokenListRebuilder* RogueTokenListRebuilder__init__TokenList( RogueClassTokenListRebuilder* THIS, RogueTokenList* _auto_1422_0 )
{
  THIS->list = _auto_1422_0;
  return (RogueClassTokenListRebuilder*)(THIS);
}

RogueLogical RogueTokenListRebuilder__has_another( RogueClassTokenListRebuilder* THIS )
{
  if (THIS->read_index < THIS->list->count)
  {
    return (RogueLogical)(true);
  }
  else
  {
    RogueTokenList__discard_from__Int32( THIS->list, THIS->write_index );
    return (RogueLogical)(false);
  }
  return (RogueLogical)(THIS->read_index < THIS->list->count);
}

RogueClassToken* RogueTokenListRebuilder__peek__Int32( RogueClassTokenListRebuilder* THIS, RogueInt32 lookahead_0 )
{
  return (RogueClassToken*)(((RogueClassToken*)(THIS->list->data->objects[(THIS->read_index + lookahead_0)])));
}

RogueClassToken* RogueTokenListRebuilder__read( RogueClassTokenListRebuilder* THIS )
{
  ++THIS->read_index;
  return (RogueClassToken*)(((RogueClassToken*)(THIS->list->data->objects[(THIS->read_index - 1)])));
}

RogueClassTokenListRebuilder* RogueTokenListRebuilder__write__Token( RogueClassTokenListRebuilder* THIS, RogueClassToken* value_0 )
{
  if (THIS->write_index == THIS->read_index)
  {
    RogueTokenList__reserve__Int32( THIS->list, 1 );
    RogueInt32 unread_count_1 = ((THIS->list->count - THIS->read_index));
    RogueArray_set(THIS->list->data,(((RogueTokenList__capacity( THIS->list ))) - unread_count_1),((RogueArray*)(THIS->list->data)),THIS->read_index,unread_count_1);
    THIS->read_index += (((RogueTokenList__capacity( THIS->list ))) - THIS->list->count);
    THIS->list->count = ((RogueTokenList__capacity( THIS->list )));
  }
  THIS->list->data->objects[THIS->write_index] = value_0;
  ++THIS->write_index;
  return (RogueClassTokenListRebuilder*)(THIS);
}

RogueClassTokenListRebuilder* RogueTokenListRebuilder__init_object( RogueClassTokenListRebuilder* THIS )
{
  return (RogueClassTokenListRebuilder*)(THIS);
}

RogueString* RogueString_TokenTypeTableEntryList__to_String( RogueTableEntry_of_String_TokenTypeList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_TokenTypeList* _auto_2494_2 = (THIS);
    RogueInt32 _auto_2495_3 = (0);
    for (;_auto_2495_3 < _auto_2494_2->count;++_auto_2495_3)
    {
      RogueClassString_TokenTypeTableEntry* value_4 = (((RogueClassString_TokenTypeTableEntry*)(_auto_2494_2->data->objects[_auto_2495_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_TokenTypeTableEntryList__type_name( RogueTableEntry_of_String_TokenTypeList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[711]);
}

RogueTableEntry_of_String_TokenTypeList* RogueString_TokenTypeTableEntryList__init_object( RogueTableEntry_of_String_TokenTypeList* THIS )
{
  return (RogueTableEntry_of_String_TokenTypeList*)(THIS);
}

RogueTableEntry_of_String_TokenTypeList* RogueString_TokenTypeTableEntryList__init__Int32_String_TokenTypeTableEntry( RogueTableEntry_of_String_TokenTypeList* THIS, RogueInt32 initial_capacity_0, RogueClassString_TokenTypeTableEntry* initial_value_1 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_TokenTypeTableEntry*), true );
  {
    RogueInt32 i_2 = (1);
    RogueInt32 _auto_1496_3 = (initial_capacity_0);
    for (;i_2 <= _auto_1496_3;++i_2)
    {
      RogueString_TokenTypeTableEntryList__add__String_TokenTypeTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_TokenTypeList*)(THIS);
}

RogueTableEntry_of_String_TokenTypeList* RogueString_TokenTypeTableEntryList__add__String_TokenTypeTableEntry( RogueTableEntry_of_String_TokenTypeList* THIS, RogueClassString_TokenTypeTableEntry* value_0 )
{
  ((RogueString_TokenTypeTableEntryList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_TokenTypeList*)(THIS);
}

RogueInt32 RogueString_TokenTypeTableEntryList__capacity( RogueTableEntry_of_String_TokenTypeList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_TokenTypeList* RogueString_TokenTypeTableEntryList__reserve__Int32( RogueTableEntry_of_String_TokenTypeList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassString_TokenTypeTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueString_TokenTypeTableEntryList__capacity( THIS ))) + ((RogueString_TokenTypeTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassString_TokenTypeTableEntry*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_TokenTypeList*)(THIS);
}

RogueString* RogueString_TokenTypeTableEntry__type_name( RogueClassString_TokenTypeTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[666]);
}

RogueClassString_TokenTypeTableEntry* RogueString_TokenTypeTableEntry__init__String_TokenType_Int32( RogueClassString_TokenTypeTableEntry* THIS, RogueString* _key_0, RogueClassTokenType* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_TokenTypeTableEntry*)(THIS);
}

RogueClassString_TokenTypeTableEntry* RogueString_TokenTypeTableEntry__init_object( RogueClassString_TokenTypeTableEntry* THIS )
{
  return (RogueClassString_TokenTypeTableEntry*)(THIS);
}

RogueString* RogueString_TokenTypeTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[750]);
}

RogueString* RogueString_TypeSpecializerTableEntryList__to_String( RogueTableEntry_of_String_TypeSpecializerList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_TypeSpecializerList* _auto_2526_2 = (THIS);
    RogueInt32 _auto_2527_3 = (0);
    for (;_auto_2527_3 < _auto_2526_2->count;++_auto_2527_3)
    {
      RogueClassString_TypeSpecializerTableEntry* value_4 = (((RogueClassString_TypeSpecializerTableEntry*)(_auto_2526_2->data->objects[_auto_2527_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_TypeSpecializerTableEntryList__type_name( RogueTableEntry_of_String_TypeSpecializerList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[712]);
}

RogueTableEntry_of_String_TypeSpecializerList* RogueString_TypeSpecializerTableEntryList__init_object( RogueTableEntry_of_String_TypeSpecializerList* THIS )
{
  return (RogueTableEntry_of_String_TypeSpecializerList*)(THIS);
}

RogueTableEntry_of_String_TypeSpecializerList* RogueString_TypeSpecializerTableEntryList__init__Int32_String_TypeSpecializerTableEntry( RogueTableEntry_of_String_TypeSpecializerList* THIS, RogueInt32 initial_capacity_0, RogueClassString_TypeSpecializerTableEntry* initial_value_1 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_TypeSpecializerTableEntry*), true );
  {
    RogueInt32 i_2 = (1);
    RogueInt32 _auto_1503_3 = (initial_capacity_0);
    for (;i_2 <= _auto_1503_3;++i_2)
    {
      RogueString_TypeSpecializerTableEntryList__add__String_TypeSpecializerTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_TypeSpecializerList*)(THIS);
}

RogueTableEntry_of_String_TypeSpecializerList* RogueString_TypeSpecializerTableEntryList__add__String_TypeSpecializerTableEntry( RogueTableEntry_of_String_TypeSpecializerList* THIS, RogueClassString_TypeSpecializerTableEntry* value_0 )
{
  ((RogueString_TypeSpecializerTableEntryList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_TypeSpecializerList*)(THIS);
}

RogueInt32 RogueString_TypeSpecializerTableEntryList__capacity( RogueTableEntry_of_String_TypeSpecializerList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_TypeSpecializerList* RogueString_TypeSpecializerTableEntryList__reserve__Int32( RogueTableEntry_of_String_TypeSpecializerList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassString_TypeSpecializerTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueString_TypeSpecializerTableEntryList__capacity( THIS ))) + ((RogueString_TypeSpecializerTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassString_TypeSpecializerTableEntry*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_TypeSpecializerList*)(THIS);
}

RogueString* RogueString_TypeSpecializerTableEntry__type_name( RogueClassString_TypeSpecializerTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[667]);
}

RogueClassString_TypeSpecializerTableEntry* RogueString_TypeSpecializerTableEntry__init__String_TypeSpecializer_Int32( RogueClassString_TypeSpecializerTableEntry* THIS, RogueString* _key_0, RogueClassTypeSpecializer* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_TypeSpecializerTableEntry*)(THIS);
}

RogueClassString_TypeSpecializerTableEntry* RogueString_TypeSpecializerTableEntry__init_object( RogueClassString_TypeSpecializerTableEntry* THIS )
{
  return (RogueClassString_TypeSpecializerTableEntry*)(THIS);
}

RogueString* RogueString_TypeSpecializerTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[751]);
}

RogueString* RogueString_CmdLabelTableEntryList__to_String( RogueTableEntry_of_String_CmdLabelList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_CmdLabelList* _auto_2578_2 = (THIS);
    RogueInt32 _auto_2579_3 = (0);
    for (;_auto_2579_3 < _auto_2578_2->count;++_auto_2579_3)
    {
      RogueClassString_CmdLabelTableEntry* value_4 = (((RogueClassString_CmdLabelTableEntry*)(_auto_2578_2->data->objects[_auto_2579_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_CmdLabelTableEntryList__type_name( RogueTableEntry_of_String_CmdLabelList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[713]);
}

RogueTableEntry_of_String_CmdLabelList* RogueString_CmdLabelTableEntryList__init_object( RogueTableEntry_of_String_CmdLabelList* THIS )
{
  return (RogueTableEntry_of_String_CmdLabelList*)(THIS);
}

RogueTableEntry_of_String_CmdLabelList* RogueString_CmdLabelTableEntryList__init__Int32_String_CmdLabelTableEntry( RogueTableEntry_of_String_CmdLabelList* THIS, RogueInt32 initial_capacity_0, RogueClassString_CmdLabelTableEntry* initial_value_1 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_CmdLabelTableEntry*), true );
  {
    RogueInt32 i_2 = (1);
    RogueInt32 _auto_1643_3 = (initial_capacity_0);
    for (;i_2 <= _auto_1643_3;++i_2)
    {
      RogueString_CmdLabelTableEntryList__add__String_CmdLabelTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_CmdLabelList*)(THIS);
}

RogueTableEntry_of_String_CmdLabelList* RogueString_CmdLabelTableEntryList__add__String_CmdLabelTableEntry( RogueTableEntry_of_String_CmdLabelList* THIS, RogueClassString_CmdLabelTableEntry* value_0 )
{
  ((RogueString_CmdLabelTableEntryList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_CmdLabelList*)(THIS);
}

RogueInt32 RogueString_CmdLabelTableEntryList__capacity( RogueTableEntry_of_String_CmdLabelList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_CmdLabelList* RogueString_CmdLabelTableEntryList__reserve__Int32( RogueTableEntry_of_String_CmdLabelList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassString_CmdLabelTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueString_CmdLabelTableEntryList__capacity( THIS ))) + ((RogueString_CmdLabelTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassString_CmdLabelTableEntry*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_CmdLabelList*)(THIS);
}

RogueString* RogueString_CmdLabelTableEntry__type_name( RogueClassString_CmdLabelTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[668]);
}

RogueClassString_CmdLabelTableEntry* RogueString_CmdLabelTableEntry__init__String_CmdLabel_Int32( RogueClassString_CmdLabelTableEntry* THIS, RogueString* _key_0, RogueClassCmdLabel* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_CmdLabelTableEntry*)(THIS);
}

RogueClassString_CmdLabelTableEntry* RogueString_CmdLabelTableEntry__init_object( RogueClassString_CmdLabelTableEntry* THIS )
{
  return (RogueClassString_CmdLabelTableEntry*)(THIS);
}

RogueString* RogueString_CmdLabelTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[752]);
}

RogueString* RogueCmdCreateArray__type_name( RogueClassCmdCreateArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1121]);
}

RogueClassCmd* RogueCmdCreateArray__clone__CloneArgs( RogueClassCmdCreateArray* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateArray__init__Token_Type_Cmd( ((RogueClassCmdCreateArray*)ROGUE_CREATE_OBJECT(CmdCreateArray)), THIS->t, THIS->_array_type, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->count_cmd), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdCreateArray__resolve__Scope( RogueClassCmdCreateArray* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( THIS->_array_type, scope_0 );
  THIS->count_cmd = ((RogueCmd__require_integer( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->count_cmd), scope_0 )) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdCreateArray__type( RogueClassCmdCreateArray* THIS )
{
  return (RogueClassType*)(THIS->_array_type);
}

void RogueCmdCreateArray__write_cpp__CPPWriter_Logical( RogueClassCmdCreateArray* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[985] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->count_cmd), writer_0, false );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[986] ))), THIS->_array_type->_element_type ))), Rogue_literal_strings[67] );
  if (((RogueType__is_reference( THIS->_array_type->_element_type ))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[987] );
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[503] );
}

void RogueCmdCreateArray__trace_used_code( RogueClassCmdCreateArray* THIS )
{
  RogueType__trace_used_code( THIS->_array_type );
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->count_cmd) );
}

void RogueCmdCreateArray__update_this_type__Scope( RogueClassCmdCreateArray* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->count_cmd), scope_0 );
}

RogueClassCmdCreateArray* RogueCmdCreateArray__init_object( RogueClassCmdCreateArray* THIS )
{
  return (RogueClassCmdCreateArray*)(THIS);
}

RogueClassCmdCreateArray* RogueCmdCreateArray__init__Token_Type_CmdArgs( RogueClassCmdCreateArray* THIS, RogueClassToken* _auto_1654_0, RogueClassType* _auto_1655_1, RogueClassCmdArgs* args_2 )
{
  THIS->_array_type = _auto_1655_1;
  THIS->t = _auto_1654_0;
  if ((((void*)args_2) == ((void*)NULL) || args_2->count != 1))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[830] ))));
  }
  THIS->count_cmd = ((RogueClassCmd*)(args_2->data->objects[0]));
  return (RogueClassCmdCreateArray*)(THIS);
}

RogueClassCmdCreateArray* RogueCmdCreateArray__init__Token_Type_Cmd( RogueClassCmdCreateArray* THIS, RogueClassToken* _auto_1656_0, RogueClassType* _auto_1657_1, RogueClassCmd* _auto_1658_2 )
{
  THIS->count_cmd = _auto_1658_2;
  THIS->_array_type = _auto_1657_1;
  THIS->t = _auto_1656_0;
  return (RogueClassCmdCreateArray*)(THIS);
}

RogueString* RogueCmdCreateObject__type_name( RogueClassCmdCreateObject* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1122]);
}

RogueClassCmd* RogueCmdCreateObject__clone__CloneArgs( RogueClassCmdCreateObject* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateObject__init__Token_Type( ((RogueClassCmdCreateObject*)ROGUE_CREATE_OBJECT(CmdCreateObject)), THIS->t, THIS->_of_type ))))));
}

RogueClassCmd* RogueCmdCreateObject__resolve__Scope( RogueClassCmdCreateObject* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( THIS->_of_type, scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdCreateObject__type( RogueClassCmdCreateObject* THIS )
{
  return (RogueClassType*)(THIS->_of_type);
}

void RogueCmdCreateObject__write_cpp__CPPWriter_Logical( RogueClassCmdCreateObject* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[505] ))), THIS->_of_type ))), Rogue_literal_strings[67] );
  }
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[988] ))), ((Rogue_CmdCreateObject__type( THIS )))->cpp_name ))), Rogue_literal_strings[67] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
  }
}

void RogueCmdCreateObject__trace_used_code( RogueClassCmdCreateObject* THIS )
{
  RogueType__trace_used_code( THIS->_of_type );
}

void RogueCmdCreateObject__update_this_type__Scope( RogueClassCmdCreateObject* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdCreateObject* RogueCmdCreateObject__init_object( RogueClassCmdCreateObject* THIS )
{
  return (RogueClassCmdCreateObject*)(THIS);
}

RogueClassCmdCreateObject* RogueCmdCreateObject__init__Token_Type( RogueClassCmdCreateObject* THIS, RogueClassToken* _auto_1659_0, RogueClassType* _auto_1660_1 )
{
  THIS->_of_type = _auto_1660_1;
  THIS->t = _auto_1659_0;
  return (RogueClassCmdCreateObject*)(THIS);
}

RogueString* RogueCmdReadGlobal__type_name( RogueClassCmdReadGlobal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1123]);
}

RogueClassCmd* RogueCmdReadGlobal__clone__CloneArgs( RogueClassCmdReadGlobal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ((RogueClassCmdReadGlobal*)ROGUE_CREATE_OBJECT(CmdReadGlobal)), THIS->t, THIS->global_info ))))));
}

RogueClassCmd* RogueCmdReadGlobal__resolve__Scope( RogueClassCmdReadGlobal* THIS, RogueClassScope* scope_0 )
{
  RogueType__resolve( THIS->global_info->type_context );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdReadGlobal__resolve_adjust__Scope_Int32( RogueClassCmdReadGlobal* THIS, RogueClassScope* scope_0, RogueInt32 delta_1 )
{
  return (RogueClassCmd*)(((RogueCmdAdjustGlobal__resolve__Scope( ((RogueCmdAdjustGlobal__init__Token_Property_Int32( ((RogueClassCmdAdjustGlobal*)ROGUE_CREATE_OBJECT(CmdAdjustGlobal)), THIS->t, THIS->global_info, delta_1 ))), scope_0 ))));
}

RogueClassType* Rogue_CmdReadGlobal__type( RogueClassCmdReadGlobal* THIS )
{
  return (RogueClassType*)(THIS->global_info->_type);
}

void RogueCmdReadGlobal__write_cpp__CPPWriter_Logical( RogueClassCmdReadGlobal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_open_cast__Type_Type( writer_0, THIS->global_info->_type, THIS->global_info->_type );
  }
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] ))), THIS->global_info->type_context->cpp_name ))), Rogue_literal_strings[406] );
  RogueCPPWriter__print__String( writer_0, THIS->global_info->cpp_name );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_close_cast__Type_Type( writer_0, THIS->global_info->_type, THIS->global_info->_type );
  }
}

void RogueCmdReadGlobal__trace_used_code( RogueClassCmdReadGlobal* THIS )
{
  RogueType__trace_used_code( THIS->global_info->type_context );
  RogueType__trace_used_code( THIS->global_info->_type );
}

void RogueCmdReadGlobal__update_this_type__Scope( RogueClassCmdReadGlobal* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdReadGlobal* RogueCmdReadGlobal__init_object( RogueClassCmdReadGlobal* THIS )
{
  return (RogueClassCmdReadGlobal*)(THIS);
}

RogueClassCmdReadGlobal* RogueCmdReadGlobal__init__Token_Property( RogueClassCmdReadGlobal* THIS, RogueClassToken* _auto_1661_0, RogueClassProperty* _auto_1662_1 )
{
  THIS->global_info = _auto_1662_1;
  THIS->t = _auto_1661_0;
  return (RogueClassCmdReadGlobal*)(THIS);
}

RogueString* RogueCmdReadProperty__type_name( RogueClassCmdReadProperty* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1124]);
}

RogueClassCmd* RogueCmdReadProperty__clone__CloneArgs( RogueClassCmdReadProperty* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)ROGUE_CREATE_OBJECT(CmdReadProperty)), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->context), clone_args_0 )), THIS->property_info ))))));
}

RogueClassCmd* RogueCmdReadProperty__resolve__Scope( RogueClassCmdReadProperty* THIS, RogueClassScope* scope_0 )
{
  THIS->context = ((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->context), scope_0 )) )));
  if (((RogueType__is_aspect( (call_ROGUEM64( 29, (RogueClassCmd*)(THIS->context) )) ))))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueString__operatorPLUS__String( Rogue_literal_strings[854], ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[855] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->property_info->name ))) ))), Rogue_literal_strings[173] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->property_info->_type->name ))) ))), Rogue_literal_strings[856] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->property_info->name ))) ))), Rogue_literal_strings[21] ))) ))) ))) ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdReadProperty__resolve_adjust__Scope_Int32( RogueClassCmdReadProperty* THIS, RogueClassScope* scope_0, RogueInt32 delta_1 )
{
  return (RogueClassCmd*)(((RogueCmdAdjustProperty__resolve__Scope( ((RogueCmdAdjustProperty__init__Token_Cmd_Property_Int32( ((RogueClassCmdAdjustProperty*)ROGUE_CREATE_OBJECT(CmdAdjustProperty)), THIS->t, THIS->context, THIS->property_info, delta_1 ))), scope_0 ))));
}

RogueClassType* Rogue_CmdReadProperty__type( RogueClassCmdReadProperty* THIS )
{
  return (RogueClassType*)(THIS->property_info->_type);
}

void RogueCmdReadProperty__write_cpp__CPPWriter_Logical( RogueClassCmdReadProperty* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_open_cast__Type_Type( writer_0, THIS->property_info->_type, THIS->property_info->_type );
  }
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->context), writer_0, false );
  RogueCPPWriter__print_access_operator__Type( writer_0, (call_ROGUEM64( 29, (RogueClassCmd*)(THIS->context) )) );
  RogueCPPWriter__print__String( writer_0, THIS->property_info->cpp_name );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_close_cast__Type_Type( writer_0, THIS->property_info->_type, THIS->property_info->_type );
  }
}

void RogueCmdReadProperty__trace_used_code( RogueClassCmdReadProperty* THIS )
{
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->context) );
  RogueType__trace_used_code( THIS->property_info->type_context );
  RogueType__trace_used_code( THIS->property_info->_type );
}

void RogueCmdReadProperty__update_this_type__Scope( RogueClassCmdReadProperty* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->context), scope_0 );
}

RogueClassCmdReadProperty* RogueCmdReadProperty__init_object( RogueClassCmdReadProperty* THIS )
{
  return (RogueClassCmdReadProperty*)(THIS);
}

RogueClassCmdReadProperty* RogueCmdReadProperty__init__Token_Cmd_Property( RogueClassCmdReadProperty* THIS, RogueClassToken* _auto_1663_0, RogueClassCmd* _auto_1664_1, RogueClassProperty* _auto_1665_2 )
{
  THIS->property_info = _auto_1665_2;
  THIS->context = _auto_1664_1;
  THIS->t = _auto_1663_0;
  return (RogueClassCmdReadProperty*)(THIS);
}

RogueString* RogueCmdLogicalizeOptionalValue__type_name( RogueClassCmdLogicalizeOptionalValue* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1125]);
}

RogueClassCmd* RogueCmdLogicalizeOptionalValue__clone__CloneArgs( RogueClassCmdLogicalizeOptionalValue* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLogicalizeOptionalValue__init__Token_Cmd_Logical( ((RogueClassCmdLogicalizeOptionalValue*)ROGUE_CREATE_OBJECT(CmdLogicalizeOptionalValue)), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->value), clone_args_0 )), true ))))));
}

RogueClassCmdLogicalizeOptionalValue* RogueCmdLogicalizeOptionalValue__resolve__Scope( RogueClassCmdLogicalizeOptionalValue* THIS, RogueClassScope* scope_0 )
{
  THIS->value = ((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->value), scope_0 )) )));
  return (RogueClassCmdLogicalizeOptionalValue*)(THIS);
}

RogueClassType* Rogue_CmdLogicalizeOptionalValue__type( RogueClassCmdLogicalizeOptionalValue* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

void RogueCmdLogicalizeOptionalValue__write_cpp__CPPWriter_Logical( RogueClassCmdLogicalizeOptionalValue* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (((RogueType__is_reference( (call_ROGUEM64( 29, (RogueClassCmd*)(THIS->value) ))->_element_type ))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[989] );
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->value), writer_0, false );
  }
  else
  {
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->value), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[990] );
  }
}

void RogueCmdLogicalizeOptionalValue__trace_used_code( RogueClassCmdLogicalizeOptionalValue* THIS )
{
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->value) );
}

void RogueCmdLogicalizeOptionalValue__update_this_type__Scope( RogueClassCmdLogicalizeOptionalValue* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->value), scope_0 );
}

RogueClassCmdLogicalizeOptionalValue* RogueCmdLogicalizeOptionalValue__init_object( RogueClassCmdLogicalizeOptionalValue* THIS )
{
  return (RogueClassCmdLogicalizeOptionalValue*)(THIS);
}

RogueClassCmdLogicalizeOptionalValue* RogueCmdLogicalizeOptionalValue__init__Token_Cmd_Logical( RogueClassCmdLogicalizeOptionalValue* THIS, RogueClassToken* _auto_1666_0, RogueClassCmd* _auto_1667_1, RogueLogical _auto_1668_2 )
{
  THIS->positive = _auto_1668_2;
  THIS->value = _auto_1667_1;
  THIS->t = _auto_1666_0;
  return (RogueClassCmdLogicalizeOptionalValue*)(THIS);
}

RogueString* RogueCmdWriteSingleton__type_name( RogueClassCmdWriteSingleton* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1126]);
}

RogueClassCmd* RogueCmdWriteSingleton__clone__CloneArgs( RogueClassCmdWriteSingleton* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdWriteSingleton__init__Token_Type_Cmd( ((RogueClassCmdWriteSingleton*)ROGUE_CREATE_OBJECT(CmdWriteSingleton)), THIS->t, THIS->_of_type, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdWriteSingleton__resolve__Scope( RogueClassCmdWriteSingleton* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( THIS->_of_type, scope_0 );
  THIS->new_value = ((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->new_value), scope_0 )) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdWriteSingleton__write_cpp__CPPWriter_Logical( RogueClassCmdWriteSingleton* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(((RogueType__is_singleton( THIS->_of_type )))))
  {
    ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], THIS->_of_type->name ))) ))), Rogue_literal_strings[954] ))) ))) ))));
  }
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[447] ))), THIS->_of_type->cpp_name ))), Rogue_literal_strings[991] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->new_value), writer_0, false );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[205] );
}

void RogueCmdWriteSingleton__trace_used_code( RogueClassCmdWriteSingleton* THIS )
{
  RogueType__trace_used_code( THIS->_of_type );
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->new_value) );
}

void RogueCmdWriteSingleton__update_this_type__Scope( RogueClassCmdWriteSingleton* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->new_value), scope_0 );
}

RogueClassCmdWriteSingleton* RogueCmdWriteSingleton__init_object( RogueClassCmdWriteSingleton* THIS )
{
  return (RogueClassCmdWriteSingleton*)(THIS);
}

RogueClassCmdWriteSingleton* RogueCmdWriteSingleton__init__Token_Type_Cmd( RogueClassCmdWriteSingleton* THIS, RogueClassToken* _auto_1670_0, RogueClassType* _auto_1671_1, RogueClassCmd* _auto_1672_2 )
{
  THIS->new_value = _auto_1672_2;
  THIS->_of_type = _auto_1671_1;
  THIS->t = _auto_1670_0;
  return (RogueClassCmdWriteSingleton*)(THIS);
}

RogueString* RogueCmdWriteLocal__type_name( RogueClassCmdWriteLocal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1127]);
}

RogueClassCmd* RogueCmdWriteLocal__clone__CloneArgs( RogueClassCmdWriteLocal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassMacroArgs* macro_args_1 = (((RogueClassMacroArgs*)(RogueObject_as(clone_args_0,RogueTypeMacroArgs))));
  if (!!(macro_args_1))
  {
    return (RogueClassCmd*)(((RogueMacroArgs__inline_write_local__CmdWriteLocal( macro_args_1, THIS ))));
  }
  else
  {
    RogueClassTaskArgs* task_args_2 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
    if (!!(task_args_2))
    {
      return (RogueClassCmd*)(((RogueTaskArgs__cmd_write__Token_Local_Cmd( task_args_2, THIS->t, THIS->local_info, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))));
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdWriteLocal__init__Token_Local_Cmd( ((RogueClassCmdWriteLocal*)ROGUE_CREATE_OBJECT(CmdWriteLocal)), THIS->t, THIS->local_info, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->new_value, clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdWriteLocal__resolve__Scope( RogueClassCmdWriteLocal* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( THIS->local_info->_type, scope_0 );
  THIS->new_value = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->new_value), scope_0 ));
  THIS->new_value = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)(THIS->new_value), THIS->local_info->_type, scope_0 ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdWriteLocal__write_cpp__CPPWriter_Logical( RogueClassCmdWriteLocal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, ((RogueLocal__cpp_name( THIS->local_info ))) ))), Rogue_literal_strings[509] );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[505] ))), THIS->local_info->_type ))), Rogue_literal_strings[67] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->new_value), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
}

void RogueCmdWriteLocal__trace_used_code( RogueClassCmdWriteLocal* THIS )
{
  RogueType__trace_used_code( THIS->local_info->_type );
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->new_value) );
}

void RogueCmdWriteLocal__update_this_type__Scope( RogueClassCmdWriteLocal* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->new_value), scope_0 );
}

RogueClassCmdWriteLocal* RogueCmdWriteLocal__init_object( RogueClassCmdWriteLocal* THIS )
{
  return (RogueClassCmdWriteLocal*)(THIS);
}

RogueClassCmdWriteLocal* RogueCmdWriteLocal__init__Token_Local_Cmd( RogueClassCmdWriteLocal* THIS, RogueClassToken* _auto_1673_0, RogueClassLocal* _auto_1674_1, RogueClassCmd* _auto_1675_2 )
{
  THIS->new_value = _auto_1675_2;
  THIS->local_info = _auto_1674_1;
  THIS->t = _auto_1673_0;
  return (RogueClassCmdWriteLocal*)(THIS);
}

RogueString* RogueCmdOpAssignGlobal__type_name( RogueClassCmdOpAssignGlobal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1092]);
}

RogueClassCmd* RogueCmdOpAssignGlobal__clone__CloneArgs( RogueClassCmdOpAssignGlobal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdOpAssignGlobal__init__Token_Property_TokenType_Cmd( ((RogueClassCmdOpAssignGlobal*)ROGUE_CREATE_OBJECT(CmdOpAssignGlobal)), THIS->t, THIS->global_info, THIS->op, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdOpAssignGlobal__resolve__Scope( RogueClassCmdOpAssignGlobal* THIS, RogueClassScope* scope_0 )
{
  if (((RogueType__is_reference( THIS->global_info->_type ))))
  {
    RogueString* m_name_1 = (((RogueString__operatorPLUS__String( Rogue_literal_strings[342], ((RogueTokenType__to_String( THIS->op ))) ))));
    if (!!(((RogueString_MethodListTable__get__String( THIS->global_info->_type->method_lookup_by_name, m_name_1 )))))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_Cmd( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ((RogueClassCmdReadGlobal*)ROGUE_CREATE_OBJECT(CmdReadGlobal)), THIS->t, THIS->global_info ))))), m_name_1, THIS->new_value ))), scope_0 ))));
    }
    else
    {
      m_name_1 = ((RogueString*)((RogueString__leftmost__Int32( m_name_1, -1 ))));
      if (!!(((RogueString_MethodListTable__get__String( THIS->global_info->_type->method_lookup_by_name, m_name_1 )))))
      {
        return (RogueClassCmd*)(((RogueCmdWriteGlobal__resolve__Scope( ((RogueCmdWriteGlobal__init__Token_Property_Cmd( ((RogueClassCmdWriteGlobal*)ROGUE_CREATE_OBJECT(CmdWriteGlobal)), THIS->t, THIS->global_info, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ((RogueClassCmdReadGlobal*)ROGUE_CREATE_OBJECT(CmdReadGlobal)), THIS->t, THIS->global_info ))))), m_name_1, THIS->new_value ))))) ))), scope_0 ))));
      }
      else
      {
        RogueString* arg_type_2 = ((call_ROGUEM64( 29, (RogueClassCmd*)(THIS->new_value) ))->name);
        ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[893] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(THIS->global_info->_type)) ))) ))), Rogue_literal_strings[894] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], m_name_1 ))) ))), Rogue_literal_strings[895] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], arg_type_2 ))) ))), Rogue_literal_strings[896] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], m_name_1 ))) ))), Rogue_literal_strings[897] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], arg_type_2 ))) ))), Rogue_literal_strings[390] ))) ))) ))));
      }
    }
  }
  {
    RogueClassTokenType* _auto_2617_4 = (THIS->op);
    if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_2617_4), ((RogueObject*)(RogueTokenType_symbol_caret_equals)) ))))
    {
      return (RogueClassCmd*)(((RogueCmdWriteGlobal__resolve__Scope( ((RogueCmdWriteGlobal__init__Token_Property_Cmd( ((RogueClassCmdWriteGlobal*)ROGUE_CREATE_OBJECT(CmdWriteGlobal)), THIS->t, THIS->global_info, ((RogueClassCmd*)(((RogueClassCmdPower*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdPower*)ROGUE_CREATE_OBJECT(CmdPower))), THIS->t, ((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ((RogueClassCmdReadGlobal*)ROGUE_CREATE_OBJECT(CmdReadGlobal)), THIS->t, THIS->global_info ))))), THIS->new_value ))))))) ))), scope_0 ))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_2617_4), ((RogueObject*)(RogueTokenType_symbol_percent_equals)) ))))
    {
      return (RogueClassCmd*)(((RogueCmdWriteGlobal__resolve__Scope( ((RogueCmdWriteGlobal__init__Token_Property_Cmd( ((RogueClassCmdWriteGlobal*)ROGUE_CREATE_OBJECT(CmdWriteGlobal)), THIS->t, THIS->global_info, ((RogueClassCmd*)(((RogueClassCmdMod*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMod*)ROGUE_CREATE_OBJECT(CmdMod))), THIS->t, ((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ((RogueClassCmdReadGlobal*)ROGUE_CREATE_OBJECT(CmdReadGlobal)), THIS->t, THIS->global_info ))))), THIS->new_value ))))))) ))), scope_0 ))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_2617_4), ((RogueObject*)(RogueTokenType_symbol_dot_equals)) ))))
    {
      RogueClassCmdAccess* access_3 = (((RogueClassCmdAccess*)(RogueObject_as(THIS->new_value,RogueTypeCmdAccess))));
      if (!(!!(access_3)))
      {
        ROGUE_THROW(((RogueToken__error__String( THIS->new_value->t, Rogue_literal_strings[898] ))));
      }
      if (!!(access_3->context))
      {
        ROGUE_THROW(((RogueToken__error__String( access_3->t, Rogue_literal_strings[899] ))));
      }
      access_3->context = ((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ((RogueClassCmdReadGlobal*)ROGUE_CREATE_OBJECT(CmdReadGlobal)), THIS->t, THIS->global_info )))));
      return (RogueClassCmd*)(((RogueCmdWriteGlobal__resolve__Scope( ((RogueCmdWriteGlobal__init__Token_Property_Cmd( ((RogueClassCmdWriteGlobal*)ROGUE_CREATE_OBJECT(CmdWriteGlobal)), THIS->t, THIS->global_info, ((RogueClassCmd*)(access_3)) ))), scope_0 ))));
    }
  }
  THIS->new_value = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)((call_ROGUEM56( 25, (RogueClassCmd*)(THIS->new_value), scope_0 ))), THIS->global_info->_type, scope_0 ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdOpAssignGlobal__type( RogueClassCmdOpAssignGlobal* THIS )
{
  return (RogueClassType*)(THIS->global_info->_type);
}

void RogueCmdOpAssignGlobal__write_cpp__CPPWriter_Logical( RogueClassCmdOpAssignGlobal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] ))), THIS->global_info->type_context->cpp_name ))), Rogue_literal_strings[406] );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, THIS->global_info->cpp_name ))), Rogue_literal_strings[458] ))), ((RogueCmdResolvedOpWithAssign__cpp_symbol( ((RogueClassCmdResolvedOpWithAssign*)THIS) ))) ))), Rogue_literal_strings[458] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->new_value), writer_0, false );
}

void RogueCmdOpAssignGlobal__trace_used_code( RogueClassCmdOpAssignGlobal* THIS )
{
  RogueType__trace_used_code( THIS->global_info->type_context );
  RogueType__trace_used_code( THIS->global_info->_type );
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->new_value) );
}

void RogueCmdOpAssignGlobal__update_this_type__Scope( RogueClassCmdOpAssignGlobal* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->new_value), scope_0 );
}

RogueClassCmdOpAssignGlobal* RogueCmdOpAssignGlobal__init_object( RogueClassCmdOpAssignGlobal* THIS )
{
  return (RogueClassCmdOpAssignGlobal*)(THIS);
}

RogueClassCmdOpAssignGlobal* RogueCmdOpAssignGlobal__init__Token_Property_TokenType_Cmd( RogueClassCmdOpAssignGlobal* THIS, RogueClassToken* _auto_1676_0, RogueClassProperty* _auto_1677_1, RogueClassTokenType* _auto_1678_2, RogueClassCmd* _auto_1679_3 )
{
  THIS->new_value = _auto_1679_3;
  THIS->op = _auto_1678_2;
  THIS->global_info = _auto_1677_1;
  THIS->t = _auto_1676_0;
  return (RogueClassCmdOpAssignGlobal*)(THIS);
}

RogueString* RogueCmdOpAssignProperty__type_name( RogueClassCmdOpAssignProperty* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1093]);
}

RogueClassCmd* RogueCmdOpAssignProperty__clone__CloneArgs( RogueClassCmdOpAssignProperty* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdOpAssignProperty__init__Token_Cmd_Property_TokenType_Cmd( ((RogueClassCmdOpAssignProperty*)ROGUE_CREATE_OBJECT(CmdOpAssignProperty)), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->context), clone_args_0 )), THIS->property_info, THIS->op, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdOpAssignProperty__resolve__Scope( RogueClassCmdOpAssignProperty* THIS, RogueClassScope* scope_0 )
{
  if (((RogueType__is_reference( THIS->property_info->_type ))))
  {
    RogueString* m_name_1 = (((RogueString__operatorPLUS__String( Rogue_literal_strings[342], ((RogueTokenType__to_String( THIS->op ))) ))));
    if (!!(((RogueString_MethodListTable__get__String( THIS->property_info->_type->method_lookup_by_name, m_name_1 )))))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_Cmd( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)ROGUE_CREATE_OBJECT(CmdReadProperty)), THIS->t, THIS->context, THIS->property_info ))))), m_name_1, THIS->new_value ))), scope_0 ))));
    }
    else
    {
      m_name_1 = ((RogueString*)((RogueString__leftmost__Int32( m_name_1, -1 ))));
      if (!!(((RogueString_MethodListTable__get__String( THIS->property_info->_type->method_lookup_by_name, m_name_1 )))))
      {
        return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), THIS->t, THIS->context, THIS->property_info, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)ROGUE_CREATE_OBJECT(CmdReadProperty)), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, ((RogueClassCloneArgs*)(NULL)) ))), THIS->property_info ))))), m_name_1, THIS->new_value ))))) ))), scope_0 ))));
      }
      else
      {
        RogueString* arg_type_2 = ((call_ROGUEM64( 29, (RogueClassCmd*)(THIS->new_value) ))->name);
        ROGUE_THROW(((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[893] ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(THIS->property_info->_type)) ))) ))), Rogue_literal_strings[894] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], m_name_1 ))) ))), Rogue_literal_strings[895] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], arg_type_2 ))) ))), Rogue_literal_strings[896] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], m_name_1 ))) ))), Rogue_literal_strings[897] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], arg_type_2 ))) ))), Rogue_literal_strings[390] ))) ))) ))));
      }
    }
  }
  {
    RogueClassTokenType* _auto_2618_4 = (THIS->op);
    if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_2618_4), ((RogueObject*)(RogueTokenType_symbol_caret_equals)) ))))
    {
      return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), THIS->t, THIS->context, THIS->property_info, ((RogueClassCmd*)(((RogueClassCmdPower*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdPower*)ROGUE_CREATE_OBJECT(CmdPower))), THIS->t, ((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)ROGUE_CREATE_OBJECT(CmdReadProperty)), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, ((RogueClassCloneArgs*)(NULL)) ))), THIS->property_info ))))), THIS->new_value ))))))) ))), scope_0 ))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_2618_4), ((RogueObject*)(RogueTokenType_symbol_percent_equals)) ))))
    {
      return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), THIS->t, THIS->context, THIS->property_info, ((RogueClassCmd*)(((RogueClassCmdMod*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMod*)ROGUE_CREATE_OBJECT(CmdMod))), THIS->t, ((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)ROGUE_CREATE_OBJECT(CmdReadProperty)), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, ((RogueClassCloneArgs*)(NULL)) ))), THIS->property_info ))))), THIS->new_value ))))))) ))), scope_0 ))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_2618_4), ((RogueObject*)(RogueTokenType_symbol_dot_equals)) ))))
    {
      RogueClassCmdAccess* access_3 = (((RogueClassCmdAccess*)(RogueObject_as(THIS->new_value,RogueTypeCmdAccess))));
      if (!(!!(access_3)))
      {
        ROGUE_THROW(((RogueToken__error__String( THIS->new_value->t, Rogue_literal_strings[898] ))));
      }
      if (!!(access_3->context))
      {
        ROGUE_THROW(((RogueToken__error__String( access_3->t, Rogue_literal_strings[899] ))));
      }
      access_3->context = ((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)ROGUE_CREATE_OBJECT(CmdReadProperty)), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, ((RogueClassCloneArgs*)(NULL)) ))), THIS->property_info )))));
      return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), THIS->t, THIS->context, THIS->property_info, ((RogueClassCmd*)(access_3)) ))), scope_0 ))));
    }
  }
  THIS->context = ((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->context), scope_0 )) )));
  THIS->new_value = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)((call_ROGUEM56( 25, (RogueClassCmd*)(THIS->new_value), scope_0 ))), THIS->property_info->_type, scope_0 ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdOpAssignProperty__type( RogueClassCmdOpAssignProperty* THIS )
{
  return (RogueClassType*)(THIS->property_info->_type);
}

void RogueCmdOpAssignProperty__write_cpp__CPPWriter_Logical( RogueClassCmdOpAssignProperty* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->context), writer_0, false );
  RogueCPPWriter__print_access_operator__Type( writer_0, (call_ROGUEM64( 29, (RogueClassCmd*)(THIS->context) )) );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, THIS->property_info->cpp_name ))), Rogue_literal_strings[458] ))), ((RogueCmdResolvedOpWithAssign__cpp_symbol( ((RogueClassCmdResolvedOpWithAssign*)THIS) ))) ))), Rogue_literal_strings[458] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->new_value), writer_0, false );
}

void RogueCmdOpAssignProperty__trace_used_code( RogueClassCmdOpAssignProperty* THIS )
{
  RogueType__trace_used_code( THIS->property_info->type_context );
  RogueType__trace_used_code( THIS->property_info->_type );
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->new_value) );
}

void RogueCmdOpAssignProperty__update_this_type__Scope( RogueClassCmdOpAssignProperty* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->new_value), scope_0 );
}

RogueClassCmdOpAssignProperty* RogueCmdOpAssignProperty__init_object( RogueClassCmdOpAssignProperty* THIS )
{
  return (RogueClassCmdOpAssignProperty*)(THIS);
}

RogueClassCmdOpAssignProperty* RogueCmdOpAssignProperty__init__Token_Cmd_Property_TokenType_Cmd( RogueClassCmdOpAssignProperty* THIS, RogueClassToken* _auto_1680_0, RogueClassCmd* _auto_1681_1, RogueClassProperty* _auto_1682_2, RogueClassTokenType* _auto_1683_3, RogueClassCmd* _auto_1684_4 )
{
  THIS->new_value = _auto_1684_4;
  THIS->op = _auto_1683_3;
  THIS->property_info = _auto_1682_2;
  THIS->context = _auto_1681_1;
  THIS->t = _auto_1680_0;
  return (RogueClassCmdOpAssignProperty*)(THIS);
}

RogueString* RogueCmdControlStructureArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[753]);
}

RogueString* RogueCmdTaskControlSectionList__to_String( RogueCmdTaskControlSectionList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueCmdTaskControlSectionList* _auto_2629_2 = (THIS);
    RogueInt32 _auto_2630_3 = (0);
    for (;_auto_2630_3 < _auto_2629_2->count;++_auto_2630_3)
    {
      RogueClassCmdTaskControlSection* value_4 = (((RogueClassCmdTaskControlSection*)(_auto_2629_2->data->objects[_auto_2630_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdTaskControlSectionList__type_name( RogueCmdTaskControlSectionList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[714]);
}

RogueCmdTaskControlSectionList* RogueCmdTaskControlSectionList__init_object( RogueCmdTaskControlSectionList* THIS )
{
  return (RogueCmdTaskControlSectionList*)(THIS);
}

RogueCmdTaskControlSectionList* RogueCmdTaskControlSectionList__init( RogueCmdTaskControlSectionList* THIS )
{
  RogueCmdTaskControlSectionList__init__Int32( THIS, 10 );
  return (RogueCmdTaskControlSectionList*)(THIS);
}

RogueCmdTaskControlSectionList* RogueCmdTaskControlSectionList__init__Int32( RogueCmdTaskControlSectionList* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassCmdTaskControlSection*), true );
  return (RogueCmdTaskControlSectionList*)(THIS);
}

RogueCmdTaskControlSectionList* RogueCmdTaskControlSectionList__add__CmdTaskControlSection( RogueCmdTaskControlSectionList* THIS, RogueClassCmdTaskControlSection* value_0 )
{
  ((RogueCmdTaskControlSectionList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdTaskControlSectionList*)(THIS);
}

RogueInt32 RogueCmdTaskControlSectionList__capacity( RogueCmdTaskControlSectionList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueCmdTaskControlSectionList* RogueCmdTaskControlSectionList__reserve__Int32( RogueCmdTaskControlSectionList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassCmdTaskControlSection*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueCmdTaskControlSectionList__capacity( THIS ))) + ((RogueCmdTaskControlSectionList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassCmdTaskControlSection*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdTaskControlSectionList*)(THIS);
}

RogueString* RogueCmdBlock__type_name( RogueClassCmdBlock* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1035]);
}

RogueClassCmd* RogueCmdBlock__clone__CloneArgs( RogueClassCmdBlock* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if ((!!(task_args_1) && THIS->contains_yield))
  {
    {
      RogueClassCmdStatementList* _auto_2661_3 = (THIS->statements);
      RogueInt32 _auto_2662_4 = (0);
      for (;_auto_2662_4 < _auto_2661_3->count;++_auto_2662_4)
      {
        RogueClassCmd* statement_5 = (((RogueClassCmd*)(_auto_2661_3->data->objects[_auto_2662_4])));
        RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM58( 6, (RogueClassCmd*)(statement_5), ((RogueClassCloneArgs*)(task_args_1)) )) );
      }
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  else
  {
    RogueClassCmdBlock* result_2 = (((RogueCmdBlock__init__Token_CmdStatementList_Int32( ((RogueClassCmdBlock*)ROGUE_CREATE_OBJECT(CmdBlock)), THIS->t, ((RogueClassCmdStatementList*)(NULL)), 0 ))));
    call_ROGUEM207( 35, (RogueClassCmdControlStructure*)(result_2), ((RogueClassCmdControlStructure*)(THIS)) );
    THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_2));
    result_2->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 )));
    return (RogueClassCmd*)(((RogueClassCmd*)(result_2)));
  }
}

RogueLogical RogueCmdBlock__requires_semicolon( RogueClassCmdBlock* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmdBlock* RogueCmdBlock__resolve__Scope( RogueClassCmdBlock* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  RogueCmdControlStructureList__remove_last( scope_0->control_stack );
  return (RogueClassCmdBlock*)(THIS);
}

void RogueCmdBlock__write_cpp__CPPWriter_Logical( RogueClassCmdBlock* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[196] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, false );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[114] );
  if (!!(THIS->escape_label))
  {
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, THIS->escape_label ))), Rogue_literal_strings[948] );
  }
}

void RogueCmdBlock__trace_used_code( RogueClassCmdBlock* THIS )
{
  RogueCmdStatementList__trace_used_code( THIS->statements );
}

void RogueCmdBlock__update_this_type__Scope( RogueClassCmdBlock* THIS, RogueClassScope* scope_0 )
{
  RogueCmdStatementList__update_this_type__Scope( THIS->statements, scope_0 );
}

RogueClassCmdBlock* RogueCmdBlock__init_object( RogueClassCmdBlock* THIS )
{
  return (RogueClassCmdBlock*)(THIS);
}

RogueClassCmdBlock* RogueCmdBlock__init__Token_Int32( RogueClassCmdBlock* THIS, RogueClassToken* _auto_1775_0, RogueInt32 _auto_1776_1 )
{
  THIS->_control_type = _auto_1776_1;
  THIS->t = _auto_1775_0;
  THIS->statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
  return (RogueClassCmdBlock*)(THIS);
}

RogueClassCmdBlock* RogueCmdBlock__init__Token_CmdStatementList_Int32( RogueClassCmdBlock* THIS, RogueClassToken* _auto_1777_0, RogueClassCmdStatementList* _auto_1778_1, RogueInt32 _auto_1779_2 )
{
  THIS->_control_type = _auto_1779_2;
  THIS->statements = _auto_1778_1;
  THIS->t = _auto_1777_0;
  return (RogueClassCmdBlock*)(THIS);
}

RogueString* RogueCmdTaskControlSectionArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[754]);
}

RogueString* RogueString_DefinitionTableEntryList__to_String( RogueTableEntry_of_String_DefinitionList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_DefinitionList* _auto_2673_2 = (THIS);
    RogueInt32 _auto_2674_3 = (0);
    for (;_auto_2674_3 < _auto_2673_2->count;++_auto_2674_3)
    {
      RogueClassString_DefinitionTableEntry* value_4 = (((RogueClassString_DefinitionTableEntry*)(_auto_2673_2->data->objects[_auto_2674_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_DefinitionTableEntryList__type_name( RogueTableEntry_of_String_DefinitionList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[715]);
}

RogueTableEntry_of_String_DefinitionList* RogueString_DefinitionTableEntryList__init_object( RogueTableEntry_of_String_DefinitionList* THIS )
{
  return (RogueTableEntry_of_String_DefinitionList*)(THIS);
}

RogueTableEntry_of_String_DefinitionList* RogueString_DefinitionTableEntryList__init__Int32_String_DefinitionTableEntry( RogueTableEntry_of_String_DefinitionList* THIS, RogueInt32 initial_capacity_0, RogueClassString_DefinitionTableEntry* initial_value_1 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_DefinitionTableEntry*), true );
  {
    RogueInt32 i_2 = (1);
    RogueInt32 _auto_1862_3 = (initial_capacity_0);
    for (;i_2 <= _auto_1862_3;++i_2)
    {
      RogueString_DefinitionTableEntryList__add__String_DefinitionTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_DefinitionList*)(THIS);
}

RogueTableEntry_of_String_DefinitionList* RogueString_DefinitionTableEntryList__add__String_DefinitionTableEntry( RogueTableEntry_of_String_DefinitionList* THIS, RogueClassString_DefinitionTableEntry* value_0 )
{
  ((RogueString_DefinitionTableEntryList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_DefinitionList*)(THIS);
}

RogueInt32 RogueString_DefinitionTableEntryList__capacity( RogueTableEntry_of_String_DefinitionList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_DefinitionList* RogueString_DefinitionTableEntryList__reserve__Int32( RogueTableEntry_of_String_DefinitionList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassString_DefinitionTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueString_DefinitionTableEntryList__capacity( THIS ))) + ((RogueString_DefinitionTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassString_DefinitionTableEntry*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_DefinitionList*)(THIS);
}

RogueString* RogueString_DefinitionTableEntry__type_name( RogueClassString_DefinitionTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[669]);
}

RogueClassString_DefinitionTableEntry* RogueString_DefinitionTableEntry__init__String_Definition_Int32( RogueClassString_DefinitionTableEntry* THIS, RogueString* _key_0, RogueClassDefinition* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_DefinitionTableEntry*)(THIS);
}

RogueClassString_DefinitionTableEntry* RogueString_DefinitionTableEntry__init_object( RogueClassString_DefinitionTableEntry* THIS )
{
  return (RogueClassString_DefinitionTableEntry*)(THIS);
}

RogueString* RogueString_DefinitionTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[755]);
}

RogueString* RogueString_PropertyTableEntryList__to_String( RogueTableEntry_of_String_PropertyList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_PropertyList* _auto_2710_2 = (THIS);
    RogueInt32 _auto_2711_3 = (0);
    for (;_auto_2711_3 < _auto_2710_2->count;++_auto_2711_3)
    {
      RogueClassString_PropertyTableEntry* value_4 = (((RogueClassString_PropertyTableEntry*)(_auto_2710_2->data->objects[_auto_2711_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_PropertyTableEntryList__type_name( RogueTableEntry_of_String_PropertyList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[716]);
}

RogueTableEntry_of_String_PropertyList* RogueString_PropertyTableEntryList__init_object( RogueTableEntry_of_String_PropertyList* THIS )
{
  return (RogueTableEntry_of_String_PropertyList*)(THIS);
}

RogueTableEntry_of_String_PropertyList* RogueString_PropertyTableEntryList__init__Int32_String_PropertyTableEntry( RogueTableEntry_of_String_PropertyList* THIS, RogueInt32 initial_capacity_0, RogueClassString_PropertyTableEntry* initial_value_1 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_PropertyTableEntry*), true );
  {
    RogueInt32 i_2 = (1);
    RogueInt32 _auto_1901_3 = (initial_capacity_0);
    for (;i_2 <= _auto_1901_3;++i_2)
    {
      RogueString_PropertyTableEntryList__add__String_PropertyTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_PropertyList*)(THIS);
}

RogueTableEntry_of_String_PropertyList* RogueString_PropertyTableEntryList__add__String_PropertyTableEntry( RogueTableEntry_of_String_PropertyList* THIS, RogueClassString_PropertyTableEntry* value_0 )
{
  ((RogueString_PropertyTableEntryList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_PropertyList*)(THIS);
}

RogueInt32 RogueString_PropertyTableEntryList__capacity( RogueTableEntry_of_String_PropertyList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_PropertyList* RogueString_PropertyTableEntryList__reserve__Int32( RogueTableEntry_of_String_PropertyList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassString_PropertyTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueString_PropertyTableEntryList__capacity( THIS ))) + ((RogueString_PropertyTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassString_PropertyTableEntry*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_PropertyList*)(THIS);
}

RogueString* RogueString_PropertyTableEntry__type_name( RogueClassString_PropertyTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[670]);
}

RogueClassString_PropertyTableEntry* RogueString_PropertyTableEntry__init__String_Property_Int32( RogueClassString_PropertyTableEntry* THIS, RogueString* _key_0, RogueClassProperty* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_PropertyTableEntry*)(THIS);
}

RogueClassString_PropertyTableEntry* RogueString_PropertyTableEntry__init_object( RogueClassString_PropertyTableEntry* THIS )
{
  return (RogueClassString_PropertyTableEntry*)(THIS);
}

RogueString* RogueString_PropertyTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[756]);
}

RogueString* RogueString_CmdTable__to_String( RogueClassString_CmdTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_CmdTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_CmdTable__type_name( RogueClassString_CmdTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1112]);
}

RogueClassString_CmdTable* RogueString_CmdTable__init( RogueClassString_CmdTable* THIS )
{
  RogueString_CmdTable__init__Int32( THIS, 16 );
  return (RogueClassString_CmdTable*)(THIS);
}

RogueClassString_CmdTable* RogueString_CmdTable__init__Int32( RogueClassString_CmdTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_CmdTableEntryList__init__Int32_String_CmdTableEntry( ((RogueTableEntry_of_String_CmdList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_CmdList)), bin_count_0, ((RogueClassString_CmdTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_CmdTable*)(THIS);
}

RogueClassString_CmdTableEntry* RogueString_CmdTable__find__String( RogueClassString_CmdTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  RogueClassString_CmdTableEntry* entry_2 = (((RogueClassString_CmdTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( entry_2->key, key_0 )))))
    {
      return (RogueClassString_CmdTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_CmdTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_CmdTableEntry*)(((RogueClassString_CmdTableEntry*)(NULL)));
}

RogueClassCmd* RogueString_CmdTable__get__String( RogueClassString_CmdTable* THIS, RogueString* key_0 )
{
  RogueClassString_CmdTableEntry* entry_1 = (((RogueString_CmdTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassCmd*)(entry_1->value);
  }
  else
  {
    RogueClassCmd* default_value_2 = 0;
    return (RogueClassCmd*)(default_value_2);
  }
}

RogueClassString_CmdTable* RogueString_CmdTable__set__String_Cmd( RogueClassString_CmdTable* THIS, RogueString* key_0, RogueClassCmd* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_CmdTableEntry* entry_4 = (((RogueClassString_CmdTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( entry_4->key, key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_CmdTable*)(THIS);
    }
    entry_4 = ((RogueClassString_CmdTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_CmdTableEntry*)((RogueString_CmdTableEntry__init__String_Cmd_Int32( ((RogueClassString_CmdTableEntry*)ROGUE_CREATE_OBJECT(String_CmdTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_CmdTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
  return (RogueClassString_CmdTable*)(THIS);
}

RogueStringBuilder* RogueString_CmdTable__print_to__StringBuilder( RogueClassString_CmdTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_CmdTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_CmdTable* RogueString_CmdTable__init_object( RogueClassString_CmdTable* THIS )
{
  return (RogueClassString_CmdTable*)(THIS);
}

RogueString* RogueCmdCallStaticMethod__type_name( RogueClassCmdCallStaticMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1147]);
}

RogueClassCmd* RogueCmdCallStaticMethod__clone__CloneArgs( RogueClassCmdCallStaticMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCallStaticMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallStaticMethod*)ROGUE_CREATE_OBJECT(CmdCallStaticMethod))), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, clone_args_0 ))), THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))))));
}

RogueClassCmd* RogueCmdCallStaticMethod__resolve__Scope( RogueClassCmdCallStaticMethod* THIS, RogueClassScope* scope_0 )
{
  if (!(!!(THIS->context)))
  {
    THIS->context = ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), THIS->t, THIS->method_info->type_context )))));
  }
  return (RogueClassCmd*)((RogueCmdCall__resolve__Scope( ((RogueClassCmdCall*)THIS), scope_0 )));
}

void RogueCmdCallStaticMethod__write_cpp__CPPWriter_Logical( RogueClassCmdCallStaticMethod* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[66] ))), THIS->method_info->_return_type, THIS->method_info->_return_type );
  }
  RogueCPPWriter__print__String( writer_0, THIS->method_info->cpp_name );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[473] );
  RogueCPPWriter__print_cast__Type_Type_Cmd( writer_0, (call_ROGUEM64( 29, (RogueClassCmd*)(THIS->context) )), THIS->method_info->type_context, THIS->context );
  RogueInt32 i_2 = (0);
  {
    RogueClassCmdArgs* _auto_2769_4 = (THIS->args);
    RogueInt32 _auto_2770_5 = (0);
    for (;_auto_2770_5 < _auto_2769_4->count;++_auto_2770_5)
    {
      RogueClassCmd* arg_6 = (((RogueClassCmd*)(_auto_2769_4->data->objects[_auto_2770_5])));
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[469] );
      RogueClassType* param_type_3 = (((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type);
      if (((RogueType__is_aspect( param_type_3 ))))
      {
        RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[66] ))), (call_ROGUEM64( 29, (RogueClassCmd*)(arg_6) )), ((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type );
        call_ROGUEM68( 30, (RogueClassCmd*)(arg_6), writer_0, false );
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
      }
      else
      {
        call_ROGUEM68( 30, (RogueClassCmd*)(arg_6), writer_0, false );
      }
      ++i_2;
    }
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[503] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[67] );
  }
}

RogueClassCmdCallStaticMethod* RogueCmdCallStaticMethod__init_object( RogueClassCmdCallStaticMethod* THIS )
{
  return (RogueClassCmdCallStaticMethod*)(THIS);
}

RogueString* RogueFnArgArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[757]);
}

RogueString* RogueString_StringTableEntryList__to_String( RogueTableEntry_of_String_StringList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_StringList* _auto_2786_2 = (THIS);
    RogueInt32 _auto_2787_3 = (0);
    for (;_auto_2787_3 < _auto_2786_2->count;++_auto_2787_3)
    {
      RogueClassString_StringTableEntry* value_4 = (((RogueClassString_StringTableEntry*)(_auto_2786_2->data->objects[_auto_2787_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_StringTableEntryList__type_name( RogueTableEntry_of_String_StringList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[717]);
}

RogueTableEntry_of_String_StringList* RogueString_StringTableEntryList__init_object( RogueTableEntry_of_String_StringList* THIS )
{
  return (RogueTableEntry_of_String_StringList*)(THIS);
}

RogueTableEntry_of_String_StringList* RogueString_StringTableEntryList__init__Int32_String_StringTableEntry( RogueTableEntry_of_String_StringList* THIS, RogueInt32 initial_capacity_0, RogueClassString_StringTableEntry* initial_value_1 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_StringTableEntry*), true );
  {
    RogueInt32 i_2 = (1);
    RogueInt32 _auto_2199_3 = (initial_capacity_0);
    for (;i_2 <= _auto_2199_3;++i_2)
    {
      RogueString_StringTableEntryList__add__String_StringTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_StringList*)(THIS);
}

RogueTableEntry_of_String_StringList* RogueString_StringTableEntryList__add__String_StringTableEntry( RogueTableEntry_of_String_StringList* THIS, RogueClassString_StringTableEntry* value_0 )
{
  ((RogueString_StringTableEntryList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_StringList*)(THIS);
}

RogueInt32 RogueString_StringTableEntryList__capacity( RogueTableEntry_of_String_StringList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_StringList* RogueString_StringTableEntryList__reserve__Int32( RogueTableEntry_of_String_StringList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassString_StringTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueString_StringTableEntryList__capacity( THIS ))) + ((RogueString_StringTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassString_StringTableEntry*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_StringList*)(THIS);
}

RogueString* RogueString_StringTableEntry__type_name( RogueClassString_StringTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[671]);
}

RogueClassString_StringTableEntry* RogueString_StringTableEntry__init__String_String_Int32( RogueClassString_StringTableEntry* THIS, RogueString* _key_0, RogueString* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_StringTableEntry*)(THIS);
}

RogueClassString_StringTableEntry* RogueString_StringTableEntry__init_object( RogueClassString_StringTableEntry* THIS )
{
  return (RogueClassString_StringTableEntry*)(THIS);
}

RogueString* RogueString_StringTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[758]);
}

RogueString* RogueDirectiveTokenType__type_name( RogueClassDirectiveTokenType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1018]);
}

RogueClassToken* RogueDirectiveTokenType__create_token__String_Int32_Int32( RogueClassDirectiveTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ((RogueToken__init__TokenType( ((RogueClassToken*)ROGUE_CREATE_OBJECT(Token)), ((RogueClassTokenType*)(THIS)) ))), filepath_0, line_1, column_2 ))));
}

RogueLogical RogueDirectiveTokenType__is_directive( RogueClassDirectiveTokenType* THIS )
{
  return (RogueLogical)(true);
}

RogueClassDirectiveTokenType* RogueDirectiveTokenType__init_object( RogueClassDirectiveTokenType* THIS )
{
  return (RogueClassDirectiveTokenType*)(THIS);
}

RogueString* RogueStructuralDirectiveTokenType__type_name( RogueClassStructuralDirectiveTokenType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1019]);
}

RogueClassToken* RogueStructuralDirectiveTokenType__create_token__String_Int32_Int32( RogueClassStructuralDirectiveTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ((RogueToken__init__TokenType( ((RogueClassToken*)ROGUE_CREATE_OBJECT(Token)), ((RogueClassTokenType*)(THIS)) ))), filepath_0, line_1, column_2 ))));
}

RogueLogical RogueStructuralDirectiveTokenType__is_directive( RogueClassStructuralDirectiveTokenType* THIS )
{
  return (RogueLogical)(true);
}

RogueLogical RogueStructuralDirectiveTokenType__is_structure( RogueClassStructuralDirectiveTokenType* THIS )
{
  return (RogueLogical)(true);
}

RogueClassStructuralDirectiveTokenType* RogueStructuralDirectiveTokenType__init_object( RogueClassStructuralDirectiveTokenType* THIS )
{
  return (RogueClassStructuralDirectiveTokenType*)(THIS);
}

RogueString* RogueEOLTokenType__type_name( RogueClassEOLTokenType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1020]);
}

RogueClassToken* RogueEOLTokenType__create_token__String_Int32_Int32( RogueClassEOLTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ((RogueClassToken*)((RogueEOLToken__init__TokenType_String( ((RogueClassEOLToken*)ROGUE_CREATE_OBJECT(EOLToken)), ((RogueClassTokenType*)(THIS)), Rogue_literal_strings[0] )))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueEOLTokenType__create_token__String_Int32_Int32_String( RogueClassEOLTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2, RogueString* value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ((RogueClassToken*)((RogueEOLToken__init__TokenType_String( ((RogueClassEOLToken*)ROGUE_CREATE_OBJECT(EOLToken)), ((RogueClassTokenType*)(THIS)), value_3 )))), filepath_0, line_1, column_2 ))));
}

RogueLogical RogueEOLTokenType__is_structure( RogueClassEOLTokenType* THIS )
{
  return (RogueLogical)(false);
}

RogueClassEOLTokenType* RogueEOLTokenType__init_object( RogueClassEOLTokenType* THIS )
{
  return (RogueClassEOLTokenType*)(THIS);
}

RogueString* RogueStructureTokenType__type_name( RogueClassStructureTokenType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1021]);
}

RogueClassToken* RogueStructureTokenType__create_token__String_Int32_Int32( RogueClassStructureTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ((RogueToken__init__TokenType( ((RogueClassToken*)ROGUE_CREATE_OBJECT(Token)), ((RogueClassTokenType*)(THIS)) ))), filepath_0, line_1, column_2 ))));
}

RogueLogical RogueStructureTokenType__is_structure( RogueClassStructureTokenType* THIS )
{
  return (RogueLogical)(true);
}

RogueClassStructureTokenType* RogueStructureTokenType__init_object( RogueClassStructureTokenType* THIS )
{
  return (RogueClassStructureTokenType*)(THIS);
}

RogueString* RogueNativeCodeTokenType__type_name( RogueClassNativeCodeTokenType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1022]);
}

RogueClassToken* RogueNativeCodeTokenType__create_token__String_Int32_Int32_String( RogueClassNativeCodeTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2, RogueString* value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ((RogueClassToken*)((RogueNativeCodeToken__init__TokenType_String( ((RogueClassNativeCodeToken*)ROGUE_CREATE_OBJECT(NativeCodeToken)), ((RogueClassTokenType*)(THIS)), value_3 )))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueNativeCodeTokenType__create_token__Token_String( RogueClassNativeCodeTokenType* THIS, RogueClassToken* existing_0, RogueString* value_1 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ((RogueClassToken*)((RogueNativeCodeToken__init__TokenType_String( ((RogueClassNativeCodeToken*)ROGUE_CREATE_OBJECT(NativeCodeToken)), ((RogueClassTokenType*)(THIS)), value_1 )))), existing_0->filepath, existing_0->line, existing_0->column ))));
}

RogueClassNativeCodeTokenType* RogueNativeCodeTokenType__init_object( RogueClassNativeCodeTokenType* THIS )
{
  return (RogueClassNativeCodeTokenType*)(THIS);
}

RogueString* RogueOpWithAssignTokenType__type_name( RogueClassOpWithAssignTokenType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1023]);
}

RogueLogical RogueOpWithAssignTokenType__is_op_with_assign( RogueClassOpWithAssignTokenType* THIS )
{
  return (RogueLogical)(true);
}

RogueClassOpWithAssignTokenType* RogueOpWithAssignTokenType__init_object( RogueClassOpWithAssignTokenType* THIS )
{
  return (RogueClassOpWithAssignTokenType*)(THIS);
}

RogueString* RogueString_TokenListTable__to_String( RogueClassString_TokenListTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_TokenListTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_TokenListTable__type_name( RogueClassString_TokenListTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[672]);
}

RogueClassString_TokenListTable* RogueString_TokenListTable__init( RogueClassString_TokenListTable* THIS )
{
  RogueString_TokenListTable__init__Int32( THIS, 16 );
  return (RogueClassString_TokenListTable*)(THIS);
}

RogueClassString_TokenListTable* RogueString_TokenListTable__init__Int32( RogueClassString_TokenListTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_TokenListTableEntryList__init__Int32_String_TokenListTableEntry( ((RogueTableEntry_of_String_TokenListList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_TokenListList)), bin_count_0, ((RogueClassString_TokenListTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_TokenListTable*)(THIS);
}

RogueClassString_TokenListTableEntry* RogueString_TokenListTable__find__String( RogueClassString_TokenListTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  RogueClassString_TokenListTableEntry* entry_2 = (((RogueClassString_TokenListTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( entry_2->key, key_0 )))))
    {
      return (RogueClassString_TokenListTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_TokenListTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_TokenListTableEntry*)(((RogueClassString_TokenListTableEntry*)(NULL)));
}

RogueTokenList* RogueString_TokenListTable__get__String( RogueClassString_TokenListTable* THIS, RogueString* key_0 )
{
  RogueClassString_TokenListTableEntry* entry_1 = (((RogueString_TokenListTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueTokenList*)(entry_1->value);
  }
  else
  {
    RogueTokenList* default_value_2 = 0;
    return (RogueTokenList*)(default_value_2);
  }
}

RogueClassString_TokenListTable* RogueString_TokenListTable__set__String_TokenList( RogueClassString_TokenListTable* THIS, RogueString* key_0, RogueTokenList* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_TokenListTableEntry* entry_4 = (((RogueClassString_TokenListTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( entry_4->key, key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_TokenListTable*)(THIS);
    }
    entry_4 = ((RogueClassString_TokenListTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_TokenListTableEntry*)((RogueString_TokenListTableEntry__init__String_TokenList_Int32( ((RogueClassString_TokenListTableEntry*)ROGUE_CREATE_OBJECT(String_TokenListTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_TokenListTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
  return (RogueClassString_TokenListTable*)(THIS);
}

RogueStringBuilder* RogueString_TokenListTable__print_to__StringBuilder( RogueClassString_TokenListTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_TokenListTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_TokenListTable* RogueString_TokenListTable__init_object( RogueClassString_TokenListTable* THIS )
{
  return (RogueClassString_TokenListTable*)(THIS);
}

RogueString* RoguePreprocessorTokenReader__type_name( RogueClassPreprocessorTokenReader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[673]);
}

RogueClassPreprocessorTokenReader* RoguePreprocessorTokenReader__init__TokenList( RogueClassPreprocessorTokenReader* THIS, RogueTokenList* _auto_2221_0 )
{
  THIS->tokens = _auto_2221_0;
  THIS->count = THIS->tokens->count;
  return (RogueClassPreprocessorTokenReader*)(THIS);
}

RogueClassError* RoguePreprocessorTokenReader__error__String( RogueClassPreprocessorTokenReader* THIS, RogueString* message_0 )
{
  if (((RoguePreprocessorTokenReader__has_another( THIS ))))
  {
    return (RogueClassError*)(((RogueClassError*)(((RogueToken__error__String( ((RoguePreprocessorTokenReader__peek( THIS ))), message_0 ))))));
  }
  if (!!(THIS->count))
  {
    return (RogueClassError*)(((RogueClassError*)(((RogueToken__error__String( ((RogueTokenType__create_token__Token( RogueTokenType_eoi, ((RogueTokenList__last( THIS->tokens ))) ))), message_0 ))))));
  }
  return (RogueClassError*)(((RogueClassError*)(((RogueRogueError__init__String_String_Int32_Int32( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), message_0, ((RogueString*)(NULL)), 0, 0 ))))));
}

void RoguePreprocessorTokenReader__expand_definition__Token( RogueClassPreprocessorTokenReader* THIS, RogueClassToken* t_0 )
{
  RogueClassString_TokenListTableEntry* entry_1 = (((RogueString_TokenListTable__find__String( RoguePreprocessor_definitions, (call_ROGUEM43( 1, (RogueClassToken*)(t_0) )) ))));
  if (!!(entry_1))
  {
    if (!!(entry_1->value))
    {
      RogueTokenList* def_tokens_2 = (entry_1->value);
      entry_1->value = ((RogueTokenList*)(NULL));
      {
        RogueTokenList* _auto_2827_3 = (def_tokens_2);
        RogueInt32 _auto_2828_4 = ((_auto_2827_3->count - 1));
        for (;_auto_2828_4 >= 0;--_auto_2828_4)
        {
          RogueClassToken* def_t_5 = (((RogueClassToken*)(_auto_2827_3->data->objects[_auto_2828_4])));
          if (((void*)t_0->_type) == ((void*)RogueTokenType_identifier))
          {
            RoguePreprocessorTokenReader__expand_definition__Token( THIS, def_t_5 );
          }
          else
          {
            RogueTokenList__add__Token( THIS->queue, t_0 );
          }
        }
      }
      entry_1->value = def_tokens_2;
      return;
    }
    else
    {
      ROGUE_THROW(((RogueToken__error__String( t_0, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[52] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM43( 1, (RogueClassToken*)(t_0) )) ))) ))), Rogue_literal_strings[12] ))) ))) ))));
    }
  }
  else
  {
    RogueTokenList__add__Token( THIS->queue, t_0 );
  }
}

RogueLogical RoguePreprocessorTokenReader__has_another( RogueClassPreprocessorTokenReader* THIS )
{
  RoguePreprocessorTokenReader__peek( THIS );
  return (RogueLogical)(!!(THIS->queue->count));
}

RogueLogical RoguePreprocessorTokenReader__next_is__TokenType( RogueClassPreprocessorTokenReader* THIS, RogueClassTokenType* type_0 )
{
  if ((THIS->position == THIS->count && THIS->queue->count == 0))
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(((void*)((RoguePreprocessorTokenReader__peek( THIS )))->_type) == ((void*)type_0));
}

RogueClassToken* RoguePreprocessorTokenReader__peek( RogueClassPreprocessorTokenReader* THIS )
{
  if (!!(THIS->queue->count))
  {
    return (RogueClassToken*)(((RogueTokenList__last( THIS->queue ))));
  }
  return (RogueClassToken*)(((RoguePreprocessorTokenReader__peek__Int32( THIS, 0 ))));
}

RogueClassToken* RoguePreprocessorTokenReader__peek__Int32( RogueClassPreprocessorTokenReader* THIS, RogueInt32 num_ahead_0 )
{
  if ((THIS->position + num_ahead_0) >= (THIS->count + THIS->queue->count))
  {
    return (RogueClassToken*)(((RogueTokenType__create_token__Token( RogueTokenType_eoi, ((RogueTokenList__last( THIS->tokens ))) ))));
  }
  while (THIS->queue->count <= num_ahead_0)
  {
    RogueClassToken* t_1 = (((RogueClassToken*)(THIS->tokens->data->objects[THIS->position])));
    ++THIS->position;
    if (((void*)t_1->_type) == ((void*)RogueTokenType_identifier))
    {
      RoguePreprocessorTokenReader__expand_definition__Token( THIS, t_1 );
    }
    else
    {
      RogueTokenList__add__Token( THIS->queue, t_1 );
    }
  }
  return (RogueClassToken*)(((RogueClassToken*)(THIS->queue->data->objects[((THIS->queue->count - num_ahead_0) - 1)])));
}

void RoguePreprocessorTokenReader__push__Token( RogueClassPreprocessorTokenReader* THIS, RogueClassToken* t_0 )
{
  RogueTokenList__add__Token( THIS->queue, t_0 );
}

RogueClassToken* RoguePreprocessorTokenReader__read( RogueClassPreprocessorTokenReader* THIS )
{
  RoguePreprocessorTokenReader__peek( THIS );
  if (THIS->queue->count == 0)
  {
    ROGUE_THROW(((RoguePreprocessorTokenReader__error__String( THIS, Rogue_literal_strings[53] ))));
  }
  return (RogueClassToken*)(((RogueTokenList__remove_last( THIS->queue ))));
}

RogueString* RoguePreprocessorTokenReader__read_identifier( RogueClassPreprocessorTokenReader* THIS )
{
  if (!(((RoguePreprocessorTokenReader__next_is__TokenType( THIS, RogueTokenType_identifier )))))
  {
    ROGUE_THROW(((RoguePreprocessorTokenReader__error__String( THIS, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[54] ))), ((RogueString__operatorPLUS__String( Rogue_literal_strings[0], (call_ROGUEM43( 8, (RogueClassToken*)(((RoguePreprocessorTokenReader__peek( THIS )))) )) ))) ))), Rogue_literal_strings[51] ))) ))) ))));
  }
  return (RogueString*)((call_ROGUEM43( 1, (RogueClassToken*)(((RoguePreprocessorTokenReader__read( THIS )))) )));
}

RogueClassPreprocessorTokenReader* RoguePreprocessorTokenReader__init_object( RogueClassPreprocessorTokenReader* THIS )
{
  THIS->queue = ((RogueTokenList__init( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)) )));
  return (RogueClassPreprocessorTokenReader*)(THIS);
}

RogueString* RogueCmdWhichCaseArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[759]);
}

RogueString* RogueCmdSwitch__type_name( RogueClassCmdSwitch* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1036]);
}

RogueClassCmdSwitch* RogueCmdSwitch__clone__CloneArgs( RogueClassCmdSwitch* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdSwitch* result_1 = (((RogueCmdSwitch__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Int32( ((RogueClassCmdSwitch*)ROGUE_CREATE_OBJECT(CmdSwitch)), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->expression), clone_args_0 )), ((RogueCmdWhichCaseList*)(NULL)), ((RogueClassCmdWhichCase*)(NULL)), 5 ))));
  call_ROGUEM207( 35, (RogueClassCmdControlStructure*)(result_1), ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_1));
  RogueCmdWhichCaseList* cloned_cases_2 = (((RogueCmdWhichCaseList__init__Int32( ((RogueCmdWhichCaseList*)ROGUE_CREATE_OBJECT(CmdWhichCaseList)), THIS->cases->count ))));
  {
    RogueCmdWhichCaseList* _auto_2829_3 = (THIS->cases);
    RogueInt32 _auto_2830_4 = (0);
    for (;_auto_2830_4 < _auto_2829_3->count;++_auto_2830_4)
    {
      RogueClassCmdWhichCase* c_5 = (((RogueClassCmdWhichCase*)(_auto_2829_3->data->objects[_auto_2830_4])));
      RogueCmdWhichCaseList__add__CmdWhichCase( cloned_cases_2, ((RogueCmdWhichCase__clone__CloneArgs( c_5, clone_args_0 ))) );
    }
  }
  result_1->cases = cloned_cases_2;
  if (!!(THIS->case_others))
  {
    result_1->case_others = ((RogueCmdWhichCase__clone__CloneArgs( THIS->case_others, clone_args_0 )));
  }
  return (RogueClassCmdSwitch*)(result_1);
}

RogueClassCmd* RogueCmdSwitch__resolve__Scope( RogueClassCmdSwitch* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->expression = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->expression), scope_0 ));
  {
    RogueCmdWhichCaseList* _auto_2831_1 = (THIS->cases);
    RogueInt32 _auto_2832_2 = (0);
    for (;_auto_2832_2 < _auto_2831_1->count;++_auto_2832_2)
    {
      RogueClassCmdWhichCase* c_3 = (((RogueClassCmdWhichCase*)(_auto_2831_1->data->objects[_auto_2832_2])));
      RogueCmdArgs__resolve__Scope( c_3->conditions, scope_0 );
      RogueCmdStatementList__resolve__Scope( c_3->statements, scope_0 );
    }
  }
  if (!!(THIS->case_others))
  {
    RogueCmdArgs__resolve__Scope( THIS->case_others->conditions, scope_0 );
    RogueCmdStatementList__resolve__Scope( THIS->case_others->statements, scope_0 );
  }
  RogueCmdControlStructureList__remove_last( scope_0->control_stack );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdSwitch__write_cpp__CPPWriter_Logical( RogueClassCmdSwitch* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[992] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->expression), writer_0, false );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[67] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[196] );
  writer_0->indent += 2;
  {
    RogueCmdWhichCaseList* _auto_2833_2 = (THIS->cases);
    RogueInt32 _auto_2834_3 = (0);
    for (;_auto_2834_3 < _auto_2833_2->count;++_auto_2834_3)
    {
      RogueClassCmdWhichCase* c_4 = (((RogueClassCmdWhichCase*)(_auto_2833_2->data->objects[_auto_2834_3])));
      {
        RogueClassCmdArgs* _auto_2835_5 = (c_4->conditions);
        RogueInt32 _auto_2836_6 = (0);
        for (;_auto_2836_6 < _auto_2835_5->count;++_auto_2836_6)
        {
          RogueClassCmd* condition_7 = (((RogueClassCmd*)(_auto_2835_5->data->objects[_auto_2836_6])));
          RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[569] );
          call_ROGUEM68( 30, (RogueClassCmd*)(condition_7), writer_0, false );
          RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[178] );
        }
      }
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[196] );
      writer_0->indent += 2;
      RogueCmdStatementList__write_cpp__CPPWriter_Logical( c_4->statements, writer_0, false );
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[993] );
      writer_0->indent -= 2;
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[114] );
    }
  }
  if (!!(THIS->case_others))
  {
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[573] );
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[196] );
    writer_0->indent += 2;
    RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->case_others->statements, writer_0, false );
    writer_0->indent -= 2;
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[114] );
  }
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[114] );
}

void RogueCmdSwitch__trace_used_code( RogueClassCmdSwitch* THIS )
{
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->expression) );
  {
    RogueCmdWhichCaseList* _auto_2837_0 = (THIS->cases);
    RogueInt32 _auto_2838_1 = (0);
    for (;_auto_2838_1 < _auto_2837_0->count;++_auto_2838_1)
    {
      RogueClassCmdWhichCase* c_2 = (((RogueClassCmdWhichCase*)(_auto_2837_0->data->objects[_auto_2838_1])));
      RogueCmdWhichCase__trace_used_code( c_2 );
    }
  }
  if (!!(THIS->case_others))
  {
    RogueCmdWhichCase__trace_used_code( THIS->case_others );
  }
}

void RogueCmdSwitch__update_this_type__Scope( RogueClassCmdSwitch* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->expression), scope_0 );
  {
    RogueCmdWhichCaseList* _auto_2839_1 = (THIS->cases);
    RogueInt32 _auto_2840_2 = (0);
    for (;_auto_2840_2 < _auto_2839_1->count;++_auto_2840_2)
    {
      RogueClassCmdWhichCase* c_3 = (((RogueClassCmdWhichCase*)(_auto_2839_1->data->objects[_auto_2840_2])));
      RogueCmdWhichCase__update_this_type__Scope( c_3, scope_0 );
    }
  }
  if (!!(THIS->case_others))
  {
    RogueCmdWhichCase__update_this_type__Scope( THIS->case_others, scope_0 );
  }
}

RogueClassCmdSwitch* RogueCmdSwitch__init_object( RogueClassCmdSwitch* THIS )
{
  return (RogueClassCmdSwitch*)(THIS);
}

RogueClassCmdSwitch* RogueCmdSwitch__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Int32( RogueClassCmdSwitch* THIS, RogueClassToken* _auto_2235_0, RogueClassCmd* _auto_2236_1, RogueCmdWhichCaseList* _auto_2237_2, RogueClassCmdWhichCase* _auto_2238_3, RogueInt32 _auto_2239_4 )
{
  THIS->_control_type = _auto_2239_4;
  THIS->case_others = _auto_2238_3;
  THIS->cases = _auto_2237_2;
  THIS->expression = _auto_2236_1;
  THIS->t = _auto_2235_0;
  return (RogueClassCmdSwitch*)(THIS);
}

RogueString* RogueCmdCatchArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[760]);
}

RogueString* RogueCmdReadArrayElement__type_name( RogueClassCmdReadArrayElement* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1128]);
}

RogueClassCmd* RogueCmdReadArrayElement__clone__CloneArgs( RogueClassCmdReadArrayElement* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadArrayElement__init__Token_Cmd_Cmd( ((RogueClassCmdReadArrayElement*)ROGUE_CREATE_OBJECT(CmdReadArrayElement)), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->context), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->index), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdReadArrayElement__resolve__Scope( RogueClassCmdReadArrayElement* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->_array_type))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  THIS->context = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->context), scope_0 ));
  THIS->_array_type = (call_ROGUEM64( 22, (RogueClassCmd*)(THIS->context) ));
  THIS->index = ((RogueCmd__require_integer( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->index), scope_0 )) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdReadArrayElement__resolve_adjust__Scope_Int32( RogueClassCmdReadArrayElement* THIS, RogueClassScope* scope_0, RogueInt32 delta_1 )
{
  return (RogueClassCmd*)(((RogueCmdWriteArrayElement__resolve__Scope( ((RogueCmdWriteArrayElement__init__Token_Cmd_Cmd_Cmd( ((RogueClassCmdWriteArrayElement*)ROGUE_CREATE_OBJECT(CmdWriteArrayElement)), THIS->t, THIS->context, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->index), ((RogueClassCloneArgs*)(NULL)) )), ((RogueClassCmd*)(((RogueClassCmdAdd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdAdd*)ROGUE_CREATE_OBJECT(CmdAdd))), THIS->t, ((RogueClassCmd*)(THIS)), ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ((RogueClassCmdLiteralInt32*)ROGUE_CREATE_OBJECT(CmdLiteralInt32)), THIS->t, delta_1 ))))) ))))))) ))), scope_0 ))));
}

RogueClassType* Rogue_CmdReadArrayElement__type( RogueClassCmdReadArrayElement* THIS )
{
  return (RogueClassType*)(THIS->_array_type->_element_type);
}

void RogueCmdReadArrayElement__write_cpp__CPPWriter_Logical( RogueClassCmdReadArrayElement* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueClassType* element_type_2 = (THIS->_array_type->_element_type);
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_open_cast__Type_Type( writer_0, element_type_2, element_type_2 );
  }
  if (((RogueType__is_reference( element_type_2 ))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[505] );
    RogueCPPWriter__print__Type( writer_0, element_type_2 );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[944] );
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[994] );
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[995] );
  }
  else if (((RogueType__is_primitive( element_type_2 ))))
  {
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[173] );
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[996] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real32)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[997] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int64)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[998] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[999] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1000] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1001] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1002] );
      }
      else
      {
        ROGUE_THROW(((RogueToken__error__String( THIS->t, Rogue_literal_strings[1003] ))));
      }
    }
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[26] );
  }
  else
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[505] ))), element_type_2 ))), Rogue_literal_strings[1004] );
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1005] );
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[26] );
  }
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_close_cast__Type_Type( writer_0, element_type_2, element_type_2 );
  }
}

void RogueCmdReadArrayElement__trace_used_code( RogueClassCmdReadArrayElement* THIS )
{
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->context) );
  RogueType__trace_used_code( THIS->_array_type );
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->index) );
}

void RogueCmdReadArrayElement__update_this_type__Scope( RogueClassCmdReadArrayElement* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->context), scope_0 );
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->index), scope_0 );
}

RogueClassCmdReadArrayElement* RogueCmdReadArrayElement__init_object( RogueClassCmdReadArrayElement* THIS )
{
  return (RogueClassCmdReadArrayElement*)(THIS);
}

RogueClassCmdReadArrayElement* RogueCmdReadArrayElement__init__Token_Cmd_Cmd( RogueClassCmdReadArrayElement* THIS, RogueClassToken* _auto_2336_0, RogueClassCmd* _auto_2337_1, RogueClassCmd* _auto_2338_2 )
{
  THIS->index = _auto_2338_2;
  THIS->context = _auto_2337_1;
  THIS->t = _auto_2336_0;
  return (RogueClassCmdReadArrayElement*)(THIS);
}

RogueString* RogueCmdWriteArrayElement__type_name( RogueClassCmdWriteArrayElement* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1129]);
}

RogueClassCmd* RogueCmdWriteArrayElement__clone__CloneArgs( RogueClassCmdWriteArrayElement* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdWriteArrayElement__init__Token_Cmd_Cmd_Cmd( ((RogueClassCmdWriteArrayElement*)ROGUE_CREATE_OBJECT(CmdWriteArrayElement)), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->context), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->index), clone_args_0 )), (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdWriteArrayElement__resolve__Scope( RogueClassCmdWriteArrayElement* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->_array_type))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  THIS->context = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->context), scope_0 ));
  THIS->_array_type = (call_ROGUEM64( 22, (RogueClassCmd*)(THIS->context) ));
  THIS->index = ((RogueCmd__require_integer( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->index), scope_0 )) )));
  THIS->new_value = (call_ROGUEM56( 25, (RogueClassCmd*)((call_ROGUEM57( 5, (RogueClassCmd*)(((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->new_value), scope_0 )) )))), THIS->_array_type->_element_type, scope_0 ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdWriteArrayElement__type( RogueClassCmdWriteArrayElement* THIS )
{
  return (RogueClassType*)(THIS->_array_type->_element_type);
}

void RogueCmdWriteArrayElement__write_cpp__CPPWriter_Logical( RogueClassCmdWriteArrayElement* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueClassType* element_type_2 = (THIS->_array_type->_element_type);
  if (((RogueType__is_primitive( element_type_2 ))))
  {
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[173] );
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[996] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real32)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[997] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int64)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[998] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[999] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1000] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1001] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1002] );
      }
    }
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1006] );
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->new_value), writer_0, false );
  }
  else if (((RogueType__is_reference( element_type_2 ))))
  {
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[173] );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1007] );
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1006] );
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->new_value), writer_0, false );
  }
  else
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[505] ))), element_type_2 ))), Rogue_literal_strings[1004] );
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1005] );
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1006] );
    call_ROGUEM68( 30, (RogueClassCmd*)(THIS->new_value), writer_0, false );
  }
}

void RogueCmdWriteArrayElement__trace_used_code( RogueClassCmdWriteArrayElement* THIS )
{
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->context) );
  RogueType__trace_used_code( THIS->_array_type );
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->new_value) );
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->index) );
}

void RogueCmdWriteArrayElement__update_this_type__Scope( RogueClassCmdWriteArrayElement* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->context), scope_0 );
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->new_value), scope_0 );
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->index), scope_0 );
}

RogueClassCmdWriteArrayElement* RogueCmdWriteArrayElement__init_object( RogueClassCmdWriteArrayElement* THIS )
{
  return (RogueClassCmdWriteArrayElement*)(THIS);
}

RogueClassCmdWriteArrayElement* RogueCmdWriteArrayElement__init__Token_Cmd_Cmd_Cmd( RogueClassCmdWriteArrayElement* THIS, RogueClassToken* _auto_2339_0, RogueClassCmd* _auto_2340_1, RogueClassCmd* _auto_2341_2, RogueClassCmd* _auto_2342_3 )
{
  THIS->new_value = _auto_2342_3;
  THIS->index = _auto_2341_2;
  THIS->context = _auto_2340_1;
  THIS->t = _auto_2339_0;
  return (RogueClassCmdWriteArrayElement*)(THIS);
}

RogueString* RogueCmdConvertToPrimitiveType__type_name( RogueClassCmdConvertToPrimitiveType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1110]);
}

RogueClassCmd* RogueCmdConvertToPrimitiveType__clone__CloneArgs( RogueClassCmdConvertToPrimitiveType* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdConvertToPrimitiveType*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdConvertToPrimitiveType*)ROGUE_CREATE_OBJECT(CmdConvertToPrimitiveType))), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->operand), clone_args_0 )), THIS->_target_type ))))))));
}

RogueClassCmd* RogueCmdConvertToPrimitiveType__resolve__Scope( RogueClassCmdConvertToPrimitiveType* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = ((RogueCmd__require_value( (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->operand), scope_0 )) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdConvertToPrimitiveType__write_cpp__CPPWriter_Logical( RogueClassCmdConvertToPrimitiveType* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[505] ))), THIS->_target_type->cpp_class_name ))), Rogue_literal_strings[944] );
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->operand), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[462] );
}

RogueClassCmdConvertToPrimitiveType* RogueCmdConvertToPrimitiveType__init_object( RogueClassCmdConvertToPrimitiveType* THIS )
{
  return (RogueClassCmdConvertToPrimitiveType*)(THIS);
}

RogueString* RogueCmdSelectCaseArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[761]);
}

RogueString* RogueCmdSelectCaseListReader__type_name( RogueClassCmdSelectCaseListReader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1113]);
}

RogueLogical RogueCmdSelectCaseListReader__has_another( RogueClassCmdSelectCaseListReader* THIS )
{
  if (THIS->is_limited)
  {
    return (RogueLogical)(THIS->position < THIS->limit);
  }
  else
  {
    return (RogueLogical)(THIS->position < THIS->list->count);
  }
}

RogueClassCmdSelectCase* RogueCmdSelectCaseListReader__read( RogueClassCmdSelectCaseListReader* THIS )
{
  ++THIS->position;
  return (RogueClassCmdSelectCase*)(((RogueClassCmdSelectCase*)(THIS->list->data->objects[(THIS->position - 1)])));
}

RogueClassCmdSelectCaseListReader* RogueCmdSelectCaseListReader__init__CmdSelectCaseList_Int32( RogueClassCmdSelectCaseListReader* THIS, RogueCmdSelectCaseList* _auto_2399_0, RogueInt32 _auto_2400_1 )
{
  THIS->position = _auto_2400_1;
  THIS->list = _auto_2399_0;
  return (RogueClassCmdSelectCaseListReader*)(THIS);
}

RogueClassCmdSelectCaseListReader* RogueCmdSelectCaseListReader__init_object( RogueClassCmdSelectCaseListReader* THIS )
{
  return (RogueClassCmdSelectCaseListReader*)(THIS);
}

RogueString* RogueCmdAdjustGlobal__type_name( RogueClassCmdAdjustGlobal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1130]);
}

RogueClassCmd* RogueCmdAdjustGlobal__clone__CloneArgs( RogueClassCmdAdjustGlobal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAdjustGlobal__init__Token_Property_Int32( ((RogueClassCmdAdjustGlobal*)ROGUE_CREATE_OBJECT(CmdAdjustGlobal)), THIS->t, THIS->global_info, THIS->delta ))))));
}

RogueClassCmd* RogueCmdAdjustGlobal__resolve__Scope( RogueClassCmdAdjustGlobal* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdAdjustGlobal__type( RogueClassCmdAdjustGlobal* THIS )
{
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

void RogueCmdAdjustGlobal__write_cpp__CPPWriter_Logical( RogueClassCmdAdjustGlobal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (THIS->delta > 0)
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[203] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[4] );
  }
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] ))), THIS->global_info->type_context->cpp_name ))), Rogue_literal_strings[406] );
  RogueCPPWriter__print__String( writer_0, THIS->global_info->cpp_name );
}

void RogueCmdAdjustGlobal__trace_used_code( RogueClassCmdAdjustGlobal* THIS )
{
  RogueType__trace_used_code( THIS->global_info->type_context );
  RogueType__trace_used_code( THIS->global_info->_type );
}

void RogueCmdAdjustGlobal__update_this_type__Scope( RogueClassCmdAdjustGlobal* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdAdjustGlobal* RogueCmdAdjustGlobal__init_object( RogueClassCmdAdjustGlobal* THIS )
{
  return (RogueClassCmdAdjustGlobal*)(THIS);
}

RogueClassCmdAdjustGlobal* RogueCmdAdjustGlobal__init__Token_Property_Int32( RogueClassCmdAdjustGlobal* THIS, RogueClassToken* _auto_2610_0, RogueClassProperty* _auto_2611_1, RogueInt32 _auto_2612_2 )
{
  THIS->delta = _auto_2612_2;
  THIS->global_info = _auto_2611_1;
  THIS->t = _auto_2610_0;
  return (RogueClassCmdAdjustGlobal*)(THIS);
}

RogueString* RogueCmdAdjustProperty__type_name( RogueClassCmdAdjustProperty* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1131]);
}

RogueClassCmd* RogueCmdAdjustProperty__clone__CloneArgs( RogueClassCmdAdjustProperty* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAdjustProperty__init__Token_Cmd_Property_Int32( ((RogueClassCmdAdjustProperty*)ROGUE_CREATE_OBJECT(CmdAdjustProperty)), THIS->t, (call_ROGUEM58( 6, (RogueClassCmd*)(THIS->context), clone_args_0 )), THIS->property_info, THIS->delta ))))));
}

RogueClassCmd* RogueCmdAdjustProperty__resolve__Scope( RogueClassCmdAdjustProperty* THIS, RogueClassScope* scope_0 )
{
  THIS->context = (call_ROGUEM56( 25, (RogueClassCmd*)(THIS->context), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdAdjustProperty__type( RogueClassCmdAdjustProperty* THIS )
{
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

void RogueCmdAdjustProperty__write_cpp__CPPWriter_Logical( RogueClassCmdAdjustProperty* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (THIS->delta > 0)
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[203] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[4] );
  }
  call_ROGUEM68( 30, (RogueClassCmd*)(THIS->context), writer_0, false );
  RogueCPPWriter__print_access_operator__Type( writer_0, (call_ROGUEM64( 29, (RogueClassCmd*)(THIS->context) )) );
  RogueCPPWriter__print__String( writer_0, THIS->property_info->cpp_name );
}

void RogueCmdAdjustProperty__trace_used_code( RogueClassCmdAdjustProperty* THIS )
{
  call_ROGUEM63( 31, (RogueClassCmd*)(THIS->context) );
  RogueType__trace_used_code( THIS->property_info->type_context );
  RogueType__trace_used_code( THIS->property_info->_type );
}

void RogueCmdAdjustProperty__update_this_type__Scope( RogueClassCmdAdjustProperty* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM60( 32, (RogueClassCmd*)(THIS->context), scope_0 );
}

RogueClassCmdAdjustProperty* RogueCmdAdjustProperty__init_object( RogueClassCmdAdjustProperty* THIS )
{
  return (RogueClassCmdAdjustProperty*)(THIS);
}

RogueClassCmdAdjustProperty* RogueCmdAdjustProperty__init__Token_Cmd_Property_Int32( RogueClassCmdAdjustProperty* THIS, RogueClassToken* _auto_2613_0, RogueClassCmd* _auto_2614_1, RogueClassProperty* _auto_2615_2, RogueInt32 _auto_2616_3 )
{
  THIS->delta = _auto_2616_3;
  THIS->property_info = _auto_2615_2;
  THIS->context = _auto_2614_1;
  THIS->t = _auto_2613_0;
  return (RogueClassCmdAdjustProperty*)(THIS);
}

RogueString* RogueString_CmdTableEntryList__to_String( RogueTableEntry_of_String_CmdList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_CmdList* _auto_2896_2 = (THIS);
    RogueInt32 _auto_2897_3 = (0);
    for (;_auto_2897_3 < _auto_2896_2->count;++_auto_2897_3)
    {
      RogueClassString_CmdTableEntry* value_4 = (((RogueClassString_CmdTableEntry*)(_auto_2896_2->data->objects[_auto_2897_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_CmdTableEntryList__type_name( RogueTableEntry_of_String_CmdList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1115]);
}

RogueTableEntry_of_String_CmdList* RogueString_CmdTableEntryList__init_object( RogueTableEntry_of_String_CmdList* THIS )
{
  return (RogueTableEntry_of_String_CmdList*)(THIS);
}

RogueTableEntry_of_String_CmdList* RogueString_CmdTableEntryList__init__Int32_String_CmdTableEntry( RogueTableEntry_of_String_CmdList* THIS, RogueInt32 initial_capacity_0, RogueClassString_CmdTableEntry* initial_value_1 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_CmdTableEntry*), true );
  {
    RogueInt32 i_2 = (1);
    RogueInt32 _auto_2762_3 = (initial_capacity_0);
    for (;i_2 <= _auto_2762_3;++i_2)
    {
      RogueString_CmdTableEntryList__add__String_CmdTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_CmdList*)(THIS);
}

RogueTableEntry_of_String_CmdList* RogueString_CmdTableEntryList__add__String_CmdTableEntry( RogueTableEntry_of_String_CmdList* THIS, RogueClassString_CmdTableEntry* value_0 )
{
  ((RogueString_CmdTableEntryList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_CmdList*)(THIS);
}

RogueInt32 RogueString_CmdTableEntryList__capacity( RogueTableEntry_of_String_CmdList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_CmdList* RogueString_CmdTableEntryList__reserve__Int32( RogueTableEntry_of_String_CmdList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassString_CmdTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueString_CmdTableEntryList__capacity( THIS ))) + ((RogueString_CmdTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassString_CmdTableEntry*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_CmdList*)(THIS);
}

RogueString* RogueString_CmdTableEntry__type_name( RogueClassString_CmdTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1114]);
}

RogueClassString_CmdTableEntry* RogueString_CmdTableEntry__init__String_Cmd_Int32( RogueClassString_CmdTableEntry* THIS, RogueString* _key_0, RogueClassCmd* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_CmdTableEntry*)(THIS);
}

RogueClassString_CmdTableEntry* RogueString_CmdTableEntry__init_object( RogueClassString_CmdTableEntry* THIS )
{
  return (RogueClassString_CmdTableEntry*)(THIS);
}

RogueString* RogueString_CmdTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1116]);
}

RogueString* RogueNativeCodeToken__to_String( RogueClassNativeCodeToken* THIS )
{
  return (RogueString*)(THIS->value);
}

RogueString* RogueNativeCodeToken__type_name( RogueClassNativeCodeToken* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1117]);
}

RogueString* RogueNativeCodeToken__quoted_name( RogueClassNativeCodeToken* THIS )
{
  if (((void*)THIS->_type) == ((void*)RogueTokenType_keyword_nativeHeader))
  {
    return (RogueString*)(Rogue_literal_strings[137]);
  }
  return (RogueString*)(Rogue_literal_strings[136]);
}

RogueClassNativeCodeToken* RogueNativeCodeToken__init_object( RogueClassNativeCodeToken* THIS )
{
  return (RogueClassNativeCodeToken*)(THIS);
}

RogueClassNativeCodeToken* RogueNativeCodeToken__init__TokenType_String( RogueClassNativeCodeToken* THIS, RogueClassTokenType* _auto_2818_0, RogueString* _auto_2819_1 )
{
  THIS->value = _auto_2819_1;
  THIS->_type = _auto_2818_0;
  return (RogueClassNativeCodeToken*)(THIS);
}

RogueString* RogueString_TokenListTableEntryList__to_String( RogueTableEntry_of_String_TokenListList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_TokenListList* _auto_2933_2 = (THIS);
    RogueInt32 _auto_2934_3 = (0);
    for (;_auto_2934_3 < _auto_2933_2->count;++_auto_2934_3)
    {
      RogueClassString_TokenListTableEntry* value_4 = (((RogueClassString_TokenListTableEntry*)(_auto_2933_2->data->objects[_auto_2934_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[1] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_TokenListTableEntryList__type_name( RogueTableEntry_of_String_TokenListList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[718]);
}

RogueTableEntry_of_String_TokenListList* RogueString_TokenListTableEntryList__init_object( RogueTableEntry_of_String_TokenListList* THIS )
{
  return (RogueTableEntry_of_String_TokenListList*)(THIS);
}

RogueTableEntry_of_String_TokenListList* RogueString_TokenListTableEntryList__init__Int32_String_TokenListTableEntry( RogueTableEntry_of_String_TokenListList* THIS, RogueInt32 initial_capacity_0, RogueClassString_TokenListTableEntry* initial_value_1 )
{
  THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_TokenListTableEntry*), true );
  {
    RogueInt32 i_2 = (1);
    RogueInt32 _auto_2820_3 = (initial_capacity_0);
    for (;i_2 <= _auto_2820_3;++i_2)
    {
      RogueString_TokenListTableEntryList__add__String_TokenListTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_TokenListList*)(THIS);
}

RogueTableEntry_of_String_TokenListList* RogueString_TokenListTableEntryList__add__String_TokenListTableEntry( RogueTableEntry_of_String_TokenListList* THIS, RogueClassString_TokenListTableEntry* value_0 )
{
  ((RogueString_TokenListTableEntryList__reserve__Int32( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_TokenListList*)(THIS);
}

RogueInt32 RogueString_TokenListTableEntryList__capacity( RogueTableEntry_of_String_TokenListList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_TokenListList* RogueString_TokenListTableEntryList__reserve__Int32( RogueTableEntry_of_String_TokenListList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueType_create_array( 10, sizeof(RogueClassString_TokenListTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 x2_2 = ((((RogueString_TokenListTableEntryList__capacity( THIS ))) + ((RogueString_TokenListTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInt32)x2_2);
    }
    RogueArray* new_data_3 = (RogueType_create_array( required_capacity_1, sizeof(RogueClassString_TokenListTableEntry*), true ));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_TokenListList*)(THIS);
}

RogueString* RogueString_TokenListTableEntry__type_name( RogueClassString_TokenListTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[674]);
}

RogueClassString_TokenListTableEntry* RogueString_TokenListTableEntry__init__String_TokenList_Int32( RogueClassString_TokenListTableEntry* THIS, RogueString* _key_0, RogueTokenList* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_TokenListTableEntry*)(THIS);
}

RogueClassString_TokenListTableEntry* RogueString_TokenListTableEntry__init_object( RogueClassString_TokenListTableEntry* THIS )
{
  return (RogueClassString_TokenListTableEntry*)(THIS);
}

RogueString* RogueString_TokenListTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[762]);
}


void Rogue_configure( int argc, const char* argv[] )
{
  if (Rogue_configured) return;
  Rogue_configured = 1;
  
  Rogue_argc = argc;
  Rogue_argv = argv;
  
  Rogue_configure_types();
  
  RogueTypeReal64 = &Rogue_types[ 0 ];
  RogueTypeInt64 = &Rogue_types[ 1 ];
  RogueTypeInt32 = &Rogue_types[ 2 ];
  RogueTypeStringBuilder = &Rogue_types[ 3 ];
  RogueTypeObject = &Rogue_types[ 4 ];
  RogueTypeByte = &Rogue_types[ 5 ];
  RogueTypeCharacter = &Rogue_types[ 6 ];
  RogueTypeLogical = &Rogue_types[ 7 ];
  RogueTypeString = &Rogue_types[ 8 ];
  RogueTypeCharacterList = &Rogue_types[ 9 ];
  RogueTypeGenericList = &Rogue_types[ 10 ];
  RogueTypeArray = &Rogue_types[ 12 ];
  RogueTypeStringReader = &Rogue_types[ 13 ];
  RogueTypeCharacterReader = &Rogue_types[ 14 ];
  RogueTypeStringList = &Rogue_types[ 15 ];
  RogueTypeGlobal = &Rogue_types[ 17 ];
  RogueTypePrintWriterAspect = &Rogue_types[ 18 ];
  RogueTypeConsole = &Rogue_types[ 19 ];
  RogueTypeCharacterWriter = &Rogue_types[ 20 ];
  RogueTypeRogueC = &Rogue_types[ 21 ];
  RogueTypeException = &Rogue_types[ 22 ];
  RogueTypeStackTrace = &Rogue_types[ 23 ];
  RogueTypeReader_of_String = &Rogue_types[ 24 ];
  RogueTypeMath = &Rogue_types[ 25 ];
  RogueTypeProgram = &Rogue_types[ 26 ];
  RogueTypeTemplateList = &Rogue_types[ 27 ];
  RogueTypeTemplate = &Rogue_types[ 28 ];
  RogueTypeString_TemplateTable = &Rogue_types[ 29 ];
  RogueTypeString_AugmentListTable = &Rogue_types[ 30 ];
  RogueTypeRequisiteItemList = &Rogue_types[ 31 ];
  RogueTypeRequisiteItem = &Rogue_types[ 32 ];
  RogueTypeMethod = &Rogue_types[ 33 ];
  RogueTypePropertyList = &Rogue_types[ 34 ];
  RogueTypeProperty = &Rogue_types[ 35 ];
  RogueTypeString_MethodListTable = &Rogue_types[ 36 ];
  RogueTypeTypeList = &Rogue_types[ 37 ];
  RogueTypeType = &Rogue_types[ 38 ];
  RogueTypeString_TypeTable = &Rogue_types[ 39 ];
  RogueTypeString_Int32Table = &Rogue_types[ 40 ];
  RogueTypeString_StringListTable = &Rogue_types[ 41 ];
  RogueTypeString_Int32TableEntry = &Rogue_types[ 42 ];
  RogueTypeInt32_TemplateTable = &Rogue_types[ 43 ];
  RogueTypeToken = &Rogue_types[ 44 ];
  RogueTypeError = &Rogue_types[ 45 ];
  RogueTypeRogueError = &Rogue_types[ 46 ];
  RogueTypeAttributes = &Rogue_types[ 48 ];
  RogueTypeCmd = &Rogue_types[ 49 ];
  RogueTypeCmdReturn = &Rogue_types[ 50 ];
  RogueTypeCmdStatement = &Rogue_types[ 51 ];
  RogueTypeCmdStatementList = &Rogue_types[ 52 ];
  RogueTypeCmdList = &Rogue_types[ 53 ];
  RogueTypeTokenType = &Rogue_types[ 54 ];
  RogueTypeCmdLabel = &Rogue_types[ 55 ];
  RogueTypeScope = &Rogue_types[ 57 ];
  RogueTypeMethodList = &Rogue_types[ 59 ];
  RogueTypeFunction_Type_RETURNSLogical = &Rogue_types[ 62 ];
  RogueTypeFunction_197 = &Rogue_types[ 63 ];
  RogueTypeFunction_198 = &Rogue_types[ 64 ];
  RogueTypeCPPWriter = &Rogue_types[ 65 ];
  RogueTypeString_MethodTable = &Rogue_types[ 66 ];
  RogueTypeLocalList = &Rogue_types[ 67 ];
  RogueTypeLocal = &Rogue_types[ 68 ];
  RogueTypeInt32List = &Rogue_types[ 70 ];
  RogueTypeByteList = &Rogue_types[ 72 ];
  RogueTypeSystem = &Rogue_types[ 74 ];
  RogueTypeString_LogicalTable = &Rogue_types[ 75 ];
  RogueTypeParserList = &Rogue_types[ 76 ];
  RogueTypeParser = &Rogue_types[ 77 ];
  RogueTypeString_ParseReaderTable = &Rogue_types[ 78 ];
  RogueTypeFile = &Rogue_types[ 79 ];
  RogueTypeTokenList = &Rogue_types[ 81 ];
  RogueTypeLineReader = &Rogue_types[ 82 ];
  RogueTypeTypeParameterList = &Rogue_types[ 83 ];
  RogueTypeTypeParameter = &Rogue_types[ 84 ];
  RogueTypeAugmentList = &Rogue_types[ 85 ];
  RogueTypeAugment = &Rogue_types[ 86 ];
  RogueTypeString_TokenTypeTable = &Rogue_types[ 88 ];
  RogueTypeLiteralCharacterToken = &Rogue_types[ 89 ];
  RogueTypeLiteralInt64Token = &Rogue_types[ 90 ];
  RogueTypeLiteralInt32Token = &Rogue_types[ 91 ];
  RogueTypeLiteralReal64Token = &Rogue_types[ 92 ];
  RogueTypeStringDataToken = &Rogue_types[ 93 ];
  RogueTypeString_TypeSpecializerTable = &Rogue_types[ 95 ];
  RogueTypeTypeSpecializer = &Rogue_types[ 97 ];
  RogueTypeTypeSpecializerList = &Rogue_types[ 98 ];
  RogueTypeTableEntry_of_String_TemplateList = &Rogue_types[ 99 ];
  RogueTypeString_TemplateTableEntry = &Rogue_types[ 100 ];
  RogueTypeTableEntry_of_String_AugmentListList = &Rogue_types[ 102 ];
  RogueTypeString_AugmentListTableEntry = &Rogue_types[ 103 ];
  RogueTypeCmdLabelList = &Rogue_types[ 105 ];
  RogueTypeString_CmdLabelTable = &Rogue_types[ 106 ];
  RogueTypeCloneArgs = &Rogue_types[ 107 ];
  RogueTypeCloneMethodArgs = &Rogue_types[ 108 ];
  RogueTypeCmdAccess = &Rogue_types[ 109 ];
  RogueTypeCmdArgs = &Rogue_types[ 110 ];
  RogueTypeCmdFlagArgList = &Rogue_types[ 111 ];
  RogueTypeCmdFlagArg = &Rogue_types[ 112 ];
  RogueTypeCmdAssign = &Rogue_types[ 113 ];
  RogueTypeCmdControlStructureList = &Rogue_types[ 114 ];
  RogueTypeCmdControlStructure = &Rogue_types[ 115 ];
  RogueTypeCmdLiteralThis = &Rogue_types[ 116 ];
  RogueTypeCmdThisContext = &Rogue_types[ 117 ];
  RogueTypeCmdGenericLoop = &Rogue_types[ 119 ];
  RogueTypeCmdLiteralInt32 = &Rogue_types[ 120 ];
  RogueTypeCmdLiteral = &Rogue_types[ 121 ];
  RogueTypeCmdCompareNE = &Rogue_types[ 122 ];
  RogueTypeCmdComparison = &Rogue_types[ 123 ];
  RogueTypeCmdBinary = &Rogue_types[ 124 ];
  RogueTypeTaskArgs = &Rogue_types[ 125 ];
  RogueTypeCmdTaskControl = &Rogue_types[ 127 ];
  RogueTypeCmdTaskControlSection = &Rogue_types[ 128 ];
  RogueTypeTableEntry_of_String_MethodListList = &Rogue_types[ 129 ];
  RogueTypeString_MethodListTableEntry = &Rogue_types[ 130 ];
  RogueTypeDefinitionList = &Rogue_types[ 132 ];
  RogueTypeDefinition = &Rogue_types[ 133 ];
  RogueTypeString_DefinitionTable = &Rogue_types[ 134 ];
  RogueTypeNativePropertyList = &Rogue_types[ 135 ];
  RogueTypeNativeProperty = &Rogue_types[ 136 ];
  RogueTypeString_PropertyTable = &Rogue_types[ 137 ];
  RogueTypeCmdLiteralNull = &Rogue_types[ 138 ];
  RogueTypeCmdCreateCompound = &Rogue_types[ 139 ];
  RogueTypeCmdLiteralLogical = &Rogue_types[ 140 ];
  RogueTypeCmdLiteralString = &Rogue_types[ 141 ];
  RogueTypeCmdWriteGlobal = &Rogue_types[ 142 ];
  RogueTypeCmdWriteProperty = &Rogue_types[ 143 ];
  RogueTypeTableEntry_of_String_TypeList = &Rogue_types[ 146 ];
  RogueTypeString_TypeTableEntry = &Rogue_types[ 147 ];
  RogueTypeTableEntry_of_String_Int32List = &Rogue_types[ 149 ];
  RogueTypeTableEntry_of_String_StringListList = &Rogue_types[ 151 ];
  RogueTypeString_StringListTableEntry = &Rogue_types[ 152 ];
  RogueTypeTableEntry_of_Int32_TemplateList = &Rogue_types[ 154 ];
  RogueTypeInt32_TemplateTableEntry = &Rogue_types[ 155 ];
  RogueTypeCmdCastToType = &Rogue_types[ 157 ];
  RogueTypeCmdTypeOperator = &Rogue_types[ 158 ];
  RogueTypeCmdLogicalize = &Rogue_types[ 159 ];
  RogueTypeCmdUnary = &Rogue_types[ 160 ];
  RogueTypeCmdCreateOptionalValue = &Rogue_types[ 161 ];
  RogueTypeCmdReadSingleton = &Rogue_types[ 162 ];
  RogueTypeCmdCallInlineNativeRoutine = &Rogue_types[ 164 ];
  RogueTypeCmdCallInlineNative = &Rogue_types[ 165 ];
  RogueTypeCmdCall = &Rogue_types[ 166 ];
  RogueTypeCmdCallNativeRoutine = &Rogue_types[ 167 ];
  RogueTypeMacroArgs = &Rogue_types[ 168 ];
  RogueTypeCmdInlineNative = &Rogue_types[ 169 ];
  RogueTypeCmdCallRoutine = &Rogue_types[ 170 ];
  RogueTypeCmdReadArrayCount = &Rogue_types[ 171 ];
  RogueTypeCmdCallInlineNativeMethod = &Rogue_types[ 172 ];
  RogueTypeCmdCallNativeMethod = &Rogue_types[ 173 ];
  RogueTypeCmdCallAspectMethod = &Rogue_types[ 174 ];
  RogueTypeCmdCallDynamicMethod = &Rogue_types[ 175 ];
  RogueTypeCmdCallMethod = &Rogue_types[ 176 ];
  RogueTypeCandidateMethods = &Rogue_types[ 177 ];
  RogueTypeCmdCreateFunction = &Rogue_types[ 178 ];
  RogueTypeFnParamList = &Rogue_types[ 179 ];
  RogueTypeFnParam = &Rogue_types[ 180 ];
  RogueTypeTableEntry_of_String_MethodList = &Rogue_types[ 183 ];
  RogueTypeString_MethodTableEntry = &Rogue_types[ 184 ];
  RogueTypeTableEntry_of_String_LogicalList = &Rogue_types[ 186 ];
  RogueTypeString_LogicalTableEntry = &Rogue_types[ 187 ];
  RogueTypeTokenReader = &Rogue_types[ 189 ];
  RogueTypeString_StringTable = &Rogue_types[ 190 ];
  RogueTypeTokenizer = &Rogue_types[ 191 ];
  RogueTypeParseReader = &Rogue_types[ 192 ];
  RogueTypePreprocessor = &Rogue_types[ 193 ];
  RogueTypeEOLToken = &Rogue_types[ 194 ];
  RogueTypeCmdAdd = &Rogue_types[ 195 ];
  RogueTypeCmdNativeHeader = &Rogue_types[ 196 ];
  RogueTypeCmdNativeCode = &Rogue_types[ 197 ];
  RogueTypeCmdIf = &Rogue_types[ 198 ];
  RogueTypeCmdWhich = &Rogue_types[ 199 ];
  RogueTypeCmdContingent = &Rogue_types[ 200 ];
  RogueTypeCmdTry = &Rogue_types[ 201 ];
  RogueTypeCmdAwait = &Rogue_types[ 202 ];
  RogueTypeCmdYield = &Rogue_types[ 203 ];
  RogueTypeCmdThrow = &Rogue_types[ 204 ];
  RogueTypeCmdFormattedString = &Rogue_types[ 205 ];
  RogueTypeCmdTrace = &Rogue_types[ 206 ];
  RogueTypeCmdEscape = &Rogue_types[ 207 ];
  RogueTypeCmdNextIteration = &Rogue_types[ 208 ];
  RogueTypeCmdNecessary = &Rogue_types[ 209 ];
  RogueTypeCmdSufficient = &Rogue_types[ 210 ];
  RogueTypeCmdAdjust = &Rogue_types[ 211 ];
  RogueTypeCmdOpWithAssign = &Rogue_types[ 212 ];
  RogueTypeCmdWhichCaseList = &Rogue_types[ 213 ];
  RogueTypeCmdWhichCase = &Rogue_types[ 214 ];
  RogueTypeCmdCatchList = &Rogue_types[ 215 ];
  RogueTypeCmdCatch = &Rogue_types[ 216 ];
  RogueTypeCmdLocalDeclaration = &Rogue_types[ 217 ];
  RogueTypeCmdAdjustLocal = &Rogue_types[ 218 ];
  RogueTypeCmdReadLocal = &Rogue_types[ 219 ];
  RogueTypeCmdCompareLE = &Rogue_types[ 220 ];
  RogueTypeCmdRange = &Rogue_types[ 221 ];
  RogueTypeCmdLocalOpWithAssign = &Rogue_types[ 222 ];
  RogueTypeCmdResolvedOpWithAssign = &Rogue_types[ 223 ];
  RogueTypeCmdRangeUpTo = &Rogue_types[ 224 ];
  RogueTypeCmdCompareGE = &Rogue_types[ 225 ];
  RogueTypeCmdForEach = &Rogue_types[ 226 ];
  RogueTypeCmdRangeDownTo = &Rogue_types[ 227 ];
  RogueTypeCmdLogicalXor = &Rogue_types[ 228 ];
  RogueTypeCmdBinaryLogical = &Rogue_types[ 229 ];
  RogueTypeCmdLogicalOr = &Rogue_types[ 230 ];
  RogueTypeCmdLogicalAnd = &Rogue_types[ 231 ];
  RogueTypeCmdCompareEQ = &Rogue_types[ 232 ];
  RogueTypeCmdCompareIs = &Rogue_types[ 233 ];
  RogueTypeCmdCompareIsNot = &Rogue_types[ 234 ];
  RogueTypeCmdCompareLT = &Rogue_types[ 235 ];
  RogueTypeCmdCompareGT = &Rogue_types[ 236 ];
  RogueTypeCmdInstanceOf = &Rogue_types[ 237 ];
  RogueTypeCmdLogicalNot = &Rogue_types[ 238 ];
  RogueTypeCmdBitwiseXor = &Rogue_types[ 239 ];
  RogueTypeCmdBitwiseOp = &Rogue_types[ 240 ];
  RogueTypeCmdBitwiseOr = &Rogue_types[ 241 ];
  RogueTypeCmdBitwiseAnd = &Rogue_types[ 242 ];
  RogueTypeCmdBitwiseShiftLeft = &Rogue_types[ 243 ];
  RogueTypeCmdBitwiseShiftRight = &Rogue_types[ 244 ];
  RogueTypeCmdBitwiseShiftRightX = &Rogue_types[ 245 ];
  RogueTypeCmdSubtract = &Rogue_types[ 246 ];
  RogueTypeCmdMultiply = &Rogue_types[ 247 ];
  RogueTypeCmdDivide = &Rogue_types[ 248 ];
  RogueTypeCmdMod = &Rogue_types[ 249 ];
  RogueTypeCmdPower = &Rogue_types[ 250 ];
  RogueTypeCmdNegate = &Rogue_types[ 251 ];
  RogueTypeCmdBitwiseNot = &Rogue_types[ 252 ];
  RogueTypeCmdGetOptionalValue = &Rogue_types[ 253 ];
  RogueTypeCmdElementAccess = &Rogue_types[ 254 ];
  RogueTypeCmdListConvert = &Rogue_types[ 255 ];
  RogueTypeCmdConvertToType = &Rogue_types[ 256 ];
  RogueTypeCmdCreateCallback = &Rogue_types[ 257 ];
  RogueTypeCmdAs = &Rogue_types[ 258 ];
  RogueTypeCmdDefaultValue = &Rogue_types[ 259 ];
  RogueTypeCmdLiteralReal64 = &Rogue_types[ 260 ];
  RogueTypeCmdLiteralInt64 = &Rogue_types[ 261 ];
  RogueTypeCmdLiteralCharacter = &Rogue_types[ 262 ];
  RogueTypeCmdCreateList = &Rogue_types[ 263 ];
  RogueTypeCmdCallPriorMethod = &Rogue_types[ 264 ];
  RogueTypeFnArgList = &Rogue_types[ 265 ];
  RogueTypeFnArg = &Rogue_types[ 266 ];
  RogueTypeCmdSelect = &Rogue_types[ 267 ];
  RogueTypeCmdSelectCaseList = &Rogue_types[ 268 ];
  RogueTypeCmdSelectCase = &Rogue_types[ 269 ];
  RogueTypeCmdTypedLiteralList = &Rogue_types[ 270 ];
  RogueTypeTableEntry_of_String_ParseReaderList = &Rogue_types[ 271 ];
  RogueTypeString_ParseReaderTableEntry = &Rogue_types[ 272 ];
  RogueTypeFileReader = &Rogue_types[ 274 ];
  RogueTypeFileWriter = &Rogue_types[ 275 ];
  RogueTypeTokenListRebuilder = &Rogue_types[ 276 ];
  RogueTypeTableEntry_of_String_TokenTypeList = &Rogue_types[ 277 ];
  RogueTypeString_TokenTypeTableEntry = &Rogue_types[ 278 ];
  RogueTypeTableEntry_of_String_TypeSpecializerList = &Rogue_types[ 280 ];
  RogueTypeString_TypeSpecializerTableEntry = &Rogue_types[ 281 ];
  RogueTypeTableEntry_of_String_CmdLabelList = &Rogue_types[ 283 ];
  RogueTypeString_CmdLabelTableEntry = &Rogue_types[ 284 ];
  RogueTypeCmdCreateArray = &Rogue_types[ 286 ];
  RogueTypeCmdCreateObject = &Rogue_types[ 287 ];
  RogueTypeCmdReadGlobal = &Rogue_types[ 288 ];
  RogueTypeCmdReadProperty = &Rogue_types[ 289 ];
  RogueTypeCmdLogicalizeOptionalValue = &Rogue_types[ 290 ];
  RogueTypeCmdWriteSingleton = &Rogue_types[ 291 ];
  RogueTypeCmdWriteLocal = &Rogue_types[ 292 ];
  RogueTypeCmdOpAssignGlobal = &Rogue_types[ 293 ];
  RogueTypeCmdOpAssignProperty = &Rogue_types[ 294 ];
  RogueTypeCmdTaskControlSectionList = &Rogue_types[ 296 ];
  RogueTypeCmdBlock = &Rogue_types[ 297 ];
  RogueTypeTableEntry_of_String_DefinitionList = &Rogue_types[ 299 ];
  RogueTypeString_DefinitionTableEntry = &Rogue_types[ 300 ];
  RogueTypeTableEntry_of_String_PropertyList = &Rogue_types[ 302 ];
  RogueTypeString_PropertyTableEntry = &Rogue_types[ 303 ];
  RogueTypeString_CmdTable = &Rogue_types[ 305 ];
  RogueTypeCmdCallStaticMethod = &Rogue_types[ 306 ];
  RogueTypeTableEntry_of_String_StringList = &Rogue_types[ 308 ];
  RogueTypeString_StringTableEntry = &Rogue_types[ 309 ];
  RogueTypeDirectiveTokenType = &Rogue_types[ 311 ];
  RogueTypeStructuralDirectiveTokenType = &Rogue_types[ 312 ];
  RogueTypeEOLTokenType = &Rogue_types[ 313 ];
  RogueTypeStructureTokenType = &Rogue_types[ 314 ];
  RogueTypeNativeCodeTokenType = &Rogue_types[ 315 ];
  RogueTypeOpWithAssignTokenType = &Rogue_types[ 316 ];
  RogueTypeString_TokenListTable = &Rogue_types[ 317 ];
  RogueTypePreprocessorTokenReader = &Rogue_types[ 318 ];
  RogueTypeCmdSwitch = &Rogue_types[ 320 ];
  RogueTypeCmdReadArrayElement = &Rogue_types[ 322 ];
  RogueTypeCmdWriteArrayElement = &Rogue_types[ 323 ];
  RogueTypeCmdConvertToPrimitiveType = &Rogue_types[ 324 ];
  RogueTypeCmdSelectCaseListReader = &Rogue_types[ 326 ];
  RogueTypeCmdSelectCaseReader = &Rogue_types[ 327 ];
  RogueTypeCmdAdjustGlobal = &Rogue_types[ 328 ];
  RogueTypeCmdAdjustProperty = &Rogue_types[ 329 ];
  RogueTypeTableEntry_of_String_CmdList = &Rogue_types[ 330 ];
  RogueTypeString_CmdTableEntry = &Rogue_types[ 331 ];
  RogueTypeNativeCodeToken = &Rogue_types[ 333 ];
  RogueTypeTableEntry_of_String_TokenListList = &Rogue_types[ 334 ];
  RogueTypeString_TokenListTableEntry = &Rogue_types[ 335 ];
  RogueTypeOptionalInt32 = &Rogue_types[ 337 ];
  RogueTypeOptionalCharacter = &Rogue_types[ 338 ];

  Rogue_literal_strings[0] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "", 0 ) ); 
  Rogue_literal_strings[1] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "null", 4 ) ); 
  Rogue_literal_strings[2] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "/Libraries/", 11 ) ); 
  Rogue_literal_strings[3] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "C++", 3 ) ); 
  Rogue_literal_strings[4] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--", 2 ) ); 
  Rogue_literal_strings[5] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--output", 8 ) ); 
  Rogue_literal_strings[6] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Output filepath expected after \"--output=\".", 43 ) ); 
  Rogue_literal_strings[7] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--execute", 9 ) ); 
  Rogue_literal_strings[8] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--debug", 7 ) ); 
  Rogue_literal_strings[9] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--libraries", 11 ) ); 
  Rogue_literal_strings[10] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "One or more paths expected after \"--libraries=\".", 48 ) ); 
  Rogue_literal_strings[11] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--libraries option specifies non-existent folder \"", 50 ) ); 
  Rogue_literal_strings[12] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\".", 2 ) ); 
  Rogue_literal_strings[13] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--main", 6 ) ); 
  Rogue_literal_strings[14] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Unexpected value for '--main' option.", 37 ) ); 
  Rogue_literal_strings[15] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--package", 9 ) ); 
  Rogue_literal_strings[16] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Java package name expected after \"--package=\" (e.g. \"com.developer.app\").", 73 ) ); 
  Rogue_literal_strings[17] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--requisite", 11 ) ); 
  Rogue_literal_strings[18] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--target", 8 ) ); 
  Rogue_literal_strings[19] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "One or more comma-separated target names expected after \"--target=\" (e.g. \"C++\").", 81 ) ); 
  Rogue_literal_strings[20] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Unknown option '", 16 ) ); 
  Rogue_literal_strings[21] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'.", 2 ) ); 
  Rogue_literal_strings[22] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Rogue Compiler v", 16 ) ); 
  Rogue_literal_strings[23] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "1.0.18", 6 ) ); 
  Rogue_literal_strings[24] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "March 8, 2016", 13 ) ); 
  Rogue_literal_strings[25] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\nUSAGE\n  roguec [options] file1.rogue [file2.rogue ...]\n\nOPTIONS\n  --main\n    Include a main() function in the output file.\n\n  --debug\n    Enables exception stack traces.\n\n  --execute[=\"args\"]\n    Use command line directives to compile and run the output of the\n    compiled .rogue program.  Automatically enables the --main option.\n\n  --libraries=\"path1[;path2...]\"\n    Add one or more additional library folders to the search path.\n\n  --output=destpath/[filename]\n    Specify the destination folder and optionally the base filename for the\n    output.\n\n  --requisite=[ClassName|ClassName.method_name(ParamType1,ParamType2,...)],...\n\n  --target=", 646 ) ); 
  Rogue_literal_strings[26] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "]", 1 ) ); 
  Rogue_literal_strings[27] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ",Mac,Windows,iOS,Android,...]\n", 30 ) ); 
  Rogue_literal_strings[28] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Rogue", 5 ) ); 
  Rogue_literal_strings[29] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Rogue_program", 13 ) ); 
  Rogue_literal_strings[30] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Internal", 8 ) ); 
  Rogue_literal_strings[31] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[Built-in Type]", 15 ) ); 
  Rogue_literal_strings[32] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Real64", 6 ) ); 
  Rogue_literal_strings[33] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Real32", 6 ) ); 
  Rogue_literal_strings[34] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Int64", 5 ) ); 
  Rogue_literal_strings[35] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Int32", 5 ) ); 
  Rogue_literal_strings[36] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Character", 9 ) ); 
  Rogue_literal_strings[37] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Byte", 4 ) ); 
  Rogue_literal_strings[38] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Logical", 7 ) ); 
  Rogue_literal_strings[39] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Object", 6 ) ); 
  Rogue_literal_strings[40] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "String", 6 ) ); 
  Rogue_literal_strings[41] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "StringBuilder", 13 ) ); 
  Rogue_literal_strings[42] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "NativeArray", 11 ) ); 
  Rogue_literal_strings[43] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "GenericList", 11 ) ); 
  Rogue_literal_strings[44] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Global", 6 ) ); 
  Rogue_literal_strings[45] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Exception", 9 ) ); 
  Rogue_literal_strings[46] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".rogue", 6 ) ); 
  Rogue_literal_strings[47] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No such file \"", 14 ) ); 
  Rogue_literal_strings[48] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "/", 1 ) ); 
  Rogue_literal_strings[49] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Can not find \"", 14 ) ); 
  Rogue_literal_strings[50] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\" to include.", 13 ) ); 
  Rogue_literal_strings[51] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".", 1 ) ); 
  Rogue_literal_strings[52] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Recursive definition for \"", 26 ) ); 
  Rogue_literal_strings[53] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Unexpected end of input.", 24 ) ); 
  Rogue_literal_strings[54] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Identifier expected, found ", 27 ) ); 
  Rogue_literal_strings[55] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'", 1 ) ); 
  Rogue_literal_strings[56] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Filepath expected.", 18 ) ); 
  Rogue_literal_strings[57] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot target folder \"", 22 ) ); 
  Rogue_literal_strings[58] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\" for a native include.", 23 ) ); 
  Rogue_literal_strings[59] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "header", 6 ) ); 
  Rogue_literal_strings[60] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "code", 4 ) ); 
  Rogue_literal_strings[61] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Syntax error - $elseIf does not match any previous $if.", 55 ) ); 
  Rogue_literal_strings[62] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Syntax error - $else does not match any previous $if.", 53 ) ); 
  Rogue_literal_strings[63] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Syntax error - $endIf does not match any previous $if.", 54 ) ); 
  Rogue_literal_strings[64] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Expected '", 10 ) ); 
  Rogue_literal_strings[65] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Syntax error in directive: '", 28 ) ); 
  Rogue_literal_strings[66] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(", 1 ) ); 
  Rogue_literal_strings[67] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ")", 1 ) ); 
  Rogue_literal_strings[68] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::", 2 ) ); 
  Rogue_literal_strings[69] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$define", 7 ) ); 
  Rogue_literal_strings[70] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$include", 8 ) ); 
  Rogue_literal_strings[71] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$includeNativeCode", 18 ) ); 
  Rogue_literal_strings[72] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$includeNativeHeader", 20 ) ); 
  Rogue_literal_strings[73] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$if", 3 ) ); 
  Rogue_literal_strings[74] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$elseIf", 7 ) ); 
  Rogue_literal_strings[75] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$else", 5 ) ); 
  Rogue_literal_strings[76] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$endIf", 6 ) ); 
  Rogue_literal_strings[77] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$requisite", 10 ) ); 
  Rogue_literal_strings[78] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "module", 6 ) ); 
  Rogue_literal_strings[79] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "using", 5 ) ); 
  Rogue_literal_strings[80] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$id", 3 ) ); 
  Rogue_literal_strings[81] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "end of line", 11 ) ); 
  Rogue_literal_strings[82] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "end of input", 12 ) ); 
  Rogue_literal_strings[83] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "augment", 7 ) ); 
  Rogue_literal_strings[84] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "case", 4 ) ); 
  Rogue_literal_strings[85] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "catch", 5 ) ); 
  Rogue_literal_strings[86] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "class", 5 ) ); 
  Rogue_literal_strings[87] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "DEFINITIONS", 11 ) ); 
  Rogue_literal_strings[88] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "else", 4 ) ); 
  Rogue_literal_strings[89] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "elseIf", 6 ) ); 
  Rogue_literal_strings[90] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endAugment", 10 ) ); 
  Rogue_literal_strings[91] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endClass", 8 ) ); 
  Rogue_literal_strings[92] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endContingent", 13 ) ); 
  Rogue_literal_strings[93] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endForEach", 10 ) ); 
  Rogue_literal_strings[94] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endFunction", 11 ) ); 
  Rogue_literal_strings[95] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endIf", 5 ) ); 
  Rogue_literal_strings[96] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endLoop", 7 ) ); 
  Rogue_literal_strings[97] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endRoutine", 10 ) ); 
  Rogue_literal_strings[98] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endTry", 6 ) ); 
  Rogue_literal_strings[99] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endWhich", 8 ) ); 
  Rogue_literal_strings[100] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endWhile", 8 ) ); 
  Rogue_literal_strings[101] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ENUMERATE", 9 ) ); 
  Rogue_literal_strings[102] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "GLOBAL", 6 ) ); 
  Rogue_literal_strings[103] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "GLOBAL_METHODS", 14 ) ); 
  Rogue_literal_strings[104] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "GLOBAL_PROPERTIES", 17 ) ); 
  Rogue_literal_strings[105] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "macro", 5 ) ); 
  Rogue_literal_strings[106] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "method", 6 ) ); 
  Rogue_literal_strings[107] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "METHODS", 7 ) ); 
  Rogue_literal_strings[108] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "others", 6 ) ); 
  Rogue_literal_strings[109] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "PROPERTIES", 10 ) ); 
  Rogue_literal_strings[110] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "routine", 7 ) ); 
  Rogue_literal_strings[111] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "satisfied", 9 ) ); 
  Rogue_literal_strings[112] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "unsatisfied", 11 ) ); 
  Rogue_literal_strings[113] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "with", 4 ) ); 
  Rogue_literal_strings[114] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "}", 1 ) ); 
  Rogue_literal_strings[115] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "}#", 2 ) ); 
  Rogue_literal_strings[116] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ">>", 2 ) ); 
  Rogue_literal_strings[117] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "await", 5 ) ); 
  Rogue_literal_strings[118] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "contingent", 10 ) ); 
  Rogue_literal_strings[119] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "escapeContingent", 16 ) ); 
  Rogue_literal_strings[120] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "escapeForEach", 13 ) ); 
  Rogue_literal_strings[121] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "escapeIf", 8 ) ); 
  Rogue_literal_strings[122] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "escapeLoop", 10 ) ); 
  Rogue_literal_strings[123] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "escapeTry", 9 ) ); 
  Rogue_literal_strings[124] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "escapeWhich", 11 ) ); 
  Rogue_literal_strings[125] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "escapeWhile", 11 ) ); 
  Rogue_literal_strings[126] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "forEach", 7 ) ); 
  Rogue_literal_strings[127] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "function", 8 ) ); 
  Rogue_literal_strings[128] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "global", 6 ) ); 
  Rogue_literal_strings[129] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "if", 2 ) ); 
  Rogue_literal_strings[130] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "in", 2 ) ); 
  Rogue_literal_strings[131] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "is", 2 ) ); 
  Rogue_literal_strings[132] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "isNot", 5 ) ); 
  Rogue_literal_strings[133] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "local", 5 ) ); 
  Rogue_literal_strings[134] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "loop", 4 ) ); 
  Rogue_literal_strings[135] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "native", 6 ) ); 
  Rogue_literal_strings[136] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "nativeCode", 10 ) ); 
  Rogue_literal_strings[137] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "nativeHeader", 12 ) ); 
  Rogue_literal_strings[138] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "necessary", 9 ) ); 
  Rogue_literal_strings[139] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "nextIteration", 13 ) ); 
  Rogue_literal_strings[140] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "noAction", 8 ) ); 
  Rogue_literal_strings[141] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "of", 2 ) ); 
  Rogue_literal_strings[142] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "return", 6 ) ); 
  Rogue_literal_strings[143] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "select", 6 ) ); 
  Rogue_literal_strings[144] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "step", 4 ) ); 
  Rogue_literal_strings[145] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "sufficient", 10 ) ); 
  Rogue_literal_strings[146] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "throw", 5 ) ); 
  Rogue_literal_strings[147] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "trace", 5 ) ); 
  Rogue_literal_strings[148] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "@trace", 6 ) ); 
  Rogue_literal_strings[149] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "try", 3 ) ); 
  Rogue_literal_strings[150] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "which", 5 ) ); 
  Rogue_literal_strings[151] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "while", 5 ) ); 
  Rogue_literal_strings[152] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "yield", 5 ) ); 
  Rogue_literal_strings[153] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "identifier", 10 ) ); 
  Rogue_literal_strings[154] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "type identifier", 15 ) ); 
  Rogue_literal_strings[155] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "and", 3 ) ); 
  Rogue_literal_strings[156] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "as", 2 ) ); 
  Rogue_literal_strings[157] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "downTo", 6 ) ); 
  Rogue_literal_strings[158] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "false", 5 ) ); 
  Rogue_literal_strings[159] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "instanceOf", 10 ) ); 
  Rogue_literal_strings[160] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "infinity", 8 ) ); 
  Rogue_literal_strings[161] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "meta", 4 ) ); 
  Rogue_literal_strings[162] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "NaN", 3 ) ); 
  Rogue_literal_strings[163] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "not", 3 ) ); 
  Rogue_literal_strings[164] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "notInstanceOf", 13 ) ); 
  Rogue_literal_strings[165] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "or", 2 ) ); 
  Rogue_literal_strings[166] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "pi", 2 ) ); 
  Rogue_literal_strings[167] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "prior", 5 ) ); 
  Rogue_literal_strings[168] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "this", 4 ) ); 
  Rogue_literal_strings[169] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "true", 4 ) ); 
  Rogue_literal_strings[170] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "xor", 3 ) ); 
  Rogue_literal_strings[171] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "&", 1 ) ); 
  Rogue_literal_strings[172] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "&=", 2 ) ); 
  Rogue_literal_strings[173] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "->", 2 ) ); 
  Rogue_literal_strings[174] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "@", 1 ) ); 
  Rogue_literal_strings[175] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\\", 1 ) ); 
  Rogue_literal_strings[176] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "^", 1 ) ); 
  Rogue_literal_strings[177] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "^=", 2 ) ); 
  Rogue_literal_strings[178] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ":", 1 ) ); 
  Rogue_literal_strings[179] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ",", 1 ) ); 
  Rogue_literal_strings[180] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "<>", 2 ) ); 
  Rogue_literal_strings[181] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".=", 2 ) ); 
  Rogue_literal_strings[182] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "..>", 3 ) ); 
  Rogue_literal_strings[183] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "{}", 2 ) ); 
  Rogue_literal_strings[184] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[]", 2 ) ); 
  Rogue_literal_strings[185] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "==", 2 ) ); 
  Rogue_literal_strings[186] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "=", 1 ) ); 
  Rogue_literal_strings[187] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "!", 1 ) ); 
  Rogue_literal_strings[188] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "=>", 2 ) ); 
  Rogue_literal_strings[189] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ">=", 2 ) ); 
  Rogue_literal_strings[190] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ">", 1 ) ); 
  Rogue_literal_strings[191] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "<=", 2 ) ); 
  Rogue_literal_strings[192] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "<", 1 ) ); 
  Rogue_literal_strings[193] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "-", 1 ) ); 
  Rogue_literal_strings[194] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "-=", 2 ) ); 
  Rogue_literal_strings[195] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "!=", 2 ) ); 
  Rogue_literal_strings[196] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "{", 1 ) ); 
  Rogue_literal_strings[197] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[", 1 ) ); 
  Rogue_literal_strings[198] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "<<", 2 ) ); 
  Rogue_literal_strings[199] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "%", 1 ) ); 
  Rogue_literal_strings[200] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "%=", 2 ) ); 
  Rogue_literal_strings[201] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "+", 1 ) ); 
  Rogue_literal_strings[202] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "+=", 2 ) ); 
  Rogue_literal_strings[203] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "++", 2 ) ); 
  Rogue_literal_strings[204] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "?", 1 ) ); 
  Rogue_literal_strings[205] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ";", 1 ) ); 
  Rogue_literal_strings[206] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ":<<:", 4 ) ); 
  Rogue_literal_strings[207] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ":>>:", 4 ) ); 
  Rogue_literal_strings[208] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ":>>>:", 5 ) ); 
  Rogue_literal_strings[209] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "/=", 2 ) ); 
  Rogue_literal_strings[210] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "~", 1 ) ); 
  Rogue_literal_strings[211] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "~=", 2 ) ); 
  Rogue_literal_strings[212] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "*", 1 ) ); 
  Rogue_literal_strings[213] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "*=", 2 ) ); 
  Rogue_literal_strings[214] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "..", 2 ) ); 
  Rogue_literal_strings[215] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "..<", 3 ) ); 
  Rogue_literal_strings[216] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "|", 1 ) ); 
  Rogue_literal_strings[217] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "|=", 2 ) ); 
  Rogue_literal_strings[218] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "||", 2 ) ); 
  Rogue_literal_strings[219] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Identifier expected.", 20 ) ); 
  Rogue_literal_strings[220] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endNativeCode", 13 ) ); 
  Rogue_literal_strings[221] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'endNativeCode' expected before EOF.", 36 ) ); 
  Rogue_literal_strings[222] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endNativeHeader", 15 ) ); 
  Rogue_literal_strings[223] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'endNativeHeader' expected before EOF.", 38 ) ); 
  Rogue_literal_strings[224] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Character expected.", 19 ) ); 
  Rogue_literal_strings[225] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Character expected; found end of line.", 38 ) ); 
  Rogue_literal_strings[226] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Escaped character expected; found end of input.", 47 ) ); 
  Rogue_literal_strings[227] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "-9223372036854775808", 20 ) ); 
  Rogue_literal_strings[228] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "-digit hex value expected; found end of file.", 45 ) ); 
  Rogue_literal_strings[229] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Invalid hex digit ", 18 ) ); 
  Rogue_literal_strings[230] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Invalid escape sequence.  Supported: \\n \\r \\s \\t \\0 \\/ \\' \\\\ \\\" \\", 65 ) ); 
  Rogue_literal_strings[231] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "uXXXX \\", 7 ) ); 
  Rogue_literal_strings[232] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "xXX.", 4 ) ); 
  Rogue_literal_strings[233] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "End of file reached while looking for end of string.", 52 ) ); 
  Rogue_literal_strings[234] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "End of input reached while looking for end of string.", 53 ) ); 
  Rogue_literal_strings[235] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Digit out of range for base ", 28 ) ); 
  Rogue_literal_strings[236] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "One or more digits expected.", 28 ) ); 
  Rogue_literal_strings[237] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "End of File reached while looking for end of verbatim string.", 61 ) ); 
  Rogue_literal_strings[238] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "define", 6 ) ); 
  Rogue_literal_strings[239] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "include", 7 ) ); 
  Rogue_literal_strings[240] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "includeNativeCode", 17 ) ); 
  Rogue_literal_strings[241] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "includeNativeHeader", 19 ) ); 
  Rogue_literal_strings[242] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "requisite", 9 ) ); 
  Rogue_literal_strings[243] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$", 1 ) ); 
  Rogue_literal_strings[244] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Use 'and' instead of '&&'.", 26 ) ); 
  Rogue_literal_strings[245] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "End of line expected after '...'.", 33 ) ); 
  Rogue_literal_strings[246] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "<<:", 3 ) ); 
  Rogue_literal_strings[247] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ">>:", 3 ) ); 
  Rogue_literal_strings[248] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ">>>:", 4 ) ); 
  Rogue_literal_strings[249] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Use 'or' instead of '||'.", 25 ) ); 
  Rogue_literal_strings[250] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Unexpected input '", 18 ) ); 
  Rogue_literal_strings[251] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "EOL", 3 ) ); 
  Rogue_literal_strings[252] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(Unicode ", 9 ) ); 
  Rogue_literal_strings[253] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Syntax error - unexpected input ", 32 ) ); 
  Rogue_literal_strings[254] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Standard", 8 ) ); 
  Rogue_literal_strings[255] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " expected, found ", 17 ) ); 
  Rogue_literal_strings[256] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "call", 4 ) ); 
  Rogue_literal_strings[257] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "A class named ", 14 ) ); 
  Rogue_literal_strings[258] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " already exists.", 16 ) ); 
  Rogue_literal_strings[259] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Unable to determine type for metadata access.", 45 ) ); 
  Rogue_literal_strings[260] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "default_value", 13 ) ); 
  Rogue_literal_strings[261] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'default_value' expected after 'meta.'.", 39 ) ); 
  Rogue_literal_strings[262] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Closing '>>' expected before end of line.", 41 ) ); 
  Rogue_literal_strings[263] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Function", 8 ) ); 
  Rogue_literal_strings[264] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "param", 5 ) ); 
  Rogue_literal_strings[265] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "List conversion function expected.", 34 ) ); 
  Rogue_literal_strings[266] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Value expected, found empty parentheses ().", 43 ) ); 
  Rogue_literal_strings[267] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[][]", 4 ) ); 
  Rogue_literal_strings[268] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Literal list content contains more dimensions than literal list type.", 69 ) ); 
  Rogue_literal_strings[269] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "PropertyList", 12 ) ); 
  Rogue_literal_strings[270] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "_auto_", 6 ) ); 
  Rogue_literal_strings[271] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "function parameters must all be typed or all be generic.", 56 ) ); 
  Rogue_literal_strings[272] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "A function with generic parameters must use '=>' to define its body.", 68 ) ); 
  Rogue_literal_strings[273] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "A function with typed parameters must use '->' to define its return type (if desired) and cannot use the generic function definition symbol '='.", 144 ) ); 
  Rogue_literal_strings[274] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Single identifier expected for control variable name.", 53 ) ); 
  Rogue_literal_strings[275] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "at", 2 ) ); 
  Rogue_literal_strings[276] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Missing element name before 'at'.", 33 ) ); 
  Rogue_literal_strings[277] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot use 'at' with a range.", 29 ) ); 
  Rogue_literal_strings[278] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot use 'at' with forEach-of.", 32 ) ); 
  Rogue_literal_strings[279] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Use forEach-in with a literal range instead of forEach-of.", 58 ) ); 
  Rogue_literal_strings[280] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Syntax error in forEach - keyword 'in' or 'of' expected.", 56 ) ); 
  Rogue_literal_strings[281] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Invalid syntax in forEach.", 26 ) ); 
  Rogue_literal_strings[282] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[Parser.parse_for_each() Parser.rogue:1680]", 43 ) ); 
  Rogue_literal_strings[283] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[INTERNAL ERROR]", 16 ) ); 
  Rogue_literal_strings[284] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Omit the 'return' in a macro method with a return type.", 55 ) ); 
  Rogue_literal_strings[285] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "() ", 3 ) ); 
  Rogue_literal_strings[286] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "  ", 2 ) ); 
  Rogue_literal_strings[287] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ":$", 2 ) ); 
  Rogue_literal_strings[288] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "A comma-separated list of values is expected.", 45 ) ); 
  Rogue_literal_strings[289] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Augment section labels should be defined in the outer scope of the method and cannot be nested inside a control structure.", 122 ) ); 
  Rogue_literal_strings[290] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "insert", 6 ) ); 
  Rogue_literal_strings[291] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "All methods implicitly define the label <<insert>> at the beginning of the method.  No duplicates are allowed.", 110 ) ); 
  Rogue_literal_strings[292] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "append", 6 ) ); 
  Rogue_literal_strings[293] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "All methods implicitly define the label <<append>> at the end of the method.  No duplicates are allowed.", 104 ) ); 
  Rogue_literal_strings[294] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Literal string expected.", 24 ) ); 
  Rogue_literal_strings[295] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Syntax error: unexpected '", 26 ) ); 
  Rogue_literal_strings[296] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "abstract", 8 ) ); 
  Rogue_literal_strings[297] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "aspect", 6 ) ); 
  Rogue_literal_strings[298] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "A class cannot be both '", 24 ) ); 
  Rogue_literal_strings[299] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "' and '", 7 ) ); 
  Rogue_literal_strings[300] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "primitive", 9 ) ); 
  Rogue_literal_strings[301] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "compound", 8 ) ); 
  Rogue_literal_strings[302] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "fallback", 8 ) ); 
  Rogue_literal_strings[303] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "functional", 10 ) ); 
  Rogue_literal_strings[304] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "immutable", 9 ) ); 
  Rogue_literal_strings[305] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "singleton", 9 ) ); 
  Rogue_literal_strings[306] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "task", 4 ) ); 
  Rogue_literal_strings[307] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Invalid attribute: ", 19 ) ); 
  Rogue_literal_strings[308] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "end_type:", 9 ) ); 
  Rogue_literal_strings[309] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " expected, found end of file.", 29 ) ); 
  Rogue_literal_strings[310] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Illegal placeholder type in augment.  Write '", 45 ) ); 
  Rogue_literal_strings[311] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "' without the specializers (<<...>>) to apply the augment to all template instances or write specific types such as ", 116 ) ); 
  Rogue_literal_strings[312] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "<<String>> to restrict the augment to that type.", 48 ) ); 
  Rogue_literal_strings[313] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "on_launch", 9 ) ); 
  Rogue_literal_strings[314] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Syntax error - unexpected ", 26 ) ); 
  Rogue_literal_strings[315] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[Command Line Arguments]", 24 ) ); 
  Rogue_literal_strings[316] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot infer the type of the global property from its initial value.  Assign a type by appending ': TypeName' to the end of the declaration.", 140 ) ); 
  Rogue_literal_strings[317] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot determine the type of the global property - either assign an initial value (global ", 90 ) ); 
  Rogue_literal_strings[318] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " = ...) or assign a type (global ", 33 ) ); 
  Rogue_literal_strings[319] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " : Int32).", 10 ) ); 
  Rogue_literal_strings[320] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Optional", 8 ) ); 
  Rogue_literal_strings[321] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "List", 4 ) ); 
  Rogue_literal_strings[322] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No ", 3 ) ); 
  Rogue_literal_strings[323] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " template accepting ", 20 ) ); 
  Rogue_literal_strings[324] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "# parameter", 11 ) ); 
  Rogue_literal_strings[325] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "#", 1 ) ); 
  Rogue_literal_strings[326] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "es", 2 ) ); 
  Rogue_literal_strings[327] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "s", 1 ) ); 
  Rogue_literal_strings[328] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " is defined.", 12 ) ); 
  Rogue_literal_strings[329] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$DataType", 9 ) ); 
  Rogue_literal_strings[330] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "create", 6 ) ); 
  Rogue_literal_strings[331] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "init", 4 ) ); 
  Rogue_literal_strings[332] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Definition expected.", 20 ) ); 
  Rogue_literal_strings[333] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[INTERNAL] ", 11 ) ); 
  Rogue_literal_strings[334] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cmd", 3 ) ); 
  Rogue_literal_strings[335] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::clone() is not implemented.", 29 ) ); 
  Rogue_literal_strings[336] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "property", 8 ) ); 
  Rogue_literal_strings[337] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "global property", 15 ) ); 
  Rogue_literal_strings[338] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot determine ", 17 ) ); 
  Rogue_literal_strings[339] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " type from initial value; append an explicit type declaration such as \": Object\" ", 81 ) ); 
  Rogue_literal_strings[340] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "An initial value or ", 20 ) ); 
  Rogue_literal_strings[341] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " type (for example, \": Object\") must be specified.", 50 ) ); 
  Rogue_literal_strings[342] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator", 8 ) ); 
  Rogue_literal_strings[343] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "to", 2 ) ); 
  Rogue_literal_strings[344] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "to_", 3 ) ); 
  Rogue_literal_strings[345] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Native expression types cannot be specified in macro methods - remove the \"->", 77 ) ); 
  Rogue_literal_strings[346] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Reference to ", 13 ) ); 
  Rogue_literal_strings[347] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " is missing required type parameters (", 38 ) ); 
  Rogue_literal_strings[348] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "<<...>>).", 9 ) ); 
  Rogue_literal_strings[349] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Too many type specializers given.", 33 ) ); 
  Rogue_literal_strings[350] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Insufficient number of type parameters in ", 42 ) ); 
  Rogue_literal_strings[351] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "; ", 2 ) ); 
  Rogue_literal_strings[352] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " given, ", 8 ) ); 
  Rogue_literal_strings[353] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " expected.", 10 ) ); 
  Rogue_literal_strings[354] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Type parameters given for non-template type.", 44 ) ); 
  Rogue_literal_strings[355] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Reference to undefined type '", 29 ) ); 
  Rogue_literal_strings[356] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Aspects can only extend other aspects.", 38 ) ); 
  Rogue_literal_strings[357] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Compounds can only extend aspects.", 34 ) ); 
  Rogue_literal_strings[358] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cyclic inheritance attempted - ", 31 ) ); 
  Rogue_literal_strings[359] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " cannot extend ", 15 ) ); 
  Rogue_literal_strings[360] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " because ", 9 ) ); 
  Rogue_literal_strings[361] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " already extends ", 17 ) ); 
  Rogue_literal_strings[362] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Class ", 6 ) ); 
  Rogue_literal_strings[363] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " can only have one base class (", 31 ) ); 
  Rogue_literal_strings[364] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " and ", 5 ) ); 
  Rogue_literal_strings[365] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " are both specified as base classes).", 37 ) ); 
  Rogue_literal_strings[366] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "A property named \"", 18 ) ); 
  Rogue_literal_strings[367] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\" already exists.", 17 ) ); 
  Rogue_literal_strings[368] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Conflicting initial values are given for property \"", 51 ) ); 
  Rogue_literal_strings[369] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\" in unrelated types ", 21 ) ); 
  Rogue_literal_strings[370] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Conflicting types given for property \"", 38 ) ); 
  Rogue_literal_strings[371] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\" - ", 4 ) ); 
  Rogue_literal_strings[372] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " in ", 4 ) ); 
  Rogue_literal_strings[373] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "type_name", 9 ) ); 
  Rogue_literal_strings[374] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Compounds cannot have initializers.  Use global create(...) methods instead.", 76 ) ); 
  Rogue_literal_strings[375] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Global methods and routines cannot be tasks.", 44 ) ); 
  Rogue_literal_strings[376] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TaskWithResult<<", 16 ) ); 
  Rogue_literal_strings[377] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Task", 4 ) ); 
  Rogue_literal_strings[378] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No type declared for parameter \"", 32 ) ); 
  Rogue_literal_strings[379] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "A routine with the signature ", 29 ) ); 
  Rogue_literal_strings[380] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " is already defined.", 20 ) ); 
  Rogue_literal_strings[381] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "A method with the signature ", 28 ) ); 
  Rogue_literal_strings[382] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No corresponding label <<", 25 ) ); 
  Rogue_literal_strings[383] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ">> in augmented code.", 21 ) ); 
  Rogue_literal_strings[384] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Type ", 5 ) ); 
  Rogue_literal_strings[385] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " already defines routine ", 25 ) ); 
  Rogue_literal_strings[386] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " already defines method ", 24 ) ); 
  Rogue_literal_strings[387] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "In ", 3 ) ); 
  Rogue_literal_strings[388] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " the overridden return type (", 29 ) ); 
  Rogue_literal_strings[389] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ") is not compatible with the prior definition return type (", 59 ) ); 
  Rogue_literal_strings[390] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ").", 2 ) ); 
  Rogue_literal_strings[391] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "init_class()", 12 ) ); 
  Rogue_literal_strings[392] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::init_class() must be declared under GLOBAL METHODS.", 53 ) ); 
  Rogue_literal_strings[393] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "init_class", 10 ) ); 
  Rogue_literal_strings[394] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "init_object()", 13 ) ); 
  Rogue_literal_strings[395] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "init_object", 11 ) ); 
  Rogue_literal_strings[396] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Alpha", 5 ) ); 
  Rogue_literal_strings[397] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "clean_up()", 10 ) ); 
  Rogue_literal_strings[398] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "clean_up() cannot return a value.", 33 ) ); 
  Rogue_literal_strings[399] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "to_String()", 11 ) ); 
  Rogue_literal_strings[400] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "to_String", 9 ) ); 
  Rogue_literal_strings[401] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "A class that is instanceOf NativeArray must also be instanceOf Array<<DataType>>.", 81 ) ); 
  Rogue_literal_strings[402] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<", 7 ) ); 
  Rogue_literal_strings[403] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "__", 2 ) ); 
  Rogue_literal_strings[404] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "__task", 6 ) ); 
  Rogue_literal_strings[405] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "context", 7 ) ); 
  Rogue_literal_strings[406] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "_", 1 ) ); 
  Rogue_literal_strings[407] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "update", 6 ) ); 
  Rogue_literal_strings[408] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "execute", 7 ) ); 
  Rogue_literal_strings[409] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ip", 2 ) ); 
  Rogue_literal_strings[410] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "__task_resolver", 15 ) ); 
  Rogue_literal_strings[411] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "result", 6 ) ); 
  Rogue_literal_strings[412] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "A local variable named \"", 24 ) ); 
  Rogue_literal_strings[413] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::resolve() is not defined.", 27 ) ); 
  Rogue_literal_strings[414] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "locals left on scope stack", 26 ) ); 
  Rogue_literal_strings[415] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "control stucture left on scope stack", 36 ) ); 
  Rogue_literal_strings[416] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " is not declared as returning a value.", 38 ) ); 
  Rogue_literal_strings[417] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::type() is not defined.", 24 ) ); 
  Rogue_literal_strings[418] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Value expected; this statement or expression does not result in a value.", 72 ) ); 
  Rogue_literal_strings[419] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " cannot be cast to required type ", 33 ) ); 
  Rogue_literal_strings[420] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No such method or routine ", 26 ) ); 
  Rogue_literal_strings[421] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " in type ", 9 ) ); 
  Rogue_literal_strings[422] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "init()", 6 ) ); 
  Rogue_literal_strings[423] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::trace_used_code() is not defined.", 35 ) ); 
  Rogue_literal_strings[424] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueProgram", 12 ) ); 
  Rogue_literal_strings[425] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".cpp", 4 ) ); 
  Rogue_literal_strings[426] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "type", 4 ) ); 
  Rogue_literal_strings[427] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "_of_", 4 ) ); 
  Rogue_literal_strings[428] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "NOT", 3 ) ); 
  Rogue_literal_strings[429] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "MOD", 3 ) ); 
  Rogue_literal_strings[430] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "AND", 3 ) ); 
  Rogue_literal_strings[431] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TIMES", 5 ) ); 
  Rogue_literal_strings[432] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "PLUS", 4 ) ); 
  Rogue_literal_strings[433] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RETURNS", 7 ) ); 
  Rogue_literal_strings[434] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "MINUS", 5 ) ); 
  Rogue_literal_strings[435] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "SLASH", 5 ) ); 
  Rogue_literal_strings[436] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "LE", 2 ) ); 
  Rogue_literal_strings[437] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "LT", 2 ) ); 
  Rogue_literal_strings[438] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "EQUALS", 6 ) ); 
  Rogue_literal_strings[439] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "GE", 2 ) ); 
  Rogue_literal_strings[440] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "GT", 2 ) ); 
  Rogue_literal_strings[441] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "POWER", 5 ) ); 
  Rogue_literal_strings[442] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "OR", 2 ) ); 
  Rogue_literal_strings[443] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "XOR", 3 ) ); 
  Rogue_literal_strings[444] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueArray", 10 ) ); 
  Rogue_literal_strings[445] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array", 5 ) ); 
  Rogue_literal_strings[446] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueClass", 10 ) ); 
  Rogue_literal_strings[447] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueType", 9 ) ); 
  Rogue_literal_strings[448] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Writing ", 8 ) ); 
  Rogue_literal_strings[449] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".h...", 5 ) ); 
  Rogue_literal_strings[450] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".h", 2 ) ); 
  Rogue_literal_strings[451] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "#include <cmath>", 16 ) ); 
  Rogue_literal_strings[452] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "struct ", 7 ) ); 
  Rogue_literal_strings[453] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " : ", 3 ) ); 
  Rogue_literal_strings[454] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "void", 4 ) ); 
  Rogue_literal_strings[455] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " : RogueObject", 14 ) ); 
  Rogue_literal_strings[456] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "// GLOBAL PROPERTIES", 20 ) ); 
  Rogue_literal_strings[457] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "static ", 7 ) ); 
  Rogue_literal_strings[458] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " ", 1 ) ); 
  Rogue_literal_strings[459] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "// PROPERTIES", 13 ) ); 
  Rogue_literal_strings[460] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "release", 7 ) ); 
  Rogue_literal_strings[461] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueObject_release(", 20 ) ); 
  Rogue_literal_strings[462] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "))", 2 ) ); 
  Rogue_literal_strings[463] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "retain", 6 ) ); 
  Rogue_literal_strings[464] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueObject_retain(", 19 ) ); 
  Rogue_literal_strings[465] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Unrecognized native code insertion marker: ", 43 ) ); 
  Rogue_literal_strings[466] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "THIS", 4 ) ); 
  Rogue_literal_strings[467] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "THIS->", 6 ) ); 
  Rogue_literal_strings[468] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "() : ", 5 ) ); 
  Rogue_literal_strings[469] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ", ", 2 ) ); 
  Rogue_literal_strings[470] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "0", 1 ) ); 
  Rogue_literal_strings[471] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "()", 2 ) ); 
  Rogue_literal_strings[472] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " {}", 3 ) ); 
  Rogue_literal_strings[473] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "( ", 2 ) ); 
  Rogue_literal_strings[474] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " value ) : value(value), exists(true) {}", 40 ) ); 
  Rogue_literal_strings[475] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " ) : ", 5 ) ); 
  Rogue_literal_strings[476] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "bool operator==( const ", 23 ) ); 
  Rogue_literal_strings[477] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " &other ) const", 15 ) ); 
  Rogue_literal_strings[478] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "if (exists)\n{\n  if (other.exists) return value == other.value;\n  else              return false;\n}\nelse\n{\n  if (other.exists) return false;\n  else              return true;\n}", 174 ) ); 
  Rogue_literal_strings[479] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "  if (", 6 ) ); 
  Rogue_literal_strings[480] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " != other.", 10 ) ); 
  Rogue_literal_strings[481] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ") return false;", 15 ) ); 
  Rogue_literal_strings[482] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "  return true;", 14 ) ); 
  Rogue_literal_strings[483] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "bool operator!=( const ", 23 ) ); 
  Rogue_literal_strings[484] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "{\n  return !(*this == other);\n}\n", 32 ) ); 
  Rogue_literal_strings[485] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "};", 2 ) ); 
  Rogue_literal_strings[486] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "extern ", 7 ) ); 
  Rogue_literal_strings[487] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " Rogue", 6 ) ); 
  Rogue_literal_strings[488] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "extern RogueType* RogueType", 27 ) ); 
  Rogue_literal_strings[489] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " THIS", 5 ) ); 
  Rogue_literal_strings[490] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "void Rogue_trace();", 19 ) ); 
  Rogue_literal_strings[491] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".cpp...", 7 ) ); 
  Rogue_literal_strings[492] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "#include <stdio.h>", 18 ) ); 
  Rogue_literal_strings[493] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "#include \"", 10 ) ); 
  Rogue_literal_strings[494] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".h\"", 3 ) ); 
  Rogue_literal_strings[495] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(*)(", 4 ) ); 
  Rogue_literal_strings[496] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ROGUEM", 6 ) ); 
  Rogue_literal_strings[497] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "typedef ", 8 ) ); 
  Rogue_literal_strings[498] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(*)", 3 ) ); 
  Rogue_literal_strings[499] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(*", 2 ) ); 
  Rogue_literal_strings[500] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " call_", 6 ) ); 
  Rogue_literal_strings[501] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "( int i, ", 9 ) ); 
  Rogue_literal_strings[502] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " p", 2 ) ); 
  Rogue_literal_strings[503] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " )", 2 ) ); 
  Rogue_literal_strings[504] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "return ", 7 ) ); 
  Rogue_literal_strings[505] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "((", 2 ) ); 
  Rogue_literal_strings[506] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ")(THIS->type->methods[i]))( THIS", 32 ) ); 
  Rogue_literal_strings[507] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ", p", 3 ) ); 
  Rogue_literal_strings[508] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " );", 3 ) ); 
  Rogue_literal_strings[509] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " = ", 3 ) ); 
  Rogue_literal_strings[510] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "void Rogue", 10 ) ); 
  Rogue_literal_strings[511] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "_trace( void* obj );", 20 ) ); 
  Rogue_literal_strings[512] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "_trace( void* obj )", 19 ) ); 
  Rogue_literal_strings[513] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "void* link;", 11 ) ); 
  Rogue_literal_strings[514] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "if ((link=((", 12 ) ); 
  Rogue_literal_strings[515] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "*)obj)->", 8 ) ); 
  Rogue_literal_strings[516] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ")) ((RogueObject*)link)->type->trace_fn( link );", 48 ) ); 
  Rogue_literal_strings[517] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "_trace( &", 9 ) ); 
  Rogue_literal_strings[518] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "if ((link=", 10 ) ); 
  Rogue_literal_strings[519] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ")) Rogue", 8 ) ); 
  Rogue_literal_strings[520] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "_trace( link );", 15 ) ); 
  Rogue_literal_strings[521] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueArray* array = (RogueArray*) obj;\nint count;", 49 ) ); 
  Rogue_literal_strings[522] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "* cur;", 6 ) ); 
  Rogue_literal_strings[523] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\nif ( !array || array->object_size < 0 ) return;\narray->object_size = ~array->object_size;\n\ncount = array->count;", 113 ) ); 
  Rogue_literal_strings[524] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "cur = ((", 8 ) ); 
  Rogue_literal_strings[525] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "*)(array->bytes)) - 1;", 22 ) ); 
  Rogue_literal_strings[526] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "while (--count >= 0)", 20 ) ); 
  Rogue_literal_strings[527] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "  Rogue", 7 ) ); 
  Rogue_literal_strings[528] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "_trace( ++cur );", 16 ) ); 
  Rogue_literal_strings[529] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;\n((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;\n", 130 ) ); 
  Rogue_literal_strings[530] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "int Rogue_type_name_index_table[] =", 35 ) ); 
  Rogue_literal_strings[531] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueInitFn Rogue_init_object_fn_table[] =", 42 ) ); 
  Rogue_literal_strings[532] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(RogueInitFn) ", 14 ) ); 
  Rogue_literal_strings[533] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueInitFn Rogue_init_fn_table[] =", 35 ) ); 
  Rogue_literal_strings[534] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueCleanUpFn Rogue_clean_up_fn_table[] =", 42 ) ); 
  Rogue_literal_strings[535] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(RogueCleanUpFn) ", 17 ) ); 
  Rogue_literal_strings[536] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueTraceFn Rogue_trace_fn_table[] =", 37 ) ); 
  Rogue_literal_strings[537] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueArray_trace", 16 ) ); 
  Rogue_literal_strings[538] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "_trace", 6 ) ); 
  Rogue_literal_strings[539] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueObject_trace", 17 ) ); 
  Rogue_literal_strings[540] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "void Rogue_trace()", 18 ) ); 
  Rogue_literal_strings[541] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "int i;", 6 ) ); 
  Rogue_literal_strings[542] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "// Trace GLOBAL PROPERTIES", 26 ) ); 
  Rogue_literal_strings[543] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "if ((link=Rogue", 15 ) ); 
  Rogue_literal_strings[544] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "// Trace singletons\nfor (i=Rogue_type_count; --i>=0; )\n{\n  RogueType* type = &Rogue_types[i];\n  if (type->_singleton)\n  {\n    type->trace_fn( type->_singleton );\n  }\n}", 167 ) ); 
  Rogue_literal_strings[545] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "void* Rogue_dynamic_method_table[] =", 36 ) ); 
  Rogue_literal_strings[546] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(void*) (", 9 ) ); 
  Rogue_literal_strings[547] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ") ", 2 ) ); 
  Rogue_literal_strings[548] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "0,", 2 ) ); 
  Rogue_literal_strings[549] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " // ", 4 ) ); 
  Rogue_literal_strings[550] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "int Rogue_type_info_table[", 26 ) ); 
  Rogue_literal_strings[551] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "] =", 3 ) ); 
  Rogue_literal_strings[552] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "// allocator_index, dynamic_method_table_index, base_class_count, base_class_index[base_class_count], ...", 105 ) ); 
  Rogue_literal_strings[553] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\\\"", 2 ) ); 
  Rogue_literal_strings[554] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\"", 1 ) ); 
  Rogue_literal_strings[555] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\\'", 2 ) ); 
  Rogue_literal_strings[556] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\\\\", 2 ) ); 
  Rogue_literal_strings[557] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\\n", 2 ) ); 
  Rogue_literal_strings[558] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "int Rogue_object_size_table[", 28 ) ); 
  Rogue_literal_strings[559] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(int) sizeof(", 13 ) ); 
  Rogue_literal_strings[560] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "int Rogue_allocator_count = ", 28 ) ); 
  Rogue_literal_strings[561] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueAllocator Rogue_allocators[", 32 ) ); 
  Rogue_literal_strings[562] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "];", 2 ) ); 
  Rogue_literal_strings[563] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "int Rogue_type_count = ", 23 ) ); 
  Rogue_literal_strings[564] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueType Rogue_types[", 22 ) ); 
  Rogue_literal_strings[565] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueType* RogueType", 20 ) ); 
  Rogue_literal_strings[566] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "int Rogue_literal_string_count = ", 33 ) ); 
  Rogue_literal_strings[567] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueString* Rogue_literal_strings[", 35 ) ); 
  Rogue_literal_strings[568] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "switch (THIS->type->index)", 26 ) ); 
  Rogue_literal_strings[569] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "case ", 5 ) ); 
  Rogue_literal_strings[570] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "  return ", 9 ) ); 
  Rogue_literal_strings[571] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "( (", 3 ) ); 
  Rogue_literal_strings[572] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ")THIS", 5 ) ); 
  Rogue_literal_strings[573] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "default:", 8 ) ); 
  Rogue_literal_strings[574] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueCallTrace __trace( \"", 25 ) ); 
  Rogue_literal_strings[575] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\" );", 4 ) ); 
  Rogue_literal_strings[576] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::write_cpp() is not defined.", 29 ) ); 
  Rogue_literal_strings[577] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "void Rogue_configure( int argc, const char* argv[] )", 52 ) ); 
  Rogue_literal_strings[578] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "if (Rogue_configured) return;\nRogue_configured = 1;\n\nRogue_argc = argc;\nRogue_argv = argv;\n\nRogue_configure_types();\n", 117 ) ); 
  Rogue_literal_strings[579] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " = &Rogue_types[ ", 17 ) ); 
  Rogue_literal_strings[580] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " ];", 3 ) ); 
  Rogue_literal_strings[581] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Rogue_literal_strings[", 22 ) ); 
  Rogue_literal_strings[582] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ", 73 ) ); 
  Rogue_literal_strings[583] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " ) ); ", 6 ) ); 
  Rogue_literal_strings[584] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "void Rogue_launch()", 19 ) ); 
  Rogue_literal_strings[585] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueErrorHandler uncaught_error_handler;\nRogue_error_handler = &uncaught_error_handler;\nif (ROGUE_SETJMP(Rogue_error_handler->info))\n{\n  if (Rogue_error_object && Rogue_error_object->type)\n  {\n    printf( \"Uncaught \" );\n    RogueType_print_name( Rogue_error_object->type );\n    printf( \".\\n\\n\" );\n\n    RogueStackTrace__print( ((RogueClassException*)Rogue_error_object)->stack_trace );\n  }\n  else\n  {\n    printf( \"Uncaught error.\\n\" );\n  }\n  return;\n}", 451 ) ); 
  Rogue_literal_strings[586] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "();", 3 ) ); 
  Rogue_literal_strings[587] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueSystem_executable_filepath = RogueString_create_from_c_string(\n    Rogue_argc ? Rogue_argv[0] : \"Rogue\", -1 );\n\nfor (int i=1; i<Rogue_argc; ++i)\n{\n  RogueStringList__add__String( RogueSystem_command_line_arguments,\n      RogueString_create_from_c_string( Rogue_argv[i], -1 ) );\n}", 284 ) ); 
  Rogue_literal_strings[588] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "// Instantiate requisite singletons", 35 ) ); 
  Rogue_literal_strings[589] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ROGUE_SINGLETON( ", 17 ) ); 
  Rogue_literal_strings[590] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueGlobal__on_launch( (RogueClassGlobal*) (RogueType_singleton(RogueTypeGlobal)) );\nRogue_collect_garbage();", 110 ) ); 
  Rogue_literal_strings[591] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "bool Rogue_update_tasks()\n{\n  // Returns true if any tasks are still active", 75 ) ); 
  Rogue_literal_strings[592] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TaskManager", 11 ) ); 
  Rogue_literal_strings[593] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "  RogueClassTaskManager* task_manager = (RogueClassTaskManager*) ROGUE_SINGLETON(TaskManager);\n  bool result = RogueTaskManager__update( task_manager );\n  Rogue_collect_garbage();\n  return result;", 196 ) ); 
  Rogue_literal_strings[594] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "  Rogue_collect_garbage();\n  return false;", 42 ) ); 
  Rogue_literal_strings[595] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "}\n", 2 ) ); 
  Rogue_literal_strings[596] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "int main( int argc, const char* argv[] )\n{\n  Rogue_configure( argc, argv );\n  Rogue_launch();\n\n  while (Rogue_update_tasks()) {}\n\n  // Give a few GC's to allow objects requiring clean-up to do so.\n  Rogue_collect_garbage( true );\n  Rogue_collect_garbage( true );\n  Rogue_collect_garbage( true );\n\n  Rogue_quit();\n\n  return 0;\n}", 327 ) ); 
  Rogue_literal_strings[597] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "clang++ -std=c++11 -fno-strict-aliasing ", 40 ) ); 
  Rogue_literal_strings[598] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".cpp -o ", 8 ) ); 
  Rogue_literal_strings[599] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " && ./", 6 ) ); 
  Rogue_literal_strings[600] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Compile target \"", 16 ) ); 
  Rogue_literal_strings[601] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\" is not supported.", 19 ) ); 
  Rogue_literal_strings[602] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "StringReader", 12 ) ); 
  Rogue_literal_strings[603] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Console", 7 ) ); 
  Rogue_literal_strings[604] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueC", 6 ) ); 
  Rogue_literal_strings[605] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "StackTrace", 10 ) ); 
  Rogue_literal_strings[606] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Math", 4 ) ); 
  Rogue_literal_strings[607] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Program", 7 ) ); 
  Rogue_literal_strings[608] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Template", 8 ) ); 
  Rogue_literal_strings[609] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Template>>", 24 ) ); 
  Rogue_literal_strings[610] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Augment[]>>", 25 ) ); 
  Rogue_literal_strings[611] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RequisiteItem", 13 ) ); 
  Rogue_literal_strings[612] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Method", 6 ) ); 
  Rogue_literal_strings[613] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Property", 8 ) ); 
  Rogue_literal_strings[614] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Method[]>>", 24 ) ); 
  Rogue_literal_strings[615] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Type", 4 ) ); 
  Rogue_literal_strings[616] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Type>>", 20 ) ); 
  Rogue_literal_strings[617] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Int32>>", 21 ) ); 
  Rogue_literal_strings[618] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,String[]>>", 24 ) ); 
  Rogue_literal_strings[619] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Int32>>", 26 ) ); 
  Rogue_literal_strings[620] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<Int32,Template>>", 23 ) ); 
  Rogue_literal_strings[621] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Token", 5 ) ); 
  Rogue_literal_strings[622] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Attributes", 10 ) ); 
  Rogue_literal_strings[623] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TokenType", 9 ) ); 
  Rogue_literal_strings[624] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Scope", 5 ) ); 
  Rogue_literal_strings[625] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Function(Type)->Logical", 23 ) ); 
  Rogue_literal_strings[626] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CPPWriter", 9 ) ); 
  Rogue_literal_strings[627] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Method>>", 22 ) ); 
  Rogue_literal_strings[628] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Local", 5 ) ); 
  Rogue_literal_strings[629] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "System", 6 ) ); 
  Rogue_literal_strings[630] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Logical>>", 23 ) ); 
  Rogue_literal_strings[631] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Parser", 6 ) ); 
  Rogue_literal_strings[632] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,ParseReader>>", 27 ) ); 
  Rogue_literal_strings[633] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "File", 4 ) ); 
  Rogue_literal_strings[634] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "LineReader", 10 ) ); 
  Rogue_literal_strings[635] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TypeParameter", 13 ) ); 
  Rogue_literal_strings[636] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Augment", 7 ) ); 
  Rogue_literal_strings[637] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,TokenType>>", 25 ) ); 
  Rogue_literal_strings[638] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,TypeSpecializer>>", 31 ) ); 
  Rogue_literal_strings[639] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TypeSpecializer", 15 ) ); 
  Rogue_literal_strings[640] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Template>>", 29 ) ); 
  Rogue_literal_strings[641] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Augment[]>>", 30 ) ); 
  Rogue_literal_strings[642] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,CmdLabel>>", 24 ) ); 
  Rogue_literal_strings[643] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CloneArgs", 9 ) ); 
  Rogue_literal_strings[644] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdTaskControlSection", 21 ) ); 
  Rogue_literal_strings[645] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Method[]>>", 29 ) ); 
  Rogue_literal_strings[646] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Definition", 10 ) ); 
  Rogue_literal_strings[647] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Definition>>", 26 ) ); 
  Rogue_literal_strings[648] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "NativeProperty", 14 ) ); 
  Rogue_literal_strings[649] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Property>>", 24 ) ); 
  Rogue_literal_strings[650] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Type>>", 25 ) ); 
  Rogue_literal_strings[651] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,String[]>>", 29 ) ); 
  Rogue_literal_strings[652] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<Int32,Template>>", 28 ) ); 
  Rogue_literal_strings[653] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "FnParam", 7 ) ); 
  Rogue_literal_strings[654] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Method>>", 27 ) ); 
  Rogue_literal_strings[655] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Logical>>", 28 ) ); 
  Rogue_literal_strings[656] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TokenReader", 11 ) ); 
  Rogue_literal_strings[657] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,String>>", 22 ) ); 
  Rogue_literal_strings[658] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Tokenizer", 9 ) ); 
  Rogue_literal_strings[659] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ParseReader", 11 ) ); 
  Rogue_literal_strings[660] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Preprocessor", 12 ) ); 
  Rogue_literal_strings[661] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "FnArg", 5 ) ); 
  Rogue_literal_strings[662] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,ParseReader>>", 32 ) ); 
  Rogue_literal_strings[663] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "FileReader", 10 ) ); 
  Rogue_literal_strings[664] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "FileWriter", 10 ) ); 
  Rogue_literal_strings[665] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ListRebuilder<<Token>>", 22 ) ); 
  Rogue_literal_strings[666] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,TokenType>>", 30 ) ); 
  Rogue_literal_strings[667] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,TypeSpecializer>>", 36 ) ); 
  Rogue_literal_strings[668] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,CmdLabel>>", 29 ) ); 
  Rogue_literal_strings[669] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Definition>>", 31 ) ); 
  Rogue_literal_strings[670] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Property>>", 29 ) ); 
  Rogue_literal_strings[671] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,String>>", 27 ) ); 
  Rogue_literal_strings[672] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Token[]>>", 23 ) ); 
  Rogue_literal_strings[673] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "PreprocessorTokenReader", 23 ) ); 
  Rogue_literal_strings[674] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Token[]>>", 28 ) ); 
  Rogue_literal_strings[675] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Character[]", 11 ) ); 
  Rogue_literal_strings[676] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "String[]", 8 ) ); 
  Rogue_literal_strings[677] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Template[]", 10 ) ); 
  Rogue_literal_strings[678] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RequisiteItem[]", 15 ) ); 
  Rogue_literal_strings[679] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Property[]", 10 ) ); 
  Rogue_literal_strings[680] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Type[]", 6 ) ); 
  Rogue_literal_strings[681] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cmd[]", 5 ) ); 
  Rogue_literal_strings[682] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Method[]", 8 ) ); 
  Rogue_literal_strings[683] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Local[]", 7 ) ); 
  Rogue_literal_strings[684] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Int32[]", 7 ) ); 
  Rogue_literal_strings[685] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Byte[]", 6 ) ); 
  Rogue_literal_strings[686] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Parser[]", 8 ) ); 
  Rogue_literal_strings[687] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Token[]", 7 ) ); 
  Rogue_literal_strings[688] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TypeParameter[]", 15 ) ); 
  Rogue_literal_strings[689] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Augment[]", 9 ) ); 
  Rogue_literal_strings[690] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TypeSpecializer[]", 17 ) ); 
  Rogue_literal_strings[691] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Template>>[]", 31 ) ); 
  Rogue_literal_strings[692] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Augment[]>>[]", 32 ) ); 
  Rogue_literal_strings[693] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLabel[]", 10 ) ); 
  Rogue_literal_strings[694] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdFlagArg[]", 12 ) ); 
  Rogue_literal_strings[695] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdControlStructure[]", 21 ) ); 
  Rogue_literal_strings[696] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Method[]>>[]", 31 ) ); 
  Rogue_literal_strings[697] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Definition[]", 12 ) ); 
  Rogue_literal_strings[698] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "NativeProperty[]", 16 ) ); 
  Rogue_literal_strings[699] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Type>>[]", 27 ) ); 
  Rogue_literal_strings[700] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Int32>>[]", 28 ) ); 
  Rogue_literal_strings[701] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,String[]>>[]", 31 ) ); 
  Rogue_literal_strings[702] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<Int32,Template>>[]", 30 ) ); 
  Rogue_literal_strings[703] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "FnParam[]", 9 ) ); 
  Rogue_literal_strings[704] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Method>>[]", 29 ) ); 
  Rogue_literal_strings[705] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Logical>>[]", 30 ) ); 
  Rogue_literal_strings[706] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdWhichCase[]", 14 ) ); 
  Rogue_literal_strings[707] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCatch[]", 10 ) ); 
  Rogue_literal_strings[708] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "FnArg[]", 7 ) ); 
  Rogue_literal_strings[709] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdSelectCase[]", 15 ) ); 
  Rogue_literal_strings[710] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,ParseReader>>[]", 34 ) ); 
  Rogue_literal_strings[711] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,TokenType>>[]", 32 ) ); 
  Rogue_literal_strings[712] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,TypeSpecializer>>[]", 38 ) ); 
  Rogue_literal_strings[713] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,CmdLabel>>[]", 31 ) ); 
  Rogue_literal_strings[714] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdTaskControlSection[]", 23 ) ); 
  Rogue_literal_strings[715] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Definition>>[]", 33 ) ); 
  Rogue_literal_strings[716] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Property>>[]", 31 ) ); 
  Rogue_literal_strings[717] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,String>>[]", 29 ) ); 
  Rogue_literal_strings[718] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Token[]>>[]", 30 ) ); 
  Rogue_literal_strings[719] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Character>>", 18 ) ); 
  Rogue_literal_strings[720] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<String>>", 15 ) ); 
  Rogue_literal_strings[721] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Type>>", 13 ) ); 
  Rogue_literal_strings[722] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Property>>", 17 ) ); 
  Rogue_literal_strings[723] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<RequisiteItem>>", 22 ) ); 
  Rogue_literal_strings[724] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Method>>", 15 ) ); 
  Rogue_literal_strings[725] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Template>>", 17 ) ); 
  Rogue_literal_strings[726] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Local>>", 14 ) ); 
  Rogue_literal_strings[727] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Int32>>", 14 ) ); 
  Rogue_literal_strings[728] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Byte>>", 13 ) ); 
  Rogue_literal_strings[729] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Parser>>", 15 ) ); 
  Rogue_literal_strings[730] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Augment>>", 16 ) ); 
  Rogue_literal_strings[731] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Token>>", 14 ) ); 
  Rogue_literal_strings[732] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TypeParameter>>", 22 ) ); 
  Rogue_literal_strings[733] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Template>>>>", 38 ) ); 
  Rogue_literal_strings[734] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Augment[]>>>>", 39 ) ); 
  Rogue_literal_strings[735] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<CmdLabel>>", 17 ) ); 
  Rogue_literal_strings[736] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Cmd>>", 12 ) ); 
  Rogue_literal_strings[737] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Method[]>>>>", 38 ) ); 
  Rogue_literal_strings[738] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Definition>>", 19 ) ); 
  Rogue_literal_strings[739] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<NativeProperty>>", 23 ) ); 
  Rogue_literal_strings[740] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Type>>>>", 34 ) ); 
  Rogue_literal_strings[741] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Int32>>>>", 35 ) ); 
  Rogue_literal_strings[742] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,String[]>>>>", 38 ) ); 
  Rogue_literal_strings[743] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<Int32,Template>>>>", 37 ) ); 
  Rogue_literal_strings[744] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<CmdFlagArg>>", 19 ) ); 
  Rogue_literal_strings[745] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<FnParam>>", 16 ) ); 
  Rogue_literal_strings[746] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TypeSpecializer>>", 24 ) ); 
  Rogue_literal_strings[747] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Method>>>>", 36 ) ); 
  Rogue_literal_strings[748] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Logical>>>>", 37 ) ); 
  Rogue_literal_strings[749] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,ParseReader>>>>", 41 ) ); 
  Rogue_literal_strings[750] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,TokenType>>>>", 39 ) ); 
  Rogue_literal_strings[751] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,TypeSpecializer>>>>", 45 ) ); 
  Rogue_literal_strings[752] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,CmdLabel>>>>", 38 ) ); 
  Rogue_literal_strings[753] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<CmdControlStructure>>", 28 ) ); 
  Rogue_literal_strings[754] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<CmdTaskControlSection>>", 30 ) ); 
  Rogue_literal_strings[755] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Definition>>>>", 40 ) ); 
  Rogue_literal_strings[756] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Property>>>>", 38 ) ); 
  Rogue_literal_strings[757] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<FnArg>>", 14 ) ); 
  Rogue_literal_strings[758] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,String>>>>", 36 ) ); 
  Rogue_literal_strings[759] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<CmdWhichCase>>", 21 ) ); 
  Rogue_literal_strings[760] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<CmdCatch>>", 17 ) ); 
  Rogue_literal_strings[761] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<CmdSelectCase>>", 22 ) ); 
  Rogue_literal_strings[762] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Token[]>>>>", 37 ) ); 
  Rogue_literal_strings[763] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\n", 1 ) ); 
  Rogue_literal_strings[764] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "===============================================================================", 79 ) ); 
  Rogue_literal_strings[765] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ERROR in \"", 10 ) ); 
  Rogue_literal_strings[766] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\"  line ", 8 ) ); 
  Rogue_literal_strings[767] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ", column ", 9 ) ); 
  Rogue_literal_strings[768] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ERROR", 5 ) ); 
  Rogue_literal_strings[769] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Error", 5 ) ); 
  Rogue_literal_strings[770] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "0.0", 3 ) ); 
  Rogue_literal_strings[771] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "-infinity", 9 ) ); 
  Rogue_literal_strings[772] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "EOL  # ", 7 ) ); 
  Rogue_literal_strings[773] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "LiteralCharacterToken", 21 ) ); 
  Rogue_literal_strings[774] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "LiteralInt64Token", 17 ) ); 
  Rogue_literal_strings[775] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "LiteralInt32Token", 17 ) ); 
  Rogue_literal_strings[776] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "LiteralReal64Token", 18 ) ); 
  Rogue_literal_strings[777] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "StringDataToken", 15 ) ); 
  Rogue_literal_strings[778] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "EOLToken", 8 ) ); 
  Rogue_literal_strings[779] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueError", 10 ) ); 
  Rogue_literal_strings[780] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdStatement", 12 ) ); 
  Rogue_literal_strings[781] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLabel", 8 ) ); 
  Rogue_literal_strings[782] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdAccess", 9 ) ); 
  Rogue_literal_strings[783] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdFlagArg", 10 ) ); 
  Rogue_literal_strings[784] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdAssign", 9 ) ); 
  Rogue_literal_strings[785] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdThisContext", 14 ) ); 
  Rogue_literal_strings[786] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLiteral", 10 ) ); 
  Rogue_literal_strings[787] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBinary", 9 ) ); 
  Rogue_literal_strings[788] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdTaskControl", 14 ) ); 
  Rogue_literal_strings[789] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCreateCompound", 17 ) ); 
  Rogue_literal_strings[790] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdWriteGlobal", 14 ) ); 
  Rogue_literal_strings[791] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdWriteProperty", 16 ) ); 
  Rogue_literal_strings[792] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdTypeOperator", 15 ) ); 
  Rogue_literal_strings[793] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdUnary", 8 ) ); 
  Rogue_literal_strings[794] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCreateOptionalValue", 22 ) ); 
  Rogue_literal_strings[795] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdInlineNative", 15 ) ); 
  Rogue_literal_strings[796] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCreateFunction", 17 ) ); 
  Rogue_literal_strings[797] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdNativeHeader", 15 ) ); 
  Rogue_literal_strings[798] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdNativeCode", 13 ) ); 
  Rogue_literal_strings[799] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdAwait", 8 ) ); 
  Rogue_literal_strings[800] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdYield", 8 ) ); 
  Rogue_literal_strings[801] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdThrow", 8 ) ); 
  Rogue_literal_strings[802] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdFormattedString", 18 ) ); 
  Rogue_literal_strings[803] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdTrace", 8 ) ); 
  Rogue_literal_strings[804] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdEscape", 9 ) ); 
  Rogue_literal_strings[805] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdNextIteration", 16 ) ); 
  Rogue_literal_strings[806] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdNecessary", 12 ) ); 
  Rogue_literal_strings[807] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdSufficient", 13 ) ); 
  Rogue_literal_strings[808] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdAdjust", 9 ) ); 
  Rogue_literal_strings[809] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdOpWithAssign", 15 ) ); 
  Rogue_literal_strings[810] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdWhichCase", 12 ) ); 
  Rogue_literal_strings[811] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCatch", 8 ) ); 
  Rogue_literal_strings[812] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdAdjustLocal", 14 ) ); 
  Rogue_literal_strings[813] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdReadLocal", 12 ) ); 
  Rogue_literal_strings[814] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdRange", 8 ) ); 
  Rogue_literal_strings[815] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdResolvedOpWithAssign", 23 ) ); 
  Rogue_literal_strings[816] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdGetOptionalValue", 19 ) ); 
  Rogue_literal_strings[817] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdElementAccess", 16 ) ); 
  Rogue_literal_strings[818] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdListConvert", 14 ) ); 
  Rogue_literal_strings[819] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCreateCallback", 17 ) ); 
  Rogue_literal_strings[820] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCreateList", 13 ) ); 
  Rogue_literal_strings[821] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallPriorMethod", 18 ) ); 
  Rogue_literal_strings[822] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdSelect", 9 ) ); 
  Rogue_literal_strings[823] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdSelectCase", 13 ) ); 
  Rogue_literal_strings[824] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdTypedLiteralList", 19 ) ); 
  Rogue_literal_strings[825] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Illegal arguments on inline code.", 33 ) ); 
  Rogue_literal_strings[826] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[INTERNAL] CmdAwait should have been converted to other commands before being adapted to a task.", 96 ) ); 
  Rogue_literal_strings[827] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Function_", 9 ) ); 
  Rogue_literal_strings[828] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::update_this_type( scope )() is not defined.", 45 ) ); 
  Rogue_literal_strings[829] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Illegal '@'.", 12 ) ); 
  Rogue_literal_strings[830] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array count expected.", 21 ) ); 
  Rogue_literal_strings[831] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Int32 value expected.", 21 ) ); 
  Rogue_literal_strings[832] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No such method or variable \"", 28 ) ); 
  Rogue_literal_strings[833] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\" exists in current scope of type ", 34 ) ); 
  Rogue_literal_strings[834] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No exact match for ambiguous call to ", 37 ) ); 
  Rogue_literal_strings[835] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ":\n\n", 3 ) ); 
  Rogue_literal_strings[836] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Call to ", 8 ) ); 
  Rogue_literal_strings[837] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " has arguments that are incompatible with the best candidate:\n\n", 63 ) ); 
  Rogue_literal_strings[838] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Function(", 9 ) ); 
  Rogue_literal_strings[839] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Generic function argument does not match any compatible Function parameters in available methods.", 97 ) ); 
  Rogue_literal_strings[840] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Generic function argument ambiguously matches Function parameters in multiple available methods.", 96 ) ); 
  Rogue_literal_strings[841] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "to_Object", 9 ) ); 
  Rogue_literal_strings[842] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Called method does not have a parameter named '", 47 ) ); 
  Rogue_literal_strings[843] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Type name expected, e.g. \"", 26 ) ); 
  Rogue_literal_strings[844] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".\".", 3 ) ); 
  Rogue_literal_strings[845] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Type name expected.", 19 ) ); 
  Rogue_literal_strings[846] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Missing return value in macro method.", 37 ) ); 
  Rogue_literal_strings[847] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Only single line macros are supported.", 38 ) ); 
  Rogue_literal_strings[848] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "count", 5 ) ); 
  Rogue_literal_strings[849] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Invalid arguments to array count.", 33 ) ); 
  Rogue_literal_strings[850] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Recursive call to getter ", 25 ) ); 
  Rogue_literal_strings[851] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "() - write @", 12 ) ); 
  Rogue_literal_strings[852] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " instead.", 9 ) ); 
  Rogue_literal_strings[853] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot access object properties from routines - routines have no 'this' object context.", 87 ) ); 
  Rogue_literal_strings[854] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot read properties using aspect references.  Add a getter to the aspect definition - ", 89 ) ); 
  Rogue_literal_strings[855] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'method ", 8 ) ); 
  Rogue_literal_strings[856] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ": return @", 10 ) ); 
  Rogue_literal_strings[857] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "exists", 6 ) ); 
  Rogue_literal_strings[858] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Optional value existence check takes no arguments.", 50 ) ); 
  Rogue_literal_strings[859] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "value", 5 ) ); 
  Rogue_literal_strings[860] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Optional value retrieval takes no arguments.", 44 ) ); 
  Rogue_literal_strings[861] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'exists' and 'value' are the only valid properties of an optional type.", 71 ) ); 
  Rogue_literal_strings[862] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Invalid assignment.", 19 ) ); 
  Rogue_literal_strings[863] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::fn_name() is not defined.", 27 ) ); 
  Rogue_literal_strings[864] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No method ", 10 ) ); 
  Rogue_literal_strings[865] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(1) is defined.", 15 ) ); 
  Rogue_literal_strings[866] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Neither method ", 15 ) ); 
  Rogue_literal_strings[867] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(1) nor global method ", 22 ) ); 
  Rogue_literal_strings[868] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(2) is defined.", 15 ) ); 
  Rogue_literal_strings[869] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Types ", 6 ) ); 
  Rogue_literal_strings[870] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " are incompatible.", 18 ) ); 
  Rogue_literal_strings[871] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot write properties using aspect references.  Add a setter to the aspect definition - ", 90 ) ); 
  Rogue_literal_strings[872] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'method set_", 12 ) ); 
  Rogue_literal_strings[873] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(@", 2 ) ); 
  Rogue_literal_strings[874] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ")'.", 3 ) ); 
  Rogue_literal_strings[875] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "() is defined.", 14 ) ); 
  Rogue_literal_strings[876] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Caught value must be instanceOf class Error.", 44 ) ); 
  Rogue_literal_strings[877] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "try/catch blocks cannot contain 'yield' statements.", 51 ) ); 
  Rogue_literal_strings[878] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "The 'await' command can only be used in [task] methods.", 55 ) ); 
  Rogue_literal_strings[879] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Task method does not return a result.  Ensure you are not awaiting a task method that calls start() - remove the call to start().", 129 ) ); 
  Rogue_literal_strings[880] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "The 'yield' statement can only be used in [task] methods.", 57 ) ); 
  Rogue_literal_strings[881] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Thrown value must be instanceOf class Error.", 44 ) ); 
  Rogue_literal_strings[882] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "More arguments than format markers ('$') in formatted string.", 61 ) ); 
  Rogue_literal_strings[883] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "print", 5 ) ); 
  Rogue_literal_strings[884] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "More format markers ('$') than arguments in formatted string.", 61 ) ); 
  Rogue_literal_strings[885] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "println", 7 ) ); 
  Rogue_literal_strings[886] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No enclosing structure to escape.", 33 ) ); 
  Rogue_literal_strings[887] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No enclosing loop for 'nextIteration' to affect.", 48 ) ); 
  Rogue_literal_strings[888] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No enclosing contingent.", 24 ) ); 
  Rogue_literal_strings[889] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Invalid target for increment/decrement. (", 41 ) ); 
  Rogue_literal_strings[890] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot determine the type of the local variable - either assign an initial value (local ", 88 ) ); 
  Rogue_literal_strings[891] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " = ...) or assign a type (local ", 32 ) ); 
  Rogue_literal_strings[892] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Range<<", 7 ) ); 
  Rogue_literal_strings[893] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No suitable operator method found; type ", 40 ) ); 
  Rogue_literal_strings[894] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " implements neither ", 20 ) ); 
  Rogue_literal_strings[895] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "()(", 3 ) ); 
  Rogue_literal_strings[896] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ") nor ", 6 ) ); 
  Rogue_literal_strings[897] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "=(", 2 ) ); 
  Rogue_literal_strings[898] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Property or method name expected.", 33 ) ); 
  Rogue_literal_strings[899] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Property or method name expected - '.=' cannot be used with a chain of references.", 82 ) ); 
  Rogue_literal_strings[900] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "count()", 7 ) ); 
  Rogue_literal_strings[901] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "at(Int32)", 9 ) ); 
  Rogue_literal_strings[902] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "get(Int32)", 10 ) ); 
  Rogue_literal_strings[903] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Literal integer value expected.", 31 ) ); 
  Rogue_literal_strings[904] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "has_another", 11 ) ); 
  Rogue_literal_strings[905] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "has_another()", 13 ) ); 
  Rogue_literal_strings[906] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "read()", 6 ) ); 
  Rogue_literal_strings[907] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Illegal iteration target - forEach requires either an indexed collection (.count, .get/.at) or a reader (.has_another, .read).", 126 ) ); 
  Rogue_literal_strings[908] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Object's read() method does not return a value.", 47 ) ); 
  Rogue_literal_strings[909] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot specify a step size for a reader - only for an indexed collection.", 73 ) ); 
  Rogue_literal_strings[910] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "read", 4 ) ); 
  Rogue_literal_strings[911] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "The optional value retriever ('!') can only be used on optional values.", 71 ) ); 
  Rogue_literal_strings[912] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "get", 3 ) ); 
  Rogue_literal_strings[913] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "List conversion syntax used on a non-list value.", 48 ) ); 
  Rogue_literal_strings[914] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ListMap<<", 9 ) ); 
  Rogue_literal_strings[915] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "convert", 7 ) ); 
  Rogue_literal_strings[916] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ListReduce<<", 12 ) ); 
  Rogue_literal_strings[917] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No such method or routine '", 27 ) ); 
  Rogue_literal_strings[918] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "' exists in type ", 17 ) ); 
  Rogue_literal_strings[919] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Multiple candidates match ambiguous reference to '", 50 ) ); 
  Rogue_literal_strings[920] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'; add qualifiying parameter types.", 35 ) ); 
  Rogue_literal_strings[921] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'as' can only be used to reinterpret references.", 48 ) ); 
  Rogue_literal_strings[922] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TODO: [] -> Property[]", 22 ) ); 
  Rogue_literal_strings[923] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "add", 3 ) ); 
  Rogue_literal_strings[924] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Illegal target - 'prior' can only be used to call overridden methods.", 69 ) ); 
  Rogue_literal_strings[925] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Selection list cannot be empty.", 31 ) ); 
  Rogue_literal_strings[926] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "The final 'select' cannot have an attached condition.", 53 ) ); 
  Rogue_literal_strings[927] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "The result of a call cannot be assigned a value.", 48 ) ); 
  Rogue_literal_strings[928] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "set_", 4 ) ); 
  Rogue_literal_strings[929] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Recursive call to setter set_", 29 ) ); 
  Rogue_literal_strings[930] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "() - write \"@", 13 ) ); 
  Rogue_literal_strings[931] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " = ...\" instead.", 16 ) ); 
  Rogue_literal_strings[932] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\" exists in the current scope.", 30 ) ); 
  Rogue_literal_strings[933] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot assign to inline native code without specifying its type.  For example, native(\"...\")->", 94 ) ); 
  Rogue_literal_strings[934] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "set", 3 ) ); 
  Rogue_literal_strings[935] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot increment or decrement inline native code without specifying its type.  For example, native(\"...\")->", 107 ) ); 
  Rogue_literal_strings[936] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Local variable '", 16 ) ); 
  Rogue_literal_strings[937] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "' cannot be called like a method.", 33 ) ); 
  Rogue_literal_strings[938] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[CmdAccess.expand_modify_and_assign() Cmd.rogue:1855]", 53 ) ); 
  Rogue_literal_strings[939] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[INTERNAL]", 10 ) ); 
  Rogue_literal_strings[940] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot modify-and-assign inline native code without specifying its type.  For example, native(\"...\")->", 102 ) ); 
  Rogue_literal_strings[941] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::type() is not defined (access name '", 38 ) ); 
  Rogue_literal_strings[942] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "').", 3 ) ); 
  Rogue_literal_strings[943] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "return (", 8 ) ); 
  Rogue_literal_strings[944] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ")(", 2 ) ); 
  Rogue_literal_strings[945] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::write_cpp() is not defined (access name ", 42 ) ); 
  Rogue_literal_strings[946] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "for (;", 6 ) ); 
  Rogue_literal_strings[947] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "while (", 7 ) ); 
  Rogue_literal_strings[948] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ":;", 2 ) ); 
  Rogue_literal_strings[949] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::symbol() is not defined.", 26 ) ); 
  Rogue_literal_strings[950] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "switch (++THIS->ip)", 19 ) ); 
  Rogue_literal_strings[951] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "  THIS->ip = -1;", 16 ) ); 
  Rogue_literal_strings[952] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "  return false;", 15 ) ); 
  Rogue_literal_strings[953] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "NULL", 4 ) ); 
  Rogue_literal_strings[954] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " is not a singleton.", 20 ) ); 
  Rogue_literal_strings[955] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ")ROGUE_SINGLETON(", 17 ) ); 
  Rogue_literal_strings[956] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Illegal use of '$this' in routine.", 34 ) ); 
  Rogue_literal_strings[957] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "->count", 7 ) ); 
  Rogue_literal_strings[958] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "call_", 5 ) ); 
  Rogue_literal_strings[959] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "if (", 4 ) ); 
  Rogue_literal_strings[960] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "else ", 5 ) ); 
  Rogue_literal_strings[961] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "goto ", 5 ) ); 
  Rogue_literal_strings[962] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ROGUE_TRY", 9 ) ); 
  Rogue_literal_strings[963] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ROGUE_CATCH( ", 13 ) ); 
  Rogue_literal_strings[964] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ROGUE_END_TRY", 13 ) ); 
  Rogue_literal_strings[965] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ROGUE_THROW(", 12 ) ); 
  Rogue_literal_strings[966] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "continue", 8 ) ); 
  Rogue_literal_strings[967] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "if ( !(", 7 ) ); 
  Rogue_literal_strings[968] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ") ) goto ", 9 ) ); 
  Rogue_literal_strings[969] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ") goto ", 7 ) ); 
  Rogue_literal_strings[970] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueObject_instance_of(", 24 ) ); 
  Rogue_literal_strings[971] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".value", 6 ) ); 
  Rogue_literal_strings[972] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ")(RogueObject_as(", 17 ) ); 
  Rogue_literal_strings[973] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ")))", 3 ) ); 
  Rogue_literal_strings[974] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(1.0/0.0)", 9 ) ); 
  Rogue_literal_strings[975] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(-1.0/0.0)", 10 ) ); 
  Rogue_literal_strings[976] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(0.0/0.0)", 9 ) ); 
  Rogue_literal_strings[977] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "LL", 2 ) ); 
  Rogue_literal_strings[978] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(RogueCharacter)", 16 ) ); 
  Rogue_literal_strings[979] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'\\n'", 4 ) ); 
  Rogue_literal_strings[980] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'\\\\'", 4 ) ); 
  Rogue_literal_strings[981] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'\\''", 4 ) ); 
  Rogue_literal_strings[982] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " || ", 4 ) ); 
  Rogue_literal_strings[983] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ") ? (", 5 ) ); 
  Rogue_literal_strings[984] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ") : ", 4 ) ); 
  Rogue_literal_strings[985] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueType_create_array( ", 24 ) ); 
  Rogue_literal_strings[986] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ", sizeof(", 9 ) ); 
  Rogue_literal_strings[987] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ", true", 6 ) ); 
  Rogue_literal_strings[988] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ROGUE_CREATE_OBJECT(", 20 ) ); 
  Rogue_literal_strings[989] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "!!", 2 ) ); 
  Rogue_literal_strings[990] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".exists", 7 ) ); 
  Rogue_literal_strings[991] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "->_singleton = ", 15 ) ); 
  Rogue_literal_strings[992] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "switch (", 8 ) ); 
  Rogue_literal_strings[993] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "break;", 6 ) ); 
  Rogue_literal_strings[994] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "->objects[", 10 ) ); 
  Rogue_literal_strings[995] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "]))", 3 ) ); 
  Rogue_literal_strings[996] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "reals[", 6 ) ); 
  Rogue_literal_strings[997] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "floats[", 7 ) ); 
  Rogue_literal_strings[998] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "longs[", 6 ) ); 
  Rogue_literal_strings[999] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "integers[", 9 ) ); 
  Rogue_literal_strings[1000] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "characters[", 11 ) ); 
  Rogue_literal_strings[1001] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "bytes[", 6 ) ); 
  Rogue_literal_strings[1002] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "logicals[", 9 ) ); 
  Rogue_literal_strings[1003] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[INTERNAL] Unhandled type in CmdReadArrayElement.", 49 ) ); 
  Rogue_literal_strings[1004] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "*)(", 3 ) ); 
  Rogue_literal_strings[1005] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "->bytes))[", 10 ) ); 
  Rogue_literal_strings[1006] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "] = ", 4 ) ); 
  Rogue_literal_strings[1007] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "objects[", 8 ) ); 
  Rogue_literal_strings[1008] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::trace_used_code() (\"", 22 ) ); 
  Rogue_literal_strings[1009] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\") is not defined.", 18 ) ); 
  Rogue_literal_strings[1010] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " is not an override - no prior version of it exists.", 52 ) ); 
  Rogue_literal_strings[1011] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Value expected; call to ", 24 ) ); 
  Rogue_literal_strings[1012] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " does not return a value.", 25 ) ); 
  Rogue_literal_strings[1013] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdReturn", 9 ) ); 
  Rogue_literal_strings[1014] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdControlStructure", 19 ) ); 
  Rogue_literal_strings[1015] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLocalDeclaration", 19 ) ); 
  Rogue_literal_strings[1016] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdStatementList", 16 ) ); 
  Rogue_literal_strings[1017] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdArgs", 7 ) ); 
  Rogue_literal_strings[1018] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "DirectiveTokenType", 18 ) ); 
  Rogue_literal_strings[1019] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "StructuralDirectiveTokenType", 28 ) ); 
  Rogue_literal_strings[1020] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "EOLTokenType", 12 ) ); 
  Rogue_literal_strings[1021] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "StructureTokenType", 18 ) ); 
  Rogue_literal_strings[1022] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "NativeCodeTokenType", 19 ) ); 
  Rogue_literal_strings[1023] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "OpWithAssignTokenType", 21 ) ); 
  Rogue_literal_strings[1024] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Function_197", 12 ) ); 
  Rogue_literal_strings[1025] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Function_198", 12 ) ); 
  Rogue_literal_strings[1026] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CloneMethodArgs", 15 ) ); 
  Rogue_literal_strings[1027] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TaskArgs", 8 ) ); 
  Rogue_literal_strings[1028] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "MacroArgs", 9 ) ); 
  Rogue_literal_strings[1029] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdGenericLoop", 14 ) ); 
  Rogue_literal_strings[1030] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdIf", 5 ) ); 
  Rogue_literal_strings[1031] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdWhich", 8 ) ); 
  Rogue_literal_strings[1032] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdContingent", 13 ) ); 
  Rogue_literal_strings[1033] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdTry", 6 ) ); 
  Rogue_literal_strings[1034] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdForEach", 10 ) ); 
  Rogue_literal_strings[1035] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBlock", 8 ) ); 
  Rogue_literal_strings[1036] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdSwitch", 9 ) ); 
  Rogue_literal_strings[1037] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLiteralThis", 14 ) ); 
  Rogue_literal_strings[1038] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Invalid reference to 'this' object - routines have no object context.", 69 ) ); 
  Rogue_literal_strings[1039] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLiteralInt32", 15 ) ); 
  Rogue_literal_strings[1040] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLiteralNull", 14 ) ); 
  Rogue_literal_strings[1041] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLiteralLogical", 17 ) ); 
  Rogue_literal_strings[1042] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLiteralString", 16 ) ); 
  Rogue_literal_strings[1043] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdDefaultValue", 15 ) ); 
  Rogue_literal_strings[1044] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLiteralReal64", 16 ) ); 
  Rogue_literal_strings[1045] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLiteralInt64", 15 ) ); 
  Rogue_literal_strings[1046] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLiteralCharacter", 19 ) ); 
  Rogue_literal_strings[1047] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBinaryLogical", 16 ) ); 
  Rogue_literal_strings[1048] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::combine_literal_operands(Logical,Logical) is not defined.", 59 ) ); 
  Rogue_literal_strings[1049] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "shift_right", 11 ) ); 
  Rogue_literal_strings[1050] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "mod", 3 ) ); 
  Rogue_literal_strings[1051] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "((void*)", 8 ) ); 
  Rogue_literal_strings[1052] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ") == ((void*)", 13 ) ); 
  Rogue_literal_strings[1053] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ") != ((void*)", 13 ) ); 
  Rogue_literal_strings[1054] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ") pow((double)", 14 ) ); 
  Rogue_literal_strings[1055] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ", (double)", 10 ) ); 
  Rogue_literal_strings[1056] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator+", 9 ) ); 
  Rogue_literal_strings[1057] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator-", 9 ) ); 
  Rogue_literal_strings[1058] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator*", 9 ) ); 
  Rogue_literal_strings[1059] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator/", 9 ) ); 
  Rogue_literal_strings[1060] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator%", 9 ) ); 
  Rogue_literal_strings[1061] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator^", 9 ) ); 
  Rogue_literal_strings[1062] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "The '", 5 ) ); 
  Rogue_literal_strings[1063] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "' operator cannot be applied to type ", 37 ) ); 
  Rogue_literal_strings[1064] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "&&", 2 ) ); 
  Rogue_literal_strings[1065] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdComparison", 13 ) ); 
  Rogue_literal_strings[1066] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdAdd", 6 ) ); 
  Rogue_literal_strings[1067] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBitwiseOp", 12 ) ); 
  Rogue_literal_strings[1068] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdSubtract", 11 ) ); 
  Rogue_literal_strings[1069] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdMultiply", 11 ) ); 
  Rogue_literal_strings[1070] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdDivide", 9 ) ); 
  Rogue_literal_strings[1071] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdMod", 6 ) ); 
  Rogue_literal_strings[1072] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdPower", 8 ) ); 
  Rogue_literal_strings[1073] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[INTERNAL] $::resolve_for_reference() is undefined.", 51 ) ); 
  Rogue_literal_strings[1074] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Incompatible types for comparison: ", 35 ) ); 
  Rogue_literal_strings[1075] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCastToType", 13 ) ); 
  Rogue_literal_strings[1076] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdInstanceOf", 13 ) ); 
  Rogue_literal_strings[1077] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdConvertToType", 16 ) ); 
  Rogue_literal_strings[1078] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdAs", 5 ) ); 
  Rogue_literal_strings[1079] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLogicalize", 13 ) ); 
  Rogue_literal_strings[1080] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLogicalNot", 13 ) ); 
  Rogue_literal_strings[1081] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdNegate", 9 ) ); 
  Rogue_literal_strings[1082] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBitwiseNot", 13 ) ); 
  Rogue_literal_strings[1083] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "not ", 4 ) ); 
  Rogue_literal_strings[1084] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(-", 2 ) ); 
  Rogue_literal_strings[1085] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator?", 9 ) ); 
  Rogue_literal_strings[1086] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator!", 9 ) ); 
  Rogue_literal_strings[1087] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[INTERNAL] TODO: 'is' for compounds.", 36 ) ); 
  Rogue_literal_strings[1088] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot use 'isNot' between mixed type categories ", 49 ) ); 
  Rogue_literal_strings[1089] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdRangeUpTo", 12 ) ); 
  Rogue_literal_strings[1090] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdRangeDownTo", 14 ) ); 
  Rogue_literal_strings[1091] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLocalOpWithAssign", 20 ) ); 
  Rogue_literal_strings[1092] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdOpAssignGlobal", 17 ) ); 
  Rogue_literal_strings[1093] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdOpAssignProperty", 19 ) ); 
  Rogue_literal_strings[1094] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLogicalXor", 13 ) ); 
  Rogue_literal_strings[1095] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLogicalOr", 12 ) ); 
  Rogue_literal_strings[1096] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLogicalAnd", 13 ) ); 
  Rogue_literal_strings[1097] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator!=", 10 ) ); 
  Rogue_literal_strings[1098] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator<>", 10 ) ); 
  Rogue_literal_strings[1099] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator==", 10 ) ); 
  Rogue_literal_strings[1100] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator<=", 10 ) ); 
  Rogue_literal_strings[1101] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator>", 9 ) ); 
  Rogue_literal_strings[1102] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator>=", 10 ) ); 
  Rogue_literal_strings[1103] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator<", 9 ) ); 
  Rogue_literal_strings[1104] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBitwiseXor", 13 ) ); 
  Rogue_literal_strings[1105] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBitwiseOr", 12 ) ); 
  Rogue_literal_strings[1106] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBitwiseAnd", 13 ) ); 
  Rogue_literal_strings[1107] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBitwiseShiftLeft", 19 ) ); 
  Rogue_literal_strings[1108] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBitwiseShiftRight", 20 ) ); 
  Rogue_literal_strings[1109] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBitwiseShiftRightX", 21 ) ); 
  Rogue_literal_strings[1110] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdConvertToPrimitiveType", 25 ) ); 
  Rogue_literal_strings[1111] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CandidateMethods", 16 ) ); 
  Rogue_literal_strings[1112] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Cmd>>", 19 ) ); 
  Rogue_literal_strings[1113] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ListReader<<CmdSelectCase>>", 27 ) ); 
  Rogue_literal_strings[1114] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Cmd>>", 24 ) ); 
  Rogue_literal_strings[1115] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Cmd>>[]", 26 ) ); 
  Rogue_literal_strings[1116] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Cmd>>>>", 33 ) ); 
  Rogue_literal_strings[1117] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "NativeCodeToken", 15 ) ); 
  Rogue_literal_strings[1118] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdReadSingleton", 16 ) ); 
  Rogue_literal_strings[1119] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCall", 7 ) ); 
  Rogue_literal_strings[1120] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdReadArrayCount", 17 ) ); 
  Rogue_literal_strings[1121] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCreateArray", 14 ) ); 
  Rogue_literal_strings[1122] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCreateObject", 15 ) ); 
  Rogue_literal_strings[1123] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdReadGlobal", 13 ) ); 
  Rogue_literal_strings[1124] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdReadProperty", 15 ) ); 
  Rogue_literal_strings[1125] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLogicalizeOptionalValue", 26 ) ); 
  Rogue_literal_strings[1126] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdWriteSingleton", 17 ) ); 
  Rogue_literal_strings[1127] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdWriteLocal", 13 ) ); 
  Rogue_literal_strings[1128] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdReadArrayElement", 19 ) ); 
  Rogue_literal_strings[1129] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdWriteArrayElement", 20 ) ); 
  Rogue_literal_strings[1130] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdAdjustGlobal", 15 ) ); 
  Rogue_literal_strings[1131] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdAdjustProperty", 17 ) ); 
  Rogue_literal_strings[1132] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCompareNE", 12 ) ); 
  Rogue_literal_strings[1133] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCompareLE", 12 ) ); 
  Rogue_literal_strings[1134] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCompareGE", 12 ) ); 
  Rogue_literal_strings[1135] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCompareEQ", 12 ) ); 
  Rogue_literal_strings[1136] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCompareIs", 12 ) ); 
  Rogue_literal_strings[1137] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCompareIsNot", 15 ) ); 
  Rogue_literal_strings[1138] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCompareLT", 12 ) ); 
  Rogue_literal_strings[1139] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCompareGT", 12 ) ); 
  Rogue_literal_strings[1140] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallInlineNative", 19 ) ); 
  Rogue_literal_strings[1141] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallNativeRoutine", 20 ) ); 
  Rogue_literal_strings[1142] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallRoutine", 14 ) ); 
  Rogue_literal_strings[1143] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallNativeMethod", 19 ) ); 
  Rogue_literal_strings[1144] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallAspectMethod", 19 ) ); 
  Rogue_literal_strings[1145] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallMethod", 13 ) ); 
  Rogue_literal_strings[1146] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallDynamicMethod", 20 ) ); 
  Rogue_literal_strings[1147] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallStaticMethod", 19 ) ); 
  Rogue_literal_strings[1148] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallInlineNativeRoutine", 26 ) ); 
  Rogue_literal_strings[1149] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallInlineNativeMethod", 25 ) ); 
  Rogue_literal_strings[1150] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Reader<<Character>>", 19 ) ); 
  Rogue_literal_strings[1151] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "PrintWriterAspect", 17 ) ); 
  Rogue_literal_strings[1152] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Writer<<Character>>", 19 ) ); 
  Rogue_literal_strings[1153] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Reader<<String>>", 16 ) ); 
  Rogue_literal_strings[1154] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Reader<<CmdSelectCase>>", 23 ) ); 
  Rogue_literal_strings[1155] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Int32?", 6 ) ); 
  Rogue_literal_strings[1156] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Character?", 10 ) ); 

}

void Rogue_launch()
{
  RogueErrorHandler uncaught_error_handler;
  Rogue_error_handler = &uncaught_error_handler;
  if (ROGUE_SETJMP(Rogue_error_handler->info))
  {
    if (Rogue_error_object && Rogue_error_object->type)
    {
      printf( "Uncaught " );
      RogueType_print_name( Rogue_error_object->type );
      printf( ".\n\n" );
  
      RogueStackTrace__print( ((RogueClassException*)Rogue_error_object)->stack_trace );
    }
    else
    {
      printf( "Uncaught error.\n" );
    }
    return;
  }
  RogueStringBuilder__init_class();
  RogueCmdStatementList__init_class();
  RogueTokenType__init_class();
  RogueSystem__init_class();
  RoguePreprocessor__init_class();

  RogueSystem_executable_filepath = RogueString_create_from_c_string(
      Rogue_argc ? Rogue_argv[0] : "Rogue", -1 );
  
  for (int i=1; i<Rogue_argc; ++i)
  {
    RogueStringList__add__String( RogueSystem_command_line_arguments,
        RogueString_create_from_c_string( Rogue_argv[i], -1 ) );
  }

  // Instantiate requisite singletons
  ROGUE_SINGLETON( Global );
  ROGUE_SINGLETON( Console );
  ROGUE_SINGLETON( RogueC );
  ROGUE_SINGLETON( Program );
  ROGUE_SINGLETON( Function_197 );
  ROGUE_SINGLETON( Function_198 );

  RogueGlobal__on_launch( (RogueClassGlobal*) (RogueType_singleton(RogueTypeGlobal)) );
  Rogue_collect_garbage();
}

bool Rogue_update_tasks()
{
  // Returns true if any tasks are still active
  Rogue_collect_garbage();
  return false;
}


int main( int argc, const char* argv[] )
{
  Rogue_configure( argc, argv );
  Rogue_launch();

  while (Rogue_update_tasks()) {}

  // Give a few GC's to allow objects requiring clean-up to do so.
  Rogue_collect_garbage( true );
  Rogue_collect_garbage( true );
  Rogue_collect_garbage( true );

  Rogue_quit();

  return 0;
}
