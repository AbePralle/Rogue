#include <stdio.h>
#include "RogueC.h"

//=============================================================================
//  Rogue.cpp
//
//  Rogue runtime.
//
//  ---------------------------------------------------------------------------
//
//  Created 2015.01.19 by Abe Pralle
//
//  This is free and unencumbered software released into the public domain
//  under the terms of the UNLICENSE ( http://unlicense.org ).
//=============================================================================

#include <fcntl.h>
#include <math.h>
#include <string.h>
#include <sys/timeb.h>
#include <sys/types.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <inttypes.h>

#if !defined(ROGUE_PLATFORM_WINDOWS)
#  include <sys/time.h>
#  include <unistd.h>
#  include <signal.h>
#  include <dirent.h>
#  include <sys/socket.h>
#  include <sys/uio.h>
#  include <sys/stat.h>
#  include <netdb.h>
#  include <errno.h>
#  include <pthread.h>
#endif

#if defined(ANDROID)
#  include <netinet/in.h>
#endif

#if defined(_WIN32)
#  include <direct.h>
#  define chdir _chdir
#endif

#if TARGET_OS_IPHONE
#  include <sys/types.h>
#  include <sys/sysctl.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#ifndef PATH_MAX
#  define PATH_MAX 4096
#endif

//-----------------------------------------------------------------------------
//  GLOBAL PROPERTIES
//-----------------------------------------------------------------------------
int                Rogue_gc_threshold = ROGUE_GC_THRESHOLD_DEFAULT;
RogueLogical       Rogue_configured = 0;
RogueErrorHandler* Rogue_error_handler = 0;
RogueObject*       Rogue_error_object  = 0;
int                Rogue_allocation_bytes_until_gc = Rogue_gc_threshold;
int                Rogue_argc;
const char**       Rogue_argv;
RogueCallStack     Rogue_call_stack;
RogueCallbackInfo  Rogue_on_begin_gc;
RogueCallbackInfo  Rogue_on_end_gc;


//-----------------------------------------------------------------------------
//  RogueType
//-----------------------------------------------------------------------------
RogueArray* RogueType_create_array( int count, int element_size, bool is_reference_array )
{
  if (count < 0) count = 0;
  int data_size  = count * element_size;
  int total_size = sizeof(RogueArray) + data_size;

  RogueArray* array = (RogueArray*) RogueAllocator_allocate_object( RogueTypeArray->allocator, RogueTypeArray, total_size );

  memset( array->bytes, 0, data_size );
  array->count = count;
  array->element_size = element_size;
  array->is_reference_array = is_reference_array;

  return array;
}

RogueObject* RogueType_create_object( RogueType* THIS, RogueInt32 size )
{
  ROGUE_DEF_LOCAL_REF_NULL(RogueObject*, obj);
  RogueInitFn  fn;

  obj = RogueAllocator_allocate_object( THIS->allocator, THIS, size ? size : THIS->object_size );

  if ((fn = THIS->init_object_fn)) return fn( obj );
  else                             return obj;
}

void RogueType_print_name( RogueType* THIS )
{
  char buffer[256];
  RogueString* st = Rogue_literal_strings[ THIS->name_index ];
  if (st)
  {
    RogueString_to_c_string( st, buffer, 256 );
    printf( "%s", buffer );
  }
}

RogueType* RogueType_retire( RogueType* THIS )
{
  if (THIS->base_types)
  {
#if !ROGUE_GC_MODE_BOEHM
    delete [] THIS->base_types;
#endif
    THIS->base_types = 0;
    THIS->base_type_count = 0;
  }

  return THIS;
}

RogueObject* RogueType_singleton( RogueType* THIS )
{
  RogueInitFn fn;

  if (THIS->_singleton) return THIS->_singleton;

  // NOTE: _singleton must be assigned before calling init_object()
  // so we can't just call RogueType_create_object().
  THIS->_singleton = RogueAllocator_allocate_object( THIS->allocator, THIS, THIS->object_size );

  if ((fn = THIS->init_object_fn)) THIS->_singleton = fn( THIS->_singleton );

  if ((fn = THIS->init_fn)) return fn( THIS->_singleton );
  else                      return THIS->_singleton;

  return THIS->_singleton;
}

//-----------------------------------------------------------------------------
//  RogueObject
//-----------------------------------------------------------------------------
RogueObject* RogueObject_as( RogueObject* THIS, RogueType* specialized_type )
{
  if (RogueObject_instance_of(THIS,specialized_type)) return THIS;
  return 0;
}

RogueLogical RogueObject_instance_of( RogueObject* THIS, RogueType* ancestor_type )
{
  RogueType* this_type;

  if ( !THIS ) return true;

  this_type = THIS->type;
  if (this_type == ancestor_type) return true;

  int count = this_type->base_type_count;
  RogueType** base_type_ptr = this_type->base_types - 1;
  while (--count >= 0)
  {
    if (ancestor_type == *(++base_type_ptr)) return true;
  }

  return false;
}

void* RogueObject_retain( RogueObject* THIS )
{
  ROGUE_INCREF(THIS);
  return THIS;
}

void* RogueObject_release( RogueObject* THIS )
{
  ROGUE_DECREF(THIS);
  return THIS;
}

void RogueObject_trace( void* obj )
{
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
}

void RogueString_trace( void* obj )
{
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
}

void RogueArray_trace( void* obj )
{
  int count;
  RogueObject** src;
  RogueArray* array = (RogueArray*) obj;

  if ( !array || array->object_size < 0 ) return;
  array->object_size = ~array->object_size;

  if ( !array->is_reference_array ) return;

  count = array->count;
  src = array->objects + count;
  while (--count >= 0)
  {
    RogueObject* cur = *(--src);
    if (cur && cur->object_size >= 0)
    {
      cur->type->trace_fn( cur );
    }
  }
}

//-----------------------------------------------------------------------------
//  RogueString
//-----------------------------------------------------------------------------
RogueString* RogueString_create_with_count( int count )
{
  if (count < 0) count = 0;

  int total_size = sizeof(RogueString) + (count * sizeof(RogueCharacter));

  RogueString* st = (RogueString*) RogueAllocator_allocate_object( RogueTypeString->allocator, RogueTypeString, total_size );
  st->count = count;
  st->hash_code = 0;

  return st;
}

RogueString* RogueString_create_from_c_string( const char* c_string, int count )
{
  if (count == -1) count = (int) strlen( c_string );

  RogueInt32 decoded_count = RogueString_decoded_utf8_count( c_string, count );

  RogueString* st = RogueString_create_with_count( decoded_count );
  RogueString_decode_utf8( c_string, count, st->characters );

  return RogueString_update_hash_code( st );
}

RogueString* RogueString_create_from_characters( RogueCharacterList* characters )
{
  if ( !characters ) return RogueString_create_with_count(0);

  int count = characters->count;
  RogueString* result = RogueString_create_with_count( characters->count );
  memcpy( result->characters, characters->data->characters, count*sizeof(RogueCharacter) );
  return RogueString_update_hash_code( result );
}

void RogueString_print_string( RogueString* st )
{
  if (st)
  {
    RogueString_print_characters( st->characters, st->count );
  }
  else
  {
    printf( "null" );
  }
}

void RogueString_decode_utf8( const char* utf8_data, RogueInt32 utf8_count, RogueCharacter* dest_buffer )
{
  RogueByte*      src  = (RogueByte*)(utf8_data - 1);
  RogueCharacter* dest = dest_buffer - 1;

  int remaining_count = utf8_count;
  while (--remaining_count >= 0)
  {
    int ch = *(++src);
    if (ch >= 0x80)
    {
      if ((ch & 0xe0) == 0xc0)
      {
        // 110x xxxx  10xx xxxx
        ch = ((ch & 0x1f) << 6) | (*(++src) & 0x3f);
        --remaining_count;
      }
      else if ((ch & 0xf0) == 0xe0)
      {
        // 1110 xxxx  10xx xxxx  10xx xxxx
        ch = ((ch & 0xf) << 6) | (*(++src) & 0x3f);
        ch = (ch << 6) | (*(++src) & 0x3f);
        remaining_count -= 2;
      }
      else
      {
        // 11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
        if (remaining_count >= 3)
        {
          ch = ((ch & 7) << 18) | ((src[1] & 0x3f) << 12);
          ch |= (src[2] & 0x3f) << 6;
          ch |= (src[3] & 0x3f);
          src += 3;
          remaining_count -= 3;
        }
        if (ch >= 0x10000)
        {
          // write surrogate pair
          ch -= 0x10000;
          dest[1] = (RogueCharacter) (0xd800 + ((ch >> 10) & 0x3ff));
          dest[2] = (RogueCharacter) (0xdc00 + (ch & 0x3ff));
          dest += 2;
          continue;
        }
        // else fall through and write a regular character
      }
    }
    *(++dest) = (RogueCharacter) ch;
  }
}

RogueInt32 RogueString_decoded_utf8_count( const char* utf8_data, RogueInt32 utf8_count )
{
  if (utf8_count == -1) utf8_count = (int) strlen( utf8_data );

  const char* cur   = utf8_data - 1;
  const char* limit = utf8_data + utf8_count;

  int result_count = 0;
  while (++cur < limit)
  {
    ++result_count;
    int ch = *((unsigned char*)cur);
    if (ch >= 0x80)
    {
      if ((ch & 0xe0) == 0xc0)      ++cur;
      else if ((ch & 0xf0) == 0xe0) cur += 2;
      else
      {
        if (cur+3 < limit)
        {
          // This 4-byte UTF-8 value will encode to either one or two characters.
          int low = ((unsigned char*)cur)[1];
          cur += 3;

          if ((ch & 7) || (low & 0x30))
          {
            // Decoded value is >= 0x10000 - will be written as a surrogate pair
            ++result_count;
          }
          //else Decoded value is <= 0xffff - will be written normally
        }
      }
    }
  }

  return result_count;
}

void RogueString_print_characters( RogueCharacter* characters, int count )
{
  if (characters)
  {
    RogueCharacter* src = characters - 1;
    while (--count >= 0)
    {
      int ch = *(++src);

      if (ch < 0x80)
      {
        // %0xxxxxxx
        putchar( ch );
      }
      else if (ch < 0x800)
      {
        // %110xxxxx 10xxxxxx
        putchar( ((ch >> 6) & 0x1f) | 0xc0 );
        putchar( (ch & 0x3f) | 0x80 );
      }
      else if (ch >= 0xd800 && ch <= 0xdbff && --count >= 0)
      {
        // 'ch' is the high surrogate beginning of a surrogate pair.
        // Together with the next 16-bit 'low' value, the pair forms
        // a single 21 bit value between 0x10000 and 0x10FFFF.
        int low = *(++src);
        if (low >= 0xdc00 and low <= 0xdfff)
        {
          int value = 0x10000 + (((ch - 0xd800)<<10) | (low-0xdc00));
          putchar( 0xf0 | ((value>>18) & 7) );
          putchar( 0x80 | ((value>>12) & 0x3f) );
          putchar( 0x80 | ((value>>6)  & 0x3f) );
          putchar( (value & 0x3f) | 0x80 );
        }
      }
      else
      {
        // %1110xxxx 10xxxxxx 10xxxxxx
        putchar( ((ch >> 12) & 15) | 0xe0 );
        putchar( ((ch >> 6) & 0x3f) | 0x80 );
        putchar( (ch & 0x3f) | 0x80 );
      }
    }
  }
  else
  {
    printf( "null" );
  }
}

bool RogueString_to_c_string( RogueString* THIS, char* buffer, int buffer_size )
{
  if (THIS->count + 1 > buffer_size) return false;

  RogueCharacter* src = THIS->characters - 1;
  char* dest = buffer - 1;
  int n = THIS->count;

  while (--n >= 0)
  {
    *(++dest) = (char) (*(++src));
  }
  *(++dest) = 0;

  return true;
}

RogueString* RogueString_update_hash_code( RogueString* THIS )
{
  int code = 0;
  int len = THIS->count;
  RogueCharacter* src = THIS->characters - 1;
  while (--len >= 0)
  {
    code = ((code<<3) - code) + *(++src);
  }
  THIS->hash_code = code;
  return THIS;
}

//-----------------------------------------------------------------------------
//  RogueArray
//-----------------------------------------------------------------------------
RogueArray* RogueArray_set( RogueArray* THIS, RogueInt32 dest_i1, RogueArray* src_array, RogueInt32 src_i1, RogueInt32 copy_count )
{
  int element_size;
  int dest_i2, src_i2;

  if ( !src_array || dest_i1 >= THIS->count ) return THIS;
  if (THIS->is_reference_array ^ src_array->is_reference_array) return THIS;

  if (copy_count == -1) src_i2 = src_array->count - 1;
  else                  src_i2 = (src_i1 + copy_count) - 1;

  if (dest_i1 < 0)
  {
    src_i1 -= dest_i1;
    dest_i1 = 0;
  }

  if (src_i1 < 0) src_i1 = 0;
  if (src_i2 >= src_array->count) src_i2 = src_array->count - 1;
  if (src_i1 > src_i2) return THIS;

  copy_count = (src_i2 - src_i1) + 1;
  dest_i2 = dest_i1 + (copy_count - 1);
  if (dest_i2 >= THIS->count)
  {
    dest_i2 = (THIS->count - 1);
    copy_count = (dest_i2 - dest_i1) + 1;
  }
  if ( !copy_count ) return THIS;


#if defined(ROGUE_ARC)
  if (THIS != src_array || dest_i1 >= src_i1 + copy_count || (src_i1 + copy_count) <= dest_i1 || dest_i1 < src_i1)
  {
    // no overlap
    RogueObject** src  = src_array->objects + src_i1 - 1;
    RogueObject** dest = THIS->objects + dest_i1 - 1;
    while (--copy_count >= 0)
    {
      RogueObject* src_obj, dest_obj;
      if ((src_obj = *(++src))) ROGUE_INCREF(src_obj);
      if ((dest_obj = *(++dest)) && !(ROGUE_DECREF(dest_obj)))
      {
        // TODO: delete dest_obj
        *dest = src_obj;
      }
    }
  }
  else
  {
    // Copying earlier data to later data; copy in reverse order to
    // avoid accidental overwriting
    if (dest_i1 > src_i1)  // if they're equal then we don't need to copy anything!
    {
      RogueObject** src  = src_array->objects + src_i2 + 1;
      RogueObject** dest = THIS->objects + dest_i2 + 1;
      while (--copy_count >= 0)
      {
        RogueObject* src_obj, dest_obj;
        if ((src_obj = *(--src))) ROGUE_INCREF(src_obj);
        if ((dest_obj = *(--dest)) && !(ROGUE_DECREF(dest_obj)))
        {
          // TODO: delete dest_obj
          *dest = src_obj;
        }
      }
    }
  }
  return THIS;
#endif

  element_size = THIS->element_size;
  RogueByte* src = src_array->bytes + src_i1 * element_size;
  RogueByte* dest = THIS->bytes + (dest_i1 * element_size);
  int copy_bytes = copy_count * element_size;

  if (src == dest) return THIS;

  if (src >= dest + copy_bytes || (src + copy_bytes) <= dest)
  {
    // Copy region does not overlap
    memcpy( dest, src, copy_count * element_size );
  }
  else
  {
    // Copy region overlaps
    memmove( dest, src, copy_count * element_size );
  }

  return THIS;
}

//-----------------------------------------------------------------------------
//  RogueAllocationPage
//-----------------------------------------------------------------------------
RogueAllocationPage* RogueAllocationPage_create( RogueAllocationPage* next_page )
{
  RogueAllocationPage* result = (RogueAllocationPage*) ROGUE_NEW_BYTES(sizeof(RogueAllocationPage));
  result->next_page = next_page;
  result->cursor = result->data;
  result->remaining = ROGUEMM_PAGE_SIZE;
  return result;
}

RogueAllocationPage* RogueAllocationPage_delete( RogueAllocationPage* THIS )
{
  if (THIS) ROGUE_DEL_BYTES( THIS );
  return 0;
};

void* RogueAllocationPage_allocate( RogueAllocationPage* THIS, int size )
{
  // Round size up to multiple of 8.
  if (size > 0) size = (size + 7) & ~7;
  else          size = 8;

  if (size > THIS->remaining) return 0;

  //printf( "Allocating %d bytes from page.\n", size );
  void* result = THIS->cursor;
  THIS->cursor += size;
  THIS->remaining -= size;

  //printf( "%d / %d\n", ROGUEMM_PAGE_SIZE - remaining, ROGUEMM_PAGE_SIZE );
  return result;
}


//-----------------------------------------------------------------------------
//  RogueAllocator
//-----------------------------------------------------------------------------
RogueAllocator* RogueAllocator_create()
{
  RogueAllocator* result = (RogueAllocator*) ROGUE_NEW_BYTES( sizeof(RogueAllocator) );

  memset( result, 0, sizeof(RogueAllocator) );

  return result;
}

RogueAllocator* RogueAllocator_delete( RogueAllocator* THIS )
{
  while (THIS->pages)
  {
    RogueAllocationPage* next_page = THIS->pages->next_page;
    RogueAllocationPage_delete( THIS->pages );
    THIS->pages = next_page;
  }
  return 0;
}

void* RogueAllocator_allocate( RogueAllocator* THIS, int size )
{
#if ROGUE_GC_MODE_AUTO
  Rogue_collect_garbage();
#endif
  if (size > ROGUEMM_SMALL_ALLOCATION_SIZE_LIMIT)
  {
    Rogue_allocation_bytes_until_gc -= size;
    void * mem = ROGUE_NEW_BYTES(size);
#if ROGUE_GC_MODE_AUTO
    if (!mem)
    {
      // Try hard!
      Rogue_collect_garbage(true);
      mem = ROGUE_NEW_BYTES(size);
    }
#endif
    return mem;
  }

  size = (size > 0) ? (size + ROGUEMM_GRANULARITY_MASK) & ~ROGUEMM_GRANULARITY_MASK : ROGUEMM_GRANULARITY_SIZE;

  Rogue_allocation_bytes_until_gc -= size;

  int slot;
  ROGUE_DEF_LOCAL_REF(RogueObject*, obj, THIS->available_objects[(slot=(size>>ROGUEMM_GRANULARITY_BITS))]);

  if (obj)
  {
    //printf( "found free object\n");
    THIS->available_objects[slot] = obj->next_object;
    return obj;
  }

  // No free objects for requested size.

  // Try allocating a new object from the current page.
  if (THIS->pages )
  {
    obj = (RogueObject*) RogueAllocationPage_allocate( THIS->pages, size );
    if (obj) return obj;

    // Not enough room on allocation page.  Allocate any smaller blocks
    // we're able to and then move on to a new page.
    int s = slot - 1;
    while (s >= 1)
    {
      obj = (RogueObject*) RogueAllocationPage_allocate( THIS->pages, s << ROGUEMM_GRANULARITY_BITS );
      if (obj)
      {
        //printf( "free obj size %d\n", (s << ROGUEMM_GRANULARITY_BITS) );
        obj->next_object = THIS->available_objects[s];
        THIS->available_objects[s] = obj;
      }
      else
      {
        --s;
      }
    }
  }

  // New page; this will work for sure.
  THIS->pages = RogueAllocationPage_create( THIS->pages );
  return RogueAllocationPage_allocate( THIS->pages, size );
}

#if ROGUE_GC_MODE_BOEHM
void Rogue_Boehm_Finalizer( void* obj, void* data )
{
  RogueObject* o = (RogueObject*)obj;
  o->type->clean_up_fn(o);
}

RogueObject* RogueAllocator_allocate_object( RogueAllocator* THIS, RogueType* of_type, int size )
{
  // If we had more type information (e.g., whether the data contained
  // references), we could make better decisions here.
  // Also, it seems like we could probably use the small allocator too.
  RogueObject* obj = (RogueObject*)GC_MALLOC( size );
  if (!obj)
  {
    Rogue_collect_garbage( true );
    obj = (RogueObject*)GC_MALLOC( size );
  }
  ROGUE_GCDEBUG_STATEMENT( printf( "Allocating " ) );
  ROGUE_GCDEBUG_STATEMENT( RogueType_print_name(of_type) );
  ROGUE_GCDEBUG_STATEMENT( printf( " %p\n", (RogueObject*)obj ) );
  //ROGUE_GCDEBUG_STATEMENT( Rogue_print_stack_trace() );

  if (of_type->clean_up_fn)
  {
    GC_REGISTER_FINALIZER_IGNORE_SELF( obj, Rogue_Boehm_Finalizer, 0, 0, 0 );
  }

  memset( obj, 0, size );

  obj->type = of_type;
  obj->object_size = size;

  return obj;
}
#else
RogueObject* RogueAllocator_allocate_object( RogueAllocator* THIS, RogueType* of_type, int size )
{
  ROGUE_DEF_LOCAL_REF(RogueObject*, obj, (RogueObject*) RogueAllocator_allocate( THIS, size ));

  ROGUE_GCDEBUG_STATEMENT( printf( "Allocating " ) );
  ROGUE_GCDEBUG_STATEMENT( RogueType_print_name(of_type) );
  ROGUE_GCDEBUG_STATEMENT( printf( " %p\n", (RogueObject*)obj ) );
  //ROGUE_GCDEBUG_STATEMENT( Rogue_print_stack_trace() );

  memset( obj, 0, size );

  if (of_type->clean_up_fn)
  {
    obj->next_object = THIS->objects_requiring_cleanup;
    THIS->objects_requiring_cleanup = obj;
  }
  else
  {
    obj->next_object = THIS->objects;
    THIS->objects = obj;
  }
  obj->type = of_type;
  obj->object_size = size;

  return obj;
}
#endif

void* RogueAllocator_free( RogueAllocator* THIS, void* data, int size )
{
  if (data)
  {
    ROGUE_GCDEBUG_STATEMENT(memset(data,0,size));
    if (size > ROGUEMM_SMALL_ALLOCATION_SIZE_LIMIT)
    {
      ROGUE_DEL_BYTES( data );
    }
    else
    {
      // Return object to small allocation pool
      RogueObject* obj = (RogueObject*) data;
      int slot = (size + ROGUEMM_GRANULARITY_MASK) >> ROGUEMM_GRANULARITY_BITS;
      if (slot <= 0) slot = 1;
      obj->next_object = THIS->available_objects[slot];
      THIS->available_objects[slot] = obj;
    }
  }

  // Always returns null, allowing a pointer to be freed and assigned null in
  // a single step.
  return 0;
}


void RogueAllocator_free_objects( RogueAllocator* THIS )
{
  RogueObject* objects = THIS->objects;
  while (objects)
  {
    RogueObject* next_object = objects->next_object;
    RogueAllocator_free( THIS, objects, objects->object_size );
    objects = next_object;
  }

  THIS->objects = 0;
}

void RogueAllocator_collect_garbage( RogueAllocator* THIS )
{
  // Global program objects have already been traced through.

  // Trace through all as-yet unreferenced objects that are manually retained.
  RogueObject* cur = THIS->objects;
  while (cur)
  {
    if (cur->object_size >= 0 && cur->reference_count > 0)
    {
      cur->type->trace_fn( cur );
    }
    cur = cur->next_object;
  }

  cur = THIS->objects_requiring_cleanup;
  while (cur)
  {
    if (cur->object_size >= 0 && cur->reference_count > 0)
    {
      cur->type->trace_fn( cur );
    }
    cur = cur->next_object;
  }

  // For any unreferenced objects requiring clean-up, we'll:
  //   1.  Reference them and move them to a separate short-term list.
  //   2.  Finish the regular GC.
  //   3.  Call clean_up() on each of them, which may create new
  //       objects (which is why we have to wait until after the GC).
  //   4.  Move them to the list of regular objects.
  cur = THIS->objects_requiring_cleanup;
  RogueObject* unreferenced_clean_up_objects = 0;
  RogueObject* survivors = 0;  // local var for speed
  while (cur)
  {
    RogueObject* next_object = cur->next_object;
    if (cur->object_size < 0)
    {
      // Referenced.
      cur->object_size = ~cur->object_size;
      cur->next_object = survivors;
      survivors = cur;
    }
    else
    {
      // Unreferenced - go ahead and trace it since we'll call clean_up
      // on it.
      cur->type->trace_fn( cur );
      cur->next_object = unreferenced_clean_up_objects;
      unreferenced_clean_up_objects = cur;
    }
    cur = next_object;
  }
  THIS->objects_requiring_cleanup = survivors;


  // Reset or delete each general object
  cur = THIS->objects;
  THIS->objects = 0;
  survivors = 0;  // local var for speed

  while (cur)
  {
    RogueObject* next_object = cur->next_object;
    if (cur->object_size < 0)
    {
      cur->object_size = ~cur->object_size;
      cur->next_object = survivors;
      survivors = cur;
    }
    else
    {
      ROGUE_GCDEBUG_STATEMENT( printf( "Freeing " ) );
      ROGUE_GCDEBUG_STATEMENT( RogueType_print_name(cur->type) );
      ROGUE_GCDEBUG_STATEMENT( printf( " %p\n", cur ) );
      RogueAllocator_free( THIS, cur, cur->object_size );
    }
    cur = next_object;
  }

  THIS->objects = survivors;


  // Call clean_up() on unreferenced objects requiring cleanup
  // and move them to the general objects list so they'll be deleted
  // the next time they're unreferenced.  Calling clean_up() may
  // create additional objects so THIS->objects may change during a
  // clean_up() call.
  cur = unreferenced_clean_up_objects;
  while (cur)
  {
    RogueObject* next_object = cur->next_object;

    cur->type->clean_up_fn( cur );

    cur->object_size = ~cur->object_size;
    cur->next_object = THIS->objects;
    THIS->objects = cur;

    cur = next_object;
  }
}

void Rogue_print_stack_trace ( bool leading_newline )
{
  int i = Rogue_call_stack.count;
  if (i && leading_newline) printf("\n");
  while (--i >= 0)
  {
    printf( "%s\n", Rogue_call_stack.locations[i] );
  }
  printf("\n");
}

void Rogue_segfault_handler( int signal, siginfo_t *si, void *arg )
{
    if (si->si_addr < (void*)4096)
    {
      // Probably a null pointer dereference.
      printf( "Null reference error (accessing memory at %p)\n",
              si->si_addr );
    }
    else
    {
      if (si->si_code == SEGV_MAPERR)
        printf( "Access to unmapped memory at " );
      else if (si->si_code == SEGV_ACCERR)
        printf( "Access to forbidden memory at " );
      else
        printf( "Unknown segfault accessing " );
      printf("%p\n", si->si_addr);
    }

    Rogue_print_stack_trace( true );

    exit(0);
}

void Rogue_configure_types()
{
  int i;
  int* type_info = Rogue_type_info_table - 1;

  // Install seg fault handler
  struct sigaction sa;

  memset( &sa, 0, sizeof(sa) );
  sigemptyset( &sa.sa_mask );
  sa.sa_sigaction = Rogue_segfault_handler;
  sa.sa_flags     = SA_SIGINFO;

  sigaction( SIGSEGV, &sa, NULL );

  // Initialize allocators
  memset( Rogue_allocators, 0, sizeof(RogueAllocator)*Rogue_allocator_count );

  // Initialize types
  for (i=0; i<Rogue_type_count; ++i)
  {
    int j;
    RogueType* type = &Rogue_types[i];

    memset( type, 0, sizeof(RogueType) );

    type->index = i;
    type->name_index = Rogue_type_name_index_table[i];
    type->object_size = Rogue_object_size_table[i];
    type->allocator = &Rogue_allocators[ *(++type_info) ];
    type->methods = Rogue_dynamic_method_table + *(++type_info);
    type->base_type_count = *(++type_info);
    if (type->base_type_count)
    {
#if ROGUE_GC_MODE_BOEHM
      type->base_types = new (NoGC) RogueType*[ type->base_type_count ];
#else
      type->base_types = new RogueType*[ type->base_type_count ];
#endif
      for (j=0; j<type->base_type_count; ++j)
      {
        type->base_types[j] = &Rogue_types[ *(++type_info) ];
      }
    }
    type->trace_fn = Rogue_trace_fn_table[i];
    type->init_object_fn = Rogue_init_object_fn_table[i];
    type->init_fn        = Rogue_init_fn_table[i];
    type->clean_up_fn    = Rogue_clean_up_fn_table[i];
  }
}

#if ROGUE_GC_MODE_BOEHM
static GC_ToggleRefStatus Rogue_Boehm_ToggleRefStatus( void * o )
{
  RogueObject* obj = (RogueObject*)o;
  if (obj->reference_count > 0) return GC_TOGGLE_REF_STRONG;
  return GC_TOGGLE_REF_DROP;
}

static void Rogue_Boehm_on_collection_event( GC_EventType event )
{
  if (event == GC_EVENT_START)
  {
    Rogue_on_begin_gc.call();
  }
  else if (event == GC_EVENT_END)
  {
    Rogue_on_end_gc.call();
  }
}

void Rogue_configure_gc()
{
  // Initialize Boehm collector
  //GC_set_finalize_on_demand(0);
  GC_set_toggleref_func(Rogue_Boehm_ToggleRefStatus);
  GC_set_on_collection_event(Rogue_Boehm_on_collection_event);
  //GC_set_all_interior_pointers(0);
  GC_INIT();
}
#else
void Rogue_configure_gc()
{
}
#endif

#if ROGUE_GC_MODE_BOEHM
bool Rogue_collect_garbage( bool forced )
{
  if (forced)
  {
    GC_gcollect();
    return true;
  }

  return GC_collect_a_little();
}
#else
bool Rogue_collect_garbage( bool forced )
{
  int i;

  if (Rogue_allocation_bytes_until_gc > 0 && !forced) return false;

  Rogue_on_begin_gc.call();

//printf( "GC %d\n", Rogue_allocation_bytes_until_gc );
  Rogue_allocation_bytes_until_gc = Rogue_gc_threshold;

  Rogue_trace();

  for (i=0; i<Rogue_allocator_count; ++i)
  {
    RogueAllocator_collect_garbage( &Rogue_allocators[i] );
  }

  Rogue_on_end_gc.call();

  return true;
}
#endif

void Rogue_quit()
{
  int i;

  if ( !Rogue_configured ) return;
  Rogue_configured = 0;

  for (i=0; i<Rogue_allocator_count; ++i)
  {
    RogueAllocator_free_objects( &Rogue_allocators[i] );
  }

  for (i=0; i<Rogue_type_count; ++i)
  {
    RogueType_retire( &Rogue_types[i] );
  }
}

#if ROGUE_GC_MODE_BOEHM

void Rogue_Boehm_IncRef (RogueObject* o)
{
  ++o->reference_count;
  if (o->reference_count == 1)
  {
    GC_toggleref_add(o, 1);
  }
}
void Rogue_Boehm_DecRef (RogueObject* o)
{
  --o->reference_count;
  if (o->reference_count < 0)
  {
    o->reference_count = 0;
  }
}
#endif

typedef RogueString*(*ROGUEM0)(RogueStringBuilder*);
typedef RogueStringBuilder*(*ROGUEM1)(RogueStringBuilder*);
typedef RogueString*(*ROGUEM2)(RogueObject*);
typedef RogueString*(*ROGUEM3)(RogueCharacterList*);
typedef RogueCharacterList*(*ROGUEM4)(RogueCharacterList*);
typedef RogueString*(*ROGUEM5)(RogueClassGenericList*);
typedef RogueClassGenericList*(*ROGUEM6)(RogueClassGenericList*);
typedef RogueString*(*ROGUEM7)(RogueArray*);
typedef RogueString*(*ROGUEM8)(RogueClassStringReader*);
typedef RogueLogical(*ROGUEM9)(RogueClassStringReader*);
typedef RogueCharacter(*ROGUEM10)(RogueClassStringReader*);
typedef RogueString*(*ROGUEM11)(RogueStringList*);
typedef RogueStringList*(*ROGUEM12)(RogueStringList*);
typedef RogueString*(*ROGUEM13)(RogueClassGlobal*);
typedef RogueClassGlobal*(*ROGUEM14)(RogueClassGlobal*,RogueCharacterList*);
typedef RogueString*(*ROGUEM15)(RogueClassConsole*);
typedef RogueString*(*ROGUEM16)(RogueClassRogueC*);
typedef RogueString*(*ROGUEM17)(RogueClassException*);
typedef RogueClassException*(*ROGUEM18)(RogueClassException*);
typedef RogueString*(*ROGUEM19)(RogueClassStackTrace*);
typedef RogueString*(*ROGUEM20)(RogueClassProgram*);
typedef RogueString*(*ROGUEM21)(RogueTemplateList*);
typedef RogueTemplateList*(*ROGUEM22)(RogueTemplateList*);
typedef RogueString*(*ROGUEM23)(RogueClassTemplate*);
typedef RogueString*(*ROGUEM24)(RogueClassString_TemplateTable*);
typedef RogueString*(*ROGUEM25)(RogueClassString_AugmentListTable*);
typedef RogueString*(*ROGUEM26)(RogueClassMethod*);
typedef RogueString*(*ROGUEM27)(RoguePropertyList*);
typedef RoguePropertyList*(*ROGUEM28)(RoguePropertyList*);
typedef RogueString*(*ROGUEM29)(RogueClassProperty*);
typedef RogueString*(*ROGUEM30)(RogueClassString_MethodListTable*);
typedef RogueString*(*ROGUEM31)(RogueTypeList*);
typedef RogueTypeList*(*ROGUEM32)(RogueTypeList*);
typedef RogueString*(*ROGUEM33)(RogueClassType*);
typedef RogueString*(*ROGUEM34)(RogueClassString_TypeTable*);
typedef RogueString*(*ROGUEM35)(RogueClassString_Int32Table*);
typedef RogueString*(*ROGUEM36)(RogueClassString_StringListTable*);
typedef RogueString*(*ROGUEM37)(RogueClassString_Int32TableEntry*);
typedef RogueString*(*ROGUEM38)(RogueClassInt32_TemplateTable*);
typedef RogueString*(*ROGUEM39)(RogueClassToken*);
typedef RogueCharacter(*ROGUEM40)(RogueClassToken*);
typedef RogueInt32(*ROGUEM41)(RogueClassToken*);
typedef RogueInt64(*ROGUEM42)(RogueClassToken*);
typedef RogueReal64(*ROGUEM43)(RogueClassToken*);
typedef RogueClassType*(*ROGUEM44)(RogueClassToken*);
typedef RogueClassToken*(*ROGUEM45)(RogueClassToken*);
typedef RogueString*(*ROGUEM46)(RogueClassError*);
typedef RogueClassError*(*ROGUEM47)(RogueClassError*);
typedef RogueString*(*ROGUEM48)(RogueClassRogueError*);
typedef RogueClassRogueError*(*ROGUEM49)(RogueClassRogueError*);
typedef RogueString*(*ROGUEM50)(RogueClassCmdLabel*);
typedef void(*ROGUEM51)(RogueClassCmd*,RogueClassCmdStatementList*);
typedef RogueClassCmd*(*ROGUEM52)(RogueClassCmd*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM53)(RogueClassCmd*,RogueClassType*,RogueClassScope*);
typedef RogueClassCmdLabel*(*ROGUEM54)(RogueClassCmdLabel*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM55)(RogueClassCmd*,RogueClassType*);
typedef void(*ROGUEM56)(RogueClassCmd*,RogueClassScope*);
typedef RogueLogical(*ROGUEM57)(RogueClassCmd*);
typedef RogueClassType*(*ROGUEM58)(RogueClassCmd*,RogueClassScope*);
typedef void(*ROGUEM59)(RogueClassCmd*);
typedef RogueClassType*(*ROGUEM60)(RogueClassCmd*);
typedef RogueLogical(*ROGUEM61)(RogueClassCmdLabel*);
typedef RogueClassCmd*(*ROGUEM62)(RogueClassCmdLabel*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM63)(RogueClassCmd*,RogueClassScope*,RogueClassCmd*);
typedef RogueClassCmd*(*ROGUEM64)(RogueClassCmd*,RogueClassScope*,RogueInt32);
typedef RogueClassCmd*(*ROGUEM65)(RogueClassCmd*,RogueClassScope*,RogueClassTokenType*,RogueClassCmd*);
typedef void(*ROGUEM66)(RogueClassCmdLabel*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM67)(RogueClassCmdLabel*);
typedef void(*ROGUEM68)(RogueClassCmdLabel*,RogueClassScope*);
typedef RogueClassCmdLabel*(*ROGUEM69)(RogueClassCmdLabel*);
typedef RogueString*(*ROGUEM70)(RogueClassCmd*);
typedef RogueClassCmd*(*ROGUEM71)(RogueClassCmd*,RogueClassCloneArgs*);
typedef void(*ROGUEM72)(RogueClassCmd*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmd*(*ROGUEM73)(RogueClassCmd*);
typedef RogueString*(*ROGUEM74)(RogueCmdList*);
typedef RogueString*(*ROGUEM75)(RogueClassCmdStatementList*);
typedef RogueClassCmdStatementList*(*ROGUEM76)(RogueClassCmdStatementList*);
typedef RogueClassCmdStatementList*(*ROGUEM77)(RogueClassCmdStatementList*,RogueInt32);
typedef RogueCmdList*(*ROGUEM78)(RogueCmdList*);
typedef RogueCmdList*(*ROGUEM79)(RogueCmdList*,RogueInt32);
typedef RogueString*(*ROGUEM80)(RogueClassAttributes*);
typedef RogueString*(*ROGUEM81)(RogueClassCmdReturn*);
typedef RogueClassCmd*(*ROGUEM82)(RogueClassCmdReturn*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM83)(RogueClassCmdReturn*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM84)(RogueClassCmdReturn*);
typedef void(*ROGUEM85)(RogueClassCmdReturn*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM86)(RogueClassCmdReturn*);
typedef void(*ROGUEM87)(RogueClassCmdReturn*,RogueClassScope*);
typedef RogueClassCmdReturn*(*ROGUEM88)(RogueClassCmdReturn*);
typedef RogueString*(*ROGUEM89)(RogueClassCmdStatement*);
typedef void(*ROGUEM90)(RogueClassCmdStatement*);
typedef void(*ROGUEM91)(RogueClassCmdStatement*,RogueClassScope*);
typedef RogueClassCmdStatement*(*ROGUEM92)(RogueClassCmdStatement*);
typedef RogueString*(*ROGUEM93)(RogueClassTokenType*);
typedef RogueClassToken*(*ROGUEM94)(RogueClassTokenType*,RogueString*,RogueInt32,RogueInt32);
typedef RogueClassToken*(*ROGUEM95)(RogueClassTokenType*,RogueString*,RogueInt32,RogueInt32,RogueString*);
typedef RogueClassToken*(*ROGUEM96)(RogueClassTokenType*,RogueClassToken*,RogueString*);
typedef RogueLogical(*ROGUEM97)(RogueClassTokenType*);
typedef RogueClassTokenType*(*ROGUEM98)(RogueClassTokenType*);
typedef RogueString*(*ROGUEM99)(RogueClassScope*);
typedef RogueString*(*ROGUEM100)(RogueMethodList*);
typedef RogueMethodList*(*ROGUEM101)(RogueMethodList*);
typedef RogueString*(*ROGUEM102)(RogueClassFunction_Type_RETURNSLogical*);
typedef RogueLogical(*ROGUEM103)(RogueClassFunction_Type_RETURNSLogical*,RogueClassType*);
typedef RogueClassFunction_Type_RETURNSLogical*(*ROGUEM104)(RogueClassFunction_Type_RETURNSLogical*);
typedef RogueString*(*ROGUEM105)(RogueClassFunction_159*);
typedef RogueLogical(*ROGUEM106)(RogueClassFunction_159*,RogueClassType*);
typedef RogueClassFunction_159*(*ROGUEM107)(RogueClassFunction_159*);
typedef RogueString*(*ROGUEM108)(RogueClassFunction_160*);
typedef RogueLogical(*ROGUEM109)(RogueClassFunction_160*,RogueClassType*);
typedef RogueClassFunction_160*(*ROGUEM110)(RogueClassFunction_160*);
typedef RogueString*(*ROGUEM111)(RogueClassCPPWriter*);
typedef RogueString*(*ROGUEM112)(RogueClassString_MethodTable*);
typedef RogueString*(*ROGUEM113)(RogueLocalList*);
typedef RogueLocalList*(*ROGUEM114)(RogueLocalList*);
typedef RogueString*(*ROGUEM115)(RogueClassLocal*);
typedef RogueString*(*ROGUEM116)(RogueInt32List*);
typedef RogueInt32List*(*ROGUEM117)(RogueInt32List*);
typedef RogueString*(*ROGUEM118)(RogueClassMath*);
typedef RogueString*(*ROGUEM119)(RogueByteList*);
typedef RogueByteList*(*ROGUEM120)(RogueByteList*);
typedef RogueString*(*ROGUEM121)(RogueClassSystem*);
typedef RogueString*(*ROGUEM122)(RogueClassString_LogicalTable*);
typedef RogueString*(*ROGUEM123)(RogueParserList*);
typedef RogueParserList*(*ROGUEM124)(RogueParserList*);
typedef RogueString*(*ROGUEM125)(RogueClassParser*);
typedef RogueString*(*ROGUEM126)(RogueClassString_ParseReaderTable*);
typedef RogueString*(*ROGUEM127)(RogueClassStopwatch*);
typedef RogueString*(*ROGUEM128)(RogueClassFile*);
typedef RogueString*(*ROGUEM129)(RogueClassCmdMakeRequisite*);
typedef RogueClassCmdMakeRequisite*(*ROGUEM130)(RogueClassCmdMakeRequisite*,RogueClassCloneArgs*);
typedef RogueLogical(*ROGUEM131)(RogueClassCmdMakeRequisite*);
typedef RogueClassCmd*(*ROGUEM132)(RogueClassCmdMakeRequisite*,RogueClassScope*);
typedef RogueClassCmdMakeRequisite*(*ROGUEM133)(RogueClassCmdMakeRequisite*);
typedef RogueString*(*ROGUEM134)(RogueTokenList*);
typedef RogueTokenList*(*ROGUEM135)(RogueTokenList*);
typedef RogueString*(*ROGUEM136)(RogueClassLineReader*);
typedef RogueLogical(*ROGUEM137)(RogueClassLineReader*);
typedef RogueString*(*ROGUEM138)(RogueTypeParameterList*);
typedef RogueTypeParameterList*(*ROGUEM139)(RogueTypeParameterList*);
typedef RogueString*(*ROGUEM140)(RogueClassTypeParameter*);
typedef RogueString*(*ROGUEM141)(RogueAugmentList*);
typedef RogueAugmentList*(*ROGUEM142)(RogueAugmentList*);
typedef RogueString*(*ROGUEM143)(RogueClassAugment*);
typedef RogueString*(*ROGUEM144)(RogueClassString_TokenTypeTable*);
typedef RogueString*(*ROGUEM145)(RogueClassLiteralCharacterToken*);
typedef RogueCharacter(*ROGUEM146)(RogueClassLiteralCharacterToken*);
typedef RogueClassLiteralCharacterToken*(*ROGUEM147)(RogueClassLiteralCharacterToken*);
typedef RogueString*(*ROGUEM148)(RogueClassLiteralInt64Token*);
typedef RogueInt32(*ROGUEM149)(RogueClassLiteralInt64Token*);
typedef RogueInt64(*ROGUEM150)(RogueClassLiteralInt64Token*);
typedef RogueReal64(*ROGUEM151)(RogueClassLiteralInt64Token*);
typedef RogueClassLiteralInt64Token*(*ROGUEM152)(RogueClassLiteralInt64Token*);
typedef RogueString*(*ROGUEM153)(RogueClassLiteralInt32Token*);
typedef RogueInt32(*ROGUEM154)(RogueClassLiteralInt32Token*);
typedef RogueReal64(*ROGUEM155)(RogueClassLiteralInt32Token*);
typedef RogueClassLiteralInt32Token*(*ROGUEM156)(RogueClassLiteralInt32Token*);
typedef RogueString*(*ROGUEM157)(RogueClassLiteralReal64Token*);
typedef RogueInt32(*ROGUEM158)(RogueClassLiteralReal64Token*);
typedef RogueReal64(*ROGUEM159)(RogueClassLiteralReal64Token*);
typedef RogueClassLiteralReal64Token*(*ROGUEM160)(RogueClassLiteralReal64Token*);
typedef RogueString*(*ROGUEM161)(RogueClassStringDataToken*);
typedef RogueClassStringDataToken*(*ROGUEM162)(RogueClassStringDataToken*);
typedef RogueString*(*ROGUEM163)(RogueClassString_TypeSpecializerTable*);
typedef RogueString*(*ROGUEM164)(RogueClassTypeSpecializer*);
typedef RogueString*(*ROGUEM165)(RogueTypeSpecializerList*);
typedef RogueTypeSpecializerList*(*ROGUEM166)(RogueTypeSpecializerList*);
typedef RogueString*(*ROGUEM167)(RogueTableEntry_of_String_TemplateList*);
typedef RogueTableEntry_of_String_TemplateList*(*ROGUEM168)(RogueTableEntry_of_String_TemplateList*);
typedef RogueString*(*ROGUEM169)(RogueClassString_TemplateTableEntry*);
typedef RogueString*(*ROGUEM170)(RogueTableEntry_of_String_AugmentListList*);
typedef RogueTableEntry_of_String_AugmentListList*(*ROGUEM171)(RogueTableEntry_of_String_AugmentListList*);
typedef RogueString*(*ROGUEM172)(RogueClassString_AugmentListTableEntry*);
typedef RogueString*(*ROGUEM173)(RogueCmdLabelList*);
typedef RogueCmdLabelList*(*ROGUEM174)(RogueCmdLabelList*);
typedef RogueString*(*ROGUEM175)(RogueClassString_CmdLabelTable*);
typedef RogueString*(*ROGUEM176)(RogueClassCloneArgs*);
typedef RogueClassCmdLabel*(*ROGUEM177)(RogueClassCloneArgs*,RogueClassCmdLabel*);
typedef RogueClassCloneArgs*(*ROGUEM178)(RogueClassCloneArgs*);
typedef RogueString*(*ROGUEM179)(RogueClassCloneMethodArgs*);
typedef RogueClassCmdLabel*(*ROGUEM180)(RogueClassCloneMethodArgs*,RogueClassCmdLabel*);
typedef RogueClassCloneMethodArgs*(*ROGUEM181)(RogueClassCloneMethodArgs*);
typedef RogueString*(*ROGUEM182)(RogueClassCmdAccess*);
typedef RogueClassCmd*(*ROGUEM183)(RogueClassCmdAccess*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM184)(RogueClassCmdAccess*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM185)(RogueClassCmdAccess*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM186)(RogueClassCmdAccess*,RogueClassScope*,RogueClassCmd*);
typedef RogueClassCmd*(*ROGUEM187)(RogueClassCmdAccess*,RogueClassScope*,RogueClassTokenType*,RogueClassCmd*);
typedef RogueClassType*(*ROGUEM188)(RogueClassCmdAccess*);
typedef void(*ROGUEM189)(RogueClassCmdAccess*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM190)(RogueClassCmdAccess*);
typedef void(*ROGUEM191)(RogueClassCmdAccess*,RogueClassScope*);
typedef RogueClassCmdAccess*(*ROGUEM192)(RogueClassCmdAccess*);
typedef RogueString*(*ROGUEM193)(RogueClassCmdArgs*);
typedef RogueClassCmdArgs*(*ROGUEM194)(RogueClassCmdArgs*);
typedef RogueClassCmdArgs*(*ROGUEM195)(RogueClassCmdArgs*,RogueInt32);
typedef RogueString*(*ROGUEM196)(RogueCmdFlagArgList*);
typedef RogueCmdFlagArgList*(*ROGUEM197)(RogueCmdFlagArgList*);
typedef RogueString*(*ROGUEM198)(RogueClassCmdFlagArg*);
typedef RogueClassCmdFlagArg*(*ROGUEM199)(RogueClassCmdFlagArg*,RogueClassCloneArgs*);
typedef RogueClassCmdFlagArg*(*ROGUEM200)(RogueClassCmdFlagArg*);
typedef RogueString*(*ROGUEM201)(RogueClassCmdAssign*);
typedef RogueClassCmd*(*ROGUEM202)(RogueClassCmdAssign*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM203)(RogueClassCmdAssign*,RogueClassScope*);
typedef void(*ROGUEM204)(RogueClassCmdAssign*,RogueClassScope*);
typedef RogueClassCmdAssign*(*ROGUEM205)(RogueClassCmdAssign*);
typedef RogueString*(*ROGUEM206)(RogueCmdControlStructureList*);
typedef RogueCmdControlStructureList*(*ROGUEM207)(RogueCmdControlStructureList*);
typedef RogueString*(*ROGUEM208)(RogueClassCmdControlStructure*);
typedef RogueLogical(*ROGUEM209)(RogueClassCmdControlStructure*);
typedef RogueClassCmdControlStructure*(*ROGUEM210)(RogueClassCmdControlStructure*);
typedef RogueClassCmd*(*ROGUEM211)(RogueClassCmdControlStructure*,RogueClassCmdControlStructure*);
typedef RogueString*(*ROGUEM212)(RogueClassCmdLiteralThis*);
typedef RogueClassCmd*(*ROGUEM213)(RogueClassCmdLiteralThis*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM214)(RogueClassCmdThisContext*,RogueClassScope*);
typedef void(*ROGUEM215)(RogueClassCmdLiteralThis*);
typedef RogueClassCmd*(*ROGUEM216)(RogueClassCmdLiteralThis*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM217)(RogueClassCmdThisContext*);
typedef void(*ROGUEM218)(RogueClassCmdThisContext*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM219)(RogueClassCmdThisContext*);
typedef void(*ROGUEM220)(RogueClassCmdThisContext*,RogueClassScope*);
typedef RogueClassCmdLiteralThis*(*ROGUEM221)(RogueClassCmdLiteralThis*);
typedef RogueString*(*ROGUEM222)(RogueClassCmdThisContext*);
typedef RogueClassCmd*(*ROGUEM223)(RogueClassCmdThisContext*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM224)(RogueClassCmdThisContext*,RogueClassScope*);
typedef RogueClassCmdThisContext*(*ROGUEM225)(RogueClassCmdThisContext*);
typedef RogueString*(*ROGUEM226)(RogueClassCmdGenericLoop*);
typedef RogueClassCmd*(*ROGUEM227)(RogueClassCmdGenericLoop*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM228)(RogueClassCmdGenericLoop*,RogueClassScope*);
typedef void(*ROGUEM229)(RogueClassCmdGenericLoop*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM230)(RogueClassCmdGenericLoop*);
typedef void(*ROGUEM231)(RogueClassCmdGenericLoop*,RogueClassScope*);
typedef RogueClassCmdGenericLoop*(*ROGUEM232)(RogueClassCmdGenericLoop*);
typedef RogueString*(*ROGUEM233)(RogueClassCmdLiteralInt32*);
typedef RogueClassCmd*(*ROGUEM234)(RogueClassCmdLiteralInt32*,RogueClassType*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM235)(RogueClassCmdLiteralInt32*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM236)(RogueClassCmdLiteral*,RogueClassScope*);
typedef RogueLogical(*ROGUEM237)(RogueClassCmdLiteral*);
typedef RogueClassCmd*(*ROGUEM238)(RogueClassCmdLiteralInt32*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM239)(RogueClassCmdLiteralInt32*);
typedef void(*ROGUEM240)(RogueClassCmdLiteralInt32*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM241)(RogueClassCmdLiteral*);
typedef void(*ROGUEM242)(RogueClassCmdLiteral*,RogueClassScope*);
typedef RogueClassCmdLiteralInt32*(*ROGUEM243)(RogueClassCmdLiteralInt32*);
typedef RogueString*(*ROGUEM244)(RogueClassCmdLiteral*);
typedef RogueClassCmdLiteral*(*ROGUEM245)(RogueClassCmdLiteral*);
typedef RogueString*(*ROGUEM246)(RogueClassCmdCompareNE*);
typedef RogueClassCmd*(*ROGUEM247)(RogueClassCmdCompareNE*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM248)(RogueClassCmdCompareNE*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM249)(RogueClassCmdBinary*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM250)(RogueClassCmdComparison*);
typedef void(*ROGUEM251)(RogueClassCmdBinary*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM252)(RogueClassCmdBinary*);
typedef void(*ROGUEM253)(RogueClassCmdBinary*,RogueClassScope*);
typedef RogueClassCmdCompareNE*(*ROGUEM254)(RogueClassCmdCompareNE*);
typedef RogueString*(*ROGUEM255)(RogueClassCmdBinary*);
typedef RogueLogical(*ROGUEM256)(RogueClassCmdComparison*);
typedef RogueClassCmd*(*ROGUEM257)(RogueClassCmdComparison*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM258)(RogueClassCmdBinary*,RogueClassScope*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM259)(RogueClassCmdBinary*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM260)(RogueClassCmdCompareNE*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM261)(RogueClassCmdComparison*);
typedef RogueClassCmdComparison*(*ROGUEM262)(RogueClassCmdComparison*);
typedef RogueClassCmd*(*ROGUEM263)(RogueClassCmdComparison*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueClassType*(*ROGUEM264)(RogueClassCmdBinary*);
typedef RogueClassCmdBinary*(*ROGUEM265)(RogueClassCmdBinary*);
typedef RogueLogical(*ROGUEM266)(RogueClassCmdBinary*);
typedef RogueString*(*ROGUEM267)(RogueClassTaskArgs*);
typedef RogueClassTaskArgs*(*ROGUEM268)(RogueClassTaskArgs*);
typedef RogueString*(*ROGUEM269)(RogueClassCmdTaskControl*);
typedef RogueLogical(*ROGUEM270)(RogueClassCmdTaskControl*);
typedef RogueClassCmd*(*ROGUEM271)(RogueClassCmdTaskControl*,RogueClassScope*);
typedef void(*ROGUEM272)(RogueClassCmdTaskControl*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM273)(RogueClassCmdTaskControl*);
typedef void(*ROGUEM274)(RogueClassCmdTaskControl*,RogueClassScope*);
typedef RogueClassCmdTaskControl*(*ROGUEM275)(RogueClassCmdTaskControl*);
typedef RogueString*(*ROGUEM276)(RogueClassCmdTaskControlSection*);
typedef RogueString*(*ROGUEM277)(RogueTableEntry_of_String_MethodListList*);
typedef RogueTableEntry_of_String_MethodListList*(*ROGUEM278)(RogueTableEntry_of_String_MethodListList*);
typedef RogueString*(*ROGUEM279)(RogueClassString_MethodListTableEntry*);
typedef RogueString*(*ROGUEM280)(RogueDefinitionList*);
typedef RogueDefinitionList*(*ROGUEM281)(RogueDefinitionList*);
typedef RogueString*(*ROGUEM282)(RogueClassDefinition*);
typedef RogueString*(*ROGUEM283)(RogueClassString_DefinitionTable*);
typedef RogueString*(*ROGUEM284)(RogueNativePropertyList*);
typedef RogueNativePropertyList*(*ROGUEM285)(RogueNativePropertyList*);
typedef RogueString*(*ROGUEM286)(RogueClassNativeProperty*);
typedef RogueString*(*ROGUEM287)(RogueClassString_PropertyTable*);
typedef RogueString*(*ROGUEM288)(RogueClassCmdLiteralNull*);
typedef RogueClassCmd*(*ROGUEM289)(RogueClassCmdLiteralNull*,RogueClassType*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM290)(RogueClassCmdLiteralNull*,RogueClassCloneArgs*);
typedef RogueClassCmdLiteralNull*(*ROGUEM291)(RogueClassCmdLiteralNull*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM292)(RogueClassCmdLiteralNull*);
typedef void(*ROGUEM293)(RogueClassCmdLiteralNull*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralNull*(*ROGUEM294)(RogueClassCmdLiteralNull*);
typedef RogueString*(*ROGUEM295)(RogueClassCmdCreateCompound*);
typedef RogueClassCmd*(*ROGUEM296)(RogueClassCmdCreateCompound*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM297)(RogueClassCmdCreateCompound*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM298)(RogueClassCmdCreateCompound*);
typedef void(*ROGUEM299)(RogueClassCmdCreateCompound*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM300)(RogueClassCmdCreateCompound*);
typedef void(*ROGUEM301)(RogueClassCmdCreateCompound*,RogueClassScope*);
typedef RogueClassCmdCreateCompound*(*ROGUEM302)(RogueClassCmdCreateCompound*);
typedef RogueString*(*ROGUEM303)(RogueClassCmdLiteralLogical*);
typedef RogueClassCmd*(*ROGUEM304)(RogueClassCmdLiteralLogical*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM305)(RogueClassCmdLiteralLogical*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM306)(RogueClassCmdLiteralLogical*);
typedef void(*ROGUEM307)(RogueClassCmdLiteralLogical*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralLogical*(*ROGUEM308)(RogueClassCmdLiteralLogical*);
typedef RogueString*(*ROGUEM309)(RogueClassCmdLiteralString*);
typedef RogueClassCmd*(*ROGUEM310)(RogueClassCmdLiteralString*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM311)(RogueClassCmdLiteralString*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM312)(RogueClassCmdLiteralString*);
typedef void(*ROGUEM313)(RogueClassCmdLiteralString*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM314)(RogueClassCmdLiteralString*);
typedef void(*ROGUEM315)(RogueClassCmdLiteralString*,RogueClassScope*);
typedef RogueClassCmdLiteralString*(*ROGUEM316)(RogueClassCmdLiteralString*);
typedef RogueString*(*ROGUEM317)(RogueClassCmdWriteGlobal*);
typedef RogueClassCmd*(*ROGUEM318)(RogueClassCmdWriteGlobal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM319)(RogueClassCmdWriteGlobal*,RogueClassScope*);
typedef void(*ROGUEM320)(RogueClassCmdWriteGlobal*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM321)(RogueClassCmdWriteGlobal*);
typedef void(*ROGUEM322)(RogueClassCmdWriteGlobal*,RogueClassScope*);
typedef RogueClassCmdWriteGlobal*(*ROGUEM323)(RogueClassCmdWriteGlobal*);
typedef RogueString*(*ROGUEM324)(RogueClassCmdWriteProperty*);
typedef RogueClassCmd*(*ROGUEM325)(RogueClassCmdWriteProperty*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM326)(RogueClassCmdWriteProperty*,RogueClassScope*);
typedef void(*ROGUEM327)(RogueClassCmdWriteProperty*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM328)(RogueClassCmdWriteProperty*);
typedef void(*ROGUEM329)(RogueClassCmdWriteProperty*,RogueClassScope*);
typedef RogueClassCmdWriteProperty*(*ROGUEM330)(RogueClassCmdWriteProperty*);
typedef RogueString*(*ROGUEM331)(RogueTableEntry_of_String_TypeList*);
typedef RogueTableEntry_of_String_TypeList*(*ROGUEM332)(RogueTableEntry_of_String_TypeList*);
typedef RogueString*(*ROGUEM333)(RogueClassString_TypeTableEntry*);
typedef RogueString*(*ROGUEM334)(RogueTableEntry_of_String_Int32List*);
typedef RogueTableEntry_of_String_Int32List*(*ROGUEM335)(RogueTableEntry_of_String_Int32List*);
typedef RogueString*(*ROGUEM336)(RogueTableEntry_of_String_StringListList*);
typedef RogueTableEntry_of_String_StringListList*(*ROGUEM337)(RogueTableEntry_of_String_StringListList*);
typedef RogueString*(*ROGUEM338)(RogueClassString_StringListTableEntry*);
typedef RogueString*(*ROGUEM339)(RogueTableEntry_of_Int32_TemplateList*);
typedef RogueTableEntry_of_Int32_TemplateList*(*ROGUEM340)(RogueTableEntry_of_Int32_TemplateList*);
typedef RogueString*(*ROGUEM341)(RogueClassInt32_TemplateTableEntry*);
typedef RogueString*(*ROGUEM342)(RogueClassCmdCastToType*);
typedef RogueClassCmd*(*ROGUEM343)(RogueClassCmdCastToType*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM344)(RogueClassCmdCastToType*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM345)(RogueClassCmdTypeOperator*);
typedef void(*ROGUEM346)(RogueClassCmdCastToType*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM347)(RogueClassCmdTypeOperator*);
typedef void(*ROGUEM348)(RogueClassCmdTypeOperator*,RogueClassScope*);
typedef RogueClassCmdCastToType*(*ROGUEM349)(RogueClassCmdCastToType*);
typedef RogueString*(*ROGUEM350)(RogueClassCmdTypeOperator*);
typedef RogueClassCmdTypeOperator*(*ROGUEM351)(RogueClassCmdTypeOperator*);
typedef RogueString*(*ROGUEM352)(RogueClassCmdLogicalize*);
typedef RogueClassCmd*(*ROGUEM353)(RogueClassCmdLogicalize*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM354)(RogueClassCmdLogicalize*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM355)(RogueClassCmdLogicalize*);
typedef void(*ROGUEM356)(RogueClassCmdUnary*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM357)(RogueClassCmdUnary*);
typedef void(*ROGUEM358)(RogueClassCmdUnary*,RogueClassScope*);
typedef RogueClassCmdLogicalize*(*ROGUEM359)(RogueClassCmdLogicalize*);
typedef RogueString*(*ROGUEM360)(RogueClassCmdUnary*);
typedef RogueClassCmd*(*ROGUEM361)(RogueClassCmdUnary*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM362)(RogueClassCmdUnary*);
typedef RogueClassCmdUnary*(*ROGUEM363)(RogueClassCmdUnary*);
typedef RogueString*(*ROGUEM364)(RogueClassCmdReadSingleton*);
typedef RogueClassCmd*(*ROGUEM365)(RogueClassCmdReadSingleton*,RogueClassCloneArgs*);
typedef void(*ROGUEM366)(RogueClassCmdReadSingleton*);
typedef RogueClassCmd*(*ROGUEM367)(RogueClassCmdReadSingleton*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM368)(RogueClassCmdReadSingleton*);
typedef void(*ROGUEM369)(RogueClassCmdReadSingleton*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM370)(RogueClassCmdReadSingleton*,RogueClassScope*);
typedef RogueClassCmdReadSingleton*(*ROGUEM371)(RogueClassCmdReadSingleton*);
typedef RogueString*(*ROGUEM372)(RogueClassCmdCallInlineNative*);
typedef RogueString*(*ROGUEM373)(RogueClassCmdCallInlineNativeRoutine*);
typedef RogueClassCmd*(*ROGUEM374)(RogueClassCmdCallInlineNativeRoutine*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM375)(RogueClassCmdCall*);
typedef RogueClassCmd*(*ROGUEM376)(RogueClassCmdCall*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM377)(RogueClassCmdCallInlineNative*,RogueClassScope*,RogueInt32);
typedef RogueClassType*(*ROGUEM378)(RogueClassCmdCallInlineNativeRoutine*);
typedef void(*ROGUEM379)(RogueClassCmdCallInlineNative*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM380)(RogueClassCmdCall*);
typedef void(*ROGUEM381)(RogueClassCmdCall*,RogueClassScope*);
typedef RogueClassCmdCallInlineNativeRoutine*(*ROGUEM382)(RogueClassCmdCallInlineNativeRoutine*);
typedef void(*ROGUEM383)(RogueClassCmdCallInlineNative*,RogueClassCPPWriter*);
typedef RogueClassCmdCallInlineNative*(*ROGUEM384)(RogueClassCmdCallInlineNative*);
typedef RogueString*(*ROGUEM385)(RogueClassCmdCall*);
typedef RogueClassCmdCall*(*ROGUEM386)(RogueClassCmdCall*);
typedef RogueString*(*ROGUEM387)(RogueClassCmdCallNativeRoutine*);
typedef RogueClassCmd*(*ROGUEM388)(RogueClassCmdCallNativeRoutine*,RogueClassCloneArgs*);
typedef void(*ROGUEM389)(RogueClassCmdCallNativeRoutine*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallNativeRoutine*(*ROGUEM390)(RogueClassCmdCallNativeRoutine*);
typedef RogueString*(*ROGUEM391)(RogueClassMacroArgs*);
typedef RogueClassMacroArgs*(*ROGUEM392)(RogueClassMacroArgs*);
typedef RogueString*(*ROGUEM393)(RogueClassCmdInlineNative*);
typedef RogueClassCmdInlineNative*(*ROGUEM394)(RogueClassCmdInlineNative*,RogueClassCloneArgs*);
typedef RogueLogical(*ROGUEM395)(RogueClassCmdInlineNative*);
typedef RogueClassCmd*(*ROGUEM396)(RogueClassCmdInlineNative*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM397)(RogueClassCmdInlineNative*,RogueClassScope*,RogueClassCmd*);
typedef RogueClassCmd*(*ROGUEM398)(RogueClassCmdInlineNative*,RogueClassScope*,RogueInt32);
typedef RogueClassCmd*(*ROGUEM399)(RogueClassCmdInlineNative*,RogueClassScope*,RogueClassTokenType*,RogueClassCmd*);
typedef RogueClassType*(*ROGUEM400)(RogueClassCmdInlineNative*);
typedef void(*ROGUEM401)(RogueClassCmdInlineNative*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM402)(RogueClassCmdInlineNative*);
typedef void(*ROGUEM403)(RogueClassCmdInlineNative*,RogueClassScope*);
typedef RogueClassCmdInlineNative*(*ROGUEM404)(RogueClassCmdInlineNative*);
typedef RogueString*(*ROGUEM405)(RogueClassCmdCallRoutine*);
typedef RogueClassCmd*(*ROGUEM406)(RogueClassCmdCallRoutine*,RogueClassCloneArgs*);
typedef void(*ROGUEM407)(RogueClassCmdCallRoutine*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallRoutine*(*ROGUEM408)(RogueClassCmdCallRoutine*);
typedef RogueString*(*ROGUEM409)(RogueClassCmdReadArrayCount*);
typedef RogueClassCmd*(*ROGUEM410)(RogueClassCmdReadArrayCount*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM411)(RogueClassCmdReadArrayCount*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM412)(RogueClassCmdReadArrayCount*);
typedef void(*ROGUEM413)(RogueClassCmdReadArrayCount*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM414)(RogueClassCmdReadArrayCount*);
typedef void(*ROGUEM415)(RogueClassCmdReadArrayCount*,RogueClassScope*);
typedef RogueClassCmdReadArrayCount*(*ROGUEM416)(RogueClassCmdReadArrayCount*);
typedef RogueString*(*ROGUEM417)(RogueClassCmdCallInlineNativeMethod*);
typedef RogueClassCmd*(*ROGUEM418)(RogueClassCmdCallInlineNativeMethod*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM419)(RogueClassCmdCallInlineNativeMethod*);
typedef RogueClassCmdCallInlineNativeMethod*(*ROGUEM420)(RogueClassCmdCallInlineNativeMethod*);
typedef void(*ROGUEM421)(RogueClassCmdCallInlineNativeMethod*,RogueClassCPPWriter*);
typedef RogueString*(*ROGUEM422)(RogueClassCmdCallNativeMethod*);
typedef RogueClassCmd*(*ROGUEM423)(RogueClassCmdCallNativeMethod*,RogueClassCloneArgs*);
typedef void(*ROGUEM424)(RogueClassCmdCallNativeMethod*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallNativeMethod*(*ROGUEM425)(RogueClassCmdCallNativeMethod*);
typedef RogueString*(*ROGUEM426)(RogueClassCmdCallAspectMethod*);
typedef RogueClassCmd*(*ROGUEM427)(RogueClassCmdCallAspectMethod*,RogueClassCloneArgs*);
typedef void(*ROGUEM428)(RogueClassCmdCallAspectMethod*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallAspectMethod*(*ROGUEM429)(RogueClassCmdCallAspectMethod*);
typedef RogueString*(*ROGUEM430)(RogueClassCmdCallDynamicMethod*);
typedef RogueClassCmd*(*ROGUEM431)(RogueClassCmdCallMethod*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM432)(RogueClassCmdCallDynamicMethod*,RogueClassCloneArgs*);
typedef void(*ROGUEM433)(RogueClassCmdCallDynamicMethod*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM434)(RogueClassCmdCallDynamicMethod*);
typedef RogueClassCmdCallDynamicMethod*(*ROGUEM435)(RogueClassCmdCallDynamicMethod*);
typedef RogueString*(*ROGUEM436)(RogueClassCmdCallMethod*);
typedef RogueClassCmdCallMethod*(*ROGUEM437)(RogueClassCmdCallMethod*);
typedef RogueString*(*ROGUEM438)(RogueClassCandidateMethods*);
typedef RogueString*(*ROGUEM439)(RogueClassCmdCreateFunction*);
typedef RogueClassCmdCreateFunction*(*ROGUEM440)(RogueClassCmdCreateFunction*,RogueClassCloneArgs*);
typedef RogueLogical(*ROGUEM441)(RogueClassCmdCreateFunction*);
typedef RogueClassCmd*(*ROGUEM442)(RogueClassCmdCreateFunction*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM443)(RogueClassCmdCreateFunction*);
typedef RogueClassCmdCreateFunction*(*ROGUEM444)(RogueClassCmdCreateFunction*);
typedef RogueString*(*ROGUEM445)(RogueFnParamList*);
typedef RogueFnParamList*(*ROGUEM446)(RogueFnParamList*);
typedef RogueString*(*ROGUEM447)(RogueClassFnParam*);
typedef RogueString*(*ROGUEM448)(RogueClassCmdReadLocal*);
typedef RogueClassCmd*(*ROGUEM449)(RogueClassCmdReadLocal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM450)(RogueClassCmdReadLocal*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM451)(RogueClassCmdReadLocal*,RogueClassScope*,RogueInt32);
typedef RogueClassType*(*ROGUEM452)(RogueClassCmdReadLocal*);
typedef void(*ROGUEM453)(RogueClassCmdReadLocal*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM454)(RogueClassCmdReadLocal*);
typedef void(*ROGUEM455)(RogueClassCmdReadLocal*,RogueClassScope*);
typedef RogueClassCmdReadLocal*(*ROGUEM456)(RogueClassCmdReadLocal*);
typedef RogueString*(*ROGUEM457)(RogueTableEntry_of_String_MethodList*);
typedef RogueTableEntry_of_String_MethodList*(*ROGUEM458)(RogueTableEntry_of_String_MethodList*);
typedef RogueString*(*ROGUEM459)(RogueClassString_MethodTableEntry*);
typedef RogueString*(*ROGUEM460)(RogueTableEntry_of_String_LogicalList*);
typedef RogueTableEntry_of_String_LogicalList*(*ROGUEM461)(RogueTableEntry_of_String_LogicalList*);
typedef RogueString*(*ROGUEM462)(RogueClassString_LogicalTableEntry*);
typedef RogueString*(*ROGUEM463)(RogueClassTokenReader*);
typedef RogueString*(*ROGUEM464)(RogueClassString_StringTable*);
typedef RogueString*(*ROGUEM465)(RogueClassTokenizer*);
typedef RogueString*(*ROGUEM466)(RogueClassParseReader*);
typedef RogueLogical(*ROGUEM467)(RogueClassParseReader*);
typedef RogueCharacter(*ROGUEM468)(RogueClassParseReader*);
typedef RogueString*(*ROGUEM469)(RogueClassPreprocessor*);
typedef RogueString*(*ROGUEM470)(RogueClassEOLToken*);
typedef RogueClassEOLToken*(*ROGUEM471)(RogueClassEOLToken*);
typedef RogueString*(*ROGUEM472)(RogueClassCmdAdd*);
typedef RogueClassCmd*(*ROGUEM473)(RogueClassCmdAdd*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM474)(RogueClassCmdAdd*,RogueClassType*);
typedef RogueClassCmdAdd*(*ROGUEM475)(RogueClassCmdAdd*);
typedef RogueClassCmd*(*ROGUEM476)(RogueClassCmdAdd*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueString*(*ROGUEM477)(RogueClassCmdNativeHeader*);
typedef RogueClassCmdNativeHeader*(*ROGUEM478)(RogueClassCmdNativeHeader*,RogueClassCloneArgs*);
typedef RogueLogical(*ROGUEM479)(RogueClassCmdNativeHeader*);
typedef RogueClassCmd*(*ROGUEM480)(RogueClassCmdNativeHeader*,RogueClassScope*);
typedef void(*ROGUEM481)(RogueClassCmdNativeHeader*,RogueClassScope*);
typedef RogueClassCmdNativeHeader*(*ROGUEM482)(RogueClassCmdNativeHeader*);
typedef RogueString*(*ROGUEM483)(RogueClassCmdNativeCode*);
typedef RogueClassCmdNativeCode*(*ROGUEM484)(RogueClassCmdNativeCode*,RogueClassCloneArgs*);
typedef RogueLogical(*ROGUEM485)(RogueClassCmdNativeCode*);
typedef RogueClassCmd*(*ROGUEM486)(RogueClassCmdNativeCode*,RogueClassScope*);
typedef void(*ROGUEM487)(RogueClassCmdNativeCode*,RogueClassScope*);
typedef RogueClassCmdNativeCode*(*ROGUEM488)(RogueClassCmdNativeCode*);
typedef RogueString*(*ROGUEM489)(RogueClassCmdIf*);
typedef RogueClassCmd*(*ROGUEM490)(RogueClassCmdIf*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM491)(RogueClassCmdIf*,RogueClassScope*);
typedef void(*ROGUEM492)(RogueClassCmdIf*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM493)(RogueClassCmdIf*);
typedef void(*ROGUEM494)(RogueClassCmdIf*,RogueClassScope*);
typedef RogueClassCmdIf*(*ROGUEM495)(RogueClassCmdIf*);
typedef RogueString*(*ROGUEM496)(RogueClassCmdWhich*);
typedef RogueClassCmdWhich*(*ROGUEM497)(RogueClassCmdWhich*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM498)(RogueClassCmdWhich*,RogueClassScope*);
typedef void(*ROGUEM499)(RogueClassCmdWhich*,RogueClassScope*);
typedef RogueClassCmdWhich*(*ROGUEM500)(RogueClassCmdWhich*);
typedef RogueString*(*ROGUEM501)(RogueClassCmdContingent*);
typedef RogueClassCmd*(*ROGUEM502)(RogueClassCmdContingent*,RogueClassCloneArgs*);
typedef RogueClassCmdContingent*(*ROGUEM503)(RogueClassCmdContingent*,RogueClassScope*);
typedef void(*ROGUEM504)(RogueClassCmdContingent*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM505)(RogueClassCmdContingent*);
typedef void(*ROGUEM506)(RogueClassCmdContingent*,RogueClassScope*);
typedef RogueClassCmdContingent*(*ROGUEM507)(RogueClassCmdContingent*);
typedef RogueClassCmd*(*ROGUEM508)(RogueClassCmdContingent*,RogueClassCmdControlStructure*);
typedef RogueString*(*ROGUEM509)(RogueClassCmdTry*);
typedef RogueClassCmdTry*(*ROGUEM510)(RogueClassCmdTry*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM511)(RogueClassCmdTry*,RogueClassScope*);
typedef void(*ROGUEM512)(RogueClassCmdTry*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM513)(RogueClassCmdTry*);
typedef void(*ROGUEM514)(RogueClassCmdTry*,RogueClassScope*);
typedef RogueClassCmdTry*(*ROGUEM515)(RogueClassCmdTry*);
typedef RogueString*(*ROGUEM516)(RogueClassCmdAwait*);
typedef RogueClassCmd*(*ROGUEM517)(RogueClassCmdAwait*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM518)(RogueClassCmdAwait*,RogueClassScope*);
typedef RogueClassCmdAwait*(*ROGUEM519)(RogueClassCmdAwait*);
typedef RogueString*(*ROGUEM520)(RogueClassCmdYield*);
typedef RogueClassCmd*(*ROGUEM521)(RogueClassCmdYield*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM522)(RogueClassCmdYield*,RogueClassScope*);
typedef RogueClassCmdYield*(*ROGUEM523)(RogueClassCmdYield*);
typedef RogueString*(*ROGUEM524)(RogueClassCmdThrow*);
typedef RogueClassCmdThrow*(*ROGUEM525)(RogueClassCmdThrow*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM526)(RogueClassCmdThrow*,RogueClassScope*);
typedef void(*ROGUEM527)(RogueClassCmdThrow*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM528)(RogueClassCmdThrow*);
typedef void(*ROGUEM529)(RogueClassCmdThrow*,RogueClassScope*);
typedef RogueClassCmdThrow*(*ROGUEM530)(RogueClassCmdThrow*);
typedef RogueString*(*ROGUEM531)(RogueClassCmdFormattedString*);
typedef RogueClassCmd*(*ROGUEM532)(RogueClassCmdFormattedString*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM533)(RogueClassCmdFormattedString*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM534)(RogueClassCmdFormattedString*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM535)(RogueClassCmdFormattedString*);
typedef void(*ROGUEM536)(RogueClassCmdFormattedString*,RogueClassScope*);
typedef RogueClassCmdFormattedString*(*ROGUEM537)(RogueClassCmdFormattedString*);
typedef RogueString*(*ROGUEM538)(RogueClassCmdTrace*);
typedef RogueClassCmdTrace*(*ROGUEM539)(RogueClassCmdTrace*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM540)(RogueClassCmdTrace*,RogueClassScope*);
typedef void(*ROGUEM541)(RogueClassCmdTrace*);
typedef void(*ROGUEM542)(RogueClassCmdTrace*,RogueClassScope*);
typedef RogueClassCmdTrace*(*ROGUEM543)(RogueClassCmdTrace*);
typedef RogueString*(*ROGUEM544)(RogueClassCmdEscape*);
typedef RogueClassCmd*(*ROGUEM545)(RogueClassCmdEscape*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM546)(RogueClassCmdEscape*,RogueClassScope*);
typedef void(*ROGUEM547)(RogueClassCmdEscape*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM548)(RogueClassCmdEscape*);
typedef void(*ROGUEM549)(RogueClassCmdEscape*,RogueClassScope*);
typedef RogueClassCmdEscape*(*ROGUEM550)(RogueClassCmdEscape*);
typedef RogueString*(*ROGUEM551)(RogueClassCmdNextIteration*);
typedef RogueClassCmd*(*ROGUEM552)(RogueClassCmdNextIteration*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM553)(RogueClassCmdNextIteration*,RogueClassScope*);
typedef void(*ROGUEM554)(RogueClassCmdNextIteration*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM555)(RogueClassCmdNextIteration*);
typedef void(*ROGUEM556)(RogueClassCmdNextIteration*,RogueClassScope*);
typedef RogueClassCmdNextIteration*(*ROGUEM557)(RogueClassCmdNextIteration*);
typedef RogueString*(*ROGUEM558)(RogueClassCmdNecessary*);
typedef RogueClassCmd*(*ROGUEM559)(RogueClassCmdNecessary*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM560)(RogueClassCmdNecessary*,RogueClassScope*);
typedef void(*ROGUEM561)(RogueClassCmdNecessary*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM562)(RogueClassCmdNecessary*);
typedef void(*ROGUEM563)(RogueClassCmdNecessary*,RogueClassScope*);
typedef RogueClassCmdNecessary*(*ROGUEM564)(RogueClassCmdNecessary*);
typedef RogueString*(*ROGUEM565)(RogueClassCmdSufficient*);
typedef RogueClassCmd*(*ROGUEM566)(RogueClassCmdSufficient*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM567)(RogueClassCmdSufficient*,RogueClassScope*);
typedef void(*ROGUEM568)(RogueClassCmdSufficient*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM569)(RogueClassCmdSufficient*);
typedef void(*ROGUEM570)(RogueClassCmdSufficient*,RogueClassScope*);
typedef RogueClassCmdSufficient*(*ROGUEM571)(RogueClassCmdSufficient*);
typedef RogueString*(*ROGUEM572)(RogueClassCmdAdjust*);
typedef RogueClassCmd*(*ROGUEM573)(RogueClassCmdAdjust*,RogueClassScope*);
typedef RogueClassCmdAdjust*(*ROGUEM574)(RogueClassCmdAdjust*);
typedef RogueString*(*ROGUEM575)(RogueClassCmdModifyAndAssign*);
typedef RogueClassCmd*(*ROGUEM576)(RogueClassCmdModifyAndAssign*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM577)(RogueClassCmdModifyAndAssign*,RogueClassScope*);
typedef RogueClassCmdModifyAndAssign*(*ROGUEM578)(RogueClassCmdModifyAndAssign*);
typedef RogueString*(*ROGUEM579)(RogueCmdWhichCaseList*);
typedef RogueCmdWhichCaseList*(*ROGUEM580)(RogueCmdWhichCaseList*);
typedef RogueString*(*ROGUEM581)(RogueClassCmdWhichCase*);
typedef RogueClassCmdWhichCase*(*ROGUEM582)(RogueClassCmdWhichCase*,RogueClassCloneArgs*);
typedef void(*ROGUEM583)(RogueClassCmdWhichCase*);
typedef void(*ROGUEM584)(RogueClassCmdWhichCase*,RogueClassScope*);
typedef RogueClassCmdWhichCase*(*ROGUEM585)(RogueClassCmdWhichCase*);
typedef RogueString*(*ROGUEM586)(RogueCmdCatchList*);
typedef RogueCmdCatchList*(*ROGUEM587)(RogueCmdCatchList*);
typedef RogueString*(*ROGUEM588)(RogueClassCmdCatch*);
typedef RogueClassCmdCatch*(*ROGUEM589)(RogueClassCmdCatch*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM590)(RogueClassCmdCatch*,RogueClassScope*);
typedef void(*ROGUEM591)(RogueClassCmdCatch*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM592)(RogueClassCmdCatch*);
typedef void(*ROGUEM593)(RogueClassCmdCatch*,RogueClassScope*);
typedef RogueClassCmdCatch*(*ROGUEM594)(RogueClassCmdCatch*);
typedef RogueString*(*ROGUEM595)(RogueClassCmdLocalDeclaration*);
typedef RogueClassCmd*(*ROGUEM596)(RogueClassCmdLocalDeclaration*,RogueClassCloneArgs*);
typedef void(*ROGUEM597)(RogueClassCmdLocalDeclaration*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM598)(RogueClassCmdLocalDeclaration*,RogueClassScope*);
typedef void(*ROGUEM599)(RogueClassCmdLocalDeclaration*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM600)(RogueClassCmdLocalDeclaration*);
typedef RogueClassCmdLocalDeclaration*(*ROGUEM601)(RogueClassCmdLocalDeclaration*);
typedef RogueString*(*ROGUEM602)(RogueClassCmdAdjustLocal*);
typedef RogueClassCmd*(*ROGUEM603)(RogueClassCmdAdjustLocal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM604)(RogueClassCmdAdjustLocal*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM605)(RogueClassCmdAdjustLocal*);
typedef void(*ROGUEM606)(RogueClassCmdAdjustLocal*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM607)(RogueClassCmdAdjustLocal*);
typedef void(*ROGUEM608)(RogueClassCmdAdjustLocal*,RogueClassScope*);
typedef RogueClassCmdAdjustLocal*(*ROGUEM609)(RogueClassCmdAdjustLocal*);
typedef RogueString*(*ROGUEM610)(RogueClassCmdCompareLE*);
typedef RogueClassCmd*(*ROGUEM611)(RogueClassCmdCompareLE*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM612)(RogueClassCmdCompareLE*,RogueClassType*);
typedef RogueClassCmdCompareLE*(*ROGUEM613)(RogueClassCmdCompareLE*);
typedef RogueClassCmd*(*ROGUEM614)(RogueClassCmdCompareLE*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM615)(RogueClassCmdRange*);
typedef RogueClassCmd*(*ROGUEM616)(RogueClassCmdRange*,RogueClassScope*);
typedef void(*ROGUEM617)(RogueClassCmdRange*);
typedef void(*ROGUEM618)(RogueClassCmdRange*,RogueClassScope*);
typedef RogueClassCmdRange*(*ROGUEM619)(RogueClassCmdRange*);
typedef RogueInt32(*ROGUEM620)(RogueClassCmdRange*);
typedef RogueString*(*ROGUEM621)(RogueClassCmdModifyAndAssignLocal*);
typedef RogueClassCmd*(*ROGUEM622)(RogueClassCmdModifyAndAssignLocal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM623)(RogueClassCmdModifyAndAssignLocal*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM624)(RogueClassCmdModifyAndAssignLocal*);
typedef void(*ROGUEM625)(RogueClassCmdModifyAndAssignLocal*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM626)(RogueClassCmdModifyAndAssignLocal*);
typedef void(*ROGUEM627)(RogueClassCmdModifyAndAssignLocal*,RogueClassScope*);
typedef RogueClassCmdModifyAndAssignLocal*(*ROGUEM628)(RogueClassCmdModifyAndAssignLocal*);
typedef RogueString*(*ROGUEM629)(RogueClassCmdResolvedModifyAndAssign*);
typedef RogueClassCmdResolvedModifyAndAssign*(*ROGUEM630)(RogueClassCmdResolvedModifyAndAssign*);
typedef RogueString*(*ROGUEM631)(RogueClassCmdRangeUpTo*);
typedef RogueClassCmd*(*ROGUEM632)(RogueClassCmdRangeUpTo*,RogueClassCloneArgs*);
typedef RogueClassCmdRangeUpTo*(*ROGUEM633)(RogueClassCmdRangeUpTo*);
typedef RogueString*(*ROGUEM634)(RogueClassCmdCompareGE*);
typedef RogueClassCmd*(*ROGUEM635)(RogueClassCmdCompareGE*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM636)(RogueClassCmdCompareGE*,RogueClassType*);
typedef RogueClassCmdCompareGE*(*ROGUEM637)(RogueClassCmdCompareGE*);
typedef RogueClassCmd*(*ROGUEM638)(RogueClassCmdCompareGE*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM639)(RogueClassCmdForEach*);
typedef RogueClassCmd*(*ROGUEM640)(RogueClassCmdForEach*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM641)(RogueClassCmdForEach*,RogueClassScope*);
typedef void(*ROGUEM642)(RogueClassCmdForEach*);
typedef void(*ROGUEM643)(RogueClassCmdForEach*,RogueClassScope*);
typedef RogueClassCmdForEach*(*ROGUEM644)(RogueClassCmdForEach*);
typedef RogueString*(*ROGUEM645)(RogueClassCmdRangeDownTo*);
typedef RogueClassCmd*(*ROGUEM646)(RogueClassCmdRangeDownTo*,RogueClassCloneArgs*);
typedef RogueClassCmdRangeDownTo*(*ROGUEM647)(RogueClassCmdRangeDownTo*);
typedef RogueInt32(*ROGUEM648)(RogueClassCmdRangeDownTo*);
typedef RogueString*(*ROGUEM649)(RogueClassCmdLogicalXor*);
typedef RogueClassCmd*(*ROGUEM650)(RogueClassCmdLogicalXor*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM651)(RogueClassCmdBinaryLogical*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM652)(RogueClassCmdBinaryLogical*);
typedef RogueClassCmdLogicalXor*(*ROGUEM653)(RogueClassCmdLogicalXor*);
typedef RogueClassCmd*(*ROGUEM654)(RogueClassCmdBinaryLogical*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueLogical(*ROGUEM655)(RogueClassCmdLogicalXor*,RogueLogical,RogueLogical);
typedef RogueString*(*ROGUEM656)(RogueClassCmdBinaryLogical*);
typedef RogueClassCmdBinaryLogical*(*ROGUEM657)(RogueClassCmdBinaryLogical*);
typedef RogueLogical(*ROGUEM658)(RogueClassCmdBinaryLogical*,RogueLogical,RogueLogical);
typedef RogueString*(*ROGUEM659)(RogueClassCmdLogicalOr*);
typedef RogueClassCmd*(*ROGUEM660)(RogueClassCmdLogicalOr*,RogueClassCloneArgs*);
typedef RogueClassCmdLogicalOr*(*ROGUEM661)(RogueClassCmdLogicalOr*);
typedef RogueLogical(*ROGUEM662)(RogueClassCmdLogicalOr*,RogueLogical,RogueLogical);
typedef RogueString*(*ROGUEM663)(RogueClassCmdLogicalAnd*);
typedef RogueClassCmd*(*ROGUEM664)(RogueClassCmdLogicalAnd*,RogueClassCloneArgs*);
typedef RogueClassCmdLogicalAnd*(*ROGUEM665)(RogueClassCmdLogicalAnd*);
typedef RogueLogical(*ROGUEM666)(RogueClassCmdLogicalAnd*,RogueLogical,RogueLogical);
typedef RogueString*(*ROGUEM667)(RogueClassCmdCompareEQ*);
typedef RogueClassCmd*(*ROGUEM668)(RogueClassCmdCompareEQ*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM669)(RogueClassCmdCompareEQ*,RogueClassType*);
typedef RogueClassCmdCompareEQ*(*ROGUEM670)(RogueClassCmdCompareEQ*);
typedef RogueLogical(*ROGUEM671)(RogueClassCmdCompareEQ*);
typedef RogueClassCmd*(*ROGUEM672)(RogueClassCmdCompareEQ*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM673)(RogueClassCmdCompareIs*);
typedef RogueClassCmd*(*ROGUEM674)(RogueClassCmdCompareIs*,RogueClassCloneArgs*);
typedef void(*ROGUEM675)(RogueClassCmdCompareIs*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCompareIs*(*ROGUEM676)(RogueClassCmdCompareIs*);
typedef RogueClassCmd*(*ROGUEM677)(RogueClassCmdCompareIs*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueString*(*ROGUEM678)(RogueClassCmdCompareIsNot*);
typedef RogueClassCmd*(*ROGUEM679)(RogueClassCmdCompareIsNot*,RogueClassCloneArgs*);
typedef void(*ROGUEM680)(RogueClassCmdCompareIsNot*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCompareIsNot*(*ROGUEM681)(RogueClassCmdCompareIsNot*);
typedef RogueClassCmd*(*ROGUEM682)(RogueClassCmdCompareIsNot*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueString*(*ROGUEM683)(RogueClassCmdCompareLT*);
typedef RogueClassCmd*(*ROGUEM684)(RogueClassCmdCompareLT*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM685)(RogueClassCmdCompareLT*,RogueClassType*);
typedef RogueClassCmdCompareLT*(*ROGUEM686)(RogueClassCmdCompareLT*);
typedef RogueClassCmd*(*ROGUEM687)(RogueClassCmdCompareLT*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM688)(RogueClassCmdCompareGT*);
typedef RogueClassCmd*(*ROGUEM689)(RogueClassCmdCompareGT*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM690)(RogueClassCmdCompareGT*,RogueClassType*);
typedef RogueClassCmdCompareGT*(*ROGUEM691)(RogueClassCmdCompareGT*);
typedef RogueClassCmd*(*ROGUEM692)(RogueClassCmdCompareGT*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM693)(RogueClassCmdInstanceOf*);
typedef RogueClassCmd*(*ROGUEM694)(RogueClassCmdInstanceOf*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM695)(RogueClassCmdInstanceOf*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM696)(RogueClassCmdInstanceOf*);
typedef void(*ROGUEM697)(RogueClassCmdInstanceOf*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdInstanceOf*(*ROGUEM698)(RogueClassCmdInstanceOf*);
typedef RogueString*(*ROGUEM699)(RogueClassCmdLogicalNot*);
typedef RogueClassCmd*(*ROGUEM700)(RogueClassCmdLogicalNot*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM701)(RogueClassCmdLogicalNot*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM702)(RogueClassCmdLogicalNot*);
typedef RogueClassCmdLogicalNot*(*ROGUEM703)(RogueClassCmdLogicalNot*);
typedef RogueString*(*ROGUEM704)(RogueClassCmdBitwiseXor*);
typedef RogueClassCmd*(*ROGUEM705)(RogueClassCmdBitwiseXor*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM706)(RogueClassCmdBitwiseXor*,RogueClassType*);
typedef RogueClassCmdBitwiseXor*(*ROGUEM707)(RogueClassCmdBitwiseXor*);
typedef RogueClassCmd*(*ROGUEM708)(RogueClassCmdBitwiseOp*,RogueClassScope*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM709)(RogueClassCmdBitwiseOp*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueString*(*ROGUEM710)(RogueClassCmdBitwiseOp*);
typedef RogueClassCmdBitwiseOp*(*ROGUEM711)(RogueClassCmdBitwiseOp*);
typedef RogueString*(*ROGUEM712)(RogueClassCmdBitwiseOr*);
typedef RogueClassCmd*(*ROGUEM713)(RogueClassCmdBitwiseOr*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM714)(RogueClassCmdBitwiseOr*,RogueClassType*);
typedef RogueClassCmdBitwiseOr*(*ROGUEM715)(RogueClassCmdBitwiseOr*);
typedef RogueString*(*ROGUEM716)(RogueClassCmdBitwiseAnd*);
typedef RogueClassCmd*(*ROGUEM717)(RogueClassCmdBitwiseAnd*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM718)(RogueClassCmdBitwiseAnd*,RogueClassType*);
typedef RogueClassCmdBitwiseAnd*(*ROGUEM719)(RogueClassCmdBitwiseAnd*);
typedef RogueString*(*ROGUEM720)(RogueClassCmdBitwiseShiftLeft*);
typedef RogueClassCmd*(*ROGUEM721)(RogueClassCmdBitwiseShiftLeft*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM722)(RogueClassCmdBitwiseShiftLeft*,RogueClassType*);
typedef RogueClassCmdBitwiseShiftLeft*(*ROGUEM723)(RogueClassCmdBitwiseShiftLeft*);
typedef RogueString*(*ROGUEM724)(RogueClassCmdBitwiseShiftRight*);
typedef RogueClassCmd*(*ROGUEM725)(RogueClassCmdBitwiseShiftRight*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM726)(RogueClassCmdBitwiseShiftRight*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM727)(RogueClassCmdBitwiseShiftRight*,RogueClassScope*);
typedef RogueClassCmdBitwiseShiftRight*(*ROGUEM728)(RogueClassCmdBitwiseShiftRight*);
typedef RogueString*(*ROGUEM729)(RogueClassCmdBitwiseShiftRightX*);
typedef RogueClassCmd*(*ROGUEM730)(RogueClassCmdBitwiseShiftRightX*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM731)(RogueClassCmdBitwiseShiftRightX*,RogueClassType*);
typedef RogueClassCmdBitwiseShiftRightX*(*ROGUEM732)(RogueClassCmdBitwiseShiftRightX*);
typedef RogueString*(*ROGUEM733)(RogueClassCmdSubtract*);
typedef RogueClassCmd*(*ROGUEM734)(RogueClassCmdSubtract*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM735)(RogueClassCmdSubtract*,RogueClassType*);
typedef RogueClassCmdSubtract*(*ROGUEM736)(RogueClassCmdSubtract*);
typedef RogueString*(*ROGUEM737)(RogueClassCmdMultiply*);
typedef RogueClassCmd*(*ROGUEM738)(RogueClassCmdMultiply*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM739)(RogueClassCmdMultiply*,RogueClassType*);
typedef RogueClassCmdMultiply*(*ROGUEM740)(RogueClassCmdMultiply*);
typedef RogueString*(*ROGUEM741)(RogueClassCmdDivide*);
typedef RogueClassCmd*(*ROGUEM742)(RogueClassCmdDivide*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM743)(RogueClassCmdDivide*,RogueClassType*);
typedef RogueClassCmdDivide*(*ROGUEM744)(RogueClassCmdDivide*);
typedef RogueString*(*ROGUEM745)(RogueClassCmdMod*);
typedef RogueClassCmd*(*ROGUEM746)(RogueClassCmdMod*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM747)(RogueClassCmdMod*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM748)(RogueClassCmdMod*,RogueClassScope*);
typedef RogueClassCmdMod*(*ROGUEM749)(RogueClassCmdMod*);
typedef RogueString*(*ROGUEM750)(RogueClassCmdPower*);
typedef RogueClassCmd*(*ROGUEM751)(RogueClassCmdPower*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM752)(RogueClassCmdPower*,RogueClassType*);
typedef void(*ROGUEM753)(RogueClassCmdPower*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdPower*(*ROGUEM754)(RogueClassCmdPower*);
typedef RogueString*(*ROGUEM755)(RogueClassCmdNegate*);
typedef RogueClassCmd*(*ROGUEM756)(RogueClassCmdNegate*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM757)(RogueClassCmdNegate*,RogueClassScope*);
typedef RogueClassCmdNegate*(*ROGUEM758)(RogueClassCmdNegate*);
typedef RogueClassCmd*(*ROGUEM759)(RogueClassCmdNegate*,RogueClassScope*);
typedef RogueString*(*ROGUEM760)(RogueClassCmdBitwiseNot*);
typedef RogueClassCmd*(*ROGUEM761)(RogueClassCmdBitwiseNot*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM762)(RogueClassCmdBitwiseNot*);
typedef RogueClassCmdBitwiseNot*(*ROGUEM763)(RogueClassCmdBitwiseNot*);
typedef RogueClassCmd*(*ROGUEM764)(RogueClassCmdBitwiseNot*,RogueClassScope*);
typedef RogueString*(*ROGUEM765)(RogueClassCmdElementAccess*);
typedef RogueClassCmd*(*ROGUEM766)(RogueClassCmdElementAccess*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM767)(RogueClassCmdElementAccess*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM768)(RogueClassCmdElementAccess*,RogueClassScope*,RogueClassCmd*);
typedef RogueClassCmd*(*ROGUEM769)(RogueClassCmdElementAccess*,RogueClassScope*,RogueInt32);
typedef void(*ROGUEM770)(RogueClassCmdElementAccess*,RogueClassScope*);
typedef RogueClassCmdElementAccess*(*ROGUEM771)(RogueClassCmdElementAccess*);
typedef RogueString*(*ROGUEM772)(RogueClassCmdListConvert*);
typedef RogueClassCmdListConvert*(*ROGUEM773)(RogueClassCmdListConvert*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM774)(RogueClassCmdListConvert*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM775)(RogueClassCmdListConvert*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM776)(RogueClassCmdListConvert*);
typedef RogueClassCmdListConvert*(*ROGUEM777)(RogueClassCmdListConvert*);
typedef RogueString*(*ROGUEM778)(RogueClassCmdConvertToType*);
typedef RogueClassCmd*(*ROGUEM779)(RogueClassCmdConvertToType*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM780)(RogueClassCmdConvertToType*,RogueClassScope*);
typedef RogueClassCmdConvertToType*(*ROGUEM781)(RogueClassCmdConvertToType*);
typedef RogueString*(*ROGUEM782)(RogueClassCmdCreateCallback*);
typedef RogueClassCmdCreateCallback*(*ROGUEM783)(RogueClassCmdCreateCallback*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM784)(RogueClassCmdCreateCallback*,RogueClassScope*);
typedef RogueClassCmdCreateCallback*(*ROGUEM785)(RogueClassCmdCreateCallback*);
typedef RogueString*(*ROGUEM786)(RogueClassCmdAs*);
typedef RogueClassCmd*(*ROGUEM787)(RogueClassCmdAs*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM788)(RogueClassCmdAs*,RogueClassScope*);
typedef void(*ROGUEM789)(RogueClassCmdAs*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdAs*(*ROGUEM790)(RogueClassCmdAs*);
typedef RogueString*(*ROGUEM791)(RogueClassCmdDefaultValue*);
typedef RogueClassCmd*(*ROGUEM792)(RogueClassCmdDefaultValue*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM793)(RogueClassCmdDefaultValue*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM794)(RogueClassCmdDefaultValue*);
typedef RogueClassCmdDefaultValue*(*ROGUEM795)(RogueClassCmdDefaultValue*);
typedef RogueString*(*ROGUEM796)(RogueClassCmdLiteralReal64*);
typedef RogueClassCmd*(*ROGUEM797)(RogueClassCmdLiteralReal64*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM798)(RogueClassCmdLiteralReal64*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM799)(RogueClassCmdLiteralReal64*);
typedef void(*ROGUEM800)(RogueClassCmdLiteralReal64*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralReal64*(*ROGUEM801)(RogueClassCmdLiteralReal64*);
typedef RogueString*(*ROGUEM802)(RogueClassCmdLiteralInt64*);
typedef RogueClassCmd*(*ROGUEM803)(RogueClassCmdLiteralInt64*,RogueClassType*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM804)(RogueClassCmdLiteralInt64*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM805)(RogueClassCmdLiteralInt64*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM806)(RogueClassCmdLiteralInt64*);
typedef void(*ROGUEM807)(RogueClassCmdLiteralInt64*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralInt64*(*ROGUEM808)(RogueClassCmdLiteralInt64*);
typedef RogueString*(*ROGUEM809)(RogueClassCmdLiteralCharacter*);
typedef RogueClassCmd*(*ROGUEM810)(RogueClassCmdLiteralCharacter*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM811)(RogueClassCmdLiteralCharacter*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM812)(RogueClassCmdLiteralCharacter*);
typedef void(*ROGUEM813)(RogueClassCmdLiteralCharacter*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralCharacter*(*ROGUEM814)(RogueClassCmdLiteralCharacter*);
typedef RogueString*(*ROGUEM815)(RogueClassCmdCreateList*);
typedef RogueClassCmd*(*ROGUEM816)(RogueClassCmdCreateList*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM817)(RogueClassCmdCreateList*,RogueClassScope*);
typedef RogueClassCmdCreateList*(*ROGUEM818)(RogueClassCmdCreateList*);
typedef RogueString*(*ROGUEM819)(RogueClassCmdCallPriorMethod*);
typedef RogueClassCmd*(*ROGUEM820)(RogueClassCmdCallPriorMethod*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM821)(RogueClassCmdCallPriorMethod*,RogueClassScope*);
typedef void(*ROGUEM822)(RogueClassCmdCallPriorMethod*,RogueClassScope*);
typedef RogueClassCmdCallPriorMethod*(*ROGUEM823)(RogueClassCmdCallPriorMethod*);
typedef RogueString*(*ROGUEM824)(RogueFnArgList*);
typedef RogueFnArgList*(*ROGUEM825)(RogueFnArgList*);
typedef RogueString*(*ROGUEM826)(RogueClassFnArg*);
typedef RogueString*(*ROGUEM827)(RogueClassCmdSelect*);
typedef RogueClassCmdSelect*(*ROGUEM828)(RogueClassCmdSelect*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM829)(RogueClassCmdSelect*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM830)(RogueClassCmdSelect*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM831)(RogueClassCmdSelect*);
typedef void(*ROGUEM832)(RogueClassCmdSelect*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM833)(RogueClassCmdSelect*);
typedef void(*ROGUEM834)(RogueClassCmdSelect*,RogueClassScope*);
typedef RogueClassCmdSelect*(*ROGUEM835)(RogueClassCmdSelect*);
typedef RogueString*(*ROGUEM836)(RogueCmdSelectCaseList*);
typedef RogueCmdSelectCaseList*(*ROGUEM837)(RogueCmdSelectCaseList*);
typedef RogueString*(*ROGUEM838)(RogueClassCmdSelectCase*);
typedef RogueClassCmdSelectCase*(*ROGUEM839)(RogueClassCmdSelectCase*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM840)(RogueClassCmdSelectCase*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM841)(RogueClassCmdSelectCase*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM842)(RogueClassCmdSelectCase*);
typedef void(*ROGUEM843)(RogueClassCmdSelectCase*);
typedef void(*ROGUEM844)(RogueClassCmdSelectCase*,RogueClassScope*);
typedef RogueClassCmdSelectCase*(*ROGUEM845)(RogueClassCmdSelectCase*);
typedef RogueString*(*ROGUEM846)(RogueClassCmdTypedLiteralList*);
typedef RogueClassCmdTypedLiteralList*(*ROGUEM847)(RogueClassCmdTypedLiteralList*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM848)(RogueClassCmdTypedLiteralList*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM849)(RogueClassCmdTypedLiteralList*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM850)(RogueClassCmdTypedLiteralList*);
typedef RogueClassCmdTypedLiteralList*(*ROGUEM851)(RogueClassCmdTypedLiteralList*);
typedef RogueString*(*ROGUEM852)(RogueTableEntry_of_String_ParseReaderList*);
typedef RogueTableEntry_of_String_ParseReaderList*(*ROGUEM853)(RogueTableEntry_of_String_ParseReaderList*);
typedef RogueString*(*ROGUEM854)(RogueClassString_ParseReaderTableEntry*);
typedef RogueString*(*ROGUEM855)(RogueClassIOError*);
typedef RogueClassIOError*(*ROGUEM856)(RogueClassIOError*);
typedef RogueString*(*ROGUEM857)(RogueClassFileReader*);
typedef RogueLogical(*ROGUEM858)(RogueClassFileReader*);
typedef RogueCharacter(*ROGUEM859)(RogueClassFileReader*);
typedef RogueString*(*ROGUEM860)(RogueClassFileWriter*);
typedef RogueClassFileWriter*(*ROGUEM861)(RogueClassFileWriter*);
typedef RogueClassFileWriter*(*ROGUEM862)(RogueClassFileWriter*,RogueCharacter);
typedef RogueString*(*ROGUEM863)(RogueClassCmdNoAction*);
typedef void(*ROGUEM864)(RogueClassCmdNoAction*,RogueClassCmdStatementList*);
typedef RogueClassCmdNoAction*(*ROGUEM865)(RogueClassCmdNoAction*,RogueClassCloneArgs*);
typedef RogueLogical(*ROGUEM866)(RogueClassCmdNoAction*);
typedef RogueClassCmd*(*ROGUEM867)(RogueClassCmdNoAction*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM868)(RogueClassCmdNoAction*);
typedef void(*ROGUEM869)(RogueClassCmdNoAction*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM870)(RogueClassCmdNoAction*);
typedef RogueClassCmdNoAction*(*ROGUEM871)(RogueClassCmdNoAction*);
typedef RogueString*(*ROGUEM872)(RogueClassTokenListRebuilder*);
typedef RogueString*(*ROGUEM873)(RogueTableEntry_of_String_TokenTypeList*);
typedef RogueTableEntry_of_String_TokenTypeList*(*ROGUEM874)(RogueTableEntry_of_String_TokenTypeList*);
typedef RogueString*(*ROGUEM875)(RogueClassString_TokenTypeTableEntry*);
typedef RogueString*(*ROGUEM876)(RogueTableEntry_of_String_TypeSpecializerList*);
typedef RogueTableEntry_of_String_TypeSpecializerList*(*ROGUEM877)(RogueTableEntry_of_String_TypeSpecializerList*);
typedef RogueString*(*ROGUEM878)(RogueClassString_TypeSpecializerTableEntry*);
typedef RogueString*(*ROGUEM879)(RogueTableEntry_of_String_CmdLabelList*);
typedef RogueTableEntry_of_String_CmdLabelList*(*ROGUEM880)(RogueTableEntry_of_String_CmdLabelList*);
typedef RogueString*(*ROGUEM881)(RogueClassString_CmdLabelTableEntry*);
typedef RogueString*(*ROGUEM882)(RogueClassCmdCreateArray*);
typedef RogueClassCmd*(*ROGUEM883)(RogueClassCmdCreateArray*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM884)(RogueClassCmdCreateArray*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM885)(RogueClassCmdCreateArray*);
typedef void(*ROGUEM886)(RogueClassCmdCreateArray*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM887)(RogueClassCmdCreateArray*);
typedef void(*ROGUEM888)(RogueClassCmdCreateArray*,RogueClassScope*);
typedef RogueClassCmdCreateArray*(*ROGUEM889)(RogueClassCmdCreateArray*);
typedef RogueString*(*ROGUEM890)(RogueClassCmdCreateObject*);
typedef RogueClassCmd*(*ROGUEM891)(RogueClassCmdCreateObject*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM892)(RogueClassCmdCreateObject*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM893)(RogueClassCmdCreateObject*);
typedef void(*ROGUEM894)(RogueClassCmdCreateObject*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM895)(RogueClassCmdCreateObject*);
typedef void(*ROGUEM896)(RogueClassCmdCreateObject*,RogueClassScope*);
typedef RogueClassCmdCreateObject*(*ROGUEM897)(RogueClassCmdCreateObject*);
typedef RogueString*(*ROGUEM898)(RogueClassCmdReadGlobal*);
typedef RogueClassCmd*(*ROGUEM899)(RogueClassCmdReadGlobal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM900)(RogueClassCmdReadGlobal*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM901)(RogueClassCmdReadGlobal*,RogueClassScope*,RogueInt32);
typedef RogueClassType*(*ROGUEM902)(RogueClassCmdReadGlobal*);
typedef void(*ROGUEM903)(RogueClassCmdReadGlobal*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM904)(RogueClassCmdReadGlobal*);
typedef void(*ROGUEM905)(RogueClassCmdReadGlobal*,RogueClassScope*);
typedef RogueClassCmdReadGlobal*(*ROGUEM906)(RogueClassCmdReadGlobal*);
typedef RogueString*(*ROGUEM907)(RogueClassCmdReadProperty*);
typedef RogueClassCmd*(*ROGUEM908)(RogueClassCmdReadProperty*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM909)(RogueClassCmdReadProperty*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM910)(RogueClassCmdReadProperty*,RogueClassScope*,RogueInt32);
typedef RogueClassType*(*ROGUEM911)(RogueClassCmdReadProperty*);
typedef void(*ROGUEM912)(RogueClassCmdReadProperty*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM913)(RogueClassCmdReadProperty*);
typedef void(*ROGUEM914)(RogueClassCmdReadProperty*,RogueClassScope*);
typedef RogueClassCmdReadProperty*(*ROGUEM915)(RogueClassCmdReadProperty*);
typedef RogueString*(*ROGUEM916)(RogueClassCmdWriteSingleton*);
typedef RogueClassCmd*(*ROGUEM917)(RogueClassCmdWriteSingleton*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM918)(RogueClassCmdWriteSingleton*,RogueClassScope*);
typedef void(*ROGUEM919)(RogueClassCmdWriteSingleton*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM920)(RogueClassCmdWriteSingleton*);
typedef void(*ROGUEM921)(RogueClassCmdWriteSingleton*,RogueClassScope*);
typedef RogueClassCmdWriteSingleton*(*ROGUEM922)(RogueClassCmdWriteSingleton*);
typedef RogueString*(*ROGUEM923)(RogueClassCmdWriteLocal*);
typedef RogueClassCmd*(*ROGUEM924)(RogueClassCmdWriteLocal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM925)(RogueClassCmdWriteLocal*,RogueClassScope*);
typedef void(*ROGUEM926)(RogueClassCmdWriteLocal*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM927)(RogueClassCmdWriteLocal*);
typedef void(*ROGUEM928)(RogueClassCmdWriteLocal*,RogueClassScope*);
typedef RogueClassCmdWriteLocal*(*ROGUEM929)(RogueClassCmdWriteLocal*);
typedef RogueString*(*ROGUEM930)(RogueClassCmdModifyAndAssignGlobal*);
typedef RogueClassCmd*(*ROGUEM931)(RogueClassCmdModifyAndAssignGlobal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM932)(RogueClassCmdModifyAndAssignGlobal*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM933)(RogueClassCmdModifyAndAssignGlobal*);
typedef void(*ROGUEM934)(RogueClassCmdModifyAndAssignGlobal*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM935)(RogueClassCmdModifyAndAssignGlobal*);
typedef void(*ROGUEM936)(RogueClassCmdModifyAndAssignGlobal*,RogueClassScope*);
typedef RogueClassCmdModifyAndAssignGlobal*(*ROGUEM937)(RogueClassCmdModifyAndAssignGlobal*);
typedef RogueString*(*ROGUEM938)(RogueClassCmdModifyAndAssignProperty*);
typedef RogueClassCmd*(*ROGUEM939)(RogueClassCmdModifyAndAssignProperty*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM940)(RogueClassCmdModifyAndAssignProperty*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM941)(RogueClassCmdModifyAndAssignProperty*);
typedef void(*ROGUEM942)(RogueClassCmdModifyAndAssignProperty*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM943)(RogueClassCmdModifyAndAssignProperty*);
typedef void(*ROGUEM944)(RogueClassCmdModifyAndAssignProperty*,RogueClassScope*);
typedef RogueClassCmdModifyAndAssignProperty*(*ROGUEM945)(RogueClassCmdModifyAndAssignProperty*);
typedef RogueString*(*ROGUEM946)(RogueCmdTaskControlSectionList*);
typedef RogueCmdTaskControlSectionList*(*ROGUEM947)(RogueCmdTaskControlSectionList*);
typedef RogueString*(*ROGUEM948)(RogueClassCmdBlock*);
typedef RogueClassCmd*(*ROGUEM949)(RogueClassCmdBlock*,RogueClassCloneArgs*);
typedef RogueLogical(*ROGUEM950)(RogueClassCmdBlock*);
typedef RogueClassCmdBlock*(*ROGUEM951)(RogueClassCmdBlock*,RogueClassScope*);
typedef void(*ROGUEM952)(RogueClassCmdBlock*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM953)(RogueClassCmdBlock*);
typedef void(*ROGUEM954)(RogueClassCmdBlock*,RogueClassScope*);
typedef RogueClassCmdBlock*(*ROGUEM955)(RogueClassCmdBlock*);
typedef RogueString*(*ROGUEM956)(RogueTableEntry_of_String_DefinitionList*);
typedef RogueTableEntry_of_String_DefinitionList*(*ROGUEM957)(RogueTableEntry_of_String_DefinitionList*);
typedef RogueString*(*ROGUEM958)(RogueClassString_DefinitionTableEntry*);
typedef RogueString*(*ROGUEM959)(RogueTableEntry_of_String_PropertyList*);
typedef RogueTableEntry_of_String_PropertyList*(*ROGUEM960)(RogueTableEntry_of_String_PropertyList*);
typedef RogueString*(*ROGUEM961)(RogueClassString_PropertyTableEntry*);
typedef RogueString*(*ROGUEM962)(RogueClassString_CmdTable*);
typedef RogueString*(*ROGUEM963)(RogueClassCmdCallStaticMethod*);
typedef RogueClassCmd*(*ROGUEM964)(RogueClassCmdCallStaticMethod*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM965)(RogueClassCmdCallStaticMethod*,RogueClassScope*);
typedef void(*ROGUEM966)(RogueClassCmdCallStaticMethod*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallStaticMethod*(*ROGUEM967)(RogueClassCmdCallStaticMethod*);
typedef RogueString*(*ROGUEM968)(RogueTableEntry_of_String_StringList*);
typedef RogueTableEntry_of_String_StringList*(*ROGUEM969)(RogueTableEntry_of_String_StringList*);
typedef RogueString*(*ROGUEM970)(RogueClassString_StringTableEntry*);
typedef RogueString*(*ROGUEM971)(RogueClassDirectiveTokenType*);
typedef RogueClassToken*(*ROGUEM972)(RogueClassDirectiveTokenType*,RogueString*,RogueInt32,RogueInt32);
typedef RogueLogical(*ROGUEM973)(RogueClassDirectiveTokenType*);
typedef RogueClassDirectiveTokenType*(*ROGUEM974)(RogueClassDirectiveTokenType*);
typedef RogueString*(*ROGUEM975)(RogueClassStructuralDirectiveTokenType*);
typedef RogueClassToken*(*ROGUEM976)(RogueClassStructuralDirectiveTokenType*,RogueString*,RogueInt32,RogueInt32);
typedef RogueLogical(*ROGUEM977)(RogueClassStructuralDirectiveTokenType*);
typedef RogueClassStructuralDirectiveTokenType*(*ROGUEM978)(RogueClassStructuralDirectiveTokenType*);
typedef RogueString*(*ROGUEM979)(RogueClassEOLTokenType*);
typedef RogueClassToken*(*ROGUEM980)(RogueClassEOLTokenType*,RogueString*,RogueInt32,RogueInt32);
typedef RogueClassToken*(*ROGUEM981)(RogueClassEOLTokenType*,RogueString*,RogueInt32,RogueInt32,RogueString*);
typedef RogueLogical(*ROGUEM982)(RogueClassEOLTokenType*);
typedef RogueClassEOLTokenType*(*ROGUEM983)(RogueClassEOLTokenType*);
typedef RogueString*(*ROGUEM984)(RogueClassStructureTokenType*);
typedef RogueClassToken*(*ROGUEM985)(RogueClassStructureTokenType*,RogueString*,RogueInt32,RogueInt32);
typedef RogueLogical(*ROGUEM986)(RogueClassStructureTokenType*);
typedef RogueClassStructureTokenType*(*ROGUEM987)(RogueClassStructureTokenType*);
typedef RogueString*(*ROGUEM988)(RogueClassNativeCodeTokenType*);
typedef RogueClassToken*(*ROGUEM989)(RogueClassNativeCodeTokenType*,RogueString*,RogueInt32,RogueInt32,RogueString*);
typedef RogueClassToken*(*ROGUEM990)(RogueClassNativeCodeTokenType*,RogueClassToken*,RogueString*);
typedef RogueClassNativeCodeTokenType*(*ROGUEM991)(RogueClassNativeCodeTokenType*);
typedef RogueString*(*ROGUEM992)(RogueClassModifyAndAssignTokenType*);
typedef RogueLogical(*ROGUEM993)(RogueClassModifyAndAssignTokenType*);
typedef RogueClassModifyAndAssignTokenType*(*ROGUEM994)(RogueClassModifyAndAssignTokenType*);
typedef RogueString*(*ROGUEM995)(RogueClassString_TokenListTable*);
typedef RogueString*(*ROGUEM996)(RogueClassPreprocessorTokenReader*);
typedef RogueString*(*ROGUEM997)(RogueClassCmdSwitch*);
typedef RogueClassCmdSwitch*(*ROGUEM998)(RogueClassCmdSwitch*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM999)(RogueClassCmdSwitch*,RogueClassScope*);
typedef void(*ROGUEM1000)(RogueClassCmdSwitch*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM1001)(RogueClassCmdSwitch*);
typedef void(*ROGUEM1002)(RogueClassCmdSwitch*,RogueClassScope*);
typedef RogueClassCmdSwitch*(*ROGUEM1003)(RogueClassCmdSwitch*);
typedef RogueString*(*ROGUEM1004)(RogueClassCmdReadArrayElement*);
typedef RogueClassCmd*(*ROGUEM1005)(RogueClassCmdReadArrayElement*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM1006)(RogueClassCmdReadArrayElement*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM1007)(RogueClassCmdReadArrayElement*,RogueClassScope*,RogueInt32);
typedef RogueClassType*(*ROGUEM1008)(RogueClassCmdReadArrayElement*);
typedef void(*ROGUEM1009)(RogueClassCmdReadArrayElement*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM1010)(RogueClassCmdReadArrayElement*);
typedef void(*ROGUEM1011)(RogueClassCmdReadArrayElement*,RogueClassScope*);
typedef RogueClassCmdReadArrayElement*(*ROGUEM1012)(RogueClassCmdReadArrayElement*);
typedef RogueString*(*ROGUEM1013)(RogueClassCmdWriteArrayElement*);
typedef RogueClassCmd*(*ROGUEM1014)(RogueClassCmdWriteArrayElement*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM1015)(RogueClassCmdWriteArrayElement*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM1016)(RogueClassCmdWriteArrayElement*);
typedef void(*ROGUEM1017)(RogueClassCmdWriteArrayElement*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM1018)(RogueClassCmdWriteArrayElement*);
typedef void(*ROGUEM1019)(RogueClassCmdWriteArrayElement*,RogueClassScope*);
typedef RogueClassCmdWriteArrayElement*(*ROGUEM1020)(RogueClassCmdWriteArrayElement*);
typedef RogueString*(*ROGUEM1021)(RogueClassCmdConvertToPrimitiveType*);
typedef RogueClassCmd*(*ROGUEM1022)(RogueClassCmdConvertToPrimitiveType*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM1023)(RogueClassCmdConvertToPrimitiveType*,RogueClassScope*);
typedef void(*ROGUEM1024)(RogueClassCmdConvertToPrimitiveType*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdConvertToPrimitiveType*(*ROGUEM1025)(RogueClassCmdConvertToPrimitiveType*);
typedef RogueString*(*ROGUEM1026)(RogueClassCmdSelectCaseListReader*);
typedef RogueLogical(*ROGUEM1027)(RogueClassCmdSelectCaseListReader*);
typedef RogueClassCmdSelectCase*(*ROGUEM1028)(RogueClassCmdSelectCaseListReader*);
typedef RogueString*(*ROGUEM1029)(RogueClassCmdAdjustGlobal*);
typedef RogueClassCmd*(*ROGUEM1030)(RogueClassCmdAdjustGlobal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM1031)(RogueClassCmdAdjustGlobal*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM1032)(RogueClassCmdAdjustGlobal*);
typedef void(*ROGUEM1033)(RogueClassCmdAdjustGlobal*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM1034)(RogueClassCmdAdjustGlobal*);
typedef void(*ROGUEM1035)(RogueClassCmdAdjustGlobal*,RogueClassScope*);
typedef RogueClassCmdAdjustGlobal*(*ROGUEM1036)(RogueClassCmdAdjustGlobal*);
typedef RogueString*(*ROGUEM1037)(RogueClassCmdAdjustProperty*);
typedef RogueClassCmd*(*ROGUEM1038)(RogueClassCmdAdjustProperty*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM1039)(RogueClassCmdAdjustProperty*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM1040)(RogueClassCmdAdjustProperty*);
typedef void(*ROGUEM1041)(RogueClassCmdAdjustProperty*,RogueClassCPPWriter*,RogueLogical);
typedef void(*ROGUEM1042)(RogueClassCmdAdjustProperty*);
typedef void(*ROGUEM1043)(RogueClassCmdAdjustProperty*,RogueClassScope*);
typedef RogueClassCmdAdjustProperty*(*ROGUEM1044)(RogueClassCmdAdjustProperty*);
typedef RogueString*(*ROGUEM1045)(RogueTableEntry_of_String_CmdList*);
typedef RogueTableEntry_of_String_CmdList*(*ROGUEM1046)(RogueTableEntry_of_String_CmdList*);
typedef RogueString*(*ROGUEM1047)(RogueClassString_CmdTableEntry*);
typedef RogueString*(*ROGUEM1048)(RogueClassNativeCodeToken*);
typedef RogueClassNativeCodeToken*(*ROGUEM1049)(RogueClassNativeCodeToken*);
typedef RogueString*(*ROGUEM1050)(RogueTableEntry_of_String_TokenListList*);
typedef RogueTableEntry_of_String_TokenListList*(*ROGUEM1051)(RogueTableEntry_of_String_TokenListList*);
typedef RogueString*(*ROGUEM1052)(RogueClassString_TokenListTableEntry*);

RogueString* call_ROGUEM2( int i, RogueObject* THIS )
{
  return ((ROGUEM2)(THIS->type->methods[i]))( THIS );
}

RogueString* call_ROGUEM39( int i, RogueClassToken* THIS )
{
  return ((ROGUEM39)(THIS->type->methods[i]))( THIS );
}

RogueCharacter call_ROGUEM40( int i, RogueClassToken* THIS )
{
  return ((ROGUEM40)(THIS->type->methods[i]))( THIS );
}

RogueInt32 call_ROGUEM41( int i, RogueClassToken* THIS )
{
  return ((ROGUEM41)(THIS->type->methods[i]))( THIS );
}

RogueInt64 call_ROGUEM42( int i, RogueClassToken* THIS )
{
  return ((ROGUEM42)(THIS->type->methods[i]))( THIS );
}

RogueReal64 call_ROGUEM43( int i, RogueClassToken* THIS )
{
  return ((ROGUEM43)(THIS->type->methods[i]))( THIS );
}

RogueClassType* call_ROGUEM44( int i, RogueClassToken* THIS )
{
  return ((ROGUEM44)(THIS->type->methods[i]))( THIS );
}

void call_ROGUEM51( int i, RogueClassCmd* THIS, RogueClassCmdStatementList* p0 )
{
  ((ROGUEM51)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassCmd* call_ROGUEM52( int i, RogueClassCmd* THIS, RogueClassScope* p0 )
{
  return ((ROGUEM52)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassCmd* call_ROGUEM53( int i, RogueClassCmd* THIS, RogueClassType* p0, RogueClassScope* p1 )
{
  return ((ROGUEM53)(THIS->type->methods[i]))( THIS, p0, p1 );
}

RogueClassCmd* call_ROGUEM55( int i, RogueClassCmd* THIS, RogueClassType* p0 )
{
  return ((ROGUEM55)(THIS->type->methods[i]))( THIS, p0 );
}

void call_ROGUEM56( int i, RogueClassCmd* THIS, RogueClassScope* p0 )
{
  ((ROGUEM56)(THIS->type->methods[i]))( THIS, p0 );
}

RogueLogical call_ROGUEM57( int i, RogueClassCmd* THIS )
{
  return ((ROGUEM57)(THIS->type->methods[i]))( THIS );
}

RogueClassType* call_ROGUEM58( int i, RogueClassCmd* THIS, RogueClassScope* p0 )
{
  return ((ROGUEM58)(THIS->type->methods[i]))( THIS, p0 );
}

void call_ROGUEM59( int i, RogueClassCmd* THIS )
{
  ((ROGUEM59)(THIS->type->methods[i]))( THIS );
}

RogueClassType* call_ROGUEM60( int i, RogueClassCmd* THIS )
{
  return ((ROGUEM60)(THIS->type->methods[i]))( THIS );
}

RogueClassCmd* call_ROGUEM63( int i, RogueClassCmd* THIS, RogueClassScope* p0, RogueClassCmd* p1 )
{
  return ((ROGUEM63)(THIS->type->methods[i]))( THIS, p0, p1 );
}

RogueClassCmd* call_ROGUEM64( int i, RogueClassCmd* THIS, RogueClassScope* p0, RogueInt32 p1 )
{
  return ((ROGUEM64)(THIS->type->methods[i]))( THIS, p0, p1 );
}

RogueClassCmd* call_ROGUEM65( int i, RogueClassCmd* THIS, RogueClassScope* p0, RogueClassTokenType* p1, RogueClassCmd* p2 )
{
  return ((ROGUEM65)(THIS->type->methods[i]))( THIS, p0, p1, p2 );
}

RogueString* call_ROGUEM70( int i, RogueClassCmd* THIS )
{
  return ((ROGUEM70)(THIS->type->methods[i]))( THIS );
}

RogueClassCmd* call_ROGUEM71( int i, RogueClassCmd* THIS, RogueClassCloneArgs* p0 )
{
  return ((ROGUEM71)(THIS->type->methods[i]))( THIS, p0 );
}

void call_ROGUEM72( int i, RogueClassCmd* THIS, RogueClassCPPWriter* p0, RogueLogical p1 )
{
  ((ROGUEM72)(THIS->type->methods[i]))( THIS, p0, p1 );
}

RogueCmdList* call_ROGUEM78( int i, RogueCmdList* THIS )
{
  return ((ROGUEM78)(THIS->type->methods[i]))( THIS );
}

RogueCmdList* call_ROGUEM79( int i, RogueCmdList* THIS, RogueInt32 p0 )
{
  return ((ROGUEM79)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassToken* call_ROGUEM94( int i, RogueClassTokenType* THIS, RogueString* p0, RogueInt32 p1, RogueInt32 p2 )
{
  return ((ROGUEM94)(THIS->type->methods[i]))( THIS, p0, p1, p2 );
}

RogueClassToken* call_ROGUEM95( int i, RogueClassTokenType* THIS, RogueString* p0, RogueInt32 p1, RogueInt32 p2, RogueString* p3 )
{
  return ((ROGUEM95)(THIS->type->methods[i]))( THIS, p0, p1, p2, p3 );
}

RogueClassToken* call_ROGUEM96( int i, RogueClassTokenType* THIS, RogueClassToken* p0, RogueString* p1 )
{
  return ((ROGUEM96)(THIS->type->methods[i]))( THIS, p0, p1 );
}

RogueLogical call_ROGUEM97( int i, RogueClassTokenType* THIS )
{
  return ((ROGUEM97)(THIS->type->methods[i]))( THIS );
}

RogueLogical call_ROGUEM103( int i, RogueClassFunction_Type_RETURNSLogical* THIS, RogueClassType* p0 )
{
  return ((ROGUEM103)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassCmdLabel* call_ROGUEM177( int i, RogueClassCloneArgs* THIS, RogueClassCmdLabel* p0 )
{
  return ((ROGUEM177)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassCmd* call_ROGUEM211( int i, RogueClassCmdControlStructure* THIS, RogueClassCmdControlStructure* p0 )
{
  return ((ROGUEM211)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassCmd* call_ROGUEM249( int i, RogueClassCmdBinary* THIS, RogueClassScope* p0 )
{
  return ((ROGUEM249)(THIS->type->methods[i]))( THIS, p0 );
}

RogueString* call_ROGUEM255( int i, RogueClassCmdBinary* THIS )
{
  return ((ROGUEM255)(THIS->type->methods[i]))( THIS );
}

RogueClassCmd* call_ROGUEM258( int i, RogueClassCmdBinary* THIS, RogueClassScope* p0, RogueClassType* p1 )
{
  return ((ROGUEM258)(THIS->type->methods[i]))( THIS, p0, p1 );
}

RogueClassCmd* call_ROGUEM259( int i, RogueClassCmdBinary* THIS, RogueClassScope* p0, RogueClassType* p1, RogueClassType* p2 )
{
  return ((ROGUEM259)(THIS->type->methods[i]))( THIS, p0, p1, p2 );
}

RogueClassCmd* call_ROGUEM263( int i, RogueClassCmdComparison* THIS, RogueClassScope* p0, RogueClassType* p1, RogueClassType* p2, RogueLogical p3 )
{
  return ((ROGUEM263)(THIS->type->methods[i]))( THIS, p0, p1, p2, p3 );
}

RogueLogical call_ROGUEM266( int i, RogueClassCmdBinary* THIS )
{
  return ((ROGUEM266)(THIS->type->methods[i]))( THIS );
}

RogueClassType* call_ROGUEM345( int i, RogueClassCmdTypeOperator* THIS )
{
  return ((ROGUEM345)(THIS->type->methods[i]))( THIS );
}

RogueString* call_ROGUEM360( int i, RogueClassCmdUnary* THIS )
{
  return ((ROGUEM360)(THIS->type->methods[i]))( THIS );
}

RogueClassCmd* call_ROGUEM361( int i, RogueClassCmdUnary* THIS, RogueClassScope* p0 )
{
  return ((ROGUEM361)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassType* call_ROGUEM375( int i, RogueClassCmdCall* THIS )
{
  return ((ROGUEM375)(THIS->type->methods[i]))( THIS );
}

void call_ROGUEM383( int i, RogueClassCmdCallInlineNative* THIS, RogueClassCPPWriter* p0 )
{
  ((ROGUEM383)(THIS->type->methods[i]))( THIS, p0 );
}

RogueInt32 call_ROGUEM620( int i, RogueClassCmdRange* THIS )
{
  return ((ROGUEM620)(THIS->type->methods[i]))( THIS );
}

RogueString* call_ROGUEM656( int i, RogueClassCmdBinaryLogical* THIS )
{
  return ((ROGUEM656)(THIS->type->methods[i]))( THIS );
}

RogueLogical call_ROGUEM658( int i, RogueClassCmdBinaryLogical* THIS, RogueLogical p0, RogueLogical p1 )
{
  return ((ROGUEM658)(THIS->type->methods[i]))( THIS, p0, p1 );
}


// GLOBAL PROPERTIES
RogueByteList* RogueStringBuilder_work_bytes = 0;
RogueClassCmdStatementList* RogueCmdStatementList_current = 0;
RogueClassString_TokenTypeTable* RogueTokenType_lookup = 0;
RogueClassTokenType* RogueTokenType_directive_define = 0;
RogueClassTokenType* RogueTokenType_directive_include = 0;
RogueClassTokenType* RogueTokenType_directive_includeNativeCode = 0;
RogueClassTokenType* RogueTokenType_directive_includeNativeHeader = 0;
RogueClassTokenType* RogueTokenType_directive_if = 0;
RogueClassTokenType* RogueTokenType_directive_elseIf = 0;
RogueClassTokenType* RogueTokenType_directive_else = 0;
RogueClassTokenType* RogueTokenType_directive_endIf = 0;
RogueClassTokenType* RogueTokenType_directive_module = 0;
RogueClassTokenType* RogueTokenType_directive_requisite = 0;
RogueClassTokenType* RogueTokenType_directive_using = 0;
RogueClassTokenType* RogueTokenType_placeholder_id = 0;
RogueClassTokenType* RogueTokenType_begin_augment_tokens = 0;
RogueClassTokenType* RogueTokenType_keyword_augment = 0;
RogueClassTokenType* RogueTokenType_keyword_case = 0;
RogueClassTokenType* RogueTokenType_keyword_catch = 0;
RogueClassTokenType* RogueTokenType_keyword_class = 0;
RogueClassTokenType* RogueTokenType_keyword_DEFINITIONS = 0;
RogueClassTokenType* RogueTokenType_keyword_else = 0;
RogueClassTokenType* RogueTokenType_keyword_elseIf = 0;
RogueClassTokenType* RogueTokenType_keyword_endAugment = 0;
RogueClassTokenType* RogueTokenType_keyword_endClass = 0;
RogueClassTokenType* RogueTokenType_keyword_endContingent = 0;
RogueClassTokenType* RogueTokenType_keyword_endForEach = 0;
RogueClassTokenType* RogueTokenType_keyword_endFunction = 0;
RogueClassTokenType* RogueTokenType_keyword_endIf = 0;
RogueClassTokenType* RogueTokenType_keyword_endLoop = 0;
RogueClassTokenType* RogueTokenType_keyword_endRoutine = 0;
RogueClassTokenType* RogueTokenType_keyword_endTry = 0;
RogueClassTokenType* RogueTokenType_keyword_endWhich = 0;
RogueClassTokenType* RogueTokenType_keyword_endWhile = 0;
RogueClassTokenType* RogueTokenType_keyword_ENUMERATE = 0;
RogueClassTokenType* RogueTokenType_keyword_GLOBAL = 0;
RogueClassTokenType* RogueTokenType_keyword_GLOBAL_METHODS = 0;
RogueClassTokenType* RogueTokenType_keyword_GLOBAL_PROPERTIES = 0;
RogueClassTokenType* RogueTokenType_keyword_macro = 0;
RogueClassTokenType* RogueTokenType_keyword_method = 0;
RogueClassTokenType* RogueTokenType_keyword_METHODS = 0;
RogueClassTokenType* RogueTokenType_keyword_nativeCode = 0;
RogueClassTokenType* RogueTokenType_keyword_nativeHeader = 0;
RogueClassTokenType* RogueTokenType_keyword_others = 0;
RogueClassTokenType* RogueTokenType_keyword_PROPERTIES = 0;
RogueClassTokenType* RogueTokenType_keyword_routine = 0;
RogueClassTokenType* RogueTokenType_keyword_satisfied = 0;
RogueClassTokenType* RogueTokenType_keyword_unsatisfied = 0;
RogueClassTokenType* RogueTokenType_keyword_with = 0;
RogueClassTokenType* RogueTokenType_symbol_close_brace = 0;
RogueClassTokenType* RogueTokenType_symbol_close_bracket = 0;
RogueClassTokenType* RogueTokenType_symbol_close_comment = 0;
RogueClassTokenType* RogueTokenType_symbol_close_paren = 0;
RogueClassTokenType* RogueTokenType_symbol_close_specialize = 0;
RogueClassTokenType* RogueTokenType_eol = 0;
RogueClassTokenType* RogueTokenType_eoi = 0;
RogueClassTokenType* RogueTokenType_keyword_await = 0;
RogueClassTokenType* RogueTokenType_keyword_contingent = 0;
RogueClassTokenType* RogueTokenType_keyword_escapeContingent = 0;
RogueClassTokenType* RogueTokenType_keyword_escapeForEach = 0;
RogueClassTokenType* RogueTokenType_keyword_escapeIf = 0;
RogueClassTokenType* RogueTokenType_keyword_escapeLoop = 0;
RogueClassTokenType* RogueTokenType_keyword_escapeTry = 0;
RogueClassTokenType* RogueTokenType_keyword_escapeWhich = 0;
RogueClassTokenType* RogueTokenType_keyword_escapeWhile = 0;
RogueClassTokenType* RogueTokenType_keyword_forEach = 0;
RogueClassTokenType* RogueTokenType_keyword_function = 0;
RogueClassTokenType* RogueTokenType_keyword_global = 0;
RogueClassTokenType* RogueTokenType_keyword_if = 0;
RogueClassTokenType* RogueTokenType_keyword_in = 0;
RogueClassTokenType* RogueTokenType_keyword_infinity = 0;
RogueClassTokenType* RogueTokenType_keyword_is = 0;
RogueClassTokenType* RogueTokenType_keyword_isNot = 0;
RogueClassTokenType* RogueTokenType_keyword_local = 0;
RogueClassTokenType* RogueTokenType_keyword_loop = 0;
RogueClassTokenType* RogueTokenType_keyword_NaN = 0;
RogueClassTokenType* RogueTokenType_keyword_native = 0;
RogueClassTokenType* RogueTokenType_keyword_necessary = 0;
RogueClassTokenType* RogueTokenType_keyword_nextIteration = 0;
RogueClassTokenType* RogueTokenType_keyword_noAction = 0;
RogueClassTokenType* RogueTokenType_keyword_null = 0;
RogueClassTokenType* RogueTokenType_keyword_of = 0;
RogueClassTokenType* RogueTokenType_keyword_return = 0;
RogueClassTokenType* RogueTokenType_keyword_select = 0;
RogueClassTokenType* RogueTokenType_keyword_step = 0;
RogueClassTokenType* RogueTokenType_keyword_sufficient = 0;
RogueClassTokenType* RogueTokenType_keyword_throw = 0;
RogueClassTokenType* RogueTokenType_keyword_trace = 0;
RogueClassTokenType* RogueTokenType_keyword_trace_position = 0;
RogueClassTokenType* RogueTokenType_keyword_try = 0;
RogueClassTokenType* RogueTokenType_keyword_which = 0;
RogueClassTokenType* RogueTokenType_keyword_while = 0;
RogueClassTokenType* RogueTokenType_keyword_yield = 0;
RogueClassTokenType* RogueTokenType_identifier = 0;
RogueClassTokenType* RogueTokenType_type_identifier = 0;
RogueClassTokenType* RogueTokenType_literal_character = 0;
RogueClassTokenType* RogueTokenType_literal_integer = 0;
RogueClassTokenType* RogueTokenType_literal_long = 0;
RogueClassTokenType* RogueTokenType_literal_real = 0;
RogueClassTokenType* RogueTokenType_literal_string = 0;
RogueClassTokenType* RogueTokenType_keyword_and = 0;
RogueClassTokenType* RogueTokenType_keyword_as = 0;
RogueClassTokenType* RogueTokenType_keyword_downTo = 0;
RogueClassTokenType* RogueTokenType_keyword_false = 0;
RogueClassTokenType* RogueTokenType_keyword_instanceOf = 0;
RogueClassTokenType* RogueTokenType_keyword_meta = 0;
RogueClassTokenType* RogueTokenType_keyword_not = 0;
RogueClassTokenType* RogueTokenType_keyword_notInstanceOf = 0;
RogueClassTokenType* RogueTokenType_keyword_or = 0;
RogueClassTokenType* RogueTokenType_keyword_pi = 0;
RogueClassTokenType* RogueTokenType_keyword_prior = 0;
RogueClassTokenType* RogueTokenType_keyword_this = 0;
RogueClassTokenType* RogueTokenType_keyword_true = 0;
RogueClassTokenType* RogueTokenType_keyword_xor = 0;
RogueClassTokenType* RogueTokenType_symbol_ampersand = 0;
RogueClassTokenType* RogueTokenType_symbol_ampersand_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_arrow = 0;
RogueClassTokenType* RogueTokenType_symbol_at = 0;
RogueClassTokenType* RogueTokenType_symbol_backslash = 0;
RogueClassTokenType* RogueTokenType_symbol_caret = 0;
RogueClassTokenType* RogueTokenType_symbol_caret_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_colon = 0;
RogueClassTokenType* RogueTokenType_symbol_comma = 0;
RogueClassTokenType* RogueTokenType_symbol_compare = 0;
RogueClassTokenType* RogueTokenType_symbol_dot = 0;
RogueClassTokenType* RogueTokenType_symbol_dot_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_downToGreaterThan = 0;
RogueClassTokenType* RogueTokenType_symbol_empty_braces = 0;
RogueClassTokenType* RogueTokenType_symbol_empty_brackets = 0;
RogueClassTokenType* RogueTokenType_symbol_eq = 0;
RogueClassTokenType* RogueTokenType_symbol_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_exclamation_point = 0;
RogueClassTokenType* RogueTokenType_symbol_fat_arrow = 0;
RogueClassTokenType* RogueTokenType_symbol_ge = 0;
RogueClassTokenType* RogueTokenType_symbol_gt = 0;
RogueClassTokenType* RogueTokenType_symbol_le = 0;
RogueClassTokenType* RogueTokenType_symbol_lt = 0;
RogueClassTokenType* RogueTokenType_symbol_minus = 0;
RogueClassTokenType* RogueTokenType_symbol_minus_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_minus_minus = 0;
RogueClassTokenType* RogueTokenType_symbol_ne = 0;
RogueClassTokenType* RogueTokenType_symbol_open_brace = 0;
RogueClassTokenType* RogueTokenType_symbol_open_bracket = 0;
RogueClassTokenType* RogueTokenType_symbol_open_paren = 0;
RogueClassTokenType* RogueTokenType_symbol_open_specialize = 0;
RogueClassTokenType* RogueTokenType_symbol_percent = 0;
RogueClassTokenType* RogueTokenType_symbol_percent_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_plus = 0;
RogueClassTokenType* RogueTokenType_symbol_plus_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_plus_plus = 0;
RogueClassTokenType* RogueTokenType_symbol_question_mark = 0;
RogueClassTokenType* RogueTokenType_symbol_semicolon = 0;
RogueClassTokenType* RogueTokenType_symbol_shift_left = 0;
RogueClassTokenType* RogueTokenType_symbol_shift_right = 0;
RogueClassTokenType* RogueTokenType_symbol_shift_right_x = 0;
RogueClassTokenType* RogueTokenType_symbol_slash = 0;
RogueClassTokenType* RogueTokenType_symbol_slash_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_tilde = 0;
RogueClassTokenType* RogueTokenType_symbol_tilde_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_times = 0;
RogueClassTokenType* RogueTokenType_symbol_times_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_upTo = 0;
RogueClassTokenType* RogueTokenType_symbol_upToLessThan = 0;
RogueClassTokenType* RogueTokenType_symbol_vertical_bar = 0;
RogueClassTokenType* RogueTokenType_symbol_vertical_bar_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_double_vertical_bar = 0;
RogueStringList* RogueSystem_command_line_arguments = 0;
RogueString* RogueSystem_executable_filepath = 0;
RogueClassSystemEnvironment RogueSystem_environment = RogueClassSystemEnvironment();
RogueClassString_TokenListTable* RoguePreprocessor_definitions = 0;

void RogueStringBuilder_trace( void* obj );
void RogueCharacterList_trace( void* obj );
void RogueStringReader_trace( void* obj );
void RogueStringList_trace( void* obj );
void RogueGlobal_trace( void* obj );
void RogueRogueC_trace( void* obj );
void RogueException_trace( void* obj );
void RogueStackTrace_trace( void* obj );
void RogueProgram_trace( void* obj );
void RogueTemplateList_trace( void* obj );
void RogueTemplate_trace( void* obj );
void RogueString_TemplateTable_trace( void* obj );
void RogueString_AugmentListTable_trace( void* obj );
void RogueMethod_trace( void* obj );
void RoguePropertyList_trace( void* obj );
void RogueProperty_trace( void* obj );
void RogueString_MethodListTable_trace( void* obj );
void RogueTypeList_trace( void* obj );
void RogueType_trace( void* obj );
void RogueString_TypeTable_trace( void* obj );
void RogueString_Int32Table_trace( void* obj );
void RogueString_StringListTable_trace( void* obj );
void RogueString_Int32TableEntry_trace( void* obj );
void RogueInt32_TemplateTable_trace( void* obj );
void RogueToken_trace( void* obj );
void RogueError_trace( void* obj );
void RogueRogueError_trace( void* obj );
void RogueCmdLabel_trace( void* obj );
void RogueCmd_trace( void* obj );
void RogueCmdStatementList_trace( void* obj );
void RogueCmdList_trace( void* obj );
void RogueAttributes_trace( void* obj );
void RogueCmdReturn_trace( void* obj );
void RogueCmdStatement_trace( void* obj );
void RogueTokenType_trace( void* obj );
void RogueScope_trace( void* obj );
void RogueMethodList_trace( void* obj );
void RogueCPPWriter_trace( void* obj );
void RogueString_MethodTable_trace( void* obj );
void RogueLocalList_trace( void* obj );
void RogueLocal_trace( void* obj );
void RogueInt32List_trace( void* obj );
void RogueByteList_trace( void* obj );
void RogueString_LogicalTable_trace( void* obj );
void RogueParserList_trace( void* obj );
void RogueParser_trace( void* obj );
void RogueString_ParseReaderTable_trace( void* obj );
void RogueFile_trace( void* obj );
void RogueCmdMakeRequisite_trace( void* obj );
void RogueTokenList_trace( void* obj );
void RogueLineReader_trace( void* obj );
void RogueTypeParameterList_trace( void* obj );
void RogueTypeParameter_trace( void* obj );
void RogueAugmentList_trace( void* obj );
void RogueAugment_trace( void* obj );
void RogueString_TokenTypeTable_trace( void* obj );
void RogueLiteralCharacterToken_trace( void* obj );
void RogueLiteralInt64Token_trace( void* obj );
void RogueLiteralInt32Token_trace( void* obj );
void RogueLiteralReal64Token_trace( void* obj );
void RogueStringDataToken_trace( void* obj );
void RogueString_TypeSpecializerTable_trace( void* obj );
void RogueTypeSpecializer_trace( void* obj );
void RogueTypeSpecializerList_trace( void* obj );
void RogueTableEntry_of_String_TemplateList_trace( void* obj );
void RogueString_TemplateTableEntry_trace( void* obj );
void RogueTableEntry_of_String_AugmentListList_trace( void* obj );
void RogueString_AugmentListTableEntry_trace( void* obj );
void RogueCmdLabelList_trace( void* obj );
void RogueString_CmdLabelTable_trace( void* obj );
void RogueCloneMethodArgs_trace( void* obj );
void RogueCmdAccess_trace( void* obj );
void RogueCmdArgs_trace( void* obj );
void RogueCmdFlagArgList_trace( void* obj );
void RogueCmdFlagArg_trace( void* obj );
void RogueCmdAssign_trace( void* obj );
void RogueCmdControlStructureList_trace( void* obj );
void RogueCmdControlStructure_trace( void* obj );
void RogueCmdLiteralThis_trace( void* obj );
void RogueCmdThisContext_trace( void* obj );
void RogueCmdGenericLoop_trace( void* obj );
void RogueCmdLiteralInt32_trace( void* obj );
void RogueCmdLiteral_trace( void* obj );
void RogueCmdCompareNE_trace( void* obj );
void RogueCmdComparison_trace( void* obj );
void RogueCmdBinary_trace( void* obj );
void RogueTaskArgs_trace( void* obj );
void RogueCmdTaskControl_trace( void* obj );
void RogueCmdTaskControlSection_trace( void* obj );
void RogueTableEntry_of_String_MethodListList_trace( void* obj );
void RogueString_MethodListTableEntry_trace( void* obj );
void RogueDefinitionList_trace( void* obj );
void RogueDefinition_trace( void* obj );
void RogueString_DefinitionTable_trace( void* obj );
void RogueNativePropertyList_trace( void* obj );
void RogueNativeProperty_trace( void* obj );
void RogueString_PropertyTable_trace( void* obj );
void RogueCmdLiteralNull_trace( void* obj );
void RogueCmdCreateCompound_trace( void* obj );
void RogueCmdLiteralLogical_trace( void* obj );
void RogueCmdLiteralString_trace( void* obj );
void RogueCmdWriteGlobal_trace( void* obj );
void RogueCmdWriteProperty_trace( void* obj );
void RogueTableEntry_of_String_TypeList_trace( void* obj );
void RogueString_TypeTableEntry_trace( void* obj );
void RogueTableEntry_of_String_Int32List_trace( void* obj );
void RogueTableEntry_of_String_StringListList_trace( void* obj );
void RogueString_StringListTableEntry_trace( void* obj );
void RogueTableEntry_of_Int32_TemplateList_trace( void* obj );
void RogueInt32_TemplateTableEntry_trace( void* obj );
void RogueCmdCastToType_trace( void* obj );
void RogueCmdTypeOperator_trace( void* obj );
void RogueCmdLogicalize_trace( void* obj );
void RogueCmdUnary_trace( void* obj );
void RogueCmdReadSingleton_trace( void* obj );
void RogueCmdCallInlineNativeRoutine_trace( void* obj );
void RogueCmdCallInlineNative_trace( void* obj );
void RogueCmdCall_trace( void* obj );
void RogueCmdCallNativeRoutine_trace( void* obj );
void RogueMacroArgs_trace( void* obj );
void RogueCmdInlineNative_trace( void* obj );
void RogueCmdCallRoutine_trace( void* obj );
void RogueCmdReadArrayCount_trace( void* obj );
void RogueCmdCallInlineNativeMethod_trace( void* obj );
void RogueCmdCallNativeMethod_trace( void* obj );
void RogueCmdCallAspectMethod_trace( void* obj );
void RogueCmdCallDynamicMethod_trace( void* obj );
void RogueCmdCallMethod_trace( void* obj );
void RogueCandidateMethods_trace( void* obj );
void RogueCmdCreateFunction_trace( void* obj );
void RogueFnParamList_trace( void* obj );
void RogueFnParam_trace( void* obj );
void RogueCmdReadLocal_trace( void* obj );
void RogueTableEntry_of_String_MethodList_trace( void* obj );
void RogueString_MethodTableEntry_trace( void* obj );
void RogueTableEntry_of_String_LogicalList_trace( void* obj );
void RogueString_LogicalTableEntry_trace( void* obj );
void RogueTokenReader_trace( void* obj );
void RogueString_StringTable_trace( void* obj );
void RogueTokenizer_trace( void* obj );
void RogueParseReader_trace( void* obj );
void RoguePreprocessor_trace( void* obj );
void RogueEOLToken_trace( void* obj );
void RogueCmdAdd_trace( void* obj );
void RogueCmdNativeHeader_trace( void* obj );
void RogueCmdNativeCode_trace( void* obj );
void RogueCmdIf_trace( void* obj );
void RogueCmdWhich_trace( void* obj );
void RogueCmdContingent_trace( void* obj );
void RogueCmdTry_trace( void* obj );
void RogueCmdAwait_trace( void* obj );
void RogueCmdYield_trace( void* obj );
void RogueCmdThrow_trace( void* obj );
void RogueCmdFormattedString_trace( void* obj );
void RogueCmdTrace_trace( void* obj );
void RogueCmdEscape_trace( void* obj );
void RogueCmdNextIteration_trace( void* obj );
void RogueCmdNecessary_trace( void* obj );
void RogueCmdSufficient_trace( void* obj );
void RogueCmdAdjust_trace( void* obj );
void RogueCmdModifyAndAssign_trace( void* obj );
void RogueCmdWhichCaseList_trace( void* obj );
void RogueCmdWhichCase_trace( void* obj );
void RogueCmdCatchList_trace( void* obj );
void RogueCmdCatch_trace( void* obj );
void RogueCmdLocalDeclaration_trace( void* obj );
void RogueCmdAdjustLocal_trace( void* obj );
void RogueCmdCompareLE_trace( void* obj );
void RogueCmdRange_trace( void* obj );
void RogueCmdModifyAndAssignLocal_trace( void* obj );
void RogueCmdResolvedModifyAndAssign_trace( void* obj );
void RogueCmdRangeUpTo_trace( void* obj );
void RogueCmdCompareGE_trace( void* obj );
void RogueCmdForEach_trace( void* obj );
void RogueCmdRangeDownTo_trace( void* obj );
void RogueCmdLogicalXor_trace( void* obj );
void RogueCmdBinaryLogical_trace( void* obj );
void RogueCmdLogicalOr_trace( void* obj );
void RogueCmdLogicalAnd_trace( void* obj );
void RogueCmdCompareEQ_trace( void* obj );
void RogueCmdCompareIs_trace( void* obj );
void RogueCmdCompareIsNot_trace( void* obj );
void RogueCmdCompareLT_trace( void* obj );
void RogueCmdCompareGT_trace( void* obj );
void RogueCmdInstanceOf_trace( void* obj );
void RogueCmdLogicalNot_trace( void* obj );
void RogueCmdBitwiseXor_trace( void* obj );
void RogueCmdBitwiseOp_trace( void* obj );
void RogueCmdBitwiseOr_trace( void* obj );
void RogueCmdBitwiseAnd_trace( void* obj );
void RogueCmdBitwiseShiftLeft_trace( void* obj );
void RogueCmdBitwiseShiftRight_trace( void* obj );
void RogueCmdBitwiseShiftRightX_trace( void* obj );
void RogueCmdSubtract_trace( void* obj );
void RogueCmdMultiply_trace( void* obj );
void RogueCmdDivide_trace( void* obj );
void RogueCmdMod_trace( void* obj );
void RogueCmdPower_trace( void* obj );
void RogueCmdNegate_trace( void* obj );
void RogueCmdBitwiseNot_trace( void* obj );
void RogueCmdElementAccess_trace( void* obj );
void RogueCmdListConvert_trace( void* obj );
void RogueCmdConvertToType_trace( void* obj );
void RogueCmdCreateCallback_trace( void* obj );
void RogueCmdAs_trace( void* obj );
void RogueCmdDefaultValue_trace( void* obj );
void RogueCmdLiteralReal64_trace( void* obj );
void RogueCmdLiteralInt64_trace( void* obj );
void RogueCmdLiteralCharacter_trace( void* obj );
void RogueCmdCreateList_trace( void* obj );
void RogueCmdCallPriorMethod_trace( void* obj );
void RogueFnArgList_trace( void* obj );
void RogueFnArg_trace( void* obj );
void RogueCmdSelect_trace( void* obj );
void RogueCmdSelectCaseList_trace( void* obj );
void RogueCmdSelectCase_trace( void* obj );
void RogueCmdTypedLiteralList_trace( void* obj );
void RogueTableEntry_of_String_ParseReaderList_trace( void* obj );
void RogueString_ParseReaderTableEntry_trace( void* obj );
void RogueIOError_trace( void* obj );
void RogueFileReader_trace( void* obj );
void RogueFileWriter_trace( void* obj );
void RogueCmdNoAction_trace( void* obj );
void RogueTokenListRebuilder_trace( void* obj );
void RogueTableEntry_of_String_TokenTypeList_trace( void* obj );
void RogueString_TokenTypeTableEntry_trace( void* obj );
void RogueTableEntry_of_String_TypeSpecializerList_trace( void* obj );
void RogueString_TypeSpecializerTableEntry_trace( void* obj );
void RogueTableEntry_of_String_CmdLabelList_trace( void* obj );
void RogueString_CmdLabelTableEntry_trace( void* obj );
void RogueCmdCreateArray_trace( void* obj );
void RogueCmdCreateObject_trace( void* obj );
void RogueCmdReadGlobal_trace( void* obj );
void RogueCmdReadProperty_trace( void* obj );
void RogueCmdWriteSingleton_trace( void* obj );
void RogueCmdWriteLocal_trace( void* obj );
void RogueCmdModifyAndAssignGlobal_trace( void* obj );
void RogueCmdModifyAndAssignProperty_trace( void* obj );
void RogueCmdTaskControlSectionList_trace( void* obj );
void RogueCmdBlock_trace( void* obj );
void RogueTableEntry_of_String_DefinitionList_trace( void* obj );
void RogueString_DefinitionTableEntry_trace( void* obj );
void RogueTableEntry_of_String_PropertyList_trace( void* obj );
void RogueString_PropertyTableEntry_trace( void* obj );
void RogueString_CmdTable_trace( void* obj );
void RogueCmdCallStaticMethod_trace( void* obj );
void RogueTableEntry_of_String_StringList_trace( void* obj );
void RogueString_StringTableEntry_trace( void* obj );
void RogueDirectiveTokenType_trace( void* obj );
void RogueStructuralDirectiveTokenType_trace( void* obj );
void RogueEOLTokenType_trace( void* obj );
void RogueStructureTokenType_trace( void* obj );
void RogueNativeCodeTokenType_trace( void* obj );
void RogueModifyAndAssignTokenType_trace( void* obj );
void RogueString_TokenListTable_trace( void* obj );
void RoguePreprocessorTokenReader_trace( void* obj );
void RogueCmdSwitch_trace( void* obj );
void RogueCmdReadArrayElement_trace( void* obj );
void RogueCmdWriteArrayElement_trace( void* obj );
void RogueCmdConvertToPrimitiveType_trace( void* obj );
void RogueCmdSelectCaseListReader_trace( void* obj );
void RogueCmdAdjustGlobal_trace( void* obj );
void RogueCmdAdjustProperty_trace( void* obj );
void RogueTableEntry_of_String_CmdList_trace( void* obj );
void RogueString_CmdTableEntry_trace( void* obj );
void RogueNativeCodeToken_trace( void* obj );
void RogueTableEntry_of_String_TokenListList_trace( void* obj );
void RogueString_TokenListTableEntry_trace( void* obj );

void RogueStringBuilder_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueStringBuilder*)obj)->characters)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCharacterList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCharacterList*)obj)->data)) RogueArray_trace( link );
}

void RogueStringReader_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassStringReader*)obj)->string)) RogueString_trace( link );
}

void RogueStringList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueStringList*)obj)->data)) RogueArray_trace( link );
}

void RogueGlobal_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassGlobal*)obj)->printwriter_output_buffer)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassGlobal*)obj)->standard_output)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueRogueC_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassRogueC*)obj)->included_files)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->prefix_path_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->prefix_path_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->compile_targets)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->target_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->libraries_folder)) RogueString_trace( link );
  if ((link=((RogueClassRogueC*)obj)->source_files)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->first_filepath)) RogueString_trace( link );
  if ((link=((RogueClassRogueC*)obj)->output_filepath)) RogueString_trace( link );
  if ((link=((RogueClassRogueC*)obj)->supported_targets)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->requisite_declarations)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->execute_args)) RogueString_trace( link );
  if ((link=((RogueClassRogueC*)obj)->package_name)) RogueString_trace( link );
  if ((link=((RogueClassRogueC*)obj)->parsers)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->parsereaders_by_filepath)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->stopwatch)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueException_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassException*)obj)->message)) RogueString_trace( link );
  if ((link=((RogueClassException*)obj)->stack_trace)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueStackTrace_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassStackTrace*)obj)->entries)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueProgram_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassProgram*)obj)->code_prefix)) RogueString_trace( link );
  if ((link=((RogueClassProgram*)obj)->program_name)) RogueString_trace( link );
  if ((link=((RogueClassProgram*)obj)->template_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->template_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->augment_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->first_filepath)) RogueString_trace( link );
  if ((link=((RogueClassProgram*)obj)->m_on_launch)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->global_properties)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->native_header)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->native_code)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->methods_by_signature)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_null)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Real64)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Real32)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Int64)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Int32)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Character)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Byte)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Logical)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Object)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_String)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_NativeArray)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_GenericList)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Global)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Exception)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_StringBuilder)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->literal_string_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->literal_string_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->string_buffer)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->ids_by_module)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTemplateList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTemplateList*)obj)->data)) RogueArray_trace( link );
}

void RogueTemplate_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTemplate*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTemplate*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassTemplate*)obj)->tokens)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTemplate*)obj)->attributes)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTemplate*)obj)->type_parameters)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTemplate*)obj)->alternates_by_param_count)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_TemplateTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TemplateTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TemplateTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_AugmentListTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_AugmentListTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_AugmentListTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueMethod_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->type_context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassMethod*)obj)->signature)) RogueString_trace( link );
  if ((link=((RogueClassMethod*)obj)->attributes)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->_return_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->_task_result_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->parameters)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->locals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->aspect_statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->incorporating_classes)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->overridden_method)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->overriding_methods)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->native_code)) RogueString_trace( link );
  if ((link=((RogueClassMethod*)obj)->label_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->label_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->cur_label)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->cpp_name)) RogueString_trace( link );
  if ((link=((RogueClassMethod*)obj)->cpp_typedef)) RogueString_trace( link );
}

void RoguePropertyList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RoguePropertyList*)obj)->data)) RogueArray_trace( link );
}

void RogueProperty_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassProperty*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProperty*)obj)->type_context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProperty*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassProperty*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProperty*)obj)->initial_value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProperty*)obj)->cpp_name)) RogueString_trace( link );
}

void RogueString_MethodListTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_MethodListTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_MethodListTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTypeList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTypeList*)obj)->data)) RogueArray_trace( link );
}

void RogueType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassType*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassType*)obj)->attributes)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->source_template)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->specializers)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->base_class)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->base_types)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->flat_base_types)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->_element_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->definition_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->definition_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->prev_enum_cmd)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->native_properties)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->global_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->global_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->property_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->property_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->global_method_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->global_method_lookup_by_name)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->routine_lookup_by_signature)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->method_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->method_lookup_by_name)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->method_lookup_by_signature)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->callback_parameter_types)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->_callback_return_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->cpp_name)) RogueString_trace( link );
  if ((link=((RogueClassType*)obj)->cpp_class_name)) RogueString_trace( link );
  if ((link=((RogueClassType*)obj)->cpp_type_name)) RogueString_trace( link );
}

void RogueString_TypeTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TypeTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TypeTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_Int32Table_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_Int32Table*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_Int32Table*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_StringListTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_StringListTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_StringListTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_Int32TableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_Int32TableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_Int32TableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueInt32_TemplateTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassInt32_TemplateTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassInt32_TemplateTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueToken_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassToken*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassToken*)obj)->filepath)) RogueString_trace( link );
}

void RogueError_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassError*)obj)->message)) RogueString_trace( link );
  if ((link=((RogueClassError*)obj)->stack_trace)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueRogueError_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassRogueError*)obj)->message)) RogueString_trace( link );
  if ((link=((RogueClassRogueError*)obj)->stack_trace)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueError*)obj)->filepath)) RogueString_trace( link );
}

void RogueCmdLabel_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLabel*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLabel*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassCmdLabel*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmd_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmd*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdStatementList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdStatementList*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdList*)obj)->data)) RogueArray_trace( link );
}

void RogueAttributes_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassAttributes*)obj)->tags)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdReturn_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdReturn*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReturn*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdStatement_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdStatement*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTokenType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTokenType*)obj)->name)) RogueString_trace( link );
}

void RogueScope_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassScope*)obj)->_this_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassScope*)obj)->this_method)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassScope*)obj)->this_body)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassScope*)obj)->_implicit_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassScope*)obj)->local_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassScope*)obj)->control_stack)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueMethodList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueMethodList*)obj)->data)) RogueArray_trace( link );
}

void RogueCPPWriter_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCPPWriter*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassCPPWriter*)obj)->buffer)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCPPWriter*)obj)->temp_buffer)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_MethodTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_MethodTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_MethodTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueLocalList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueLocalList*)obj)->data)) RogueArray_trace( link );
}

void RogueLocal_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassLocal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLocal*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassLocal*)obj)->original_name)) RogueString_trace( link );
  if ((link=((RogueClassLocal*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLocal*)obj)->initial_value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLocal*)obj)->_cpp_name)) RogueString_trace( link );
}

void RogueInt32List_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueInt32List*)obj)->data)) RogueArray_trace( link );
}

void RogueByteList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueByteList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_LogicalTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_LogicalTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_LogicalTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueParserList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueParserList*)obj)->data)) RogueArray_trace( link );
}

void RogueParser_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassParser*)obj)->reader)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassParser*)obj)->_this_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->this_method)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->local_declarations)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->property_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->string_buffer)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->cur_statement_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->used_modules)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->module_id_map)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_ParseReaderTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_ParseReaderTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_ParseReaderTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueFile_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassFile*)obj)->filepath)) RogueString_trace( link );
}

void RogueCmdMakeRequisite_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdMakeRequisite*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdMakeRequisite*)obj)->pattern)) RogueString_trace( link );
}

void RogueTokenList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTokenList*)obj)->data)) RogueArray_trace( link );
}

void RogueLineReader_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassLineReader*)obj)->source)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLineReader*)obj)->next)) RogueString_trace( link );
  if ((link=((RogueClassLineReader*)obj)->buffer)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTypeParameterList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTypeParameterList*)obj)->data)) RogueArray_trace( link );
}

void RogueTypeParameter_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTypeParameter*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTypeParameter*)obj)->name)) RogueString_trace( link );
}

void RogueAugmentList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueAugmentList*)obj)->data)) RogueArray_trace( link );
}

void RogueAugment_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassAugment*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassAugment*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassAugment*)obj)->base_types)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassAugment*)obj)->tokens)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_TokenTypeTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TokenTypeTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TokenTypeTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueLiteralCharacterToken_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassLiteralCharacterToken*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLiteralCharacterToken*)obj)->filepath)) RogueString_trace( link );
}

void RogueLiteralInt64Token_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassLiteralInt64Token*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLiteralInt64Token*)obj)->filepath)) RogueString_trace( link );
}

void RogueLiteralInt32Token_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassLiteralInt32Token*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLiteralInt32Token*)obj)->filepath)) RogueString_trace( link );
}

void RogueLiteralReal64Token_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassLiteralReal64Token*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLiteralReal64Token*)obj)->filepath)) RogueString_trace( link );
}

void RogueStringDataToken_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassStringDataToken*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassStringDataToken*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassStringDataToken*)obj)->value)) RogueString_trace( link );
}

void RogueString_TypeSpecializerTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TypeSpecializerTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TypeSpecializerTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTypeSpecializer_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTypeSpecializer*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassTypeSpecializer*)obj)->tokens)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTypeSpecializerList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTypeSpecializerList*)obj)->data)) RogueArray_trace( link );
}

void RogueTableEntry_of_String_TemplateList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_TemplateList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_TemplateTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TemplateTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_TemplateTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TemplateTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_AugmentListList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_AugmentListList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_AugmentListTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_AugmentListTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_AugmentListTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_AugmentListTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLabelList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdLabelList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_CmdLabelTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_CmdLabelTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_CmdLabelTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCloneMethodArgs_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCloneMethodArgs*)obj)->cloned_method)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAccess_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAccess*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAccess*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAccess*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassCmdAccess*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAccess*)obj)->flag_args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdArgs_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdArgs*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdFlagArgList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdFlagArgList*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdFlagArg_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdFlagArg*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdFlagArg*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassCmdFlagArg*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAssign_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAssign*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAssign*)obj)->target)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAssign*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdControlStructureList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdControlStructureList*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdControlStructure_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdControlStructure*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdControlStructure*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdControlStructure*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdControlStructure*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdControlStructure*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdControlStructure*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdControlStructure*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralThis_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralThis*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLiteralThis*)obj)->_this_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdThisContext_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdThisContext*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdThisContext*)obj)->_this_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdGenericLoop_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdGenericLoop*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->control_statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->condition)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->upkeep)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralInt32_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralInt32*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteral_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteral*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareNE_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareNE*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareNE*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareNE*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdComparison_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdComparison*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdComparison*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdComparison*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBinary_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBinary*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBinary*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBinary*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTaskArgs_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTaskArgs*)obj)->_task_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTaskArgs*)obj)->task_method)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTaskArgs*)obj)->_original_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTaskArgs*)obj)->original_method)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTaskArgs*)obj)->cmd_task_control)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTaskArgs*)obj)->context_property)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTaskArgs*)obj)->ip_property)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdTaskControl_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdTaskControl*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTaskControl*)obj)->sections)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTaskControl*)obj)->current_section)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdTaskControlSection_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdTaskControlSection*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_MethodListList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_MethodListList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_MethodListTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_MethodListTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_MethodListTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_MethodListTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueDefinitionList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueDefinitionList*)obj)->data)) RogueArray_trace( link );
}

void RogueDefinition_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassDefinition*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassDefinition*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassDefinition*)obj)->expression)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_DefinitionTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_DefinitionTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_DefinitionTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueNativePropertyList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueNativePropertyList*)obj)->data)) RogueArray_trace( link );
}

void RogueNativeProperty_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassNativeProperty*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassNativeProperty*)obj)->code)) RogueString_trace( link );
}

void RogueString_PropertyTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_PropertyTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_PropertyTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralNull_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralNull*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCreateCompound_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCreateCompound*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateCompound*)obj)->_of_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateCompound*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralLogical_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralLogical*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralString_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralString*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLiteralString*)obj)->value)) RogueString_trace( link );
}

void RogueCmdWriteGlobal_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdWriteGlobal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteGlobal*)obj)->global_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteGlobal*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdWriteProperty_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdWriteProperty*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteProperty*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteProperty*)obj)->property_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteProperty*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_TypeList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_TypeList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_TypeTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TypeTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_TypeTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TypeTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_Int32List_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_Int32List*)obj)->data)) RogueArray_trace( link );
}

void RogueTableEntry_of_String_StringListList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_StringListList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_StringListTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_StringListTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_StringListTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_StringListTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_Int32_TemplateList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_Int32_TemplateList*)obj)->data)) RogueArray_trace( link );
}

void RogueInt32_TemplateTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassInt32_TemplateTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassInt32_TemplateTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCastToType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCastToType*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCastToType*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCastToType*)obj)->_target_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdTypeOperator_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdTypeOperator*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTypeOperator*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTypeOperator*)obj)->_target_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLogicalize_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLogicalize*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalize*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdUnary_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdUnary*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdUnary*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdReadSingleton_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdReadSingleton*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadSingleton*)obj)->_of_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallInlineNativeRoutine_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallInlineNativeRoutine*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNativeRoutine*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNativeRoutine*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNativeRoutine*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallInlineNative_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallInlineNative*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNative*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNative*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNative*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCall_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCall*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCall*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCall*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCall*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallNativeRoutine_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallNativeRoutine*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallNativeRoutine*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallNativeRoutine*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallNativeRoutine*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueMacroArgs_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassMacroArgs*)obj)->this_context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMacroArgs*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMacroArgs*)obj)->arg_lookup)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdInlineNative_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdInlineNative*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdInlineNative*)obj)->code)) RogueString_trace( link );
  if ((link=((RogueClassCmdInlineNative*)obj)->this_method)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdInlineNative*)obj)->_result_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdInlineNative*)obj)->modify_op)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdInlineNative*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallRoutine_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallRoutine*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallRoutine*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallRoutine*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallRoutine*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdReadArrayCount_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdReadArrayCount*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadArrayCount*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadArrayCount*)obj)->_array_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallInlineNativeMethod_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallInlineNativeMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNativeMethod*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNativeMethod*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNativeMethod*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallNativeMethod_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallNativeMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallNativeMethod*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallNativeMethod*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallNativeMethod*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallAspectMethod_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallAspectMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallAspectMethod*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallAspectMethod*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallAspectMethod*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallDynamicMethod_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallDynamicMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallDynamicMethod*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallDynamicMethod*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallDynamicMethod*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallMethod_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallMethod*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallMethod*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallMethod*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCandidateMethods_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCandidateMethods*)obj)->type_context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCandidateMethods*)obj)->access)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCandidateMethods*)obj)->available)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCandidateMethods*)obj)->compatible)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCreateFunction_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCreateFunction*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateFunction*)obj)->parameters)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateFunction*)obj)->_return_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateFunction*)obj)->with_args)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateFunction*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueFnParamList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueFnParamList*)obj)->data)) RogueArray_trace( link );
}

void RogueFnParam_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassFnParam*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassFnParam*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdReadLocal_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdReadLocal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadLocal*)obj)->local_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_MethodList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_MethodList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_MethodTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_MethodTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_MethodTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_MethodTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_LogicalList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_LogicalList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_LogicalTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_LogicalTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_LogicalTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTokenReader_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTokenReader*)obj)->tokens)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_StringTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_StringTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_StringTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTokenizer_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTokenizer*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassTokenizer*)obj)->reader)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTokenizer*)obj)->tokens)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTokenizer*)obj)->buffer)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTokenizer*)obj)->next_filepath)) RogueString_trace( link );
}

void RogueParseReader_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassParseReader*)obj)->data)) ((RogueObject*)link)->type->trace_fn( link );
}

void RoguePreprocessor_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassPreprocessor*)obj)->parser)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassPreprocessor*)obj)->reader)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassPreprocessor*)obj)->tokens)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassPreprocessor*)obj)->cur_module)) RogueString_trace( link );
}

void RogueEOLToken_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassEOLToken*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassEOLToken*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassEOLToken*)obj)->comment)) RogueString_trace( link );
}

void RogueCmdAdd_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAdd*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAdd*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAdd*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdNativeHeader_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdNativeHeader*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdNativeHeader*)obj)->code)) RogueString_trace( link );
}

void RogueCmdNativeCode_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdNativeCode*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdNativeCode*)obj)->code)) RogueString_trace( link );
}

void RogueCmdIf_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdIf*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdIf*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdIf*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdIf*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdIf*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdIf*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdIf*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdIf*)obj)->condition)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdIf*)obj)->else_statements)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdWhich_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdWhich*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhich*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhich*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdWhich*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdWhich*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhich*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhich*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhich*)obj)->expression)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhich*)obj)->cases)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhich*)obj)->case_others)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdContingent_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdContingent*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdContingent*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdContingent*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->satisfied_statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->unsatisfied_statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->satisfied_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdContingent*)obj)->unsatisfied_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdContingent*)obj)->satisfied_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->unsatisfied_section)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdTry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdTry*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTry*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTry*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdTry*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdTry*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTry*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTry*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTry*)obj)->catches)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAwait_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAwait*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAwait*)obj)->expression)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAwait*)obj)->statement_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAwait*)obj)->result_var)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdYield_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdYield*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdThrow_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdThrow*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdThrow*)obj)->expression)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdFormattedString_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdFormattedString*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdFormattedString*)obj)->format)) RogueString_trace( link );
  if ((link=((RogueClassCmdFormattedString*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdTrace_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdTrace*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTrace*)obj)->info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdEscape_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdEscape*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdEscape*)obj)->target_cmd)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdNextIteration_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdNextIteration*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdNextIteration*)obj)->target_cmd)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdNecessary_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdNecessary*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdNecessary*)obj)->target_cmd)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdNecessary*)obj)->condition)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdSufficient_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdSufficient*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSufficient*)obj)->target_cmd)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSufficient*)obj)->condition)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAdjust_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAdjust*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAdjust*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdModifyAndAssign_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdModifyAndAssign*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdModifyAndAssign*)obj)->target)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdModifyAndAssign*)obj)->op)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdModifyAndAssign*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdWhichCaseList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdWhichCaseList*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdWhichCase_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdWhichCase*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhichCase*)obj)->conditions)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhichCase*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCatchList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdCatchList*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdCatch_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCatch*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCatch*)obj)->error_var)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCatch*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLocalDeclaration_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLocalDeclaration*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLocalDeclaration*)obj)->local_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAdjustLocal_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAdjustLocal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAdjustLocal*)obj)->local_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareLE_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareLE*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareLE*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareLE*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdRange_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdRange*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRange*)obj)->first)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRange*)obj)->last)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRange*)obj)->step_size)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdModifyAndAssignLocal_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdModifyAndAssignLocal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdModifyAndAssignLocal*)obj)->op)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdModifyAndAssignLocal*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdModifyAndAssignLocal*)obj)->local_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdResolvedModifyAndAssign_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdResolvedModifyAndAssign*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdResolvedModifyAndAssign*)obj)->op)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdResolvedModifyAndAssign*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdRangeUpTo_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdRangeUpTo*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRangeUpTo*)obj)->first)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRangeUpTo*)obj)->last)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRangeUpTo*)obj)->step_size)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareGE_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareGE*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareGE*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareGE*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdForEach_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdForEach*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdForEach*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdForEach*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdForEach*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdForEach*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdForEach*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdForEach*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdForEach*)obj)->control_var_name)) RogueString_trace( link );
  if ((link=((RogueClassCmdForEach*)obj)->index_var_name)) RogueString_trace( link );
  if ((link=((RogueClassCmdForEach*)obj)->collection)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdForEach*)obj)->step_cmd)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdRangeDownTo_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdRangeDownTo*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRangeDownTo*)obj)->first)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRangeDownTo*)obj)->last)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRangeDownTo*)obj)->step_size)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLogicalXor_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLogicalXor*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalXor*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalXor*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBinaryLogical_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBinaryLogical*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBinaryLogical*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBinaryLogical*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLogicalOr_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLogicalOr*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalOr*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalOr*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLogicalAnd_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLogicalAnd*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalAnd*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalAnd*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareEQ_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareEQ*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareEQ*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareEQ*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareIs_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareIs*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareIs*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareIs*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareIsNot_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareIsNot*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareIsNot*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareIsNot*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareLT_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareLT*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareLT*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareLT*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareGT_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareGT*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareGT*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareGT*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdInstanceOf_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdInstanceOf*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdInstanceOf*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdInstanceOf*)obj)->_target_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLogicalNot_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLogicalNot*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalNot*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseXor_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseXor*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseXor*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseXor*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseOp_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseOp*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseOp*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseOp*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseOr_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseOr*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseOr*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseOr*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseAnd_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseAnd*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseAnd*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseAnd*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseShiftLeft_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseShiftLeft*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseShiftLeft*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseShiftLeft*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseShiftRight_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseShiftRight*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseShiftRight*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseShiftRight*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseShiftRightX_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseShiftRightX*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseShiftRightX*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseShiftRightX*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdSubtract_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdSubtract*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSubtract*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSubtract*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdMultiply_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdMultiply*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdMultiply*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdMultiply*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdDivide_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdDivide*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdDivide*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdDivide*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdMod_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdMod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdMod*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdMod*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdPower_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdPower*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdPower*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdPower*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdNegate_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdNegate*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdNegate*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseNot_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseNot*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseNot*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdElementAccess_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdElementAccess*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdElementAccess*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdElementAccess*)obj)->index)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdListConvert_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdListConvert*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdListConvert*)obj)->list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdListConvert*)obj)->_to_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdListConvert*)obj)->convert_fn)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdConvertToType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdConvertToType*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdConvertToType*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdConvertToType*)obj)->_target_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCreateCallback_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCreateCallback*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateCallback*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateCallback*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassCmdCreateCallback*)obj)->signature)) RogueString_trace( link );
  if ((link=((RogueClassCmdCreateCallback*)obj)->_return_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAs_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAs*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAs*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAs*)obj)->_target_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdDefaultValue_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdDefaultValue*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdDefaultValue*)obj)->_of_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralReal64_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralReal64*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralInt64_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralInt64*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralCharacter_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralCharacter*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCreateList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCreateList*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateList*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateList*)obj)->_list_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallPriorMethod_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallPriorMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallPriorMethod*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassCmdCallPriorMethod*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallPriorMethod*)obj)->flag_args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueFnArgList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueFnArgList*)obj)->data)) RogueArray_trace( link );
}

void RogueFnArg_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassFnArg*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassFnArg*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassFnArg*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdSelect_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdSelect*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSelect*)obj)->local_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSelect*)obj)->expression)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSelect*)obj)->cases)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSelect*)obj)->_value_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdSelectCaseList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdSelectCaseList*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdSelectCase_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdSelectCase*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSelectCase*)obj)->conditions)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSelectCase*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdTypedLiteralList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdTypedLiteralList*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTypedLiteralList*)obj)->list_type_name)) RogueString_trace( link );
  if ((link=((RogueClassCmdTypedLiteralList*)obj)->elements)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_ParseReaderList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_ParseReaderList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_ParseReaderTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_ParseReaderTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_ParseReaderTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_ParseReaderTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueIOError_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassIOError*)obj)->message)) RogueString_trace( link );
  if ((link=((RogueClassIOError*)obj)->stack_trace)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueFileReader_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassFileReader*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassFileReader*)obj)->buffer)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueFileWriter_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassFileWriter*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassFileWriter*)obj)->buffer)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdNoAction_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdNoAction*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTokenListRebuilder_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTokenListRebuilder*)obj)->list)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_TokenTypeList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_TokenTypeList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_TokenTypeTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TokenTypeTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_TokenTypeTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TokenTypeTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_TypeSpecializerList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_TypeSpecializerList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_TypeSpecializerTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TypeSpecializerTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_TypeSpecializerTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TypeSpecializerTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_CmdLabelList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_CmdLabelList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_CmdLabelTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_CmdLabelTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_CmdLabelTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_CmdLabelTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCreateArray_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCreateArray*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateArray*)obj)->_array_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateArray*)obj)->count_cmd)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCreateObject_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCreateObject*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateObject*)obj)->_of_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdReadGlobal_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdReadGlobal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadGlobal*)obj)->global_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdReadProperty_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdReadProperty*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadProperty*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadProperty*)obj)->property_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdWriteSingleton_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdWriteSingleton*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteSingleton*)obj)->_of_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteSingleton*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdWriteLocal_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdWriteLocal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteLocal*)obj)->local_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteLocal*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdModifyAndAssignGlobal_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdModifyAndAssignGlobal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdModifyAndAssignGlobal*)obj)->op)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdModifyAndAssignGlobal*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdModifyAndAssignGlobal*)obj)->global_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdModifyAndAssignProperty_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdModifyAndAssignProperty*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdModifyAndAssignProperty*)obj)->op)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdModifyAndAssignProperty*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdModifyAndAssignProperty*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdModifyAndAssignProperty*)obj)->property_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdTaskControlSectionList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdTaskControlSectionList*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdBlock_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBlock*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBlock*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBlock*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdBlock*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdBlock*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBlock*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBlock*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_DefinitionList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_DefinitionList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_DefinitionTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_DefinitionTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_DefinitionTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_DefinitionTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_PropertyList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_PropertyList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_PropertyTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_PropertyTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_PropertyTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_PropertyTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_CmdTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_CmdTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_CmdTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallStaticMethod_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallStaticMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallStaticMethod*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallStaticMethod*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallStaticMethod*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_StringList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_StringList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_StringTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_StringTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_StringTableEntry*)obj)->value)) RogueString_trace( link );
  if ((link=((RogueClassString_StringTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueDirectiveTokenType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassDirectiveTokenType*)obj)->name)) RogueString_trace( link );
}

void RogueStructuralDirectiveTokenType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassStructuralDirectiveTokenType*)obj)->name)) RogueString_trace( link );
}

void RogueEOLTokenType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassEOLTokenType*)obj)->name)) RogueString_trace( link );
}

void RogueStructureTokenType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassStructureTokenType*)obj)->name)) RogueString_trace( link );
}

void RogueNativeCodeTokenType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassNativeCodeTokenType*)obj)->name)) RogueString_trace( link );
}

void RogueModifyAndAssignTokenType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassModifyAndAssignTokenType*)obj)->name)) RogueString_trace( link );
}

void RogueString_TokenListTable_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TokenListTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TokenListTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RoguePreprocessorTokenReader_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassPreprocessorTokenReader*)obj)->tokens)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassPreprocessorTokenReader*)obj)->queue)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdSwitch_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdSwitch*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSwitch*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSwitch*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdSwitch*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdSwitch*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSwitch*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSwitch*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSwitch*)obj)->expression)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSwitch*)obj)->cases)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSwitch*)obj)->case_others)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdReadArrayElement_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdReadArrayElement*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadArrayElement*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadArrayElement*)obj)->_array_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadArrayElement*)obj)->index)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdWriteArrayElement_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdWriteArrayElement*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteArrayElement*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteArrayElement*)obj)->_array_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteArrayElement*)obj)->index)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteArrayElement*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdConvertToPrimitiveType_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdConvertToPrimitiveType*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdConvertToPrimitiveType*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdConvertToPrimitiveType*)obj)->_target_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdSelectCaseListReader_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdSelectCaseListReader*)obj)->list)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAdjustGlobal_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAdjustGlobal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAdjustGlobal*)obj)->global_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAdjustProperty_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAdjustProperty*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAdjustProperty*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAdjustProperty*)obj)->property_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_CmdList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_CmdList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_CmdTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_CmdTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_CmdTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_CmdTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueNativeCodeToken_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassNativeCodeToken*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassNativeCodeToken*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassNativeCodeToken*)obj)->value)) RogueString_trace( link );
}

void RogueTableEntry_of_String_TokenListList_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_TokenListList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_TokenListTableEntry_trace( void* obj )
{
  void* link;
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TokenListTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_TokenListTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TokenListTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}


int Rogue_type_name_index_table[] =
{
  45,47,48,54,52,50,49,51,53,707,56,750,55,634,1178,708,
  751,57,1179,635,1180,636,58,637,638,709,639,640,641,642,710,643,
  644,711,645,646,647,648,649,650,651,799,808,813,348,1038,712,752,
  652,1043,814,653,753,654,713,754,755,655,1052,1053,656,657,714,658,
  756,715,757,659,716,758,660,1181,661,717,662,663,664,665,759,815,
  718,666,719,667,720,668,760,669,802,803,804,805,806,761,670,762,
  671,721,722,672,763,723,673,764,724,674,675,1054,810,1039,725,816,
  817,726,1044,1065,818,765,1057,1067,819,1160,1092,820,1055,766,821,676,
  727,677,767,728,678,679,729,680,681,1068,822,1069,1070,823,824,768,
  769,730,682,770,731,771,732,683,772,733,684,773,1102,825,1106,826,
  1146,774,1176,1168,1147,1169,1056,827,1170,1148,1177,1171,1172,1174,1173,1139,
  828,734,685,775,776,829,735,686,777,736,687,778,688,689,690,691,
  692,807,1093,830,831,1058,1059,1060,1061,832,833,834,835,836,837,838,
  839,840,841,842,737,843,738,844,1045,845,1161,846,1119,847,1117,1162,
  1062,1118,1122,1075,1123,1124,1163,1164,1165,1166,1167,1103,1107,1132,1094,1133,
  1134,1135,1136,1137,1095,1096,1097,1098,1099,1108,1109,848,849,1104,850,1105,
  1071,1072,1073,1074,851,852,739,693,853,740,854,855,741,694,779,809,
  695,696,1149,697,742,698,780,743,699,781,744,700,782,1150,1151,1152,
  1153,1154,1155,1120,1121,783,745,1063,784,746,701,785,747,702,786,1140,
  1175,787,748,703,788,1046,1047,1048,1049,1050,1051,704,705,789,1064,790,
  1156,1157,1138,791,1141,1182,1158,1159,1143,1142,1144,1145,749,706,792,1183,
  1184,1185
};
RogueInitFn Rogue_init_object_fn_table[] =
{
  0,
  0,
  0,
  (RogueInitFn) RogueStringBuilder__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueGlobal__init_object,
  0,
  0,
  0,
  (RogueInitFn) RogueRogueC__init_object,
  (RogueInitFn) RogueException__init_object,
  0,
  (RogueInitFn) RogueProgram__init_object,
  0,
  (RogueInitFn) RogueTemplate__init_object,
  0,
  0,
  (RogueInitFn) RogueMethod__init_object,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueType__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueError__init_object,
  (RogueInitFn) RogueRogueError__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueScope__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueCPPWriter__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueParser__init_object,
  0,
  (RogueInitFn) RogueStopwatch__init_object,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueLineReader__init_object,
  0,
  0,
  0,
  (RogueInitFn) RogueAugment__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueCmdTaskControl__init_object,
  (RogueInitFn) RogueCmdTaskControlSection__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueCandidateMethods__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueTokenizer__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueIOError__init_object,
  (RogueInitFn) RogueFileReader__init_object,
  (RogueInitFn) RogueFileWriter__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RoguePreprocessorTokenReader__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
};

RogueInitFn Rogue_init_fn_table[] =
{
  0,
  0,
  0,
  (RogueInitFn) RogueStringBuilder__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueStringList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueTemplateList__init,
  0,
  (RogueInitFn) RogueString_TemplateTable__init,
  (RogueInitFn) RogueString_AugmentListTable__init,
  0,
  (RogueInitFn) RoguePropertyList__init,
  0,
  (RogueInitFn) RogueString_MethodListTable__init,
  (RogueInitFn) RogueTypeList__init,
  0,
  (RogueInitFn) RogueString_TypeTable__init,
  (RogueInitFn) RogueString_Int32Table__init,
  (RogueInitFn) RogueString_StringListTable__init,
  0,
  (RogueInitFn) RogueInt32_TemplateTable__init,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueCmdStatementList__init,
  (RogueInitFn) RogueCmdList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueMethodList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueString_MethodTable__init,
  (RogueInitFn) RogueLocalList__init,
  0,
  0,
  (RogueInitFn) RogueInt32List__init,
  0,
  0,
  (RogueInitFn) RogueByteList__init,
  0,
  0,
  0,
  (RogueInitFn) RogueString_LogicalTable__init,
  (RogueInitFn) RogueParserList__init,
  0,
  (RogueInitFn) RogueString_ParseReaderTable__init,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueTokenList__init,
  0,
  (RogueInitFn) RogueTypeParameterList__init,
  0,
  (RogueInitFn) RogueAugmentList__init,
  0,
  0,
  (RogueInitFn) RogueString_TokenTypeTable__init,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueString_TypeSpecializerTable__init,
  0,
  0,
  (RogueInitFn) RogueTypeSpecializerList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueCmdLabelList__init,
  (RogueInitFn) RogueString_CmdLabelTable__init,
  0,
  0,
  0,
  (RogueInitFn) RogueCmdArgs__init,
  (RogueInitFn) RogueCmdFlagArgList__init,
  0,
  0,
  (RogueInitFn) RogueCmdControlStructureList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueDefinitionList__init,
  0,
  (RogueInitFn) RogueString_DefinitionTable__init,
  (RogueInitFn) RogueNativePropertyList__init,
  0,
  (RogueInitFn) RogueString_PropertyTable__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueFnParamList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueString_StringTable__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueCmdWhichCaseList__init,
  0,
  (RogueInitFn) RogueCmdCatchList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueFnArgList__init,
  0,
  0,
  (RogueInitFn) RogueCmdSelectCaseList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueCmdTaskControlSectionList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueString_CmdTable__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueString_TokenListTable__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
};

RogueCleanUpFn Rogue_clean_up_fn_table[] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
};

RogueTraceFn Rogue_trace_fn_table[] =
{
  0,
  0,
  0,
  RogueStringBuilder_trace,
  RogueObject_trace,
  0,
  0,
  0,
  RogueObject_trace,
  RogueCharacterList_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueStringReader_trace,
  0,
  RogueStringList_trace,
  RogueObject_trace,
  RogueGlobal_trace,
  0,
  RogueObject_trace,
  0,
  RogueRogueC_trace,
  RogueException_trace,
  RogueStackTrace_trace,
  RogueProgram_trace,
  RogueTemplateList_trace,
  RogueTemplate_trace,
  RogueString_TemplateTable_trace,
  RogueString_AugmentListTable_trace,
  RogueMethod_trace,
  RoguePropertyList_trace,
  RogueProperty_trace,
  RogueString_MethodListTable_trace,
  RogueTypeList_trace,
  RogueType_trace,
  RogueString_TypeTable_trace,
  RogueString_Int32Table_trace,
  RogueString_StringListTable_trace,
  RogueString_Int32TableEntry_trace,
  RogueInt32_TemplateTable_trace,
  RogueToken_trace,
  RogueError_trace,
  RogueRogueError_trace,
  RogueCmdLabel_trace,
  RogueCmd_trace,
  RogueCmdStatementList_trace,
  RogueCmdList_trace,
  RogueArray_trace,
  RogueAttributes_trace,
  RogueCmdReturn_trace,
  RogueCmdStatement_trace,
  RogueTokenType_trace,
  RogueArray_trace,
  RogueScope_trace,
  RogueMethodList_trace,
  RogueArray_trace,
  RogueArray_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueCPPWriter_trace,
  RogueString_MethodTable_trace,
  RogueLocalList_trace,
  RogueLocal_trace,
  RogueArray_trace,
  RogueInt32List_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueByteList_trace,
  RogueObject_trace,
  RogueObject_trace,
  0,
  RogueString_LogicalTable_trace,
  RogueParserList_trace,
  RogueParser_trace,
  RogueString_ParseReaderTable_trace,
  RogueObject_trace,
  RogueFile_trace,
  RogueArray_trace,
  RogueCmdMakeRequisite_trace,
  RogueTokenList_trace,
  RogueLineReader_trace,
  RogueTypeParameterList_trace,
  RogueTypeParameter_trace,
  RogueAugmentList_trace,
  RogueAugment_trace,
  RogueArray_trace,
  RogueString_TokenTypeTable_trace,
  RogueLiteralCharacterToken_trace,
  RogueLiteralInt64Token_trace,
  RogueLiteralInt32Token_trace,
  RogueLiteralReal64Token_trace,
  RogueStringDataToken_trace,
  RogueArray_trace,
  RogueString_TypeSpecializerTable_trace,
  RogueArray_trace,
  RogueTypeSpecializer_trace,
  RogueTypeSpecializerList_trace,
  RogueTableEntry_of_String_TemplateList_trace,
  RogueString_TemplateTableEntry_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_AugmentListList_trace,
  RogueString_AugmentListTableEntry_trace,
  RogueArray_trace,
  RogueCmdLabelList_trace,
  RogueString_CmdLabelTable_trace,
  RogueObject_trace,
  RogueCloneMethodArgs_trace,
  RogueCmdAccess_trace,
  RogueCmdArgs_trace,
  RogueCmdFlagArgList_trace,
  RogueCmdFlagArg_trace,
  RogueCmdAssign_trace,
  RogueCmdControlStructureList_trace,
  RogueCmdControlStructure_trace,
  RogueCmdLiteralThis_trace,
  RogueCmdThisContext_trace,
  RogueArray_trace,
  RogueCmdGenericLoop_trace,
  RogueCmdLiteralInt32_trace,
  RogueCmdLiteral_trace,
  RogueCmdCompareNE_trace,
  RogueCmdComparison_trace,
  RogueCmdBinary_trace,
  RogueTaskArgs_trace,
  RogueArray_trace,
  RogueCmdTaskControl_trace,
  RogueCmdTaskControlSection_trace,
  RogueTableEntry_of_String_MethodListList_trace,
  RogueString_MethodListTableEntry_trace,
  RogueArray_trace,
  RogueDefinitionList_trace,
  RogueDefinition_trace,
  RogueString_DefinitionTable_trace,
  RogueNativePropertyList_trace,
  RogueNativeProperty_trace,
  RogueString_PropertyTable_trace,
  RogueCmdLiteralNull_trace,
  RogueCmdCreateCompound_trace,
  RogueCmdLiteralLogical_trace,
  RogueCmdLiteralString_trace,
  RogueCmdWriteGlobal_trace,
  RogueCmdWriteProperty_trace,
  RogueArray_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_TypeList_trace,
  RogueString_TypeTableEntry_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_Int32List_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_StringListList_trace,
  RogueString_StringListTableEntry_trace,
  RogueArray_trace,
  RogueTableEntry_of_Int32_TemplateList_trace,
  RogueInt32_TemplateTableEntry_trace,
  RogueArray_trace,
  RogueCmdCastToType_trace,
  RogueCmdTypeOperator_trace,
  RogueCmdLogicalize_trace,
  RogueCmdUnary_trace,
  RogueCmdReadSingleton_trace,
  RogueArray_trace,
  RogueCmdCallInlineNativeRoutine_trace,
  RogueCmdCallInlineNative_trace,
  RogueCmdCall_trace,
  RogueCmdCallNativeRoutine_trace,
  RogueMacroArgs_trace,
  RogueCmdInlineNative_trace,
  RogueCmdCallRoutine_trace,
  RogueCmdReadArrayCount_trace,
  RogueCmdCallInlineNativeMethod_trace,
  RogueCmdCallNativeMethod_trace,
  RogueCmdCallAspectMethod_trace,
  RogueCmdCallDynamicMethod_trace,
  RogueCmdCallMethod_trace,
  RogueCandidateMethods_trace,
  RogueCmdCreateFunction_trace,
  RogueFnParamList_trace,
  RogueFnParam_trace,
  RogueArray_trace,
  RogueArray_trace,
  RogueCmdReadLocal_trace,
  RogueTableEntry_of_String_MethodList_trace,
  RogueString_MethodTableEntry_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_LogicalList_trace,
  RogueString_LogicalTableEntry_trace,
  RogueArray_trace,
  RogueTokenReader_trace,
  RogueString_StringTable_trace,
  RogueTokenizer_trace,
  RogueParseReader_trace,
  RoguePreprocessor_trace,
  RogueEOLToken_trace,
  RogueCmdAdd_trace,
  RogueCmdNativeHeader_trace,
  RogueCmdNativeCode_trace,
  RogueCmdIf_trace,
  RogueCmdWhich_trace,
  RogueCmdContingent_trace,
  RogueCmdTry_trace,
  RogueCmdAwait_trace,
  RogueCmdYield_trace,
  RogueCmdThrow_trace,
  RogueCmdFormattedString_trace,
  RogueCmdTrace_trace,
  RogueCmdEscape_trace,
  RogueCmdNextIteration_trace,
  RogueCmdNecessary_trace,
  RogueCmdSufficient_trace,
  RogueCmdAdjust_trace,
  RogueCmdModifyAndAssign_trace,
  RogueCmdWhichCaseList_trace,
  RogueCmdWhichCase_trace,
  RogueCmdCatchList_trace,
  RogueCmdCatch_trace,
  RogueCmdLocalDeclaration_trace,
  RogueCmdAdjustLocal_trace,
  RogueCmdCompareLE_trace,
  RogueCmdRange_trace,
  RogueCmdModifyAndAssignLocal_trace,
  RogueCmdResolvedModifyAndAssign_trace,
  RogueCmdRangeUpTo_trace,
  RogueCmdCompareGE_trace,
  RogueCmdForEach_trace,
  RogueCmdRangeDownTo_trace,
  RogueCmdLogicalXor_trace,
  RogueCmdBinaryLogical_trace,
  RogueCmdLogicalOr_trace,
  RogueCmdLogicalAnd_trace,
  RogueCmdCompareEQ_trace,
  RogueCmdCompareIs_trace,
  RogueCmdCompareIsNot_trace,
  RogueCmdCompareLT_trace,
  RogueCmdCompareGT_trace,
  RogueCmdInstanceOf_trace,
  RogueCmdLogicalNot_trace,
  RogueCmdBitwiseXor_trace,
  RogueCmdBitwiseOp_trace,
  RogueCmdBitwiseOr_trace,
  RogueCmdBitwiseAnd_trace,
  RogueCmdBitwiseShiftLeft_trace,
  RogueCmdBitwiseShiftRight_trace,
  RogueCmdBitwiseShiftRightX_trace,
  RogueCmdSubtract_trace,
  RogueCmdMultiply_trace,
  RogueCmdDivide_trace,
  RogueCmdMod_trace,
  RogueCmdPower_trace,
  RogueCmdNegate_trace,
  RogueCmdBitwiseNot_trace,
  RogueCmdElementAccess_trace,
  RogueCmdListConvert_trace,
  RogueCmdConvertToType_trace,
  RogueCmdCreateCallback_trace,
  RogueCmdAs_trace,
  RogueCmdDefaultValue_trace,
  RogueCmdLiteralReal64_trace,
  RogueCmdLiteralInt64_trace,
  RogueCmdLiteralCharacter_trace,
  RogueCmdCreateList_trace,
  RogueCmdCallPriorMethod_trace,
  RogueFnArgList_trace,
  RogueFnArg_trace,
  RogueCmdSelect_trace,
  RogueCmdSelectCaseList_trace,
  RogueCmdSelectCase_trace,
  RogueCmdTypedLiteralList_trace,
  RogueTableEntry_of_String_ParseReaderList_trace,
  RogueString_ParseReaderTableEntry_trace,
  RogueArray_trace,
  RogueIOError_trace,
  RogueFileReader_trace,
  RogueFileWriter_trace,
  RogueCmdNoAction_trace,
  RogueTokenListRebuilder_trace,
  RogueTableEntry_of_String_TokenTypeList_trace,
  RogueString_TokenTypeTableEntry_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_TypeSpecializerList_trace,
  RogueString_TypeSpecializerTableEntry_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_CmdLabelList_trace,
  RogueString_CmdLabelTableEntry_trace,
  RogueArray_trace,
  RogueCmdCreateArray_trace,
  RogueCmdCreateObject_trace,
  RogueCmdReadGlobal_trace,
  RogueCmdReadProperty_trace,
  RogueCmdWriteSingleton_trace,
  RogueCmdWriteLocal_trace,
  RogueCmdModifyAndAssignGlobal_trace,
  RogueCmdModifyAndAssignProperty_trace,
  RogueArray_trace,
  RogueCmdTaskControlSectionList_trace,
  RogueCmdBlock_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_DefinitionList_trace,
  RogueString_DefinitionTableEntry_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_PropertyList_trace,
  RogueString_PropertyTableEntry_trace,
  RogueArray_trace,
  RogueString_CmdTable_trace,
  RogueCmdCallStaticMethod_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_StringList_trace,
  RogueString_StringTableEntry_trace,
  RogueArray_trace,
  RogueDirectiveTokenType_trace,
  RogueStructuralDirectiveTokenType_trace,
  RogueEOLTokenType_trace,
  RogueStructureTokenType_trace,
  RogueNativeCodeTokenType_trace,
  RogueModifyAndAssignTokenType_trace,
  RogueString_TokenListTable_trace,
  RoguePreprocessorTokenReader_trace,
  RogueArray_trace,
  RogueCmdSwitch_trace,
  RogueArray_trace,
  RogueCmdReadArrayElement_trace,
  RogueCmdWriteArrayElement_trace,
  RogueCmdConvertToPrimitiveType_trace,
  RogueArray_trace,
  RogueCmdSelectCaseListReader_trace,
  0,
  RogueCmdAdjustGlobal_trace,
  RogueCmdAdjustProperty_trace,
  RogueTableEntry_of_String_CmdList_trace,
  RogueString_CmdTableEntry_trace,
  RogueArray_trace,
  RogueNativeCodeToken_trace,
  RogueTableEntry_of_String_TokenListList_trace,
  RogueString_TokenListTableEntry_trace,
  RogueArray_trace,
  0,
  0,
  0
};

void Rogue_trace()
{
  void* link;
  int i;

  // Trace GLOBAL PROPERTIES
  if ((link=RogueStringBuilder_work_bytes)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueCmdStatementList_current)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_define)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_include)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_includeNativeCode)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_includeNativeHeader)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_if)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_elseIf)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_else)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_endIf)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_module)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_requisite)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_using)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_placeholder_id)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_begin_augment_tokens)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_augment)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_case)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_catch)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_class)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_DEFINITIONS)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_else)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_elseIf)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endAugment)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endClass)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endContingent)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endForEach)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endFunction)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endIf)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endLoop)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endRoutine)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endTry)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endWhich)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endWhile)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_ENUMERATE)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_GLOBAL)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_GLOBAL_METHODS)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_GLOBAL_PROPERTIES)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_macro)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_method)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_METHODS)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_nativeCode)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_nativeHeader)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_others)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_PROPERTIES)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_routine)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_satisfied)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_unsatisfied)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_with)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_close_brace)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_close_bracket)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_close_comment)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_close_paren)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_close_specialize)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_eol)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_eoi)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_await)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_contingent)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_escapeContingent)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_escapeForEach)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_escapeIf)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_escapeLoop)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_escapeTry)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_escapeWhich)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_escapeWhile)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_forEach)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_function)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_global)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_if)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_in)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_infinity)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_is)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_isNot)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_local)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_loop)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_NaN)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_native)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_necessary)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_nextIteration)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_noAction)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_null)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_of)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_return)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_select)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_step)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_sufficient)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_throw)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_trace)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_trace_position)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_try)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_which)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_while)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_yield)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_identifier)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_type_identifier)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_literal_character)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_literal_integer)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_literal_long)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_literal_real)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_literal_string)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_and)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_as)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_downTo)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_false)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_instanceOf)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_meta)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_not)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_notInstanceOf)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_or)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_pi)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_prior)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_this)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_true)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_xor)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_ampersand)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_ampersand_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_arrow)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_at)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_backslash)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_caret)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_caret_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_colon)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_comma)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_compare)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_dot)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_dot_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_downToGreaterThan)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_empty_braces)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_empty_brackets)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_eq)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_exclamation_point)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_fat_arrow)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_ge)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_gt)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_le)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_lt)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_minus)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_minus_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_minus_minus)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_ne)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_open_brace)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_open_bracket)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_open_paren)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_open_specialize)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_percent)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_percent_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_plus)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_plus_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_plus_plus)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_question_mark)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_semicolon)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_shift_left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_shift_right)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_shift_right_x)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_slash)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_slash_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_tilde)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_tilde_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_times)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_times_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_upTo)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_upToLessThan)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_vertical_bar)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_vertical_bar_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_double_vertical_bar)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueSystem_command_line_arguments)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueSystem_executable_filepath)) RogueString_trace( link );
  if ((link=RoguePreprocessor_definitions)) ((RogueObject*)link)->type->trace_fn( link );

  // Trace singletons
  for (i=Rogue_type_count; --i>=0; )
  {
    RogueType* type = &Rogue_types[i];
    if (type->_singleton)
    {
      type->trace_fn( type->_singleton );
    }
  }
}

void* Rogue_dynamic_method_table[] =
{
  0, // StringBuilder
  (void*) (ROGUEM0) RogueStringBuilder__to_String,
  (void*) (ROGUEM0) RogueStringBuilder__type_name,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM1) RogueStringBuilder__init_object,
  0, // Character[]
  (void*) (ROGUEM3) RogueCharacterList__to_String,
  (void*) (ROGUEM3) RogueCharacterList__type_name,
  (void*) (ROGUEM4) RogueCharacterList__init_object,
  0, // GenericList
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM5) RogueGenericList__type_name,
  (void*) (ROGUEM6) RogueGenericList__init_object,
  0, // StringReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM8) RogueStringReader__type_name,
  (void*) (ROGUEM9) RogueStringReader__has_another,
  (void*) (ROGUEM10) RogueStringReader__read,
  0, // Reader<<Character>>
  0, // String[]
  (void*) (ROGUEM11) RogueStringList__to_String,
  (void*) (ROGUEM11) RogueStringList__type_name,
  (void*) (ROGUEM12) RogueStringList__init_object,
  0, // Global
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM13) RogueGlobal__type_name,
  0,
  0,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM14) RogueGlobal__write__CharacterList,
  0, // PrintWriterAspect
  0, // Console
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM15) RogueConsole__type_name,
  0, // Writer<<Character>>
  0, // RogueC
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM16) RogueRogueC__type_name,
  0, // Exception
  (void*) (ROGUEM17) RogueException__to_String,
  (void*) (ROGUEM17) RogueException__type_name,
  0,
  (void*) (ROGUEM18) RogueException__init_object,
  0, // StackTrace
  (void*) (ROGUEM19) RogueStackTrace__to_String,
  (void*) (ROGUEM19) RogueStackTrace__type_name,
  0, // Program
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM20) RogueProgram__type_name,
  0, // Template[]
  (void*) (ROGUEM21) RogueTemplateList__to_String,
  (void*) (ROGUEM21) RogueTemplateList__type_name,
  (void*) (ROGUEM22) RogueTemplateList__init_object,
  0, // Template
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM23) RogueTemplate__type_name,
  0, // Table<<String,Template>>
  (void*) (ROGUEM24) RogueString_TemplateTable__to_String,
  (void*) (ROGUEM24) RogueString_TemplateTable__type_name,
  0, // Table<<String,Augment[]>>
  (void*) (ROGUEM25) RogueString_AugmentListTable__to_String,
  (void*) (ROGUEM25) RogueString_AugmentListTable__type_name,
  0, // Method
  (void*) (ROGUEM26) RogueMethod__to_String,
  (void*) (ROGUEM26) RogueMethod__type_name,
  0, // Property[]
  (void*) (ROGUEM27) RoguePropertyList__to_String,
  (void*) (ROGUEM27) RoguePropertyList__type_name,
  (void*) (ROGUEM28) RoguePropertyList__init_object,
  0, // Property
  (void*) (ROGUEM29) RogueProperty__to_String,
  (void*) (ROGUEM29) RogueProperty__type_name,
  0, // Table<<String,Method[]>>
  (void*) (ROGUEM30) RogueString_MethodListTable__to_String,
  (void*) (ROGUEM30) RogueString_MethodListTable__type_name,
  0, // Type[]
  (void*) (ROGUEM31) RogueTypeList__to_String,
  (void*) (ROGUEM31) RogueTypeList__type_name,
  (void*) (ROGUEM32) RogueTypeList__init_object,
  0, // Type
  (void*) (ROGUEM33) RogueType__to_String,
  (void*) (ROGUEM33) RogueType__type_name,
  0, // Table<<String,Type>>
  (void*) (ROGUEM34) RogueString_TypeTable__to_String,
  (void*) (ROGUEM34) RogueString_TypeTable__type_name,
  0, // Table<<String,Int32>>
  (void*) (ROGUEM35) RogueString_Int32Table__to_String,
  (void*) (ROGUEM35) RogueString_Int32Table__type_name,
  0, // Table<<String,String[]>>
  (void*) (ROGUEM36) RogueString_StringListTable__to_String,
  (void*) (ROGUEM36) RogueString_StringListTable__type_name,
  0, // TableEntry<<String,Int32>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM37) RogueString_Int32TableEntry__type_name,
  0, // Table<<Int32,Template>>
  (void*) (ROGUEM38) RogueInt32_TemplateTable__to_String,
  (void*) (ROGUEM38) RogueInt32_TemplateTable__type_name,
  0, // Token
  (void*) (ROGUEM39) RogueToken__to_String,
  (void*) (ROGUEM39) RogueToken__type_name,
  0,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM39) RogueToken__quoted_name,
  0,
  0,
  (void*) (ROGUEM40) RogueToken__to_Character,
  (void*) (ROGUEM41) RogueToken__to_Int32,
  (void*) (ROGUEM42) RogueToken__to_Int64,
  (void*) (ROGUEM43) RogueToken__to_Real64,
  (void*) (ROGUEM44) RogueToken__to_Type,
  0,
  (void*) (ROGUEM45) RogueToken__init_object,
  0, // Error
  (void*) (ROGUEM17) RogueException__to_String,
  (void*) (ROGUEM46) RogueError__type_name,
  0,
  (void*) (ROGUEM47) RogueError__init_object,
  0, // RogueError
  (void*) (ROGUEM48) RogueRogueError__to_String,
  (void*) (ROGUEM48) RogueRogueError__type_name,
  0,
  (void*) (ROGUEM49) RogueRogueError__init_object,
  0, // CmdLabel
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM50) RogueCmdLabel__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM54) RogueCmdLabel__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM61) RogueCmdLabel__requires_semicolon,
  (void*) (ROGUEM62) RogueCmdLabel__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM66) RogueCmdLabel__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM67) RogueCmdLabel__trace_used_code,
  (void*) (ROGUEM68) RogueCmdLabel__update_this_type__Scope,
  (void*) (ROGUEM69) RogueCmdLabel__init_object,
  0, // Cmd
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM70) RogueCmd__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM71) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM52) RogueCmd__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM59) RogueCmd__trace_used_code,
  (void*) (ROGUEM56) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM73) RogueCmd__init_object,
  0, // CmdStatementList
  (void*) (ROGUEM74) RogueCmdList__to_String,
  (void*) (ROGUEM75) RogueCmdStatementList__type_name,
  (void*) (ROGUEM76) RogueCmdStatementList__init_object,
  (void*) (ROGUEM76) RogueCmdStatementList__init,
  (void*) (ROGUEM77) RogueCmdStatementList__init__Int32,
  0, // Cmd[]
  (void*) (ROGUEM74) RogueCmdList__to_String,
  (void*) (ROGUEM74) RogueCmdList__type_name,
  (void*) (ROGUEM78) RogueCmdList__init_object,
  (void*) (ROGUEM78) RogueCmdList__init,
  (void*) (ROGUEM79) RogueCmdList__init__Int32,
  0, // Attributes
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM80) RogueAttributes__type_name,
  0, // CmdReturn
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM81) RogueCmdReturn__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM82) RogueCmdReturn__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM83) RogueCmdReturn__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM84) Rogue_CmdReturn__type,
  (void*) (ROGUEM85) RogueCmdReturn__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM86) RogueCmdReturn__trace_used_code,
  (void*) (ROGUEM87) RogueCmdReturn__update_this_type__Scope,
  (void*) (ROGUEM88) RogueCmdReturn__init_object,
  0, // CmdStatement
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM89) RogueCmdStatement__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM71) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM52) RogueCmd__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM90) RogueCmdStatement__trace_used_code,
  (void*) (ROGUEM91) RogueCmdStatement__update_this_type__Scope,
  (void*) (ROGUEM92) RogueCmdStatement__init_object,
  0, // TokenType
  (void*) (ROGUEM93) RogueTokenType__to_String,
  (void*) (ROGUEM93) RogueTokenType__type_name,
  0,
  (void*) (ROGUEM94) RogueTokenType__create_token__String_Int32_Int32,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM95) RogueTokenType__create_token__String_Int32_Int32_String,
  0,
  (void*) (ROGUEM96) RogueTokenType__create_token__Token_String,
  0,
  (void*) (ROGUEM97) RogueTokenType__is_directive,
  (void*) (ROGUEM97) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM97) RogueTokenType__is_structure,
  0,
  0,
  (void*) (ROGUEM98) RogueTokenType__init_object,
  0, // Scope
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM99) RogueScope__type_name,
  0, // Method[]
  (void*) (ROGUEM100) RogueMethodList__to_String,
  (void*) (ROGUEM100) RogueMethodList__type_name,
  (void*) (ROGUEM101) RogueMethodList__init_object,
  0, // Function(Type)->Logical
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM102) RogueFunction_Type_RETURNSLogical__type_name,
  (void*) (ROGUEM103) RogueFunction_Type_RETURNSLogical__call__Type,
  (void*) (ROGUEM104) RogueFunction_Type_RETURNSLogical__init_object,
  0, // Function_159
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM105) RogueFunction_159__type_name,
  (void*) (ROGUEM106) RogueFunction_159__call__Type,
  (void*) (ROGUEM107) RogueFunction_159__init_object,
  0, // Function_160
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM108) RogueFunction_160__type_name,
  (void*) (ROGUEM109) RogueFunction_160__call__Type,
  (void*) (ROGUEM110) RogueFunction_160__init_object,
  0, // CPPWriter
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM111) RogueCPPWriter__type_name,
  0, // Table<<String,Method>>
  (void*) (ROGUEM112) RogueString_MethodTable__to_String,
  (void*) (ROGUEM112) RogueString_MethodTable__type_name,
  0, // Local[]
  (void*) (ROGUEM113) RogueLocalList__to_String,
  (void*) (ROGUEM113) RogueLocalList__type_name,
  (void*) (ROGUEM114) RogueLocalList__init_object,
  0, // Local
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM115) RogueLocal__type_name,
  0, // Int32[]
  (void*) (ROGUEM116) RogueInt32List__to_String,
  (void*) (ROGUEM116) RogueInt32List__type_name,
  (void*) (ROGUEM117) RogueInt32List__init_object,
  0, // Math
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM118) RogueMath__type_name,
  0, // Byte[]
  (void*) (ROGUEM119) RogueByteList__to_String,
  (void*) (ROGUEM119) RogueByteList__type_name,
  (void*) (ROGUEM120) RogueByteList__init_object,
  0, // System
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM121) RogueSystem__type_name,
  0, // Reader<<String>>
  0, // Table<<String,Logical>>
  (void*) (ROGUEM122) RogueString_LogicalTable__to_String,
  (void*) (ROGUEM122) RogueString_LogicalTable__type_name,
  0, // Parser[]
  (void*) (ROGUEM123) RogueParserList__to_String,
  (void*) (ROGUEM123) RogueParserList__type_name,
  (void*) (ROGUEM124) RogueParserList__init_object,
  0, // Parser
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM125) RogueParser__type_name,
  0, // Table<<String,ParseReader>>
  (void*) (ROGUEM126) RogueString_ParseReaderTable__to_String,
  (void*) (ROGUEM126) RogueString_ParseReaderTable__type_name,
  0, // Stopwatch
  (void*) (ROGUEM127) RogueStopwatch__to_String,
  (void*) (ROGUEM127) RogueStopwatch__type_name,
  0, // File
  (void*) (ROGUEM128) RogueFile__to_String,
  (void*) (ROGUEM128) RogueFile__type_name,
  0, // CmdMakeRequisite
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM129) RogueCmdMakeRequisite__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM130) RogueCmdMakeRequisite__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM131) RogueCmdMakeRequisite__requires_semicolon,
  (void*) (ROGUEM132) RogueCmdMakeRequisite__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM59) RogueCmd__trace_used_code,
  (void*) (ROGUEM56) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM133) RogueCmdMakeRequisite__init_object,
  0, // Token[]
  (void*) (ROGUEM134) RogueTokenList__to_String,
  (void*) (ROGUEM134) RogueTokenList__type_name,
  (void*) (ROGUEM135) RogueTokenList__init_object,
  0, // LineReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM136) RogueLineReader__type_name,
  (void*) (ROGUEM137) RogueLineReader__has_another,
  (void*) (ROGUEM136) RogueLineReader__read,
  0, // TypeParameter[]
  (void*) (ROGUEM138) RogueTypeParameterList__to_String,
  (void*) (ROGUEM138) RogueTypeParameterList__type_name,
  (void*) (ROGUEM139) RogueTypeParameterList__init_object,
  0, // TypeParameter
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM140) RogueTypeParameter__type_name,
  0, // Augment[]
  (void*) (ROGUEM141) RogueAugmentList__to_String,
  (void*) (ROGUEM141) RogueAugmentList__type_name,
  (void*) (ROGUEM142) RogueAugmentList__init_object,
  0, // Augment
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM143) RogueAugment__type_name,
  0, // Table<<String,TokenType>>
  (void*) (ROGUEM144) RogueString_TokenTypeTable__to_String,
  (void*) (ROGUEM144) RogueString_TokenTypeTable__type_name,
  0, // LiteralCharacterToken
  (void*) (ROGUEM145) RogueLiteralCharacterToken__to_String,
  (void*) (ROGUEM145) RogueLiteralCharacterToken__type_name,
  0,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM39) RogueToken__quoted_name,
  0,
  0,
  (void*) (ROGUEM146) RogueLiteralCharacterToken__to_Character,
  (void*) (ROGUEM41) RogueToken__to_Int32,
  (void*) (ROGUEM42) RogueToken__to_Int64,
  (void*) (ROGUEM43) RogueToken__to_Real64,
  (void*) (ROGUEM44) RogueToken__to_Type,
  0,
  (void*) (ROGUEM147) RogueLiteralCharacterToken__init_object,
  0, // LiteralInt64Token
  (void*) (ROGUEM148) RogueLiteralInt64Token__to_String,
  (void*) (ROGUEM148) RogueLiteralInt64Token__type_name,
  0,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM39) RogueToken__quoted_name,
  0,
  0,
  (void*) (ROGUEM40) RogueToken__to_Character,
  (void*) (ROGUEM149) RogueLiteralInt64Token__to_Int32,
  (void*) (ROGUEM150) RogueLiteralInt64Token__to_Int64,
  (void*) (ROGUEM151) RogueLiteralInt64Token__to_Real64,
  (void*) (ROGUEM44) RogueToken__to_Type,
  0,
  (void*) (ROGUEM152) RogueLiteralInt64Token__init_object,
  0, // LiteralInt32Token
  (void*) (ROGUEM153) RogueLiteralInt32Token__to_String,
  (void*) (ROGUEM153) RogueLiteralInt32Token__type_name,
  0,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM39) RogueToken__quoted_name,
  0,
  0,
  (void*) (ROGUEM40) RogueToken__to_Character,
  (void*) (ROGUEM154) RogueLiteralInt32Token__to_Int32,
  (void*) (ROGUEM42) RogueToken__to_Int64,
  (void*) (ROGUEM155) RogueLiteralInt32Token__to_Real64,
  (void*) (ROGUEM44) RogueToken__to_Type,
  0,
  (void*) (ROGUEM156) RogueLiteralInt32Token__init_object,
  0, // LiteralReal64Token
  (void*) (ROGUEM157) RogueLiteralReal64Token__to_String,
  (void*) (ROGUEM157) RogueLiteralReal64Token__type_name,
  0,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM39) RogueToken__quoted_name,
  0,
  0,
  (void*) (ROGUEM40) RogueToken__to_Character,
  (void*) (ROGUEM158) RogueLiteralReal64Token__to_Int32,
  (void*) (ROGUEM42) RogueToken__to_Int64,
  (void*) (ROGUEM159) RogueLiteralReal64Token__to_Real64,
  (void*) (ROGUEM44) RogueToken__to_Type,
  0,
  (void*) (ROGUEM160) RogueLiteralReal64Token__init_object,
  0, // StringDataToken
  (void*) (ROGUEM161) RogueStringDataToken__to_String,
  (void*) (ROGUEM161) RogueStringDataToken__type_name,
  0,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM161) RogueStringDataToken__quoted_name,
  0,
  0,
  (void*) (ROGUEM40) RogueToken__to_Character,
  (void*) (ROGUEM41) RogueToken__to_Int32,
  (void*) (ROGUEM42) RogueToken__to_Int64,
  (void*) (ROGUEM43) RogueToken__to_Real64,
  (void*) (ROGUEM44) RogueToken__to_Type,
  0,
  (void*) (ROGUEM162) RogueStringDataToken__init_object,
  0, // Table<<String,TypeSpecializer>>
  (void*) (ROGUEM163) RogueString_TypeSpecializerTable__to_String,
  (void*) (ROGUEM163) RogueString_TypeSpecializerTable__type_name,
  0, // TypeSpecializer
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM164) RogueTypeSpecializer__type_name,
  0, // TypeSpecializer[]
  (void*) (ROGUEM165) RogueTypeSpecializerList__to_String,
  (void*) (ROGUEM165) RogueTypeSpecializerList__type_name,
  (void*) (ROGUEM166) RogueTypeSpecializerList__init_object,
  0, // TableEntry<<String,Template>>[]
  (void*) (ROGUEM167) RogueString_TemplateTableEntryList__to_String,
  (void*) (ROGUEM167) RogueString_TemplateTableEntryList__type_name,
  (void*) (ROGUEM168) RogueString_TemplateTableEntryList__init_object,
  0, // TableEntry<<String,Template>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM169) RogueString_TemplateTableEntry__type_name,
  0, // TableEntry<<String,Augment[]>>[]
  (void*) (ROGUEM170) RogueString_AugmentListTableEntryList__to_String,
  (void*) (ROGUEM170) RogueString_AugmentListTableEntryList__type_name,
  (void*) (ROGUEM171) RogueString_AugmentListTableEntryList__init_object,
  0, // TableEntry<<String,Augment[]>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM172) RogueString_AugmentListTableEntry__type_name,
  0, // CmdLabel[]
  (void*) (ROGUEM173) RogueCmdLabelList__to_String,
  (void*) (ROGUEM173) RogueCmdLabelList__type_name,
  (void*) (ROGUEM174) RogueCmdLabelList__init_object,
  0, // Table<<String,CmdLabel>>
  (void*) (ROGUEM175) RogueString_CmdLabelTable__to_String,
  (void*) (ROGUEM175) RogueString_CmdLabelTable__type_name,
  0, // CloneArgs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM176) RogueCloneArgs__type_name,
  (void*) (ROGUEM177) RogueCloneArgs__register_label__CmdLabel,
  (void*) (ROGUEM178) RogueCloneArgs__init_object,
  0, // CloneMethodArgs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM179) RogueCloneMethodArgs__type_name,
  (void*) (ROGUEM180) RogueCloneMethodArgs__register_label__CmdLabel,
  (void*) (ROGUEM181) RogueCloneMethodArgs__init_object,
  0, // CmdAccess
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM182) RogueCmdAccess__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM183) RogueCmdAccess__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM184) RogueCmdAccess__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM185) RogueCmdAccess__resolve__Scope,
  (void*) (ROGUEM186) RogueCmdAccess__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM187) RogueCmdAccess__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM188) Rogue_CmdAccess__type,
  (void*) (ROGUEM189) RogueCmdAccess__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM190) RogueCmdAccess__trace_used_code,
  (void*) (ROGUEM191) RogueCmdAccess__update_this_type__Scope,
  (void*) (ROGUEM192) RogueCmdAccess__init_object,
  0, // CmdArgs
  (void*) (ROGUEM74) RogueCmdList__to_String,
  (void*) (ROGUEM193) RogueCmdArgs__type_name,
  (void*) (ROGUEM194) RogueCmdArgs__init_object,
  (void*) (ROGUEM194) RogueCmdArgs__init,
  (void*) (ROGUEM195) RogueCmdArgs__init__Int32,
  0, // CmdFlagArg[]
  (void*) (ROGUEM196) RogueCmdFlagArgList__to_String,
  (void*) (ROGUEM196) RogueCmdFlagArgList__type_name,
  (void*) (ROGUEM197) RogueCmdFlagArgList__init_object,
  0, // CmdFlagArg
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM198) RogueCmdFlagArg__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM199) RogueCmdFlagArg__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM52) RogueCmd__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM59) RogueCmd__trace_used_code,
  (void*) (ROGUEM56) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM200) RogueCmdFlagArg__init_object,
  0, // CmdAssign
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM201) RogueCmdAssign__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM202) RogueCmdAssign__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM203) RogueCmdAssign__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM59) RogueCmd__trace_used_code,
  (void*) (ROGUEM204) RogueCmdAssign__update_this_type__Scope,
  (void*) (ROGUEM205) RogueCmdAssign__init_object,
  0, // CmdControlStructure[]
  (void*) (ROGUEM206) RogueCmdControlStructureList__to_String,
  (void*) (ROGUEM206) RogueCmdControlStructureList__type_name,
  (void*) (ROGUEM207) RogueCmdControlStructureList__init_object,
  0, // CmdControlStructure
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM208) RogueCmdControlStructure__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM71) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM209) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM52) RogueCmd__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM90) RogueCmdStatement__trace_used_code,
  (void*) (ROGUEM91) RogueCmdStatement__update_this_type__Scope,
  (void*) (ROGUEM210) RogueCmdControlStructure__init_object,
  0,
  (void*) (ROGUEM211) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  0, // CmdLiteralThis
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM212) RogueCmdLiteralThis__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM213) RogueCmdLiteralThis__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM214) RogueCmdThisContext__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM215) RogueCmdLiteralThis__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM216) RogueCmdLiteralThis__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM217) Rogue_CmdThisContext__type,
  (void*) (ROGUEM218) RogueCmdThisContext__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM219) RogueCmdThisContext__trace_used_code,
  (void*) (ROGUEM220) RogueCmdThisContext__update_this_type__Scope,
  (void*) (ROGUEM221) RogueCmdLiteralThis__init_object,
  0, // CmdThisContext
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM222) RogueCmdThisContext__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM223) RogueCmdThisContext__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM214) RogueCmdThisContext__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM219) RogueCmdThisContext__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM224) RogueCmdThisContext__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM217) Rogue_CmdThisContext__type,
  (void*) (ROGUEM218) RogueCmdThisContext__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM219) RogueCmdThisContext__trace_used_code,
  (void*) (ROGUEM220) RogueCmdThisContext__update_this_type__Scope,
  (void*) (ROGUEM225) RogueCmdThisContext__init_object,
  0, // CmdGenericLoop
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM226) RogueCmdGenericLoop__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM227) RogueCmdGenericLoop__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM209) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM228) RogueCmdGenericLoop__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM229) RogueCmdGenericLoop__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM230) RogueCmdGenericLoop__trace_used_code,
  (void*) (ROGUEM231) RogueCmdGenericLoop__update_this_type__Scope,
  (void*) (ROGUEM232) RogueCmdGenericLoop__init_object,
  0,
  (void*) (ROGUEM211) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  0, // CmdLiteralInt32
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM233) RogueCmdLiteralInt32__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM234) RogueCmdLiteralInt32__cast_to__Type_Scope,
  (void*) (ROGUEM235) RogueCmdLiteralInt32__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM236) RogueCmdLiteral__implicit_type__Scope,
  (void*) (ROGUEM237) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM238) RogueCmdLiteralInt32__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM239) Rogue_CmdLiteralInt32__type,
  (void*) (ROGUEM240) RogueCmdLiteralInt32__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM241) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM242) RogueCmdLiteral__update_this_type__Scope,
  (void*) (ROGUEM243) RogueCmdLiteralInt32__init_object,
  0, // CmdLiteral
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM244) RogueCmdLiteral__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM71) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM236) RogueCmdLiteral__implicit_type__Scope,
  (void*) (ROGUEM237) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM52) RogueCmd__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM241) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM242) RogueCmdLiteral__update_this_type__Scope,
  (void*) (ROGUEM245) RogueCmdLiteral__init_object,
  0, // CmdCompareNE
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM246) RogueCmdCompareNE__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM247) RogueCmdCompareNE__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM248) RogueCmdCompareNE__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM249) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM250) Rogue_CmdComparison__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM254) RogueCmdCompareNE__init_object,
  0,
  (void*) (ROGUEM255) RogueCmdBinary__fn_name,
  (void*) (ROGUEM256) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM257) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM258) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM246) RogueCmdCompareNE__symbol,
  (void*) (ROGUEM255) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM260) RogueCmdCompareNE__resolve_for_reference__Scope_Type_Type_Logical,
  0, // CmdComparison
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM261) RogueCmdComparison__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM71) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM249) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM250) Rogue_CmdComparison__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM262) RogueCmdComparison__init_object,
  0,
  (void*) (ROGUEM255) RogueCmdBinary__fn_name,
  (void*) (ROGUEM256) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM257) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM258) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM255) RogueCmdBinary__symbol,
  (void*) (ROGUEM255) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM263) RogueCmdComparison__resolve_for_reference__Scope_Type_Type_Logical,
  0, // CmdBinary
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM255) RogueCmdBinary__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM71) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM249) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM264) Rogue_CmdBinary__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM265) RogueCmdBinary__init_object,
  0,
  (void*) (ROGUEM255) RogueCmdBinary__fn_name,
  (void*) (ROGUEM266) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM258) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM255) RogueCmdBinary__symbol,
  (void*) (ROGUEM255) RogueCmdBinary__cpp_symbol,
  0, // TaskArgs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM267) RogueTaskArgs__type_name,
  (void*) (ROGUEM177) RogueCloneArgs__register_label__CmdLabel,
  (void*) (ROGUEM268) RogueTaskArgs__init_object,
  0, // CmdTaskControl
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM269) RogueCmdTaskControl__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM71) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM270) RogueCmdTaskControl__requires_semicolon,
  (void*) (ROGUEM271) RogueCmdTaskControl__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM272) RogueCmdTaskControl__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM273) RogueCmdTaskControl__trace_used_code,
  (void*) (ROGUEM274) RogueCmdTaskControl__update_this_type__Scope,
  (void*) (ROGUEM275) RogueCmdTaskControl__init_object,
  0, // CmdTaskControlSection
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM276) RogueCmdTaskControlSection__type_name,
  0, // TableEntry<<String,Method[]>>[]
  (void*) (ROGUEM277) RogueString_MethodListTableEntryList__to_String,
  (void*) (ROGUEM277) RogueString_MethodListTableEntryList__type_name,
  (void*) (ROGUEM278) RogueString_MethodListTableEntryList__init_object,
  0, // TableEntry<<String,Method[]>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM279) RogueString_MethodListTableEntry__type_name,
  0, // Definition[]
  (void*) (ROGUEM280) RogueDefinitionList__to_String,
  (void*) (ROGUEM280) RogueDefinitionList__type_name,
  (void*) (ROGUEM281) RogueDefinitionList__init_object,
  0, // Definition
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM282) RogueDefinition__type_name,
  0, // Table<<String,Definition>>
  (void*) (ROGUEM283) RogueString_DefinitionTable__to_String,
  (void*) (ROGUEM283) RogueString_DefinitionTable__type_name,
  0, // NativeProperty[]
  (void*) (ROGUEM284) RogueNativePropertyList__to_String,
  (void*) (ROGUEM284) RogueNativePropertyList__type_name,
  (void*) (ROGUEM285) RogueNativePropertyList__init_object,
  0, // NativeProperty
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM286) RogueNativeProperty__type_name,
  0, // Table<<String,Property>>
  (void*) (ROGUEM287) RogueString_PropertyTable__to_String,
  (void*) (ROGUEM287) RogueString_PropertyTable__type_name,
  0, // CmdLiteralNull
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM288) RogueCmdLiteralNull__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM289) RogueCmdLiteralNull__cast_to__Type_Scope,
  (void*) (ROGUEM290) RogueCmdLiteralNull__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM236) RogueCmdLiteral__implicit_type__Scope,
  (void*) (ROGUEM237) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM291) RogueCmdLiteralNull__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM292) Rogue_CmdLiteralNull__type,
  (void*) (ROGUEM293) RogueCmdLiteralNull__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM241) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM242) RogueCmdLiteral__update_this_type__Scope,
  (void*) (ROGUEM294) RogueCmdLiteralNull__init_object,
  0, // CmdCreateCompound
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM295) RogueCmdCreateCompound__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM296) RogueCmdCreateCompound__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM297) RogueCmdCreateCompound__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM298) Rogue_CmdCreateCompound__type,
  (void*) (ROGUEM299) RogueCmdCreateCompound__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM300) RogueCmdCreateCompound__trace_used_code,
  (void*) (ROGUEM301) RogueCmdCreateCompound__update_this_type__Scope,
  (void*) (ROGUEM302) RogueCmdCreateCompound__init_object,
  0, // CmdLiteralLogical
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM303) RogueCmdLiteralLogical__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM304) RogueCmdLiteralLogical__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM236) RogueCmdLiteral__implicit_type__Scope,
  (void*) (ROGUEM237) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM305) RogueCmdLiteralLogical__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM306) Rogue_CmdLiteralLogical__type,
  (void*) (ROGUEM307) RogueCmdLiteralLogical__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM241) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM242) RogueCmdLiteral__update_this_type__Scope,
  (void*) (ROGUEM308) RogueCmdLiteralLogical__init_object,
  0, // CmdLiteralString
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM309) RogueCmdLiteralString__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM310) RogueCmdLiteralString__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM236) RogueCmdLiteral__implicit_type__Scope,
  (void*) (ROGUEM237) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM311) RogueCmdLiteralString__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM312) Rogue_CmdLiteralString__type,
  (void*) (ROGUEM313) RogueCmdLiteralString__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM314) RogueCmdLiteralString__trace_used_code,
  (void*) (ROGUEM315) RogueCmdLiteralString__update_this_type__Scope,
  (void*) (ROGUEM316) RogueCmdLiteralString__init_object,
  0, // CmdWriteGlobal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM317) RogueCmdWriteGlobal__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM318) RogueCmdWriteGlobal__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM319) RogueCmdWriteGlobal__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM320) RogueCmdWriteGlobal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM321) RogueCmdWriteGlobal__trace_used_code,
  (void*) (ROGUEM322) RogueCmdWriteGlobal__update_this_type__Scope,
  (void*) (ROGUEM323) RogueCmdWriteGlobal__init_object,
  0, // CmdWriteProperty
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM324) RogueCmdWriteProperty__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM325) RogueCmdWriteProperty__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM326) RogueCmdWriteProperty__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM327) RogueCmdWriteProperty__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM328) RogueCmdWriteProperty__trace_used_code,
  (void*) (ROGUEM329) RogueCmdWriteProperty__update_this_type__Scope,
  (void*) (ROGUEM330) RogueCmdWriteProperty__init_object,
  0, // TableEntry<<String,Type>>[]
  (void*) (ROGUEM331) RogueString_TypeTableEntryList__to_String,
  (void*) (ROGUEM331) RogueString_TypeTableEntryList__type_name,
  (void*) (ROGUEM332) RogueString_TypeTableEntryList__init_object,
  0, // TableEntry<<String,Type>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM333) RogueString_TypeTableEntry__type_name,
  0, // TableEntry<<String,Int32>>[]
  (void*) (ROGUEM334) RogueString_Int32TableEntryList__to_String,
  (void*) (ROGUEM334) RogueString_Int32TableEntryList__type_name,
  (void*) (ROGUEM335) RogueString_Int32TableEntryList__init_object,
  0, // TableEntry<<String,String[]>>[]
  (void*) (ROGUEM336) RogueString_StringListTableEntryList__to_String,
  (void*) (ROGUEM336) RogueString_StringListTableEntryList__type_name,
  (void*) (ROGUEM337) RogueString_StringListTableEntryList__init_object,
  0, // TableEntry<<String,String[]>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM338) RogueString_StringListTableEntry__type_name,
  0, // TableEntry<<Int32,Template>>[]
  (void*) (ROGUEM339) RogueInt32_TemplateTableEntryList__to_String,
  (void*) (ROGUEM339) RogueInt32_TemplateTableEntryList__type_name,
  (void*) (ROGUEM340) RogueInt32_TemplateTableEntryList__init_object,
  0, // TableEntry<<Int32,Template>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM341) RogueInt32_TemplateTableEntry__type_name,
  0, // CmdCastToType
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM342) RogueCmdCastToType__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM343) RogueCmdCastToType__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM344) RogueCmdCastToType__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM345) Rogue_CmdTypeOperator__type,
  (void*) (ROGUEM346) RogueCmdCastToType__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM347) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM348) RogueCmdTypeOperator__update_this_type__Scope,
  (void*) (ROGUEM349) RogueCmdCastToType__init_object,
  0, // CmdTypeOperator
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM350) RogueCmdTypeOperator__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM71) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM52) RogueCmd__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM345) Rogue_CmdTypeOperator__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM347) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM348) RogueCmdTypeOperator__update_this_type__Scope,
  (void*) (ROGUEM351) RogueCmdTypeOperator__init_object,
  0, // CmdLogicalize
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM352) RogueCmdLogicalize__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM353) RogueCmdLogicalize__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM354) RogueCmdLogicalize__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM355) Rogue_CmdLogicalize__type,
  (void*) (ROGUEM356) RogueCmdUnary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM357) RogueCmdUnary__trace_used_code,
  (void*) (ROGUEM358) RogueCmdUnary__update_this_type__Scope,
  (void*) (ROGUEM359) RogueCmdLogicalize__init_object,
  0,
  (void*) (ROGUEM352) RogueCmdLogicalize__prefix_symbol,
  (void*) (ROGUEM352) RogueCmdLogicalize__fn_name,
  (void*) (ROGUEM354) RogueCmdLogicalize__resolve_for_literal_operand__Scope,
  0,
  (void*) (ROGUEM352) RogueCmdLogicalize__suffix_symbol,
  (void*) (ROGUEM352) RogueCmdLogicalize__cpp_prefix_symbol,
  (void*) (ROGUEM352) RogueCmdLogicalize__cpp_suffix_symbol,
  0, // CmdUnary
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM360) RogueCmdUnary__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM71) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM361) RogueCmdUnary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM362) Rogue_CmdUnary__type,
  (void*) (ROGUEM356) RogueCmdUnary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM357) RogueCmdUnary__trace_used_code,
  (void*) (ROGUEM358) RogueCmdUnary__update_this_type__Scope,
  (void*) (ROGUEM363) RogueCmdUnary__init_object,
  0,
  (void*) (ROGUEM360) RogueCmdUnary__prefix_symbol,
  (void*) (ROGUEM360) RogueCmdUnary__fn_name,
  (void*) (ROGUEM361) RogueCmdUnary__resolve_for_literal_operand__Scope,
  0,
  (void*) (ROGUEM360) RogueCmdUnary__suffix_symbol,
  (void*) (ROGUEM360) RogueCmdUnary__cpp_prefix_symbol,
  (void*) (ROGUEM360) RogueCmdUnary__cpp_suffix_symbol,
  0, // CmdReadSingleton
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM364) RogueCmdReadSingleton__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM365) RogueCmdReadSingleton__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM366) RogueCmdReadSingleton__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM367) RogueCmdReadSingleton__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM368) Rogue_CmdReadSingleton__type,
  (void*) (ROGUEM369) RogueCmdReadSingleton__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM366) RogueCmdReadSingleton__trace_used_code,
  (void*) (ROGUEM370) RogueCmdReadSingleton__update_this_type__Scope,
  (void*) (ROGUEM371) RogueCmdReadSingleton__init_object,
  0, // CmdCallInlineNativeRoutine
  (void*) (ROGUEM372) RogueCmdCallInlineNative__to_String,
  (void*) (ROGUEM373) RogueCmdCallInlineNativeRoutine__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM374) RogueCmdCallInlineNativeRoutine__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM375) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM376) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM377) RogueCmdCallInlineNative__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM378) Rogue_CmdCallInlineNativeRoutine__type,
  (void*) (ROGUEM379) RogueCmdCallInlineNative__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM380) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM381) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM382) RogueCmdCallInlineNativeRoutine__init_object,
  0,
  (void*) (ROGUEM383) RogueCmdCallInlineNative__print_this__CPPWriter,
  0, // CmdCallInlineNative
  (void*) (ROGUEM372) RogueCmdCallInlineNative__to_String,
  (void*) (ROGUEM372) RogueCmdCallInlineNative__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM71) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM375) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM376) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM377) RogueCmdCallInlineNative__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM375) Rogue_CmdCall__type,
  (void*) (ROGUEM379) RogueCmdCallInlineNative__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM380) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM381) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM384) RogueCmdCallInlineNative__init_object,
  0,
  (void*) (ROGUEM383) RogueCmdCallInlineNative__print_this__CPPWriter,
  0, // CmdCall
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM385) RogueCmdCall__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM71) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM375) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM376) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM375) Rogue_CmdCall__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM380) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM381) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM386) RogueCmdCall__init_object,
  0, // CmdCallNativeRoutine
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM387) RogueCmdCallNativeRoutine__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM388) RogueCmdCallNativeRoutine__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM375) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM376) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM375) Rogue_CmdCall__type,
  (void*) (ROGUEM389) RogueCmdCallNativeRoutine__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM380) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM381) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM390) RogueCmdCallNativeRoutine__init_object,
  0, // MacroArgs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM391) RogueMacroArgs__type_name,
  (void*) (ROGUEM177) RogueCloneArgs__register_label__CmdLabel,
  (void*) (ROGUEM392) RogueMacroArgs__init_object,
  0, // CmdInlineNative
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM393) RogueCmdInlineNative__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM394) RogueCmdInlineNative__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM395) RogueCmdInlineNative__requires_semicolon,
  (void*) (ROGUEM396) RogueCmdInlineNative__resolve__Scope,
  (void*) (ROGUEM397) RogueCmdInlineNative__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM398) RogueCmdInlineNative__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM399) RogueCmdInlineNative__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM400) Rogue_CmdInlineNative__type,
  (void*) (ROGUEM401) RogueCmdInlineNative__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM402) RogueCmdInlineNative__trace_used_code,
  (void*) (ROGUEM403) RogueCmdInlineNative__update_this_type__Scope,
  (void*) (ROGUEM404) RogueCmdInlineNative__init_object,
  0, // CmdCallRoutine
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM405) RogueCmdCallRoutine__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM406) RogueCmdCallRoutine__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM375) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM376) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM375) Rogue_CmdCall__type,
  (void*) (ROGUEM407) RogueCmdCallRoutine__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM380) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM381) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM408) RogueCmdCallRoutine__init_object,
  0, // CmdReadArrayCount
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM409) RogueCmdReadArrayCount__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM410) RogueCmdReadArrayCount__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM411) RogueCmdReadArrayCount__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM412) Rogue_CmdReadArrayCount__type,
  (void*) (ROGUEM413) RogueCmdReadArrayCount__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM414) RogueCmdReadArrayCount__trace_used_code,
  (void*) (ROGUEM415) RogueCmdReadArrayCount__update_this_type__Scope,
  (void*) (ROGUEM416) RogueCmdReadArrayCount__init_object,
  0, // CmdCallInlineNativeMethod
  (void*) (ROGUEM372) RogueCmdCallInlineNative__to_String,
  (void*) (ROGUEM417) RogueCmdCallInlineNativeMethod__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM418) RogueCmdCallInlineNativeMethod__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM375) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM376) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM377) RogueCmdCallInlineNative__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM419) Rogue_CmdCallInlineNativeMethod__type,
  (void*) (ROGUEM379) RogueCmdCallInlineNative__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM380) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM381) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM420) RogueCmdCallInlineNativeMethod__init_object,
  0,
  (void*) (ROGUEM421) RogueCmdCallInlineNativeMethod__print_this__CPPWriter,
  0, // CmdCallNativeMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM422) RogueCmdCallNativeMethod__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM423) RogueCmdCallNativeMethod__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM375) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM376) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM375) Rogue_CmdCall__type,
  (void*) (ROGUEM424) RogueCmdCallNativeMethod__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM380) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM381) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM425) RogueCmdCallNativeMethod__init_object,
  0, // CmdCallAspectMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM426) RogueCmdCallAspectMethod__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM427) RogueCmdCallAspectMethod__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM375) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM376) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM375) Rogue_CmdCall__type,
  (void*) (ROGUEM428) RogueCmdCallAspectMethod__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM380) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM381) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM429) RogueCmdCallAspectMethod__init_object,
  0, // CmdCallDynamicMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM430) RogueCmdCallDynamicMethod__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM431) RogueCmdCallMethod__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM432) RogueCmdCallDynamicMethod__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM375) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM376) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM375) Rogue_CmdCall__type,
  (void*) (ROGUEM433) RogueCmdCallDynamicMethod__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM434) RogueCmdCallDynamicMethod__trace_used_code,
  (void*) (ROGUEM381) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM435) RogueCmdCallDynamicMethod__init_object,
  0, // CmdCallMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM436) RogueCmdCallMethod__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM431) RogueCmdCallMethod__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM71) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM375) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM376) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM375) Rogue_CmdCall__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM380) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM381) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM437) RogueCmdCallMethod__init_object,
  0, // CandidateMethods
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM438) RogueCandidateMethods__type_name,
  0, // CmdCreateFunction
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM439) RogueCmdCreateFunction__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM440) RogueCmdCreateFunction__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM441) RogueCmdCreateFunction__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM442) RogueCmdCreateFunction__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM443) Rogue_CmdCreateFunction__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM59) RogueCmd__trace_used_code,
  (void*) (ROGUEM56) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM444) RogueCmdCreateFunction__init_object,
  0, // FnParam[]
  (void*) (ROGUEM445) RogueFnParamList__to_String,
  (void*) (ROGUEM445) RogueFnParamList__type_name,
  (void*) (ROGUEM446) RogueFnParamList__init_object,
  0, // FnParam
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM447) RogueFnParam__type_name,
  0, // CmdReadLocal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM448) RogueCmdReadLocal__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM449) RogueCmdReadLocal__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM450) RogueCmdReadLocal__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM451) RogueCmdReadLocal__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM452) Rogue_CmdReadLocal__type,
  (void*) (ROGUEM453) RogueCmdReadLocal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM454) RogueCmdReadLocal__trace_used_code,
  (void*) (ROGUEM455) RogueCmdReadLocal__update_this_type__Scope,
  (void*) (ROGUEM456) RogueCmdReadLocal__init_object,
  0, // TableEntry<<String,Method>>[]
  (void*) (ROGUEM457) RogueString_MethodTableEntryList__to_String,
  (void*) (ROGUEM457) RogueString_MethodTableEntryList__type_name,
  (void*) (ROGUEM458) RogueString_MethodTableEntryList__init_object,
  0, // TableEntry<<String,Method>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM459) RogueString_MethodTableEntry__type_name,
  0, // TableEntry<<String,Logical>>[]
  (void*) (ROGUEM460) RogueString_LogicalTableEntryList__to_String,
  (void*) (ROGUEM460) RogueString_LogicalTableEntryList__type_name,
  (void*) (ROGUEM461) RogueString_LogicalTableEntryList__init_object,
  0, // TableEntry<<String,Logical>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM462) RogueString_LogicalTableEntry__type_name,
  0, // TokenReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM463) RogueTokenReader__type_name,
  0, // Table<<String,String>>
  (void*) (ROGUEM464) RogueString_StringTable__to_String,
  (void*) (ROGUEM464) RogueString_StringTable__type_name,
  0, // Tokenizer
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM465) RogueTokenizer__type_name,
  0, // ParseReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM466) RogueParseReader__type_name,
  (void*) (ROGUEM467) RogueParseReader__has_another,
  (void*) (ROGUEM468) RogueParseReader__peek,
  (void*) (ROGUEM468) RogueParseReader__read,
  0, // Preprocessor
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM469) RoguePreprocessor__type_name,
  0, // EOLToken
  (void*) (ROGUEM470) RogueEOLToken__to_String,
  (void*) (ROGUEM470) RogueEOLToken__type_name,
  0,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM39) RogueToken__quoted_name,
  0,
  0,
  (void*) (ROGUEM40) RogueToken__to_Character,
  (void*) (ROGUEM41) RogueToken__to_Int32,
  (void*) (ROGUEM42) RogueToken__to_Int64,
  (void*) (ROGUEM43) RogueToken__to_Real64,
  (void*) (ROGUEM44) RogueToken__to_Type,
  0,
  (void*) (ROGUEM471) RogueEOLToken__init_object,
  0, // CmdAdd
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM472) RogueCmdAdd__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM473) RogueCmdAdd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM474) RogueCmdAdd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM249) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM264) Rogue_CmdBinary__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM475) RogueCmdAdd__init_object,
  0,
  (void*) (ROGUEM472) RogueCmdAdd__fn_name,
  (void*) (ROGUEM266) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM258) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM476) RogueCmdAdd__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM472) RogueCmdAdd__symbol,
  (void*) (ROGUEM255) RogueCmdBinary__cpp_symbol,
  0, // CmdNativeHeader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM477) RogueCmdNativeHeader__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM478) RogueCmdNativeHeader__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM479) RogueCmdNativeHeader__requires_semicolon,
  (void*) (ROGUEM480) RogueCmdNativeHeader__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM59) RogueCmd__trace_used_code,
  (void*) (ROGUEM481) RogueCmdNativeHeader__update_this_type__Scope,
  (void*) (ROGUEM482) RogueCmdNativeHeader__init_object,
  0, // CmdNativeCode
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM483) RogueCmdNativeCode__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM484) RogueCmdNativeCode__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM485) RogueCmdNativeCode__requires_semicolon,
  (void*) (ROGUEM486) RogueCmdNativeCode__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM59) RogueCmd__trace_used_code,
  (void*) (ROGUEM487) RogueCmdNativeCode__update_this_type__Scope,
  (void*) (ROGUEM488) RogueCmdNativeCode__init_object,
  0, // CmdIf
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM489) RogueCmdIf__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM490) RogueCmdIf__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM209) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM491) RogueCmdIf__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM492) RogueCmdIf__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM493) RogueCmdIf__trace_used_code,
  (void*) (ROGUEM494) RogueCmdIf__update_this_type__Scope,
  (void*) (ROGUEM495) RogueCmdIf__init_object,
  0,
  (void*) (ROGUEM211) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  0, // CmdWhich
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM496) RogueCmdWhich__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM497) RogueCmdWhich__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM209) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM498) RogueCmdWhich__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM90) RogueCmdStatement__trace_used_code,
  (void*) (ROGUEM499) RogueCmdWhich__update_this_type__Scope,
  (void*) (ROGUEM500) RogueCmdWhich__init_object,
  0,
  (void*) (ROGUEM211) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  0, // CmdContingent
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM501) RogueCmdContingent__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM502) RogueCmdContingent__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM209) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM503) RogueCmdContingent__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM504) RogueCmdContingent__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM505) RogueCmdContingent__trace_used_code,
  (void*) (ROGUEM506) RogueCmdContingent__update_this_type__Scope,
  (void*) (ROGUEM507) RogueCmdContingent__init_object,
  0,
  (void*) (ROGUEM508) RogueCmdContingent__set_control_logic__CmdControlStructure,
  0, // CmdTry
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM509) RogueCmdTry__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM510) RogueCmdTry__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM209) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM511) RogueCmdTry__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM512) RogueCmdTry__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM513) RogueCmdTry__trace_used_code,
  (void*) (ROGUEM514) RogueCmdTry__update_this_type__Scope,
  (void*) (ROGUEM515) RogueCmdTry__init_object,
  0,
  (void*) (ROGUEM211) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  0, // CmdAwait
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM516) RogueCmdAwait__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM517) RogueCmdAwait__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM518) RogueCmdAwait__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM59) RogueCmd__trace_used_code,
  (void*) (ROGUEM56) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM519) RogueCmdAwait__init_object,
  0, // CmdYield
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM520) RogueCmdYield__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM521) RogueCmdYield__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM522) RogueCmdYield__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM59) RogueCmd__trace_used_code,
  (void*) (ROGUEM56) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM523) RogueCmdYield__init_object,
  0, // CmdThrow
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM524) RogueCmdThrow__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM525) RogueCmdThrow__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM526) RogueCmdThrow__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM527) RogueCmdThrow__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM528) RogueCmdThrow__trace_used_code,
  (void*) (ROGUEM529) RogueCmdThrow__update_this_type__Scope,
  (void*) (ROGUEM530) RogueCmdThrow__init_object,
  0, // CmdFormattedString
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM531) RogueCmdFormattedString__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM532) RogueCmdFormattedString__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM533) RogueCmdFormattedString__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM534) RogueCmdFormattedString__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM535) Rogue_CmdFormattedString__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM59) RogueCmd__trace_used_code,
  (void*) (ROGUEM536) RogueCmdFormattedString__update_this_type__Scope,
  (void*) (ROGUEM537) RogueCmdFormattedString__init_object,
  0, // CmdTrace
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM538) RogueCmdTrace__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM539) RogueCmdTrace__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM540) RogueCmdTrace__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM541) RogueCmdTrace__trace_used_code,
  (void*) (ROGUEM542) RogueCmdTrace__update_this_type__Scope,
  (void*) (ROGUEM543) RogueCmdTrace__init_object,
  0, // CmdEscape
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM544) RogueCmdEscape__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM545) RogueCmdEscape__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM546) RogueCmdEscape__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM547) RogueCmdEscape__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM548) RogueCmdEscape__trace_used_code,
  (void*) (ROGUEM549) RogueCmdEscape__update_this_type__Scope,
  (void*) (ROGUEM550) RogueCmdEscape__init_object,
  0, // CmdNextIteration
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM551) RogueCmdNextIteration__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM552) RogueCmdNextIteration__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM553) RogueCmdNextIteration__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM554) RogueCmdNextIteration__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM555) RogueCmdNextIteration__trace_used_code,
  (void*) (ROGUEM556) RogueCmdNextIteration__update_this_type__Scope,
  (void*) (ROGUEM557) RogueCmdNextIteration__init_object,
  0, // CmdNecessary
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM558) RogueCmdNecessary__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM559) RogueCmdNecessary__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM560) RogueCmdNecessary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM561) RogueCmdNecessary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM562) RogueCmdNecessary__trace_used_code,
  (void*) (ROGUEM563) RogueCmdNecessary__update_this_type__Scope,
  (void*) (ROGUEM564) RogueCmdNecessary__init_object,
  0, // CmdSufficient
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM565) RogueCmdSufficient__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM566) RogueCmdSufficient__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM567) RogueCmdSufficient__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM568) RogueCmdSufficient__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM569) RogueCmdSufficient__trace_used_code,
  (void*) (ROGUEM570) RogueCmdSufficient__update_this_type__Scope,
  (void*) (ROGUEM571) RogueCmdSufficient__init_object,
  0, // CmdAdjust
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM572) RogueCmdAdjust__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM71) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM573) RogueCmdAdjust__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM59) RogueCmd__trace_used_code,
  (void*) (ROGUEM56) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM574) RogueCmdAdjust__init_object,
  0, // CmdModifyAndAssign
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM575) RogueCmdModifyAndAssign__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM576) RogueCmdModifyAndAssign__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM577) RogueCmdModifyAndAssign__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM59) RogueCmd__trace_used_code,
  (void*) (ROGUEM56) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM578) RogueCmdModifyAndAssign__init_object,
  0, // CmdWhichCase[]
  (void*) (ROGUEM579) RogueCmdWhichCaseList__to_String,
  (void*) (ROGUEM579) RogueCmdWhichCaseList__type_name,
  (void*) (ROGUEM580) RogueCmdWhichCaseList__init_object,
  0, // CmdWhichCase
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM581) RogueCmdWhichCase__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM582) RogueCmdWhichCase__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM52) RogueCmd__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM583) RogueCmdWhichCase__trace_used_code,
  (void*) (ROGUEM584) RogueCmdWhichCase__update_this_type__Scope,
  (void*) (ROGUEM585) RogueCmdWhichCase__init_object,
  0, // CmdCatch[]
  (void*) (ROGUEM586) RogueCmdCatchList__to_String,
  (void*) (ROGUEM586) RogueCmdCatchList__type_name,
  (void*) (ROGUEM587) RogueCmdCatchList__init_object,
  0, // CmdCatch
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM588) RogueCmdCatch__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM589) RogueCmdCatch__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM590) RogueCmdCatch__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM591) RogueCmdCatch__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM592) RogueCmdCatch__trace_used_code,
  (void*) (ROGUEM593) RogueCmdCatch__update_this_type__Scope,
  (void*) (ROGUEM594) RogueCmdCatch__init_object,
  0, // CmdLocalDeclaration
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM595) RogueCmdLocalDeclaration__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM596) RogueCmdLocalDeclaration__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM597) RogueCmdLocalDeclaration__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM598) RogueCmdLocalDeclaration__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM599) RogueCmdLocalDeclaration__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM600) RogueCmdLocalDeclaration__trace_used_code,
  (void*) (ROGUEM597) RogueCmdLocalDeclaration__update_this_type__Scope,
  (void*) (ROGUEM601) RogueCmdLocalDeclaration__init_object,
  0, // CmdAdjustLocal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM602) RogueCmdAdjustLocal__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM603) RogueCmdAdjustLocal__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM604) RogueCmdAdjustLocal__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM605) Rogue_CmdAdjustLocal__type,
  (void*) (ROGUEM606) RogueCmdAdjustLocal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM607) RogueCmdAdjustLocal__trace_used_code,
  (void*) (ROGUEM608) RogueCmdAdjustLocal__update_this_type__Scope,
  (void*) (ROGUEM609) RogueCmdAdjustLocal__init_object,
  0, // CmdCompareLE
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM610) RogueCmdCompareLE__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM611) RogueCmdCompareLE__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM612) RogueCmdCompareLE__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM249) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM250) Rogue_CmdComparison__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM613) RogueCmdCompareLE__init_object,
  0,
  (void*) (ROGUEM255) RogueCmdBinary__fn_name,
  (void*) (ROGUEM256) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM257) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM258) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM610) RogueCmdCompareLE__symbol,
  (void*) (ROGUEM255) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM614) RogueCmdCompareLE__resolve_for_reference__Scope_Type_Type_Logical,
  0, // CmdRange
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM615) RogueCmdRange__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM71) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM616) RogueCmdRange__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM617) RogueCmdRange__trace_used_code,
  (void*) (ROGUEM618) RogueCmdRange__update_this_type__Scope,
  (void*) (ROGUEM619) RogueCmdRange__init_object,
  0,
  (void*) (ROGUEM620) RogueCmdRange__default_step_size,
  0, // CmdModifyAndAssignLocal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM621) RogueCmdModifyAndAssignLocal__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM622) RogueCmdModifyAndAssignLocal__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM623) RogueCmdModifyAndAssignLocal__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM624) Rogue_CmdModifyAndAssignLocal__type,
  (void*) (ROGUEM625) RogueCmdModifyAndAssignLocal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM626) RogueCmdModifyAndAssignLocal__trace_used_code,
  (void*) (ROGUEM627) RogueCmdModifyAndAssignLocal__update_this_type__Scope,
  (void*) (ROGUEM628) RogueCmdModifyAndAssignLocal__init_object,
  0, // CmdResolvedModifyAndAssign
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM629) RogueCmdResolvedModifyAndAssign__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM71) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM52) RogueCmd__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM59) RogueCmd__trace_used_code,
  (void*) (ROGUEM56) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM630) RogueCmdResolvedModifyAndAssign__init_object,
  0, // CmdRangeUpTo
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM631) RogueCmdRangeUpTo__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM632) RogueCmdRangeUpTo__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM616) RogueCmdRange__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM617) RogueCmdRange__trace_used_code,
  (void*) (ROGUEM618) RogueCmdRange__update_this_type__Scope,
  (void*) (ROGUEM633) RogueCmdRangeUpTo__init_object,
  0,
  (void*) (ROGUEM620) RogueCmdRange__default_step_size,
  0, // CmdCompareGE
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM634) RogueCmdCompareGE__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM635) RogueCmdCompareGE__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM636) RogueCmdCompareGE__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM249) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM250) Rogue_CmdComparison__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM637) RogueCmdCompareGE__init_object,
  0,
  (void*) (ROGUEM255) RogueCmdBinary__fn_name,
  (void*) (ROGUEM256) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM257) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM258) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM634) RogueCmdCompareGE__symbol,
  (void*) (ROGUEM255) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM638) RogueCmdCompareGE__resolve_for_reference__Scope_Type_Type_Logical,
  0, // CmdForEach
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM639) RogueCmdForEach__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM640) RogueCmdForEach__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM209) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM641) RogueCmdForEach__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM642) RogueCmdForEach__trace_used_code,
  (void*) (ROGUEM643) RogueCmdForEach__update_this_type__Scope,
  (void*) (ROGUEM644) RogueCmdForEach__init_object,
  0,
  (void*) (ROGUEM211) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  0, // CmdRangeDownTo
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM645) RogueCmdRangeDownTo__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM646) RogueCmdRangeDownTo__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM616) RogueCmdRange__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM617) RogueCmdRange__trace_used_code,
  (void*) (ROGUEM618) RogueCmdRange__update_this_type__Scope,
  (void*) (ROGUEM647) RogueCmdRangeDownTo__init_object,
  0,
  (void*) (ROGUEM648) RogueCmdRangeDownTo__default_step_size,
  0, // CmdLogicalXor
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM649) RogueCmdLogicalXor__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM650) RogueCmdLogicalXor__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM651) RogueCmdBinaryLogical__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM652) Rogue_CmdBinaryLogical__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM653) RogueCmdLogicalXor__init_object,
  0,
  (void*) (ROGUEM255) RogueCmdBinary__fn_name,
  (void*) (ROGUEM266) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM258) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM654) RogueCmdBinaryLogical__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM649) RogueCmdLogicalXor__symbol,
  (void*) (ROGUEM649) RogueCmdLogicalXor__cpp_symbol,
  (void*) (ROGUEM655) RogueCmdLogicalXor__combine_literal_operands__Logical_Logical,
  0, // CmdBinaryLogical
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM656) RogueCmdBinaryLogical__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM71) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM651) RogueCmdBinaryLogical__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM652) Rogue_CmdBinaryLogical__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM657) RogueCmdBinaryLogical__init_object,
  0,
  (void*) (ROGUEM255) RogueCmdBinary__fn_name,
  (void*) (ROGUEM266) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM258) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM654) RogueCmdBinaryLogical__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM255) RogueCmdBinary__symbol,
  (void*) (ROGUEM255) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM658) RogueCmdBinaryLogical__combine_literal_operands__Logical_Logical,
  0, // CmdLogicalOr
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM659) RogueCmdLogicalOr__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM660) RogueCmdLogicalOr__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM651) RogueCmdBinaryLogical__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM652) Rogue_CmdBinaryLogical__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM661) RogueCmdLogicalOr__init_object,
  0,
  (void*) (ROGUEM255) RogueCmdBinary__fn_name,
  (void*) (ROGUEM266) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM258) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM654) RogueCmdBinaryLogical__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM659) RogueCmdLogicalOr__symbol,
  (void*) (ROGUEM659) RogueCmdLogicalOr__cpp_symbol,
  (void*) (ROGUEM662) RogueCmdLogicalOr__combine_literal_operands__Logical_Logical,
  0, // CmdLogicalAnd
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM663) RogueCmdLogicalAnd__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM664) RogueCmdLogicalAnd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM651) RogueCmdBinaryLogical__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM652) Rogue_CmdBinaryLogical__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM665) RogueCmdLogicalAnd__init_object,
  0,
  (void*) (ROGUEM255) RogueCmdBinary__fn_name,
  (void*) (ROGUEM266) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM258) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM654) RogueCmdBinaryLogical__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM663) RogueCmdLogicalAnd__symbol,
  (void*) (ROGUEM663) RogueCmdLogicalAnd__cpp_symbol,
  (void*) (ROGUEM666) RogueCmdLogicalAnd__combine_literal_operands__Logical_Logical,
  0, // CmdCompareEQ
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM667) RogueCmdCompareEQ__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM668) RogueCmdCompareEQ__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM669) RogueCmdCompareEQ__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM249) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM250) Rogue_CmdComparison__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM670) RogueCmdCompareEQ__init_object,
  0,
  (void*) (ROGUEM255) RogueCmdBinary__fn_name,
  (void*) (ROGUEM671) RogueCmdCompareEQ__requires_parens,
  (void*) (ROGUEM257) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM258) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM667) RogueCmdCompareEQ__symbol,
  (void*) (ROGUEM255) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM672) RogueCmdCompareEQ__resolve_for_reference__Scope_Type_Type_Logical,
  0, // CmdCompareIs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM673) RogueCmdCompareIs__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM674) RogueCmdCompareIs__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM249) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM250) Rogue_CmdComparison__type,
  (void*) (ROGUEM675) RogueCmdCompareIs__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM676) RogueCmdCompareIs__init_object,
  0,
  (void*) (ROGUEM255) RogueCmdBinary__fn_name,
  (void*) (ROGUEM256) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM677) RogueCmdCompareIs__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM258) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM673) RogueCmdCompareIs__symbol,
  (void*) (ROGUEM673) RogueCmdCompareIs__cpp_symbol,
  (void*) (ROGUEM263) RogueCmdComparison__resolve_for_reference__Scope_Type_Type_Logical,
  0, // CmdCompareIsNot
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM678) RogueCmdCompareIsNot__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM679) RogueCmdCompareIsNot__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM249) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM250) Rogue_CmdComparison__type,
  (void*) (ROGUEM680) RogueCmdCompareIsNot__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM681) RogueCmdCompareIsNot__init_object,
  0,
  (void*) (ROGUEM255) RogueCmdBinary__fn_name,
  (void*) (ROGUEM256) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM682) RogueCmdCompareIsNot__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM258) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM678) RogueCmdCompareIsNot__symbol,
  (void*) (ROGUEM678) RogueCmdCompareIsNot__cpp_symbol,
  (void*) (ROGUEM263) RogueCmdComparison__resolve_for_reference__Scope_Type_Type_Logical,
  0, // CmdCompareLT
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM683) RogueCmdCompareLT__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM684) RogueCmdCompareLT__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM685) RogueCmdCompareLT__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM249) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM250) Rogue_CmdComparison__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM686) RogueCmdCompareLT__init_object,
  0,
  (void*) (ROGUEM255) RogueCmdBinary__fn_name,
  (void*) (ROGUEM256) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM257) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM258) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM683) RogueCmdCompareLT__symbol,
  (void*) (ROGUEM255) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM687) RogueCmdCompareLT__resolve_for_reference__Scope_Type_Type_Logical,
  0, // CmdCompareGT
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM688) RogueCmdCompareGT__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM689) RogueCmdCompareGT__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM690) RogueCmdCompareGT__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM249) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM250) Rogue_CmdComparison__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM691) RogueCmdCompareGT__init_object,
  0,
  (void*) (ROGUEM255) RogueCmdBinary__fn_name,
  (void*) (ROGUEM256) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM257) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM258) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM688) RogueCmdCompareGT__symbol,
  (void*) (ROGUEM255) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM692) RogueCmdCompareGT__resolve_for_reference__Scope_Type_Type_Logical,
  0, // CmdInstanceOf
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM693) RogueCmdInstanceOf__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM694) RogueCmdInstanceOf__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM695) RogueCmdInstanceOf__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM696) Rogue_CmdInstanceOf__type,
  (void*) (ROGUEM697) RogueCmdInstanceOf__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM347) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM348) RogueCmdTypeOperator__update_this_type__Scope,
  (void*) (ROGUEM698) RogueCmdInstanceOf__init_object,
  0, // CmdLogicalNot
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM699) RogueCmdLogicalNot__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM700) RogueCmdLogicalNot__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM701) RogueCmdLogicalNot__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM702) Rogue_CmdLogicalNot__type,
  (void*) (ROGUEM356) RogueCmdUnary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM357) RogueCmdUnary__trace_used_code,
  (void*) (ROGUEM358) RogueCmdUnary__update_this_type__Scope,
  (void*) (ROGUEM703) RogueCmdLogicalNot__init_object,
  0,
  (void*) (ROGUEM699) RogueCmdLogicalNot__prefix_symbol,
  (void*) (ROGUEM360) RogueCmdUnary__fn_name,
  (void*) (ROGUEM701) RogueCmdLogicalNot__resolve_for_literal_operand__Scope,
  0,
  (void*) (ROGUEM360) RogueCmdUnary__suffix_symbol,
  (void*) (ROGUEM699) RogueCmdLogicalNot__cpp_prefix_symbol,
  (void*) (ROGUEM360) RogueCmdUnary__cpp_suffix_symbol,
  0, // CmdBitwiseXor
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM704) RogueCmdBitwiseXor__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM705) RogueCmdBitwiseXor__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM706) RogueCmdBitwiseXor__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM249) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM264) Rogue_CmdBinary__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM707) RogueCmdBitwiseXor__init_object,
  0,
  (void*) (ROGUEM255) RogueCmdBinary__fn_name,
  (void*) (ROGUEM266) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM708) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM709) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM704) RogueCmdBitwiseXor__symbol,
  (void*) (ROGUEM704) RogueCmdBitwiseXor__cpp_symbol,
  0, // CmdBitwiseOp
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM710) RogueCmdBitwiseOp__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM71) RogueCmd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM249) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM264) Rogue_CmdBinary__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM711) RogueCmdBitwiseOp__init_object,
  0,
  (void*) (ROGUEM255) RogueCmdBinary__fn_name,
  (void*) (ROGUEM266) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM708) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM709) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM255) RogueCmdBinary__symbol,
  (void*) (ROGUEM255) RogueCmdBinary__cpp_symbol,
  0, // CmdBitwiseOr
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM712) RogueCmdBitwiseOr__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM713) RogueCmdBitwiseOr__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM714) RogueCmdBitwiseOr__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM249) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM264) Rogue_CmdBinary__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM715) RogueCmdBitwiseOr__init_object,
  0,
  (void*) (ROGUEM255) RogueCmdBinary__fn_name,
  (void*) (ROGUEM266) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM708) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM709) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM712) RogueCmdBitwiseOr__symbol,
  (void*) (ROGUEM255) RogueCmdBinary__cpp_symbol,
  0, // CmdBitwiseAnd
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM716) RogueCmdBitwiseAnd__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM717) RogueCmdBitwiseAnd__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM718) RogueCmdBitwiseAnd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM249) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM264) Rogue_CmdBinary__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM719) RogueCmdBitwiseAnd__init_object,
  0,
  (void*) (ROGUEM255) RogueCmdBinary__fn_name,
  (void*) (ROGUEM266) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM708) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM709) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM716) RogueCmdBitwiseAnd__symbol,
  (void*) (ROGUEM255) RogueCmdBinary__cpp_symbol,
  0, // CmdBitwiseShiftLeft
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM720) RogueCmdBitwiseShiftLeft__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM721) RogueCmdBitwiseShiftLeft__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM722) RogueCmdBitwiseShiftLeft__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM249) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM264) Rogue_CmdBinary__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM723) RogueCmdBitwiseShiftLeft__init_object,
  0,
  (void*) (ROGUEM255) RogueCmdBinary__fn_name,
  (void*) (ROGUEM266) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM708) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM709) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM720) RogueCmdBitwiseShiftLeft__symbol,
  (void*) (ROGUEM720) RogueCmdBitwiseShiftLeft__cpp_symbol,
  0, // CmdBitwiseShiftRight
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM724) RogueCmdBitwiseShiftRight__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM725) RogueCmdBitwiseShiftRight__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM726) RogueCmdBitwiseShiftRight__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM727) RogueCmdBitwiseShiftRight__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM264) Rogue_CmdBinary__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM728) RogueCmdBitwiseShiftRight__init_object,
  0,
  (void*) (ROGUEM255) RogueCmdBinary__fn_name,
  (void*) (ROGUEM266) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM708) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM709) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM724) RogueCmdBitwiseShiftRight__symbol,
  (void*) (ROGUEM255) RogueCmdBinary__cpp_symbol,
  0, // CmdBitwiseShiftRightX
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM729) RogueCmdBitwiseShiftRightX__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM730) RogueCmdBitwiseShiftRightX__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM731) RogueCmdBitwiseShiftRightX__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM249) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM264) Rogue_CmdBinary__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM732) RogueCmdBitwiseShiftRightX__init_object,
  0,
  (void*) (ROGUEM255) RogueCmdBinary__fn_name,
  (void*) (ROGUEM266) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM708) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM709) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM729) RogueCmdBitwiseShiftRightX__symbol,
  (void*) (ROGUEM729) RogueCmdBitwiseShiftRightX__cpp_symbol,
  0, // CmdSubtract
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM733) RogueCmdSubtract__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM734) RogueCmdSubtract__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM735) RogueCmdSubtract__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM249) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM264) Rogue_CmdBinary__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM736) RogueCmdSubtract__init_object,
  0,
  (void*) (ROGUEM733) RogueCmdSubtract__fn_name,
  (void*) (ROGUEM266) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM258) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM733) RogueCmdSubtract__symbol,
  (void*) (ROGUEM255) RogueCmdBinary__cpp_symbol,
  0, // CmdMultiply
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM737) RogueCmdMultiply__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM738) RogueCmdMultiply__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM739) RogueCmdMultiply__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM249) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM264) Rogue_CmdBinary__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM740) RogueCmdMultiply__init_object,
  0,
  (void*) (ROGUEM737) RogueCmdMultiply__fn_name,
  (void*) (ROGUEM266) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM258) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM737) RogueCmdMultiply__symbol,
  (void*) (ROGUEM255) RogueCmdBinary__cpp_symbol,
  0, // CmdDivide
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM741) RogueCmdDivide__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM742) RogueCmdDivide__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM743) RogueCmdDivide__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM249) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM264) Rogue_CmdBinary__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM744) RogueCmdDivide__init_object,
  0,
  (void*) (ROGUEM741) RogueCmdDivide__fn_name,
  (void*) (ROGUEM266) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM258) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM741) RogueCmdDivide__symbol,
  (void*) (ROGUEM255) RogueCmdBinary__cpp_symbol,
  0, // CmdMod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM745) RogueCmdMod__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM746) RogueCmdMod__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM747) RogueCmdMod__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM748) RogueCmdMod__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM264) Rogue_CmdBinary__type,
  (void*) (ROGUEM251) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM749) RogueCmdMod__init_object,
  0,
  (void*) (ROGUEM745) RogueCmdMod__fn_name,
  (void*) (ROGUEM266) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM258) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM745) RogueCmdMod__symbol,
  (void*) (ROGUEM255) RogueCmdBinary__cpp_symbol,
  0, // CmdPower
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM750) RogueCmdPower__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM751) RogueCmdPower__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM752) RogueCmdPower__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM249) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM264) Rogue_CmdBinary__type,
  (void*) (ROGUEM753) RogueCmdPower__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM252) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM253) RogueCmdBinary__update_this_type__Scope,
  (void*) (ROGUEM754) RogueCmdPower__init_object,
  0,
  (void*) (ROGUEM750) RogueCmdPower__fn_name,
  (void*) (ROGUEM266) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM258) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM259) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM750) RogueCmdPower__symbol,
  (void*) (ROGUEM255) RogueCmdBinary__cpp_symbol,
  0, // CmdNegate
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM755) RogueCmdNegate__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM756) RogueCmdNegate__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM757) RogueCmdNegate__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM361) RogueCmdUnary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM362) Rogue_CmdUnary__type,
  (void*) (ROGUEM356) RogueCmdUnary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM357) RogueCmdUnary__trace_used_code,
  (void*) (ROGUEM358) RogueCmdUnary__update_this_type__Scope,
  (void*) (ROGUEM758) RogueCmdNegate__init_object,
  0,
  (void*) (ROGUEM755) RogueCmdNegate__prefix_symbol,
  (void*) (ROGUEM755) RogueCmdNegate__fn_name,
  (void*) (ROGUEM759) RogueCmdNegate__resolve_for_literal_operand__Scope,
  0,
  (void*) (ROGUEM755) RogueCmdNegate__suffix_symbol,
  (void*) (ROGUEM360) RogueCmdUnary__cpp_prefix_symbol,
  (void*) (ROGUEM360) RogueCmdUnary__cpp_suffix_symbol,
  0, // CmdBitwiseNot
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM760) RogueCmdBitwiseNot__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM761) RogueCmdBitwiseNot__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM361) RogueCmdUnary__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM762) Rogue_CmdBitwiseNot__type,
  (void*) (ROGUEM356) RogueCmdUnary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM357) RogueCmdUnary__trace_used_code,
  (void*) (ROGUEM358) RogueCmdUnary__update_this_type__Scope,
  (void*) (ROGUEM763) RogueCmdBitwiseNot__init_object,
  0,
  (void*) (ROGUEM760) RogueCmdBitwiseNot__prefix_symbol,
  (void*) (ROGUEM760) RogueCmdBitwiseNot__fn_name,
  (void*) (ROGUEM764) RogueCmdBitwiseNot__resolve_for_literal_operand__Scope,
  0,
  (void*) (ROGUEM360) RogueCmdUnary__suffix_symbol,
  (void*) (ROGUEM760) RogueCmdBitwiseNot__cpp_prefix_symbol,
  (void*) (ROGUEM360) RogueCmdUnary__cpp_suffix_symbol,
  0, // CmdElementAccess
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM765) RogueCmdElementAccess__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM766) RogueCmdElementAccess__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM767) RogueCmdElementAccess__resolve__Scope,
  (void*) (ROGUEM768) RogueCmdElementAccess__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM769) RogueCmdElementAccess__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM59) RogueCmd__trace_used_code,
  (void*) (ROGUEM770) RogueCmdElementAccess__update_this_type__Scope,
  (void*) (ROGUEM771) RogueCmdElementAccess__init_object,
  0, // CmdListConvert
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM772) RogueCmdListConvert__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM773) RogueCmdListConvert__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM774) RogueCmdListConvert__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM775) RogueCmdListConvert__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM776) Rogue_CmdListConvert__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM59) RogueCmd__trace_used_code,
  (void*) (ROGUEM56) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM777) RogueCmdListConvert__init_object,
  0, // CmdConvertToType
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM778) RogueCmdConvertToType__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM779) RogueCmdConvertToType__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM780) RogueCmdConvertToType__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM345) Rogue_CmdTypeOperator__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM347) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM348) RogueCmdTypeOperator__update_this_type__Scope,
  (void*) (ROGUEM781) RogueCmdConvertToType__init_object,
  0, // CmdCreateCallback
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM782) RogueCmdCreateCallback__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM783) RogueCmdCreateCallback__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM784) RogueCmdCreateCallback__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM59) RogueCmd__trace_used_code,
  (void*) (ROGUEM56) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM785) RogueCmdCreateCallback__init_object,
  0, // CmdAs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM786) RogueCmdAs__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM787) RogueCmdAs__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM788) RogueCmdAs__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM345) Rogue_CmdTypeOperator__type,
  (void*) (ROGUEM789) RogueCmdAs__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM347) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM348) RogueCmdTypeOperator__update_this_type__Scope,
  (void*) (ROGUEM790) RogueCmdAs__init_object,
  0, // CmdDefaultValue
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM791) RogueCmdDefaultValue__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM792) RogueCmdDefaultValue__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM236) RogueCmdLiteral__implicit_type__Scope,
  (void*) (ROGUEM237) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM793) RogueCmdDefaultValue__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM794) Rogue_CmdDefaultValue__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM241) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM242) RogueCmdLiteral__update_this_type__Scope,
  (void*) (ROGUEM795) RogueCmdDefaultValue__init_object,
  0, // CmdLiteralReal64
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM796) RogueCmdLiteralReal64__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM797) RogueCmdLiteralReal64__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM236) RogueCmdLiteral__implicit_type__Scope,
  (void*) (ROGUEM237) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM798) RogueCmdLiteralReal64__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM799) Rogue_CmdLiteralReal64__type,
  (void*) (ROGUEM800) RogueCmdLiteralReal64__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM241) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM242) RogueCmdLiteral__update_this_type__Scope,
  (void*) (ROGUEM801) RogueCmdLiteralReal64__init_object,
  0, // CmdLiteralInt64
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM802) RogueCmdLiteralInt64__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM803) RogueCmdLiteralInt64__cast_to__Type_Scope,
  (void*) (ROGUEM804) RogueCmdLiteralInt64__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM236) RogueCmdLiteral__implicit_type__Scope,
  (void*) (ROGUEM237) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM805) RogueCmdLiteralInt64__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM806) Rogue_CmdLiteralInt64__type,
  (void*) (ROGUEM807) RogueCmdLiteralInt64__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM241) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM242) RogueCmdLiteral__update_this_type__Scope,
  (void*) (ROGUEM808) RogueCmdLiteralInt64__init_object,
  0, // CmdLiteralCharacter
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM809) RogueCmdLiteralCharacter__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM810) RogueCmdLiteralCharacter__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM236) RogueCmdLiteral__implicit_type__Scope,
  (void*) (ROGUEM237) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM811) RogueCmdLiteralCharacter__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM812) Rogue_CmdLiteralCharacter__type,
  (void*) (ROGUEM813) RogueCmdLiteralCharacter__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM241) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM242) RogueCmdLiteral__update_this_type__Scope,
  (void*) (ROGUEM814) RogueCmdLiteralCharacter__init_object,
  0, // CmdCreateList
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM815) RogueCmdCreateList__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM816) RogueCmdCreateList__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM817) RogueCmdCreateList__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM59) RogueCmd__trace_used_code,
  (void*) (ROGUEM56) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM818) RogueCmdCreateList__init_object,
  0, // CmdCallPriorMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM819) RogueCmdCallPriorMethod__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM820) RogueCmdCallPriorMethod__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM821) RogueCmdCallPriorMethod__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM59) RogueCmd__trace_used_code,
  (void*) (ROGUEM822) RogueCmdCallPriorMethod__update_this_type__Scope,
  (void*) (ROGUEM823) RogueCmdCallPriorMethod__init_object,
  0, // FnArg[]
  (void*) (ROGUEM824) RogueFnArgList__to_String,
  (void*) (ROGUEM824) RogueFnArgList__type_name,
  (void*) (ROGUEM825) RogueFnArgList__init_object,
  0, // FnArg
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM826) RogueFnArg__type_name,
  0, // CmdSelect
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM827) RogueCmdSelect__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM828) RogueCmdSelect__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM829) RogueCmdSelect__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM830) RogueCmdSelect__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM831) Rogue_CmdSelect__type,
  (void*) (ROGUEM832) RogueCmdSelect__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM833) RogueCmdSelect__trace_used_code,
  (void*) (ROGUEM834) RogueCmdSelect__update_this_type__Scope,
  (void*) (ROGUEM835) RogueCmdSelect__init_object,
  0, // CmdSelectCase[]
  (void*) (ROGUEM836) RogueCmdSelectCaseList__to_String,
  (void*) (ROGUEM836) RogueCmdSelectCaseList__type_name,
  (void*) (ROGUEM837) RogueCmdSelectCaseList__init_object,
  0, // CmdSelectCase
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM838) RogueCmdSelectCase__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM839) RogueCmdSelectCase__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM840) RogueCmdSelectCase__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM841) RogueCmdSelectCase__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM842) Rogue_CmdSelectCase__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM843) RogueCmdSelectCase__trace_used_code,
  (void*) (ROGUEM844) RogueCmdSelectCase__update_this_type__Scope,
  (void*) (ROGUEM845) RogueCmdSelectCase__init_object,
  0, // CmdTypedLiteralList
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM846) RogueCmdTypedLiteralList__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM847) RogueCmdTypedLiteralList__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM848) RogueCmdTypedLiteralList__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM849) RogueCmdTypedLiteralList__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM850) Rogue_CmdTypedLiteralList__type,
  (void*) (ROGUEM72) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM59) RogueCmd__trace_used_code,
  (void*) (ROGUEM56) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM851) RogueCmdTypedLiteralList__init_object,
  0, // TableEntry<<String,ParseReader>>[]
  (void*) (ROGUEM852) RogueString_ParseReaderTableEntryList__to_String,
  (void*) (ROGUEM852) RogueString_ParseReaderTableEntryList__type_name,
  (void*) (ROGUEM853) RogueString_ParseReaderTableEntryList__init_object,
  0, // TableEntry<<String,ParseReader>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM854) RogueString_ParseReaderTableEntry__type_name,
  0, // IOError
  (void*) (ROGUEM17) RogueException__to_String,
  (void*) (ROGUEM855) RogueIOError__type_name,
  0,
  (void*) (ROGUEM856) RogueIOError__init_object,
  0, // FileReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM857) RogueFileReader__type_name,
  (void*) (ROGUEM858) RogueFileReader__has_another,
  (void*) (ROGUEM859) RogueFileReader__peek,
  (void*) (ROGUEM859) RogueFileReader__read,
  0, // FileWriter
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM860) RogueFileWriter__type_name,
  (void*) (ROGUEM861) RogueFileWriter__close,
  (void*) (ROGUEM861) RogueFileWriter__flush,
  (void*) (ROGUEM862) RogueFileWriter__write__Character,
  0, // CmdNoAction
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM863) RogueCmdNoAction__type_name,
  (void*) (ROGUEM864) RogueCmdNoAction__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM865) RogueCmdNoAction__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM866) RogueCmdNoAction__requires_semicolon,
  (void*) (ROGUEM867) RogueCmdNoAction__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM868) Rogue_CmdNoAction__type,
  (void*) (ROGUEM869) RogueCmdNoAction__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM870) RogueCmdNoAction__trace_used_code,
  (void*) (ROGUEM56) RogueCmd__update_this_type__Scope,
  (void*) (ROGUEM871) RogueCmdNoAction__init_object,
  0, // ListRebuilder<<Token>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM872) RogueTokenListRebuilder__type_name,
  0, // TableEntry<<String,TokenType>>[]
  (void*) (ROGUEM873) RogueString_TokenTypeTableEntryList__to_String,
  (void*) (ROGUEM873) RogueString_TokenTypeTableEntryList__type_name,
  (void*) (ROGUEM874) RogueString_TokenTypeTableEntryList__init_object,
  0, // TableEntry<<String,TokenType>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM875) RogueString_TokenTypeTableEntry__type_name,
  0, // TableEntry<<String,TypeSpecializer>>[]
  (void*) (ROGUEM876) RogueString_TypeSpecializerTableEntryList__to_String,
  (void*) (ROGUEM876) RogueString_TypeSpecializerTableEntryList__type_name,
  (void*) (ROGUEM877) RogueString_TypeSpecializerTableEntryList__init_object,
  0, // TableEntry<<String,TypeSpecializer>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM878) RogueString_TypeSpecializerTableEntry__type_name,
  0, // TableEntry<<String,CmdLabel>>[]
  (void*) (ROGUEM879) RogueString_CmdLabelTableEntryList__to_String,
  (void*) (ROGUEM879) RogueString_CmdLabelTableEntryList__type_name,
  (void*) (ROGUEM880) RogueString_CmdLabelTableEntryList__init_object,
  0, // TableEntry<<String,CmdLabel>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM881) RogueString_CmdLabelTableEntry__type_name,
  0, // CmdCreateArray
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM882) RogueCmdCreateArray__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM883) RogueCmdCreateArray__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM884) RogueCmdCreateArray__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM885) Rogue_CmdCreateArray__type,
  (void*) (ROGUEM886) RogueCmdCreateArray__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM887) RogueCmdCreateArray__trace_used_code,
  (void*) (ROGUEM888) RogueCmdCreateArray__update_this_type__Scope,
  (void*) (ROGUEM889) RogueCmdCreateArray__init_object,
  0, // CmdCreateObject
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM890) RogueCmdCreateObject__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM891) RogueCmdCreateObject__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM892) RogueCmdCreateObject__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM893) Rogue_CmdCreateObject__type,
  (void*) (ROGUEM894) RogueCmdCreateObject__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM895) RogueCmdCreateObject__trace_used_code,
  (void*) (ROGUEM896) RogueCmdCreateObject__update_this_type__Scope,
  (void*) (ROGUEM897) RogueCmdCreateObject__init_object,
  0, // CmdReadGlobal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM898) RogueCmdReadGlobal__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM899) RogueCmdReadGlobal__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM900) RogueCmdReadGlobal__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM901) RogueCmdReadGlobal__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM902) Rogue_CmdReadGlobal__type,
  (void*) (ROGUEM903) RogueCmdReadGlobal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM904) RogueCmdReadGlobal__trace_used_code,
  (void*) (ROGUEM905) RogueCmdReadGlobal__update_this_type__Scope,
  (void*) (ROGUEM906) RogueCmdReadGlobal__init_object,
  0, // CmdReadProperty
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM907) RogueCmdReadProperty__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM908) RogueCmdReadProperty__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM909) RogueCmdReadProperty__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM910) RogueCmdReadProperty__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM911) Rogue_CmdReadProperty__type,
  (void*) (ROGUEM912) RogueCmdReadProperty__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM913) RogueCmdReadProperty__trace_used_code,
  (void*) (ROGUEM914) RogueCmdReadProperty__update_this_type__Scope,
  (void*) (ROGUEM915) RogueCmdReadProperty__init_object,
  0, // CmdWriteSingleton
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM916) RogueCmdWriteSingleton__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM917) RogueCmdWriteSingleton__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM918) RogueCmdWriteSingleton__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM919) RogueCmdWriteSingleton__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM920) RogueCmdWriteSingleton__trace_used_code,
  (void*) (ROGUEM921) RogueCmdWriteSingleton__update_this_type__Scope,
  (void*) (ROGUEM922) RogueCmdWriteSingleton__init_object,
  0, // CmdWriteLocal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM923) RogueCmdWriteLocal__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM924) RogueCmdWriteLocal__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM925) RogueCmdWriteLocal__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM926) RogueCmdWriteLocal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM927) RogueCmdWriteLocal__trace_used_code,
  (void*) (ROGUEM928) RogueCmdWriteLocal__update_this_type__Scope,
  (void*) (ROGUEM929) RogueCmdWriteLocal__init_object,
  0, // CmdModifyAndAssignGlobal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM930) RogueCmdModifyAndAssignGlobal__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM931) RogueCmdModifyAndAssignGlobal__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM932) RogueCmdModifyAndAssignGlobal__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM933) Rogue_CmdModifyAndAssignGlobal__type,
  (void*) (ROGUEM934) RogueCmdModifyAndAssignGlobal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM935) RogueCmdModifyAndAssignGlobal__trace_used_code,
  (void*) (ROGUEM936) RogueCmdModifyAndAssignGlobal__update_this_type__Scope,
  (void*) (ROGUEM937) RogueCmdModifyAndAssignGlobal__init_object,
  0, // CmdModifyAndAssignProperty
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM938) RogueCmdModifyAndAssignProperty__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM939) RogueCmdModifyAndAssignProperty__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM940) RogueCmdModifyAndAssignProperty__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM941) Rogue_CmdModifyAndAssignProperty__type,
  (void*) (ROGUEM942) RogueCmdModifyAndAssignProperty__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM943) RogueCmdModifyAndAssignProperty__trace_used_code,
  (void*) (ROGUEM944) RogueCmdModifyAndAssignProperty__update_this_type__Scope,
  (void*) (ROGUEM945) RogueCmdModifyAndAssignProperty__init_object,
  0, // CmdTaskControlSection[]
  (void*) (ROGUEM946) RogueCmdTaskControlSectionList__to_String,
  (void*) (ROGUEM946) RogueCmdTaskControlSectionList__type_name,
  (void*) (ROGUEM947) RogueCmdTaskControlSectionList__init_object,
  0, // CmdBlock
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM948) RogueCmdBlock__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM949) RogueCmdBlock__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM950) RogueCmdBlock__requires_semicolon,
  (void*) (ROGUEM951) RogueCmdBlock__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM952) RogueCmdBlock__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM953) RogueCmdBlock__trace_used_code,
  (void*) (ROGUEM954) RogueCmdBlock__update_this_type__Scope,
  (void*) (ROGUEM955) RogueCmdBlock__init_object,
  0,
  (void*) (ROGUEM211) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  0, // TableEntry<<String,Definition>>[]
  (void*) (ROGUEM956) RogueString_DefinitionTableEntryList__to_String,
  (void*) (ROGUEM956) RogueString_DefinitionTableEntryList__type_name,
  (void*) (ROGUEM957) RogueString_DefinitionTableEntryList__init_object,
  0, // TableEntry<<String,Definition>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM958) RogueString_DefinitionTableEntry__type_name,
  0, // TableEntry<<String,Property>>[]
  (void*) (ROGUEM959) RogueString_PropertyTableEntryList__to_String,
  (void*) (ROGUEM959) RogueString_PropertyTableEntryList__type_name,
  (void*) (ROGUEM960) RogueString_PropertyTableEntryList__init_object,
  0, // TableEntry<<String,Property>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM961) RogueString_PropertyTableEntry__type_name,
  0, // Table<<String,Cmd>>
  (void*) (ROGUEM962) RogueString_CmdTable__to_String,
  (void*) (ROGUEM962) RogueString_CmdTable__type_name,
  0, // CmdCallStaticMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM963) RogueCmdCallStaticMethod__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM431) RogueCmdCallMethod__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM964) RogueCmdCallStaticMethod__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM375) Rogue_CmdCall__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM965) RogueCmdCallStaticMethod__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM375) Rogue_CmdCall__type,
  (void*) (ROGUEM966) RogueCmdCallStaticMethod__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM380) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM381) RogueCmdCall__update_this_type__Scope,
  (void*) (ROGUEM967) RogueCmdCallStaticMethod__init_object,
  0, // TableEntry<<String,String>>[]
  (void*) (ROGUEM968) RogueString_StringTableEntryList__to_String,
  (void*) (ROGUEM968) RogueString_StringTableEntryList__type_name,
  (void*) (ROGUEM969) RogueString_StringTableEntryList__init_object,
  0, // TableEntry<<String,String>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM970) RogueString_StringTableEntry__type_name,
  0, // DirectiveTokenType
  (void*) (ROGUEM93) RogueTokenType__to_String,
  (void*) (ROGUEM971) RogueDirectiveTokenType__type_name,
  0,
  (void*) (ROGUEM972) RogueDirectiveTokenType__create_token__String_Int32_Int32,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM95) RogueTokenType__create_token__String_Int32_Int32_String,
  0,
  (void*) (ROGUEM96) RogueTokenType__create_token__Token_String,
  0,
  (void*) (ROGUEM973) RogueDirectiveTokenType__is_directive,
  (void*) (ROGUEM97) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM97) RogueTokenType__is_structure,
  0,
  0,
  (void*) (ROGUEM974) RogueDirectiveTokenType__init_object,
  0, // StructuralDirectiveTokenType
  (void*) (ROGUEM93) RogueTokenType__to_String,
  (void*) (ROGUEM975) RogueStructuralDirectiveTokenType__type_name,
  0,
  (void*) (ROGUEM976) RogueStructuralDirectiveTokenType__create_token__String_Int32_Int32,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM95) RogueTokenType__create_token__String_Int32_Int32_String,
  0,
  (void*) (ROGUEM96) RogueTokenType__create_token__Token_String,
  0,
  (void*) (ROGUEM977) RogueStructuralDirectiveTokenType__is_directive,
  (void*) (ROGUEM97) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM977) RogueStructuralDirectiveTokenType__is_structure,
  0,
  0,
  (void*) (ROGUEM978) RogueStructuralDirectiveTokenType__init_object,
  0, // EOLTokenType
  (void*) (ROGUEM93) RogueTokenType__to_String,
  (void*) (ROGUEM979) RogueEOLTokenType__type_name,
  0,
  (void*) (ROGUEM980) RogueEOLTokenType__create_token__String_Int32_Int32,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM981) RogueEOLTokenType__create_token__String_Int32_Int32_String,
  0,
  (void*) (ROGUEM96) RogueTokenType__create_token__Token_String,
  0,
  (void*) (ROGUEM97) RogueTokenType__is_directive,
  (void*) (ROGUEM97) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM982) RogueEOLTokenType__is_structure,
  0,
  0,
  (void*) (ROGUEM983) RogueEOLTokenType__init_object,
  0, // StructureTokenType
  (void*) (ROGUEM93) RogueTokenType__to_String,
  (void*) (ROGUEM984) RogueStructureTokenType__type_name,
  0,
  (void*) (ROGUEM985) RogueStructureTokenType__create_token__String_Int32_Int32,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM95) RogueTokenType__create_token__String_Int32_Int32_String,
  0,
  (void*) (ROGUEM96) RogueTokenType__create_token__Token_String,
  0,
  (void*) (ROGUEM97) RogueTokenType__is_directive,
  (void*) (ROGUEM97) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM986) RogueStructureTokenType__is_structure,
  0,
  0,
  (void*) (ROGUEM987) RogueStructureTokenType__init_object,
  0, // NativeCodeTokenType
  (void*) (ROGUEM93) RogueTokenType__to_String,
  (void*) (ROGUEM988) RogueNativeCodeTokenType__type_name,
  0,
  (void*) (ROGUEM94) RogueTokenType__create_token__String_Int32_Int32,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM989) RogueNativeCodeTokenType__create_token__String_Int32_Int32_String,
  0,
  (void*) (ROGUEM990) RogueNativeCodeTokenType__create_token__Token_String,
  0,
  (void*) (ROGUEM97) RogueTokenType__is_directive,
  (void*) (ROGUEM97) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM97) RogueTokenType__is_structure,
  0,
  0,
  (void*) (ROGUEM991) RogueNativeCodeTokenType__init_object,
  0, // ModifyAndAssignTokenType
  (void*) (ROGUEM93) RogueTokenType__to_String,
  (void*) (ROGUEM992) RogueModifyAndAssignTokenType__type_name,
  0,
  (void*) (ROGUEM94) RogueTokenType__create_token__String_Int32_Int32,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM95) RogueTokenType__create_token__String_Int32_Int32_String,
  0,
  (void*) (ROGUEM96) RogueTokenType__create_token__Token_String,
  0,
  (void*) (ROGUEM97) RogueTokenType__is_directive,
  (void*) (ROGUEM993) RogueModifyAndAssignTokenType__is_op_with_assign,
  (void*) (ROGUEM97) RogueTokenType__is_structure,
  0,
  0,
  (void*) (ROGUEM994) RogueModifyAndAssignTokenType__init_object,
  0, // Table<<String,Token[]>>
  (void*) (ROGUEM995) RogueString_TokenListTable__to_String,
  (void*) (ROGUEM995) RogueString_TokenListTable__type_name,
  0, // PreprocessorTokenReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM996) RoguePreprocessorTokenReader__type_name,
  0, // CmdSwitch
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM997) RogueCmdSwitch__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM998) RogueCmdSwitch__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM209) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM999) RogueCmdSwitch__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM60) Rogue_Cmd__type,
  (void*) (ROGUEM1000) RogueCmdSwitch__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM1001) RogueCmdSwitch__trace_used_code,
  (void*) (ROGUEM1002) RogueCmdSwitch__update_this_type__Scope,
  (void*) (ROGUEM1003) RogueCmdSwitch__init_object,
  0,
  (void*) (ROGUEM211) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  0, // CmdReadArrayElement
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM1004) RogueCmdReadArrayElement__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM1005) RogueCmdReadArrayElement__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM1006) RogueCmdReadArrayElement__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM1007) RogueCmdReadArrayElement__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM1008) Rogue_CmdReadArrayElement__type,
  (void*) (ROGUEM1009) RogueCmdReadArrayElement__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM1010) RogueCmdReadArrayElement__trace_used_code,
  (void*) (ROGUEM1011) RogueCmdReadArrayElement__update_this_type__Scope,
  (void*) (ROGUEM1012) RogueCmdReadArrayElement__init_object,
  0, // CmdWriteArrayElement
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM1013) RogueCmdWriteArrayElement__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM1014) RogueCmdWriteArrayElement__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM1015) RogueCmdWriteArrayElement__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM1016) Rogue_CmdWriteArrayElement__type,
  (void*) (ROGUEM1017) RogueCmdWriteArrayElement__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM1018) RogueCmdWriteArrayElement__trace_used_code,
  (void*) (ROGUEM1019) RogueCmdWriteArrayElement__update_this_type__Scope,
  (void*) (ROGUEM1020) RogueCmdWriteArrayElement__init_object,
  0, // CmdConvertToPrimitiveType
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM1021) RogueCmdConvertToPrimitiveType__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM1022) RogueCmdConvertToPrimitiveType__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM1023) RogueCmdConvertToPrimitiveType__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM345) Rogue_CmdTypeOperator__type,
  (void*) (ROGUEM1024) RogueCmdConvertToPrimitiveType__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM347) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM348) RogueCmdTypeOperator__update_this_type__Scope,
  (void*) (ROGUEM1025) RogueCmdConvertToPrimitiveType__init_object,
  0, // ListReader<<CmdSelectCase>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM1026) RogueCmdSelectCaseListReader__type_name,
  (void*) (ROGUEM1027) RogueCmdSelectCaseListReader__has_another,
  (void*) (ROGUEM1028) RogueCmdSelectCaseListReader__read,
  0, // Reader<<CmdSelectCase>>
  0, // CmdAdjustGlobal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM1029) RogueCmdAdjustGlobal__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM1030) RogueCmdAdjustGlobal__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM1031) RogueCmdAdjustGlobal__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM1032) Rogue_CmdAdjustGlobal__type,
  (void*) (ROGUEM1033) RogueCmdAdjustGlobal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM1034) RogueCmdAdjustGlobal__trace_used_code,
  (void*) (ROGUEM1035) RogueCmdAdjustGlobal__update_this_type__Scope,
  (void*) (ROGUEM1036) RogueCmdAdjustGlobal__init_object,
  0, // CmdAdjustProperty
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM1037) RogueCmdAdjustProperty__type_name,
  (void*) (ROGUEM51) RogueCmd__add_to__CmdStatementList,
  (void*) (ROGUEM52) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM53) RogueCmd__cast_to__Type_Scope,
  (void*) (ROGUEM1038) RogueCmdAdjustProperty__clone__CloneArgs,
  0,
  0,
  0,
  (void*) (ROGUEM55) RogueCmd__combine_literal_operands__Type,
  0,
  (void*) (ROGUEM56) RogueCmd__exit_scope__Scope,
  0,
  0,
  (void*) (ROGUEM57) RogueCmd__is_generic_function,
  0,
  (void*) (ROGUEM58) RogueCmd__implicit_type__Scope,
  (void*) (ROGUEM57) RogueCmd__is_literal,
  (void*) (ROGUEM59) RogueCmd__require_type_context,
  0,
  0,
  (void*) (ROGUEM60) Rogue_Cmd__require_type,
  0,
  (void*) (ROGUEM57) RogueCmd__requires_semicolon,
  (void*) (ROGUEM1039) RogueCmdAdjustProperty__resolve__Scope,
  (void*) (ROGUEM63) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM64) RogueCmd__resolve_adjust__Scope_Int32,
  (void*) (ROGUEM65) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM1040) Rogue_CmdAdjustProperty__type,
  (void*) (ROGUEM1041) RogueCmdAdjustProperty__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM1042) RogueCmdAdjustProperty__trace_used_code,
  (void*) (ROGUEM1043) RogueCmdAdjustProperty__update_this_type__Scope,
  (void*) (ROGUEM1044) RogueCmdAdjustProperty__init_object,
  0, // TableEntry<<String,Cmd>>[]
  (void*) (ROGUEM1045) RogueString_CmdTableEntryList__to_String,
  (void*) (ROGUEM1045) RogueString_CmdTableEntryList__type_name,
  (void*) (ROGUEM1046) RogueString_CmdTableEntryList__init_object,
  0, // TableEntry<<String,Cmd>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM1047) RogueString_CmdTableEntry__type_name,
  0, // NativeCodeToken
  (void*) (ROGUEM1048) RogueNativeCodeToken__to_String,
  (void*) (ROGUEM1048) RogueNativeCodeToken__type_name,
  0,
  0,
  0,
  0,
  0,
  (void*) (ROGUEM1048) RogueNativeCodeToken__quoted_name,
  0,
  0,
  (void*) (ROGUEM40) RogueToken__to_Character,
  (void*) (ROGUEM41) RogueToken__to_Int32,
  (void*) (ROGUEM42) RogueToken__to_Int64,
  (void*) (ROGUEM43) RogueToken__to_Real64,
  (void*) (ROGUEM44) RogueToken__to_Type,
  0,
  (void*) (ROGUEM1049) RogueNativeCodeToken__init_object,
  0, // TableEntry<<String,Token[]>>[]
  (void*) (ROGUEM1050) RogueString_TokenListTableEntryList__to_String,
  (void*) (ROGUEM1050) RogueString_TokenListTableEntryList__type_name,
  (void*) (ROGUEM1051) RogueString_TokenListTableEntryList__init_object,
  0, // TableEntry<<String,Token[]>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM1052) RogueString_TokenListTableEntry__type_name,

};

int Rogue_type_info_table[1344] =
{
  // allocator_index, dynamic_method_table_index, base_class_count, base_class_index[base_class_count], ...
  0,0,0,0,0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,44,1,10,0,48,1,4,0,0,1,12,0,0,1,4,0,52,2,4,14,
  0,57,0,0,58,1,10,0,0,1,12,0,62,2,4,18,0,72,0,0,73,2,4,20,0,
  76,0,0,77,1,4,0,80,1,4,0,85,1,4,0,88,1,4,0,91,1,10,0,95,1,
  4,0,98,1,4,0,101,1,4,0,104,1,4,0,107,1,10,0,111,1,4,0,114,1,4,
  0,117,1,10,0,121,1,4,0,124,1,4,0,127,1,4,0,130,1,4,0,133,1,4,0,
  136,1,4,0,139,1,4,0,157,1,22,0,162,1,41,0,167,1,44,0,201,1,4,0,235,
  1,46,0,241,1,10,0,0,1,12,0,247,1,4,0,250,1,50,0,284,1,44,0,318,1,
  4,0,0,1,12,0,337,1,4,0,340,1,10,0,0,1,12,0,0,1,12,0,344,1,4,
  0,349,1,57,0,354,1,57,0,359,1,4,0,362,1,4,0,365,1,10,0,369,1,4,0,
  0,1,12,0,372,1,10,0,0,1,12,0,376,1,4,0,379,1,10,0,0,1,12,0,383,
  1,4,0,386,0,0,387,1,4,0,390,1,10,0,394,1,4,0,397,1,4,0,400,1,4,
  0,403,1,4,0,0,1,12,0,406,1,44,0,440,1,10,0,444,2,4,71,0,449,1,10,
  0,453,1,4,0,456,1,10,0,460,1,4,0,0,1,12,0,463,1,4,0,466,1,40,0,
  484,1,40,0,502,1,40,0,520,1,40,0,538,1,40,0,0,1,12,0,556,1,4,0,0,
  1,12,0,559,1,4,0,562,1,10,0,566,1,10,0,570,1,4,0,0,1,12,0,573,1,
  10,0,577,1,4,0,0,1,12,0,580,1,10,0,584,1,4,0,587,1,4,0,592,1,106,
  0,597,1,44,0,631,1,46,0,637,1,10,0,641,1,44,0,675,1,44,0,709,1,10,0,
  713,1,50,0,749,1,116,0,783,1,44,0,0,1,12,0,817,1,114,0,853,1,120,0,887,
  1,44,0,921,1,122,0,964,1,123,0,1007,1,44,0,1049,1,106,0,0,1,12,0,1054,1,
  44,0,1088,1,4,0,1091,1,10,0,1095,1,4,0,0,1,12,0,1098,1,10,0,1102,1,4,
  0,1105,1,4,0,1108,1,10,0,1112,1,4,0,1115,1,4,0,1118,1,120,0,1152,1,44,0,
  1186,1,120,0,1220,1,120,0,1254,1,44,0,1288,1,44,0,0,1,12,0,0,1,12,0,1322,
  1,10,0,1326,1,4,0,0,1,12,0,1329,1,10,0,0,1,12,0,1333,1,10,0,1337,1,
  4,0,0,1,12,0,1340,1,10,0,1344,1,4,0,0,1,12,0,1347,1,157,0,1381,1,44,
  0,1415,1,159,0,1457,1,44,0,1499,1,44,0,0,1,12,0,1533,1,163,0,1569,1,164,0,
  1605,1,44,0,1639,1,164,0,1673,1,106,0,1678,1,44,0,1712,1,164,0,1746,1,44,0,1780,
  1,163,0,1816,1,164,0,1850,1,164,0,1884,1,174,0,1918,1,164,0,1952,1,4,0,1955,1,
  44,0,1989,1,10,0,1993,1,4,0,0,1,12,0,0,1,12,0,1996,1,44,0,2030,1,10,
  0,2034,1,4,0,0,1,12,0,2037,1,10,0,2041,1,4,0,0,1,12,0,2044,1,4,0,
  2047,1,4,0,2050,1,4,0,2053,2,4,14,0,2059,1,4,0,2062,1,40,0,2080,1,123,0,
  2122,1,44,0,2156,1,44,0,2190,1,114,0,2226,1,114,0,2262,1,114,0,2298,1,114,0,2334,
  1,44,0,2368,1,44,0,2402,1,44,0,2436,1,44,0,2470,1,44,0,2504,1,44,0,2538,1,
  44,0,2572,1,44,0,2606,1,44,0,2640,1,44,0,2674,1,44,0,2708,1,10,0,2712,1,44,
  0,2746,1,10,0,2750,1,44,0,2784,1,50,0,2818,1,44,0,2852,1,122,0,2895,1,44,0,
  2931,1,221,0,2965,1,44,0,2999,1,219,0,3035,1,122,0,3078,1,114,0,3114,1,219,0,3150,
  1,227,0,3193,1,123,0,3236,1,227,0,3279,1,227,0,3322,1,122,0,3365,1,122,0,3408,1,
  122,0,3451,1,122,0,3494,1,122,0,3537,1,157,0,3571,1,159,0,3613,1,238,0,3655,1,123,
  0,3697,1,238,0,3739,1,238,0,3781,1,238,0,3823,1,238,0,3865,1,238,0,3907,1,123,0,
  3949,1,123,0,3991,1,123,0,4033,1,123,0,4075,1,123,0,4117,1,159,0,4159,1,159,0,4201,
  1,44,0,4235,1,44,0,4269,1,157,0,4303,1,44,0,4337,1,157,0,4371,1,120,0,4405,1,
  120,0,4439,1,120,0,4473,1,120,0,4507,1,44,0,4541,1,44,0,4575,1,10,0,4579,1,4,
  0,4582,1,44,0,4616,1,10,0,4620,1,44,0,4654,1,44,0,4688,1,10,0,4692,1,4,0,
  0,1,12,0,4695,1,41,0,4700,2,4,14,0,4706,2,4,20,0,4712,1,44,0,4746,1,4,
  0,4749,1,10,0,4753,1,4,0,0,1,12,0,4756,1,10,0,4760,1,4,0,0,1,12,0,
  4763,1,10,0,4767,1,4,0,0,1,12,0,4770,1,44,0,4804,1,44,0,4838,1,44,0,4872,
  1,44,0,4906,1,44,0,4940,1,44,0,4974,1,221,0,5008,1,221,0,0,1,12,0,5042,1,
  10,0,5046,1,114,0,0,1,12,0,5082,1,10,0,5086,1,4,0,0,1,12,0,5089,1,10,
  0,5093,1,4,0,0,1,12,0,5096,1,4,0,5099,1,174,0,0,1,12,0,5133,1,10,0,
  5137,1,4,0,0,1,12,0,5140,1,51,0,5159,1,51,0,5178,1,51,0,5197,1,51,0,5216,
  1,51,0,5235,1,51,0,5254,1,4,0,5257,1,4,0,0,1,12,0,5260,1,114,0,0,1,
  12,0,5296,1,44,0,5330,1,44,0,5364,1,253,0,0,1,12,0,5398,2,4,325,0,5403,0,
  0,5404,1,44,0,5438,1,44,0,5472,1,10,0,5476,1,4,0,0,1,12,0,5479,1,40,0,
  5497,1,10,0,5501,1,4,0,0,1,12,0,0,0,0,0,0,0,0,0
};

int Rogue_object_size_table[338] =
{
  (int) sizeof(RogueReal64),
  (int) sizeof(RogueInt64),
  (int) sizeof(RogueInt32),
  (int) sizeof(RogueStringBuilder),
  (int) sizeof(RogueObject),
  (int) sizeof(RogueByte),
  (int) sizeof(RogueCharacter),
  (int) sizeof(RogueLogical),
  (int) sizeof(RogueString),
  (int) sizeof(RogueCharacterList),
  (int) sizeof(RogueClassGenericList),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassStringReader),
  (int) sizeof(RogueClassCharacterReader),
  (int) sizeof(RogueStringList),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassGlobal),
  (int) sizeof(RogueClassPrintWriterAspect),
  (int) sizeof(RogueClassConsole),
  (int) sizeof(RogueClassCharacterWriter),
  (int) sizeof(RogueClassRogueC),
  (int) sizeof(RogueClassException),
  (int) sizeof(RogueClassStackTrace),
  (int) sizeof(RogueClassProgram),
  (int) sizeof(RogueTemplateList),
  (int) sizeof(RogueClassTemplate),
  (int) sizeof(RogueClassString_TemplateTable),
  (int) sizeof(RogueClassString_AugmentListTable),
  (int) sizeof(RogueClassMethod),
  (int) sizeof(RoguePropertyList),
  (int) sizeof(RogueClassProperty),
  (int) sizeof(RogueClassString_MethodListTable),
  (int) sizeof(RogueTypeList),
  (int) sizeof(RogueClassType),
  (int) sizeof(RogueClassString_TypeTable),
  (int) sizeof(RogueClassString_Int32Table),
  (int) sizeof(RogueClassString_StringListTable),
  (int) sizeof(RogueClassString_Int32TableEntry),
  (int) sizeof(RogueClassInt32_TemplateTable),
  (int) sizeof(RogueClassToken),
  (int) sizeof(RogueClassError),
  (int) sizeof(RogueClassRogueError),
  (int) sizeof(RogueClassCmdLabel),
  (int) sizeof(RogueClassCmd),
  (int) sizeof(RogueClassCmdStatementList),
  (int) sizeof(RogueCmdList),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassAttributes),
  (int) sizeof(RogueClassCmdReturn),
  (int) sizeof(RogueClassCmdStatement),
  (int) sizeof(RogueClassTokenType),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassScope),
  (int) sizeof(RogueMethodList),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassFunction_Type_RETURNSLogical),
  (int) sizeof(RogueClassFunction_159),
  (int) sizeof(RogueClassFunction_160),
  (int) sizeof(RogueClassCPPWriter),
  (int) sizeof(RogueClassString_MethodTable),
  (int) sizeof(RogueLocalList),
  (int) sizeof(RogueClassLocal),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueInt32List),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassMath),
  (int) sizeof(RogueByteList),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassSystem),
  (int) sizeof(RogueClassReader_of_String),
  (int) sizeof(RogueClassString_LogicalTable),
  (int) sizeof(RogueParserList),
  (int) sizeof(RogueClassParser),
  (int) sizeof(RogueClassString_ParseReaderTable),
  (int) sizeof(RogueClassStopwatch),
  (int) sizeof(RogueClassFile),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdMakeRequisite),
  (int) sizeof(RogueTokenList),
  (int) sizeof(RogueClassLineReader),
  (int) sizeof(RogueTypeParameterList),
  (int) sizeof(RogueClassTypeParameter),
  (int) sizeof(RogueAugmentList),
  (int) sizeof(RogueClassAugment),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassString_TokenTypeTable),
  (int) sizeof(RogueClassLiteralCharacterToken),
  (int) sizeof(RogueClassLiteralInt64Token),
  (int) sizeof(RogueClassLiteralInt32Token),
  (int) sizeof(RogueClassLiteralReal64Token),
  (int) sizeof(RogueClassStringDataToken),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassString_TypeSpecializerTable),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassTypeSpecializer),
  (int) sizeof(RogueTypeSpecializerList),
  (int) sizeof(RogueTableEntry_of_String_TemplateList),
  (int) sizeof(RogueClassString_TemplateTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_AugmentListList),
  (int) sizeof(RogueClassString_AugmentListTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueCmdLabelList),
  (int) sizeof(RogueClassString_CmdLabelTable),
  (int) sizeof(RogueClassCloneArgs),
  (int) sizeof(RogueClassCloneMethodArgs),
  (int) sizeof(RogueClassCmdAccess),
  (int) sizeof(RogueClassCmdArgs),
  (int) sizeof(RogueCmdFlagArgList),
  (int) sizeof(RogueClassCmdFlagArg),
  (int) sizeof(RogueClassCmdAssign),
  (int) sizeof(RogueCmdControlStructureList),
  (int) sizeof(RogueClassCmdControlStructure),
  (int) sizeof(RogueClassCmdLiteralThis),
  (int) sizeof(RogueClassCmdThisContext),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdGenericLoop),
  (int) sizeof(RogueClassCmdLiteralInt32),
  (int) sizeof(RogueClassCmdLiteral),
  (int) sizeof(RogueClassCmdCompareNE),
  (int) sizeof(RogueClassCmdComparison),
  (int) sizeof(RogueClassCmdBinary),
  (int) sizeof(RogueClassTaskArgs),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdTaskControl),
  (int) sizeof(RogueClassCmdTaskControlSection),
  (int) sizeof(RogueTableEntry_of_String_MethodListList),
  (int) sizeof(RogueClassString_MethodListTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueDefinitionList),
  (int) sizeof(RogueClassDefinition),
  (int) sizeof(RogueClassString_DefinitionTable),
  (int) sizeof(RogueNativePropertyList),
  (int) sizeof(RogueClassNativeProperty),
  (int) sizeof(RogueClassString_PropertyTable),
  (int) sizeof(RogueClassCmdLiteralNull),
  (int) sizeof(RogueClassCmdCreateCompound),
  (int) sizeof(RogueClassCmdLiteralLogical),
  (int) sizeof(RogueClassCmdLiteralString),
  (int) sizeof(RogueClassCmdWriteGlobal),
  (int) sizeof(RogueClassCmdWriteProperty),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_TypeList),
  (int) sizeof(RogueClassString_TypeTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_Int32List),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_StringListList),
  (int) sizeof(RogueClassString_StringListTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_Int32_TemplateList),
  (int) sizeof(RogueClassInt32_TemplateTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdCastToType),
  (int) sizeof(RogueClassCmdTypeOperator),
  (int) sizeof(RogueClassCmdLogicalize),
  (int) sizeof(RogueClassCmdUnary),
  (int) sizeof(RogueClassCmdReadSingleton),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdCallInlineNativeRoutine),
  (int) sizeof(RogueClassCmdCallInlineNative),
  (int) sizeof(RogueClassCmdCall),
  (int) sizeof(RogueClassCmdCallNativeRoutine),
  (int) sizeof(RogueClassMacroArgs),
  (int) sizeof(RogueClassCmdInlineNative),
  (int) sizeof(RogueClassCmdCallRoutine),
  (int) sizeof(RogueClassCmdReadArrayCount),
  (int) sizeof(RogueClassCmdCallInlineNativeMethod),
  (int) sizeof(RogueClassCmdCallNativeMethod),
  (int) sizeof(RogueClassCmdCallAspectMethod),
  (int) sizeof(RogueClassCmdCallDynamicMethod),
  (int) sizeof(RogueClassCmdCallMethod),
  (int) sizeof(RogueClassCandidateMethods),
  (int) sizeof(RogueClassCmdCreateFunction),
  (int) sizeof(RogueFnParamList),
  (int) sizeof(RogueClassFnParam),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdReadLocal),
  (int) sizeof(RogueTableEntry_of_String_MethodList),
  (int) sizeof(RogueClassString_MethodTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_LogicalList),
  (int) sizeof(RogueClassString_LogicalTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassTokenReader),
  (int) sizeof(RogueClassString_StringTable),
  (int) sizeof(RogueClassTokenizer),
  (int) sizeof(RogueClassParseReader),
  (int) sizeof(RogueClassPreprocessor),
  (int) sizeof(RogueClassEOLToken),
  (int) sizeof(RogueClassCmdAdd),
  (int) sizeof(RogueClassCmdNativeHeader),
  (int) sizeof(RogueClassCmdNativeCode),
  (int) sizeof(RogueClassCmdIf),
  (int) sizeof(RogueClassCmdWhich),
  (int) sizeof(RogueClassCmdContingent),
  (int) sizeof(RogueClassCmdTry),
  (int) sizeof(RogueClassCmdAwait),
  (int) sizeof(RogueClassCmdYield),
  (int) sizeof(RogueClassCmdThrow),
  (int) sizeof(RogueClassCmdFormattedString),
  (int) sizeof(RogueClassCmdTrace),
  (int) sizeof(RogueClassCmdEscape),
  (int) sizeof(RogueClassCmdNextIteration),
  (int) sizeof(RogueClassCmdNecessary),
  (int) sizeof(RogueClassCmdSufficient),
  (int) sizeof(RogueClassCmdAdjust),
  (int) sizeof(RogueClassCmdModifyAndAssign),
  (int) sizeof(RogueCmdWhichCaseList),
  (int) sizeof(RogueClassCmdWhichCase),
  (int) sizeof(RogueCmdCatchList),
  (int) sizeof(RogueClassCmdCatch),
  (int) sizeof(RogueClassCmdLocalDeclaration),
  (int) sizeof(RogueClassCmdAdjustLocal),
  (int) sizeof(RogueClassCmdCompareLE),
  (int) sizeof(RogueClassCmdRange),
  (int) sizeof(RogueClassCmdModifyAndAssignLocal),
  (int) sizeof(RogueClassCmdResolvedModifyAndAssign),
  (int) sizeof(RogueClassCmdRangeUpTo),
  (int) sizeof(RogueClassCmdCompareGE),
  (int) sizeof(RogueClassCmdForEach),
  (int) sizeof(RogueClassCmdRangeDownTo),
  (int) sizeof(RogueClassCmdLogicalXor),
  (int) sizeof(RogueClassCmdBinaryLogical),
  (int) sizeof(RogueClassCmdLogicalOr),
  (int) sizeof(RogueClassCmdLogicalAnd),
  (int) sizeof(RogueClassCmdCompareEQ),
  (int) sizeof(RogueClassCmdCompareIs),
  (int) sizeof(RogueClassCmdCompareIsNot),
  (int) sizeof(RogueClassCmdCompareLT),
  (int) sizeof(RogueClassCmdCompareGT),
  (int) sizeof(RogueClassCmdInstanceOf),
  (int) sizeof(RogueClassCmdLogicalNot),
  (int) sizeof(RogueClassCmdBitwiseXor),
  (int) sizeof(RogueClassCmdBitwiseOp),
  (int) sizeof(RogueClassCmdBitwiseOr),
  (int) sizeof(RogueClassCmdBitwiseAnd),
  (int) sizeof(RogueClassCmdBitwiseShiftLeft),
  (int) sizeof(RogueClassCmdBitwiseShiftRight),
  (int) sizeof(RogueClassCmdBitwiseShiftRightX),
  (int) sizeof(RogueClassCmdSubtract),
  (int) sizeof(RogueClassCmdMultiply),
  (int) sizeof(RogueClassCmdDivide),
  (int) sizeof(RogueClassCmdMod),
  (int) sizeof(RogueClassCmdPower),
  (int) sizeof(RogueClassCmdNegate),
  (int) sizeof(RogueClassCmdBitwiseNot),
  (int) sizeof(RogueClassCmdElementAccess),
  (int) sizeof(RogueClassCmdListConvert),
  (int) sizeof(RogueClassCmdConvertToType),
  (int) sizeof(RogueClassCmdCreateCallback),
  (int) sizeof(RogueClassCmdAs),
  (int) sizeof(RogueClassCmdDefaultValue),
  (int) sizeof(RogueClassCmdLiteralReal64),
  (int) sizeof(RogueClassCmdLiteralInt64),
  (int) sizeof(RogueClassCmdLiteralCharacter),
  (int) sizeof(RogueClassCmdCreateList),
  (int) sizeof(RogueClassCmdCallPriorMethod),
  (int) sizeof(RogueFnArgList),
  (int) sizeof(RogueClassFnArg),
  (int) sizeof(RogueClassCmdSelect),
  (int) sizeof(RogueCmdSelectCaseList),
  (int) sizeof(RogueClassCmdSelectCase),
  (int) sizeof(RogueClassCmdTypedLiteralList),
  (int) sizeof(RogueTableEntry_of_String_ParseReaderList),
  (int) sizeof(RogueClassString_ParseReaderTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassIOError),
  (int) sizeof(RogueClassFileReader),
  (int) sizeof(RogueClassFileWriter),
  (int) sizeof(RogueClassCmdNoAction),
  (int) sizeof(RogueClassTokenListRebuilder),
  (int) sizeof(RogueTableEntry_of_String_TokenTypeList),
  (int) sizeof(RogueClassString_TokenTypeTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_TypeSpecializerList),
  (int) sizeof(RogueClassString_TypeSpecializerTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_CmdLabelList),
  (int) sizeof(RogueClassString_CmdLabelTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdCreateArray),
  (int) sizeof(RogueClassCmdCreateObject),
  (int) sizeof(RogueClassCmdReadGlobal),
  (int) sizeof(RogueClassCmdReadProperty),
  (int) sizeof(RogueClassCmdWriteSingleton),
  (int) sizeof(RogueClassCmdWriteLocal),
  (int) sizeof(RogueClassCmdModifyAndAssignGlobal),
  (int) sizeof(RogueClassCmdModifyAndAssignProperty),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueCmdTaskControlSectionList),
  (int) sizeof(RogueClassCmdBlock),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_DefinitionList),
  (int) sizeof(RogueClassString_DefinitionTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_PropertyList),
  (int) sizeof(RogueClassString_PropertyTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassString_CmdTable),
  (int) sizeof(RogueClassCmdCallStaticMethod),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_StringList),
  (int) sizeof(RogueClassString_StringTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassDirectiveTokenType),
  (int) sizeof(RogueClassStructuralDirectiveTokenType),
  (int) sizeof(RogueClassEOLTokenType),
  (int) sizeof(RogueClassStructureTokenType),
  (int) sizeof(RogueClassNativeCodeTokenType),
  (int) sizeof(RogueClassModifyAndAssignTokenType),
  (int) sizeof(RogueClassString_TokenListTable),
  (int) sizeof(RogueClassPreprocessorTokenReader),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdSwitch),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdReadArrayElement),
  (int) sizeof(RogueClassCmdWriteArrayElement),
  (int) sizeof(RogueClassCmdConvertToPrimitiveType),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdSelectCaseListReader),
  (int) sizeof(RogueClassCmdSelectCaseReader),
  (int) sizeof(RogueClassCmdAdjustGlobal),
  (int) sizeof(RogueClassCmdAdjustProperty),
  (int) sizeof(RogueTableEntry_of_String_CmdList),
  (int) sizeof(RogueClassString_CmdTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassNativeCodeToken),
  (int) sizeof(RogueTableEntry_of_String_TokenListList),
  (int) sizeof(RogueClassString_TokenListTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueOptionalInt32),
  (int) sizeof(RogueOptionalCharacter),
  (int) sizeof(RogueClassSystemEnvironment)
};

int Rogue_allocator_count = 1;
RogueAllocator Rogue_allocators[1];

int Rogue_type_count = 338;
RogueType Rogue_types[338];

RogueType* RogueTypeReal64;
RogueType* RogueTypeInt64;
RogueType* RogueTypeInt32;
RogueType* RogueTypeStringBuilder;
RogueType* RogueTypeObject;
RogueType* RogueTypeByte;
RogueType* RogueTypeCharacter;
RogueType* RogueTypeLogical;
RogueType* RogueTypeString;
RogueType* RogueTypeCharacterList;
RogueType* RogueTypeGenericList;
RogueType* RogueTypeArray;
RogueType* RogueTypeStringReader;
RogueType* RogueTypeCharacterReader;
RogueType* RogueTypeStringList;
RogueType* RogueTypeGlobal;
RogueType* RogueTypePrintWriterAspect;
RogueType* RogueTypeConsole;
RogueType* RogueTypeCharacterWriter;
RogueType* RogueTypeRogueC;
RogueType* RogueTypeException;
RogueType* RogueTypeStackTrace;
RogueType* RogueTypeProgram;
RogueType* RogueTypeTemplateList;
RogueType* RogueTypeTemplate;
RogueType* RogueTypeString_TemplateTable;
RogueType* RogueTypeString_AugmentListTable;
RogueType* RogueTypeMethod;
RogueType* RogueTypePropertyList;
RogueType* RogueTypeProperty;
RogueType* RogueTypeString_MethodListTable;
RogueType* RogueTypeTypeList;
RogueType* RogueTypeType;
RogueType* RogueTypeString_TypeTable;
RogueType* RogueTypeString_Int32Table;
RogueType* RogueTypeString_StringListTable;
RogueType* RogueTypeString_Int32TableEntry;
RogueType* RogueTypeInt32_TemplateTable;
RogueType* RogueTypeToken;
RogueType* RogueTypeError;
RogueType* RogueTypeRogueError;
RogueType* RogueTypeCmdLabel;
RogueType* RogueTypeCmd;
RogueType* RogueTypeCmdStatementList;
RogueType* RogueTypeCmdList;
RogueType* RogueTypeAttributes;
RogueType* RogueTypeCmdReturn;
RogueType* RogueTypeCmdStatement;
RogueType* RogueTypeTokenType;
RogueType* RogueTypeScope;
RogueType* RogueTypeMethodList;
RogueType* RogueTypeFunction_Type_RETURNSLogical;
RogueType* RogueTypeFunction_159;
RogueType* RogueTypeFunction_160;
RogueType* RogueTypeCPPWriter;
RogueType* RogueTypeString_MethodTable;
RogueType* RogueTypeLocalList;
RogueType* RogueTypeLocal;
RogueType* RogueTypeInt32List;
RogueType* RogueTypeMath;
RogueType* RogueTypeByteList;
RogueType* RogueTypeSystem;
RogueType* RogueTypeReader_of_String;
RogueType* RogueTypeString_LogicalTable;
RogueType* RogueTypeParserList;
RogueType* RogueTypeParser;
RogueType* RogueTypeString_ParseReaderTable;
RogueType* RogueTypeStopwatch;
RogueType* RogueTypeFile;
RogueType* RogueTypeCmdMakeRequisite;
RogueType* RogueTypeTokenList;
RogueType* RogueTypeLineReader;
RogueType* RogueTypeTypeParameterList;
RogueType* RogueTypeTypeParameter;
RogueType* RogueTypeAugmentList;
RogueType* RogueTypeAugment;
RogueType* RogueTypeString_TokenTypeTable;
RogueType* RogueTypeLiteralCharacterToken;
RogueType* RogueTypeLiteralInt64Token;
RogueType* RogueTypeLiteralInt32Token;
RogueType* RogueTypeLiteralReal64Token;
RogueType* RogueTypeStringDataToken;
RogueType* RogueTypeString_TypeSpecializerTable;
RogueType* RogueTypeTypeSpecializer;
RogueType* RogueTypeTypeSpecializerList;
RogueType* RogueTypeTableEntry_of_String_TemplateList;
RogueType* RogueTypeString_TemplateTableEntry;
RogueType* RogueTypeTableEntry_of_String_AugmentListList;
RogueType* RogueTypeString_AugmentListTableEntry;
RogueType* RogueTypeCmdLabelList;
RogueType* RogueTypeString_CmdLabelTable;
RogueType* RogueTypeCloneArgs;
RogueType* RogueTypeCloneMethodArgs;
RogueType* RogueTypeCmdAccess;
RogueType* RogueTypeCmdArgs;
RogueType* RogueTypeCmdFlagArgList;
RogueType* RogueTypeCmdFlagArg;
RogueType* RogueTypeCmdAssign;
RogueType* RogueTypeCmdControlStructureList;
RogueType* RogueTypeCmdControlStructure;
RogueType* RogueTypeCmdLiteralThis;
RogueType* RogueTypeCmdThisContext;
RogueType* RogueTypeCmdGenericLoop;
RogueType* RogueTypeCmdLiteralInt32;
RogueType* RogueTypeCmdLiteral;
RogueType* RogueTypeCmdCompareNE;
RogueType* RogueTypeCmdComparison;
RogueType* RogueTypeCmdBinary;
RogueType* RogueTypeTaskArgs;
RogueType* RogueTypeCmdTaskControl;
RogueType* RogueTypeCmdTaskControlSection;
RogueType* RogueTypeTableEntry_of_String_MethodListList;
RogueType* RogueTypeString_MethodListTableEntry;
RogueType* RogueTypeDefinitionList;
RogueType* RogueTypeDefinition;
RogueType* RogueTypeString_DefinitionTable;
RogueType* RogueTypeNativePropertyList;
RogueType* RogueTypeNativeProperty;
RogueType* RogueTypeString_PropertyTable;
RogueType* RogueTypeCmdLiteralNull;
RogueType* RogueTypeCmdCreateCompound;
RogueType* RogueTypeCmdLiteralLogical;
RogueType* RogueTypeCmdLiteralString;
RogueType* RogueTypeCmdWriteGlobal;
RogueType* RogueTypeCmdWriteProperty;
RogueType* RogueTypeTableEntry_of_String_TypeList;
RogueType* RogueTypeString_TypeTableEntry;
RogueType* RogueTypeTableEntry_of_String_Int32List;
RogueType* RogueTypeTableEntry_of_String_StringListList;
RogueType* RogueTypeString_StringListTableEntry;
RogueType* RogueTypeTableEntry_of_Int32_TemplateList;
RogueType* RogueTypeInt32_TemplateTableEntry;
RogueType* RogueTypeCmdCastToType;
RogueType* RogueTypeCmdTypeOperator;
RogueType* RogueTypeCmdLogicalize;
RogueType* RogueTypeCmdUnary;
RogueType* RogueTypeCmdReadSingleton;
RogueType* RogueTypeCmdCallInlineNativeRoutine;
RogueType* RogueTypeCmdCallInlineNative;
RogueType* RogueTypeCmdCall;
RogueType* RogueTypeCmdCallNativeRoutine;
RogueType* RogueTypeMacroArgs;
RogueType* RogueTypeCmdInlineNative;
RogueType* RogueTypeCmdCallRoutine;
RogueType* RogueTypeCmdReadArrayCount;
RogueType* RogueTypeCmdCallInlineNativeMethod;
RogueType* RogueTypeCmdCallNativeMethod;
RogueType* RogueTypeCmdCallAspectMethod;
RogueType* RogueTypeCmdCallDynamicMethod;
RogueType* RogueTypeCmdCallMethod;
RogueType* RogueTypeCandidateMethods;
RogueType* RogueTypeCmdCreateFunction;
RogueType* RogueTypeFnParamList;
RogueType* RogueTypeFnParam;
RogueType* RogueTypeCmdReadLocal;
RogueType* RogueTypeTableEntry_of_String_MethodList;
RogueType* RogueTypeString_MethodTableEntry;
RogueType* RogueTypeTableEntry_of_String_LogicalList;
RogueType* RogueTypeString_LogicalTableEntry;
RogueType* RogueTypeTokenReader;
RogueType* RogueTypeString_StringTable;
RogueType* RogueTypeTokenizer;
RogueType* RogueTypeParseReader;
RogueType* RogueTypePreprocessor;
RogueType* RogueTypeEOLToken;
RogueType* RogueTypeCmdAdd;
RogueType* RogueTypeCmdNativeHeader;
RogueType* RogueTypeCmdNativeCode;
RogueType* RogueTypeCmdIf;
RogueType* RogueTypeCmdWhich;
RogueType* RogueTypeCmdContingent;
RogueType* RogueTypeCmdTry;
RogueType* RogueTypeCmdAwait;
RogueType* RogueTypeCmdYield;
RogueType* RogueTypeCmdThrow;
RogueType* RogueTypeCmdFormattedString;
RogueType* RogueTypeCmdTrace;
RogueType* RogueTypeCmdEscape;
RogueType* RogueTypeCmdNextIteration;
RogueType* RogueTypeCmdNecessary;
RogueType* RogueTypeCmdSufficient;
RogueType* RogueTypeCmdAdjust;
RogueType* RogueTypeCmdModifyAndAssign;
RogueType* RogueTypeCmdWhichCaseList;
RogueType* RogueTypeCmdWhichCase;
RogueType* RogueTypeCmdCatchList;
RogueType* RogueTypeCmdCatch;
RogueType* RogueTypeCmdLocalDeclaration;
RogueType* RogueTypeCmdAdjustLocal;
RogueType* RogueTypeCmdCompareLE;
RogueType* RogueTypeCmdRange;
RogueType* RogueTypeCmdModifyAndAssignLocal;
RogueType* RogueTypeCmdResolvedModifyAndAssign;
RogueType* RogueTypeCmdRangeUpTo;
RogueType* RogueTypeCmdCompareGE;
RogueType* RogueTypeCmdForEach;
RogueType* RogueTypeCmdRangeDownTo;
RogueType* RogueTypeCmdLogicalXor;
RogueType* RogueTypeCmdBinaryLogical;
RogueType* RogueTypeCmdLogicalOr;
RogueType* RogueTypeCmdLogicalAnd;
RogueType* RogueTypeCmdCompareEQ;
RogueType* RogueTypeCmdCompareIs;
RogueType* RogueTypeCmdCompareIsNot;
RogueType* RogueTypeCmdCompareLT;
RogueType* RogueTypeCmdCompareGT;
RogueType* RogueTypeCmdInstanceOf;
RogueType* RogueTypeCmdLogicalNot;
RogueType* RogueTypeCmdBitwiseXor;
RogueType* RogueTypeCmdBitwiseOp;
RogueType* RogueTypeCmdBitwiseOr;
RogueType* RogueTypeCmdBitwiseAnd;
RogueType* RogueTypeCmdBitwiseShiftLeft;
RogueType* RogueTypeCmdBitwiseShiftRight;
RogueType* RogueTypeCmdBitwiseShiftRightX;
RogueType* RogueTypeCmdSubtract;
RogueType* RogueTypeCmdMultiply;
RogueType* RogueTypeCmdDivide;
RogueType* RogueTypeCmdMod;
RogueType* RogueTypeCmdPower;
RogueType* RogueTypeCmdNegate;
RogueType* RogueTypeCmdBitwiseNot;
RogueType* RogueTypeCmdElementAccess;
RogueType* RogueTypeCmdListConvert;
RogueType* RogueTypeCmdConvertToType;
RogueType* RogueTypeCmdCreateCallback;
RogueType* RogueTypeCmdAs;
RogueType* RogueTypeCmdDefaultValue;
RogueType* RogueTypeCmdLiteralReal64;
RogueType* RogueTypeCmdLiteralInt64;
RogueType* RogueTypeCmdLiteralCharacter;
RogueType* RogueTypeCmdCreateList;
RogueType* RogueTypeCmdCallPriorMethod;
RogueType* RogueTypeFnArgList;
RogueType* RogueTypeFnArg;
RogueType* RogueTypeCmdSelect;
RogueType* RogueTypeCmdSelectCaseList;
RogueType* RogueTypeCmdSelectCase;
RogueType* RogueTypeCmdTypedLiteralList;
RogueType* RogueTypeTableEntry_of_String_ParseReaderList;
RogueType* RogueTypeString_ParseReaderTableEntry;
RogueType* RogueTypeIOError;
RogueType* RogueTypeFileReader;
RogueType* RogueTypeFileWriter;
RogueType* RogueTypeCmdNoAction;
RogueType* RogueTypeTokenListRebuilder;
RogueType* RogueTypeTableEntry_of_String_TokenTypeList;
RogueType* RogueTypeString_TokenTypeTableEntry;
RogueType* RogueTypeTableEntry_of_String_TypeSpecializerList;
RogueType* RogueTypeString_TypeSpecializerTableEntry;
RogueType* RogueTypeTableEntry_of_String_CmdLabelList;
RogueType* RogueTypeString_CmdLabelTableEntry;
RogueType* RogueTypeCmdCreateArray;
RogueType* RogueTypeCmdCreateObject;
RogueType* RogueTypeCmdReadGlobal;
RogueType* RogueTypeCmdReadProperty;
RogueType* RogueTypeCmdWriteSingleton;
RogueType* RogueTypeCmdWriteLocal;
RogueType* RogueTypeCmdModifyAndAssignGlobal;
RogueType* RogueTypeCmdModifyAndAssignProperty;
RogueType* RogueTypeCmdTaskControlSectionList;
RogueType* RogueTypeCmdBlock;
RogueType* RogueTypeTableEntry_of_String_DefinitionList;
RogueType* RogueTypeString_DefinitionTableEntry;
RogueType* RogueTypeTableEntry_of_String_PropertyList;
RogueType* RogueTypeString_PropertyTableEntry;
RogueType* RogueTypeString_CmdTable;
RogueType* RogueTypeCmdCallStaticMethod;
RogueType* RogueTypeTableEntry_of_String_StringList;
RogueType* RogueTypeString_StringTableEntry;
RogueType* RogueTypeDirectiveTokenType;
RogueType* RogueTypeStructuralDirectiveTokenType;
RogueType* RogueTypeEOLTokenType;
RogueType* RogueTypeStructureTokenType;
RogueType* RogueTypeNativeCodeTokenType;
RogueType* RogueTypeModifyAndAssignTokenType;
RogueType* RogueTypeString_TokenListTable;
RogueType* RogueTypePreprocessorTokenReader;
RogueType* RogueTypeCmdSwitch;
RogueType* RogueTypeCmdReadArrayElement;
RogueType* RogueTypeCmdWriteArrayElement;
RogueType* RogueTypeCmdConvertToPrimitiveType;
RogueType* RogueTypeCmdSelectCaseListReader;
RogueType* RogueTypeCmdSelectCaseReader;
RogueType* RogueTypeCmdAdjustGlobal;
RogueType* RogueTypeCmdAdjustProperty;
RogueType* RogueTypeTableEntry_of_String_CmdList;
RogueType* RogueTypeString_CmdTableEntry;
RogueType* RogueTypeNativeCodeToken;
RogueType* RogueTypeTableEntry_of_String_TokenListList;
RogueType* RogueTypeString_TokenListTableEntry;
RogueType* RogueTypeOptionalInt32;
RogueType* RogueTypeOptionalCharacter;
RogueType* RogueTypeSystemEnvironment;

int Rogue_literal_string_count = 1186;
RogueString* Rogue_literal_strings[1186];

void RogueStringBuilder__init_class()
{
  RogueStringBuilder_work_bytes = ((RogueByteList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueByteList*,ROGUE_CREATE_OBJECT(ByteList))) )));
}

void RogueCmdStatementList__init_class()
{
}

void RogueTokenType__init_class()
{
}

RogueInt32 RogueMath__max__Int32_Int32( RogueInt32 a_0, RogueInt32 b_1 )
{
  if (a_0 >= b_1)
  {
    return (RogueInt32)(a_0);
  }
  else
  {
    return (RogueInt32)(b_1);
  }
}

RogueInt32 RogueMath__mod__Int32_Int32( RogueInt32 a_0, RogueInt32 b_1 )
{
  if (((!(!!(a_0)) && !(!!(b_1))) || b_1 == 1))
  {
    return (RogueInt32)(0);
  }
  RogueInt32 r_2 = (a_0 % b_1);
  if ((a_0 ^ b_1) < 0)
  {
    if (!!(r_2))
    {
      return (RogueInt32)((r_2 + b_1));
    }
    else
    {
      return (RogueInt32)(0);
    }
  }
  else
  {
    return (RogueInt32)(r_2);
  }
}

RogueInt64 RogueMath__mod__Int64_Int64( RogueInt64 a_0, RogueInt64 b_1 )
{
  if (((!(!!(a_0)) && !(!!(b_1))) || b_1 == ((RogueInt64)1)))
  {
    return (RogueInt64)(((RogueInt64)0));
  }
  RogueInt64 r_2 = (a_0 % b_1);
  if ((a_0 ^ b_1) < ((RogueInt64)0))
  {
    if (!!(r_2))
    {
      return (RogueInt64)((r_2 + b_1));
    }
    else
    {
      return (RogueInt64)(((RogueInt64)0));
    }
  }
  else
  {
    return (RogueInt64)(r_2);
  }
}

RogueReal64 RogueMath__mod__Real64_Real64( RogueReal64 a_0, RogueReal64 b_1 )
{
  RogueReal64 q_2 = ((a_0 / b_1));
  return (RogueReal64)((a_0 - (floor((double)q_2) * b_1)));
}

RogueInt32 RogueMath__shift_right__Int32_Int32( RogueInt32 value_0, RogueInt32 bits_1 )
{
  if (bits_1 <= 0)
  {
    return (RogueInt32)(value_0);
  }
  --bits_1;
  if (!!(bits_1))
  {
    return (RogueInt32)((((value_0 >> 1) & 2147483647) >> bits_1));
  }
  else
  {
    return (RogueInt32)(((value_0 >> 1) & 2147483647));
  }
}

void RogueSystem__init_class()
{
  RogueSystem_command_line_arguments = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  ROGUE_DEF_LOCAL_REF(RogueString*,value_0,(((RogueSystemEnvironment__get__String( ROGUE_ARG(RogueSystem_environment), Rogue_literal_strings[1] )))));
  if (((void*)value_0) != ((void*)NULL))
  {
    RogueReal64 n_1 = (((RogueString__to_Real64( value_0 ))));
    if ((((RogueString__ends_with__String( value_0, ROGUE_ARG(((RogueCharacter__to_String( (RogueCharacter)'M' )))) ))) || ((RogueString__ends_with__String( value_0, Rogue_literal_strings[3] )))))
    {
      n_1 *= 1048576.0;
    }
    else if ((((RogueString__ends_with__String( value_0, ROGUE_ARG(((RogueCharacter__to_String( (RogueCharacter)'K' )))) ))) || ((RogueString__ends_with__String( value_0, Rogue_literal_strings[4] )))))
    {
      n_1 *= 1024.0;
    }
    RogueSystem__set_gc_threshold__Int32( ROGUE_ARG(((RogueInt32)(n_1))) );
  }
}

void RogueSystem__exit__Int32( RogueInt32 result_code_0 )
{
  exit( result_code_0 );

}

RogueInt32 RogueSystem__run__String( RogueString* command_0 )
{
  RogueInt32 return_val_1 = (0);
  char cmd_buffer[4096];
  RogueString_to_c_string( command_0, cmd_buffer, 4096 );
  return_val_1 = system( cmd_buffer );

  if (return_val_1 == -1)
  {
    ROGUE_THROW(((RogueClassError*)(((RogueException__init__String( ROGUE_ARG(((RogueClassException*)ROGUE_CREATE_REF(RogueClassError*,ROGUE_CREATE_OBJECT(Error)))), Rogue_literal_strings[629] ))))));
  }
  return (RogueInt32)(return_val_1);
}

void RogueSystem__set_gc_threshold__Int32( RogueInt32 value_0 )
{
  if (value_0 <= 0)
  {
    value_0 = ((RogueInt32)2147483647);
  }
  Rogue_gc_threshold = value_0;

}

RogueReal64 RogueSystem__time()
{
#if defined(_WIN32)
    struct __timeb64 time_struct;
    RogueReal64 time_seconds;
    _ftime64_s( &time_struct );
    time_seconds = (RogueReal64) time_struct.time;
    time_seconds += time_struct.millitm / 1000.0;
    return time_seconds;
#else
    struct timeval time_struct;
    RogueReal64 time_seconds;
    gettimeofday( &time_struct, 0 );
    time_seconds = (RogueReal64) time_struct.tv_sec;
    time_seconds += (time_struct.tv_usec / 1000000.0);
    return time_seconds;
#endif

}

RogueString* RogueFile__absolute_filepath__String( RogueString* filepath_0 )
{
  if (!(!!(filepath_0)))
  {
    return (RogueString*)(((RogueString*)(NULL)));
  }
  if (!((RogueFile__exists__String( filepath_0 ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,parent_1,((RogueFile__path__String( filepath_0 ))));
    if (parent_1->count == 0)
    {
      parent_1 = ((RogueString*)Rogue_literal_strings[64]);
    }
    return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((RogueFile__absolute_filepath__String( parent_1 ))) )))) )))), Rogue_literal_strings[61] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((RogueFile__filename__String( filepath_0 ))) )))) )))) ))));
  }
  ROGUE_DEF_LOCAL_REF(RogueString*,return_value_2,0);
#if defined(_WIN32)
  {
    char c_filepath[ PATH_MAX ];
    RogueString_to_c_string( filepath_0, c_filepath, PATH_MAX );
    char long_name[PATH_MAX+4];
    char full_name[PATH_MAX+4];
    if (GetInt64PathName(c_filepath, long_name, PATH_MAX+4) == 0)
    {
      strcpy_s( long_name, PATH_MAX+4, c_filepath );
    }
    if (GetFullPathName(long_name, PATH_MAX+4, full_name, 0) != 0)
    {
      return_value_2 = RogueString_create_from_c_string( full_name, -1 );
    }
  }
#else
  {
    int original_dir_fd;
    int new_dir_fd;
    char filename[PATH_MAX];
    char c_filepath[ PATH_MAX ];
    bool is_folder;
    is_folder = RogueFile__is_folder__String( filepath_0 );
    RogueString_to_c_string( filepath_0, c_filepath, PATH_MAX );
    // A way to get back to the starting folder when finished.
    original_dir_fd = open( ".", O_RDONLY );
    if (is_folder)
    {
      filename[0] = 0;
    }
    else
    {
      // fchdir only works with a path, not a path+filename (c_filepath).
      // Copy out the filename and null terminate the filepath to be just a path.
      int i = (int) strlen( c_filepath ) - 1;
      while (i >= 0 && c_filepath[i] != '/') --i;
      strcpy( filename, c_filepath+i+1 );
      if (i == -1) strcpy( c_filepath, "." );
      else         c_filepath[i] = 0;
    }
    new_dir_fd = open( c_filepath, O_RDONLY );
    do
    {
      if (original_dir_fd >= 0 && new_dir_fd >= 0)
      {
        int r = fchdir( new_dir_fd );
        if ( r != 0 ) break;
        char * r2 = getcwd( c_filepath, PATH_MAX );
        if ( r2 == 0 ) break;
        if ( !is_folder )
        {
          strcat( c_filepath, "/" );
          strcat( c_filepath, filename );
        }
        r = fchdir( original_dir_fd );
        if ( r != 0 ) break;
      }
      return_value_2 = RogueString_create_from_c_string( c_filepath, -1 );
    } while (false);
    if (original_dir_fd >= 0) close( original_dir_fd );
    if (new_dir_fd >= 0) close( new_dir_fd );
  }
#endif

  if (((void*)return_value_2) == ((void*)NULL))
  {
    ROGUE_THROW(((RogueClassIOError*)(((RogueException__init__String( ROGUE_ARG(((RogueClassException*)ROGUE_CREATE_REF(RogueClassIOError*,ROGUE_CREATE_OBJECT(IOError)))), Rogue_literal_strings[65] ))))));
  }
  return (RogueString*)(return_value_2);
}

RogueLogical RogueFile__exists__String( RogueString* filepath_0 )
{
  if ( !filepath_0 ) return false;
  char c_filepath[ PATH_MAX ];
  RogueString_to_c_string( filepath_0, c_filepath, PATH_MAX );
  FILE* fp = fopen( c_filepath, "rb" );
  if ( !fp ) return false;
  fclose( fp );
  return true;

}

RogueString* RogueFile__filename__String( RogueString* filepath_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate_last__Character_OptionalInt32( filepath_0, (RogueCharacter)'/', ROGUE_ARG((RogueOptionalInt32__create())) ))));
  if (!(i_1.exists))
  {
    i_1 = ((RogueOptionalInt32)((RogueString__locate_last__Character_OptionalInt32( filepath_0, (RogueCharacter)'\\', ROGUE_ARG((RogueOptionalInt32__create())) ))));
  }
  if (!(i_1.exists))
  {
    return (RogueString*)(filepath_0);
  }
  return (RogueString*)(((RogueString__from__Int32( filepath_0, ROGUE_ARG((i_1.value + 1)) ))));
}

RogueLogical RogueFile__is_folder__String( RogueString* filepath_0 )
{
  if ( !filepath_0 ) return false;
  char c_filepath[ PATH_MAX ];
  RogueString_to_c_string( filepath_0, c_filepath, PATH_MAX );
#if defined(_WIN32)
    char filepath_copy[PATH_MAX];
    strcpy( filepath_copy, c_filepath );
    int path_len = strlen( c_filepath );
    int i = strlen(filepath_copy)-1;
    while (i > 0 && (filepath_copy[i] == '/' || filepath_copy[i] == '\\')) filepath_copy[i--] = 0;
    // Windows allows dir\* to count as a directory; guard against.
    for (i=0; filepath_copy[i]; ++i)
    {
      if (filepath_copy[i] == '*' || filepath_copy[i] == '?') return 0;
    }
    WIN32_FIND_DATA entry;
    HANDLE dir = FindFirstFile( filepath_copy, &entry );
    if (dir != INVALID_HANDLE_VALUE)
    {
      if (entry.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
      {
        FindClose( dir );
        return 1;
      }
    }
    FindClose( dir );
    return 0;
#else
    DIR* dir = opendir( c_filepath );
    if ( !dir ) return 0;
    closedir( dir );
    return 1;
#endif

}

RogueString* RogueFile__load_as_string__String( RogueString* filepath_0 )
{
  RogueInt32 count_1 = ((RogueFile__size__String( filepath_0 )));
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_2,(((RogueStringBuilder__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))), count_1 )))));
  ROGUE_DEF_LOCAL_REF(RogueClassFileReader*,infile_3,((RogueFile__reader__String( filepath_0 ))));
  {
    RogueInt32 _auto_372_4 = (1);
    RogueInt32 _auto_373_5 = (count_1);
    for (;_auto_372_4 <= _auto_373_5;++_auto_372_4)
    {
      RogueStringBuilder__print__Character( buffer_2, ROGUE_ARG(((RogueFileReader__read( infile_3 )))) );
    }
  }
  RogueFileReader__close( infile_3 );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_2 ))));
}

RogueString* RogueFile__path__String( RogueString* filepath_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate_last__Character_OptionalInt32( filepath_0, (RogueCharacter)'/', ROGUE_ARG((RogueOptionalInt32__create())) ))));
  if (!(i_1.exists))
  {
    i_1 = ((RogueOptionalInt32)((RogueString__locate_last__Character_OptionalInt32( filepath_0, (RogueCharacter)'\\', ROGUE_ARG((RogueOptionalInt32__create())) ))));
  }
  if (!(i_1.exists))
  {
    return (RogueString*)(Rogue_literal_strings[0]);
  }
  return (RogueString*)(((RogueString__from__Int32_Int32( filepath_0, 0, ROGUE_ARG((i_1.value - 1)) ))));
}

RogueClassFileReader* RogueFile__reader__String( RogueString* filepath_0 )
{
  return (RogueClassFileReader*)(((RogueFileReader__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassFileReader*,ROGUE_CREATE_OBJECT(FileReader))), filepath_0 ))));
}

RogueLogical RogueFile__save__String_String( RogueString* filepath_0, RogueString* data_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassFileWriter*,outfile_2,((RogueFile__writer__String( filepath_0 ))));
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,_auto_1364_3,(data_1));
    RogueInt32 _auto_1365_4 = (0);
    for (;_auto_1365_4 < _auto_1364_3->count;++_auto_1365_4)
    {
      RogueCharacter ch_5 = (_auto_1364_3->characters[_auto_1365_4]);
      RogueFileWriter__write__Character( outfile_2, ch_5 );
    }
  }
  RogueFileWriter__close( outfile_2 );
  return (RogueLogical)(!(outfile_2->error));
}

RogueInt32 RogueFile__size__String( RogueString* filepath_0 )
{
  if ( !filepath_0 ) return 0;
  char c_filepath[ PATH_MAX ];
  RogueString_to_c_string( filepath_0, c_filepath, sizeof(c_filepath) );
  FILE* fp = fopen( c_filepath, "rb" );
  if ( !fp ) return 0;
  fseek( fp, 0, SEEK_END );
  RogueInt32 size = (RogueInt32) ftell( fp );
  fclose( fp );
  return size;

}

RogueClassFileWriter* RogueFile__writer__String( RogueString* filepath_0 )
{
  return (RogueClassFileWriter*)(((RogueFileWriter__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassFileWriter*,ROGUE_CREATE_OBJECT(FileWriter))), filepath_0 ))));
}

void RoguePreprocessor__init_class()
{
  RoguePreprocessor_definitions = ((RogueString_TokenListTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_TokenListTable*,ROGUE_CREATE_OBJECT(String_TokenListTable))) )));
}

RogueOptionalInt32 RogueOptionalInt32__create()
{
  RogueInt32 default_value_0 = 0;
  return (RogueOptionalInt32)(RogueOptionalInt32( default_value_0, false ));
}


RogueLogical RogueReal64__is_infinite( RogueReal64 THIS )
{
  return (RogueLogical)((THIS == THIS && (THIS - THIS) != 0.0));
}

RogueLogical RogueReal64__is_not_a_number( RogueReal64 THIS )
{
  return (RogueLogical)(THIS != THIS);
}

RogueStringBuilder* RogueInt64__print_in_power2_base__Int32_Int32_StringBuilder( RogueInt64 THIS, RogueInt32 base_0, RogueInt32 digits_1, RogueStringBuilder* buffer_2 )
{
  RogueInt32 bits_3 = (0);
  RogueInt32 temp_4 = (base_0);
  while (temp_4 > 1)
  {
    ++bits_3;
    temp_4 = ((RogueInt32)(temp_4 >> 1));
  }
  if (digits_1 > 1)
  {
    RogueInt64__print_in_power2_base__Int32_Int32_StringBuilder( ROGUE_ARG((THIS >> ((RogueInt64)bits_3))), base_0, ROGUE_ARG((digits_1 - 1)), buffer_2 );
  }
  RogueStringBuilder__print__Character( buffer_2, ROGUE_ARG(((RogueInt32__to_digit( ROGUE_ARG(((RogueInt32)((THIS & ((RogueInt64)(base_0 - 1)))))) )))) );
  return (RogueStringBuilder*)(buffer_2);
}

RogueString* RogueInt64__to_hex_string__Int32( RogueInt64 THIS, RogueInt32 digits_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueInt64__print_in_power2_base__Int32_Int32_StringBuilder( ROGUE_ARG(THIS), 16, digits_0, ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))) )))) ))));
}

RogueInt32 RogueInt32__hash_code( RogueInt32 THIS )
{
  return (RogueInt32)(THIS);
}

RogueString* RogueInt32__to_String( RogueInt32 THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], ROGUE_ARG(THIS) ))));
}

RogueCharacter RogueInt32__to_digit( RogueInt32 THIS )
{
  if ((THIS >= 0 && THIS <= 9))
  {
    return (RogueCharacter)(((RogueCharacter)((THIS + ((RogueInt32)((RogueCharacter)'0'))))));
  }
  if ((THIS >= 10 && THIS <= 35))
  {
    return (RogueCharacter)(((RogueCharacter)(((THIS - 10) + ((RogueInt32)((RogueCharacter)'A'))))));
  }
  return (RogueCharacter)((RogueCharacter)'0');
}

RogueString* RogueStringBuilder__to_String( RogueStringBuilder* THIS )
{
  return (RogueString*)(RogueString_create_from_characters( THIS->characters ));
}

RogueString* RogueStringBuilder__type_name( RogueStringBuilder* THIS )
{
  return (RogueString*)(Rogue_literal_strings[54]);
}

RogueStringBuilder* RogueStringBuilder__init( RogueStringBuilder* THIS )
{
  RogueStringBuilder__init__Int32( ROGUE_ARG(THIS), 40 );
  return (RogueStringBuilder*)(THIS);
}

RogueStringBuilder* RogueStringBuilder__init__Int32( RogueStringBuilder* THIS, RogueInt32 initial_capacity_0 )
{
  THIS->characters = ((RogueCharacterList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueCharacterList*,ROGUE_CREATE_OBJECT(CharacterList))), initial_capacity_0 )));
  return (RogueStringBuilder*)(THIS);
}

RogueStringBuilder* RogueStringBuilder__clear( RogueStringBuilder* THIS )
{
  RogueCharacterList__clear( ROGUE_ARG(THIS->characters) );
  THIS->at_newline = true;
  return (RogueStringBuilder*)(THIS);
}

RogueStringBuilder* RogueStringBuilder__insert_spaces__Int32_Int32_Character( RogueStringBuilder* THIS, RogueInt32 index_0, RogueInt32 spaces_1, RogueCharacter character_2 )
{
  if (((spaces_1 > 0 && index_0 >= 0) && index_0 < THIS->characters->count))
  {
    RogueCharacterList__shift__Int32_OptionalInt32_Int32_OptionalCharacter( ROGUE_ARG(THIS->characters), index_0, ROGUE_ARG((RogueOptionalInt32__create())), spaces_1, ROGUE_ARG(RogueOptionalCharacter( character_2, true )) );
  }
  return (RogueStringBuilder*)(THIS);
}

RogueLogical RogueStringBuilder__needs_indent( RogueStringBuilder* THIS )
{
  return (RogueLogical)((THIS->at_newline && THIS->indent > 0));
}

RogueStringBuilder* RogueStringBuilder__print__Character( RogueStringBuilder* THIS, RogueCharacter value_0 )
{
  if (value_0 == (RogueCharacter)10)
  {
    THIS->at_newline = true;
  }
  else if (((RogueStringBuilder__needs_indent( ROGUE_ARG(THIS) ))))
  {
    RogueStringBuilder__print_indent( ROGUE_ARG(THIS) );
  }
  RogueCharacterList__add__Character( ROGUE_ARG(THIS->characters), value_0 );
  return (RogueStringBuilder*)(THIS);
}

RogueStringBuilder* RogueStringBuilder__print__Int32( RogueStringBuilder* THIS, RogueInt32 value_0 )
{
  return (RogueStringBuilder*)(((RogueStringBuilder__print__Int64( ROGUE_ARG(THIS), ROGUE_ARG(((RogueInt64)(value_0))) ))));
}

RogueStringBuilder* RogueStringBuilder__print__Logical( RogueStringBuilder* THIS, RogueLogical value_0 )
{
  if (value_0)
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[183] ))));
  }
  else
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[172] ))));
  }
}

RogueStringBuilder* RogueStringBuilder__print__Int64( RogueStringBuilder* THIS, RogueInt64 value_0 )
{
  if (value_0 == (((RogueInt64)(1)) << ((RogueInt64)63)))
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[241] ))));
  }
  else if (value_0 < ((RogueInt64)0))
  {
    RogueStringBuilder__print__Character( ROGUE_ARG(THIS), (RogueCharacter)'-' );
    return (RogueStringBuilder*)(((RogueStringBuilder__print__Int64( ROGUE_ARG(THIS), ROGUE_ARG((-(value_0))) ))));
  }
  else if (value_0 >= ((RogueInt64)10))
  {
    RogueStringBuilder__print__Int64( ROGUE_ARG(THIS), ROGUE_ARG((value_0 / ((RogueInt64)10))) );
    return (RogueStringBuilder*)(((RogueStringBuilder__print__Character( ROGUE_ARG(THIS), ROGUE_ARG(((RogueCharacter)((((RogueInt64)((RogueCharacter)'0')) + (RogueMath__mod__Int64_Int64( value_0, ROGUE_ARG(((RogueInt64)10)) )))))) ))));
  }
  else
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__Character( ROGUE_ARG(THIS), ROGUE_ARG(((RogueCharacter)((((RogueInt64)((RogueCharacter)'0')) + value_0)))) ))));
  }
}

RogueStringBuilder* RogueStringBuilder__print__Object( RogueStringBuilder* THIS, RogueObject* value_0 )
{
  if (!!(value_0))
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__String( ROGUE_ARG(THIS), ROGUE_ARG((call_ROGUEM2( 1, value_0 ))) ))));
  }
  return (RogueStringBuilder*)(((RogueStringBuilder__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[2] ))));
}

RogueStringBuilder* RogueStringBuilder__print__Real64( RogueStringBuilder* THIS, RogueReal64 value_0 )
{
  if (value_0 == 0.0)
  {
    RogueStringBuilder__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[800] );
    return (RogueStringBuilder*)(THIS);
  }
  else if (((RogueReal64__is_infinite( value_0 ))))
  {
    if (value_0 < 0.0)
    {
      RogueStringBuilder__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[632] );
    }
    else
    {
      RogueStringBuilder__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[174] );
    }
    return (RogueStringBuilder*)(THIS);
  }
  else if (((RogueReal64__is_not_a_number( value_0 ))))
  {
    RogueStringBuilder__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[176] );
    return (RogueStringBuilder*)(THIS);
  }
  if (value_0 < 0.0)
  {
    RogueStringBuilder__print__Character( ROGUE_ARG(THIS), (RogueCharacter)'-' );
    value_0 = ((RogueReal64)(-(value_0)));
  }
  if (value_0 >= 1.0e15)
  {
    RogueInt32 pow10_1 = (0);
    while (value_0 >= 10.0)
    {
      value_0 /= 10.0;
      ++pow10_1;
    }
    return (RogueStringBuilder*)(((RogueStringBuilder__print__Int32( ROGUE_ARG(((RogueStringBuilder__print__Character( ROGUE_ARG(((RogueStringBuilder__print__Real64( ROGUE_ARG(THIS), value_0 )))), (RogueCharacter)'e' )))), pow10_1 ))));
  }
  if (value_0 < 0.00001)
  {
    RogueInt32 pow10_2 = (0);
    while (value_0 < 0.1)
    {
      value_0 *= 10.0;
      --pow10_2;
    }
    return (RogueStringBuilder*)(((RogueStringBuilder__print__Int32( ROGUE_ARG(((RogueStringBuilder__print__Character( ROGUE_ARG(((RogueStringBuilder__print__Real64( ROGUE_ARG(THIS), value_0 )))), (RogueCharacter)'e' )))), pow10_2 ))));
  }
  {
    RogueInt32 decimal_count_3 = (1);
    RogueInt32 _auto_0_4 = (18);
    for (;decimal_count_3 <= _auto_0_4;++decimal_count_3)
    {
      RogueStringBuilder__print_to_work_bytes__Real64_Int32( ROGUE_ARG(THIS), value_0, decimal_count_3 );
      if (((RogueStringBuilder__scan_work_bytes( ROGUE_ARG(THIS) ))) == value_0)
      {
        goto _auto_288;
      }
    }
  }
  _auto_288:;
  RogueStringBuilder__print_work_bytes( ROGUE_ARG(THIS) );
  return (RogueStringBuilder*)(THIS);
}

RogueStringBuilder* RogueStringBuilder__print__Real64_Int32( RogueStringBuilder* THIS, RogueReal64 value_0, RogueInt32 decimal_places_1 )
{
  if (((RogueReal64__is_infinite( value_0 ))))
  {
    if (value_0 < 0.0)
    {
      RogueStringBuilder__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[632] );
    }
    else
    {
      RogueStringBuilder__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[174] );
    }
    return (RogueStringBuilder*)(THIS);
  }
  else if (((RogueReal64__is_not_a_number( value_0 ))))
  {
    RogueStringBuilder__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[176] );
    return (RogueStringBuilder*)(THIS);
  }
  if (value_0 < 0.0)
  {
    RogueStringBuilder__print__Character( ROGUE_ARG(THIS), (RogueCharacter)'-' );
    value_0 = ((RogueReal64)(-(value_0)));
  }
  RogueStringBuilder__print_to_work_bytes__Real64_Int32( ROGUE_ARG(THIS), value_0, decimal_places_1 );
  RogueStringBuilder__print_work_bytes( ROGUE_ARG(THIS) );
  return (RogueStringBuilder*)(THIS);
}

RogueStringBuilder* RogueStringBuilder__print__String( RogueStringBuilder* THIS, RogueString* value_0 )
{
  if (!!(value_0))
  {
    if (!!(THIS->indent))
    {
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,_auto_289_1,(value_0));
        RogueInt32 _auto_290_2 = (0);
        for (;_auto_290_2 < _auto_289_1->count;++_auto_290_2)
        {
          RogueCharacter ch_3 = (_auto_289_1->characters[_auto_290_2]);
          RogueStringBuilder__print__Character( ROGUE_ARG(THIS), ch_3 );
        }
      }
    }
    else
    {
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,_auto_291_4,(value_0));
        RogueInt32 _auto_292_5 = (0);
        for (;_auto_292_5 < _auto_291_4->count;++_auto_292_5)
        {
          RogueCharacter ch_6 = (_auto_291_4->characters[_auto_292_5]);
          RogueCharacterList__add__Character( ROGUE_ARG(THIS->characters), ch_6 );
        }
      }
      if ((!!(value_0->count) && ((RogueString__last( value_0 ))) == (RogueCharacter)10))
      {
        THIS->at_newline = true;
      }
    }
    return (RogueStringBuilder*)(THIS);
  }
  else
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[2] ))));
  }
}

void RogueStringBuilder__print_indent( RogueStringBuilder* THIS )
{
  if ((!(((RogueStringBuilder__needs_indent( ROGUE_ARG(THIS) )))) || THIS->indent == 0))
  {
    return;
  }
  {
    RogueInt32 i_0 = (1);
    RogueInt32 _auto_1_1 = (THIS->indent);
    for (;i_0 <= _auto_1_1;++i_0)
    {
      RogueCharacterList__add__Character( ROGUE_ARG(THIS->characters), (RogueCharacter)' ' );
    }
  }
  THIS->at_newline = false;
}

RogueStringBuilder* RogueStringBuilder__print_to_work_bytes__Real64_Int32( RogueStringBuilder* THIS, RogueReal64 value_0, RogueInt32 decimal_places_1 )
{
  RogueByteList__clear( ROGUE_ARG(RogueStringBuilder_work_bytes) );
  RogueReal64 whole_2 = (floor((double)value_0));
  value_0 -= whole_2;
  while (whole_2 >= 10.0)
  {
    RogueByteList__add__Byte( ROGUE_ARG(RogueStringBuilder_work_bytes), ROGUE_ARG(((RogueByte)(((RogueCharacter)((((RogueInt32)((RogueCharacter)'0')) + ((RogueInt32)((RogueMath__mod__Real64_Real64( whole_2, 10.0 )))))))))) );
    whole_2 /= 10.0;
  }
  RogueByteList__add__Byte( ROGUE_ARG(RogueStringBuilder_work_bytes), ROGUE_ARG(((RogueByte)(((RogueCharacter)((((RogueInt32)((RogueCharacter)'0')) + ((RogueInt32)((RogueMath__mod__Real64_Real64( whole_2, 10.0 )))))))))) );
  RogueByteList__reverse( ROGUE_ARG(RogueStringBuilder_work_bytes) );
  if (decimal_places_1 != 0)
  {
    RogueByteList__add__Byte( ROGUE_ARG(RogueStringBuilder_work_bytes), ROGUE_ARG(((RogueByte)((RogueCharacter)'.'))) );
    {
      RogueInt32 _auto_2_3 = (1);
      RogueInt32 _auto_3_4 = (decimal_places_1);
      for (;_auto_2_3 <= _auto_3_4;++_auto_2_3)
      {
        value_0 *= 10.0;
        RogueInt32 digit_5 = (((RogueInt32)(floor((double)value_0))));
        value_0 -= ((RogueReal64)(digit_5));
        RogueByteList__add__Byte( ROGUE_ARG(RogueStringBuilder_work_bytes), ROGUE_ARG(((RogueByte)(((RogueCharacter)((((RogueInt32)((RogueCharacter)'0')) + digit_5)))))) );
      }
    }
  }
  if (value_0 >= 0.5)
  {
    RogueByteList__add__Byte( ROGUE_ARG(RogueStringBuilder_work_bytes), ROGUE_ARG(((RogueByte)((RogueCharacter)'5'))) );
    RogueStringBuilder__round_off_work_bytes( ROGUE_ARG(THIS) );
  }
  return (RogueStringBuilder*)(THIS);
}

void RogueStringBuilder__print_work_bytes( RogueStringBuilder* THIS )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueByteList*,_auto_293_0,(RogueStringBuilder_work_bytes));
    RogueInt32 _auto_294_1 = (0);
    for (;_auto_294_1 < _auto_293_0->count;++_auto_294_1)
    {
      RogueByte digit_2 = (_auto_293_0->data->bytes[_auto_294_1]);
      RogueStringBuilder__print__Character( ROGUE_ARG(THIS), ROGUE_ARG(((RogueCharacter)(digit_2))) );
    }
  }
}

RogueStringBuilder* RogueStringBuilder__println( RogueStringBuilder* THIS )
{
  return (RogueStringBuilder*)(((RogueStringBuilder__print__Character( ROGUE_ARG(THIS), (RogueCharacter)10 ))));
}

RogueStringBuilder* RogueStringBuilder__println__Int32( RogueStringBuilder* THIS, RogueInt32 value_0 )
{
  return (RogueStringBuilder*)(((RogueStringBuilder__print__Character( ROGUE_ARG(((RogueStringBuilder__print__Int32( ROGUE_ARG(THIS), value_0 )))), (RogueCharacter)10 ))));
}

RogueStringBuilder* RogueStringBuilder__println__String( RogueStringBuilder* THIS, RogueString* value_0 )
{
  return (RogueStringBuilder*)(((RogueStringBuilder__print__Character( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(THIS), value_0 )))), (RogueCharacter)10 ))));
}

RogueStringBuilder* RogueStringBuilder__reserve__Int32( RogueStringBuilder* THIS, RogueInt32 additional_count_0 )
{
  RogueCharacterList__reserve__Int32( ROGUE_ARG(THIS->characters), additional_count_0 );
  return (RogueStringBuilder*)(THIS);
}

void RogueStringBuilder__round_off_work_bytes( RogueStringBuilder* THIS )
{
  if (((RogueCharacter)(((RogueByteList__remove_last( ROGUE_ARG(RogueStringBuilder_work_bytes) ))))) >= (RogueCharacter)'5')
  {
    RogueInt32 i_0 = ((RogueStringBuilder_work_bytes->count - 1));
    while (i_0 >= 0)
    {
      if (((RogueCharacter)(RogueStringBuilder_work_bytes->data->bytes[i_0])) != (RogueCharacter)'.')
      {
        RogueStringBuilder_work_bytes->data->bytes[i_0] = ((RogueByte)((((RogueInt32)(RogueStringBuilder_work_bytes->data->bytes[i_0])) + 1)));
        if (((RogueInt32)(RogueStringBuilder_work_bytes->data->bytes[i_0])) == (((RogueInt32)((RogueCharacter)'9')) + 1))
        {
          RogueStringBuilder_work_bytes->data->bytes[i_0] = ((RogueByte)((RogueCharacter)'0'));
        }
        else
        {
          return;
        }
      }
      --i_0;
    }
    RogueByteList__insert__Byte_Int32( ROGUE_ARG(RogueStringBuilder_work_bytes), ROGUE_ARG(((RogueByte)((RogueCharacter)'1'))), 0 );
  }
}

RogueReal64 RogueStringBuilder__scan_work_bytes( RogueStringBuilder* THIS )
{
  RogueReal64 whole_0 = (0.0);
  RogueReal64 decimal_1 = (0.0);
  RogueInt32 decimal_count_2 = (0);
  RogueLogical scanning_whole_3 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueByteList*,_auto_295_4,(RogueStringBuilder_work_bytes));
    RogueInt32 _auto_296_5 = (0);
    for (;_auto_296_5 < _auto_295_4->count;++_auto_296_5)
    {
      RogueByte digit_6 = (_auto_295_4->data->bytes[_auto_296_5]);
      if (scanning_whole_3)
      {
        if (((RogueCharacter)(digit_6)) == (RogueCharacter)'.')
        {
          scanning_whole_3 = ((RogueLogical)false);
        }
        else
        {
          whole_0 = ((RogueReal64)((whole_0 * 10.0) + ((RogueReal64)((((RogueCharacter)(digit_6)) - (RogueCharacter)'0')))));
        }
      }
      else
      {
        decimal_1 = ((RogueReal64)((decimal_1 * 10.0) + ((RogueReal64)((((RogueCharacter)(digit_6)) - (RogueCharacter)'0')))));
        ++decimal_count_2;
      }
    }
  }
  return (RogueReal64)((whole_0 + (decimal_1 / ((RogueReal64) pow((double)10.0, (double)((RogueReal64)(decimal_count_2)))))));
}

RogueStringBuilder* RogueStringBuilder__init_object( RogueStringBuilder* THIS )
{
  THIS->at_newline = true;
  return (RogueStringBuilder*)(THIS);
}

RogueLogical RogueObject__operatorEQUALSEQUALS__Object( RogueObject* THIS, RogueObject* other_0 )
{
  return (RogueLogical)(((void*)THIS) == ((void*)other_0));
}

RogueString* RogueObject__to_String( RogueObject* THIS )
{
  RogueInt64 addr_0 = 0;
  addr_0 = (RogueInt64)(intptr_t)THIS;

  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[80] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM2( 2, ROGUE_ARG(THIS) ))) )))) )))), Rogue_literal_strings[81] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(((RogueInt64__to_hex_string__Int32( addr_0, 16 )))) )))) )))), Rogue_literal_strings[28] )))) ))));
}

RogueString* RogueObject__type_name( RogueObject* THIS )
{
  return (RogueString*)(Rogue_literal_strings[52]);
}

RogueString* RogueByte__to_String( RogueByte THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], ROGUE_ARG(((RogueInt32)(THIS))) ))));
}

RogueLogical RogueCharacter__is_alphanumeric( RogueCharacter THIS )
{
  return (RogueLogical)((((THIS >= (RogueCharacter)'0' && THIS <= (RogueCharacter)'9') || (THIS >= (RogueCharacter)'a' && THIS <= (RogueCharacter)'z')) || (THIS >= (RogueCharacter)'A' && THIS <= (RogueCharacter)'Z')));
}

RogueLogical RogueCharacter__is_identifier( RogueCharacter THIS )
{
  return (RogueLogical)(((((THIS >= (RogueCharacter)'a' && THIS <= (RogueCharacter)'z') || (THIS >= (RogueCharacter)'A' && THIS <= (RogueCharacter)'Z')) || THIS == (RogueCharacter)'_') || (THIS >= (RogueCharacter)'0' && THIS <= (RogueCharacter)'9')));
}

RogueLogical RogueCharacter__is_letter( RogueCharacter THIS )
{
  return (RogueLogical)(((THIS >= (RogueCharacter)'a' && THIS <= (RogueCharacter)'z') || (THIS >= (RogueCharacter)'A' && THIS <= (RogueCharacter)'Z')));
}

RogueLogical RogueCharacter__is_number__Int32( RogueCharacter THIS, RogueInt32 base_0 )
{
  return (RogueLogical)(((RogueCharacter__to_number__Int32( ROGUE_ARG(THIS), base_0 ))) != -1);
}

RogueString* RogueCharacter__to_String( RogueCharacter THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Character( Rogue_literal_strings[0], ROGUE_ARG(THIS) ))));
}

RogueInt32 RogueCharacter__to_number__Int32( RogueCharacter THIS, RogueInt32 base_0 )
{
  if ((THIS >= (RogueCharacter)'0' && ((RogueInt32)(THIS)) < (((RogueInt32)((RogueCharacter)'0')) + base_0)))
  {
    return (RogueInt32)((THIS - (RogueCharacter)'0'));
  }
  if ((THIS >= (RogueCharacter)'a' && ((RogueInt32)(THIS)) < (((RogueInt32)((RogueCharacter)'a')) + (base_0 - 10))))
  {
    return (RogueInt32)(((THIS - (RogueCharacter)'a') + 10));
  }
  if ((THIS >= (RogueCharacter)'A' && ((RogueInt32)(THIS)) < (((RogueInt32)((RogueCharacter)'A')) + (base_0 - 10))))
  {
    return (RogueInt32)(((THIS - (RogueCharacter)'A') + 10));
  }
  return (RogueInt32)(-1);
}

RogueString* RogueString__after__Int32( RogueString* THIS, RogueInt32 index_0 )
{
  return (RogueString*)(((RogueString__from__Int32( ROGUE_ARG(THIS), ROGUE_ARG((index_0 + 1)) ))));
}

RogueString* RogueString__before__Int32( RogueString* THIS, RogueInt32 index_0 )
{
  return (RogueString*)(((RogueString__from__Int32_Int32( ROGUE_ARG(THIS), 0, ROGUE_ARG((index_0 - 1)) ))));
}

RogueString* RogueString__after_any__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate_last__Character_OptionalInt32( ROGUE_ARG(THIS), ch_0, ROGUE_ARG((RogueOptionalInt32__create())) ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Int32( ROGUE_ARG(THIS), ROGUE_ARG((i_1.value + 1)) ))));
  }
  else
  {
    return (RogueString*)(THIS);
  }
}

RogueString* RogueString__after_first__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate__Character_OptionalInt32( ROGUE_ARG(THIS), ch_0, ROGUE_ARG((RogueOptionalInt32__create())) ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Int32( ROGUE_ARG(THIS), ROGUE_ARG((i_1.value + 1)) ))));
  }
  else
  {
    return (RogueString*)(Rogue_literal_strings[0]);
  }
}

RogueString* RogueString__after_first__String( RogueString* THIS, RogueString* st_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate__String_OptionalInt32( ROGUE_ARG(THIS), st_0, ROGUE_ARG((RogueOptionalInt32__create())) ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Int32( ROGUE_ARG(THIS), ROGUE_ARG((i_1.value + st_0->count)) ))));
  }
  else
  {
    return (RogueString*)(Rogue_literal_strings[0]);
  }
}

RogueString* RogueString__after_last__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate_last__Character_OptionalInt32( ROGUE_ARG(THIS), ch_0, ROGUE_ARG((RogueOptionalInt32__create())) ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Int32( ROGUE_ARG(THIS), ROGUE_ARG((i_1.value + 1)) ))));
  }
  else
  {
    return (RogueString*)(Rogue_literal_strings[0]);
  }
}

RogueString* RogueString__before_first__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate__Character_OptionalInt32( ROGUE_ARG(THIS), ch_0, ROGUE_ARG((RogueOptionalInt32__create())) ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Int32_Int32( ROGUE_ARG(THIS), 0, ROGUE_ARG((i_1.value - 1)) ))));
  }
  else
  {
    return (RogueString*)(THIS);
  }
}

RogueString* RogueString__before_first__String( RogueString* THIS, RogueString* st_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate__String_OptionalInt32( ROGUE_ARG(THIS), st_0, ROGUE_ARG((RogueOptionalInt32__create())) ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Int32_Int32( ROGUE_ARG(THIS), 0, ROGUE_ARG((i_1.value - 1)) ))));
  }
  else
  {
    return (RogueString*)(THIS);
  }
}

RogueString* RogueString__before_last__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate_last__Character_OptionalInt32( ROGUE_ARG(THIS), ch_0, ROGUE_ARG((RogueOptionalInt32__create())) ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Int32_Int32( ROGUE_ARG(THIS), 0, ROGUE_ARG((i_1.value - 1)) ))));
  }
  else
  {
    return (RogueString*)(THIS);
  }
}

RogueString* RogueString__before_last__String( RogueString* THIS, RogueString* st_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate_last__String_OptionalInt32( ROGUE_ARG(THIS), st_0, ROGUE_ARG((RogueOptionalInt32__create())) ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Int32_Int32( ROGUE_ARG(THIS), 0, ROGUE_ARG((i_1.value - 1)) ))));
  }
  else
  {
    return (RogueString*)(THIS);
  }
}

RogueLogical RogueString__begins_with__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  return (RogueLogical)((!!(THIS->count) && THIS->characters[0] == ch_0));
}

RogueLogical RogueString__begins_with__String( RogueString* THIS, RogueString* other_0 )
{
  RogueInt32 other_count_1 = (other_0->count);
  return (RogueLogical)((THIS->count >= other_count_1 && ((RogueString__contains_at__String_Int32( ROGUE_ARG(THIS), other_0, 0 )))));
}

RogueLogical RogueString__contains__String( RogueString* THIS, RogueString* substring_0 )
{
  return (RogueLogical)(((RogueString__locate__String_OptionalInt32( ROGUE_ARG(THIS), substring_0, ROGUE_ARG((RogueOptionalInt32__create())) ))).exists);
}

RogueLogical RogueString__contains_at__String_Int32( RogueString* THIS, RogueString* substring_0, RogueInt32 at_index_1 )
{
  RogueInt32 other_count = substring_0->count;
  if (at_index_1 < 0 || at_index_1 + other_count > THIS->count) return false;
  RogueCharacter* this_data  = THIS->characters;
  RogueCharacter* other_data = substring_0->characters;
  int i = -1;
  int i2 = other_count - 1;
  while (++i <= i2)
  {
    if (this_data[at_index_1+i] != other_data[i]) return false;
  }
  return true;

}

RogueString* RogueString__decode_utf8( RogueString* THIS )
{
  RogueLogical needs_decoding_0 = (false);
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,_auto_17_4,(THIS));
    RogueInt32 _auto_18_5 = (0);
    for (;_auto_18_5 < _auto_17_4->count;++_auto_18_5)
    {
      RogueCharacter ch_6 = (_auto_17_4->characters[_auto_18_5]);
      if (((RogueInt32)(ch_6)) >= 128)
      {
        needs_decoding_0 = ((RogueLogical)true);
        goto _auto_19;
      }
    }
  }
  _auto_19:;
  if (!(needs_decoding_0))
  {
    return (RogueString*)(THIS);
  }
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_1,(((RogueStringBuilder__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))), ROGUE_ARG(THIS->count) )))));
  ROGUE_DEF_LOCAL_REF(RogueClassStringReader*,characters_2,(((RogueString__reader( ROGUE_ARG(THIS) )))));
  while (((RogueStringReader__has_another( characters_2 ))))
  {
    RogueInt32 value_3 = (((RogueInt32)(((RogueStringReader__read( characters_2 ))))));
    if (value_3 <= 127)
    {
      RogueStringBuilder__print__Character( buffer_1, ROGUE_ARG(((RogueCharacter)(value_3))) );
    }
    else if ((value_3 & 224) == 192)
    {
      value_3 = ((RogueInt32)(((value_3 & 31) << 6) | (((RogueInt32)(((RogueStringReader__read( characters_2 ))))) & 63)));
      RogueStringBuilder__print__Character( buffer_1, ROGUE_ARG(((RogueCharacter)(value_3))) );
    }
    else if ((value_3 & 240) == 224)
    {
      value_3 = ((RogueInt32)(((value_3 & 15) << 6) | (((RogueInt32)(((RogueStringReader__read( characters_2 ))))) & 63)));
      value_3 = ((RogueInt32)((value_3 << 6) | (((RogueInt32)(((RogueStringReader__read( characters_2 ))))) & 63)));
      RogueStringBuilder__print__Character( buffer_1, ROGUE_ARG(((RogueCharacter)(value_3))) );
    }
    else if (((RogueStringReader__has_another__Int32( characters_2, 3 ))))
    {
      value_3 = ((RogueInt32)(((value_3 & 7) << 18) | ((((RogueInt32)(((RogueStringReader__read( characters_2 ))))) & 63) << 12)));
      value_3 |= ((((RogueInt32)(((RogueStringReader__read( characters_2 ))))) & 63) << 6);
      value_3 |= (((RogueInt32)(((RogueStringReader__read( characters_2 ))))) & 63);
      if (value_3 >= 65536)
      {
        value_3 -= 65536;
        RogueStringBuilder__print__Character( buffer_1, ROGUE_ARG(((RogueCharacter)((55296 + ((value_3 >> 10) & 1023))))) );
        RogueStringBuilder__print__Character( buffer_1, ROGUE_ARG(((RogueCharacter)((56320 + (value_3 & 1023))))) );
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_1, ROGUE_ARG(((RogueCharacter)(value_3))) );
      }
    }
  }
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_1 ))));
}

RogueLogical RogueString__ends_with__String( RogueString* THIS, RogueString* other_0 )
{
  RogueInt32 other_count_1 = (other_0->count);
  return (RogueLogical)(((THIS->count >= other_count_1 && other_count_1 > 0) && ((RogueString__contains_at__String_Int32( ROGUE_ARG(THIS), other_0, ROGUE_ARG((THIS->count - other_count_1)) )))));
}

RogueString* RogueString__from__Int32( RogueString* THIS, RogueInt32 i1_0 )
{
  return (RogueString*)(((RogueString__from__Int32_Int32( ROGUE_ARG(THIS), i1_0, ROGUE_ARG((THIS->count - 1)) ))));
}

RogueString* RogueString__from__Int32_Int32( RogueString* THIS, RogueInt32 i1_0, RogueInt32 i2_1 )
{
  // Clamp i1 and i2
  if (i1_0 < 0) i1_0 = 0;
  if (i2_1 >= THIS->count) i2_1 = THIS->count - 1;
  // Return empty quotes if zero-length
  if (i1_0 > i2_1) return Rogue_literal_strings[0]; // empty string
  int new_count = (i2_1 - i1_0) + 1;
  RogueString* result = RogueString_create_with_count( new_count );
  // Copy character substring while computing hash code.
  RogueCharacter* dest = result->characters - 1;
  RogueCharacter* src  = (THIS->characters + i1_0) - 1;
  RogueInt32 hash_code = 0;
  while (--new_count >= 0)
  {
    RogueCharacter ch = *(++src);
    *(++dest) = ch;
    hash_code = ((hash_code << 3) - hash_code) + ch;  // hash * 7 + ch
  }
  result->hash_code = hash_code;
  return result;

}

RogueString* RogueString__from_first__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInt32 i_1 = (((RogueString__locate__Character_OptionalInt32( ROGUE_ARG(THIS), ch_0, ROGUE_ARG((RogueOptionalInt32__create())) ))));
  if (!(i_1.exists))
  {
    return (RogueString*)(Rogue_literal_strings[0]);
  }
  return (RogueString*)(((RogueString__from__Int32( ROGUE_ARG(THIS), ROGUE_ARG(i_1.value) ))));
}

RogueCharacter RogueString__last( RogueString* THIS )
{
  return (RogueCharacter)(THIS->characters[(THIS->count - 1)]);
}

RogueString* RogueString__left_justified__Int32( RogueString* THIS, RogueInt32 spaces_0 )
{
  if (THIS->count >= spaces_0)
  {
    return (RogueString*)(THIS);
  }
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_1,(((RogueStringBuilder__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))), spaces_0 )))));
  RogueStringBuilder__print__String( buffer_1, ROGUE_ARG(THIS) );
  {
    RogueInt32 _auto_4_2 = (THIS->count);
    RogueInt32 _auto_5_3 = (spaces_0);
    for (;_auto_4_2 <= _auto_5_3;++_auto_4_2)
    {
      RogueStringBuilder__print__Character( buffer_1, (RogueCharacter)' ' );
    }
  }
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_1 ))));
}

RogueString* RogueString__leftmost__Int32( RogueString* THIS, RogueInt32 n_0 )
{
  if (n_0 >= 0)
  {
    return (RogueString*)(((RogueString__from__Int32_Int32( ROGUE_ARG(THIS), 0, ROGUE_ARG((n_0 - 1)) ))));
  }
  else
  {
    return (RogueString*)(((RogueString__from__Int32_Int32( ROGUE_ARG(THIS), 0, ROGUE_ARG(((THIS->count + n_0) - 1)) ))));
  }
}

RogueOptionalInt32 RogueString__locate__Character_OptionalInt32( RogueString* THIS, RogueCharacter ch_0, RogueOptionalInt32 optional_i1_1 )
{
  RogueInt32    limit = THIS->count;
  RogueCharacter* data  = THIS->characters;
  RogueInt32    i1 = optional_i1_1.exists ? (optional_i1_1.value-1) : -1;
  while (++i1 < limit)
  {
    if (data[i1] == ch_0)
    {
      return RogueOptionalInt32(i1);
    }
  }
  return RogueOptionalInt32();

}

RogueOptionalInt32 RogueString__locate__String_OptionalInt32( RogueString* THIS, RogueString* other_0, RogueOptionalInt32 optional_i1_1 )
{
  RogueInt32 other_count_2 = (other_0->count);
  if (other_count_2 == 1)
  {
    return (RogueOptionalInt32)(((RogueString__locate__Character_OptionalInt32( ROGUE_ARG(THIS), ROGUE_ARG(other_0->characters[0]), optional_i1_1 ))));
  }
  RogueInt32 this_limit_3 = (((THIS->count - other_count_2) + 1));
  if ((other_count_2 == 0 || this_limit_3 <= 0))
  {
    return (RogueOptionalInt32)((RogueOptionalInt32__create()));
  }
  RogueInt32 i1_4 = 0;
  if (optional_i1_1.exists)
  {
    i1_4 = ((RogueInt32)(optional_i1_1.value - 1));
    if (i1_4 < -1)
    {
      i1_4 = ((RogueInt32)-1);
    }
  }
  else
  {
    i1_4 = ((RogueInt32)-1);
  }
  while (++i1_4 < this_limit_3)
  {
    if (((RogueString__contains_at__String_Int32( ROGUE_ARG(THIS), other_0, i1_4 ))))
    {
      return (RogueOptionalInt32)(RogueOptionalInt32( i1_4, true ));
    }
  }
  return (RogueOptionalInt32)((RogueOptionalInt32__create()));
}

RogueOptionalInt32 RogueString__locate_last__Character_OptionalInt32( RogueString* THIS, RogueCharacter ch_0, RogueOptionalInt32 starting_index_1 )
{
  RogueInt32    limit = THIS->count;
  RogueCharacter* data  = THIS->characters;
  int i;
  if (starting_index_1.exists)
  {
    i = starting_index_1.value + 1;
    if (i > limit) i = limit;
  }
  else
  {
    i = limit;
  }
  while (--i >= 0)
  {
    if (data[i] == ch_0) return RogueOptionalInt32(i);
  }
  return RogueOptionalInt32();

}

RogueOptionalInt32 RogueString__locate_last__String_OptionalInt32( RogueString* THIS, RogueString* other_0, RogueOptionalInt32 starting_index_1 )
{
  RogueInt32 other_count_2 = (other_0->count);
  if (other_count_2 == 1)
  {
    return (RogueOptionalInt32)(((RogueString__locate_last__Character_OptionalInt32( ROGUE_ARG(THIS), ROGUE_ARG(other_0->characters[0]), starting_index_1 ))));
  }
  RogueInt32 this_limit_3 = (((THIS->count - other_count_2) + 1));
  if ((other_count_2 == 0 || this_limit_3 <= 0))
  {
    return (RogueOptionalInt32)((RogueOptionalInt32__create()));
  }
  RogueInt32 i_4 = 0;
  if (starting_index_1.exists)
  {
    i_4 = ((RogueInt32)(starting_index_1.value + 1));
    if (i_4 > this_limit_3)
    {
      i_4 = ((RogueInt32)this_limit_3);
    }
  }
  else
  {
    i_4 = ((RogueInt32)this_limit_3);
  }
  while (--i_4 >= 0)
  {
    if (((RogueString__contains_at__String_Int32( ROGUE_ARG(THIS), other_0, i_4 ))))
    {
      return (RogueOptionalInt32)(RogueOptionalInt32( i_4, true ));
    }
  }
  return (RogueOptionalInt32)((RogueOptionalInt32__create()));
}

RogueString* RogueString__operatorPLUS__Character( RogueString* THIS, RogueCharacter value_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__Character( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(THIS) )))), value_0 )))) ))));
}

RogueString* RogueString__operatorPLUS__Int32( RogueString* THIS, RogueInt32 value_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__Int32( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(THIS) )))), value_0 )))) ))));
}

RogueLogical RogueString__operatorEQUALSEQUALS__String( RogueString* THIS, RogueString* value_0 )
{
  if ((THIS->hash_code != value_0->hash_code || THIS->count != value_0->count))
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)((0==memcmp(THIS->characters,value_0->characters,THIS->count*sizeof(RogueCharacter))));
}

RogueInt32 RogueString__operatorLTGT__String( RogueString* THIS, RogueString* other_0 )
{
  if (THIS == other_0) return 0;
  RogueInt32 other_count = other_0->count;
  RogueInt32 limit = THIS->count;
  int result;
  if (limit == other_count)
  {
    // Strings are same length
    result = memcmp( THIS->characters, other_0->characters, limit * sizeof(RogueCharacter) );
    if (result == 0) return 0;
  }
  else
  {
    // Strings differ in length.  Compare the part that matches first.
    if (limit > other_count) limit = other_count;
    result = memcmp( THIS->characters, other_0->characters, limit * sizeof(RogueCharacter) );
    if (result == 0)
    {
      // Equal so far - the shorter string comes before the longer one.
      if (limit == other_count) return 1;
      return -1;
    }
  }
  if (result < 0) return -1;
  else            return 1;

}

RogueString* RogueString__operatorPLUS__Int64( RogueString* THIS, RogueInt64 value_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__Int64( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(THIS) )))), value_0 )))) ))));
}

RogueString* RogueString__operatorPLUS__Object( RogueString* THIS, RogueObject* value_0 )
{
  if (!!(value_0))
  {
    return (RogueString*)(((RogueString__operatorPLUS__String( ROGUE_ARG(THIS), ROGUE_ARG((call_ROGUEM2( 1, value_0 ))) ))));
  }
  else
  {
    return (RogueString*)(((RogueString__operatorPLUS__String( ROGUE_ARG(THIS), Rogue_literal_strings[2] ))));
  }
}

RogueString* RogueString__operatorPLUS__Real64( RogueString* THIS, RogueReal64 value_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__Real64( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(THIS) )))), value_0 )))) ))));
}

RogueString* RogueString__operatorPLUS__String( RogueString* THIS, RogueString* value_0 )
{
  if (((void*)value_0) == ((void*)NULL))
  {
    return (RogueString*)(((RogueString__operatorPLUS__String( ROGUE_ARG(THIS), Rogue_literal_strings[2] ))));
  }
  if (THIS->count == 0)
  {
    return (RogueString*)(value_0);
  }
  if (value_0->count == 0)
  {
    return (RogueString*)(THIS);
  }
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(THIS) )))), value_0 )))) ))));
}

RogueString* RogueString__pluralize__Int32( RogueString* THIS, RogueInt32 quantity_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueString*,st_1,(((RogueString__replacing__String_String( ROGUE_ARG(THIS), Rogue_literal_strings[339], ROGUE_ARG(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], quantity_0 )))) )))));
  if (((RogueString__contains__String( st_1, ROGUE_ARG(((RogueCharacter__to_String( (RogueCharacter)'/' )))) ))))
  {
    if (quantity_0 == 1)
    {
      return (RogueString*)(((RogueString__before_first__Character( st_1, (RogueCharacter)'/' ))));
    }
    else
    {
      return (RogueString*)(((RogueString__after_last__Character( st_1, (RogueCharacter)'/' ))));
    }
  }
  else
  {
    RogueOptionalInt32 alt1_2 = (((RogueString__locate__Character_OptionalInt32( st_1, (RogueCharacter)'(', ROGUE_ARG((RogueOptionalInt32__create())) ))));
    if (alt1_2.exists)
    {
      RogueOptionalInt32 alt2_3 = (((RogueString__locate__Character_OptionalInt32( st_1, (RogueCharacter)')', ROGUE_ARG(RogueOptionalInt32( (alt1_2.value + 1), true )) ))));
      if (!(alt2_3.exists))
      {
        return (RogueString*)(THIS);
      }
      if (quantity_0 == 1)
      {
        return (RogueString*)(((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__before__Int32( st_1, ROGUE_ARG(alt1_2.value) )))), ROGUE_ARG(((RogueString__after__Int32( st_1, ROGUE_ARG(alt2_3.value) )))) ))));
      }
      return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(((RogueString__before__Int32( st_1, ROGUE_ARG(alt1_2.value) )))) )))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(((RogueString__from__Int32_Int32( st_1, ROGUE_ARG((alt1_2.value + 1)), ROGUE_ARG((alt2_3.value - 1)) )))) )))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(((RogueString__after__Int32( st_1, ROGUE_ARG(alt2_3.value) )))) )))) )))) ))));
    }
    else
    {
      if (quantity_0 == 1)
      {
        return (RogueString*)(st_1);
      }
      RogueInt32 index_4 = (0);
      RogueInt32 i_5 = (st_1->count);
      while (i_5 > 0)
      {
        --i_5;
        if (((RogueCharacter__is_letter( ROGUE_ARG(st_1->characters[i_5]) ))))
        {
          index_4 = ((RogueInt32)i_5);
          goto _auto_31;
        }
      }
      _auto_31:;
      if (st_1->characters[index_4] == (RogueCharacter)'s')
      {
        return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(((RogueString__before__Int32( st_1, ROGUE_ARG((index_4 + 1)) )))) )))) )))), Rogue_literal_strings[340] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(((RogueString__after__Int32( st_1, index_4 )))) )))) )))) ))));
      }
      else
      {
        return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(((RogueString__before__Int32( st_1, ROGUE_ARG((index_4 + 1)) )))) )))) )))), Rogue_literal_strings[341] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(((RogueString__after__Int32( st_1, index_4 )))) )))) )))) ))));
      }
    }
  }
}

RogueClassStringReader* RogueString__reader( RogueString* THIS )
{
  return (RogueClassStringReader*)(((RogueStringReader__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassStringReader*,ROGUE_CREATE_OBJECT(StringReader))), ROGUE_ARG(THIS) ))));
}

RogueString* RogueString__replacing__Character_Character( RogueString* THIS, RogueCharacter look_for_0, RogueCharacter replace_with_1 )
{
  if (!(((RogueString__contains__String( ROGUE_ARG(THIS), ROGUE_ARG(((RogueCharacter__to_String( look_for_0 )))) )))))
  {
    return (RogueString*)(THIS);
  }
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,result_2,(((RogueStringBuilder__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))), ROGUE_ARG(THIS->count) )))));
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,_auto_32_3,(THIS));
    RogueInt32 _auto_33_4 = (0);
    for (;_auto_33_4 < _auto_32_3->count;++_auto_33_4)
    {
      RogueCharacter ch_5 = (_auto_32_3->characters[_auto_33_4]);
      if (ch_5 == look_for_0)
      {
        RogueStringBuilder__print__Character( result_2, replace_with_1 );
      }
      else
      {
        RogueStringBuilder__print__Character( result_2, ch_5 );
      }
    }
  }
  return (RogueString*)(((RogueStringBuilder__to_String( result_2 ))));
}

RogueString* RogueString__replacing__String_String( RogueString* THIS, RogueString* look_for_0, RogueString* replace_with_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_2,(((RogueStringBuilder__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))), ROGUE_ARG((THIS->count * 2)) )))));
  ROGUE_DEF_LOCAL_REF(RogueString*,st_3,(THIS));
  RogueOptionalInt32 i_4 = (((RogueString__locate__String_OptionalInt32( st_3, look_for_0, ROGUE_ARG((RogueOptionalInt32__create())) ))));
  if (!(i_4.exists))
  {
    return (RogueString*)(st_3);
  }
  while (i_4.exists)
  {
    RogueStringBuilder__print__String( buffer_2, ROGUE_ARG(((RogueString__before__Int32( st_3, ROGUE_ARG(i_4.value) )))) );
    RogueStringBuilder__print__String( buffer_2, replace_with_1 );
    st_3 = ((RogueString*)((RogueString__from__Int32( st_3, ROGUE_ARG((i_4.value + look_for_0->count)) ))));
    i_4 = ((RogueOptionalInt32)((RogueString__locate__String_OptionalInt32( st_3, look_for_0, ROGUE_ARG((RogueOptionalInt32__create())) ))));
  }
  RogueStringBuilder__print__String( buffer_2, st_3 );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_2 ))));
}

RogueString* RogueString__rightmost__Int32( RogueString* THIS, RogueInt32 n_0 )
{
  RogueInt32 this_count_1 = (THIS->count);
  if (n_0 < 0)
  {
    return (RogueString*)(((RogueString__from__Int32_Int32( ROGUE_ARG(THIS), ROGUE_ARG((-(n_0))), ROGUE_ARG((this_count_1 - 1)) ))));
  }
  else
  {
    return (RogueString*)(((RogueString__from__Int32_Int32( ROGUE_ARG(THIS), ROGUE_ARG((this_count_1 - n_0)), ROGUE_ARG((this_count_1 - 1)) ))));
  }
}

RogueStringList* RogueString__split__Character( RogueString* THIS, RogueCharacter separator_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueStringList*,result_1,(((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )))));
  RogueInt32 i1_2 = (0);
  RogueOptionalInt32 i2_3 = (((RogueString__locate__Character_OptionalInt32( ROGUE_ARG(THIS), separator_0, ROGUE_ARG(RogueOptionalInt32( i1_2, true )) ))));
  while (i2_3.exists)
  {
    RogueStringList__add__String( result_1, ROGUE_ARG(((RogueString__from__Int32_Int32( ROGUE_ARG(THIS), i1_2, ROGUE_ARG((i2_3.value - 1)) )))) );
    i1_2 = ((RogueInt32)(i2_3.value + 1));
    i2_3 = ((RogueOptionalInt32)((RogueString__locate__Character_OptionalInt32( ROGUE_ARG(THIS), separator_0, ROGUE_ARG(RogueOptionalInt32( i1_2, true )) ))));
  }
  RogueStringList__add__String( result_1, ROGUE_ARG(((RogueString__from__Int32( ROGUE_ARG(THIS), i1_2 )))) );
  return (RogueStringList*)(result_1);
}

RogueReal64 RogueString__to_Real64( RogueString* THIS )
{
  char buffer[80];
  if (RogueString_to_c_string(THIS,buffer,80))
  {
    return strtod( buffer, 0 );
  }
  else
  {
    return 0;
  }

}

RogueString* RogueString__to_lowercase( RogueString* THIS )
{
  RogueLogical has_uc_0 = (false);
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,_auto_38_2,(THIS));
    RogueInt32 _auto_39_3 = (0);
    for (;_auto_39_3 < _auto_38_2->count;++_auto_39_3)
    {
      RogueCharacter ch_4 = (_auto_38_2->characters[_auto_39_3]);
      if ((ch_4 >= (RogueCharacter)'A' && ch_4 <= (RogueCharacter)'Z'))
      {
        has_uc_0 = ((RogueLogical)true);
        goto _auto_40;
      }
    }
  }
  _auto_40:;
  if (!(has_uc_0))
  {
    return (RogueString*)(THIS);
  }
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,result_1,(((RogueStringBuilder__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))), ROGUE_ARG(THIS->count) )))));
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,_auto_41_5,(THIS));
    RogueInt32 _auto_42_6 = (0);
    for (;_auto_42_6 < _auto_41_5->count;++_auto_42_6)
    {
      RogueCharacter ch_7 = (_auto_41_5->characters[_auto_42_6]);
      if ((ch_7 >= (RogueCharacter)'A' && ch_7 <= (RogueCharacter)'Z'))
      {
        RogueStringBuilder__print__Character( result_1, ROGUE_ARG(((RogueCharacter)(((ch_7 - (RogueCharacter)'A') + ((RogueInt32)((RogueCharacter)'a')))))) );
      }
      else
      {
        RogueStringBuilder__print__Character( result_1, ch_7 );
      }
    }
  }
  return (RogueString*)(((RogueStringBuilder__to_String( result_1 ))));
}

RogueString* RogueString__to_utf8( RogueString* THIS )
{
  RogueLogical needs_encoding_0 = (false);
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,_auto_48_7,(THIS));
    RogueInt32 _auto_49_8 = (0);
    for (;_auto_49_8 < _auto_48_7->count;++_auto_49_8)
    {
      RogueCharacter ch_9 = (_auto_48_7->characters[_auto_49_8]);
      if (((RogueInt32)(ch_9)) >= 128)
      {
        needs_encoding_0 = ((RogueLogical)true);
        goto _auto_50;
      }
    }
  }
  _auto_50:;
  if (!(needs_encoding_0))
  {
    return (RogueString*)(THIS);
  }
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,result_1,(((RogueStringBuilder__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))), ROGUE_ARG(THIS->count) )))));
  RogueInt32 n_2 = (THIS->count);
  RogueInt32 i_3 = (0);
  while (i_3 < n_2)
  {
    RogueCharacter ch_4 = (THIS->characters[i_3]);
    ++i_3;
    if (((RogueInt32)(ch_4)) < 128)
    {
      RogueStringBuilder__print__Character( result_1, ch_4 );
    }
    else if (((RogueInt32)(ch_4)) < 2048)
    {
      RogueStringBuilder__print__Character( result_1, ROGUE_ARG(((RogueCharacter)((((((RogueInt32)(ch_4)) >> 6) & 31) | 192)))) );
      RogueStringBuilder__print__Character( result_1, ROGUE_ARG(((RogueCharacter)(((((RogueInt32)(ch_4)) & 63) | 128)))) );
    }
    else if (((((RogueInt32)(ch_4)) >= 55296 && ((RogueInt32)(ch_4)) <= 56319) && i_3 < n_2))
    {
      RogueCharacter low_5 = (THIS->characters[i_3]);
      ++i_3;
      if ((((RogueInt32)(low_5)) >= 56320 && ((RogueInt32)(low_5)) <= 57343))
      {
        RogueInt32 value_6 = ((65536 + (((((RogueInt32)(ch_4)) - 55296) << 10) | (((RogueInt32)(low_5)) - 56320))));
        RogueStringBuilder__print__Character( result_1, ROGUE_ARG(((RogueCharacter)((240 | ((value_6 >> 18) & 7))))) );
        RogueStringBuilder__print__Character( result_1, ROGUE_ARG(((RogueCharacter)((128 | ((value_6 >> 12) & 63))))) );
        RogueStringBuilder__print__Character( result_1, ROGUE_ARG(((RogueCharacter)((128 | ((value_6 >> 6) & 63))))) );
        RogueStringBuilder__print__Character( result_1, ROGUE_ARG(((RogueCharacter)(((value_6 & 63) | 128)))) );
      }
    }
    else
    {
      RogueStringBuilder__print__Character( result_1, ROGUE_ARG(((RogueCharacter)((((((RogueInt32)(ch_4)) >> 12) & 15) | 224)))) );
      RogueStringBuilder__print__Character( result_1, ROGUE_ARG(((RogueCharacter)((((((RogueInt32)(ch_4)) >> 6) & 63) | 128)))) );
      RogueStringBuilder__print__Character( result_1, ROGUE_ARG(((RogueCharacter)(((((RogueInt32)(ch_4)) & 63) | 128)))) );
    }
  }
  return (RogueString*)(((RogueStringBuilder__to_String( result_1 ))));
}

RogueString* RogueString__trimmed( RogueString* THIS )
{
  RogueInt32 i1_0 = (0);
  RogueInt32 i2_1 = ((THIS->count - 1));
  while (i1_0 <= i2_1)
  {
    if (THIS->characters[i1_0] <= (RogueCharacter)' ')
    {
      ++i1_0;
    }
    else if (THIS->characters[i2_1] <= (RogueCharacter)' ')
    {
      --i2_1;
    }
    else
    {
      goto _auto_51;
    }
  }
  _auto_51:;
  if (i1_0 > i2_1)
  {
    return (RogueString*)(Rogue_literal_strings[0]);
  }
  if ((i1_0 == 0 && i2_1 == (THIS->count - 1)))
  {
    return (RogueString*)(THIS);
  }
  return (RogueString*)(((RogueString__from__Int32_Int32( ROGUE_ARG(THIS), i1_0, i2_1 ))));
}

RogueStringList* RogueString__word_wrapped__Int32( RogueString* THIS, RogueInt32 width_0 )
{
  return (RogueStringList*)(((RogueString__split__Character( ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueString__word_wrapped__Int32_StringBuilder( ROGUE_ARG(THIS), width_0, ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))) )))) )))), (RogueCharacter)10 ))));
}

RogueStringBuilder* RogueString__word_wrapped__Int32_StringBuilder( RogueString* THIS, RogueInt32 width_0, RogueStringBuilder* buffer_1 )
{
  RogueInt32 i1_2 = 0;
  RogueInt32 i2_3 = 0;
  RogueInt32 len_4 = (THIS->count);
  if (len_4 == 0)
  {
    return (RogueStringBuilder*)(buffer_1);
  }
  RogueLogical needs_newline_5 = (false);
  while (i2_3 < len_4)
  {
    while ((((i2_3 - i1_2) < width_0 && i2_3 < len_4) && THIS->characters[i2_3] != (RogueCharacter)10))
    {
      ++i2_3;
    }
    if ((i2_3 - i1_2) == width_0)
    {
      if (i2_3 >= len_4)
      {
        i2_3 = ((RogueInt32)len_4);
      }
      else
      {
        while (((THIS->characters[i2_3] != (RogueCharacter)' ' && THIS->characters[i2_3] != (RogueCharacter)10) && i2_3 > i1_2))
        {
          --i2_3;
        }
        if (i2_3 == i1_2)
        {
          i2_3 = ((RogueInt32)(i1_2 + width_0));
        }
      }
    }
    if (needs_newline_5)
    {
      RogueStringBuilder__println( buffer_1 );
    }
    {
      RogueInt32 i_6 = (i1_2);
      RogueInt32 _auto_11_7 = ((i2_3 - 1));
      for (;i_6 <= _auto_11_7;++i_6)
      {
        RogueStringBuilder__print__Character( buffer_1, ROGUE_ARG(THIS->characters[i_6]) );
      }
    }
    needs_newline_5 = ((RogueLogical)true);
    if (i2_3 == len_4)
    {
      return (RogueStringBuilder*)(buffer_1);
    }
    else
    {
      switch (((RogueInt32)(THIS->characters[i2_3])))
      {
        case (RogueCharacter)' ':
        {
          while ((i2_3 < len_4 && THIS->characters[i2_3] == (RogueCharacter)' '))
          {
            ++i2_3;
          }
          if ((i2_3 < len_4 && THIS->characters[i2_3] == (RogueCharacter)10))
          {
            ++i2_3;
          }
          break;
        }
        case (RogueCharacter)10:
        {
          ++i2_3;
          break;
        }
      }
      i1_2 = ((RogueInt32)i2_3);
    }
  }
  return (RogueStringBuilder*)(buffer_1);
}

RogueString* RogueCharacterList__to_String( RogueCharacterList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueCharacterList*,_auto_298_2,(THIS));
    RogueInt32 _auto_299_3 = (0);
    for (;_auto_299_3 < _auto_298_2->count;++_auto_299_3)
    {
      RogueCharacter value_4 = (_auto_298_2->data->characters[_auto_299_3]);
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if ((false))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG(((RogueCharacter__to_String( value_4 )))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCharacterList__type_name( RogueCharacterList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[707]);
}

RogueCharacterList* RogueCharacterList__init_object( RogueCharacterList* THIS )
{
  return (RogueCharacterList*)(THIS);
}

RogueCharacterList* RogueCharacterList__init__Int32( RogueCharacterList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueCharacter) );
  }
  return (RogueCharacterList*)(THIS);
}

RogueCharacterList* RogueCharacterList__add__Character( RogueCharacterList* THIS, RogueCharacter value_0 )
{
  ((RogueCharacterList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->characters[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCharacterList*)(THIS);
}

RogueInt32 RogueCharacterList__capacity( RogueCharacterList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueCharacterList* RogueCharacterList__clear( RogueCharacterList* THIS )
{
  RogueCharacterList__discard_from__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueCharacterList*)(THIS);
}

RogueCharacterList* RogueCharacterList__ensure_capacity__Int32( RogueCharacterList* THIS, RogueInt32 desired_capacity_0 )
{
  return (RogueCharacterList*)(((RogueCharacterList__reserve__Int32( ROGUE_ARG(THIS), ROGUE_ARG((desired_capacity_0 - THIS->count)) ))));
}

RogueCharacterList* RogueCharacterList__expand_to_count__Int32( RogueCharacterList* THIS, RogueInt32 minimum_count_0 )
{
  if (THIS->count < minimum_count_0)
  {
    RogueCharacterList__ensure_capacity__Int32( ROGUE_ARG(THIS), minimum_count_0 );
    THIS->count = minimum_count_0;
  }
  return (RogueCharacterList*)(THIS);
}

RogueCharacterList* RogueCharacterList__expand_to_include__Int32( RogueCharacterList* THIS, RogueInt32 index_0 )
{
  return (RogueCharacterList*)(((RogueCharacterList__expand_to_count__Int32( ROGUE_ARG(THIS), ROGUE_ARG((index_0 + 1)) ))));
}

void RogueCharacterList__discard_from__Int32( RogueCharacterList* THIS, RogueInt32 index_0 )
{
  RogueCharacter zero_value_1 = 0;
  RogueInt32 c_2 = (THIS->count);
  while (c_2 > index_0)
  {
    --c_2;
    THIS->data->characters[c_2] = zero_value_1;
  }
  THIS->count = c_2;
}

RogueCharacterList* RogueCharacterList__reserve__Int32( RogueCharacterList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueCharacter) );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueCharacterList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueCharacter) )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCharacterList*)(THIS);
}

RogueCharacterList* RogueCharacterList__shift__Int32_OptionalInt32_Int32_OptionalCharacter( RogueCharacterList* THIS, RogueInt32 i1_0, RogueOptionalInt32 element_count_1, RogueInt32 delta_2, RogueOptionalCharacter fill_3 )
{
  if (delta_2 == 0)
  {
    return (RogueCharacterList*)(THIS);
  }
  RogueInt32 n_4 = 0;
  if (element_count_1.exists)
  {
    n_4 = ((RogueInt32)element_count_1.value);
  }
  else
  {
    n_4 = ((RogueInt32)(THIS->count - i1_0));
  }
  RogueInt32 dest_i2_5 = ((((i1_0 + delta_2) + n_4) - 1));
  RogueCharacterList__expand_to_include__Int32( ROGUE_ARG(THIS), dest_i2_5 );
  RogueArray_set(THIS->data,(i1_0 + delta_2),((RogueArray*)(THIS->data)),i1_0,n_4);
  if (fill_3.exists)
  {
    RogueCharacter value_6 = (fill_3.value);
    if (delta_2 > 0)
    {
      {
        RogueInt32 i_7 = (i1_0);
        RogueInt32 _auto_14_8 = (((i1_0 + delta_2) - 1));
        for (;i_7 <= _auto_14_8;++i_7)
        {
          THIS->data->characters[i_7] = value_6;
        }
      }
    }
    else
    {
      {
        RogueInt32 i_9 = (((i1_0 + delta_2) + n_4));
        RogueInt32 _auto_15_10 = (((i1_0 + n_4) - 1));
        for (;i_9 <= _auto_15_10;++i_9)
        {
          THIS->data->characters[i_9] = value_6;
        }
      }
    }
  }
  return (RogueCharacterList*)(THIS);
}

RogueString* RogueGenericList__type_name( RogueClassGenericList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[56]);
}

RogueClassGenericList* RogueGenericList__init_object( RogueClassGenericList* THIS )
{
  return (RogueClassGenericList*)(THIS);
}

RogueString* RogueCharacterArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[750]);
}

RogueString* RogueNativeArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[55]);
}

RogueString* RogueStringReader__type_name( RogueClassStringReader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[634]);
}

RogueLogical RogueStringReader__has_another( RogueClassStringReader* THIS )
{
  return (RogueLogical)(THIS->position < THIS->count);
}

RogueCharacter RogueStringReader__read( RogueClassStringReader* THIS )
{
  ++THIS->position;
  return (RogueCharacter)(THIS->string->characters[(THIS->position - 1)]);
}

RogueClassStringReader* RogueStringReader__init__String( RogueClassStringReader* THIS, RogueString* _auto_24_0 )
{
  THIS->string = _auto_24_0;
  if (!!(THIS->string))
  {
    THIS->count = THIS->string->count;
  }
  return (RogueClassStringReader*)(THIS);
}

RogueLogical RogueStringReader__has_another__Int32( RogueClassStringReader* THIS, RogueInt32 n_0 )
{
  return (RogueLogical)((THIS->position + n_0) <= THIS->count);
}

RogueClassStringReader* RogueStringReader__init_object( RogueClassStringReader* THIS )
{
  return (RogueClassStringReader*)(THIS);
}

RogueLogical RogueCharacterReader__has_another( RogueObject* THIS )
{
  switch (THIS->type->index)
  {
    case 13:
      return RogueStringReader__has_another( (RogueClassStringReader*)THIS );
    case 191:
      return RogueParseReader__has_another( (RogueClassParseReader*)THIS );
    case 272:
      return RogueFileReader__has_another( (RogueClassFileReader*)THIS );
    default:
      return 0;
  }
}

RogueCharacter RogueCharacterReader__read( RogueObject* THIS )
{
  switch (THIS->type->index)
  {
    case 13:
      return RogueStringReader__read( (RogueClassStringReader*)THIS );
    case 191:
      return RogueParseReader__read( (RogueClassParseReader*)THIS );
    case 272:
      return RogueFileReader__read( (RogueClassFileReader*)THIS );
    default:
      return 0;
  }
}

RogueString* RogueStringList__to_String( RogueStringList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_327_2,(THIS));
    RogueInt32 _auto_328_3 = (0);
    for (;_auto_328_3 < _auto_327_2->count;++_auto_328_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueString*,value_4,(((RogueString*)(_auto_327_2->data->objects[_auto_328_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, value_4 );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueStringList__type_name( RogueStringList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[708]);
}

RogueStringList* RogueStringList__init_object( RogueStringList* THIS )
{
  return (RogueStringList*)(THIS);
}

RogueStringList* RogueStringList__init( RogueStringList* THIS )
{
  RogueStringList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueStringList*)(THIS);
}

RogueStringList* RogueStringList__init__Int32( RogueStringList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueString*), true );
  }
  return (RogueStringList*)(THIS);
}

RogueStringList* RogueStringList__add__String( RogueStringList* THIS, RogueString* value_0 )
{
  ((RogueStringList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueStringList*)(THIS);
}

RogueStringList* RogueStringList__add__StringList( RogueStringList* THIS, RogueStringList* other_0 )
{
  RogueStringList__reserve__Int32( ROGUE_ARG(THIS), ROGUE_ARG(other_0->count) );
  {
    ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_333_1,(other_0));
    RogueInt32 _auto_334_2 = (0);
    for (;_auto_334_2 < _auto_333_1->count;++_auto_334_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueString*,value_3,(((RogueString*)(_auto_333_1->data->objects[_auto_334_2]))));
      RogueStringList__add__String( ROGUE_ARG(THIS), value_3 );
    }
  }
  return (RogueStringList*)(THIS);
}

RogueInt32 RogueStringList__capacity( RogueStringList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueStringList* RogueStringList__clear( RogueStringList* THIS )
{
  RogueStringList__discard_from__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueStringList*)(THIS);
}

void RogueStringList__discard_from__Int32( RogueStringList* THIS, RogueInt32 index_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueString*,zero_value_1,0);
  RogueInt32 c_2 = (THIS->count);
  while (c_2 > index_0)
  {
    --c_2;
    THIS->data->objects[c_2] = zero_value_1;
  }
  THIS->count = c_2;
}

RogueOptionalInt32 RogueStringList__locate__String( RogueStringList* THIS, RogueString* value_0 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_349_1,(THIS));
    RogueInt32 i_2 = (0);
    for (;i_2 < _auto_349_1->count;++i_2)
    {
      if (((RogueString__operatorEQUALSEQUALS__String( value_0, ROGUE_ARG(((RogueString*)(THIS->data->objects[i_2]))) ))))
      {
        return (RogueOptionalInt32)(RogueOptionalInt32( i_2, true ));
      }
    }
  }
  return (RogueOptionalInt32)((RogueOptionalInt32__create()));
}

RogueStringList* RogueStringList__reserve__Int32( RogueStringList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueString*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueStringList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueString*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueStringList*)(THIS);
}

RogueString* RogueStringList__joined__String( RogueStringList* THIS, RogueString* separator_0 )
{
  RogueInt32 total_count_1 = (0);
  {
    ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_358_3,(THIS));
    RogueInt32 _auto_359_4 = (0);
    for (;_auto_359_4 < _auto_358_3->count;++_auto_359_4)
    {
      ROGUE_DEF_LOCAL_REF(RogueString*,line_5,(((RogueString*)(_auto_358_3->data->objects[_auto_359_4]))));
      total_count_1 += line_5->count;
    }
  }
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,builder_2,(((RogueStringBuilder__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))), total_count_1 )))));
  {
    ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_360_6,(THIS));
    RogueInt32 _auto_361_7 = (0);
    for (;_auto_361_7 < _auto_360_6->count;++_auto_361_7)
    {
      ROGUE_DEF_LOCAL_REF(RogueString*,line_8,(((RogueString*)(_auto_360_6->data->objects[_auto_361_7]))));
      if (!!(builder_2->characters->count))
      {
        RogueStringBuilder__print__String( builder_2, separator_0 );
      }
      RogueStringBuilder__print__String( builder_2, line_8 );
    }
  }
  return (RogueString*)(((RogueStringBuilder__to_String( builder_2 ))));
}

RogueString* RogueStringArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[751]);
}

RogueString* RogueGlobal__type_name( RogueClassGlobal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[57]);
}

RogueClassPrintWriterAspect* RogueGlobal__flush( RogueClassGlobal* THIS )
{
  if (!!(THIS->printwriter_output_buffer->characters->count))
  {
    RogueGlobal__write__CharacterList( ROGUE_ARG(THIS), ROGUE_ARG(THIS->printwriter_output_buffer->characters) );
    RogueStringBuilder__clear( ROGUE_ARG(THIS->printwriter_output_buffer) );
  }
  return (RogueClassPrintWriterAspect*)(THIS);
}

RogueClassPrintWriterAspect* RogueGlobal__print__Object( RogueClassGlobal* THIS, RogueObject* value_0 )
{
  RogueStringBuilder__print__Object( ROGUE_ARG(THIS->printwriter_output_buffer), value_0 );
  return (RogueClassPrintWriterAspect*)(THIS);
}

RogueClassPrintWriterAspect* RogueGlobal__print__String( RogueClassGlobal* THIS, RogueString* value_0 )
{
  RogueStringBuilder__print__String( ROGUE_ARG(THIS->printwriter_output_buffer), value_0 );
  if (THIS->printwriter_output_buffer->characters->count > 1024)
  {
    RogueGlobal__flush( ROGUE_ARG(THIS) );
  }
  return (RogueClassPrintWriterAspect*)(THIS);
}

RogueClassPrintWriterAspect* RogueGlobal__println( RogueClassGlobal* THIS )
{
  RogueStringBuilder__print__Character( ROGUE_ARG(THIS->printwriter_output_buffer), (RogueCharacter)10 );
  return (RogueClassPrintWriterAspect*)(((RogueGlobal__flush( ROGUE_ARG(THIS) ))));
}

RogueClassPrintWriterAspect* RogueGlobal__println__Object( RogueClassGlobal* THIS, RogueObject* value_0 )
{
  return (RogueClassPrintWriterAspect*)((RoguePrintWriterAspect__println( ROGUE_ARG(((RogueObject*)((RogueGlobal__print__Object( ROGUE_ARG(THIS), value_0 ))))) )));
}

RogueClassPrintWriterAspect* RogueGlobal__println__String( RogueClassGlobal* THIS, RogueString* value_0 )
{
  return (RogueClassPrintWriterAspect*)((RoguePrintWriterAspect__println( ROGUE_ARG(((RogueObject*)((RogueGlobal__print__String( ROGUE_ARG(THIS), value_0 ))))) )));
}

RogueClassGlobal* RogueGlobal__write__CharacterList( RogueClassGlobal* THIS, RogueCharacterList* characters_0 )
{
  RogueConsole__print__StringBuilder( ROGUE_ARG(THIS->standard_output), ROGUE_ARG(THIS->printwriter_output_buffer) );
  return (RogueClassGlobal*)(THIS);
}

void RogueGlobal__on_launch( RogueClassGlobal* THIS )
{
  RogueRogueC__launch( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC)) );
}

RogueClassGlobal* RogueGlobal__init_object( RogueClassGlobal* THIS )
{
  THIS->printwriter_output_buffer = ((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )));
  THIS->standard_output = ((RogueClassConsole*)ROGUE_SINGLETON(Console));
  return (RogueClassGlobal*)(THIS);
}

RogueClassPrintWriterAspect* RoguePrintWriterAspect__println( RogueObject* THIS )
{
  switch (THIS->type->index)
  {
    case 17:
      return RogueGlobal__println( (RogueClassGlobal*)THIS );
    default:
      return 0;
  }
}

RogueString* RogueConsole__type_name( RogueClassConsole* THIS )
{
  return (RogueString*)(Rogue_literal_strings[635]);
}

void RogueConsole__print__StringBuilder( RogueClassConsole* THIS, RogueStringBuilder* value_0 )
{
  RogueString_print_characters( value_0->characters->data->characters, value_0->characters->count );
}

RogueClassConsole* RogueConsole__init_object( RogueClassConsole* THIS )
{
  return (RogueClassConsole*)(THIS);
}

RogueString* RogueRogueC__type_name( RogueClassRogueC* THIS )
{
  return (RogueString*)(Rogue_literal_strings[636]);
}

void RogueRogueC__launch( RogueClassRogueC* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueString*,libs_0,(((RogueString__operatorPLUS__String( ROGUE_ARG((RogueFile__path__String( ROGUE_ARG(RogueSystem_executable_filepath) ))), Rogue_literal_strings[5] )))));
  if ((RogueFile__exists__String( libs_0 )))
  {
    THIS->libraries_folder = libs_0;
    RogueStringList__add__String( ROGUE_ARG(THIS->prefix_path_list), libs_0 );
    RogueString_LogicalTable__set__String_Logical( ROGUE_ARG(THIS->prefix_path_lookup), libs_0, true );
  }
  RogueStringList__add__String( ROGUE_ARG(THIS->supported_targets), Rogue_literal_strings[6] );
  ROGUE_TRY
  {
    RogueRogueC__process_command_line_arguments( ROGUE_ARG(THIS) );
    if (THIS->source_files->count == 0)
    {
      RogueGlobal__println( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)) );
      RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[35], Rogue_literal_strings[36] )))) );
      RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), Rogue_literal_strings[37] );
      ROGUE_DEF_LOCAL_REF(RogueString*,usage_1,(Rogue_literal_strings[38]));
      usage_1 = ((RogueString*)((RogueString__operatorPLUS__String( usage_1, ROGUE_ARG(((RogueString__replacing__String_String( ROGUE_ARG(((RogueString__replacing__Character_Character( ROGUE_ARG(((RogueStringList__to_String( ROGUE_ARG(THIS->supported_targets) )))), (RogueCharacter)',', (RogueCharacter)'|' )))), Rogue_literal_strings[39], Rogue_literal_strings[40] )))) ))));
      RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), usage_1 );
      RogueSystem__exit__Int32( 1 );
    }
    if (THIS->target_list->count == 0)
    {
      RogueStringList__add__String( ROGUE_ARG(THIS->target_list), Rogue_literal_strings[6] );
    }
    {
      ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_375_4,(THIS->target_list));
      RogueInt32 _auto_376_5 = (0);
      for (;_auto_376_5 < _auto_375_4->count;++_auto_376_5)
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,target_6,(((RogueString*)(_auto_375_4->data->objects[_auto_376_5]))));
        RogueString_LogicalTable__set__String_Logical( ROGUE_ARG(THIS->compile_targets), target_6, true );
      }
    }
    RogueProgram__configure( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) );
    THIS->stopwatch = ROGUE_CREATE_REF(RogueClassStopwatch*,ROGUE_CREATE_OBJECT(Stopwatch));
    {
      ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_377_7,(THIS->source_files));
      RogueInt32 _auto_378_8 = (0);
      for (;_auto_378_8 < _auto_377_7->count;++_auto_378_8)
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,filepath_9,(((RogueString*)(_auto_377_7->data->objects[_auto_378_8]))));
        RogueRogueC__include_source__String( ROGUE_ARG(THIS), filepath_9 );
      }
    }
    RogueRogueC__include_source__String( ROGUE_ARG(THIS), Rogue_literal_strings[267] );
    {
      ROGUE_DEF_LOCAL_REF(RogueParserList*,_auto_379_10,(THIS->parsers));
      RogueInt32 _auto_380_11 = (0);
      for (;_auto_380_11 < _auto_379_10->count;++_auto_380_11)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassParser*,parser_12,(((RogueClassParser*)(_auto_379_10->data->objects[_auto_380_11]))));
        RogueParser__insert_module_prefixes( parser_12 );
      }
    }
    {
      ROGUE_DEF_LOCAL_REF(RogueParserList*,_auto_381_13,(THIS->parsers));
      RogueInt32 _auto_382_14 = (0);
      for (;_auto_382_14 < _auto_381_13->count;++_auto_382_14)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassParser*,parser_15,(((RogueClassParser*)(_auto_381_13->data->objects[_auto_382_14]))));
        RogueParser__parse_elements( parser_15 );
      }
    }
    ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_2,((call_ROGUEM94( 4, ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[43] )))), Rogue_literal_strings[329], 0, 0 ))));
    {
      ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_383_16,(THIS->requisite_declarations));
      RogueInt32 _auto_384_17 = (0);
      for (;_auto_384_17 < _auto_383_16->count;++_auto_384_17)
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,declaration_18,(((RogueString*)(_auto_383_16->data->objects[_auto_384_17]))));
        RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)((RogueProgram__get_launch_method__Token( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), t_2 )))->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdMakeRequisite__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdMakeRequisite*,ROGUE_CREATE_OBJECT(CmdMakeRequisite))), t_2, declaration_18 )))))) );
      }
    }
    if (THIS->all_requisite)
    {
      ((RogueClassProgram*)ROGUE_SINGLETON(Program))->all_requisite = true;
    }
    RogueProgram__resolve( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) );
    RogueRogueC__write_output( ROGUE_ARG(THIS) );
  }
  ROGUE_CATCH( err_3,RogueClassError* )
  {
    RogueGlobal__println__Object( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ROGUE_ARG(((RogueObject*)(err_3))) );
    RogueSystem__exit__Int32( 1 );
  }
  ROGUE_END_TRY
}

void RogueRogueC__write_output( RogueClassRogueC* THIS )
{
  if (((RogueString_LogicalTable__get__String( ROGUE_ARG(THIS->compile_targets), Rogue_literal_strings[6] ))))
  {
    RogueRogueC__write_cpp( ROGUE_ARG(THIS) );
    return;
  }
  ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassRogueError*,ROGUE_CREATE_OBJECT(RogueError))), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[630] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(THIS->target_list))) )))) )))), Rogue_literal_strings[631] )))) )))), ROGUE_ARG(((RogueString*)(NULL))), 0, 0 ))));
}

void RogueRogueC__on_compile_finished( RogueClassRogueC* THIS )
{
  RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[625] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(THIS->stopwatch))) )))) )))), Rogue_literal_strings[28] )))) )))) );
}

void RogueRogueC__include_source__String( RogueClassRogueC* THIS, RogueString* filepath_0 )
{
  if (!(!!(THIS->first_filepath)))
  {
    THIS->first_filepath = filepath_0;
  }
  RogueRogueC__include_source__Token_String( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassToken*)(NULL))), filepath_0 );
}

void RogueRogueC__include_source__Token_String( RogueClassRogueC* THIS, RogueClassToken* t_0, RogueString* filepath_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassFile*,file_2,(((RogueFile__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassFile*,ROGUE_CREATE_OBJECT(File))), filepath_1 )))));
  if ((RogueFile__exists__String( ROGUE_ARG(((RogueString__operatorPLUS__String( filepath_1, Rogue_literal_strings[59] )))) )))
  {
    filepath_1 = ((RogueString*)((RogueString__operatorPLUS__String( filepath_1, Rogue_literal_strings[59] ))));
    file_2 = ((RogueClassFile*)((RogueFile__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassFile*,ROGUE_CREATE_OBJECT(File))), filepath_1 ))));
  }
  if (!((RogueFile__exists__String( ROGUE_ARG(file_2->filepath) ))))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_387_10,(THIS->prefix_path_list));
      RogueInt32 _auto_388_11 = (0);
      for (;_auto_388_11 < _auto_387_10->count;++_auto_388_11)
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,prefix_12,(((RogueString*)(_auto_387_10->data->objects[_auto_388_11]))));
        ROGUE_DEF_LOCAL_REF(RogueString*,prefixed_filepath_3,(((RogueString__operatorPLUS__String( prefix_12, filepath_1 )))));
        ROGUE_DEF_LOCAL_REF(RogueClassFile*,prefixed_file_4,(((RogueFile__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassFile*,ROGUE_CREATE_OBJECT(File))), prefixed_filepath_3 )))));
        if ((RogueFile__exists__String( ROGUE_ARG(((RogueString__operatorPLUS__String( prefixed_filepath_3, Rogue_literal_strings[59] )))) )))
        {
          filepath_1 = ((RogueString*)((RogueString__operatorPLUS__String( prefixed_filepath_3, Rogue_literal_strings[59] ))));
          file_2 = ((RogueClassFile*)((RogueFile__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassFile*,ROGUE_CREATE_OBJECT(File))), filepath_1 ))));
          goto _auto_389;
        }
        else if ((RogueFile__exists__String( ROGUE_ARG(prefixed_file_4->filepath) )))
        {
          filepath_1 = ((RogueString*)prefixed_filepath_3);
          file_2 = ((RogueClassFile*)prefixed_file_4);
          goto _auto_389;
        }
      }
    }
    _auto_389:;
  }
  if (!((RogueFile__exists__String( ROGUE_ARG(file_2->filepath) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,mesg_5,(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[60] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], filepath_1 )))) )))), Rogue_literal_strings[15] )))) )))));
    if (!!(t_0))
    {
      ROGUE_THROW(((RogueToken__error__String( t_0, mesg_5 ))));
    }
    else
    {
      ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassRogueError*,ROGUE_CREATE_OBJECT(RogueError))), mesg_5, ROGUE_ARG(((RogueString*)(NULL))), 0, 0 ))));
    }
  }
  if ((RogueFile__is_folder__String( ROGUE_ARG(file_2->filepath) )))
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,path2_6,(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], filepath_1 )))) )))), Rogue_literal_strings[61] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(((RogueFile__filename( file_2 )))) )))) )))), Rogue_literal_strings[59] )))) )))));
    ROGUE_DEF_LOCAL_REF(RogueClassFile*,file2_7,(((RogueFile__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassFile*,ROGUE_CREATE_OBJECT(File))), path2_6 )))));
    if ((!((RogueFile__exists__String( ROGUE_ARG(file2_7->filepath) ))) || (RogueFile__is_folder__String( ROGUE_ARG(file2_7->filepath) ))))
    {
      ROGUE_DEF_LOCAL_REF(RogueString*,mesg_8,(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[62] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], path2_6 )))) )))), Rogue_literal_strings[63] )))) )))));
      if (!!(t_0))
      {
        ROGUE_THROW(((RogueToken__error__String( t_0, mesg_8 ))));
      }
      else
      {
        ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassRogueError*,ROGUE_CREATE_OBJECT(RogueError))), mesg_8, ROGUE_ARG(((RogueString*)(NULL))), 0, 0 ))));
      }
    }
    else
    {
      if (!(((RogueString_LogicalTable__contains__String( ROGUE_ARG(THIS->prefix_path_lookup), ROGUE_ARG(file_2->filepath) )))))
      {
        RogueString_LogicalTable__set__String_Logical( ROGUE_ARG(THIS->prefix_path_lookup), ROGUE_ARG(file_2->filepath), true );
        RogueStringList__add__String( ROGUE_ARG(THIS->prefix_path_list), ROGUE_ARG(file_2->filepath) );
      }
      filepath_1 = ((RogueString*)path2_6);
      file_2 = ((RogueClassFile*)file2_7);
    }
  }
  filepath_1 = ((RogueString*)(RogueFile__absolute_filepath__String( ROGUE_ARG(file_2->filepath) )));
  if (((RogueStringList__locate__String( ROGUE_ARG(THIS->included_files), filepath_1 ))).exists)
  {
    return;
  }
  if (THIS->included_files->count == 0)
  {
    ((RogueClassProgram*)ROGUE_SINGLETON(Program))->first_filepath = filepath_1;
  }
  RogueStringList__add__String( ROGUE_ARG(THIS->included_files), filepath_1 );
  ROGUE_DEF_LOCAL_REF(RogueString*,prefix_9,(((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__before_last__Character( filepath_1, (RogueCharacter)'/' )))), Rogue_literal_strings[61] )))));
  if (!(((RogueString_LogicalTable__contains__String( ROGUE_ARG(THIS->prefix_path_lookup), prefix_9 )))))
  {
    RogueString_LogicalTable__set__String_Logical( ROGUE_ARG(THIS->prefix_path_lookup), prefix_9, true );
    RogueStringList__add__String( ROGUE_ARG(THIS->prefix_path_list), prefix_9 );
  }
  RogueParserList__add__Parser( ROGUE_ARG(THIS->parsers), ROGUE_ARG(((RogueParser__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassParser*,ROGUE_CREATE_OBJECT(Parser))), filepath_1 )))) );
}

void RogueRogueC__include_native__Token_String_String( RogueClassRogueC* THIS, RogueClassToken* t_0, RogueString* filepath_1, RogueString* native_type_2 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassFile*,file_3,(((RogueFile__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassFile*,ROGUE_CREATE_OBJECT(File))), filepath_1 )))));
  if (!((RogueFile__exists__String( ROGUE_ARG(file_3->filepath) ))))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_394_9,(THIS->prefix_path_list));
      RogueInt32 _auto_395_10 = (0);
      for (;_auto_395_10 < _auto_394_9->count;++_auto_395_10)
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,prefix_11,(((RogueString*)(_auto_394_9->data->objects[_auto_395_10]))));
        ROGUE_DEF_LOCAL_REF(RogueString*,prefixed_filepath_4,(((RogueString__operatorPLUS__String( prefix_11, filepath_1 )))));
        ROGUE_DEF_LOCAL_REF(RogueClassFile*,prefixed_file_5,(((RogueFile__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassFile*,ROGUE_CREATE_OBJECT(File))), prefixed_filepath_4 )))));
        if ((RogueFile__exists__String( ROGUE_ARG(prefixed_file_5->filepath) )))
        {
          filepath_1 = ((RogueString*)prefixed_filepath_4);
          file_3 = ((RogueClassFile*)prefixed_file_5);
          goto _auto_396;
        }
      }
    }
    _auto_396:;
  }
  if (!((RogueFile__exists__String( ROGUE_ARG(file_3->filepath) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,mesg_6,(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[60] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], filepath_1 )))) )))), Rogue_literal_strings[15] )))) )))));
    if (!!(t_0))
    {
      ROGUE_THROW(((RogueToken__error__String( t_0, mesg_6 ))));
    }
    else
    {
      ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassRogueError*,ROGUE_CREATE_OBJECT(RogueError))), mesg_6, ROGUE_ARG(((RogueString*)(NULL))), 0, 0 ))));
    }
  }
  if ((RogueFile__is_folder__String( ROGUE_ARG(file_3->filepath) )))
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,mesg_7,(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[71] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(file_3->filepath) )))) )))), Rogue_literal_strings[72] )))) )))));
    if (!!(t_0))
    {
      ROGUE_THROW(((RogueToken__error__String( t_0, mesg_7 ))));
    }
    else
    {
      ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassRogueError*,ROGUE_CREATE_OBJECT(RogueError))), mesg_7, ROGUE_ARG(((RogueString*)(NULL))), 0, 0 ))));
    }
  }
  filepath_1 = ((RogueString*)(RogueFile__absolute_filepath__String( ROGUE_ARG(file_3->filepath) )));
  if (((RogueStringList__locate__String( ROGUE_ARG(THIS->included_files), filepath_1 ))).exists)
  {
    return;
  }
  RogueStringList__add__String( ROGUE_ARG(THIS->included_files), filepath_1 );
  ROGUE_DEF_LOCAL_REF(RogueString*,prefix_8,(((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__before_last__Character( filepath_1, (RogueCharacter)'/' )))), Rogue_literal_strings[61] )))));
  if (!(((RogueString_LogicalTable__contains__String( ROGUE_ARG(THIS->prefix_path_lookup), prefix_8 )))))
  {
    RogueString_LogicalTable__set__String_Logical( ROGUE_ARG(THIS->prefix_path_lookup), prefix_8, true );
    RogueStringList__add__String( ROGUE_ARG(THIS->prefix_path_list), prefix_8 );
  }
  if (((RogueString__operatorEQUALSEQUALS__String( native_type_2, Rogue_literal_strings[73] ))))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueClassLineReader*,_auto_398_12,(((RogueLineReader__init__File( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassLineReader*,ROGUE_CREATE_OBJECT(LineReader))), file_3 )))));
      while (((RogueLineReader__has_another( _auto_398_12 ))))
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,line_13,(((RogueLineReader__read( _auto_398_12 )))));
        RogueStringList__add__String( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_header), line_13 );
      }
    }
  }
  else
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueClassLineReader*,_auto_399_14,(((RogueLineReader__init__File( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassLineReader*,ROGUE_CREATE_OBJECT(LineReader))), file_3 )))));
      while (((RogueLineReader__has_another( _auto_399_14 ))))
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,line_15,(((RogueLineReader__read( _auto_399_14 )))));
        RogueStringList__add__String( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_code), line_15 );
      }
    }
  }
}

void RogueRogueC__process_command_line_arguments( RogueClassRogueC* THIS )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_400_3,(RogueSystem_command_line_arguments));
    RogueInt32 _auto_401_4 = (0);
    for (;_auto_401_4 < _auto_400_3->count;++_auto_401_4)
    {
      ROGUE_DEF_LOCAL_REF(RogueString*,arg_5,(((RogueString*)(_auto_400_3->data->objects[_auto_401_4]))));
      ROGUE_DEF_LOCAL_REF(RogueString*,value_0,(((RogueString__after_first__Character( arg_5, (RogueCharacter)'=' )))));
      arg_5 = ((RogueString*)((RogueString__before_first__Character( arg_5, (RogueCharacter)'=' ))));
      if (((RogueString__begins_with__String( arg_5, Rogue_literal_strings[7] ))))
      {
        {
          if (((RogueString__operatorEQUALSEQUALS__String( arg_5, Rogue_literal_strings[8] ))))
          {
            if (value_0->count == 0)
            {
              ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassRogueError*,ROGUE_CREATE_OBJECT(RogueError))), Rogue_literal_strings[9], ROGUE_ARG(((RogueString*)(NULL))), 0, 0 ))));
            }
            THIS->output_filepath = value_0;
          }
          else if (((RogueString__operatorEQUALSEQUALS__String( arg_5, Rogue_literal_strings[10] ))))
          {
            THIS->generate_main = true;
            THIS->execute_args = value_0;
          }
          else if (((RogueString__operatorEQUALSEQUALS__String( arg_5, Rogue_literal_strings[11] ))))
          {
            THIS->debug_mode = true;
          }
          else if (((RogueString__operatorEQUALSEQUALS__String( arg_5, Rogue_literal_strings[12] ))))
          {
            if (!(!!(value_0->count)))
            {
              ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassRogueError*,ROGUE_CREATE_OBJECT(RogueError))), Rogue_literal_strings[13], ROGUE_ARG(((RogueString*)(NULL))), 0, 0 ))));
            }
            {
              ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_402_6,(((RogueString__split__Character( value_0, (RogueCharacter)';' )))));
              RogueInt32 _auto_403_7 = (0);
              for (;_auto_403_7 < _auto_402_6->count;++_auto_403_7)
              {
                ROGUE_DEF_LOCAL_REF(RogueString*,path_8,(((RogueString*)(_auto_402_6->data->objects[_auto_403_7]))));
                if (!((RogueFile__exists__String( path_8 ))))
                {
                  ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassRogueError*,ROGUE_CREATE_OBJECT(RogueError))), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[14] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], path_8 )))) )))), Rogue_literal_strings[15] )))) )))), ROGUE_ARG(((RogueString*)(NULL))), 0, 0 ))));
                }
                if ((RogueFile__is_folder__String( path_8 )))
                {
                  if (!(((RogueString__ends_with__String( path_8, ROGUE_ARG(((RogueCharacter__to_String( (RogueCharacter)'/' )))) )))))
                  {
                    path_8 = ((RogueString*)((RogueString__operatorPLUS__Character( path_8, (RogueCharacter)'/' ))));
                  }
                  if (!(((RogueString_LogicalTable__contains__String( ROGUE_ARG(THIS->prefix_path_lookup), path_8 )))))
                  {
                    RogueStringList__add__String( ROGUE_ARG(THIS->prefix_path_list), path_8 );
                    RogueString_LogicalTable__set__String_Logical( ROGUE_ARG(THIS->prefix_path_lookup), path_8, true );
                  }
                }
                else
                {
                  RogueStringList__add__String( ROGUE_ARG(THIS->source_files), path_8 );
                }
              }
            }
          }
          else if (((RogueString__operatorEQUALSEQUALS__String( arg_5, Rogue_literal_strings[16] ))))
          {
            if (!!(value_0->count))
            {
              ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassRogueError*,ROGUE_CREATE_OBJECT(RogueError))), Rogue_literal_strings[17], ROGUE_ARG(((RogueString*)(NULL))), 0, 0 ))));
            }
            THIS->generate_main = true;
          }
          else if (((RogueString__operatorEQUALSEQUALS__String( arg_5, Rogue_literal_strings[18] ))))
          {
            if (!(!!(value_0->count)))
            {
              ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassRogueError*,ROGUE_CREATE_OBJECT(RogueError))), Rogue_literal_strings[19], ROGUE_ARG(((RogueString*)(NULL))), 0, 0 ))));
            }
            THIS->package_name = value_0;
          }
          else if (((RogueString__operatorEQUALSEQUALS__String( arg_5, Rogue_literal_strings[20] ))))
          {
            if (!!(value_0->count))
            {
              RogueStringList__add__StringList( ROGUE_ARG(THIS->requisite_declarations), ROGUE_ARG(((RogueString__split__Character( value_0, (RogueCharacter)',' )))) );
            }
            else
            {
              THIS->all_requisite = true;
            }
          }
          else if (((RogueString__operatorEQUALSEQUALS__String( arg_5, Rogue_literal_strings[21] ))))
          {
            if (!(!!(value_0->count)))
            {
              ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassRogueError*,ROGUE_CREATE_OBJECT(RogueError))), Rogue_literal_strings[22], ROGUE_ARG(((RogueString*)(NULL))), 0, 0 ))));
            }
            RogueStringList__add__StringList( ROGUE_ARG(THIS->target_list), ROGUE_ARG(((RogueString__split__Character( value_0, (RogueCharacter)',' )))) );
          }
          else if (((RogueString__operatorEQUALSEQUALS__String( arg_5, Rogue_literal_strings[23] ))))
          {
            if ((!(!!(value_0->count)) || ((RogueString__operatorEQUALSEQUALS__String( value_0, Rogue_literal_strings[24] )))))
            {
              THIS->gc_mode = 1;
            }
            else if (((RogueString__operatorEQUALSEQUALS__String( value_0, Rogue_literal_strings[25] ))))
            {
              THIS->gc_mode = 0;
            }
            else if (((RogueString__operatorEQUALSEQUALS__String( value_0, Rogue_literal_strings[26] ))))
            {
              THIS->gc_mode = 2;
            }
            else
            {
              ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassRogueError*,ROGUE_CREATE_OBJECT(RogueError))), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[27] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], value_0 )))) )))), Rogue_literal_strings[28] )))) )))), ROGUE_ARG(((RogueString*)(NULL))), 0, 0 ))));
            }
          }
          else if (((RogueString__operatorEQUALSEQUALS__String( arg_5, Rogue_literal_strings[29] ))))
          {
            if (!(!!(value_0->count)))
            {
              ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassRogueError*,ROGUE_CREATE_OBJECT(RogueError))), Rogue_literal_strings[30], ROGUE_ARG(((RogueString*)(NULL))), 0, 0 ))));
            }
            value_0 = ((RogueString*)((RogueString__to_lowercase( value_0 ))));
            RogueReal64 n_1 = (((RogueString__to_Real64( value_0 ))));
            if ((((RogueString__ends_with__String( value_0, ROGUE_ARG(((RogueCharacter__to_String( (RogueCharacter)'m' )))) ))) || ((RogueString__ends_with__String( value_0, Rogue_literal_strings[31] )))))
            {
              n_1 *= 1048576.0;
            }
            else if ((((RogueString__ends_with__String( value_0, ROGUE_ARG(((RogueCharacter__to_String( (RogueCharacter)'k' )))) ))) || ((RogueString__ends_with__String( value_0, Rogue_literal_strings[32] )))))
            {
              n_1 *= 1024.0;
            }
            RogueInt32 thresh_2 = (((RogueInt32)(n_1)));
            if (thresh_2 < 1)
            {
              thresh_2 = ((RogueInt32)2147483647);
            }
            THIS->gc_threshold = thresh_2;
          }
          else
          {
            ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassRogueError*,ROGUE_CREATE_OBJECT(RogueError))), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[33] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], arg_5 )))) )))), Rogue_literal_strings[34] )))) )))), ROGUE_ARG(((RogueString*)(NULL))), 0, 0 ))));
          }
        }
      }
      else
      {
        RogueStringList__add__String( ROGUE_ARG(THIS->source_files), arg_5 );
      }
    }
  }
}

void RogueRogueC__write_cpp( RogueClassRogueC* THIS )
{
  if (((void*)THIS->output_filepath) == ((void*)NULL))
  {
    THIS->output_filepath = (RogueFile__filename__String( ROGUE_ARG(THIS->first_filepath) ));
    if (((RogueString__ends_with__String( ROGUE_ARG(((RogueString__to_lowercase( ROGUE_ARG(THIS->output_filepath) )))), Rogue_literal_strings[59] ))))
    {
      THIS->output_filepath = ((RogueString__leftmost__Int32( ROGUE_ARG(THIS->output_filepath), -6 )));
    }
  }
  else if ((RogueFile__is_folder__String( ROGUE_ARG(THIS->output_filepath) )))
  {
    THIS->output_filepath = ((RogueString__operatorPLUS__String( ROGUE_ARG(THIS->output_filepath), Rogue_literal_strings[61] )));
    ROGUE_DEF_LOCAL_REF(RogueString*,filename_0,((RogueFile__filename__String( ROGUE_ARG(THIS->first_filepath) ))));
    if (((RogueString__ends_with__String( ROGUE_ARG(((RogueString__to_lowercase( filename_0 )))), Rogue_literal_strings[59] ))))
    {
      THIS->output_filepath = ((RogueString__operatorPLUS__String( ROGUE_ARG(THIS->output_filepath), ROGUE_ARG(((RogueString__leftmost__Int32( filename_0, -6 )))) )));
    }
    else
    {
      THIS->output_filepath = ((RogueString__operatorPLUS__String( ROGUE_ARG(THIS->output_filepath), Rogue_literal_strings[441] )));
    }
  }
  else if (((RogueString__ends_with__String( ROGUE_ARG(((RogueString__to_lowercase( ROGUE_ARG(THIS->output_filepath) )))), Rogue_literal_strings[442] ))))
  {
    THIS->output_filepath = ((RogueString__leftmost__Int32( ROGUE_ARG(THIS->output_filepath), -4 )));
  }
  RogueProgram__write_cpp__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(THIS->output_filepath) );
  RogueRogueC__on_compile_finished( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC)) );
  if (!!(THIS->execute_args))
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,exe_1,(((RogueString__to_lowercase( ROGUE_ARG(THIS->output_filepath) )))));
    ROGUE_DEF_LOCAL_REF(RogueString*,cmd_2,(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[626] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->output_filepath) )))) )))), Rogue_literal_strings[627] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], exe_1 )))) )))), Rogue_literal_strings[628] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], exe_1 )))) )))), Rogue_literal_strings[489] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->execute_args) )))) )))) )))));
    RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), cmd_2 );
    RogueGlobal__println( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)) );
    RogueSystem__run__String( cmd_2 );
  }
}

RogueClassRogueC* RogueRogueC__init_object( RogueClassRogueC* THIS )
{
  THIS->included_files = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  THIS->prefix_path_list = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  THIS->prefix_path_lookup = ((RogueString_LogicalTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_LogicalTable*,ROGUE_CREATE_OBJECT(String_LogicalTable))) )));
  THIS->compile_targets = ((RogueString_LogicalTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_LogicalTable*,ROGUE_CREATE_OBJECT(String_LogicalTable))) )));
  THIS->target_list = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  THIS->libraries_folder = Rogue_literal_strings[0];
  THIS->source_files = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  THIS->supported_targets = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  THIS->requisite_declarations = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  THIS->all_requisite = false;
  THIS->parsers = ((RogueParserList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueParserList*,ROGUE_CREATE_OBJECT(ParserList))) )));
  THIS->parsereaders_by_filepath = ((RogueString_ParseReaderTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_ParseReaderTable*,ROGUE_CREATE_OBJECT(String_ParseReaderTable))) )));
  THIS->gc_mode = 0;
  THIS->gc_threshold = 1048576;
  return (RogueClassRogueC*)(THIS);
}

RogueString* RogueException__to_String( RogueClassException* THIS )
{
  return (RogueString*)(THIS->message);
}

RogueString* RogueException__type_name( RogueClassException* THIS )
{
  return (RogueString*)(Rogue_literal_strings[58]);
}

RogueClassException* RogueException__init__String( RogueClassException* THIS, RogueString* _auto_59_0 )
{
  THIS->message = _auto_59_0;
  return (RogueClassException*)(THIS);
}

RogueClassException* RogueException__init_object( RogueClassException* THIS )
{
  THIS->stack_trace = ((RogueStackTrace__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassStackTrace*,ROGUE_CREATE_OBJECT(StackTrace))), 1 )));
  return (RogueClassException*)(THIS);
}

RogueString* RogueStackTrace__to_String( RogueClassStackTrace* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStackTrace__print__StringBuilder( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))) )))) ))));
}

RogueString* RogueStackTrace__type_name( RogueClassStackTrace* THIS )
{
  return (RogueString*)(Rogue_literal_strings[637]);
}

RogueClassStackTrace* RogueStackTrace__init__Int32( RogueClassStackTrace* THIS, RogueInt32 omit_count_0 )
{
  THIS->count = (RogueMath__max__Int32_Int32( ROGUE_ARG((Rogue_call_stack.count - (omit_count_0 + 1))), 0 ));
  THIS->entries = ((RogueStringList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))), ROGUE_ARG(THIS->count) )));
  {
    RogueInt32 i_1 = ((THIS->count - 1));
    RogueInt32 _auto_60_2 = (0);
    for (;i_1 >= _auto_60_2;--i_1)
    {
      RogueStringList__add__String( ROGUE_ARG(THIS->entries), ROGUE_ARG(RogueString_create_from_c_string( Rogue_call_stack.locations[i_1] )) );
    }
  }
  return (RogueClassStackTrace*)(THIS);
}

void RogueStackTrace__format( RogueClassStackTrace* THIS )
{
  if (THIS->is_formatted)
  {
    return;
  }
  THIS->is_formatted = true;
  RogueInt32 max_sp_0 = (0);
  {
    ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_273_2,(THIS->entries));
    RogueInt32 _auto_274_3 = (0);
    for (;_auto_274_3 < _auto_273_2->count;++_auto_274_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueString*,entry_4,(((RogueString*)(_auto_273_2->data->objects[_auto_274_3]))));
      RogueOptionalInt32 sp_1 = (((RogueString__locate__Character_OptionalInt32( entry_4, (RogueCharacter)' ', ROGUE_ARG((RogueOptionalInt32__create())) ))));
      if (sp_1.exists)
      {
        max_sp_0 = ((RogueInt32)(RogueMath__max__Int32_Int32( max_sp_0, ROGUE_ARG(sp_1.value) )));
      }
    }
  }
  ++max_sp_0;
  {
    ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_275_5,(THIS->entries));
    RogueInt32 i_6 = (0);
    for (;i_6 < _auto_275_5->count;++i_6)
    {
      ROGUE_DEF_LOCAL_REF(RogueString*,entry_7,(((RogueString*)(_auto_275_5->data->objects[i_6]))));
      if (((RogueString__contains__String( entry_7, ROGUE_ARG(((RogueCharacter__to_String( (RogueCharacter)' ' )))) ))))
      {
        THIS->entries->data->objects[i_6] = ((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__left_justified__Int32( ROGUE_ARG(((RogueString__before_first__Character( entry_7, (RogueCharacter)' ' )))), max_sp_0 )))), ROGUE_ARG(((RogueString__from_first__Character( entry_7, (RogueCharacter)' ' )))) )));
      }
    }
  }
}

void RogueStackTrace__print( RogueClassStackTrace* THIS )
{
  RogueStackTrace__print__StringBuilder( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassGlobal*)ROGUE_SINGLETON(Global))->printwriter_output_buffer) );
  RogueGlobal__flush( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)) );
}

RogueStringBuilder* RogueStackTrace__print__StringBuilder( RogueClassStackTrace* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStackTrace__format( ROGUE_ARG(THIS) );
  {
    ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_276_1,(THIS->entries));
    RogueInt32 _auto_277_2 = (0);
    for (;_auto_277_2 < _auto_276_1->count;++_auto_277_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueString*,entry_3,(((RogueString*)(_auto_276_1->data->objects[_auto_277_2]))));
      RogueStringBuilder__println__String( buffer_0, entry_3 );
    }
  }
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassStackTrace* RogueStackTrace__init_object( RogueClassStackTrace* THIS )
{
  return (RogueClassStackTrace*)(THIS);
}

RogueString* RogueProgram__type_name( RogueClassProgram* THIS )
{
  return (RogueString*)(Rogue_literal_strings[638]);
}

RogueInt32 RogueProgram__add_literal_string__String( RogueClassProgram* THIS, RogueString* value_0 )
{
  if (!(!!(value_0)))
  {
    return (RogueInt32)(0);
  }
  ROGUE_DEF_LOCAL_REF(RogueClassString_Int32TableEntry*,entry_1,(((RogueString_Int32Table__find__String( ROGUE_ARG(THIS->literal_string_lookup), value_0 )))));
  if (!!(entry_1))
  {
    return (RogueInt32)(entry_1->value);
  }
  else
  {
    RogueInt32 index_2 = (THIS->literal_string_list->count);
    RogueString_Int32Table__set__String_Int32( ROGUE_ARG(THIS->literal_string_lookup), value_0, index_2 );
    RogueStringList__add__String( ROGUE_ARG(THIS->literal_string_list), value_0 );
    return (RogueInt32)(index_2);
  }
}

void RogueProgram__add_module_id__String_String( RogueClassProgram* THIS, RogueString* module_name_0, RogueString* id_name_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueStringList*,list_2,(((RogueString_StringListTable__get__String( ROGUE_ARG(THIS->ids_by_module), module_name_0 )))));
  if (!(!!(list_2)))
  {
    list_2 = ((RogueStringList*)((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) ))));
    RogueString_StringListTable__set__String_StringList( ROGUE_ARG(THIS->ids_by_module), module_name_0, list_2 );
  }
  RogueStringList__add__String( list_2, id_name_1 );
}

void RogueProgram__add_template__Template( RogueClassProgram* THIS, RogueClassTemplate* template_0 )
{
  RogueTemplateList__add__Template( ROGUE_ARG(THIS->template_list), template_0 );
  {
    {
      RogueInt32 param_count_1 = (((RogueTemplate__type_parameter_count( template_0 ))));
      ROGUE_DEF_LOCAL_REF(RogueClassTemplate*,existing_template_2,(((RogueString_TemplateTable__get__String( ROGUE_ARG(THIS->template_lookup), ROGUE_ARG(template_0->name) )))));
      if (!(!!(existing_template_2))) goto _auto_90;
      if ( !(param_count_1 != ((RogueTemplate__type_parameter_count( existing_template_2 )))) ) goto _auto_91;
      if (!(!!(existing_template_2->alternates_by_param_count)))
      {
        existing_template_2->alternates_by_param_count = ((RogueInt32_TemplateTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassInt32_TemplateTable*,ROGUE_CREATE_OBJECT(Int32_TemplateTable))) )));
      }
      if ( !(!(((RogueInt32_TemplateTable__contains__Int32( ROGUE_ARG(existing_template_2->alternates_by_param_count), param_count_1 ))))) ) goto _auto_91;
      RogueInt32_TemplateTable__set__Int32_Template( ROGUE_ARG(existing_template_2->alternates_by_param_count), param_count_1, template_0 );
      goto _auto_89;
      _auto_90:;
      RogueString_TemplateTable__set__String_Template( ROGUE_ARG(THIS->template_lookup), ROGUE_ARG(template_0->name), template_0 );
      goto _auto_89;
    }
    _auto_91:;
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(template_0->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[321] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(template_0->name) )))) )))), Rogue_literal_strings[322] )))) )))) ))));
  }
  _auto_89:;
}

void RogueProgram__configure( RogueClassProgram* THIS )
{
  THIS->type_null = ((RogueProgram__create_built_in_type__String_Int32( ROGUE_ARG(THIS), Rogue_literal_strings[2], 32 )));
  THIS->type_Real64 = ((RogueProgram__create_built_in_type__String_Int32( ROGUE_ARG(THIS), Rogue_literal_strings[45], 1 )));
  THIS->type_Real32 = ((RogueProgram__create_built_in_type__String_Int32( ROGUE_ARG(THIS), Rogue_literal_strings[46], 1 )));
  THIS->type_Int64 = ((RogueProgram__create_built_in_type__String_Int32( ROGUE_ARG(THIS), Rogue_literal_strings[47], 1 )));
  THIS->type_Int32 = ((RogueProgram__create_built_in_type__String_Int32( ROGUE_ARG(THIS), Rogue_literal_strings[48], 1 )));
  THIS->type_Character = ((RogueProgram__create_built_in_type__String_Int32( ROGUE_ARG(THIS), Rogue_literal_strings[49], 1 )));
  THIS->type_Byte = ((RogueProgram__create_built_in_type__String_Int32( ROGUE_ARG(THIS), Rogue_literal_strings[50], 1 )));
  THIS->type_Logical = ((RogueProgram__create_built_in_type__String_Int32( ROGUE_ARG(THIS), Rogue_literal_strings[51], 1 )));
  THIS->type_Object = ((RogueProgram__create_built_in_type__String_Int32( ROGUE_ARG(THIS), Rogue_literal_strings[52], 32 )));
  THIS->type_String = ((RogueProgram__create_built_in_type__String_Int32( ROGUE_ARG(THIS), Rogue_literal_strings[53], 48 )));
  THIS->type_StringBuilder = ((RogueProgram__create_built_in_type__String_Int32( ROGUE_ARG(THIS), Rogue_literal_strings[54], 0 )));
  THIS->type_NativeArray = ((RogueProgram__create_built_in_type__String_Int32( ROGUE_ARG(THIS), Rogue_literal_strings[55], 32 )));
  THIS->type_GenericList = ((RogueProgram__create_built_in_type__String_Int32( ROGUE_ARG(THIS), Rogue_literal_strings[56], 0 )));
  THIS->type_Global = ((RogueProgram__create_built_in_type__String_Int32( ROGUE_ARG(THIS), Rogue_literal_strings[57], 0 )));
  THIS->type_Exception = ((RogueProgram__create_built_in_type__String_Int32( ROGUE_ARG(THIS), Rogue_literal_strings[58], 0 )));
  THIS->type_Object->simplify_name = true;
  THIS->type_String->simplify_name = true;
  THIS->type_StringBuilder->simplify_name = true;
  THIS->type_null->organized = true;
  THIS->type_null->defined = true;
  RogueStringList__add__String( ROGUE_ARG(THIS->literal_string_list), Rogue_literal_strings[0] );
  RogueString_Int32Table__set__String_Int32( ROGUE_ARG(THIS->literal_string_lookup), Rogue_literal_strings[0], 0 );
}

RogueString* RogueProgram__create_unique_id( RogueClassProgram* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[286], ROGUE_ARG(((RogueProgram__next_unique_integer( ROGUE_ARG(THIS) )))) ))));
}

RogueClassMethod* RogueProgram__get_launch_method__Token( RogueClassProgram* THIS, RogueClassToken* t_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassType*,type_global_1,(((RogueProgram__get_type_reference__Token_String( ROGUE_ARG(THIS), t_0, Rogue_literal_strings[57] )))));
  if (!(!!(THIS->m_on_launch)))
  {
    THIS->m_on_launch = ((RogueMethod__init__Token_Type_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassMethod*,ROGUE_CREATE_OBJECT(Method))), t_0, type_global_1, Rogue_literal_strings[268] )));
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS->m_on_launch->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->m_on_launch), t_0, Rogue_literal_strings[269], false )))))) );
  }
  return (RogueClassMethod*)(THIS->m_on_launch);
}

RogueInt32 RogueProgram__next_unique_integer( RogueClassProgram* THIS )
{
  ++THIS->unique_integer;
  return (RogueInt32)((THIS->unique_integer - 1));
}

RogueClassTemplate* RogueProgram__find_template__String( RogueClassProgram* THIS, RogueString* name_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassTemplate*,template_1,0);
  switch (((RogueInt32)(((RogueString__last( name_0 ))))))
  {
    case (RogueCharacter)'?':
    {
      if (!!(((RogueProgram__find_type__String( ROGUE_ARG(THIS), ROGUE_ARG(((RogueString__leftmost__Int32( name_0, -1 )))) )))))
      {
        return (RogueClassTemplate*)(((RogueString_TemplateTable__get__String( ROGUE_ARG(THIS->template_lookup), Rogue_literal_strings[334] ))));
      }
      else
      {
        return (RogueClassTemplate*)(((RogueClassTemplate*)(NULL)));
      }
      break;
    }
    case (RogueCharacter)']':
    {
      template_1 = ((RogueClassTemplate*)((RogueString_TemplateTable__get__String( ROGUE_ARG(THIS->template_lookup), Rogue_literal_strings[335] ))));
      break;
    }
    default:
    {
      template_1 = ((RogueClassTemplate*)((RogueString_TemplateTable__get__String( ROGUE_ARG(THIS->template_lookup), ROGUE_ARG(((RogueString__before_first__Character( name_0, (RogueCharacter)'<' )))) ))));
    }
  }
  if (!!(template_1))
  {
    return (RogueClassTemplate*)(template_1);
  }
  return (RogueClassTemplate*)(((RogueClassTemplate*)(NULL)));
}

RogueClassType* RogueProgram__find_type__String( RogueClassProgram* THIS, RogueString* name_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassType*,type_1,(((RogueString_TypeTable__get__String( ROGUE_ARG(THIS->type_lookup), name_0 )))));
  if (!!(type_1))
  {
    return (RogueClassType*)(type_1);
  }
  ROGUE_DEF_LOCAL_REF(RogueClassTemplate*,template_2,(((RogueProgram__find_template__String( ROGUE_ARG(THIS), name_0 )))));
  if (!!(template_2))
  {
    type_1 = ((RogueClassType*)((RogueType__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassType*,ROGUE_CREATE_OBJECT(Type))), ROGUE_ARG(template_2->t), name_0 ))));
    RogueString_TypeTable__set__String_Type( ROGUE_ARG(THIS->type_lookup), name_0, type_1 );
    return (RogueClassType*)(type_1);
  }
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

RogueClassType* RogueProgram__get_type_reference__Token_String( RogueClassProgram* THIS, RogueClassToken* t_0, RogueString* name_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassType*,type_2,(((RogueString_TypeTable__get__String( ROGUE_ARG(THIS->type_lookup), name_1 )))));
  if (!!(type_2))
  {
    return (RogueClassType*)(type_2);
  }
  type_2 = ((RogueClassType*)((RogueType__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassType*,ROGUE_CREATE_OBJECT(Type))), t_0, name_1 ))));
  RogueString_TypeTable__set__String_Type( ROGUE_ARG(THIS->type_lookup), name_1, type_2 );
  return (RogueClassType*)(type_2);
}

RogueString* RogueProgram__get_callback_type_signature__TypeList( RogueClassProgram* THIS, RogueTypeList* parameter_types_0 )
{
  RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__clear( ROGUE_ARG(THIS->string_buffer) )))), Rogue_literal_strings[80] );
  if (!!(parameter_types_0))
  {
    RogueLogical first_1 = (true);
    {
      ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_108_2,(parameter_types_0));
      RogueInt32 _auto_109_3 = (0);
      for (;_auto_109_3 < _auto_108_2->count;++_auto_109_3)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassType*,type_4,(((RogueClassType*)(_auto_108_2->data->objects[_auto_109_3]))));
        if (first_1)
        {
          first_1 = ((RogueLogical)false);
        }
        else
        {
          RogueStringBuilder__print__Character( ROGUE_ARG(THIS->string_buffer), (RogueCharacter)',' );
        }
        RogueStringBuilder__print__String( ROGUE_ARG(THIS->string_buffer), ROGUE_ARG(type_4->name) );
      }
    }
  }
  RogueStringBuilder__print__Character( ROGUE_ARG(THIS->string_buffer), (RogueCharacter)')' );
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(THIS->string_buffer) ))));
}

RogueClassType* RogueProgram__get_callback_type_reference__Token_TypeList_Type( RogueClassProgram* THIS, RogueClassToken* t_0, RogueTypeList* parameter_types_1, RogueClassType* return_type_2 )
{
  ROGUE_DEF_LOCAL_REF(RogueString*,name_3,(((RogueString__operatorPLUS__String( Rogue_literal_strings[278], ROGUE_ARG(((RogueProgram__get_callback_type_signature__TypeList( ROGUE_ARG(THIS), parameter_types_1 )))) )))));
  if (!!(return_type_2))
  {
    name_3 = ((RogueString*)((RogueString__operatorPLUS__String( name_3, ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[187], ROGUE_ARG(return_type_2->name) )))) ))));
  }
  ROGUE_DEF_LOCAL_REF(RogueClassType*,type_4,(((RogueProgram__get_type_reference__Token_String( ROGUE_ARG(THIS), t_0, name_3 )))));
  if (type_4->defined)
  {
    return (RogueClassType*)(type_4);
  }
  type_4->defined = true;
  type_4->callback_parameter_types = parameter_types_1;
  type_4->_callback_return_type = return_type_2;
  RogueAttributes__add__Int32( ROGUE_ARG(type_4->attributes), 0 );
  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_call_5,(((RogueType__add_method__Token_String( type_4, t_0, Rogue_literal_strings[279] )))));
  if (!!(parameter_types_1))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_111_6,(parameter_types_1));
      RogueInt32 i_7 = (0);
      for (;i_7 < _auto_111_6->count;++i_7)
      {
        RogueMethod__add_parameter__Token_String_Type( m_call_5, t_0, ROGUE_ARG(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[280], ROGUE_ARG((i_7 + 1)) )))), ROGUE_ARG(((RogueClassType*)(parameter_types_1->data->objects[i_7]))) );
      }
    }
  }
  if (!!(return_type_2))
  {
    m_call_5->_return_type = return_type_2;
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)m_call_5->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReturn*,ROGUE_CREATE_OBJECT(CmdReturn))), t_0, ROGUE_ARG(((RogueType__create_default_value__Token( return_type_2, t_0 )))) )))))) );
  }
  return (RogueClassType*)(type_4);
}

RogueLogical RogueProgram__is_type_defined__String( RogueClassProgram* THIS, RogueString* name_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassType*,type_1,(((RogueString_TypeTable__get__String( ROGUE_ARG(THIS->type_lookup), name_0 )))));
  if (!(!!(type_1)))
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(type_1->defined);
}

RogueClassType* RogueProgram__create_built_in_type__String_Int32( RogueClassProgram* THIS, RogueString* name_0, RogueInt32 attributes_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_2,((call_ROGUEM94( 4, ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[43] )))), Rogue_literal_strings[44], 0, 0 ))));
  ROGUE_DEF_LOCAL_REF(RogueClassType*,type_3,(((RogueProgram__get_type_reference__Token_String( ROGUE_ARG(THIS), t_2, name_0 )))));
  RogueAttributes__add__Int32( ROGUE_ARG(type_3->attributes), attributes_1 );
  return (RogueClassType*)(type_3);
}

void RogueProgram__resolve( RogueClassProgram* THIS )
{
  if (!!(THIS->m_on_launch))
  {
    RogueType__add_method__Method( ROGUE_ARG(THIS->type_Global), ROGUE_ARG(THIS->m_on_launch) );
  }
  else
  {
    THIS->m_on_launch = ((RogueType__add_method__Token_String( ROGUE_ARG(THIS->type_Global), ROGUE_ARG(THIS->type_Global->t), Rogue_literal_strings[268] )));
  }
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS->m_on_launch->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( ROGUE_ARG(THIS->m_on_launch), ROGUE_ARG(THIS->m_on_launch->t), Rogue_literal_strings[271], false )))))) );
  RogueMethod__make_requisite( ROGUE_ARG(THIS->m_on_launch) );
  {
    ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_115_4,(THIS->global_properties));
    RogueInt32 _auto_116_5 = (0);
    for (;_auto_116_5 < _auto_115_4->count;++_auto_116_5)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_6,(((RogueClassProperty*)(_auto_115_4->data->objects[_auto_116_5]))));
      if (!(!!(p_6->_type)))
      {
        if (!!(p_6->initial_value))
        {
          p_6->_type = (call_ROGUEM58( 17, ROGUE_ARG(p_6->initial_value), ROGUE_ARG(((RogueScope__init__Type_Method( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassScope*,ROGUE_CREATE_OBJECT(Scope))), ROGUE_ARG(THIS->type_Global), ROGUE_ARG(((RogueClassMethod*)(NULL))) )))) ));
          if (!(!!(p_6->_type)))
          {
            ROGUE_DEF_LOCAL_REF(RogueString*,mesg_0,(Rogue_literal_strings[330]));
            ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(p_6->t), mesg_0 ))));
          }
        }
        else
        {
          ROGUE_DEF_LOCAL_REF(RogueString*,mesg_1,(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[331] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(p_6->name) )))) )))), Rogue_literal_strings[332] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(p_6->name) )))) )))), Rogue_literal_strings[333] )))) )))));
          ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(p_6->t), mesg_1 ))));
        }
      }
      RogueType__add_property__Property( ROGUE_ARG(THIS->type_Global), p_6 );
    }
  }
  RogueType__resolve( ROGUE_ARG(THIS->type_null) );
  RogueType__resolve( ROGUE_ARG(THIS->type_Real64) );
  RogueType__resolve( ROGUE_ARG(THIS->type_Real32) );
  RogueType__resolve( ROGUE_ARG(THIS->type_Int64) );
  RogueType__resolve( ROGUE_ARG(THIS->type_Int32) );
  RogueType__resolve( ROGUE_ARG(THIS->type_Character) );
  RogueType__resolve( ROGUE_ARG(THIS->type_Byte) );
  RogueType__resolve( ROGUE_ARG(THIS->type_Logical) );
  RogueType__resolve( ROGUE_ARG(THIS->type_Global) );
  RogueType__resolve( ROGUE_ARG(THIS->type_Exception) );
  RogueType__resolve( ROGUE_ARG(THIS->type_Object) );
  RogueType__resolve( ROGUE_ARG(THIS->type_NativeArray) );
  RogueType__resolve( ROGUE_ARG(THIS->type_GenericList) );
  RogueType__resolve( ROGUE_ARG(THIS->type_String) );
  if (THIS->all_requisite)
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueClassString_TypeTable*,_auto_119_7,(THIS->type_lookup));
      RogueInt32 _auto_120_8 = (0);
      for (;_auto_120_8 < ((RogueString_TypeTable__count( _auto_119_7 )));++_auto_120_8)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassType*,t_9,(((RogueString_TypeTable__at__Int32( _auto_119_7, _auto_120_8 )))));
        RogueType__resolve( t_9 );
        RogueAttributes__add__Int32( ROGUE_ARG(t_9->attributes), 32768 );
        {
          ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_125_10,(t_9->global_method_list));
          RogueInt32 _auto_126_11 = (0);
          for (;_auto_126_11 < _auto_125_10->count;++_auto_126_11)
          {
            ROGUE_DEF_LOCAL_REF(RogueClassMethod*,r_12,(((RogueClassMethod*)(_auto_125_10->data->objects[_auto_126_11]))));
            RogueAttributes__add__Int32( ROGUE_ARG(r_12->attributes), 32768 );
          }
        }
        {
          ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_127_13,(t_9->method_list));
          RogueInt32 _auto_128_14 = (0);
          for (;_auto_128_14 < _auto_127_13->count;++_auto_128_14)
          {
            ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_15,(((RogueClassMethod*)(_auto_127_13->data->objects[_auto_128_14]))));
            RogueAttributes__add__Int32( ROGUE_ARG(m_15->attributes), 32768 );
          }
        }
      }
    }
    {
      ROGUE_DEF_LOCAL_REF(RogueTemplateList*,_auto_129_16,(THIS->template_list));
      RogueInt32 _auto_130_17 = (0);
      for (;_auto_130_17 < _auto_129_16->count;++_auto_130_17)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassTemplate*,templ_18,(((RogueClassTemplate*)(_auto_129_16->data->objects[_auto_130_17]))));
        if (!(!!(templ_18->type_parameters)))
        {
          RogueAttributes__add__Int32( ROGUE_ARG(templ_18->attributes), 32768 );
          ROGUE_DEF_LOCAL_REF(RogueClassType*,t_2,(((RogueProgram__get_type_reference__Token_String( ROGUE_ARG(THIS), ROGUE_ARG(templ_18->t), ROGUE_ARG(templ_18->name) )))));
          RogueType__resolve( t_2 );
          {
            ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_131_19,(t_2->global_method_list));
            RogueInt32 _auto_132_20 = (0);
            for (;_auto_132_20 < _auto_131_19->count;++_auto_132_20)
            {
              ROGUE_DEF_LOCAL_REF(RogueClassMethod*,r_21,(((RogueClassMethod*)(_auto_131_19->data->objects[_auto_132_20]))));
              RogueAttributes__add__Int32( ROGUE_ARG(r_21->attributes), 32768 );
            }
          }
          {
            ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_133_22,(t_2->method_list));
            RogueInt32 _auto_134_23 = (0);
            for (;_auto_134_23 < _auto_133_22->count;++_auto_134_23)
            {
              ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_24,(((RogueClassMethod*)(_auto_133_22->data->objects[_auto_134_23]))));
              RogueAttributes__add__Int32( ROGUE_ARG(m_24->attributes), 32768 );
            }
          }
        }
      }
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueTemplateList*,_auto_135_25,(THIS->template_list));
    RogueInt32 _auto_136_26 = (0);
    for (;_auto_136_26 < _auto_135_25->count;++_auto_136_26)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassTemplate*,templ_27,(((RogueClassTemplate*)(_auto_135_25->data->objects[_auto_136_26]))));
      if ((!!((templ_27->attributes->flags & 32768)) && !(!!(templ_27->type_parameters))))
      {
        RogueType__resolve( ROGUE_ARG(((RogueProgram__get_type_reference__Token_String( ROGUE_ARG(THIS), ROGUE_ARG(templ_27->t), ROGUE_ARG(templ_27->name) )))) );
      }
    }
  }
  RogueInt32 i_3 = (0);
  while (i_3 < THIS->type_list->count)
  {
    RogueType__resolve( ROGUE_ARG(((RogueClassType*)(THIS->type_list->data->objects[i_3]))) );
    ++i_3;
  }
  RogueProgram__cull_unused_code( ROGUE_ARG(THIS) );
  RogueProgram__reorder_compounds( ROGUE_ARG(THIS) );
}

void RogueProgram__reorder_compounds( RogueClassProgram* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueTypeList*,compounds_0,(((RogueTypeList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueTypeList*,ROGUE_CREATE_OBJECT(TypeList))) )))));
  RogueInt32 write_i_1 = (0);
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_137_5,(THIS->type_list));
    RogueInt32 read_i_6 = (0);
    for (;read_i_6 < _auto_137_5->count;++read_i_6)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_2,(((RogueClassType*)(THIS->type_list->data->objects[read_i_6]))));
      if (((RogueType__is_compound( type_2 ))))
      {
        RogueProgram__collect_compound_dependencies__Type_TypeList( ROGUE_ARG(THIS), type_2, compounds_0 );
      }
      else
      {
        THIS->type_list->data->objects[write_i_1] = type_2;
        type_2->index = write_i_1;
        ++write_i_1;
      }
    }
  }
  RogueTypeList__discard_from__Int32( ROGUE_ARG(THIS->type_list), write_i_1 );
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_138_7,(compounds_0));
    RogueInt32 _auto_139_8 = (0);
    for (;_auto_139_8 < _auto_138_7->count;++_auto_139_8)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_9,(((RogueClassType*)(_auto_138_7->data->objects[_auto_139_8]))));
      type_9->index = THIS->type_list->count;
      RogueTypeList__add__Type( ROGUE_ARG(THIS->type_list), type_9 );
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_140_10,(THIS->type_list));
    RogueInt32 _auto_141_11 = (0);
    for (;_auto_141_11 < _auto_140_10->count;++_auto_141_11)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_12,(((RogueClassType*)(_auto_140_10->data->objects[_auto_141_11]))));
      if ((((RogueType__instance_of__Type( type_12, ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Exception) ))) && ((void*)type_12) != ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Exception)))
      {
        if (type_12->base_class->index > type_12->index)
        {
          RogueInt32 i1_3 = (type_12->base_class->index);
          RogueInt32 i2_4 = (type_12->index);
          RogueTypeList__swap__Int32_Int32( ROGUE_ARG(THIS->type_list), i1_3, i2_4 );
          type_12->index = i1_3;
          type_12->base_class->index = i2_4;
        }
      }
    }
  }
}

void RogueProgram__collect_compound_dependencies__Type_TypeList( RogueClassProgram* THIS, RogueClassType* type_0, RogueTypeList* compounds_1 )
{
  if (type_0->index == -1)
  {
    return;
  }
  type_0->index = -1;
  {
    ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_142_2,(type_0->property_list));
    RogueInt32 _auto_143_3 = (0);
    for (;_auto_143_3 < _auto_142_2->count;++_auto_143_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_4,(((RogueClassProperty*)(_auto_142_2->data->objects[_auto_143_3]))));
      if (((RogueType__is_compound( ROGUE_ARG(p_4->_type) ))))
      {
        RogueProgram__collect_compound_dependencies__Type_TypeList( ROGUE_ARG(THIS), ROGUE_ARG(p_4->_type), compounds_1 );
      }
    }
  }
  RogueTypeList__add__Type( compounds_1, type_0 );
}

void RogueProgram__cull_unused_code( RogueClassProgram* THIS )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_144_2,(THIS->type_list));
    RogueInt32 _auto_145_3 = (0);
    for (;_auto_145_3 < _auto_144_2->count;++_auto_145_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_4,(((RogueClassType*)(_auto_144_2->data->objects[_auto_145_3]))));
      if (((RogueType__is_requisite( type_4 ))))
      {
        RogueType__trace_used_code( type_4 );
      }
    }
  }
  RogueProgram__trace_overridden_methods( ROGUE_ARG(THIS) );
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_146_5,(THIS->type_list));
    RogueInt32 _auto_147_6 = (0);
    for (;_auto_147_6 < _auto_146_5->count;++_auto_147_6)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_7,(((RogueClassType*)(_auto_146_5->data->objects[_auto_147_6]))));
      RogueType__cull_unused_methods( type_7 );
    }
  }
  RogueInt32 write_i_0 = (0);
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_148_8,(THIS->type_list));
    RogueInt32 read_i_9 = (0);
    for (;read_i_9 < _auto_148_8->count;++read_i_9)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_1,(((RogueClassType*)(THIS->type_list->data->objects[read_i_9]))));
      if (!(((RogueType__should_cull( type_1 )))))
      {
        THIS->type_list->data->objects[write_i_0] = type_1;
        type_1->index = write_i_0;
        ++write_i_0;
      }
    }
  }
  RogueTypeList__discard_from__Int32( ROGUE_ARG(THIS->type_list), write_i_0 );
}

void RogueProgram__trace_overridden_methods( RogueClassProgram* THIS )
{
  RogueLogical traced_new_methods_0 = (true);
  while (traced_new_methods_0)
  {
    traced_new_methods_0 = ((RogueLogical)false);
    {
      ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_149_5,(THIS->type_list));
      RogueInt32 _auto_150_6 = (0);
      for (;_auto_150_6 < _auto_149_5->count;++_auto_150_6)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassType*,type_7,(((RogueClassType*)(_auto_149_5->data->objects[_auto_150_6]))));
        if (type_7->is_used)
        {
          if (((RogueType__is_aspect( type_7 ))))
          {
            {
              ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_151_8,(type_7->method_list));
              RogueInt32 _auto_152_9 = (0);
              for (;_auto_152_9 < _auto_151_8->count;++_auto_152_9)
              {
                ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_10,(((RogueClassMethod*)(_auto_151_8->data->objects[_auto_152_9]))));
                if (m_10->is_used)
                {
                  {
                    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_153_11,(m_10->incorporating_classes));
                    RogueInt32 _auto_154_12 = (0);
                    for (;_auto_154_12 < _auto_153_11->count;++_auto_154_12)
                    {
                      ROGUE_DEF_LOCAL_REF(RogueClassType*,ic_13,(((RogueClassType*)(_auto_153_11->data->objects[_auto_154_12]))));
                      if (ic_13->is_used)
                      {
                        ROGUE_DEF_LOCAL_REF(RogueClassMethod*,im_1,(((RogueType__find_method__String( ic_13, ROGUE_ARG(m_10->signature) )))));
                        if (!(im_1->is_used))
                        {
                          traced_new_methods_0 = ((RogueLogical)true);
                          RogueMethod__trace_used_code( im_1 );
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            {
              ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_155_14,(type_7->method_list));
              RogueInt32 _auto_156_15 = (0);
              for (;_auto_156_15 < _auto_155_14->count;++_auto_156_15)
              {
                ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_16,(((RogueClassMethod*)(_auto_155_14->data->objects[_auto_156_15]))));
                if (m_16->is_used)
                {
                  if ((!!(m_16->overridden_method) && !(m_16->overridden_method->is_used)))
                  {
                    traced_new_methods_0 = ((RogueLogical)true);
                    RogueMethod__trace_used_code( ROGUE_ARG(m_16->overridden_method) );
                  }
                  {
                    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_157_17,(m_16->overriding_methods));
                    RogueInt32 _auto_158_18 = (0);
                    for (;_auto_158_18 < _auto_157_17->count;++_auto_158_18)
                    {
                      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,overriding_m_19,(((RogueClassMethod*)(_auto_157_17->data->objects[_auto_158_18]))));
                      if ((!(overriding_m_19->is_used) && overriding_m_19->type_context->is_used))
                      {
                        traced_new_methods_0 = ((RogueLogical)true);
                        RogueMethod__trace_used_code( overriding_m_19 );
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  ROGUE_DEF_LOCAL_REF(RogueTypeList*,class_list_2,(((RogueTypeList__choose__Function_Type_RETURNSLogical( ROGUE_ARG(THIS->type_list), ROGUE_ARG(((RogueClassFunction_Type_RETURNSLogical*)(((RogueClassFunction_159*)ROGUE_SINGLETON(Function_159))))) )))));
  ROGUE_DEF_LOCAL_REF(RogueTypeList*,aspect_list_3,(((RogueTypeList__choose__Function_Type_RETURNSLogical( ROGUE_ARG(THIS->type_list), ROGUE_ARG(((RogueClassFunction_Type_RETURNSLogical*)(((RogueClassFunction_160*)ROGUE_SINGLETON(Function_160))))) )))));
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_161_20,(aspect_list_3));
    RogueInt32 _auto_162_21 = (0);
    for (;_auto_162_21 < _auto_161_20->count;++_auto_162_21)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,aspect_22,(((RogueClassType*)(_auto_161_20->data->objects[_auto_162_21]))));
      {
        ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_163_23,(aspect_22->method_list));
        RogueInt32 _auto_164_24 = (0);
        for (;_auto_164_24 < _auto_163_23->count;++_auto_164_24)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassMethod*,aspect_m_25,(((RogueClassMethod*)(_auto_163_23->data->objects[_auto_164_24]))));
          if (aspect_m_25->is_used)
          {
            RogueTypeList__clear( ROGUE_ARG(aspect_m_25->incorporating_classes) );
          }
        }
      }
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_165_26,(aspect_list_3));
    RogueInt32 _auto_166_27 = (0);
    for (;_auto_166_27 < _auto_165_26->count;++_auto_166_27)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,aspect_28,(((RogueClassType*)(_auto_165_26->data->objects[_auto_166_27]))));
      {
        ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_167_29,(class_list_2));
        RogueInt32 _auto_168_30 = (0);
        for (;_auto_168_30 < _auto_167_29->count;++_auto_168_30)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassType*,type_31,(((RogueClassType*)(_auto_167_29->data->objects[_auto_168_30]))));
          if (((RogueType__instance_of__Type( type_31, aspect_28 ))))
          {
            {
              ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_169_32,(aspect_28->method_list));
              RogueInt32 _auto_170_33 = (0);
              for (;_auto_170_33 < _auto_169_32->count;++_auto_170_33)
              {
                ROGUE_DEF_LOCAL_REF(RogueClassMethod*,aspect_m_34,(((RogueClassMethod*)(_auto_169_32->data->objects[_auto_170_33]))));
                if (aspect_m_34->is_used)
                {
                  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,class_m_4,(((RogueType__find_method__String( type_31, ROGUE_ARG(aspect_m_34->signature) )))));
                  if ((!!(class_m_4) && class_m_4->is_used))
                  {
                    RogueTypeList__add__Type( ROGUE_ARG(aspect_m_34->incorporating_classes), type_31 );
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

RogueString* RogueProgram__validate_cpp_name__String( RogueClassProgram* THIS, RogueString* name_0 )
{
  RogueLogical begins_with_code_prefix_1 = (false);
  if (((RogueString__begins_with__String( name_0, ROGUE_ARG(THIS->code_prefix) ))))
  {
    begins_with_code_prefix_1 = ((RogueLogical)true);
    name_0 = ((RogueString*)((RogueString__from__Int32( name_0, ROGUE_ARG(THIS->code_prefix->count) ))));
  }
  RogueLogical all_underscores_2 = (true);
  if (((RogueString__ends_with__String( name_0, Rogue_literal_strings[443] ))))
  {
    {
      RogueInt32 i_3 = (0);
      RogueInt32 _auto_61_4 = ((name_0->count - 5));
      for (;i_3 <= _auto_61_4;++i_3)
      {
        if (name_0->characters[i_3] != (RogueCharacter)'_')
        {
          all_underscores_2 = ((RogueLogical)false);
          goto _auto_171;
        }
      }
    }
    _auto_171:;
    name_0 = ((RogueString*)((RogueString__operatorPLUS__String( Rogue_literal_strings[425], name_0 ))));
  }
  RogueOptionalInt32 i1_5 = (((RogueString__locate__Character_OptionalInt32( name_0, (RogueCharacter)'?', ROGUE_ARG((RogueOptionalInt32__create())) ))));
  while (i1_5.exists)
  {
    name_0 = ((RogueString*)((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[334], ROGUE_ARG(((RogueString__leftmost__Int32( name_0, ROGUE_ARG(i1_5.value) )))) )))), ROGUE_ARG(((RogueString__from__Int32( name_0, ROGUE_ARG((i1_5.value + 1)) )))) ))));
    i1_5 = ((RogueOptionalInt32)((RogueString__locate__Character_OptionalInt32( name_0, (RogueCharacter)'?', ROGUE_ARG((RogueOptionalInt32__create())) ))));
  }
  i1_5 = ((RogueOptionalInt32)((RogueString__locate__String_OptionalInt32( name_0, Rogue_literal_strings[212], ROGUE_ARG((RogueOptionalInt32__create())) ))));
  while (i1_5.exists)
  {
    RogueOptionalInt32 i2_6 = (((RogueString__locate_last__String_OptionalInt32( name_0, Rogue_literal_strings[130], ROGUE_ARG((RogueOptionalInt32__create())) ))));
    if (!(i2_6.exists))
    {
      goto _auto_172;
    }
    ROGUE_DEF_LOCAL_REF(RogueString*,before_7,(((RogueString__from__Int32_Int32( name_0, 0, ROGUE_ARG((i1_5.value - 1)) )))));
    ROGUE_DEF_LOCAL_REF(RogueString*,after_8,(((RogueString__from__Int32( name_0, ROGUE_ARG((i2_6.value + 2)) )))));
    ROGUE_DEF_LOCAL_REF(RogueString*,middle_9,(((RogueString__from__Int32_Int32( name_0, ROGUE_ARG((i1_5.value + 2)), ROGUE_ARG((i2_6.value - 1)) )))));
    name_0 = ((RogueString*)((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(((RogueProgram__validate_cpp_name__String( ROGUE_ARG(THIS), middle_9 )))) )))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], before_7 )))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], after_8 )))) )))) ))));
    if (!!(((RogueProgram__find_type__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), name_0 )))))
    {
      name_0 = ((RogueString*)((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], before_7 )))) )))), Rogue_literal_strings[444] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], middle_9 )))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], after_8 )))) )))) ))));
    }
    i1_5 = ((RogueOptionalInt32)((RogueString__locate__String_OptionalInt32( name_0, Rogue_literal_strings[212], ROGUE_ARG((RogueOptionalInt32__create())) ))));
  }
  _auto_172:;
  i1_5 = ((RogueOptionalInt32)((RogueString__locate__String_OptionalInt32( name_0, Rogue_literal_strings[198], ROGUE_ARG((RogueOptionalInt32__create())) ))));
  while (i1_5.exists)
  {
    name_0 = ((RogueString*)((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__from__Int32_Int32( name_0, 0, ROGUE_ARG((i1_5.value - 1)) )))), Rogue_literal_strings[335] )))), ROGUE_ARG(((RogueString__from__Int32( name_0, ROGUE_ARG((i1_5.value + 2)) )))) ))));
    i1_5 = ((RogueOptionalInt32)((RogueString__locate__String_OptionalInt32( name_0, Rogue_literal_strings[198], ROGUE_ARG((RogueOptionalInt32__create())) ))));
  }
  RogueStringBuilder__clear( ROGUE_ARG(THIS->string_buffer) );
  if (begins_with_code_prefix_1)
  {
    RogueStringBuilder__print__String( ROGUE_ARG(THIS->string_buffer), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->code_prefix) );
  }
  RogueInt32 count_10 = (name_0->count);
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,_auto_173_12,(name_0));
    RogueInt32 i_13 = (0);
    for (;i_13 < _auto_173_12->count;++i_13)
    {
      RogueCharacter ch_11 = (name_0->characters[i_13]);
      if (((RogueCharacter__is_alphanumeric( ch_11 ))))
      {
        RogueStringBuilder__print__Character( ROGUE_ARG(THIS->string_buffer), ch_11 );
      }
      else
      {
        switch (((RogueInt32)(ch_11)))
        {
          case (RogueCharacter)'!':
          {
            RogueStringBuilder__print__String( ROGUE_ARG(THIS->string_buffer), Rogue_literal_strings[445] );
            break;
          }
          case (RogueCharacter)'%':
          {
            RogueStringBuilder__print__String( ROGUE_ARG(THIS->string_buffer), Rogue_literal_strings[446] );
            break;
          }
          case (RogueCharacter)'&':
          {
            RogueStringBuilder__print__String( ROGUE_ARG(THIS->string_buffer), Rogue_literal_strings[447] );
            break;
          }
          case (RogueCharacter)'*':
          {
            RogueStringBuilder__print__String( ROGUE_ARG(THIS->string_buffer), Rogue_literal_strings[448] );
            break;
          }
          case (RogueCharacter)'+':
          {
            RogueStringBuilder__print__String( ROGUE_ARG(THIS->string_buffer), Rogue_literal_strings[449] );
            break;
          }
          case (RogueCharacter)'-':
          {
            if ((i_13 + 1) < name_0->count)
            {
              switch (((RogueInt32)(name_0->characters[(i_13 + 1)])))
              {
                case (RogueCharacter)'>':
                {
                  RogueStringBuilder__print__String( ROGUE_ARG(THIS->string_buffer), Rogue_literal_strings[450] );
                  ++i_13;
                  break;
                }
                default:
                {
                  RogueStringBuilder__print__String( ROGUE_ARG(THIS->string_buffer), Rogue_literal_strings[451] );
                }
              }
            }
            break;
          }
          case (RogueCharacter)'.':
          {
            RogueStringBuilder__print__String( ROGUE_ARG(THIS->string_buffer), Rogue_literal_strings[425] );
            break;
          }
          case (RogueCharacter)'/':
          {
            RogueStringBuilder__print__String( ROGUE_ARG(THIS->string_buffer), Rogue_literal_strings[452] );
            break;
          }
          case (RogueCharacter)'<':
          {
            if ((i_13 + 1) < name_0->count)
            {
              switch (((RogueInt32)(name_0->characters[(i_13 + 1)])))
              {
                case (RogueCharacter)'=':
                {
                  RogueStringBuilder__print__String( ROGUE_ARG(THIS->string_buffer), Rogue_literal_strings[453] );
                  ++i_13;
                  break;
                }
                default:
                {
                  RogueStringBuilder__print__String( ROGUE_ARG(THIS->string_buffer), Rogue_literal_strings[454] );
                }
              }
            }
            break;
          }
          case (RogueCharacter)'=':
          {
            RogueStringBuilder__print__String( ROGUE_ARG(THIS->string_buffer), Rogue_literal_strings[455] );
            break;
          }
          case (RogueCharacter)'>':
          {
            if ((i_13 + 1) < name_0->count)
            {
              switch (((RogueInt32)(name_0->characters[(i_13 + 1)])))
              {
                case (RogueCharacter)'=':
                {
                  RogueStringBuilder__print__String( ROGUE_ARG(THIS->string_buffer), Rogue_literal_strings[456] );
                  ++i_13;
                  break;
                }
                default:
                {
                  RogueStringBuilder__print__String( ROGUE_ARG(THIS->string_buffer), Rogue_literal_strings[457] );
                }
              }
            }
            break;
          }
          case (RogueCharacter)'^':
          {
            RogueStringBuilder__print__String( ROGUE_ARG(THIS->string_buffer), Rogue_literal_strings[458] );
            break;
          }
          case (RogueCharacter)'|':
          {
            RogueStringBuilder__print__String( ROGUE_ARG(THIS->string_buffer), Rogue_literal_strings[459] );
            break;
          }
          case (RogueCharacter)'~':
          {
            RogueStringBuilder__print__String( ROGUE_ARG(THIS->string_buffer), Rogue_literal_strings[460] );
            break;
          }
          default:
          {
            RogueStringBuilder__print__Character( ROGUE_ARG(THIS->string_buffer), (RogueCharacter)'_' );
          }
        }
      }
    }
  }
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(THIS->string_buffer) ))));
}

void RogueProgram__write_cpp__String( RogueClassProgram* THIS, RogueString* filepath_0 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_174_24,(THIS->type_list));
    RogueInt32 _auto_175_25 = (0);
    for (;_auto_175_25 < _auto_174_24->count;++_auto_175_25)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_26,(((RogueClassType*)(_auto_174_24->data->objects[_auto_175_25]))));
      RogueType__assign_cpp_name( type_26 );
    }
  }
  THIS->type_NativeArray->cpp_class_name = Rogue_literal_strings[461];
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_176_27,(THIS->type_list));
    RogueInt32 _auto_177_28 = (0);
    for (;_auto_177_28 < _auto_176_27->count;++_auto_177_28)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_29,(((RogueClassType*)(_auto_176_27->data->objects[_auto_177_28]))));
      {
        ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_178_30,(type_29->global_method_list));
        RogueInt32 _auto_179_31 = (0);
        for (;_auto_179_31 < _auto_178_30->count;++_auto_179_31)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassMethod*,r_32,(((RogueClassMethod*)(_auto_178_30->data->objects[_auto_179_31]))));
          RogueMethod__assign_cpp_name( r_32 );
        }
      }
      {
        ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_180_33,(type_29->method_list));
        RogueInt32 _auto_181_34 = (0);
        for (;_auto_181_34 < _auto_180_33->count;++_auto_181_34)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_35,(((RogueClassMethod*)(_auto_180_33->data->objects[_auto_181_34]))));
          RogueMethod__assign_cpp_name( m_35 );
        }
      }
    }
  }
  RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[465] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], filepath_0 )))) )))), Rogue_literal_strings[466] )))) )))) );
  ROGUE_DEF_LOCAL_REF(RogueClassCPPWriter*,writer_1,(((RogueCPPWriter__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCPPWriter*,ROGUE_CREATE_OBJECT(CPPWriter))), ROGUE_ARG(((RogueString__operatorPLUS__String( filepath_0, Rogue_literal_strings[467] )))) )))));
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[468] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[469] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[468] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[470] );
  RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[471] );
  RogueCPPWriter__println__String( writer_1, ROGUE_ARG(((((((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->gc_mode == 0))) ? (Rogue_literal_strings[472]) : Rogue_literal_strings[473])) );
  RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[474] );
  RogueCPPWriter__println__String( writer_1, ROGUE_ARG(((((((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->gc_mode == 1))) ? (Rogue_literal_strings[472]) : Rogue_literal_strings[473])) );
  RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[475] );
  RogueCPPWriter__println__String( writer_1, ROGUE_ARG(((((((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->gc_mode == 2))) ? (Rogue_literal_strings[472]) : Rogue_literal_strings[473])) );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[476] );
  RogueCPPWriter__println__Int32( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[477] )))), ROGUE_ARG(((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->gc_threshold) );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[478] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[479] );
  {
    ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_185_36,(THIS->native_header));
    RogueInt32 _auto_186_37 = (0);
    for (;_auto_186_37 < _auto_185_36->count;++_auto_186_37)
    {
      ROGUE_DEF_LOCAL_REF(RogueString*,line_38,(((RogueString*)(_auto_185_36->data->objects[_auto_186_37]))));
      RogueCPPWriter__println__String( writer_1, line_38 );
    }
  }
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[480] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[481] );
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_187_39,(THIS->type_list));
    RogueInt32 _auto_188_40 = (0);
    for (;_auto_188_40 < _auto_187_39->count;++_auto_188_40)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_41,(((RogueClassType*)(_auto_187_39->data->objects[_auto_188_40]))));
      if ((!(((RogueType__omit_output( type_41 )))) && !(((RogueType__is_primitive( type_41 ))))))
      {
        RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[482] )))), ROGUE_ARG(type_41->cpp_class_name) )))), Rogue_literal_strings[219] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[483] );
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_189_42,(THIS->type_list));
    RogueInt32 _auto_190_43 = (0);
    for (;_auto_190_43 < _auto_189_42->count;++_auto_190_43)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_44,(((RogueClassType*)(_auto_189_42->data->objects[_auto_190_43]))));
      if ((((RogueType__is_compound( type_44 ))) && !(((RogueType__omit_output( type_44 ))))))
      {
        RogueType__print_data_definition__CPPWriter( type_44, writer_1 );
        RogueCPPWriter__println( writer_1 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[487] );
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_191_45,(THIS->type_list));
    RogueInt32 _auto_192_46 = (0);
    for (;_auto_192_46 < _auto_191_45->count;++_auto_192_46)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_47,(((RogueClassType*)(_auto_191_45->data->objects[_auto_192_46]))));
      {
        ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_193_48,(type_47->global_list));
        RogueInt32 _auto_194_49 = (0);
        for (;_auto_194_49 < _auto_193_48->count;++_auto_194_49)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassProperty*,g_50,(((RogueClassProperty*)(_auto_193_48->data->objects[_auto_194_49]))));
          RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[509] )))), ROGUE_ARG(g_50->_type) )))), Rogue_literal_strings[510] );
          RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, ROGUE_ARG(type_47->cpp_name) )))), Rogue_literal_strings[425] )))), ROGUE_ARG(g_50->cpp_name) )))), Rogue_literal_strings[219] );
        }
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[511] );
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_195_51,(THIS->type_list));
    RogueInt32 _auto_196_52 = (0);
    for (;_auto_196_52 < _auto_195_51->count;++_auto_196_52)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_53,(((RogueClassType*)(_auto_195_51->data->objects[_auto_196_52]))));
      if ((!(((RogueType__is_compound( type_53 )))) && !(((RogueType__omit_output( type_53 ))))))
      {
        RogueType__print_data_definition__CPPWriter( type_53, writer_1 );
        RogueCPPWriter__println( writer_1 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[512] );
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_197_54,(THIS->type_list));
    RogueInt32 _auto_198_55 = (0);
    for (;_auto_198_55 < _auto_197_54->count;++_auto_198_55)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_56,(((RogueClassType*)(_auto_197_54->data->objects[_auto_198_55]))));
      if ((!(((RogueType__omit_output( type_56 )))) || (((RogueType__is_native( type_56 ))) && !(type_56->is_array))))
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[513] );
        RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, ROGUE_ARG(type_56->cpp_name) )))), Rogue_literal_strings[219] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[514] );
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_199_57,(THIS->type_list));
    RogueInt32 _auto_200_58 = (0);
    for (;_auto_200_58 < _auto_199_57->count;++_auto_200_58)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_59,(((RogueClassType*)(_auto_199_57->data->objects[_auto_200_58]))));
      RogueType__print_global_method_prototypes__CPPWriter( type_59, writer_1 );
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[516] );
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_201_60,(THIS->type_list));
    RogueInt32 _auto_202_61 = (0);
    for (;_auto_202_61 < _auto_201_60->count;++_auto_202_61)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_62,(((RogueClassType*)(_auto_201_60->data->objects[_auto_202_61]))));
      RogueType__print_method_prototypes__CPPWriter( type_62, writer_1 );
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[517] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[518] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__close( writer_1 );
  RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[465] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], filepath_0 )))) )))), Rogue_literal_strings[519] )))) )))) );
  writer_1 = ((RogueClassCPPWriter*)((RogueCPPWriter__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCPPWriter*,ROGUE_CREATE_OBJECT(CPPWriter))), ROGUE_ARG(((RogueString__operatorPLUS__String( filepath_0, Rogue_literal_strings[442] )))) ))));
  ROGUE_DEF_LOCAL_REF(RogueString*,base_filename_2,(filepath_0));
  if (((RogueString__contains__String( base_filename_2, ROGUE_ARG(((RogueCharacter__to_String( (RogueCharacter)'/' )))) ))))
  {
    base_filename_2 = ((RogueString*)((RogueString__after_last__Character( base_filename_2, (RogueCharacter)'/' ))));
  }
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[520] );
  RogueCPPWriter__println__String( writer_1, ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[521] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], base_filename_2 )))) )))), Rogue_literal_strings[522] )))) )))) );
  RogueCPPWriter__println( writer_1 );
  {
    ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_203_63,(THIS->native_code));
    RogueInt32 _auto_204_64 = (0);
    for (;_auto_204_64 < _auto_203_63->count;++_auto_204_64)
    {
      ROGUE_DEF_LOCAL_REF(RogueString*,line_65,(((RogueString*)(_auto_203_63->data->objects[_auto_204_64]))));
      RogueCPPWriter__println__String( writer_1, line_65 );
    }
  }
  ROGUE_DEF_LOCAL_REF(RogueStringList*,native_method_signature_list_3,(((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )))));
  ROGUE_DEF_LOCAL_REF(RogueClassString_MethodTable*,native_method_signature_lookup_4,(((RogueString_MethodTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_MethodTable*,ROGUE_CREATE_OBJECT(String_MethodTable))) )))));
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_205_66,(THIS->type_list));
    RogueInt32 _auto_206_67 = (0);
    for (;_auto_206_67 < _auto_205_66->count;++_auto_206_67)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_68,(((RogueClassType*)(_auto_205_66->data->objects[_auto_206_67]))));
      if (type_68->is_used)
      {
        RogueType__determine_cpp_method_typedefs__StringList_String_MethodTable( type_68, native_method_signature_list_3, native_method_signature_lookup_4 );
      }
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_207_69,(native_method_signature_list_3));
    RogueInt32 _auto_208_70 = (0);
    for (;_auto_208_70 < _auto_207_69->count;++_auto_208_70)
    {
      ROGUE_DEF_LOCAL_REF(RogueString*,sig_71,(((RogueString*)(_auto_207_69->data->objects[_auto_208_70]))));
      RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[525] )))), ROGUE_ARG(((RogueString__before_first__String( sig_71, Rogue_literal_strings[526] )))) )))), Rogue_literal_strings[527] );
      RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, ROGUE_ARG(((RogueString_MethodTable__get__String( native_method_signature_lookup_4, sig_71 )))->cpp_typedef) )))), Rogue_literal_strings[28] );
      RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, ROGUE_ARG(((RogueString__after_first__String( sig_71, Rogue_literal_strings[526] )))) )))), Rogue_literal_strings[219] );
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_209_72,(native_method_signature_list_3));
    RogueInt32 _auto_210_73 = (0);
    for (;_auto_210_73 < _auto_209_72->count;++_auto_210_73)
    {
      ROGUE_DEF_LOCAL_REF(RogueString*,sig_74,(((RogueString*)(_auto_209_72->data->objects[_auto_210_73]))));
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_5,(((RogueString_MethodTable__get__String( native_method_signature_lookup_4, sig_74 )))));
      if (m_5->called_dynamically)
      {
        RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( writer_1, ROGUE_ARG(m_5->_return_type) )))), Rogue_literal_strings[528] )))), ROGUE_ARG(m_5->cpp_typedef) );
        RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[529] )))), ROGUE_ARG(m_5->type_context) )))), Rogue_literal_strings[515] );
        {
          ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_217_75,(m_5->parameters));
          RogueInt32 i_76 = (0);
          for (;i_76 < _auto_217_75->count;++i_76)
          {
            ROGUE_DEF_LOCAL_REF(RogueClassLocal*,p_6,(((RogueClassLocal*)(m_5->parameters->data->objects[i_76]))));
            RogueCPPWriter__print__Int32( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[502] )))), ROGUE_ARG(p_6->_type) )))), Rogue_literal_strings[530] )))), i_76 );
          }
        }
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[531] );
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[210] );
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[302] );
        if (!!(m_5->_return_type))
        {
          RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[532] );
        }
        RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[533] )))), ROGUE_ARG(m_5->cpp_typedef) );
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[534] );
        {
          ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_218_77,(m_5->parameters));
          RogueInt32 i_78 = (0);
          for (;i_78 < _auto_218_77->count;++i_78)
          {
            RogueCPPWriter__print__Int32( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[535] )))), i_78 );
          }
        }
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[536] );
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[128] );
        RogueCPPWriter__println( writer_1 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[487] );
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_219_79,(THIS->type_list));
    RogueInt32 _auto_220_80 = (0);
    for (;_auto_220_80 < _auto_219_79->count;++_auto_220_80)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_81,(((RogueClassType*)(_auto_219_79->data->objects[_auto_220_80]))));
      {
        ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_221_82,(type_81->global_list));
        RogueInt32 _auto_222_83 = (0);
        for (;_auto_222_83 < _auto_221_82->count;++_auto_222_83)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassProperty*,g_84,(((RogueClassProperty*)(_auto_221_82->data->objects[_auto_222_83]))));
          RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( writer_1, ROGUE_ARG(g_84->_type) )))), Rogue_literal_strings[510] );
          RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, ROGUE_ARG(type_81->cpp_name) )))), Rogue_literal_strings[425] )))), ROGUE_ARG(g_84->cpp_name) );
          RogueCPPWriter__print_default_value__Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[537] )))), ROGUE_ARG(g_84->_type) );
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[219] );
        }
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_223_85,(THIS->type_list));
    RogueInt32 _auto_224_86 = (0);
    for (;_auto_224_86 < _auto_223_85->count;++_auto_224_86)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_87,(((RogueClassType*)(_auto_223_85->data->objects[_auto_224_86]))));
      if (((((RogueType__has_object_references( type_87 ))) && !(((RogueType__is_reference_array( type_87 ))))) && !(((RogueType__is_aspect( type_87 ))))))
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,trace_name_7,(type_87->cpp_name));
        if ((type_87->is_array && ((RogueType__is_compound( ROGUE_ARG(type_87->_element_type) )))))
        {
          trace_name_7 = ((RogueString*)((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(type_87->name) ))));
        }
        RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[538] )))), trace_name_7 )))), Rogue_literal_strings[539] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_225_88,(THIS->type_list));
    RogueInt32 _auto_226_89 = (0);
    for (;_auto_226_89 < _auto_225_88->count;++_auto_226_89)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_90,(((RogueClassType*)(_auto_225_88->data->objects[_auto_226_89]))));
      if (((((RogueType__has_object_references( type_90 ))) && !(((RogueType__is_reference_array( type_90 ))))) && !(((RogueType__is_aspect( type_90 ))))))
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,trace_name_8,(type_90->cpp_name));
        if ((type_90->is_array && ((RogueType__is_compound( ROGUE_ARG(type_90->_element_type) )))))
        {
          trace_name_8 = ((RogueString*)((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(type_90->name) ))));
        }
        RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[538] )))), trace_name_8 )))), Rogue_literal_strings[540] );
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[210] );
        writer_1->indent += 2;
        if (((RogueType__is_compound( type_90 ))))
        {
          RogueLogical uses_link_9 = (false);
          {
            ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_227_91,(type_90->property_list));
            RogueInt32 _auto_228_92 = (0);
            for (;_auto_228_92 < _auto_227_91->count;++_auto_228_92)
            {
              ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_93,(((RogueClassProperty*)(_auto_227_91->data->objects[_auto_228_92]))));
              if (((RogueType__is_reference( ROGUE_ARG(p_93->_type) ))))
              {
                uses_link_9 = ((RogueLogical)true);
                goto _auto_229;
              }
            }
          }
          _auto_229:;
          if (uses_link_9)
          {
            RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[541] );
          }
          RogueProgram__print_property_trace_code__Type_CPPWriter( ROGUE_ARG(THIS), type_90, writer_1 );
        }
        else if (type_90->is_array)
        {
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[549] );
          RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__Type( writer_1, ROGUE_ARG(type_90->_element_type) )))), Rogue_literal_strings[550] );
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[551] );
          RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[552] )))), ROGUE_ARG(type_90->_element_type->cpp_class_name) )))), Rogue_literal_strings[553] );
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[554] );
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[210] );
          RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[555] )))), ROGUE_ARG(type_90->_element_type->cpp_name) )))), Rogue_literal_strings[556] );
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[128] );
        }
        else
        {
          RogueLogical uses_link_10 = (false);
          {
            ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_230_94,(type_90->property_list));
            RogueInt32 _auto_231_95 = (0);
            for (;_auto_231_95 < _auto_230_94->count;++_auto_231_95)
            {
              ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_96,(((RogueClassProperty*)(_auto_230_94->data->objects[_auto_231_95]))));
              if (((RogueType__is_reference( ROGUE_ARG(p_96->_type) ))))
              {
                uses_link_10 = ((RogueLogical)true);
                goto _auto_232;
              }
            }
          }
          _auto_232:;
          if (uses_link_10)
          {
            RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[541] );
          }
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[557] );
          RogueProgram__print_property_trace_code__Type_CPPWriter( ROGUE_ARG(THIS), type_90, writer_1 );
        }
        writer_1->indent -= 2;
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[128] );
        RogueCPPWriter__println( writer_1 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[558] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[210] );
  writer_1->indent += 2;
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_233_97,(THIS->type_list));
    RogueInt32 i_98 = (0);
    for (;i_98 < _auto_233_97->count;++i_98)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_11,(((RogueClassType*)(THIS->type_list->data->objects[i_98]))));
      if (i_98 > 0)
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[193] );
        if ((i_98 & 15) == 0)
        {
          RogueCPPWriter__println( writer_1 );
        }
      }
      RogueCPPWriter__print__Int32( writer_1, ROGUE_ARG(((RogueProgram__add_literal_string__String( ROGUE_ARG(THIS), ROGUE_ARG(type_11->name) )))) );
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[508] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[559] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[210] );
  writer_1->indent += 2;
  RogueLogical first_12 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_234_99,(THIS->type_list));
    RogueInt32 _auto_235_100 = (0);
    for (;_auto_235_100 < _auto_234_99->count;++_auto_235_100)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_101,(((RogueClassType*)(_auto_234_99->data->objects[_auto_235_100]))));
      if (first_12)
      {
        first_12 = ((RogueLogical)false);
      }
      else
      {
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[193] );
      }
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_13,(((RogueType__find_method__String( type_101, Rogue_literal_strings[410] )))));
      if ((((!!(m_13) && !(((RogueType__omit_output( type_101 ))))) && m_13->is_used) && m_13->statements->count > 1))
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[560] );
        RogueCPPWriter__print__String( writer_1, ROGUE_ARG(m_13->cpp_name) );
      }
      else
      {
        RogueCPPWriter__print__Int32( writer_1, 0 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[508] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[561] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[210] );
  writer_1->indent += 2;
  first_12 = ((RogueLogical)true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_236_102,(THIS->type_list));
    RogueInt32 _auto_237_103 = (0);
    for (;_auto_237_103 < _auto_236_102->count;++_auto_237_103)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_104,(((RogueClassType*)(_auto_236_102->data->objects[_auto_237_103]))));
      if (first_12)
      {
        first_12 = ((RogueLogical)false);
      }
      else
      {
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[193] );
      }
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_14,(((RogueType__find_method__String( type_104, Rogue_literal_strings[439] )))));
      if ((((!!(m_14) && !(((RogueType__omit_output( type_104 ))))) && m_14->is_used) && m_14->statements->count > 1))
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[560] );
        RogueCPPWriter__print__String( writer_1, ROGUE_ARG(m_14->cpp_name) );
      }
      else
      {
        RogueCPPWriter__print__Int32( writer_1, 0 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[508] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[562] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[210] );
  writer_1->indent += 2;
  first_12 = ((RogueLogical)true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_238_105,(THIS->type_list));
    RogueInt32 _auto_239_106 = (0);
    for (;_auto_239_106 < _auto_238_105->count;++_auto_239_106)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_107,(((RogueClassType*)(_auto_238_105->data->objects[_auto_239_106]))));
      if (first_12)
      {
        first_12 = ((RogueLogical)false);
      }
      else
      {
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[193] );
      }
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_15,(((RogueType__find_method__String( type_107, Rogue_literal_strings[413] )))));
      if ((((!!(m_15) && !(((RogueType__omit_output( type_107 ))))) && m_15->is_used) && !!(m_15->statements->count)))
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[563] );
        RogueCPPWriter__print__String( writer_1, ROGUE_ARG(m_15->cpp_name) );
      }
      else
      {
        RogueCPPWriter__print__Int32( writer_1, 0 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[508] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[564] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[210] );
  writer_1->indent += 2;
  first_12 = ((RogueLogical)true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_240_108,(THIS->type_list));
    RogueInt32 _auto_241_109 = (0);
    for (;_auto_241_109 < _auto_240_108->count;++_auto_241_109)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_110,(((RogueClassType*)(_auto_240_108->data->objects[_auto_241_109]))));
      if (first_12)
      {
        first_12 = ((RogueLogical)false);
      }
      else
      {
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[193] );
      }
      if ((((RogueType__has_object_references( type_110 ))) && !(((RogueType__is_aspect( type_110 ))))))
      {
        if (((RogueType__is_reference_array( type_110 ))))
        {
          RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[565] );
        }
        else
        {
          ROGUE_DEF_LOCAL_REF(RogueString*,trace_name_16,(type_110->cpp_name));
          if ((type_110->is_array && ((RogueType__is_compound( ROGUE_ARG(type_110->_element_type) )))))
          {
            trace_name_16 = ((RogueString*)((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(type_110->name) ))));
          }
          RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[41] )))), trace_name_16 )))), Rogue_literal_strings[566] );
        }
      }
      else if (((RogueType__is_class( type_110 ))))
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[567] );
      }
      else
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[473] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[508] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[568] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[210] );
  writer_1->indent += 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[541] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[569] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[570] );
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_242_111,(THIS->type_list));
    RogueInt32 _auto_243_112 = (0);
    for (;_auto_243_112 < _auto_242_111->count;++_auto_243_112)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_113,(((RogueClassType*)(_auto_242_111->data->objects[_auto_243_112]))));
      if (((RogueType__has_global_references( type_113 ))))
      {
        {
          ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_244_114,(type_113->global_list));
          RogueInt32 _auto_245_115 = (0);
          for (;_auto_245_115 < _auto_244_114->count;++_auto_245_115)
          {
            ROGUE_DEF_LOCAL_REF(RogueClassProperty*,g_116,(((RogueClassProperty*)(_auto_244_114->data->objects[_auto_245_115]))));
            if ((((RogueType__is_reference( ROGUE_ARG(g_116->_type) ))) || ((RogueType__has_object_references( ROGUE_ARG(g_116->_type) )))))
            {
              if (((((RogueType__is_reference( ROGUE_ARG(g_116->_type) ))) && !(((RogueType__is_foreign( ROGUE_ARG(g_116->_type) ))))) && !(g_116->_type->is_array)))
              {
                RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[571] )))), ROGUE_ARG(type_113->cpp_name) )))), Rogue_literal_strings[425] )))), ROGUE_ARG(g_116->cpp_name) );
                RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[544] );
              }
              else
              {
                ROGUE_DEF_LOCAL_REF(RogueString*,trace_class_name_17,(Rogue_literal_strings[52]));
                if (g_116->_type->is_array)
                {
                  if ((((RogueType__is_compound( ROGUE_ARG(g_116->_type->_element_type) ))) && ((RogueType__has_object_references( ROGUE_ARG(g_116->_type->_element_type) )))))
                  {
                    trace_class_name_17 = ((RogueString*)((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(g_116->_type->name) ))));
                  }
                  else
                  {
                    trace_class_name_17 = ((RogueString*)Rogue_literal_strings[462]);
                  }
                }
                else
                {
                  trace_class_name_17 = ((RogueString*)((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(g_116->_type->cpp_name) ))));
                }
                RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[546] );
                if (!(((RogueType__is_reference( ROGUE_ARG(g_116->_type) )))))
                {
                  RogueCPPWriter__print__Character( writer_1, (RogueCharacter)'&' );
                }
                RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[41] )))), ROGUE_ARG(type_113->cpp_name) )))), Rogue_literal_strings[425] )))), ROGUE_ARG(g_116->cpp_name) );
                RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[547] )))), trace_class_name_17 )))), Rogue_literal_strings[548] );
              }
            }
          }
        }
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[572] );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[128] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[573] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[210] );
  writer_1->indent += 2;
  RogueInt32 table_index_18 = (0);
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_246_117,(THIS->type_list));
    RogueInt32 _auto_247_118 = (0);
    for (;_auto_247_118 < _auto_246_117->count;++_auto_247_118)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_119,(((RogueClassType*)(_auto_246_117->data->objects[_auto_247_118]))));
      if (!(((RogueType__omit_output( type_119 )))))
      {
        table_index_18 = ((RogueInt32)((RogueType__print_dynamic_method_table_entries__Int32_CPPWriter( type_119, table_index_18, writer_1 ))));
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[508] );
  RogueCPPWriter__println( writer_1 );
  ROGUE_DEF_LOCAL_REF(RogueInt32List*,info_19,(((RogueInt32List__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueInt32List*,ROGUE_CREATE_OBJECT(Int32List))) )))));
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_252_120,(THIS->type_list));
    RogueInt32 _auto_253_121 = (0);
    for (;_auto_253_121 < _auto_252_120->count;++_auto_253_121)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_122,(((RogueClassType*)(_auto_252_120->data->objects[_auto_253_121]))));
      RogueType__collect_type_info__Int32List( type_122, info_19 );
    }
  }
  RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__Int32( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[578] )))), ROGUE_ARG(info_19->count) )))), Rogue_literal_strings[579] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[210] );
  writer_1->indent += 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[580] );
  first_12 = ((RogueLogical)true);
  RogueInt32 items_20 = (0);
  {
    ROGUE_DEF_LOCAL_REF(RogueInt32List*,_auto_254_123,(info_19));
    RogueInt32 _auto_255_124 = (0);
    for (;_auto_255_124 < _auto_254_123->count;++_auto_255_124)
    {
      RogueInt32 n_125 = (_auto_254_123->data->integers[_auto_255_124]);
      if (first_12)
      {
        first_12 = ((RogueLogical)false);
      }
      else
      {
        RogueCPPWriter__print_literal_character__Character_Logical( writer_1, (RogueCharacter)',', false );
      }
      ++items_20;
      if (items_20 == 25)
      {
        RogueCPPWriter__println( writer_1 );
        items_20 = ((RogueInt32)0);
      }
      RogueCPPWriter__print__Int32( writer_1, n_125 );
    }
  }
  if (items_20 > 0)
  {
    RogueCPPWriter__println( writer_1 );
  }
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[508] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__Int32( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[586] )))), ROGUE_ARG(THIS->type_list->count) )))), Rogue_literal_strings[579] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[210] );
  writer_1->indent += 2;
  first_12 = ((RogueLogical)true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_256_126,(THIS->type_list));
    RogueInt32 _auto_257_127 = (0);
    for (;_auto_257_127 < _auto_256_126->count;++_auto_257_127)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_128,(((RogueClassType*)(_auto_256_126->data->objects[_auto_257_127]))));
      if (first_12)
      {
        first_12 = ((RogueLogical)false);
      }
      else
      {
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[193] );
      }
      RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[587] )))), ROGUE_ARG(type_128->cpp_class_name) )))), Rogue_literal_strings[28] );
    }
  }
  if (items_20 > 0)
  {
    RogueCPPWriter__println( writer_1 );
  }
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[508] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__Int32( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[588] )))), 1 )))), Rogue_literal_strings[219] );
  RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__Int32( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[589] )))), 1 )))), Rogue_literal_strings[590] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__Int32( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[591] )))), ROGUE_ARG(THIS->type_list->count) )))), Rogue_literal_strings[219] );
  RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__Int32( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[592] )))), ROGUE_ARG(THIS->type_list->count) )))), Rogue_literal_strings[590] );
  RogueCPPWriter__println( writer_1 );
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_258_129,(THIS->type_list));
    RogueInt32 _auto_259_130 = (0);
    for (;_auto_259_130 < _auto_258_129->count;++_auto_259_130)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_131,(((RogueClassType*)(_auto_258_129->data->objects[_auto_259_130]))));
      if ((!(((RogueType__omit_output( type_131 )))) || (((RogueType__is_native( type_131 ))) && !(type_131->is_array))))
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[593] );
        RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, ROGUE_ARG(type_131->cpp_name) )))), Rogue_literal_strings[219] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__Int32( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[594] )))), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_list->count) )))), Rogue_literal_strings[219] );
  RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__Int32( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[595] )))), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_list->count) )))), Rogue_literal_strings[590] );
  RogueCPPWriter__println( writer_1 );
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_260_132,(THIS->type_list));
    RogueInt32 _auto_261_133 = (0);
    for (;_auto_261_133 < _auto_260_132->count;++_auto_261_133)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_134,(((RogueClassType*)(_auto_260_132->data->objects[_auto_261_133]))));
      RogueType__print_global_method_definitions__CPPWriter( type_134, writer_1 );
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_262_135,(THIS->type_list));
    RogueInt32 _auto_263_136 = (0);
    for (;_auto_263_136 < _auto_262_135->count;++_auto_263_136)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_137,(((RogueClassType*)(_auto_262_135->data->objects[_auto_263_136]))));
      RogueType__print_method_definitions__CPPWriter( type_137, writer_1 );
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[605] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[210] );
  writer_1->indent += 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[606] );
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_264_138,(THIS->type_list));
    RogueInt32 _auto_265_139 = (0);
    for (;_auto_265_139 < _auto_264_138->count;++_auto_265_139)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_140,(((RogueClassType*)(_auto_264_138->data->objects[_auto_265_139]))));
      if ((!(((RogueType__omit_output( type_140 )))) || (((RogueType__is_native( type_140 ))) && !(type_140->is_array))))
      {
        RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__Int32( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[464] )))), ROGUE_ARG(type_140->cpp_name) )))), Rogue_literal_strings[607] )))), ROGUE_ARG(type_140->index) )))), Rogue_literal_strings[608] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_266_141,(((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_list));
    RogueInt32 i_142 = (0);
    for (;i_142 < _auto_266_141->count;++i_142)
    {
      RogueCPPWriter__print__Int32( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[609] )))), i_142 );
      RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[610] );
      ROGUE_DEF_LOCAL_REF(RogueString*,st_21,(((RogueString__to_utf8( ROGUE_ARG(((RogueString*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_list->data->objects[i_142]))) )))));
      ROGUE_DEF_LOCAL_REF(RogueClassCPPWriter*,encoded_count_22,(((RogueCPPWriter__print_literal_string__String( writer_1, st_21 )))));
      RogueCPPWriter__print__Int32( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[502] )))), ROGUE_ARG(st_21->count) );
      RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[611] );
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[128] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[612] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[210] );
  writer_1->indent += 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[613] );
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_267_143,(THIS->type_list));
    RogueInt32 _auto_268_144 = (0);
    for (;_auto_268_144 < _auto_267_143->count;++_auto_268_144)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_145,(((RogueClassType*)(_auto_267_143->data->objects[_auto_268_144]))));
      if (!(((RogueType__omit_output( type_145 )))))
      {
        ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_23,(((RogueType__find_routine__String( type_145, Rogue_literal_strings[407] )))));
        if ((!!(m_23) && ((void*)m_23->type_context) == ((void*)type_145)))
        {
          RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, ROGUE_ARG(m_23->cpp_name) )))), Rogue_literal_strings[614] );
        }
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[615] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[616] );
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_269_146,(THIS->type_list));
    RogueInt32 _auto_270_147 = (0);
    for (;_auto_270_147 < _auto_269_146->count;++_auto_270_147)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,type_148,(((RogueClassType*)(_auto_269_146->data->objects[_auto_270_147]))));
      if ((!(((RogueType__omit_output( type_148 )))) && ((RogueType__is_singleton( type_148 )))))
      {
        RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[617] )))), ROGUE_ARG(type_148->cpp_name) )))), Rogue_literal_strings[536] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[618] );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[128] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[619] );
  if (((RogueProgram__is_type_defined__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), Rogue_literal_strings[620] ))))
  {
    RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[621] );
  }
  else
  {
    RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[622] );
  }
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[623] );
  if (((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->generate_main)
  {
    RogueCPPWriter__println( writer_1 );
    RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[624] );
  }
  RogueCPPWriter__close( writer_1 );
}

void RogueProgram__print_property_trace_code__Type_CPPWriter( RogueClassProgram* THIS, RogueClassType* type_0, RogueClassCPPWriter* writer_1 )
{
  {
    ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_271_3,(type_0->property_list));
    RogueInt32 _auto_272_4 = (0);
    for (;_auto_272_4 < _auto_271_3->count;++_auto_272_4)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_5,(((RogueClassProperty*)(_auto_271_3->data->objects[_auto_272_4]))));
      if ((((RogueType__is_reference( ROGUE_ARG(p_5->_type) ))) || ((RogueType__has_object_references( ROGUE_ARG(p_5->_type) )))))
      {
        if (((((RogueType__is_reference( ROGUE_ARG(p_5->_type) ))) && !(((RogueType__is_foreign( ROGUE_ARG(p_5->_type) ))))) && !(p_5->_type->is_array)))
        {
          RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[542] )))), ROGUE_ARG(type_0->cpp_class_name) )))), Rogue_literal_strings[543] )))), ROGUE_ARG(p_5->cpp_name) );
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[544] );
        }
        else if (((RogueType__is_compound( ROGUE_ARG(p_5->_type) ))))
        {
          RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[41] )))), ROGUE_ARG(p_5->_type->cpp_name) )))), Rogue_literal_strings[545] );
          RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[533] )))), ROGUE_ARG(type_0->cpp_class_name) )))), Rogue_literal_strings[543] )))), ROGUE_ARG(p_5->cpp_name) );
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[536] );
        }
        else
        {
          ROGUE_DEF_LOCAL_REF(RogueString*,trace_class_name_2,(Rogue_literal_strings[52]));
          if (p_5->_type->is_array)
          {
            if ((((RogueType__is_compound( ROGUE_ARG(p_5->_type->_element_type) ))) && ((RogueType__has_object_references( ROGUE_ARG(p_5->_type->_element_type) )))))
            {
              trace_class_name_2 = ((RogueString*)((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(p_5->_type->name) ))));
            }
            else
            {
              trace_class_name_2 = ((RogueString*)Rogue_literal_strings[462]);
            }
          }
          else
          {
            trace_class_name_2 = ((RogueString*)((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(p_5->_type->cpp_name) ))));
          }
          RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[546] );
          RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[533] )))), ROGUE_ARG(type_0->cpp_class_name) )))), Rogue_literal_strings[543] )))), ROGUE_ARG(p_5->cpp_name) );
          RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[547] )))), trace_class_name_2 )))), Rogue_literal_strings[548] );
        }
      }
    }
  }
}

RogueClassProgram* RogueProgram__init_object( RogueClassProgram* THIS )
{
  THIS->code_prefix = Rogue_literal_strings[41];
  THIS->program_name = Rogue_literal_strings[42];
  THIS->template_list = ((RogueTemplateList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueTemplateList*,ROGUE_CREATE_OBJECT(TemplateList))) )));
  THIS->template_lookup = ((RogueString_TemplateTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_TemplateTable*,ROGUE_CREATE_OBJECT(String_TemplateTable))) )));
  THIS->augment_lookup = ((RogueString_AugmentListTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_AugmentListTable*,ROGUE_CREATE_OBJECT(String_AugmentListTable))) )));
  THIS->all_requisite = false;
  THIS->first_filepath = Rogue_literal_strings[0];
  THIS->global_properties = ((RoguePropertyList__init( ROGUE_ARG(ROGUE_CREATE_REF(RoguePropertyList*,ROGUE_CREATE_OBJECT(PropertyList))) )));
  THIS->native_header = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  THIS->native_code = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  THIS->methods_by_signature = ((RogueString_MethodListTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_MethodListTable*,ROGUE_CREATE_OBJECT(String_MethodListTable))) )));
  THIS->type_list = ((RogueTypeList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueTypeList*,ROGUE_CREATE_OBJECT(TypeList))) )));
  THIS->type_lookup = ((RogueString_TypeTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_TypeTable*,ROGUE_CREATE_OBJECT(String_TypeTable))) )));
  THIS->literal_string_lookup = ((RogueString_Int32Table__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_Int32Table*,ROGUE_CREATE_OBJECT(String_Int32Table))) )));
  THIS->literal_string_list = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  THIS->string_buffer = ((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )));
  THIS->ids_by_module = ((RogueString_StringListTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_StringListTable*,ROGUE_CREATE_OBJECT(String_StringListTable))) )));
  return (RogueClassProgram*)(THIS);
}

RogueString* RogueTemplateList__to_String( RogueTemplateList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTemplateList*,_auto_404_2,(THIS));
    RogueInt32 _auto_405_3 = (0);
    for (;_auto_405_3 < _auto_404_2->count;++_auto_405_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassTemplate*,value_4,(((RogueClassTemplate*)(_auto_404_2->data->objects[_auto_405_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueTemplateList__type_name( RogueTemplateList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[709]);
}

RogueTemplateList* RogueTemplateList__init_object( RogueTemplateList* THIS )
{
  return (RogueTemplateList*)(THIS);
}

RogueTemplateList* RogueTemplateList__init( RogueTemplateList* THIS )
{
  RogueTemplateList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueTemplateList*)(THIS);
}

RogueTemplateList* RogueTemplateList__init__Int32( RogueTemplateList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassTemplate*), true );
  }
  return (RogueTemplateList*)(THIS);
}

RogueTemplateList* RogueTemplateList__add__Template( RogueTemplateList* THIS, RogueClassTemplate* value_0 )
{
  ((RogueTemplateList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTemplateList*)(THIS);
}

RogueInt32 RogueTemplateList__capacity( RogueTemplateList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTemplateList* RogueTemplateList__reserve__Int32( RogueTemplateList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassTemplate*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueTemplateList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassTemplate*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTemplateList*)(THIS);
}

RogueString* RogueTemplate__type_name( RogueClassTemplate* THIS )
{
  return (RogueString*)(Rogue_literal_strings[639]);
}

RogueClassTemplate* RogueTemplate__init__Token_String_Int32( RogueClassTemplate* THIS, RogueClassToken* _auto_62_0, RogueString* _auto_63_1, RogueInt32 attribute_flags_2 )
{
  THIS->name = _auto_63_1;
  THIS->t = _auto_62_0;
  RogueAttributes__add__Int32( ROGUE_ARG(THIS->attributes), attribute_flags_2 );
  return (RogueClassTemplate*)(THIS);
}

RogueClassTypeParameter* RogueTemplate__add_type_parameter__Token_String( RogueClassTemplate* THIS, RogueClassToken* p_t_0, RogueString* p_name_1 )
{
  if (((void*)THIS->type_parameters) == ((void*)NULL))
  {
    THIS->type_parameters = ((RogueTypeParameterList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueTypeParameterList*,ROGUE_CREATE_OBJECT(TypeParameterList))) )));
  }
  ROGUE_DEF_LOCAL_REF(RogueClassTypeParameter*,param_2,(((RogueTypeParameter__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTypeParameter*,ROGUE_CREATE_OBJECT(TypeParameter))), p_t_0, p_name_1 )))));
  RogueTypeParameterList__add__TypeParameter( ROGUE_ARG(THIS->type_parameters), param_2 );
  return (RogueClassTypeParameter*)(param_2);
}

RogueInt32 Rogue_Template__element_type( RogueClassTemplate* THIS )
{
  return (RogueInt32)((THIS->attributes->flags & 7));
}

void RogueTemplate__instantiate__Type_Scope( RogueClassTemplate* THIS, RogueClassType* type_0, RogueClassScope* scope_1 )
{
  if (!!(THIS->alternates_by_param_count))
  {
    RogueInt32 specializer_count_2 = (0);
    if (((RogueString__contains__String( ROGUE_ARG(type_0->name), ROGUE_ARG(((RogueCharacter__to_String( (RogueCharacter)'<' )))) ))))
    {
      specializer_count_2 = ((RogueInt32)((RogueParser__parse_specializer_count( ROGUE_ARG(((RogueParser__init__Token_String_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassParser*,ROGUE_CREATE_OBJECT(Parser))), ROGUE_ARG(type_0->t), ROGUE_ARG(type_0->name), ROGUE_ARG(((RogueString__from_first__Character( ROGUE_ARG(type_0->name), (RogueCharacter)'<' )))) )))) ))));
    }
    if (((RogueTemplate__type_parameter_count( ROGUE_ARG(THIS) ))) != specializer_count_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassTemplate*,alternate_3,(((RogueInt32_TemplateTable__get__Int32( ROGUE_ARG(THIS->alternates_by_param_count), specializer_count_2 )))));
      if (!!(alternate_3))
      {
        RogueTemplate__instantiate__Type_Scope( alternate_3, type_0, scope_1 );
        return;
      }
      else
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(type_0->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[336] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->name) )))) )))), Rogue_literal_strings[337] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(((RogueString__pluralize__Int32( Rogue_literal_strings[338], specializer_count_2 )))) )))) )))), Rogue_literal_strings[342] )))) )))) ))));
      }
    }
  }
  type_0->t = THIS->t;
  RogueAttributes__add__Attributes( ROGUE_ARG(type_0->attributes), ROGUE_ARG(THIS->attributes) );
  type_0->source_template = THIS;
  ROGUE_DEF_LOCAL_REF(RogueTokenList*,augmented_tokens_4,(THIS->tokens));
  ROGUE_DEF_LOCAL_REF(RogueAugmentList*,augments_5,(((RogueString_AugmentListTable__get__String( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->augment_lookup), ROGUE_ARG(type_0->name) )))));
  if (!!(augments_5))
  {
    RogueInt32 t_count_6 = (THIS->tokens->count);
    {
      ROGUE_DEF_LOCAL_REF(RogueAugmentList*,_auto_448_7,(augments_5));
      RogueInt32 _auto_449_8 = (0);
      for (;_auto_449_8 < _auto_448_7->count;++_auto_449_8)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassAugment*,aug_9,(((RogueClassAugment*)(_auto_448_7->data->objects[_auto_449_8]))));
        t_count_6 += aug_9->tokens->count;
      }
    }
    augmented_tokens_4 = ((RogueTokenList*)((RogueTokenList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueTokenList*,ROGUE_CREATE_OBJECT(TokenList))), t_count_6 ))));
    RogueTokenList__add__TokenList( augmented_tokens_4, ROGUE_ARG(THIS->tokens) );
    RogueTokenList__remove_last( augmented_tokens_4 );
    RogueTokenList__add__Token( augmented_tokens_4, ROGUE_ARG(((RogueToken__init__TokenType( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassToken*,ROGUE_CREATE_OBJECT(Token))), ROGUE_ARG(RogueTokenType_begin_augment_tokens) )))) );
    {
      ROGUE_DEF_LOCAL_REF(RogueAugmentList*,_auto_463_10,(augments_5));
      RogueInt32 _auto_464_11 = (0);
      for (;_auto_464_11 < _auto_463_10->count;++_auto_464_11)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassAugment*,aug_12,(((RogueClassAugment*)(_auto_463_10->data->objects[_auto_464_11]))));
        {
          ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_465_13,(aug_12->base_types));
          RogueInt32 _auto_466_14 = (0);
          for (;_auto_466_14 < _auto_465_13->count;++_auto_466_14)
          {
            ROGUE_DEF_LOCAL_REF(RogueClassType*,base_type_15,(((RogueClassType*)(_auto_465_13->data->objects[_auto_466_14]))));
            RogueTypeList__add__Type( ROGUE_ARG(type_0->base_types), base_type_15 );
          }
        }
        RogueTokenList__add__TokenList( augmented_tokens_4, ROGUE_ARG(aug_12->tokens) );
      }
    }
    RogueTokenList__add__Token( augmented_tokens_4, ROGUE_ARG(((RogueTokenList__last( ROGUE_ARG(THIS->tokens) )))) );
  }
  if (((RogueString__ends_with__String( ROGUE_ARG(type_0->name), ROGUE_ARG(((RogueCharacter__to_String( (RogueCharacter)']' )))) ))))
  {
    RogueTemplate__instantiate_list__Type_TokenList( ROGUE_ARG(THIS), type_0, augmented_tokens_4 );
  }
  else if (((RogueString__ends_with__String( ROGUE_ARG(type_0->name), ROGUE_ARG(((RogueCharacter__to_String( (RogueCharacter)'?' )))) ))))
  {
    RogueTemplate__instantiate_optional__Type_TokenList( ROGUE_ARG(THIS), type_0, augmented_tokens_4 );
  }
  else if (!!(THIS->type_parameters))
  {
    RogueTemplate__instantiate_parameterized_type__Type_TokenList_Scope( ROGUE_ARG(THIS), type_0, augmented_tokens_4, scope_1 );
  }
  else
  {
    RogueTemplate__instantiate_standard_type__Type_TokenList( ROGUE_ARG(THIS), type_0, augmented_tokens_4 );
  }
}

void RogueTemplate__instantiate_list__Type_TokenList( RogueClassTemplate* THIS, RogueClassType* type_0, RogueTokenList* augmented_tokens_1 )
{
  type_0->is_list = true;
  type_0->_element_type = ((RogueType__organize__Scope( ROGUE_ARG(((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueString__leftmost__Int32( ROGUE_ARG(type_0->name), -2 )))) )))), ROGUE_ARG(((RogueClassScope*)(NULL))) )));
  ROGUE_DEF_LOCAL_REF(RogueTokenList*,instance_tokens_2,(((RogueTokenList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueTokenList*,ROGUE_CREATE_OBJECT(TokenList))), ROGUE_ARG(augmented_tokens_1->count) )))));
  {
    ROGUE_DEF_LOCAL_REF(RogueTokenList*,_auto_467_3,(augmented_tokens_1));
    RogueInt32 _auto_468_4 = (0);
    for (;_auto_468_4 < _auto_467_3->count;++_auto_468_4)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassToken*,template_t_5,(((RogueClassToken*)(_auto_467_3->data->objects[_auto_468_4]))));
      if (((void*)template_t_5->_type) == ((void*)RogueTokenType_placeholder_id))
      {
        if (((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG((call_ROGUEM39( 1, template_t_5 ))), Rogue_literal_strings[343] ))))
        {
          RogueTokenList__add__Token( instance_tokens_2, ROGUE_ARG((call_ROGUEM96( 11, ROGUE_ARG(RogueTokenType_identifier), template_t_5, ROGUE_ARG(type_0->_element_type->name) ))) );
        }
        else
        {
          RogueTokenList__add__Token( instance_tokens_2, template_t_5 );
        }
      }
      else
      {
        RogueTokenList__add__Token( instance_tokens_2, template_t_5 );
      }
    }
  }
  RogueParser__parse_type_def__Type( ROGUE_ARG(((RogueParser__init__TokenList_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassParser*,ROGUE_CREATE_OBJECT(Parser))), instance_tokens_2, false )))), type_0 );
}

void RogueTemplate__instantiate_optional__Type_TokenList( RogueClassTemplate* THIS, RogueClassType* type_0, RogueTokenList* augmented_tokens_1 )
{
  type_0->is_optional = true;
  type_0->_element_type = ((RogueType__organize__Scope( ROGUE_ARG(((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueString__leftmost__Int32( ROGUE_ARG(type_0->name), -1 )))) )))), ROGUE_ARG(((RogueClassScope*)(NULL))) )));
  ROGUE_DEF_LOCAL_REF(RogueTokenList*,instance_tokens_2,(((RogueTokenList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueTokenList*,ROGUE_CREATE_OBJECT(TokenList))), ROGUE_ARG(augmented_tokens_1->count) )))));
  {
    ROGUE_DEF_LOCAL_REF(RogueTokenList*,_auto_469_3,(augmented_tokens_1));
    RogueInt32 _auto_470_4 = (0);
    for (;_auto_470_4 < _auto_469_3->count;++_auto_470_4)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassToken*,template_t_5,(((RogueClassToken*)(_auto_469_3->data->objects[_auto_470_4]))));
      if (((void*)template_t_5->_type) == ((void*)RogueTokenType_placeholder_id))
      {
        if (((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG((call_ROGUEM39( 1, template_t_5 ))), Rogue_literal_strings[343] ))))
        {
          RogueTokenList__add__Token( instance_tokens_2, ROGUE_ARG((call_ROGUEM96( 11, ROGUE_ARG(RogueTokenType_identifier), template_t_5, ROGUE_ARG(type_0->_element_type->name) ))) );
        }
        else
        {
          RogueTokenList__add__Token( instance_tokens_2, template_t_5 );
        }
      }
      else
      {
        RogueTokenList__add__Token( instance_tokens_2, template_t_5 );
      }
    }
  }
  RogueParser__parse_type_def__Type( ROGUE_ARG(((RogueParser__init__TokenList_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassParser*,ROGUE_CREATE_OBJECT(Parser))), instance_tokens_2, false )))), type_0 );
}

void RogueTemplate__instantiate_parameterized_type__Type_TokenList_Scope( RogueClassTemplate* THIS, RogueClassType* type_0, RogueTokenList* augmented_tokens_1, RogueClassScope* scope_2 )
{
  ROGUE_DEF_LOCAL_REF(RogueTokenList*,instance_tokens_3,(augmented_tokens_1));
  ROGUE_DEF_LOCAL_REF(RogueClassString_TypeSpecializerTable*,type_specializers_4,(((RogueString_TypeSpecializerTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_TypeSpecializerTable*,ROGUE_CREATE_OBJECT(String_TypeSpecializerTable))) )))));
  ROGUE_DEF_LOCAL_REF(RogueString*,specialization_string_5,(((RogueString__from_first__Character( ROGUE_ARG(type_0->name), (RogueCharacter)'<' )))));
  if (specialization_string_5->count == 0)
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(type_0->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[361] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(type_0->name) )))) )))), Rogue_literal_strings[362] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(type_0->name) )))) )))), Rogue_literal_strings[363] )))) )))) ))));
  }
  ROGUE_DEF_LOCAL_REF(RogueClassParser*,parser_6,(((RogueParser__init__Token_String_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassParser*,ROGUE_CREATE_OBJECT(Parser))), ROGUE_ARG(THIS->t), ROGUE_ARG(type_0->name), ROGUE_ARG(((RogueString__from_first__Character( ROGUE_ARG(type_0->name), (RogueCharacter)'<' )))) )))));
  RogueParser__read( parser_6 );
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_7,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueLogical first_8 = (true);
  while ((first_8 || ((RogueParser__consume__TokenType( parser_6, ROGUE_ARG(RogueTokenType_symbol_comma) )))))
  {
    first_8 = ((RogueLogical)false);
    ROGUE_DEF_LOCAL_REF(RogueTokenList*,specializer_tokens_9,(((RogueTokenList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueTokenList*,ROGUE_CREATE_OBJECT(TokenList))) )))));
    RogueParser__parse_specializer__StringBuilder_TokenList( parser_6, ROGUE_ARG(((RogueStringBuilder__clear( buffer_7 )))), specializer_tokens_9 );
    RogueInt32 index_10 = (((RogueString_TypeSpecializerTable__count( type_specializers_4 ))));
    if (index_10 >= THIS->type_parameters->count)
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[364] ))));
    }
    ROGUE_DEF_LOCAL_REF(RogueClassTypeParameter*,param_11,(((RogueClassTypeParameter*)(THIS->type_parameters->data->objects[index_10]))));
    ROGUE_DEF_LOCAL_REF(RogueClassTypeSpecializer*,specializer_12,(((RogueTypeSpecializer__init__String_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTypeSpecializer*,ROGUE_CREATE_OBJECT(TypeSpecializer))), ROGUE_ARG(param_11->name), index_10 )))));
    specializer_12->tokens = specializer_tokens_9;
    RogueString_TypeSpecializerTable__set__String_TypeSpecializer( type_specializers_4, ROGUE_ARG(specializer_12->name), specializer_12 );
    if (!(!!(type_0->specializers)))
    {
      type_0->specializers = ((RogueTypeSpecializerList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueTypeSpecializerList*,ROGUE_CREATE_OBJECT(TypeSpecializerList))) )));
    }
    RogueTypeSpecializerList__add__TypeSpecializer( ROGUE_ARG(type_0->specializers), specializer_12 );
  }
  if (((RogueString_TypeSpecializerTable__count( type_specializers_4 ))) < THIS->type_parameters->count)
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(type_0->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[365] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(type_0->name) )))) )))), Rogue_literal_strings[366] )))), ROGUE_ARG(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], ROGUE_ARG(((RogueString_TypeSpecializerTable__count( type_specializers_4 )))) )))) )))), Rogue_literal_strings[367] )))), ROGUE_ARG(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], ROGUE_ARG(THIS->type_parameters->count) )))) )))), Rogue_literal_strings[368] )))) )))) ))));
  }
  instance_tokens_3 = ((RogueTokenList*)((RogueTokenList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueTokenList*,ROGUE_CREATE_OBJECT(TokenList))), ROGUE_ARG((augmented_tokens_1->count * 2)) ))));
  {
    ROGUE_DEF_LOCAL_REF(RogueTokenList*,_auto_477_14,(augmented_tokens_1));
    RogueInt32 _auto_478_15 = (0);
    for (;_auto_478_15 < _auto_477_14->count;++_auto_478_15)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassToken*,template_t_16,(((RogueClassToken*)(_auto_477_14->data->objects[_auto_478_15]))));
      if (((void*)template_t_16->_type) == ((void*)RogueTokenType_placeholder_id))
      {
        ROGUE_DEF_LOCAL_REF(RogueClassTypeSpecializer*,specializer_13,(((RogueString_TypeSpecializerTable__get__String( type_specializers_4, ROGUE_ARG((call_ROGUEM39( 1, template_t_16 ))) )))));
        if (!!(specializer_13))
        {
          {
            ROGUE_DEF_LOCAL_REF(RogueTokenList*,_auto_479_17,(specializer_13->tokens));
            RogueInt32 _auto_480_18 = (0);
            for (;_auto_480_18 < _auto_479_17->count;++_auto_480_18)
            {
              ROGUE_DEF_LOCAL_REF(RogueClassToken*,specializer_t_19,(((RogueClassToken*)(_auto_479_17->data->objects[_auto_480_18]))));
              RogueTokenList__add__Token( instance_tokens_3, specializer_t_19 );
            }
          }
        }
        else
        {
          RogueTokenList__add__Token( instance_tokens_3, template_t_16 );
        }
      }
      else
      {
        RogueTokenList__add__Token( instance_tokens_3, template_t_16 );
      }
    }
  }
  RogueParser__parse_type_def__Type( ROGUE_ARG(((RogueParser__init__TokenList_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassParser*,ROGUE_CREATE_OBJECT(Parser))), instance_tokens_3, false )))), type_0 );
}

void RogueTemplate__instantiate_standard_type__Type_TokenList( RogueClassTemplate* THIS, RogueClassType* type_0, RogueTokenList* augmented_tokens_1 )
{
  if (((RogueString__contains__String( ROGUE_ARG(type_0->name), ROGUE_ARG(((RogueCharacter__to_String( (RogueCharacter)'<' )))) ))))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[369] ))));
  }
  RogueParser__parse_type_def__Type( ROGUE_ARG(((RogueParser__init__TokenList_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassParser*,ROGUE_CREATE_OBJECT(Parser))), augmented_tokens_1, false )))), type_0 );
}

RogueInt32 RogueTemplate__type_parameter_count( RogueClassTemplate* THIS )
{
  if (!!(THIS->type_parameters))
  {
    return (RogueInt32)(THIS->type_parameters->count);
  }
  return (RogueInt32)(0);
}

RogueClassTemplate* RogueTemplate__init_object( RogueClassTemplate* THIS )
{
  THIS->tokens = ((RogueTokenList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueTokenList*,ROGUE_CREATE_OBJECT(TokenList))) )));
  THIS->attributes = ROGUE_CREATE_REF(RogueClassAttributes*,ROGUE_CREATE_OBJECT(Attributes));
  return (RogueClassTemplate*)(THIS);
}

RogueString* RogueString_TemplateTable__to_String( RogueClassString_TemplateTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueString_TemplateTable__print_to__StringBuilder( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))) )))) ))));
}

RogueString* RogueString_TemplateTable__type_name( RogueClassString_TemplateTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[640]);
}

RogueClassString_TemplateTable* RogueString_TemplateTable__init( RogueClassString_TemplateTable* THIS )
{
  RogueString_TemplateTable__init__Int32( ROGUE_ARG(THIS), 16 );
  return (RogueClassString_TemplateTable*)(THIS);
}

RogueClassString_TemplateTable* RogueString_TemplateTable__init__Int32( RogueClassString_TemplateTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_TemplateTableEntryList__init__Int32_String_TemplateTableEntry( ROGUE_ARG(ROGUE_CREATE_REF(RogueTableEntry_of_String_TemplateList*,ROGUE_CREATE_OBJECT(TableEntry_of_String_TemplateList))), bin_count_0, ROGUE_ARG(((RogueClassString_TemplateTableEntry*)(NULL))) )));
  THIS->keys = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  return (RogueClassString_TemplateTable*)(THIS);
}

RogueClassString_TemplateTableEntry* RogueString_TemplateTable__find__String( RogueClassString_TemplateTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  ROGUE_DEF_LOCAL_REF(RogueClassString_TemplateTableEntry*,entry_2,(((RogueClassString_TemplateTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)]))));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_2->key), key_0 )))))
    {
      return (RogueClassString_TemplateTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_TemplateTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_TemplateTableEntry*)(((RogueClassString_TemplateTableEntry*)(NULL)));
}

RogueClassTemplate* RogueString_TemplateTable__get__String( RogueClassString_TemplateTable* THIS, RogueString* key_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassString_TemplateTableEntry*,entry_1,(((RogueString_TemplateTable__find__String( ROGUE_ARG(THIS), key_0 )))));
  if (!!(entry_1))
  {
    return (RogueClassTemplate*)(entry_1->value);
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassTemplate*,default_value_2,0);
    return (RogueClassTemplate*)(default_value_2);
  }
}

RogueClassString_TemplateTable* RogueString_TemplateTable__set__String_Template( RogueClassString_TemplateTable* THIS, RogueString* key_0, RogueClassTemplate* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  ROGUE_DEF_LOCAL_REF(RogueClassString_TemplateTableEntry*,entry_4,(((RogueClassString_TemplateTableEntry*)(THIS->bins->data->objects[index_3]))));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_4->key), key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_TemplateTable*)(THIS);
    }
    entry_4 = ((RogueClassString_TemplateTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_TemplateTableEntry*)((RogueString_TemplateTableEntry__init__String_Template_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_TemplateTableEntry*,ROGUE_CREATE_OBJECT(String_TemplateTableEntry))), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_TemplateTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( ROGUE_ARG(THIS->keys), key_0 );
  return (RogueClassString_TemplateTable*)(THIS);
}

RogueStringBuilder* RogueString_TemplateTable__print_to__StringBuilder( RogueClassString_TemplateTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    ROGUE_DEF_LOCAL_REF(RogueString*,key_2,(((RogueString*)(THIS->keys->data->objects[i_1]))));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ROGUE_ARG(((RogueObject*)(((RogueString_TemplateTable__get__String( ROGUE_ARG(THIS), key_2 )))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_TemplateTable* RogueString_TemplateTable__init_object( RogueClassString_TemplateTable* THIS )
{
  return (RogueClassString_TemplateTable*)(THIS);
}

RogueString* RogueString_AugmentListTable__to_String( RogueClassString_AugmentListTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueString_AugmentListTable__print_to__StringBuilder( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))) )))) ))));
}

RogueString* RogueString_AugmentListTable__type_name( RogueClassString_AugmentListTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[641]);
}

RogueClassString_AugmentListTable* RogueString_AugmentListTable__init( RogueClassString_AugmentListTable* THIS )
{
  RogueString_AugmentListTable__init__Int32( ROGUE_ARG(THIS), 16 );
  return (RogueClassString_AugmentListTable*)(THIS);
}

RogueClassString_AugmentListTable* RogueString_AugmentListTable__init__Int32( RogueClassString_AugmentListTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_AugmentListTableEntryList__init__Int32_String_AugmentListTableEntry( ROGUE_ARG(ROGUE_CREATE_REF(RogueTableEntry_of_String_AugmentListList*,ROGUE_CREATE_OBJECT(TableEntry_of_String_AugmentListList))), bin_count_0, ROGUE_ARG(((RogueClassString_AugmentListTableEntry*)(NULL))) )));
  THIS->keys = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  return (RogueClassString_AugmentListTable*)(THIS);
}

RogueClassString_AugmentListTableEntry* RogueString_AugmentListTable__find__String( RogueClassString_AugmentListTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  ROGUE_DEF_LOCAL_REF(RogueClassString_AugmentListTableEntry*,entry_2,(((RogueClassString_AugmentListTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)]))));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_2->key), key_0 )))))
    {
      return (RogueClassString_AugmentListTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_AugmentListTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_AugmentListTableEntry*)(((RogueClassString_AugmentListTableEntry*)(NULL)));
}

RogueAugmentList* RogueString_AugmentListTable__get__String( RogueClassString_AugmentListTable* THIS, RogueString* key_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassString_AugmentListTableEntry*,entry_1,(((RogueString_AugmentListTable__find__String( ROGUE_ARG(THIS), key_0 )))));
  if (!!(entry_1))
  {
    return (RogueAugmentList*)(entry_1->value);
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueAugmentList*,default_value_2,0);
    return (RogueAugmentList*)(default_value_2);
  }
}

RogueClassString_AugmentListTable* RogueString_AugmentListTable__set__String_AugmentList( RogueClassString_AugmentListTable* THIS, RogueString* key_0, RogueAugmentList* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  ROGUE_DEF_LOCAL_REF(RogueClassString_AugmentListTableEntry*,entry_4,(((RogueClassString_AugmentListTableEntry*)(THIS->bins->data->objects[index_3]))));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_4->key), key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_AugmentListTable*)(THIS);
    }
    entry_4 = ((RogueClassString_AugmentListTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_AugmentListTableEntry*)((RogueString_AugmentListTableEntry__init__String_AugmentList_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_AugmentListTableEntry*,ROGUE_CREATE_OBJECT(String_AugmentListTableEntry))), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_AugmentListTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( ROGUE_ARG(THIS->keys), key_0 );
  return (RogueClassString_AugmentListTable*)(THIS);
}

RogueStringBuilder* RogueString_AugmentListTable__print_to__StringBuilder( RogueClassString_AugmentListTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    ROGUE_DEF_LOCAL_REF(RogueString*,key_2,(((RogueString*)(THIS->keys->data->objects[i_1]))));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ROGUE_ARG(((RogueObject*)(((RogueString_AugmentListTable__get__String( ROGUE_ARG(THIS), key_2 )))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_AugmentListTable* RogueString_AugmentListTable__init_object( RogueClassString_AugmentListTable* THIS )
{
  return (RogueClassString_AugmentListTable*)(THIS);
}

RogueString* RogueMethod__to_String( RogueClassMethod* THIS )
{
  return (RogueString*)(THIS->signature);
}

RogueString* RogueMethod__type_name( RogueClassMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[642]);
}

RogueClassMethod* RogueMethod__init__Token_Type_String( RogueClassMethod* THIS, RogueClassToken* _auto_68_0, RogueClassType* _auto_69_1, RogueString* _auto_70_2 )
{
  THIS->name = _auto_70_2;
  RogueMethod__set_type_context__Type( ROGUE_ARG(THIS), _auto_69_1 );
  THIS->t = _auto_68_0;
  return (RogueClassMethod*)(THIS);
}

RogueClassMethod* RogueMethod__clone( RogueClassMethod* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,result_0,(((RogueMethod__init__Token_Type_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassMethod*,ROGUE_CREATE_OBJECT(Method))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->type_context), ROGUE_ARG(THIS->name) )))));
  result_0->cpp_name = THIS->cpp_name;
  result_0->cpp_typedef = THIS->cpp_typedef;
  result_0->signature = THIS->signature;
  result_0->attributes = ((RogueAttributes__clone( ROGUE_ARG(THIS->attributes) )));
  result_0->_return_type = THIS->_return_type;
  result_0->_task_result_type = THIS->_task_result_type;
  result_0->locals = ((RogueLocalList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueLocalList*,ROGUE_CREATE_OBJECT(LocalList))) )));
  {
    ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_499_1,(THIS->locals));
    RogueInt32 _auto_500_2 = (0);
    for (;_auto_500_2 < _auto_499_1->count;++_auto_500_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassLocal*,v_3,(((RogueClassLocal*)(_auto_499_1->data->objects[_auto_500_2]))));
      RogueLocalList__add__Local( ROGUE_ARG(result_0->locals), ROGUE_ARG(((RogueLocal__clone__CloneArgs( v_3, ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) )))) );
    }
  }
  result_0->parameters = ((RogueLocalList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueLocalList*,ROGUE_CREATE_OBJECT(LocalList))) )));
  {
    ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_501_4,(THIS->parameters));
    RogueInt32 i_5 = (0);
    for (;i_5 < _auto_501_4->count;++i_5)
    {
      RogueLocalList__add__Local( ROGUE_ARG(result_0->parameters), ROGUE_ARG(((RogueClassLocal*)(THIS->locals->data->objects[i_5]))) );
    }
  }
  result_0->label_list = ((RogueCmdLabelList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueCmdLabelList*,ROGUE_CREATE_OBJECT(CmdLabelList))), ROGUE_ARG(THIS->label_list->count) )));
  result_0->label_lookup = ((RogueString_CmdLabelTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_CmdLabelTable*,ROGUE_CREATE_OBJECT(String_CmdLabelTable))) )));
  result_0->min_args = THIS->min_args;
  result_0->statements = ((RogueCmdStatementList__clone__CloneArgs( ROGUE_ARG(THIS->statements), ROGUE_ARG(((RogueClassCloneArgs*)(((RogueCloneMethodArgs__init__Method( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCloneMethodArgs*,ROGUE_CREATE_OBJECT(CloneMethodArgs))), result_0 )))))) )));
  result_0->native_code = THIS->native_code;
  result_0->index = THIS->index;
  return (RogueClassMethod*)(result_0);
}

RogueClassMethod* RogueMethod__incorporate__Type( RogueClassMethod* THIS, RogueClassType* into_type_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_1,(((RogueMethod__set_incorporated( ROGUE_ARG(((RogueMethod__set_type_context__Type( ROGUE_ARG(((RogueMethod__clone( ROGUE_ARG(THIS) )))), into_type_0 )))) )))));
  m_1->cpp_name = ((RogueString*)(NULL));
  if (!!(THIS->aspect_statements))
  {
    m_1->statements = ((RogueCmdStatementList__clone__CloneArgs( ROGUE_ARG(THIS->aspect_statements), ROGUE_ARG(((RogueClassCloneArgs*)(RogueObject_as(NULL,RogueTypeCloneArgs)))) )));
  }
  if (((void*)THIS->incorporating_classes) == ((void*)NULL))
  {
    THIS->incorporating_classes = ((RogueTypeList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueTypeList*,ROGUE_CREATE_OBJECT(TypeList))) )));
  }
  RogueTypeList__add__Type( ROGUE_ARG(THIS->incorporating_classes), into_type_0 );
  m_1->signature = ((RogueString*)(NULL));
  RogueMethod__assign_signature( m_1 );
  return (RogueClassMethod*)(m_1);
}

RogueLogical RogueMethod__accepts_arg_count__Int32( RogueClassMethod* THIS, RogueInt32 n_0 )
{
  return (RogueLogical)((n_0 >= THIS->min_args && n_0 <= THIS->parameters->count));
}

RogueClassLocal* RogueMethod__add_local__Token_String_Type_Cmd( RogueClassMethod* THIS, RogueClassToken* v_t_0, RogueString* v_name_1, RogueClassType* v_type_2, RogueClassCmd* v_initial_value_3 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassLocal*,v_4,(((RogueLocal__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassLocal*,ROGUE_CREATE_OBJECT(Local))), v_t_0, v_name_1 )))));
  v_4->index = THIS->locals->count;
  v_4->_type = v_type_2;
  v_4->initial_value = v_initial_value_3;
  RogueLocalList__add__Local( ROGUE_ARG(THIS->locals), v_4 );
  return (RogueClassLocal*)(v_4);
}

RogueClassLocal* RogueMethod__add_parameter__Token_String_Type( RogueClassMethod* THIS, RogueClassToken* p_t_0, RogueString* p_name_1, RogueClassType* p_type_2 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassLocal*,p_3,(((RogueMethod__add_local__Token_String_Type_Cmd( ROGUE_ARG(THIS), p_t_0, p_name_1, p_type_2, ROGUE_ARG(((RogueClassCmd*)(NULL))) )))));
  RogueLocalList__add__Local( ROGUE_ARG(THIS->parameters), p_3 );
  return (RogueClassLocal*)(p_3);
}

void RogueMethod__assign_signature( RogueClassMethod* THIS )
{
  if (!!(THIS->signature))
  {
    return;
  }
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__String( buffer_0, ROGUE_ARG(THIS->name) );
  RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[80] );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_503_2,(THIS->parameters));
    RogueInt32 _auto_504_3 = (0);
    for (;_auto_504_3 < _auto_503_2->count;++_auto_504_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassLocal*,param_4,(((RogueClassLocal*)(_auto_503_2->data->objects[_auto_504_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[193] );
      }
      RogueStringBuilder__print__String( buffer_0, ROGUE_ARG(param_4->_type->name) );
    }
  }
  RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[28] );
  THIS->signature = ((RogueStringBuilder__to_String( buffer_0 )));
}

RogueClassCmdLabel* RogueMethod__begin_label__Token_String_Logical( RogueClassMethod* THIS, RogueClassToken* label_t_0, RogueString* label_name_1, RogueLogical consolidate_duplicates_2 )
{
  if (consolidate_duplicates_2)
  {
    THIS->cur_label = ((RogueString_CmdLabelTable__get__String( ROGUE_ARG(THIS->label_lookup), label_name_1 )));
    if (!!(THIS->cur_label))
    {
      return (RogueClassCmdLabel*)(THIS->cur_label);
    }
  }
  else if ((((RogueString__operatorEQUALSEQUALS__String( label_name_1, Rogue_literal_strings[269] ))) && ((RogueString_CmdLabelTable__contains__String( ROGUE_ARG(THIS->label_lookup), label_name_1 )))))
  {
    ROGUE_THROW(((RogueToken__error__String( label_t_0, Rogue_literal_strings[270] ))));
  }
  else if ((((RogueString__operatorEQUALSEQUALS__String( label_name_1, Rogue_literal_strings[271] ))) && ((RogueString_CmdLabelTable__contains__String( ROGUE_ARG(THIS->label_lookup), label_name_1 )))))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(((RogueString_CmdLabelTable__get__String( ROGUE_ARG(THIS->label_lookup), label_name_1 )))->t), Rogue_literal_strings[272] ))));
  }
  THIS->cur_label = ((RogueCmdLabel__init__Token_String_CmdStatementList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLabel*,ROGUE_CREATE_OBJECT(CmdLabel))), label_t_0, label_name_1, ROGUE_ARG(((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )))) )));
  RogueString_CmdLabelTable__set__String_CmdLabel( ROGUE_ARG(THIS->label_lookup), label_name_1, ROGUE_ARG(THIS->cur_label) );
  RogueCmdLabelList__add__CmdLabel( ROGUE_ARG(THIS->label_list), ROGUE_ARG(THIS->cur_label) );
  return (RogueClassCmdLabel*)(THIS->cur_label);
}

RogueLogical RogueMethod__is_abstract( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 524288)));
}

RogueLogical RogueMethod__is_augment( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 262144)));
}

RogueLogical RogueMethod__is_dynamic( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 2048)));
}

RogueLogical RogueMethod__is_fallback( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 2097152)));
}

RogueLogical RogueMethod__is_generated( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 16384)));
}

RogueLogical RogueMethod__is_incorporated( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 8192)));
}

RogueLogical RogueMethod__is_initializer( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 128)));
}

RogueLogical RogueMethod__is_macro( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 64)));
}

RogueLogical RogueMethod__is_native( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 32)));
}

RogueLogical RogueMethod__is_overridden( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 4096)));
}

RogueLogical RogueMethod__is_requisite( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 32768)));
}

RogueLogical RogueMethod__is_global( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 512)));
}

RogueLogical RogueMethod__is_special( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 4194304)));
}

RogueLogical RogueMethod__is_task( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 65536)));
}

RogueLogical RogueMethod__is_task_conversion( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 131072)));
}

RogueClassMethod* RogueMethod__make_requisite( RogueClassMethod* THIS )
{
  RogueAttributes__add__Int32( ROGUE_ARG(THIS->attributes), 32768 );
  return (RogueClassMethod*)(THIS);
}

RogueLogical RogueMethod__omit_output( RogueClassMethod* THIS )
{
  return (RogueLogical)((((((RogueMethod__is_native( ROGUE_ARG(THIS) ))) || ((RogueMethod__is_macro( ROGUE_ARG(THIS) )))) || !(THIS->is_used)) || ((((RogueMethod__is_generated( ROGUE_ARG(THIS) ))) && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(THIS->name), Rogue_literal_strings[344] )))) && ((RogueType__is_compound( ROGUE_ARG(THIS->type_context) ))))));
}

RogueClassMethod* RogueMethod__organize__Scope_Logical( RogueClassMethod* THIS, RogueClassScope* scope_0, RogueLogical add_to_lookup_1 )
{
  if (THIS->organized)
  {
    return (RogueClassMethod*)(THIS);
  }
  THIS->organized = true;
  if (((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(THIS->name), Rogue_literal_strings[345] ))))
  {
    if (((RogueMethod__is_global( ROGUE_ARG(THIS) ))))
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[389] ))));
    }
    else if (((RogueType__is_compound( ROGUE_ARG(THIS->type_context) ))))
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[390] ))));
    }
    THIS->attributes->flags |= 128;
    THIS->_return_type = THIS->type_context;
  }
  if (((RogueMethod__is_task( ROGUE_ARG(THIS) ))))
  {
    if (((RogueMethod__is_global( ROGUE_ARG(THIS) ))))
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[391] ))));
    }
    THIS->_task_result_type = THIS->_return_type;
    if (!!(THIS->_return_type))
    {
      RogueType__organize__Scope( ROGUE_ARG(THIS->_return_type), ROGUE_ARG(((RogueClassScope*)(NULL))) );
      THIS->_return_type = ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[392] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->_return_type->name) )))) )))), Rogue_literal_strings[130] )))) )))) )));
    }
    else
    {
      THIS->_return_type = ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(THIS->t), Rogue_literal_strings[393] )));
    }
    RogueType__organize__Scope( ROGUE_ARG(THIS->_return_type), ROGUE_ARG(((RogueClassScope*)(NULL))) );
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_505_8,(THIS->parameters));
    RogueInt32 _auto_506_9 = (0);
    for (;_auto_506_9 < _auto_505_8->count;++_auto_506_9)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassLocal*,param_10,(((RogueClassLocal*)(_auto_505_8->data->objects[_auto_506_9]))));
      if (!(((RogueMethod__is_global( ROGUE_ARG(THIS) )))))
      {
        ROGUE_DEF_LOCAL_REF(RogueClassProperty*,property_2,(((RogueType__find_property__String( ROGUE_ARG(THIS->type_context), ROGUE_ARG(param_10->name) )))));
        if (!!(property_2))
        {
          if (((void*)param_10->_type) == ((void*)NULL))
          {
            ROGUE_DEF_LOCAL_REF(RogueString*,new_name_3,(((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )))));
            ROGUE_DEF_LOCAL_REF(RogueClassToken*,pt_4,(param_10->t));
            RogueCmdList__insert__Cmd_Int32( ROGUE_ARG(((RogueCmdList*)THIS->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAssign*,ROGUE_CREATE_OBJECT(CmdAssign))), pt_4, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), pt_4, ROGUE_ARG(param_10->name) )))))), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), pt_4, new_name_3 )))))) )))))), 0 );
            param_10->name = new_name_3;
            param_10->_type = property_2->_type;
          }
          else
          {
            ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(param_10->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[381] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(param_10->name) )))) )))), Rogue_literal_strings[382] )))) )))) ))));
          }
        }
      }
      if (!(!!(param_10->_type)))
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(param_10->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[394] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(param_10->name) )))) )))), Rogue_literal_strings[15] )))) )))) ))));
      }
    }
  }
  RogueMethod__assign_signature( ROGUE_ARG(THIS) );
  if ((add_to_lookup_1 && !(((RogueMethod__is_augment( ROGUE_ARG(THIS) ))))))
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,list_5,(((RogueString_MethodListTable__get__String( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->methods_by_signature), ROGUE_ARG(THIS->signature) )))));
    if (!(!!(list_5)))
    {
      list_5 = ((RogueMethodList*)((RogueMethodList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueMethodList*,ROGUE_CREATE_OBJECT(MethodList))) ))));
      RogueString_MethodListTable__set__String_MethodList( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->methods_by_signature), ROGUE_ARG(THIS->signature), list_5 );
    }
    RogueMethodList__add__Method( list_5, ROGUE_ARG(THIS) );
    if (((RogueMethod__is_global( ROGUE_ARG(THIS) ))))
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,existing_m_6,(((RogueString_MethodTable__get__String( ROGUE_ARG(THIS->type_context->routine_lookup_by_signature), ROGUE_ARG(THIS->signature) )))));
      if ((!!(existing_m_6) && ((void*)existing_m_6->type_context) == ((void*)THIS->type_context)))
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[395] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->signature) )))) )))), Rogue_literal_strings[396] )))) )))) ))));
      }
      RogueString_MethodTable__set__String_Method( ROGUE_ARG(THIS->type_context->routine_lookup_by_signature), ROGUE_ARG(THIS->signature), ROGUE_ARG(THIS) );
    }
    else
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,existing_m_7,(((RogueString_MethodTable__get__String( ROGUE_ARG(THIS->type_context->method_lookup_by_signature), ROGUE_ARG(THIS->signature) )))));
      if ((!!(existing_m_7) && ((void*)existing_m_7->type_context) == ((void*)THIS->type_context)))
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[397] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->signature) )))) )))), Rogue_literal_strings[396] )))) )))) ))));
      }
      RogueString_MethodTable__set__String_Method( ROGUE_ARG(THIS->type_context->method_lookup_by_signature), ROGUE_ARG(THIS->signature), ROGUE_ARG(THIS) );
    }
  }
  THIS->min_args = THIS->parameters->count;
  while ((THIS->min_args >= 1 && !!(((RogueClassLocal*)(THIS->parameters->data->objects[(THIS->min_args - 1)]))->initial_value)))
  {
    --THIS->min_args;
  }
  return (RogueClassMethod*)(THIS);
}

void RogueMethod__resolve( RogueClassMethod* THIS )
{
  if (THIS->resolved)
  {
    return;
  }
  THIS->resolved = true;
  {
    ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_543_2,(THIS->parameters));
    RogueInt32 _auto_544_3 = (0);
    for (;_auto_544_3 < _auto_543_2->count;++_auto_544_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassLocal*,param_4,(((RogueClassLocal*)(_auto_543_2->data->objects[_auto_544_3]))));
      RogueType__organize__Scope( ROGUE_ARG(param_4->_type), ROGUE_ARG(((RogueClassScope*)(NULL))) );
    }
  }
  if (!!(THIS->_return_type))
  {
    RogueType__organize__Scope( ROGUE_ARG(THIS->_return_type), ROGUE_ARG(((RogueClassScope*)(NULL))) );
  }
  if (((RogueType__is_aspect( ROGUE_ARG(THIS->type_context) ))))
  {
    THIS->aspect_statements = THIS->statements;
    THIS->statements = ((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )));
  }
  if (((RogueMethod__is_task( ROGUE_ARG(THIS) ))))
  {
    RogueMethod__convert_to_task( ROGUE_ARG(THIS) );
  }
  ROGUE_DEF_LOCAL_REF(RogueClassScope*,scope_0,(((RogueScope__init__Type_Method( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassScope*,ROGUE_CREATE_OBJECT(Scope))), ROGUE_ARG(THIS->type_context), ROGUE_ARG(THIS) )))));
  {
    ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_545_5,(THIS->parameters));
    RogueInt32 _auto_546_6 = (0);
    for (;_auto_546_6 < _auto_545_5->count;++_auto_546_6)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassLocal*,p_7,(((RogueClassLocal*)(_auto_545_5->data->objects[_auto_546_6]))));
      RogueScope__push_local__Local_Logical( scope_0, p_7, true );
    }
  }
  RogueCmdStatementList__resolve__Scope_Logical( ROGUE_ARG(THIS->statements), scope_0, ROGUE_ARG(((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->m_on_launch)) );
  if (scope_0->local_list->count > THIS->parameters->count)
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[433] ))));
  }
  if (!!(scope_0->control_stack->count))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[434] ))));
  }
  if (((RogueMethod__is_initializer( ROGUE_ARG(THIS) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassToken*,return_t_1,(THIS->t));
    if (!!(THIS->statements->count))
    {
      return_t_1 = ((RogueClassToken*)((RogueCmdList__last( ROGUE_ARG(((RogueCmdList*)THIS->statements)) )))->t);
    }
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS->statements)), ROGUE_ARG(((RogueCmdReturn__resolve__Scope( ROGUE_ARG(((RogueCmdReturn__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReturn*,ROGUE_CREATE_OBJECT(CmdReturn))), return_t_1, ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdLiteralThis*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(((RogueClassCmdThisContext*)ROGUE_CREATE_REF(RogueClassCmdLiteralThis*,ROGUE_CREATE_OBJECT(CmdLiteralThis)))), return_t_1, ROGUE_ARG(THIS->type_context) )))))))) )))), scope_0 )))) );
  }
}

void RogueMethod__convert_augment_to_standalone( RogueClassMethod* THIS )
{
  THIS->attributes->flags &= -262145;
  if (!(!!(THIS->native_code)))
  {
    if (THIS->label_list->count > 2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdLabel*,label_0,(((RogueClassCmdLabel*)(THIS->label_list->data->objects[2]))));
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(label_0->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[398] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(label_0->name) )))) )))), Rogue_literal_strings[399] )))) )))) ))));
    }
    ROGUE_DEF_LOCAL_REF(RogueClassCmdLabel*,insert_label_1,(((RogueString_CmdLabelTable__get__String( ROGUE_ARG(THIS->label_lookup), Rogue_literal_strings[269] )))));
    ROGUE_DEF_LOCAL_REF(RogueClassCmdLabel*,append_label_2,(((RogueString_CmdLabelTable__get__String( ROGUE_ARG(THIS->label_lookup), Rogue_literal_strings[271] )))));
    RogueString_CmdLabelTable__clear( ROGUE_ARG(THIS->label_lookup) );
    RogueCmdLabelList__clear( ROGUE_ARG(THIS->label_list) );
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( ROGUE_ARG(THIS), ROGUE_ARG(THIS->t), Rogue_literal_strings[269], false )))))) );
    RogueCmdList__add__CmdList( ROGUE_ARG(((RogueCmdList*)THIS->statements)), ROGUE_ARG(((RogueCmdList*)(insert_label_1->statements))) );
    RogueCmdList__add__CmdList( ROGUE_ARG(((RogueCmdList*)THIS->statements)), ROGUE_ARG(((RogueCmdList*)(append_label_2->statements))) );
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( ROGUE_ARG(THIS), ROGUE_ARG(THIS->t), Rogue_literal_strings[271], false )))))) );
  }
}

void RogueMethod__convert_to_task( RogueClassMethod* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassType*,task_type_0,(((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->type_context->name) )))) )))), Rogue_literal_strings[422] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->name) )))) )))), Rogue_literal_strings[423] )))), ROGUE_ARG(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], ROGUE_ARG(((RogueProgram__next_unique_integer( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )))) )))) )))) )))) )))));
  RogueAttributes__add__Int32( ROGUE_ARG(task_type_0->attributes), 0 );
  RogueTypeList__add__Type( ROGUE_ARG(task_type_0->base_types), ROGUE_ARG(THIS->_return_type) );
  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_init_1,(((RogueType__add_method__Token_String( task_type_0, ROGUE_ARG(THIS->t), Rogue_literal_strings[345] )))));
  RogueMethod__add_parameter__Token_String_Type( m_init_1, ROGUE_ARG(THIS->t), Rogue_literal_strings[424], ROGUE_ARG(((RogueClassType*)(NULL))) );
  {
    ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_554_9,(THIS->parameters));
    RogueInt32 _auto_555_10 = (0);
    for (;_auto_555_10 < _auto_554_9->count;++_auto_555_10)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassLocal*,p_11,(((RogueClassLocal*)(_auto_554_9->data->objects[_auto_555_10]))));
      RogueMethod__add_parameter__Token_String_Type( m_init_1, ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(p_11->name) )))) )))), Rogue_literal_strings[425] )))), ROGUE_ARG(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], ROGUE_ARG(p_11->index) )))) )))) )))), ROGUE_ARG(((RogueClassType*)(NULL))) );
    }
  }
  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_update_2,(((RogueType__add_method__Token_String( task_type_0, ROGUE_ARG(THIS->t), Rogue_literal_strings[426] )))));
  m_update_2->_return_type = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical;
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)m_update_2->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdGenericLoop__init__Token_Int32_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdGenericLoop*,ROGUE_CREATE_OBJECT(CmdGenericLoop))), ROGUE_ARG(THIS->t), 8, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), Rogue_literal_strings[427], ROGUE_ARG(((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )))) )))))), ROGUE_ARG(((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )))), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))) )))))) );
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)m_update_2->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReturn*,ROGUE_CREATE_OBJECT(CmdReturn))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdCompareNE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareNE*,ROGUE_CREATE_OBJECT(CmdCompareNE)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), Rogue_literal_strings[428] )))))), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), -1 )))))) )))))))) )))))) );
  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_execute_3,(((RogueType__add_method__Token_String( task_type_0, ROGUE_ARG(THIS->t), Rogue_literal_strings[427] )))));
  m_execute_3->_return_type = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical;
  task_type_0->defined = true;
  ROGUE_DEF_LOCAL_REF(RogueString*,m_name_4,(((RogueString__operatorPLUS__String( Rogue_literal_strings[429], ROGUE_ARG(((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )))) )))));
  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_temp_5,(((RogueMethod__init__Token_Type_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassMethod*,ROGUE_CREATE_OBJECT(Method))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->type_context), m_name_4 )))));
  m_temp_5->_return_type = THIS->_task_result_type;
  RogueAttributes__add__Int32( ROGUE_ARG(m_temp_5->attributes), 131072 );
  m_temp_5->parameters = THIS->parameters;
  m_temp_5->locals = THIS->locals;
  m_temp_5->statements = THIS->statements;
  RogueMethod__organize__Scope_Logical( m_temp_5, ROGUE_ARG(((RogueClassScope*)(NULL))), false );
  RogueMethod__resolve( m_temp_5 );
  THIS->locals = ((RogueLocalList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueLocalList*,ROGUE_CREATE_OBJECT(LocalList))) )));
  THIS->parameters = ((RogueLocalList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueLocalList*,ROGUE_CREATE_OBJECT(LocalList))) )));
  {
    ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_572_12,(m_temp_5->locals));
    RogueInt32 _auto_573_13 = (0);
    for (;_auto_573_13 < _auto_572_12->count;++_auto_573_13)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassLocal*,v_14,(((RogueClassLocal*)(_auto_572_12->data->objects[_auto_573_13]))));
      if (v_14->index < m_temp_5->parameters->count)
      {
        RogueMethod__add_parameter__Token_String_Type( ROGUE_ARG(THIS), ROGUE_ARG(v_14->t), ROGUE_ARG(v_14->name), ROGUE_ARG(v_14->_type) );
      }
    }
  }
  THIS->statements = ((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )));
  ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,args_6,(((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )))));
  RogueCmdList__add__Cmd( ((RogueCmdList*)args_6), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdLiteralThis*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(((RogueClassCmdThisContext*)ROGUE_CREATE_REF(RogueClassCmdLiteralThis*,ROGUE_CREATE_OBJECT(CmdLiteralThis)))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->type_context) )))))))) );
  {
    ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_574_15,(m_temp_5->parameters));
    RogueInt32 _auto_575_16 = (0);
    for (;_auto_575_16 < _auto_574_15->count;++_auto_575_16)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassLocal*,p_17,(((RogueClassLocal*)(_auto_574_15->data->objects[_auto_575_16]))));
      RogueCmdList__add__Cmd( ((RogueCmdList*)args_6), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(p_17->name) )))))) );
    }
  }
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReturn*,ROGUE_CREATE_OBJECT(CmdReturn))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(task_type_0->name), args_6 )))))) )))))) );
  {
    ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_576_18,(m_temp_5->locals));
    RogueInt32 _auto_577_19 = (0);
    for (;_auto_577_19 < _auto_576_18->count;++_auto_577_19)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassLocal*,v_20,(((RogueClassLocal*)(_auto_576_18->data->objects[_auto_577_19]))));
      ROGUE_DEF_LOCAL_REF(RogueString*,p_name_7,(((RogueString__operatorPLUS__Int32( ROGUE_ARG(((RogueString__operatorPLUS__String( ROGUE_ARG(v_20->name), Rogue_literal_strings[425] )))), ROGUE_ARG(v_20->index) )))));
      RogueType__add_property__Token_String_Type_Cmd( task_type_0, ROGUE_ARG(v_20->t), p_name_7, ROGUE_ARG(v_20->_type), ROGUE_ARG(((RogueClassCmd*)(NULL))) );
    }
  }
  ROGUE_DEF_LOCAL_REF(RogueClassTaskArgs*,task_args_8,(((RogueTaskArgs__init__Type_Method_Type_Method( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTaskArgs*,ROGUE_CREATE_OBJECT(TaskArgs))), task_type_0, m_execute_3, ROGUE_ARG(THIS->type_context), ROGUE_ARG(THIS) )))));
  task_args_8->context_property = ((RogueType__add_property__Token_String_Type_Cmd( task_type_0, ROGUE_ARG(THIS->t), Rogue_literal_strings[424], ROGUE_ARG(THIS->type_context), ROGUE_ARG(((RogueClassCmd*)(NULL))) )));
  task_args_8->ip_property = ((RogueType__add_property__Token_String_Type_Cmd( task_type_0, ROGUE_ARG(THIS->t), Rogue_literal_strings[428], ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32), ROGUE_ARG(((RogueClassCmd*)(NULL))) )));
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_582_21,(m_temp_5->statements));
    RogueInt32 _auto_583_22 = (0);
    for (;_auto_583_22 < _auto_582_21->count;++_auto_583_22)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,statement_23,(((RogueClassCmd*)(_auto_582_21->data->objects[_auto_583_22]))));
      statement_23 = ((RogueClassCmd*)(call_ROGUEM71( 6, statement_23, ROGUE_ARG(((RogueClassCloneArgs*)(task_args_8))) )));
      if (!!(statement_23))
      {
        RogueTaskArgs__add__Cmd( task_args_8, statement_23 );
      }
    }
  }
  if (task_args_8->cmd_task_control->current_section->statements->count == 0)
  {
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)task_args_8->cmd_task_control->current_section->statements)), ROGUE_ARG(((RogueTaskArgs__create_return__Token_Cmd( task_args_8, ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(NULL))) )))) );
  }
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)m_execute_3->statements)), ROGUE_ARG(((RogueClassCmd*)(task_args_8->cmd_task_control))) );
  RogueType__organize__Scope( task_type_0, ROGUE_ARG(((RogueClassScope*)(NULL))) );
}

RogueClassMethod* RogueMethod__set_incorporated( RogueClassMethod* THIS )
{
  RogueAttributes__add__Int32( ROGUE_ARG(THIS->attributes), 8192 );
  return (RogueClassMethod*)(THIS);
}

RogueClassMethod* RogueMethod__set_type_context__Type( RogueClassMethod* THIS, RogueClassType* _auto_71_0 )
{
  THIS->type_context = _auto_71_0;
  return (RogueClassMethod*)(THIS);
}

void RogueMethod__trace_used_code( RogueClassMethod* THIS )
{
  if (THIS->is_used)
  {
    return;
  }
  THIS->is_used = true;
  RogueType__trace_used_code( ROGUE_ARG(THIS->type_context) );
  {
    ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_586_0,(THIS->parameters));
    RogueInt32 _auto_587_1 = (0);
    for (;_auto_587_1 < _auto_586_0->count;++_auto_587_1)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassLocal*,param_2,(((RogueClassLocal*)(_auto_586_0->data->objects[_auto_587_1]))));
      RogueType__trace_used_code( ROGUE_ARG(param_2->_type) );
    }
  }
  if (!!(THIS->_return_type))
  {
    RogueType__trace_used_code( ROGUE_ARG(THIS->_return_type) );
  }
  RogueCmdStatementList__trace_used_code( ROGUE_ARG(THIS->statements) );
}

void RogueMethod__assign_cpp_name( RogueClassMethod* THIS )
{
  if (!!(THIS->cpp_name))
  {
    return;
  }
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( buffer_0, ROGUE_ARG(THIS->type_context->name) )))), Rogue_literal_strings[422] );
  RogueStringBuilder__print__String( buffer_0, ROGUE_ARG(THIS->name) );
  if (!!(THIS->parameters->count))
  {
    RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[425] );
    {
      ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_588_1,(THIS->parameters));
      RogueInt32 _auto_589_2 = (0);
      for (;_auto_589_2 < _auto_588_1->count;++_auto_589_2)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassLocal*,param_3,(((RogueClassLocal*)(_auto_588_1->data->objects[_auto_589_2]))));
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[425] );
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG(param_3->_type->cpp_name) );
      }
    }
  }
  THIS->cpp_name = ((RogueString__operatorPLUS__String( Rogue_literal_strings[41], ROGUE_ARG(((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(((RogueStringBuilder__to_String( buffer_0 )))) )))) )));
}

void RogueMethod__print_prototype__CPPWriter( RogueClassMethod* THIS, RogueClassCPPWriter* writer_0 )
{
  if (((RogueMethod__omit_output( ROGUE_ARG(THIS) ))))
  {
    return;
  }
  RogueMethod__print_signature__CPPWriter( ROGUE_ARG(THIS), writer_0 );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[219] );
}

void RogueMethod__print_signature__CPPWriter( RogueClassMethod* THIS, RogueClassCPPWriter* writer_0 )
{
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( writer_0, ROGUE_ARG(THIS->_return_type) )))), Rogue_literal_strings[489] )))), ROGUE_ARG(THIS->cpp_name) );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[80] );
  RogueLogical first_1 = (true);
  if (!(((RogueMethod__is_global( ROGUE_ARG(THIS) )))))
  {
    first_1 = ((RogueLogical)false);
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[489] );
    if (((RogueType__is_aspect( ROGUE_ARG(THIS->type_context) ))))
    {
      RogueCPPWriter__print__Type( writer_0, ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object) );
    }
    else
    {
      RogueCPPWriter__print__Type( writer_0, ROGUE_ARG(THIS->type_context) );
    }
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[515] );
  }
  if (!!(THIS->parameters->count))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_590_2,(THIS->parameters));
      RogueInt32 _auto_591_3 = (0);
      for (;_auto_591_3 < _auto_590_2->count;++_auto_591_3)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassLocal*,param_4,(((RogueClassLocal*)(_auto_590_2->data->objects[_auto_591_3]))));
        if (first_1)
        {
          RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[489] );
          first_1 = ((RogueLogical)false);
        }
        else
        {
          RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[502] );
        }
        RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( writer_0, ROGUE_ARG(param_4->_type) )))), Rogue_literal_strings[489] )))), ROGUE_ARG(((RogueLocal__cpp_name( param_4 )))) );
      }
    }
  }
  if (!(first_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[489] );
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
}

void RogueMethod__print_definition__CPPWriter( RogueClassMethod* THIS, RogueClassCPPWriter* writer_0 )
{
  if (((RogueMethod__omit_output( ROGUE_ARG(THIS) ))))
  {
    return;
  }
  RogueMethod__print_signature__CPPWriter( ROGUE_ARG(THIS), writer_0 );
  RogueCPPWriter__println( writer_0 );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[210] );
  writer_0->indent += 2;
  if (((RogueType__is_aspect( ROGUE_ARG(THIS->type_context) ))))
  {
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[596] );
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[210] );
    writer_0->indent += 2;
    if (!!(THIS->incorporating_classes))
    {
      {
        ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_592_2,(THIS->incorporating_classes));
        RogueInt32 _auto_593_3 = (0);
        for (;_auto_593_3 < _auto_592_2->count;++_auto_593_3)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassType*,ic_4,(((RogueClassType*)(_auto_592_2->data->objects[_auto_593_3]))));
          if (ic_4->is_used)
          {
            ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_1,(((RogueType__find_method__String( ic_4, ROGUE_ARG(THIS->signature) )))));
            if (m_1->is_used)
            {
              RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__Int32( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[597] )))), ROGUE_ARG(ic_4->index) )))), Rogue_literal_strings[192] );
              if (!!(THIS->_return_type))
              {
                RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[598] );
                if (((void*)THIS->_return_type) != ((void*)m_1->_return_type))
                {
                  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[80] )))), ROGUE_ARG(THIS->_return_type) )))), Rogue_literal_strings[28] );
                }
              }
              else
              {
                RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[302] );
              }
              RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, ROGUE_ARG(m_1->cpp_name) )))), Rogue_literal_strings[599] )))), ROGUE_ARG(m_1->type_context) )))), Rogue_literal_strings[600] );
              {
                ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_594_5,(THIS->parameters));
                RogueInt32 _auto_595_6 = (0);
                for (;_auto_595_6 < _auto_594_5->count;++_auto_595_6)
                {
                  ROGUE_DEF_LOCAL_REF(RogueClassLocal*,param_7,(((RogueClassLocal*)(_auto_594_5->data->objects[_auto_595_6]))));
                  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[502] )))), ROGUE_ARG(((RogueLocal__cpp_name( param_7 )))) );
                }
              }
              RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[536] );
            }
          }
        }
      }
    }
    if (!!(THIS->_return_type))
    {
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[601] );
      RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print_default_value__Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[598] )))), ROGUE_ARG(THIS->_return_type) )))), Rogue_literal_strings[219] );
    }
    writer_0->indent -= 2;
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[128] );
  }
  else
  {
    if (((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->debug_mode)
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[602] );
      RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[211] )))), ROGUE_ARG(THIS->type_context->name) )))), Rogue_literal_strings[64] )))), ROGUE_ARG(THIS->signature) )))), Rogue_literal_strings[489] );
      RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Int32( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, ROGUE_ARG((RogueFile__filename__String( ROGUE_ARG(THIS->t->filepath) ))) )))), Rogue_literal_strings[192] )))), ROGUE_ARG(THIS->t->line) )))), Rogue_literal_strings[39] );
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[603] );
    }
    RogueCmdStatementList__write_cpp__CPPWriter_Logical( ROGUE_ARG(THIS->statements), writer_0, false );
  }
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[128] );
  RogueCPPWriter__println( writer_0 );
}

RogueClassMethod* RogueMethod__init_object( RogueClassMethod* THIS )
{
  THIS->attributes = ROGUE_CREATE_REF(RogueClassAttributes*,ROGUE_CREATE_OBJECT(Attributes));
  THIS->parameters = ((RogueLocalList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueLocalList*,ROGUE_CREATE_OBJECT(LocalList))) )));
  THIS->locals = ((RogueLocalList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueLocalList*,ROGUE_CREATE_OBJECT(LocalList))) )));
  THIS->statements = ((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )));
  THIS->overriding_methods = ((RogueMethodList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueMethodList*,ROGUE_CREATE_OBJECT(MethodList))) )));
  THIS->label_list = ((RogueCmdLabelList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueCmdLabelList*,ROGUE_CREATE_OBJECT(CmdLabelList))) )));
  THIS->label_lookup = ((RogueString_CmdLabelTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_CmdLabelTable*,ROGUE_CREATE_OBJECT(String_CmdLabelTable))) )));
  return (RogueClassMethod*)(THIS);
}

RogueString* RoguePropertyList__to_String( RoguePropertyList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_596_2,(THIS));
    RogueInt32 _auto_597_3 = (0);
    for (;_auto_597_3 < _auto_596_2->count;++_auto_597_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassProperty*,value_4,(((RogueClassProperty*)(_auto_596_2->data->objects[_auto_597_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG(((RogueProperty__to_String( value_4 )))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RoguePropertyList__type_name( RoguePropertyList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[710]);
}

RoguePropertyList* RoguePropertyList__init_object( RoguePropertyList* THIS )
{
  return (RoguePropertyList*)(THIS);
}

RoguePropertyList* RoguePropertyList__init( RoguePropertyList* THIS )
{
  RoguePropertyList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RoguePropertyList*)(THIS);
}

RoguePropertyList* RoguePropertyList__init__Int32( RoguePropertyList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassProperty*), true );
  }
  return (RoguePropertyList*)(THIS);
}

RoguePropertyList* RoguePropertyList__add__Property( RoguePropertyList* THIS, RogueClassProperty* value_0 )
{
  ((RoguePropertyList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RoguePropertyList*)(THIS);
}

RogueInt32 RoguePropertyList__capacity( RoguePropertyList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RoguePropertyList* RoguePropertyList__clear( RoguePropertyList* THIS )
{
  RoguePropertyList__discard_from__Int32( ROGUE_ARG(THIS), 0 );
  return (RoguePropertyList*)(THIS);
}

void RoguePropertyList__discard_from__Int32( RoguePropertyList* THIS, RogueInt32 index_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassProperty*,zero_value_1,0);
  RogueInt32 c_2 = (THIS->count);
  while (c_2 > index_0)
  {
    --c_2;
    THIS->data->objects[c_2] = zero_value_1;
  }
  THIS->count = c_2;
}

RogueOptionalInt32 RoguePropertyList__locate__Property( RoguePropertyList* THIS, RogueClassProperty* value_0 )
{
  {
    ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_618_1,(THIS));
    RogueInt32 i_2 = (0);
    for (;i_2 < _auto_618_1->count;++i_2)
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)value_0), ROGUE_ARG(((RogueObject*)(((RogueClassProperty*)(THIS->data->objects[i_2]))))) ))))
      {
        return (RogueOptionalInt32)(RogueOptionalInt32( i_2, true ));
      }
    }
  }
  return (RogueOptionalInt32)((RogueOptionalInt32__create()));
}

RoguePropertyList* RoguePropertyList__reserve__Int32( RoguePropertyList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassProperty*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RoguePropertyList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassProperty*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RoguePropertyList*)(THIS);
}

RogueString* RogueProperty__to_String( RogueClassProperty* THIS )
{
  return (RogueString*)(THIS->name);
}

RogueString* RogueProperty__type_name( RogueClassProperty* THIS )
{
  return (RogueString*)(Rogue_literal_strings[643]);
}

RogueClassProperty* RogueProperty__init__Token_Type_String_Type_Cmd( RogueClassProperty* THIS, RogueClassToken* _auto_72_0, RogueClassType* _auto_73_1, RogueString* _auto_74_2, RogueClassType* _auto_75_3, RogueClassCmd* _auto_76_4 )
{
  THIS->initial_value = _auto_76_4;
  THIS->_type = _auto_75_3;
  THIS->name = _auto_74_2;
  RogueProperty__set_type_context__Type( ROGUE_ARG(THIS), _auto_73_1 );
  THIS->t = _auto_72_0;
  return (RogueClassProperty*)(THIS);
}

RogueClassProperty* RogueProperty__clone( RogueClassProperty* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassProperty*,result_0,(((RogueProperty__init__Token_Type_String_Type_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassProperty*,ROGUE_CREATE_OBJECT(Property))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->type_context), ROGUE_ARG(THIS->name), ROGUE_ARG(((RogueClassType*)(NULL))), ROGUE_ARG(((RogueClassCmd*)(NULL))) )))));
  result_0->cpp_name = THIS->cpp_name;
  result_0->_type = THIS->_type;
  result_0->attributes = THIS->attributes;
  if (!!(THIS->initial_value))
  {
    result_0->initial_value = (call_ROGUEM71( 6, ROGUE_ARG(THIS->initial_value), ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) ));
  }
  return (RogueClassProperty*)(result_0);
}

RogueLogical RogueProperty__is_incorporated( RogueClassProperty* THIS )
{
  return (RogueLogical)(!!((THIS->attributes & 8192)));
}

void RogueProperty__mark_incorporated( RogueClassProperty* THIS )
{
  THIS->attributes |= 8192;
}

RogueClassProperty* RogueProperty__set_type_context__Type( RogueClassProperty* THIS, RogueClassType* _auto_77_0 )
{
  THIS->type_context = _auto_77_0;
  return (RogueClassProperty*)(THIS);
}

RogueClassProperty* RogueProperty__init_object( RogueClassProperty* THIS )
{
  return (RogueClassProperty*)(THIS);
}

RogueString* RogueString_MethodListTable__to_String( RogueClassString_MethodListTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueString_MethodListTable__print_to__StringBuilder( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))) )))) ))));
}

RogueString* RogueString_MethodListTable__type_name( RogueClassString_MethodListTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[644]);
}

RogueClassString_MethodListTable* RogueString_MethodListTable__init( RogueClassString_MethodListTable* THIS )
{
  RogueString_MethodListTable__init__Int32( ROGUE_ARG(THIS), 16 );
  return (RogueClassString_MethodListTable*)(THIS);
}

RogueClassString_MethodListTable* RogueString_MethodListTable__init__Int32( RogueClassString_MethodListTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_MethodListTableEntryList__init__Int32_String_MethodListTableEntry( ROGUE_ARG(ROGUE_CREATE_REF(RogueTableEntry_of_String_MethodListList*,ROGUE_CREATE_OBJECT(TableEntry_of_String_MethodListList))), bin_count_0, ROGUE_ARG(((RogueClassString_MethodListTableEntry*)(NULL))) )));
  THIS->keys = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  return (RogueClassString_MethodListTable*)(THIS);
}

void RogueString_MethodListTable__clear( RogueClassString_MethodListTable* THIS )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_String_MethodListList*,_auto_634_0,(THIS->bins));
    RogueInt32 i_1 = (0);
    for (;i_1 < _auto_634_0->count;++i_1)
    {
      THIS->bins->data->objects[i_1] = ((RogueClassString_MethodListTableEntry*)(NULL));
    }
  }
  RogueStringList__clear( ROGUE_ARG(THIS->keys) );
}

RogueClassString_MethodListTableEntry* RogueString_MethodListTable__find__String( RogueClassString_MethodListTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  ROGUE_DEF_LOCAL_REF(RogueClassString_MethodListTableEntry*,entry_2,(((RogueClassString_MethodListTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)]))));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_2->key), key_0 )))))
    {
      return (RogueClassString_MethodListTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_MethodListTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_MethodListTableEntry*)(((RogueClassString_MethodListTableEntry*)(NULL)));
}

RogueMethodList* RogueString_MethodListTable__get__String( RogueClassString_MethodListTable* THIS, RogueString* key_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassString_MethodListTableEntry*,entry_1,(((RogueString_MethodListTable__find__String( ROGUE_ARG(THIS), key_0 )))));
  if (!!(entry_1))
  {
    return (RogueMethodList*)(entry_1->value);
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,default_value_2,0);
    return (RogueMethodList*)(default_value_2);
  }
}

RogueClassString_MethodListTable* RogueString_MethodListTable__set__String_MethodList( RogueClassString_MethodListTable* THIS, RogueString* key_0, RogueMethodList* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  ROGUE_DEF_LOCAL_REF(RogueClassString_MethodListTableEntry*,entry_4,(((RogueClassString_MethodListTableEntry*)(THIS->bins->data->objects[index_3]))));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_4->key), key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_MethodListTable*)(THIS);
    }
    entry_4 = ((RogueClassString_MethodListTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_MethodListTableEntry*)((RogueString_MethodListTableEntry__init__String_MethodList_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_MethodListTableEntry*,ROGUE_CREATE_OBJECT(String_MethodListTableEntry))), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_MethodListTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( ROGUE_ARG(THIS->keys), key_0 );
  return (RogueClassString_MethodListTable*)(THIS);
}

RogueStringBuilder* RogueString_MethodListTable__print_to__StringBuilder( RogueClassString_MethodListTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    ROGUE_DEF_LOCAL_REF(RogueString*,key_2,(((RogueString*)(THIS->keys->data->objects[i_1]))));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ROGUE_ARG(((RogueObject*)(((RogueString_MethodListTable__get__String( ROGUE_ARG(THIS), key_2 )))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_MethodListTable* RogueString_MethodListTable__init_object( RogueClassString_MethodListTable* THIS )
{
  return (RogueClassString_MethodListTable*)(THIS);
}

RogueString* RogueTypeList__to_String( RogueTypeList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_635_2,(THIS));
    RogueInt32 _auto_636_3 = (0);
    for (;_auto_636_3 < _auto_635_2->count;++_auto_636_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,value_4,(((RogueClassType*)(_auto_635_2->data->objects[_auto_636_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG(((RogueType__to_String( value_4 )))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueTypeList__type_name( RogueTypeList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[711]);
}

RogueTypeList* RogueTypeList__init_object( RogueTypeList* THIS )
{
  return (RogueTypeList*)(THIS);
}

RogueTypeList* RogueTypeList__init( RogueTypeList* THIS )
{
  RogueTypeList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueTypeList*)(THIS);
}

RogueTypeList* RogueTypeList__init__Int32( RogueTypeList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassType*), true );
  }
  return (RogueTypeList*)(THIS);
}

RogueTypeList* RogueTypeList__add__Type( RogueTypeList* THIS, RogueClassType* value_0 )
{
  ((RogueTypeList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTypeList*)(THIS);
}

RogueInt32 RogueTypeList__capacity( RogueTypeList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTypeList* RogueTypeList__choose__Function_Type_RETURNSLogical( RogueTypeList* THIS, RogueClassFunction_Type_RETURNSLogical* fn_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueTypeList*,result_1,(((RogueTypeList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueTypeList*,ROGUE_CREATE_OBJECT(TypeList))), ROGUE_ARG(THIS->count) )))));
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_643_2,(THIS));
    RogueInt32 _auto_644_3 = (0);
    for (;_auto_644_3 < _auto_643_2->count;++_auto_644_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,value_4,(((RogueClassType*)(_auto_643_2->data->objects[_auto_644_3]))));
      if ((call_ROGUEM103( 3, fn_0, value_4 )))
      {
        RogueTypeList__add__Type( result_1, value_4 );
      }
    }
  }
  return (RogueTypeList*)(result_1);
}

RogueTypeList* RogueTypeList__clear( RogueTypeList* THIS )
{
  RogueTypeList__discard_from__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueTypeList*)(THIS);
}

void RogueTypeList__discard_from__Int32( RogueTypeList* THIS, RogueInt32 index_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassType*,zero_value_1,0);
  RogueInt32 c_2 = (THIS->count);
  while (c_2 > index_0)
  {
    --c_2;
    THIS->data->objects[c_2] = zero_value_1;
  }
  THIS->count = c_2;
}

RogueTypeList* RogueTypeList__insert__Type_Int32( RogueTypeList* THIS, RogueClassType* value_0, RogueInt32 before_index_1 )
{
  if (before_index_1 < 0)
  {
    before_index_1 = ((RogueInt32)0);
  }
  if (before_index_1 >= THIS->count)
  {
    return (RogueTypeList*)(((RogueTypeList__add__Type( ROGUE_ARG(THIS), value_0 ))));
  }
  else
  {
    RogueTypeList__reserve__Int32( ROGUE_ARG(THIS), 1 );
    RogueArray_set(THIS->data,(before_index_1 + 1),((RogueArray*)(THIS->data)),before_index_1,(THIS->count - before_index_1));
    ++THIS->count;
    THIS->data->objects[before_index_1] = value_0;
  }
  return (RogueTypeList*)(THIS);
}

RogueOptionalInt32 RogueTypeList__locate__Type( RogueTypeList* THIS, RogueClassType* value_0 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_657_1,(THIS));
    RogueInt32 i_2 = (0);
    for (;i_2 < _auto_657_1->count;++i_2)
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)value_0), ROGUE_ARG(((RogueObject*)(((RogueClassType*)(THIS->data->objects[i_2]))))) ))))
      {
        return (RogueOptionalInt32)(RogueOptionalInt32( i_2, true ));
      }
    }
  }
  return (RogueOptionalInt32)((RogueOptionalInt32__create()));
}

RogueTypeList* RogueTypeList__reserve__Int32( RogueTypeList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassType*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueTypeList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassType*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTypeList*)(THIS);
}

RogueClassType* RogueTypeList__remove__Type( RogueTypeList* THIS, RogueClassType* value_0 )
{
  RogueOptionalInt32 index_1 = (((RogueTypeList__locate__Type( ROGUE_ARG(THIS), value_0 ))));
  if (index_1.exists)
  {
    return (RogueClassType*)(((RogueTypeList__remove_at__Int32( ROGUE_ARG(THIS), ROGUE_ARG(index_1.value) ))));
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassType*,zero_value_2,0);
    return (RogueClassType*)(zero_value_2);
  }
}

RogueClassType* RogueTypeList__remove_at__Int32( RogueTypeList* THIS, RogueInt32 index_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassType*,result_1,(((RogueClassType*)(THIS->data->objects[index_0]))));
  RogueArray_set(THIS->data,index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  ROGUE_DEF_LOCAL_REF(RogueClassType*,zero_value_2,0);
  --THIS->count;
  THIS->data->objects[THIS->count] = zero_value_2;
  return (RogueClassType*)(result_1);
}

RogueTypeList* RogueTypeList__swap__Int32_Int32( RogueTypeList* THIS, RogueInt32 i1_0, RogueInt32 i2_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassType*,temp_2,(((RogueClassType*)(THIS->data->objects[i1_0]))));
  THIS->data->objects[i1_0] = ((RogueClassType*)(THIS->data->objects[i2_1]));
  THIS->data->objects[i2_1] = temp_2;
  return (RogueTypeList*)(THIS);
}

RogueString* RogueType__to_String( RogueClassType* THIS )
{
  return (RogueString*)(THIS->name);
}

RogueString* RogueType__type_name( RogueClassType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[645]);
}

RogueClassType* RogueType__init__Token_String( RogueClassType* THIS, RogueClassToken* _auto_83_0, RogueString* _auto_84_1 )
{
  THIS->name = _auto_84_1;
  THIS->t = _auto_83_0;
  return (RogueClassType*)(THIS);
}

RogueClassMethod* RogueType__add_method__Token_String( RogueClassType* THIS, RogueClassToken* m_t_0, RogueString* m_name_1 )
{
  return (RogueClassMethod*)(((RogueType__add_method__Method( ROGUE_ARG(THIS), ROGUE_ARG(((RogueMethod__init__Token_Type_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassMethod*,ROGUE_CREATE_OBJECT(Method))), m_t_0, ROGUE_ARG(THIS), m_name_1 )))) ))));
}

RogueClassMethod* RogueType__add_method__Method( RogueClassType* THIS, RogueClassMethod* m_0 )
{
  RogueMethodList__add__Method( ROGUE_ARG(THIS->method_list), m_0 );
  ROGUE_DEF_LOCAL_REF(RogueMethodList*,list_1,(((RogueString_MethodListTable__get__String( ROGUE_ARG(THIS->method_lookup_by_name), ROGUE_ARG(m_0->name) )))));
  if (!(!!(list_1)))
  {
    list_1 = ((RogueMethodList*)((RogueMethodList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueMethodList*,ROGUE_CREATE_OBJECT(MethodList))) ))));
    RogueString_MethodListTable__set__String_MethodList( ROGUE_ARG(THIS->method_lookup_by_name), ROGUE_ARG(m_0->name), list_1 );
  }
  RogueMethodList__add__Method( list_1, m_0 );
  return (RogueClassMethod*)(m_0);
}

RogueClassMethod* RogueType__add_global_method__Token_String( RogueClassType* THIS, RogueClassToken* r_t_0, RogueString* r_name_1 )
{
  return (RogueClassMethod*)(((RogueType__add_global_method__Method( ROGUE_ARG(THIS), ROGUE_ARG(((RogueMethod__init__Token_Type_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassMethod*,ROGUE_CREATE_OBJECT(Method))), r_t_0, ROGUE_ARG(THIS), r_name_1 )))) ))));
}

RogueClassMethod* RogueType__add_global_method__Method( RogueClassType* THIS, RogueClassMethod* r_0 )
{
  RogueAttributes__add__Int32( ROGUE_ARG(r_0->attributes), 512 );
  RogueMethodList__add__Method( ROGUE_ARG(THIS->global_method_list), r_0 );
  ROGUE_DEF_LOCAL_REF(RogueMethodList*,list_1,(((RogueString_MethodListTable__get__String( ROGUE_ARG(THIS->global_method_lookup_by_name), ROGUE_ARG(r_0->name) )))));
  if (!(!!(list_1)))
  {
    list_1 = ((RogueMethodList*)((RogueMethodList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueMethodList*,ROGUE_CREATE_OBJECT(MethodList))) ))));
    RogueString_MethodListTable__set__String_MethodList( ROGUE_ARG(THIS->global_method_lookup_by_name), ROGUE_ARG(r_0->name), list_1 );
  }
  RogueMethodList__add__Method( list_1, r_0 );
  return (RogueClassMethod*)(r_0);
}

RogueClassProperty* RogueType__add_global__Token_String( RogueClassType* THIS, RogueClassToken* s_t_0, RogueString* s_name_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassProperty*,s_2,(((RogueProperty__init__Token_Type_String_Type_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassProperty*,ROGUE_CREATE_OBJECT(Property))), s_t_0, ROGUE_ARG(THIS), s_name_1, ROGUE_ARG(((RogueClassType*)(NULL))), ROGUE_ARG(((RogueClassCmd*)(NULL))) )))));
  RoguePropertyList__add__Property( ROGUE_ARG(THIS->global_list), s_2 );
  RogueString_PropertyTable__set__String_Property( ROGUE_ARG(THIS->global_lookup), s_name_1, s_2 );
  return (RogueClassProperty*)(s_2);
}

RogueClassProperty* RogueType__add_property__Token_String_Type_Cmd( RogueClassType* THIS, RogueClassToken* p_t_0, RogueString* p_name_1, RogueClassType* p_type_2, RogueClassCmd* initial_value_3 )
{
  return (RogueClassProperty*)(((RogueType__add_property__Property( ROGUE_ARG(THIS), ROGUE_ARG(((RogueProperty__init__Token_Type_String_Type_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassProperty*,ROGUE_CREATE_OBJECT(Property))), p_t_0, ROGUE_ARG(THIS), p_name_1, p_type_2, initial_value_3 )))) ))));
}

RogueClassProperty* RogueType__add_property__Property( RogueClassType* THIS, RogueClassProperty* p_0 )
{
  RoguePropertyList__add__Property( ROGUE_ARG(THIS->property_list), p_0 );
  RogueString_PropertyTable__set__String_Property( ROGUE_ARG(THIS->property_lookup), ROGUE_ARG(p_0->name), p_0 );
  return (RogueClassProperty*)(p_0);
}

void RogueType__collect_type_info__Int32List( RogueClassType* THIS, RogueInt32List* info_0 )
{
  RogueInt32List__add__Int32( info_0, 0 );
  if (((RogueType__is_primitive( ROGUE_ARG(THIS) ))))
  {
    RogueInt32List__add__Int32( info_0, 0 );
  }
  else
  {
    RogueInt32List__add__Int32( info_0, ROGUE_ARG(THIS->dynamic_method_table_index) );
  }
  RogueInt32List__add__Int32( info_0, ROGUE_ARG(THIS->base_types->count) );
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_681_1,(THIS->base_types));
    RogueInt32 _auto_682_2 = (0);
    for (;_auto_682_2 < _auto_681_1->count;++_auto_682_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,base_type_3,(((RogueClassType*)(_auto_681_1->data->objects[_auto_682_2]))));
      RogueInt32List__add__Int32( info_0, ROGUE_ARG(base_type_3->index) );
    }
  }
}

RogueClassCmd* RogueType__create_default_value__Token( RogueClassType* THIS, RogueClassToken* _t_0 )
{
  if (((RogueType__is_reference( ROGUE_ARG(THIS) ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralNull__init__Token( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralNull*,ROGUE_CREATE_OBJECT(CmdLiteralNull))), _t_0 ))))));
  }
  if (((RogueType__is_compound( ROGUE_ARG(THIS) ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateCompound__init__Token_Type_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCreateCompound*,ROGUE_CREATE_OBJECT(CmdCreateCompound))), _t_0, ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmdArgs*)(NULL))) ))))));
  }
  if (((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), _t_0, false ))))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), _t_0, 0 ))))));
}

RogueClassMethod* RogueType__find_method__String( RogueClassType* THIS, RogueString* signature_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_1,(((RogueString_MethodTable__get__String( ROGUE_ARG(THIS->method_lookup_by_signature), signature_0 )))));
  if (!!(m_1))
  {
    return (RogueClassMethod*)(m_1);
  }
  return (RogueClassMethod*)(((RogueType__find_routine__String( ROGUE_ARG(THIS), signature_0 ))));
}

RogueClassMethod* RogueType__find_routine__String( RogueClassType* THIS, RogueString* signature_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_1,(((RogueString_MethodTable__get__String( ROGUE_ARG(THIS->routine_lookup_by_signature), signature_0 )))));
  if (!!(m_1))
  {
    return (RogueClassMethod*)(m_1);
  }
  return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
}

RogueClassProperty* RogueType__find_property__String( RogueClassType* THIS, RogueString* p_name_0 )
{
  if (p_name_0->characters[0] == (RogueCharacter)'@')
  {
    p_name_0 = ((RogueString*)((RogueString__rightmost__Int32( p_name_0, -1 ))));
  }
  return (RogueClassProperty*)(((RogueString_PropertyTable__get__String( ROGUE_ARG(THIS->property_lookup), p_name_0 ))));
}

RogueClassProperty* RogueType__find_global__String( RogueClassType* THIS, RogueString* s_name_0 )
{
  if (s_name_0->characters[0] == (RogueCharacter)'@')
  {
    s_name_0 = ((RogueString*)((RogueString__rightmost__Int32( s_name_0, -1 ))));
  }
  return (RogueClassProperty*)(((RogueString_PropertyTable__get__String( ROGUE_ARG(THIS->global_lookup), s_name_0 ))));
}

RogueLogical RogueType__has_method_named__String( RogueClassType* THIS, RogueString* m_name_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueMethodList*,list_1,(((RogueString_MethodListTable__get__String( ROGUE_ARG(THIS->method_lookup_by_name), m_name_0 )))));
  return (RogueLogical)((!!(list_1) && !!(list_1->count)));
}

RogueLogical RogueType__has_routine_named__String( RogueClassType* THIS, RogueString* r_name_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueMethodList*,list_1,(((RogueString_MethodListTable__get__String( ROGUE_ARG(THIS->global_method_lookup_by_name), r_name_0 )))));
  return (RogueLogical)((!!(list_1) && !!(list_1->count)));
}

RogueLogical RogueType__instance_of__Type( RogueClassType* THIS, RogueClassType* ancestor_type_0 )
{
  if (((void*)THIS) == ((void*)ancestor_type_0))
  {
    return (RogueLogical)(true);
  }
  if ((((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_null) && ((RogueType__is_reference( ancestor_type_0 )))))
  {
    return (RogueLogical)(true);
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_689_1,(THIS->base_types));
    RogueInt32 _auto_690_2 = (0);
    for (;_auto_690_2 < _auto_689_1->count;++_auto_690_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,base_type_3,(((RogueClassType*)(_auto_689_1->data->objects[_auto_690_2]))));
      if (((RogueType__instance_of__Type( base_type_3, ancestor_type_0 ))))
      {
        return (RogueLogical)(true);
      }
    }
  }
  return (RogueLogical)(false);
}

RogueLogical RogueType__is_compatible_with__Type( RogueClassType* THIS, RogueClassType* other_0 )
{
  if (((void*)THIS) == ((void*)other_0))
  {
    return (RogueLogical)(true);
  }
  if ((((RogueType__is_primitive( ROGUE_ARG(THIS) ))) && ((RogueType__is_primitive( other_0 )))))
  {
    if ((((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical) ^ ((void*)other_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)))
    {
      return (RogueLogical)(false);
    }
    return (RogueLogical)(true);
  }
  if ((other_0->is_optional && ((void*)other_0->_element_type) == ((void*)THIS)))
  {
    return (RogueLogical)(true);
  }
  return (RogueLogical)(((RogueType__instance_of__Type( ROGUE_ARG(THIS), other_0 ))));
}

RogueLogical RogueType__is_equivalent_or_more_specific_than__Type( RogueClassType* THIS, RogueClassType* other_0 )
{
  if (((void*)THIS) == ((void*)other_0))
  {
    return (RogueLogical)(true);
  }
  if ((((RogueType__is_primitive( ROGUE_ARG(THIS) ))) && ((RogueType__is_primitive( other_0 )))))
  {
    return (RogueLogical)(((RogueType__primitive_rank( ROGUE_ARG(THIS) ))) >= ((RogueType__primitive_rank( other_0 ))));
  }
  if (((RogueType__instance_of__Type( ROGUE_ARG(THIS), other_0 ))))
  {
    return (RogueLogical)(true);
  }
  if ((other_0->is_list && ((void*)other_0->_element_type) == ((void*)THIS)))
  {
    return (RogueLogical)(true);
  }
  return (RogueLogical)(false);
}

RogueLogical RogueType__is_aspect( RogueClassType* THIS )
{
  return (RogueLogical)((THIS->attributes->flags & 7) == 2);
}

RogueLogical RogueType__is_class( RogueClassType* THIS )
{
  return (RogueLogical)((THIS->attributes->flags & 7) == 0);
}

RogueLogical RogueType__is_compound( RogueClassType* THIS )
{
  return (RogueLogical)((THIS->attributes->flags & 7) == 3);
}

RogueLogical RogueType__is_foreign( RogueClassType* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 16)));
}

RogueLogical RogueType__is_native( RogueClassType* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 32)));
}

RogueLogical RogueType__is_primitive( RogueClassType* THIS )
{
  return (RogueLogical)((THIS->attributes->flags & 7) == 1);
}

RogueLogical RogueType__is_reference( RogueClassType* THIS )
{
  switch ((THIS->attributes->flags & 7))
  {
    case 0:
    case 2:
    {
      return (RogueLogical)(true);
      break;
    }
    default:
    {
      return (RogueLogical)(false);
    }
  }
}

RogueLogical RogueType__is_requisite( RogueClassType* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 32768)));
}

RogueLogical RogueType__is_routine( RogueClassType* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 1048576)));
}

RogueLogical RogueType__is_singleton( RogueClassType* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 1024)));
}

RogueClassType* RogueType__make_requisite( RogueClassType* THIS )
{
  RogueAttributes__add__Int32( ROGUE_ARG(THIS->attributes), 32768 );
  return (RogueClassType*)(THIS);
}

RogueClassType* RogueType__organize__Scope( RogueClassType* THIS, RogueClassScope* scope_0 )
{
  if (THIS->organized)
  {
    return (RogueClassType*)(THIS);
  }
  THIS->organized = true;
  THIS->index = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_list->count;
  RogueTypeList__add__Type( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_list), ROGUE_ARG(THIS) );
  if (!(THIS->defined))
  {
    THIS->defined = true;
    ROGUE_DEF_LOCAL_REF(RogueClassTemplate*,template_1,(((RogueProgram__find_template__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(THIS->name) )))));
    if (!!(template_1))
    {
      RogueTemplate__instantiate__Type_Scope( template_1, ROGUE_ARG(THIS), scope_0 );
    }
    else
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[370] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->name) )))) )))), Rogue_literal_strings[34] )))) )))) ))));
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_691_22,(THIS->base_types));
    RogueInt32 _auto_692_23 = (0);
    for (;_auto_692_23 < _auto_691_22->count;++_auto_692_23)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,base_type_24,(((RogueClassType*)(_auto_691_22->data->objects[_auto_692_23]))));
      RogueType__organize__Scope( base_type_24, scope_0 );
      if (!(((RogueType__is_aspect( base_type_24 )))))
      {
        if (((RogueType__is_aspect( ROGUE_ARG(THIS) ))))
        {
          ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[371] ))));
        }
        else if (((RogueType__is_compound( ROGUE_ARG(THIS) ))))
        {
          ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[372] ))));
        }
      }
      if (((RogueType__instance_of__Type( base_type_24, ROGUE_ARG(THIS) ))))
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[373] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(THIS))) )))) )))), Rogue_literal_strings[374] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(base_type_24))) )))) )))), Rogue_literal_strings[375] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(base_type_24))) )))) )))), Rogue_literal_strings[376] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(THIS))) )))) )))), Rogue_literal_strings[64] )))) )))) ))));
      }
    }
  }
  if (((RogueType__is_class( ROGUE_ARG(THIS) ))))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_693_25,(THIS->base_types));
      RogueInt32 _auto_694_26 = (0);
      for (;_auto_694_26 < _auto_693_25->count;++_auto_694_26)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassType*,base_type_27,(((RogueClassType*)(_auto_693_25->data->objects[_auto_694_26]))));
        if (((RogueType__is_class( base_type_27 ))))
        {
          if ((!!(THIS->base_class) && ((void*)THIS->base_class) != ((void*)base_type_27)))
          {
            ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[377] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->name) )))) )))), Rogue_literal_strings[378] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(THIS->base_class))) )))) )))), Rogue_literal_strings[379] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(base_type_27))) )))) )))), Rogue_literal_strings[380] )))) )))) ))));
          }
          else
          {
            THIS->base_class = base_type_27;
          }
        }
      }
    }
    if (((!(!!(THIS->base_class)) && !(((RogueType__is_foreign( ROGUE_ARG(THIS) ))))) && ((void*)THIS) != ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object)))
    {
      RogueType__organize__Scope( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object), ROGUE_ARG(((RogueClassScope*)(NULL))) );
      THIS->base_class = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object;
      RogueTypeList__insert__Type_Int32( ROGUE_ARG(THIS->base_types), ROGUE_ARG(THIS->base_class), 0 );
    }
  }
  if (!!(THIS->base_class))
  {
    RogueTypeList__insert__Type_Int32( ROGUE_ARG(THIS->base_types), ROGUE_ARG(((RogueTypeList__remove__Type( ROGUE_ARG(THIS->base_types), ROGUE_ARG(THIS->base_class) )))), 0 );
  }
  RogueTypeList__clear( ROGUE_ARG(THIS->flat_base_types) );
  if (!!(THIS->base_class))
  {
    RogueType__collect_base_types__TypeList( ROGUE_ARG(THIS->base_class), ROGUE_ARG(THIS->flat_base_types) );
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_695_28,(THIS->base_types));
    RogueInt32 _auto_696_29 = (0);
    for (;_auto_696_29 < _auto_695_28->count;++_auto_696_29)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,base_type_30,(((RogueClassType*)(_auto_695_28->data->objects[_auto_696_29]))));
      RogueType__collect_base_types__TypeList( base_type_30, ROGUE_ARG(THIS->flat_base_types) );
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_697_31,(THIS->base_types));
    RogueInt32 _auto_698_32 = (0);
    for (;_auto_698_32 < _auto_697_31->count;++_auto_698_32)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,base_type_33,(((RogueClassType*)(_auto_697_31->data->objects[_auto_698_32]))));
      RogueType__inherit_definitions__Type( ROGUE_ARG(THIS), base_type_33 );
    }
  }
  ROGUE_DEF_LOCAL_REF(RoguePropertyList*,full_property_list_2,(((RoguePropertyList__init( ROGUE_ARG(ROGUE_CREATE_REF(RoguePropertyList*,ROGUE_CREATE_OBJECT(PropertyList))) )))));
  RogueString_PropertyTable__clear( ROGUE_ARG(THIS->property_lookup) );
  RogueType__inherit_properties__PropertyList_String_PropertyTable( ROGUE_ARG(THIS), full_property_list_2, ROGUE_ARG(THIS->property_lookup) );
  THIS->property_list = full_property_list_2;
  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_type_name_3,(((RogueType__add_method__Token_String( ROGUE_ARG(THIS), ROGUE_ARG(THIS->t), Rogue_literal_strings[388] )))));
  m_type_name_3->_return_type = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String;
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)m_type_name_3->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReturn*,ROGUE_CREATE_OBJECT(CmdReturn))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralString*,ROGUE_CREATE_OBJECT(CmdLiteralString))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->name), 0 )))))) )))))) );
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_702_34,(THIS->global_method_list));
    RogueInt32 _auto_703_35 = (0);
    for (;_auto_703_35 < _auto_702_34->count;++_auto_703_35)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,r_36,(((RogueClassMethod*)(_auto_702_34->data->objects[_auto_703_35]))));
      RogueMethod__organize__Scope_Logical( r_36, scope_0, true );
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_704_37,(THIS->method_list));
    RogueInt32 _auto_705_38 = (0);
    for (;_auto_705_38 < _auto_704_37->count;++_auto_705_38)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_39,(((RogueClassMethod*)(_auto_704_37->data->objects[_auto_705_38]))));
      RogueMethod__organize__Scope_Logical( m_39, scope_0, true );
    }
  }
  ROGUE_DEF_LOCAL_REF(RogueMethodList*,full_routine_list_4,(((RogueMethodList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueMethodList*,ROGUE_CREATE_OBJECT(MethodList))) )))));
  RogueString_MethodTable__clear( ROGUE_ARG(THIS->routine_lookup_by_signature) );
  RogueType__inherit_routines__MethodList_String_MethodTable( ROGUE_ARG(THIS), full_routine_list_4, ROGUE_ARG(THIS->routine_lookup_by_signature) );
  THIS->global_method_list = full_routine_list_4;
  RogueString_MethodListTable__clear( ROGUE_ARG(THIS->global_method_lookup_by_name) );
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_706_40,(THIS->global_method_list));
    RogueInt32 _auto_707_41 = (0);
    for (;_auto_707_41 < _auto_706_40->count;++_auto_707_41)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,r_42,(((RogueClassMethod*)(_auto_706_40->data->objects[_auto_707_41]))));
      ROGUE_DEF_LOCAL_REF(RogueMethodList*,list_5,(((RogueString_MethodListTable__get__String( ROGUE_ARG(THIS->global_method_lookup_by_name), ROGUE_ARG(r_42->name) )))));
      if (!(!!(list_5)))
      {
        list_5 = ((RogueMethodList*)((RogueMethodList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueMethodList*,ROGUE_CREATE_OBJECT(MethodList))) ))));
        RogueString_MethodListTable__set__String_MethodList( ROGUE_ARG(THIS->global_method_lookup_by_name), ROGUE_ARG(r_42->name), list_5 );
      }
      RogueMethodList__add__Method( list_5, r_42 );
    }
  }
  ROGUE_DEF_LOCAL_REF(RogueMethodList*,full_method_list_6,(((RogueMethodList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueMethodList*,ROGUE_CREATE_OBJECT(MethodList))) )))));
  RogueString_MethodTable__clear( ROGUE_ARG(THIS->method_lookup_by_signature) );
  RogueType__inherit_methods__MethodList_String_MethodTable( ROGUE_ARG(THIS), full_method_list_6, ROGUE_ARG(THIS->method_lookup_by_signature) );
  THIS->method_list = full_method_list_6;
  RogueString_MethodListTable__clear( ROGUE_ARG(THIS->method_lookup_by_name) );
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_708_43,(THIS->method_list));
    RogueInt32 _auto_709_44 = (0);
    for (;_auto_709_44 < _auto_708_43->count;++_auto_709_44)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_45,(((RogueClassMethod*)(_auto_708_43->data->objects[_auto_709_44]))));
      ROGUE_DEF_LOCAL_REF(RogueMethodList*,list_7,(((RogueString_MethodListTable__get__String( ROGUE_ARG(THIS->method_lookup_by_name), ROGUE_ARG(m_45->name) )))));
      if (!(!!(list_7)))
      {
        list_7 = ((RogueMethodList*)((RogueMethodList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueMethodList*,ROGUE_CREATE_OBJECT(MethodList))) ))));
        RogueString_MethodListTable__set__String_MethodList( ROGUE_ARG(THIS->method_lookup_by_name), ROGUE_ARG(m_45->name), list_7 );
      }
      RogueMethodList__add__Method( list_7, m_45 );
    }
  }
  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_init_class_8,(((RogueType__find_routine__String( ROGUE_ARG(THIS), Rogue_literal_strings[407] )))));
  if (!!(m_init_class_8))
  {
    if (((void*)m_init_class_8->type_context) == ((void*)THIS))
    {
      RogueMethod__make_requisite( m_init_class_8 );
    }
  }
  else
  {
    m_init_class_8 = ((RogueClassMethod*)((RogueType__find_method__String( ROGUE_ARG(THIS), Rogue_literal_strings[407] ))));
    if (!!(m_init_class_8))
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(m_init_class_8->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->name) )))) )))), Rogue_literal_strings[408] )))) )))) ))));
    }
  }
  if ((!!(THIS->global_list->count) && !(((RogueType__is_native( ROGUE_ARG(THIS) ))))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_9,(((RogueType__find_routine__String( ROGUE_ARG(THIS), Rogue_literal_strings[407] )))));
    if ((!(!!(m_9)) || ((void*)m_9->type_context) != ((void*)THIS)))
    {
      m_9 = ((RogueClassMethod*)((RogueMethod__organize__Scope_Logical( ROGUE_ARG(((RogueType__add_global_method__Token_String( ROGUE_ARG(THIS), ROGUE_ARG(THIS->t), Rogue_literal_strings[409] )))), scope_0, true ))));
    }
    RogueMethod__make_requisite( m_9 );
    RogueInt32 i_10 = ((THIS->global_list->count - 1));
    while (i_10 >= 0)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassProperty*,s_11,(((RogueClassProperty*)(THIS->global_list->data->objects[i_10]))));
      if (!!(s_11->initial_value))
      {
        RogueCmdList__insert__Cmd_Int32( ROGUE_ARG(((RogueCmdList*)m_9->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdWriteGlobal__init__Token_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteGlobal*,ROGUE_CREATE_OBJECT(CmdWriteGlobal))), ROGUE_ARG(s_11->t), s_11, ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(s_11->initial_value), ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) ))) )))))), 0 );
      }
      --i_10;
    }
  }
  if ((((RogueType__is_class( ROGUE_ARG(THIS) ))) && !(((RogueType__is_native( ROGUE_ARG(THIS) ))))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_12,(((RogueType__find_method__String( ROGUE_ARG(THIS), Rogue_literal_strings[410] )))));
    ROGUE_DEF_LOCAL_REF(RogueClassMethod*,prior_m_13,(m_12));
    if ((!!(m_12) && ((void*)m_12->type_context) == ((void*)THIS)))
    {
      RogueMethod__make_requisite( m_12 );
    }
    else
    {
      m_12 = ((RogueClassMethod*)((RogueMethod__organize__Scope_Logical( ROGUE_ARG(((RogueType__add_method__Token_String( ROGUE_ARG(THIS), ROGUE_ARG(THIS->t), Rogue_literal_strings[411] )))), scope_0, true ))));
      RogueMethod__make_requisite( m_12 );
      if (!!(prior_m_13))
      {
        RogueAttributes__add__Int32( ROGUE_ARG(prior_m_13->attributes), 2048 );
        RogueAttributes__add__Int32( ROGUE_ARG(prior_m_13->attributes), 4096 );
        RogueAttributes__add__Int32( ROGUE_ARG(m_12->attributes), 2048 );
        RogueMethodList__remove__Method( ROGUE_ARG(THIS->method_list), m_12 );
        THIS->method_list->data->objects[((RogueMethodList__locate__Method( ROGUE_ARG(THIS->method_list), prior_m_13 ))).value] = m_12;
      }
    }
    m_12->_return_type = THIS;
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)m_12->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReturn*,ROGUE_CREATE_OBJECT(CmdReturn))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdLiteralThis*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(((RogueClassCmdThisContext*)ROGUE_CREATE_REF(RogueClassCmdLiteralThis*,ROGUE_CREATE_OBJECT(CmdLiteralThis)))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS) )))))))) )))))) );
    RogueInt32 i_14 = ((THIS->property_list->count - 1));
    while (i_14 >= 0)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_15,(((RogueClassProperty*)(THIS->property_list->data->objects[i_14]))));
      if (!!(p_15->initial_value))
      {
        RogueCmdList__insert__Cmd_Int32( ROGUE_ARG(((RogueCmdList*)m_12->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteProperty*,ROGUE_CREATE_OBJECT(CmdWriteProperty))), ROGUE_ARG(p_15->t), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdLiteralThis*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(((RogueClassCmdThisContext*)ROGUE_CREATE_REF(RogueClassCmdLiteralThis*,ROGUE_CREATE_OBJECT(CmdLiteralThis)))), ROGUE_ARG(p_15->t), ROGUE_ARG(p_15->type_context) )))))))), p_15, ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(p_15->initial_value), ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) ))) )))))), 0 );
      }
      --i_14;
    }
  }
  if ((((RogueType__is_class( ROGUE_ARG(THIS) ))) && !(((RogueType__is_native( ROGUE_ARG(THIS) ))))))
  {
    if (((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(THIS->name), Rogue_literal_strings[412] ))))
    {
      RogueGlobal__println( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)) );
    }
    ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_16,(((RogueType__find_method__String( ROGUE_ARG(THIS), Rogue_literal_strings[413] )))));
    if ((!!(m_16) && ((void*)m_16->type_context) == ((void*)THIS)))
    {
      if (!!(m_16->_return_type))
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(m_16->t), Rogue_literal_strings[414] ))));
      }
      RogueMethod__make_requisite( m_16 );
    }
  }
  if (((((RogueType__is_compound( ROGUE_ARG(THIS) ))) || ((RogueType__is_primitive( ROGUE_ARG(THIS) )))) || ((RogueType__is_foreign( ROGUE_ARG(THIS) )))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_17,(((RogueType__find_method__String( ROGUE_ARG(THIS), Rogue_literal_strings[415] )))));
    if (!(!!(m_17)))
    {
      m_17 = ((RogueClassMethod*)((RogueType__add_method__Token_String( ROGUE_ARG(THIS), ROGUE_ARG(THIS->t), Rogue_literal_strings[416] ))));
      m_17->_return_type = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String;
      RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)m_17->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReturn*,ROGUE_CREATE_OBJECT(CmdReturn))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralString*,ROGUE_CREATE_OBJECT(CmdLiteralString))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[80] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->name) )))) )))), Rogue_literal_strings[28] )))) )))), 0 )))))) )))))) );
      RogueMethod__organize__Scope_Logical( m_17, scope_0, true );
    }
  }
  if (((((RogueType__is_compound( ROGUE_ARG(THIS) ))) || ((RogueType__is_primitive( ROGUE_ARG(THIS) )))) || ((RogueType__is_foreign( ROGUE_ARG(THIS) )))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_18,(((RogueType__find_method__String( ROGUE_ARG(THIS), Rogue_literal_strings[417] )))));
    if (!(!!(m_18)))
    {
      m_18 = ((RogueClassMethod*)((RogueType__add_method__Token_String( ROGUE_ARG(THIS), ROGUE_ARG(THIS->t), Rogue_literal_strings[418] ))));
      ROGUE_DEF_LOCAL_REF(RogueString*,boxed_name_19,(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[419] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->name) )))) )))), Rogue_literal_strings[130] )))) )))));
      m_18->_return_type = ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(THIS->t), boxed_name_19 )));
      RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)m_18->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReturn*,ROGUE_CREATE_OBJECT(CmdReturn))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), boxed_name_19, ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdLiteralThis*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(((RogueClassCmdThisContext*)ROGUE_CREATE_REF(RogueClassCmdLiteralThis*,ROGUE_CREATE_OBJECT(CmdLiteralThis)))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS) )))))))) )))) )))))) )))))) );
      RogueMethod__organize__Scope_Logical( m_18, scope_0, true );
    }
  }
  if (((void*)THIS) != ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_NativeArray))
  {
    THIS->is_array = ((RogueType__instance_of__Type( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_NativeArray) )));
    if (THIS->is_array)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,cur_type_20,(THIS));
      while (!(((RogueString__begins_with__String( ROGUE_ARG(cur_type_20->name), Rogue_literal_strings[421] )))))
      {
        cur_type_20 = ((RogueClassType*)cur_type_20->base_class);
        if (((void*)cur_type_20) == ((void*)NULL))
        {
          ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[420] ))));
        }
      }
      ROGUE_DEF_LOCAL_REF(RogueString*,element_type_name_21,(((RogueString__before_last__String( ROGUE_ARG(((RogueString__after_first__String( ROGUE_ARG(cur_type_20->name), Rogue_literal_strings[212] )))), Rogue_literal_strings[130] )))));
      THIS->_element_type = ((RogueType__organize__Scope( ROGUE_ARG(((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(THIS->t), element_type_name_21 )))), scope_0 )));
    }
  }
  RogueType__index_and_move_inline_to_end__MethodList( ROGUE_ARG(THIS), ROGUE_ARG(THIS->global_method_list) );
  RogueType__index_and_move_inline_to_end__MethodList( ROGUE_ARG(THIS), ROGUE_ARG(THIS->method_list) );
  return (RogueClassType*)(THIS);
}

RogueInt32 RogueType__primitive_rank( RogueClassType* THIS )
{
  if (((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueInt32)(7);
  }
  if (((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real32))
  {
    return (RogueInt32)(6);
  }
  if (((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int64))
  {
    return (RogueInt32)(5);
  }
  if (((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueInt32)(4);
  }
  if (((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character))
  {
    return (RogueInt32)(3);
  }
  if (((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte))
  {
    return (RogueInt32)(2);
  }
  if (((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))
  {
    return (RogueInt32)(1);
  }
  return (RogueInt32)(0);
}

void RogueType__collect_base_types__TypeList( RogueClassType* THIS, RogueTypeList* list_0 )
{
  THIS->has_extended_class = true;
  if (((RogueTypeList__locate__Type( list_0, ROGUE_ARG(THIS) ))).exists)
  {
    return;
  }
  RogueTypeList__add__Type( list_0, ROGUE_ARG(THIS) );
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_717_1,(THIS->base_types));
    RogueInt32 _auto_718_2 = (0);
    for (;_auto_718_2 < _auto_717_1->count;++_auto_718_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,base_type_3,(((RogueClassType*)(_auto_717_1->data->objects[_auto_718_2]))));
      RogueType__collect_base_types__TypeList( base_type_3, list_0 );
    }
  }
}

void RogueType__cull_unused_methods( RogueClassType* THIS )
{
  if (THIS->culled)
  {
    return;
  }
  THIS->culled = true;
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_719_3,(THIS->base_types));
    RogueInt32 _auto_720_4 = (0);
    for (;_auto_720_4 < _auto_719_3->count;++_auto_720_4)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,base_type_5,(((RogueClassType*)(_auto_719_3->data->objects[_auto_720_4]))));
      RogueType__cull_unused_methods( base_type_5 );
    }
  }
  RogueInt32 i_0 = ((THIS->method_list->count - 1));
  while (i_0 >= 0)
  {
    ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_1,(((RogueClassMethod*)(THIS->method_list->data->objects[i_0]))));
    if (((RogueMethod__is_macro( m_1 ))))
    {
      RogueMethodList__remove__Method( ROGUE_ARG(THIS->method_list), m_1 );
    }
    --i_0;
  }
  if (!(THIS->has_extended_class))
  {
    i_0 = ((RogueInt32)(THIS->method_list->count - 1));
    while (i_0 >= 0)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_2,(((RogueClassMethod*)(THIS->method_list->data->objects[i_0]))));
      if (!(m_2->is_used))
      {
        if ((!(!!(THIS->base_class)) || THIS->base_class->method_list->count <= i_0))
        {
          RogueMethodList__remove__Method( ROGUE_ARG(THIS->method_list), m_2 );
        }
      }
      --i_0;
    }
  }
  i_0 = ((RogueInt32)0);
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_721_6,(THIS->method_list));
    RogueInt32 _auto_722_7 = (0);
    for (;_auto_722_7 < _auto_721_6->count;++_auto_722_7)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_8,(((RogueClassMethod*)(_auto_721_6->data->objects[_auto_722_7]))));
      m_8->index = i_0;
      ++i_0;
    }
  }
}

RogueLogical RogueType__has_global_references( RogueClassType* THIS )
{
  {
    ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_723_0,(THIS->global_list));
    RogueInt32 _auto_724_1 = (0);
    for (;_auto_724_1 < _auto_723_0->count;++_auto_724_1)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassProperty*,g_2,(((RogueClassProperty*)(_auto_723_0->data->objects[_auto_724_1]))));
      if (((RogueType__is_reference( ROGUE_ARG(g_2->_type) ))))
      {
        return (RogueLogical)(true);
      }
      if ((((RogueType__is_compound( ROGUE_ARG(g_2->_type) ))) && ((RogueType__has_object_references( ROGUE_ARG(g_2->_type) )))))
      {
        return (RogueLogical)(true);
      }
    }
  }
  return (RogueLogical)(false);
}

RogueLogical RogueType__has_object_references( RogueClassType* THIS )
{
  {
    ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_725_0,(THIS->property_list));
    RogueInt32 _auto_726_1 = (0);
    for (;_auto_726_1 < _auto_725_0->count;++_auto_726_1)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_2,(((RogueClassProperty*)(_auto_725_0->data->objects[_auto_726_1]))));
      if (((RogueType__is_reference( ROGUE_ARG(p_2->_type) ))))
      {
        return (RogueLogical)(true);
      }
      if ((((RogueType__is_compound( ROGUE_ARG(p_2->_type) ))) && ((RogueType__has_object_references( ROGUE_ARG(p_2->_type) )))))
      {
        return (RogueLogical)(true);
      }
    }
  }
  return (RogueLogical)((THIS->is_array && ((RogueType__has_object_references( ROGUE_ARG(THIS->_element_type) )))));
}

RogueLogical RogueType__is_reference_array( RogueClassType* THIS )
{
  return (RogueLogical)((THIS->is_array && ((RogueType__is_reference( ROGUE_ARG(THIS->_element_type) )))));
}

void RogueType__inherit_definitions__Type( RogueClassType* THIS, RogueClassType* from_type_0 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueDefinitionList*,_auto_727_1,(from_type_0->definition_list));
    RogueInt32 _auto_728_2 = (0);
    for (;_auto_728_2 < _auto_727_1->count;++_auto_728_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassDefinition*,def_3,(((RogueClassDefinition*)(_auto_727_1->data->objects[_auto_728_2]))));
      if (!(((RogueString_DefinitionTable__contains__String( ROGUE_ARG(THIS->definition_lookup), ROGUE_ARG(def_3->name) )))))
      {
        RogueDefinitionList__add__Definition( ROGUE_ARG(THIS->definition_list), def_3 );
        RogueString_DefinitionTable__set__String_Definition( ROGUE_ARG(THIS->definition_lookup), ROGUE_ARG(def_3->name), ROGUE_ARG(((RogueString_DefinitionTable__get__String( ROGUE_ARG(from_type_0->definition_lookup), ROGUE_ARG(def_3->name) )))) );
      }
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_729_4,(from_type_0->base_types));
    RogueInt32 _auto_730_5 = (0);
    for (;_auto_730_5 < _auto_729_4->count;++_auto_730_5)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,base_type_6,(((RogueClassType*)(_auto_729_4->data->objects[_auto_730_5]))));
      RogueType__inherit_definitions__Type( ROGUE_ARG(THIS), base_type_6 );
    }
  }
}

void RogueType__inherit_properties__PropertyList_String_PropertyTable( RogueClassType* THIS, RoguePropertyList* list_0, RogueClassString_PropertyTable* lookup_1 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_731_2,(THIS->base_types));
    RogueInt32 _auto_732_3 = (0);
    for (;_auto_732_3 < _auto_731_2->count;++_auto_732_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,base_type_4,(((RogueClassType*)(_auto_731_2->data->objects[_auto_732_3]))));
      {
        ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_733_5,(base_type_4->property_list));
        RogueInt32 _auto_734_6 = (0);
        for (;_auto_734_6 < _auto_733_5->count;++_auto_734_6)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassProperty*,base_p_7,(((RogueClassProperty*)(_auto_733_5->data->objects[_auto_734_6]))));
          RogueType__inherit_property__Property_PropertyList_String_PropertyTable( ROGUE_ARG(THIS), base_p_7, list_0, lookup_1 );
        }
      }
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_735_8,(THIS->property_list));
    RogueInt32 _auto_736_9 = (0);
    for (;_auto_736_9 < _auto_735_8->count;++_auto_736_9)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_10,(((RogueClassProperty*)(_auto_735_8->data->objects[_auto_736_9]))));
      RogueType__inherit_property__Property_PropertyList_String_PropertyTable( ROGUE_ARG(THIS), p_10, list_0, lookup_1 );
    }
  }
}

void RogueType__inherit_property__Property_PropertyList_String_PropertyTable( RogueClassType* THIS, RogueClassProperty* p_0, RoguePropertyList* list_1, RogueClassString_PropertyTable* lookup_2 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassProperty*,existing_p_3,(((RogueString_PropertyTable__get__String( lookup_2, ROGUE_ARG(p_0->name) )))));
  if (!!(existing_p_3))
  {
    RogueInt32 i_4 = (((RoguePropertyList__locate__Property( list_1, existing_p_3 ))).value);
    if (((((void*)p_0->type_context) == ((void*)existing_p_3->type_context) && !(((RogueProperty__is_incorporated( p_0 ))))) && !(((RogueProperty__is_incorporated( existing_p_3 ))))))
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(p_0->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[381] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(p_0->name) )))) )))), Rogue_literal_strings[382] )))) )))) ))));
    }
    else if (((void*)p_0->_type) == ((void*)existing_p_3->_type))
    {
      if (!!(p_0->initial_value))
      {
        if (!!(existing_p_3->initial_value))
        {
          if (((RogueType__instance_of__Type( ROGUE_ARG(p_0->_type), ROGUE_ARG(existing_p_3->_type) ))))
          {
            if (((RogueType__is_aspect( ROGUE_ARG(p_0->type_context) ))))
            {
              p_0 = ((RogueClassProperty*)((RogueProperty__set_type_context__Type( ROGUE_ARG(((RogueProperty__clone( p_0 )))), ROGUE_ARG(THIS) ))));
              RogueProperty__mark_incorporated( p_0 );
            }
            list_1->data->objects[i_4] = p_0;
            RogueString_PropertyTable__set__String_Property( lookup_2, ROGUE_ARG(p_0->name), p_0 );
          }
          else
          {
            ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(p_0->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[383] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(p_0->name) )))) )))), Rogue_literal_strings[384] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(p_0->type_context))) )))) )))), Rogue_literal_strings[379] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(existing_p_3->type_context))) )))) )))), Rogue_literal_strings[64] )))) )))) ))));
          }
        }
        else
        {
          if (((RogueType__is_aspect( ROGUE_ARG(p_0->type_context) ))))
          {
            p_0 = ((RogueClassProperty*)((RogueProperty__set_type_context__Type( ROGUE_ARG(((RogueProperty__clone( p_0 )))), ROGUE_ARG(THIS) ))));
            RogueProperty__mark_incorporated( p_0 );
          }
          list_1->data->objects[i_4] = p_0;
          RogueString_PropertyTable__set__String_Property( lookup_2, ROGUE_ARG(p_0->name), p_0 );
        }
      }
    }
    else
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(p_0->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[385] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(p_0->name) )))) )))), Rogue_literal_strings[386] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(p_0->name) )))) )))), Rogue_literal_strings[192] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(p_0->_type))) )))) )))), Rogue_literal_strings[387] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(p_0->type_context))) )))) )))), Rogue_literal_strings[379] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(p_0->name) )))) )))), Rogue_literal_strings[192] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(existing_p_3->_type))) )))) )))), Rogue_literal_strings[387] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(existing_p_3->type_context))) )))) )))), Rogue_literal_strings[64] )))) )))) ))));
    }
  }
  else
  {
    if (((RogueType__is_aspect( ROGUE_ARG(p_0->type_context) ))))
    {
      p_0 = ((RogueClassProperty*)((RogueProperty__set_type_context__Type( ROGUE_ARG(((RogueProperty__clone( p_0 )))), ROGUE_ARG(THIS) ))));
      RogueProperty__mark_incorporated( p_0 );
    }
    RoguePropertyList__add__Property( list_1, p_0 );
    RogueString_PropertyTable__set__String_Property( lookup_2, ROGUE_ARG(p_0->name), p_0 );
  }
}

void RogueType__inherit_methods__MethodList_String_MethodTable( RogueClassType* THIS, RogueMethodList* list_0, RogueClassString_MethodTable* lookup_1 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_737_2,(THIS->base_types));
    RogueInt32 _auto_738_3 = (0);
    for (;_auto_738_3 < _auto_737_2->count;++_auto_738_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,base_type_4,(((RogueClassType*)(_auto_737_2->data->objects[_auto_738_3]))));
      {
        ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_739_5,(base_type_4->method_list));
        RogueInt32 _auto_740_6 = (0);
        for (;_auto_740_6 < _auto_739_5->count;++_auto_740_6)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassMethod*,base_m_7,(((RogueClassMethod*)(_auto_739_5->data->objects[_auto_740_6]))));
          RogueType__inherit_method__Method_MethodList_String_MethodTable( ROGUE_ARG(THIS), base_m_7, list_0, lookup_1 );
        }
      }
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_741_8,(THIS->method_list));
    RogueInt32 _auto_742_9 = (0);
    for (;_auto_742_9 < _auto_741_8->count;++_auto_742_9)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_10,(((RogueClassMethod*)(_auto_741_8->data->objects[_auto_742_9]))));
      RogueType__inherit_method__Method_MethodList_String_MethodTable( ROGUE_ARG(THIS), m_10, list_0, lookup_1 );
    }
  }
}

void RogueType__inherit_method__Method_MethodList_String_MethodTable( RogueClassType* THIS, RogueClassMethod* m_0, RogueMethodList* list_1, RogueClassString_MethodTable* lookup_2 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,existing_m_3,(((RogueString_MethodTable__get__String( lookup_2, ROGUE_ARG(m_0->signature) )))));
  if (!!(existing_m_3))
  {
    if (((void*)m_0->_return_type) != ((void*)existing_m_3->_return_type))
    {
      if (((((void*)m_0->_return_type) == ((void*)NULL) || ((void*)existing_m_3->_return_type) == ((void*)NULL)) || !(((RogueType__instance_of__Type( ROGUE_ARG(m_0->_return_type), ROGUE_ARG(existing_m_3->_return_type) ))))))
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(m_0->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[402] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(m_0->type_context->name) )))) )))), Rogue_literal_strings[82] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(m_0->signature) )))) )))), Rogue_literal_strings[403] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(m_0->_return_type))) )))) )))), Rogue_literal_strings[404] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(existing_m_3->_return_type))) )))) )))), Rogue_literal_strings[405] )))) )))) ))));
      }
    }
    RogueInt32 i_4 = (((RogueMethodList__locate__Method( list_1, existing_m_3 ))).value);
    if (!(((RogueMethod__is_incorporated( existing_m_3 )))))
    {
      if (((void*)m_0->type_context) == ((void*)existing_m_3->type_context))
      {
        if (((RogueMethod__is_augment( m_0 ))))
        {
          RogueType__apply_augment_labels__Method_Method( ROGUE_ARG(THIS), m_0, existing_m_3 );
          return;
        }
        else
        {
          ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(m_0->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[400] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(m_0->type_context))) )))) )))), Rogue_literal_strings[406] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(m_0->signature) )))) )))), Rogue_literal_strings[64] )))) )))) ))));
        }
      }
    }
    if (((RogueType__is_aspect( ROGUE_ARG(m_0->type_context) ))))
    {
      RogueMethodList__add__Method( ROGUE_ARG(m_0->overriding_methods), existing_m_3 );
      if (((RogueMethod__is_abstract( m_0 ))))
      {
        return;
      }
      m_0 = ((RogueClassMethod*)((RogueMethod__incorporate__Type( m_0, ROGUE_ARG(THIS) ))));
    }
    else if (((RogueMethod__is_augment( m_0 ))))
    {
      RogueMethod__convert_augment_to_standalone( m_0 );
    }
    if (!(((RogueType__is_aspect( ROGUE_ARG(existing_m_3->type_context) )))))
    {
      RogueAttributes__add__Int32( ROGUE_ARG(existing_m_3->attributes), 2048 );
      RogueAttributes__add__Int32( ROGUE_ARG(existing_m_3->attributes), 4096 );
      RogueAttributes__add__Int32( ROGUE_ARG(m_0->attributes), 2048 );
    }
    m_0->overridden_method = existing_m_3;
    while ((!!(m_0->overridden_method) && ((void*)m_0->type_context) == ((void*)m_0->overridden_method->type_context)))
    {
      if (!!(m_0->overridden_method->overridden_method))
      {
        RogueMethodList__remove__Method( ROGUE_ARG(m_0->overridden_method->overridden_method->overriding_methods), ROGUE_ARG(m_0->overridden_method) );
      }
      m_0->overridden_method = m_0->overridden_method->overridden_method;
    }
    if (!!(m_0->overridden_method))
    {
      RogueMethodList__add__Method( ROGUE_ARG(m_0->overridden_method->overriding_methods), m_0 );
    }
    list_1->data->objects[i_4] = m_0;
    RogueString_MethodTable__set__String_Method( lookup_2, ROGUE_ARG(m_0->signature), m_0 );
  }
  else
  {
    if (((RogueType__is_aspect( ROGUE_ARG(m_0->type_context) ))))
    {
      m_0 = ((RogueClassMethod*)((RogueMethod__incorporate__Type( m_0, ROGUE_ARG(THIS) ))));
    }
    else if (((RogueMethod__is_augment( m_0 ))))
    {
      RogueMethod__convert_augment_to_standalone( m_0 );
    }
    RogueMethodList__add__Method( list_1, m_0 );
    RogueString_MethodTable__set__String_Method( lookup_2, ROGUE_ARG(m_0->signature), m_0 );
  }
}

void RogueType__inherit_routines__MethodList_String_MethodTable( RogueClassType* THIS, RogueMethodList* list_0, RogueClassString_MethodTable* lookup_1 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_743_2,(THIS->base_types));
    RogueInt32 _auto_744_3 = (0);
    for (;_auto_744_3 < _auto_743_2->count;++_auto_744_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,base_type_4,(((RogueClassType*)(_auto_743_2->data->objects[_auto_744_3]))));
      {
        ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_745_5,(base_type_4->global_method_list));
        RogueInt32 _auto_746_6 = (0);
        for (;_auto_746_6 < _auto_745_5->count;++_auto_746_6)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassMethod*,base_m_7,(((RogueClassMethod*)(_auto_745_5->data->objects[_auto_746_6]))));
          RogueType__inherit_routine__Method_MethodList_String_MethodTable( ROGUE_ARG(THIS), base_m_7, list_0, lookup_1 );
        }
      }
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_747_8,(THIS->global_method_list));
    RogueInt32 _auto_748_9 = (0);
    for (;_auto_748_9 < _auto_747_8->count;++_auto_748_9)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_10,(((RogueClassMethod*)(_auto_747_8->data->objects[_auto_748_9]))));
      RogueType__inherit_routine__Method_MethodList_String_MethodTable( ROGUE_ARG(THIS), m_10, list_0, lookup_1 );
    }
  }
}

void RogueType__inherit_routine__Method_MethodList_String_MethodTable( RogueClassType* THIS, RogueClassMethod* m_0, RogueMethodList* list_1, RogueClassString_MethodTable* lookup_2 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,existing_m_3,(((RogueString_MethodTable__get__String( lookup_2, ROGUE_ARG(m_0->signature) )))));
  if (!!(existing_m_3))
  {
    if (((void*)m_0->type_context) == ((void*)existing_m_3->type_context))
    {
      if (((RogueMethod__is_augment( m_0 ))))
      {
        RogueType__apply_augment_labels__Method_Method( ROGUE_ARG(THIS), m_0, existing_m_3 );
        return;
      }
      else
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(m_0->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[400] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(m_0->type_context))) )))) )))), Rogue_literal_strings[401] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(m_0->signature) )))) )))), Rogue_literal_strings[64] )))) )))) ))));
      }
    }
    RogueInt32 i_4 = (((RogueMethodList__locate__Method( list_1, existing_m_3 ))).value);
    if (((RogueType__is_aspect( ROGUE_ARG(m_0->type_context) ))))
    {
      return;
    }
    if (((RogueMethod__is_augment( m_0 ))))
    {
      RogueMethod__convert_augment_to_standalone( m_0 );
    }
    list_1->data->objects[i_4] = m_0;
    RogueString_MethodTable__set__String_Method( lookup_2, ROGUE_ARG(m_0->signature), m_0 );
  }
  else
  {
    if (((RogueType__is_aspect( ROGUE_ARG(m_0->type_context) ))))
    {
      return;
    }
    if (((RogueMethod__is_augment( m_0 ))))
    {
      RogueMethod__convert_augment_to_standalone( m_0 );
    }
    RogueMethodList__add__Method( list_1, m_0 );
    RogueString_MethodTable__set__String_Method( lookup_2, ROGUE_ARG(m_0->signature), m_0 );
  }
}

void RogueType__apply_augment_labels__Method_Method( RogueClassType* THIS, RogueClassMethod* aug_m_0, RogueClassMethod* existing_m_1 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdLabelList*,_auto_749_3,(existing_m_1->label_list));
    RogueInt32 _auto_750_4 = (0);
    for (;_auto_750_4 < _auto_749_3->count;++_auto_750_4)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdLabel*,method_label_5,(((RogueClassCmdLabel*)(_auto_749_3->data->objects[_auto_750_4]))));
      ROGUE_DEF_LOCAL_REF(RogueClassCmdLabel*,aug_label_2,(((RogueString_CmdLabelTable__get__String( ROGUE_ARG(aug_m_0->label_lookup), ROGUE_ARG(method_label_5->name) )))));
      if (!!(aug_label_2))
      {
        RogueCmdList__add__CmdList( ROGUE_ARG(((RogueCmdList*)method_label_5->statements)), ROGUE_ARG(((RogueCmdList*)(aug_label_2->statements))) );
        aug_label_2->is_referenced = true;
      }
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdLabelList*,_auto_751_6,(aug_m_0->label_list));
    RogueInt32 _auto_752_7 = (0);
    for (;_auto_752_7 < _auto_751_6->count;++_auto_752_7)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdLabel*,label_8,(((RogueClassCmdLabel*)(_auto_751_6->data->objects[_auto_752_7]))));
      if (!(label_8->is_referenced))
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(label_8->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[398] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(label_8->name) )))) )))), Rogue_literal_strings[399] )))) )))) ))));
      }
    }
  }
}

void RogueType__index_and_move_inline_to_end__MethodList( RogueClassType* THIS, RogueMethodList* list_0 )
{
  RogueInt32 i_1 = ((list_0->count - 1));
  while (i_1 >= 0)
  {
    ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_2,(((RogueClassMethod*)(list_0->data->objects[i_1]))));
    if (((RogueMethod__is_macro( m_2 ))))
    {
      RogueMethodList__remove__Method( list_0, m_2 );
      RogueMethodList__add__Method( list_0, m_2 );
    }
    --i_1;
  }
  i_1 = ((RogueInt32)0);
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_753_3,(list_0));
    RogueInt32 _auto_754_4 = (0);
    for (;_auto_754_4 < _auto_753_3->count;++_auto_754_4)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_5,(((RogueClassMethod*)(_auto_753_3->data->objects[_auto_754_4]))));
      m_5->index = i_1;
      ++i_1;
    }
  }
}

RogueLogical RogueType__omit_output( RogueClassType* THIS )
{
  return (RogueLogical)((((RogueType__is_native( ROGUE_ARG(THIS) ))) || !(THIS->is_used)));
}

RogueClassType* RogueType__resolve( RogueClassType* THIS )
{
  if (THIS->resolved)
  {
    return (RogueClassType*)(THIS);
  }
  THIS->resolved = true;
  RogueType__organize__Scope( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassScope*)(NULL))) );
  if (!!(THIS->_element_type))
  {
    RogueType__organize__Scope( ROGUE_ARG(THIS->_element_type), ROGUE_ARG(((RogueClassScope*)(NULL))) );
  }
  {
    ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_755_0,(THIS->global_list));
    RogueInt32 _auto_756_1 = (0);
    for (;_auto_756_1 < _auto_755_0->count;++_auto_756_1)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassProperty*,s_2,(((RogueClassProperty*)(_auto_755_0->data->objects[_auto_756_1]))));
      RogueType__organize__Scope( ROGUE_ARG(s_2->_type), ROGUE_ARG(((RogueClassScope*)(NULL))) );
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_757_3,(THIS->property_list));
    RogueInt32 _auto_758_4 = (0);
    for (;_auto_758_4 < _auto_757_3->count;++_auto_758_4)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_5,(((RogueClassProperty*)(_auto_757_3->data->objects[_auto_758_4]))));
      RogueType__organize__Scope( ROGUE_ARG(p_5->_type), ROGUE_ARG(((RogueClassScope*)(NULL))) );
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_759_6,(THIS->global_method_list));
    RogueInt32 _auto_760_7 = (0);
    for (;_auto_760_7 < _auto_759_6->count;++_auto_760_7)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,r_8,(((RogueClassMethod*)(_auto_759_6->data->objects[_auto_760_7]))));
      RogueMethod__resolve( r_8 );
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_761_9,(THIS->method_list));
    RogueInt32 _auto_762_10 = (0);
    for (;_auto_762_10 < _auto_761_9->count;++_auto_762_10)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_11,(((RogueClassMethod*)(_auto_761_9->data->objects[_auto_762_10]))));
      RogueMethod__resolve( m_11 );
    }
  }
  return (RogueClassType*)(THIS);
}

RogueLogical RogueType__should_cull( RogueClassType* THIS )
{
  return (RogueLogical)(!(THIS->is_used));
}

void RogueType__trace_used_code( RogueClassType* THIS )
{
  if (THIS->is_used)
  {
    return;
  }
  THIS->is_used = true;
  if (((RogueType__is_singleton( ROGUE_ARG(THIS) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_0,(((RogueType__find_method__String( ROGUE_ARG(THIS), Rogue_literal_strings[439] )))));
    if (!!(m_0))
    {
      RogueMethod__make_requisite( m_0 );
    }
  }
  if (!!(THIS->_element_type))
  {
    RogueType__trace_used_code( ROGUE_ARG(THIS->_element_type) );
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_763_1,(THIS->base_types));
    RogueInt32 _auto_764_2 = (0);
    for (;_auto_764_2 < _auto_763_1->count;++_auto_764_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,base_type_3,(((RogueClassType*)(_auto_763_1->data->objects[_auto_764_2]))));
      RogueType__trace_used_code( base_type_3 );
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_765_4,(THIS->global_list));
    RogueInt32 _auto_766_5 = (0);
    for (;_auto_766_5 < _auto_765_4->count;++_auto_766_5)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassProperty*,s_6,(((RogueClassProperty*)(_auto_765_4->data->objects[_auto_766_5]))));
      RogueType__trace_used_code( ROGUE_ARG(s_6->_type) );
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_767_7,(THIS->property_list));
    RogueInt32 _auto_768_8 = (0);
    for (;_auto_768_8 < _auto_767_7->count;++_auto_768_8)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_9,(((RogueClassProperty*)(_auto_767_7->data->objects[_auto_768_8]))));
      RogueType__trace_used_code( ROGUE_ARG(p_9->_type) );
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_769_10,(THIS->global_method_list));
    RogueInt32 _auto_770_11 = (0);
    for (;_auto_770_11 < _auto_769_10->count;++_auto_770_11)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,r_12,(((RogueClassMethod*)(_auto_769_10->data->objects[_auto_770_11]))));
      if (((RogueMethod__is_requisite( r_12 ))))
      {
        RogueMethod__trace_used_code( r_12 );
      }
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_771_13,(THIS->method_list));
    RogueInt32 _auto_772_14 = (0);
    for (;_auto_772_14 < _auto_771_13->count;++_auto_772_14)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_15,(((RogueClassMethod*)(_auto_771_13->data->objects[_auto_772_14]))));
      if (((RogueMethod__is_requisite( m_15 ))))
      {
        RogueMethod__trace_used_code( m_15 );
      }
    }
  }
}

void RogueType__assign_cpp_name( RogueClassType* THIS )
{
  THIS->cpp_name = ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(THIS->name) )));
  if ((THIS->is_array || ((void*)THIS) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_NativeArray)))
  {
    THIS->cpp_class_name = Rogue_literal_strings[461];
    THIS->cpp_name = Rogue_literal_strings[462];
  }
  else if ((((RogueType__is_primitive( ROGUE_ARG(THIS) ))) || THIS->simplify_name))
  {
    THIS->cpp_class_name = ((RogueString__operatorPLUS__String( Rogue_literal_strings[41], ROGUE_ARG(THIS->cpp_name) )));
  }
  else if (THIS->is_list)
  {
    THIS->cpp_class_name = ((RogueString__operatorPLUS__String( Rogue_literal_strings[41], ROGUE_ARG(THIS->cpp_name) )));
  }
  else if (THIS->is_optional)
  {
    THIS->cpp_name = ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[334], ROGUE_ARG(THIS->_element_type->cpp_name) )))) )));
    THIS->cpp_class_name = ((RogueString__operatorPLUS__String( Rogue_literal_strings[41], ROGUE_ARG(THIS->cpp_name) )));
  }
  else
  {
    THIS->cpp_class_name = ((RogueString__operatorPLUS__String( Rogue_literal_strings[463], ROGUE_ARG(THIS->cpp_name) )));
  }
  THIS->cpp_type_name = ((RogueString__operatorPLUS__String( Rogue_literal_strings[464], ROGUE_ARG(THIS->cpp_name) )));
  {
    ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_773_0,(THIS->global_list));
    RogueInt32 _auto_774_1 = (0);
    for (;_auto_774_1 < _auto_773_0->count;++_auto_774_1)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassProperty*,s_2,(((RogueClassProperty*)(_auto_773_0->data->objects[_auto_774_1]))));
      s_2->cpp_name = ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(s_2->name) )));
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_775_3,(THIS->property_list));
    RogueInt32 _auto_776_4 = (0);
    for (;_auto_776_4 < _auto_775_3->count;++_auto_776_4)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_5,(((RogueClassProperty*)(_auto_775_3->data->objects[_auto_776_4]))));
      p_5->cpp_name = ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(p_5->name) )));
    }
  }
}

void RogueType__print_data_definition__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  if ((((RogueType__omit_output( ROGUE_ARG(THIS) ))) || ((RogueType__is_primitive( ROGUE_ARG(THIS) )))))
  {
    return;
  }
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[482] )))), ROGUE_ARG(THIS->cpp_class_name) );
  RogueLogical is_error_1 = (false);
  if (((RogueType__is_reference( ROGUE_ARG(THIS) ))))
  {
    if (((RogueType__instance_of__Type( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Exception) ))))
    {
      is_error_1 = ((RogueLogical)true);
      RogueCPPWriter__print_type_name__Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[484] )))), ROGUE_ARG(THIS->base_class) );
    }
    else
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[486] );
    }
  }
  RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__println( writer_0 )))), Rogue_literal_strings[210] );
  writer_0->indent += 2;
  if (!!(THIS->global_list->count))
  {
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[487] );
    {
      ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_777_3,(THIS->global_list));
      RogueInt32 _auto_778_4 = (0);
      for (;_auto_778_4 < _auto_777_3->count;++_auto_778_4)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassProperty*,s_5,(((RogueClassProperty*)(_auto_777_3->data->objects[_auto_778_4]))));
        RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[488] )))), ROGUE_ARG(s_5->_type) )))), Rogue_literal_strings[489] )))), ROGUE_ARG(s_5->cpp_name) )))), Rogue_literal_strings[219] );
      }
    }
    RogueCPPWriter__println( writer_0 );
  }
  if (!(((RogueType__is_aspect( ROGUE_ARG(THIS) )))))
  {
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[490] );
    if (!!(THIS->native_properties))
    {
      {
        ROGUE_DEF_LOCAL_REF(RogueNativePropertyList*,_auto_779_6,(THIS->native_properties));
        RogueInt32 _auto_780_7 = (0);
        for (;_auto_780_7 < _auto_779_6->count;++_auto_780_7)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassNativeProperty*,p_8,(((RogueClassNativeProperty*)(_auto_779_6->data->objects[_auto_780_7]))));
          RogueCPPWriter__print_native_code__Token_Type_Method_String_Type( writer_0, ROGUE_ARG(p_8->t), ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassMethod*)(NULL))), ROGUE_ARG(p_8->code), ROGUE_ARG(((RogueClassType*)(NULL))) );
        }
      }
    }
    {
      ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_781_9,(THIS->property_list));
      RogueInt32 _auto_782_10 = (0);
      for (;_auto_782_10 < _auto_781_9->count;++_auto_782_10)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_11,(((RogueClassProperty*)(_auto_781_9->data->objects[_auto_782_10]))));
        if ((!(is_error_1) || ((void*)p_11->type_context) == ((void*)THIS)))
        {
          if ((((RogueType__is_compound( ROGUE_ARG(THIS) ))) && ((RogueType__is_reference( ROGUE_ARG(p_11->_type) )))))
          {
            RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[499] );
            RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( writer_0, ROGUE_ARG(p_11->_type) )))), Rogue_literal_strings[193] )))), ROGUE_ARG(p_11->cpp_name) );
            RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[500] );
          }
          else
          {
            RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( writer_0, ROGUE_ARG(p_11->_type) )))), Rogue_literal_strings[489] )))), ROGUE_ARG(p_11->cpp_name) )))), Rogue_literal_strings[219] );
          }
        }
      }
    }
    RogueCPPWriter__println( writer_0 );
  }
  if (((RogueType__is_compound( ROGUE_ARG(THIS) ))))
  {
    if (!!(THIS->property_list->count))
    {
      RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( writer_0, ROGUE_ARG(THIS) )))), Rogue_literal_strings[501] );
      RogueLogical first_2 = (true);
      {
        ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_783_12,(THIS->property_list));
        RogueInt32 _auto_784_13 = (0);
        for (;_auto_784_13 < _auto_783_12->count;++_auto_784_13)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_14,(((RogueClassProperty*)(_auto_783_12->data->objects[_auto_784_13]))));
          if (first_2)
          {
            first_2 = ((RogueLogical)false);
          }
          else
          {
            RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[502] );
          }
          RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print_default_value__Type( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, ROGUE_ARG(p_14->cpp_name) )))), Rogue_literal_strings[80] )))), ROGUE_ARG(p_14->_type) )))), Rogue_literal_strings[28] );
        }
      }
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[504] );
      RogueCPPWriter__println( writer_0 );
      if (THIS->is_optional)
      {
        RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( writer_0, ROGUE_ARG(THIS) )))), Rogue_literal_strings[505] )))), ROGUE_ARG(((RogueClassProperty*)(THIS->property_list->data->objects[0]))->_type) );
        RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[506] );
      }
      else
      {
        RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( writer_0, ROGUE_ARG(THIS) )))), Rogue_literal_strings[505] );
        first_2 = ((RogueLogical)true);
        {
          ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_785_15,(THIS->property_list));
          RogueInt32 _auto_786_16 = (0);
          for (;_auto_786_16 < _auto_785_15->count;++_auto_786_16)
          {
            ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_17,(((RogueClassProperty*)(_auto_785_15->data->objects[_auto_786_16]))));
            if (first_2)
            {
              first_2 = ((RogueLogical)false);
            }
            else
            {
              RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[502] );
            }
            RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( writer_0, ROGUE_ARG(p_17->_type) )))), Rogue_literal_strings[489] )))), ROGUE_ARG(p_17->cpp_name) );
          }
        }
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[507] );
        first_2 = ((RogueLogical)true);
        {
          ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_787_18,(THIS->property_list));
          RogueInt32 _auto_788_19 = (0);
          for (;_auto_788_19 < _auto_787_18->count;++_auto_788_19)
          {
            ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_20,(((RogueClassProperty*)(_auto_787_18->data->objects[_auto_788_19]))));
            if (first_2)
            {
              first_2 = ((RogueLogical)false);
            }
            else
            {
              RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[502] );
            }
            RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, ROGUE_ARG(p_20->cpp_name) )))), Rogue_literal_strings[80] )))), ROGUE_ARG(p_20->cpp_name) )))), Rogue_literal_strings[28] );
          }
        }
        RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[504] );
        RogueCPPWriter__println( writer_0 );
      }
    }
  }
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[508] );
}

void RogueType__print_global_method_prototypes__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_789_1,(THIS->global_method_list));
    RogueInt32 _auto_790_2 = (0);
    for (;_auto_790_2 < _auto_789_1->count;++_auto_790_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_3,(((RogueClassMethod*)(_auto_789_1->data->objects[_auto_790_2]))));
      if (((void*)m_3->type_context) == ((void*)THIS))
      {
        RogueMethod__print_prototype__CPPWriter( m_3, writer_0 );
      }
    }
  }
}

void RogueType__print_global_method_definitions__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_791_1,(THIS->global_method_list));
    RogueInt32 _auto_792_2 = (0);
    for (;_auto_792_2 < _auto_791_1->count;++_auto_792_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_3,(((RogueClassMethod*)(_auto_791_1->data->objects[_auto_792_2]))));
      if (((void*)m_3->type_context) == ((void*)THIS))
      {
        RogueCPPWriter__mark_routine_start__Method( writer_0, m_3 );
        RogueMethod__print_definition__CPPWriter( m_3, writer_0 );
        RogueCPPWriter__mark_routine_end( writer_0 );
      }
    }
  }
}

void RogueType__print_method_prototypes__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_793_1,(THIS->method_list));
    RogueInt32 _auto_794_2 = (0);
    for (;_auto_794_2 < _auto_793_1->count;++_auto_794_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_3,(((RogueClassMethod*)(_auto_793_1->data->objects[_auto_794_2]))));
      if (((void*)m_3->type_context) == ((void*)THIS))
      {
        RogueMethod__print_prototype__CPPWriter( m_3, writer_0 );
      }
    }
  }
}

void RogueType__determine_cpp_method_typedefs__StringList_String_MethodTable( RogueClassType* THIS, RogueStringList* list_0, RogueClassString_MethodTable* lookup_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_2,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_795_6,(THIS->method_list));
    RogueInt32 _auto_796_7 = (0);
    for (;_auto_796_7 < _auto_795_6->count;++_auto_796_7)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_8,(((RogueClassMethod*)(_auto_795_6->data->objects[_auto_796_7]))));
      if (((!(((RogueMethod__is_macro( m_8 )))) && ((RogueMethod__is_dynamic( m_8 )))) && m_8->is_used))
      {
        RogueStringBuilder__clear( buffer_2 );
        if (!!(m_8->_return_type))
        {
          RogueStringBuilder__print__String( buffer_2, ROGUE_ARG(m_8->_return_type->cpp_class_name) );
          if (((RogueType__is_reference( ROGUE_ARG(m_8->_return_type) ))))
          {
            RogueStringBuilder__print__Character( buffer_2, (RogueCharacter)'*' );
          }
        }
        else
        {
          RogueStringBuilder__print__String( buffer_2, Rogue_literal_strings[485] );
        }
        RogueStringBuilder__print__String( buffer_2, Rogue_literal_strings[523] );
        RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( buffer_2, ROGUE_ARG(m_8->type_context->cpp_class_name) )))), Rogue_literal_strings[226] );
        {
          ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_797_9,(m_8->parameters));
          RogueInt32 i_10 = (0);
          for (;i_10 < _auto_797_9->count;++i_10)
          {
            RogueStringBuilder__print__Character( buffer_2, (RogueCharacter)',' );
            ROGUE_DEF_LOCAL_REF(RogueClassType*,param_type_3,(((RogueClassLocal*)(m_8->parameters->data->objects[i_10]))->_type));
            RogueStringBuilder__print__String( buffer_2, ROGUE_ARG(param_type_3->cpp_class_name) );
            if (((RogueType__is_reference( param_type_3 ))))
            {
              RogueStringBuilder__print__Character( buffer_2, (RogueCharacter)'*' );
            }
          }
        }
        RogueStringBuilder__print__String( buffer_2, Rogue_literal_strings[28] );
        ROGUE_DEF_LOCAL_REF(RogueString*,sig_4,(((RogueStringBuilder__to_String( buffer_2 )))));
        ROGUE_DEF_LOCAL_REF(RogueClassMethod*,mapping_5,(((RogueString_MethodTable__get__String( lookup_1, sig_4 )))));
        if (!!(mapping_5))
        {
          m_8->cpp_typedef = mapping_5->cpp_typedef;
          if ((!(mapping_5->called_dynamically) && m_8->called_dynamically))
          {
            RogueString_MethodTable__set__String_Method( lookup_1, sig_4, m_8 );
          }
        }
        else
        {
          m_8->cpp_typedef = ((RogueString__operatorPLUS__Int32( Rogue_literal_strings[524], ROGUE_ARG(list_0->count) )));
          RogueString_MethodTable__set__String_Method( lookup_1, sig_4, m_8 );
          RogueStringList__add__String( list_0, sig_4 );
        }
      }
    }
  }
}

RogueInt32 RogueType__print_dynamic_method_table_entries__Int32_CPPWriter( RogueClassType* THIS, RogueInt32 at_index_0, RogueClassCPPWriter* writer_1 )
{
  if (!(((RogueType__is_reference( ROGUE_ARG(THIS) )))))
  {
    return (RogueInt32)(at_index_0);
  }
  THIS->dynamic_method_table_index = at_index_0;
  RogueInt32 i2_2 = ((THIS->method_list->count - 1));
  while (i2_2 > 0)
  {
    ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_3,(((RogueClassMethod*)(THIS->method_list->data->objects[i2_2]))));
    if (((!(((RogueMethod__is_macro( m_3 )))) && ((RogueMethod__is_dynamic( m_3 )))) && m_3->is_used))
    {
      goto _auto_798;
    }
    --i2_2;
  }
  _auto_798:;
  RogueLogical print_type_name_4 = (true);
  {
    RogueInt32 i_5 = (0);
    RogueInt32 _auto_82_6 = (i2_2);
    for (;i_5 <= _auto_82_6;++i_5)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_7,(((RogueClassMethod*)(THIS->method_list->data->objects[i_5]))));
      if (!(((RogueMethod__is_macro( m_7 )))))
      {
        if ((((RogueMethod__is_dynamic( m_7 ))) && m_7->is_used))
        {
          RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[574] )))), ROGUE_ARG(m_7->cpp_typedef) )))), Rogue_literal_strings[575] )))), ROGUE_ARG(m_7->cpp_name) )))), Rogue_literal_strings[193] );
        }
        else
        {
          RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[576] );
        }
        if (print_type_name_4)
        {
          print_type_name_4 = ((RogueLogical)false);
          RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[577] )))), ROGUE_ARG(THIS->name) );
        }
        RogueCPPWriter__println( writer_1 );
        ++at_index_0;
      }
    }
  }
  return (RogueInt32)(at_index_0);
}

void RogueType__print_method_definitions__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_799_1,(THIS->method_list));
    RogueInt32 _auto_800_2 = (0);
    for (;_auto_800_2 < _auto_799_1->count;++_auto_800_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_3,(((RogueClassMethod*)(_auto_799_1->data->objects[_auto_800_2]))));
      if (((void*)m_3->type_context) == ((void*)THIS))
      {
        RogueCPPWriter__mark_method_start__Type_Method( writer_0, ROGUE_ARG(THIS), m_3 );
        RogueMethod__print_definition__CPPWriter( m_3, writer_0 );
        RogueCPPWriter__mark_method_end( writer_0 );
      }
    }
  }
}

RogueClassType* RogueType__init_object( RogueClassType* THIS )
{
  THIS->attributes = ROGUE_CREATE_REF(RogueClassAttributes*,ROGUE_CREATE_OBJECT(Attributes));
  THIS->index = -1;
  THIS->base_types = ((RogueTypeList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueTypeList*,ROGUE_CREATE_OBJECT(TypeList))) )));
  THIS->flat_base_types = ((RogueTypeList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueTypeList*,ROGUE_CREATE_OBJECT(TypeList))) )));
  THIS->definition_list = ((RogueDefinitionList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueDefinitionList*,ROGUE_CREATE_OBJECT(DefinitionList))) )));
  THIS->definition_lookup = ((RogueString_DefinitionTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_DefinitionTable*,ROGUE_CREATE_OBJECT(String_DefinitionTable))) )));
  THIS->next_enum_offset = 0;
  THIS->global_list = ((RoguePropertyList__init( ROGUE_ARG(ROGUE_CREATE_REF(RoguePropertyList*,ROGUE_CREATE_OBJECT(PropertyList))) )));
  THIS->global_lookup = ((RogueString_PropertyTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_PropertyTable*,ROGUE_CREATE_OBJECT(String_PropertyTable))) )));
  THIS->property_list = ((RoguePropertyList__init( ROGUE_ARG(ROGUE_CREATE_REF(RoguePropertyList*,ROGUE_CREATE_OBJECT(PropertyList))) )));
  THIS->property_lookup = ((RogueString_PropertyTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_PropertyTable*,ROGUE_CREATE_OBJECT(String_PropertyTable))) )));
  THIS->global_method_list = ((RogueMethodList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueMethodList*,ROGUE_CREATE_OBJECT(MethodList))) )));
  THIS->global_method_lookup_by_name = ((RogueString_MethodListTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_MethodListTable*,ROGUE_CREATE_OBJECT(String_MethodListTable))) )));
  THIS->routine_lookup_by_signature = ((RogueString_MethodTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_MethodTable*,ROGUE_CREATE_OBJECT(String_MethodTable))) )));
  THIS->method_list = ((RogueMethodList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueMethodList*,ROGUE_CREATE_OBJECT(MethodList))) )));
  THIS->method_lookup_by_name = ((RogueString_MethodListTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_MethodListTable*,ROGUE_CREATE_OBJECT(String_MethodListTable))) )));
  THIS->method_lookup_by_signature = ((RogueString_MethodTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_MethodTable*,ROGUE_CREATE_OBJECT(String_MethodTable))) )));
  return (RogueClassType*)(THIS);
}

RogueString* RogueString_TypeTable__to_String( RogueClassString_TypeTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueString_TypeTable__print_to__StringBuilder( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))) )))) ))));
}

RogueString* RogueString_TypeTable__type_name( RogueClassString_TypeTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[646]);
}

RogueClassString_TypeTable* RogueString_TypeTable__init( RogueClassString_TypeTable* THIS )
{
  RogueString_TypeTable__init__Int32( ROGUE_ARG(THIS), 16 );
  return (RogueClassString_TypeTable*)(THIS);
}

RogueClassString_TypeTable* RogueString_TypeTable__init__Int32( RogueClassString_TypeTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_TypeTableEntryList__init__Int32_String_TypeTableEntry( ROGUE_ARG(ROGUE_CREATE_REF(RogueTableEntry_of_String_TypeList*,ROGUE_CREATE_OBJECT(TableEntry_of_String_TypeList))), bin_count_0, ROGUE_ARG(((RogueClassString_TypeTableEntry*)(NULL))) )));
  THIS->keys = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  return (RogueClassString_TypeTable*)(THIS);
}

RogueClassType* RogueString_TypeTable__at__Int32( RogueClassString_TypeTable* THIS, RogueInt32 index_0 )
{
  return (RogueClassType*)(((RogueString_TypeTable__get__String( ROGUE_ARG(THIS), ROGUE_ARG(((RogueString*)(THIS->keys->data->objects[index_0]))) ))));
}

RogueInt32 RogueString_TypeTable__count( RogueClassString_TypeTable* THIS )
{
  return (RogueInt32)(THIS->keys->count);
}

RogueClassString_TypeTableEntry* RogueString_TypeTable__find__String( RogueClassString_TypeTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  ROGUE_DEF_LOCAL_REF(RogueClassString_TypeTableEntry*,entry_2,(((RogueClassString_TypeTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)]))));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_2->key), key_0 )))))
    {
      return (RogueClassString_TypeTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_TypeTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_TypeTableEntry*)(((RogueClassString_TypeTableEntry*)(NULL)));
}

RogueClassType* RogueString_TypeTable__get__String( RogueClassString_TypeTable* THIS, RogueString* key_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassString_TypeTableEntry*,entry_1,(((RogueString_TypeTable__find__String( ROGUE_ARG(THIS), key_0 )))));
  if (!!(entry_1))
  {
    return (RogueClassType*)(entry_1->value);
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassType*,default_value_2,0);
    return (RogueClassType*)(default_value_2);
  }
}

RogueClassString_TypeTable* RogueString_TypeTable__set__String_Type( RogueClassString_TypeTable* THIS, RogueString* key_0, RogueClassType* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  ROGUE_DEF_LOCAL_REF(RogueClassString_TypeTableEntry*,entry_4,(((RogueClassString_TypeTableEntry*)(THIS->bins->data->objects[index_3]))));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_4->key), key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_TypeTable*)(THIS);
    }
    entry_4 = ((RogueClassString_TypeTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_TypeTableEntry*)((RogueString_TypeTableEntry__init__String_Type_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_TypeTableEntry*,ROGUE_CREATE_OBJECT(String_TypeTableEntry))), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_TypeTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( ROGUE_ARG(THIS->keys), key_0 );
  return (RogueClassString_TypeTable*)(THIS);
}

RogueStringBuilder* RogueString_TypeTable__print_to__StringBuilder( RogueClassString_TypeTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    ROGUE_DEF_LOCAL_REF(RogueString*,key_2,(((RogueString*)(THIS->keys->data->objects[i_1]))));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ROGUE_ARG(((RogueObject*)(((RogueString_TypeTable__get__String( ROGUE_ARG(THIS), key_2 )))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_TypeTable* RogueString_TypeTable__init_object( RogueClassString_TypeTable* THIS )
{
  return (RogueClassString_TypeTable*)(THIS);
}

RogueString* RogueString_Int32Table__to_String( RogueClassString_Int32Table* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueString_Int32Table__print_to__StringBuilder( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))) )))) ))));
}

RogueString* RogueString_Int32Table__type_name( RogueClassString_Int32Table* THIS )
{
  return (RogueString*)(Rogue_literal_strings[647]);
}

RogueClassString_Int32Table* RogueString_Int32Table__init( RogueClassString_Int32Table* THIS )
{
  RogueString_Int32Table__init__Int32( ROGUE_ARG(THIS), 16 );
  return (RogueClassString_Int32Table*)(THIS);
}

RogueClassString_Int32Table* RogueString_Int32Table__init__Int32( RogueClassString_Int32Table* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_Int32TableEntryList__init__Int32_String_Int32TableEntry( ROGUE_ARG(ROGUE_CREATE_REF(RogueTableEntry_of_String_Int32List*,ROGUE_CREATE_OBJECT(TableEntry_of_String_Int32List))), bin_count_0, ROGUE_ARG(((RogueClassString_Int32TableEntry*)(NULL))) )));
  THIS->keys = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  return (RogueClassString_Int32Table*)(THIS);
}

RogueClassString_Int32TableEntry* RogueString_Int32Table__find__String( RogueClassString_Int32Table* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  ROGUE_DEF_LOCAL_REF(RogueClassString_Int32TableEntry*,entry_2,(((RogueClassString_Int32TableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)]))));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_2->key), key_0 )))))
    {
      return (RogueClassString_Int32TableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_Int32TableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_Int32TableEntry*)(((RogueClassString_Int32TableEntry*)(NULL)));
}

RogueInt32 RogueString_Int32Table__get__String( RogueClassString_Int32Table* THIS, RogueString* key_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassString_Int32TableEntry*,entry_1,(((RogueString_Int32Table__find__String( ROGUE_ARG(THIS), key_0 )))));
  if (!!(entry_1))
  {
    return (RogueInt32)(entry_1->value);
  }
  else
  {
    RogueInt32 default_value_2 = 0;
    return (RogueInt32)(default_value_2);
  }
}

RogueClassString_Int32Table* RogueString_Int32Table__set__String_Int32( RogueClassString_Int32Table* THIS, RogueString* key_0, RogueInt32 value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  ROGUE_DEF_LOCAL_REF(RogueClassString_Int32TableEntry*,entry_4,(((RogueClassString_Int32TableEntry*)(THIS->bins->data->objects[index_3]))));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_4->key), key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_Int32Table*)(THIS);
    }
    entry_4 = ((RogueClassString_Int32TableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_Int32TableEntry*)((RogueString_Int32TableEntry__init__String_Int32_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_Int32TableEntry*,ROGUE_CREATE_OBJECT(String_Int32TableEntry))), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_Int32TableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( ROGUE_ARG(THIS->keys), key_0 );
  return (RogueClassString_Int32Table*)(THIS);
}

RogueStringBuilder* RogueString_Int32Table__print_to__StringBuilder( RogueClassString_Int32Table* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    ROGUE_DEF_LOCAL_REF(RogueString*,key_2,(((RogueString*)(THIS->keys->data->objects[i_1]))));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Int32( buffer_0, ROGUE_ARG(((RogueString_Int32Table__get__String( ROGUE_ARG(THIS), key_2 )))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_Int32Table* RogueString_Int32Table__init_object( RogueClassString_Int32Table* THIS )
{
  return (RogueClassString_Int32Table*)(THIS);
}

RogueString* RogueString_StringListTable__to_String( RogueClassString_StringListTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueString_StringListTable__print_to__StringBuilder( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))) )))) ))));
}

RogueString* RogueString_StringListTable__type_name( RogueClassString_StringListTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[648]);
}

RogueClassString_StringListTable* RogueString_StringListTable__init( RogueClassString_StringListTable* THIS )
{
  RogueString_StringListTable__init__Int32( ROGUE_ARG(THIS), 16 );
  return (RogueClassString_StringListTable*)(THIS);
}

RogueClassString_StringListTable* RogueString_StringListTable__init__Int32( RogueClassString_StringListTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_StringListTableEntryList__init__Int32_String_StringListTableEntry( ROGUE_ARG(ROGUE_CREATE_REF(RogueTableEntry_of_String_StringListList*,ROGUE_CREATE_OBJECT(TableEntry_of_String_StringListList))), bin_count_0, ROGUE_ARG(((RogueClassString_StringListTableEntry*)(NULL))) )));
  THIS->keys = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  return (RogueClassString_StringListTable*)(THIS);
}

RogueClassString_StringListTableEntry* RogueString_StringListTable__find__String( RogueClassString_StringListTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  ROGUE_DEF_LOCAL_REF(RogueClassString_StringListTableEntry*,entry_2,(((RogueClassString_StringListTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)]))));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_2->key), key_0 )))))
    {
      return (RogueClassString_StringListTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_StringListTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_StringListTableEntry*)(((RogueClassString_StringListTableEntry*)(NULL)));
}

RogueStringList* RogueString_StringListTable__get__String( RogueClassString_StringListTable* THIS, RogueString* key_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassString_StringListTableEntry*,entry_1,(((RogueString_StringListTable__find__String( ROGUE_ARG(THIS), key_0 )))));
  if (!!(entry_1))
  {
    return (RogueStringList*)(entry_1->value);
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueStringList*,default_value_2,0);
    return (RogueStringList*)(default_value_2);
  }
}

RogueClassString_StringListTable* RogueString_StringListTable__set__String_StringList( RogueClassString_StringListTable* THIS, RogueString* key_0, RogueStringList* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  ROGUE_DEF_LOCAL_REF(RogueClassString_StringListTableEntry*,entry_4,(((RogueClassString_StringListTableEntry*)(THIS->bins->data->objects[index_3]))));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_4->key), key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_StringListTable*)(THIS);
    }
    entry_4 = ((RogueClassString_StringListTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_StringListTableEntry*)((RogueString_StringListTableEntry__init__String_StringList_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_StringListTableEntry*,ROGUE_CREATE_OBJECT(String_StringListTableEntry))), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_StringListTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( ROGUE_ARG(THIS->keys), key_0 );
  return (RogueClassString_StringListTable*)(THIS);
}

RogueStringBuilder* RogueString_StringListTable__print_to__StringBuilder( RogueClassString_StringListTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    ROGUE_DEF_LOCAL_REF(RogueString*,key_2,(((RogueString*)(THIS->keys->data->objects[i_1]))));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ROGUE_ARG(((RogueObject*)(((RogueString_StringListTable__get__String( ROGUE_ARG(THIS), key_2 )))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_StringListTable* RogueString_StringListTable__init_object( RogueClassString_StringListTable* THIS )
{
  return (RogueClassString_StringListTable*)(THIS);
}

RogueString* RogueString_Int32TableEntry__type_name( RogueClassString_Int32TableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[649]);
}

RogueClassString_Int32TableEntry* RogueString_Int32TableEntry__init__String_Int32_Int32( RogueClassString_Int32TableEntry* THIS, RogueString* _key_0, RogueInt32 _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_Int32TableEntry*)(THIS);
}

RogueClassString_Int32TableEntry* RogueString_Int32TableEntry__init_object( RogueClassString_Int32TableEntry* THIS )
{
  return (RogueClassString_Int32TableEntry*)(THIS);
}

RogueString* RogueInt32_TemplateTable__to_String( RogueClassInt32_TemplateTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueInt32_TemplateTable__print_to__StringBuilder( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))) )))) ))));
}

RogueString* RogueInt32_TemplateTable__type_name( RogueClassInt32_TemplateTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[650]);
}

RogueClassInt32_TemplateTable* RogueInt32_TemplateTable__init( RogueClassInt32_TemplateTable* THIS )
{
  RogueInt32_TemplateTable__init__Int32( ROGUE_ARG(THIS), 16 );
  return (RogueClassInt32_TemplateTable*)(THIS);
}

RogueClassInt32_TemplateTable* RogueInt32_TemplateTable__init__Int32( RogueClassInt32_TemplateTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueInt32_TemplateTableEntryList__init__Int32_Int32_TemplateTableEntry( ROGUE_ARG(ROGUE_CREATE_REF(RogueTableEntry_of_Int32_TemplateList*,ROGUE_CREATE_OBJECT(TableEntry_of_Int32_TemplateList))), bin_count_0, ROGUE_ARG(((RogueClassInt32_TemplateTableEntry*)(NULL))) )));
  THIS->keys = ((RogueInt32List__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueInt32List*,ROGUE_CREATE_OBJECT(Int32List))) )));
  return (RogueClassInt32_TemplateTable*)(THIS);
}

RogueLogical RogueInt32_TemplateTable__contains__Int32( RogueClassInt32_TemplateTable* THIS, RogueInt32 key_0 )
{
  return (RogueLogical)(!!(((RogueInt32_TemplateTable__find__Int32( ROGUE_ARG(THIS), key_0 )))));
}

RogueClassInt32_TemplateTableEntry* RogueInt32_TemplateTable__find__Int32( RogueClassInt32_TemplateTable* THIS, RogueInt32 key_0 )
{
  RogueInt32 hash_1 = (((RogueInt32__hash_code( key_0 ))));
  ROGUE_DEF_LOCAL_REF(RogueClassInt32_TemplateTableEntry*,entry_2,(((RogueClassInt32_TemplateTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)]))));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && entry_2->key == key_0))
    {
      return (RogueClassInt32_TemplateTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassInt32_TemplateTableEntry*)entry_2->next_entry);
  }
  return (RogueClassInt32_TemplateTableEntry*)(((RogueClassInt32_TemplateTableEntry*)(NULL)));
}

RogueClassTemplate* RogueInt32_TemplateTable__get__Int32( RogueClassInt32_TemplateTable* THIS, RogueInt32 key_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassInt32_TemplateTableEntry*,entry_1,(((RogueInt32_TemplateTable__find__Int32( ROGUE_ARG(THIS), key_0 )))));
  if (!!(entry_1))
  {
    return (RogueClassTemplate*)(entry_1->value);
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassTemplate*,default_value_2,0);
    return (RogueClassTemplate*)(default_value_2);
  }
}

RogueClassInt32_TemplateTable* RogueInt32_TemplateTable__set__Int32_Template( RogueClassInt32_TemplateTable* THIS, RogueInt32 key_0, RogueClassTemplate* value_1 )
{
  RogueInt32 hash_2 = (((RogueInt32__hash_code( key_0 ))));
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  ROGUE_DEF_LOCAL_REF(RogueClassInt32_TemplateTableEntry*,entry_4,(((RogueClassInt32_TemplateTableEntry*)(THIS->bins->data->objects[index_3]))));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && entry_4->key == key_0))
    {
      entry_4->value = value_1;
      return (RogueClassInt32_TemplateTable*)(THIS);
    }
    entry_4 = ((RogueClassInt32_TemplateTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassInt32_TemplateTableEntry*)((RogueInt32_TemplateTableEntry__init__Int32_Template_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassInt32_TemplateTableEntry*,ROGUE_CREATE_OBJECT(Int32_TemplateTableEntry))), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassInt32_TemplateTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueInt32List__add__Int32( ROGUE_ARG(THIS->keys), key_0 );
  return (RogueClassInt32_TemplateTable*)(THIS);
}

RogueStringBuilder* RogueInt32_TemplateTable__print_to__StringBuilder( RogueClassInt32_TemplateTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueInt32 key_2 = (THIS->keys->data->integers[i_1]);
    RogueStringBuilder__print__Int32( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ROGUE_ARG(((RogueObject*)(((RogueInt32_TemplateTable__get__Int32( ROGUE_ARG(THIS), key_2 )))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassInt32_TemplateTable* RogueInt32_TemplateTable__init_object( RogueClassInt32_TemplateTable* THIS )
{
  return (RogueClassInt32_TemplateTable*)(THIS);
}

RogueString* RogueToken__to_String( RogueClassToken* THIS )
{
  return (RogueString*)(((RogueTokenType__to_String__Token( ROGUE_ARG(THIS->_type), ROGUE_ARG(THIS) ))));
}

RogueString* RogueToken__type_name( RogueClassToken* THIS )
{
  return (RogueString*)(Rogue_literal_strings[651]);
}

RogueClassToken* RogueToken__init__TokenType( RogueClassToken* THIS, RogueClassTokenType* _auto_92_0 )
{
  THIS->_type = _auto_92_0;
  return (RogueClassToken*)(THIS);
}

RogueClassRogueError* RogueToken__error__String( RogueClassToken* THIS, RogueString* message_0 )
{
  return (RogueClassRogueError*)(((RogueRogueError__init__String_String_Int32_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassRogueError*,ROGUE_CREATE_OBJECT(RogueError))), message_0, ROGUE_ARG(THIS->filepath), ROGUE_ARG(THIS->line), ROGUE_ARG(THIS->column) ))));
}

RogueLogical RogueToken__is_directive( RogueClassToken* THIS )
{
  return (RogueLogical)((call_ROGUEM97( 13, ROGUE_ARG(THIS->_type) )));
}

RogueLogical RogueToken__is_structure( RogueClassToken* THIS )
{
  return (RogueLogical)((call_ROGUEM97( 15, ROGUE_ARG(THIS->_type) )));
}

RogueString* RogueToken__quoted_name( RogueClassToken* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[69] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM39( 1, ROGUE_ARG(THIS) ))) )))) )))), Rogue_literal_strings[69] )))) ))));
}

RogueClassToken* RogueToken__set_location__String_Int32_Int32( RogueClassToken* THIS, RogueString* _auto_93_0, RogueInt32 _auto_94_1, RogueInt32 _auto_95_2 )
{
  THIS->column = _auto_95_2;
  THIS->line = _auto_94_1;
  THIS->filepath = _auto_93_0;
  return (RogueClassToken*)(THIS);
}

RogueClassToken* RogueToken__set_location__Token( RogueClassToken* THIS, RogueClassToken* existing_0 )
{
  THIS->filepath = existing_0->filepath;
  THIS->line = existing_0->line;
  THIS->column = existing_0->column;
  return (RogueClassToken*)(THIS);
}

RogueCharacter RogueToken__to_Character( RogueClassToken* THIS )
{
  return (RogueCharacter)(((RogueCharacter)(0)));
}

RogueInt32 RogueToken__to_Int32( RogueClassToken* THIS )
{
  return (RogueInt32)(0);
}

RogueInt64 RogueToken__to_Int64( RogueClassToken* THIS )
{
  return (RogueInt64)(((RogueInt64)(call_ROGUEM41( 12, ROGUE_ARG(THIS) ))));
}

RogueReal64 RogueToken__to_Real64( RogueClassToken* THIS )
{
  return (RogueReal64)(0.0);
}

RogueClassType* RogueToken__to_Type( RogueClassToken* THIS )
{
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

RogueClassToken* RogueToken__init_object( RogueClassToken* THIS )
{
  return (RogueClassToken*)(THIS);
}

RogueString* RogueError__type_name( RogueClassError* THIS )
{
  return (RogueString*)(Rogue_literal_strings[799]);
}

RogueClassError* RogueError__init_object( RogueClassError* THIS )
{
  THIS->stack_trace = ((RogueStackTrace__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassStackTrace*,ROGUE_CREATE_OBJECT(StackTrace))), 1 )));
  return (RogueClassError*)(THIS);
}

RogueString* RogueRogueError__to_String( RogueClassRogueError* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,builder_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  ROGUE_DEF_LOCAL_REF(RogueString*,m_1,(((RogueStringList__joined__String( ROGUE_ARG(((RogueString__word_wrapped__Int32( ROGUE_ARG(THIS->message), 79 )))), Rogue_literal_strings[793] )))));
  if (!!(THIS->filepath))
  {
    RogueStringBuilder__println__String( builder_0, Rogue_literal_strings[794] );
    RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( builder_0, Rogue_literal_strings[795] )))), ROGUE_ARG((RogueFile__filename__String( ROGUE_ARG(THIS->filepath) ))) );
    RogueStringBuilder__println__Int32( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__Int32( ROGUE_ARG(((RogueStringBuilder__print__String( builder_0, Rogue_literal_strings[796] )))), ROGUE_ARG(THIS->line) )))), Rogue_literal_strings[797] )))), ROGUE_ARG(THIS->column) );
    RogueStringBuilder__println( builder_0 );
    RogueStringBuilder__println__String( builder_0, m_1 );
    RogueStringBuilder__println__String( builder_0, Rogue_literal_strings[794] );
  }
  else
  {
    RogueStringBuilder__println__String( builder_0, Rogue_literal_strings[794] );
    RogueStringBuilder__print__String( builder_0, Rogue_literal_strings[798] );
    RogueStringBuilder__println( builder_0 );
    RogueStringBuilder__println__String( builder_0, m_1 );
    RogueStringBuilder__println__String( builder_0, Rogue_literal_strings[794] );
  }
  return (RogueString*)(((RogueStringBuilder__to_String( builder_0 ))));
}

RogueString* RogueRogueError__type_name( RogueClassRogueError* THIS )
{
  return (RogueString*)(Rogue_literal_strings[808]);
}

RogueClassRogueError* RogueRogueError__init_object( RogueClassRogueError* THIS )
{
  THIS->stack_trace = ((RogueStackTrace__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassStackTrace*,ROGUE_CREATE_OBJECT(StackTrace))), 1 )));
  return (RogueClassRogueError*)(THIS);
}

RogueClassRogueError* RogueRogueError__init__String_String_Int32_Int32( RogueClassRogueError* THIS, RogueString* _auto_96_0, RogueString* _auto_97_1, RogueInt32 _auto_98_2, RogueInt32 _auto_99_3 )
{
  THIS->column = _auto_99_3;
  THIS->line = _auto_98_2;
  THIS->filepath = _auto_97_1;
  THIS->message = _auto_96_0;
  return (RogueClassRogueError*)(THIS);
}

RogueString* RogueCmdLabel__type_name( RogueClassCmdLabel* THIS )
{
  return (RogueString*)(Rogue_literal_strings[813]);
}

RogueClassCmdLabel* RogueCmdLabel__clone__CloneArgs( RogueClassCmdLabel* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdLabel*,result_1,(((RogueCmdLabel__init__Token_String_CmdStatementList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLabel*,ROGUE_CREATE_OBJECT(CmdLabel))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->name), ROGUE_ARG(((RogueCmdStatementList__clone__CloneArgs( ROGUE_ARG(THIS->statements), clone_args_0 )))) )))));
  if (!!(clone_args_0))
  {
    call_ROGUEM177( 3, clone_args_0, result_1 );
  }
  return (RogueClassCmdLabel*)(result_1);
}

RogueLogical RogueCmdLabel__requires_semicolon( RogueClassCmdLabel* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdLabel__resolve__Scope( RogueClassCmdLabel* THIS, RogueClassScope* scope_0 )
{
  RogueCmdStatementList__resolve__Scope_Logical( ROGUE_ARG(THIS->statements), scope_0, false );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdLabel__write_cpp__CPPWriter_Logical( RogueClassCmdLabel* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( ROGUE_ARG(THIS->statements), writer_0, is_statement_1 );
}

void RogueCmdLabel__trace_used_code( RogueClassCmdLabel* THIS )
{
  RogueCmdStatementList__trace_used_code( ROGUE_ARG(THIS->statements) );
}

void RogueCmdLabel__update_this_type__Scope( RogueClassCmdLabel* THIS, RogueClassScope* scope_0 )
{
  RogueCmdStatementList__update_this_type__Scope( ROGUE_ARG(THIS->statements), scope_0 );
}

RogueClassCmdLabel* RogueCmdLabel__init_object( RogueClassCmdLabel* THIS )
{
  return (RogueClassCmdLabel*)(THIS);
}

RogueClassCmdLabel* RogueCmdLabel__init__Token_String_CmdStatementList( RogueClassCmdLabel* THIS, RogueClassToken* _auto_100_0, RogueString* _auto_101_1, RogueClassCmdStatementList* _auto_102_2 )
{
  THIS->statements = _auto_102_2;
  THIS->name = _auto_101_1;
  THIS->t = _auto_100_0;
  return (RogueClassCmdLabel*)(THIS);
}

RogueString* RogueCmd__type_name( RogueClassCmd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[348]);
}

void RogueCmd__add_to__CmdStatementList( RogueClassCmd* THIS, RogueClassCmdStatementList* statements_0 )
{
  RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(THIS) );
}

RogueClassCmd* RogueCmd__call_prior__Scope( RogueClassCmd* THIS, RogueClassScope* scope_0 )
{
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[953] ))));
}

RogueClassCmd* RogueCmd__cast_to__Type_Scope( RogueClassCmd* THIS, RogueClassType* target_type_0, RogueClassScope* scope_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassType*,this_type_2,((call_ROGUEM60( 22, ROGUE_ARG(THIS) ))));
  if (((void*)this_type_2) == ((void*)target_type_0))
  {
    return (RogueClassCmd*)(THIS);
  }
  RogueType__organize__Scope( this_type_2, scope_1 );
  RogueType__organize__Scope( target_type_0, scope_1 );
  if ((((RogueType__instance_of__Type( this_type_2, target_type_0 ))) || ((RogueType__instance_of__Type( target_type_0, this_type_2 )))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCastToType*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ROGUE_ARG(((RogueClassCmdTypeOperator*)ROGUE_CREATE_REF(RogueClassCmdCastToType*,ROGUE_CREATE_OBJECT(CmdCastToType)))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS), target_type_0 ))))))));
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,m_name_3,(((RogueString__operatorPLUS__String( Rogue_literal_strings[358], ROGUE_ARG(target_type_0->name) )))));
    if (((RogueType__has_method_named__String( this_type_2, m_name_3 ))))
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS), m_name_3 ))))));
    }
    if ((((RogueType__is_primitive( this_type_2 ))) && ((RogueType__is_primitive( target_type_0 )))))
    {
      if (!((((void*)this_type_2) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical) || ((void*)target_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))))
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCastToType*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ROGUE_ARG(((RogueClassCmdTypeOperator*)ROGUE_CREATE_REF(RogueClassCmdCastToType*,ROGUE_CREATE_OBJECT(CmdCastToType)))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS), target_type_0 ))))))));
      }
    }
    if (((void*)target_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalize*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalize*,ROGUE_CREATE_OBJECT(CmdLogicalize)))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS) ))))))));
    }
    if (target_type_0->is_optional)
    {
      if (((void*)this_type_2) == ((void*)target_type_0->_element_type))
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(this_type_2->name) )))) )))), Rogue_literal_strings[218] )))) )))), ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS) )))) ))))));
      }
      else if (((void*)this_type_2) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_null))
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(this_type_2->name) )))) )))), Rogue_literal_strings[218] )))) )))), ROGUE_ARG(((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )))) ))))));
      }
    }
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[400] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(this_type_2))) )))) )))), Rogue_literal_strings[438] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(target_type_0))) )))) )))), Rogue_literal_strings[64] )))) )))) ))));
  }
}

RogueClassCmd* RogueCmd__clone__CloneArgs( RogueClassCmd* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[347] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM70( 2, ROGUE_ARG(THIS) ))) )))) )))), Rogue_literal_strings[349] )))) )))) ))));
}

RogueClassCmd* RogueCmd__clone__Cmd_CloneArgs( RogueClassCmd* THIS, RogueClassCmd* other_0, RogueClassCloneArgs* clone_args_1 )
{
  if (!!(other_0))
  {
    return (RogueClassCmd*)((call_ROGUEM71( 6, other_0, clone_args_1 )));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
}

RogueClassCmdArgs* RogueCmd__clone__CmdArgs_CloneArgs( RogueClassCmd* THIS, RogueClassCmdArgs* args_0, RogueClassCloneArgs* clone_args_1 )
{
  if (!!(args_0))
  {
    return (RogueClassCmdArgs*)(((RogueCmdArgs__clone__CloneArgs( args_0, clone_args_1 ))));
  }
  return (RogueClassCmdArgs*)(((RogueClassCmdArgs*)(NULL)));
}

RogueClassCmdStatementList* RogueCmd__clone__CmdStatementList_CloneArgs( RogueClassCmd* THIS, RogueClassCmdStatementList* statements_0, RogueClassCloneArgs* clone_args_1 )
{
  if (!!(statements_0))
  {
    return (RogueClassCmdStatementList*)(((RogueCmdStatementList__clone__CloneArgs( statements_0, clone_args_1 ))));
  }
  return (RogueClassCmdStatementList*)(((RogueClassCmdStatementList*)(NULL)));
}

RogueClassCmd* RogueCmd__combine_literal_operands__Type( RogueClassCmd* THIS, RogueClassType* common_type_0 )
{
  return (RogueClassCmd*)(THIS);
}

void RogueCmd__exit_scope__Scope( RogueClassCmd* THIS, RogueClassScope* scope_0 )
{
}

RogueClassType* RogueCmd__find_operation_result_type__Type_Type( RogueClassCmd* THIS, RogueClassType* left_type_0, RogueClassType* right_type_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassType*,result_2,(((RogueCmd__find_common_type__Type_Type( ROGUE_ARG(THIS), left_type_0, right_type_1 )))));
  if (!(!!(result_2)))
  {
    return (RogueClassType*)(left_type_0);
  }
  if ((((void*)result_2) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte) || ((void*)result_2) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character)))
  {
    return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32);
  }
  return (RogueClassType*)(result_2);
}

RogueClassType* RogueCmd__find_common_type__Type_Type( RogueClassCmd* THIS, RogueClassType* left_type_0, RogueClassType* right_type_1 )
{
  if (((void*)left_type_0) == ((void*)NULL))
  {
    return (RogueClassType*)(right_type_1);
  }
  if (((void*)right_type_1) == ((void*)NULL))
  {
    return (RogueClassType*)(left_type_0);
  }
  if (((void*)left_type_0) == ((void*)right_type_1))
  {
    return (RogueClassType*)(left_type_0);
  }
  if (((RogueType__is_primitive( left_type_0 ))))
  {
    if (((RogueType__is_primitive( right_type_1 ))))
    {
      if ((((void*)left_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64) || ((void*)right_type_1) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64)))
      {
        return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64);
      }
      if ((((void*)left_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real32) || ((void*)right_type_1) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real32)))
      {
        return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real32);
      }
      if ((((void*)left_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int64) || ((void*)right_type_1) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int64)))
      {
        return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int64);
      }
      if ((((void*)left_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32) || ((void*)right_type_1) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32)))
      {
        return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32);
      }
      if ((((void*)left_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character) || ((void*)right_type_1) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character)))
      {
        return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character);
      }
    }
  }
  if (((RogueType__instance_of__Type( left_type_0, right_type_1 ))))
  {
    return (RogueClassType*)(right_type_1);
  }
  if (((RogueType__instance_of__Type( right_type_1, left_type_0 ))))
  {
    return (RogueClassType*)(left_type_0);
  }
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

RogueLogical RogueCmd__is_generic_function( RogueClassCmd* THIS )
{
  return (RogueLogical)(false);
}

RogueClassType* RogueCmd__must_find_common_type__Type_Type( RogueClassCmd* THIS, RogueClassType* left_type_0, RogueClassType* right_type_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassType*,common_type_2,(((RogueCmd__find_common_type__Type_Type( ROGUE_ARG(THIS), left_type_0, right_type_1 )))));
  if (!!(common_type_2))
  {
    return (RogueClassType*)(common_type_2);
  }
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[898] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(left_type_0))) )))) )))), Rogue_literal_strings[379] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(right_type_1))) )))) )))), Rogue_literal_strings[899] )))) )))) ))));
}

RogueClassType* RogueCmd__implicit_type__Scope( RogueClassCmd* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

RogueLogical RogueCmd__is_literal( RogueClassCmd* THIS )
{
  return (RogueLogical)(false);
}

void RogueCmd__require_type_context( RogueClassCmd* THIS )
{
  if (!!((call_ROGUEM60( 29, ROGUE_ARG(THIS) ))))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[876] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)((call_ROGUEM60( 29, ROGUE_ARG(THIS) ))))) )))) )))), Rogue_literal_strings[877] )))) )))) ))));
  }
  else
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[878] ))));
  }
}

RogueClassCmd* RogueCmd__require_integer( RogueClassCmd* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassType*,_type_0,((call_ROGUEM60( 29, ROGUE_ARG(THIS) ))));
  if ((((void*)_type_0) == ((void*)NULL) || ((void*)_type_0) != ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32)))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[865] ))));
  }
  return (RogueClassCmd*)(THIS);
}

RogueClassCmd* RogueCmd__require_logical__Scope( RogueClassCmd* THIS, RogueClassScope* scope_0 )
{
  if (((void*)(call_ROGUEM60( 22, ROGUE_ARG(THIS) ))) != ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))
  {
    return (RogueClassCmd*)(((RogueCmdLogicalize__resolve__Scope( ROGUE_ARG(((RogueClassCmdLogicalize*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalize*,ROGUE_CREATE_OBJECT(CmdLogicalize)))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS) )))))), scope_0 ))));
  }
  return (RogueClassCmd*)(THIS);
}

RogueClassType* Rogue_Cmd__require_type( RogueClassCmd* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassType*,result_0,((call_ROGUEM60( 29, ROGUE_ARG(THIS) ))));
  if (((void*)result_0) == ((void*)NULL))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[437] ))));
  }
  return (RogueClassType*)(result_0);
}

RogueClassCmd* RogueCmd__require_value( RogueClassCmd* THIS )
{
  call_ROGUEM60( 22, ROGUE_ARG(THIS) );
  return (RogueClassCmd*)(THIS);
}

RogueLogical RogueCmd__requires_semicolon( RogueClassCmd* THIS )
{
  return (RogueLogical)(true);
}

RogueClassCmd* RogueCmd__resolve__Scope( RogueClassCmd* THIS, RogueClassScope* scope_0 )
{
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[347] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM70( 2, ROGUE_ARG(THIS) ))) )))) )))), Rogue_literal_strings[432] )))) )))) ))));
  return (RogueClassCmd*)(THIS);
}

RogueClassCmd* RogueCmd__resolve_assignment__Scope_Cmd( RogueClassCmd* THIS, RogueClassScope* scope_0, RogueClassCmd* new_value_1 )
{
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[891] ))));
}

RogueClassCmd* RogueCmd__resolve_adjust__Scope_Int32( RogueClassCmd* THIS, RogueClassScope* scope_0, RogueInt32 delta_1 )
{
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[918] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM70( 2, ROGUE_ARG(THIS) ))) )))) )))), Rogue_literal_strings[28] )))) )))) ))));
}

RogueClassCmd* RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd( RogueClassCmd* THIS, RogueClassScope* scope_0, RogueClassTokenType* op_1, RogueClassCmd* new_value_2 )
{
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[891] ))));
}

RogueClassType* Rogue_Cmd__type( RogueClassCmd* THIS )
{
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[347] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM70( 2, ROGUE_ARG(THIS) ))) )))) )))), Rogue_literal_strings[436] )))) )))) ))));
}

void RogueCmd__write_cpp__CPPWriter_Logical( RogueClassCmd* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[347] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM70( 2, ROGUE_ARG(THIS) ))) )))) )))), Rogue_literal_strings[604] )))) )))) ))));
}

void RogueCmd__trace_used_code( RogueClassCmd* THIS )
{
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[347] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM70( 2, ROGUE_ARG(THIS) ))) )))) )))), Rogue_literal_strings[440] )))) )))) ))));
}

void RogueCmd__update_this_type__Scope( RogueClassCmd* THIS, RogueClassScope* scope_0 )
{
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[347] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM70( 2, ROGUE_ARG(THIS) ))) )))) )))), Rogue_literal_strings[862] )))) )))) ))));
}

RogueClassCmd* RogueCmd__init_object( RogueClassCmd* THIS )
{
  return (RogueClassCmd*)(THIS);
}

RogueString* RogueCmdStatementList__type_name( RogueClassCmdStatementList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1038]);
}

RogueClassCmdStatementList* RogueCmdStatementList__init_object( RogueClassCmdStatementList* THIS )
{
  return (RogueClassCmdStatementList*)(THIS);
}

RogueClassCmdStatementList* RogueCmdStatementList__init( RogueClassCmdStatementList* THIS )
{
  RogueCmdList__init( ROGUE_ARG(((RogueCmdList*)THIS)) );
  return (RogueClassCmdStatementList*)(THIS);
}

RogueClassCmdStatementList* RogueCmdStatementList__init__Int32( RogueClassCmdStatementList* THIS, RogueInt32 initial_capacity_0 )
{
  RogueCmdList__init__Int32( ROGUE_ARG(((RogueCmdList*)THIS)), initial_capacity_0 );
  return (RogueClassCmdStatementList*)(THIS);
}

RogueClassCmdStatementList* RogueCmdStatementList__init__Cmd( RogueClassCmdStatementList* THIS, RogueClassCmd* statement_0 )
{
  RogueCmdStatementList__init( ROGUE_ARG(THIS) );
  if (!!(statement_0))
  {
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS)), statement_0 );
  }
  return (RogueClassCmdStatementList*)(THIS);
}

RogueClassCmdStatementList* RogueCmdStatementList__clone__CloneArgs( RogueClassCmdStatementList* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,result_1,(((RogueCmdStatementList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))), ROGUE_ARG(THIS->count) )))));
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_865_2,(THIS));
    RogueInt32 _auto_866_3 = (0);
    for (;_auto_866_3 < _auto_865_2->count;++_auto_866_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,cmd_4,(((RogueClassCmd*)(_auto_865_2->data->objects[_auto_866_3]))));
      cmd_4 = ((RogueClassCmd*)(call_ROGUEM71( 6, cmd_4, clone_args_0 )));
      if (!!(cmd_4))
      {
        RogueCmdList__add__Cmd( ((RogueCmdList*)result_1), cmd_4 );
      }
    }
  }
  return (RogueClassCmdStatementList*)(result_1);
}

void RogueCmdStatementList__resolve__Scope_Logical( RogueClassCmdStatementList* THIS, RogueClassScope* scope_0, RogueLogical use_separate_results_list_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,original_body_2,(scope_0->this_body));
  scope_0->this_body = THIS;
  if (use_separate_results_list_1)
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,result_3,(((RogueCmdStatementList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))), ROGUE_ARG(THIS->count) )))));
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_867_7,(THIS));
      RogueInt32 _auto_868_8 = (0);
      for (;_auto_868_8 < _auto_867_7->count;++_auto_868_8)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,cmd_9,(((RogueClassCmd*)(_auto_867_7->data->objects[_auto_868_8]))));
        call_ROGUEM51( 3, ROGUE_ARG((call_ROGUEM52( 25, cmd_9, scope_0 ))), result_3 );
      }
    }
    RogueCmdList__add__CmdList( ROGUE_ARG(((RogueCmdList__clear( ROGUE_ARG(((RogueCmdList*)THIS)) )))), ROGUE_ARG(((RogueCmdList*)(result_3))) );
  }
  else
  {
    RogueInt32 n_4 = (THIS->count);
    {
      RogueInt32 i_5 = (0);
      RogueInt32 _auto_103_6 = ((n_4 - 1));
      for (;i_5 <= _auto_103_6;++i_5)
      {
        call_ROGUEM51( 3, ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(((RogueClassCmd*)(THIS->data->objects[i_5]))), scope_0 ))), ROGUE_ARG(THIS) );
      }
    }
    RogueCmdList__discard__Int32_Int32( ROGUE_ARG(((RogueCmdList*)THIS)), 0, n_4 );
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_869_10,(THIS));
    RogueInt32 _auto_870_11 = (0);
    for (;_auto_870_11 < _auto_869_10->count;++_auto_870_11)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,statement_12,(((RogueClassCmd*)(_auto_869_10->data->objects[_auto_870_11]))));
      call_ROGUEM56( 12, statement_12, scope_0 );
    }
  }
  scope_0->this_body = original_body_2;
}

void RogueCmdStatementList__write_cpp__CPPWriter_Logical( RogueClassCmdStatementList* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!!(THIS->count))
  {
    RogueCPPWriter__mark_statement_start__String_Int32_Int32( writer_0, ROGUE_ARG(((RogueClassCmd*)(THIS->data->objects[0]))->t->filepath), ROGUE_ARG(((RogueClassCmd*)(THIS->data->objects[0]))->t->line), ROGUE_ARG(((RogueClassCmd*)(THIS->data->objects[(THIS->count - 1)]))->t->line) );
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_871_2,(THIS));
    RogueInt32 _auto_872_3 = (0);
    for (;_auto_872_3 < _auto_871_2->count;++_auto_872_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,statement_4,(((RogueClassCmd*)(_auto_871_2->data->objects[_auto_872_3]))));
      call_ROGUEM72( 30, statement_4, writer_0, true );
      if ((call_ROGUEM57( 24, statement_4 )))
      {
        RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[219] );
      }
    }
  }
  if (!!(THIS->count))
  {
    RogueCPPWriter__mark_statement_end( writer_0 );
  }
}

void RogueCmdStatementList__trace_used_code( RogueClassCmdStatementList* THIS )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_873_0,(THIS));
    RogueInt32 _auto_874_1 = (0);
    for (;_auto_874_1 < _auto_873_0->count;++_auto_874_1)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,statement_2,(((RogueClassCmd*)(_auto_873_0->data->objects[_auto_874_1]))));
      call_ROGUEM59( 31, statement_2 );
    }
  }
}

void RogueCmdStatementList__update_this_type__Scope( RogueClassCmdStatementList* THIS, RogueClassScope* scope_0 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_875_1,(THIS));
    RogueInt32 _auto_876_2 = (0);
    for (;_auto_876_2 < _auto_875_1->count;++_auto_876_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,statement_3,(((RogueClassCmd*)(_auto_875_1->data->objects[_auto_876_2]))));
      call_ROGUEM56( 32, statement_3, scope_0 );
    }
  }
}

RogueString* RogueCmdList__to_String( RogueCmdList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdList*,_auto_834_2,(THIS));
    RogueInt32 _auto_835_3 = (0);
    for (;_auto_835_3 < _auto_834_2->count;++_auto_835_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,value_4,(((RogueClassCmd*)(_auto_834_2->data->objects[_auto_835_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdList__type_name( RogueCmdList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[712]);
}

RogueCmdList* RogueCmdList__init_object( RogueCmdList* THIS )
{
  return (RogueCmdList*)(THIS);
}

RogueCmdList* RogueCmdList__init( RogueCmdList* THIS )
{
  call_ROGUEM79( 5, ROGUE_ARG(THIS), 0 );
  return (RogueCmdList*)(THIS);
}

RogueCmdList* RogueCmdList__init__Int32( RogueCmdList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassCmd*), true );
  }
  return (RogueCmdList*)(THIS);
}

RogueCmdList* RogueCmdList__add__Cmd( RogueCmdList* THIS, RogueClassCmd* value_0 )
{
  ((RogueCmdList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdList*)(THIS);
}

RogueCmdList* RogueCmdList__add__CmdList( RogueCmdList* THIS, RogueCmdList* other_0 )
{
  RogueCmdList__reserve__Int32( ROGUE_ARG(THIS), ROGUE_ARG(other_0->count) );
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdList*,_auto_840_1,(other_0));
    RogueInt32 _auto_841_2 = (0);
    for (;_auto_841_2 < _auto_840_1->count;++_auto_841_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,value_3,(((RogueClassCmd*)(_auto_840_1->data->objects[_auto_841_2]))));
      RogueCmdList__add__Cmd( ROGUE_ARG(THIS), value_3 );
    }
  }
  return (RogueCmdList*)(THIS);
}

RogueInt32 RogueCmdList__capacity( RogueCmdList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueCmdList* RogueCmdList__clear( RogueCmdList* THIS )
{
  RogueCmdList__discard_from__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueCmdList*)(THIS);
}

void RogueCmdList__discard__Int32_Int32( RogueCmdList* THIS, RogueInt32 i1_0, RogueInt32 n_1 )
{
  RogueInt32 i2_2 = ((i1_0 + n_1));
  RogueArray_set(THIS->data,i1_0,((RogueArray*)(THIS->data)),i2_2,(THIS->count - i2_2));
  RogueCmdList__discard_from__Int32( ROGUE_ARG(THIS), ROGUE_ARG((THIS->count - n_1)) );
}

void RogueCmdList__discard_from__Int32( RogueCmdList* THIS, RogueInt32 index_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,zero_value_1,0);
  RogueInt32 c_2 = (THIS->count);
  while (c_2 > index_0)
  {
    --c_2;
    THIS->data->objects[c_2] = zero_value_1;
  }
  THIS->count = c_2;
}

RogueCmdList* RogueCmdList__insert__Cmd_Int32( RogueCmdList* THIS, RogueClassCmd* value_0, RogueInt32 before_index_1 )
{
  if (before_index_1 < 0)
  {
    before_index_1 = ((RogueInt32)0);
  }
  if (before_index_1 >= THIS->count)
  {
    return (RogueCmdList*)(((RogueCmdList__add__Cmd( ROGUE_ARG(THIS), value_0 ))));
  }
  else
  {
    RogueCmdList__reserve__Int32( ROGUE_ARG(THIS), 1 );
    RogueArray_set(THIS->data,(before_index_1 + 1),((RogueArray*)(THIS->data)),before_index_1,(THIS->count - before_index_1));
    ++THIS->count;
    THIS->data->objects[before_index_1] = value_0;
  }
  return (RogueCmdList*)(THIS);
}

RogueClassCmd* RogueCmdList__last( RogueCmdList* THIS )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS->data->objects[(THIS->count - 1)])));
}

RogueCmdList* RogueCmdList__reserve__Int32( RogueCmdList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassCmd*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueCmdList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassCmd*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdList*)(THIS);
}

RogueString* RogueTypeArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[752]);
}

RogueString* RogueAttributes__type_name( RogueClassAttributes* THIS )
{
  return (RogueString*)(Rogue_literal_strings[652]);
}

RogueClassAttributes* RogueAttributes__init__Int32( RogueClassAttributes* THIS, RogueInt32 _auto_110_0 )
{
  THIS->flags = _auto_110_0;
  return (RogueClassAttributes*)(THIS);
}

RogueClassAttributes* RogueAttributes__clone( RogueClassAttributes* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassAttributes*,result_0,(((RogueAttributes__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassAttributes*,ROGUE_CREATE_OBJECT(Attributes))), ROGUE_ARG(THIS->flags) )))));
  if (!!(THIS->tags))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_878_1,(THIS->tags));
      RogueInt32 _auto_879_2 = (0);
      for (;_auto_879_2 < _auto_878_1->count;++_auto_879_2)
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,tag_3,(((RogueString*)(_auto_878_1->data->objects[_auto_879_2]))));
        RogueAttributes__add__String( result_0, tag_3 );
      }
    }
  }
  return (RogueClassAttributes*)(result_0);
}

RogueClassAttributes* RogueAttributes__add__Int32( RogueClassAttributes* THIS, RogueInt32 flag_0 )
{
  THIS->flags |= flag_0;
  return (RogueClassAttributes*)(THIS);
}

RogueClassAttributes* RogueAttributes__add__String( RogueClassAttributes* THIS, RogueString* tag_0 )
{
  if (((void*)THIS->tags) == ((void*)NULL))
  {
    THIS->tags = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  }
  RogueStringList__add__String( ROGUE_ARG(THIS->tags), tag_0 );
  return (RogueClassAttributes*)(THIS);
}

RogueClassAttributes* RogueAttributes__add__Attributes( RogueClassAttributes* THIS, RogueClassAttributes* other_0 )
{
  THIS->flags |= other_0->flags;
  if (!!(other_0->tags))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_880_1,(other_0->tags));
      RogueInt32 _auto_881_2 = (0);
      for (;_auto_881_2 < _auto_880_1->count;++_auto_881_2)
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,tag_3,(((RogueString*)(_auto_880_1->data->objects[_auto_881_2]))));
        RogueAttributes__add__String( ROGUE_ARG(THIS), tag_3 );
      }
    }
  }
  return (RogueClassAttributes*)(THIS);
}

RogueString* RogueAttributes__element_type_name( RogueClassAttributes* THIS )
{
  switch ((THIS->flags & 7))
  {
    case 1:
    {
      return (RogueString*)(Rogue_literal_strings[312]);
      break;
    }
    case 2:
    {
      return (RogueString*)(Rogue_literal_strings[309]);
      break;
    }
    case 3:
    {
      return (RogueString*)(Rogue_literal_strings[313]);
      break;
    }
    default:
    {
      return (RogueString*)(Rogue_literal_strings[100]);
    }
  }
}

RogueClassAttributes* RogueAttributes__init_object( RogueClassAttributes* THIS )
{
  return (RogueClassAttributes*)(THIS);
}

RogueString* RogueCmdReturn__type_name( RogueClassCmdReturn* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1043]);
}

RogueClassCmd* RogueCmdReturn__clone__CloneArgs( RogueClassCmdReturn* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassTaskArgs*,task_args_1,(((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs)))));
  if (!!(task_args_1))
  {
    return (RogueClassCmd*)(((RogueTaskArgs__create_return__Token_Cmd( task_args_1, ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->value), clone_args_0 )))) ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReturn*,ROGUE_CREATE_OBJECT(CmdReturn))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->value), clone_args_0 )))) ))))));
  }
}

RogueClassCmd* RogueCmdReturn__resolve__Scope( RogueClassCmdReturn* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->value))
  {
    if (!(!!(scope_0->this_method->_return_type)))
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(scope_0->this_method->signature) )))) )))), Rogue_literal_strings[435] )))) )))) ))));
    }
    THIS->value = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->value), scope_0 ))), ROGUE_ARG(scope_0->this_method->_return_type), scope_0 ))), scope_0 ));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdReturn__type( RogueClassCmdReturn* THIS )
{
  return (RogueClassType*)((call_ROGUEM60( 29, ROGUE_ARG(THIS->value) )));
}

void RogueCmdReturn__write_cpp__CPPWriter_Logical( RogueClassCmdReturn* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!!(THIS->value))
  {
    RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[970] )))), ROGUE_ARG((call_ROGUEM60( 29, ROGUE_ARG(THIS->value) ))) )))), Rogue_literal_strings[971] );
    call_ROGUEM72( 30, ROGUE_ARG(THIS->value), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[156] );
  }
}

void RogueCmdReturn__trace_used_code( RogueClassCmdReturn* THIS )
{
  if (!!(THIS->value))
  {
    call_ROGUEM59( 31, ROGUE_ARG(THIS->value) );
  }
}

void RogueCmdReturn__update_this_type__Scope( RogueClassCmdReturn* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->value))
  {
    call_ROGUEM56( 32, ROGUE_ARG(THIS->value), scope_0 );
  }
}

RogueClassCmdReturn* RogueCmdReturn__init_object( RogueClassCmdReturn* THIS )
{
  return (RogueClassCmdReturn*)(THIS);
}

RogueClassCmdReturn* RogueCmdReturn__init__Token_Cmd( RogueClassCmdReturn* THIS, RogueClassToken* _auto_112_0, RogueClassCmd* _auto_113_1 )
{
  THIS->value = _auto_113_1;
  THIS->t = _auto_112_0;
  return (RogueClassCmdReturn*)(THIS);
}

RogueString* RogueCmdStatement__type_name( RogueClassCmdStatement* THIS )
{
  return (RogueString*)(Rogue_literal_strings[814]);
}

void RogueCmdStatement__trace_used_code( RogueClassCmdStatement* THIS )
{
}

void RogueCmdStatement__update_this_type__Scope( RogueClassCmdStatement* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdStatement* RogueCmdStatement__init_object( RogueClassCmdStatement* THIS )
{
  return (RogueClassCmdStatement*)(THIS);
}

RogueString* RogueTokenType__to_String( RogueClassTokenType* THIS )
{
  return (RogueString*)(THIS->name);
}

RogueString* RogueTokenType__type_name( RogueClassTokenType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[653]);
}

RogueClassTokenType* RogueTokenType__init__String( RogueClassTokenType* THIS, RogueString* _auto_114_0 )
{
  THIS->name = _auto_114_0;
  return (RogueClassTokenType*)(THIS);
}

RogueClassToken* RogueTokenType__create_token__String_Int32_Int32( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ROGUE_ARG(((RogueToken__init__TokenType( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassToken*,ROGUE_CREATE_OBJECT(Token))), ROGUE_ARG(THIS) )))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__String_Int32_Int32_Character( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2, RogueCharacter value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ROGUE_ARG(((RogueClassToken*)((RogueLiteralCharacterToken__init__TokenType_Character( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassLiteralCharacterToken*,ROGUE_CREATE_OBJECT(LiteralCharacterToken))), ROGUE_ARG(THIS), value_3 ))))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__String_Int32_Int32_Int64( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2, RogueInt64 value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ROGUE_ARG(((RogueClassToken*)((RogueLiteralInt64Token__init__TokenType_Int64( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassLiteralInt64Token*,ROGUE_CREATE_OBJECT(LiteralInt64Token))), ROGUE_ARG(THIS), value_3 ))))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__String_Int32_Int32_Int32( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2, RogueInt32 value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ROGUE_ARG(((RogueClassToken*)((RogueLiteralInt32Token__init__TokenType_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassLiteralInt32Token*,ROGUE_CREATE_OBJECT(LiteralInt32Token))), ROGUE_ARG(THIS), value_3 ))))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__String_Int32_Int32_Real64( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2, RogueReal64 value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ROGUE_ARG(((RogueClassToken*)((RogueLiteralReal64Token__init__TokenType_Real64( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassLiteralReal64Token*,ROGUE_CREATE_OBJECT(LiteralReal64Token))), ROGUE_ARG(THIS), value_3 ))))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__String_Int32_Int32_String( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2, RogueString* value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ROGUE_ARG(((RogueClassToken*)((RogueStringDataToken__init__TokenType_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassStringDataToken*,ROGUE_CREATE_OBJECT(StringDataToken))), ROGUE_ARG(THIS), value_3 ))))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__Token( RogueClassTokenType* THIS, RogueClassToken* existing_0 )
{
  return (RogueClassToken*)((call_ROGUEM94( 4, ROGUE_ARG(THIS), ROGUE_ARG(existing_0->filepath), ROGUE_ARG(existing_0->line), ROGUE_ARG(existing_0->column) )));
}

RogueClassToken* RogueTokenType__create_token__Token_String( RogueClassTokenType* THIS, RogueClassToken* existing_0, RogueString* value_1 )
{
  return (RogueClassToken*)((call_ROGUEM95( 9, ROGUE_ARG(THIS), ROGUE_ARG(existing_0->filepath), ROGUE_ARG(existing_0->line), ROGUE_ARG(existing_0->column), value_1 )));
}

RogueLogical RogueTokenType__is_directive( RogueClassTokenType* THIS )
{
  return (RogueLogical)(false);
}

RogueLogical RogueTokenType__is_op_with_assign( RogueClassTokenType* THIS )
{
  return (RogueLogical)(false);
}

RogueLogical RogueTokenType__is_structure( RogueClassTokenType* THIS )
{
  return (RogueLogical)(false);
}

RogueString* RogueTokenType__quoted_name( RogueClassTokenType* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[69] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->name) )))) )))), Rogue_literal_strings[69] )))) ))));
}

RogueString* RogueTokenType__to_String__Token( RogueClassTokenType* THIS, RogueClassToken* t_0 )
{
  return (RogueString*)(THIS->name);
}

RogueClassTokenType* RogueTokenType__init_object( RogueClassTokenType* THIS )
{
  return (RogueClassTokenType*)(THIS);
}

RogueString* RoguePropertyArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[753]);
}

RogueString* RogueScope__type_name( RogueClassScope* THIS )
{
  return (RogueString*)(Rogue_literal_strings[654]);
}

RogueClassScope* RogueScope__init__Type_Method( RogueClassScope* THIS, RogueClassType* _auto_117_0, RogueClassMethod* _auto_118_1 )
{
  THIS->this_method = _auto_118_1;
  THIS->_this_type = _auto_117_0;
  return (RogueClassScope*)(THIS);
}

RogueClassLocal* RogueScope__find_local__String( RogueClassScope* THIS, RogueString* name_0 )
{
  RogueInt32 i_1 = ((THIS->local_list->count - 1));
  while (i_1 >= 0)
  {
    if (((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(((RogueClassLocal*)(THIS->local_list->data->objects[i_1]))->name), name_0 ))))
    {
      return (RogueClassLocal*)(((RogueClassLocal*)(THIS->local_list->data->objects[i_1])));
    }
    --i_1;
  }
  return (RogueClassLocal*)(((RogueClassLocal*)(NULL)));
}

RogueClassType* RogueScope__find_type__String( RogueClassScope* THIS, RogueString* name_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassType*,type_1,(((RogueProgram__find_type__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), name_0 )))));
  if (!!(type_1))
  {
    return (RogueClassType*)(type_1);
  }
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

void RogueScope__push_local__Local_Logical( RogueClassScope* THIS, RogueClassLocal* v_0, RogueLogical validate_name_1 )
{
  if (validate_name_1)
  {
    ROGUE_DEF_LOCAL_REF(RogueClassLocal*,existing_2,(((RogueScope__find_local__String( ROGUE_ARG(THIS), ROGUE_ARG(v_0->name) )))));
    if (!!(existing_2))
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(v_0->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[431] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(v_0->name) )))) )))), Rogue_literal_strings[382] )))) )))) ))));
    }
  }
  RogueLocalList__add__Local( ROGUE_ARG(THIS->local_list), v_0 );
}

void RogueScope__pop_local( RogueClassScope* THIS )
{
  RogueLocalList__remove_last( ROGUE_ARG(THIS->local_list) );
}

RogueClassType* RogueScope__set_implicit_type__Type( RogueClassScope* THIS, RogueClassType* new_implicit_type_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassType*,result_1,(THIS->_implicit_type));
  THIS->_implicit_type = new_implicit_type_0;
  return (RogueClassType*)(result_1);
}

RogueClassCmd* RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( RogueClassScope* THIS, RogueClassType* type_context_0, RogueClassCmdAccess* access_1, RogueLogical error_on_fail_2, RogueLogical suppress_inherited_3 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_4,(((RogueScope__find_method__Type_CmdAccess_Logical_Logical( ROGUE_ARG(THIS), type_context_0, access_1, ROGUE_ARG((error_on_fail_2 && !!(access_1->context))), suppress_inherited_3 )))));
  if ((!(!!(m_4)) && !(!!(access_1->context))))
  {
    m_4 = ((RogueClassMethod*)((RogueScope__find_method__Type_CmdAccess_Logical_Logical( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global), access_1, false, suppress_inherited_3 ))));
    if (!!(m_4))
    {
      type_context_0 = ((RogueClassType*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global);
      access_1->context = ((RogueClassCmd*)(((RogueCmdReadSingleton__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadSingleton*,ROGUE_CREATE_OBJECT(CmdReadSingleton))), ROGUE_ARG(access_1->t), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global) )))));
    }
    else if (error_on_fail_2)
    {
      if (((RogueType__has_method_named__String( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global), ROGUE_ARG(access_1->name) ))))
      {
        RogueScope__find_method__Type_CmdAccess_Logical_Logical( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global), access_1, true, suppress_inherited_3 );
      }
      else
      {
        RogueScope__find_method__Type_CmdAccess_Logical_Logical( ROGUE_ARG(THIS), type_context_0, access_1, true, suppress_inherited_3 );
      }
    }
  }
  if (!(!!(m_4)))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  if (((!(error_on_fail_2) && ((RogueMethod__is_fallback( m_4 )))) && !(((RogueType__is_aspect( ROGUE_ARG(m_4->type_context) ))))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_5,(access_1->t));
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,context_6,(access_1->context));
  if (!(!!(context_6)))
  {
    if ((((RogueMethod__is_global( ROGUE_ARG(THIS->this_method) ))) && !(((RogueMethod__is_global( m_4 ))))))
    {
      context_6 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdReadSingleton__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadSingleton*,ROGUE_CREATE_OBJECT(CmdReadSingleton))), t_5, type_context_0 ))))));
    }
    else
    {
      context_6 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdThisContext*,ROGUE_CREATE_OBJECT(CmdThisContext))), t_5, type_context_0 ))))));
    }
  }
  ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,args_7,(access_1->args));
  if (!(!!(args_7)))
  {
    args_7 = ((RogueClassCmdArgs*)((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) ))));
  }
  while (args_7->count < m_4->parameters->count)
  {
    ROGUE_DEF_LOCAL_REF(RogueClassLocal*,param_8,(((RogueClassLocal*)(m_4->parameters->data->objects[args_7->count]))));
    ROGUE_DEF_LOCAL_REF(RogueClassCmdFlagArg*,flag_arg_9,0);
    if (!!(access_1->flag_args))
    {
      {
        ROGUE_DEF_LOCAL_REF(RogueCmdFlagArgList*,_auto_884_18,(access_1->flag_args));
        RogueInt32 _auto_885_19 = (0);
        for (;_auto_885_19 < _auto_884_18->count;++_auto_885_19)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassCmdFlagArg*,arg_20,(((RogueClassCmdFlagArg*)(_auto_884_18->data->objects[_auto_885_19]))));
          if (((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(arg_20->name), ROGUE_ARG(param_8->original_name) ))))
          {
            flag_arg_9 = ((RogueClassCmdFlagArg*)arg_20);
            RogueCmdFlagArgList__remove__CmdFlagArg( ROGUE_ARG(access_1->flag_args), arg_20 );
            goto _auto_886;
          }
        }
      }
      _auto_886:;
    }
    if (!!(flag_arg_9))
    {
      if (!!(flag_arg_9->value))
      {
        RogueCmdList__add__Cmd( ((RogueCmdList*)args_7), ROGUE_ARG(flag_arg_9->value) );
      }
      else if (((void*)param_8->_type) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))
      {
        if (flag_arg_9->is_negative)
        {
          RogueCmdList__add__Cmd( ((RogueCmdList*)args_7), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(flag_arg_9->t), false )))))) );
        }
        else
        {
          RogueCmdList__add__Cmd( ((RogueCmdList*)args_7), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(flag_arg_9->t), true )))))) );
        }
      }
      else if (flag_arg_9->is_negative)
      {
        RogueCmdList__add__Cmd( ((RogueCmdList*)args_7), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(flag_arg_9->t), 0 )))))) );
      }
      else
      {
        RogueCmdList__add__Cmd( ((RogueCmdList*)args_7), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(flag_arg_9->t), 1 )))))) );
      }
    }
    else
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)args_7), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(param_8->initial_value), ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) ))) );
    }
  }
  if ((!!(access_1->flag_args) && !!(access_1->flag_args->count)))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdFlagArg*,arg_10,(((RogueClassCmdFlagArg*)(access_1->flag_args->data->objects[0]))));
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(arg_10->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[875] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(arg_10->name) )))) )))), Rogue_literal_strings[34] )))) )))) ))));
  }
  RogueCmdArgs__resolve__Scope( args_7, ROGUE_ARG(THIS) );
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_887_21,(args_7));
    RogueInt32 i_22 = (0);
    for (;i_22 < _auto_887_21->count;++i_22)
    {
      args_7->data->objects[i_22] = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG(((RogueClassCmd*)(args_7->data->objects[i_22]))), ROGUE_ARG(((RogueClassLocal*)(m_4->parameters->data->objects[i_22]))->_type), ROGUE_ARG(THIS) ))), ROGUE_ARG(THIS) ));
    }
  }
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,cmd_11,0);
  if (((RogueMethod__is_global( m_4 ))))
  {
    if (((RogueMethod__is_native( m_4 ))))
    {
      if (!!(m_4->native_code))
      {
        context_6 = ((RogueClassCmd*)(call_ROGUEM52( 25, context_6, ROGUE_ARG(THIS) )));
        call_ROGUEM59( 19, context_6 );
        cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdCallInlineNativeRoutine__init__Token_Method_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCallInlineNativeRoutine*,ROGUE_CREATE_OBJECT(CmdCallInlineNativeRoutine))), t_5, m_4, args_7 ))))));
      }
      else
      {
        cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdCallNativeRoutine__init__Token_Method_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCallNativeRoutine*,ROGUE_CREATE_OBJECT(CmdCallNativeRoutine))), t_5, m_4, args_7 ))))));
      }
    }
    else if (((RogueMethod__is_macro( m_4 ))))
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMacroArgs*,macro_args_12,(((RogueMacroArgs__init__Cmd_Method_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassMacroArgs*,ROGUE_CREATE_OBJECT(MacroArgs))), context_6, m_4, args_7 )))));
      ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,inline_statements_13,(((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )))));
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_901_23,(m_4->statements));
        RogueInt32 _auto_902_24 = (0);
        for (;_auto_902_24 < _auto_901_23->count;++_auto_902_24)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassCmd*,statement_25,(((RogueClassCmd*)(_auto_901_23->data->objects[_auto_902_24]))));
          ROGUE_DEF_LOCAL_REF(RogueClassCmd*,inline_statement_14,((call_ROGUEM71( 6, statement_25, ROGUE_ARG(((RogueClassCloneArgs*)(macro_args_12))) ))));
          if (!!(inline_statement_14))
          {
            RogueCmdList__add__Cmd( ((RogueCmdList*)inline_statements_13), inline_statement_14 );
          }
        }
      }
      RogueCmdStatementList__resolve__Scope_Logical( inline_statements_13, ROGUE_ARG(THIS), false );
      switch (inline_statements_13->count)
      {
        case 0:
        {
          if (!!(m_4->_return_type))
          {
            ROGUE_THROW(((RogueToken__error__String( t_5, Rogue_literal_strings[879] ))));
          }
          return (RogueClassCmd*)(((RogueCmdInlineNative__resolve__Scope( ROGUE_ARG(((RogueCmdInlineNative__init__Token_String_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdInlineNative*,ROGUE_CREATE_OBJECT(CmdInlineNative))), t_5, Rogue_literal_strings[0], ROGUE_ARG(((RogueClassType*)(NULL))) )))), ROGUE_ARG(THIS) ))));
          break;
        }
        case 1:
        {
          return (RogueClassCmd*)(((RogueClassCmd*)(inline_statements_13->data->objects[0])));
          break;
        }
        case 2:
        {
          ROGUE_THROW(((RogueToken__error__String( t_5, Rogue_literal_strings[880] ))));
          break;
        }
      }
    }
    else
    {
      cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdCallRoutine__init__Token_Method_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCallRoutine*,ROGUE_CREATE_OBJECT(CmdCallRoutine))), t_5, m_4, args_7 ))))));
    }
  }
  else if (((RogueMethod__is_native( m_4 ))))
  {
    if (type_context_0->is_array)
    {
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,_auto_915_26,(m_4->name));
        if (((RogueString__operatorEQUALSEQUALS__String( _auto_915_26, Rogue_literal_strings[881] ))))
        {
          if ((!!(args_7) && !!(args_7->count)))
          {
            ROGUE_THROW(((RogueToken__error__String( t_5, Rogue_literal_strings[882] ))));
          }
          return (RogueClassCmd*)(((RogueCmdReadArrayCount__resolve__Scope( ROGUE_ARG(((RogueCmdReadArrayCount__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadArrayCount*,ROGUE_CREATE_OBJECT(CmdReadArrayCount))), t_5, context_6 )))), ROGUE_ARG(THIS) ))));
        }
      }
    }
    if (!!(m_4->native_code))
    {
      cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCallInlineNativeMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ROGUE_ARG(((RogueClassCmdCall*)ROGUE_CREATE_REF(RogueClassCmdCallInlineNativeMethod*,ROGUE_CREATE_OBJECT(CmdCallInlineNativeMethod)))), t_5, context_6, m_4, args_7 ))))))));
    }
    else
    {
      cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCallNativeMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ROGUE_ARG(((RogueClassCmdCall*)ROGUE_CREATE_REF(RogueClassCmdCallNativeMethod*,ROGUE_CREATE_OBJECT(CmdCallNativeMethod)))), t_5, context_6, m_4, args_7 ))))))));
    }
  }
  else if (((RogueMethod__is_macro( m_4 ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassMacroArgs*,macro_args_15,(((RogueMacroArgs__init__Cmd_Method_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassMacroArgs*,ROGUE_CREATE_OBJECT(MacroArgs))), context_6, m_4, args_7 )))));
    ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,inline_statements_16,(((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )))));
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_916_27,(m_4->statements));
      RogueInt32 _auto_917_28 = (0);
      for (;_auto_917_28 < _auto_916_27->count;++_auto_917_28)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,statement_29,(((RogueClassCmd*)(_auto_916_27->data->objects[_auto_917_28]))));
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,inline_statement_17,((call_ROGUEM71( 6, statement_29, ROGUE_ARG(((RogueClassCloneArgs*)(macro_args_15))) ))));
        if (!!(inline_statement_17))
        {
          RogueCmdList__add__Cmd( ((RogueCmdList*)inline_statements_16), inline_statement_17 );
        }
      }
    }
    RogueCmdStatementList__resolve__Scope_Logical( inline_statements_16, ROGUE_ARG(THIS), false );
    switch (inline_statements_16->count)
    {
      case 0:
      {
        if (!!(m_4->_return_type))
        {
          ROGUE_THROW(((RogueToken__error__String( t_5, Rogue_literal_strings[879] ))));
        }
        return (RogueClassCmd*)(((RogueCmdInlineNative__resolve__Scope( ROGUE_ARG(((RogueCmdInlineNative__init__Token_String_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdInlineNative*,ROGUE_CREATE_OBJECT(CmdInlineNative))), t_5, Rogue_literal_strings[0], ROGUE_ARG(((RogueClassType*)(NULL))) )))), ROGUE_ARG(THIS) ))));
        break;
      }
      case 1:
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(inline_statements_16->data->objects[0])));
        break;
      }
      case 2:
      {
        ROGUE_THROW(((RogueToken__error__String( t_5, Rogue_literal_strings[880] ))));
        break;
      }
    }
  }
  else if (((RogueType__is_aspect( type_context_0 ))))
  {
    cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCallAspectMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ROGUE_ARG(((RogueClassCmdCall*)ROGUE_CREATE_REF(RogueClassCmdCallAspectMethod*,ROGUE_CREATE_OBJECT(CmdCallAspectMethod)))), t_5, context_6, m_4, args_7 ))))))));
  }
  else
  {
    cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCallDynamicMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ROGUE_ARG(((RogueClassCmdCall*)ROGUE_CREATE_REF(RogueClassCmdCallDynamicMethod*,ROGUE_CREATE_OBJECT(CmdCallDynamicMethod)))), t_5, context_6, m_4, args_7 ))))))));
  }
  return (RogueClassCmd*)((call_ROGUEM52( 25, cmd_11, ROGUE_ARG(THIS) )));
}

RogueClassMethod* RogueScope__find_method__Type_CmdAccess_Logical_Logical( RogueClassScope* THIS, RogueClassType* type_context_0, RogueClassCmdAccess* access_1, RogueLogical error_on_fail_2, RogueLogical suppress_inherited_3 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCandidateMethods*,candidates_4,(((RogueCandidateMethods__init__Type_CmdAccess_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCandidateMethods*,ROGUE_CREATE_OBJECT(CandidateMethods))), type_context_0, access_1, error_on_fail_2 )))));
  ROGUE_DEF_LOCAL_REF(RogueMethodList*,list_5,(((RogueString_MethodListTable__get__String( ROGUE_ARG(type_context_0->global_method_lookup_by_name), ROGUE_ARG(access_1->name) )))));
  if (!!(list_5))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_921_31,(list_5));
      RogueInt32 _auto_922_32 = (0);
      for (;_auto_922_32 < _auto_921_31->count;++_auto_922_32)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_33,(((RogueClassMethod*)(_auto_921_31->data->objects[_auto_922_32]))));
        RogueMethodList__add__Method( ROGUE_ARG(candidates_4->available), m_33 );
      }
    }
  }
  list_5 = ((RogueMethodList*)((RogueString_MethodListTable__get__String( ROGUE_ARG(type_context_0->method_lookup_by_name), ROGUE_ARG(access_1->name) ))));
  if (!!(list_5))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_923_34,(list_5));
      RogueInt32 _auto_924_35 = (0);
      for (;_auto_924_35 < _auto_923_34->count;++_auto_924_35)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_36,(((RogueClassMethod*)(_auto_923_34->data->objects[_auto_924_35]))));
        RogueMethodList__add__Method( ROGUE_ARG(candidates_4->available), m_36 );
      }
    }
  }
  if (!(((RogueCandidateMethods__update_available( candidates_4 )))))
  {
    return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
  }
  if (suppress_inherited_3)
  {
    ROGUE_DEF_LOCAL_REF(RogueClassType*,most_specific_type_6,0);
    {
      ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_925_37,(candidates_4->available));
      RogueInt32 _auto_926_38 = (0);
      for (;_auto_926_38 < _auto_925_37->count;++_auto_926_38)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_39,(((RogueClassMethod*)(_auto_925_37->data->objects[_auto_926_38]))));
        if (((RogueMethod__is_initializer( m_39 ))))
        {
          ROGUE_DEF_LOCAL_REF(RogueClassType*,m_type_context_7,(m_39->type_context));
          if ((((void*)most_specific_type_6) == ((void*)NULL) || ((RogueType__instance_of__Type( m_type_context_7, most_specific_type_6 )))))
          {
            most_specific_type_6 = ((RogueClassType*)m_type_context_7);
          }
        }
      }
    }
    if (!!(most_specific_type_6))
    {
      {
        ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_927_40,(candidates_4->available));
        RogueInt32 _auto_928_41 = (0);
        for (;_auto_928_41 < _auto_927_40->count;++_auto_928_41)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_42,(((RogueClassMethod*)(_auto_927_40->data->objects[_auto_928_41]))));
          if (((void*)m_42->type_context) == ((void*)most_specific_type_6))
          {
            RogueMethodList__add__Method( ROGUE_ARG(candidates_4->compatible), m_42 );
          }
        }
      }
      if (!(((RogueCandidateMethods__update_matches( candidates_4 )))))
      {
        return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
      }
    }
  }
  ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,args_8,(access_1->args));
  RogueInt32 arg_count_9 = (0);
  if (!!(args_8))
  {
    RogueCmdArgs__resolve__Scope( args_8, ROGUE_ARG(THIS) );
    arg_count_9 = ((RogueInt32)args_8->count);
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_929_43,(args_8));
      RogueInt32 _auto_930_44 = (0);
      for (;_auto_930_44 < _auto_929_43->count;++_auto_930_44)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_45,(((RogueClassCmd*)(_auto_929_43->data->objects[_auto_930_44]))));
        RogueType__organize__Scope( ROGUE_ARG((call_ROGUEM60( 29, arg_45 ))), ROGUE_ARG(((RogueClassScope*)(NULL))) );
      }
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_931_46,(candidates_4->available));
    RogueInt32 _auto_932_47 = (0);
    for (;_auto_932_47 < _auto_931_46->count;++_auto_932_47)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_48,(((RogueClassMethod*)(_auto_931_46->data->objects[_auto_932_47]))));
      {
        ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_933_49,(m_48->parameters));
        RogueInt32 _auto_934_50 = (0);
        for (;_auto_934_50 < _auto_933_49->count;++_auto_934_50)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassLocal*,param_51,(((RogueClassLocal*)(_auto_933_49->data->objects[_auto_934_50]))));
          RogueType__organize__Scope( ROGUE_ARG(param_51->_type), ROGUE_ARG(((RogueClassScope*)(NULL))) );
        }
      }
      if (((RogueMethod__accepts_arg_count__Int32( m_48, arg_count_9 ))))
      {
        RogueMethodList__add__Method( ROGUE_ARG(candidates_4->compatible), m_48 );
      }
    }
  }
  if (!(((RogueCandidateMethods__update_matches( candidates_4 )))))
  {
    return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
  }
  if (!!(arg_count_9))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_935_52,(candidates_4->available));
      RogueInt32 _auto_936_53 = (0);
      for (;_auto_936_53 < _auto_935_52->count;++_auto_936_53)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_54,(((RogueClassMethod*)(_auto_935_52->data->objects[_auto_936_53]))));
        {
          {
            {
              ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_938_55,(args_8));
              RogueInt32 index_56 = (0);
              for (;index_56 < _auto_938_55->count;++index_56)
              {
                ROGUE_DEF_LOCAL_REF(RogueClassType*,arg_type_10,((call_ROGUEM60( 29, ROGUE_ARG(((RogueClassCmd*)(args_8->data->objects[index_56]))) ))));
                ROGUE_DEF_LOCAL_REF(RogueClassType*,param_type_11,(((RogueClassLocal*)(m_54->parameters->data->objects[index_56]))->_type));
                if ( !(((void*)arg_type_10) == ((void*)param_type_11)) ) goto _auto_939;
              }
            }
            RogueMethodList__add__Method( ROGUE_ARG(candidates_4->compatible), m_54 );
            goto _auto_937;
          }
          _auto_939:;
        }
        _auto_937:;
      }
    }
    if (!(((RogueCandidateMethods__refine_matches( candidates_4 )))))
    {
      return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
    }
    RogueLogical has_generic_fn_12 = (false);
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_940_57,(args_8));
      RogueInt32 _auto_941_58 = (0);
      for (;_auto_941_58 < _auto_940_57->count;++_auto_941_58)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_59,(((RogueClassCmd*)(_auto_940_57->data->objects[_auto_941_58]))));
        if ((call_ROGUEM57( 15, arg_59 )))
        {
          has_generic_fn_12 = ((RogueLogical)true);
          goto _auto_942;
        }
      }
    }
    _auto_942:;
    if (has_generic_fn_12)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassToken*,first_generic_fn_t_13,0);
      {
        ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_943_60,(candidates_4->available));
        RogueInt32 _auto_944_61 = (0);
        for (;_auto_944_61 < _auto_943_60->count;++_auto_944_61)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_62,(((RogueClassMethod*)(_auto_943_60->data->objects[_auto_944_61]))));
          {
            {
              {
                ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_946_63,(args_8));
                RogueInt32 index_64 = (0);
                for (;index_64 < _auto_946_63->count;++index_64)
                {
                  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_14,(((RogueClassCmd*)(args_8->data->objects[index_64]))));
                  if ((call_ROGUEM57( 15, arg_14 )))
                  {
                    if (!(!!(first_generic_fn_t_13)))
                    {
                      first_generic_fn_t_13 = ((RogueClassToken*)arg_14->t);
                    }
                    ROGUE_DEF_LOCAL_REF(RogueClassCmdCreateFunction*,fn_15,(((RogueClassCmdCreateFunction*)(RogueObject_as(arg_14,RogueTypeCmdCreateFunction)))));
                    ROGUE_DEF_LOCAL_REF(RogueClassType*,param_type_16,(((RogueClassLocal*)(m_62->parameters->data->objects[index_64]))->_type));
                    if ( !(((RogueString__begins_with__String( ROGUE_ARG(param_type_16->name), Rogue_literal_strings[872] )))) ) goto _auto_953;
                    RogueInt32 callback_param_count_17 = (0);
                    if (!!(param_type_16->callback_parameter_types))
                    {
                      callback_param_count_17 = ((RogueInt32)param_type_16->callback_parameter_types->count);
                    }
                    RogueInt32 fn_param_count_18 = (0);
                    if (!!(fn_15->parameters))
                    {
                      fn_param_count_18 = ((RogueInt32)fn_15->parameters->count);
                    }
                    if ( !(fn_param_count_18 == callback_param_count_17) ) goto _auto_953;
                  }
                }
              }
              RogueMethodList__add__Method( ROGUE_ARG(candidates_4->compatible), m_62 );
              goto _auto_945;
            }
            _auto_953:;
          }
          _auto_945:;
        }
      }
      if (!(((RogueCandidateMethods__refine_matches( candidates_4 )))))
      {
        return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
      }
      if (((RogueCandidateMethods__has_match( candidates_4 ))))
      {
        ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_19,(((RogueCandidateMethods__match( candidates_4 )))));
        {
          ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_959_65,(args_8));
          RogueInt32 index_66 = (0);
          for (;index_66 < _auto_959_65->count;++index_66)
          {
            ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_20,(((RogueClassCmd*)(args_8->data->objects[index_66]))));
            if ((call_ROGUEM57( 15, arg_20 )))
            {
              ROGUE_DEF_LOCAL_REF(RogueClassCmdCreateFunction*,fn_21,(((RogueCmdCreateFunction__clone__CloneArgs( ROGUE_ARG(((RogueClassCmdCreateFunction*)(RogueObject_as(arg_20,RogueTypeCmdCreateFunction)))), ROGUE_ARG(((RogueClassCloneArgs*)(RogueObject_as(NULL,RogueTypeCloneArgs)))) )))));
              fn_21->is_generic = false;
              args_8->data->objects[index_66] = ((RogueClassCmd*)(fn_21));
              ROGUE_DEF_LOCAL_REF(RogueClassType*,callback_type_22,(((RogueClassLocal*)(m_19->parameters->data->objects[index_66]))->_type));
              if (!!(fn_21->parameters))
              {
                {
                  ROGUE_DEF_LOCAL_REF(RogueFnParamList*,_auto_960_67,(fn_21->parameters));
                  RogueInt32 i_68 = (0);
                  for (;i_68 < _auto_960_67->count;++i_68)
                  {
                    ((RogueClassFnParam*)(fn_21->parameters->data->objects[i_68]))->_type = ((RogueClassType*)(callback_type_22->callback_parameter_types->data->objects[i_68]));
                  }
                }
              }
              fn_21->_return_type = callback_type_22->_callback_return_type;
              if ((!!(fn_21->_return_type) && !!(fn_21->statements->count)))
              {
                ROGUE_DEF_LOCAL_REF(RogueClassCmd*,last_expression_23,(((RogueCmdList__last( ROGUE_ARG(((RogueCmdList*)fn_21->statements)) )))));
                if (!(RogueObject_instance_of(last_expression_23,RogueTypeCmdReturn)))
                {
                  fn_21->statements->data->objects[(fn_21->statements->count - 1)] = ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReturn*,ROGUE_CREATE_OBJECT(CmdReturn))), ROGUE_ARG(last_expression_23->t), last_expression_23 )))));
                }
              }
            }
          }
        }
        return (RogueClassMethod*)(((RogueScope__find_method__Type_CmdAccess_Logical_Logical( ROGUE_ARG(THIS), type_context_0, access_1, error_on_fail_2, suppress_inherited_3 ))));
      }
      else if (candidates_4->available->count == 0)
      {
        ROGUE_THROW(((RogueToken__error__String( first_generic_fn_t_13, Rogue_literal_strings[873] ))));
      }
      else
      {
        ROGUE_THROW(((RogueToken__error__String( first_generic_fn_t_13, Rogue_literal_strings[874] ))));
      }
    }
    {
      ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_961_69,(candidates_4->available));
      RogueInt32 _auto_962_70 = (0);
      for (;_auto_962_70 < _auto_961_69->count;++_auto_962_70)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_71,(((RogueClassMethod*)(_auto_961_69->data->objects[_auto_962_70]))));
        {
          {
            {
              ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_964_72,(args_8));
              RogueInt32 index_73 = (0);
              for (;index_73 < _auto_964_72->count;++index_73)
              {
                ROGUE_DEF_LOCAL_REF(RogueClassType*,arg_type_24,((call_ROGUEM60( 29, ROGUE_ARG(((RogueClassCmd*)(args_8->data->objects[index_73]))) ))));
                ROGUE_DEF_LOCAL_REF(RogueClassType*,param_type_25,(((RogueClassLocal*)(m_71->parameters->data->objects[index_73]))->_type));
                if ( !(((RogueType__is_compatible_with__Type( arg_type_24, param_type_25 )))) ) goto _auto_965;
              }
            }
            RogueMethodList__add__Method( ROGUE_ARG(candidates_4->compatible), m_71 );
            goto _auto_963;
          }
          _auto_965:;
        }
        _auto_963:;
      }
    }
    if (!(((RogueCandidateMethods__refine_matches( candidates_4 )))))
    {
      return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
    }
  }
  if (((RogueCandidateMethods__has_match( candidates_4 ))))
  {
    return (RogueClassMethod*)(((RogueCandidateMethods__match( candidates_4 ))));
  }
  if (!!(arg_count_9))
  {
    if (candidates_4->available->count > 1)
    {
      {
        ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_966_74,(candidates_4->available));
        RogueInt32 _auto_967_75 = (0);
        for (;_auto_967_75 < _auto_966_74->count;++_auto_967_75)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m1_76,(((RogueClassMethod*)(_auto_966_74->data->objects[_auto_967_75]))));
          {
            {
              {
                ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_969_77,(candidates_4->available));
                RogueInt32 _auto_970_78 = (0);
                for (;_auto_970_78 < _auto_969_77->count;++_auto_970_78)
                {
                  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m2_79,(((RogueClassMethod*)(_auto_969_77->data->objects[_auto_970_78]))));
                  if (((void*)m1_76) != ((void*)m2_79))
                  {
                    RogueLogical m2_is_better_26 = (true);
                    {
                      ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_971_80,(args_8));
                      RogueInt32 index_81 = (0);
                      for (;index_81 < _auto_971_80->count;++index_81)
                      {
                        ROGUE_DEF_LOCAL_REF(RogueClassType*,m1_arg_type_27,(((RogueClassLocal*)(m1_76->parameters->data->objects[index_81]))->_type));
                        ROGUE_DEF_LOCAL_REF(RogueClassType*,m2_arg_type_28,(((RogueClassLocal*)(m2_79->parameters->data->objects[index_81]))->_type));
                        if ( !(((RogueType__is_equivalent_or_more_specific_than__Type( m2_arg_type_28, m1_arg_type_27 )))) ) goto _auto_972;
                      }
                    }
                    if (true) goto _auto_973;
                  }
                }
              }
              _auto_973:;
              goto _auto_968;
            }
            _auto_972:;
            RogueMethodList__add__Method( ROGUE_ARG(candidates_4->compatible), m1_76 );
          }
          _auto_968:;
        }
      }
      if (!(((RogueCandidateMethods__refine_matches( candidates_4 )))))
      {
        return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
      }
      if (((RogueCandidateMethods__has_match( candidates_4 ))))
      {
        return (RogueClassMethod*)(((RogueCandidateMethods__match( candidates_4 ))));
      }
    }
  }
  if (((RogueCandidateMethods__has_match( candidates_4 ))))
  {
    return (RogueClassMethod*)(((RogueCandidateMethods__match( candidates_4 ))));
  }
  if (arg_count_9 == 1)
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_974_82,(candidates_4->available));
      RogueInt32 _auto_975_83 = (0);
      for (;_auto_975_83 < _auto_974_82->count;++_auto_975_83)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_84,(((RogueClassMethod*)(_auto_974_82->data->objects[_auto_975_83]))));
        if (m_84->parameters->count == 1)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassType*,arg_type_29,((call_ROGUEM60( 29, ROGUE_ARG(((RogueClassCmd*)(args_8->data->objects[0]))) ))));
          ROGUE_DEF_LOCAL_REF(RogueClassType*,param_type_30,(((RogueClassLocal*)(m_84->parameters->data->objects[0]))->_type));
          RogueType__organize__Scope( param_type_30, ROGUE_ARG(((RogueClassScope*)(NULL))) );
          if ((((void*)param_type_30) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object) && ((RogueType__has_method_named__String( arg_type_29, Rogue_literal_strings[418] )))))
          {
            args_8->data->objects[0] = (call_ROGUEM53( 5, ROGUE_ARG(((RogueClassCmd*)(args_8->data->objects[0]))), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object), ROGUE_ARG(THIS) ));
            return (RogueClassMethod*)(m_84);
          }
          else if ((((void*)param_type_30) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String) && ((RogueType__has_method_named__String( arg_type_29, Rogue_literal_strings[416] )))))
          {
            args_8->data->objects[0] = (call_ROGUEM53( 5, ROGUE_ARG(((RogueClassCmd*)(args_8->data->objects[0]))), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String), ROGUE_ARG(THIS) ));
            return (RogueClassMethod*)(m_84);
          }
          else if (((RogueType__has_method_named__String( arg_type_29, ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[358], ROGUE_ARG(param_type_30->name) )))) ))))
          {
            args_8->data->objects[0] = (call_ROGUEM53( 5, ROGUE_ARG(((RogueClassCmd*)(args_8->data->objects[0]))), param_type_30, ROGUE_ARG(THIS) ));
            return (RogueClassMethod*)(m_84);
          }
        }
      }
    }
  }
  RogueCandidateMethods__update_matches( candidates_4 );
  return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
}

RogueClassScope* RogueScope__init_object( RogueClassScope* THIS )
{
  THIS->local_list = ((RogueLocalList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueLocalList*,ROGUE_CREATE_OBJECT(LocalList))) )));
  THIS->control_stack = ((RogueCmdControlStructureList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueCmdControlStructureList*,ROGUE_CREATE_OBJECT(CmdControlStructureList))) )));
  return (RogueClassScope*)(THIS);
}

RogueString* RogueMethodList__to_String( RogueMethodList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_976_2,(THIS));
    RogueInt32 _auto_977_3 = (0);
    for (;_auto_977_3 < _auto_976_2->count;++_auto_977_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,value_4,(((RogueClassMethod*)(_auto_976_2->data->objects[_auto_977_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG(((RogueMethod__to_String( value_4 )))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueMethodList__type_name( RogueMethodList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[713]);
}

RogueMethodList* RogueMethodList__init_object( RogueMethodList* THIS )
{
  return (RogueMethodList*)(THIS);
}

RogueMethodList* RogueMethodList__init( RogueMethodList* THIS )
{
  RogueMethodList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueMethodList*)(THIS);
}

RogueMethodList* RogueMethodList__init__Int32( RogueMethodList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassMethod*), true );
  }
  return (RogueMethodList*)(THIS);
}

RogueMethodList* RogueMethodList__add__Method( RogueMethodList* THIS, RogueClassMethod* value_0 )
{
  ((RogueMethodList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueMethodList*)(THIS);
}

RogueMethodList* RogueMethodList__add__MethodList( RogueMethodList* THIS, RogueMethodList* other_0 )
{
  RogueMethodList__reserve__Int32( ROGUE_ARG(THIS), ROGUE_ARG(other_0->count) );
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_982_1,(other_0));
    RogueInt32 _auto_983_2 = (0);
    for (;_auto_983_2 < _auto_982_1->count;++_auto_983_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,value_3,(((RogueClassMethod*)(_auto_982_1->data->objects[_auto_983_2]))));
      RogueMethodList__add__Method( ROGUE_ARG(THIS), value_3 );
    }
  }
  return (RogueMethodList*)(THIS);
}

RogueInt32 RogueMethodList__capacity( RogueMethodList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueMethodList* RogueMethodList__clear( RogueMethodList* THIS )
{
  RogueMethodList__discard_from__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueMethodList*)(THIS);
}

void RogueMethodList__discard_from__Int32( RogueMethodList* THIS, RogueInt32 index_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,zero_value_1,0);
  RogueInt32 c_2 = (THIS->count);
  while (c_2 > index_0)
  {
    --c_2;
    THIS->data->objects[c_2] = zero_value_1;
  }
  THIS->count = c_2;
}

RogueOptionalInt32 RogueMethodList__locate__Method( RogueMethodList* THIS, RogueClassMethod* value_0 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_998_1,(THIS));
    RogueInt32 i_2 = (0);
    for (;i_2 < _auto_998_1->count;++i_2)
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)value_0), ROGUE_ARG(((RogueObject*)(((RogueClassMethod*)(THIS->data->objects[i_2]))))) ))))
      {
        return (RogueOptionalInt32)(RogueOptionalInt32( i_2, true ));
      }
    }
  }
  return (RogueOptionalInt32)((RogueOptionalInt32__create()));
}

RogueMethodList* RogueMethodList__reserve__Int32( RogueMethodList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassMethod*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueMethodList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassMethod*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueMethodList*)(THIS);
}

RogueClassMethod* RogueMethodList__remove__Method( RogueMethodList* THIS, RogueClassMethod* value_0 )
{
  RogueOptionalInt32 index_1 = (((RogueMethodList__locate__Method( ROGUE_ARG(THIS), value_0 ))));
  if (index_1.exists)
  {
    return (RogueClassMethod*)(((RogueMethodList__remove_at__Int32( ROGUE_ARG(THIS), ROGUE_ARG(index_1.value) ))));
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassMethod*,zero_value_2,0);
    return (RogueClassMethod*)(zero_value_2);
  }
}

RogueClassMethod* RogueMethodList__remove_at__Int32( RogueMethodList* THIS, RogueInt32 index_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,result_1,(((RogueClassMethod*)(THIS->data->objects[index_0]))));
  RogueArray_set(THIS->data,index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,zero_value_2,0);
  --THIS->count;
  THIS->data->objects[THIS->count] = zero_value_2;
  return (RogueClassMethod*)(result_1);
}

RogueString* RogueMethodArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[754]);
}

RogueString* RogueTemplateArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[755]);
}

RogueString* RogueFunction_Type_RETURNSLogical__type_name( RogueClassFunction_Type_RETURNSLogical* THIS )
{
  return (RogueString*)(Rogue_literal_strings[655]);
}

RogueLogical RogueFunction_Type_RETURNSLogical__call__Type( RogueClassFunction_Type_RETURNSLogical* THIS, RogueClassType* param1_0 )
{
  return (RogueLogical)(false);
}

RogueClassFunction_Type_RETURNSLogical* RogueFunction_Type_RETURNSLogical__init_object( RogueClassFunction_Type_RETURNSLogical* THIS )
{
  return (RogueClassFunction_Type_RETURNSLogical*)(THIS);
}

RogueString* RogueFunction_159__type_name( RogueClassFunction_159* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1052]);
}

RogueLogical RogueFunction_159__call__Type( RogueClassFunction_159* THIS, RogueClassType* type_0 )
{
  return (RogueLogical)((((RogueType__is_class( type_0 ))) && type_0->is_used));
}

RogueClassFunction_159* RogueFunction_159__init_object( RogueClassFunction_159* THIS )
{
  return (RogueClassFunction_159*)(THIS);
}

RogueString* RogueFunction_160__type_name( RogueClassFunction_160* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1053]);
}

RogueLogical RogueFunction_160__call__Type( RogueClassFunction_160* THIS, RogueClassType* type_0 )
{
  return (RogueLogical)((((RogueType__is_aspect( type_0 ))) && type_0->is_used));
}

RogueClassFunction_160* RogueFunction_160__init_object( RogueClassFunction_160* THIS )
{
  return (RogueClassFunction_160*)(THIS);
}

RogueString* RogueCPPWriter__type_name( RogueClassCPPWriter* THIS )
{
  return (RogueString*)(Rogue_literal_strings[656]);
}

RogueClassCPPWriter* RogueCPPWriter__init__String( RogueClassCPPWriter* THIS, RogueString* _auto_184_0 )
{
  THIS->filepath = _auto_184_0;
  return (RogueClassCPPWriter*)(THIS);
}

void RogueCPPWriter__close( RogueClassCPPWriter* THIS )
{
  RogueFile__save__String_String( ROGUE_ARG(((RogueFile__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassFile*,ROGUE_CREATE_OBJECT(File))), ROGUE_ARG(THIS->filepath) )))->filepath), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(THIS->buffer) )))) );
}

void RogueCPPWriter__print_indent( RogueClassCPPWriter* THIS )
{
  if (THIS->needs_indent)
  {
    THIS->needs_indent = false;
    {
      RogueInt32 _auto_182_0 = (1);
      RogueInt32 _auto_183_1 = (THIS->indent);
      for (;_auto_182_0 <= _auto_183_1;++_auto_182_0)
      {
        RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), (RogueCharacter)' ' );
      }
    }
  }
}

RogueClassCPPWriter* RogueCPPWriter__print__Int64( RogueClassCPPWriter* THIS, RogueInt64 value_0 )
{
  RogueCPPWriter__print_indent( ROGUE_ARG(THIS) );
  RogueStringBuilder__print__Int64( ROGUE_ARG(THIS->buffer), value_0 );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print__Int32( RogueClassCPPWriter* THIS, RogueInt32 value_0 )
{
  RogueCPPWriter__print_indent( ROGUE_ARG(THIS) );
  RogueStringBuilder__print__Int32( ROGUE_ARG(THIS->buffer), value_0 );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print__Real64( RogueClassCPPWriter* THIS, RogueReal64 value_0 )
{
  RogueCPPWriter__print_indent( ROGUE_ARG(THIS) );
  RogueStringBuilder__print__Real64( ROGUE_ARG(THIS->buffer), value_0 );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print__Character( RogueClassCPPWriter* THIS, RogueCharacter value_0 )
{
  RogueCPPWriter__print_indent( ROGUE_ARG(THIS) );
  RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), value_0 );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print__String( RogueClassCPPWriter* THIS, RogueString* value_0 )
{
  RogueLogical needs_newline_1 = (false);
  if (((RogueString__contains__String( value_0, ROGUE_ARG(((RogueCharacter__to_String( (RogueCharacter)10 )))) ))))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueClassLineReader*,_auto_1008_2,(((RogueLineReader__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassLineReader*,ROGUE_CREATE_OBJECT(LineReader))), value_0 )))));
      while (((RogueLineReader__has_another( _auto_1008_2 ))))
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,line_3,(((RogueLineReader__read( _auto_1008_2 )))));
        if (needs_newline_1)
        {
          RogueCPPWriter__println( ROGUE_ARG(THIS) );
        }
        RogueCPPWriter__print_indent( ROGUE_ARG(THIS) );
        RogueStringBuilder__print__String( ROGUE_ARG(THIS->buffer), line_3 );
        needs_newline_1 = ((RogueLogical)true);
      }
    }
  }
  else
  {
    RogueCPPWriter__print_indent( ROGUE_ARG(THIS) );
    RogueStringBuilder__print__String( ROGUE_ARG(THIS->buffer), value_0 );
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__println( RogueClassCPPWriter* THIS )
{
  RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), (RogueCharacter)10 );
  ++THIS->line_number;
  THIS->needs_indent = true;
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__println__Int32( RogueClassCPPWriter* THIS, RogueInt32 value_0 )
{
  RogueCPPWriter__print__Int32( ROGUE_ARG(THIS), value_0 );
  RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), (RogueCharacter)10 );
  ++THIS->line_number;
  THIS->needs_indent = true;
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__println__String( RogueClassCPPWriter* THIS, RogueString* value_0 )
{
  RogueCPPWriter__print__String( ROGUE_ARG(THIS), value_0 );
  RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), (RogueCharacter)10 );
  ++THIS->line_number;
  THIS->needs_indent = true;
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print__Type( RogueClassCPPWriter* THIS, RogueClassType* type_0 )
{
  RogueCPPWriter__print_type_name__Type( ROGUE_ARG(THIS), type_0 );
  if ((!!(type_0) && ((RogueType__is_reference( type_0 )))))
  {
    RogueStringBuilder__print__String( ROGUE_ARG(THIS->buffer), Rogue_literal_strings[226] );
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_cast__Type_Type( RogueClassCPPWriter* THIS, RogueClassType* from_type_0, RogueClassType* to_type_1 )
{
  if (((void*)from_type_0) == ((void*)to_type_1))
  {
    return (RogueClassCPPWriter*)(THIS);
  }
  return (RogueClassCPPWriter*)(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[80] )))), to_type_1 )))), Rogue_literal_strings[28] ))));
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_open_cast__Type_Type( RogueClassCPPWriter* THIS, RogueClassType* from_type_0, RogueClassType* to_type_1 )
{
  if (((void*)from_type_0) == ((void*)to_type_1))
  {
    return (RogueClassCPPWriter*)(THIS);
  }
  RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[80] );
  return (RogueClassCPPWriter*)(((RogueCPPWriter__print_cast__Type_Type( ROGUE_ARG(THIS), from_type_0, to_type_1 ))));
}

RogueClassCPPWriter* RogueCPPWriter__print_close_cast__Type_Type( RogueClassCPPWriter* THIS, RogueClassType* from_type_0, RogueClassType* to_type_1 )
{
  if (((void*)from_type_0) == ((void*)to_type_1))
  {
    return (RogueClassCPPWriter*)(THIS);
  }
  RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[28] );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_cast__Type_Type_Cmd( RogueClassCPPWriter* THIS, RogueClassType* from_type_0, RogueClassType* to_type_1, RogueClassCmd* cmd_2 )
{
  if (((void*)from_type_0) == ((void*)to_type_1))
  {
    call_ROGUEM72( 30, cmd_2, ROGUE_ARG(THIS), false );
  }
  else
  {
    RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[80] );
    RogueCPPWriter__print_cast__Type_Type( ROGUE_ARG(THIS), from_type_0, to_type_1 );
    call_ROGUEM72( 30, cmd_2, ROGUE_ARG(THIS), false );
    RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[28] );
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_access_operator__Type( RogueClassCPPWriter* THIS, RogueClassType* type_0 )
{
  if (((RogueType__is_reference( type_0 ))))
  {
    return (RogueClassCPPWriter*)(((RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[187] ))));
  }
  else
  {
    return (RogueClassCPPWriter*)(((RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[64] ))));
  }
}

RogueClassCPPWriter* RogueCPPWriter__print_type_name__Type( RogueClassCPPWriter* THIS, RogueClassType* type_0 )
{
  RogueCPPWriter__print_indent( ROGUE_ARG(THIS) );
  if (!!(type_0))
  {
    RogueStringBuilder__print__String( ROGUE_ARG(THIS->buffer), ROGUE_ARG(type_0->cpp_class_name) );
  }
  else
  {
    RogueStringBuilder__print__String( ROGUE_ARG(THIS->buffer), Rogue_literal_strings[485] );
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_type_info__Type( RogueClassCPPWriter* THIS, RogueClassType* type_0 )
{
  RogueCPPWriter__print_indent( ROGUE_ARG(THIS) );
  RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(THIS->buffer), Rogue_literal_strings[464] )))), ROGUE_ARG(type_0->cpp_name) );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_default_value__Type( RogueClassCPPWriter* THIS, RogueClassType* type_0 )
{
  if (((RogueType__is_compound( type_0 ))))
  {
    RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(THIS), type_0 )))), Rogue_literal_strings[503] );
  }
  else
  {
    RogueStringBuilder__print__String( ROGUE_ARG(THIS->buffer), Rogue_literal_strings[473] );
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_literal_character__Character_Logical( RogueClassCPPWriter* THIS, RogueCharacter ch_0, RogueLogical in_string_1 )
{
  if ((((RogueInt32)(ch_0)) >= 32 && ((RogueInt32)(ch_0)) <= 126))
  {
    switch (((RogueInt32)(ch_0)))
    {
      case (RogueCharacter)'"':
      {
        if (in_string_1)
        {
          RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[581] );
        }
        else
        {
          RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[582] );
        }
        break;
      }
      case (RogueCharacter)'\'':
      {
        if (in_string_1)
        {
          RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[69] );
        }
        else
        {
          RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[583] );
        }
        break;
      }
      case (RogueCharacter)'\\':
      {
        RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[584] );
        break;
      }
      default:
      {
        RogueCPPWriter__print__Character( ROGUE_ARG(THIS), ch_0 );
      }
    }
  }
  else
  {
    switch (((RogueInt32)(ch_0)))
    {
      case 10:
      {
        RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[585] );
        break;
      }
      default:
      {
        RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[189] );
        RogueCPPWriter__print__Int32( ROGUE_ARG(THIS), ROGUE_ARG((((RogueInt32)(ch_0)) / 64)) );
        RogueCPPWriter__print__Int32( ROGUE_ARG(THIS), ROGUE_ARG(((((RogueInt32)(ch_0)) & 63) / 8)) );
        RogueCPPWriter__print__Int32( ROGUE_ARG(THIS), ROGUE_ARG((((RogueInt32)(ch_0)) & 7)) );
      }
    }
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_literal_string__String( RogueClassCPPWriter* THIS, RogueString* st_0 )
{
  if (((void*)st_0) == ((void*)NULL))
  {
    RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[473] );
    return (RogueClassCPPWriter*)(THIS);
  }
  RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[582] );
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,_auto_1010_1,(st_0));
    RogueInt32 _auto_1011_2 = (0);
    for (;_auto_1011_2 < _auto_1010_1->count;++_auto_1011_2)
    {
      RogueCharacter ch_3 = (_auto_1010_1->characters[_auto_1011_2]);
      RogueCPPWriter__print_literal_character__Character_Logical( ROGUE_ARG(THIS), ch_3, true );
    }
  }
  RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[582] );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_native_code__Token_Type_Method_String_Type( RogueClassCPPWriter* THIS, RogueClassToken* t_0, RogueClassType* type_context_1, RogueClassMethod* method_context_2, RogueString* code_3, RogueClassType* result_type_4 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueClassLineReader*,_auto_1012_10,(((RogueLineReader__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassLineReader*,ROGUE_CREATE_OBJECT(LineReader))), code_3 )))));
    while (((RogueLineReader__has_another( _auto_1012_10 ))))
    {
      ROGUE_DEF_LOCAL_REF(RogueString*,line_11,(((RogueLineReader__read( _auto_1012_10 )))));
      RogueInt32 original_indent_5 = (THIS->indent);
      if (((RogueString__begins_with__Character( line_11, (RogueCharacter)'#' ))))
      {
        THIS->indent = 0;
      }
      RogueOptionalInt32 marker_6 = (((RogueString__locate__Character_OptionalInt32( line_11, (RogueCharacter)'$', ROGUE_ARG((RogueOptionalInt32__create())) ))));
      while (marker_6.exists)
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,name_7,0);
        RogueInt32 i1_8 = (marker_6.value);
        if (i1_8 > 0)
        {
          RogueCPPWriter__print__String( ROGUE_ARG(THIS), ROGUE_ARG(((RogueString__leftmost__Int32( line_11, i1_8 )))) );
        }
        RogueInt32 i2_9 = ((i1_8 + 1));
        if ((i2_9 < line_11->count && line_11->characters[i2_9] == (RogueCharacter)'('))
        {
          ++i2_9;
          while ((i2_9 < line_11->count && line_11->characters[i2_9] != (RogueCharacter)')'))
          {
            ++i2_9;
          }
          name_7 = ((RogueString*)((RogueString__from__Int32_Int32( line_11, ROGUE_ARG((i1_8 + 2)), ROGUE_ARG((i2_9 - 1)) ))));
          line_11 = ((RogueString*)((RogueString__from__Int32( line_11, ROGUE_ARG((i2_9 + 1)) ))));
        }
        else
        {
          while ((i2_9 < line_11->count && ((RogueCharacter__is_identifier( ROGUE_ARG(line_11->characters[i2_9]) )))))
          {
            ++i2_9;
          }
          name_7 = ((RogueString*)((RogueString__from__Int32_Int32( line_11, ROGUE_ARG((i1_8 + 1)), ROGUE_ARG((i2_9 - 1)) ))));
          line_11 = ((RogueString*)((RogueString__from__Int32( line_11, i2_9 ))));
        }
        RogueCPPWriter__print_native_marker__Token_Type_Method_String( ROGUE_ARG(THIS), t_0, type_context_1, method_context_2, name_7 );
        marker_6 = ((RogueOptionalInt32)((RogueString__locate__Character_OptionalInt32( line_11, (RogueCharacter)'$', ROGUE_ARG((RogueOptionalInt32__create())) ))));
      }
      if (!!(line_11->count))
      {
        if (!!(result_type_4))
        {
          RogueCPPWriter__print__String( ROGUE_ARG(THIS), line_11 );
        }
        else
        {
          RogueCPPWriter__println__String( ROGUE_ARG(THIS), line_11 );
        }
      }
      THIS->indent = original_indent_5;
    }
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_native_marker__Token_Type_Method_String( RogueClassCPPWriter* THIS, RogueClassToken* t_0, RogueClassType* type_context_1, RogueClassMethod* method_context_2, RogueString* name_3 )
{
  ROGUE_DEF_LOCAL_REF(RogueString*,operation_4,(((RogueString__after_first__Character( name_3, (RogueCharacter)'.' )))));
  name_3 = ((RogueString*)((RogueString__before_first__Character( name_3, (RogueCharacter)'.' ))));
  {
    if (((RogueString__operatorEQUALSEQUALS__String( name_3, Rogue_literal_strings[257] ))))
    {
      RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[257] );
    }
    else if (((RogueString__operatorEQUALSEQUALS__String( name_3, Rogue_literal_strings[182] ))))
    {
      RogueCPPWriter__print_native_code_marker_value__Token_String_String_String_Type( ROGUE_ARG(THIS), t_0, name_3, operation_4, Rogue_literal_strings[497], type_context_1 );
    }
    else
    {
      if (((RogueString__begins_with__Character( name_3, (RogueCharacter)'$' ))))
      {
        if (!!(type_context_1->specializers))
        {
          {
            ROGUE_DEF_LOCAL_REF(RogueTypeSpecializerList*,_auto_1013_7,(type_context_1->specializers));
            RogueInt32 _auto_1014_8 = (0);
            for (;_auto_1014_8 < _auto_1013_7->count;++_auto_1014_8)
            {
              ROGUE_DEF_LOCAL_REF(RogueClassTypeSpecializer*,specializer_9,(((RogueClassTypeSpecializer*)(_auto_1013_7->data->objects[_auto_1014_8]))));
              if (((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(specializer_9->name), name_3 ))))
              {
                {
                  if (((RogueString__operatorEQUALSEQUALS__String( operation_4, Rogue_literal_strings[0] ))))
                  {
                    ROGUE_DEF_LOCAL_REF(RogueClassType*,type_5,(((RogueType__organize__Scope( ROGUE_ARG(((Rogue_Parser__parse_type( ROGUE_ARG(((RogueParser__init__TokenList_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassParser*,ROGUE_CREATE_OBJECT(Parser))), ROGUE_ARG(specializer_9->tokens), false )))) )))), ROGUE_ARG(((RogueClassScope*)(NULL))) )))));
                    RogueCPPWriter__print__Type( ROGUE_ARG(THIS), type_5 );
                  }
                  else
                  {
                    ROGUE_THROW(((RogueToken__error__String( t_0, ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[496] )))), ROGUE_ARG(((RogueString__operatorPLUS__Character( Rogue_literal_strings[0], (RogueCharacter)'$' )))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], name_3 )))) )))), Rogue_literal_strings[64] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], operation_4 )))) )))) )))) ))));
                  }
                }
                goto _auto_1015;
              }
            }
          }
        }
      }
      if (!!(method_context_2))
      {
        {
          ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_1016_10,(method_context_2->locals));
          RogueInt32 _auto_1017_11 = (0);
          for (;_auto_1017_11 < _auto_1016_10->count;++_auto_1017_11)
          {
            ROGUE_DEF_LOCAL_REF(RogueClassLocal*,v_12,(((RogueClassLocal*)(_auto_1016_10->data->objects[_auto_1017_11]))));
            if (((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(v_12->name), name_3 ))))
            {
              RogueCPPWriter__print_native_code_marker_value__Token_String_String_String_Type( ROGUE_ARG(THIS), t_0, name_3, operation_4, ROGUE_ARG(((RogueLocal__cpp_name( v_12 )))), ROGUE_ARG(v_12->_type) );
              goto _auto_1015;
            }
          }
        }
      }
      ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_6,(((RogueString_PropertyTable__get__String( ROGUE_ARG(type_context_1->property_lookup), name_3 )))));
      if (!!(p_6))
      {
        RogueCPPWriter__print_native_code_marker_value__Token_String_String_String_Type( ROGUE_ARG(THIS), t_0, name_3, operation_4, ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[498], ROGUE_ARG(p_6->cpp_name) )))), ROGUE_ARG(p_6->_type) );
        goto _auto_1015;
      }
      RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[257] )))), name_3 );
    }
  }
  _auto_1015:;
  return (RogueClassCPPWriter*)(THIS);
}

void RogueCPPWriter__print_native_code_marker_value__Token_String_String_String_Type( RogueClassCPPWriter* THIS, RogueClassToken* t_0, RogueString* name_1, RogueString* operation_2, RogueString* default_3, RogueClassType* type_4 )
{
  {
    if (((RogueString__operatorEQUALSEQUALS__String( operation_2, Rogue_literal_strings[491] ))))
    {
      if ((!!(type_4) && ((RogueType__is_reference( type_4 )))))
      {
        RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print_cast__Type_Type( ROGUE_ARG(((RogueCPPWriter__print__Character( ROGUE_ARG(THIS), (RogueCharacter)'(' )))), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object), type_4 )))), Rogue_literal_strings[492] );
        RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print_cast__Type_Type( ROGUE_ARG(THIS), type_4, ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object) )))), default_3 )))), Rogue_literal_strings[493] );
      }
      else
      {
        RogueCPPWriter__print__String( ROGUE_ARG(THIS), default_3 );
      }
    }
    else if (((RogueString__operatorEQUALSEQUALS__String( operation_2, Rogue_literal_strings[494] ))))
    {
      if ((!!(type_4) && ((RogueType__is_reference( type_4 )))))
      {
        RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print_cast__Type_Type( ROGUE_ARG(((RogueCPPWriter__print__Character( ROGUE_ARG(THIS), (RogueCharacter)'(' )))), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object), type_4 )))), Rogue_literal_strings[495] );
        RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print_cast__Type_Type( ROGUE_ARG(THIS), type_4, ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object) )))), default_3 )))), Rogue_literal_strings[493] );
      }
      else
      {
        RogueCPPWriter__print__String( ROGUE_ARG(THIS), default_3 );
      }
    }
    else if (((RogueString__operatorEQUALSEQUALS__String( operation_2, Rogue_literal_strings[443] ))))
    {
      RogueCPPWriter__print__Type( ROGUE_ARG(THIS), type_4 );
    }
    else if (((RogueString__operatorEQUALSEQUALS__String( operation_2, Rogue_literal_strings[0] ))))
    {
      RogueCPPWriter__print__String( ROGUE_ARG(THIS), default_3 );
    }
    else
    {
      ROGUE_THROW(((RogueToken__error__String( t_0, ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[496] )))), ROGUE_ARG(((RogueString__operatorPLUS__Character( Rogue_literal_strings[0], (RogueCharacter)'$' )))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], name_1 )))) )))), Rogue_literal_strings[64] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], operation_2 )))) )))) )))) ))));
    }
  }
}

void RogueCPPWriter__print_arg__Cmd_Type_Type( RogueClassCPPWriter* THIS, RogueClassCmd* arg_0, RogueClassType* param_type_1, RogueClassType* cast_to_2 )
{
  RogueInt32 close_paren_3 = (0);
  if (RogueObject_instance_of(arg_0,RogueTypeCmdReadLocal))
  {
  }
  else if (RogueObject_instance_of(arg_0,RogueTypeCmdReadSingleton))
  {
  }
  else if (RogueObject_instance_of(arg_0,RogueTypeCmdLiteral))
  {
  }
  else
  {
    RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[984] );
    ++close_paren_3;
  }
  if ((!!(param_type_1) && ((RogueType__is_aspect( param_type_1 )))))
  {
    RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print_cast__Type_Type( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[80] )))), ROGUE_ARG((call_ROGUEM60( 29, arg_0 ))), param_type_1 )))), Rogue_literal_strings[80] );
    close_paren_3 += 2;
  }
  if (!!(cast_to_2))
  {
    RogueCPPWriter__print_cast__Type_Type_Cmd( ROGUE_ARG(THIS), ROGUE_ARG((call_ROGUEM60( 29, arg_0 ))), cast_to_2, arg_0 );
  }
  else
  {
    call_ROGUEM72( 30, arg_0, ROGUE_ARG(THIS), false );
  }
  while (!!(close_paren_3))
  {
    --close_paren_3;
    RogueCPPWriter__print__String( ROGUE_ARG(THIS), Rogue_literal_strings[28] );
  }
}

void RogueCPPWriter__mark_statement_start__String_Int32_Int32( RogueClassCPPWriter* THIS, RogueString* statement_filepath_0, RogueInt32 start_line_1, RogueInt32 end_line_2 )
{
}

void RogueCPPWriter__mark_statement_end( RogueClassCPPWriter* THIS )
{
}

void RogueCPPWriter__mark_method_start__Type_Method( RogueClassCPPWriter* THIS, RogueClassType* t_0, RogueClassMethod* m_1 )
{
  if (((RogueMethod__omit_output( m_1 ))))
  {
    return;
  }
}

void RogueCPPWriter__mark_method_end( RogueClassCPPWriter* THIS )
{
}

void RogueCPPWriter__mark_routine_start__Method( RogueClassCPPWriter* THIS, RogueClassMethod* m_0 )
{
  if (((RogueMethod__omit_output( m_0 ))))
  {
    return;
  }
}

void RogueCPPWriter__mark_routine_end( RogueClassCPPWriter* THIS )
{
}

RogueClassCPPWriter* RogueCPPWriter__init_object( RogueClassCPPWriter* THIS )
{
  THIS->buffer = ((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )));
  THIS->indent = 0;
  THIS->needs_indent = true;
  THIS->line_number = 1;
  THIS->temp_buffer = ((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )));
  return (RogueClassCPPWriter*)(THIS);
}

RogueString* RogueString_MethodTable__to_String( RogueClassString_MethodTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueString_MethodTable__print_to__StringBuilder( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))) )))) ))));
}

RogueString* RogueString_MethodTable__type_name( RogueClassString_MethodTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[657]);
}

RogueClassString_MethodTable* RogueString_MethodTable__init( RogueClassString_MethodTable* THIS )
{
  RogueString_MethodTable__init__Int32( ROGUE_ARG(THIS), 16 );
  return (RogueClassString_MethodTable*)(THIS);
}

RogueClassString_MethodTable* RogueString_MethodTable__init__Int32( RogueClassString_MethodTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_MethodTableEntryList__init__Int32_String_MethodTableEntry( ROGUE_ARG(ROGUE_CREATE_REF(RogueTableEntry_of_String_MethodList*,ROGUE_CREATE_OBJECT(TableEntry_of_String_MethodList))), bin_count_0, ROGUE_ARG(((RogueClassString_MethodTableEntry*)(NULL))) )));
  THIS->keys = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  return (RogueClassString_MethodTable*)(THIS);
}

void RogueString_MethodTable__clear( RogueClassString_MethodTable* THIS )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_String_MethodList*,_auto_1026_0,(THIS->bins));
    RogueInt32 i_1 = (0);
    for (;i_1 < _auto_1026_0->count;++i_1)
    {
      THIS->bins->data->objects[i_1] = ((RogueClassString_MethodTableEntry*)(NULL));
    }
  }
  RogueStringList__clear( ROGUE_ARG(THIS->keys) );
}

RogueClassString_MethodTableEntry* RogueString_MethodTable__find__String( RogueClassString_MethodTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  ROGUE_DEF_LOCAL_REF(RogueClassString_MethodTableEntry*,entry_2,(((RogueClassString_MethodTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)]))));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_2->key), key_0 )))))
    {
      return (RogueClassString_MethodTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_MethodTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_MethodTableEntry*)(((RogueClassString_MethodTableEntry*)(NULL)));
}

RogueClassMethod* RogueString_MethodTable__get__String( RogueClassString_MethodTable* THIS, RogueString* key_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassString_MethodTableEntry*,entry_1,(((RogueString_MethodTable__find__String( ROGUE_ARG(THIS), key_0 )))));
  if (!!(entry_1))
  {
    return (RogueClassMethod*)(entry_1->value);
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassMethod*,default_value_2,0);
    return (RogueClassMethod*)(default_value_2);
  }
}

RogueClassString_MethodTable* RogueString_MethodTable__set__String_Method( RogueClassString_MethodTable* THIS, RogueString* key_0, RogueClassMethod* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  ROGUE_DEF_LOCAL_REF(RogueClassString_MethodTableEntry*,entry_4,(((RogueClassString_MethodTableEntry*)(THIS->bins->data->objects[index_3]))));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_4->key), key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_MethodTable*)(THIS);
    }
    entry_4 = ((RogueClassString_MethodTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_MethodTableEntry*)((RogueString_MethodTableEntry__init__String_Method_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_MethodTableEntry*,ROGUE_CREATE_OBJECT(String_MethodTableEntry))), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_MethodTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( ROGUE_ARG(THIS->keys), key_0 );
  return (RogueClassString_MethodTable*)(THIS);
}

RogueStringBuilder* RogueString_MethodTable__print_to__StringBuilder( RogueClassString_MethodTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    ROGUE_DEF_LOCAL_REF(RogueString*,key_2,(((RogueString*)(THIS->keys->data->objects[i_1]))));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ROGUE_ARG(((RogueObject*)(((RogueString_MethodTable__get__String( ROGUE_ARG(THIS), key_2 )))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_MethodTable* RogueString_MethodTable__init_object( RogueClassString_MethodTable* THIS )
{
  return (RogueClassString_MethodTable*)(THIS);
}

RogueString* RogueLocalList__to_String( RogueLocalList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_1027_2,(THIS));
    RogueInt32 _auto_1028_3 = (0);
    for (;_auto_1028_3 < _auto_1027_2->count;++_auto_1028_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassLocal*,value_4,(((RogueClassLocal*)(_auto_1027_2->data->objects[_auto_1028_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueLocalList__type_name( RogueLocalList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[714]);
}

RogueLocalList* RogueLocalList__init_object( RogueLocalList* THIS )
{
  return (RogueLocalList*)(THIS);
}

RogueLocalList* RogueLocalList__init( RogueLocalList* THIS )
{
  RogueLocalList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueLocalList*)(THIS);
}

RogueLocalList* RogueLocalList__init__Int32( RogueLocalList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassLocal*), true );
  }
  return (RogueLocalList*)(THIS);
}

RogueLocalList* RogueLocalList__add__Local( RogueLocalList* THIS, RogueClassLocal* value_0 )
{
  ((RogueLocalList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueLocalList*)(THIS);
}

RogueInt32 RogueLocalList__capacity( RogueLocalList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueLocalList* RogueLocalList__clear( RogueLocalList* THIS )
{
  RogueLocalList__discard_from__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueLocalList*)(THIS);
}

void RogueLocalList__discard_from__Int32( RogueLocalList* THIS, RogueInt32 index_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassLocal*,zero_value_1,0);
  RogueInt32 c_2 = (THIS->count);
  while (c_2 > index_0)
  {
    --c_2;
    THIS->data->objects[c_2] = zero_value_1;
  }
  THIS->count = c_2;
}

RogueLocalList* RogueLocalList__reserve__Int32( RogueLocalList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassLocal*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueLocalList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassLocal*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueLocalList*)(THIS);
}

RogueClassLocal* RogueLocalList__remove_at__Int32( RogueLocalList* THIS, RogueInt32 index_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassLocal*,result_1,(((RogueClassLocal*)(THIS->data->objects[index_0]))));
  RogueArray_set(THIS->data,index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  ROGUE_DEF_LOCAL_REF(RogueClassLocal*,zero_value_2,0);
  --THIS->count;
  THIS->data->objects[THIS->count] = zero_value_2;
  return (RogueClassLocal*)(result_1);
}

RogueClassLocal* RogueLocalList__remove_last( RogueLocalList* THIS )
{
  return (RogueClassLocal*)(((RogueLocalList__remove_at__Int32( ROGUE_ARG(THIS), ROGUE_ARG((THIS->count - 1)) ))));
}

RogueString* RogueLocal__type_name( RogueClassLocal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[658]);
}

RogueClassLocal* RogueLocal__init__Token_String( RogueClassLocal* THIS, RogueClassToken* _auto_211_0, RogueString* _auto_212_1 )
{
  THIS->name = _auto_212_1;
  THIS->t = _auto_211_0;
  THIS->original_name = THIS->name;
  return (RogueClassLocal*)(THIS);
}

RogueClassLocal* RogueLocal__clone__CloneArgs( RogueClassLocal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassLocal*,result_1,(((RogueLocal__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassLocal*,ROGUE_CREATE_OBJECT(Local))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->name) )))));
  result_1->original_name = THIS->original_name;
  result_1->_cpp_name = THIS->_cpp_name;
  result_1->_type = THIS->_type;
  result_1->index = THIS->index;
  if (!!(THIS->initial_value))
  {
    result_1->initial_value = (call_ROGUEM71( 6, ROGUE_ARG(THIS->initial_value), clone_args_0 ));
  }
  return (RogueClassLocal*)(result_1);
}

RogueString* RogueLocal__cpp_name( RogueClassLocal* THIS )
{
  if (!(!!(THIS->_cpp_name)))
  {
    THIS->_cpp_name = ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(((RogueString__operatorPLUS__Int32( ROGUE_ARG(((RogueString__operatorPLUS__String( ROGUE_ARG(THIS->name), Rogue_literal_strings[425] )))), ROGUE_ARG(THIS->index) )))) )));
  }
  return (RogueString*)(THIS->_cpp_name);
}

RogueClassLocal* RogueLocal__init_object( RogueClassLocal* THIS )
{
  return (RogueClassLocal*)(THIS);
}

RogueString* RogueLocalArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[756]);
}

RogueString* RogueInt32List__to_String( RogueInt32List* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueInt32List*,_auto_1059_2,(THIS));
    RogueInt32 _auto_1060_3 = (0);
    for (;_auto_1060_3 < _auto_1059_2->count;++_auto_1060_3)
    {
      RogueInt32 value_4 = (_auto_1059_2->data->integers[_auto_1060_3]);
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if ((false))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG(((RogueInt32__to_String( value_4 )))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueInt32List__type_name( RogueInt32List* THIS )
{
  return (RogueString*)(Rogue_literal_strings[715]);
}

RogueInt32List* RogueInt32List__init_object( RogueInt32List* THIS )
{
  return (RogueInt32List*)(THIS);
}

RogueInt32List* RogueInt32List__init( RogueInt32List* THIS )
{
  RogueInt32List__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueInt32List*)(THIS);
}

RogueInt32List* RogueInt32List__init__Int32( RogueInt32List* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueInt32) );
  }
  return (RogueInt32List*)(THIS);
}

RogueInt32List* RogueInt32List__add__Int32( RogueInt32List* THIS, RogueInt32 value_0 )
{
  ((RogueInt32List__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->integers[THIS->count] = value_0;
  ++THIS->count;
  return (RogueInt32List*)(THIS);
}

RogueInt32 RogueInt32List__capacity( RogueInt32List* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueInt32List* RogueInt32List__reserve__Int32( RogueInt32List* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueInt32) );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueInt32List__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueInt32) )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueInt32List*)(THIS);
}

RogueString* RogueInt32Array__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[757]);
}

RogueString* RogueMath__type_name( RogueClassMath* THIS )
{
  return (RogueString*)(Rogue_literal_strings[659]);
}

RogueClassMath* RogueMath__init_object( RogueClassMath* THIS )
{
  return (RogueClassMath*)(THIS);
}

RogueString* RogueByteList__to_String( RogueByteList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueByteList*,_auto_1091_2,(THIS));
    RogueInt32 _auto_1092_3 = (0);
    for (;_auto_1092_3 < _auto_1091_2->count;++_auto_1092_3)
    {
      RogueByte value_4 = (_auto_1091_2->data->bytes[_auto_1092_3]);
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if ((false))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG(((RogueByte__to_String( value_4 )))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueByteList__type_name( RogueByteList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[716]);
}

RogueByteList* RogueByteList__init_object( RogueByteList* THIS )
{
  return (RogueByteList*)(THIS);
}

RogueByteList* RogueByteList__init( RogueByteList* THIS )
{
  RogueByteList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueByteList*)(THIS);
}

RogueByteList* RogueByteList__init__Int32( RogueByteList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueByte) );
  }
  return (RogueByteList*)(THIS);
}

RogueByteList* RogueByteList__add__Byte( RogueByteList* THIS, RogueByte value_0 )
{
  ((RogueByteList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->bytes[THIS->count] = value_0;
  ++THIS->count;
  return (RogueByteList*)(THIS);
}

RogueInt32 RogueByteList__capacity( RogueByteList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueByteList* RogueByteList__clear( RogueByteList* THIS )
{
  RogueByteList__discard_from__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueByteList*)(THIS);
}

void RogueByteList__discard_from__Int32( RogueByteList* THIS, RogueInt32 index_0 )
{
  RogueByte zero_value_1 = 0;
  RogueInt32 c_2 = (THIS->count);
  while (c_2 > index_0)
  {
    --c_2;
    THIS->data->bytes[c_2] = zero_value_1;
  }
  THIS->count = c_2;
}

RogueByteList* RogueByteList__insert__Byte_Int32( RogueByteList* THIS, RogueByte value_0, RogueInt32 before_index_1 )
{
  if (before_index_1 < 0)
  {
    before_index_1 = ((RogueInt32)0);
  }
  if (before_index_1 >= THIS->count)
  {
    return (RogueByteList*)(((RogueByteList__add__Byte( ROGUE_ARG(THIS), value_0 ))));
  }
  else
  {
    RogueByteList__reserve__Int32( ROGUE_ARG(THIS), 1 );
    RogueArray_set(THIS->data,(before_index_1 + 1),((RogueArray*)(THIS->data)),before_index_1,(THIS->count - before_index_1));
    ++THIS->count;
    THIS->data->bytes[before_index_1] = value_0;
  }
  return (RogueByteList*)(THIS);
}

RogueByteList* RogueByteList__reserve__Int32( RogueByteList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueByte) );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueByteList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueByte) )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueByteList*)(THIS);
}

RogueByte RogueByteList__remove_at__Int32( RogueByteList* THIS, RogueInt32 index_0 )
{
  RogueByte result_1 = (THIS->data->bytes[index_0]);
  RogueArray_set(THIS->data,index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  RogueByte zero_value_2 = 0;
  --THIS->count;
  THIS->data->bytes[THIS->count] = zero_value_2;
  return (RogueByte)(result_1);
}

RogueByte RogueByteList__remove_last( RogueByteList* THIS )
{
  return (RogueByte)(((RogueByteList__remove_at__Int32( ROGUE_ARG(THIS), ROGUE_ARG((THIS->count - 1)) ))));
}

RogueByteList* RogueByteList__reverse( RogueByteList* THIS )
{
  return (RogueByteList*)(((RogueByteList__reverse__Int32_Int32( ROGUE_ARG(THIS), 0, ROGUE_ARG((THIS->count - 1)) ))));
}

RogueByteList* RogueByteList__reverse__Int32_Int32( RogueByteList* THIS, RogueInt32 i1_0, RogueInt32 i2_1 )
{
  if (i1_0 < 0)
  {
    i1_0 = ((RogueInt32)0);
  }
  if (i2_1 >= THIS->count)
  {
    i2_1 = ((RogueInt32)(THIS->count - 1));
  }
  ROGUE_DEF_LOCAL_REF(RogueArray*,_data_2,(THIS->data));
  while (i1_0 < i2_1)
  {
    RogueByte temp_3 = (_data_2->bytes[i1_0]);
    _data_2->bytes[i1_0] = _data_2->bytes[i2_1];
    _data_2->bytes[i2_1] = temp_3;
    ++i1_0;
    --i2_1;
  }
  return (RogueByteList*)(THIS);
}

RogueString* RogueByteArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[758]);
}

RogueString* RogueSystem__type_name( RogueClassSystem* THIS )
{
  return (RogueString*)(Rogue_literal_strings[660]);
}

RogueClassSystem* RogueSystem__init_object( RogueClassSystem* THIS )
{
  return (RogueClassSystem*)(THIS);
}

RogueString* RogueString_LogicalTable__to_String( RogueClassString_LogicalTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueString_LogicalTable__print_to__StringBuilder( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))) )))) ))));
}

RogueString* RogueString_LogicalTable__type_name( RogueClassString_LogicalTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[661]);
}

RogueClassString_LogicalTable* RogueString_LogicalTable__init( RogueClassString_LogicalTable* THIS )
{
  RogueString_LogicalTable__init__Int32( ROGUE_ARG(THIS), 16 );
  return (RogueClassString_LogicalTable*)(THIS);
}

RogueClassString_LogicalTable* RogueString_LogicalTable__init__Int32( RogueClassString_LogicalTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_LogicalTableEntryList__init__Int32_String_LogicalTableEntry( ROGUE_ARG(ROGUE_CREATE_REF(RogueTableEntry_of_String_LogicalList*,ROGUE_CREATE_OBJECT(TableEntry_of_String_LogicalList))), bin_count_0, ROGUE_ARG(((RogueClassString_LogicalTableEntry*)(NULL))) )));
  THIS->keys = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  return (RogueClassString_LogicalTable*)(THIS);
}

RogueLogical RogueString_LogicalTable__contains__String( RogueClassString_LogicalTable* THIS, RogueString* key_0 )
{
  return (RogueLogical)(!!(((RogueString_LogicalTable__find__String( ROGUE_ARG(THIS), key_0 )))));
}

RogueClassString_LogicalTableEntry* RogueString_LogicalTable__find__String( RogueClassString_LogicalTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  ROGUE_DEF_LOCAL_REF(RogueClassString_LogicalTableEntry*,entry_2,(((RogueClassString_LogicalTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)]))));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_2->key), key_0 )))))
    {
      return (RogueClassString_LogicalTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_LogicalTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_LogicalTableEntry*)(((RogueClassString_LogicalTableEntry*)(NULL)));
}

RogueLogical RogueString_LogicalTable__get__String( RogueClassString_LogicalTable* THIS, RogueString* key_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassString_LogicalTableEntry*,entry_1,(((RogueString_LogicalTable__find__String( ROGUE_ARG(THIS), key_0 )))));
  if (!!(entry_1))
  {
    return (RogueLogical)(entry_1->value);
  }
  else
  {
    RogueLogical default_value_2 = 0;
    return (RogueLogical)(default_value_2);
  }
}

RogueClassString_LogicalTable* RogueString_LogicalTable__set__String_Logical( RogueClassString_LogicalTable* THIS, RogueString* key_0, RogueLogical value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  ROGUE_DEF_LOCAL_REF(RogueClassString_LogicalTableEntry*,entry_4,(((RogueClassString_LogicalTableEntry*)(THIS->bins->data->objects[index_3]))));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_4->key), key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_LogicalTable*)(THIS);
    }
    entry_4 = ((RogueClassString_LogicalTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_LogicalTableEntry*)((RogueString_LogicalTableEntry__init__String_Logical_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_LogicalTableEntry*,ROGUE_CREATE_OBJECT(String_LogicalTableEntry))), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_LogicalTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( ROGUE_ARG(THIS->keys), key_0 );
  return (RogueClassString_LogicalTable*)(THIS);
}

RogueStringBuilder* RogueString_LogicalTable__print_to__StringBuilder( RogueClassString_LogicalTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    ROGUE_DEF_LOCAL_REF(RogueString*,key_2,(((RogueString*)(THIS->keys->data->objects[i_1]))));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Logical( buffer_0, ROGUE_ARG(((RogueString_LogicalTable__get__String( ROGUE_ARG(THIS), key_2 )))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_LogicalTable* RogueString_LogicalTable__init_object( RogueClassString_LogicalTable* THIS )
{
  return (RogueClassString_LogicalTable*)(THIS);
}

RogueString* RogueParserList__to_String( RogueParserList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueParserList*,_auto_1143_2,(THIS));
    RogueInt32 _auto_1144_3 = (0);
    for (;_auto_1144_3 < _auto_1143_2->count;++_auto_1144_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassParser*,value_4,(((RogueClassParser*)(_auto_1143_2->data->objects[_auto_1144_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueParserList__type_name( RogueParserList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[717]);
}

RogueParserList* RogueParserList__init_object( RogueParserList* THIS )
{
  return (RogueParserList*)(THIS);
}

RogueParserList* RogueParserList__init( RogueParserList* THIS )
{
  RogueParserList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueParserList*)(THIS);
}

RogueParserList* RogueParserList__init__Int32( RogueParserList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassParser*), true );
  }
  return (RogueParserList*)(THIS);
}

RogueParserList* RogueParserList__add__Parser( RogueParserList* THIS, RogueClassParser* value_0 )
{
  ((RogueParserList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueParserList*)(THIS);
}

RogueInt32 RogueParserList__capacity( RogueParserList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueParserList* RogueParserList__reserve__Int32( RogueParserList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassParser*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueParserList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassParser*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueParserList*)(THIS);
}

RogueString* RogueParser__type_name( RogueClassParser* THIS )
{
  return (RogueString*)(Rogue_literal_strings[662]);
}

RogueClassParser* RogueParser__init__String( RogueClassParser* THIS, RogueString* _auto_363_0 )
{
  THIS->filepath = _auto_363_0;
  RogueParser__init__TokenList_Logical( ROGUE_ARG(THIS), ROGUE_ARG(((RoguePreprocessor__process__TokenList( ROGUE_ARG(((RoguePreprocessor__init__Parser( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassPreprocessor*,ROGUE_CREATE_OBJECT(Preprocessor))), ROGUE_ARG(THIS) )))), ROGUE_ARG(((RogueTokenizer__tokenize__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenizer*,ROGUE_CREATE_OBJECT(Tokenizer))), ROGUE_ARG(THIS->filepath) )))) )))), true );
  return (RogueClassParser*)(THIS);
}

RogueClassParser* RogueParser__init__Token_String_String( RogueClassParser* THIS, RogueClassToken* t_0, RogueString* _auto_364_1, RogueString* data_2 )
{
  THIS->filepath = _auto_364_1;
  RogueParser__init__TokenList_Logical( ROGUE_ARG(THIS), ROGUE_ARG(((RoguePreprocessor__process__TokenList( ROGUE_ARG(((RoguePreprocessor__init__Parser( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassPreprocessor*,ROGUE_CREATE_OBJECT(Preprocessor))), ROGUE_ARG(THIS) )))), ROGUE_ARG(((RogueTokenizer__tokenize__Token_String_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenizer*,ROGUE_CREATE_OBJECT(Tokenizer))), t_0, ROGUE_ARG(THIS->filepath), data_2 )))) )))), true );
  return (RogueClassParser*)(THIS);
}

RogueClassParser* RogueParser__init__TokenList_Logical( RogueClassParser* THIS, RogueTokenList* tokens_0, RogueLogical skip_reprocess_1 )
{
  if (!(skip_reprocess_1))
  {
    tokens_0 = ((RogueTokenList*)((RoguePreprocessor__reprocess__TokenList( ROGUE_ARG(((RoguePreprocessor__init__Parser( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassPreprocessor*,ROGUE_CREATE_OBJECT(Preprocessor))), ROGUE_ARG(THIS) )))), tokens_0 ))));
  }
  THIS->reader = ((RogueTokenReader__init__TokenList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenReader*,ROGUE_CREATE_OBJECT(TokenReader))), tokens_0 )));
  return (RogueClassParser*)(THIS);
}

void RogueParser__add_used_module__String( RogueClassParser* THIS, RogueString* module_name_0 )
{
  if (((RogueStringList__locate__String( ROGUE_ARG(THIS->used_modules), module_name_0 ))).exists)
  {
    return;
  }
  RogueStringList__add__String( ROGUE_ARG(THIS->used_modules), module_name_0 );
  ROGUE_DEF_LOCAL_REF(RogueStringList*,module_ids_1,(((RogueString_StringListTable__get__String( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->ids_by_module), module_name_0 )))));
  if (!!(module_ids_1))
  {
    if (!(!!(THIS->module_id_map)))
    {
      THIS->module_id_map = ((RogueString_StringTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_StringTable*,ROGUE_CREATE_OBJECT(String_StringTable))) )));
    }
    {
      ROGUE_DEF_LOCAL_REF(RogueStringList*,_auto_1195_2,(module_ids_1));
      RogueInt32 _auto_1196_3 = (0);
      for (;_auto_1196_3 < _auto_1195_2->count;++_auto_1196_3)
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,m_id_4,(((RogueString*)(_auto_1195_2->data->objects[_auto_1196_3]))));
        RogueString_StringTable__set__String_String( ROGUE_ARG(THIS->module_id_map), m_id_4, ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], module_name_0 )))) )))), Rogue_literal_strings[82] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], m_id_4 )))) )))) )))) );
      }
    }
  }
}

RogueLogical RogueParser__consume__TokenType( RogueClassParser* THIS, RogueClassTokenType* type_0 )
{
  if (!(((RogueTokenReader__next_is__TokenType( ROGUE_ARG(THIS->reader), type_0 )))))
  {
    return (RogueLogical)(false);
  }
  RogueTokenReader__read( ROGUE_ARG(THIS->reader) );
  return (RogueLogical)(true);
}

RogueLogical RogueParser__consume__String( RogueClassParser* THIS, RogueString* identifier_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueTokenReader__peek( ROGUE_ARG(THIS->reader) )))));
  if (((void*)t_1->_type) != ((void*)RogueTokenType_identifier))
  {
    return (RogueLogical)(false);
  }
  if (((RogueString__operatorLTGT__String( ROGUE_ARG((call_ROGUEM39( 1, t_1 ))), identifier_0 ))) != 0)
  {
    return (RogueLogical)(false);
  }
  RogueParser__read( ROGUE_ARG(THIS) );
  return (RogueLogical)(true);
}

RogueLogical RogueParser__consume_end_commands( RogueClassParser* THIS )
{
  RogueLogical found_0 = (false);
  while ((((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_eol) ))) || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_semicolon) )))))
  {
    found_0 = ((RogueLogical)true);
  }
  return (RogueLogical)(found_0);
}

RogueLogical RogueParser__consume_eols( RogueClassParser* THIS )
{
  RogueLogical found_any_0 = (false);
  while (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_eol) ))))
  {
    found_any_0 = ((RogueLogical)true);
  }
  return (RogueLogical)(found_any_0);
}

RogueClassRogueError* RogueParser__error__String( RogueClassParser* THIS, RogueString* message_0 )
{
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(((RogueTokenReader__peek( ROGUE_ARG(THIS->reader) )))), message_0 ))));
}

void RogueParser__insert_module_prefixes( RogueClassParser* THIS )
{
  while (((RogueTokenReader__has_another( ROGUE_ARG(THIS->reader) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_0,(((RogueTokenReader__read( ROGUE_ARG(THIS->reader) )))));
    if (((void*)t_0->_type) == ((void*)RogueTokenType_identifier))
    {
      ROGUE_DEF_LOCAL_REF(RogueString*,name_1,((call_ROGUEM39( 1, t_0 ))));
      if (name_1->characters[0] == (RogueCharacter)':')
      {
        THIS->reader->tokens->data->objects[(THIS->reader->position - 1)] = (call_ROGUEM96( 11, ROGUE_ARG(t_0->_type), t_0, ROGUE_ARG(((RogueString__from__Int32( name_1, 2 )))) ));
      }
      else if (!!(THIS->module_id_map))
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,mapping_2,(((RogueString_StringTable__get__String( ROGUE_ARG(THIS->module_id_map), name_1 )))));
        if (!!(mapping_2))
        {
          THIS->reader->tokens->data->objects[(THIS->reader->position - 1)] = (call_ROGUEM96( 11, ROGUE_ARG(t_0->_type), t_0, mapping_2 ));
        }
      }
    }
    else if (((void*)t_0->_type) == ((void*)RogueTokenType_directive_module))
    {
      RogueParser__add_used_module__String( ROGUE_ARG(THIS), ROGUE_ARG(((RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false )))) );
    }
    else if (((void*)t_0->_type) == ((void*)RogueTokenType_directive_using))
    {
      RogueParser__add_used_module__String( ROGUE_ARG(THIS), ROGUE_ARG(((RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false )))) );
    }
  }
  THIS->reader->position = 0;
}

void RogueParser__must_consume__TokenType_String( RogueClassParser* THIS, RogueClassTokenType* type_0, RogueString* error_message_1 )
{
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), type_0 ))))
  {
    return;
  }
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_2,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  if (!(!!(error_message_1)))
  {
    error_message_1 = ((RogueString*)((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(((RogueTokenType__quoted_name( type_0 )))) )))) )))), Rogue_literal_strings[273] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM39( 8, t_2 ))) )))) )))), Rogue_literal_strings[64] )))) ))));
  }
  ROGUE_THROW(((RogueToken__error__String( t_2, error_message_1 ))));
}

void RogueParser__must_consume_eols( RogueClassParser* THIS )
{
  RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_eol), ROGUE_ARG(((RogueString*)(NULL))) );
  RogueParser__consume_eols( ROGUE_ARG(THIS) );
}

RogueClassToken* RogueParser__must_read__TokenType( RogueClassParser* THIS, RogueClassTokenType* type_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueTokenReader__peek( ROGUE_ARG(THIS->reader) )))));
  if (((void*)t_1->_type) != ((void*)type_0))
  {
    RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), type_0, ROGUE_ARG(((RogueString*)(NULL))) );
  }
  return (RogueClassToken*)(((RogueTokenReader__read( ROGUE_ARG(THIS->reader) ))));
}

RogueLogical RogueParser__next_is__TokenType( RogueClassParser* THIS, RogueClassTokenType* type_0 )
{
  return (RogueLogical)(((RogueTokenReader__next_is__TokenType( ROGUE_ARG(THIS->reader), type_0 ))));
}

RogueLogical RogueParser__next_is_end_command( RogueClassParser* THIS )
{
  if (!(((RogueTokenReader__has_another( ROGUE_ARG(THIS->reader) )))))
  {
    return (RogueLogical)(false);
  }
  ROGUE_DEF_LOCAL_REF(RogueClassTokenType*,type_0,(((RogueTokenReader__peek( ROGUE_ARG(THIS->reader) )))->_type));
  return (RogueLogical)((((void*)type_0) == ((void*)RogueTokenType_eol) || ((void*)type_0) == ((void*)RogueTokenType_symbol_semicolon)));
}

RogueLogical RogueParser__next_is_statement( RogueClassParser* THIS )
{
  if (!(((RogueTokenReader__has_another( ROGUE_ARG(THIS->reader) )))))
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(((RogueTokenReader__next_is_statement_token( ROGUE_ARG(THIS->reader) ))));
}

void RogueParser__parse_elements( RogueClassParser* THIS )
{
  while (((RogueParser__parse_element( ROGUE_ARG(THIS) ))))
  {
  }
  if (((RogueTokenReader__has_another( ROGUE_ARG(THIS->reader) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_0,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
    ROGUE_THROW(((RogueToken__error__String( t_0, ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[328] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM39( 8, t_0 ))) )))) )))), Rogue_literal_strings[64] )))) )))) ))));
  }
}

RogueLogical RogueParser__parse_element( RogueClassParser* THIS )
{
  RogueParser__consume_eols( ROGUE_ARG(THIS) );
  if (!(((RogueTokenReader__has_another( ROGUE_ARG(THIS->reader) )))))
  {
    return (RogueLogical)(false);
  }
  if (((RogueParser__parse_native_elements( ROGUE_ARG(THIS) ))))
  {
    return (RogueLogical)(true);
  }
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_0,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  if (((void*)t_0->_type) == ((void*)RogueTokenType_keyword_class))
  {
    RogueParser__parse_class_template( ROGUE_ARG(THIS) );
    return (RogueLogical)(true);
  }
  else if (((void*)t_0->_type) == ((void*)RogueTokenType_keyword_routine))
  {
    RogueParser__parse_routine( ROGUE_ARG(THIS) );
    return (RogueLogical)(true);
  }
  else if (((void*)t_0->_type) == ((void*)RogueTokenType_keyword_augment))
  {
    RogueParser__parse_augment( ROGUE_ARG(THIS) );
    return (RogueLogical)(true);
  }
  else if (((void*)t_0->_type) == ((void*)RogueTokenType_directive_module))
  {
    RogueParser__read( ROGUE_ARG(THIS) );
    RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false );
    RogueParser__must_consume_eols( ROGUE_ARG(THIS) );
    return (RogueLogical)(true);
  }
  else if (((void*)t_0->_type) == ((void*)RogueTokenType_directive_using))
  {
    RogueParser__read( ROGUE_ARG(THIS) );
    RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false );
    RogueParser__must_consume_eols( ROGUE_ARG(THIS) );
    return (RogueLogical)(true);
  }
  else if (((RogueParser__next_is_statement( ROGUE_ARG(THIS) ))))
  {
    THIS->_this_type = ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))), Rogue_literal_strings[57] )));
    THIS->this_method = ((RogueProgram__get_launch_method__Token( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), t_0 )));
    RogueParser__parse_multi_line_statements__CmdStatementList( ROGUE_ARG(THIS), ROGUE_ARG(THIS->this_method->statements) );
    return (RogueLogical)(true);
  }
  return (RogueLogical)(false);
}

void RogueParser__parse_class_template( RogueClassParser* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_0,(((RogueParser__read( ROGUE_ARG(THIS) )))));
  ROGUE_DEF_LOCAL_REF(RogueString*,name_1,(((RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false )))));
  ROGUE_DEF_LOCAL_REF(RogueClassTemplate*,template_2,(((RogueTemplate__init__Token_String_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTemplate*,ROGUE_CREATE_OBJECT(Template))), t_0, name_1, 0 )))));
  RogueParser__parse_template_tokens__Template_TokenType( ROGUE_ARG(THIS), template_2, ROGUE_ARG(RogueTokenType_keyword_endClass) );
  switch (((Rogue_Template__element_type( template_2 ))))
  {
    case 3:
    {
      RogueAttributes__add__Int32( ROGUE_ARG(template_2->attributes), 16 );
      break;
    }
  }
}

void RogueParser__parse_routine( RogueClassParser* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_0,(((RogueParser__read( ROGUE_ARG(THIS) )))));
  ROGUE_DEF_LOCAL_REF(RogueString*,name_1,(((RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false )))));
  ROGUE_DEF_LOCAL_REF(RogueClassTemplate*,template_2,(((RogueTemplate__init__Token_String_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTemplate*,ROGUE_CREATE_OBJECT(Template))), t_0, name_1, 1048576 )))));
  RogueParser__parse_template_tokens__Template_TokenType( ROGUE_ARG(THIS), template_2, ROGUE_ARG(RogueTokenType_keyword_endRoutine) );
}

void RogueParser__parse_template_tokens__Template_TokenType( RogueClassParser* THIS, RogueClassTemplate* template_0, RogueClassTokenType* end_type_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,first_t_2,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  RogueLogical is_routine_3 = (((void*)end_type_1) == ((void*)RogueTokenType_keyword_endRoutine));
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_specialize) ))))
  {
    RogueLogical first_4 = (true);
    while ((first_4 || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) )))))
    {
      first_4 = ((RogueLogical)false);
      ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_5,(((RogueParser__must_read__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_placeholder_id) )))));
      ROGUE_DEF_LOCAL_REF(RogueClassTypeParameter*,param_6,(((RogueTemplate__add_type_parameter__Token_String( template_0, t_5, ROGUE_ARG((call_ROGUEM39( 1, t_5 ))) )))));
    }
    RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_specialize), ROGUE_ARG(((RogueString*)(NULL))) );
  }
  RogueInt32 starting_pos_7 = (THIS->reader->position);
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_paren) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    if (!(((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren) )))))
    {
      RogueLogical first_8 = (true);
      while ((first_8 || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) )))))
      {
        first_8 = ((RogueLogical)false);
        RogueParser__consume_eols( ROGUE_ARG(THIS) );
        RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_ampersand) );
        RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false );
        RogueParser__consume_eols( ROGUE_ARG(THIS) );
        if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_equals) ))))
        {
          RogueParser__parse_expression( ROGUE_ARG(THIS) );
        }
        RogueParser__consume_eols( ROGUE_ARG(THIS) );
        if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_colon) ))))
        {
          if (!(((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_placeholder_id) )))))
          {
            RogueParser__parse_possible_type__Logical( ROGUE_ARG(THIS), false );
          }
        }
        RogueParser__consume_eols( ROGUE_ARG(THIS) );
      }
      RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren), ROGUE_ARG(((RogueString*)(NULL))) );
    }
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_colon) ))))
  {
    RogueParser__parse_possible_type__Logical( ROGUE_ARG(THIS), false );
    while (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) ))))
    {
      RogueParser__parse_possible_type__Logical( ROGUE_ARG(THIS), false );
    }
  }
  RogueInt32 final_pos_9 = (THIS->reader->position);
  if (is_routine_3)
  {
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_arrow) ))))
    {
      RogueParser__parse_possible_type__Logical( ROGUE_ARG(THIS), false );
    }
    RogueParser__parse_attributes__Attributes( ROGUE_ARG(THIS), ROGUE_ARG(template_0->attributes) );
    THIS->reader->position = starting_pos_7;
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    RogueTokenList__add__Token( ROGUE_ARG(template_0->tokens), ROGUE_ARG(((RogueClassToken*)(((RogueEOLToken__init__Token( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassEOLToken*,ROGUE_CREATE_OBJECT(EOLToken))), first_t_2 )))))) );
    RogueTokenList__add__Token( ROGUE_ARG(template_0->tokens), ROGUE_ARG(((RogueTokenType__create_token__Token( ROGUE_ARG(RogueTokenType_keyword_GLOBAL), first_t_2 )))) );
    RogueTokenList__add__Token( ROGUE_ARG(template_0->tokens), ROGUE_ARG(((RogueTokenType__create_token__Token( ROGUE_ARG(RogueTokenType_keyword_METHODS), first_t_2 )))) );
    RogueTokenList__add__Token( ROGUE_ARG(template_0->tokens), ROGUE_ARG(((RogueClassToken*)(((RogueEOLToken__init__Token( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassEOLToken*,ROGUE_CREATE_OBJECT(EOLToken))), first_t_2 )))))) );
    RogueTokenList__add__Token( ROGUE_ARG(template_0->tokens), ROGUE_ARG(((RogueTokenType__create_token__Token( ROGUE_ARG(RogueTokenType_keyword_method), first_t_2 )))) );
    RogueTokenList__add__Token( ROGUE_ARG(template_0->tokens), ROGUE_ARG((call_ROGUEM96( 11, ROGUE_ARG(RogueTokenType_identifier), first_t_2, Rogue_literal_strings[279] ))) );
    RogueProgram__add_template__Template( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), template_0 );
  }
  else
  {
    THIS->reader->position = starting_pos_7;
    while (THIS->reader->position < final_pos_9)
    {
      RogueTokenList__add__Token( ROGUE_ARG(template_0->tokens), ROGUE_ARG(((RogueParser__read( ROGUE_ARG(THIS) )))) );
    }
    RogueParser__parse_attributes__Attributes( ROGUE_ARG(THIS), ROGUE_ARG(template_0->attributes) );
    RogueProgram__add_template__Template( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), template_0 );
    ROGUE_DEF_LOCAL_REF(RogueClassToken*,semi_t_10,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_semicolon) ))))
    {
      if (template_0->tokens->count == 0)
      {
        RogueTokenList__add__Token( ROGUE_ARG(template_0->tokens), ROGUE_ARG(((RogueTokenType__create_token__Token( ROGUE_ARG(RogueTokenType_eol), semi_t_10 )))) );
      }
      return;
    }
  }
  while (((RogueTokenReader__has_another( ROGUE_ARG(THIS->reader) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_11,(((RogueTokenReader__read( ROGUE_ARG(THIS->reader) )))));
    if (((void*)t_11->_type) == ((void*)end_type_1))
    {
      return;
    }
    RogueTokenList__add__Token( ROGUE_ARG(template_0->tokens), t_11 );
  }
  RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[323] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(end_type_1))) )))) )))) )))) );
  ROGUE_THROW(((RogueTokenReader__error__String( ROGUE_ARG(THIS->reader), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(((RogueTokenType__quoted_name( end_type_1 )))) )))) )))), Rogue_literal_strings[324] )))) )))) ))));
}

void RogueParser__parse_augment( RogueClassParser* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_0,(((RogueTokenReader__read( ROGUE_ARG(THIS->reader) )))));
  ROGUE_DEF_LOCAL_REF(RogueString*,name_1,(((RogueParser__parse_possible_type__Logical( ROGUE_ARG(THIS), false )))));
  if (((RogueString__contains__String( name_1, ROGUE_ARG(((RogueCharacter__to_String( (RogueCharacter)'$' )))) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,base_name_2,(((RogueString__before_first__Character( name_1, (RogueCharacter)'<' )))));
    ROGUE_THROW(((RogueToken__error__String( t_0, ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[325] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], base_name_2 )))) )))), Rogue_literal_strings[326] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], base_name_2 )))) )))), Rogue_literal_strings[327] )))) )))) ))));
  }
  ROGUE_DEF_LOCAL_REF(RogueClassAugment*,aug_3,(((RogueAugment__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassAugment*,ROGUE_CREATE_OBJECT(Augment))), t_0, name_1 )))));
  ROGUE_DEF_LOCAL_REF(RogueAugmentList*,augments_4,(((RogueString_AugmentListTable__get__String( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->augment_lookup), name_1 )))));
  if (!(!!(augments_4)))
  {
    augments_4 = ((RogueAugmentList*)((RogueAugmentList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueAugmentList*,ROGUE_CREATE_OBJECT(AugmentList))) ))));
    RogueString_AugmentListTable__set__String_AugmentList( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->augment_lookup), name_1, augments_4 );
  }
  RogueAugmentList__add__Augment( augments_4, aug_3 );
  ROGUE_DEF_LOCAL_REF(RogueString*,base_name_5,(((RogueString__after_any__Character( name_1, (RogueCharacter)':' )))));
  if (base_name_5->count < name_1->count)
  {
    augments_4 = ((RogueAugmentList*)((RogueString_AugmentListTable__get__String( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->augment_lookup), base_name_5 ))));
    if (!(!!(augments_4)))
    {
      augments_4 = ((RogueAugmentList*)((RogueAugmentList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueAugmentList*,ROGUE_CREATE_OBJECT(AugmentList))) ))));
      RogueString_AugmentListTable__set__String_AugmentList( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->augment_lookup), base_name_5, augments_4 );
    }
    RogueAugmentList__add__Augment( augments_4, aug_3 );
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_semicolon) ))))
  {
    return;
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_colon) ))))
  {
    RogueTypeList__add__Type( ROGUE_ARG(aug_3->base_types), ROGUE_ARG(((Rogue_Parser__parse_type( ROGUE_ARG(THIS) )))) );
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    while (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) ))))
    {
      RogueParser__consume_eols( ROGUE_ARG(THIS) );
      RogueTypeList__add__Type( ROGUE_ARG(aug_3->base_types), ROGUE_ARG(((Rogue_Parser__parse_type( ROGUE_ARG(THIS) )))) );
      RogueParser__consume_eols( ROGUE_ARG(THIS) );
    }
  }
  RogueParser__consume_eols( ROGUE_ARG(THIS) );
  while ((((RogueTokenReader__has_another( ROGUE_ARG(THIS->reader) ))) && !(((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_endAugment) ))))))
  {
    RogueTokenList__add__Token( ROGUE_ARG(aug_3->tokens), ROGUE_ARG(((RogueTokenReader__read( ROGUE_ARG(THIS->reader) )))) );
  }
  RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_endAugment), ROGUE_ARG(((RogueString*)(NULL))) );
}

void RogueParser__parse_attributes__Attributes( RogueClassParser* THIS, RogueClassAttributes* attributes_0 )
{
  if (!(((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_bracket) )))))
  {
    return;
  }
  while ((((RogueTokenReader__has_another( ROGUE_ARG(THIS->reader) ))) && !(((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_bracket) ))))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_macro) ))))
    {
      RogueAttributes__add__Int32( attributes_0, 64 );
    }
    else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_native) ))))
    {
      RogueAttributes__add__Int32( attributes_0, 32 );
    }
    else if (((RogueParser__consume__String( ROGUE_ARG(THIS), Rogue_literal_strings[308] ))))
    {
      RogueAttributes__add__Int32( attributes_0, 524288 );
    }
    else if (((RogueParser__consume__String( ROGUE_ARG(THIS), Rogue_literal_strings[309] ))))
    {
      RogueParser__ensure_unspecialized_element_type__Token_Attributes( ROGUE_ARG(THIS), t_1, attributes_0 );
      RogueAttributes__add__Int32( attributes_0, 2 );
    }
    else if (((RogueParser__consume__String( ROGUE_ARG(THIS), Rogue_literal_strings[313] ))))
    {
      RogueParser__ensure_unspecialized_element_type__Token_Attributes( ROGUE_ARG(THIS), t_1, attributes_0 );
      RogueAttributes__add__Int32( attributes_0, 3 );
    }
    else if (((RogueParser__consume__String( ROGUE_ARG(THIS), Rogue_literal_strings[314] ))))
    {
      RogueAttributes__add__Int32( attributes_0, 2097152 );
    }
    else if (((RogueParser__consume__String( ROGUE_ARG(THIS), Rogue_literal_strings[315] ))))
    {
      RogueAttributes__add__Int32( attributes_0, 48 );
    }
    else if (((RogueParser__consume__String( ROGUE_ARG(THIS), Rogue_literal_strings[316] ))))
    {
      RogueAttributes__add__Int32( attributes_0, 256 );
    }
    else if (((RogueParser__consume__String( ROGUE_ARG(THIS), Rogue_literal_strings[312] ))))
    {
      RogueParser__ensure_unspecialized_element_type__Token_Attributes( ROGUE_ARG(THIS), t_1, attributes_0 );
      RogueAttributes__add__Int32( attributes_0, 1 );
    }
    else if (((RogueParser__consume__String( ROGUE_ARG(THIS), Rogue_literal_strings[256] ))))
    {
      RogueAttributes__add__Int32( attributes_0, 32768 );
    }
    else if (((RogueParser__consume__String( ROGUE_ARG(THIS), Rogue_literal_strings[317] ))))
    {
      RogueAttributes__add__Int32( attributes_0, 1024 );
    }
    else if (((RogueParser__consume__String( ROGUE_ARG(THIS), Rogue_literal_strings[318] ))))
    {
      RogueAttributes__add__Int32( attributes_0, 4194304 );
    }
    else if (((RogueParser__consume__String( ROGUE_ARG(THIS), Rogue_literal_strings[319] ))))
    {
      RogueAttributes__add__Int32( attributes_0, 65536 );
    }
    else if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_identifier) ))))
    {
      RogueAttributes__add__String( attributes_0, ROGUE_ARG((call_ROGUEM39( 1, ROGUE_ARG(((RogueParser__read( ROGUE_ARG(THIS) )))) ))) );
    }
    else
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[320], ROGUE_ARG(((RogueObject*)(((RogueParser__peek( ROGUE_ARG(THIS) )))))) )))) ))));
    }
  }
  RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_bracket), ROGUE_ARG(((RogueString*)(NULL))) );
}

void RogueParser__ensure_unspecialized_element_type__Token_Attributes( RogueClassParser* THIS, RogueClassToken* t_0, RogueClassAttributes* attributes_1 )
{
  if (!!((attributes_1->flags & 7)))
  {
    ROGUE_THROW(((RogueToken__error__String( t_0, ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[310] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM39( 1, t_0 ))) )))) )))), Rogue_literal_strings[311] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(((RogueAttributes__element_type_name( attributes_1 )))) )))) )))), Rogue_literal_strings[34] )))) )))) ))));
  }
}

void RogueParser__parse_type_def__Type( RogueClassParser* THIS, RogueClassType* _auto_365_0 )
{
  THIS->_this_type = _auto_365_0;
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_paren) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    if (!(((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren) )))))
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_2,0);
      if (((RogueType__is_compound( ROGUE_ARG(THIS->_this_type) ))))
      {
        m_2 = ((RogueClassMethod*)((RogueType__add_global_method__Token_String( ROGUE_ARG(THIS->_this_type), t_1, Rogue_literal_strings[344] ))));
        RogueAttributes__add__Int32( ROGUE_ARG(m_2->attributes), 16384 );
      }
      else
      {
        m_2 = ((RogueClassMethod*)((RogueType__add_method__Token_String( ROGUE_ARG(THIS->_this_type), t_1, Rogue_literal_strings[345] ))));
      }
      m_2->_return_type = THIS->_this_type;
      RogueLogical first_3 = (true);
      while ((first_3 || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) )))))
      {
        first_3 = ((RogueLogical)false);
        RogueParser__consume_eols( ROGUE_ARG(THIS) );
        t_1 = ((RogueClassToken*)((RogueParser__peek( ROGUE_ARG(THIS) ))));
        RogueLogical is_flag_4 = (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_ampersand) ))));
        ROGUE_DEF_LOCAL_REF(RogueString*,p_name_5,(((RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false )))));
        ROGUE_DEF_LOCAL_REF(RogueClassLocal*,param_6,(((RogueMethod__add_parameter__Token_String_Type( m_2, t_1, p_name_5, ROGUE_ARG(((RogueClassType*)(NULL))) )))));
        RogueParser__consume_eols( ROGUE_ARG(THIS) );
        if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_equals) ))))
        {
          param_6->initial_value = ((RogueParser__parse_expression( ROGUE_ARG(THIS) )));
        }
        RogueParser__consume_eols( ROGUE_ARG(THIS) );
        ROGUE_DEF_LOCAL_REF(RogueClassType*,p_type_7,0);
        if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_colon) ))))
        {
          RogueParser__consume_eols( ROGUE_ARG(THIS) );
          p_type_7 = ((RogueClassType*)((Rogue_Parser__parse_type( ROGUE_ARG(THIS) ))));
          if (((RogueType__is_compound( ROGUE_ARG(THIS->_this_type) ))))
          {
            param_6->_type = p_type_7;
          }
          RogueType__add_property__Token_String_Type_Cmd( ROGUE_ARG(THIS->_this_type), t_1, p_name_5, p_type_7, ROGUE_ARG(((RogueClassCmd*)(NULL))) );
        }
        else if (is_flag_4)
        {
          p_type_7 = ((RogueClassType*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
          if (((RogueType__is_compound( ROGUE_ARG(THIS->_this_type) ))))
          {
            param_6->_type = p_type_7;
          }
          RogueType__add_property__Token_String_Type_Cmd( ROGUE_ARG(THIS->_this_type), t_1, p_name_5, p_type_7, ROGUE_ARG(((RogueClassCmd*)(NULL))) );
        }
        if ((is_flag_4 && !(!!(param_6->initial_value))))
        {
          if (((void*)p_type_7) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))
          {
            param_6->initial_value = ((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), t_1, false )))));
          }
          else
          {
            param_6->initial_value = ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), t_1, 0 )))));
          }
        }
        RogueParser__consume_eols( ROGUE_ARG(THIS) );
      }
      RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren), ROGUE_ARG(((RogueString*)(NULL))) );
    }
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_colon) ))))
  {
    RogueLogical first_8 = (true);
    while ((first_8 || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) )))))
    {
      first_8 = ((RogueLogical)false);
      RogueParser__consume_eols( ROGUE_ARG(THIS) );
      RogueTypeList__add__Type( ROGUE_ARG(THIS->_this_type->base_types), ROGUE_ARG(((Rogue_Parser__parse_type( ROGUE_ARG(THIS) )))) );
      RogueParser__consume_eols( ROGUE_ARG(THIS) );
    }
  }
  while (((RogueParser__parse_section( ROGUE_ARG(THIS) ))))
  {
  }
  if (((RogueTokenReader__has_another( ROGUE_ARG(THIS->reader) ))))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[328] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM39( 8, ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))) ))) )))) )))), Rogue_literal_strings[64] )))) )))) ))));
  }
}

RogueLogical RogueParser__parse_section( RogueClassParser* THIS )
{
  RogueParser__consume_eols( ROGUE_ARG(THIS) );
  if (((RogueParser__parse_native_elements( ROGUE_ARG(THIS) ))))
  {
    return (RogueLogical)(true);
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_begin_augment_tokens) ))))
  {
    THIS->parsing_augment = true;
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_ENUMERATE) ))))
  {
    while (((RogueParser__parse_definitions__Logical( ROGUE_ARG(THIS), true ))))
    {
    }
    return (RogueLogical)(true);
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_DEFINITIONS) ))))
  {
    while (((RogueParser__parse_definitions__Logical( ROGUE_ARG(THIS), false ))))
    {
    }
    return (RogueLogical)(true);
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_GLOBAL) ))))
  {
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_PROPERTIES) ))))
    {
      while (((RogueParser__parse_properties__Logical( ROGUE_ARG(THIS), true ))))
      {
      }
      return (RogueLogical)(true);
    }
    else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_METHODS) ))))
    {
      while (((RogueParser__parse_method__Logical( ROGUE_ARG(THIS), true ))))
      {
      }
      return (RogueLogical)(true);
    }
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_PROPERTIES) ))))
  {
    while (((RogueParser__parse_properties__Logical( ROGUE_ARG(THIS), false ))))
    {
    }
    return (RogueLogical)(true);
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_METHODS) ))))
  {
    while (((RogueParser__parse_method__Logical( ROGUE_ARG(THIS), false ))))
    {
    }
    return (RogueLogical)(true);
  }
  return (RogueLogical)(false);
}

RogueLogical RogueParser__parse_definitions__Logical( RogueClassParser* THIS, RogueLogical enumerate_0 )
{
  RogueParser__consume_eols( ROGUE_ARG(THIS) );
  if (!(((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_identifier) )))))
  {
    return (RogueLogical)(false);
  }
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  ROGUE_DEF_LOCAL_REF(RogueString*,name_2,(((RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false )))));
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,value_3,0);
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_equals) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    value_3 = ((RogueClassCmd*)((RogueParser__parse_expression( ROGUE_ARG(THIS) ))));
  }
  else if (!(((RogueParser__consume_eols( ROGUE_ARG(THIS) )))))
  {
    value_3 = ((RogueClassCmd*)((RogueParser__parse_expression( ROGUE_ARG(THIS) ))));
  }
  if ((!(enumerate_0) && !(!!(value_3))))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))), Rogue_literal_strings[346] ))));
  }
  if (!!(value_3))
  {
    if (RogueObject_instance_of(value_3,RogueTypeCmdLiteralInt32))
    {
      THIS->_this_type->prev_enum_cmd = ((RogueClassCmd*)(NULL));
      THIS->_this_type->next_enum_offset = (((RogueClassCmdLiteralInt32*)(RogueObject_as(value_3,RogueTypeCmdLiteralInt32)))->value + 1);
    }
    else
    {
      THIS->_this_type->prev_enum_cmd = value_3;
      THIS->_this_type->next_enum_offset = 1;
    }
  }
  else
  {
    if (!!(THIS->_this_type->prev_enum_cmd))
    {
      value_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdAdd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdAdd*,ROGUE_CREATE_OBJECT(CmdAdd)))), t_1, ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->_this_type->prev_enum_cmd), ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) ))), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), t_1, ROGUE_ARG(THIS->_this_type->next_enum_offset) )))))) ))))))));
    }
    else
    {
      value_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), t_1, ROGUE_ARG(THIS->_this_type->next_enum_offset) ))))));
    }
    ++THIS->_this_type->next_enum_offset;
  }
  ROGUE_DEF_LOCAL_REF(RogueClassDefinition*,def_4,(((RogueDefinition__init__Token_String_Cmd_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassDefinition*,ROGUE_CREATE_OBJECT(Definition))), t_1, name_2, value_3, enumerate_0 )))));
  RogueString_DefinitionTable__set__String_Definition( ROGUE_ARG(THIS->_this_type->definition_lookup), name_2, def_4 );
  RogueDefinitionList__add__Definition( ROGUE_ARG(THIS->_this_type->definition_list), def_4 );
  return (RogueLogical)(true);
}

RogueLogical RogueParser__parse_properties__Logical( RogueClassParser* THIS, RogueLogical as_global_0 )
{
  RogueParser__consume_eols( ROGUE_ARG(THIS) );
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_native) ))))
  {
    if (!(((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_literal_string) )))))
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))), Rogue_literal_strings[306] ))));
    }
    if (!(!!(THIS->_this_type->native_properties)))
    {
      THIS->_this_type->native_properties = ((RogueNativePropertyList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueNativePropertyList*,ROGUE_CREATE_OBJECT(NativePropertyList))) )));
    }
    ROGUE_DEF_LOCAL_REF(RogueClassToken*,native_t_1,(((RogueParser__read( ROGUE_ARG(THIS) )))));
    RogueNativePropertyList__add__NativeProperty( ROGUE_ARG(THIS->_this_type->native_properties), ROGUE_ARG(((RogueNativeProperty__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassNativeProperty*,ROGUE_CREATE_OBJECT(NativeProperty))), native_t_1, ROGUE_ARG((call_ROGUEM39( 1, native_t_1 ))) )))) );
    RogueParser__must_consume_eols( ROGUE_ARG(THIS) );
    return (RogueLogical)(true);
  }
  if (!(((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_identifier) )))))
  {
    return (RogueLogical)(false);
  }
  RoguePropertyList__clear( ROGUE_ARG(THIS->property_list) );
  RogueLogical first_2 = (true);
  while ((first_2 || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) )))))
  {
    first_2 = ((RogueLogical)false);
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_3,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
    ROGUE_DEF_LOCAL_REF(RogueString*,name_4,(((RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false )))));
    ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_5,0);
    if (as_global_0)
    {
      p_5 = ((RogueClassProperty*)((RogueType__add_global__Token_String( ROGUE_ARG(THIS->_this_type), t_3, name_4 ))));
    }
    else
    {
      p_5 = ((RogueClassProperty*)((RogueType__add_property__Token_String_Type_Cmd( ROGUE_ARG(THIS->_this_type), t_3, name_4, ROGUE_ARG(((RogueClassType*)(NULL))), ROGUE_ARG(((RogueClassCmd*)(NULL))) ))));
    }
    RoguePropertyList__add__Property( ROGUE_ARG(THIS->property_list), p_5 );
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_equals) ))))
    {
      p_5->initial_value = ((RogueParser__parse_expression( ROGUE_ARG(THIS) )));
    }
  }
  RogueParser__consume_eols( ROGUE_ARG(THIS) );
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_colon) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassType*,p_type_6,(((Rogue_Parser__parse_type( ROGUE_ARG(THIS) )))));
    {
      ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_1199_8,(THIS->property_list));
      RogueInt32 _auto_1200_9 = (0);
      for (;_auto_1200_9 < _auto_1199_8->count;++_auto_1200_9)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_10,(((RogueClassProperty*)(_auto_1199_8->data->objects[_auto_1200_9]))));
        p_10->_type = p_type_6;
      }
    }
  }
  else
  {
    {
      ROGUE_DEF_LOCAL_REF(RoguePropertyList*,_auto_1201_11,(THIS->property_list));
      RogueInt32 _auto_1202_12 = (0);
      for (;_auto_1202_12 < _auto_1201_11->count;++_auto_1202_12)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_13,(((RogueClassProperty*)(_auto_1201_11->data->objects[_auto_1202_12]))));
        ROGUE_DEF_LOCAL_REF(RogueString*,name_7,(Rogue_literal_strings[350]));
        if (as_global_0)
        {
          name_7 = ((RogueString*)Rogue_literal_strings[351]);
        }
        if (!!(p_13->initial_value))
        {
          p_13->_type = (call_ROGUEM58( 17, ROGUE_ARG(p_13->initial_value), ROGUE_ARG(((RogueScope__init__Type_Method( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassScope*,ROGUE_CREATE_OBJECT(Scope))), ROGUE_ARG(THIS->_this_type), ROGUE_ARG(((RogueClassMethod*)(NULL))) )))) ));
          if (((void*)p_13->_type) == ((void*)NULL))
          {
            RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ROGUE_ARG((call_ROGUEM70( 2, ROGUE_ARG(p_13->initial_value) ))) );
            ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(p_13->initial_value->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[352] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], name_7 )))) )))), Rogue_literal_strings[353] )))) )))) ))));
          }
        }
        else
        {
          ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(p_13->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[354] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], name_7 )))) )))), Rogue_literal_strings[355] )))) )))) ))));
        }
      }
    }
  }
  return (RogueLogical)(true);
}

RogueLogical RogueParser__parse_method__Logical( RogueClassParser* THIS, RogueLogical as_routine_0 )
{
  RogueParser__consume_eols( ROGUE_ARG(THIS) );
  if (!(((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_method) )))))
  {
    return (RogueLogical)(false);
  }
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueParser__read( ROGUE_ARG(THIS) )))));
  ROGUE_DEF_LOCAL_REF(RogueString*,name_2,(((RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false )))));
  ROGUE_DEF_LOCAL_REF(RogueClassType*,return_type_3,0);
  {
    if (((RogueString__operatorEQUALSEQUALS__String( name_2, Rogue_literal_strings[356] ))))
    {
      name_2 = ((RogueString*)((RogueString__operatorPLUS__String( name_2, ROGUE_ARG((call_ROGUEM39( 1, ROGUE_ARG(((RogueTokenReader__read( ROGUE_ARG(THIS->reader) )))) ))) ))));
    }
    else if (((RogueString__operatorEQUALSEQUALS__String( name_2, Rogue_literal_strings[357] ))))
    {
      RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_arrow), ROGUE_ARG(((RogueString*)(NULL))) );
      return_type_3 = ((RogueClassType*)((Rogue_Parser__parse_type( ROGUE_ARG(THIS) ))));
      name_2 = ((RogueString*)((RogueString__operatorPLUS__String( Rogue_literal_strings[358], ROGUE_ARG(return_type_3->name) ))));
    }
  }
  THIS->this_method = ((RogueMethod__init__Token_Type_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassMethod*,ROGUE_CREATE_OBJECT(Method))), t_1, ROGUE_ARG(THIS->_this_type), name_2 )));
  THIS->this_method->_return_type = return_type_3;
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_paren) ))))
  {
    if (!(((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren) )))))
    {
      RogueLogical first_4 = (true);
      while ((first_4 || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) )))))
      {
        first_4 = ((RogueLogical)false);
        RogueParser__consume_eols( ROGUE_ARG(THIS) );
        RogueLogical is_flag_5 = (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_ampersand) ))));
        t_1 = ((RogueClassToken*)((RogueParser__peek( ROGUE_ARG(THIS) ))));
        ROGUE_DEF_LOCAL_REF(RogueClassLocal*,param_6,(((RogueMethod__add_parameter__Token_String_Type( ROGUE_ARG(THIS->this_method), t_1, ROGUE_ARG(((RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), true )))), ROGUE_ARG(((RogueClassType*)(NULL))) )))));
        if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_equals) ))))
        {
          param_6->initial_value = ((RogueParser__parse_expression( ROGUE_ARG(THIS) )));
        }
        if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_colon) ))))
        {
          param_6->_type = ((Rogue_Parser__parse_type( ROGUE_ARG(THIS) )));
        }
        if (is_flag_5)
        {
          if (!(!!(param_6->_type)))
          {
            param_6->_type = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical;
          }
          if (!(!!(param_6->initial_value)))
          {
            param_6->initial_value = ((RogueType__create_default_value__Token( ROGUE_ARG(param_6->_type), ROGUE_ARG(param_6->t) )));
          }
        }
      }
      RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren), ROGUE_ARG(((RogueString*)(NULL))) );
    }
  }
  if (!(!!(return_type_3)))
  {
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_arrow) ))))
    {
      if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_this) ))))
      {
        THIS->this_method->_return_type = THIS->_this_type;
      }
      else
      {
        THIS->this_method->_return_type = ((Rogue_Parser__parse_type( ROGUE_ARG(THIS) )));
      }
    }
  }
  RogueParser__parse_attributes__Attributes( ROGUE_ARG(THIS), ROGUE_ARG(THIS->this_method->attributes) );
  if (THIS->parsing_augment)
  {
    RogueAttributes__add__Int32( ROGUE_ARG(THIS->this_method->attributes), 262144 );
  }
  {
    {
      if ( !(((RogueMethod__is_special( ROGUE_ARG(THIS->this_method) )))) ) goto _auto_1204;
      if ( !(((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(THIS->_this_type->name), Rogue_literal_strings[359] )))) ) goto _auto_1204;
      goto _auto_1203;
    }
    _auto_1204:;
    if (as_routine_0)
    {
      RogueType__add_global_method__Method( ROGUE_ARG(THIS->_this_type), ROGUE_ARG(THIS->this_method) );
    }
    else
    {
      RogueType__add_method__Method( ROGUE_ARG(THIS->_this_type), ROGUE_ARG(THIS->this_method) );
    }
  }
  _auto_1203:;
  RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_colon) );
  RogueParser__consume_eols( ROGUE_ARG(THIS) );
  if (((RogueMethod__is_macro( ROGUE_ARG(THIS->this_method) ))))
  {
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_native) ))))
    {
      RogueAttributes__add__Int32( ROGUE_ARG(THIS->this_method->attributes), 32 );
    }
    if (((RogueMethod__is_native( ROGUE_ARG(THIS->this_method) ))))
    {
      RogueLogical has_parens_7 = (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_paren) ))));
      RogueParser__consume_eols( ROGUE_ARG(THIS) );
      if (!(((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_literal_string) )))))
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))), Rogue_literal_strings[306] ))));
      }
      THIS->this_method->native_code = (call_ROGUEM39( 1, ROGUE_ARG(((RogueParser__read( ROGUE_ARG(THIS) )))) ));
      if (has_parens_7)
      {
        RogueParser__consume_eols( ROGUE_ARG(THIS) );
        RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren), ROGUE_ARG(((RogueString*)(NULL))) );
      }
      if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_arrow) ))))
      {
        RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_arrow) );
        ROGUE_DEF_LOCAL_REF(RogueClassType*,type_8,(((Rogue_Parser__parse_type( ROGUE_ARG(THIS) )))));
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[360] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(type_8))) )))) )))), Rogue_literal_strings[15] )))) )))) ))));
      }
    }
    else
    {
      RogueParser__parse_single_line_statements__CmdStatementList( ROGUE_ARG(THIS), ROGUE_ARG(THIS->this_method->statements) );
    }
  }
  else if (THIS->parsing_augment)
  {
    RogueParser__parse_augment_statements( ROGUE_ARG(THIS) );
  }
  else
  {
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS->this_method->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( ROGUE_ARG(THIS->this_method), ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))), Rogue_literal_strings[269], false )))))) );
    RogueParser__parse_multi_line_statements__CmdStatementList( ROGUE_ARG(THIS), ROGUE_ARG(THIS->this_method->statements) );
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS->this_method->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( ROGUE_ARG(THIS->this_method), ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))), Rogue_literal_strings[271], false )))))) );
  }
  return (RogueLogical)(true);
}

void RogueParser__parse_single_or_multi_line_statements__CmdStatementList_TokenType( RogueClassParser* THIS, RogueClassCmdStatementList* statements_0, RogueClassTokenType* end_type_1 )
{
  if (((RogueParser__consume_eols( ROGUE_ARG(THIS) ))))
  {
    RogueParser__parse_multi_line_statements__CmdStatementList( ROGUE_ARG(THIS), statements_0 );
    RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), end_type_1, ROGUE_ARG(((RogueString*)(NULL))) );
  }
  else
  {
    RogueParser__parse_single_line_statements__CmdStatementList( ROGUE_ARG(THIS), statements_0 );
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
  }
}

void RogueParser__parse_multi_line_statements__CmdStatementList( RogueClassParser* THIS, RogueClassCmdStatementList* statements_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,prev_statement_list_1,(THIS->cur_statement_list));
  THIS->cur_statement_list = statements_0;
  RogueParser__consume_end_commands( ROGUE_ARG(THIS) );
  while (((RogueParser__next_is_statement( ROGUE_ARG(THIS) ))))
  {
    RogueParser__parse_statement__CmdStatementList_Logical( ROGUE_ARG(THIS), statements_0, true );
    while ((((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_eol) ))) || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_semicolon) )))))
    {
    }
    RogueParser__consume_end_commands( ROGUE_ARG(THIS) );
  }
  THIS->cur_statement_list = prev_statement_list_1;
}

void RogueParser__parse_augment_statements( RogueClassParser* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,prev_statement_list_0,(THIS->cur_statement_list));
  RogueMethod__begin_label__Token_String_Logical( ROGUE_ARG(THIS->this_method), ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))), Rogue_literal_strings[269], true );
  RogueMethod__begin_label__Token_String_Logical( ROGUE_ARG(THIS->this_method), ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))), Rogue_literal_strings[271], true );
  ROGUE_DEF_LOCAL_REF(RogueClassCmdLabel*,cur_label_1,(((RogueMethod__begin_label__Token_String_Logical( ROGUE_ARG(THIS->this_method), ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))), Rogue_literal_strings[269], true )))));
  THIS->cur_statement_list = cur_label_1->statements;
  RogueParser__consume_end_commands( ROGUE_ARG(THIS) );
  while (((RogueParser__next_is_statement( ROGUE_ARG(THIS) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_2,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_specialize) ))))
    {
      cur_label_1 = ((RogueClassCmdLabel*)((RogueMethod__begin_label__Token_String_Logical( ROGUE_ARG(THIS->this_method), t_2, ROGUE_ARG(((RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false )))), true ))));
      THIS->cur_statement_list = cur_label_1->statements;
      RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_specialize), ROGUE_ARG(((RogueString*)(NULL))) );
      RogueParser__consume_end_commands( ROGUE_ARG(THIS) );
      continue;
    }
    RogueParser__parse_statement__CmdStatementList_Logical( ROGUE_ARG(THIS), ROGUE_ARG(cur_label_1->statements), true );
    while ((((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_eol) ))) || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_semicolon) )))))
    {
    }
    RogueParser__consume_end_commands( ROGUE_ARG(THIS) );
  }
  THIS->cur_statement_list = prev_statement_list_0;
}

void RogueParser__parse_single_line_statements__CmdStatementList( RogueClassParser* THIS, RogueClassCmdStatementList* statements_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,prev_statement_list_1,(THIS->cur_statement_list));
  THIS->cur_statement_list = statements_0;
  while (((RogueParser__next_is_statement( ROGUE_ARG(THIS) ))))
  {
    RogueParser__parse_statement__CmdStatementList_Logical( ROGUE_ARG(THIS), statements_0, false );
    if (!(((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_semicolon) )))))
    {
      THIS->cur_statement_list = prev_statement_list_1;
      return;
    }
    while (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_semicolon) ))))
    {
    }
    if (((RogueParser__next_is_end_command( ROGUE_ARG(THIS) ))))
    {
      goto _auto_1206;
    }
  }
  _auto_1206:;
  if (!(((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_eol) )))))
  {
    if (!(((RogueToken__is_structure( ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))) )))))
    {
      RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_eol), ROGUE_ARG(((RogueString*)(NULL))) );
    }
  }
  THIS->cur_statement_list = prev_statement_list_1;
}

void RogueParser__parse_statement__CmdStatementList_Logical( RogueClassParser* THIS, RogueClassCmdStatementList* statements_0, RogueLogical allow_control_structures_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_2,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_nativeHeader) ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdNativeHeader__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdNativeHeader*,ROGUE_CREATE_OBJECT(CmdNativeHeader))), t_2, ROGUE_ARG((call_ROGUEM39( 1, t_2 ))) )))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_nativeCode) ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdNativeCode__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdNativeCode*,ROGUE_CREATE_OBJECT(CmdNativeCode))), t_2, ROGUE_ARG((call_ROGUEM39( 1, t_2 ))) )))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_directive_requisite) ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdMakeRequisite__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdMakeRequisite*,ROGUE_CREATE_OBJECT(CmdMakeRequisite))), t_2, ROGUE_ARG((call_ROGUEM39( 1, t_2 ))) )))))) );
    return;
  }
  if (allow_control_structures_1)
  {
    if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_if) ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueParser__parse_if( ROGUE_ARG(THIS) )))))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_which) ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueParser__parse_which( ROGUE_ARG(THIS) )))))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_forEach) ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueParser__parse_for_each( ROGUE_ARG(THIS) )))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_contingent) ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueParser__parse_contingent( ROGUE_ARG(THIS) )))))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_while) ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueParser__parse_while( ROGUE_ARG(THIS) )))))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_loop) ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueParser__parse_loop( ROGUE_ARG(THIS) )))))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_try) ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueParser__parse_try( ROGUE_ARG(THIS) )))))) );
      return;
    }
  }
  if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_local) ))))
  {
    RogueParser__parse_local_or_global__CmdStatementList( ROGUE_ARG(THIS), statements_0 );
    return;
  }
  else if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_global) ))))
  {
    RogueParser__parse_local_or_global__CmdStatementList( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))) );
    return;
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_return) ))))
  {
    if ((((RogueMethod__is_macro( ROGUE_ARG(THIS->this_method) ))) && !!(THIS->this_method->_return_type)))
    {
      ROGUE_THROW(((RogueToken__error__String( t_2, Rogue_literal_strings[300] ))));
    }
    if (((RogueParser__next_is_end_command( ROGUE_ARG(THIS) ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReturn*,ROGUE_CREATE_OBJECT(CmdReturn))), t_2, ROGUE_ARG(((RogueClassCmd*)(NULL))) )))))) );
    }
    else
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReturn*,ROGUE_CREATE_OBJECT(CmdReturn))), t_2, ROGUE_ARG(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))) )))))) );
    }
    return;
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_await) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,statement_list_3,(((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )))));
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAwait__init__Token_Cmd_CmdStatementList_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAwait*,ROGUE_CREATE_OBJECT(CmdAwait))), t_2, ROGUE_ARG(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))), statement_list_3, ROGUE_ARG(((RogueClassLocal*)(NULL))) )))))) );
    return;
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_yield) ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdYield__init__Token( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdYield*,ROGUE_CREATE_OBJECT(CmdYield))), t_2 )))))) );
    return;
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_throw) ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdThrow__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdThrow*,ROGUE_CREATE_OBJECT(CmdThrow))), t_2, ROGUE_ARG(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))) )))))) );
    return;
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_noAction) ))))
  {
    return;
  }
  else if ((((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_trace) ))) || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_trace_position) )))))
  {
    RogueLogical include_position_4 = (((void*)t_2->_type) == ((void*)RogueTokenType_keyword_trace_position));
    ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_5,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
    RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__Character( buffer_5, (RogueCharacter)'[' )))), ROGUE_ARG(THIS->_this_type->name) );
    if (!!(THIS->this_method))
    {
      RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( buffer_5, Rogue_literal_strings[64] )))), ROGUE_ARG(THIS->this_method->name) )))), Rogue_literal_strings[301] );
    }
    RogueStringBuilder__print__String( buffer_5, ROGUE_ARG(((RogueFile__filename( ROGUE_ARG(((RogueFile__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassFile*,ROGUE_CREATE_OBJECT(File))), ROGUE_ARG(t_2->filepath) )))) )))) );
    RogueStringBuilder__print__Character( ROGUE_ARG(((RogueStringBuilder__print__Int32( ROGUE_ARG(((RogueStringBuilder__print__Character( buffer_5, (RogueCharacter)':' )))), ROGUE_ARG(t_2->line) )))), (RogueCharacter)']' );
    RogueInt32 data_pos_6 = ((buffer_5->characters->count + 2));
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,args_7,(((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )))));
    RogueLogical needs_space_8 = (false);
    RogueLogical first_9 = (true);
    while (((((RogueTokenReader__has_another( ROGUE_ARG(THIS->reader) ))) && !(((RogueParser__next_is_end_command( ROGUE_ARG(THIS) ))))) && (first_9 || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) ))))))
    {
      if (first_9)
      {
        if (include_position_4)
        {
          RogueStringBuilder__print__String( buffer_5, Rogue_literal_strings[302] );
        }
        else
        {
          RogueStringBuilder__clear( buffer_5 );
        }
      }
      first_9 = ((RogueLogical)false);
      ROGUE_DEF_LOCAL_REF(RogueClassToken*,start_t_10,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,expr_11,(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))));
      if (RogueObject_instance_of(expr_11,RogueTypeCmdLiteralString))
      {
        RogueStringBuilder__print__String( buffer_5, ROGUE_ARG(((RogueClassCmdLiteralString*)(RogueObject_as(expr_11,RogueTypeCmdLiteralString)))->value) );
        needs_space_8 = ((RogueLogical)false);
      }
      else
      {
        if (needs_space_8)
        {
          RogueStringBuilder__print__Character( buffer_5, (RogueCharacter)' ' );
        }
        ROGUE_DEF_LOCAL_REF(RogueClassToken*,end_t_12,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
        ROGUE_DEF_LOCAL_REF(RogueClassParseReader*,parse_reader_13,(((RogueString_ParseReaderTable__get__String( ROGUE_ARG(((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->parsereaders_by_filepath), ROGUE_ARG(start_t_10->filepath) )))));
        if ((((!!(parse_reader_13) && !!(start_t_10->line)) && !!(start_t_10->column)) && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(start_t_10->filepath), ROGUE_ARG(end_t_12->filepath) )))))
        {
          RogueParseReader__seek_location__Int32_Int32( parse_reader_13, ROGUE_ARG(start_t_10->line), ROGUE_ARG(start_t_10->column) );
          while ((((RogueParseReader__has_another( parse_reader_13 ))) && (parse_reader_13->line < end_t_12->line || (parse_reader_13->line == end_t_12->line && parse_reader_13->column < end_t_12->column))))
          {
            RogueStringBuilder__print__Character( buffer_5, ROGUE_ARG(((RogueParseReader__read( parse_reader_13 )))) );
          }
          RogueStringBuilder__print__String( buffer_5, Rogue_literal_strings[303] );
          RogueCmdList__add__Cmd( ((RogueCmdList*)args_7), expr_11 );
          needs_space_8 = ((RogueLogical)true);
        }
      }
    }
    if ((include_position_4 && !!(args_7->count)))
    {
      RogueStringBuilder__insert_spaces__Int32_Int32_Character( buffer_5, data_pos_6, ROGUE_ARG((((data_pos_6 + 3) & -4) - data_pos_6)), (RogueCharacter)' ' );
    }
    if ((((RogueTokenReader__has_another( ROGUE_ARG(THIS->reader) ))) && !(((RogueParser__next_is_end_command( ROGUE_ARG(THIS) ))))))
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))), Rogue_literal_strings[304] ))));
    }
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdTrace__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdTrace*,ROGUE_CREATE_OBJECT(CmdTrace))), t_2, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdFormattedString__init__Token_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdFormattedString*,ROGUE_CREATE_OBJECT(CmdFormattedString))), t_2, ROGUE_ARG(((RogueStringBuilder__to_String( buffer_5 )))), args_7 )))))) )))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_specialize) ))))
  {
    if (THIS->parsing_augment)
    {
      ROGUE_THROW(((RogueToken__error__String( t_2, Rogue_literal_strings[305] ))));
    }
    else
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( ROGUE_ARG(THIS->this_method), t_2, ROGUE_ARG(((RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false )))), false )))))) );
    }
    RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_specialize), ROGUE_ARG(((RogueString*)(NULL))) );
    return;
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_escapeWhile) ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdEscape__init__Token_Int32_CmdControlStructure( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdEscape*,ROGUE_CREATE_OBJECT(CmdEscape))), t_2, 8, ROGUE_ARG(((RogueClassCmdControlStructure*)(NULL))) )))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_escapeForEach) ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdEscape__init__Token_Int32_CmdControlStructure( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdEscape*,ROGUE_CREATE_OBJECT(CmdEscape))), t_2, 9, ROGUE_ARG(((RogueClassCmdControlStructure*)(NULL))) )))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_escapeContingent) ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdEscape__init__Token_Int32_CmdControlStructure( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdEscape*,ROGUE_CREATE_OBJECT(CmdEscape))), t_2, 1, ROGUE_ARG(((RogueClassCmdControlStructure*)(NULL))) )))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_escapeLoop) ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdEscape__init__Token_Int32_CmdControlStructure( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdEscape*,ROGUE_CREATE_OBJECT(CmdEscape))), t_2, 7, ROGUE_ARG(((RogueClassCmdControlStructure*)(NULL))) )))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_escapeIf) ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdEscape__init__Token_Int32_CmdControlStructure( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdEscape*,ROGUE_CREATE_OBJECT(CmdEscape))), t_2, 2, ROGUE_ARG(((RogueClassCmdControlStructure*)(NULL))) )))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_escapeTry) ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdEscape__init__Token_Int32_CmdControlStructure( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdEscape*,ROGUE_CREATE_OBJECT(CmdEscape))), t_2, 4, ROGUE_ARG(((RogueClassCmdControlStructure*)(NULL))) )))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_escapeWhich) ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdEscape__init__Token_Int32_CmdControlStructure( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdEscape*,ROGUE_CREATE_OBJECT(CmdEscape))), t_2, 5, ROGUE_ARG(((RogueClassCmdControlStructure*)(NULL))) )))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_nextIteration) ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdNextIteration__init__Token_CmdControlStructure( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdNextIteration*,ROGUE_CREATE_OBJECT(CmdNextIteration))), t_2, ROGUE_ARG(((RogueClassCmdControlStructure*)(NULL))) )))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_necessary) ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdNecessary__init__Token_Cmd_CmdContingent( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdNecessary*,ROGUE_CREATE_OBJECT(CmdNecessary))), t_2, ROGUE_ARG(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))), ROGUE_ARG(((RogueClassCmdContingent*)(NULL))) )))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_sufficient) ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdSufficient__init__Token_Cmd_CmdContingent( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdSufficient*,ROGUE_CREATE_OBJECT(CmdSufficient))), t_2, ROGUE_ARG(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))), ROGUE_ARG(((RogueClassCmdContingent*)(NULL))) )))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_plus_plus) ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAdjust__init__Token_Cmd_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAdjust*,ROGUE_CREATE_OBJECT(CmdAdjust))), t_2, ROGUE_ARG(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))), 1 )))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_minus_minus) ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAdjust__init__Token_Cmd_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAdjust*,ROGUE_CREATE_OBJECT(CmdAdjust))), t_2, ROGUE_ARG(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))), -1 )))))) );
    return;
  }
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,expression_14,(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))));
  t_2 = ((RogueClassToken*)((RogueParser__peek( ROGUE_ARG(THIS) ))));
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_equals) ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAssign*,ROGUE_CREATE_OBJECT(CmdAssign))), t_2, expression_14, ROGUE_ARG(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))) )))))) );
    return;
  }
  if ((call_ROGUEM97( 14, ROGUE_ARG(t_2->_type) )))
  {
    RogueParser__read( ROGUE_ARG(THIS) );
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdModifyAndAssign__init__Token_Cmd_TokenType_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdModifyAndAssign*,ROGUE_CREATE_OBJECT(CmdModifyAndAssign))), t_2, expression_14, ROGUE_ARG(t_2->_type), ROGUE_ARG(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))) )))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_plus_plus) ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAdjust__init__Token_Cmd_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAdjust*,ROGUE_CREATE_OBJECT(CmdAdjust))), t_2, expression_14, 1 )))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_minus_minus) ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAdjust__init__Token_Cmd_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAdjust*,ROGUE_CREATE_OBJECT(CmdAdjust))), t_2, expression_14, -1 )))))) );
    return;
  }
  ROGUE_DEF_LOCAL_REF(RogueClassTokenType*,t_type_15,(t_2->_type));
  if ((call_ROGUEM97( 14, t_type_15 )))
  {
    RogueParser__read( ROGUE_ARG(THIS) );
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,target_16,(expression_14));
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,new_value_17,(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))));
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdModifyAndAssign__init__Token_Cmd_TokenType_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdModifyAndAssign*,ROGUE_CREATE_OBJECT(CmdModifyAndAssign))), t_2, target_16, t_type_15, new_value_17 )))))) );
    return;
  }
  if (!(((RogueParser__next_is_end_command( ROGUE_ARG(THIS) )))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdAccess*,access_18,(((RogueClassCmdAccess*)(RogueObject_as(expression_14,RogueTypeCmdAccess)))));
    if ((!!(access_18) && ((void*)access_18->args) == ((void*)NULL)))
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,args_19,(((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )))));
      while ((!(((RogueParser__next_is_end_command( ROGUE_ARG(THIS) )))) && !(((RogueToken__is_structure( ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))) ))))))
      {
        RogueCmdList__add__Cmd( ((RogueCmdList*)args_19), ROGUE_ARG(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))) );
      }
      access_18->args = args_19;
    }
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), expression_14 );
}

RogueClassCmdWhich* RogueParser__parse_which( RogueClassParser* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_0,(((RogueParser__read( ROGUE_ARG(THIS) )))));
  ROGUE_DEF_LOCAL_REF(RogueClassCmdWhich*,cmd_which_1,(((RogueCmdWhich__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWhich*,ROGUE_CREATE_OBJECT(CmdWhich))), t_0, ROGUE_ARG(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))), ROGUE_ARG(((RogueCmdWhichCaseList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueCmdWhichCaseList*,ROGUE_CREATE_OBJECT(CmdWhichCaseList))) )))), ROGUE_ARG(((RogueClassCmdWhichCase*)(NULL))), 5 )))));
  RogueParser__must_consume_eols( ROGUE_ARG(THIS) );
  while (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_case) ))))
  {
    t_0 = ((RogueClassToken*)((RogueParser__read( ROGUE_ARG(THIS) ))));
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    ROGUE_DEF_LOCAL_REF(RogueClassCmdWhichCase*,cmd_case_2,(((RogueCmdWhich__add_case__Token( cmd_which_1, t_0 )))));
    RogueLogical first_3 = (true);
    while ((first_3 || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) )))))
    {
      first_3 = ((RogueLogical)false);
      RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)cmd_case_2->conditions)), ROGUE_ARG(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))) );
      RogueParser__consume_eols( ROGUE_ARG(THIS) );
    }
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_colon) ))))
    {
      RogueParser__consume_eols( ROGUE_ARG(THIS) );
    }
    RogueParser__parse_multi_line_statements__CmdStatementList( ROGUE_ARG(THIS), ROGUE_ARG(cmd_case_2->statements) );
  }
  if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_others) ))))
  {
    t_0 = ((RogueClassToken*)((RogueParser__read( ROGUE_ARG(THIS) ))));
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    ROGUE_DEF_LOCAL_REF(RogueClassCmdWhichCase*,cmd_case_4,(((RogueCmdWhich__add_case_others__Token( cmd_which_1, t_0 )))));
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_colon) ))))
    {
      RogueParser__consume_eols( ROGUE_ARG(THIS) );
    }
    RogueParser__parse_multi_line_statements__CmdStatementList( ROGUE_ARG(THIS), ROGUE_ARG(cmd_case_4->statements) );
  }
  RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_endWhich), ROGUE_ARG(((RogueString*)(NULL))) );
  return (RogueClassCmdWhich*)(cmd_which_1);
}

RogueLogical RogueParser__parse_native_elements( RogueClassParser* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_0,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_nativeHeader) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,code_1,((call_ROGUEM39( 1, t_0 ))));
    if (!(((RogueStringList__locate__String( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_header), code_1 ))).exists))
    {
      RogueStringList__add__String( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_header), code_1 );
    }
    return (RogueLogical)(true);
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_nativeCode) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,code_2,((call_ROGUEM39( 1, t_0 ))));
    if (!(((RogueStringList__locate__String( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_header), code_2 ))).exists))
    {
      RogueStringList__add__String( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_code), code_2 );
    }
    return (RogueLogical)(true);
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_directive_requisite) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,pattern_3,((call_ROGUEM39( 1, t_0 ))));
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)((RogueProgram__get_launch_method__Token( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), t_0 )))->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdMakeRequisite__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdMakeRequisite*,ROGUE_CREATE_OBJECT(CmdMakeRequisite))), t_0, pattern_3 )))))) );
    return (RogueLogical)(true);
  }
  else
  {
    return (RogueLogical)(false);
  }
}

RogueClassCmdContingent* RogueParser__parse_contingent( RogueClassParser* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_0,(((RogueParser__read( ROGUE_ARG(THIS) )))));
  ROGUE_DEF_LOCAL_REF(RogueClassCmdContingent*,cmd_contingent_1,(((RogueCmdContingent__init__Token_CmdStatementList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdContingent*,ROGUE_CREATE_OBJECT(CmdContingent))), t_0, ROGUE_ARG(((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )))) )))));
  RogueParser__parse_multi_line_statements__CmdStatementList( ROGUE_ARG(THIS), ROGUE_ARG(cmd_contingent_1->statements) );
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_satisfied) ))))
  {
    cmd_contingent_1->satisfied_statements = ((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )));
    RogueParser__parse_multi_line_statements__CmdStatementList( ROGUE_ARG(THIS), ROGUE_ARG(cmd_contingent_1->satisfied_statements) );
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_unsatisfied) ))))
  {
    cmd_contingent_1->unsatisfied_statements = ((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )));
    RogueParser__parse_multi_line_statements__CmdStatementList( ROGUE_ARG(THIS), ROGUE_ARG(cmd_contingent_1->unsatisfied_statements) );
  }
  RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_endContingent), ROGUE_ARG(((RogueString*)(NULL))) );
  return (RogueClassCmdContingent*)(cmd_contingent_1);
}

RogueClassCmdTry* RogueParser__parse_try( RogueClassParser* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_0,(((RogueParser__read( ROGUE_ARG(THIS) )))));
  ROGUE_DEF_LOCAL_REF(RogueClassCmdTry*,cmd_try_1,(((RogueCmdTry__init__Token_CmdStatementList_CmdCatchList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdTry*,ROGUE_CREATE_OBJECT(CmdTry))), t_0, ROGUE_ARG(((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )))), ROGUE_ARG(((RogueCmdCatchList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueCmdCatchList*,ROGUE_CREATE_OBJECT(CmdCatchList))) )))) )))));
  RogueParser__parse_multi_line_statements__CmdStatementList( ROGUE_ARG(THIS), ROGUE_ARG(cmd_try_1->statements) );
  while (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_catch) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdCatch*,cmd_catch_2,(((RogueCmdTry__add_catch__Token( cmd_try_1, ROGUE_ARG(((RogueParser__read( ROGUE_ARG(THIS) )))) )))));
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_paren), ROGUE_ARG(((RogueString*)(NULL))) );
    ROGUE_DEF_LOCAL_REF(RogueClassToken*,error_t_3,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
    ROGUE_DEF_LOCAL_REF(RogueString*,error_name_4,(((RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false )))));
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_colon), ROGUE_ARG(((RogueString*)(NULL))) );
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    cmd_catch_2->error_var = ((RogueMethod__add_local__Token_String_Type_Cmd( ROGUE_ARG(THIS->this_method), error_t_3, error_name_4, ROGUE_ARG(((Rogue_Parser__parse_type( ROGUE_ARG(THIS) )))), ROGUE_ARG(((RogueClassCmd*)(NULL))) )));
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren), ROGUE_ARG(((RogueString*)(NULL))) );
    RogueParser__parse_multi_line_statements__CmdStatementList( ROGUE_ARG(THIS), ROGUE_ARG(cmd_catch_2->statements) );
  }
  RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_endTry), ROGUE_ARG(((RogueString*)(NULL))) );
  return (RogueClassCmdTry*)(cmd_try_1);
}

void RogueParser__parse_local_or_global__CmdStatementList( RogueClassParser* THIS, RogueClassCmdStatementList* statements_0 )
{
  RogueLocalList__clear( ROGUE_ARG(THIS->local_declarations) );
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueParser__read( ROGUE_ARG(THIS) )))));
  RogueLogical first_2 = (true);
  while ((first_2 || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) )))))
  {
    first_2 = ((RogueLogical)false);
    t_1 = ((RogueClassToken*)((RogueParser__peek( ROGUE_ARG(THIS) ))));
    ROGUE_DEF_LOCAL_REF(RogueString*,name_3,(((RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false )))));
    ROGUE_DEF_LOCAL_REF(RogueClassLocal*,v_4,(((RogueMethod__add_local__Token_String_Type_Cmd( ROGUE_ARG(THIS->this_method), t_1, name_3, ROGUE_ARG(((RogueClassType*)(NULL))), ROGUE_ARG(((RogueClassCmd*)(NULL))) )))));
    RogueLocalList__add__Local( ROGUE_ARG(THIS->local_declarations), v_4 );
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_equals) ))))
    {
      v_4->initial_value = ((RogueParser__parse_expression( ROGUE_ARG(THIS) )));
    }
  }
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_colon) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassType*,type_5,(((Rogue_Parser__parse_type( ROGUE_ARG(THIS) )))));
    {
      ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_1272_6,(THIS->local_declarations));
      RogueInt32 _auto_1273_7 = (0);
      for (;_auto_1273_7 < _auto_1272_6->count;++_auto_1273_7)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassLocal*,v_8,(((RogueClassLocal*)(_auto_1272_6->data->objects[_auto_1273_7]))));
        v_8->_type = type_5;
      }
    }
  }
  else
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_1274_9,(THIS->local_declarations));
      RogueInt32 _auto_1275_10 = (0);
      for (;_auto_1275_10 < _auto_1274_9->count;++_auto_1275_10)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassLocal*,v_11,(((RogueClassLocal*)(_auto_1274_9->data->objects[_auto_1275_10]))));
        if ((((void*)v_11->_type) == ((void*)NULL) && !!(v_11->initial_value)))
        {
          v_11->_type = (call_ROGUEM58( 17, ROGUE_ARG(v_11->initial_value), ROGUE_ARG(((RogueScope__init__Type_Method( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassScope*,ROGUE_CREATE_OBJECT(Scope))), ROGUE_ARG(THIS->_this_type), ROGUE_ARG(((RogueClassMethod*)(NULL))) )))) ));
        }
      }
    }
  }
  if (!!(statements_0))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_1276_12,(THIS->local_declarations));
      RogueInt32 _auto_1277_13 = (0);
      for (;_auto_1277_13 < _auto_1276_12->count;++_auto_1277_13)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassLocal*,v_14,(((RogueClassLocal*)(_auto_1276_12->data->objects[_auto_1277_13]))));
        RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLocalDeclaration*,ROGUE_CREATE_OBJECT(CmdLocalDeclaration))), ROGUE_ARG(v_14->t), v_14, false )))))) );
      }
    }
  }
  else
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_1281_15,(THIS->local_declarations));
      RogueInt32 _auto_1282_16 = (0);
      for (;_auto_1282_16 < _auto_1281_15->count;++_auto_1282_16)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassLocal*,v_17,(((RogueClassLocal*)(_auto_1281_15->data->objects[_auto_1282_16]))));
        RoguePropertyList__add__Property( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->global_properties), ROGUE_ARG(((RogueProperty__init__Token_Type_String_Type_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassProperty*,ROGUE_CREATE_OBJECT(Property))), ROGUE_ARG(v_17->t), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global), ROGUE_ARG(v_17->name), ROGUE_ARG(v_17->_type), ROGUE_ARG(v_17->initial_value) )))) );
      }
    }
  }
}

RogueClassType* Rogue_Parser__parse_type( RogueClassParser* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueString*,name_0,0);
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  if (!!((call_ROGUEM44( 15, t_1 ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassType*,type_2,((call_ROGUEM44( 15, ROGUE_ARG(((RogueParser__read( ROGUE_ARG(THIS) )))) ))));
    if ((((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_empty_brackets) ))) || ((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_question_mark) )))))
    {
      name_0 = ((RogueString*)type_2->name);
      for (;;)
      {
        if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_empty_brackets) ))))
        {
          name_0 = ((RogueString*)((RogueString__operatorPLUS__String( name_0, Rogue_literal_strings[198] ))));
        }
        else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_question_mark) ))))
        {
          name_0 = ((RogueString*)((RogueString__operatorPLUS__String( name_0, Rogue_literal_strings[218] ))));
        }
        else
        {
          goto _auto_1283;
        }
      }
      _auto_1283:;
    }
    else
    {
      return (RogueClassType*)(type_2);
    }
  }
  else
  {
    name_0 = ((RogueString*)((RogueParser__parse_possible_type__Logical( ROGUE_ARG(THIS), false ))));
  }
  ROGUE_DEF_LOCAL_REF(RogueClassType*,type_3,(((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), t_1, name_0 )))));
  return (RogueClassType*)(type_3);
}

RogueString* RogueParser__parse_possible_type__Logical( RogueClassParser* THIS, RogueLogical allow_at_sign_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  ROGUE_DEF_LOCAL_REF(RogueString*,name_2,(((RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), allow_at_sign_0 )))));
  if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_specialize) ))))
  {
    name_2 = ((RogueString*)((RogueString__operatorPLUS__String( name_2, ROGUE_ARG(((RogueParser__parse_specialization_string( ROGUE_ARG(THIS) )))) ))));
  }
  else if (((RogueString__operatorEQUALSEQUALS__String( name_2, Rogue_literal_strings[278] ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,parameter_types_3,0);
    ROGUE_DEF_LOCAL_REF(RogueClassType*,return_type_4,0);
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_paren) ))))
    {
      if (!(((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren) )))))
      {
        parameter_types_3 = ((RogueTypeList*)((RogueTypeList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueTypeList*,ROGUE_CREATE_OBJECT(TypeList))) ))));
        RogueLogical first_5 = (true);
        while ((first_5 || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) )))))
        {
          first_5 = ((RogueLogical)false);
          ROGUE_DEF_LOCAL_REF(RogueClassToken*,type_t_6,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
          ROGUE_DEF_LOCAL_REF(RogueString*,type_name_7,(((RogueParser__parse_possible_type__Logical( ROGUE_ARG(THIS), false )))));
          if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_colon) ))))
          {
            RogueTypeList__add__Type( parameter_types_3, ROGUE_ARG(((Rogue_Parser__parse_type( ROGUE_ARG(THIS) )))) );
          }
          else
          {
            RogueTypeList__add__Type( parameter_types_3, ROGUE_ARG(((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), type_t_6, type_name_7 )))) );
          }
        }
        RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren), ROGUE_ARG(((RogueString*)(NULL))) );
      }
    }
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_arrow) ))))
    {
      RogueLogical has_parens_8 = (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_paren) ))));
      return_type_4 = ((RogueClassType*)((Rogue_Parser__parse_type( ROGUE_ARG(THIS) ))));
      if (has_parens_8)
      {
        RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren), ROGUE_ARG(((RogueString*)(NULL))) );
      }
    }
    name_2 = ((RogueString*)((RogueProgram__get_callback_type_reference__Token_TypeList_Type( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), t_1, parameter_types_3, return_type_4 )))->name);
  }
  for (;;)
  {
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_empty_brackets) ))))
    {
      name_2 = ((RogueString*)((RogueString__operatorPLUS__String( name_2, Rogue_literal_strings[198] ))));
    }
    else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_question_mark) ))))
    {
      name_2 = ((RogueString*)((RogueString__operatorPLUS__String( name_2, Rogue_literal_strings[218] ))));
    }
    else
    {
      goto _auto_1284;
    }
  }
  _auto_1284:;
  return (RogueString*)(name_2);
}

RogueClassCmdIf* RogueParser__parse_if( RogueClassParser* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_0,(((RogueParser__read( ROGUE_ARG(THIS) )))));
  ROGUE_DEF_LOCAL_REF(RogueClassCmdIf*,cmd_if_1,(((RogueCmdIf__init__Token_Cmd_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdIf*,ROGUE_CREATE_OBJECT(CmdIf))), t_0, ROGUE_ARG(((RogueClassCmd*)(NULL))), 2 )))));
  cmd_if_1->condition = ((RogueParser__parse_expression( ROGUE_ARG(THIS) )));
  if (((RogueParser__consume_eols( ROGUE_ARG(THIS) ))))
  {
    RogueParser__parse_multi_line_statements__CmdStatementList( ROGUE_ARG(THIS), ROGUE_ARG(cmd_if_1->statements) );
    t_0 = ((RogueClassToken*)((RogueParser__peek( ROGUE_ARG(THIS) ))));
    ROGUE_DEF_LOCAL_REF(RogueClassCmdIf*,cur_if_2,(cmd_if_1));
    while (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_elseIf) ))))
    {
      RogueInt32 starting_position_3 = (THIS->reader->position);
      RogueParser__read( ROGUE_ARG(THIS) );
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,elseIf_condition_4,(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))));
      if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_eol) ))))
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmdIf*,cmd_else_if_5,(((RogueCmdIf__init__Token_Cmd_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdIf*,ROGUE_CREATE_OBJECT(CmdIf))), t_0, elseIf_condition_4, 3 )))));
        RogueParser__parse_multi_line_statements__CmdStatementList( ROGUE_ARG(THIS), ROGUE_ARG(cmd_else_if_5->statements) );
        cur_if_2->else_statements = ((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )));
        RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)cur_if_2->else_statements)), ROGUE_ARG(((RogueClassCmd*)(cmd_else_if_5))) );
        cur_if_2 = ((RogueClassCmdIf*)cmd_else_if_5);
      }
      else
      {
        THIS->reader->position = starting_position_3;
        goto _auto_1285;
      }
      t_0 = ((RogueClassToken*)((RogueParser__peek( ROGUE_ARG(THIS) ))));
    }
    _auto_1285:;
    if ((((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_else) ))) && ((void*)((RogueTokenReader__peek__Int32( ROGUE_ARG(THIS->reader), 1 )))->_type) == ((void*)RogueTokenType_eol)))
    {
      RogueParser__read( ROGUE_ARG(THIS) );
      cur_if_2->else_statements = ((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )));
      RogueParser__parse_multi_line_statements__CmdStatementList( ROGUE_ARG(THIS), ROGUE_ARG(cur_if_2->else_statements) );
    }
    RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_endIf), ROGUE_ARG(((RogueString*)(NULL))) );
  }
  else
  {
    RogueParser__parse_single_line_statements__CmdStatementList( ROGUE_ARG(THIS), ROGUE_ARG(cmd_if_1->statements) );
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    t_0 = ((RogueClassToken*)((RogueParser__peek( ROGUE_ARG(THIS) ))));
    ROGUE_DEF_LOCAL_REF(RogueClassCmdIf*,cur_if_6,(cmd_if_1));
    while (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_elseIf) ))))
    {
      RogueInt32 starting_position_7 = (THIS->reader->position);
      RogueParser__read( ROGUE_ARG(THIS) );
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,elseIf_condition_8,(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))));
      if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_eol) ))))
      {
        THIS->reader->position = starting_position_7;
        goto _auto_1286;
      }
      else
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmdIf*,cmd_else_if_9,(((RogueCmdIf__init__Token_Cmd_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdIf*,ROGUE_CREATE_OBJECT(CmdIf))), t_0, elseIf_condition_8, 3 )))));
        RogueParser__parse_single_line_statements__CmdStatementList( ROGUE_ARG(THIS), ROGUE_ARG(cmd_else_if_9->statements) );
        cur_if_6->else_statements = ((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )));
        RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)cur_if_6->else_statements)), ROGUE_ARG(((RogueClassCmd*)(cmd_else_if_9))) );
        cur_if_6 = ((RogueClassCmdIf*)cmd_else_if_9);
        RogueParser__must_consume_eols( ROGUE_ARG(THIS) );
      }
      t_0 = ((RogueClassToken*)((RogueParser__peek( ROGUE_ARG(THIS) ))));
    }
    _auto_1286:;
    if ((((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_else) ))) && ((void*)((RogueTokenReader__peek__Int32( ROGUE_ARG(THIS->reader), 1 )))->_type) != ((void*)RogueTokenType_eol)))
    {
      RogueParser__read( ROGUE_ARG(THIS) );
      cur_if_6->else_statements = ((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )));
      RogueParser__parse_single_line_statements__CmdStatementList( ROGUE_ARG(THIS), ROGUE_ARG(cur_if_6->else_statements) );
    }
  }
  return (RogueClassCmdIf*)(cmd_if_1);
}

RogueClassCmdGenericLoop* RogueParser__parse_loop( RogueClassParser* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_0,(((RogueParser__read( ROGUE_ARG(THIS) )))));
  ROGUE_DEF_LOCAL_REF(RogueClassCmdGenericLoop*,cmd_loop_1,(((RogueCmdGenericLoop__init__Token_Int32_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdGenericLoop*,ROGUE_CREATE_OBJECT(CmdGenericLoop))), t_0, 7, ROGUE_ARG(((RogueClassCmd*)(NULL))), ROGUE_ARG(((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )))), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))) )))));
  if (!(((RogueParser__consume_eols( ROGUE_ARG(THIS) )))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassLocal*,control_var_2,(((RogueMethod__add_local__Token_String_Type_Cmd( ROGUE_ARG(THIS->this_method), t_0, ROGUE_ARG(((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )))), ROGUE_ARG(((RogueClassType*)(NULL))), ROGUE_ARG(((RogueClassCmd*)(NULL))) )))));
    control_var_2->initial_value = ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), t_0, 1 )))));
    ROGUE_DEF_LOCAL_REF(RogueClassLocal*,last_var_3,(((RogueMethod__add_local__Token_String_Type_Cmd( ROGUE_ARG(THIS->this_method), t_0, ROGUE_ARG(((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )))), ROGUE_ARG(((RogueClassType*)(NULL))), ROGUE_ARG(((RogueClassCmd*)(NULL))) )))));
    last_var_3->initial_value = ((RogueParser__parse_expression( ROGUE_ARG(THIS) )));
    RogueParser__must_consume_eols( ROGUE_ARG(THIS) );
    ROGUE_DEF_LOCAL_REF(RogueClassCmdAdjustLocal*,step_cmd_4,(((RogueCmdAdjustLocal__init__Token_Local_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAdjustLocal*,ROGUE_CREATE_OBJECT(CmdAdjustLocal))), t_0, control_var_2, 1 )))));
    cmd_loop_1->condition = ((RogueClassCmd*)(((RogueClassCmdCompareLE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareLE*,ROGUE_CREATE_OBJECT(CmdCompareLE)))), t_0, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), t_0, control_var_2 )))))), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), t_0, last_var_3 )))))) )))))));
    RogueCmdGenericLoop__add_control_var__Local( cmd_loop_1, control_var_2 );
    RogueCmdGenericLoop__add_control_var__Local( cmd_loop_1, last_var_3 );
    RogueCmdGenericLoop__add_upkeep__Cmd( cmd_loop_1, ROGUE_ARG(((RogueClassCmd*)(step_cmd_4))) );
  }
  RogueParser__parse_multi_line_statements__CmdStatementList( ROGUE_ARG(THIS), ROGUE_ARG(cmd_loop_1->statements) );
  RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_endLoop), ROGUE_ARG(((RogueString*)(NULL))) );
  return (RogueClassCmdGenericLoop*)(cmd_loop_1);
}

RogueClassCmdGenericLoop* RogueParser__parse_while( RogueClassParser* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_0,(((RogueParser__read( ROGUE_ARG(THIS) )))));
  ROGUE_DEF_LOCAL_REF(RogueClassCmdGenericLoop*,cmd_while_1,(((RogueCmdGenericLoop__init__Token_Int32_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdGenericLoop*,ROGUE_CREATE_OBJECT(CmdGenericLoop))), t_0, 8, ROGUE_ARG(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))), ROGUE_ARG(((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )))), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))) )))));
  if (((RogueParser__consume_eols( ROGUE_ARG(THIS) ))))
  {
    RogueParser__parse_multi_line_statements__CmdStatementList( ROGUE_ARG(THIS), ROGUE_ARG(cmd_while_1->statements) );
    RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_endWhile), ROGUE_ARG(((RogueString*)(NULL))) );
  }
  else
  {
    RogueParser__parse_single_line_statements__CmdStatementList( ROGUE_ARG(THIS), ROGUE_ARG(cmd_while_1->statements) );
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
  }
  return (RogueClassCmdGenericLoop*)(cmd_while_1);
}

RogueClassCmd* RogueParser__parse_for_each( RogueClassParser* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_0,(((RogueParser__read( ROGUE_ARG(THIS) )))));
  RogueLogical has_parens_1 = (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_paren) ))));
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,expr_2,(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))));
  ROGUE_DEF_LOCAL_REF(RogueClassCmdAccess*,access_3,(((RogueClassCmdAccess*)(RogueObject_as(expr_2,RogueTypeCmdAccess)))));
  if (!!(access_3))
  {
    if ((!!(access_3->context) || !!(access_3->args)))
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(access_3->t), Rogue_literal_strings[290] ))));
    }
    else
    {
      ROGUE_DEF_LOCAL_REF(RogueString*,index_var_name_4,0);
      if (((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(access_3->name), Rogue_literal_strings[291] ))))
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(access_3->t), Rogue_literal_strings[292] ))));
      }
      else if (((RogueParser__consume__String( ROGUE_ARG(THIS), Rogue_literal_strings[291] ))))
      {
        index_var_name_4 = ((RogueString*)((RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false ))));
      }
      if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_in) ))))
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,collection_5,(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))));
        ROGUE_DEF_LOCAL_REF(RogueClassCmdRange*,range_6,(((RogueClassCmdRange*)(RogueObject_as(collection_5,RogueTypeCmdRange)))));
        if (!!(range_6))
        {
          if (!!(index_var_name_4))
          {
            ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(range_6->t), Rogue_literal_strings[293] ))));
          }
          ROGUE_DEF_LOCAL_REF(RogueClassLocal*,control_var_7,(((RogueMethod__add_local__Token_String_Type_Cmd( ROGUE_ARG(THIS->this_method), t_0, ROGUE_ARG(access_3->name), ROGUE_ARG(((RogueClassType*)(NULL))), ROGUE_ARG(((RogueClassCmd*)(NULL))) )))));
          control_var_7->initial_value = range_6->first;
          ROGUE_DEF_LOCAL_REF(RogueClassLocal*,last_var_8,(((RogueMethod__add_local__Token_String_Type_Cmd( ROGUE_ARG(THIS->this_method), t_0, ROGUE_ARG(((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )))), ROGUE_ARG(((RogueClassType*)(NULL))), ROGUE_ARG(((RogueClassCmd*)(NULL))) )))));
          last_var_8->initial_value = range_6->last;
          ROGUE_DEF_LOCAL_REF(RogueClassCmd*,step_cmd_9,(((RogueClassCmd*)(NULL))));
          if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_step) ))))
          {
            ROGUE_DEF_LOCAL_REF(RogueClassCmd*,step_value_10,(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))));
            step_cmd_9 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdModifyAndAssignLocal__init__Token_Local_TokenType_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdModifyAndAssignLocal*,ROGUE_CREATE_OBJECT(CmdModifyAndAssignLocal))), ROGUE_ARG(range_6->t), control_var_7, ROGUE_ARG(RogueTokenType_symbol_plus_equals), step_value_10 ))))));
          }
          else if (RogueObject_instance_of(range_6,RogueTypeCmdRangeUpTo))
          {
            step_cmd_9 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAdjustLocal*,ROGUE_CREATE_OBJECT(CmdAdjustLocal))), ROGUE_ARG(range_6->t), control_var_7, 1 ))))));
          }
          else
          {
            step_cmd_9 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAdjustLocal*,ROGUE_CREATE_OBJECT(CmdAdjustLocal))), ROGUE_ARG(range_6->t), control_var_7, -1 ))))));
          }
          ROGUE_DEF_LOCAL_REF(RogueClassCmd*,compare_cmd_11,0);
          if (RogueObject_instance_of(range_6,RogueTypeCmdRangeUpTo))
          {
            compare_cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCompareLE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareLE*,ROGUE_CREATE_OBJECT(CmdCompareLE)))), t_0, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), t_0, control_var_7 )))))), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), t_0, last_var_8 )))))) ))))))));
          }
          else
          {
            compare_cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCompareGE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareGE*,ROGUE_CREATE_OBJECT(CmdCompareGE)))), t_0, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), t_0, control_var_7 )))))), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), t_0, last_var_8 )))))) ))))))));
          }
          ROGUE_DEF_LOCAL_REF(RogueClassCmdGenericLoop*,cmd_for_each_12,(((RogueCmdGenericLoop__init__Token_Int32_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdGenericLoop*,ROGUE_CREATE_OBJECT(CmdGenericLoop))), t_0, 9, compare_cmd_11, ROGUE_ARG(((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )))), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))) )))));
          RogueCmdGenericLoop__add_control_var__Local( cmd_for_each_12, control_var_7 );
          RogueCmdGenericLoop__add_control_var__Local( cmd_for_each_12, last_var_8 );
          RogueCmdGenericLoop__add_upkeep__Cmd( cmd_for_each_12, step_cmd_9 );
          if (has_parens_1)
          {
            RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren), ROGUE_ARG(((RogueString*)(NULL))) );
          }
          RogueParser__parse_single_or_multi_line_statements__CmdStatementList_TokenType( ROGUE_ARG(THIS), ROGUE_ARG(cmd_for_each_12->statements), ROGUE_ARG(RogueTokenType_keyword_endForEach) );
          return (RogueClassCmd*)(((RogueClassCmd*)(cmd_for_each_12)));
        }
        else
        {
          ROGUE_DEF_LOCAL_REF(RogueClassCmd*,step_cmd_13,0);
          if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_step) ))))
          {
            step_cmd_13 = ((RogueClassCmd*)((RogueParser__parse_expression( ROGUE_ARG(THIS) ))));
          }
          if (has_parens_1)
          {
            RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren), ROGUE_ARG(((RogueString*)(NULL))) );
          }
          ROGUE_DEF_LOCAL_REF(RogueClassCmdForEach*,cmd_for_each_14,(((RogueCmdForEach__init__Token_String_String_Cmd_Cmd_CmdStatementList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdForEach*,ROGUE_CREATE_OBJECT(CmdForEach))), t_0, ROGUE_ARG(access_3->name), index_var_name_4, collection_5, step_cmd_13, ROGUE_ARG(((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )))) )))));
          RogueParser__parse_single_or_multi_line_statements__CmdStatementList_TokenType( ROGUE_ARG(THIS), ROGUE_ARG(cmd_for_each_14->statements), ROGUE_ARG(RogueTokenType_keyword_endForEach) );
          return (RogueClassCmd*)(((RogueClassCmd*)(cmd_for_each_14)));
        }
      }
      else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_of) ))))
      {
        if (!!(index_var_name_4))
        {
          ROGUE_THROW(((RogueToken__error__String( t_0, Rogue_literal_strings[294] ))));
        }
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,collection_15,(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))));
        ROGUE_DEF_LOCAL_REF(RogueClassCmdRange*,range_16,(((RogueClassCmdRange*)(RogueObject_as(collection_15,RogueTypeCmdRange)))));
        if (!!(range_16))
        {
          ROGUE_THROW(((RogueToken__error__String( t_0, Rogue_literal_strings[295] ))));
        }
        else
        {
          ROGUE_DEF_LOCAL_REF(RogueClassCmd*,step_cmd_17,0);
          if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_step) ))))
          {
            step_cmd_17 = ((RogueClassCmd*)((RogueParser__parse_expression( ROGUE_ARG(THIS) ))));
          }
          if (has_parens_1)
          {
            RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren), ROGUE_ARG(((RogueString*)(NULL))) );
          }
          ROGUE_DEF_LOCAL_REF(RogueClassCmdForEach*,cmd_for_each_18,(((RogueCmdForEach__init__Token_String_String_Cmd_Cmd_CmdStatementList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdForEach*,ROGUE_CREATE_OBJECT(CmdForEach))), t_0, ROGUE_ARG(((RogueString*)(NULL))), ROGUE_ARG(access_3->name), collection_15, step_cmd_17, ROGUE_ARG(((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )))) )))));
          RogueParser__parse_single_or_multi_line_statements__CmdStatementList_TokenType( ROGUE_ARG(THIS), ROGUE_ARG(cmd_for_each_18->statements), ROGUE_ARG(RogueTokenType_keyword_endForEach) );
          return (RogueClassCmd*)(((RogueClassCmd*)(cmd_for_each_18)));
        }
      }
      else
      {
        ROGUE_THROW(((RogueToken__error__String( t_0, Rogue_literal_strings[296] ))));
      }
    }
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdRange*,range_19,(((RogueClassCmdRange*)(RogueObject_as(expr_2,RogueTypeCmdRange)))));
    if (!!(range_19))
    {
      ROGUE_DEF_LOCAL_REF(RogueClassLocal*,control_var_20,(((RogueMethod__add_local__Token_String_Type_Cmd( ROGUE_ARG(THIS->this_method), t_0, ROGUE_ARG(((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )))), ROGUE_ARG(((RogueClassType*)(NULL))), ROGUE_ARG(((RogueClassCmd*)(NULL))) )))));
      control_var_20->initial_value = range_19->first;
      ROGUE_DEF_LOCAL_REF(RogueClassLocal*,last_var_21,(((RogueMethod__add_local__Token_String_Type_Cmd( ROGUE_ARG(THIS->this_method), t_0, ROGUE_ARG(((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )))), ROGUE_ARG(((RogueClassType*)(NULL))), ROGUE_ARG(((RogueClassCmd*)(NULL))) )))));
      last_var_21->initial_value = range_19->last;
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,step_cmd_22,0);
      if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_step) ))))
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,step_value_23,(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))));
        step_cmd_22 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdModifyAndAssignLocal__init__Token_Local_TokenType_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdModifyAndAssignLocal*,ROGUE_CREATE_OBJECT(CmdModifyAndAssignLocal))), ROGUE_ARG(range_19->t), control_var_20, ROGUE_ARG(RogueTokenType_symbol_plus_equals), step_value_23 ))))));
      }
      else if (RogueObject_instance_of(range_19,RogueTypeCmdRangeUpTo))
      {
        step_cmd_22 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAdjustLocal*,ROGUE_CREATE_OBJECT(CmdAdjustLocal))), ROGUE_ARG(range_19->t), control_var_20, 1 ))))));
      }
      else
      {
        step_cmd_22 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAdjustLocal*,ROGUE_CREATE_OBJECT(CmdAdjustLocal))), ROGUE_ARG(range_19->t), control_var_20, -1 ))))));
      }
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,compare_cmd_24,0);
      if (RogueObject_instance_of(range_19,RogueTypeCmdRangeUpTo))
      {
        compare_cmd_24 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCompareLE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareLE*,ROGUE_CREATE_OBJECT(CmdCompareLE)))), t_0, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), t_0, control_var_20 )))))), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), t_0, last_var_21 )))))) ))))))));
      }
      else
      {
        compare_cmd_24 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCompareGE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareGE*,ROGUE_CREATE_OBJECT(CmdCompareGE)))), t_0, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), t_0, control_var_20 )))))), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), t_0, last_var_21 )))))) ))))))));
      }
      ROGUE_DEF_LOCAL_REF(RogueClassCmdGenericLoop*,cmd_for_each_25,(((RogueCmdGenericLoop__init__Token_Int32_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdGenericLoop*,ROGUE_CREATE_OBJECT(CmdGenericLoop))), t_0, 9, compare_cmd_24, ROGUE_ARG(((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )))), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))) )))));
      RogueCmdGenericLoop__add_control_var__Local( cmd_for_each_25, control_var_20 );
      RogueCmdGenericLoop__add_control_var__Local( cmd_for_each_25, last_var_21 );
      RogueCmdGenericLoop__add_upkeep__Cmd( cmd_for_each_25, step_cmd_22 );
      if (has_parens_1)
      {
        RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren), ROGUE_ARG(((RogueString*)(NULL))) );
      }
      RogueParser__parse_single_or_multi_line_statements__CmdStatementList_TokenType( ROGUE_ARG(THIS), ROGUE_ARG(cmd_for_each_25->statements), ROGUE_ARG(RogueTokenType_keyword_endForEach) );
      return (RogueClassCmd*)(((RogueClassCmd*)(cmd_for_each_25)));
    }
    else
    {
      ROGUE_THROW(((RogueToken__error__String( t_0, Rogue_literal_strings[297] ))));
    }
  }
  RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[298] )))) )))) );
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(expr_2->t), Rogue_literal_strings[299] ))));
}

RogueClassToken* RogueParser__peek( RogueClassParser* THIS )
{
  return (RogueClassToken*)(((RogueTokenReader__peek( ROGUE_ARG(THIS->reader) ))));
}

RogueClassToken* RogueParser__read( RogueClassParser* THIS )
{
  return (RogueClassToken*)(((RogueTokenReader__read( ROGUE_ARG(THIS->reader) ))));
}

RogueString* RogueParser__read_identifier__Logical( RogueClassParser* THIS, RogueLogical allow_at_sign_0 )
{
  RogueLogical direct_access_1 = (false);
  if (allow_at_sign_0)
  {
    direct_access_1 = ((RogueLogical)((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_at) ))));
  }
  if (!(((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_identifier) )))))
  {
    if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_type_identifier) ))))
    {
      ROGUE_DEF_LOCAL_REF(RogueString*,result_2,((call_ROGUEM44( 15, ROGUE_ARG(((RogueParser__read( ROGUE_ARG(THIS) )))) ))->name));
      if (direct_access_1)
      {
        result_2 = ((RogueString*)((RogueString__operatorPLUS__String( Rogue_literal_strings[188], result_2 ))));
      }
      return (RogueString*)(result_2);
    }
    ROGUE_THROW(((RogueParser__error__String( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[68] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM39( 8, ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))) ))) )))) )))), Rogue_literal_strings[64] )))) )))) ))));
  }
  ROGUE_DEF_LOCAL_REF(RogueString*,result_3,((call_ROGUEM39( 1, ROGUE_ARG(((RogueParser__read( ROGUE_ARG(THIS) )))) ))));
  if (direct_access_1)
  {
    result_3 = ((RogueString*)((RogueString__operatorPLUS__String( Rogue_literal_strings[188], result_3 ))));
  }
  return (RogueString*)(result_3);
}

RogueClassCmd* RogueParser__parse_expression( RogueClassParser* THIS )
{
  RogueParser__consume_eols( ROGUE_ARG(THIS) );
  return (RogueClassCmd*)(((RogueParser__parse_range( ROGUE_ARG(THIS) ))));
}

RogueClassCmd* RogueParser__parse_range( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_range__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueParser__parse_logical_xor( ROGUE_ARG(THIS) )))) ))));
}

RogueClassCmd* RogueParser__parse_range__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_upTo) ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdRangeUpTo*)(((RogueCmdRange__init__Token_Cmd_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdRange*)ROGUE_CREATE_REF(RogueClassCmdRangeUpTo*,ROGUE_CREATE_OBJECT(CmdRangeUpTo)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_logical_xor( ROGUE_ARG(THIS) )))), ROGUE_ARG(((RogueClassCmd*)(NULL))) ))))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_downTo) ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdRangeDownTo*)(((RogueCmdRange__init__Token_Cmd_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdRange*)ROGUE_CREATE_REF(RogueClassCmdRangeDownTo*,ROGUE_CREATE_OBJECT(CmdRangeDownTo)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_logical_xor( ROGUE_ARG(THIS) )))), ROGUE_ARG(((RogueClassCmd*)(NULL))) ))))))));
  }
  else
  {
    return (RogueClassCmd*)(lhs_0);
  }
}

RogueClassCmd* RogueParser__parse_logical_xor( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_logical_xor__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueParser__parse_logical_or( ROGUE_ARG(THIS) )))) ))));
}

RogueClassCmd* RogueParser__parse_logical_xor__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_xor) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_logical_xor__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdLogicalXor*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdLogicalXor*,ROGUE_CREATE_OBJECT(CmdLogicalXor)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_logical_or( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_logical_or( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_logical_or__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueParser__parse_logical_and( ROGUE_ARG(THIS) )))) ))));
}

RogueClassCmd* RogueParser__parse_logical_or__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_or) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_logical_or__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdLogicalOr*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdLogicalOr*,ROGUE_CREATE_OBJECT(CmdLogicalOr)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_logical_and( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_logical_and( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_logical_and__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueParser__parse_comparison( ROGUE_ARG(THIS) )))) ))));
}

RogueClassCmd* RogueParser__parse_logical_and__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_and) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_logical_and__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdLogicalAnd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdLogicalAnd*,ROGUE_CREATE_OBJECT(CmdLogicalAnd)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_comparison( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_comparison( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueParser__parse_bitwise_xor( ROGUE_ARG(THIS) )))) ))));
}

RogueClassCmd* RogueParser__parse_comparison__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_eq) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdCompareEQ*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareEQ*,ROGUE_CREATE_OBJECT(CmdCompareEQ)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_bitwise_xor( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_is) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdCompareIs*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareIs*,ROGUE_CREATE_OBJECT(CmdCompareIs)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_bitwise_xor( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_ne) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdCompareNE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareNE*,ROGUE_CREATE_OBJECT(CmdCompareNE)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_bitwise_xor( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_isNot) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdCompareIsNot*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareIsNot*,ROGUE_CREATE_OBJECT(CmdCompareIsNot)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_bitwise_xor( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_lt) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdCompareLT*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareLT*,ROGUE_CREATE_OBJECT(CmdCompareLT)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_bitwise_xor( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_gt) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdCompareGT*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareGT*,ROGUE_CREATE_OBJECT(CmdCompareGT)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_bitwise_xor( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_le) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdCompareLE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareLE*,ROGUE_CREATE_OBJECT(CmdCompareLE)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_bitwise_xor( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_ge) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdCompareGE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareGE*,ROGUE_CREATE_OBJECT(CmdCompareGE)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_bitwise_xor( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_instanceOf) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdInstanceOf*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ROGUE_ARG(((RogueClassCmdTypeOperator*)ROGUE_CREATE_REF(RogueClassCmdInstanceOf*,ROGUE_CREATE_OBJECT(CmdInstanceOf)))), t_1, lhs_0, ROGUE_ARG(((Rogue_Parser__parse_type( ROGUE_ARG(THIS) )))) ))))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_notInstanceOf) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalNot*,ROGUE_CREATE_OBJECT(CmdLogicalNot)))), t_1, ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdInstanceOf*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ROGUE_ARG(((RogueClassCmdTypeOperator*)ROGUE_CREATE_REF(RogueClassCmdInstanceOf*,ROGUE_CREATE_OBJECT(CmdInstanceOf)))), t_1, lhs_0, ROGUE_ARG(((Rogue_Parser__parse_type( ROGUE_ARG(THIS) )))) )))))))) ))))))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_bitwise_xor( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_bitwise_xor__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueParser__parse_bitwise_or( ROGUE_ARG(THIS) )))) ))));
}

RogueClassCmd* RogueParser__parse_bitwise_xor__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_tilde) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_bitwise_xor__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdBitwiseXor*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdBitwiseXor*,ROGUE_CREATE_OBJECT(CmdBitwiseXor)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_bitwise_or( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_bitwise_or( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_bitwise_or__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueParser__parse_bitwise_and( ROGUE_ARG(THIS) )))) ))));
}

RogueClassCmd* RogueParser__parse_bitwise_or__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  RogueInt32 starting_pos_2 = (THIS->reader->position);
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_vertical_bar) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,rhs_3,(((RogueParser__parse_bitwise_and( ROGUE_ARG(THIS) )))));
    return (RogueClassCmd*)(((RogueParser__parse_bitwise_or__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdBitwiseOr*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdBitwiseOr*,ROGUE_CREATE_OBJECT(CmdBitwiseOr)))), t_1, lhs_0, rhs_3 )))))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_bitwise_and( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_bitwise_and__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueParser__parse_bitwise_shift( ROGUE_ARG(THIS) )))) ))));
}

RogueClassCmd* RogueParser__parse_bitwise_and__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_ampersand) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_bitwise_and__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdBitwiseAnd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdBitwiseAnd*,ROGUE_CREATE_OBJECT(CmdBitwiseAnd)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_bitwise_shift( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_bitwise_shift( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_bitwise_shift__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueParser__parse_add_subtract( ROGUE_ARG(THIS) )))) ))));
}

RogueClassCmd* RogueParser__parse_bitwise_shift__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_shift_left) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdBitwiseShiftLeft*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdBitwiseShiftLeft*,ROGUE_CREATE_OBJECT(CmdBitwiseShiftLeft)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_add_subtract( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_shift_right) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdBitwiseShiftRight*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdBitwiseShiftRight*,ROGUE_CREATE_OBJECT(CmdBitwiseShiftRight)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_add_subtract( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_shift_right_x) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdBitwiseShiftRightX*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdBitwiseShiftRightX*,ROGUE_CREATE_OBJECT(CmdBitwiseShiftRightX)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_add_subtract( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_add_subtract( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueParser__parse_multiply_divide_mod( ROGUE_ARG(THIS) )))) ))));
}

RogueClassCmd* RogueParser__parse_add_subtract__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_plus) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdAdd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdAdd*,ROGUE_CREATE_OBJECT(CmdAdd)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_multiply_divide_mod( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_minus) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdSubtract*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdSubtract*,ROGUE_CREATE_OBJECT(CmdSubtract)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_multiply_divide_mod( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_multiply_divide_mod( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_multiply_divide_mod__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueParser__parse_power( ROGUE_ARG(THIS) )))) ))));
}

RogueClassCmd* RogueParser__parse_multiply_divide_mod__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_times) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_multiply_divide_mod__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdMultiply*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdMultiply*,ROGUE_CREATE_OBJECT(CmdMultiply)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_power( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_slash) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_multiply_divide_mod__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdDivide*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdDivide*,ROGUE_CREATE_OBJECT(CmdDivide)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_power( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_percent) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_multiply_divide_mod__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdMod*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdMod*,ROGUE_CREATE_OBJECT(CmdMod)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_power( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_power( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_power__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueParser__parse_pre_unary( ROGUE_ARG(THIS) )))) ))));
}

RogueClassCmd* RogueParser__parse_power__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_caret) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueParser__parse_power__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdPower*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdPower*,ROGUE_CREATE_OBJECT(CmdPower)))), t_1, lhs_0, ROGUE_ARG(((RogueParser__parse_pre_unary( ROGUE_ARG(THIS) )))) )))))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_pre_unary( RogueClassParser* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_0,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_minus) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdNegate*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdNegate*,ROGUE_CREATE_OBJECT(CmdNegate)))), t_0, ROGUE_ARG(((RogueParser__parse_pre_unary( ROGUE_ARG(THIS) )))) ))))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_not) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalNot*,ROGUE_CREATE_OBJECT(CmdLogicalNot)))), t_0, ROGUE_ARG(((RogueParser__parse_pre_unary( ROGUE_ARG(THIS) )))) ))))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_exclamation_point) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdBitwiseNot*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdBitwiseNot*,ROGUE_CREATE_OBJECT(CmdBitwiseNot)))), t_0, ROGUE_ARG(((RogueParser__parse_pre_unary( ROGUE_ARG(THIS) )))) ))))))));
  }
  return (RogueClassCmd*)(((RogueParser__parse_post_unary( ROGUE_ARG(THIS) ))));
}

RogueClassCmd* RogueParser__parse_post_unary( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_post_unary__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueParser__parse_member_access( ROGUE_ARG(THIS) )))) ))));
}

RogueClassCmd* RogueParser__parse_post_unary__Cmd( RogueClassParser* THIS, RogueClassCmd* operand_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_question_mark) ))))
  {
    return (RogueClassCmd*)(((RogueParser__parse_post_unary__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdLogicalize*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalize*,ROGUE_CREATE_OBJECT(CmdLogicalize)))), t_1, operand_0 )))))))) ))));
  }
  return (RogueClassCmd*)(operand_0);
}

RogueClassCmd* RogueParser__parse_member_access( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueParser__parse_term( ROGUE_ARG(THIS) )))) ))));
}

RogueClassCmd* RogueParser__parse_member_access__Cmd( RogueClassParser* THIS, RogueClassCmd* context_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_dot) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,access_2,(((RogueParser__parse_access__Token_Cmd( ROGUE_ARG(THIS), t_1, context_0 )))));
    return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( ROGUE_ARG(THIS), access_2 ))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_bracket) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    ROGUE_DEF_LOCAL_REF(RogueClassCmdElementAccess*,access_3,(((RogueCmdElementAccess__init__Token_Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdElementAccess*,ROGUE_CREATE_OBJECT(CmdElementAccess))), t_1, context_0, ROGUE_ARG(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))) )))));
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_bracket), ROGUE_ARG(((RogueString*)(NULL))) );
    return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(access_3))) ))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_arrow) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    ROGUE_DEF_LOCAL_REF(RogueClassType*,to_type_4,(((Rogue_Parser__parse_type( ROGUE_ARG(THIS) )))));
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_paren) ))))
    {
      if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren) ))))
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))), Rogue_literal_strings[281] ))));
      }
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,convert_fn_5,(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))));
      RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren), ROGUE_ARG(((RogueString*)(NULL))) );
      return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdListConvert__init__Token_Cmd_Type_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdListConvert*,ROGUE_CREATE_OBJECT(CmdListConvert))), t_1, context_0, to_type_4, convert_fn_5 )))))) ))));
    }
    return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdConvertToType*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ROGUE_ARG(((RogueClassCmdTypeOperator*)ROGUE_CREATE_REF(RogueClassCmdConvertToType*,ROGUE_CREATE_OBJECT(CmdConvertToType)))), t_1, context_0, to_type_4 )))))))) ))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_fat_arrow) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    ROGUE_DEF_LOCAL_REF(RogueString*,name_6,(((RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false )))));
    ROGUE_DEF_LOCAL_REF(RogueTypeList*,arg_types_7,0);
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_paren) ))))
    {
      arg_types_7 = ((RogueTypeList*)((RogueTypeList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueTypeList*,ROGUE_CREATE_OBJECT(TypeList))) ))));
      RogueLogical first_8 = (true);
      while ((first_8 || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) )))))
      {
        first_8 = ((RogueLogical)false);
        RogueParser__consume_eols( ROGUE_ARG(THIS) );
        RogueTypeList__add__Type( arg_types_7, ROGUE_ARG(((Rogue_Parser__parse_type( ROGUE_ARG(THIS) )))) );
        RogueParser__consume_eols( ROGUE_ARG(THIS) );
      }
      RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren), ROGUE_ARG(((RogueString*)(NULL))) );
      RogueParser__consume_eols( ROGUE_ARG(THIS) );
    }
    ROGUE_DEF_LOCAL_REF(RogueClassType*,return_type_9,0);
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_arrow) ))))
    {
      return_type_9 = ((RogueClassType*)((Rogue_Parser__parse_type( ROGUE_ARG(THIS) ))));
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateCallback__init__Token_Cmd_String_String_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCreateCallback*,ROGUE_CREATE_OBJECT(CmdCreateCallback))), t_1, context_0, name_6, ROGUE_ARG(((RogueProgram__get_callback_type_signature__TypeList( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), arg_types_7 )))), return_type_9 ))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_as) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    ROGUE_DEF_LOCAL_REF(RogueClassType*,as_type_10,(((Rogue_Parser__parse_type( ROGUE_ARG(THIS) )))));
    return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdAs*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ROGUE_ARG(((RogueClassCmdTypeOperator*)ROGUE_CREATE_REF(RogueClassCmdAs*,ROGUE_CREATE_OBJECT(CmdAs)))), t_1, context_0, as_type_10 )))))))) ))));
  }
  return (RogueClassCmd*)(context_0);
}

RogueClassCmd* RogueParser__parse_access__Token_Cmd( RogueClassParser* THIS, RogueClassToken* t_0, RogueClassCmd* context_1 )
{
  RogueParser__consume_eols( ROGUE_ARG(THIS) );
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_meta) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassType*,context_type_2,0);
    if (!!(context_1))
    {
      context_type_2 = ((RogueClassType*)(call_ROGUEM58( 17, context_1, ROGUE_ARG(((RogueScope__init__Type_Method( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassScope*,ROGUE_CREATE_OBJECT(Scope))), ROGUE_ARG(THIS->_this_type), ROGUE_ARG(((RogueClassMethod*)(NULL))) )))) )));
    }
    else
    {
      context_type_2 = ((RogueClassType*)THIS->_this_type);
    }
    if (!(!!(context_type_2)))
    {
      ROGUE_THROW(((RogueToken__error__String( t_0, Rogue_literal_strings[274] ))));
    }
    RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_dot), ROGUE_ARG(((RogueString*)(NULL))) );
    t_0 = ((RogueClassToken*)((RogueParser__peek( ROGUE_ARG(THIS) ))));
    ROGUE_DEF_LOCAL_REF(RogueString*,id_3,(((RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false )))));
    {
      if (((RogueString__operatorEQUALSEQUALS__String( id_3, Rogue_literal_strings[275] ))))
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdDefaultValue__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdDefaultValue*,ROGUE_CREATE_OBJECT(CmdDefaultValue))), t_0, context_type_2 ))))));
      }
      else
      {
        ROGUE_THROW(((RogueToken__error__String( t_0, Rogue_literal_strings[276] ))));
      }
    }
  }
  ROGUE_DEF_LOCAL_REF(RogueClassCmdAccess*,access_4,(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), t_0, ROGUE_ARG(((RogueParser__parse_possible_type__Logical( ROGUE_ARG(THIS), true )))) )))));
  if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_paren) ))))
  {
    access_4->args = ((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )));
    access_4->flag_args = ((RogueParser__parse_args__CmdArgs( ROGUE_ARG(THIS), ROGUE_ARG(access_4->args) )));
  }
  access_4->context = context_1;
  return (RogueClassCmd*)(((RogueClassCmd*)(access_4)));
}

RogueCmdFlagArgList* RogueParser__parse_args__CmdArgs( RogueClassParser* THIS, RogueClassCmdArgs* args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueCmdFlagArgList*,flag_args_1,0);
  ROGUE_DEF_LOCAL_REF(RogueClassTokenType*,end_type_2,(RogueTokenType_symbol_close_paren));
  RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_paren) );
  RogueParser__consume_eols( ROGUE_ARG(THIS) );
  if (!(((RogueParser__consume__TokenType( ROGUE_ARG(THIS), end_type_2 )))))
  {
    RogueLogical first_3 = (true);
    while ((first_3 || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) )))))
    {
      first_3 = ((RogueLogical)false);
      RogueParser__consume_eols( ROGUE_ARG(THIS) );
      if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_ampersand) ))))
      {
        if (!(!!(flag_args_1)))
        {
          flag_args_1 = ((RogueCmdFlagArgList*)((RogueCmdFlagArgList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueCmdFlagArgList*,ROGUE_CREATE_OBJECT(CmdFlagArgList))) ))));
        }
        RogueLogical is_negative_4 = (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_exclamation_point) ))));
        ROGUE_DEF_LOCAL_REF(RogueClassToken*,arg_t_5,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
        ROGUE_DEF_LOCAL_REF(RogueClassCmdFlagArg*,arg_6,(((RogueCmdFlagArg__init__Token_String_Cmd_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdFlagArg*,ROGUE_CREATE_OBJECT(CmdFlagArg))), arg_t_5, ROGUE_ARG(((RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false )))), ROGUE_ARG(((RogueClassCmd*)(NULL))), false )))));
        arg_6->is_negative = is_negative_4;
        RogueCmdFlagArgList__add__CmdFlagArg( flag_args_1, arg_6 );
        if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_equals) ))))
        {
          arg_6->value = ((RogueParser__parse_expression( ROGUE_ARG(THIS) )));
        }
      }
      else
      {
        RogueCmdList__add__Cmd( ((RogueCmdList*)args_0), ROGUE_ARG(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))) );
      }
    }
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), end_type_2, ROGUE_ARG(((RogueString*)(NULL))) );
  }
  return (RogueCmdFlagArgList*)(flag_args_1);
}

RogueString* RogueParser__parse_specialization_string( RogueClassParser* THIS )
{
  RogueStringBuilder__clear( ROGUE_ARG(THIS->string_buffer) );
  RogueParser__read( ROGUE_ARG(THIS) );
  RogueStringBuilder__print__String( ROGUE_ARG(THIS->string_buffer), Rogue_literal_strings[212] );
  RogueLogical first_0 = (true);
  while ((first_0 || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) )))))
  {
    if (first_0)
    {
      first_0 = ((RogueLogical)false);
    }
    else
    {
      RogueStringBuilder__print__Character( ROGUE_ARG(THIS->string_buffer), (RogueCharacter)',' );
    }
    RogueParser__parse_specializer__StringBuilder_TokenList( ROGUE_ARG(THIS), ROGUE_ARG(THIS->string_buffer), ROGUE_ARG(((RogueTokenList*)(NULL))) );
  }
  RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_specialize), ROGUE_ARG(((RogueString*)(NULL))) );
  RogueStringBuilder__print__String( ROGUE_ARG(THIS->string_buffer), Rogue_literal_strings[130] );
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(THIS->string_buffer) ))));
}

RogueInt32 RogueParser__parse_specializer_count( RogueClassParser* THIS )
{
  RogueInt32 num_specializers_0 = (0);
  RogueParser__read( ROGUE_ARG(THIS) );
  RogueLogical first_1 = (true);
  while ((first_1 || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) )))))
  {
    if (first_1)
    {
      first_1 = ((RogueLogical)false);
    }
    RogueParser__parse_specializer__StringBuilder_TokenList( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__clear( ROGUE_ARG(THIS->string_buffer) )))), ROGUE_ARG(((RogueTokenList*)(NULL))) );
    ++num_specializers_0;
  }
  RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_specialize), ROGUE_ARG(((RogueString*)(NULL))) );
  return (RogueInt32)(num_specializers_0);
}

void RogueParser__parse_specializer__StringBuilder_TokenList( RogueClassParser* THIS, RogueStringBuilder* buffer_0, RogueTokenList* tokens_1 )
{
  RogueInt32 nesting_level_2 = (1);
  while (((RogueTokenReader__has_another( ROGUE_ARG(THIS->reader) ))))
  {
    if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_eol) ))))
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))), Rogue_literal_strings[277] ))));
    }
    ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_3,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_backslash) ))))
    {
      RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[189] );
      if (!(((RogueTokenReader__has_another( ROGUE_ARG(THIS->reader) )))))
      {
        ROGUE_THROW(((RogueToken__error__String( t_3, Rogue_literal_strings[67] ))));
      }
      t_3 = ((RogueClassToken*)((RogueParser__read( ROGUE_ARG(THIS) ))));
      RogueStringBuilder__print__Object( buffer_0, ROGUE_ARG(((RogueObject*)(t_3))) );
      if (!!(tokens_1))
      {
        RogueTokenList__add__Token( tokens_1, t_3 );
      }
    }
    else if (((void*)t_3->_type) == ((void*)RogueTokenType_symbol_comma))
    {
      if (nesting_level_2 == 1)
      {
        return;
      }
      RogueParser__read( ROGUE_ARG(THIS) );
      if (!!(tokens_1))
      {
        RogueTokenList__add__Token( tokens_1, t_3 );
      }
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_specialize) ))))
    {
      if (!!(tokens_1))
      {
        RogueTokenList__add__Token( tokens_1, t_3 );
      }
      RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[212] );
      ++nesting_level_2;
    }
    else if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_specialize) ))))
    {
      --nesting_level_2;
      if (nesting_level_2 == 0)
      {
        return;
      }
      else
      {
        RogueParser__read( ROGUE_ARG(THIS) );
        if (!!(tokens_1))
        {
          RogueTokenList__add__Token( tokens_1, t_3 );
        }
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[130] );
      }
    }
    else
    {
      if (!!(tokens_1))
      {
        RogueTokenList__add__Token( tokens_1, t_3 );
      }
      ROGUE_DEF_LOCAL_REF(RogueString*,st_4,((call_ROGUEM39( 1, ROGUE_ARG(((RogueParser__read( ROGUE_ARG(THIS) )))) ))));
      if (((void*)t_3->_type) == ((void*)RogueTokenType_literal_string))
      {
        RogueStringBuilder__print__Character( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'"' )))), st_4 )))), (RogueCharacter)'"' );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, st_4 );
      }
    }
  }
}

RogueClassCmd* RogueParser__parse_term( RogueClassParser* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_0,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
  if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_paren) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren) ))))
    {
      ROGUE_THROW(((RogueToken__error__String( t_0, Rogue_literal_strings[282] ))));
    }
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,result_1,(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))));
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren), ROGUE_ARG(((RogueString*)(NULL))) );
    return (RogueClassCmd*)(result_1);
  }
  else if (((((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_identifier) ))) || ((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_at) )))) || ((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_meta) )))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,result_2,(((RogueParser__parse_access__Token_Cmd( ROGUE_ARG(THIS), t_0, ROGUE_ARG(((RogueClassCmd*)(NULL))) )))));
    ROGUE_DEF_LOCAL_REF(RogueClassCmdAccess*,access_3,(((RogueClassCmdAccess*)(RogueObject_as(result_2,RogueTypeCmdAccess)))));
    if (((!!(access_3) && ((RogueString__ends_with__String( ROGUE_ARG(access_3->name), ROGUE_ARG(((RogueCharacter__to_String( (RogueCharacter)']' )))) )))) && !(!!(access_3->args))))
    {
      if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_bracket) ))))
      {
        return (RogueClassCmd*)(((RogueParser__parse_typed_literal_list__Token_String( ROGUE_ARG(THIS), ROGUE_ARG(access_3->t), ROGUE_ARG(access_3->name) ))));
      }
    }
    return (RogueClassCmd*)(result_2);
  }
  else if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_type_identifier) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,result_4,(((RogueParser__parse_access__Token_Cmd( ROGUE_ARG(THIS), t_0, ROGUE_ARG(((RogueClassCmd*)(NULL))) )))));
    return (RogueClassCmd*)(result_4);
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_literal_string) ))))
  {
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_paren) ))))
    {
      RogueLogical first_5 = (true);
      ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,args_6,(((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )))));
      while ((first_5 || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) )))))
      {
        first_5 = ((RogueLogical)false);
        RogueCmdList__add__Cmd( ((RogueCmdList*)args_6), ROGUE_ARG(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))) );
      }
      RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren), ROGUE_ARG(((RogueString*)(NULL))) );
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdFormattedString__init__Token_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdFormattedString*,ROGUE_CREATE_OBJECT(CmdFormattedString))), t_0, ROGUE_ARG((call_ROGUEM39( 1, t_0 ))), args_6 ))))));
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralString*,ROGUE_CREATE_OBJECT(CmdLiteralString))), t_0, ROGUE_ARG((call_ROGUEM39( 1, t_0 ))), 0 ))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_null) ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralNull__init__Token( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralNull*,ROGUE_CREATE_OBJECT(CmdLiteralNull))), t_0 ))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_literal_real) ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralReal64*,ROGUE_CREATE_OBJECT(CmdLiteralReal64))), t_0, ROGUE_ARG((call_ROGUEM43( 14, t_0 ))) ))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_literal_integer) ))))
  {
    RogueInt32 value_7 = ((call_ROGUEM41( 12, t_0 )));
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), t_0, value_7 ))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_literal_long) ))))
  {
    RogueInt64 value_8 = ((call_ROGUEM42( 13, t_0 )));
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt64__init__Token_Int64( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt64*,ROGUE_CREATE_OBJECT(CmdLiteralInt64))), t_0, value_8 ))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_literal_character) ))))
  {
    RogueCharacter value_9 = ((call_ROGUEM40( 11, t_0 )));
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralCharacter__init__Token_Character( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralCharacter*,ROGUE_CREATE_OBJECT(CmdLiteralCharacter))), t_0, value_9 ))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_this) ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLiteralThis*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(((RogueClassCmdThisContext*)ROGUE_CREATE_REF(RogueClassCmdLiteralThis*,ROGUE_CREATE_OBJECT(CmdLiteralThis)))), t_0, ROGUE_ARG(THIS->_this_type) ))))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_true) ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), t_0, true ))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_false) ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), t_0, false ))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_pi) ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralReal64*,ROGUE_CREATE_OBJECT(CmdLiteralReal64))), t_0, 3.141592653589793 ))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_infinity) ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralReal64*,ROGUE_CREATE_OBJECT(CmdLiteralReal64))), t_0, (1.0/0.0) ))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_NaN) ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralReal64*,ROGUE_CREATE_OBJECT(CmdLiteralReal64))), t_0, (0.0/0.0) ))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_bracket) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdCreateList*,list_10,(((RogueCmdCreateList__init__Token_CmdArgs_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCreateList*,ROGUE_CREATE_OBJECT(CmdCreateList))), t_0, ROGUE_ARG(((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )))), ROGUE_ARG(((RogueClassType*)(NULL))) )))));
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    if (!(((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_bracket) )))))
    {
      RogueLogical first_11 = (true);
      while ((first_11 || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) )))))
      {
        first_11 = ((RogueLogical)false);
        RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)list_10->args)), ROGUE_ARG(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))) );
        RogueParser__consume_eols( ROGUE_ARG(THIS) );
      }
      RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_bracket), ROGUE_ARG(((RogueString*)(NULL))) );
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(list_10)));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_empty_brackets) ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), t_0, Rogue_literal_strings[285], ROGUE_ARG(((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )))) ))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_prior) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_dot), ROGUE_ARG(((RogueString*)(NULL))) );
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    ROGUE_DEF_LOCAL_REF(RogueString*,name_12,(((RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false )))));
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,args_13,0);
    ROGUE_DEF_LOCAL_REF(RogueCmdFlagArgList*,flag_args_14,0);
    if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_paren) ))))
    {
      args_13 = ((RogueClassCmdArgs*)((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) ))));
      flag_args_14 = ((RogueCmdFlagArgList*)((RogueParser__parse_args__CmdArgs( ROGUE_ARG(THIS), args_13 ))));
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCallPriorMethod__init__Token_String_CmdArgs_CmdFlagArgList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCallPriorMethod*,ROGUE_CREATE_OBJECT(CmdCallPriorMethod))), t_0, name_12, args_13, flag_args_14 ))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_await) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassLocal*,result_var_15,(((RogueMethod__add_local__Token_String_Type_Cmd( ROGUE_ARG(THIS->this_method), t_0, ROGUE_ARG(((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )))), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object), ROGUE_ARG(((RogueClassCmd*)(NULL))) )))));
    ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,statement_list_16,(((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )))));
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS->cur_statement_list)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLocalDeclaration*,ROGUE_CREATE_OBJECT(CmdLocalDeclaration))), t_0, result_var_15, false )))))) );
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS->cur_statement_list)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAwait__init__Token_Cmd_CmdStatementList_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAwait*,ROGUE_CREATE_OBJECT(CmdAwait))), t_0, ROGUE_ARG(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))), statement_list_16, result_var_15 )))))) );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), t_0, ROGUE_ARG(result_var_15->name) ))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_function) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueFnParamList*,parameters_17,0);
    ROGUE_DEF_LOCAL_REF(RogueClassType*,return_type_18,0);
    RogueLogical is_generic_19 = (false);
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_paren) ))))
    {
      if (!(((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren) )))))
      {
        parameters_17 = ((RogueFnParamList*)((RogueFnParamList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueFnParamList*,ROGUE_CREATE_OBJECT(FnParamList))) ))));
        RogueLogical first_20 = (true);
        while ((first_20 || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) )))))
        {
          first_20 = ((RogueLogical)false);
          ROGUE_DEF_LOCAL_REF(RogueClassFnParam*,param_21,(((RogueFnParam__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassFnParam*,ROGUE_CREATE_OBJECT(FnParam))), ROGUE_ARG(((RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false )))) )))));
          ROGUE_DEF_LOCAL_REF(RogueClassToken*,t2_22,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
          RogueLogical cur_generic_23 = (false);
          if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_colon) ))))
          {
            param_21->_type = ((Rogue_Parser__parse_type( ROGUE_ARG(THIS) )));
          }
          else
          {
            cur_generic_23 = ((RogueLogical)true);
          }
          if ((!!(parameters_17->count) && is_generic_19 != cur_generic_23))
          {
            ROGUE_THROW(((RogueToken__error__String( t2_22, Rogue_literal_strings[287] ))));
          }
          is_generic_19 = ((RogueLogical)cur_generic_23);
          RogueFnParamList__add__FnParam( parameters_17, param_21 );
        }
        RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren), ROGUE_ARG(((RogueString*)(NULL))) );
      }
    }
    RogueLogical parsed_arrow_24 = (false);
    ROGUE_DEF_LOCAL_REF(RogueClassToken*,t2_25,(((RogueParser__peek( ROGUE_ARG(THIS) )))));
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_arrow) ))))
    {
      if (is_generic_19)
      {
        ROGUE_THROW(((RogueToken__error__String( t2_25, Rogue_literal_strings[288] ))));
      }
      parsed_arrow_24 = ((RogueLogical)true);
      return_type_18 = ((RogueClassType*)((Rogue_Parser__parse_type( ROGUE_ARG(THIS) ))));
    }
    ROGUE_DEF_LOCAL_REF(RogueFnArgList*,with_args_26,0);
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_with) ))))
    {
      RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_paren), ROGUE_ARG(((RogueString*)(NULL))) );
      if (!(((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren) )))))
      {
        with_args_26 = ((RogueFnArgList*)((RogueFnArgList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueFnArgList*,ROGUE_CREATE_OBJECT(FnArgList))) ))));
        RogueLogical first_27 = (true);
        while ((first_27 || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) )))))
        {
          first_27 = ((RogueLogical)false);
          t2_25 = ((RogueClassToken*)((RogueParser__peek( ROGUE_ARG(THIS) ))));
          ROGUE_DEF_LOCAL_REF(RogueString*,name_28,(((RogueParser__read_identifier__Logical( ROGUE_ARG(THIS), false )))));
          ROGUE_DEF_LOCAL_REF(RogueClassCmd*,value_29,0);
          if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_equals) ))))
          {
            value_29 = ((RogueClassCmd*)((RogueParser__parse_expression( ROGUE_ARG(THIS) ))));
          }
          else
          {
            value_29 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), t2_25, name_28 ))))));
          }
          ROGUE_DEF_LOCAL_REF(RogueClassFnArg*,arg_30,(((RogueFnArg__init__String_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassFnArg*,ROGUE_CREATE_OBJECT(FnArg))), name_28, value_29 )))));
          if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_colon) ))))
          {
            RogueFnArg__set_type__Type( arg_30, ROGUE_ARG(((Rogue_Parser__parse_type( ROGUE_ARG(THIS) )))) );
          }
          RogueFnArgList__add__FnArg( with_args_26, arg_30 );
        }
        RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren), ROGUE_ARG(((RogueString*)(NULL))) );
      }
    }
    RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_colon) );
    if (!(parsed_arrow_24))
    {
      t2_25 = ((RogueClassToken*)((RogueParser__peek( ROGUE_ARG(THIS) ))));
      if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_equals) ))))
      {
        if (((!!(parameters_17) && !!(parameters_17->count)) && !(is_generic_19)))
        {
          ROGUE_THROW(((RogueToken__error__String( t2_25, Rogue_literal_strings[289] ))));
        }
        is_generic_19 = ((RogueLogical)true);
      }
    }
    ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,statements_31,(((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )))));
    if ((!(is_generic_19) && ((RogueParser__consume_eols( ROGUE_ARG(THIS) )))))
    {
      RogueParser__parse_multi_line_statements__CmdStatementList( ROGUE_ARG(THIS), statements_31 );
      RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_endFunction), ROGUE_ARG(((RogueString*)(NULL))) );
    }
    else
    {
      RogueParser__parse_single_line_statements__CmdStatementList( ROGUE_ARG(THIS), statements_31 );
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateFunction__init__Token_FnParamList_Type_FnArgList_CmdStatementList_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCreateFunction*,ROGUE_CREATE_OBJECT(CmdCreateFunction))), t_0, parameters_17, return_type_18, with_args_26, statements_31, is_generic_19 ))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_native) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    RogueLogical has_parens_32 = (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_paren) ))));
    if (has_parens_32)
    {
      RogueParser__consume_eols( ROGUE_ARG(THIS) );
    }
    if (!(((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_literal_string) )))))
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))), Rogue_literal_strings[306] ))));
    }
    ROGUE_DEF_LOCAL_REF(RogueString*,code_33,((call_ROGUEM39( 1, ROGUE_ARG(((RogueParser__read( ROGUE_ARG(THIS) )))) ))));
    if (has_parens_32)
    {
      RogueParser__consume_eols( ROGUE_ARG(THIS) );
      RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren), ROGUE_ARG(((RogueString*)(NULL))) );
    }
    ROGUE_DEF_LOCAL_REF(RogueClassType*,result_type_34,0);
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_arrow) ))))
    {
      result_type_34 = ((RogueClassType*)((Rogue_Parser__parse_type( ROGUE_ARG(THIS) ))));
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdInlineNative__init__Token_String_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdInlineNative*,ROGUE_CREATE_OBJECT(CmdInlineNative))), t_0, code_33, result_type_34 ))))));
  }
  else if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_select) ))))
  {
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    ROGUE_DEF_LOCAL_REF(RogueClassCmdSelect*,cmd_select_35,(((RogueCmdSelect__init__Token_Local_Cmd_CmdSelectCaseList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdSelect*,ROGUE_CREATE_OBJECT(CmdSelect))), t_0, ROGUE_ARG(((RogueClassLocal*)(NULL))), ROGUE_ARG(((RogueClassCmd*)(NULL))), ROGUE_ARG(((RogueCmdSelectCaseList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueCmdSelectCaseList*,ROGUE_CREATE_OBJECT(CmdSelectCaseList))) )))) )))));
    if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_paren) ))))
    {
      RogueParser__consume_eols( ROGUE_ARG(THIS) );
      ROGUE_DEF_LOCAL_REF(RogueClassLocal*,comparison_var_36,(((RogueMethod__add_local__Token_String_Type_Cmd( ROGUE_ARG(THIS->this_method), t_0, ROGUE_ARG(((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )))), ROGUE_ARG(((RogueClassType*)(NULL))), ROGUE_ARG(((RogueClassCmd*)(NULL))) )))));
      RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS->cur_statement_list)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLocalDeclaration*,ROGUE_CREATE_OBJECT(CmdLocalDeclaration))), t_0, comparison_var_36, true )))))) );
      comparison_var_36->initial_value = ((RogueParser__parse_expression( ROGUE_ARG(THIS) )));
      cmd_select_35->local_info = comparison_var_36;
      cmd_select_35->expression = comparison_var_36->initial_value;
      RogueParser__consume_eols( ROGUE_ARG(THIS) );
      RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren), ROGUE_ARG(((RogueString*)(NULL))) );
      RogueParser__consume_eols( ROGUE_ARG(THIS) );
    }
    RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_brace), ROGUE_ARG(((RogueString*)(NULL))) );
    RogueLogical first_37 = (true);
    RogueLogical found_case_others_38 = (false);
    while ((first_37 || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) )))))
    {
      first_37 = ((RogueLogical)false);
      RogueParser__consume_eols( ROGUE_ARG(THIS) );
      ROGUE_DEF_LOCAL_REF(RogueClassCmdSelectCase*,select_case_39,(((RogueCmdSelectCase__init__Token_CmdList_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdSelectCase*,ROGUE_CREATE_OBJECT(CmdSelectCase))), ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))), ROGUE_ARG(((RogueCmdList*)(NULL))), ROGUE_ARG(((RogueClassCmd*)(NULL))) )))));
      RogueCmdSelectCaseList__add__CmdSelectCase( ROGUE_ARG(cmd_select_35->cases), select_case_39 );
      if (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_others) ))))
      {
        RogueParser__consume_eols( ROGUE_ARG(THIS) );
        RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_colon), ROGUE_ARG(((RogueString*)(NULL))) );
        RogueParser__consume_eols( ROGUE_ARG(THIS) );
        select_case_39->value = ((RogueParser__parse_expression( ROGUE_ARG(THIS) )));
        found_case_others_38 = ((RogueLogical)true);
        goto _auto_1349;
      }
      else
      {
        select_case_39->conditions = ((RogueCmdList__add__Cmd( ROGUE_ARG((call_ROGUEM78( 4, ROGUE_ARG(ROGUE_CREATE_REF(RogueCmdList*,ROGUE_CREATE_OBJECT(CmdList))) ))), ROGUE_ARG(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))) )));
        while (((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) ))))
        {
          RogueParser__consume_eols( ROGUE_ARG(THIS) );
          RogueCmdList__add__Cmd( ROGUE_ARG(select_case_39->conditions), ROGUE_ARG(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))) );
          RogueParser__consume_eols( ROGUE_ARG(THIS) );
        }
        RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_colon), ROGUE_ARG(((RogueString*)(NULL))) );
        RogueParser__consume_eols( ROGUE_ARG(THIS) );
        select_case_39->value = ((RogueParser__parse_expression( ROGUE_ARG(THIS) )));
        RogueParser__consume_eols( ROGUE_ARG(THIS) );
      }
    }
    _auto_1349:;
    if (!(found_case_others_38))
    {
      RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_double_vertical_bar), ROGUE_ARG(((RogueString*)(NULL))) );
      RogueParser__consume_eols( ROGUE_ARG(THIS) );
      ROGUE_DEF_LOCAL_REF(RogueClassCmdSelectCase*,select_case_40,(((RogueCmdSelectCase__init__Token_CmdList_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdSelectCase*,ROGUE_CREATE_OBJECT(CmdSelectCase))), ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))), ROGUE_ARG(((RogueCmdList*)(NULL))), ROGUE_ARG(((RogueClassCmd*)(NULL))) )))));
      RogueCmdSelectCaseList__add__CmdSelectCase( ROGUE_ARG(cmd_select_35->cases), select_case_40 );
      select_case_40->value = ((RogueParser__parse_expression( ROGUE_ARG(THIS) )));
      RogueParser__consume_eols( ROGUE_ARG(THIS) );
    }
    RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_brace), ROGUE_ARG(((RogueString*)(NULL))) );
    return (RogueClassCmd*)(((RogueClassCmd*)(cmd_select_35)));
  }
  else
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(((RogueParser__peek( ROGUE_ARG(THIS) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[307], ROGUE_ARG(((RogueObject*)(((RogueParser__peek( ROGUE_ARG(THIS) )))))) )))), Rogue_literal_strings[34] )))) ))));
  }
}

RogueClassCmd* RogueParser__parse_typed_literal_list__Token_String( RogueClassParser* THIS, RogueClassToken* t_0, RogueString* list_type_name_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdTypedLiteralList*,list_2,(((RogueCmdTypedLiteralList__init__Token_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdTypedLiteralList*,ROGUE_CREATE_OBJECT(CmdTypedLiteralList))), t_0, list_type_name_1, ROGUE_ARG(((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )))) )))));
  RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_bracket), ROGUE_ARG(((RogueString*)(NULL))) );
  RogueParser__consume_eols( ROGUE_ARG(THIS) );
  RogueLogical first_3 = (true);
  while ((first_3 || ((RogueParser__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_comma) )))))
  {
    first_3 = ((RogueLogical)false);
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
    t_0 = ((RogueClassToken*)((RogueParser__peek( ROGUE_ARG(THIS) ))));
    if (((RogueParser__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_bracket) ))))
    {
      if (((RogueString__ends_with__String( list_type_name_1, Rogue_literal_strings[283] ))))
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,item_4,(((RogueParser__parse_typed_literal_list__Token_String( ROGUE_ARG(THIS), t_0, ROGUE_ARG(((RogueString__leftmost__Int32( list_type_name_1, -2 )))) )))));
        RogueCmdTypedLiteralList__add__Cmd( list_2, item_4 );
      }
      else
      {
        ROGUE_THROW(((RogueToken__error__String( t_0, Rogue_literal_strings[284] ))));
      }
    }
    else
    {
      RogueCmdTypedLiteralList__add__Cmd( list_2, ROGUE_ARG(((RogueParser__parse_expression( ROGUE_ARG(THIS) )))) );
    }
    RogueParser__consume_eols( ROGUE_ARG(THIS) );
  }
  RogueParser__must_consume__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_bracket), ROGUE_ARG(((RogueString*)(NULL))) );
  return (RogueClassCmd*)(((RogueClassCmd*)(list_2)));
}

RogueClassParser* RogueParser__init_object( RogueClassParser* THIS )
{
  THIS->local_declarations = ((RogueLocalList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueLocalList*,ROGUE_CREATE_OBJECT(LocalList))) )));
  THIS->property_list = ((RoguePropertyList__init( ROGUE_ARG(ROGUE_CREATE_REF(RoguePropertyList*,ROGUE_CREATE_OBJECT(PropertyList))) )));
  THIS->string_buffer = ((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )));
  THIS->used_modules = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  return (RogueClassParser*)(THIS);
}

RogueString* RogueString_ParseReaderTable__to_String( RogueClassString_ParseReaderTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueString_ParseReaderTable__print_to__StringBuilder( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))) )))) ))));
}

RogueString* RogueString_ParseReaderTable__type_name( RogueClassString_ParseReaderTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[663]);
}

RogueClassString_ParseReaderTable* RogueString_ParseReaderTable__init( RogueClassString_ParseReaderTable* THIS )
{
  RogueString_ParseReaderTable__init__Int32( ROGUE_ARG(THIS), 16 );
  return (RogueClassString_ParseReaderTable*)(THIS);
}

RogueClassString_ParseReaderTable* RogueString_ParseReaderTable__init__Int32( RogueClassString_ParseReaderTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_ParseReaderTableEntryList__init__Int32_String_ParseReaderTableEntry( ROGUE_ARG(ROGUE_CREATE_REF(RogueTableEntry_of_String_ParseReaderList*,ROGUE_CREATE_OBJECT(TableEntry_of_String_ParseReaderList))), bin_count_0, ROGUE_ARG(((RogueClassString_ParseReaderTableEntry*)(NULL))) )));
  THIS->keys = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  return (RogueClassString_ParseReaderTable*)(THIS);
}

RogueClassString_ParseReaderTableEntry* RogueString_ParseReaderTable__find__String( RogueClassString_ParseReaderTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  ROGUE_DEF_LOCAL_REF(RogueClassString_ParseReaderTableEntry*,entry_2,(((RogueClassString_ParseReaderTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)]))));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_2->key), key_0 )))))
    {
      return (RogueClassString_ParseReaderTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_ParseReaderTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_ParseReaderTableEntry*)(((RogueClassString_ParseReaderTableEntry*)(NULL)));
}

RogueClassParseReader* RogueString_ParseReaderTable__get__String( RogueClassString_ParseReaderTable* THIS, RogueString* key_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassString_ParseReaderTableEntry*,entry_1,(((RogueString_ParseReaderTable__find__String( ROGUE_ARG(THIS), key_0 )))));
  if (!!(entry_1))
  {
    return (RogueClassParseReader*)(entry_1->value);
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassParseReader*,default_value_2,0);
    return (RogueClassParseReader*)(default_value_2);
  }
}

RogueClassString_ParseReaderTable* RogueString_ParseReaderTable__set__String_ParseReader( RogueClassString_ParseReaderTable* THIS, RogueString* key_0, RogueClassParseReader* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  ROGUE_DEF_LOCAL_REF(RogueClassString_ParseReaderTableEntry*,entry_4,(((RogueClassString_ParseReaderTableEntry*)(THIS->bins->data->objects[index_3]))));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_4->key), key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_ParseReaderTable*)(THIS);
    }
    entry_4 = ((RogueClassString_ParseReaderTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_ParseReaderTableEntry*)((RogueString_ParseReaderTableEntry__init__String_ParseReader_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_ParseReaderTableEntry*,ROGUE_CREATE_OBJECT(String_ParseReaderTableEntry))), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_ParseReaderTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( ROGUE_ARG(THIS->keys), key_0 );
  return (RogueClassString_ParseReaderTable*)(THIS);
}

RogueStringBuilder* RogueString_ParseReaderTable__print_to__StringBuilder( RogueClassString_ParseReaderTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    ROGUE_DEF_LOCAL_REF(RogueString*,key_2,(((RogueString*)(THIS->keys->data->objects[i_1]))));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ROGUE_ARG(((RogueObject*)(((RogueString_ParseReaderTable__get__String( ROGUE_ARG(THIS), key_2 )))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_ParseReaderTable* RogueString_ParseReaderTable__init_object( RogueClassString_ParseReaderTable* THIS )
{
  return (RogueClassString_ParseReaderTable*)(THIS);
}

RogueString* RogueStopwatch__to_String( RogueClassStopwatch* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__Real64_Int32( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueStopwatch__elapsed( ROGUE_ARG(THIS) )))), 2 )))), Rogue_literal_strings[633] )))) ))));
}

RogueString* RogueStopwatch__type_name( RogueClassStopwatch* THIS )
{
  return (RogueString*)(Rogue_literal_strings[664]);
}

RogueReal64 RogueStopwatch__elapsed( RogueClassStopwatch* THIS )
{
  return (RogueReal64)(((RogueSystem__time()) - THIS->start_time));
}

RogueClassStopwatch* RogueStopwatch__init_object( RogueClassStopwatch* THIS )
{
  THIS->start_time = (RogueSystem__time());
  return (RogueClassStopwatch*)(THIS);
}

RogueString* RogueFile__to_String( RogueClassFile* THIS )
{
  return (RogueString*)(THIS->filepath);
}

RogueString* RogueFile__type_name( RogueClassFile* THIS )
{
  return (RogueString*)(Rogue_literal_strings[665]);
}

RogueClassFile* RogueFile__init__String( RogueClassFile* THIS, RogueString* _auto_374_0 )
{
  THIS->filepath = _auto_374_0;
  return (RogueClassFile*)(THIS);
}

RogueString* RogueFile__filename( RogueClassFile* THIS )
{
  return (RogueString*)((RogueFile__filename__String( ROGUE_ARG(THIS->filepath) )));
}

RogueClassFile* RogueFile__init_object( RogueClassFile* THIS )
{
  return (RogueClassFile*)(THIS);
}

RogueString* RogueParserArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[759]);
}

RogueString* RogueCmdMakeRequisite__type_name( RogueClassCmdMakeRequisite* THIS )
{
  return (RogueString*)(Rogue_literal_strings[815]);
}

RogueClassCmdMakeRequisite* RogueCmdMakeRequisite__clone__CloneArgs( RogueClassCmdMakeRequisite* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdMakeRequisite*)(((RogueCmdMakeRequisite__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdMakeRequisite*,ROGUE_CREATE_OBJECT(CmdMakeRequisite))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->pattern) ))));
}

RogueLogical RogueCmdMakeRequisite__requires_semicolon( RogueClassCmdMakeRequisite* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdMakeRequisite__resolve__Scope( RogueClassCmdMakeRequisite* THIS, RogueClassScope* scope_0 )
{
  if (((RogueString__contains__String( ROGUE_ARG(THIS->pattern), ROGUE_ARG(((RogueCharacter__to_String( (RogueCharacter)'.' )))) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassType*,req_type_1,(((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueString__before_first__Character( ROGUE_ARG(THIS->pattern), (RogueCharacter)'.' )))) )))));
    RogueType__organize__Scope( ROGUE_ARG(((RogueType__make_requisite( req_type_1 )))), ROGUE_ARG(((RogueClassScope*)(NULL))) );
    ROGUE_DEF_LOCAL_REF(RogueString*,sig_2,(((RogueString__after_first__Character( ROGUE_ARG(THIS->pattern), (RogueCharacter)'.' )))));
    if (((RogueString__operatorEQUALSEQUALS__String( sig_2, Rogue_literal_strings[226] ))))
    {
      {
        ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_1366_6,(req_type_1->global_method_list));
        RogueInt32 _auto_1367_7 = (0);
        for (;_auto_1367_7 < _auto_1366_6->count;++_auto_1367_7)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassMethod*,r_8,(((RogueClassMethod*)(_auto_1366_6->data->objects[_auto_1367_7]))));
          RogueMethod__make_requisite( r_8 );
        }
      }
      {
        ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_1368_9,(req_type_1->method_list));
        RogueInt32 _auto_1369_10 = (0);
        for (;_auto_1369_10 < _auto_1368_9->count;++_auto_1369_10)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_11,(((RogueClassMethod*)(_auto_1368_9->data->objects[_auto_1369_10]))));
          RogueMethod__make_requisite( m_11 );
        }
      }
    }
    else if (((RogueString__contains__String( sig_2, ROGUE_ARG(((RogueCharacter__to_String( (RogueCharacter)'(' )))) ))))
    {
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_3,(((RogueType__find_method__String( req_type_1, sig_2 )))));
      if (!!(m_3))
      {
        RogueMethod__make_requisite( m_3 );
      }
      else
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[858] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], sig_2 )))) )))), Rogue_literal_strings[859] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(req_type_1->name) )))) )))), Rogue_literal_strings[64] )))) )))) ))));
      }
    }
    else
    {
      ROGUE_DEF_LOCAL_REF(RogueMethodList*,list_4,(((RogueString_MethodListTable__get__String( ROGUE_ARG(req_type_1->global_method_lookup_by_name), sig_2 )))));
      if (!!(list_4))
      {
        {
          ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_1370_12,(list_4));
          RogueInt32 _auto_1371_13 = (0);
          for (;_auto_1371_13 < _auto_1370_12->count;++_auto_1371_13)
          {
            ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_14,(((RogueClassMethod*)(_auto_1370_12->data->objects[_auto_1371_13]))));
            RogueMethod__make_requisite( m_14 );
          }
        }
      }
      list_4 = ((RogueMethodList*)((RogueString_MethodListTable__get__String( ROGUE_ARG(req_type_1->method_lookup_by_name), sig_2 ))));
      if (!!(list_4))
      {
        {
          ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_1372_15,(list_4));
          RogueInt32 _auto_1373_16 = (0);
          for (;_auto_1373_16 < _auto_1372_15->count;++_auto_1373_16)
          {
            ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_17,(((RogueClassMethod*)(_auto_1372_15->data->objects[_auto_1373_16]))));
            RogueMethod__make_requisite( m_17 );
          }
        }
      }
    }
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassType*,req_type_5,(((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->pattern) )))));
    RogueType__organize__Scope( ROGUE_ARG(((RogueType__make_requisite( req_type_5 )))), ROGUE_ARG(((RogueClassScope*)(NULL))) );
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdNoAction__init__Token( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdNoAction*,ROGUE_CREATE_OBJECT(CmdNoAction))), ROGUE_ARG(THIS->t) ))))));
}

RogueClassCmdMakeRequisite* RogueCmdMakeRequisite__init_object( RogueClassCmdMakeRequisite* THIS )
{
  return (RogueClassCmdMakeRequisite*)(THIS);
}

RogueClassCmdMakeRequisite* RogueCmdMakeRequisite__init__Token_String( RogueClassCmdMakeRequisite* THIS, RogueClassToken* _auto_385_0, RogueString* _auto_386_1 )
{
  THIS->pattern = _auto_386_1;
  THIS->t = _auto_385_0;
  return (RogueClassCmdMakeRequisite*)(THIS);
}

RogueString* RogueTokenList__to_String( RogueTokenList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTokenList*,_auto_1375_2,(THIS));
    RogueInt32 _auto_1376_3 = (0);
    for (;_auto_1376_3 < _auto_1375_2->count;++_auto_1376_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassToken*,value_4,(((RogueClassToken*)(_auto_1375_2->data->objects[_auto_1376_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM39( 1, value_4 ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueTokenList__type_name( RogueTokenList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[718]);
}

RogueTokenList* RogueTokenList__init_object( RogueTokenList* THIS )
{
  return (RogueTokenList*)(THIS);
}

RogueTokenList* RogueTokenList__init( RogueTokenList* THIS )
{
  RogueTokenList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueTokenList*)(THIS);
}

RogueTokenList* RogueTokenList__init__Int32( RogueTokenList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassToken*), true );
  }
  return (RogueTokenList*)(THIS);
}

RogueTokenList* RogueTokenList__add__Token( RogueTokenList* THIS, RogueClassToken* value_0 )
{
  ((RogueTokenList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTokenList*)(THIS);
}

RogueTokenList* RogueTokenList__add__TokenList( RogueTokenList* THIS, RogueTokenList* other_0 )
{
  RogueTokenList__reserve__Int32( ROGUE_ARG(THIS), ROGUE_ARG(other_0->count) );
  {
    ROGUE_DEF_LOCAL_REF(RogueTokenList*,_auto_1381_1,(other_0));
    RogueInt32 _auto_1382_2 = (0);
    for (;_auto_1382_2 < _auto_1381_1->count;++_auto_1382_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassToken*,value_3,(((RogueClassToken*)(_auto_1381_1->data->objects[_auto_1382_2]))));
      RogueTokenList__add__Token( ROGUE_ARG(THIS), value_3 );
    }
  }
  return (RogueTokenList*)(THIS);
}

RogueInt32 RogueTokenList__capacity( RogueTokenList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

void RogueTokenList__discard_from__Int32( RogueTokenList* THIS, RogueInt32 index_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,zero_value_1,0);
  RogueInt32 c_2 = (THIS->count);
  while (c_2 > index_0)
  {
    --c_2;
    THIS->data->objects[c_2] = zero_value_1;
  }
  THIS->count = c_2;
}

RogueClassToken* RogueTokenList__last( RogueTokenList* THIS )
{
  return (RogueClassToken*)(((RogueClassToken*)(THIS->data->objects[(THIS->count - 1)])));
}

RogueClassTokenListRebuilder* RogueTokenList__rebuilder( RogueTokenList* THIS )
{
  return (RogueClassTokenListRebuilder*)(((RogueTokenListRebuilder__init__TokenList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenListRebuilder*,ROGUE_CREATE_OBJECT(TokenListRebuilder))), ROGUE_ARG(THIS) ))));
}

RogueTokenList* RogueTokenList__reserve__Int32( RogueTokenList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassToken*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueTokenList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassToken*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTokenList*)(THIS);
}

RogueClassToken* RogueTokenList__remove_at__Int32( RogueTokenList* THIS, RogueInt32 index_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,result_1,(((RogueClassToken*)(THIS->data->objects[index_0]))));
  RogueArray_set(THIS->data,index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,zero_value_2,0);
  --THIS->count;
  THIS->data->objects[THIS->count] = zero_value_2;
  return (RogueClassToken*)(result_1);
}

RogueClassToken* RogueTokenList__remove_last( RogueTokenList* THIS )
{
  return (RogueClassToken*)(((RogueTokenList__remove_at__Int32( ROGUE_ARG(THIS), ROGUE_ARG((THIS->count - 1)) ))));
}

RogueString* RogueLineReader__type_name( RogueClassLineReader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[666]);
}

RogueLogical RogueLineReader__has_another( RogueClassLineReader* THIS )
{
  return (RogueLogical)(!!(THIS->next));
}

RogueString* RogueLineReader__read( RogueClassLineReader* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueString*,result_0,(THIS->next));
  THIS->next = ((RogueLineReader__prepare_next( ROGUE_ARG(THIS) )));
  ++THIS->position;
  return (RogueString*)(result_0);
}

RogueClassLineReader* RogueLineReader__init__CharacterReader( RogueClassLineReader* THIS, RogueClassCharacterReader* _auto_397_0 )
{
  THIS->source = _auto_397_0;
  THIS->next = ((RogueLineReader__prepare_next( ROGUE_ARG(THIS) )));
  return (RogueClassLineReader*)(THIS);
}

RogueClassLineReader* RogueLineReader__init__File( RogueClassLineReader* THIS, RogueClassFile* file_0 )
{
  RogueLineReader__init__CharacterReader( ROGUE_ARG(THIS), ROGUE_ARG(((((RogueClassCharacterReader*)((RogueFile__reader__String( ROGUE_ARG(file_0->filepath) ))))))) );
  return (RogueClassLineReader*)(THIS);
}

RogueClassLineReader* RogueLineReader__init__String( RogueClassLineReader* THIS, RogueString* string_0 )
{
  RogueLineReader__init__CharacterReader( ROGUE_ARG(THIS), ROGUE_ARG(((((RogueClassCharacterReader*)(((RogueString__reader( string_0 )))))))) );
  return (RogueClassLineReader*)(THIS);
}

RogueString* RogueLineReader__prepare_next( RogueClassLineReader* THIS )
{
  if (!((RogueCharacterReader__has_another( ROGUE_ARG(((RogueObject*)THIS->source)) ))))
  {
    if (THIS->prev == (RogueCharacter)10)
    {
      THIS->prev = ((RogueCharacter)(0));
      return (RogueString*)(Rogue_literal_strings[0]);
    }
    else
    {
      return (RogueString*)(((RogueString*)(NULL)));
    }
  }
  THIS->prev = ((RogueCharacter)(0));
  RogueStringBuilder__clear( ROGUE_ARG(THIS->buffer) );
  while ((RogueCharacterReader__has_another( ROGUE_ARG(((RogueObject*)THIS->source)) )))
  {
    RogueCharacter ch_0 = ((RogueCharacterReader__read( ROGUE_ARG(((RogueObject*)THIS->source)) )));
    if (ch_0 == (RogueCharacter)10)
    {
      THIS->prev = (RogueCharacter)10;
      return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(THIS->buffer) ))));
    }
    RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), ch_0 );
  }
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(THIS->buffer) ))));
}

RogueClassLineReader* RogueLineReader__init_object( RogueClassLineReader* THIS )
{
  THIS->buffer = ((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )));
  return (RogueClassLineReader*)(THIS);
}

RogueString* RogueTypeParameterList__to_String( RogueTypeParameterList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeParameterList*,_auto_1413_2,(THIS));
    RogueInt32 _auto_1414_3 = (0);
    for (;_auto_1414_3 < _auto_1413_2->count;++_auto_1414_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassTypeParameter*,value_4,(((RogueClassTypeParameter*)(_auto_1413_2->data->objects[_auto_1414_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueTypeParameterList__type_name( RogueTypeParameterList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[719]);
}

RogueTypeParameterList* RogueTypeParameterList__init_object( RogueTypeParameterList* THIS )
{
  return (RogueTypeParameterList*)(THIS);
}

RogueTypeParameterList* RogueTypeParameterList__init( RogueTypeParameterList* THIS )
{
  RogueTypeParameterList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueTypeParameterList*)(THIS);
}

RogueTypeParameterList* RogueTypeParameterList__init__Int32( RogueTypeParameterList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassTypeParameter*), true );
  }
  return (RogueTypeParameterList*)(THIS);
}

RogueTypeParameterList* RogueTypeParameterList__add__TypeParameter( RogueTypeParameterList* THIS, RogueClassTypeParameter* value_0 )
{
  ((RogueTypeParameterList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTypeParameterList*)(THIS);
}

RogueInt32 RogueTypeParameterList__capacity( RogueTypeParameterList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTypeParameterList* RogueTypeParameterList__reserve__Int32( RogueTypeParameterList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassTypeParameter*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueTypeParameterList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassTypeParameter*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTypeParameterList*)(THIS);
}

RogueString* RogueTypeParameter__type_name( RogueClassTypeParameter* THIS )
{
  return (RogueString*)(Rogue_literal_strings[667]);
}

RogueClassTypeParameter* RogueTypeParameter__init__Token_String( RogueClassTypeParameter* THIS, RogueClassToken* _auto_436_0, RogueString* _auto_437_1 )
{
  THIS->name = _auto_437_1;
  THIS->t = _auto_436_0;
  return (RogueClassTypeParameter*)(THIS);
}

RogueClassTypeParameter* RogueTypeParameter__init_object( RogueClassTypeParameter* THIS )
{
  return (RogueClassTypeParameter*)(THIS);
}

RogueString* RogueAugmentList__to_String( RogueAugmentList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueAugmentList*,_auto_1445_2,(THIS));
    RogueInt32 _auto_1446_3 = (0);
    for (;_auto_1446_3 < _auto_1445_2->count;++_auto_1446_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassAugment*,value_4,(((RogueClassAugment*)(_auto_1445_2->data->objects[_auto_1446_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueAugmentList__type_name( RogueAugmentList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[720]);
}

RogueAugmentList* RogueAugmentList__init_object( RogueAugmentList* THIS )
{
  return (RogueAugmentList*)(THIS);
}

RogueAugmentList* RogueAugmentList__init( RogueAugmentList* THIS )
{
  RogueAugmentList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueAugmentList*)(THIS);
}

RogueAugmentList* RogueAugmentList__init__Int32( RogueAugmentList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassAugment*), true );
  }
  return (RogueAugmentList*)(THIS);
}

RogueAugmentList* RogueAugmentList__add__Augment( RogueAugmentList* THIS, RogueClassAugment* value_0 )
{
  ((RogueAugmentList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueAugmentList*)(THIS);
}

RogueInt32 RogueAugmentList__capacity( RogueAugmentList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueAugmentList* RogueAugmentList__reserve__Int32( RogueAugmentList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassAugment*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueAugmentList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassAugment*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueAugmentList*)(THIS);
}

RogueString* RogueAugment__type_name( RogueClassAugment* THIS )
{
  return (RogueString*)(Rogue_literal_strings[668]);
}

RogueClassAugment* RogueAugment__init__Token_String( RogueClassAugment* THIS, RogueClassToken* _auto_442_0, RogueString* _auto_443_1 )
{
  THIS->name = _auto_443_1;
  THIS->t = _auto_442_0;
  return (RogueClassAugment*)(THIS);
}

RogueClassAugment* RogueAugment__init_object( RogueClassAugment* THIS )
{
  THIS->base_types = ((RogueTypeList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueTypeList*,ROGUE_CREATE_OBJECT(TypeList))) )));
  THIS->tokens = ((RogueTokenList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueTokenList*,ROGUE_CREATE_OBJECT(TokenList))) )));
  return (RogueClassAugment*)(THIS);
}

RogueString* RogueAugmentArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[760]);
}

RogueString* RogueString_TokenTypeTable__to_String( RogueClassString_TokenTypeTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueString_TokenTypeTable__print_to__StringBuilder( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))) )))) ))));
}

RogueString* RogueString_TokenTypeTable__type_name( RogueClassString_TokenTypeTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[669]);
}

RogueClassString_TokenTypeTable* RogueString_TokenTypeTable__init( RogueClassString_TokenTypeTable* THIS )
{
  RogueString_TokenTypeTable__init__Int32( ROGUE_ARG(THIS), 16 );
  return (RogueClassString_TokenTypeTable*)(THIS);
}

RogueClassString_TokenTypeTable* RogueString_TokenTypeTable__init__Int32( RogueClassString_TokenTypeTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_TokenTypeTableEntryList__init__Int32_String_TokenTypeTableEntry( ROGUE_ARG(ROGUE_CREATE_REF(RogueTableEntry_of_String_TokenTypeList*,ROGUE_CREATE_OBJECT(TableEntry_of_String_TokenTypeList))), bin_count_0, ROGUE_ARG(((RogueClassString_TokenTypeTableEntry*)(NULL))) )));
  THIS->keys = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  return (RogueClassString_TokenTypeTable*)(THIS);
}

RogueClassString_TokenTypeTableEntry* RogueString_TokenTypeTable__find__String( RogueClassString_TokenTypeTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  ROGUE_DEF_LOCAL_REF(RogueClassString_TokenTypeTableEntry*,entry_2,(((RogueClassString_TokenTypeTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)]))));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_2->key), key_0 )))))
    {
      return (RogueClassString_TokenTypeTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_TokenTypeTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_TokenTypeTableEntry*)(((RogueClassString_TokenTypeTableEntry*)(NULL)));
}

RogueClassTokenType* RogueString_TokenTypeTable__get__String( RogueClassString_TokenTypeTable* THIS, RogueString* key_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassString_TokenTypeTableEntry*,entry_1,(((RogueString_TokenTypeTable__find__String( ROGUE_ARG(THIS), key_0 )))));
  if (!!(entry_1))
  {
    return (RogueClassTokenType*)(entry_1->value);
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassTokenType*,default_value_2,0);
    return (RogueClassTokenType*)(default_value_2);
  }
}

RogueClassString_TokenTypeTable* RogueString_TokenTypeTable__set__String_TokenType( RogueClassString_TokenTypeTable* THIS, RogueString* key_0, RogueClassTokenType* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  ROGUE_DEF_LOCAL_REF(RogueClassString_TokenTypeTableEntry*,entry_4,(((RogueClassString_TokenTypeTableEntry*)(THIS->bins->data->objects[index_3]))));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_4->key), key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_TokenTypeTable*)(THIS);
    }
    entry_4 = ((RogueClassString_TokenTypeTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_TokenTypeTableEntry*)((RogueString_TokenTypeTableEntry__init__String_TokenType_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_TokenTypeTableEntry*,ROGUE_CREATE_OBJECT(String_TokenTypeTableEntry))), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_TokenTypeTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( ROGUE_ARG(THIS->keys), key_0 );
  return (RogueClassString_TokenTypeTable*)(THIS);
}

RogueStringBuilder* RogueString_TokenTypeTable__print_to__StringBuilder( RogueClassString_TokenTypeTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    ROGUE_DEF_LOCAL_REF(RogueString*,key_2,(((RogueString*)(THIS->keys->data->objects[i_1]))));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ROGUE_ARG(((RogueObject*)(((RogueString_TokenTypeTable__get__String( ROGUE_ARG(THIS), key_2 )))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_TokenTypeTable* RogueString_TokenTypeTable__init_object( RogueClassString_TokenTypeTable* THIS )
{
  return (RogueClassString_TokenTypeTable*)(THIS);
}

RogueString* RogueLiteralCharacterToken__to_String( RogueClassLiteralCharacterToken* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Character( Rogue_literal_strings[0], ROGUE_ARG(THIS->value) ))));
}

RogueString* RogueLiteralCharacterToken__type_name( RogueClassLiteralCharacterToken* THIS )
{
  return (RogueString*)(Rogue_literal_strings[802]);
}

RogueCharacter RogueLiteralCharacterToken__to_Character( RogueClassLiteralCharacterToken* THIS )
{
  return (RogueCharacter)(THIS->value);
}

RogueClassLiteralCharacterToken* RogueLiteralCharacterToken__init_object( RogueClassLiteralCharacterToken* THIS )
{
  return (RogueClassLiteralCharacterToken*)(THIS);
}

RogueClassLiteralCharacterToken* RogueLiteralCharacterToken__init__TokenType_Character( RogueClassLiteralCharacterToken* THIS, RogueClassTokenType* _auto_450_0, RogueCharacter _auto_451_1 )
{
  THIS->value = _auto_451_1;
  THIS->_type = _auto_450_0;
  return (RogueClassLiteralCharacterToken*)(THIS);
}

RogueString* RogueLiteralInt64Token__to_String( RogueClassLiteralInt64Token* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Int64( Rogue_literal_strings[0], ROGUE_ARG(THIS->value) ))));
}

RogueString* RogueLiteralInt64Token__type_name( RogueClassLiteralInt64Token* THIS )
{
  return (RogueString*)(Rogue_literal_strings[803]);
}

RogueInt32 RogueLiteralInt64Token__to_Int32( RogueClassLiteralInt64Token* THIS )
{
  return (RogueInt32)(((RogueInt32)(THIS->value)));
}

RogueInt64 RogueLiteralInt64Token__to_Int64( RogueClassLiteralInt64Token* THIS )
{
  return (RogueInt64)(THIS->value);
}

RogueReal64 RogueLiteralInt64Token__to_Real64( RogueClassLiteralInt64Token* THIS )
{
  return (RogueReal64)(((RogueReal64)(THIS->value)));
}

RogueClassLiteralInt64Token* RogueLiteralInt64Token__init_object( RogueClassLiteralInt64Token* THIS )
{
  return (RogueClassLiteralInt64Token*)(THIS);
}

RogueClassLiteralInt64Token* RogueLiteralInt64Token__init__TokenType_Int64( RogueClassLiteralInt64Token* THIS, RogueClassTokenType* _auto_452_0, RogueInt64 _auto_453_1 )
{
  THIS->value = _auto_453_1;
  THIS->_type = _auto_452_0;
  return (RogueClassLiteralInt64Token*)(THIS);
}

RogueString* RogueLiteralInt32Token__to_String( RogueClassLiteralInt32Token* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], ROGUE_ARG(THIS->value) ))));
}

RogueString* RogueLiteralInt32Token__type_name( RogueClassLiteralInt32Token* THIS )
{
  return (RogueString*)(Rogue_literal_strings[804]);
}

RogueInt32 RogueLiteralInt32Token__to_Int32( RogueClassLiteralInt32Token* THIS )
{
  return (RogueInt32)(THIS->value);
}

RogueReal64 RogueLiteralInt32Token__to_Real64( RogueClassLiteralInt32Token* THIS )
{
  return (RogueReal64)(((RogueReal64)(THIS->value)));
}

RogueClassLiteralInt32Token* RogueLiteralInt32Token__init_object( RogueClassLiteralInt32Token* THIS )
{
  return (RogueClassLiteralInt32Token*)(THIS);
}

RogueClassLiteralInt32Token* RogueLiteralInt32Token__init__TokenType_Int32( RogueClassLiteralInt32Token* THIS, RogueClassTokenType* _auto_454_0, RogueInt32 _auto_455_1 )
{
  THIS->value = _auto_455_1;
  THIS->_type = _auto_454_0;
  return (RogueClassLiteralInt32Token*)(THIS);
}

RogueString* RogueLiteralReal64Token__to_String( RogueClassLiteralReal64Token* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Real64( Rogue_literal_strings[0], ROGUE_ARG(THIS->value) ))));
}

RogueString* RogueLiteralReal64Token__type_name( RogueClassLiteralReal64Token* THIS )
{
  return (RogueString*)(Rogue_literal_strings[805]);
}

RogueInt32 RogueLiteralReal64Token__to_Int32( RogueClassLiteralReal64Token* THIS )
{
  return (RogueInt32)(((RogueInt32)(THIS->value)));
}

RogueReal64 RogueLiteralReal64Token__to_Real64( RogueClassLiteralReal64Token* THIS )
{
  return (RogueReal64)(THIS->value);
}

RogueClassLiteralReal64Token* RogueLiteralReal64Token__init_object( RogueClassLiteralReal64Token* THIS )
{
  return (RogueClassLiteralReal64Token*)(THIS);
}

RogueClassLiteralReal64Token* RogueLiteralReal64Token__init__TokenType_Real64( RogueClassLiteralReal64Token* THIS, RogueClassTokenType* _auto_456_0, RogueReal64 _auto_457_1 )
{
  THIS->value = _auto_457_1;
  THIS->_type = _auto_456_0;
  return (RogueClassLiteralReal64Token*)(THIS);
}

RogueString* RogueStringDataToken__to_String( RogueClassStringDataToken* THIS )
{
  return (RogueString*)(THIS->value);
}

RogueString* RogueStringDataToken__type_name( RogueClassStringDataToken* THIS )
{
  return (RogueString*)(Rogue_literal_strings[806]);
}

RogueString* RogueStringDataToken__quoted_name( RogueClassStringDataToken* THIS )
{
  if (((void*)THIS->_type) == ((void*)RogueTokenType_directive_requisite))
  {
    return (RogueString*)(Rogue_literal_strings[91]);
  }
  return (RogueString*)((RogueToken__quoted_name( ROGUE_ARG(((RogueClassToken*)THIS)) )));
}

RogueClassStringDataToken* RogueStringDataToken__init_object( RogueClassStringDataToken* THIS )
{
  return (RogueClassStringDataToken*)(THIS);
}

RogueClassStringDataToken* RogueStringDataToken__init__TokenType_String( RogueClassStringDataToken* THIS, RogueClassTokenType* _auto_458_0, RogueString* _auto_459_1 )
{
  THIS->value = _auto_459_1;
  THIS->_type = _auto_458_0;
  return (RogueClassStringDataToken*)(THIS);
}

RogueString* RogueTokenArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[761]);
}

RogueString* RogueString_TypeSpecializerTable__to_String( RogueClassString_TypeSpecializerTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueString_TypeSpecializerTable__print_to__StringBuilder( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))) )))) ))));
}

RogueString* RogueString_TypeSpecializerTable__type_name( RogueClassString_TypeSpecializerTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[670]);
}

RogueClassString_TypeSpecializerTable* RogueString_TypeSpecializerTable__init( RogueClassString_TypeSpecializerTable* THIS )
{
  RogueString_TypeSpecializerTable__init__Int32( ROGUE_ARG(THIS), 16 );
  return (RogueClassString_TypeSpecializerTable*)(THIS);
}

RogueClassString_TypeSpecializerTable* RogueString_TypeSpecializerTable__init__Int32( RogueClassString_TypeSpecializerTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_TypeSpecializerTableEntryList__init__Int32_String_TypeSpecializerTableEntry( ROGUE_ARG(ROGUE_CREATE_REF(RogueTableEntry_of_String_TypeSpecializerList*,ROGUE_CREATE_OBJECT(TableEntry_of_String_TypeSpecializerList))), bin_count_0, ROGUE_ARG(((RogueClassString_TypeSpecializerTableEntry*)(NULL))) )));
  THIS->keys = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  return (RogueClassString_TypeSpecializerTable*)(THIS);
}

RogueInt32 RogueString_TypeSpecializerTable__count( RogueClassString_TypeSpecializerTable* THIS )
{
  return (RogueInt32)(THIS->keys->count);
}

RogueClassString_TypeSpecializerTableEntry* RogueString_TypeSpecializerTable__find__String( RogueClassString_TypeSpecializerTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  ROGUE_DEF_LOCAL_REF(RogueClassString_TypeSpecializerTableEntry*,entry_2,(((RogueClassString_TypeSpecializerTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)]))));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_2->key), key_0 )))))
    {
      return (RogueClassString_TypeSpecializerTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_TypeSpecializerTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_TypeSpecializerTableEntry*)(((RogueClassString_TypeSpecializerTableEntry*)(NULL)));
}

RogueClassTypeSpecializer* RogueString_TypeSpecializerTable__get__String( RogueClassString_TypeSpecializerTable* THIS, RogueString* key_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassString_TypeSpecializerTableEntry*,entry_1,(((RogueString_TypeSpecializerTable__find__String( ROGUE_ARG(THIS), key_0 )))));
  if (!!(entry_1))
  {
    return (RogueClassTypeSpecializer*)(entry_1->value);
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassTypeSpecializer*,default_value_2,0);
    return (RogueClassTypeSpecializer*)(default_value_2);
  }
}

RogueClassString_TypeSpecializerTable* RogueString_TypeSpecializerTable__set__String_TypeSpecializer( RogueClassString_TypeSpecializerTable* THIS, RogueString* key_0, RogueClassTypeSpecializer* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  ROGUE_DEF_LOCAL_REF(RogueClassString_TypeSpecializerTableEntry*,entry_4,(((RogueClassString_TypeSpecializerTableEntry*)(THIS->bins->data->objects[index_3]))));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_4->key), key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_TypeSpecializerTable*)(THIS);
    }
    entry_4 = ((RogueClassString_TypeSpecializerTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_TypeSpecializerTableEntry*)((RogueString_TypeSpecializerTableEntry__init__String_TypeSpecializer_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_TypeSpecializerTableEntry*,ROGUE_CREATE_OBJECT(String_TypeSpecializerTableEntry))), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_TypeSpecializerTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( ROGUE_ARG(THIS->keys), key_0 );
  return (RogueClassString_TypeSpecializerTable*)(THIS);
}

RogueStringBuilder* RogueString_TypeSpecializerTable__print_to__StringBuilder( RogueClassString_TypeSpecializerTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    ROGUE_DEF_LOCAL_REF(RogueString*,key_2,(((RogueString*)(THIS->keys->data->objects[i_1]))));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ROGUE_ARG(((RogueObject*)(((RogueString_TypeSpecializerTable__get__String( ROGUE_ARG(THIS), key_2 )))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_TypeSpecializerTable* RogueString_TypeSpecializerTable__init_object( RogueClassString_TypeSpecializerTable* THIS )
{
  return (RogueClassString_TypeSpecializerTable*)(THIS);
}

RogueString* RogueTypeParameterArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[762]);
}

RogueString* RogueTypeSpecializer__type_name( RogueClassTypeSpecializer* THIS )
{
  return (RogueString*)(Rogue_literal_strings[671]);
}

RogueClassTypeSpecializer* RogueTypeSpecializer__init__String_Int32( RogueClassTypeSpecializer* THIS, RogueString* _auto_471_0, RogueInt32 _auto_472_1 )
{
  THIS->index = _auto_472_1;
  THIS->name = _auto_471_0;
  return (RogueClassTypeSpecializer*)(THIS);
}

RogueClassTypeSpecializer* RogueTypeSpecializer__init_object( RogueClassTypeSpecializer* THIS )
{
  return (RogueClassTypeSpecializer*)(THIS);
}

RogueString* RogueTypeSpecializerList__to_String( RogueTypeSpecializerList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTypeSpecializerList*,_auto_1491_2,(THIS));
    RogueInt32 _auto_1492_3 = (0);
    for (;_auto_1492_3 < _auto_1491_2->count;++_auto_1492_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassTypeSpecializer*,value_4,(((RogueClassTypeSpecializer*)(_auto_1491_2->data->objects[_auto_1492_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueTypeSpecializerList__type_name( RogueTypeSpecializerList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[721]);
}

RogueTypeSpecializerList* RogueTypeSpecializerList__init_object( RogueTypeSpecializerList* THIS )
{
  return (RogueTypeSpecializerList*)(THIS);
}

RogueTypeSpecializerList* RogueTypeSpecializerList__init( RogueTypeSpecializerList* THIS )
{
  RogueTypeSpecializerList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueTypeSpecializerList*)(THIS);
}

RogueTypeSpecializerList* RogueTypeSpecializerList__init__Int32( RogueTypeSpecializerList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassTypeSpecializer*), true );
  }
  return (RogueTypeSpecializerList*)(THIS);
}

RogueTypeSpecializerList* RogueTypeSpecializerList__add__TypeSpecializer( RogueTypeSpecializerList* THIS, RogueClassTypeSpecializer* value_0 )
{
  ((RogueTypeSpecializerList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTypeSpecializerList*)(THIS);
}

RogueInt32 RogueTypeSpecializerList__capacity( RogueTypeSpecializerList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTypeSpecializerList* RogueTypeSpecializerList__reserve__Int32( RogueTypeSpecializerList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassTypeSpecializer*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueTypeSpecializerList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassTypeSpecializer*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTypeSpecializerList*)(THIS);
}

RogueString* RogueString_TemplateTableEntryList__to_String( RogueTableEntry_of_String_TemplateList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_String_TemplateList*,_auto_1523_2,(THIS));
    RogueInt32 _auto_1524_3 = (0);
    for (;_auto_1524_3 < _auto_1523_2->count;++_auto_1524_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassString_TemplateTableEntry*,value_4,(((RogueClassString_TemplateTableEntry*)(_auto_1523_2->data->objects[_auto_1524_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_TemplateTableEntryList__type_name( RogueTableEntry_of_String_TemplateList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[722]);
}

RogueTableEntry_of_String_TemplateList* RogueString_TemplateTableEntryList__init_object( RogueTableEntry_of_String_TemplateList* THIS )
{
  return (RogueTableEntry_of_String_TemplateList*)(THIS);
}

RogueTableEntry_of_String_TemplateList* RogueString_TemplateTableEntryList__init__Int32_String_TemplateTableEntry( RogueTableEntry_of_String_TemplateList* THIS, RogueInt32 initial_capacity_0, RogueClassString_TemplateTableEntry* initial_value_1 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_TemplateTableEntry*), true );
    {
      RogueInt32 i_2 = (1);
      RogueInt32 _auto_481_3 = (initial_capacity_0);
      for (;i_2 <= _auto_481_3;++i_2)
      {
        RogueString_TemplateTableEntryList__add__String_TemplateTableEntry( ROGUE_ARG(THIS), initial_value_1 );
      }
    }
  }
  return (RogueTableEntry_of_String_TemplateList*)(THIS);
}

RogueTableEntry_of_String_TemplateList* RogueString_TemplateTableEntryList__add__String_TemplateTableEntry( RogueTableEntry_of_String_TemplateList* THIS, RogueClassString_TemplateTableEntry* value_0 )
{
  ((RogueString_TemplateTableEntryList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_TemplateList*)(THIS);
}

RogueInt32 RogueString_TemplateTableEntryList__capacity( RogueTableEntry_of_String_TemplateList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_TemplateList* RogueString_TemplateTableEntryList__reserve__Int32( RogueTableEntry_of_String_TemplateList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassString_TemplateTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueString_TemplateTableEntryList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassString_TemplateTableEntry*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_TemplateList*)(THIS);
}

RogueString* RogueString_TemplateTableEntry__type_name( RogueClassString_TemplateTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[672]);
}

RogueClassString_TemplateTableEntry* RogueString_TemplateTableEntry__init__String_Template_Int32( RogueClassString_TemplateTableEntry* THIS, RogueString* _key_0, RogueClassTemplate* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_TemplateTableEntry*)(THIS);
}

RogueClassString_TemplateTableEntry* RogueString_TemplateTableEntry__init_object( RogueClassString_TemplateTableEntry* THIS )
{
  return (RogueClassString_TemplateTableEntry*)(THIS);
}

RogueString* RogueString_TemplateTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[763]);
}

RogueString* RogueString_AugmentListTableEntryList__to_String( RogueTableEntry_of_String_AugmentListList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_String_AugmentListList*,_auto_1555_2,(THIS));
    RogueInt32 _auto_1556_3 = (0);
    for (;_auto_1556_3 < _auto_1555_2->count;++_auto_1556_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassString_AugmentListTableEntry*,value_4,(((RogueClassString_AugmentListTableEntry*)(_auto_1555_2->data->objects[_auto_1556_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_AugmentListTableEntryList__type_name( RogueTableEntry_of_String_AugmentListList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[723]);
}

RogueTableEntry_of_String_AugmentListList* RogueString_AugmentListTableEntryList__init_object( RogueTableEntry_of_String_AugmentListList* THIS )
{
  return (RogueTableEntry_of_String_AugmentListList*)(THIS);
}

RogueTableEntry_of_String_AugmentListList* RogueString_AugmentListTableEntryList__init__Int32_String_AugmentListTableEntry( RogueTableEntry_of_String_AugmentListList* THIS, RogueInt32 initial_capacity_0, RogueClassString_AugmentListTableEntry* initial_value_1 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_AugmentListTableEntry*), true );
    {
      RogueInt32 i_2 = (1);
      RogueInt32 _auto_488_3 = (initial_capacity_0);
      for (;i_2 <= _auto_488_3;++i_2)
      {
        RogueString_AugmentListTableEntryList__add__String_AugmentListTableEntry( ROGUE_ARG(THIS), initial_value_1 );
      }
    }
  }
  return (RogueTableEntry_of_String_AugmentListList*)(THIS);
}

RogueTableEntry_of_String_AugmentListList* RogueString_AugmentListTableEntryList__add__String_AugmentListTableEntry( RogueTableEntry_of_String_AugmentListList* THIS, RogueClassString_AugmentListTableEntry* value_0 )
{
  ((RogueString_AugmentListTableEntryList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_AugmentListList*)(THIS);
}

RogueInt32 RogueString_AugmentListTableEntryList__capacity( RogueTableEntry_of_String_AugmentListList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_AugmentListList* RogueString_AugmentListTableEntryList__reserve__Int32( RogueTableEntry_of_String_AugmentListList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassString_AugmentListTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueString_AugmentListTableEntryList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassString_AugmentListTableEntry*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_AugmentListList*)(THIS);
}

RogueString* RogueString_AugmentListTableEntry__type_name( RogueClassString_AugmentListTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[673]);
}

RogueClassString_AugmentListTableEntry* RogueString_AugmentListTableEntry__init__String_AugmentList_Int32( RogueClassString_AugmentListTableEntry* THIS, RogueString* _key_0, RogueAugmentList* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_AugmentListTableEntry*)(THIS);
}

RogueClassString_AugmentListTableEntry* RogueString_AugmentListTableEntry__init_object( RogueClassString_AugmentListTableEntry* THIS )
{
  return (RogueClassString_AugmentListTableEntry*)(THIS);
}

RogueString* RogueString_AugmentListTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[764]);
}

RogueString* RogueCmdLabelList__to_String( RogueCmdLabelList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdLabelList*,_auto_1587_2,(THIS));
    RogueInt32 _auto_1588_3 = (0);
    for (;_auto_1588_3 < _auto_1587_2->count;++_auto_1588_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdLabel*,value_4,(((RogueClassCmdLabel*)(_auto_1587_2->data->objects[_auto_1588_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdLabelList__type_name( RogueCmdLabelList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[724]);
}

RogueCmdLabelList* RogueCmdLabelList__init_object( RogueCmdLabelList* THIS )
{
  return (RogueCmdLabelList*)(THIS);
}

RogueCmdLabelList* RogueCmdLabelList__init( RogueCmdLabelList* THIS )
{
  RogueCmdLabelList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueCmdLabelList*)(THIS);
}

RogueCmdLabelList* RogueCmdLabelList__init__Int32( RogueCmdLabelList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassCmdLabel*), true );
  }
  return (RogueCmdLabelList*)(THIS);
}

RogueCmdLabelList* RogueCmdLabelList__add__CmdLabel( RogueCmdLabelList* THIS, RogueClassCmdLabel* value_0 )
{
  ((RogueCmdLabelList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdLabelList*)(THIS);
}

RogueInt32 RogueCmdLabelList__capacity( RogueCmdLabelList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueCmdLabelList* RogueCmdLabelList__clear( RogueCmdLabelList* THIS )
{
  RogueCmdLabelList__discard_from__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueCmdLabelList*)(THIS);
}

void RogueCmdLabelList__discard_from__Int32( RogueCmdLabelList* THIS, RogueInt32 index_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdLabel*,zero_value_1,0);
  RogueInt32 c_2 = (THIS->count);
  while (c_2 > index_0)
  {
    --c_2;
    THIS->data->objects[c_2] = zero_value_1;
  }
  THIS->count = c_2;
}

RogueCmdLabelList* RogueCmdLabelList__reserve__Int32( RogueCmdLabelList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassCmdLabel*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueCmdLabelList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassCmdLabel*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdLabelList*)(THIS);
}

RogueString* RogueString_CmdLabelTable__to_String( RogueClassString_CmdLabelTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueString_CmdLabelTable__print_to__StringBuilder( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))) )))) ))));
}

RogueString* RogueString_CmdLabelTable__type_name( RogueClassString_CmdLabelTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[674]);
}

RogueClassString_CmdLabelTable* RogueString_CmdLabelTable__init( RogueClassString_CmdLabelTable* THIS )
{
  RogueString_CmdLabelTable__init__Int32( ROGUE_ARG(THIS), 16 );
  return (RogueClassString_CmdLabelTable*)(THIS);
}

RogueClassString_CmdLabelTable* RogueString_CmdLabelTable__init__Int32( RogueClassString_CmdLabelTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_CmdLabelTableEntryList__init__Int32_String_CmdLabelTableEntry( ROGUE_ARG(ROGUE_CREATE_REF(RogueTableEntry_of_String_CmdLabelList*,ROGUE_CREATE_OBJECT(TableEntry_of_String_CmdLabelList))), bin_count_0, ROGUE_ARG(((RogueClassString_CmdLabelTableEntry*)(NULL))) )));
  THIS->keys = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  return (RogueClassString_CmdLabelTable*)(THIS);
}

void RogueString_CmdLabelTable__clear( RogueClassString_CmdLabelTable* THIS )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_String_CmdLabelList*,_auto_1625_0,(THIS->bins));
    RogueInt32 i_1 = (0);
    for (;i_1 < _auto_1625_0->count;++i_1)
    {
      THIS->bins->data->objects[i_1] = ((RogueClassString_CmdLabelTableEntry*)(NULL));
    }
  }
  RogueStringList__clear( ROGUE_ARG(THIS->keys) );
}

RogueLogical RogueString_CmdLabelTable__contains__String( RogueClassString_CmdLabelTable* THIS, RogueString* key_0 )
{
  return (RogueLogical)(!!(((RogueString_CmdLabelTable__find__String( ROGUE_ARG(THIS), key_0 )))));
}

RogueClassString_CmdLabelTableEntry* RogueString_CmdLabelTable__find__String( RogueClassString_CmdLabelTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  ROGUE_DEF_LOCAL_REF(RogueClassString_CmdLabelTableEntry*,entry_2,(((RogueClassString_CmdLabelTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)]))));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_2->key), key_0 )))))
    {
      return (RogueClassString_CmdLabelTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_CmdLabelTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_CmdLabelTableEntry*)(((RogueClassString_CmdLabelTableEntry*)(NULL)));
}

RogueClassCmdLabel* RogueString_CmdLabelTable__get__String( RogueClassString_CmdLabelTable* THIS, RogueString* key_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassString_CmdLabelTableEntry*,entry_1,(((RogueString_CmdLabelTable__find__String( ROGUE_ARG(THIS), key_0 )))));
  if (!!(entry_1))
  {
    return (RogueClassCmdLabel*)(entry_1->value);
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdLabel*,default_value_2,0);
    return (RogueClassCmdLabel*)(default_value_2);
  }
}

RogueClassString_CmdLabelTable* RogueString_CmdLabelTable__set__String_CmdLabel( RogueClassString_CmdLabelTable* THIS, RogueString* key_0, RogueClassCmdLabel* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  ROGUE_DEF_LOCAL_REF(RogueClassString_CmdLabelTableEntry*,entry_4,(((RogueClassString_CmdLabelTableEntry*)(THIS->bins->data->objects[index_3]))));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_4->key), key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_CmdLabelTable*)(THIS);
    }
    entry_4 = ((RogueClassString_CmdLabelTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_CmdLabelTableEntry*)((RogueString_CmdLabelTableEntry__init__String_CmdLabel_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_CmdLabelTableEntry*,ROGUE_CREATE_OBJECT(String_CmdLabelTableEntry))), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_CmdLabelTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( ROGUE_ARG(THIS->keys), key_0 );
  return (RogueClassString_CmdLabelTable*)(THIS);
}

RogueStringBuilder* RogueString_CmdLabelTable__print_to__StringBuilder( RogueClassString_CmdLabelTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    ROGUE_DEF_LOCAL_REF(RogueString*,key_2,(((RogueString*)(THIS->keys->data->objects[i_1]))));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ROGUE_ARG(((RogueObject*)(((RogueString_CmdLabelTable__get__String( ROGUE_ARG(THIS), key_2 )))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_CmdLabelTable* RogueString_CmdLabelTable__init_object( RogueClassString_CmdLabelTable* THIS )
{
  return (RogueClassString_CmdLabelTable*)(THIS);
}

RogueString* RogueCloneArgs__type_name( RogueClassCloneArgs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[675]);
}

RogueClassCmdLabel* RogueCloneArgs__register_label__CmdLabel( RogueClassCloneArgs* THIS, RogueClassCmdLabel* label_0 )
{
  return (RogueClassCmdLabel*)(label_0);
}

RogueClassCloneArgs* RogueCloneArgs__init_object( RogueClassCloneArgs* THIS )
{
  return (RogueClassCloneArgs*)(THIS);
}

RogueString* RogueCloneMethodArgs__type_name( RogueClassCloneMethodArgs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1054]);
}

RogueClassCmdLabel* RogueCloneMethodArgs__register_label__CmdLabel( RogueClassCloneMethodArgs* THIS, RogueClassCmdLabel* label_0 )
{
  RogueCmdLabelList__add__CmdLabel( ROGUE_ARG(THIS->cloned_method->label_list), label_0 );
  RogueString_CmdLabelTable__set__String_CmdLabel( ROGUE_ARG(THIS->cloned_method->label_lookup), ROGUE_ARG(label_0->name), label_0 );
  return (RogueClassCmdLabel*)(label_0);
}

RogueClassCloneMethodArgs* RogueCloneMethodArgs__init_object( RogueClassCloneMethodArgs* THIS )
{
  return (RogueClassCloneMethodArgs*)(THIS);
}

RogueClassCloneMethodArgs* RogueCloneMethodArgs__init__Method( RogueClassCloneMethodArgs* THIS, RogueClassMethod* _auto_502_0 )
{
  THIS->cloned_method = _auto_502_0;
  return (RogueClassCloneMethodArgs*)(THIS);
}

RogueString* RogueCmdAccess__type_name( RogueClassCmdAccess* THIS )
{
  return (RogueString*)(Rogue_literal_strings[810]);
}

RogueClassCmd* RogueCmdAccess__clone__CloneArgs( RogueClassCmdAccess* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdAccess*,result_1,(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->context), clone_args_0 )))), ROGUE_ARG(THIS->name), ROGUE_ARG(((RogueCmd__clone__CmdArgs_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->args), clone_args_0 )))) )))));
  if (!!(THIS->flag_args))
  {
    result_1->flag_args = ((RogueCmdFlagArgList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueCmdFlagArgList*,ROGUE_CREATE_OBJECT(CmdFlagArgList))), ROGUE_ARG(THIS->flag_args->count) )));
    {
      ROGUE_DEF_LOCAL_REF(RogueCmdFlagArgList*,_auto_1626_3,(THIS->flag_args));
      RogueInt32 _auto_1627_4 = (0);
      for (;_auto_1627_4 < _auto_1626_3->count;++_auto_1627_4)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmdFlagArg*,flag_arg_5,(((RogueClassCmdFlagArg*)(_auto_1626_3->data->objects[_auto_1627_4]))));
        RogueCmdFlagArgList__add__CmdFlagArg( ROGUE_ARG(result_1->flag_args), ROGUE_ARG(((RogueCmdFlagArg__clone__CloneArgs( flag_arg_5, ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) )))) );
      }
    }
  }
  ROGUE_DEF_LOCAL_REF(RogueClassMacroArgs*,macro_args_2,(((RogueClassMacroArgs*)(RogueObject_as(clone_args_0,RogueTypeMacroArgs)))));
  if (!!(macro_args_2))
  {
    return (RogueClassCmd*)(((RogueMacroArgs__inline_access__CmdAccess( macro_args_2, result_1 ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(result_1)));
}

RogueClassType* RogueCmdAccess__implicit_type__Scope( RogueClassCmdAccess* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassType*)(((RogueScope__find_type__String( scope_0, ROGUE_ARG(THIS->name) ))));
}

RogueClassCmd* RogueCmdAccess__resolve__Scope( RogueClassCmdAccess* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->args))
  {
    RogueCmdArgs__resolve__Scope( ROGUE_ARG(THIS->args), scope_0 );
  }
  if (!!(THIS->context))
  {
    if (((RogueString__ends_with__String( ROGUE_ARG(THIS->name), ROGUE_ARG(((RogueCharacter__to_String( (RogueCharacter)'?' )))) ))))
    {
      return (RogueClassCmd*)(((RogueCmdLogicalize__resolve__Scope( ROGUE_ARG(((RogueClassCmdLogicalize*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalize*,ROGUE_CREATE_OBJECT(CmdLogicalize)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), ROGUE_ARG(((RogueString__leftmost__Int32( ROGUE_ARG(THIS->name), -1 )))), ROGUE_ARG(THIS->args) )))))) )))))), scope_0 ))));
    }
    THIS->context = (call_ROGUEM52( 25, ROGUE_ARG(THIS->context), scope_0 ));
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassLocal*,v_1,(((RogueScope__find_local__String( scope_0, ROGUE_ARG(THIS->name) )))));
    if (!!(v_1))
    {
      if (!!(THIS->args))
      {
        return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), ROGUE_ARG(THIS->name) )))))), Rogue_literal_strings[279], ROGUE_ARG(THIS->args) )))), scope_0 ))));
      }
      return (RogueClassCmd*)(((RogueCmdReadLocal__resolve__Scope( ROGUE_ARG(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), ROGUE_ARG(THIS->t), v_1 )))), scope_0 ))));
    }
    ROGUE_DEF_LOCAL_REF(RogueClassType*,new_type_2,(((RogueScope__find_type__String( scope_0, ROGUE_ARG(((RogueString__after_any__Character( ROGUE_ARG(THIS->name), (RogueCharacter)'@' )))) )))));
    if (!!(new_type_2))
    {
      RogueType__organize__Scope( new_type_2, scope_0 );
      if (((RogueType__is_routine( new_type_2 ))))
      {
        if (((RogueString__begins_with__Character( ROGUE_ARG(THIS->name), (RogueCharacter)'@' ))))
        {
          ROGUE_DEF_LOCAL_REF(RogueMethodList*,m_call_list_3,(((RogueString_MethodListTable__get__String( ROGUE_ARG(new_type_2->global_method_lookup_by_name), Rogue_literal_strings[279] )))));
          if ((!!(m_call_list_3) && m_call_list_3->count == 1))
          {
            ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_call_4,(((RogueClassMethod*)(m_call_list_3->data->objects[0]))));
            ROGUE_DEF_LOCAL_REF(RogueFnParamList*,parameters_5,(((RogueFnParamList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueFnParamList*,ROGUE_CREATE_OBJECT(FnParamList))), ROGUE_ARG(m_call_4->parameters->count) )))));
            ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,args_6,(((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )))));
            {
              ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_1628_23,(m_call_4->parameters));
              RogueInt32 _auto_1629_24 = (0);
              for (;_auto_1629_24 < _auto_1628_23->count;++_auto_1629_24)
              {
                ROGUE_DEF_LOCAL_REF(RogueClassLocal*,param_25,(((RogueClassLocal*)(_auto_1628_23->data->objects[_auto_1629_24]))));
                RogueFnParamList__add__FnParam( parameters_5, ROGUE_ARG(((RogueFnParam__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassFnParam*,ROGUE_CREATE_OBJECT(FnParam))), ROGUE_ARG(param_25->name) )))) );
                ((RogueFnParamList__last( parameters_5 )))->_type = param_25->_type;
                RogueCmdList__add__Cmd( ((RogueCmdList*)args_6), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(param_25->name) )))))) );
              }
            }
            ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,statements_7,(((RogueCmdStatementList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))), 1 )))));
            if (!!(m_call_4->_return_type))
            {
              RogueCmdList__add__Cmd( ((RogueCmdList*)statements_7), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReturn*,ROGUE_CREATE_OBJECT(CmdReturn))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(new_type_2->name), args_6 )))))) )))))) );
            }
            else
            {
              RogueCmdList__add__Cmd( ((RogueCmdList*)statements_7), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(new_type_2->name), args_6 )))))) );
            }
            return (RogueClassCmd*)(((RogueCmdCreateFunction__resolve__Scope( ROGUE_ARG(((RogueCmdCreateFunction__init__Token_FnParamList_Type_FnArgList_CmdStatementList_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCreateFunction*,ROGUE_CREATE_OBJECT(CmdCreateFunction))), ROGUE_ARG(THIS->t), parameters_5, ROGUE_ARG(m_call_4->_return_type), ROGUE_ARG(((RogueFnArgList*)(NULL))), statements_7, false )))), scope_0 ))));
          }
        }
        else
        {
          return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdThisContext*,ROGUE_CREATE_OBJECT(CmdThisContext))), ROGUE_ARG(THIS->t), new_type_2 )))))), Rogue_literal_strings[279], ROGUE_ARG(THIS->args) )))), scope_0 ))));
        }
      }
      if (((RogueString__begins_with__Character( ROGUE_ARG(THIS->name), (RogueCharacter)'@' ))))
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[863] ))));
      }
      if (((void*)THIS->args) == ((void*)NULL))
      {
        if (((RogueString__ends_with__String( ROGUE_ARG(THIS->name), ROGUE_ARG(((RogueCharacter__to_String( (RogueCharacter)']' )))) ))))
        {
          THIS->args = ((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )));
        }
        else
        {
          return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadSingleton__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadSingleton*,ROGUE_CREATE_OBJECT(CmdReadSingleton))), ROGUE_ARG(THIS->t), new_type_2 ))))));
        }
      }
      if (new_type_2->is_array)
      {
        return (RogueClassCmd*)(((RogueCmdCreateArray__resolve__Scope( ROGUE_ARG(((RogueCmdCreateArray__init__Token_Type_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCreateArray*,ROGUE_CREATE_OBJECT(CmdCreateArray))), ROGUE_ARG(THIS->t), new_type_2, ROGUE_ARG(THIS->args) )))), scope_0 ))));
      }
      if (((RogueType__is_compound( new_type_2 ))))
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,cmd_8,(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, new_type_2, ROGUE_ARG(((RogueCmdAccess__init__Token_String_CmdArgs_CmdFlagArgList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), Rogue_literal_strings[344], ROGUE_ARG(THIS->args), ROGUE_ARG(THIS->flag_args) )))), true, false )))));
        ROGUE_DEF_LOCAL_REF(RogueClassCmdCall*,cmd_call_9,(((RogueClassCmdCall*)(RogueObject_as(cmd_8,RogueTypeCmdCall)))));
        if ((!!(cmd_call_9) && ((RogueMethod__is_generated( ROGUE_ARG(cmd_call_9->method_info) )))))
        {
          return (RogueClassCmd*)(((RogueCmdCreateCompound__resolve__Scope( ROGUE_ARG(((RogueCmdCreateCompound__init__Token_Type_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCreateCompound*,ROGUE_CREATE_OBJECT(CmdCreateCompound))), ROGUE_ARG(THIS->t), new_type_2, ROGUE_ARG(cmd_call_9->args) )))), scope_0 ))));
        }
        else if (!!(cmd_call_9))
        {
          return (RogueClassCmd*)(((RogueClassCmd*)(cmd_call_9)));
        }
        else
        {
          return (RogueClassCmd*)(cmd_8);
        }
      }
      ROGUE_DEF_LOCAL_REF(RogueClassCmdCreateObject*,cmd_create_10,(((RogueCmdCreateObject__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCreateObject*,ROGUE_CREATE_OBJECT(CmdCreateObject))), ROGUE_ARG(THIS->t), new_type_2 )))));
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,cmd_new_11,(((RogueClassCmd*)(cmd_create_10))));
      RogueLogical must_find_12 = ((!!(THIS->args->count) || ((RogueType__is_native( new_type_2 )))));
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,cmd_call_13,0);
      if (!(((RogueType__is_native( new_type_2 )))))
      {
        cmd_call_13 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, new_type_2, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs_CmdFlagArgList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), cmd_new_11, Rogue_literal_strings[345], ROGUE_ARG(THIS->args), ROGUE_ARG(THIS->flag_args) )))), false, true ))));
      }
      if (!(!!(cmd_call_13)))
      {
        cmd_call_13 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, new_type_2, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs_CmdFlagArgList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(new_type_2->name) )))))), Rogue_literal_strings[344], ROGUE_ARG(THIS->args), ROGUE_ARG(THIS->flag_args) )))), false, false ))));
        if ((!(!!(cmd_call_13)) && must_find_12))
        {
          if (!(((RogueType__is_native( new_type_2 )))))
          {
            cmd_call_13 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, new_type_2, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs_CmdFlagArgList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), cmd_new_11, Rogue_literal_strings[345], ROGUE_ARG(THIS->args), ROGUE_ARG(THIS->flag_args) )))), true, true ))));
          }
          cmd_call_13 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, new_type_2, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs_CmdFlagArgList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(new_type_2->name) )))))), Rogue_literal_strings[344], ROGUE_ARG(THIS->args), ROGUE_ARG(THIS->flag_args) )))), true, false ))));
        }
      }
      if (!!(cmd_call_13))
      {
        return (RogueClassCmd*)((call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, cmd_call_13, new_type_2, scope_0 ))), scope_0 )));
      }
      else
      {
        return (RogueClassCmd*)((call_ROGUEM52( 25, cmd_new_11, scope_0 )));
      }
    }
    else if (((RogueString__ends_with__String( ROGUE_ARG(THIS->name), ROGUE_ARG(((RogueCharacter__to_String( (RogueCharacter)'?' )))) ))))
    {
      return (RogueClassCmd*)(((RogueCmdLogicalize__resolve__Scope( ROGUE_ARG(((RogueClassCmdLogicalize*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalize*,ROGUE_CREATE_OBJECT(CmdLogicalize)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), ROGUE_ARG(((RogueString__leftmost__Int32( ROGUE_ARG(THIS->name), -1 )))), ROGUE_ARG(THIS->args) )))))) )))))), scope_0 ))));
    }
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,result_14,(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, ROGUE_ARG(scope_0->_this_type), ROGUE_ARG(THIS), false, false )))));
    if (!!(result_14))
    {
      RogueCmdAccess__check_for_recursive_getter__Scope( ROGUE_ARG(THIS), scope_0 );
      return (RogueClassCmd*)(result_14);
    }
    ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_15,(((RogueType__find_global__String( ROGUE_ARG(scope_0->_this_type), ROGUE_ARG(THIS->name) )))));
    if (!!(p_15))
    {
      if (!!(THIS->args))
      {
        return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), ROGUE_ARG(THIS->name) )))))), Rogue_literal_strings[279], ROGUE_ARG(THIS->args) )))), scope_0 ))));
      }
      else
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadGlobal*,ROGUE_CREATE_OBJECT(CmdReadGlobal))), ROGUE_ARG(THIS->t), p_15 ))))));
      }
    }
    p_15 = ((RogueClassProperty*)((RogueType__find_property__String( ROGUE_ARG(scope_0->_this_type), ROGUE_ARG(THIS->name) ))));
    if (!!(p_15))
    {
      if (!!(THIS->args))
      {
        return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), ROGUE_ARG(THIS->name) )))))), Rogue_literal_strings[279], ROGUE_ARG(THIS->args) )))), scope_0 ))));
      }
      if (((RogueMethod__is_global( ROGUE_ARG(scope_0->this_method) ))))
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[886] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->name) )))) )))), Rogue_literal_strings[887] )))) )))) ))));
      }
      THIS->context = ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdThisContext*,ROGUE_CREATE_OBJECT(CmdThisContext))), ROGUE_ARG(THIS->t), ROGUE_ARG(scope_0->_this_type) )))));
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadProperty*,ROGUE_CREATE_OBJECT(CmdReadProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), p_15 ))))));
    }
    if (!(!!(THIS->args)))
    {
      ROGUE_DEF_LOCAL_REF(RogueClassDefinition*,def_16,(((RogueString_DefinitionTable__get__String( ROGUE_ARG(scope_0->_this_type->definition_lookup), ROGUE_ARG(THIS->name) )))));
      if ((!(!!(def_16)) && !!(scope_0->_implicit_type)))
      {
        def_16 = ((RogueClassDefinition*)((RogueString_DefinitionTable__get__String( ROGUE_ARG(scope_0->_implicit_type->definition_lookup), ROGUE_ARG(THIS->name) ))));
      }
      if (!!(def_16))
      {
        return (RogueClassCmd*)((call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(def_16->expression), ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) ))), scope_0 )));
      }
      p_15 = ((RogueClassProperty*)((RogueType__find_property__String( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global), ROGUE_ARG(THIS->name) ))));
      if (!!(p_15))
      {
        return (RogueClassCmd*)(((RogueCmdReadProperty__resolve__Scope( ROGUE_ARG(((RogueCmdReadProperty__init__Token_Cmd_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadProperty*,ROGUE_CREATE_OBJECT(CmdReadProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadSingleton__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadSingleton*,ROGUE_CREATE_OBJECT(CmdReadSingleton))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global) )))))), p_15 )))), scope_0 ))));
      }
    }
    return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, ROGUE_ARG(scope_0->_this_type), ROGUE_ARG(THIS), true, false ))));
  }
  ROGUE_DEF_LOCAL_REF(RogueClassType*,context_type_17,((call_ROGUEM60( 22, ROGUE_ARG(THIS->context) ))));
  RogueType__organize__Scope( context_type_17, scope_0 );
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,result_18,(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_17, ROGUE_ARG(THIS), false, false )))));
  if (!!(result_18))
  {
    return (RogueClassCmd*)(result_18);
  }
  ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_19,(((RogueType__find_global__String( context_type_17, ROGUE_ARG(THIS->name) )))));
  if (!!(p_19))
  {
    if (!!(THIS->args))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), ROGUE_ARG(THIS->name) )))))), Rogue_literal_strings[279], ROGUE_ARG(THIS->args) )))), scope_0 ))));
    }
    call_ROGUEM59( 19, ROGUE_ARG(THIS->context) );
    return (RogueClassCmd*)(((RogueCmdReadGlobal__resolve__Scope( ROGUE_ARG(((RogueCmdReadGlobal__init__Token_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadGlobal*,ROGUE_CREATE_OBJECT(CmdReadGlobal))), ROGUE_ARG(THIS->t), p_19 )))), scope_0 ))));
  }
  p_19 = ((RogueClassProperty*)((RogueType__find_property__String( context_type_17, ROGUE_ARG(THIS->name) ))));
  if (!!(p_19))
  {
    if (!!(THIS->args))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), ROGUE_ARG(THIS->name) )))))), Rogue_literal_strings[279], ROGUE_ARG(THIS->args) )))), scope_0 ))));
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadProperty*,ROGUE_CREATE_OBJECT(CmdReadProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), p_19 ))))));
  }
  if (!(!!(THIS->args)))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassDefinition*,def_20,(((RogueString_DefinitionTable__get__String( ROGUE_ARG(context_type_17->definition_lookup), ROGUE_ARG(THIS->name) )))));
    if (!!(def_20))
    {
      ROGUE_DEF_LOCAL_REF(RogueClassType*,old_implicit_type_21,(((RogueScope__set_implicit_type__Type( scope_0, context_type_17 )))));
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,def_result_22,((call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(def_20->expression), ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) ))), scope_0 ))));
      RogueScope__set_implicit_type__Type( scope_0, old_implicit_type_21 );
      return (RogueClassCmd*)(def_result_22);
    }
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_17, ROGUE_ARG(THIS), true, false ))));
}

RogueClassCmd* RogueCmdAccess__resolve_assignment__Scope_Cmd( RogueClassCmdAccess* THIS, RogueClassScope* scope_0, RogueClassCmd* new_value_1 )
{
  if (!!(THIS->args))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[956] ))));
  }
  RogueLogical explicit_context_2 = (!!(THIS->context));
  RogueCharacter _auto_507_4;
  ROGUE_DEF_LOCAL_REF(RogueString*,setter_name_3,(((((_auto_507_4=THIS->name->characters[0])==((RogueCharacter)'@'))) ? (((RogueString*)(NULL))) : ((RogueString__operatorPLUS__String( Rogue_literal_strings[957], ROGUE_ARG(THIS->name) ))))));
  if (((void*)THIS->context) == ((void*)NULL))
  {
    if (!!(setter_name_3))
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,setter_5,(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, ROGUE_ARG(scope_0->_this_type), ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(NULL))), setter_name_3, ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), new_value_1 )))) )))), false, false )))));
      if (!!(setter_5))
      {
        if (((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(scope_0->this_method->name), setter_name_3 ))))
        {
          ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[958], ROGUE_ARG(THIS->name) )))), Rogue_literal_strings[959] )))), ROGUE_ARG(THIS->name) )))), Rogue_literal_strings[960] )))) ))));
        }
        return (RogueClassCmd*)(setter_5);
      }
    }
    ROGUE_DEF_LOCAL_REF(RogueClassType*,as_type_6,(((RogueScope__find_type__String( scope_0, ROGUE_ARG(THIS->name) )))));
    if ((!!(as_type_6) && ((RogueType__is_singleton( as_type_6 )))))
    {
      return (RogueClassCmd*)(((RogueCmdWriteSingleton__resolve__Scope( ROGUE_ARG(((RogueCmdWriteSingleton__init__Token_Type_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteSingleton*,ROGUE_CREATE_OBJECT(CmdWriteSingleton))), ROGUE_ARG(THIS->t), as_type_6, new_value_1 )))), scope_0 ))));
    }
    ROGUE_DEF_LOCAL_REF(RogueClassLocal*,v_7,(((RogueScope__find_local__String( scope_0, ROGUE_ARG(THIS->name) )))));
    if (!!(v_7))
    {
      return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ROGUE_ARG(((RogueCmdWriteLocal__init__Token_Local_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteLocal*,ROGUE_CREATE_OBJECT(CmdWriteLocal))), ROGUE_ARG(THIS->t), v_7, new_value_1 )))), scope_0 ))));
    }
    ROGUE_DEF_LOCAL_REF(RogueClassDefinition*,def_8,(((RogueString_DefinitionTable__get__String( ROGUE_ARG(scope_0->_this_type->definition_lookup), ROGUE_ARG(THIS->name) )))));
    if ((!(!!(def_8)) && !!(scope_0->_implicit_type)))
    {
      def_8 = ((RogueClassDefinition*)((RogueString_DefinitionTable__get__String( ROGUE_ARG(scope_0->_implicit_type->definition_lookup), ROGUE_ARG(THIS->name) ))));
    }
    if (!!(def_8))
    {
      return (RogueClassCmd*)((call_ROGUEM63( 26, ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(def_8->expression), ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) ))), scope_0, new_value_1 )));
    }
    ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_9,(((RogueType__find_global__String( ROGUE_ARG(scope_0->this_method->type_context), ROGUE_ARG(THIS->name) )))));
    if (!!(p_9))
    {
      return (RogueClassCmd*)(((RogueCmdWriteGlobal__resolve__Scope( ROGUE_ARG(((RogueCmdWriteGlobal__init__Token_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteGlobal*,ROGUE_CREATE_OBJECT(CmdWriteGlobal))), ROGUE_ARG(THIS->t), p_9, new_value_1 )))), scope_0 ))));
    }
    if (((RogueMethod__is_global( ROGUE_ARG(scope_0->this_method) ))))
    {
      p_9 = ((RogueClassProperty*)((RogueType__find_property__String( ROGUE_ARG(scope_0->this_method->type_context), ROGUE_ARG(THIS->name) ))));
      if (!!(p_9))
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[886] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->name) )))) )))), Rogue_literal_strings[887] )))) )))) ))));
      }
    }
    if (((void*)scope_0->_this_type) != ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global))
    {
      p_9 = ((RogueClassProperty*)((RogueType__find_property__String( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global), ROGUE_ARG(THIS->name) ))));
      if (!!(p_9))
      {
        return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ROGUE_ARG(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteProperty*,ROGUE_CREATE_OBJECT(CmdWriteProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadSingleton__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadSingleton*,ROGUE_CREATE_OBJECT(CmdReadSingleton))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global) )))))), p_9, new_value_1 )))), scope_0 ))));
      }
    }
    THIS->context = ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdThisContext*,ROGUE_CREATE_OBJECT(CmdThisContext))), ROGUE_ARG(THIS->t), ROGUE_ARG(scope_0->_this_type) )))));
  }
  else
  {
    THIS->context = (call_ROGUEM52( 25, ROGUE_ARG(THIS->context), scope_0 ));
  }
  ROGUE_DEF_LOCAL_REF(RogueClassType*,context_type_10,((call_ROGUEM60( 22, ROGUE_ARG(THIS->context) ))));
  RogueType__organize__Scope( context_type_10, scope_0 );
  if (!!(setter_name_3))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,setter_11,(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_10, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), setter_name_3, ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), new_value_1 )))) )))), false, false )))));
    if (!!(setter_11))
    {
      return (RogueClassCmd*)(setter_11);
    }
  }
  ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_12,(((RogueType__find_global__String( context_type_10, ROGUE_ARG(THIS->name) )))));
  if (!!(p_12))
  {
    call_ROGUEM59( 19, ROGUE_ARG(THIS->context) );
    return (RogueClassCmd*)(((RogueCmdWriteGlobal__resolve__Scope( ROGUE_ARG(((RogueCmdWriteGlobal__init__Token_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteGlobal*,ROGUE_CREATE_OBJECT(CmdWriteGlobal))), ROGUE_ARG(THIS->t), p_12, new_value_1 )))), scope_0 ))));
  }
  p_12 = ((RogueClassProperty*)((RogueType__find_property__String( context_type_10, ROGUE_ARG(THIS->name) ))));
  if (!!(p_12))
  {
    if ((((RogueMethod__is_global( ROGUE_ARG(scope_0->this_method) ))) && !(explicit_context_2)))
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[886] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->name) )))) )))), Rogue_literal_strings[887] )))) )))) ))));
    }
    else
    {
      return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ROGUE_ARG(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteProperty*,ROGUE_CREATE_OBJECT(CmdWriteProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), p_12, new_value_1 )))), scope_0 ))));
    }
  }
  ROGUE_DEF_LOCAL_REF(RogueClassDefinition*,def_13,(((RogueString_DefinitionTable__get__String( ROGUE_ARG(context_type_10->definition_lookup), ROGUE_ARG(THIS->name) )))));
  if ((!(!!(def_13)) && !!(scope_0->_implicit_type)))
  {
    def_13 = ((RogueClassDefinition*)((RogueString_DefinitionTable__get__String( ROGUE_ARG(scope_0->_implicit_type->definition_lookup), ROGUE_ARG(THIS->name) ))));
  }
  if (!!(def_13))
  {
    return (RogueClassCmd*)((call_ROGUEM63( 26, ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(def_13->expression), ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) ))), scope_0, new_value_1 )));
  }
  if (!!(setter_name_3))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,setter_14,(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_10, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), setter_name_3, ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), new_value_1 )))) )))), true, false )))));
    if (!!(setter_14))
    {
      return (RogueClassCmd*)(setter_14);
    }
  }
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[866] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->name) )))) )))), Rogue_literal_strings[961] )))) )))) ))));
}

RogueClassCmd* RogueCmdAccess__resolve_modify_and_assign__Scope_TokenType_Cmd( RogueClassCmdAccess* THIS, RogueClassScope* scope_0, RogueClassTokenType* op_1, RogueClassCmd* new_value_2 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassType*,context_type_3,0);
  if (!!(THIS->context))
  {
    THIS->context = (call_ROGUEM52( 25, ROGUE_ARG(THIS->context), scope_0 ));
    context_type_3 = ((RogueClassType*)(call_ROGUEM60( 22, ROGUE_ARG(THIS->context) )));
  }
  else
  {
    if (((void*)THIS->args) == ((void*)NULL))
    {
      ROGUE_DEF_LOCAL_REF(RogueClassLocal*,v_4,(((RogueScope__find_local__String( scope_0, ROGUE_ARG(THIS->name) )))));
      if (!!(v_4))
      {
        if (!!(THIS->args))
        {
          ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[965] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->name) )))) )))), Rogue_literal_strings[966] )))) )))) ))));
        }
        return (RogueClassCmd*)(((RogueCmdModifyAndAssignLocal__resolve__Scope( ROGUE_ARG(((RogueCmdModifyAndAssignLocal__init__Token_Local_TokenType_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdModifyAndAssignLocal*,ROGUE_CREATE_OBJECT(CmdModifyAndAssignLocal))), ROGUE_ARG(THIS->t), v_4, op_1, new_value_2 )))), scope_0 ))));
      }
    }
    context_type_3 = ((RogueClassType*)scope_0->_this_type);
  }
  ROGUE_DEF_LOCAL_REF(RogueString*,setter_name_5,0);
  if (THIS->name->characters[0] != (RogueCharacter)'@')
  {
    setter_name_5 = ((RogueString*)((RogueString__operatorPLUS__String( Rogue_literal_strings[957], ROGUE_ARG(THIS->name) ))));
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,setter_6,(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_3, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(NULL))), setter_name_5, ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), new_value_2 )))) )))), false, false )))));
    if (!!(setter_6))
    {
      return (RogueClassCmd*)((call_ROGUEM52( 25, ROGUE_ARG(((RogueCmdAccess__expand_modify_and_assign__Scope_TokenType_Cmd( ROGUE_ARG(THIS), scope_0, op_1, new_value_2 )))), scope_0 )));
    }
  }
  ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_7,(((RogueType__find_global__String( context_type_3, ROGUE_ARG(THIS->name) )))));
  if (!!(p_7))
  {
    if (!!(THIS->context))
    {
      call_ROGUEM59( 19, ROGUE_ARG(THIS->context) );
    }
    return (RogueClassCmd*)(((RogueCmdModifyAndAssignGlobal__resolve__Scope( ROGUE_ARG(((RogueCmdModifyAndAssignGlobal__init__Token_Property_TokenType_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdModifyAndAssignGlobal*,ROGUE_CREATE_OBJECT(CmdModifyAndAssignGlobal))), ROGUE_ARG(THIS->t), p_7, op_1, new_value_2 )))), scope_0 ))));
  }
  p_7 = ((RogueClassProperty*)((RogueType__find_property__String( context_type_3, ROGUE_ARG(THIS->name) ))));
  if (!!(p_7))
  {
    if (!(!!(THIS->context)))
    {
      THIS->context = ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdThisContext*,ROGUE_CREATE_OBJECT(CmdThisContext))), ROGUE_ARG(THIS->t), context_type_3 )))));
    }
    if (((RogueMethod__is_global( ROGUE_ARG(scope_0->this_method) ))))
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[886] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->name) )))) )))), Rogue_literal_strings[887] )))) )))) ))));
    }
    return (RogueClassCmd*)(((RogueCmdModifyAndAssignProperty__resolve__Scope( ROGUE_ARG(((RogueCmdModifyAndAssignProperty__init__Token_Cmd_Property_TokenType_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdModifyAndAssignProperty*,ROGUE_CREATE_OBJECT(CmdModifyAndAssignProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), p_7, op_1, new_value_2 )))), scope_0 ))));
  }
  ROGUE_DEF_LOCAL_REF(RogueClassDefinition*,def_8,(((RogueString_DefinitionTable__get__String( ROGUE_ARG(context_type_3->definition_lookup), ROGUE_ARG(THIS->name) )))));
  if ((!(!!(def_8)) && !!(scope_0->_implicit_type)))
  {
    def_8 = ((RogueClassDefinition*)((RogueString_DefinitionTable__get__String( ROGUE_ARG(scope_0->_implicit_type->definition_lookup), ROGUE_ARG(THIS->name) ))));
  }
  if (!!(def_8))
  {
    return (RogueClassCmd*)((call_ROGUEM65( 28, ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(def_8->expression), ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) ))), scope_0, op_1, new_value_2 )));
  }
  if (!!(setter_name_5))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,setter_9,(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_3, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(NULL))), setter_name_5, ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), new_value_2 )))) )))), true, false )))));
    if (!!(setter_9))
    {
      return (RogueClassCmd*)((call_ROGUEM52( 25, ROGUE_ARG(((RogueCmdAccess__expand_modify_and_assign__Scope_TokenType_Cmd( ROGUE_ARG(THIS), scope_0, op_1, new_value_2 )))), scope_0 )));
    }
  }
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[866] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->name) )))) )))), Rogue_literal_strings[961] )))) )))) ))));
}

RogueClassType* Rogue_CmdAccess__type( RogueClassCmdAccess* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassRogueError*,err_0,(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[347] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(((RogueCmdAccess__type_name( ROGUE_ARG(THIS) )))) )))) )))), Rogue_literal_strings[811] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->name) )))) )))), Rogue_literal_strings[812] )))) )))) )))));
  ROGUE_THROW(err_0);
}

void RogueCmdAccess__write_cpp__CPPWriter_Logical( RogueClassCmdAccess* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[347] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(((RogueCmdAccess__type_name( ROGUE_ARG(THIS) )))) )))) )))), Rogue_literal_strings[972] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->name) )))) )))), Rogue_literal_strings[405] )))) )))) ))));
}

void RogueCmdAccess__trace_used_code( RogueClassCmdAccess* THIS )
{
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[347] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(((RogueCmdAccess__type_name( ROGUE_ARG(THIS) )))) )))) )))), Rogue_literal_strings[1036] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->name) )))) )))), Rogue_literal_strings[1037] )))) )))) ))));
}

void RogueCmdAccess__update_this_type__Scope( RogueClassCmdAccess* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->context))
  {
    call_ROGUEM56( 32, ROGUE_ARG(THIS->context), scope_0 );
  }
  if (!!(THIS->args))
  {
    RogueCmdArgs__update_this_type__Scope( ROGUE_ARG(THIS->args), scope_0 );
  }
}

RogueClassCmdAccess* RogueCmdAccess__init_object( RogueClassCmdAccess* THIS )
{
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_String( RogueClassCmdAccess* THIS, RogueClassToken* _auto_508_0, RogueString* _auto_509_1 )
{
  THIS->name = _auto_509_1;
  THIS->t = _auto_508_0;
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_String_CmdArgs( RogueClassCmdAccess* THIS, RogueClassToken* _auto_510_0, RogueString* _auto_511_1, RogueClassCmdArgs* _auto_512_2 )
{
  THIS->args = _auto_512_2;
  THIS->name = _auto_511_1;
  THIS->t = _auto_510_0;
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_String_CmdArgs_CmdFlagArgList( RogueClassCmdAccess* THIS, RogueClassToken* _auto_513_0, RogueString* _auto_514_1, RogueClassCmdArgs* _auto_515_2, RogueCmdFlagArgList* _auto_516_3 )
{
  THIS->flag_args = _auto_516_3;
  THIS->args = _auto_515_2;
  THIS->name = _auto_514_1;
  THIS->t = _auto_513_0;
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_Cmd_String( RogueClassCmdAccess* THIS, RogueClassToken* _auto_517_0, RogueClassCmd* _auto_518_1, RogueString* _auto_519_2 )
{
  THIS->name = _auto_519_2;
  THIS->context = _auto_518_1;
  THIS->t = _auto_517_0;
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_Cmd_String_CmdArgs( RogueClassCmdAccess* THIS, RogueClassToken* _auto_520_0, RogueClassCmd* _auto_521_1, RogueString* _auto_522_2, RogueClassCmdArgs* _auto_523_3 )
{
  THIS->args = _auto_523_3;
  THIS->name = _auto_522_2;
  THIS->context = _auto_521_1;
  THIS->t = _auto_520_0;
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_Cmd_String_CmdArgs_CmdFlagArgList( RogueClassCmdAccess* THIS, RogueClassToken* _auto_524_0, RogueClassCmd* _auto_525_1, RogueString* _auto_526_2, RogueClassCmdArgs* _auto_527_3, RogueCmdFlagArgList* _auto_528_4 )
{
  THIS->flag_args = _auto_528_4;
  THIS->args = _auto_527_3;
  THIS->name = _auto_526_2;
  THIS->context = _auto_525_1;
  THIS->t = _auto_524_0;
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_Cmd_String_Cmd( RogueClassCmdAccess* THIS, RogueClassToken* _auto_529_0, RogueClassCmd* _auto_530_1, RogueString* _auto_531_2, RogueClassCmd* arg_3 )
{
  THIS->name = _auto_531_2;
  THIS->context = _auto_530_1;
  THIS->t = _auto_529_0;
  THIS->args = ((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )));
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS->args)), arg_3 );
  return (RogueClassCmdAccess*)(THIS);
}

void RogueCmdAccess__check_for_recursive_getter__Scope( RogueClassCmdAccess* THIS, RogueClassScope* scope_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassType*,this_type_1,(scope_0->_this_type));
  if (((RogueString__operatorLTGT__String( ROGUE_ARG(THIS->name), ROGUE_ARG(scope_0->this_method->name) ))) != 0)
  {
    return;
  }
  if ((!!(THIS->args) && THIS->args->count > 0))
  {
    return;
  }
  if (!((!!(((RogueType__find_property__String( this_type_1, ROGUE_ARG(THIS->name) )))) || !!(((RogueType__find_global__String( this_type_1, ROGUE_ARG(THIS->name) )))))))
  {
    return;
  }
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[883], ROGUE_ARG(THIS->name) )))), Rogue_literal_strings[884] )))), ROGUE_ARG(THIS->name) )))), Rogue_literal_strings[885] )))) ))));
}

RogueClassCmd* RogueCmdAccess__expand_modify_and_assign__Scope_TokenType_Cmd( RogueClassCmdAccess* THIS, RogueClassScope* scope_0, RogueClassTokenType* op_1, RogueClassCmd* new_value_2 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,cmd_3,0);
  {
    if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)op_1), ROGUE_ARG(((RogueObject*)(RogueTokenType_symbol_ampersand_equals))) ))))
    {
      cmd_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdBitwiseAnd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdBitwiseAnd*,ROGUE_CREATE_OBJECT(CmdBitwiseAnd)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(THIS))), new_value_2 ))))))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)op_1), ROGUE_ARG(((RogueObject*)(RogueTokenType_symbol_caret_equals))) ))))
    {
      cmd_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdPower*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdPower*,ROGUE_CREATE_OBJECT(CmdPower)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(THIS))), new_value_2 ))))))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)op_1), ROGUE_ARG(((RogueObject*)(RogueTokenType_symbol_dot_equals))) ))))
    {
      cmd_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(THIS))), ROGUE_ARG(THIS->name), new_value_2 ))))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)op_1), ROGUE_ARG(((RogueObject*)(RogueTokenType_symbol_minus_equals))) ))))
    {
      cmd_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdSubtract*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdSubtract*,ROGUE_CREATE_OBJECT(CmdSubtract)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(THIS))), new_value_2 ))))))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)op_1), ROGUE_ARG(((RogueObject*)(RogueTokenType_symbol_percent_equals))) ))))
    {
      cmd_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdMod*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdMod*,ROGUE_CREATE_OBJECT(CmdMod)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(THIS))), new_value_2 ))))))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)op_1), ROGUE_ARG(((RogueObject*)(RogueTokenType_symbol_plus_equals))) ))))
    {
      cmd_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdAdd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdAdd*,ROGUE_CREATE_OBJECT(CmdAdd)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(THIS))), new_value_2 ))))))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)op_1), ROGUE_ARG(((RogueObject*)(RogueTokenType_symbol_slash_equals))) ))))
    {
      cmd_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdDivide*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdDivide*,ROGUE_CREATE_OBJECT(CmdDivide)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(THIS))), new_value_2 ))))))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)op_1), ROGUE_ARG(((RogueObject*)(RogueTokenType_symbol_tilde_equals))) ))))
    {
      cmd_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdBitwiseXor*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdBitwiseXor*,ROGUE_CREATE_OBJECT(CmdBitwiseXor)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(THIS))), new_value_2 ))))))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)op_1), ROGUE_ARG(((RogueObject*)(RogueTokenType_symbol_times_equals))) ))))
    {
      cmd_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdMultiply*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdMultiply*,ROGUE_CREATE_OBJECT(CmdMultiply)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(THIS))), new_value_2 ))))))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)op_1), ROGUE_ARG(((RogueObject*)(RogueTokenType_symbol_vertical_bar_equals))) ))))
    {
      cmd_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdBitwiseOr*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdBitwiseOr*,ROGUE_CREATE_OBJECT(CmdBitwiseOr)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(THIS))), new_value_2 ))))))));
    }
    else
    {
      RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[967] )))) )))) );
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[968] ))));
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAssign*,ROGUE_CREATE_OBJECT(CmdAssign))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueCmdAccess__clone__CloneArgs( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) )))), cmd_3 ))))));
}

RogueString* RogueCmdArgs__type_name( RogueClassCmdArgs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1039]);
}

RogueClassCmdArgs* RogueCmdArgs__init_object( RogueClassCmdArgs* THIS )
{
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__init( RogueClassCmdArgs* THIS )
{
  RogueCmdList__init( ROGUE_ARG(((RogueCmdList*)THIS)) );
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__init__Int32( RogueClassCmdArgs* THIS, RogueInt32 initial_capacity_0 )
{
  RogueCmdList__init__Int32( ROGUE_ARG(((RogueCmdList*)THIS)), initial_capacity_0 );
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__init__Cmd( RogueClassCmdArgs* THIS, RogueClassCmd* arg_0 )
{
  RogueCmdArgs__init( ROGUE_ARG(THIS) );
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS)), arg_0 );
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__init__Cmd_Cmd( RogueClassCmdArgs* THIS, RogueClassCmd* arg1_0, RogueClassCmd* arg2_1 )
{
  RogueCmdArgs__init( ROGUE_ARG(THIS) );
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS)), arg1_0 )))), arg2_1 );
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__init__Cmd_Cmd_Cmd( RogueClassCmdArgs* THIS, RogueClassCmd* arg1_0, RogueClassCmd* arg2_1, RogueClassCmd* arg3_2 )
{
  RogueCmdArgs__init( ROGUE_ARG(THIS) );
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS)), arg1_0 )))), arg2_1 )))), arg3_2 );
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__clone__CloneArgs( RogueClassCmdArgs* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,result_1,(((RogueCmdArgs__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->count) )))));
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_1657_2,(THIS));
    RogueInt32 _auto_1658_3 = (0);
    for (;_auto_1658_3 < _auto_1657_2->count;++_auto_1658_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,cmd_4,(((RogueClassCmd*)(_auto_1657_2->data->objects[_auto_1658_3]))));
      RogueCmdList__add__Cmd( ((RogueCmdList*)result_1), ROGUE_ARG((call_ROGUEM71( 6, cmd_4, clone_args_0 ))) );
    }
  }
  return (RogueClassCmdArgs*)(result_1);
}

void RogueCmdArgs__resolve__Scope( RogueClassCmdArgs* THIS, RogueClassScope* scope_0 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_1659_2,(THIS));
    RogueInt32 i_3 = (0);
    for (;i_3 < _auto_1659_2->count;++i_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_1,((call_ROGUEM52( 25, ROGUE_ARG(((RogueClassCmd*)(THIS->data->objects[i_3]))), scope_0 ))));
      THIS->data->objects[i_3] = arg_1;
      RogueType__organize__Scope( ROGUE_ARG((call_ROGUEM60( 22, arg_1 ))), scope_0 );
    }
  }
}

void RogueCmdArgs__update_this_type__Scope( RogueClassCmdArgs* THIS, RogueClassScope* scope_0 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_1662_1,(THIS));
    RogueInt32 _auto_1663_2 = (0);
    for (;_auto_1663_2 < _auto_1662_1->count;++_auto_1663_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_3,(((RogueClassCmd*)(_auto_1662_1->data->objects[_auto_1663_2]))));
      call_ROGUEM56( 32, arg_3, scope_0 );
    }
  }
}

RogueString* RogueCmdFlagArgList__to_String( RogueCmdFlagArgList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdFlagArgList*,_auto_1664_2,(THIS));
    RogueInt32 _auto_1665_3 = (0);
    for (;_auto_1665_3 < _auto_1664_2->count;++_auto_1665_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdFlagArg*,value_4,(((RogueClassCmdFlagArg*)(_auto_1664_2->data->objects[_auto_1665_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdFlagArgList__type_name( RogueCmdFlagArgList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[725]);
}

RogueCmdFlagArgList* RogueCmdFlagArgList__init_object( RogueCmdFlagArgList* THIS )
{
  return (RogueCmdFlagArgList*)(THIS);
}

RogueCmdFlagArgList* RogueCmdFlagArgList__init( RogueCmdFlagArgList* THIS )
{
  RogueCmdFlagArgList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueCmdFlagArgList*)(THIS);
}

RogueCmdFlagArgList* RogueCmdFlagArgList__init__Int32( RogueCmdFlagArgList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassCmdFlagArg*), true );
  }
  return (RogueCmdFlagArgList*)(THIS);
}

RogueCmdFlagArgList* RogueCmdFlagArgList__add__CmdFlagArg( RogueCmdFlagArgList* THIS, RogueClassCmdFlagArg* value_0 )
{
  ((RogueCmdFlagArgList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdFlagArgList*)(THIS);
}

RogueInt32 RogueCmdFlagArgList__capacity( RogueCmdFlagArgList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueOptionalInt32 RogueCmdFlagArgList__locate__CmdFlagArg( RogueCmdFlagArgList* THIS, RogueClassCmdFlagArg* value_0 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdFlagArgList*,_auto_1686_1,(THIS));
    RogueInt32 i_2 = (0);
    for (;i_2 < _auto_1686_1->count;++i_2)
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)value_0), ROGUE_ARG(((RogueObject*)(((RogueClassCmdFlagArg*)(THIS->data->objects[i_2]))))) ))))
      {
        return (RogueOptionalInt32)(RogueOptionalInt32( i_2, true ));
      }
    }
  }
  return (RogueOptionalInt32)((RogueOptionalInt32__create()));
}

RogueCmdFlagArgList* RogueCmdFlagArgList__reserve__Int32( RogueCmdFlagArgList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassCmdFlagArg*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueCmdFlagArgList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassCmdFlagArg*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdFlagArgList*)(THIS);
}

RogueClassCmdFlagArg* RogueCmdFlagArgList__remove__CmdFlagArg( RogueCmdFlagArgList* THIS, RogueClassCmdFlagArg* value_0 )
{
  RogueOptionalInt32 index_1 = (((RogueCmdFlagArgList__locate__CmdFlagArg( ROGUE_ARG(THIS), value_0 ))));
  if (index_1.exists)
  {
    return (RogueClassCmdFlagArg*)(((RogueCmdFlagArgList__remove_at__Int32( ROGUE_ARG(THIS), ROGUE_ARG(index_1.value) ))));
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdFlagArg*,zero_value_2,0);
    return (RogueClassCmdFlagArg*)(zero_value_2);
  }
}

RogueClassCmdFlagArg* RogueCmdFlagArgList__remove_at__Int32( RogueCmdFlagArgList* THIS, RogueInt32 index_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdFlagArg*,result_1,(((RogueClassCmdFlagArg*)(THIS->data->objects[index_0]))));
  RogueArray_set(THIS->data,index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  ROGUE_DEF_LOCAL_REF(RogueClassCmdFlagArg*,zero_value_2,0);
  --THIS->count;
  THIS->data->objects[THIS->count] = zero_value_2;
  return (RogueClassCmdFlagArg*)(result_1);
}

RogueString* RogueCmdFlagArg__type_name( RogueClassCmdFlagArg* THIS )
{
  return (RogueString*)(Rogue_literal_strings[816]);
}

RogueClassCmdFlagArg* RogueCmdFlagArg__clone__CloneArgs( RogueClassCmdFlagArg* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdFlagArg*)(((RogueCmdFlagArg__init__Token_String_Cmd_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdFlagArg*,ROGUE_CREATE_OBJECT(CmdFlagArg))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->name), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->value), ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) )))), ROGUE_ARG(THIS->is_negative) ))));
}

RogueClassCmdFlagArg* RogueCmdFlagArg__init_object( RogueClassCmdFlagArg* THIS )
{
  return (RogueClassCmdFlagArg*)(THIS);
}

RogueClassCmdFlagArg* RogueCmdFlagArg__init__Token_String_Cmd_Logical( RogueClassCmdFlagArg* THIS, RogueClassToken* _auto_532_0, RogueString* _auto_533_1, RogueClassCmd* _auto_534_2, RogueLogical _auto_535_3 )
{
  THIS->is_negative = _auto_535_3;
  THIS->value = _auto_534_2;
  THIS->name = _auto_533_1;
  THIS->t = _auto_532_0;
  return (RogueClassCmdFlagArg*)(THIS);
}

RogueString* RogueCmdAssign__type_name( RogueClassCmdAssign* THIS )
{
  return (RogueString*)(Rogue_literal_strings[817]);
}

RogueClassCmd* RogueCmdAssign__clone__CloneArgs( RogueClassCmdAssign* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAssign*,ROGUE_CREATE_OBJECT(CmdAssign))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->target), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->new_value), clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdAssign__resolve__Scope( RogueClassCmdAssign* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)((call_ROGUEM63( 26, ROGUE_ARG(THIS->target), scope_0, ROGUE_ARG(THIS->new_value) )));
}

void RogueCmdAssign__update_this_type__Scope( RogueClassCmdAssign* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->target), scope_0 );
  call_ROGUEM56( 32, ROGUE_ARG(THIS->new_value), scope_0 );
}

RogueClassCmdAssign* RogueCmdAssign__init_object( RogueClassCmdAssign* THIS )
{
  return (RogueClassCmdAssign*)(THIS);
}

RogueClassCmdAssign* RogueCmdAssign__init__Token_Cmd_Cmd( RogueClassCmdAssign* THIS, RogueClassToken* _auto_540_0, RogueClassCmd* _auto_541_1, RogueClassCmd* _auto_542_2 )
{
  THIS->new_value = _auto_542_2;
  THIS->target = _auto_541_1;
  THIS->t = _auto_540_0;
  return (RogueClassCmdAssign*)(THIS);
}

RogueString* RogueCmdControlStructureList__to_String( RogueCmdControlStructureList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdControlStructureList*,_auto_1696_2,(THIS));
    RogueInt32 _auto_1697_3 = (0);
    for (;_auto_1697_3 < _auto_1696_2->count;++_auto_1697_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdControlStructure*,value_4,(((RogueClassCmdControlStructure*)(_auto_1696_2->data->objects[_auto_1697_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdControlStructureList__type_name( RogueCmdControlStructureList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[726]);
}

RogueCmdControlStructureList* RogueCmdControlStructureList__init_object( RogueCmdControlStructureList* THIS )
{
  return (RogueCmdControlStructureList*)(THIS);
}

RogueCmdControlStructureList* RogueCmdControlStructureList__init( RogueCmdControlStructureList* THIS )
{
  RogueCmdControlStructureList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueCmdControlStructureList*)(THIS);
}

RogueCmdControlStructureList* RogueCmdControlStructureList__init__Int32( RogueCmdControlStructureList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassCmdControlStructure*), true );
  }
  return (RogueCmdControlStructureList*)(THIS);
}

RogueCmdControlStructureList* RogueCmdControlStructureList__add__CmdControlStructure( RogueCmdControlStructureList* THIS, RogueClassCmdControlStructure* value_0 )
{
  ((RogueCmdControlStructureList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdControlStructureList*)(THIS);
}

RogueInt32 RogueCmdControlStructureList__capacity( RogueCmdControlStructureList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueCmdControlStructureList* RogueCmdControlStructureList__reserve__Int32( RogueCmdControlStructureList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassCmdControlStructure*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueCmdControlStructureList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassCmdControlStructure*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdControlStructureList*)(THIS);
}

RogueClassCmdControlStructure* RogueCmdControlStructureList__remove_at__Int32( RogueCmdControlStructureList* THIS, RogueInt32 index_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdControlStructure*,result_1,(((RogueClassCmdControlStructure*)(THIS->data->objects[index_0]))));
  RogueArray_set(THIS->data,index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  ROGUE_DEF_LOCAL_REF(RogueClassCmdControlStructure*,zero_value_2,0);
  --THIS->count;
  THIS->data->objects[THIS->count] = zero_value_2;
  return (RogueClassCmdControlStructure*)(result_1);
}

RogueClassCmdControlStructure* RogueCmdControlStructureList__remove_last( RogueCmdControlStructureList* THIS )
{
  return (RogueClassCmdControlStructure*)(((RogueCmdControlStructureList__remove_at__Int32( ROGUE_ARG(THIS), ROGUE_ARG((THIS->count - 1)) ))));
}

RogueString* RogueCmdControlStructure__type_name( RogueClassCmdControlStructure* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1044]);
}

RogueLogical RogueCmdControlStructure__requires_semicolon( RogueClassCmdControlStructure* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmdControlStructure* RogueCmdControlStructure__init_object( RogueClassCmdControlStructure* THIS )
{
  return (RogueClassCmdControlStructure*)(THIS);
}

RogueClassCmd* RogueCmdControlStructure__set_control_logic__CmdControlStructure( RogueClassCmdControlStructure* THIS, RogueClassCmdControlStructure* control_structure_0 )
{
  THIS->_control_type = control_structure_0->_control_type;
  THIS->contains_yield = control_structure_0->contains_yield;
  THIS->escape_label = control_structure_0->escape_label;
  THIS->upkeep_label = control_structure_0->upkeep_label;
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdLiteralThis__type_name( RogueClassCmdLiteralThis* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1065]);
}

RogueClassCmd* RogueCmdLiteralThis__clone__CloneArgs( RogueClassCmdLiteralThis* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassMacroArgs*,macro_args_1,(((RogueClassMacroArgs*)(RogueObject_as(clone_args_0,RogueTypeMacroArgs)))));
  if (!!(macro_args_1))
  {
    return (RogueClassCmd*)(((RogueMacroArgs__inline_this( macro_args_1 ))));
  }
  ROGUE_DEF_LOCAL_REF(RogueClassTaskArgs*,task_args_2,(((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs)))));
  if (!!(task_args_2))
  {
    return (RogueClassCmd*)(((RogueTaskArgs__cmd_read_context__Token( task_args_2, ROGUE_ARG(THIS->t) ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLiteralThis*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(((RogueClassCmdThisContext*)ROGUE_CREATE_REF(RogueClassCmdLiteralThis*,ROGUE_CREATE_OBJECT(CmdLiteralThis)))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->_this_type) ))))))));
  }
}

void RogueCmdLiteralThis__require_type_context( RogueClassCmdLiteralThis* THIS )
{
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[878] ))));
}

RogueClassCmd* RogueCmdLiteralThis__resolve__Scope( RogueClassCmdLiteralThis* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( ROGUE_ARG(THIS->_this_type), scope_0 );
  if (((RogueMethod__is_global( ROGUE_ARG(scope_0->this_method) ))))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[1066] ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmdLiteralThis* RogueCmdLiteralThis__init_object( RogueClassCmdLiteralThis* THIS )
{
  return (RogueClassCmdLiteralThis*)(THIS);
}

RogueString* RogueCmdThisContext__type_name( RogueClassCmdThisContext* THIS )
{
  return (RogueString*)(Rogue_literal_strings[818]);
}

RogueClassCmd* RogueCmdThisContext__clone__CloneArgs( RogueClassCmdThisContext* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassMacroArgs*,macro_args_1,(((RogueClassMacroArgs*)(RogueObject_as(clone_args_0,RogueTypeMacroArgs)))));
  if (!!(macro_args_1))
  {
    return (RogueClassCmd*)(((RogueMacroArgs__inline_this( macro_args_1 ))));
  }
  ROGUE_DEF_LOCAL_REF(RogueClassTaskArgs*,task_args_2,(((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs)))));
  if (!!(task_args_2))
  {
    return (RogueClassCmd*)(((RogueTaskArgs__cmd_read_context__Token( task_args_2, ROGUE_ARG(THIS->t) ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdThisContext*,ROGUE_CREATE_OBJECT(CmdThisContext))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->_this_type) ))))));
  }
}

RogueClassType* RogueCmdThisContext__implicit_type__Scope( RogueClassCmdThisContext* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassType*)(THIS->_this_type);
}

void RogueCmdThisContext__require_type_context( RogueClassCmdThisContext* THIS )
{
}

RogueClassCmd* RogueCmdThisContext__resolve__Scope( RogueClassCmdThisContext* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( ROGUE_ARG(THIS->_this_type), scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdThisContext__type( RogueClassCmdThisContext* THIS )
{
  return (RogueClassType*)(THIS->_this_type);
}

void RogueCmdThisContext__write_cpp__CPPWriter_Logical( RogueClassCmdThisContext* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[497] );
}

void RogueCmdThisContext__trace_used_code( RogueClassCmdThisContext* THIS )
{
}

void RogueCmdThisContext__update_this_type__Scope( RogueClassCmdThisContext* THIS, RogueClassScope* scope_0 )
{
  THIS->_this_type = scope_0->_this_type;
}

RogueClassCmdThisContext* RogueCmdThisContext__init_object( RogueClassCmdThisContext* THIS )
{
  return (RogueClassCmdThisContext*)(THIS);
}

RogueClassCmdThisContext* RogueCmdThisContext__init__Token_Type( RogueClassCmdThisContext* THIS, RogueClassToken* _auto_552_0, RogueClassType* _auto_553_1 )
{
  THIS->_this_type = _auto_553_1;
  THIS->t = _auto_552_0;
  return (RogueClassCmdThisContext*)(THIS);
}

RogueString* RogueCmdLabelArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[765]);
}

RogueString* RogueCmdGenericLoop__type_name( RogueClassCmdGenericLoop* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1057]);
}

RogueClassCmd* RogueCmdGenericLoop__clone__CloneArgs( RogueClassCmdGenericLoop* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassTaskArgs*,task_args_1,(((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs)))));
  if ((!!(task_args_1) && THIS->contains_yield))
  {
    if (!!(THIS->control_statements))
    {
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_1728_5,(THIS->control_statements));
        RogueInt32 _auto_1729_6 = (0);
        for (;_auto_1729_6 < _auto_1728_5->count;++_auto_1729_6)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassCmd*,statement_7,(((RogueClassCmd*)(_auto_1728_5->data->objects[_auto_1729_6]))));
          RogueTaskArgs__add__Cmd( task_args_1, ROGUE_ARG((call_ROGUEM71( 6, statement_7, ROGUE_ARG(((RogueClassCloneArgs*)(task_args_1))) ))) );
        }
      }
    }
    ROGUE_DEF_LOCAL_REF(RogueClassCmdTaskControlSection*,condition_section_2,(((RogueTaskArgs__jump_to_new_section__Token( task_args_1, ROGUE_ARG(THIS->t) )))));
    ROGUE_DEF_LOCAL_REF(RogueClassCmdTaskControlSection*,after_section_3,(((RogueTaskArgs__create_section( task_args_1 )))));
    THIS->task_escape_section = after_section_3;
    THIS->task_upkeep_section = ((RogueTaskArgs__create_section( task_args_1 )));
    if (!!(THIS->condition))
    {
      RogueTaskArgs__add_conditional_jump__Cmd_CmdTaskControlSection( task_args_1, ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalNot*,ROGUE_CREATE_OBJECT(CmdLogicalNot)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->condition), clone_args_0 )))) )))))))), after_section_3 );
    }
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_1730_8,(THIS->statements));
      RogueInt32 _auto_1731_9 = (0);
      for (;_auto_1731_9 < _auto_1730_8->count;++_auto_1731_9)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,statement_10,(((RogueClassCmd*)(_auto_1730_8->data->objects[_auto_1731_9]))));
        RogueTaskArgs__add__Cmd( task_args_1, ROGUE_ARG((call_ROGUEM71( 6, statement_10, ROGUE_ARG(((RogueClassCloneArgs*)(task_args_1))) ))) );
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->task_upkeep_section) );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, ROGUE_ARG(THIS->task_upkeep_section) );
    if (!!(THIS->upkeep))
    {
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_1732_11,(THIS->upkeep));
        RogueInt32 _auto_1733_12 = (0);
        for (;_auto_1733_12 < _auto_1732_11->count;++_auto_1733_12)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassCmd*,statement_13,(((RogueClassCmd*)(_auto_1732_11->data->objects[_auto_1733_12]))));
          RogueTaskArgs__add__Cmd( task_args_1, ROGUE_ARG((call_ROGUEM71( 6, statement_13, ROGUE_ARG(((RogueClassCloneArgs*)(task_args_1))) ))) );
        }
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, ROGUE_ARG(THIS->t), condition_section_2 );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, after_section_3 );
    if (after_section_3->ip < task_args_1->cmd_task_control->sections->count)
    {
      RogueTaskArgs__jump_to_new_section__Token( task_args_1, ROGUE_ARG(THIS->t) );
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdGenericLoop*,result_4,(((RogueCmdGenericLoop__init__Token_Int32_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdGenericLoop*,ROGUE_CREATE_OBJECT(CmdGenericLoop))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->_control_type), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->condition), clone_args_0 )))), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))) )))));
    call_ROGUEM211( 35, ((RogueClassCmdControlStructure*)result_4), ROGUE_ARG(((RogueClassCmdControlStructure*)(THIS))) );
    THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_4));
    result_4->statements = ((RogueCmdStatementList__clone__CloneArgs( ROGUE_ARG(THIS->statements), clone_args_0 )));
    result_4->upkeep = ((RogueCmd__clone__CmdStatementList_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->upkeep), clone_args_0 )));
    result_4->control_statements = ((RogueCmd__clone__CmdStatementList_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->control_statements), clone_args_0 )));
    return (RogueClassCmd*)(((RogueClassCmd*)(result_4)));
  }
}

RogueClassCmd* RogueCmdGenericLoop__resolve__Scope( RogueClassCmdGenericLoop* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( ROGUE_ARG(scope_0->control_stack), ROGUE_ARG(((RogueClassCmdControlStructure*)(THIS))) );
  if (!!(THIS->control_statements))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_1738_1,(THIS->control_statements));
      RogueInt32 i_2 = (0);
      for (;i_2 < _auto_1738_1->count;++i_2)
      {
        THIS->control_statements->data->objects[i_2] = (call_ROGUEM52( 25, ROGUE_ARG(((RogueClassCmd*)(THIS->control_statements->data->objects[i_2]))), scope_0 ));
      }
    }
  }
  if (!!(THIS->condition))
  {
    THIS->condition = ((RogueCmd__require_logical__Scope( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->condition), scope_0 ))), scope_0 )));
  }
  RogueCmdStatementList__resolve__Scope_Logical( ROGUE_ARG(THIS->statements), scope_0, false );
  if (!!(THIS->upkeep))
  {
    RogueCmdStatementList__resolve__Scope_Logical( ROGUE_ARG(THIS->upkeep), scope_0, false );
  }
  if (!!(THIS->control_statements))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_1739_3,(THIS->control_statements));
      RogueInt32 _auto_1740_4 = (0);
      for (;_auto_1740_4 < _auto_1739_3->count;++_auto_1740_4)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,statement_5,(((RogueClassCmd*)(_auto_1739_3->data->objects[_auto_1740_4]))));
        call_ROGUEM56( 12, statement_5, scope_0 );
      }
    }
  }
  RogueCmdControlStructureList__remove_last( ROGUE_ARG(scope_0->control_stack) );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdGenericLoop__write_cpp__CPPWriter_Logical( RogueClassCmdGenericLoop* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!!(THIS->control_statements))
  {
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[210] );
    writer_0->indent += 2;
    if (!!(THIS->control_statements))
    {
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_1741_3,(THIS->control_statements));
        RogueInt32 _auto_1742_4 = (0);
        for (;_auto_1742_4 < _auto_1741_3->count;++_auto_1742_4)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassCmd*,statement_5,(((RogueClassCmd*)(_auto_1741_3->data->objects[_auto_1742_4]))));
          call_ROGUEM72( 30, statement_5, writer_0, false );
          RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[219] );
        }
      }
    }
  }
  if ((!!(THIS->upkeep) || !(!!(THIS->condition))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[973] );
    if (!!(THIS->condition))
    {
      call_ROGUEM72( 30, ROGUE_ARG(THIS->condition), writer_0, false );
    }
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[219] );
    RogueLogical first_2 = (true);
    if (!!(THIS->upkeep))
    {
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_1743_6,(THIS->upkeep));
        RogueInt32 _auto_1744_7 = (0);
        for (;_auto_1744_7 < _auto_1743_6->count;++_auto_1744_7)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassCmd*,statement_8,(((RogueClassCmd*)(_auto_1743_6->data->objects[_auto_1744_7]))));
          if (first_2)
          {
            first_2 = ((RogueLogical)false);
          }
          else
          {
            RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[193] );
          }
          call_ROGUEM72( 30, statement_8, writer_0, false );
        }
      }
    }
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[28] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[974] );
    call_ROGUEM72( 30, ROGUE_ARG(THIS->condition), writer_0, false );
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[28] );
  }
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[210] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( ROGUE_ARG(THIS->statements), writer_0, false );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[128] );
  if (!!(THIS->control_statements))
  {
    writer_0->indent -= 2;
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[128] );
  }
  if (!!(THIS->escape_label))
  {
    RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, ROGUE_ARG(THIS->escape_label) )))), Rogue_literal_strings[975] );
  }
}

void RogueCmdGenericLoop__trace_used_code( RogueClassCmdGenericLoop* THIS )
{
  RogueCmdStatementList__trace_used_code( ROGUE_ARG(THIS->statements) );
  if (!!(THIS->control_statements))
  {
    RogueCmdStatementList__trace_used_code( ROGUE_ARG(THIS->control_statements) );
  }
  if (!!(THIS->condition))
  {
    call_ROGUEM59( 31, ROGUE_ARG(THIS->condition) );
  }
  if (!!(THIS->upkeep))
  {
    RogueCmdStatementList__trace_used_code( ROGUE_ARG(THIS->upkeep) );
  }
}

void RogueCmdGenericLoop__update_this_type__Scope( RogueClassCmdGenericLoop* THIS, RogueClassScope* scope_0 )
{
  RogueCmdStatementList__update_this_type__Scope( ROGUE_ARG(THIS->statements), scope_0 );
  if (!!(THIS->control_statements))
  {
    RogueCmdStatementList__update_this_type__Scope( ROGUE_ARG(THIS->control_statements), scope_0 );
  }
  if (!!(THIS->condition))
  {
    call_ROGUEM56( 32, ROGUE_ARG(THIS->condition), scope_0 );
  }
  if (!!(THIS->upkeep))
  {
    RogueCmdStatementList__update_this_type__Scope( ROGUE_ARG(THIS->upkeep), scope_0 );
  }
}

RogueClassCmdGenericLoop* RogueCmdGenericLoop__init_object( RogueClassCmdGenericLoop* THIS )
{
  return (RogueClassCmdGenericLoop*)(THIS);
}

RogueClassCmdGenericLoop* RogueCmdGenericLoop__init__Token_Int32_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( RogueClassCmdGenericLoop* THIS, RogueClassToken* _auto_556_0, RogueInt32 _auto_557_1, RogueClassCmd* _auto_558_2, RogueClassCmdStatementList* _auto_559_3, RogueClassCmdStatementList* _auto_560_4, RogueClassCmdStatementList* _auto_561_5 )
{
  THIS->control_statements = _auto_561_5;
  THIS->upkeep = _auto_560_4;
  THIS->statements = _auto_559_3;
  THIS->condition = _auto_558_2;
  THIS->_control_type = _auto_557_1;
  THIS->t = _auto_556_0;
  return (RogueClassCmdGenericLoop*)(THIS);
}

void RogueCmdGenericLoop__add_control_var__Local( RogueClassCmdGenericLoop* THIS, RogueClassLocal* v_0 )
{
  if (!(!!(THIS->control_statements)))
  {
    THIS->control_statements = ((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )));
  }
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS->control_statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLocalDeclaration*,ROGUE_CREATE_OBJECT(CmdLocalDeclaration))), ROGUE_ARG(v_0->t), v_0, false )))))) );
}

void RogueCmdGenericLoop__add_upkeep__Cmd( RogueClassCmdGenericLoop* THIS, RogueClassCmd* cmd_0 )
{
  if (!(!!(THIS->upkeep)))
  {
    THIS->upkeep = ((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )));
  }
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS->upkeep)), cmd_0 );
}

RogueString* RogueCmdLiteralInt32__type_name( RogueClassCmdLiteralInt32* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1067]);
}

RogueClassCmd* RogueCmdLiteralInt32__cast_to__Type_Scope( RogueClassCmdLiteralInt32* THIS, RogueClassType* target_type_0, RogueClassScope* scope_1 )
{
  if (((void*)target_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralReal64*,ROGUE_CREATE_OBJECT(CmdLiteralReal64))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueReal64)(THIS->value))) ))))));
  }
  else
  {
    return (RogueClassCmd*)((RogueCmd__cast_to__Type_Scope( ROGUE_ARG(((RogueClassCmd*)THIS)), target_type_0, scope_1 )));
  }
}

RogueClassCmd* RogueCmdLiteralInt32__clone__CloneArgs( RogueClassCmdLiteralInt32* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->value) ))))));
}

RogueClassCmd* RogueCmdLiteralInt32__resolve__Scope( RogueClassCmdLiteralInt32* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralInt32__type( RogueClassCmdLiteralInt32* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32);
}

void RogueCmdLiteralInt32__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralInt32* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__Int32( writer_0, ROGUE_ARG(THIS->value) );
}

RogueClassCmdLiteralInt32* RogueCmdLiteralInt32__init_object( RogueClassCmdLiteralInt32* THIS )
{
  return (RogueClassCmdLiteralInt32*)(THIS);
}

RogueClassCmdLiteralInt32* RogueCmdLiteralInt32__init__Token_Int32( RogueClassCmdLiteralInt32* THIS, RogueClassToken* _auto_567_0, RogueInt32 _auto_568_1 )
{
  THIS->value = _auto_568_1;
  THIS->t = _auto_567_0;
  return (RogueClassCmdLiteralInt32*)(THIS);
}

RogueString* RogueCmdLiteral__type_name( RogueClassCmdLiteral* THIS )
{
  return (RogueString*)(Rogue_literal_strings[819]);
}

RogueClassType* RogueCmdLiteral__implicit_type__Scope( RogueClassCmdLiteral* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassType*)((call_ROGUEM60( 29, ROGUE_ARG(((RogueClassCmd*)THIS)) )));
}

RogueLogical RogueCmdLiteral__is_literal( RogueClassCmdLiteral* THIS )
{
  return (RogueLogical)(true);
}

void RogueCmdLiteral__trace_used_code( RogueClassCmdLiteral* THIS )
{
}

void RogueCmdLiteral__update_this_type__Scope( RogueClassCmdLiteral* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdLiteral* RogueCmdLiteral__init_object( RogueClassCmdLiteral* THIS )
{
  return (RogueClassCmdLiteral*)(THIS);
}

RogueString* RogueCmdCompareNE__type_name( RogueClassCmdCompareNE* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1160]);
}

RogueClassCmd* RogueCmdCompareNE__clone__CloneArgs( RogueClassCmdCompareNE* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCompareNE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareNE*,ROGUE_CREATE_OBJECT(CmdCompareNE)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

RogueClassCmd* RogueCmdCompareNE__combine_literal_operands__Type( RogueClassCmdCompareNE* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value != ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value != ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareNE* RogueCmdCompareNE__init_object( RogueClassCmdCompareNE* THIS )
{
  return (RogueClassCmdCompareNE*)(THIS);
}

RogueString* RogueCmdCompareNE__symbol( RogueClassCmdCompareNE* THIS )
{
  return (RogueString*)(Rogue_literal_strings[209]);
}

RogueClassCmd* RogueCmdCompareNE__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareNE* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,cmd_4,(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1125], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), false, false )))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1126], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM249( 25, ROGUE_ARG(((RogueClassCmdBinary*)((RogueClassCmdCompareNE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareNE*,ROGUE_CREATE_OBJECT(CmdCompareNE)))), ROGUE_ARG(THIS->t), cmd_4, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), 0 )))))) ))))))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1127], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalNot*,ROGUE_CREATE_OBJECT(CmdLogicalNot)))), ROGUE_ARG(THIS->t), cmd_4 ))))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->right), Rogue_literal_strings[1125], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->left) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->right), Rogue_literal_strings[1127], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->left) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalNot*,ROGUE_CREATE_OBJECT(CmdLogicalNot)))), ROGUE_ARG(THIS->t), cmd_4 ))))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1125], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), true, false ))));
}

RogueString* RogueCmdComparison__type_name( RogueClassCmdComparison* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1092]);
}

RogueClassType* Rogue_CmdComparison__type( RogueClassCmdComparison* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

RogueClassCmdComparison* RogueCmdComparison__init_object( RogueClassCmdComparison* THIS )
{
  return (RogueClassCmdComparison*)(THIS);
}

RogueLogical RogueCmdComparison__requires_parens( RogueClassCmdComparison* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdComparison__resolve_for_types__Scope_Type_Type( RogueClassCmdComparison* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  THIS->resolved = true;
  if ((((RogueType__is_compound( left_type_1 ))) || ((RogueType__is_compound( right_type_2 )))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,result_3,((call_ROGUEM263( 42, ROGUE_ARG(THIS), scope_0, left_type_1, right_type_2, false ))));
    if (!!(result_3))
    {
      return (RogueClassCmd*)(result_3);
    }
    if (((void*)left_type_1) == ((void*)right_type_2))
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
    }
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[1101] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(left_type_1))) )))) )))), Rogue_literal_strings[379] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(right_type_2))) )))) )))), Rogue_literal_strings[64] )))) )))) ))));
  }
  else if ((((RogueType__is_reference( left_type_1 ))) || ((RogueType__is_reference( right_type_2 )))))
  {
    return (RogueClassCmd*)((call_ROGUEM263( 42, ROGUE_ARG(THIS), scope_0, left_type_1, right_type_2, true )));
  }
  ROGUE_DEF_LOCAL_REF(RogueClassType*,common_type_4,(((RogueCmd__must_find_common_type__Type_Type( ROGUE_ARG(((RogueClassCmd*)THIS)), left_type_1, right_type_2 )))));
  THIS->left = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG(THIS->left), common_type_4, scope_0 ))), scope_0 ));
  THIS->right = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG(THIS->right), common_type_4, scope_0 ))), scope_0 ));
  if (((call_ROGUEM57( 18, ROGUE_ARG(THIS->left) )) && (call_ROGUEM57( 18, ROGUE_ARG(THIS->right) ))))
  {
    return (RogueClassCmd*)((call_ROGUEM55( 10, ROGUE_ARG(((RogueClassCmd*)THIS)), common_type_4 )));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdComparison__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdComparison* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[1100] ))));
}

RogueString* RogueCmdBinary__type_name( RogueClassCmdBinary* THIS )
{
  return (RogueString*)(Rogue_literal_strings[820]);
}

RogueClassCmd* RogueCmdBinary__resolve__Scope( RogueClassCmdBinary* THIS, RogueClassScope* scope_0 )
{
  THIS->left = (call_ROGUEM52( 25, ROGUE_ARG(THIS->left), scope_0 ));
  THIS->right = (call_ROGUEM52( 25, ROGUE_ARG(THIS->right), scope_0 ));
  ROGUE_DEF_LOCAL_REF(RogueClassType*,left_type_1,((call_ROGUEM60( 22, ROGUE_ARG(THIS->left) ))));
  ROGUE_DEF_LOCAL_REF(RogueClassType*,right_type_2,((call_ROGUEM60( 22, ROGUE_ARG(THIS->right) ))));
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,result_3,((call_ROGUEM259( 37, ROGUE_ARG(THIS), scope_0, left_type_1, right_type_2 ))));
  return (RogueClassCmd*)(result_3);
}

RogueClassType* Rogue_CmdBinary__type( RogueClassCmdBinary* THIS )
{
  return (RogueClassType*)(((RogueCmd__find_operation_result_type__Type_Type( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG((call_ROGUEM60( 22, ROGUE_ARG(THIS->left) ))), ROGUE_ARG((call_ROGUEM60( 22, ROGUE_ARG(THIS->right) ))) ))));
}

void RogueCmdBinary__write_cpp__CPPWriter_Logical( RogueClassCmdBinary* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if ((call_ROGUEM266( 36, ROGUE_ARG(THIS) )))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[80] );
  }
  call_ROGUEM72( 30, ROGUE_ARG(THIS->left), writer_0, false );
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[489] )))), ROGUE_ARG((call_ROGUEM255( 41, ROGUE_ARG(THIS) ))) )))), Rogue_literal_strings[489] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->right), writer_0, false );
  if ((call_ROGUEM266( 36, ROGUE_ARG(THIS) )))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
  }
}

void RogueCmdBinary__trace_used_code( RogueClassCmdBinary* THIS )
{
  call_ROGUEM59( 31, ROGUE_ARG(THIS->left) );
  call_ROGUEM59( 31, ROGUE_ARG(THIS->right) );
}

void RogueCmdBinary__update_this_type__Scope( RogueClassCmdBinary* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->left), scope_0 );
  call_ROGUEM56( 32, ROGUE_ARG(THIS->right), scope_0 );
}

RogueClassCmdBinary* RogueCmdBinary__init_object( RogueClassCmdBinary* THIS )
{
  return (RogueClassCmdBinary*)(THIS);
}

RogueClassCmdBinary* RogueCmdBinary__init__Token_Cmd_Cmd( RogueClassCmdBinary* THIS, RogueClassToken* _auto_569_0, RogueClassCmd* _auto_570_1, RogueClassCmd* _auto_571_2 )
{
  THIS->right = _auto_571_2;
  THIS->left = _auto_570_1;
  THIS->t = _auto_569_0;
  return (RogueClassCmdBinary*)(THIS);
}

RogueString* RogueCmdBinary__fn_name( RogueClassCmdBinary* THIS )
{
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[347] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM255( 2, ROGUE_ARG(THIS) ))) )))) )))), Rogue_literal_strings[892] )))) )))) ))));
}

RogueLogical RogueCmdBinary__requires_parens( RogueClassCmdBinary* THIS )
{
  return (RogueLogical)(true);
}

RogueClassCmd* RogueCmdBinary__resolve_for_types__Scope_Type_Type( RogueClassCmdBinary* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,operator_method_call_3,((call_ROGUEM259( 39, ROGUE_ARG(THIS), scope_0, left_type_1, right_type_2 ))));
  if (!!(operator_method_call_3))
  {
    return (RogueClassCmd*)(operator_method_call_3);
  }
  ROGUE_DEF_LOCAL_REF(RogueClassType*,common_type_4,(((RogueCmd__must_find_common_type__Type_Type( ROGUE_ARG(((RogueClassCmd*)THIS)), left_type_1, right_type_2 )))));
  THIS->left = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG(THIS->left), common_type_4, scope_0 ))), scope_0 ));
  THIS->right = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG(THIS->right), common_type_4, scope_0 ))), scope_0 ));
  if (((call_ROGUEM57( 18, ROGUE_ARG(THIS->left) )) && (call_ROGUEM57( 18, ROGUE_ARG(THIS->right) ))))
  {
    return (RogueClassCmd*)((call_ROGUEM55( 10, ROGUE_ARG(((RogueClassCmd*)THIS)), common_type_4 )));
  }
  return (RogueClassCmd*)((call_ROGUEM258( 38, ROGUE_ARG(THIS), scope_0, common_type_4 )));
}

RogueClassCmd* RogueCmdBinary__resolve_for_common_type__Scope_Type( RogueClassCmdBinary* THIS, RogueClassScope* scope_0, RogueClassType* common_type_1 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdBinary__resolve_operator_method__Scope_Type_Type( RogueClassCmdBinary* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  if (((RogueType__has_method_named__String( left_type_1, ROGUE_ARG((call_ROGUEM255( 35, ROGUE_ARG(THIS) ))) ))))
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), ROGUE_ARG((call_ROGUEM255( 35, ROGUE_ARG(THIS) ))), ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), scope_0 ))));
  }
  else if (((RogueType__has_routine_named__String( left_type_1, ROGUE_ARG((call_ROGUEM255( 35, ROGUE_ARG(THIS) ))) ))))
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(left_type_1->name) )))))), ROGUE_ARG((call_ROGUEM255( 35, ROGUE_ARG(THIS) ))), ROGUE_ARG(((RogueCmdArgs__init__Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->left), ROGUE_ARG(THIS->right) )))) )))), scope_0 ))));
  }
  else if (((RogueType__has_routine_named__String( right_type_2, ROGUE_ARG((call_ROGUEM255( 35, ROGUE_ARG(THIS) ))) ))))
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(right_type_2->name) )))))), ROGUE_ARG((call_ROGUEM255( 35, ROGUE_ARG(THIS) ))), ROGUE_ARG(((RogueCmdArgs__init__Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->left), ROGUE_ARG(THIS->right) )))) )))), scope_0 ))));
  }
  else if (!((((RogueType__is_primitive( left_type_1 ))) && ((RogueType__is_primitive( right_type_2 ))))))
  {
    if (((void*)left_type_1) == ((void*)right_type_2))
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[893] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(left_type_1))) )))) )))), Rogue_literal_strings[64] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM255( 35, ROGUE_ARG(THIS) ))) )))) )))), Rogue_literal_strings[894] )))) )))) ))));
    }
    else
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[895] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(left_type_1))) )))) )))), Rogue_literal_strings[64] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM255( 35, ROGUE_ARG(THIS) ))) )))) )))), Rogue_literal_strings[896] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(right_type_2))) )))) )))), Rogue_literal_strings[64] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM255( 35, ROGUE_ARG(THIS) ))) )))) )))), Rogue_literal_strings[897] )))) )))) ))));
    }
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
}

RogueString* RogueCmdBinary__symbol( RogueClassCmdBinary* THIS )
{
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[347] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM255( 2, ROGUE_ARG(THIS) ))) )))) )))), Rogue_literal_strings[976] )))) )))) ))));
}

RogueString* RogueCmdBinary__cpp_symbol( RogueClassCmdBinary* THIS )
{
  return (RogueString*)((call_ROGUEM255( 40, ROGUE_ARG(THIS) )));
}

RogueString* RogueTaskArgs__type_name( RogueClassTaskArgs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1055]);
}

RogueClassTaskArgs* RogueTaskArgs__init_object( RogueClassTaskArgs* THIS )
{
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassTaskArgs* RogueTaskArgs__init__Type_Method_Type_Method( RogueClassTaskArgs* THIS, RogueClassType* _auto_578_0, RogueClassMethod* _auto_579_1, RogueClassType* _auto_580_2, RogueClassMethod* _auto_581_3 )
{
  THIS->original_method = _auto_581_3;
  THIS->_original_type = _auto_580_2;
  THIS->task_method = _auto_579_1;
  THIS->_task_type = _auto_578_0;
  THIS->cmd_task_control = ((RogueCmdTaskControl__init__Token( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdTaskControl*,ROGUE_CREATE_OBJECT(CmdTaskControl))), ROGUE_ARG(THIS->task_method->t) )));
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassTaskArgs* RogueTaskArgs__add__Cmd( RogueClassTaskArgs* THIS, RogueClassCmd* cmd_0 )
{
  if (!!(cmd_0))
  {
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS->cmd_task_control->current_section->statements)), cmd_0 );
  }
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassTaskArgs* RogueTaskArgs__add_jump__Token_CmdTaskControlSection( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassCmdTaskControlSection* to_section_1 )
{
  RogueTaskArgs__set_next_ip__Token_CmdTaskControlSection( ROGUE_ARG(THIS), t_0, to_section_1 );
  RogueTaskArgs__add__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReturn*,ROGUE_CREATE_OBJECT(CmdReturn))), t_0, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), t_0, true )))))) )))))) );
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassTaskArgs* RogueTaskArgs__add_conditional_jump__Cmd_CmdTaskControlSection( RogueClassTaskArgs* THIS, RogueClassCmd* condition_0, RogueClassCmdTaskControlSection* to_section_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_2,(condition_0->t));
  ROGUE_DEF_LOCAL_REF(RogueClassCmdIf*,cmd_if_3,(((RogueCmdIf__init__Token_Cmd_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdIf*,ROGUE_CREATE_OBJECT(CmdIf))), t_2, condition_0, 2 )))));
  RogueInt32 ip_4 = (to_section_1->ip);
  if ((THIS->cmd_task_control->current_section->ip + 1) != ip_4)
  {
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)cmd_if_3->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteProperty*,ROGUE_CREATE_OBJECT(CmdWriteProperty))), t_2, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdThisContext*,ROGUE_CREATE_OBJECT(CmdThisContext))), t_2, ROGUE_ARG(THIS->_task_type) )))))), ROGUE_ARG(THIS->ip_property), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), t_2, ROGUE_ARG((ip_4 - 1)) )))))) )))))) );
  }
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)cmd_if_3->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReturn*,ROGUE_CREATE_OBJECT(CmdReturn))), t_2, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), t_2, true )))))) )))))) );
  RogueTaskArgs__add__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(cmd_if_3))) );
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassCmd* RogueTaskArgs__create_return__Token_Cmd( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassCmd* value_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdBlock*,result_2,(((RogueCmdBlock__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdBlock*,ROGUE_CREATE_OBJECT(CmdBlock))), t_0, 0 )))));
  if (!!(value_1))
  {
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)result_2->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAssign*,ROGUE_CREATE_OBJECT(CmdAssign))), t_0, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), t_0, Rogue_literal_strings[430] )))))), value_1 )))))) );
  }
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)result_2->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteProperty*,ROGUE_CREATE_OBJECT(CmdWriteProperty))), t_0, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdThisContext*,ROGUE_CREATE_OBJECT(CmdThisContext))), t_0, ROGUE_ARG(THIS->_task_type) )))))), ROGUE_ARG(THIS->ip_property), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), t_0, -1 )))))) )))))) );
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)result_2->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReturn*,ROGUE_CREATE_OBJECT(CmdReturn))), t_0, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), t_0, false )))))) )))))) );
  return (RogueClassCmd*)(((RogueClassCmd*)(result_2)));
}

RogueClassCmd* RogueTaskArgs__create_escape__Token_CmdTaskControlSection( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassCmdTaskControlSection* escape_section_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdBlock*,result_2,(((RogueCmdBlock__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdBlock*,ROGUE_CREATE_OBJECT(CmdBlock))), t_0, 0 )))));
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)result_2->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteProperty*,ROGUE_CREATE_OBJECT(CmdWriteProperty))), t_0, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdThisContext*,ROGUE_CREATE_OBJECT(CmdThisContext))), t_0, ROGUE_ARG(THIS->_task_type) )))))), ROGUE_ARG(THIS->ip_property), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), t_0, ROGUE_ARG((escape_section_1->ip - 1)) )))))) )))))) );
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)result_2->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReturn*,ROGUE_CREATE_OBJECT(CmdReturn))), t_0, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), t_0, false )))))) )))))) );
  return (RogueClassCmd*)(((RogueClassCmd*)(result_2)));
}

RogueClassTaskArgs* RogueTaskArgs__add_yield__Token( RogueClassTaskArgs* THIS, RogueClassToken* t_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdTaskControlSection*,next_section_1,(((RogueTaskArgs__create_section( ROGUE_ARG(THIS) )))));
  RogueTaskArgs__set_next_ip__Token_CmdTaskControlSection( ROGUE_ARG(THIS), t_0, next_section_1 );
  RogueTaskArgs__add__Cmd( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReturn*,ROGUE_CREATE_OBJECT(CmdReturn))), t_0, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), t_0, false )))))) )))))) );
  RogueTaskArgs__begin_section__CmdTaskControlSection( ROGUE_ARG(THIS), next_section_1 );
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassCmdTaskControlSection* RogueTaskArgs__jump_to_new_section__Token( RogueClassTaskArgs* THIS, RogueClassToken* t_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdTaskControlSection*,new_section_1,(((RogueTaskArgs__create_section( ROGUE_ARG(THIS) )))));
  RogueTaskArgs__add_jump__Token_CmdTaskControlSection( ROGUE_ARG(THIS), t_0, new_section_1 );
  RogueTaskArgs__begin_section__CmdTaskControlSection( ROGUE_ARG(THIS), new_section_1 );
  return (RogueClassCmdTaskControlSection*)(new_section_1);
}

RogueClassTaskArgs* RogueTaskArgs__begin_section__CmdTaskControlSection( RogueClassTaskArgs* THIS, RogueClassCmdTaskControlSection* section_0 )
{
  THIS->cmd_task_control->current_section = section_0;
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassCmdTaskControlSection* RogueTaskArgs__create_section( RogueClassTaskArgs* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdTaskControlSection*,section_0,(((RogueCmdTaskControlSection__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdTaskControlSection*,ROGUE_CREATE_OBJECT(CmdTaskControlSection))), ROGUE_ARG((THIS->cmd_task_control->sections->count + 1)) )))));
  RogueCmdTaskControlSectionList__add__CmdTaskControlSection( ROGUE_ARG(THIS->cmd_task_control->sections), section_0 );
  return (RogueClassCmdTaskControlSection*)(section_0);
}

RogueClassCmd* RogueTaskArgs__cmd_read_this__Token( RogueClassTaskArgs* THIS, RogueClassToken* t_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdThisContext*,ROGUE_CREATE_OBJECT(CmdThisContext))), t_0, ROGUE_ARG(THIS->_task_type) ))))));
}

RogueClassCmd* RogueTaskArgs__cmd_read_context__Token( RogueClassTaskArgs* THIS, RogueClassToken* t_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadProperty*,ROGUE_CREATE_OBJECT(CmdReadProperty))), t_0, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdThisContext*,ROGUE_CREATE_OBJECT(CmdThisContext))), t_0, ROGUE_ARG(THIS->_task_type) )))))), ROGUE_ARG(THIS->context_property) ))))));
}

RogueString* RogueTaskArgs__convert_local_name__Local( RogueClassTaskArgs* THIS, RogueClassLocal* local_info_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(local_info_0->name) )))) )))), Rogue_literal_strings[425] )))), ROGUE_ARG(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], ROGUE_ARG(local_info_0->index) )))) )))) ))));
}

RogueClassCmd* RogueTaskArgs__cmd_read__Token_Local( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassLocal* local_info_1 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), t_0, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdThisContext*,ROGUE_CREATE_OBJECT(CmdThisContext))), t_0, ROGUE_ARG(THIS->_task_type) )))))), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(local_info_1->name) )))) )))), Rogue_literal_strings[425] )))), ROGUE_ARG(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], ROGUE_ARG(local_info_1->index) )))) )))) )))) ))))));
}

RogueClassCmd* RogueTaskArgs__cmd_write__Token_Local_Cmd( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassLocal* local_info_1, RogueClassCmd* new_value_2 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAssign*,ROGUE_CREATE_OBJECT(CmdAssign))), t_0, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), t_0, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdThisContext*,ROGUE_CREATE_OBJECT(CmdThisContext))), t_0, ROGUE_ARG(THIS->_task_type) )))))), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(local_info_1->name) )))) )))), Rogue_literal_strings[425] )))), ROGUE_ARG(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], ROGUE_ARG(local_info_1->index) )))) )))) )))) )))))), new_value_2 ))))));
}

RogueClassCmd* RogueTaskArgs__replace_write_local__Token_Local_Cmd( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassLocal* local_info_1, RogueClassCmd* new_value_2 )
{
  if (((void*)new_value_2) == ((void*)NULL))
  {
    new_value_2 = ((RogueClassCmd*)((RogueType__create_default_value__Token( ROGUE_ARG(local_info_1->_type), t_0 ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAssign*,ROGUE_CREATE_OBJECT(CmdAssign))), t_0, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), t_0, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdThisContext*,ROGUE_CREATE_OBJECT(CmdThisContext))), t_0, ROGUE_ARG(THIS->_task_type) )))))), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(local_info_1->name) )))) )))), Rogue_literal_strings[425] )))), ROGUE_ARG(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], ROGUE_ARG(local_info_1->index) )))) )))) )))) )))))), new_value_2 ))))));
}

RogueClassTaskArgs* RogueTaskArgs__set_next_ip__Token_CmdTaskControlSection( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassCmdTaskControlSection* to_section_1 )
{
  RogueInt32 ip_2 = (to_section_1->ip);
  if ((THIS->cmd_task_control->current_section->ip + 1) != ip_2)
  {
    RogueCmdTaskControl__add__Cmd( ROGUE_ARG(THIS->cmd_task_control), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteProperty*,ROGUE_CREATE_OBJECT(CmdWriteProperty))), t_0, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdThisContext*,ROGUE_CREATE_OBJECT(CmdThisContext))), t_0, ROGUE_ARG(THIS->_task_type) )))))), ROGUE_ARG(THIS->ip_property), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), t_0, ROGUE_ARG((ip_2 - 1)) )))))) )))))) );
  }
  return (RogueClassTaskArgs*)(THIS);
}

RogueString* RogueCmdArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[766]);
}

RogueString* RogueCmdTaskControl__type_name( RogueClassCmdTaskControl* THIS )
{
  return (RogueString*)(Rogue_literal_strings[821]);
}

RogueLogical RogueCmdTaskControl__requires_semicolon( RogueClassCmdTaskControl* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdTaskControl__resolve__Scope( RogueClassCmdTaskControl* THIS, RogueClassScope* scope_0 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdTaskControlSectionList*,_auto_1750_1,(THIS->sections));
    RogueInt32 _auto_1751_2 = (0);
    for (;_auto_1751_2 < _auto_1750_1->count;++_auto_1751_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdTaskControlSection*,section_3,(((RogueClassCmdTaskControlSection*)(_auto_1750_1->data->objects[_auto_1751_2]))));
      RogueCmdStatementList__resolve__Scope_Logical( ROGUE_ARG(section_3->statements), scope_0, false );
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdTaskControl__write_cpp__CPPWriter_Logical( RogueClassCmdTaskControl* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[977] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[210] );
  writer_0->indent += 2;
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdTaskControlSectionList*,_auto_1752_2,(THIS->sections));
    RogueInt32 _auto_1753_3 = (0);
    for (;_auto_1753_3 < _auto_1752_2->count;++_auto_1753_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdTaskControlSection*,section_4,(((RogueClassCmdTaskControlSection*)(_auto_1752_2->data->objects[_auto_1753_3]))));
      RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__Int32( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[597] )))), ROGUE_ARG(section_4->ip) )))), Rogue_literal_strings[192] );
      RogueCmdStatementList__write_cpp__CPPWriter_Logical( ROGUE_ARG(section_4->statements), writer_0, false );
    }
  }
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[601] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[978] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[979] );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[128] );
}

void RogueCmdTaskControl__trace_used_code( RogueClassCmdTaskControl* THIS )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdTaskControlSectionList*,_auto_1754_0,(THIS->sections));
    RogueInt32 _auto_1755_1 = (0);
    for (;_auto_1755_1 < _auto_1754_0->count;++_auto_1755_1)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdTaskControlSection*,section_2,(((RogueClassCmdTaskControlSection*)(_auto_1754_0->data->objects[_auto_1755_1]))));
      RogueCmdStatementList__trace_used_code( ROGUE_ARG(section_2->statements) );
    }
  }
}

void RogueCmdTaskControl__update_this_type__Scope( RogueClassCmdTaskControl* THIS, RogueClassScope* scope_0 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdTaskControlSectionList*,_auto_1756_1,(THIS->sections));
    RogueInt32 _auto_1757_2 = (0);
    for (;_auto_1757_2 < _auto_1756_1->count;++_auto_1757_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdTaskControlSection*,section_3,(((RogueClassCmdTaskControlSection*)(_auto_1756_1->data->objects[_auto_1757_2]))));
      RogueCmdStatementList__update_this_type__Scope( ROGUE_ARG(section_3->statements), scope_0 );
    }
  }
}

RogueClassCmdTaskControl* RogueCmdTaskControl__init_object( RogueClassCmdTaskControl* THIS )
{
  THIS->sections = ((RogueCmdTaskControlSectionList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueCmdTaskControlSectionList*,ROGUE_CREATE_OBJECT(CmdTaskControlSectionList))) )));
  return (RogueClassCmdTaskControl*)(THIS);
}

RogueClassCmdTaskControl* RogueCmdTaskControl__init__Token( RogueClassCmdTaskControl* THIS, RogueClassToken* _auto_584_0 )
{
  THIS->t = _auto_584_0;
  THIS->current_section = ((RogueCmdTaskControlSection__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdTaskControlSection*,ROGUE_CREATE_OBJECT(CmdTaskControlSection))), 1 )));
  RogueCmdTaskControlSectionList__add__CmdTaskControlSection( ROGUE_ARG(THIS->sections), ROGUE_ARG(THIS->current_section) );
  return (RogueClassCmdTaskControl*)(THIS);
}

RogueClassCmdTaskControl* RogueCmdTaskControl__add__Cmd( RogueClassCmdTaskControl* THIS, RogueClassCmd* cmd_0 )
{
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS->current_section->statements)), cmd_0 );
  return (RogueClassCmdTaskControl*)(THIS);
}

RogueString* RogueCmdTaskControlSection__type_name( RogueClassCmdTaskControlSection* THIS )
{
  return (RogueString*)(Rogue_literal_strings[676]);
}

RogueClassCmdTaskControlSection* RogueCmdTaskControlSection__init__Int32( RogueClassCmdTaskControlSection* THIS, RogueInt32 _auto_585_0 )
{
  THIS->ip = _auto_585_0;
  return (RogueClassCmdTaskControlSection*)(THIS);
}

RogueClassCmdTaskControlSection* RogueCmdTaskControlSection__init_object( RogueClassCmdTaskControlSection* THIS )
{
  THIS->statements = ((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )));
  return (RogueClassCmdTaskControlSection*)(THIS);
}

RogueString* RogueString_MethodListTableEntryList__to_String( RogueTableEntry_of_String_MethodListList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_String_MethodListList*,_auto_1764_2,(THIS));
    RogueInt32 _auto_1765_3 = (0);
    for (;_auto_1765_3 < _auto_1764_2->count;++_auto_1765_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassString_MethodListTableEntry*,value_4,(((RogueClassString_MethodListTableEntry*)(_auto_1764_2->data->objects[_auto_1765_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_MethodListTableEntryList__type_name( RogueTableEntry_of_String_MethodListList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[727]);
}

RogueTableEntry_of_String_MethodListList* RogueString_MethodListTableEntryList__init_object( RogueTableEntry_of_String_MethodListList* THIS )
{
  return (RogueTableEntry_of_String_MethodListList*)(THIS);
}

RogueTableEntry_of_String_MethodListList* RogueString_MethodListTableEntryList__init__Int32_String_MethodListTableEntry( RogueTableEntry_of_String_MethodListList* THIS, RogueInt32 initial_capacity_0, RogueClassString_MethodListTableEntry* initial_value_1 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_MethodListTableEntry*), true );
    {
      RogueInt32 i_2 = (1);
      RogueInt32 _auto_628_3 = (initial_capacity_0);
      for (;i_2 <= _auto_628_3;++i_2)
      {
        RogueString_MethodListTableEntryList__add__String_MethodListTableEntry( ROGUE_ARG(THIS), initial_value_1 );
      }
    }
  }
  return (RogueTableEntry_of_String_MethodListList*)(THIS);
}

RogueTableEntry_of_String_MethodListList* RogueString_MethodListTableEntryList__add__String_MethodListTableEntry( RogueTableEntry_of_String_MethodListList* THIS, RogueClassString_MethodListTableEntry* value_0 )
{
  ((RogueString_MethodListTableEntryList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_MethodListList*)(THIS);
}

RogueInt32 RogueString_MethodListTableEntryList__capacity( RogueTableEntry_of_String_MethodListList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_MethodListList* RogueString_MethodListTableEntryList__reserve__Int32( RogueTableEntry_of_String_MethodListList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassString_MethodListTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueString_MethodListTableEntryList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassString_MethodListTableEntry*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_MethodListList*)(THIS);
}

RogueString* RogueString_MethodListTableEntry__type_name( RogueClassString_MethodListTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[677]);
}

RogueClassString_MethodListTableEntry* RogueString_MethodListTableEntry__init__String_MethodList_Int32( RogueClassString_MethodListTableEntry* THIS, RogueString* _key_0, RogueMethodList* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_MethodListTableEntry*)(THIS);
}

RogueClassString_MethodListTableEntry* RogueString_MethodListTableEntry__init_object( RogueClassString_MethodListTableEntry* THIS )
{
  return (RogueClassString_MethodListTableEntry*)(THIS);
}

RogueString* RogueString_MethodListTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[767]);
}

RogueString* RogueDefinitionList__to_String( RogueDefinitionList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueDefinitionList*,_auto_1802_2,(THIS));
    RogueInt32 _auto_1803_3 = (0);
    for (;_auto_1803_3 < _auto_1802_2->count;++_auto_1803_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassDefinition*,value_4,(((RogueClassDefinition*)(_auto_1802_2->data->objects[_auto_1803_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueDefinitionList__type_name( RogueDefinitionList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[728]);
}

RogueDefinitionList* RogueDefinitionList__init_object( RogueDefinitionList* THIS )
{
  return (RogueDefinitionList*)(THIS);
}

RogueDefinitionList* RogueDefinitionList__init( RogueDefinitionList* THIS )
{
  RogueDefinitionList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueDefinitionList*)(THIS);
}

RogueDefinitionList* RogueDefinitionList__init__Int32( RogueDefinitionList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassDefinition*), true );
  }
  return (RogueDefinitionList*)(THIS);
}

RogueDefinitionList* RogueDefinitionList__add__Definition( RogueDefinitionList* THIS, RogueClassDefinition* value_0 )
{
  ((RogueDefinitionList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueDefinitionList*)(THIS);
}

RogueInt32 RogueDefinitionList__capacity( RogueDefinitionList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueDefinitionList* RogueDefinitionList__reserve__Int32( RogueDefinitionList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassDefinition*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueDefinitionList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassDefinition*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueDefinitionList*)(THIS);
}

RogueString* RogueDefinition__type_name( RogueClassDefinition* THIS )
{
  return (RogueString*)(Rogue_literal_strings[678]);
}

RogueClassDefinition* RogueDefinition__init__Token_String_Cmd_Logical( RogueClassDefinition* THIS, RogueClassToken* _auto_667_0, RogueString* _auto_668_1, RogueClassCmd* _auto_669_2, RogueLogical _auto_670_3 )
{
  THIS->is_enumeration = _auto_670_3;
  THIS->expression = _auto_669_2;
  THIS->name = _auto_668_1;
  THIS->t = _auto_667_0;
  return (RogueClassDefinition*)(THIS);
}

RogueClassDefinition* RogueDefinition__init_object( RogueClassDefinition* THIS )
{
  return (RogueClassDefinition*)(THIS);
}

RogueString* RogueString_DefinitionTable__to_String( RogueClassString_DefinitionTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueString_DefinitionTable__print_to__StringBuilder( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))) )))) ))));
}

RogueString* RogueString_DefinitionTable__type_name( RogueClassString_DefinitionTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[679]);
}

RogueClassString_DefinitionTable* RogueString_DefinitionTable__init( RogueClassString_DefinitionTable* THIS )
{
  RogueString_DefinitionTable__init__Int32( ROGUE_ARG(THIS), 16 );
  return (RogueClassString_DefinitionTable*)(THIS);
}

RogueClassString_DefinitionTable* RogueString_DefinitionTable__init__Int32( RogueClassString_DefinitionTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_DefinitionTableEntryList__init__Int32_String_DefinitionTableEntry( ROGUE_ARG(ROGUE_CREATE_REF(RogueTableEntry_of_String_DefinitionList*,ROGUE_CREATE_OBJECT(TableEntry_of_String_DefinitionList))), bin_count_0, ROGUE_ARG(((RogueClassString_DefinitionTableEntry*)(NULL))) )));
  THIS->keys = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  return (RogueClassString_DefinitionTable*)(THIS);
}

RogueLogical RogueString_DefinitionTable__contains__String( RogueClassString_DefinitionTable* THIS, RogueString* key_0 )
{
  return (RogueLogical)(!!(((RogueString_DefinitionTable__find__String( ROGUE_ARG(THIS), key_0 )))));
}

RogueClassString_DefinitionTableEntry* RogueString_DefinitionTable__find__String( RogueClassString_DefinitionTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  ROGUE_DEF_LOCAL_REF(RogueClassString_DefinitionTableEntry*,entry_2,(((RogueClassString_DefinitionTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)]))));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_2->key), key_0 )))))
    {
      return (RogueClassString_DefinitionTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_DefinitionTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_DefinitionTableEntry*)(((RogueClassString_DefinitionTableEntry*)(NULL)));
}

RogueClassDefinition* RogueString_DefinitionTable__get__String( RogueClassString_DefinitionTable* THIS, RogueString* key_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassString_DefinitionTableEntry*,entry_1,(((RogueString_DefinitionTable__find__String( ROGUE_ARG(THIS), key_0 )))));
  if (!!(entry_1))
  {
    return (RogueClassDefinition*)(entry_1->value);
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassDefinition*,default_value_2,0);
    return (RogueClassDefinition*)(default_value_2);
  }
}

RogueClassString_DefinitionTable* RogueString_DefinitionTable__set__String_Definition( RogueClassString_DefinitionTable* THIS, RogueString* key_0, RogueClassDefinition* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  ROGUE_DEF_LOCAL_REF(RogueClassString_DefinitionTableEntry*,entry_4,(((RogueClassString_DefinitionTableEntry*)(THIS->bins->data->objects[index_3]))));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_4->key), key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_DefinitionTable*)(THIS);
    }
    entry_4 = ((RogueClassString_DefinitionTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_DefinitionTableEntry*)((RogueString_DefinitionTableEntry__init__String_Definition_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_DefinitionTableEntry*,ROGUE_CREATE_OBJECT(String_DefinitionTableEntry))), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_DefinitionTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( ROGUE_ARG(THIS->keys), key_0 );
  return (RogueClassString_DefinitionTable*)(THIS);
}

RogueStringBuilder* RogueString_DefinitionTable__print_to__StringBuilder( RogueClassString_DefinitionTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    ROGUE_DEF_LOCAL_REF(RogueString*,key_2,(((RogueString*)(THIS->keys->data->objects[i_1]))));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ROGUE_ARG(((RogueObject*)(((RogueString_DefinitionTable__get__String( ROGUE_ARG(THIS), key_2 )))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_DefinitionTable* RogueString_DefinitionTable__init_object( RogueClassString_DefinitionTable* THIS )
{
  return (RogueClassString_DefinitionTable*)(THIS);
}

RogueString* RogueNativePropertyList__to_String( RogueNativePropertyList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueNativePropertyList*,_auto_1841_2,(THIS));
    RogueInt32 _auto_1842_3 = (0);
    for (;_auto_1842_3 < _auto_1841_2->count;++_auto_1842_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassNativeProperty*,value_4,(((RogueClassNativeProperty*)(_auto_1841_2->data->objects[_auto_1842_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueNativePropertyList__type_name( RogueNativePropertyList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[729]);
}

RogueNativePropertyList* RogueNativePropertyList__init_object( RogueNativePropertyList* THIS )
{
  return (RogueNativePropertyList*)(THIS);
}

RogueNativePropertyList* RogueNativePropertyList__init( RogueNativePropertyList* THIS )
{
  RogueNativePropertyList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueNativePropertyList*)(THIS);
}

RogueNativePropertyList* RogueNativePropertyList__init__Int32( RogueNativePropertyList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassNativeProperty*), true );
  }
  return (RogueNativePropertyList*)(THIS);
}

RogueNativePropertyList* RogueNativePropertyList__add__NativeProperty( RogueNativePropertyList* THIS, RogueClassNativeProperty* value_0 )
{
  ((RogueNativePropertyList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueNativePropertyList*)(THIS);
}

RogueInt32 RogueNativePropertyList__capacity( RogueNativePropertyList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueNativePropertyList* RogueNativePropertyList__reserve__Int32( RogueNativePropertyList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassNativeProperty*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueNativePropertyList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassNativeProperty*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueNativePropertyList*)(THIS);
}

RogueString* RogueNativeProperty__type_name( RogueClassNativeProperty* THIS )
{
  return (RogueString*)(Rogue_literal_strings[680]);
}

RogueClassNativeProperty* RogueNativeProperty__init__Token_String( RogueClassNativeProperty* THIS, RogueClassToken* _auto_675_0, RogueString* _auto_676_1 )
{
  THIS->code = _auto_676_1;
  THIS->t = _auto_675_0;
  return (RogueClassNativeProperty*)(THIS);
}

RogueClassNativeProperty* RogueNativeProperty__init_object( RogueClassNativeProperty* THIS )
{
  return (RogueClassNativeProperty*)(THIS);
}

RogueString* RogueString_PropertyTable__to_String( RogueClassString_PropertyTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueString_PropertyTable__print_to__StringBuilder( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))) )))) ))));
}

RogueString* RogueString_PropertyTable__type_name( RogueClassString_PropertyTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[681]);
}

RogueClassString_PropertyTable* RogueString_PropertyTable__init( RogueClassString_PropertyTable* THIS )
{
  RogueString_PropertyTable__init__Int32( ROGUE_ARG(THIS), 16 );
  return (RogueClassString_PropertyTable*)(THIS);
}

RogueClassString_PropertyTable* RogueString_PropertyTable__init__Int32( RogueClassString_PropertyTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_PropertyTableEntryList__init__Int32_String_PropertyTableEntry( ROGUE_ARG(ROGUE_CREATE_REF(RogueTableEntry_of_String_PropertyList*,ROGUE_CREATE_OBJECT(TableEntry_of_String_PropertyList))), bin_count_0, ROGUE_ARG(((RogueClassString_PropertyTableEntry*)(NULL))) )));
  THIS->keys = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  return (RogueClassString_PropertyTable*)(THIS);
}

void RogueString_PropertyTable__clear( RogueClassString_PropertyTable* THIS )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_String_PropertyList*,_auto_1879_0,(THIS->bins));
    RogueInt32 i_1 = (0);
    for (;i_1 < _auto_1879_0->count;++i_1)
    {
      THIS->bins->data->objects[i_1] = ((RogueClassString_PropertyTableEntry*)(NULL));
    }
  }
  RogueStringList__clear( ROGUE_ARG(THIS->keys) );
}

RogueClassString_PropertyTableEntry* RogueString_PropertyTable__find__String( RogueClassString_PropertyTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  ROGUE_DEF_LOCAL_REF(RogueClassString_PropertyTableEntry*,entry_2,(((RogueClassString_PropertyTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)]))));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_2->key), key_0 )))))
    {
      return (RogueClassString_PropertyTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_PropertyTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_PropertyTableEntry*)(((RogueClassString_PropertyTableEntry*)(NULL)));
}

RogueClassProperty* RogueString_PropertyTable__get__String( RogueClassString_PropertyTable* THIS, RogueString* key_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassString_PropertyTableEntry*,entry_1,(((RogueString_PropertyTable__find__String( ROGUE_ARG(THIS), key_0 )))));
  if (!!(entry_1))
  {
    return (RogueClassProperty*)(entry_1->value);
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassProperty*,default_value_2,0);
    return (RogueClassProperty*)(default_value_2);
  }
}

RogueClassString_PropertyTable* RogueString_PropertyTable__set__String_Property( RogueClassString_PropertyTable* THIS, RogueString* key_0, RogueClassProperty* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  ROGUE_DEF_LOCAL_REF(RogueClassString_PropertyTableEntry*,entry_4,(((RogueClassString_PropertyTableEntry*)(THIS->bins->data->objects[index_3]))));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_4->key), key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_PropertyTable*)(THIS);
    }
    entry_4 = ((RogueClassString_PropertyTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_PropertyTableEntry*)((RogueString_PropertyTableEntry__init__String_Property_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_PropertyTableEntry*,ROGUE_CREATE_OBJECT(String_PropertyTableEntry))), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_PropertyTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( ROGUE_ARG(THIS->keys), key_0 );
  return (RogueClassString_PropertyTable*)(THIS);
}

RogueStringBuilder* RogueString_PropertyTable__print_to__StringBuilder( RogueClassString_PropertyTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    ROGUE_DEF_LOCAL_REF(RogueString*,key_2,(((RogueString*)(THIS->keys->data->objects[i_1]))));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ROGUE_ARG(((RogueObject*)(((RogueString_PropertyTable__get__String( ROGUE_ARG(THIS), key_2 )))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_PropertyTable* RogueString_PropertyTable__init_object( RogueClassString_PropertyTable* THIS )
{
  return (RogueClassString_PropertyTable*)(THIS);
}

RogueString* RogueCmdLiteralNull__type_name( RogueClassCmdLiteralNull* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1068]);
}

RogueClassCmd* RogueCmdLiteralNull__cast_to__Type_Scope( RogueClassCmdLiteralNull* THIS, RogueClassType* target_type_0, RogueClassScope* scope_1 )
{
  if (target_type_0->is_optional)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(target_type_0->_element_type->name) )))) )))), Rogue_literal_strings[218] )))) )))), ROGUE_ARG(((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )))) ))))));
  }
  else
  {
    return (RogueClassCmd*)((RogueCmd__cast_to__Type_Scope( ROGUE_ARG(((RogueClassCmd*)THIS)), target_type_0, scope_1 )));
  }
}

RogueClassCmd* RogueCmdLiteralNull__clone__CloneArgs( RogueClassCmdLiteralNull* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralNull__init__Token( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralNull*,ROGUE_CREATE_OBJECT(CmdLiteralNull))), ROGUE_ARG(THIS->t) ))))));
}

RogueClassCmdLiteralNull* RogueCmdLiteralNull__resolve__Scope( RogueClassCmdLiteralNull* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmdLiteralNull*)(THIS);
}

RogueClassType* Rogue_CmdLiteralNull__type( RogueClassCmdLiteralNull* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_null);
}

void RogueCmdLiteralNull__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralNull* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[980] );
}

RogueClassCmdLiteralNull* RogueCmdLiteralNull__init_object( RogueClassCmdLiteralNull* THIS )
{
  return (RogueClassCmdLiteralNull*)(THIS);
}

RogueClassCmdLiteralNull* RogueCmdLiteralNull__init__Token( RogueClassCmdLiteralNull* THIS, RogueClassToken* _auto_683_0 )
{
  THIS->t = _auto_683_0;
  return (RogueClassCmdLiteralNull*)(THIS);
}

RogueString* RogueCmdCreateCompound__type_name( RogueClassCmdCreateCompound* THIS )
{
  return (RogueString*)(Rogue_literal_strings[822]);
}

RogueClassCmd* RogueCmdCreateCompound__clone__CloneArgs( RogueClassCmdCreateCompound* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateCompound__init__Token_Type_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCreateCompound*,ROGUE_CREATE_OBJECT(CmdCreateCompound))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->_of_type), ROGUE_ARG(((RogueCmdArgs__clone__CloneArgs( ROGUE_ARG(THIS->args), clone_args_0 )))) ))))));
}

RogueClassCmd* RogueCmdCreateCompound__resolve__Scope( RogueClassCmdCreateCompound* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( ROGUE_ARG(THIS->_of_type), scope_0 );
  if (((void*)THIS->args) == ((void*)NULL))
  {
    THIS->args = ((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )));
  }
  while (THIS->args->count < THIS->_of_type->property_list->count)
  {
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS->args)), ROGUE_ARG(((RogueType__create_default_value__Token( ROGUE_ARG(((RogueClassProperty*)(THIS->_of_type->property_list->data->objects[THIS->args->count]))->_type), ROGUE_ARG(THIS->t) )))) );
  }
  RogueCmdArgs__resolve__Scope( ROGUE_ARG(THIS->args), scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdCreateCompound__type( RogueClassCmdCreateCompound* THIS )
{
  return (RogueClassType*)(THIS->_of_type);
}

void RogueCmdCreateCompound__write_cpp__CPPWriter_Logical( RogueClassCmdCreateCompound* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( writer_0, ROGUE_ARG(THIS->_of_type) )))), Rogue_literal_strings[80] );
  if (!!(THIS->args->count))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[489] );
    RogueLogical first_2 = (true);
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_1880_3,(THIS->args));
      RogueInt32 _auto_1881_4 = (0);
      for (;_auto_1881_4 < _auto_1880_3->count;++_auto_1881_4)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_5,(((RogueClassCmd*)(_auto_1880_3->data->objects[_auto_1881_4]))));
        if (first_2)
        {
          first_2 = ((RogueLogical)false);
        }
        else
        {
          RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[502] );
        }
        call_ROGUEM72( 30, arg_5, writer_0, false );
      }
    }
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[489] );
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
}

void RogueCmdCreateCompound__trace_used_code( RogueClassCmdCreateCompound* THIS )
{
  RogueType__trace_used_code( ROGUE_ARG(THIS->_of_type) );
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_1882_0,(THIS->args));
    RogueInt32 _auto_1883_1 = (0);
    for (;_auto_1883_1 < _auto_1882_0->count;++_auto_1883_1)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_2,(((RogueClassCmd*)(_auto_1882_0->data->objects[_auto_1883_1]))));
      call_ROGUEM59( 31, arg_2 );
    }
  }
}

void RogueCmdCreateCompound__update_this_type__Scope( RogueClassCmdCreateCompound* THIS, RogueClassScope* scope_0 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_1884_1,(THIS->args));
    RogueInt32 _auto_1885_2 = (0);
    for (;_auto_1885_2 < _auto_1884_1->count;++_auto_1885_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_3,(((RogueClassCmd*)(_auto_1884_1->data->objects[_auto_1885_2]))));
      call_ROGUEM56( 32, arg_3, scope_0 );
    }
  }
}

RogueClassCmdCreateCompound* RogueCmdCreateCompound__init_object( RogueClassCmdCreateCompound* THIS )
{
  return (RogueClassCmdCreateCompound*)(THIS);
}

RogueClassCmdCreateCompound* RogueCmdCreateCompound__init__Token_Type_CmdArgs( RogueClassCmdCreateCompound* THIS, RogueClassToken* _auto_684_0, RogueClassType* _auto_685_1, RogueClassCmdArgs* _auto_686_2 )
{
  THIS->args = _auto_686_2;
  THIS->_of_type = _auto_685_1;
  THIS->t = _auto_684_0;
  return (RogueClassCmdCreateCompound*)(THIS);
}

RogueString* RogueCmdLiteralLogical__type_name( RogueClassCmdLiteralLogical* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1069]);
}

RogueClassCmd* RogueCmdLiteralLogical__clone__CloneArgs( RogueClassCmdLiteralLogical* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->value) ))))));
}

RogueClassCmd* RogueCmdLiteralLogical__resolve__Scope( RogueClassCmdLiteralLogical* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralLogical__type( RogueClassCmdLiteralLogical* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

void RogueCmdLiteralLogical__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralLogical* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (THIS->value)
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[183] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[172] );
  }
}

RogueClassCmdLiteralLogical* RogueCmdLiteralLogical__init_object( RogueClassCmdLiteralLogical* THIS )
{
  return (RogueClassCmdLiteralLogical*)(THIS);
}

RogueClassCmdLiteralLogical* RogueCmdLiteralLogical__init__Token_Logical( RogueClassCmdLiteralLogical* THIS, RogueClassToken* _auto_687_0, RogueLogical _auto_688_1 )
{
  THIS->value = _auto_688_1;
  THIS->t = _auto_687_0;
  return (RogueClassCmdLiteralLogical*)(THIS);
}

RogueString* RogueCmdLiteralString__type_name( RogueClassCmdLiteralString* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1070]);
}

RogueClassCmd* RogueCmdLiteralString__clone__CloneArgs( RogueClassCmdLiteralString* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralString*,ROGUE_CREATE_OBJECT(CmdLiteralString))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->value), ROGUE_ARG(THIS->index) ))))));
}

RogueClassCmd* RogueCmdLiteralString__resolve__Scope( RogueClassCmdLiteralString* THIS, RogueClassScope* scope_0 )
{
  RogueType__resolve( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String) );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralString__type( RogueClassCmdLiteralString* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String);
}

void RogueCmdLiteralString__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralString* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!!(THIS->value))
  {
    RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Int32( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[609] )))), ROGUE_ARG(THIS->index) )))), Rogue_literal_strings[39] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[473] );
  }
}

void RogueCmdLiteralString__trace_used_code( RogueClassCmdLiteralString* THIS )
{
  THIS->index = ((RogueProgram__add_literal_string__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(THIS->value) )));
}

void RogueCmdLiteralString__update_this_type__Scope( RogueClassCmdLiteralString* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdLiteralString* RogueCmdLiteralString__init_object( RogueClassCmdLiteralString* THIS )
{
  return (RogueClassCmdLiteralString*)(THIS);
}

RogueClassCmdLiteralString* RogueCmdLiteralString__init__Token_String_Int32( RogueClassCmdLiteralString* THIS, RogueClassToken* _auto_699_0, RogueString* _auto_700_1, RogueInt32 _auto_701_2 )
{
  THIS->index = _auto_701_2;
  THIS->value = _auto_700_1;
  THIS->t = _auto_699_0;
  return (RogueClassCmdLiteralString*)(THIS);
}

RogueString* RogueCmdWriteGlobal__type_name( RogueClassCmdWriteGlobal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[823]);
}

RogueClassCmd* RogueCmdWriteGlobal__clone__CloneArgs( RogueClassCmdWriteGlobal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdWriteGlobal__init__Token_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteGlobal*,ROGUE_CREATE_OBJECT(CmdWriteGlobal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->global_info), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->new_value), clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdWriteGlobal__resolve__Scope( RogueClassCmdWriteGlobal* THIS, RogueClassScope* scope_0 )
{
  THIS->new_value = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->new_value), scope_0 ))), ROGUE_ARG(THIS->global_info->_type), scope_0 ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdWriteGlobal__write_cpp__CPPWriter_Logical( RogueClassCmdWriteGlobal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[41] )))), ROGUE_ARG(THIS->global_info->type_context->cpp_name) )))), Rogue_literal_strings[425] );
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, ROGUE_ARG(THIS->global_info->cpp_name) )))), Rogue_literal_strings[537] );
  if (((void*)THIS->global_info->_type) == ((void*)(call_ROGUEM60( 29, ROGUE_ARG(THIS->new_value) ))))
  {
    call_ROGUEM72( 30, ROGUE_ARG(THIS->new_value), writer_0, false );
  }
  else
  {
    RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[533] )))), ROGUE_ARG(THIS->global_info->_type) )))), Rogue_literal_strings[28] );
    call_ROGUEM72( 30, ROGUE_ARG(THIS->new_value), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
  }
}

void RogueCmdWriteGlobal__trace_used_code( RogueClassCmdWriteGlobal* THIS )
{
  RogueType__trace_used_code( ROGUE_ARG(THIS->global_info->type_context) );
  RogueType__trace_used_code( ROGUE_ARG(THIS->global_info->_type) );
  call_ROGUEM59( 31, ROGUE_ARG(THIS->new_value) );
}

void RogueCmdWriteGlobal__update_this_type__Scope( RogueClassCmdWriteGlobal* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->new_value), scope_0 );
}

RogueClassCmdWriteGlobal* RogueCmdWriteGlobal__init_object( RogueClassCmdWriteGlobal* THIS )
{
  return (RogueClassCmdWriteGlobal*)(THIS);
}

RogueClassCmdWriteGlobal* RogueCmdWriteGlobal__init__Token_Property_Cmd( RogueClassCmdWriteGlobal* THIS, RogueClassToken* _auto_710_0, RogueClassProperty* _auto_711_1, RogueClassCmd* _auto_712_2 )
{
  THIS->new_value = _auto_712_2;
  THIS->global_info = _auto_711_1;
  THIS->t = _auto_710_0;
  return (RogueClassCmdWriteGlobal*)(THIS);
}

RogueString* RogueCmdWriteProperty__type_name( RogueClassCmdWriteProperty* THIS )
{
  return (RogueString*)(Rogue_literal_strings[824]);
}

RogueClassCmd* RogueCmdWriteProperty__clone__CloneArgs( RogueClassCmdWriteProperty* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteProperty*,ROGUE_CREATE_OBJECT(CmdWriteProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->context), clone_args_0 ))), ROGUE_ARG(THIS->property_info), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->new_value), clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdWriteProperty__resolve__Scope( RogueClassCmdWriteProperty* THIS, RogueClassScope* scope_0 )
{
  THIS->context = ((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->context), scope_0 ))) )));
  if (((RogueType__is_aspect( ROGUE_ARG((call_ROGUEM60( 29, ROGUE_ARG(THIS->context) ))) ))))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[900], ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[901] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->property_info->name) )))) )))), Rogue_literal_strings[902] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->property_info->name) )))) )))), Rogue_literal_strings[903] )))) )))) )))) ))));
  }
  THIS->new_value = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG(((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->new_value), scope_0 ))) )))), ROGUE_ARG(THIS->property_info->_type), scope_0 ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdWriteProperty__write_cpp__CPPWriter_Logical( RogueClassCmdWriteProperty* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  call_ROGUEM72( 30, ROGUE_ARG(THIS->context), writer_0, false );
  RogueCPPWriter__print_access_operator__Type( writer_0, ROGUE_ARG((call_ROGUEM60( 29, ROGUE_ARG(THIS->context) ))) );
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, ROGUE_ARG(THIS->property_info->cpp_name) )))), Rogue_literal_strings[537] );
  if (((void*)THIS->property_info->_type) == ((void*)(call_ROGUEM60( 29, ROGUE_ARG(THIS->new_value) ))))
  {
    call_ROGUEM72( 30, ROGUE_ARG(THIS->new_value), writer_0, false );
  }
  else
  {
    RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[533] )))), ROGUE_ARG(THIS->property_info->_type) )))), Rogue_literal_strings[28] );
    call_ROGUEM72( 30, ROGUE_ARG(THIS->new_value), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
  }
}

void RogueCmdWriteProperty__trace_used_code( RogueClassCmdWriteProperty* THIS )
{
  if (!!(THIS->context))
  {
    call_ROGUEM59( 31, ROGUE_ARG(THIS->context) );
  }
  RogueType__trace_used_code( ROGUE_ARG(THIS->property_info->type_context) );
  RogueType__trace_used_code( ROGUE_ARG(THIS->property_info->_type) );
  call_ROGUEM59( 31, ROGUE_ARG(THIS->new_value) );
}

void RogueCmdWriteProperty__update_this_type__Scope( RogueClassCmdWriteProperty* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->context))
  {
    call_ROGUEM56( 32, ROGUE_ARG(THIS->context), scope_0 );
  }
  call_ROGUEM56( 32, ROGUE_ARG(THIS->new_value), scope_0 );
}

RogueClassCmdWriteProperty* RogueCmdWriteProperty__init_object( RogueClassCmdWriteProperty* THIS )
{
  return (RogueClassCmdWriteProperty*)(THIS);
}

RogueClassCmdWriteProperty* RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( RogueClassCmdWriteProperty* THIS, RogueClassToken* _auto_713_0, RogueClassCmd* _auto_714_1, RogueClassProperty* _auto_715_2, RogueClassCmd* _auto_716_3 )
{
  THIS->new_value = _auto_716_3;
  THIS->property_info = _auto_715_2;
  THIS->context = _auto_714_1;
  THIS->t = _auto_713_0;
  return (RogueClassCmdWriteProperty*)(THIS);
}

RogueString* RogueDefinitionArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[768]);
}

RogueString* RogueNativePropertyArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[769]);
}

RogueString* RogueString_TypeTableEntryList__to_String( RogueTableEntry_of_String_TypeList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_String_TypeList*,_auto_1886_2,(THIS));
    RogueInt32 _auto_1887_3 = (0);
    for (;_auto_1887_3 < _auto_1886_2->count;++_auto_1887_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassString_TypeTableEntry*,value_4,(((RogueClassString_TypeTableEntry*)(_auto_1886_2->data->objects[_auto_1887_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_TypeTableEntryList__type_name( RogueTableEntry_of_String_TypeList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[730]);
}

RogueTableEntry_of_String_TypeList* RogueString_TypeTableEntryList__init_object( RogueTableEntry_of_String_TypeList* THIS )
{
  return (RogueTableEntry_of_String_TypeList*)(THIS);
}

RogueTableEntry_of_String_TypeList* RogueString_TypeTableEntryList__init__Int32_String_TypeTableEntry( RogueTableEntry_of_String_TypeList* THIS, RogueInt32 initial_capacity_0, RogueClassString_TypeTableEntry* initial_value_1 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_TypeTableEntry*), true );
    {
      RogueInt32 i_2 = (1);
      RogueInt32 _auto_801_3 = (initial_capacity_0);
      for (;i_2 <= _auto_801_3;++i_2)
      {
        RogueString_TypeTableEntryList__add__String_TypeTableEntry( ROGUE_ARG(THIS), initial_value_1 );
      }
    }
  }
  return (RogueTableEntry_of_String_TypeList*)(THIS);
}

RogueTableEntry_of_String_TypeList* RogueString_TypeTableEntryList__add__String_TypeTableEntry( RogueTableEntry_of_String_TypeList* THIS, RogueClassString_TypeTableEntry* value_0 )
{
  ((RogueString_TypeTableEntryList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_TypeList*)(THIS);
}

RogueInt32 RogueString_TypeTableEntryList__capacity( RogueTableEntry_of_String_TypeList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_TypeList* RogueString_TypeTableEntryList__reserve__Int32( RogueTableEntry_of_String_TypeList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassString_TypeTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueString_TypeTableEntryList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassString_TypeTableEntry*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_TypeList*)(THIS);
}

RogueString* RogueString_TypeTableEntry__type_name( RogueClassString_TypeTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[682]);
}

RogueClassString_TypeTableEntry* RogueString_TypeTableEntry__init__String_Type_Int32( RogueClassString_TypeTableEntry* THIS, RogueString* _key_0, RogueClassType* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_TypeTableEntry*)(THIS);
}

RogueClassString_TypeTableEntry* RogueString_TypeTableEntry__init_object( RogueClassString_TypeTableEntry* THIS )
{
  return (RogueClassString_TypeTableEntry*)(THIS);
}

RogueString* RogueString_TypeTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[770]);
}

RogueString* RogueString_Int32TableEntryList__to_String( RogueTableEntry_of_String_Int32List* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_String_Int32List*,_auto_1918_2,(THIS));
    RogueInt32 _auto_1919_3 = (0);
    for (;_auto_1919_3 < _auto_1918_2->count;++_auto_1919_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassString_Int32TableEntry*,value_4,(((RogueClassString_Int32TableEntry*)(_auto_1918_2->data->objects[_auto_1919_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_Int32TableEntryList__type_name( RogueTableEntry_of_String_Int32List* THIS )
{
  return (RogueString*)(Rogue_literal_strings[731]);
}

RogueTableEntry_of_String_Int32List* RogueString_Int32TableEntryList__init_object( RogueTableEntry_of_String_Int32List* THIS )
{
  return (RogueTableEntry_of_String_Int32List*)(THIS);
}

RogueTableEntry_of_String_Int32List* RogueString_Int32TableEntryList__init__Int32_String_Int32TableEntry( RogueTableEntry_of_String_Int32List* THIS, RogueInt32 initial_capacity_0, RogueClassString_Int32TableEntry* initial_value_1 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_Int32TableEntry*), true );
    {
      RogueInt32 i_2 = (1);
      RogueInt32 _auto_808_3 = (initial_capacity_0);
      for (;i_2 <= _auto_808_3;++i_2)
      {
        RogueString_Int32TableEntryList__add__String_Int32TableEntry( ROGUE_ARG(THIS), initial_value_1 );
      }
    }
  }
  return (RogueTableEntry_of_String_Int32List*)(THIS);
}

RogueTableEntry_of_String_Int32List* RogueString_Int32TableEntryList__add__String_Int32TableEntry( RogueTableEntry_of_String_Int32List* THIS, RogueClassString_Int32TableEntry* value_0 )
{
  ((RogueString_Int32TableEntryList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_Int32List*)(THIS);
}

RogueInt32 RogueString_Int32TableEntryList__capacity( RogueTableEntry_of_String_Int32List* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_Int32List* RogueString_Int32TableEntryList__reserve__Int32( RogueTableEntry_of_String_Int32List* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassString_Int32TableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueString_Int32TableEntryList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassString_Int32TableEntry*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_Int32List*)(THIS);
}

RogueString* RogueString_Int32TableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[771]);
}

RogueString* RogueString_StringListTableEntryList__to_String( RogueTableEntry_of_String_StringListList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_String_StringListList*,_auto_1950_2,(THIS));
    RogueInt32 _auto_1951_3 = (0);
    for (;_auto_1951_3 < _auto_1950_2->count;++_auto_1951_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassString_StringListTableEntry*,value_4,(((RogueClassString_StringListTableEntry*)(_auto_1950_2->data->objects[_auto_1951_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_StringListTableEntryList__type_name( RogueTableEntry_of_String_StringListList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[732]);
}

RogueTableEntry_of_String_StringListList* RogueString_StringListTableEntryList__init_object( RogueTableEntry_of_String_StringListList* THIS )
{
  return (RogueTableEntry_of_String_StringListList*)(THIS);
}

RogueTableEntry_of_String_StringListList* RogueString_StringListTableEntryList__init__Int32_String_StringListTableEntry( RogueTableEntry_of_String_StringListList* THIS, RogueInt32 initial_capacity_0, RogueClassString_StringListTableEntry* initial_value_1 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_StringListTableEntry*), true );
    {
      RogueInt32 i_2 = (1);
      RogueInt32 _auto_815_3 = (initial_capacity_0);
      for (;i_2 <= _auto_815_3;++i_2)
      {
        RogueString_StringListTableEntryList__add__String_StringListTableEntry( ROGUE_ARG(THIS), initial_value_1 );
      }
    }
  }
  return (RogueTableEntry_of_String_StringListList*)(THIS);
}

RogueTableEntry_of_String_StringListList* RogueString_StringListTableEntryList__add__String_StringListTableEntry( RogueTableEntry_of_String_StringListList* THIS, RogueClassString_StringListTableEntry* value_0 )
{
  ((RogueString_StringListTableEntryList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_StringListList*)(THIS);
}

RogueInt32 RogueString_StringListTableEntryList__capacity( RogueTableEntry_of_String_StringListList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_StringListList* RogueString_StringListTableEntryList__reserve__Int32( RogueTableEntry_of_String_StringListList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassString_StringListTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueString_StringListTableEntryList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassString_StringListTableEntry*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_StringListList*)(THIS);
}

RogueString* RogueString_StringListTableEntry__type_name( RogueClassString_StringListTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[683]);
}

RogueClassString_StringListTableEntry* RogueString_StringListTableEntry__init__String_StringList_Int32( RogueClassString_StringListTableEntry* THIS, RogueString* _key_0, RogueStringList* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_StringListTableEntry*)(THIS);
}

RogueClassString_StringListTableEntry* RogueString_StringListTableEntry__init_object( RogueClassString_StringListTableEntry* THIS )
{
  return (RogueClassString_StringListTableEntry*)(THIS);
}

RogueString* RogueString_StringListTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[772]);
}

RogueString* RogueInt32_TemplateTableEntryList__to_String( RogueTableEntry_of_Int32_TemplateList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_Int32_TemplateList*,_auto_1982_2,(THIS));
    RogueInt32 _auto_1983_3 = (0);
    for (;_auto_1983_3 < _auto_1982_2->count;++_auto_1983_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassInt32_TemplateTableEntry*,value_4,(((RogueClassInt32_TemplateTableEntry*)(_auto_1982_2->data->objects[_auto_1983_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueInt32_TemplateTableEntryList__type_name( RogueTableEntry_of_Int32_TemplateList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[733]);
}

RogueTableEntry_of_Int32_TemplateList* RogueInt32_TemplateTableEntryList__init_object( RogueTableEntry_of_Int32_TemplateList* THIS )
{
  return (RogueTableEntry_of_Int32_TemplateList*)(THIS);
}

RogueTableEntry_of_Int32_TemplateList* RogueInt32_TemplateTableEntryList__init__Int32_Int32_TemplateTableEntry( RogueTableEntry_of_Int32_TemplateList* THIS, RogueInt32 initial_capacity_0, RogueClassInt32_TemplateTableEntry* initial_value_1 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassInt32_TemplateTableEntry*), true );
    {
      RogueInt32 i_2 = (1);
      RogueInt32 _auto_822_3 = (initial_capacity_0);
      for (;i_2 <= _auto_822_3;++i_2)
      {
        RogueInt32_TemplateTableEntryList__add__Int32_TemplateTableEntry( ROGUE_ARG(THIS), initial_value_1 );
      }
    }
  }
  return (RogueTableEntry_of_Int32_TemplateList*)(THIS);
}

RogueTableEntry_of_Int32_TemplateList* RogueInt32_TemplateTableEntryList__add__Int32_TemplateTableEntry( RogueTableEntry_of_Int32_TemplateList* THIS, RogueClassInt32_TemplateTableEntry* value_0 )
{
  ((RogueInt32_TemplateTableEntryList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_Int32_TemplateList*)(THIS);
}

RogueInt32 RogueInt32_TemplateTableEntryList__capacity( RogueTableEntry_of_Int32_TemplateList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_Int32_TemplateList* RogueInt32_TemplateTableEntryList__reserve__Int32( RogueTableEntry_of_Int32_TemplateList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassInt32_TemplateTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueInt32_TemplateTableEntryList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassInt32_TemplateTableEntry*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_Int32_TemplateList*)(THIS);
}

RogueString* RogueInt32_TemplateTableEntry__type_name( RogueClassInt32_TemplateTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[684]);
}

RogueClassInt32_TemplateTableEntry* RogueInt32_TemplateTableEntry__init__Int32_Template_Int32( RogueClassInt32_TemplateTableEntry* THIS, RogueInt32 _key_0, RogueClassTemplate* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassInt32_TemplateTableEntry*)(THIS);
}

RogueClassInt32_TemplateTableEntry* RogueInt32_TemplateTableEntry__init_object( RogueClassInt32_TemplateTableEntry* THIS )
{
  return (RogueClassInt32_TemplateTableEntry*)(THIS);
}

RogueString* RogueInt32_TemplateTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[773]);
}

RogueString* RogueCmdCastToType__type_name( RogueClassCmdCastToType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1102]);
}

RogueClassCmd* RogueCmdCastToType__clone__CloneArgs( RogueClassCmdCastToType* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCastToType*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ROGUE_ARG(((RogueClassCmdTypeOperator*)ROGUE_CREATE_REF(RogueClassCmdCastToType*,ROGUE_CREATE_OBJECT(CmdCastToType)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->operand), clone_args_0 ))), ROGUE_ARG(THIS->_target_type) ))))))));
}

RogueClassCmd* RogueCmdCastToType__resolve__Scope( RogueClassCmdCastToType* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM52( 25, ROGUE_ARG(THIS->operand), scope_0 ));
  RogueType__organize__Scope( ROGUE_ARG(THIS->_target_type), scope_0 );
  if (((void*)(call_ROGUEM60( 22, ROGUE_ARG(THIS->operand) ))) == ((void*)THIS->_target_type))
  {
    return (RogueClassCmd*)(THIS->operand);
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdCastToType__write_cpp__CPPWriter_Logical( RogueClassCmdCastToType* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[533] )))), ROGUE_ARG(THIS->_target_type) )))), Rogue_literal_strings[971] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->operand), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[493] );
}

RogueClassCmdCastToType* RogueCmdCastToType__init_object( RogueClassCmdCastToType* THIS )
{
  return (RogueClassCmdCastToType*)(THIS);
}

RogueString* RogueCmdTypeOperator__type_name( RogueClassCmdTypeOperator* THIS )
{
  return (RogueString*)(Rogue_literal_strings[825]);
}

RogueClassType* Rogue_CmdTypeOperator__type( RogueClassCmdTypeOperator* THIS )
{
  return (RogueClassType*)(THIS->_target_type);
}

void RogueCmdTypeOperator__trace_used_code( RogueClassCmdTypeOperator* THIS )
{
  call_ROGUEM59( 31, ROGUE_ARG(THIS->operand) );
  RogueType__trace_used_code( ROGUE_ARG(THIS->_target_type) );
}

void RogueCmdTypeOperator__update_this_type__Scope( RogueClassCmdTypeOperator* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->operand), scope_0 );
}

RogueClassCmdTypeOperator* RogueCmdTypeOperator__init_object( RogueClassCmdTypeOperator* THIS )
{
  return (RogueClassCmdTypeOperator*)(THIS);
}

RogueClassCmdTypeOperator* RogueCmdTypeOperator__init__Token_Cmd_Type( RogueClassCmdTypeOperator* THIS, RogueClassToken* _auto_829_0, RogueClassCmd* _auto_830_1, RogueClassType* _auto_831_2 )
{
  THIS->_target_type = _auto_831_2;
  THIS->operand = _auto_830_1;
  THIS->t = _auto_829_0;
  return (RogueClassCmdTypeOperator*)(THIS);
}

RogueString* RogueCmdLogicalize__type_name( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1106]);
}

RogueClassCmd* RogueCmdLogicalize__clone__CloneArgs( RogueClassCmdLogicalize* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalize*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalize*,ROGUE_CREATE_OBJECT(CmdLogicalize)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->operand), clone_args_0 ))) ))))))));
}

RogueClassCmd* RogueCmdLogicalize__resolve__Scope( RogueClassCmdLogicalize* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM52( 25, ROGUE_ARG(THIS->operand), scope_0 ));
  if ((call_ROGUEM60( 22, ROGUE_ARG(THIS->operand) ))->is_optional)
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->operand), Rogue_literal_strings[860] )))), scope_0 ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassType* Rogue_CmdLogicalize__type( RogueClassCmdLogicalize* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

RogueClassCmdLogicalize* RogueCmdLogicalize__init_object( RogueClassCmdLogicalize* THIS )
{
  return (RogueClassCmdLogicalize*)(THIS);
}

RogueString* RogueCmdLogicalize__prefix_symbol( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_literal_strings[0]);
}

RogueString* RogueCmdLogicalize__fn_name( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1112]);
}

RogueClassCmd* RogueCmdLogicalize__resolve_for_literal_operand__Scope( RogueClassCmdLogicalize* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = ((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->operand), scope_0 ))) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdLogicalize__suffix_symbol( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_literal_strings[218]);
}

RogueString* RogueCmdLogicalize__cpp_prefix_symbol( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1114]);
}

RogueString* RogueCmdLogicalize__cpp_suffix_symbol( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_literal_strings[0]);
}

RogueString* RogueCmdUnary__type_name( RogueClassCmdUnary* THIS )
{
  return (RogueString*)(Rogue_literal_strings[826]);
}

RogueClassCmd* RogueCmdUnary__resolve__Scope( RogueClassCmdUnary* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = ((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->operand), scope_0 ))) )));
  if ((call_ROGUEM57( 18, ROGUE_ARG(THIS->operand) )))
  {
    return (RogueClassCmd*)((call_ROGUEM361( 37, ROGUE_ARG(THIS), scope_0 )));
  }
  else
  {
    return (RogueClassCmd*)(((RogueCmdUnary__resolve_for_operand_type__Scope_Type( ROGUE_ARG(THIS), scope_0, ROGUE_ARG((call_ROGUEM60( 22, ROGUE_ARG(THIS->operand) ))) ))));
  }
}

RogueClassType* Rogue_CmdUnary__type( RogueClassCmdUnary* THIS )
{
  return (RogueClassType*)((call_ROGUEM60( 29, ROGUE_ARG(THIS->operand) )));
}

void RogueCmdUnary__write_cpp__CPPWriter_Logical( RogueClassCmdUnary* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, ROGUE_ARG((call_ROGUEM360( 40, ROGUE_ARG(THIS) ))) )))), Rogue_literal_strings[80] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->operand), writer_0, false );
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] )))), ROGUE_ARG((call_ROGUEM360( 41, ROGUE_ARG(THIS) ))) );
}

void RogueCmdUnary__trace_used_code( RogueClassCmdUnary* THIS )
{
  call_ROGUEM59( 31, ROGUE_ARG(THIS->operand) );
}

void RogueCmdUnary__update_this_type__Scope( RogueClassCmdUnary* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->operand), scope_0 );
}

RogueClassCmdUnary* RogueCmdUnary__init_object( RogueClassCmdUnary* THIS )
{
  return (RogueClassCmdUnary*)(THIS);
}

RogueClassCmdUnary* RogueCmdUnary__init__Token_Cmd( RogueClassCmdUnary* THIS, RogueClassToken* _auto_832_0, RogueClassCmd* _auto_833_1 )
{
  THIS->operand = _auto_833_1;
  THIS->t = _auto_832_0;
  return (RogueClassCmdUnary*)(THIS);
}

RogueString* RogueCmdUnary__prefix_symbol( RogueClassCmdUnary* THIS )
{
  return (RogueString*)(Rogue_literal_strings[0]);
}

RogueString* RogueCmdUnary__fn_name( RogueClassCmdUnary* THIS )
{
  return (RogueString*)(((RogueString*)(NULL)));
}

RogueClassCmd* RogueCmdUnary__resolve_for_literal_operand__Scope( RogueClassCmdUnary* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdUnary__resolve_for_operand_type__Scope_Type( RogueClassCmdUnary* THIS, RogueClassScope* scope_0, RogueClassType* operand_type_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueString*,name_2,((call_ROGUEM360( 36, ROGUE_ARG(THIS) ))));
  if (!!(name_2))
  {
    if (((RogueType__has_method_named__String( operand_type_1, name_2 ))))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->operand), name_2 )))), scope_0 ))));
    }
    if (!(((RogueType__is_primitive( operand_type_1 )))))
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[893] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(operand_type_1))) )))) )))), Rogue_literal_strings[64] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], name_2 )))) )))), Rogue_literal_strings[904] )))) )))) ))));
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdUnary__suffix_symbol( RogueClassCmdUnary* THIS )
{
  return (RogueString*)(Rogue_literal_strings[0]);
}

RogueString* RogueCmdUnary__cpp_prefix_symbol( RogueClassCmdUnary* THIS )
{
  return (RogueString*)((call_ROGUEM360( 35, ROGUE_ARG(THIS) )));
}

RogueString* RogueCmdUnary__cpp_suffix_symbol( RogueClassCmdUnary* THIS )
{
  return (RogueString*)((call_ROGUEM360( 39, ROGUE_ARG(THIS) )));
}

RogueString* RogueCmdReadSingleton__type_name( RogueClassCmdReadSingleton* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1146]);
}

RogueClassCmd* RogueCmdReadSingleton__clone__CloneArgs( RogueClassCmdReadSingleton* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadSingleton__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadSingleton*,ROGUE_CREATE_OBJECT(CmdReadSingleton))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->_of_type) ))))));
}

void RogueCmdReadSingleton__require_type_context( RogueClassCmdReadSingleton* THIS )
{
}

RogueClassCmd* RogueCmdReadSingleton__resolve__Scope( RogueClassCmdReadSingleton* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( ROGUE_ARG(THIS->_of_type), scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdReadSingleton__type( RogueClassCmdReadSingleton* THIS )
{
  return (RogueClassType*)(THIS->_of_type);
}

void RogueCmdReadSingleton__write_cpp__CPPWriter_Logical( RogueClassCmdReadSingleton* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(((RogueType__is_singleton( ROGUE_ARG(THIS->_of_type) )))))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->_of_type->name) )))) )))), Rogue_literal_strings[981] )))) )))) ))));
  }
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[533] )))), ROGUE_ARG(THIS->_of_type->cpp_class_name) );
  if (((RogueType__is_reference( ROGUE_ARG(THIS->_of_type) ))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[226] );
  }
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[982] )))), ROGUE_ARG(THIS->_of_type->cpp_name) )))), Rogue_literal_strings[493] );
}

void RogueCmdReadSingleton__trace_used_code( RogueClassCmdReadSingleton* THIS )
{
  RogueType__trace_used_code( ROGUE_ARG(THIS->_of_type) );
}

void RogueCmdReadSingleton__update_this_type__Scope( RogueClassCmdReadSingleton* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdReadSingleton* RogueCmdReadSingleton__init_object( RogueClassCmdReadSingleton* THIS )
{
  return (RogueClassCmdReadSingleton*)(THIS);
}

RogueClassCmdReadSingleton* RogueCmdReadSingleton__init__Token_Type( RogueClassCmdReadSingleton* THIS, RogueClassToken* _auto_882_0, RogueClassType* _auto_883_1 )
{
  THIS->_of_type = _auto_883_1;
  THIS->t = _auto_882_0;
  return (RogueClassCmdReadSingleton*)(THIS);
}

RogueString* RogueCmdFlagArgArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[774]);
}

RogueString* RogueCmdCallInlineNativeRoutine__type_name( RogueClassCmdCallInlineNativeRoutine* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1176]);
}

RogueClassCmd* RogueCmdCallInlineNativeRoutine__clone__CloneArgs( RogueClassCmdCallInlineNativeRoutine* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCallInlineNativeRoutine__init__Token_Method_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCallInlineNativeRoutine*,ROGUE_CREATE_OBJECT(CmdCallInlineNativeRoutine))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->method_info), ROGUE_ARG(((RogueCmdArgs__clone__CloneArgs( ROGUE_ARG(THIS->args), clone_args_0 )))) ))))));
}

RogueClassType* Rogue_CmdCallInlineNativeRoutine__type( RogueClassCmdCallInlineNativeRoutine* THIS )
{
  return (RogueClassType*)(THIS->method_info->_return_type);
}

RogueClassCmdCallInlineNativeRoutine* RogueCmdCallInlineNativeRoutine__init_object( RogueClassCmdCallInlineNativeRoutine* THIS )
{
  return (RogueClassCmdCallInlineNativeRoutine*)(THIS);
}

RogueClassCmdCallInlineNativeRoutine* RogueCmdCallInlineNativeRoutine__init__Token_Method_CmdArgs( RogueClassCmdCallInlineNativeRoutine* THIS, RogueClassToken* _auto_893_0, RogueClassMethod* _auto_894_1, RogueClassCmdArgs* _auto_895_2 )
{
  THIS->args = _auto_895_2;
  THIS->method_info = _auto_894_1;
  THIS->t = _auto_893_0;
  return (RogueClassCmdCallInlineNativeRoutine*)(THIS);
}

RogueString* RogueCmdCallInlineNative__to_String( RogueClassCmdCallInlineNative* THIS )
{
  return (RogueString*)(THIS->method_info->signature);
}

RogueString* RogueCmdCallInlineNative__type_name( RogueClassCmdCallInlineNative* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1168]);
}

RogueClassCmd* RogueCmdCallInlineNative__resolve_adjust__Scope_Int32( RogueClassCmdCallInlineNative* THIS, RogueClassScope* scope_0, RogueInt32 _auto_892_1 )
{
  THIS->adjust_delta = _auto_892_1;
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdCallInlineNative__write_cpp__CPPWriter_Logical( RogueClassCmdCallInlineNative* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  switch (THIS->adjust_delta)
  {
    case -1:
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[7] );
      break;
    }
    case 1:
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[217] );
      break;
    }
  }
  ROGUE_DEF_LOCAL_REF(RogueString*,st_2,(THIS->method_info->native_code));
  RogueOptionalInt32 dollar_3 = (((RogueString__locate__Character_OptionalInt32( st_2, (RogueCharacter)'$', ROGUE_ARG((RogueOptionalInt32__create())) ))));
  while (dollar_3.exists)
  {
    RogueCPPWriter__print__String( writer_0, ROGUE_ARG(((RogueString__from__Int32_Int32( st_2, 0, ROGUE_ARG((dollar_3.value - 1)) )))) );
    st_2 = ((RogueString*)((RogueString__from__Int32( st_2, ROGUE_ARG((dollar_3.value + 1)) ))));
    ROGUE_DEF_LOCAL_REF(RogueString*,name_4,0);
    ROGUE_DEF_LOCAL_REF(RogueClassLocal*,param_5,0);
    if (((RogueString__begins_with__Character( st_2, (RogueCharacter)'(' ))))
    {
      name_4 = ((RogueString*)((RogueString__from__Int32( ROGUE_ARG(((RogueString__before_first__Character( st_2, (RogueCharacter)')' )))), 1 ))));
      st_2 = ((RogueString*)((RogueString__after_first__Character( st_2, (RogueCharacter)')' ))));
      {
        ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_2020_7,(THIS->method_info->parameters));
        RogueInt32 _auto_2021_8 = (0);
        for (;_auto_2021_8 < _auto_2020_7->count;++_auto_2021_8)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassLocal*,p_9,(((RogueClassLocal*)(_auto_2020_7->data->objects[_auto_2021_8]))));
          if (((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(p_9->name), name_4 ))))
          {
            param_5 = ((RogueClassLocal*)p_9);
            goto _auto_2022;
          }
        }
      }
      _auto_2022:;
    }
    else
    {
      ROGUE_DEF_LOCAL_REF(RogueClassLocal*,best_match_6,0);
      {
        ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_2023_10,(THIS->method_info->parameters));
        RogueInt32 _auto_2024_11 = (0);
        for (;_auto_2024_11 < _auto_2023_10->count;++_auto_2024_11)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassLocal*,p_12,(((RogueClassLocal*)(_auto_2023_10->data->objects[_auto_2024_11]))));
          if (((RogueString__begins_with__String( st_2, ROGUE_ARG(p_12->name) ))))
          {
            if ((((void*)best_match_6) == ((void*)NULL) || p_12->name->count > best_match_6->name->count))
            {
              best_match_6 = ((RogueClassLocal*)p_12);
            }
          }
        }
      }
      if (!!(best_match_6))
      {
        param_5 = ((RogueClassLocal*)best_match_6);
        name_4 = ((RogueString*)param_5->name);
        st_2 = ((RogueString*)((RogueString__from__Int32( st_2, ROGUE_ARG(best_match_6->name->count) ))));
      }
      else if (((RogueString__begins_with__String( st_2, Rogue_literal_strings[182] ))))
      {
        call_ROGUEM383( 35, ROGUE_ARG(THIS), writer_0 );
        st_2 = ((RogueString*)((RogueString__from__Int32( st_2, 4 ))));
      }
    }
    if (!!(param_5))
    {
      call_ROGUEM72( 30, ROGUE_ARG(((RogueClassCmd*)(THIS->args->data->objects[param_5->index]))), writer_0, false );
    }
    else if (!!(name_4))
    {
      RogueCPPWriter__print_native_marker__Token_Type_Method_String( writer_0, ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->method_info->type_context), ROGUE_ARG(THIS->method_info), name_4 );
    }
    dollar_3 = ((RogueOptionalInt32)((RogueString__locate__Character_OptionalInt32( st_2, (RogueCharacter)'$', ROGUE_ARG((RogueOptionalInt32__create())) ))));
  }
  RogueCPPWriter__print__String( writer_0, st_2 );
}

RogueClassCmdCallInlineNative* RogueCmdCallInlineNative__init_object( RogueClassCmdCallInlineNative* THIS )
{
  return (RogueClassCmdCallInlineNative*)(THIS);
}

void RogueCmdCallInlineNative__print_this__CPPWriter( RogueClassCmdCallInlineNative* THIS, RogueClassCPPWriter* writer_0 )
{
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[983] ))));
}

RogueString* RogueCmdCall__type_name( RogueClassCmdCall* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1147]);
}

RogueClassType* Rogue_CmdCall__require_type( RogueClassCmdCall* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueClassType*,result_0,((call_ROGUEM375( 29, ROGUE_ARG(THIS) ))));
  if (((void*)result_0) == ((void*)NULL))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[1041] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(THIS->method_info->type_context))) )))) )))), Rogue_literal_strings[64] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->method_info->signature) )))) )))), Rogue_literal_strings[1042] )))) )))) ))));
  }
  return (RogueClassType*)(result_0);
}

RogueClassCmd* RogueCmdCall__resolve__Scope( RogueClassCmdCall* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->context))
  {
    THIS->context = ((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->context), scope_0 ))) )));
  }
  RogueCmdArgs__resolve__Scope( ROGUE_ARG(THIS->args), scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdCall__type( RogueClassCmdCall* THIS )
{
  return (RogueClassType*)(THIS->method_info->_return_type);
}

void RogueCmdCall__trace_used_code( RogueClassCmdCall* THIS )
{
  if (!!(THIS->context))
  {
    call_ROGUEM59( 31, ROGUE_ARG(THIS->context) );
  }
  RogueMethod__trace_used_code( ROGUE_ARG(THIS->method_info) );
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_2025_0,(THIS->args));
    RogueInt32 _auto_2026_1 = (0);
    for (;_auto_2026_1 < _auto_2025_0->count;++_auto_2026_1)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_2,(((RogueClassCmd*)(_auto_2025_0->data->objects[_auto_2026_1]))));
      call_ROGUEM59( 31, arg_2 );
    }
  }
}

void RogueCmdCall__update_this_type__Scope( RogueClassCmdCall* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->context))
  {
    call_ROGUEM56( 32, ROGUE_ARG(THIS->context), scope_0 );
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_2027_1,(THIS->args));
    RogueInt32 _auto_2028_2 = (0);
    for (;_auto_2028_2 < _auto_2027_1->count;++_auto_2028_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_3,(((RogueClassCmd*)(_auto_2027_1->data->objects[_auto_2028_2]))));
      call_ROGUEM56( 32, arg_3, scope_0 );
    }
  }
}

RogueClassCmdCall* RogueCmdCall__init_object( RogueClassCmdCall* THIS )
{
  return (RogueClassCmdCall*)(THIS);
}

RogueClassCmdCall* RogueCmdCall__init__Token_Cmd_Method_CmdArgs( RogueClassCmdCall* THIS, RogueClassToken* _auto_888_0, RogueClassCmd* _auto_889_1, RogueClassMethod* _auto_890_2, RogueClassCmdArgs* _auto_891_3 )
{
  THIS->args = _auto_891_3;
  THIS->method_info = _auto_890_2;
  THIS->context = _auto_889_1;
  THIS->t = _auto_888_0;
  return (RogueClassCmdCall*)(THIS);
}

RogueString* RogueCmdCallNativeRoutine__type_name( RogueClassCmdCallNativeRoutine* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1169]);
}

RogueClassCmd* RogueCmdCallNativeRoutine__clone__CloneArgs( RogueClassCmdCallNativeRoutine* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCallNativeRoutine__init__Token_Method_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCallNativeRoutine*,ROGUE_CREATE_OBJECT(CmdCallNativeRoutine))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->method_info), ROGUE_ARG(((RogueCmdArgs__clone__CloneArgs( ROGUE_ARG(THIS->args), clone_args_0 )))) ))))));
}

void RogueCmdCallNativeRoutine__write_cpp__CPPWriter_Logical( RogueClassCmdCallNativeRoutine* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[80] )))), ROGUE_ARG(THIS->method_info->_return_type), ROGUE_ARG(THIS->method_info->_return_type) );
  }
  RogueCPPWriter__print__String( writer_0, ROGUE_ARG(THIS->method_info->cpp_name) );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[505] );
  RogueInt32 i_2 = (0);
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_2029_3,(THIS->args));
    RogueInt32 _auto_2030_4 = (0);
    for (;_auto_2030_4 < _auto_2029_3->count;++_auto_2030_4)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_5,(((RogueClassCmd*)(_auto_2029_3->data->objects[_auto_2030_4]))));
      if (i_2 > 0)
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[502] );
      }
      RogueCPPWriter__print_arg__Cmd_Type_Type( writer_0, arg_5, ROGUE_ARG(((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type), ROGUE_ARG(((RogueClassType*)(NULL))) );
      ++i_2;
    }
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[531] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
  }
}

RogueClassCmdCallNativeRoutine* RogueCmdCallNativeRoutine__init_object( RogueClassCmdCallNativeRoutine* THIS )
{
  return (RogueClassCmdCallNativeRoutine*)(THIS);
}

RogueClassCmdCallNativeRoutine* RogueCmdCallNativeRoutine__init__Token_Method_CmdArgs( RogueClassCmdCallNativeRoutine* THIS, RogueClassToken* _auto_896_0, RogueClassMethod* _auto_897_1, RogueClassCmdArgs* _auto_898_2 )
{
  THIS->args = _auto_898_2;
  THIS->method_info = _auto_897_1;
  THIS->t = _auto_896_0;
  return (RogueClassCmdCallNativeRoutine*)(THIS);
}

RogueString* RogueMacroArgs__type_name( RogueClassMacroArgs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1056]);
}

RogueClassMacroArgs* RogueMacroArgs__init_object( RogueClassMacroArgs* THIS )
{
  return (RogueClassMacroArgs*)(THIS);
}

RogueClassMacroArgs* RogueMacroArgs__init__Cmd_Method_CmdArgs( RogueClassMacroArgs* THIS, RogueClassCmd* _auto_899_0, RogueClassMethod* _auto_900_1, RogueClassCmdArgs* args_2 )
{
  THIS->method_info = _auto_900_1;
  THIS->this_context = _auto_899_0;
  if (!!(args_2))
  {
    THIS->arg_lookup = ((RogueString_CmdTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_CmdTable*,ROGUE_CREATE_OBJECT(String_CmdTable))) )));
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_2031_3,(args_2));
      RogueInt32 index_4 = (0);
      for (;index_4 < _auto_2031_3->count;++index_4)
      {
        RogueString_CmdTable__set__String_Cmd( ROGUE_ARG(THIS->arg_lookup), ROGUE_ARG(((RogueClassLocal*)(THIS->method_info->parameters->data->objects[index_4]))->name), ROGUE_ARG(((RogueClassCmd*)(args_2->data->objects[index_4]))) );
      }
    }
  }
  return (RogueClassMacroArgs*)(THIS);
}

RogueClassCmd* RogueMacroArgs__inline_this( RogueClassMacroArgs* THIS )
{
  return (RogueClassCmd*)((call_ROGUEM71( 6, ROGUE_ARG(THIS->this_context), ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) )));
}

RogueClassCmd* RogueMacroArgs__inline_access__CmdAccess( RogueClassMacroArgs* THIS, RogueClassCmdAccess* access_0 )
{
  if (!!(access_0->context))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(access_0)));
  }
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_1,(((RogueString_CmdTable__get__String( ROGUE_ARG(THIS->arg_lookup), ROGUE_ARG(access_0->name) )))));
  if (!(!!(arg_1)))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(access_0)));
  }
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,dup_2,((call_ROGUEM71( 6, arg_1, ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) ))));
  if (!!(access_0->args))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdAccess*,new_access_3,(((RogueClassCmdAccess*)(RogueObject_as(dup_2,RogueTypeCmdAccess)))));
    if (!!(new_access_3))
    {
      if (!!(new_access_3->args))
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(access_0->t), Rogue_literal_strings[856] ))));
      }
      else
      {
        new_access_3->args = access_0->args;
      }
    }
    else
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(access_0->t), Rogue_literal_strings[856] ))));
    }
  }
  return (RogueClassCmd*)(dup_2);
}

RogueClassCmd* RogueMacroArgs__inline_read_local__CmdReadLocal( RogueClassMacroArgs* THIS, RogueClassCmdReadLocal* read_cmd_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_1,(((RogueString_CmdTable__get__String( ROGUE_ARG(THIS->arg_lookup), ROGUE_ARG(read_cmd_0->local_info->name) )))));
  if (!(!!(arg_1)))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(read_cmd_0)));
  }
  return (RogueClassCmd*)((call_ROGUEM71( 6, arg_1, ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) )));
}

RogueClassCmd* RogueMacroArgs__inline_write_local__CmdWriteLocal( RogueClassMacroArgs* THIS, RogueClassCmdWriteLocal* write_cmd_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_1,(((RogueString_CmdTable__get__String( ROGUE_ARG(THIS->arg_lookup), ROGUE_ARG(write_cmd_0->local_info->name) )))));
  if (!(!!(arg_1)))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(write_cmd_0)));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAssign*,ROGUE_CREATE_OBJECT(CmdAssign))), ROGUE_ARG(write_cmd_0->t), ROGUE_ARG((call_ROGUEM71( 6, arg_1, ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) ))), ROGUE_ARG(write_cmd_0->new_value) ))))));
}

RogueString* RogueCmdInlineNative__type_name( RogueClassCmdInlineNative* THIS )
{
  return (RogueString*)(Rogue_literal_strings[827]);
}

RogueClassCmdInlineNative* RogueCmdInlineNative__clone__CloneArgs( RogueClassCmdInlineNative* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdInlineNative*,result_1,(((RogueCmdInlineNative__init__Token_String_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdInlineNative*,ROGUE_CREATE_OBJECT(CmdInlineNative))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->code), ROGUE_ARG(THIS->_result_type) )))));
  result_1->modify_op = THIS->modify_op;
  result_1->adjust_delta = THIS->adjust_delta;
  result_1->new_value = THIS->new_value;
  return (RogueClassCmdInlineNative*)(result_1);
}

RogueLogical RogueCmdInlineNative__requires_semicolon( RogueClassCmdInlineNative* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdInlineNative__resolve__Scope( RogueClassCmdInlineNative* THIS, RogueClassScope* scope_0 )
{
  THIS->this_method = scope_0->this_method;
  if (!!(THIS->_result_type))
  {
    RogueType__organize__Scope( ROGUE_ARG(THIS->_result_type), scope_0 );
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdInlineNative__resolve_assignment__Scope_Cmd( RogueClassCmdInlineNative* THIS, RogueClassScope* scope_0, RogueClassCmd* _auto_906_1 )
{
  THIS->new_value = _auto_906_1;
  THIS->this_method = scope_0->this_method;
  THIS->new_value = ((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->new_value), scope_0 ))) )));
  if (!!(THIS->_result_type))
  {
    RogueType__organize__Scope( ROGUE_ARG(THIS->_result_type), scope_0 );
  }
  else
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[962] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)((call_ROGUEM60( 29, ROGUE_ARG(THIS->new_value) ))))) )))) )))) )))) ))));
  }
  THIS->new_value = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG(THIS->new_value), ROGUE_ARG(THIS->_result_type), scope_0 ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdInlineNative__resolve_adjust__Scope_Int32( RogueClassCmdInlineNative* THIS, RogueClassScope* scope_0, RogueInt32 _auto_909_1 )
{
  THIS->adjust_delta = _auto_909_1;
  THIS->this_method = scope_0->this_method;
  if (!!(THIS->_result_type))
  {
    RogueType__organize__Scope( ROGUE_ARG(THIS->_result_type), scope_0 );
  }
  else
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[964] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)((call_ROGUEM60( 29, ROGUE_ARG(THIS->new_value) ))))) )))) )))) )))) ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdInlineNative__resolve_modify_and_assign__Scope_TokenType_Cmd( RogueClassCmdInlineNative* THIS, RogueClassScope* scope_0, RogueClassTokenType* _auto_907_1, RogueClassCmd* _auto_908_2 )
{
  THIS->new_value = _auto_908_2;
  THIS->modify_op = _auto_907_1;
  THIS->this_method = scope_0->this_method;
  THIS->new_value = ((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->new_value), scope_0 ))) )));
  if (!!(THIS->_result_type))
  {
    RogueType__organize__Scope( ROGUE_ARG(THIS->_result_type), scope_0 );
  }
  else
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[969] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)((call_ROGUEM60( 29, ROGUE_ARG(THIS->new_value) ))))) )))) )))) )))) ))));
  }
  THIS->new_value = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG(THIS->new_value), ROGUE_ARG(THIS->_result_type), scope_0 ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdInlineNative__type( RogueClassCmdInlineNative* THIS )
{
  return (RogueClassType*)(THIS->_result_type);
}

void RogueCmdInlineNative__write_cpp__CPPWriter_Logical( RogueClassCmdInlineNative* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  switch (THIS->adjust_delta)
  {
    case -1:
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[7] );
      break;
    }
    case 1:
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[217] );
      break;
    }
  }
  RogueCPPWriter__print_native_code__Token_Type_Method_String_Type( writer_0, ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->this_method->type_context), ROGUE_ARG(THIS->this_method), ROGUE_ARG(THIS->code), ROGUE_ARG(THIS->_result_type) );
  if (!!(THIS->adjust_delta))
  {
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[219] );
    return;
  }
  if ((((RogueString__contains__String( ROGUE_ARG(THIS->code), ROGUE_ARG(((RogueCharacter__to_String( (RogueCharacter)10 )))) ))) || !(!!(THIS->_result_type))))
  {
    RogueCPPWriter__println( writer_0 );
  }
  if (!!(THIS->new_value))
  {
    if (!!(THIS->modify_op))
    {
      RogueCPPWriter__print__Character( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Character( writer_0, (RogueCharacter)' ' )))), ROGUE_ARG(((RogueTokenType__to_String( ROGUE_ARG(THIS->modify_op) )))) )))), (RogueCharacter)' ' );
    }
    else
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[537] );
    }
    call_ROGUEM72( 30, ROGUE_ARG(THIS->new_value), writer_0, false );
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[219] );
  }
}

void RogueCmdInlineNative__trace_used_code( RogueClassCmdInlineNative* THIS )
{
  if (!!(THIS->new_value))
  {
    call_ROGUEM59( 31, ROGUE_ARG(THIS->new_value) );
  }
}

void RogueCmdInlineNative__update_this_type__Scope( RogueClassCmdInlineNative* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->new_value))
  {
    call_ROGUEM56( 32, ROGUE_ARG(THIS->new_value), scope_0 );
  }
}

RogueClassCmdInlineNative* RogueCmdInlineNative__init_object( RogueClassCmdInlineNative* THIS )
{
  return (RogueClassCmdInlineNative*)(THIS);
}

RogueClassCmdInlineNative* RogueCmdInlineNative__init__Token_String_Type( RogueClassCmdInlineNative* THIS, RogueClassToken* _auto_903_0, RogueString* _auto_904_1, RogueClassType* _auto_905_2 )
{
  THIS->_result_type = _auto_905_2;
  THIS->code = _auto_904_1;
  THIS->t = _auto_903_0;
  return (RogueClassCmdInlineNative*)(THIS);
}

RogueString* RogueCmdCallRoutine__type_name( RogueClassCmdCallRoutine* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1170]);
}

RogueClassCmd* RogueCmdCallRoutine__clone__CloneArgs( RogueClassCmdCallRoutine* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCallRoutine__init__Token_Method_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCallRoutine*,ROGUE_CREATE_OBJECT(CmdCallRoutine))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->method_info), ROGUE_ARG(((RogueCmdArgs__clone__CloneArgs( ROGUE_ARG(THIS->args), clone_args_0 )))) ))))));
}

void RogueCmdCallRoutine__write_cpp__CPPWriter_Logical( RogueClassCmdCallRoutine* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[80] )))), ROGUE_ARG(THIS->method_info->_return_type), ROGUE_ARG(THIS->method_info->_return_type) );
  }
  RogueCPPWriter__print__String( writer_0, ROGUE_ARG(THIS->method_info->cpp_name) );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[80] );
  if (!!(THIS->args->count))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[489] );
    RogueInt32 i_2 = (0);
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_2032_3,(THIS->args));
      RogueInt32 _auto_2033_4 = (0);
      for (;_auto_2033_4 < _auto_2032_3->count;++_auto_2033_4)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_5,(((RogueClassCmd*)(_auto_2032_3->data->objects[_auto_2033_4]))));
        if (i_2 > 0)
        {
          RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[502] );
        }
        RogueCPPWriter__print_arg__Cmd_Type_Type( writer_0, arg_5, ROGUE_ARG(((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type), ROGUE_ARG(((RogueClassType*)(NULL))) );
        ++i_2;
      }
    }
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[489] );
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
  }
}

RogueClassCmdCallRoutine* RogueCmdCallRoutine__init_object( RogueClassCmdCallRoutine* THIS )
{
  return (RogueClassCmdCallRoutine*)(THIS);
}

RogueClassCmdCallRoutine* RogueCmdCallRoutine__init__Token_Method_CmdArgs( RogueClassCmdCallRoutine* THIS, RogueClassToken* _auto_910_0, RogueClassMethod* _auto_911_1, RogueClassCmdArgs* _auto_912_2 )
{
  THIS->args = _auto_912_2;
  THIS->method_info = _auto_911_1;
  THIS->t = _auto_910_0;
  return (RogueClassCmdCallRoutine*)(THIS);
}

RogueString* RogueCmdReadArrayCount__type_name( RogueClassCmdReadArrayCount* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1148]);
}

RogueClassCmd* RogueCmdReadArrayCount__clone__CloneArgs( RogueClassCmdReadArrayCount* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadArrayCount__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadArrayCount*,ROGUE_CREATE_OBJECT(CmdReadArrayCount))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->context), clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdReadArrayCount__resolve__Scope( RogueClassCmdReadArrayCount* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->_array_type))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  THIS->context = (call_ROGUEM52( 25, ROGUE_ARG(THIS->context), scope_0 ));
  THIS->_array_type = (call_ROGUEM60( 22, ROGUE_ARG(THIS->context) ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdReadArrayCount__type( RogueClassCmdReadArrayCount* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32);
}

void RogueCmdReadArrayCount__write_cpp__CPPWriter_Logical( RogueClassCmdReadArrayCount* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  call_ROGUEM72( 30, ROGUE_ARG(THIS->context), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[985] );
}

void RogueCmdReadArrayCount__trace_used_code( RogueClassCmdReadArrayCount* THIS )
{
  call_ROGUEM59( 31, ROGUE_ARG(THIS->context) );
  RogueType__trace_used_code( ROGUE_ARG(THIS->_array_type) );
}

void RogueCmdReadArrayCount__update_this_type__Scope( RogueClassCmdReadArrayCount* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->context), scope_0 );
}

RogueClassCmdReadArrayCount* RogueCmdReadArrayCount__init_object( RogueClassCmdReadArrayCount* THIS )
{
  return (RogueClassCmdReadArrayCount*)(THIS);
}

RogueClassCmdReadArrayCount* RogueCmdReadArrayCount__init__Token_Cmd( RogueClassCmdReadArrayCount* THIS, RogueClassToken* _auto_913_0, RogueClassCmd* _auto_914_1 )
{
  THIS->context = _auto_914_1;
  THIS->t = _auto_913_0;
  return (RogueClassCmdReadArrayCount*)(THIS);
}

RogueString* RogueCmdCallInlineNativeMethod__type_name( RogueClassCmdCallInlineNativeMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1177]);
}

RogueClassCmd* RogueCmdCallInlineNativeMethod__clone__CloneArgs( RogueClassCmdCallInlineNativeMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCallInlineNativeMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ROGUE_ARG(((RogueClassCmdCall*)ROGUE_CREATE_REF(RogueClassCmdCallInlineNativeMethod*,ROGUE_CREATE_OBJECT(CmdCallInlineNativeMethod)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->context), clone_args_0 )))), ROGUE_ARG(THIS->method_info), ROGUE_ARG(((RogueCmdArgs__clone__CloneArgs( ROGUE_ARG(THIS->args), clone_args_0 )))) ))))))));
}

RogueClassType* Rogue_CmdCallInlineNativeMethod__type( RogueClassCmdCallInlineNativeMethod* THIS )
{
  return (RogueClassType*)(THIS->method_info->_return_type);
}

RogueClassCmdCallInlineNativeMethod* RogueCmdCallInlineNativeMethod__init_object( RogueClassCmdCallInlineNativeMethod* THIS )
{
  return (RogueClassCmdCallInlineNativeMethod*)(THIS);
}

void RogueCmdCallInlineNativeMethod__print_this__CPPWriter( RogueClassCmdCallInlineNativeMethod* THIS, RogueClassCPPWriter* writer_0 )
{
  call_ROGUEM72( 30, ROGUE_ARG(THIS->context), writer_0, false );
}

RogueString* RogueCmdCallNativeMethod__type_name( RogueClassCmdCallNativeMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1171]);
}

RogueClassCmd* RogueCmdCallNativeMethod__clone__CloneArgs( RogueClassCmdCallNativeMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCallNativeMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ROGUE_ARG(((RogueClassCmdCall*)ROGUE_CREATE_REF(RogueClassCmdCallNativeMethod*,ROGUE_CREATE_OBJECT(CmdCallNativeMethod)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->context), clone_args_0 )))), ROGUE_ARG(THIS->method_info), ROGUE_ARG(((RogueCmdArgs__clone__CloneArgs( ROGUE_ARG(THIS->args), clone_args_0 )))) ))))))));
}

void RogueCmdCallNativeMethod__write_cpp__CPPWriter_Logical( RogueClassCmdCallNativeMethod* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[80] )))), ROGUE_ARG(THIS->method_info->_return_type), ROGUE_ARG(THIS->method_info->_return_type) );
  }
  RogueCPPWriter__print__String( writer_0, ROGUE_ARG(THIS->method_info->cpp_name) );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[505] );
  RogueCPPWriter__print_arg__Cmd_Type_Type( writer_0, ROGUE_ARG(THIS->context), ROGUE_ARG(((RogueClassType*)(NULL))), ROGUE_ARG(((RogueClassType*)(NULL))) );
  RogueInt32 i_2 = (0);
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_2034_3,(THIS->args));
    RogueInt32 _auto_2035_4 = (0);
    for (;_auto_2035_4 < _auto_2034_3->count;++_auto_2035_4)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_5,(((RogueClassCmd*)(_auto_2034_3->data->objects[_auto_2035_4]))));
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[502] );
      RogueCPPWriter__print_arg__Cmd_Type_Type( writer_0, arg_5, ROGUE_ARG(((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type), ROGUE_ARG(((RogueClassType*)(NULL))) );
      ++i_2;
    }
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[531] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
  }
}

RogueClassCmdCallNativeMethod* RogueCmdCallNativeMethod__init_object( RogueClassCmdCallNativeMethod* THIS )
{
  return (RogueClassCmdCallNativeMethod*)(THIS);
}

RogueString* RogueCmdCallAspectMethod__type_name( RogueClassCmdCallAspectMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1172]);
}

RogueClassCmd* RogueCmdCallAspectMethod__clone__CloneArgs( RogueClassCmdCallAspectMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCallAspectMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ROGUE_ARG(((RogueClassCmdCall*)ROGUE_CREATE_REF(RogueClassCmdCallAspectMethod*,ROGUE_CREATE_OBJECT(CmdCallAspectMethod)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->context), clone_args_0 )))), ROGUE_ARG(THIS->method_info), ROGUE_ARG(((RogueCmdArgs__clone__CloneArgs( ROGUE_ARG(THIS->args), clone_args_0 )))) ))))))));
}

void RogueCmdCallAspectMethod__write_cpp__CPPWriter_Logical( RogueClassCmdCallAspectMethod* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[80] )))), ROGUE_ARG(THIS->method_info->_return_type), ROGUE_ARG(THIS->method_info->_return_type) );
  }
  RogueCPPWriter__print__String( writer_0, ROGUE_ARG(THIS->method_info->cpp_name) );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[505] );
  RogueCPPWriter__print_arg__Cmd_Type_Type( writer_0, ROGUE_ARG(THIS->context), ROGUE_ARG(((RogueClassType*)(NULL))), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object) );
  RogueInt32 i_2 = (0);
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_2036_3,(THIS->args));
    RogueInt32 _auto_2037_4 = (0);
    for (;_auto_2037_4 < _auto_2036_3->count;++_auto_2037_4)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_5,(((RogueClassCmd*)(_auto_2036_3->data->objects[_auto_2037_4]))));
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[502] );
      RogueCPPWriter__print_arg__Cmd_Type_Type( writer_0, arg_5, ROGUE_ARG(((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type), ROGUE_ARG(((RogueClassType*)(NULL))) );
      ++i_2;
    }
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[531] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
  }
}

RogueClassCmdCallAspectMethod* RogueCmdCallAspectMethod__init_object( RogueClassCmdCallAspectMethod* THIS )
{
  return (RogueClassCmdCallAspectMethod*)(THIS);
}

RogueString* RogueCmdCallDynamicMethod__type_name( RogueClassCmdCallDynamicMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1174]);
}

RogueClassCmd* RogueCmdCallDynamicMethod__clone__CloneArgs( RogueClassCmdCallDynamicMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCallDynamicMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ROGUE_ARG(((RogueClassCmdCall*)ROGUE_CREATE_REF(RogueClassCmdCallDynamicMethod*,ROGUE_CREATE_OBJECT(CmdCallDynamicMethod)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->context), clone_args_0 )))), ROGUE_ARG(THIS->method_info), ROGUE_ARG(((RogueCmdArgs__clone__CloneArgs( ROGUE_ARG(THIS->args), clone_args_0 )))) ))))))));
}

void RogueCmdCallDynamicMethod__write_cpp__CPPWriter_Logical( RogueClassCmdCallDynamicMethod* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[80] )))), ROGUE_ARG(THIS->method_info->_return_type), ROGUE_ARG(THIS->method_info->_return_type) );
  }
  if (((RogueMethod__is_overridden( ROGUE_ARG(THIS->method_info) ))))
  {
    RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[986] )))), ROGUE_ARG(THIS->method_info->cpp_typedef) );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[505] );
    RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Int32( writer_0, ROGUE_ARG(THIS->method_info->index) )))), Rogue_literal_strings[502] );
    RogueCPPWriter__print_arg__Cmd_Type_Type( writer_0, ROGUE_ARG(THIS->context), ROGUE_ARG(((RogueClassType*)(NULL))), ROGUE_ARG(THIS->method_info->type_context) );
    RogueInt32 i_2 = (0);
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_2038_3,(THIS->args));
      RogueInt32 _auto_2039_4 = (0);
      for (;_auto_2039_4 < _auto_2038_3->count;++_auto_2039_4)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_5,(((RogueClassCmd*)(_auto_2038_3->data->objects[_auto_2039_4]))));
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[502] );
        RogueCPPWriter__print_arg__Cmd_Type_Type( writer_0, arg_5, ROGUE_ARG(((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type), ROGUE_ARG(((RogueClassType*)(NULL))) );
        ++i_2;
      }
    }
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[531] );
  }
  else
  {
    RogueCmdCallStaticMethod__write_cpp__CPPWriter_Logical( ROGUE_ARG(((RogueClassCmdCallStaticMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ROGUE_ARG(((RogueClassCmdCall*)ROGUE_CREATE_REF(RogueClassCmdCallStaticMethod*,ROGUE_CREATE_OBJECT(CmdCallStaticMethod)))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), ROGUE_ARG(THIS->method_info), ROGUE_ARG(THIS->args) )))))), writer_0, is_statement_1 );
  }
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
  }
}

void RogueCmdCallDynamicMethod__trace_used_code( RogueClassCmdCallDynamicMethod* THIS )
{
  RogueCmdCall__trace_used_code( ROGUE_ARG(((RogueClassCmdCall*)THIS)) );
  if (((RogueMethod__is_overridden( ROGUE_ARG(THIS->method_info) ))))
  {
    THIS->method_info->called_dynamically = true;
  }
}

RogueClassCmdCallDynamicMethod* RogueCmdCallDynamicMethod__init_object( RogueClassCmdCallDynamicMethod* THIS )
{
  return (RogueClassCmdCallDynamicMethod*)(THIS);
}

RogueString* RogueCmdCallMethod__type_name( RogueClassCmdCallMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1173]);
}

RogueClassCmd* RogueCmdCallMethod__call_prior__Scope( RogueClassCmdCallMethod* THIS, RogueClassScope* scope_0 )
{
  if ((((RogueMethod__is_initializer( ROGUE_ARG(THIS->method_info) ))) && ((void*)THIS->method_info->type_context) != ((void*)scope_0->_this_type)))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCallStaticMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ROGUE_ARG(((RogueClassCmdCall*)ROGUE_CREATE_REF(RogueClassCmdCallStaticMethod*,ROGUE_CREATE_OBJECT(CmdCallStaticMethod)))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), ROGUE_ARG(THIS->method_info), ROGUE_ARG(THIS->args) ))))))));
  }
  if (!(!!(THIS->method_info->overridden_method)))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->method_info->signature) )))) )))), Rogue_literal_strings[1040] )))) )))) ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCallStaticMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ROGUE_ARG(((RogueClassCmdCall*)ROGUE_CREATE_REF(RogueClassCmdCallStaticMethod*,ROGUE_CREATE_OBJECT(CmdCallStaticMethod)))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), ROGUE_ARG(THIS->method_info->overridden_method), ROGUE_ARG(THIS->args) ))))))));
}

RogueClassCmdCallMethod* RogueCmdCallMethod__init_object( RogueClassCmdCallMethod* THIS )
{
  return (RogueClassCmdCallMethod*)(THIS);
}

RogueString* RogueCandidateMethods__type_name( RogueClassCandidateMethods* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1139]);
}

RogueClassCandidateMethods* RogueCandidateMethods__init__Type_CmdAccess_Logical( RogueClassCandidateMethods* THIS, RogueClassType* _auto_918_0, RogueClassCmdAccess* _auto_919_1, RogueLogical _auto_920_2 )
{
  THIS->error_on_fail = _auto_920_2;
  THIS->access = _auto_919_1;
  THIS->type_context = _auto_918_0;
  return (RogueClassCandidateMethods*)(THIS);
}

RogueLogical RogueCandidateMethods__has_match( RogueClassCandidateMethods* THIS )
{
  return (RogueLogical)(THIS->available->count == 1);
}

RogueClassMethod* RogueCandidateMethods__match( RogueClassCandidateMethods* THIS )
{
  if (THIS->available->count != 1)
  {
    return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
  }
  return (RogueClassMethod*)(((RogueClassMethod*)(THIS->available->data->objects[0])));
}

RogueLogical RogueCandidateMethods__refine_matches( RogueClassCandidateMethods* THIS )
{
  return (RogueLogical)(((RogueCandidateMethods__update__Logical( ROGUE_ARG(THIS), false ))));
}

RogueLogical RogueCandidateMethods__update_available( RogueClassCandidateMethods* THIS )
{
  return (RogueLogical)(((RogueCandidateMethods__update__Logical( ROGUE_ARG(THIS), false ))));
}

RogueLogical RogueCandidateMethods__update_matches( RogueClassCandidateMethods* THIS )
{
  return (RogueLogical)(((RogueCandidateMethods__update__Logical( ROGUE_ARG(THIS), true ))));
}

RogueLogical RogueCandidateMethods__update__Logical( RogueClassCandidateMethods* THIS, RogueLogical require_compatible_0 )
{
  if (THIS->compatible->count == 0)
  {
    if (THIS->available->count == 0)
    {
      if (!(THIS->error_on_fail))
      {
        return (RogueLogical)(false);
      }
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->access->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[866] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->access->name) )))) )))), Rogue_literal_strings[867] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(THIS->type_context))) )))) )))), Rogue_literal_strings[64] )))) )))) ))));
    }
    else if (require_compatible_0)
    {
      if (!(THIS->error_on_fail))
      {
        return (RogueLogical)(false);
      }
      ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,call_sig_buffer_1,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
      RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( call_sig_buffer_1, ROGUE_ARG(THIS->type_context->name) )))), Rogue_literal_strings[82] );
      RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( call_sig_buffer_1, ROGUE_ARG(THIS->access->name) )))), Rogue_literal_strings[80] );
      if (!!(THIS->access->args))
      {
        {
          ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_2040_4,(THIS->access->args));
          RogueInt32 index_5 = (0);
          for (;index_5 < _auto_2040_4->count;++index_5)
          {
            if (index_5 > 0)
            {
              RogueStringBuilder__print__Character( call_sig_buffer_1, (RogueCharacter)',' );
            }
            RogueStringBuilder__print__String( call_sig_buffer_1, ROGUE_ARG((call_ROGUEM60( 22, ROGUE_ARG(((RogueClassCmd*)(THIS->access->args->data->objects[index_5]))) ))->name) );
          }
        }
      }
      RogueStringBuilder__print__String( call_sig_buffer_1, Rogue_literal_strings[28] );
      ROGUE_DEF_LOCAL_REF(RogueString*,call_sig_2,(((RogueStringBuilder__to_String( call_sig_buffer_1 )))));
      ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_3,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
      if (THIS->available->count > 1)
      {
        RogueStringBuilder__print__String( buffer_3, ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[868] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], call_sig_2 )))) )))), Rogue_literal_strings[869] )))) )))) );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_3, ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[870] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], call_sig_2 )))) )))), Rogue_literal_strings[871] )))) )))) );
      }
      {
        ROGUE_DEF_LOCAL_REF(RogueMethodList*,_auto_2041_6,(THIS->available));
        RogueInt32 _auto_2042_7 = (0);
        for (;_auto_2042_7 < _auto_2041_6->count;++_auto_2042_7)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_8,(((RogueClassMethod*)(_auto_2041_6->data->objects[_auto_2042_7]))));
          RogueStringBuilder__println__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( buffer_3, Rogue_literal_strings[302] )))), ROGUE_ARG(m_8->type_context->name) )))), Rogue_literal_strings[82] )))), ROGUE_ARG(m_8->signature) );
        }
      }
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->access->t), ROGUE_ARG(((RogueStringBuilder__to_String( buffer_3 )))) ))));
    }
    return (RogueLogical)(true);
  }
  RogueMethodList__clear( ROGUE_ARG(THIS->available) );
  RogueMethodList__add__MethodList( ROGUE_ARG(THIS->available), ROGUE_ARG(THIS->compatible) );
  RogueMethodList__clear( ROGUE_ARG(THIS->compatible) );
  return (RogueLogical)(true);
}

RogueClassCandidateMethods* RogueCandidateMethods__init_object( RogueClassCandidateMethods* THIS )
{
  THIS->available = ((RogueMethodList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueMethodList*,ROGUE_CREATE_OBJECT(MethodList))) )));
  THIS->compatible = ((RogueMethodList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueMethodList*,ROGUE_CREATE_OBJECT(MethodList))) )));
  return (RogueClassCandidateMethods*)(THIS);
}

RogueString* RogueCmdCreateFunction__type_name( RogueClassCmdCreateFunction* THIS )
{
  return (RogueString*)(Rogue_literal_strings[828]);
}

RogueClassCmdCreateFunction* RogueCmdCreateFunction__clone__CloneArgs( RogueClassCmdCreateFunction* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueFnArgList*,args2_1,0);
  if (!!(THIS->with_args))
  {
    args2_1 = ((RogueFnArgList*)((RogueFnArgList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueFnArgList*,ROGUE_CREATE_OBJECT(FnArgList))) ))));
    {
      ROGUE_DEF_LOCAL_REF(RogueFnArgList*,_auto_2043_2,(THIS->with_args));
      RogueInt32 _auto_2044_3 = (0);
      for (;_auto_2044_3 < _auto_2043_2->count;++_auto_2044_3)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassFnArg*,arg_4,(((RogueClassFnArg*)(_auto_2043_2->data->objects[_auto_2044_3]))));
        RogueFnArgList__add__FnArg( args2_1, ROGUE_ARG(((RogueFnArg__set_type__Type( ROGUE_ARG(((RogueFnArg__init__String_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassFnArg*,ROGUE_CREATE_OBJECT(FnArg))), ROGUE_ARG(arg_4->name), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(arg_4->value), clone_args_0 ))) )))), ROGUE_ARG(arg_4->_type) )))) );
      }
    }
  }
  return (RogueClassCmdCreateFunction*)(((RogueCmdCreateFunction__init__Token_FnParamList_Type_FnArgList_CmdStatementList_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCreateFunction*,ROGUE_CREATE_OBJECT(CmdCreateFunction))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->parameters), ROGUE_ARG(THIS->_return_type), args2_1, ROGUE_ARG(((RogueCmdStatementList__clone__CloneArgs( ROGUE_ARG(THIS->statements), clone_args_0 )))), ROGUE_ARG(THIS->is_generic) ))));
}

RogueLogical RogueCmdCreateFunction__is_generic_function( RogueClassCmdCreateFunction* THIS )
{
  return (RogueLogical)(THIS->is_generic);
}

RogueClassCmd* RogueCmdCreateFunction__resolve__Scope( RogueClassCmdCreateFunction* THIS, RogueClassScope* scope_0 )
{
  if (THIS->is_generic)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  ROGUE_DEF_LOCAL_REF(RogueTypeList*,parameter_types_1,0);
  if ((!!(THIS->parameters) && !!(THIS->parameters->count)))
  {
    parameter_types_1 = ((RogueTypeList*)((RogueTypeList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueTypeList*,ROGUE_CREATE_OBJECT(TypeList))) ))));
    {
      ROGUE_DEF_LOCAL_REF(RogueFnParamList*,_auto_2045_9,(THIS->parameters));
      RogueInt32 _auto_2046_10 = (0);
      for (;_auto_2046_10 < _auto_2045_9->count;++_auto_2046_10)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassFnParam*,param_11,(((RogueClassFnParam*)(_auto_2045_9->data->objects[_auto_2046_10]))));
        RogueTypeList__add__Type( parameter_types_1, ROGUE_ARG(param_11->_type) );
      }
    }
  }
  ROGUE_DEF_LOCAL_REF(RogueString*,fn_name_2,(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[861], ROGUE_ARG(((RogueProgram__next_unique_integer( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )))) )))));
  ROGUE_DEF_LOCAL_REF(RogueClassType*,fn_type_3,(((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(THIS->t), fn_name_2 )))));
  fn_type_3->defined = true;
  RogueAttributes__add__Int32( ROGUE_ARG(fn_type_3->attributes), 0 );
  ROGUE_DEF_LOCAL_REF(RogueClassType*,base_type_4,(((RogueProgram__get_callback_type_reference__Token_TypeList_Type( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(THIS->t), parameter_types_1, ROGUE_ARG(THIS->_return_type) )))));
  RogueTypeList__add__Type( ROGUE_ARG(fn_type_3->base_types), base_type_4 );
  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_call_5,(((RogueType__add_method__Token_String( fn_type_3, ROGUE_ARG(THIS->t), Rogue_literal_strings[279] )))));
  if (!!(THIS->parameters))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueFnParamList*,_auto_2047_12,(THIS->parameters));
      RogueInt32 _auto_2048_13 = (0);
      for (;_auto_2048_13 < _auto_2047_12->count;++_auto_2048_13)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassFnParam*,param_14,(((RogueClassFnParam*)(_auto_2047_12->data->objects[_auto_2048_13]))));
        RogueMethod__add_parameter__Token_String_Type( m_call_5, ROGUE_ARG(THIS->t), ROGUE_ARG(param_14->name), ROGUE_ARG(param_14->_type) );
      }
    }
  }
  m_call_5->_return_type = THIS->_return_type;
  m_call_5->statements = THIS->statements;
  RogueCmdStatementList__update_this_type__Scope( ROGUE_ARG(m_call_5->statements), ROGUE_ARG(((RogueScope__init__Type_Method( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassScope*,ROGUE_CREATE_OBJECT(Scope))), fn_type_3, m_call_5 )))) );
  if (!!(THIS->with_args))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_init_6,(((RogueType__add_method__Token_String( fn_type_3, ROGUE_ARG(THIS->t), Rogue_literal_strings[345] )))));
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,create_args_7,(((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )))));
    {
      ROGUE_DEF_LOCAL_REF(RogueFnArgList*,_auto_2049_15,(THIS->with_args));
      RogueInt32 _auto_2050_16 = (0);
      for (;_auto_2050_16 < _auto_2049_15->count;++_auto_2050_16)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassFnArg*,fn_arg_17,(((RogueClassFnArg*)(_auto_2049_15->data->objects[_auto_2050_16]))));
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_8,(((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(fn_arg_17->value), scope_0 ))) )))));
        RogueCmdList__add__Cmd( ((RogueCmdList*)create_args_7), arg_8 );
        RogueType__add_property__Token_String_Type_Cmd( fn_type_3, ROGUE_ARG(fn_arg_17->value->t), ROGUE_ARG(fn_arg_17->name), ROGUE_ARG((call_ROGUEM60( 29, arg_8 ))), ROGUE_ARG(((RogueClassCmd*)(NULL))) );
        RogueMethod__add_parameter__Token_String_Type( m_init_6, ROGUE_ARG(fn_arg_17->value->t), ROGUE_ARG(fn_arg_17->name), ROGUE_ARG(((RogueClassType*)(NULL))) );
      }
    }
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), fn_name_2, create_args_7 )))), scope_0 ))));
  }
  else
  {
    RogueAttributes__add__Int32( ROGUE_ARG(fn_type_3->attributes), 1024 );
    return (RogueClassCmd*)(((RogueCmdReadSingleton__resolve__Scope( ROGUE_ARG(((RogueCmdReadSingleton__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadSingleton*,ROGUE_CREATE_OBJECT(CmdReadSingleton))), ROGUE_ARG(THIS->t), fn_type_3 )))), scope_0 ))));
  }
}

RogueClassType* Rogue_CmdCreateFunction__type( RogueClassCmdCreateFunction* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object);
}

RogueClassCmdCreateFunction* RogueCmdCreateFunction__init_object( RogueClassCmdCreateFunction* THIS )
{
  return (RogueClassCmdCreateFunction*)(THIS);
}

RogueClassCmdCreateFunction* RogueCmdCreateFunction__init__Token_FnParamList_Type_FnArgList_CmdStatementList_Logical( RogueClassCmdCreateFunction* THIS, RogueClassToken* _auto_947_0, RogueFnParamList* _auto_948_1, RogueClassType* _auto_949_2, RogueFnArgList* _auto_950_3, RogueClassCmdStatementList* _auto_951_4, RogueLogical _auto_952_5 )
{
  THIS->is_generic = _auto_952_5;
  THIS->statements = _auto_951_4;
  THIS->with_args = _auto_950_3;
  THIS->_return_type = _auto_949_2;
  THIS->parameters = _auto_948_1;
  THIS->t = _auto_947_0;
  return (RogueClassCmdCreateFunction*)(THIS);
}

RogueString* RogueFnParamList__to_String( RogueFnParamList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueFnParamList*,_auto_2051_2,(THIS));
    RogueInt32 _auto_2052_3 = (0);
    for (;_auto_2052_3 < _auto_2051_2->count;++_auto_2052_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassFnParam*,value_4,(((RogueClassFnParam*)(_auto_2051_2->data->objects[_auto_2052_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueFnParamList__type_name( RogueFnParamList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[734]);
}

RogueFnParamList* RogueFnParamList__init_object( RogueFnParamList* THIS )
{
  return (RogueFnParamList*)(THIS);
}

RogueFnParamList* RogueFnParamList__init( RogueFnParamList* THIS )
{
  RogueFnParamList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueFnParamList*)(THIS);
}

RogueFnParamList* RogueFnParamList__init__Int32( RogueFnParamList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassFnParam*), true );
  }
  return (RogueFnParamList*)(THIS);
}

RogueFnParamList* RogueFnParamList__add__FnParam( RogueFnParamList* THIS, RogueClassFnParam* value_0 )
{
  ((RogueFnParamList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueFnParamList*)(THIS);
}

RogueInt32 RogueFnParamList__capacity( RogueFnParamList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueClassFnParam* RogueFnParamList__last( RogueFnParamList* THIS )
{
  return (RogueClassFnParam*)(((RogueClassFnParam*)(THIS->data->objects[(THIS->count - 1)])));
}

RogueFnParamList* RogueFnParamList__reserve__Int32( RogueFnParamList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassFnParam*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueFnParamList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassFnParam*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueFnParamList*)(THIS);
}

RogueString* RogueFnParam__type_name( RogueClassFnParam* THIS )
{
  return (RogueString*)(Rogue_literal_strings[685]);
}

RogueClassFnParam* RogueFnParam__init__String( RogueClassFnParam* THIS, RogueString* _auto_954_0 )
{
  THIS->name = _auto_954_0;
  return (RogueClassFnParam*)(THIS);
}

RogueClassFnParam* RogueFnParam__init_object( RogueClassFnParam* THIS )
{
  return (RogueClassFnParam*)(THIS);
}

RogueString* RogueFnParamArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[775]);
}

RogueString* RogueTypeSpecializerArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[776]);
}

RogueString* RogueCmdReadLocal__type_name( RogueClassCmdReadLocal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[829]);
}

RogueClassCmd* RogueCmdReadLocal__clone__CloneArgs( RogueClassCmdReadLocal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassMacroArgs*,macro_args_1,(((RogueClassMacroArgs*)(RogueObject_as(clone_args_0,RogueTypeMacroArgs)))));
  if (!!(macro_args_1))
  {
    return (RogueClassCmd*)(((RogueMacroArgs__inline_read_local__CmdReadLocal( macro_args_1, ROGUE_ARG(THIS) ))));
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassTaskArgs*,task_args_2,(((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs)))));
    if (!!(task_args_2))
    {
      return (RogueClassCmd*)(((RogueTaskArgs__cmd_read__Token_Local( task_args_2, ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info) ))));
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info) ))))));
}

RogueClassCmd* RogueCmdReadLocal__resolve__Scope( RogueClassCmdReadLocal* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( ROGUE_ARG(THIS->local_info->_type), scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdReadLocal__resolve_adjust__Scope_Int32( RogueClassCmdReadLocal* THIS, RogueClassScope* scope_0, RogueInt32 delta_1 )
{
  return (RogueClassCmd*)(((RogueCmdAdjustLocal__resolve__Scope( ROGUE_ARG(((RogueCmdAdjustLocal__init__Token_Local_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAdjustLocal*,ROGUE_CREATE_OBJECT(CmdAdjustLocal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info), delta_1 )))), scope_0 ))));
}

RogueClassType* Rogue_CmdReadLocal__type( RogueClassCmdReadLocal* THIS )
{
  return (RogueClassType*)(THIS->local_info->_type);
}

void RogueCmdReadLocal__write_cpp__CPPWriter_Logical( RogueClassCmdReadLocal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, ROGUE_ARG(((RogueLocal__cpp_name( ROGUE_ARG(THIS->local_info) )))) );
}

void RogueCmdReadLocal__trace_used_code( RogueClassCmdReadLocal* THIS )
{
  RogueType__trace_used_code( ROGUE_ARG(THIS->local_info->_type) );
}

void RogueCmdReadLocal__update_this_type__Scope( RogueClassCmdReadLocal* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdReadLocal* RogueCmdReadLocal__init_object( RogueClassCmdReadLocal* THIS )
{
  return (RogueClassCmdReadLocal*)(THIS);
}

RogueClassCmdReadLocal* RogueCmdReadLocal__init__Token_Local( RogueClassCmdReadLocal* THIS, RogueClassToken* _auto_1018_0, RogueClassLocal* _auto_1019_1 )
{
  THIS->local_info = _auto_1019_1;
  THIS->t = _auto_1018_0;
  return (RogueClassCmdReadLocal*)(THIS);
}

RogueString* RogueString_MethodTableEntryList__to_String( RogueTableEntry_of_String_MethodList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_String_MethodList*,_auto_2089_2,(THIS));
    RogueInt32 _auto_2090_3 = (0);
    for (;_auto_2090_3 < _auto_2089_2->count;++_auto_2090_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassString_MethodTableEntry*,value_4,(((RogueClassString_MethodTableEntry*)(_auto_2089_2->data->objects[_auto_2090_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_MethodTableEntryList__type_name( RogueTableEntry_of_String_MethodList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[735]);
}

RogueTableEntry_of_String_MethodList* RogueString_MethodTableEntryList__init_object( RogueTableEntry_of_String_MethodList* THIS )
{
  return (RogueTableEntry_of_String_MethodList*)(THIS);
}

RogueTableEntry_of_String_MethodList* RogueString_MethodTableEntryList__init__Int32_String_MethodTableEntry( RogueTableEntry_of_String_MethodList* THIS, RogueInt32 initial_capacity_0, RogueClassString_MethodTableEntry* initial_value_1 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_MethodTableEntry*), true );
    {
      RogueInt32 i_2 = (1);
      RogueInt32 _auto_1020_3 = (initial_capacity_0);
      for (;i_2 <= _auto_1020_3;++i_2)
      {
        RogueString_MethodTableEntryList__add__String_MethodTableEntry( ROGUE_ARG(THIS), initial_value_1 );
      }
    }
  }
  return (RogueTableEntry_of_String_MethodList*)(THIS);
}

RogueTableEntry_of_String_MethodList* RogueString_MethodTableEntryList__add__String_MethodTableEntry( RogueTableEntry_of_String_MethodList* THIS, RogueClassString_MethodTableEntry* value_0 )
{
  ((RogueString_MethodTableEntryList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_MethodList*)(THIS);
}

RogueInt32 RogueString_MethodTableEntryList__capacity( RogueTableEntry_of_String_MethodList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_MethodList* RogueString_MethodTableEntryList__reserve__Int32( RogueTableEntry_of_String_MethodList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassString_MethodTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueString_MethodTableEntryList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassString_MethodTableEntry*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_MethodList*)(THIS);
}

RogueString* RogueString_MethodTableEntry__type_name( RogueClassString_MethodTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[686]);
}

RogueClassString_MethodTableEntry* RogueString_MethodTableEntry__init__String_Method_Int32( RogueClassString_MethodTableEntry* THIS, RogueString* _key_0, RogueClassMethod* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_MethodTableEntry*)(THIS);
}

RogueClassString_MethodTableEntry* RogueString_MethodTableEntry__init_object( RogueClassString_MethodTableEntry* THIS )
{
  return (RogueClassString_MethodTableEntry*)(THIS);
}

RogueString* RogueString_MethodTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[777]);
}

RogueString* RogueString_LogicalTableEntryList__to_String( RogueTableEntry_of_String_LogicalList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_String_LogicalList*,_auto_2138_2,(THIS));
    RogueInt32 _auto_2139_3 = (0);
    for (;_auto_2139_3 < _auto_2138_2->count;++_auto_2139_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassString_LogicalTableEntry*,value_4,(((RogueClassString_LogicalTableEntry*)(_auto_2138_2->data->objects[_auto_2139_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_LogicalTableEntryList__type_name( RogueTableEntry_of_String_LogicalList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[736]);
}

RogueTableEntry_of_String_LogicalList* RogueString_LogicalTableEntryList__init_object( RogueTableEntry_of_String_LogicalList* THIS )
{
  return (RogueTableEntry_of_String_LogicalList*)(THIS);
}

RogueTableEntry_of_String_LogicalList* RogueString_LogicalTableEntryList__init__Int32_String_LogicalTableEntry( RogueTableEntry_of_String_LogicalList* THIS, RogueInt32 initial_capacity_0, RogueClassString_LogicalTableEntry* initial_value_1 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_LogicalTableEntry*), true );
    {
      RogueInt32 i_2 = (1);
      RogueInt32 _auto_1136_3 = (initial_capacity_0);
      for (;i_2 <= _auto_1136_3;++i_2)
      {
        RogueString_LogicalTableEntryList__add__String_LogicalTableEntry( ROGUE_ARG(THIS), initial_value_1 );
      }
    }
  }
  return (RogueTableEntry_of_String_LogicalList*)(THIS);
}

RogueTableEntry_of_String_LogicalList* RogueString_LogicalTableEntryList__add__String_LogicalTableEntry( RogueTableEntry_of_String_LogicalList* THIS, RogueClassString_LogicalTableEntry* value_0 )
{
  ((RogueString_LogicalTableEntryList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_LogicalList*)(THIS);
}

RogueInt32 RogueString_LogicalTableEntryList__capacity( RogueTableEntry_of_String_LogicalList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_LogicalList* RogueString_LogicalTableEntryList__reserve__Int32( RogueTableEntry_of_String_LogicalList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassString_LogicalTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueString_LogicalTableEntryList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassString_LogicalTableEntry*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_LogicalList*)(THIS);
}

RogueString* RogueString_LogicalTableEntry__type_name( RogueClassString_LogicalTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[687]);
}

RogueClassString_LogicalTableEntry* RogueString_LogicalTableEntry__init__String_Logical_Int32( RogueClassString_LogicalTableEntry* THIS, RogueString* _key_0, RogueLogical _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_LogicalTableEntry*)(THIS);
}

RogueClassString_LogicalTableEntry* RogueString_LogicalTableEntry__init_object( RogueClassString_LogicalTableEntry* THIS )
{
  return (RogueClassString_LogicalTableEntry*)(THIS);
}

RogueString* RogueString_LogicalTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[778]);
}

RogueString* RogueTokenReader__type_name( RogueClassTokenReader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[688]);
}

RogueClassTokenReader* RogueTokenReader__init__TokenList( RogueClassTokenReader* THIS, RogueTokenList* _auto_1175_0 )
{
  THIS->tokens = _auto_1175_0;
  THIS->count = THIS->tokens->count;
  return (RogueClassTokenReader*)(THIS);
}

RogueClassError* RogueTokenReader__error__String( RogueClassTokenReader* THIS, RogueString* message_0 )
{
  if (((RogueTokenReader__has_another( ROGUE_ARG(THIS) ))))
  {
    return (RogueClassError*)(((RogueClassError*)(((RogueToken__error__String( ROGUE_ARG(((RogueTokenReader__peek( ROGUE_ARG(THIS) )))), message_0 ))))));
  }
  if (!!(THIS->count))
  {
    return (RogueClassError*)(((RogueClassError*)(((RogueToken__error__String( ROGUE_ARG(((RogueTokenList__last( ROGUE_ARG(THIS->tokens) )))), message_0 ))))));
  }
  return (RogueClassError*)(((RogueClassError*)(((RogueRogueError__init__String_String_Int32_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassRogueError*,ROGUE_CREATE_OBJECT(RogueError))), message_0, ROGUE_ARG(((RogueString*)(NULL))), 0, 0 ))))));
}

RogueLogical RogueTokenReader__has_another( RogueClassTokenReader* THIS )
{
  return (RogueLogical)(THIS->position < THIS->count);
}

RogueLogical RogueTokenReader__next_is__TokenType( RogueClassTokenReader* THIS, RogueClassTokenType* type_0 )
{
  if (THIS->position == THIS->count)
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(((void*)((RogueClassToken*)(THIS->tokens->data->objects[THIS->position]))->_type) == ((void*)type_0));
}

RogueLogical RogueTokenReader__next_is_statement_token( RogueClassTokenReader* THIS )
{
  if (THIS->position == THIS->count)
  {
    return (RogueLogical)(false);
  }
  if ((call_ROGUEM97( 15, ROGUE_ARG(((RogueClassToken*)(THIS->tokens->data->objects[THIS->position]))->_type) )))
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(true);
}

RogueClassToken* RogueTokenReader__peek( RogueClassTokenReader* THIS )
{
  if (THIS->position == THIS->count)
  {
    return (RogueClassToken*)(((RogueTokenType__create_token__Token( ROGUE_ARG(RogueTokenType_eoi), ROGUE_ARG(((RogueTokenList__last( ROGUE_ARG(THIS->tokens) )))) ))));
  }
  return (RogueClassToken*)(((RogueClassToken*)(THIS->tokens->data->objects[THIS->position])));
}

RogueClassToken* RogueTokenReader__peek__Int32( RogueClassTokenReader* THIS, RogueInt32 num_ahead_0 )
{
  if ((THIS->position + num_ahead_0) >= THIS->count)
  {
    return (RogueClassToken*)(((RogueTokenType__create_token__Token( ROGUE_ARG(RogueTokenType_eoi), ROGUE_ARG(((RogueTokenList__last( ROGUE_ARG(THIS->tokens) )))) ))));
  }
  return (RogueClassToken*)(((RogueClassToken*)(THIS->tokens->data->objects[(THIS->position + num_ahead_0)])));
}

RogueClassToken* RogueTokenReader__read( RogueClassTokenReader* THIS )
{
  ++THIS->position;
  return (RogueClassToken*)(((RogueClassToken*)(THIS->tokens->data->objects[(THIS->position - 1)])));
}

RogueClassTokenReader* RogueTokenReader__init_object( RogueClassTokenReader* THIS )
{
  return (RogueClassTokenReader*)(THIS);
}

RogueString* RogueString_StringTable__to_String( RogueClassString_StringTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueString_StringTable__print_to__StringBuilder( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))) )))) ))));
}

RogueString* RogueString_StringTable__type_name( RogueClassString_StringTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[689]);
}

RogueClassString_StringTable* RogueString_StringTable__init( RogueClassString_StringTable* THIS )
{
  RogueString_StringTable__init__Int32( ROGUE_ARG(THIS), 16 );
  return (RogueClassString_StringTable*)(THIS);
}

RogueClassString_StringTable* RogueString_StringTable__init__Int32( RogueClassString_StringTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_StringTableEntryList__init__Int32_String_StringTableEntry( ROGUE_ARG(ROGUE_CREATE_REF(RogueTableEntry_of_String_StringList*,ROGUE_CREATE_OBJECT(TableEntry_of_String_StringList))), bin_count_0, ROGUE_ARG(((RogueClassString_StringTableEntry*)(NULL))) )));
  THIS->keys = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  return (RogueClassString_StringTable*)(THIS);
}

RogueClassString_StringTableEntry* RogueString_StringTable__find__String( RogueClassString_StringTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  ROGUE_DEF_LOCAL_REF(RogueClassString_StringTableEntry*,entry_2,(((RogueClassString_StringTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)]))));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_2->key), key_0 )))))
    {
      return (RogueClassString_StringTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_StringTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_StringTableEntry*)(((RogueClassString_StringTableEntry*)(NULL)));
}

RogueString* RogueString_StringTable__get__String( RogueClassString_StringTable* THIS, RogueString* key_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassString_StringTableEntry*,entry_1,(((RogueString_StringTable__find__String( ROGUE_ARG(THIS), key_0 )))));
  if (!!(entry_1))
  {
    return (RogueString*)(entry_1->value);
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,default_value_2,0);
    return (RogueString*)(default_value_2);
  }
}

RogueClassString_StringTable* RogueString_StringTable__set__String_String( RogueClassString_StringTable* THIS, RogueString* key_0, RogueString* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  ROGUE_DEF_LOCAL_REF(RogueClassString_StringTableEntry*,entry_4,(((RogueClassString_StringTableEntry*)(THIS->bins->data->objects[index_3]))));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_4->key), key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_StringTable*)(THIS);
    }
    entry_4 = ((RogueClassString_StringTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_StringTableEntry*)((RogueString_StringTableEntry__init__String_String_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_StringTableEntry*,ROGUE_CREATE_OBJECT(String_StringTableEntry))), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_StringTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( ROGUE_ARG(THIS->keys), key_0 );
  return (RogueClassString_StringTable*)(THIS);
}

RogueStringBuilder* RogueString_StringTable__print_to__StringBuilder( RogueClassString_StringTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    ROGUE_DEF_LOCAL_REF(RogueString*,key_2,(((RogueString*)(THIS->keys->data->objects[i_1]))));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__String( buffer_0, ROGUE_ARG(((RogueString_StringTable__get__String( ROGUE_ARG(THIS), key_2 )))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_StringTable* RogueString_StringTable__init_object( RogueClassString_StringTable* THIS )
{
  return (RogueClassString_StringTable*)(THIS);
}

RogueString* RogueTokenizer__type_name( RogueClassTokenizer* THIS )
{
  return (RogueString*)(Rogue_literal_strings[690]);
}

RogueTokenList* RogueTokenizer__tokenize__String( RogueClassTokenizer* THIS, RogueString* _auto_1180_0 )
{
  THIS->filepath = _auto_1180_0;
  return (RogueTokenList*)(((RogueTokenizer__tokenize__ParseReader( ROGUE_ARG(THIS), ROGUE_ARG(((RogueParseReader__init__File_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassParseReader*,ROGUE_CREATE_OBJECT(ParseReader))), ROGUE_ARG(((RogueFile__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassFile*,ROGUE_CREATE_OBJECT(File))), ROGUE_ARG(THIS->filepath) )))), 2 )))) ))));
}

RogueTokenList* RogueTokenizer__tokenize__Token_String_String( RogueClassTokenizer* THIS, RogueClassToken* reference_t_0, RogueString* _auto_1181_1, RogueString* data_2 )
{
  THIS->filepath = _auto_1181_1;
  ROGUE_DEF_LOCAL_REF(RogueCharacterList*,characters_3,(((RogueCharacterList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueCharacterList*,ROGUE_CREATE_OBJECT(CharacterList))), ROGUE_ARG(data_2->count) )))));
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,_auto_2183_4,(data_2));
    RogueInt32 _auto_2184_5 = (0);
    for (;_auto_2184_5 < _auto_2183_4->count;++_auto_2184_5)
    {
      RogueCharacter ch_6 = (_auto_2183_4->characters[_auto_2184_5]);
      RogueCharacterList__add__Character( characters_3, ch_6 );
    }
  }
  return (RogueTokenList*)(((RogueTokenizer__tokenize__ParseReader( ROGUE_ARG(THIS), ROGUE_ARG(((RogueParseReader__set_location__Int32_Int32( ROGUE_ARG(((RogueParseReader__init__CharacterList_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassParseReader*,ROGUE_CREATE_OBJECT(ParseReader))), characters_3, 2 )))), ROGUE_ARG(reference_t_0->line), ROGUE_ARG(reference_t_0->column) )))) ))));
}

RogueTokenList* RogueTokenizer__tokenize__ParseReader( RogueClassTokenizer* THIS, RogueClassParseReader* _auto_1182_0 )
{
  THIS->reader = _auto_1182_0;
  RogueString_ParseReaderTable__set__String_ParseReader( ROGUE_ARG(((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->parsereaders_by_filepath), ROGUE_ARG(THIS->filepath), ROGUE_ARG(THIS->reader) );
  RogueTokenizer__configure_token_types( ROGUE_ARG(THIS) );
  while (((RogueTokenizer__tokenize_another( ROGUE_ARG(THIS) ))))
  {
  }
  if (THIS->tokens->count == 0)
  {
    if ((THIS->tokens->count == 0 || ((void*)((RogueTokenList__last( ROGUE_ARG(THIS->tokens) )))->_type) != ((void*)RogueTokenType_eol)))
    {
      RogueTokenizer__add_new_token__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_eol) );
    }
  }
  return (RogueTokenList*)(THIS->tokens);
}

RogueLogical RogueTokenizer__add_new_string_or_character_token_from_buffer__Character( RogueClassTokenizer* THIS, RogueCharacter terminator_0 )
{
  if ((THIS->buffer->characters->count == 1 && terminator_0 == (RogueCharacter)'\''))
  {
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Character( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_literal_character), ROGUE_ARG(THIS->buffer->characters->data->characters[0]) ))));
  }
  else
  {
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_literal_string), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(THIS->buffer) )))) ))));
  }
}

RogueLogical RogueTokenizer__add_new_token__TokenType( RogueClassTokenizer* THIS, RogueClassTokenType* type_0 )
{
  RogueTokenList__add__Token( ROGUE_ARG(THIS->tokens), ROGUE_ARG((call_ROGUEM94( 4, type_0, ROGUE_ARG(THIS->next_filepath), ROGUE_ARG(THIS->next_line), ROGUE_ARG(THIS->next_column) ))) );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__add_new_token__TokenType_Character( RogueClassTokenizer* THIS, RogueClassTokenType* type_0, RogueCharacter value_1 )
{
  RogueTokenList__add__Token( ROGUE_ARG(THIS->tokens), ROGUE_ARG(((RogueTokenType__create_token__String_Int32_Int32_Character( type_0, ROGUE_ARG(THIS->next_filepath), ROGUE_ARG(THIS->next_line), ROGUE_ARG(THIS->next_column), value_1 )))) );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__add_new_token__TokenType_Int64( RogueClassTokenizer* THIS, RogueClassTokenType* type_0, RogueInt64 value_1 )
{
  RogueTokenList__add__Token( ROGUE_ARG(THIS->tokens), ROGUE_ARG(((RogueTokenType__create_token__String_Int32_Int32_Int64( type_0, ROGUE_ARG(THIS->next_filepath), ROGUE_ARG(THIS->next_line), ROGUE_ARG(THIS->next_column), value_1 )))) );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__add_new_token__TokenType_Int32( RogueClassTokenizer* THIS, RogueClassTokenType* type_0, RogueInt32 value_1 )
{
  RogueTokenList__add__Token( ROGUE_ARG(THIS->tokens), ROGUE_ARG(((RogueTokenType__create_token__String_Int32_Int32_Int32( type_0, ROGUE_ARG(THIS->next_filepath), ROGUE_ARG(THIS->next_line), ROGUE_ARG(THIS->next_column), value_1 )))) );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__add_new_token__TokenType_Real64( RogueClassTokenizer* THIS, RogueClassTokenType* type_0, RogueReal64 value_1 )
{
  RogueTokenList__add__Token( ROGUE_ARG(THIS->tokens), ROGUE_ARG(((RogueTokenType__create_token__String_Int32_Int32_Real64( type_0, ROGUE_ARG(THIS->next_filepath), ROGUE_ARG(THIS->next_line), ROGUE_ARG(THIS->next_column), value_1 )))) );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__add_new_token__TokenType_String( RogueClassTokenizer* THIS, RogueClassTokenType* type_0, RogueString* value_1 )
{
  RogueTokenList__add__Token( ROGUE_ARG(THIS->tokens), ROGUE_ARG((call_ROGUEM95( 9, type_0, ROGUE_ARG(THIS->next_filepath), ROGUE_ARG(THIS->next_line), ROGUE_ARG(THIS->next_column), value_1 ))) );
  return (RogueLogical)(true);
}

void RogueTokenizer__configure_token_types( RogueClassTokenizer* THIS )
{
  if (!!(RogueTokenType_lookup))
  {
    return;
  }
  RogueTokenType_lookup = ((RogueString_TokenTypeTable__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_TokenTypeTable*,ROGUE_CREATE_OBJECT(String_TokenTypeTable))) )));
  RogueTokenType_directive_define = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassDirectiveTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassDirectiveTokenType*,ROGUE_CREATE_OBJECT(DirectiveTokenType)))), Rogue_literal_strings[83] )))))))) )));
  RogueTokenType_directive_include = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassDirectiveTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassDirectiveTokenType*,ROGUE_CREATE_OBJECT(DirectiveTokenType)))), Rogue_literal_strings[84] )))))))) )));
  RogueTokenType_directive_includeNativeCode = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassDirectiveTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassDirectiveTokenType*,ROGUE_CREATE_OBJECT(DirectiveTokenType)))), Rogue_literal_strings[85] )))))))) )));
  RogueTokenType_directive_includeNativeHeader = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassDirectiveTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassDirectiveTokenType*,ROGUE_CREATE_OBJECT(DirectiveTokenType)))), Rogue_literal_strings[86] )))))))) )));
  RogueTokenType_directive_if = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassDirectiveTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassDirectiveTokenType*,ROGUE_CREATE_OBJECT(DirectiveTokenType)))), Rogue_literal_strings[87] )))))))) )));
  RogueTokenType_directive_elseIf = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassDirectiveTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassDirectiveTokenType*,ROGUE_CREATE_OBJECT(DirectiveTokenType)))), Rogue_literal_strings[88] )))))))) )));
  RogueTokenType_directive_else = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassDirectiveTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassDirectiveTokenType*,ROGUE_CREATE_OBJECT(DirectiveTokenType)))), Rogue_literal_strings[89] )))))))) )));
  RogueTokenType_directive_endIf = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassDirectiveTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassDirectiveTokenType*,ROGUE_CREATE_OBJECT(DirectiveTokenType)))), Rogue_literal_strings[90] )))))))) )));
  RogueTokenType_directive_requisite = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassDirectiveTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassDirectiveTokenType*,ROGUE_CREATE_OBJECT(DirectiveTokenType)))), Rogue_literal_strings[91] )))))))) )));
  RogueTokenType_directive_module = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructuralDirectiveTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructuralDirectiveTokenType*,ROGUE_CREATE_OBJECT(StructuralDirectiveTokenType)))), Rogue_literal_strings[92] )))))))) )));
  RogueTokenType_directive_using = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructuralDirectiveTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructuralDirectiveTokenType*,ROGUE_CREATE_OBJECT(StructuralDirectiveTokenType)))), Rogue_literal_strings[93] )))))))) )));
  RogueTokenType_placeholder_id = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[94] )))) )));
  RogueTokenType_eol = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassEOLTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassEOLTokenType*,ROGUE_CREATE_OBJECT(EOLTokenType)))), Rogue_literal_strings[95] )))))))) )));
  RogueTokenType_eoi = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[96] )))))))) )));
  RogueTokenType_begin_augment_tokens = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[95] )))))))) )));
  RogueTokenType_keyword_augment = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[97] )))))))) )));
  RogueTokenType_keyword_case = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[98] )))))))) )));
  RogueTokenType_keyword_catch = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[99] )))))))) )));
  RogueTokenType_keyword_class = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[100] )))))))) )));
  RogueTokenType_keyword_DEFINITIONS = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[101] )))))))) )));
  RogueTokenType_keyword_else = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[102] )))))))) )));
  RogueTokenType_keyword_elseIf = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[103] )))))))) )));
  RogueTokenType_keyword_endAugment = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[104] )))))))) )));
  RogueTokenType_keyword_endClass = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[105] )))))))) )));
  RogueTokenType_keyword_endContingent = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[106] )))))))) )));
  RogueTokenType_keyword_endForEach = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[107] )))))))) )));
  RogueTokenType_keyword_endFunction = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[108] )))))))) )));
  RogueTokenType_keyword_endIf = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[109] )))))))) )));
  RogueTokenType_keyword_endLoop = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[110] )))))))) )));
  RogueTokenType_keyword_endRoutine = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[111] )))))))) )));
  RogueTokenType_keyword_endTry = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[112] )))))))) )));
  RogueTokenType_keyword_endWhich = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[113] )))))))) )));
  RogueTokenType_keyword_endWhile = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[114] )))))))) )));
  RogueTokenType_keyword_ENUMERATE = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[115] )))))))) )));
  RogueTokenType_keyword_GLOBAL = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[116] )))))))) )));
  RogueTokenType_keyword_GLOBAL_METHODS = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[117] )))))))) )));
  RogueTokenType_keyword_GLOBAL_PROPERTIES = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[118] )))))))) )));
  RogueTokenType_keyword_macro = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[119] )))))))) )));
  RogueTokenType_keyword_method = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[120] )))))))) )));
  RogueTokenType_keyword_METHODS = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[121] )))))))) )));
  RogueTokenType_keyword_others = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[122] )))))))) )));
  RogueTokenType_keyword_PROPERTIES = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[123] )))))))) )));
  RogueTokenType_keyword_routine = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[124] )))))))) )));
  RogueTokenType_keyword_satisfied = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[125] )))))))) )));
  RogueTokenType_keyword_unsatisfied = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[126] )))))))) )));
  RogueTokenType_keyword_with = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[127] )))))))) )));
  RogueTokenType_symbol_close_brace = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[128] )))))))) )));
  RogueTokenType_symbol_close_bracket = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[39] )))))))) )));
  RogueTokenType_symbol_close_comment = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[129] )))))))) )));
  RogueTokenType_symbol_close_paren = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[28] )))))))) )));
  RogueTokenType_symbol_close_specialize = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassStructureTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassStructureTokenType*,ROGUE_CREATE_OBJECT(StructureTokenType)))), Rogue_literal_strings[130] )))))))) )));
  RogueTokenType_keyword_await = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[131] )))) )));
  RogueTokenType_keyword_contingent = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[132] )))) )));
  RogueTokenType_keyword_escapeContingent = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[133] )))) )));
  RogueTokenType_keyword_escapeForEach = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[134] )))) )));
  RogueTokenType_keyword_escapeIf = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[135] )))) )));
  RogueTokenType_keyword_escapeLoop = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[136] )))) )));
  RogueTokenType_keyword_escapeTry = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[137] )))) )));
  RogueTokenType_keyword_escapeWhich = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[138] )))) )));
  RogueTokenType_keyword_escapeWhile = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[139] )))) )));
  RogueTokenType_keyword_forEach = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[140] )))) )));
  RogueTokenType_keyword_function = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[141] )))) )));
  RogueTokenType_keyword_global = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[142] )))) )));
  RogueTokenType_keyword_if = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[143] )))) )));
  RogueTokenType_keyword_in = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[144] )))) )));
  RogueTokenType_keyword_is = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[145] )))) )));
  RogueTokenType_keyword_isNot = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[146] )))) )));
  RogueTokenType_keyword_local = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[147] )))) )));
  RogueTokenType_keyword_loop = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[148] )))) )));
  RogueTokenType_keyword_native = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[149] )))) )));
  RogueTokenType_keyword_nativeCode = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassNativeCodeTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassNativeCodeTokenType*,ROGUE_CREATE_OBJECT(NativeCodeTokenType)))), Rogue_literal_strings[150] )))))))) )));
  RogueTokenType_keyword_nativeHeader = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassNativeCodeTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassNativeCodeTokenType*,ROGUE_CREATE_OBJECT(NativeCodeTokenType)))), Rogue_literal_strings[151] )))))))) )));
  RogueTokenType_keyword_necessary = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[152] )))) )));
  RogueTokenType_keyword_nextIteration = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[153] )))) )));
  RogueTokenType_keyword_noAction = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[154] )))) )));
  RogueTokenType_keyword_null = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[2] )))) )));
  RogueTokenType_keyword_of = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[155] )))) )));
  RogueTokenType_keyword_return = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[156] )))) )));
  RogueTokenType_keyword_select = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[157] )))) )));
  RogueTokenType_keyword_step = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[158] )))) )));
  RogueTokenType_keyword_sufficient = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[159] )))) )));
  RogueTokenType_keyword_throw = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[160] )))) )));
  RogueTokenType_keyword_trace = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[161] )))) )));
  RogueTokenType_keyword_trace_position = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[162] )))) )));
  RogueTokenType_keyword_try = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[163] )))) )));
  RogueTokenType_keyword_which = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[164] )))) )));
  RogueTokenType_keyword_while = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[165] )))) )));
  RogueTokenType_keyword_yield = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[166] )))) )));
  RogueTokenType_identifier = ((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[167] )));
  RogueTokenType_type_identifier = ((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[168] )));
  RogueTokenType_literal_character = ((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[49] )));
  RogueTokenType_literal_integer = ((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[48] )));
  RogueTokenType_literal_long = ((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[47] )));
  RogueTokenType_literal_real = ((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[45] )));
  RogueTokenType_literal_string = ((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[53] )));
  RogueTokenType_keyword_and = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[169] )))) )));
  RogueTokenType_keyword_as = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[170] )))) )));
  RogueTokenType_keyword_downTo = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[171] )))) )));
  RogueTokenType_keyword_false = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[172] )))) )));
  RogueTokenType_keyword_instanceOf = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[173] )))) )));
  RogueTokenType_keyword_infinity = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[174] )))) )));
  RogueTokenType_keyword_meta = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[175] )))) )));
  RogueTokenType_keyword_NaN = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[176] )))) )));
  RogueTokenType_keyword_not = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[177] )))) )));
  RogueTokenType_keyword_notInstanceOf = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[178] )))) )));
  RogueTokenType_keyword_or = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[179] )))) )));
  RogueTokenType_keyword_pi = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[180] )))) )));
  RogueTokenType_keyword_prior = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[181] )))) )));
  RogueTokenType_keyword_this = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[182] )))) )));
  RogueTokenType_keyword_true = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[183] )))) )));
  RogueTokenType_keyword_xor = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[184] )))) )));
  RogueTokenType_symbol_ampersand = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[185] )))) )));
  RogueTokenType_symbol_ampersand_equals = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassModifyAndAssignTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassModifyAndAssignTokenType*,ROGUE_CREATE_OBJECT(ModifyAndAssignTokenType)))), Rogue_literal_strings[186] )))))))) )));
  RogueTokenType_symbol_arrow = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[187] )))) )));
  RogueTokenType_symbol_at = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[188] )))) )));
  RogueTokenType_symbol_backslash = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[189] )))) )));
  RogueTokenType_symbol_caret = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[190] )))) )));
  RogueTokenType_symbol_caret_equals = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassModifyAndAssignTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassModifyAndAssignTokenType*,ROGUE_CREATE_OBJECT(ModifyAndAssignTokenType)))), Rogue_literal_strings[191] )))))))) )));
  RogueTokenType_symbol_colon = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[192] )))) )));
  RogueTokenType_symbol_comma = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[193] )))) )));
  RogueTokenType_symbol_compare = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[194] )))) )));
  RogueTokenType_symbol_dot = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[64] )))) )));
  RogueTokenType_symbol_dot_equals = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassModifyAndAssignTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassModifyAndAssignTokenType*,ROGUE_CREATE_OBJECT(ModifyAndAssignTokenType)))), Rogue_literal_strings[195] )))))))) )));
  RogueTokenType_symbol_downToGreaterThan = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[196] )))) )));
  RogueTokenType_symbol_empty_braces = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[197] )))) )));
  RogueTokenType_symbol_empty_brackets = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[198] )))) )));
  RogueTokenType_symbol_eq = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[199] )))) )));
  RogueTokenType_symbol_equals = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[200] )))) )));
  RogueTokenType_symbol_exclamation_point = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[201] )))) )));
  RogueTokenType_symbol_fat_arrow = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[202] )))) )));
  RogueTokenType_symbol_ge = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[203] )))) )));
  RogueTokenType_symbol_gt = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[204] )))) )));
  RogueTokenType_symbol_le = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[205] )))) )));
  RogueTokenType_symbol_lt = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[206] )))) )));
  RogueTokenType_symbol_minus = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[207] )))) )));
  RogueTokenType_symbol_minus_equals = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassModifyAndAssignTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassModifyAndAssignTokenType*,ROGUE_CREATE_OBJECT(ModifyAndAssignTokenType)))), Rogue_literal_strings[208] )))))))) )));
  RogueTokenType_symbol_minus_minus = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[7] )))) )));
  RogueTokenType_symbol_ne = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[209] )))) )));
  RogueTokenType_symbol_open_brace = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[210] )))) )));
  RogueTokenType_symbol_open_bracket = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[211] )))) )));
  RogueTokenType_symbol_open_paren = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[80] )))) )));
  RogueTokenType_symbol_open_specialize = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[212] )))) )));
  RogueTokenType_symbol_percent = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[213] )))) )));
  RogueTokenType_symbol_percent_equals = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassModifyAndAssignTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassModifyAndAssignTokenType*,ROGUE_CREATE_OBJECT(ModifyAndAssignTokenType)))), Rogue_literal_strings[214] )))))))) )));
  RogueTokenType_symbol_plus = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[215] )))) )));
  RogueTokenType_symbol_plus_equals = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassModifyAndAssignTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassModifyAndAssignTokenType*,ROGUE_CREATE_OBJECT(ModifyAndAssignTokenType)))), Rogue_literal_strings[216] )))))))) )));
  RogueTokenType_symbol_plus_plus = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[217] )))) )));
  RogueTokenType_symbol_question_mark = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[218] )))) )));
  RogueTokenType_symbol_semicolon = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[219] )))) )));
  RogueTokenType_symbol_shift_left = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[220] )))) )));
  RogueTokenType_symbol_shift_right = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[221] )))) )));
  RogueTokenType_symbol_shift_right_x = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[222] )))) )));
  RogueTokenType_symbol_slash = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[61] )))) )));
  RogueTokenType_symbol_slash_equals = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassModifyAndAssignTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassModifyAndAssignTokenType*,ROGUE_CREATE_OBJECT(ModifyAndAssignTokenType)))), Rogue_literal_strings[223] )))))))) )));
  RogueTokenType_symbol_tilde = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[224] )))) )));
  RogueTokenType_symbol_tilde_equals = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassModifyAndAssignTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassModifyAndAssignTokenType*,ROGUE_CREATE_OBJECT(ModifyAndAssignTokenType)))), Rogue_literal_strings[225] )))))))) )));
  RogueTokenType_symbol_times = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[226] )))) )));
  RogueTokenType_symbol_times_equals = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassModifyAndAssignTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassModifyAndAssignTokenType*,ROGUE_CREATE_OBJECT(ModifyAndAssignTokenType)))), Rogue_literal_strings[227] )))))))) )));
  RogueTokenType_symbol_upTo = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[228] )))) )));
  RogueTokenType_symbol_upToLessThan = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[229] )))) )));
  RogueTokenType_symbol_vertical_bar = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[230] )))) )));
  RogueTokenType_symbol_vertical_bar_equals = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassTokenType*)(((RogueClassModifyAndAssignTokenType*)(((RogueTokenType__init__String( ROGUE_ARG(((RogueClassTokenType*)ROGUE_CREATE_REF(RogueClassModifyAndAssignTokenType*,ROGUE_CREATE_OBJECT(ModifyAndAssignTokenType)))), Rogue_literal_strings[231] )))))))) )));
  RogueTokenType_symbol_double_vertical_bar = ((RogueTokenizer__define__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(((RogueTokenType__init__String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassTokenType*,ROGUE_CREATE_OBJECT(TokenType))), Rogue_literal_strings[232] )))) )));
}

RogueLogical RogueTokenizer__consume__Character( RogueClassTokenizer* THIS, RogueCharacter ch_0 )
{
  if (((RogueParseReader__peek( ROGUE_ARG(THIS->reader) ))) != ch_0)
  {
    return (RogueLogical)(false);
  }
  RogueParseReader__read( ROGUE_ARG(THIS->reader) );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__consume__String( RogueClassTokenizer* THIS, RogueString* st_0 )
{
  return (RogueLogical)(((RogueParseReader__consume__String( ROGUE_ARG(THIS->reader), st_0 ))));
}

RogueLogical RogueTokenizer__consume_id__String( RogueClassTokenizer* THIS, RogueString* st_0 )
{
  return (RogueLogical)(((RogueParseReader__consume_id__String( ROGUE_ARG(THIS->reader), st_0 ))));
}

RogueLogical RogueTokenizer__consume_spaces( RogueClassTokenizer* THIS )
{
  if (!(((RogueParseReader__consume__Character( ROGUE_ARG(THIS->reader), (RogueCharacter)' ' )))))
  {
    return (RogueLogical)(false);
  }
  while (((RogueParseReader__consume__Character( ROGUE_ARG(THIS->reader), (RogueCharacter)' ' ))))
  {
  }
  return (RogueLogical)(true);
}

RogueClassTokenType* RogueTokenizer__define__TokenType( RogueClassTokenizer* THIS, RogueClassTokenType* type_0 )
{
  RogueString_TokenTypeTable__set__String_TokenType( ROGUE_ARG(RogueTokenType_lookup), ROGUE_ARG(type_0->name), type_0 );
  return (RogueClassTokenType*)(type_0);
}

RogueClassRogueError* RogueTokenizer__error__String( RogueClassTokenizer* THIS, RogueString* message_0 )
{
  return (RogueClassRogueError*)(((RogueRogueError__init__String_String_Int32_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassRogueError*,ROGUE_CREATE_OBJECT(RogueError))), message_0, ROGUE_ARG(THIS->filepath), ROGUE_ARG(THIS->reader->line), ROGUE_ARG(THIS->reader->column) ))));
}

RogueClassTokenType* Rogue_Tokenizer__get_symbol_token_type( RogueClassTokenizer* THIS )
{
  RogueCharacter ch_0 = (((RogueParseReader__read( ROGUE_ARG(THIS->reader) ))));
  if (ch_0 == (RogueCharacter)'!')
  {
    if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_ne);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_exclamation_point);
    }
  }
  else if (ch_0 == (RogueCharacter)'$')
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,id_1,(((RogueTokenizer__read_identifier( ROGUE_ARG(THIS) )))));
    {
      if (((RogueString__operatorEQUALSEQUALS__String( id_1, Rogue_literal_strings[252] ))))
      {
        RogueTokenizer__add_new_token__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_directive_define) );
      }
      else if (((RogueString__operatorEQUALSEQUALS__String( id_1, Rogue_literal_strings[253] ))))
      {
        RogueTokenizer__add_new_token__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_directive_include) );
      }
      else if (((RogueString__operatorEQUALSEQUALS__String( id_1, Rogue_literal_strings[254] ))))
      {
        RogueTokenizer__add_new_token__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_directive_includeNativeCode) );
      }
      else if (((RogueString__operatorEQUALSEQUALS__String( id_1, Rogue_literal_strings[255] ))))
      {
        RogueTokenizer__add_new_token__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_directive_includeNativeHeader) );
      }
      else if (((RogueString__operatorEQUALSEQUALS__String( id_1, Rogue_literal_strings[143] ))))
      {
        RogueTokenizer__add_new_token__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_directive_if) );
      }
      else if (((RogueString__operatorEQUALSEQUALS__String( id_1, Rogue_literal_strings[103] ))))
      {
        RogueTokenizer__add_new_token__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_directive_elseIf) );
      }
      else if (((RogueString__operatorEQUALSEQUALS__String( id_1, Rogue_literal_strings[102] ))))
      {
        RogueTokenizer__add_new_token__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_directive_else) );
      }
      else if (((RogueString__operatorEQUALSEQUALS__String( id_1, Rogue_literal_strings[109] ))))
      {
        RogueTokenizer__add_new_token__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_directive_endIf) );
      }
      else if (((RogueString__operatorEQUALSEQUALS__String( id_1, Rogue_literal_strings[256] ))))
      {
        RogueTokenizer__scan_requisite_directive( ROGUE_ARG(THIS) );
        return (RogueClassTokenType*)(((RogueClassTokenType*)(NULL)));
      }
      else
      {
        RogueTokenizer__add_new_token__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_placeholder_id), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[257], id_1 )))) );
      }
    }
    return (RogueClassTokenType*)(((RogueClassTokenType*)(NULL)));
  }
  else if (ch_0 == (RogueCharacter)'%')
  {
    if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_percent_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_percent);
    }
  }
  else if (ch_0 == (RogueCharacter)'&')
  {
    if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'&' ))))
    {
      ROGUE_THROW(((RogueTokenizer__error__String( ROGUE_ARG(THIS), Rogue_literal_strings[258] ))));
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_ampersand_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_ampersand);
    }
  }
  else if (ch_0 == (RogueCharacter)'(')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_open_paren);
  }
  else if (ch_0 == (RogueCharacter)')')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_close_paren);
  }
  else if (ch_0 == (RogueCharacter)'*')
  {
    if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_times_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_times);
    }
  }
  else if (ch_0 == (RogueCharacter)'+')
  {
    if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_plus_equals);
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'+' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_plus_plus);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_plus);
    }
  }
  else if (ch_0 == (RogueCharacter)',')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_comma);
  }
  else if (ch_0 == (RogueCharacter)'-')
  {
    if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_minus_equals);
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'-' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_minus_minus);
    }
    else if ((((RogueParseReader__peek__Int32( ROGUE_ARG(THIS->reader), 0 ))) == (RogueCharacter)'>' && ((RogueParseReader__peek__Int32( ROGUE_ARG(THIS->reader), 1 ))) == (RogueCharacter)'>'))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_minus);
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'>' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_arrow);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_minus);
    }
  }
  else if (ch_0 == (RogueCharacter)'.')
  {
    if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'.' ))))
    {
      if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'.' ))))
      {
        while (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)' ' ))))
        {
        }
        if (!(((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)10 )))))
        {
          ROGUE_THROW(((RogueTokenizer__error__String( ROGUE_ARG(THIS), Rogue_literal_strings[259] ))));
        }
        return (RogueClassTokenType*)(((RogueClassTokenType*)(NULL)));
      }
      else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'<' ))))
      {
        return (RogueClassTokenType*)(RogueTokenType_symbol_upToLessThan);
      }
      else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'>' ))))
      {
        return (RogueClassTokenType*)(RogueTokenType_symbol_downToGreaterThan);
      }
      else
      {
        return (RogueClassTokenType*)(RogueTokenType_symbol_upTo);
      }
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_dot_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_dot);
    }
  }
  else if (ch_0 == (RogueCharacter)'/')
  {
    if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_slash_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_slash);
    }
  }
  else if (ch_0 == (RogueCharacter)':')
  {
    if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)':' ))))
    {
      RogueTokenizer__add_new_token__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_identifier), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[82], ROGUE_ARG(((RogueTokenizer__read_identifier( ROGUE_ARG(THIS) )))) )))) );
      return (RogueClassTokenType*)(((RogueClassTokenType*)(NULL)));
    }
    if (((RogueTokenizer__consume__String( ROGUE_ARG(THIS), Rogue_literal_strings[260] ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_shift_left);
    }
    else if (((RogueTokenizer__consume__String( ROGUE_ARG(THIS), Rogue_literal_strings[261] ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_shift_right);
    }
    else if (((RogueTokenizer__consume__String( ROGUE_ARG(THIS), Rogue_literal_strings[262] ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_shift_right_x);
    }
    return (RogueClassTokenType*)(RogueTokenType_symbol_colon);
  }
  else if (ch_0 == (RogueCharacter)';')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_semicolon);
  }
  else if (ch_0 == (RogueCharacter)'<')
  {
    if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'<' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_open_specialize);
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_le);
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'>' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_compare);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_lt);
    }
  }
  else if (ch_0 == (RogueCharacter)'=')
  {
    if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_eq);
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'>' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_fat_arrow);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_equals);
    }
  }
  else if (ch_0 == (RogueCharacter)'>')
  {
    if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_ge);
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'>' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_close_specialize);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_gt);
    }
  }
  else if (ch_0 == (RogueCharacter)'?')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_question_mark);
  }
  else if (ch_0 == (RogueCharacter)'@')
  {
    if (((RogueTokenizer__consume_id__String( ROGUE_ARG(THIS), Rogue_literal_strings[161] ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_keyword_trace_position);
    }
    return (RogueClassTokenType*)(RogueTokenType_symbol_at);
  }
  else if (ch_0 == (RogueCharacter)'[')
  {
    if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)']' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_empty_brackets);
    }
    return (RogueClassTokenType*)(RogueTokenType_symbol_open_bracket);
  }
  else if (ch_0 == (RogueCharacter)'\\')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_backslash);
  }
  else if (ch_0 == (RogueCharacter)']')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_close_bracket);
  }
  else if (ch_0 == (RogueCharacter)'^')
  {
    if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_caret_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_caret);
    }
  }
  else if (ch_0 == (RogueCharacter)'{')
  {
    if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'}' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_empty_braces);
    }
    return (RogueClassTokenType*)(RogueTokenType_symbol_open_brace);
  }
  else if (ch_0 == (RogueCharacter)'|')
  {
    if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'|' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_double_vertical_bar);
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_vertical_bar_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_vertical_bar);
    }
  }
  else if (ch_0 == (RogueCharacter)'}')
  {
    if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'#' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_close_comment);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_close_brace);
    }
  }
  else if (ch_0 == (RogueCharacter)'~')
  {
    if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_tilde_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_tilde);
    }
  }
  else
  {
    ROGUE_THROW(((RogueTokenizer__error__String( ROGUE_ARG(THIS), ROGUE_ARG(((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__operatorPLUS__Character( Rogue_literal_strings[263], ch_0 )))), Rogue_literal_strings[34] )))) ))));
  }
}

RogueLogical RogueTokenizer__next_is_hex_digit( RogueClassTokenizer* THIS )
{
  RogueCharacter ch_0 = (((RogueParseReader__peek( ROGUE_ARG(THIS->reader) ))));
  return (RogueLogical)((((ch_0 >= (RogueCharacter)'0' && ch_0 <= (RogueCharacter)'9') || (ch_0 >= (RogueCharacter)'a' && ch_0 <= (RogueCharacter)'f')) || (ch_0 >= (RogueCharacter)'A' && ch_0 <= (RogueCharacter)'F')));
}

void RogueTokenizer__read_character( RogueClassTokenizer* THIS )
{
  if (!(((RogueParseReader__has_another( ROGUE_ARG(THIS->reader) )))))
  {
    ROGUE_THROW(((RogueTokenizer__error__String( ROGUE_ARG(THIS), Rogue_literal_strings[238] ))));
  }
  RogueCharacter ch_0 = (((RogueParseReader__peek( ROGUE_ARG(THIS->reader) ))));
  if (ch_0 == (RogueCharacter)10)
  {
    ROGUE_THROW(((RogueTokenizer__error__String( ROGUE_ARG(THIS), Rogue_literal_strings[239] ))));
  }
  if (ch_0 == (RogueCharacter)'\\')
  {
    RogueParseReader__read( ROGUE_ARG(THIS->reader) );
    if (!(((RogueParseReader__has_another( ROGUE_ARG(THIS->reader) )))))
    {
      ROGUE_THROW(((RogueTokenizer__error__String( ROGUE_ARG(THIS), Rogue_literal_strings[240] ))));
    }
    RogueInt32 value_1 = 0;
    if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'b' ))))
    {
      value_1 = ((RogueInt32)8);
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'f' ))))
    {
      value_1 = ((RogueInt32)12);
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'n' ))))
    {
      value_1 = ((RogueInt32)((RogueInt32)((RogueCharacter)10)));
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'r' ))))
    {
      value_1 = ((RogueInt32)((RogueInt32)((RogueCharacter)13)));
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'t' ))))
    {
      value_1 = ((RogueInt32)((RogueInt32)((RogueCharacter)9)));
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'v' ))))
    {
      value_1 = ((RogueInt32)11);
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'0' ))))
    {
      value_1 = ((RogueInt32)((RogueInt32)((RogueCharacter)0)));
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'/' ))))
    {
      value_1 = ((RogueInt32)((RogueInt32)((RogueCharacter)'/')));
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'\'' ))))
    {
      value_1 = ((RogueInt32)((RogueInt32)((RogueCharacter)'\'')));
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'\\' ))))
    {
      value_1 = ((RogueInt32)((RogueInt32)((RogueCharacter)'\\')));
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'"' ))))
    {
      value_1 = ((RogueInt32)((RogueInt32)((RogueCharacter)'"')));
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'x' ))))
    {
      value_1 = ((RogueInt32)((RogueTokenizer__read_hex_value__Int32( ROGUE_ARG(THIS), 2 ))));
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'u' ))))
    {
      value_1 = ((RogueInt32)((RogueTokenizer__read_hex_value__Int32( ROGUE_ARG(THIS), 4 ))));
    }
    else if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'s' ))))
    {
      value_1 = ((RogueInt32)((RogueTokenizer__read_hex_value__Int32( ROGUE_ARG(THIS), 6 ))));
    }
    else
    {
      ROGUE_THROW(((RogueTokenizer__error__String( ROGUE_ARG(THIS), ROGUE_ARG(((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[244], Rogue_literal_strings[245] )))), Rogue_literal_strings[246] )))) ))));
    }
    if (value_1 < 65536)
    {
      RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), ROGUE_ARG(((RogueCharacter)(value_1))) );
    }
    else
    {
      value_1 -= 65536;
      RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), ROGUE_ARG(((RogueCharacter)((55296 + ((RogueMath__shift_right__Int32_Int32( value_1, 10 )) & 1023))))) );
      RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), ROGUE_ARG(((RogueCharacter)((56320 + (value_1 & 1023))))) );
    }
  }
  else
  {
    RogueInt32 value_2 = (((RogueInt32)(((RogueParseReader__read( ROGUE_ARG(THIS->reader) ))))));
    if ((value_2 & 128) != 0)
    {
      RogueInt32 ch2_3 = (((RogueInt32)(((RogueParseReader__read( ROGUE_ARG(THIS->reader) ))))));
      if ((value_2 & 32) == 0)
      {
        value_2 = ((RogueInt32)(value_2 & 31));
        ch2_3 = ((RogueInt32)(value_2 & 63));
        RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), ROGUE_ARG(((RogueCharacter)(((value_2 << 6) | ch2_3)))) );
      }
      else
      {
        RogueInt32 ch3_4 = (((RogueInt32)(((RogueParseReader__read( ROGUE_ARG(THIS->reader) ))))));
        value_2 = ((RogueInt32)(value_2 & 15));
        ch2_3 = ((RogueInt32)(ch2_3 & 63));
        ch3_4 = ((RogueInt32)(ch3_4 & 63));
        RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), ROGUE_ARG(((RogueCharacter)((((value_2 << 2) | (ch2_3 << 6)) | ch3_4)))) );
      }
    }
    else
    {
      RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), ROGUE_ARG(((RogueCharacter)(value_2))) );
    }
  }
}

RogueInt32 RogueTokenizer__read_hex_value__Int32( RogueClassTokenizer* THIS, RogueInt32 digits_0 )
{
  RogueInt32 value_1 = (0);
  RogueInt32 i_2 = (1);
  while (i_2 <= digits_0)
  {
    if (!(((RogueParseReader__has_another( ROGUE_ARG(THIS->reader) )))))
    {
      ROGUE_THROW(((RogueTokenizer__error__String( ROGUE_ARG(THIS), ROGUE_ARG(((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], digits_0 )))), Rogue_literal_strings[242] )))) ))));
    }
    if (!(((RogueTokenizer__next_is_hex_digit( ROGUE_ARG(THIS) )))))
    {
      RogueCharacter ch_3 = (((RogueParseReader__peek( ROGUE_ARG(THIS->reader) ))));
      ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,error_buffer_4,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
      RogueStringBuilder__print__String( error_buffer_4, Rogue_literal_strings[243] );
      if ((ch_3 < (RogueCharacter)' ' || ((RogueInt32)(ch_3)) == 127))
      {
        RogueStringBuilder__print__Int32( error_buffer_4, ROGUE_ARG(((RogueInt32)(ch_3))) );
      }
      else
      {
        RogueStringBuilder__print__String( error_buffer_4, ROGUE_ARG(((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__operatorPLUS__Character( Rogue_literal_strings[69], ch_3 )))), Rogue_literal_strings[69] )))) );
      }
      RogueStringBuilder__print__Character( error_buffer_4, (RogueCharacter)'.' );
      ROGUE_THROW(((RogueTokenizer__error__String( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__to_String( error_buffer_4 )))) ))));
    }
    RogueInt32 intval_5 = (((RogueCharacter__to_number__Int32( ROGUE_ARG(((RogueParseReader__read( ROGUE_ARG(THIS->reader) )))), 16 ))));
    value_1 = ((RogueInt32)((value_1 << 4) + intval_5));
    ++i_2;
  }
  return (RogueInt32)(value_1);
}

RogueString* RogueTokenizer__read_identifier( RogueClassTokenizer* THIS )
{
  RogueStringBuilder__clear( ROGUE_ARG(THIS->buffer) );
  RogueCharacter ch_0 = (((RogueParseReader__peek( ROGUE_ARG(THIS->reader) ))));
  while (((((ch_0 >= (RogueCharacter)'a' && ch_0 <= (RogueCharacter)'z') || (ch_0 >= (RogueCharacter)'A' && ch_0 <= (RogueCharacter)'Z')) || (ch_0 >= (RogueCharacter)'0' && ch_0 <= (RogueCharacter)'9')) || ch_0 == (RogueCharacter)'_'))
  {
    RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), ROGUE_ARG(((RogueParseReader__read( ROGUE_ARG(THIS->reader) )))) );
    ch_0 = ((RogueCharacter)((RogueParseReader__peek( ROGUE_ARG(THIS->reader) ))));
    while ((ch_0 == (RogueCharacter)':' && ((RogueParseReader__peek__Int32( ROGUE_ARG(THIS->reader), 1 ))) == (RogueCharacter)':'))
    {
      RogueParseReader__read( ROGUE_ARG(THIS->reader) );
      RogueParseReader__read( ROGUE_ARG(THIS->reader) );
      RogueStringBuilder__print__String( ROGUE_ARG(THIS->buffer), Rogue_literal_strings[82] );
      ch_0 = ((RogueCharacter)((RogueParseReader__peek( ROGUE_ARG(THIS->reader) ))));
    }
  }
  if (THIS->buffer->characters->count == 0)
  {
    ROGUE_THROW(((RogueTokenizer__error__String( ROGUE_ARG(THIS), Rogue_literal_strings[233] ))));
  }
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(THIS->buffer) ))));
}

RogueLogical RogueTokenizer__tokenize_alternate_string__Character( RogueClassTokenizer* THIS, RogueCharacter terminator_0 )
{
  RogueStringBuilder__clear( ROGUE_ARG(THIS->buffer) );
  while (((RogueParseReader__has_another( ROGUE_ARG(THIS->reader) ))))
  {
    if (((RogueParseReader__has_another( ROGUE_ARG(THIS->reader) ))))
    {
      RogueCharacter ch_1 = (((RogueParseReader__peek( ROGUE_ARG(THIS->reader) ))));
      if (ch_1 == terminator_0)
      {
        RogueParseReader__read( ROGUE_ARG(THIS->reader) );
        ch_1 = ((RogueCharacter)((RogueParseReader__peek( ROGUE_ARG(THIS->reader) ))));
        if (ch_1 == terminator_0)
        {
          RogueParseReader__read( ROGUE_ARG(THIS->reader) );
          return (RogueLogical)(((RogueTokenizer__add_new_string_or_character_token_from_buffer__Character( ROGUE_ARG(THIS), ROGUE_ARG(((RogueCharacter)(0))) ))));
        }
        else
        {
          RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), terminator_0 );
        }
      }
      else
      {
        RogueTokenizer__read_character( ROGUE_ARG(THIS) );
      }
    }
  }
  ROGUE_THROW(((RogueTokenizer__error__String( ROGUE_ARG(THIS), Rogue_literal_strings[247] ))));
}

RogueLogical RogueTokenizer__tokenize_another( RogueClassTokenizer* THIS )
{
  RogueParseReader__consume_spaces( ROGUE_ARG(THIS->reader) );
  THIS->next_filepath = THIS->filepath;
  THIS->next_line = THIS->reader->line;
  THIS->next_column = THIS->reader->column;
  if (!(((RogueParseReader__has_another( ROGUE_ARG(THIS->reader) )))))
  {
    return (RogueLogical)(false);
  }
  RogueCharacter ch_0 = (((RogueParseReader__peek( ROGUE_ARG(THIS->reader) ))));
  if (ch_0 == (RogueCharacter)10)
  {
    RogueParseReader__read( ROGUE_ARG(THIS->reader) );
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_eol) ))));
  }
  if ((((RogueCharacter__is_letter( ch_0 ))) || ch_0 == (RogueCharacter)'_'))
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,id_1,(((RogueTokenizer__read_identifier( ROGUE_ARG(THIS) )))));
    ROGUE_DEF_LOCAL_REF(RogueClassTokenType*,keyword_type_2,(((RogueString_TokenTypeTable__get__String( ROGUE_ARG(RogueTokenType_lookup), id_1 )))));
    if (!!(keyword_type_2))
    {
      if (((void*)keyword_type_2) == ((void*)RogueTokenType_keyword_nativeCode))
      {
        return (RogueLogical)(((RogueTokenizer__scan_native_code( ROGUE_ARG(THIS) ))));
      }
      else if (((void*)keyword_type_2) == ((void*)RogueTokenType_keyword_nativeHeader))
      {
        return (RogueLogical)(((RogueTokenizer__scan_native_header( ROGUE_ARG(THIS) ))));
      }
      else if (((void*)keyword_type_2) == ((void*)RogueTokenType_directive_requisite))
      {
        return (RogueLogical)(((RogueTokenizer__scan_requisite_directive( ROGUE_ARG(THIS) ))));
      }
      else
      {
        return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType( ROGUE_ARG(THIS), keyword_type_2 ))));
      }
    }
    else
    {
      return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_identifier), id_1 ))));
    }
    return (RogueLogical)(true);
  }
  else if (ch_0 == (RogueCharacter)'\'')
  {
    if (((RogueParseReader__peek__Int32( ROGUE_ARG(THIS->reader), 1 ))) == (RogueCharacter)'\'')
    {
      RogueParseReader__read( ROGUE_ARG(THIS->reader) );
      RogueParseReader__read( ROGUE_ARG(THIS->reader) );
      return (RogueLogical)(((RogueTokenizer__tokenize_alternate_string__Character( ROGUE_ARG(THIS), (RogueCharacter)'\'' ))));
    }
    else
    {
      return (RogueLogical)(((RogueTokenizer__tokenize_string__Character( ROGUE_ARG(THIS), (RogueCharacter)'\'' ))));
    }
  }
  else if (ch_0 == (RogueCharacter)'"')
  {
    return (RogueLogical)(((RogueTokenizer__tokenize_string__Character( ROGUE_ARG(THIS), (RogueCharacter)'"' ))));
  }
  else if (ch_0 == (RogueCharacter)'#')
  {
    return (RogueLogical)(((RogueTokenizer__tokenize_comment( ROGUE_ARG(THIS) ))));
  }
  else if ((ch_0 >= (RogueCharacter)'0' && ch_0 <= (RogueCharacter)'9'))
  {
    switch (((RogueInt32)(((RogueParseReader__peek__Int32( ROGUE_ARG(THIS->reader), 1 ))))))
    {
      case (RogueCharacter)'b':
      {
        return (RogueLogical)(((RogueTokenizer__tokenize_integer_in_base__Int32( ROGUE_ARG(THIS), 2 ))));
        break;
      }
      case (RogueCharacter)'c':
      {
        return (RogueLogical)(((RogueTokenizer__tokenize_integer_in_base__Int32( ROGUE_ARG(THIS), 8 ))));
        break;
      }
      case (RogueCharacter)'x':
      {
        return (RogueLogical)(((RogueTokenizer__tokenize_integer_in_base__Int32( ROGUE_ARG(THIS), 16 ))));
        break;
      }
      default:
      {
        return (RogueLogical)(((RogueTokenizer__tokenize_number( ROGUE_ARG(THIS) ))));
      }
    }
  }
  else if ((ch_0 == (RogueCharacter)'@' && ((RogueParseReader__peek__Int32( ROGUE_ARG(THIS->reader), 1 ))) == (RogueCharacter)'|'))
  {
    return (RogueLogical)(((RogueTokenizer__tokenize_verbatim_string( ROGUE_ARG(THIS) ))));
  }
  else
  {
    if (ch_0 == (RogueCharacter)'.')
    {
      RogueCharacter next_3 = (((RogueParseReader__peek__Int32( ROGUE_ARG(THIS->reader), 1 ))));
      if ((next_3 >= (RogueCharacter)'0' && next_3 <= (RogueCharacter)'9'))
      {
        return (RogueLogical)(((RogueTokenizer__tokenize_number( ROGUE_ARG(THIS) ))));
      }
    }
    ROGUE_DEF_LOCAL_REF(RogueClassTokenType*,token_type_4,(((Rogue_Tokenizer__get_symbol_token_type( ROGUE_ARG(THIS) )))));
    if (((void*)token_type_4) == ((void*)NULL))
    {
      return (RogueLogical)(true);
    }
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType( ROGUE_ARG(THIS), token_type_4 ))));
  }
  ROGUE_DEF_LOCAL_REF(RogueString*,name_5,(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[69] )))), ROGUE_ARG(((RogueString__operatorPLUS__Character( Rogue_literal_strings[0], ch_0 )))) )))), Rogue_literal_strings[69] )))) )))));
  if (((RogueInt32)(ch_0)) == 10)
  {
    name_5 = ((RogueString*)Rogue_literal_strings[264]);
  }
  else if ((((RogueInt32)(ch_0)) < 32 || ((RogueInt32)(ch_0)) > 126))
  {
    name_5 = ((RogueString*)((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[265] )))), ROGUE_ARG(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], ROGUE_ARG(((RogueInt32)(ch_0))) )))) )))), Rogue_literal_strings[28] )))) ))));
  }
  ROGUE_THROW(((RogueTokenizer__error__String( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[266] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], name_5 )))) )))), Rogue_literal_strings[64] )))) )))) ))));
}

RogueLogical RogueTokenizer__tokenize_comment( RogueClassTokenizer* THIS )
{
  RogueStringBuilder__clear( ROGUE_ARG(THIS->buffer) );
  RogueParseReader__read( ROGUE_ARG(THIS->reader) );
  if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'{' ))))
  {
    RogueInt32 nesting_count_0 = (1);
    while (((RogueParseReader__has_another( ROGUE_ARG(THIS->reader) ))))
    {
      RogueCharacter ch_1 = (((RogueParseReader__read( ROGUE_ARG(THIS->reader) ))));
      switch (((RogueInt32)(ch_1)))
      {
        case (RogueCharacter)'#':
        {
          RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), (RogueCharacter)'#' );
          if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'{' ))))
          {
            RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), (RogueCharacter)'{' );
            ++nesting_count_0;
          }
          break;
        }
        case (RogueCharacter)'}':
        {
          if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'#' ))))
          {
            --nesting_count_0;
            if (nesting_count_0 == 0)
            {
              goto _auto_2185;
            }
            else
            {
              RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), (RogueCharacter)'}' );
              RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), (RogueCharacter)'#' );
            }
          }
          else
          {
            RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), (RogueCharacter)'}' );
          }
          break;
        }
        default:
        {
          RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), ch_1 );
        }
      }
    }
    _auto_2185:;
  }
  else
  {
    while ((((RogueParseReader__has_another( ROGUE_ARG(THIS->reader) ))) && ((RogueParseReader__peek( ROGUE_ARG(THIS->reader) ))) != (RogueCharacter)10))
    {
      RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), ROGUE_ARG(((RogueParseReader__read( ROGUE_ARG(THIS->reader) )))) );
    }
  }
  if ((!!(THIS->tokens->count) && ((void*)((RogueTokenList__last( ROGUE_ARG(THIS->tokens) )))->_type) == ((void*)RogueTokenType_eol)))
  {
    ((RogueClassEOLToken*)(RogueObject_as(((RogueTokenList__last( ROGUE_ARG(THIS->tokens) ))),RogueTypeEOLToken)))->comment = ((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueClassEOLToken*)(RogueObject_as(((RogueTokenList__last( ROGUE_ARG(THIS->tokens) ))),RogueTypeEOLToken)))->comment), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(THIS->buffer) )))) )));
  }
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__tokenize_integer_in_base__Int32( RogueClassTokenizer* THIS, RogueInt32 base_0 )
{
  RogueParseReader__read( ROGUE_ARG(THIS->reader) );
  RogueParseReader__read( ROGUE_ARG(THIS->reader) );
  RogueInt32 count_1 = (0);
  RogueInt64 n_2 = (((RogueInt64)0));
  RogueInt32 digit_3 = (((RogueCharacter__to_number__Int32( ROGUE_ARG(((RogueParseReader__peek( ROGUE_ARG(THIS->reader) )))), base_0 ))));
  while ((((RogueParseReader__has_another( ROGUE_ARG(THIS->reader) ))) && digit_3 != -1))
  {
    if (digit_3 >= base_0)
    {
      ROGUE_THROW(((RogueTokenizer__error__String( ROGUE_ARG(THIS), ROGUE_ARG(((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[249], base_0 )))), Rogue_literal_strings[64] )))) ))));
    }
    ++count_1;
    n_2 = ((RogueInt64)((n_2 * ((RogueInt64)base_0)) + ((RogueInt64)digit_3)));
    RogueParseReader__read( ROGUE_ARG(THIS->reader) );
    digit_3 = ((RogueInt32)((RogueCharacter__to_number__Int32( ROGUE_ARG(((RogueParseReader__peek( ROGUE_ARG(THIS->reader) )))), base_0 ))));
  }
  if (count_1 == 0)
  {
    ROGUE_THROW(((RogueTokenizer__error__String( ROGUE_ARG(THIS), Rogue_literal_strings[250] ))));
  }
  if ((((base_0 == 2 && count_1 > 32) || (base_0 == 8 && count_1 > 11)) || (base_0 == 16 && count_1 > 8)))
  {
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Int64( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_literal_long), n_2 ))));
  }
  else
  {
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Int64( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_literal_integer), n_2 ))));
  }
}

RogueLogical RogueTokenizer__tokenize_number( RogueClassTokenizer* THIS )
{
  RogueLogical is_negative_0 = (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'-' ))));
  RogueInt32 i_1 = (0);
  while ((((RogueParseReader__has_another__Int32( ROGUE_ARG(THIS->reader), ROGUE_ARG((i_1 + 1)) ))) && ((RogueCharacter__is_number__Int32( ROGUE_ARG(((RogueParseReader__peek__Int32( ROGUE_ARG(THIS->reader), i_1 )))), 10 )))))
  {
    ++i_1;
  }
  RogueCharacter ch_2 = (((RogueParseReader__peek__Int32( ROGUE_ARG(THIS->reader), i_1 ))));
  RogueLogical is_real_3 = ((((ch_2 == (RogueCharacter)'.' && ((RogueCharacter__is_number__Int32( ROGUE_ARG(((RogueParseReader__peek__Int32( ROGUE_ARG(THIS->reader), ROGUE_ARG((i_1 + 1)) )))), 10 )))) || ch_2 == (RogueCharacter)'e') || ch_2 == (RogueCharacter)'E'));
  if (is_real_3)
  {
    RogueReal64 n_4 = (((RogueTokenizer__scan_real( ROGUE_ARG(THIS) ))));
    ch_2 = ((RogueCharacter)((RogueParseReader__peek( ROGUE_ARG(THIS->reader) ))));
    if (ch_2 == (RogueCharacter)'.')
    {
      ch_2 = ((RogueCharacter)((RogueParseReader__peek__Int32( ROGUE_ARG(THIS->reader), 1 ))));
      if ((ch_2 >= (RogueCharacter)'0' && ch_2 <= (RogueCharacter)'9'))
      {
        RogueParseReader__read( ROGUE_ARG(THIS->reader) );
        RogueInt32 start_pos_5 = (THIS->reader->position);
        RogueReal64 fraction_6 = (((RogueTokenizer__scan_real( ROGUE_ARG(THIS) ))));
        n_4 += (fraction_6 / ((RogueReal64) pow((double)10.0, (double)((RogueReal64)((THIS->reader->position - start_pos_5))))));
      }
      else if (ch_2 == (RogueCharacter)'.')
      {
        if (is_negative_0)
        {
          n_4 = ((RogueReal64)(-(n_4)));
        }
        return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Int32( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_literal_integer), ROGUE_ARG(((RogueInt32)(n_4))) ))));
      }
      else if ((((ch_2 >= (RogueCharacter)'a' && ch_2 <= (RogueCharacter)'z') || (ch_2 >= (RogueCharacter)'A' && ch_2 <= (RogueCharacter)'Z')) || ch_2 == (RogueCharacter)'_'))
      {
        return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Int32( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_literal_integer), ROGUE_ARG(((RogueInt32)(n_4))) ))));
      }
      else
      {
        if (is_negative_0)
        {
          n_4 = ((RogueReal64)(-(n_4)));
        }
        return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Real64( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_literal_real), n_4 ))));
      }
    }
    if ((((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'E' ))) || ((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'e' )))))
    {
      RogueLogical negative_exponent_7 = (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'-' ))));
      if (!(negative_exponent_7))
      {
        RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'+' );
      }
      RogueReal64 power_8 = (((RogueTokenizer__scan_real( ROGUE_ARG(THIS) ))));
      if (negative_exponent_7)
      {
        n_4 /= ((RogueReal64) pow((double)10.0, (double)power_8));
      }
      else
      {
        n_4 *= ((RogueReal64) pow((double)10.0, (double)power_8));
      }
    }
    if (is_negative_0)
    {
      n_4 = ((RogueReal64)(-(n_4)));
    }
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Real64( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_literal_real), n_4 ))));
  }
  else
  {
    RogueInt64 n_9 = (((RogueTokenizer__scan_long( ROGUE_ARG(THIS) ))));
    if (is_negative_0)
    {
      n_9 = ((RogueInt64)(-(n_9)));
    }
    if (n_9 == ((RogueInt64)((RogueInt32)(n_9))))
    {
      return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Int32( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_literal_integer), ROGUE_ARG(((RogueInt32)(n_9))) ))));
    }
    else
    {
      return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Int64( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_literal_long), n_9 ))));
    }
  }
}

RogueReal64 RogueTokenizer__scan_real( RogueClassTokenizer* THIS )
{
  RogueReal64 n_0 = (0.0);
  RogueCharacter ch_1 = (((RogueParseReader__peek( ROGUE_ARG(THIS->reader) ))));
  while ((ch_1 >= (RogueCharacter)'0' && ch_1 <= (RogueCharacter)'9'))
  {
    RogueInt32 intval_2 = ((((RogueInt32)(((RogueParseReader__read( ROGUE_ARG(THIS->reader) ))))) - ((RogueInt32)((RogueCharacter)'0'))));
    n_0 = ((RogueReal64)((n_0 * 10.0) + ((RogueReal64)(intval_2))));
    ch_1 = ((RogueCharacter)((RogueParseReader__peek( ROGUE_ARG(THIS->reader) ))));
  }
  return (RogueReal64)(n_0);
}

RogueInt64 RogueTokenizer__scan_long( RogueClassTokenizer* THIS )
{
  RogueInt64 n_0 = (((RogueInt64)0));
  RogueCharacter ch_1 = (((RogueParseReader__peek( ROGUE_ARG(THIS->reader) ))));
  while ((ch_1 >= (RogueCharacter)'0' && ch_1 <= (RogueCharacter)'9'))
  {
    RogueInt32 intval_2 = ((((RogueInt32)(((RogueParseReader__read( ROGUE_ARG(THIS->reader) ))))) - ((RogueInt32)((RogueCharacter)'0'))));
    n_0 = ((RogueInt64)((n_0 * ((RogueInt64)10)) + ((RogueInt64)intval_2)));
    ch_1 = ((RogueCharacter)((RogueParseReader__peek( ROGUE_ARG(THIS->reader) ))));
  }
  return (RogueInt64)(n_0);
}

RogueLogical RogueTokenizer__scan_native_code( RogueClassTokenizer* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueParseReader__consume_spaces( ROGUE_ARG(THIS->reader) );
  if (((RogueParseReader__consume__Character( ROGUE_ARG(THIS->reader), (RogueCharacter)10 ))))
  {
    RogueLogical found_end_1 = (false);
    while (((RogueParseReader__has_another( ROGUE_ARG(THIS->reader) ))))
    {
      if (THIS->reader->column == 1)
      {
        RogueInt32 spaces_2 = (0);
        while (((RogueParseReader__consume__Character( ROGUE_ARG(THIS->reader), (RogueCharacter)' ' ))))
        {
          ++spaces_2;
        }
        if (((RogueParseReader__consume_id__String( ROGUE_ARG(THIS->reader), Rogue_literal_strings[234] ))))
        {
          found_end_1 = ((RogueLogical)true);
          goto _auto_2186;
        }
        else
        {
          {
            RogueInt32 _auto_1176_3 = (1);
            RogueInt32 _auto_1177_4 = (spaces_2);
            for (;_auto_1176_3 <= _auto_1177_4;++_auto_1176_3)
            {
              RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)' ' );
            }
          }
        }
      }
      RogueStringBuilder__print__Character( buffer_0, ROGUE_ARG(((RogueParseReader__read( ROGUE_ARG(THIS->reader) )))) );
    }
    _auto_2186:;
    if (!(found_end_1))
    {
      ROGUE_THROW(((RogueTokenizer__error__String( ROGUE_ARG(THIS), Rogue_literal_strings[235] ))));
    }
  }
  else
  {
    while (((RogueParseReader__has_another( ROGUE_ARG(THIS->reader) ))))
    {
      if (((RogueParseReader__consume__Character( ROGUE_ARG(THIS->reader), (RogueCharacter)10 ))))
      {
        goto _auto_2187;
      }
      RogueStringBuilder__print__Character( buffer_0, ROGUE_ARG(((RogueParseReader__read( ROGUE_ARG(THIS->reader) )))) );
    }
    _auto_2187:;
  }
  return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_nativeCode), ROGUE_ARG(((RogueStringBuilder__to_String( buffer_0 )))) ))));
}

RogueLogical RogueTokenizer__scan_native_header( RogueClassTokenizer* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueParseReader__consume_spaces( ROGUE_ARG(THIS->reader) );
  if (((RogueParseReader__consume__Character( ROGUE_ARG(THIS->reader), (RogueCharacter)10 ))))
  {
    RogueLogical found_end_1 = (false);
    while (((RogueParseReader__has_another( ROGUE_ARG(THIS->reader) ))))
    {
      if (THIS->reader->column == 1)
      {
        RogueInt32 spaces_2 = (0);
        while (((RogueParseReader__consume__Character( ROGUE_ARG(THIS->reader), (RogueCharacter)' ' ))))
        {
          ++spaces_2;
        }
        if (((RogueParseReader__consume_id__String( ROGUE_ARG(THIS->reader), Rogue_literal_strings[236] ))))
        {
          found_end_1 = ((RogueLogical)true);
          goto _auto_2188;
        }
        else
        {
          {
            RogueInt32 _auto_1178_3 = (1);
            RogueInt32 _auto_1179_4 = (spaces_2);
            for (;_auto_1178_3 <= _auto_1179_4;++_auto_1178_3)
            {
              RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)' ' );
            }
          }
        }
      }
      RogueStringBuilder__print__Character( buffer_0, ROGUE_ARG(((RogueParseReader__read( ROGUE_ARG(THIS->reader) )))) );
    }
    _auto_2188:;
    if (!(found_end_1))
    {
      ROGUE_THROW(((RogueTokenizer__error__String( ROGUE_ARG(THIS), Rogue_literal_strings[237] ))));
    }
  }
  else
  {
    while (((RogueParseReader__has_another( ROGUE_ARG(THIS->reader) ))))
    {
      if (((RogueParseReader__consume__Character( ROGUE_ARG(THIS->reader), (RogueCharacter)10 ))))
      {
        goto _auto_2189;
      }
      RogueStringBuilder__print__Character( buffer_0, ROGUE_ARG(((RogueParseReader__read( ROGUE_ARG(THIS->reader) )))) );
    }
    _auto_2189:;
  }
  return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_nativeHeader), ROGUE_ARG(((RogueStringBuilder__to_String( buffer_0 )))) ))));
}

RogueLogical RogueTokenizer__scan_requisite_directive( RogueClassTokenizer* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueParseReader__consume_spaces( ROGUE_ARG(THIS->reader) );
  while (((RogueParseReader__has_another( ROGUE_ARG(THIS->reader) ))))
  {
    if (((RogueParseReader__consume__Character( ROGUE_ARG(THIS->reader), (RogueCharacter)10 ))))
    {
      goto _auto_2190;
    }
    RogueStringBuilder__print__Character( buffer_0, ROGUE_ARG(((RogueParseReader__read( ROGUE_ARG(THIS->reader) )))) );
  }
  _auto_2190:;
  return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_directive_requisite), ROGUE_ARG(((RogueString__trimmed( ROGUE_ARG(((RogueStringBuilder__to_String( buffer_0 )))) )))) ))));
}

RogueLogical RogueTokenizer__tokenize_string__Character( RogueClassTokenizer* THIS, RogueCharacter terminator_0 )
{
  RogueStringBuilder__clear( ROGUE_ARG(THIS->buffer) );
  RogueParseReader__read( ROGUE_ARG(THIS->reader) );
  while (((RogueParseReader__has_another( ROGUE_ARG(THIS->reader) ))))
  {
    RogueCharacter ch_1 = (((RogueParseReader__peek( ROGUE_ARG(THIS->reader) ))));
    if (ch_1 == terminator_0)
    {
      RogueParseReader__read( ROGUE_ARG(THIS->reader) );
      return (RogueLogical)(((RogueTokenizer__add_new_string_or_character_token_from_buffer__Character( ROGUE_ARG(THIS), terminator_0 ))));
    }
    else
    {
      RogueTokenizer__read_character( ROGUE_ARG(THIS) );
    }
  }
  ROGUE_THROW(((RogueTokenizer__error__String( ROGUE_ARG(THIS), Rogue_literal_strings[248] ))));
}

RogueLogical RogueTokenizer__tokenize_verbatim_string( RogueClassTokenizer* THIS )
{
  RogueStringBuilder__clear( ROGUE_ARG(THIS->buffer) );
  RogueParseReader__read( ROGUE_ARG(THIS->reader) );
  RogueParseReader__read( ROGUE_ARG(THIS->reader) );
  while (((RogueParseReader__has_another( ROGUE_ARG(THIS->reader) ))))
  {
    RogueCharacter ch_0 = (((RogueParseReader__read( ROGUE_ARG(THIS->reader) ))));
    if (((RogueInt32)(ch_0)) == 10)
    {
      RogueTokenizer__consume_spaces( ROGUE_ARG(THIS) );
      if (((RogueTokenizer__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)'|' ))))
      {
        RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), ch_0 );
      }
      else
      {
        RogueTokenizer__add_new_token__TokenType_String( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_literal_string), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(THIS->buffer) )))) );
        return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_eol) ))));
      }
    }
    else
    {
      RogueStringBuilder__print__Character( ROGUE_ARG(THIS->buffer), ch_0 );
    }
  }
  ROGUE_THROW(((RogueTokenizer__error__String( ROGUE_ARG(THIS), Rogue_literal_strings[251] ))));
}

RogueClassTokenizer* RogueTokenizer__init_object( RogueClassTokenizer* THIS )
{
  THIS->tokens = ((RogueTokenList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueTokenList*,ROGUE_CREATE_OBJECT(TokenList))) )));
  THIS->buffer = ((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )));
  return (RogueClassTokenizer*)(THIS);
}

RogueString* RogueParseReader__type_name( RogueClassParseReader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[691]);
}

RogueLogical RogueParseReader__has_another( RogueClassParseReader* THIS )
{
  return (RogueLogical)(THIS->position < THIS->count);
}

RogueCharacter RogueParseReader__peek( RogueClassParseReader* THIS )
{
  if (THIS->position == THIS->count)
  {
    return (RogueCharacter)(((RogueCharacter)(0)));
  }
  return (RogueCharacter)(THIS->data->data->characters[THIS->position]);
}

RogueCharacter RogueParseReader__read( RogueClassParseReader* THIS )
{
  RogueCharacter result_0 = (THIS->data->data->characters[THIS->position]);
  ++THIS->position;
  if (((RogueInt32)(result_0)) == 10)
  {
    ++THIS->line;
    THIS->column = 1;
  }
  else
  {
    ++THIS->column;
  }
  return (RogueCharacter)(result_0);
}

RogueClassParseReader* RogueParseReader__init__String_Int32( RogueClassParseReader* THIS, RogueString* source_0, RogueInt32 _auto_1187_1 )
{
  THIS->spaces_per_tab = _auto_1187_1;
  RogueInt32 tab_count_2 = (0);
  if (!!(THIS->spaces_per_tab))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueString*,_auto_2191_5,(source_0));
      RogueInt32 _auto_2192_6 = (0);
      for (;_auto_2192_6 < _auto_2191_5->count;++_auto_2192_6)
      {
        RogueCharacter b_7 = (_auto_2191_5->characters[_auto_2192_6]);
        if (b_7 == (RogueCharacter)9)
        {
          ++tab_count_2;
        }
      }
    }
  }
  THIS->data = ((RogueCharacterList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueCharacterList*,ROGUE_CREATE_OBJECT(CharacterList))), ROGUE_ARG((source_0->count + tab_count_2)) )));
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,_auto_2193_8,(source_0));
    RogueInt32 _auto_2194_9 = (0);
    for (;_auto_2194_9 < _auto_2193_8->count;++_auto_2194_9)
    {
      RogueCharacter b_10 = (_auto_2193_8->characters[_auto_2194_9]);
      if ((b_10 == (RogueCharacter)9 && !!(THIS->spaces_per_tab)))
      {
        {
          RogueInt32 _auto_1183_3 = (1);
          RogueInt32 _auto_1184_4 = (THIS->spaces_per_tab);
          for (;_auto_1183_3 <= _auto_1184_4;++_auto_1183_3)
          {
            RogueCharacterList__add__Character( ROGUE_ARG(THIS->data), ROGUE_ARG(((RogueCharacter)(32))) );
          }
        }
      }
      else
      {
        RogueCharacterList__add__Character( ROGUE_ARG(THIS->data), b_10 );
      }
    }
  }
  THIS->count = THIS->data->count;
  THIS->line = 1;
  THIS->column = 1;
  return (RogueClassParseReader*)(THIS);
}

RogueClassParseReader* RogueParseReader__init__File_Int32( RogueClassParseReader* THIS, RogueClassFile* file_0, RogueInt32 _auto_1188_1 )
{
  THIS->spaces_per_tab = _auto_1188_1;
  RogueParseReader__init__String_Int32( ROGUE_ARG(THIS), ROGUE_ARG(((RogueString__decode_utf8( ROGUE_ARG((RogueFile__load_as_string__String( ROGUE_ARG(file_0->filepath) ))) )))), ROGUE_ARG(THIS->spaces_per_tab) );
  return (RogueClassParseReader*)(THIS);
}

RogueClassParseReader* RogueParseReader__init__CharacterList_Int32( RogueClassParseReader* THIS, RogueCharacterList* source_0, RogueInt32 _auto_1189_1 )
{
  THIS->spaces_per_tab = _auto_1189_1;
  RogueInt32 tab_count_2 = (0);
  if (!!(THIS->spaces_per_tab))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueCharacterList*,_auto_2195_5,(source_0));
      RogueInt32 _auto_2196_6 = (0);
      for (;_auto_2196_6 < _auto_2195_5->count;++_auto_2196_6)
      {
        RogueCharacter b_7 = (_auto_2195_5->data->characters[_auto_2196_6]);
        if (b_7 == (RogueCharacter)9)
        {
          ++tab_count_2;
        }
      }
    }
  }
  THIS->data = ((RogueCharacterList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueCharacterList*,ROGUE_CREATE_OBJECT(CharacterList))), ROGUE_ARG((source_0->count + tab_count_2)) )));
  {
    ROGUE_DEF_LOCAL_REF(RogueCharacterList*,_auto_2197_8,(source_0));
    RogueInt32 _auto_2198_9 = (0);
    for (;_auto_2198_9 < _auto_2197_8->count;++_auto_2198_9)
    {
      RogueCharacter b_10 = (_auto_2197_8->data->characters[_auto_2198_9]);
      if ((b_10 == (RogueCharacter)9 && !!(THIS->spaces_per_tab)))
      {
        {
          RogueInt32 _auto_1185_3 = (1);
          RogueInt32 _auto_1186_4 = (THIS->spaces_per_tab);
          for (;_auto_1185_3 <= _auto_1186_4;++_auto_1185_3)
          {
            RogueCharacterList__add__Character( ROGUE_ARG(THIS->data), ROGUE_ARG(((RogueCharacter)(32))) );
          }
        }
      }
      else
      {
        RogueCharacterList__add__Character( ROGUE_ARG(THIS->data), b_10 );
      }
    }
  }
  THIS->count = THIS->data->count;
  THIS->line = 1;
  THIS->column = 1;
  return (RogueClassParseReader*)(THIS);
}

RogueLogical RogueParseReader__consume__Character( RogueClassParseReader* THIS, RogueCharacter ch_0 )
{
  if (((RogueParseReader__peek( ROGUE_ARG(THIS) ))) != ch_0)
  {
    return (RogueLogical)(false);
  }
  RogueParseReader__read( ROGUE_ARG(THIS) );
  return (RogueLogical)(true);
}

RogueLogical RogueParseReader__consume__String( RogueClassParseReader* THIS, RogueString* text_0 )
{
  RogueInt32 limit_1 = (text_0->count);
  RogueInt32 i_2 = (0);
  while (i_2 < limit_1)
  {
    if (((RogueParseReader__peek__Int32( ROGUE_ARG(THIS), i_2 ))) != text_0->characters[i_2])
    {
      return (RogueLogical)(false);
    }
    ++i_2;
  }
  i_2 = ((RogueInt32)0);
  while (i_2 < limit_1)
  {
    RogueParseReader__read( ROGUE_ARG(THIS) );
    ++i_2;
  }
  return (RogueLogical)(true);
}

RogueLogical RogueParseReader__consume_id__String( RogueClassParseReader* THIS, RogueString* text_0 )
{
  RogueCharacter ch_1 = (((RogueParseReader__peek__Int32( ROGUE_ARG(THIS), ROGUE_ARG(text_0->count) ))));
  if ((((RogueCharacter__is_alphanumeric( ch_1 ))) || ch_1 == (RogueCharacter)'_'))
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(((RogueParseReader__consume__String( ROGUE_ARG(THIS), text_0 ))));
}

RogueLogical RogueParseReader__consume_spaces( RogueClassParseReader* THIS )
{
  RogueLogical found_0 = (false);
  while (((RogueParseReader__consume__Character( ROGUE_ARG(THIS), (RogueCharacter)' ' ))))
  {
    found_0 = ((RogueLogical)true);
  }
  return (RogueLogical)(found_0);
}

RogueLogical RogueParseReader__has_another__Int32( RogueClassParseReader* THIS, RogueInt32 n_0 )
{
  return (RogueLogical)((THIS->position + n_0) <= THIS->count);
}

RogueCharacter RogueParseReader__peek__Int32( RogueClassParseReader* THIS, RogueInt32 num_ahead_0 )
{
  RogueInt32 peek_pos_1 = ((THIS->position + num_ahead_0));
  if (peek_pos_1 >= THIS->count)
  {
    return (RogueCharacter)(((RogueCharacter)(0)));
  }
  return (RogueCharacter)(THIS->data->data->characters[peek_pos_1]);
}

RogueClassParseReader* RogueParseReader__seek_location__Int32_Int32( RogueClassParseReader* THIS, RogueInt32 new_line_0, RogueInt32 new_column_1 )
{
  if ((new_line_0 < THIS->line || (new_line_0 == THIS->line && new_column_1 < THIS->column)))
  {
    THIS->position = 0;
    THIS->line = 1;
    THIS->column = 1;
  }
  while ((((RogueParseReader__has_another( ROGUE_ARG(THIS) ))) && THIS->line < new_line_0))
  {
    RogueParseReader__read( ROGUE_ARG(THIS) );
  }
  while ((((RogueParseReader__has_another( ROGUE_ARG(THIS) ))) && THIS->column < new_column_1))
  {
    RogueParseReader__read( ROGUE_ARG(THIS) );
  }
  return (RogueClassParseReader*)(THIS);
}

RogueClassParseReader* RogueParseReader__set_location__Int32_Int32( RogueClassParseReader* THIS, RogueInt32 _auto_1190_0, RogueInt32 _auto_1191_1 )
{
  THIS->column = _auto_1191_1;
  THIS->line = _auto_1190_0;
  return (RogueClassParseReader*)(THIS);
}

RogueClassParseReader* RogueParseReader__init_object( RogueClassParseReader* THIS )
{
  return (RogueClassParseReader*)(THIS);
}

RogueString* RoguePreprocessor__type_name( RogueClassPreprocessor* THIS )
{
  return (RogueString*)(Rogue_literal_strings[692]);
}

RogueClassPreprocessor* RoguePreprocessor__init__Parser( RogueClassPreprocessor* THIS, RogueClassParser* _auto_1192_0 )
{
  THIS->parser = _auto_1192_0;
  return (RogueClassPreprocessor*)(THIS);
}

RogueTokenList* RoguePreprocessor__process__TokenList( RogueClassPreprocessor* THIS, RogueTokenList* _auto_1193_0 )
{
  THIS->tokens = _auto_1193_0;
  THIS->reader = ((RoguePreprocessorTokenReader__init__TokenList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassPreprocessorTokenReader*,ROGUE_CREATE_OBJECT(PreprocessorTokenReader))), ROGUE_ARG(THIS->tokens) )));
  THIS->tokens = ((RogueTokenList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueTokenList*,ROGUE_CREATE_OBJECT(TokenList))), ROGUE_ARG(((RogueInt32)((((RogueReal64)(THIS->tokens->count)) * 1.1)))) )));
  RoguePreprocessor__process__Logical_Int32_Logical( ROGUE_ARG(THIS), true, 0, false );
  return (RogueTokenList*)(THIS->tokens);
}

RogueLogical RoguePreprocessor__consume__TokenType( RogueClassPreprocessor* THIS, RogueClassTokenType* type_0 )
{
  if (((void*)((RoguePreprocessorTokenReader__peek( ROGUE_ARG(THIS->reader) )))->_type) != ((void*)type_0))
  {
    return (RogueLogical)(false);
  }
  RoguePreprocessorTokenReader__read( ROGUE_ARG(THIS->reader) );
  return (RogueLogical)(true);
}

void RoguePreprocessor__process__Logical_Int32_Logical( RogueClassPreprocessor* THIS, RogueLogical keep_tokens_0, RogueInt32 depth_1, RogueLogical stop_on_eol_2 )
{
  ++depth_1;
  while (((RoguePreprocessorTokenReader__has_another( ROGUE_ARG(THIS->reader) ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_3,(((RoguePreprocessorTokenReader__read( ROGUE_ARG(THIS->reader) )))));
    if (((RogueToken__is_directive( t_3 ))))
    {
      if (((void*)t_3->_type) == ((void*)RogueTokenType_directive_define))
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,defined_word_4,(((RoguePreprocessorTokenReader__read_identifier( ROGUE_ARG(THIS->reader) )))));
        ROGUE_DEF_LOCAL_REF(RogueTokenList*,defined_tokens_5,(((RogueTokenList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueTokenList*,ROGUE_CREATE_OBJECT(TokenList))) )))));
        while (((RoguePreprocessorTokenReader__has_another( ROGUE_ARG(THIS->reader) ))))
        {
          ROGUE_DEF_LOCAL_REF(RogueClassToken*,def_t_6,(((RoguePreprocessorTokenReader__read( ROGUE_ARG(THIS->reader) )))));
          if (((void*)def_t_6->_type) == ((void*)RogueTokenType_eol))
          {
            goto _auto_2200;
          }
          RogueTokenList__add__Token( defined_tokens_5, def_t_6 );
        }
        _auto_2200:;
        if (keep_tokens_0)
        {
          RogueString_TokenListTable__set__String_TokenList( ROGUE_ARG(RoguePreprocessor_definitions), defined_word_4, defined_tokens_5 );
        }
        continue;
      }
      else if (((void*)t_3->_type) == ((void*)RogueTokenType_directive_include))
      {
        ROGUE_DEF_LOCAL_REF(RogueClassToken*,filepath_t_7,(((RoguePreprocessorTokenReader__read( ROGUE_ARG(THIS->reader) )))));
        if (keep_tokens_0)
        {
          if (((void*)filepath_t_7->_type) != ((void*)RogueTokenType_literal_string))
          {
            ROGUE_THROW(((RoguePreprocessorTokenReader__error__String( ROGUE_ARG(THIS->reader), Rogue_literal_strings[70] ))));
          }
          RogueRogueC__include_source__Token_String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC)), t_3, ROGUE_ARG((call_ROGUEM39( 1, filepath_t_7 ))) );
        }
        continue;
      }
      else if (((void*)t_3->_type) == ((void*)RogueTokenType_directive_includeNativeCode))
      {
        ROGUE_DEF_LOCAL_REF(RogueClassToken*,filepath_t_8,(((RoguePreprocessorTokenReader__read( ROGUE_ARG(THIS->reader) )))));
        if (keep_tokens_0)
        {
          if (((void*)filepath_t_8->_type) != ((void*)RogueTokenType_literal_string))
          {
            ROGUE_THROW(((RoguePreprocessorTokenReader__error__String( ROGUE_ARG(THIS->reader), Rogue_literal_strings[70] ))));
          }
          RogueRogueC__include_native__Token_String_String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC)), t_3, ROGUE_ARG((call_ROGUEM39( 1, filepath_t_8 ))), Rogue_literal_strings[74] );
        }
        continue;
      }
      else if (((void*)t_3->_type) == ((void*)RogueTokenType_directive_includeNativeHeader))
      {
        ROGUE_DEF_LOCAL_REF(RogueClassToken*,filepath_t_9,(((RoguePreprocessorTokenReader__read( ROGUE_ARG(THIS->reader) )))));
        if (keep_tokens_0)
        {
          if (((void*)filepath_t_9->_type) != ((void*)RogueTokenType_literal_string))
          {
            ROGUE_THROW(((RoguePreprocessorTokenReader__error__String( ROGUE_ARG(THIS->reader), Rogue_literal_strings[70] ))));
          }
          RogueRogueC__include_native__Token_String_String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC)), t_3, ROGUE_ARG((call_ROGUEM39( 1, filepath_t_9 ))), Rogue_literal_strings[73] );
        }
        continue;
      }
      else if (((void*)t_3->_type) == ((void*)RogueTokenType_directive_elseIf))
      {
        if (depth_1 == 1)
        {
          ROGUE_THROW(((RogueToken__error__String( t_3, Rogue_literal_strings[75] ))));
        }
        RoguePreprocessorTokenReader__push__Token( ROGUE_ARG(THIS->reader), t_3 );
        return;
      }
      else if (((void*)t_3->_type) == ((void*)RogueTokenType_directive_else))
      {
        if (depth_1 == 1)
        {
          ROGUE_THROW(((RogueToken__error__String( t_3, Rogue_literal_strings[76] ))));
        }
        RoguePreprocessorTokenReader__push__Token( ROGUE_ARG(THIS->reader), t_3 );
        return;
      }
      else if (((void*)t_3->_type) == ((void*)RogueTokenType_directive_endIf))
      {
        if (depth_1 == 1)
        {
          ROGUE_THROW(((RogueToken__error__String( t_3, Rogue_literal_strings[77] ))));
        }
        RoguePreprocessorTokenReader__push__Token( ROGUE_ARG(THIS->reader), t_3 );
        return;
      }
      else if (((void*)t_3->_type) == ((void*)RogueTokenType_directive_if))
      {
        RogueLogical found_true_10 = (((RoguePreprocessor__parse_logical_expression( ROGUE_ARG(THIS) ))));
        RogueLogical single_line_11 = (!(((RoguePreprocessorTokenReader__next_is__TokenType( ROGUE_ARG(THIS->reader), ROGUE_ARG(RogueTokenType_eol) )))));
        if (found_true_10)
        {
          RoguePreprocessor__process__Logical_Int32_Logical( ROGUE_ARG(THIS), keep_tokens_0, depth_1, single_line_11 );
        }
        else
        {
          RoguePreprocessor__process__Logical_Int32_Logical( ROGUE_ARG(THIS), false, depth_1, single_line_11 );
        }
        while (((void*)((RoguePreprocessorTokenReader__peek( ROGUE_ARG(THIS->reader) )))->_type) == ((void*)RogueTokenType_directive_elseIf))
        {
          RoguePreprocessorTokenReader__read( ROGUE_ARG(THIS->reader) );
          RogueLogical value_12 = (((RoguePreprocessor__parse_logical_expression( ROGUE_ARG(THIS) ))));
          if (found_true_10)
          {
            RoguePreprocessor__process__Logical_Int32_Logical( ROGUE_ARG(THIS), false, depth_1, single_line_11 );
          }
          else
          {
            found_true_10 = ((RogueLogical)value_12);
            if (value_12)
            {
              RoguePreprocessor__process__Logical_Int32_Logical( ROGUE_ARG(THIS), keep_tokens_0, depth_1, single_line_11 );
            }
            else
            {
              RoguePreprocessor__process__Logical_Int32_Logical( ROGUE_ARG(THIS), false, depth_1, single_line_11 );
            }
          }
        }
        if (((void*)((RoguePreprocessorTokenReader__peek( ROGUE_ARG(THIS->reader) )))->_type) == ((void*)RogueTokenType_directive_else))
        {
          RoguePreprocessorTokenReader__read( ROGUE_ARG(THIS->reader) );
          if (found_true_10)
          {
            RoguePreprocessor__process__Logical_Int32_Logical( ROGUE_ARG(THIS), false, depth_1, single_line_11 );
          }
          else
          {
            RoguePreprocessor__process__Logical_Int32_Logical( ROGUE_ARG(THIS), keep_tokens_0, depth_1, single_line_11 );
          }
        }
        if (!(single_line_11))
        {
          RoguePreprocessor__must_consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_directive_endIf) );
        }
        continue;
      }
      else if (((void*)t_3->_type) == ((void*)RogueTokenType_directive_module))
      {
        if (keep_tokens_0)
        {
          RogueTokenList__add__Token( ROGUE_ARG(THIS->tokens), t_3 );
          RogueTokenList__add__Token( ROGUE_ARG(THIS->tokens), ROGUE_ARG(((RoguePreprocessorTokenReader__peek( ROGUE_ARG(THIS->reader) )))) );
        }
        THIS->cur_module = ((RoguePreprocessorTokenReader__read_identifier( ROGUE_ARG(THIS->reader) )));
        continue;
      }
    }
    if ((((void*)t_3->_type) == ((void*)RogueTokenType_keyword_class) || ((void*)t_3->_type) == ((void*)RogueTokenType_keyword_routine)))
    {
      if ((!!(THIS->cur_module) && ((void*)((RoguePreprocessorTokenReader__peek( ROGUE_ARG(THIS->reader) )))->_type) == ((void*)RogueTokenType_identifier)))
      {
        if (keep_tokens_0)
        {
          RogueTokenList__add__Token( ROGUE_ARG(THIS->tokens), t_3 );
        }
        t_3 = ((RogueClassToken*)((RoguePreprocessorTokenReader__read( ROGUE_ARG(THIS->reader) ))));
        ROGUE_DEF_LOCAL_REF(RogueString*,class_name_13,((call_ROGUEM39( 1, t_3 ))));
        RogueProgram__add_module_id__String_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(THIS->cur_module), class_name_13 );
        if (keep_tokens_0)
        {
          RogueTokenList__add__Token( ROGUE_ARG(THIS->tokens), ROGUE_ARG((call_ROGUEM96( 11, ROGUE_ARG(t_3->_type), t_3, ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->cur_module) )))) )))), Rogue_literal_strings[82] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], class_name_13 )))) )))) )))) ))) );
        }
        continue;
      }
    }
    if (((void*)t_3->_type) == ((void*)RogueTokenType_literal_string))
    {
      while (((void*)((RoguePreprocessorTokenReader__peek( ROGUE_ARG(THIS->reader) )))->_type) == ((void*)RogueTokenType_literal_string))
      {
        t_3 = ((RogueClassToken*)(call_ROGUEM96( 11, ROGUE_ARG(t_3->_type), t_3, ROGUE_ARG(((RogueString__operatorPLUS__String( ROGUE_ARG((call_ROGUEM39( 1, t_3 ))), ROGUE_ARG((call_ROGUEM39( 1, ROGUE_ARG(((RoguePreprocessorTokenReader__read( ROGUE_ARG(THIS->reader) )))) ))) )))) )));
      }
    }
    if (keep_tokens_0)
    {
      RogueTokenList__add__Token( ROGUE_ARG(THIS->tokens), t_3 );
    }
    if ((stop_on_eol_2 && ((void*)t_3->_type) == ((void*)RogueTokenType_eol)))
    {
      return;
    }
  }
}

void RoguePreprocessor__must_consume__TokenType( RogueClassPreprocessor* THIS, RogueClassTokenType* type_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueString*,message_1,(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[78] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(type_0->name) )))) )))), Rogue_literal_strings[34] )))) )))));
  if (!(((RoguePreprocessorTokenReader__has_another( ROGUE_ARG(THIS->reader) )))))
  {
    ROGUE_THROW(((RogueRogueError__init__String_String_Int32_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassRogueError*,ROGUE_CREATE_OBJECT(RogueError))), message_1, ROGUE_ARG(((RogueString*)(NULL))), 0, 0 ))));
  }
  ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_2,(((RoguePreprocessorTokenReader__read( ROGUE_ARG(THIS->reader) )))));
  if (((void*)t_2->_type) != ((void*)type_0))
  {
    ROGUE_THROW(((RogueToken__error__String( t_2, message_1 ))));
  }
}

RogueLogical RoguePreprocessor__parse_logical_expression( RogueClassPreprocessor* THIS )
{
  return (RogueLogical)(((RoguePreprocessor__parse_logical_or( ROGUE_ARG(THIS) ))));
}

RogueLogical RoguePreprocessor__parse_logical_or( RogueClassPreprocessor* THIS )
{
  return (RogueLogical)(((RoguePreprocessor__parse_logical_or__Logical( ROGUE_ARG(THIS), ROGUE_ARG(((RoguePreprocessor__parse_logical_and( ROGUE_ARG(THIS) )))) ))));
}

RogueLogical RoguePreprocessor__parse_logical_or__Logical( RogueClassPreprocessor* THIS, RogueLogical lhs_0 )
{
  if (((RoguePreprocessor__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_or) ))))
  {
    return (RogueLogical)(((RoguePreprocessor__parse_logical_or__Logical( ROGUE_ARG(THIS), ROGUE_ARG((((RoguePreprocessor__parse_logical_and( ROGUE_ARG(THIS) ))) || lhs_0)) ))));
  }
  return (RogueLogical)(lhs_0);
}

RogueLogical RoguePreprocessor__parse_logical_and( RogueClassPreprocessor* THIS )
{
  return (RogueLogical)(((RoguePreprocessor__parse_logical_and__Logical( ROGUE_ARG(THIS), ROGUE_ARG(((RoguePreprocessor__parse_logical_term( ROGUE_ARG(THIS) )))) ))));
}

RogueLogical RoguePreprocessor__parse_logical_and__Logical( RogueClassPreprocessor* THIS, RogueLogical lhs_0 )
{
  if (((RoguePreprocessor__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_and) ))))
  {
    return (RogueLogical)(((RoguePreprocessor__parse_logical_and__Logical( ROGUE_ARG(THIS), ROGUE_ARG((((RoguePreprocessor__parse_logical_term( ROGUE_ARG(THIS) ))) && lhs_0)) ))));
  }
  return (RogueLogical)(lhs_0);
}

RogueLogical RoguePreprocessor__parse_logical_term( RogueClassPreprocessor* THIS )
{
  for (;;)
  {
    ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_0,(((RoguePreprocessorTokenReader__peek( ROGUE_ARG(THIS->reader) )))));
    if (((RoguePreprocessor__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_not) ))))
    {
      return (RogueLogical)(!(((RoguePreprocessor__parse_logical_term( ROGUE_ARG(THIS) )))));
    }
    if (((RoguePreprocessor__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_open_paren) ))))
    {
      RogueLogical result_1 = (((RoguePreprocessor__parse_logical_expression( ROGUE_ARG(THIS) ))));
      RoguePreprocessor__must_consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_symbol_close_paren) );
      return (RogueLogical)(result_1);
    }
    if (((void*)t_0->_type) == ((void*)RogueTokenType_literal_string))
    {
      ROGUE_DEF_LOCAL_REF(RogueString*,target_2,((call_ROGUEM39( 1, ROGUE_ARG(((RoguePreprocessorTokenReader__read( ROGUE_ARG(THIS->reader) )))) ))));
      return (RogueLogical)(((RogueString_LogicalTable__get__String( ROGUE_ARG(((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->compile_targets), target_2 ))));
    }
    if (((RoguePreprocessor__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_true) ))))
    {
      return (RogueLogical)(true);
    }
    if (((RoguePreprocessor__consume__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_keyword_false) ))))
    {
      return (RogueLogical)(false);
    }
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(((RoguePreprocessorTokenReader__peek( ROGUE_ARG(THIS->reader) )))), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[79] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(((RoguePreprocessorTokenReader__peek( ROGUE_ARG(THIS->reader) )))))) )))) )))), Rogue_literal_strings[34] )))) )))) ))));
  }
}

RogueTokenList* RoguePreprocessor__reprocess__TokenList( RogueClassPreprocessor* THIS, RogueTokenList* _auto_1194_0 )
{
  THIS->tokens = _auto_1194_0;
  ROGUE_DEF_LOCAL_REF(RogueClassTokenListRebuilder*,rebuilder_1,(((RogueTokenList__rebuilder( ROGUE_ARG(THIS->tokens) )))));
  while (((RogueTokenListRebuilder__has_another( rebuilder_1 ))))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_2,(((RogueTokenListRebuilder__read( rebuilder_1 )))));
    while (((((void*)t_2->_type) == ((void*)RogueTokenType_literal_string) && ((RogueTokenListRebuilder__has_another( rebuilder_1 )))) && ((void*)((RogueTokenListRebuilder__peek__Int32( rebuilder_1, 0 )))->_type) == ((void*)RogueTokenType_literal_string)))
    {
      t_2 = ((RogueClassToken*)(call_ROGUEM96( 11, ROGUE_ARG(t_2->_type), t_2, ROGUE_ARG(((RogueString__operatorPLUS__String( ROGUE_ARG((call_ROGUEM39( 1, t_2 ))), ROGUE_ARG((call_ROGUEM39( 1, ROGUE_ARG(((RogueTokenListRebuilder__read( rebuilder_1 )))) ))) )))) )));
    }
    RogueTokenListRebuilder__write__Token( rebuilder_1, t_2 );
  }
  return (RogueTokenList*)(THIS->tokens);
}

RogueClassPreprocessor* RoguePreprocessor__init_object( RogueClassPreprocessor* THIS )
{
  return (RogueClassPreprocessor*)(THIS);
}

RogueString* RogueEOLToken__to_String( RogueClassEOLToken* THIS )
{
  if ((!!(THIS->comment) && !!(THIS->comment->count)))
  {
    return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[801] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->comment) )))) )))) ))));
  }
  return (RogueString*)(Rogue_literal_strings[264]);
}

RogueString* RogueEOLToken__type_name( RogueClassEOLToken* THIS )
{
  return (RogueString*)(Rogue_literal_strings[807]);
}

RogueClassEOLToken* RogueEOLToken__init_object( RogueClassEOLToken* THIS )
{
  return (RogueClassEOLToken*)(THIS);
}

RogueClassEOLToken* RogueEOLToken__init__TokenType_String( RogueClassEOLToken* THIS, RogueClassTokenType* _auto_1197_0, RogueString* _auto_1198_1 )
{
  THIS->comment = _auto_1198_1;
  THIS->_type = _auto_1197_0;
  return (RogueClassEOLToken*)(THIS);
}

RogueClassEOLToken* RogueEOLToken__init__Token( RogueClassEOLToken* THIS, RogueClassToken* existing_0 )
{
  THIS->_type = RogueTokenType_eol;
  RogueToken__set_location__Token( ROGUE_ARG(((RogueClassToken*)THIS)), existing_0 );
  return (RogueClassEOLToken*)(THIS);
}

RogueString* RogueCmdAdd__type_name( RogueClassCmdAdd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1093]);
}

RogueClassCmd* RogueCmdAdd__clone__CloneArgs( RogueClassCmdAdd* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdAdd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdAdd*,ROGUE_CREATE_OBJECT(CmdAdd)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

RogueClassCmd* RogueCmdAdd__combine_literal_operands__Type( RogueClassCmdAdd* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralReal64*,ROGUE_CREATE_OBJECT(CmdLiteralReal64))), ROGUE_ARG(THIS->t), ROGUE_ARG((((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value + ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value)) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), ROGUE_ARG((((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value + ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value)) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdAdd* RogueCmdAdd__init_object( RogueClassCmdAdd* THIS )
{
  return (RogueClassCmdAdd*)(THIS);
}

RogueString* RogueCmdAdd__fn_name( RogueClassCmdAdd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[921]);
}

RogueClassCmd* RogueCmdAdd__resolve_operator_method__Scope_Type_Type( RogueClassCmdAdd* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  if ((((void*)left_type_1) != ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String) && ((void*)right_type_2) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String)))
  {
    THIS->left = (call_ROGUEM249( 25, ROGUE_ARG(((RogueClassCmdBinary*)((RogueClassCmdAdd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdAdd*,ROGUE_CREATE_OBJECT(CmdAdd)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralString*,ROGUE_CREATE_OBJECT(CmdLiteralString))), ROGUE_ARG(THIS->t), Rogue_literal_strings[0], 0 )))))), ROGUE_ARG(THIS->left) ))))))), scope_0 ));
    left_type_1 = ((RogueClassType*)(call_ROGUEM60( 22, ROGUE_ARG(THIS->left) )));
  }
  return (RogueClassCmd*)((RogueCmdBinary__resolve_operator_method__Scope_Type_Type( ROGUE_ARG(((RogueClassCmdBinary*)THIS)), scope_0, left_type_1, right_type_2 )));
}

RogueString* RogueCmdAdd__symbol( RogueClassCmdAdd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[215]);
}

RogueString* RogueCmdNativeHeader__type_name( RogueClassCmdNativeHeader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[830]);
}

RogueClassCmdNativeHeader* RogueCmdNativeHeader__clone__CloneArgs( RogueClassCmdNativeHeader* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdNativeHeader*)(((RogueCmdNativeHeader__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdNativeHeader*,ROGUE_CREATE_OBJECT(CmdNativeHeader))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->code) ))));
}

RogueLogical RogueCmdNativeHeader__requires_semicolon( RogueClassCmdNativeHeader* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdNativeHeader__resolve__Scope( RogueClassCmdNativeHeader* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->code))
  {
    if (!(((RogueStringList__locate__String( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_header), ROGUE_ARG(THIS->code) ))).exists))
    {
      RogueStringList__add__String( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_header), ROGUE_ARG(THIS->code) );
    }
    THIS->code = ((RogueString*)(NULL));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdNoAction__init__Token( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdNoAction*,ROGUE_CREATE_OBJECT(CmdNoAction))), ROGUE_ARG(THIS->t) ))))));
}

void RogueCmdNativeHeader__update_this_type__Scope( RogueClassCmdNativeHeader* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdNativeHeader* RogueCmdNativeHeader__init_object( RogueClassCmdNativeHeader* THIS )
{
  return (RogueClassCmdNativeHeader*)(THIS);
}

RogueClassCmdNativeHeader* RogueCmdNativeHeader__init__Token_String( RogueClassCmdNativeHeader* THIS, RogueClassToken* _auto_1207_0, RogueString* _auto_1208_1 )
{
  THIS->code = _auto_1208_1;
  THIS->t = _auto_1207_0;
  return (RogueClassCmdNativeHeader*)(THIS);
}

RogueString* RogueCmdNativeCode__type_name( RogueClassCmdNativeCode* THIS )
{
  return (RogueString*)(Rogue_literal_strings[831]);
}

RogueClassCmdNativeCode* RogueCmdNativeCode__clone__CloneArgs( RogueClassCmdNativeCode* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdNativeCode*)(((RogueCmdNativeCode__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdNativeCode*,ROGUE_CREATE_OBJECT(CmdNativeCode))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->code) ))));
}

RogueLogical RogueCmdNativeCode__requires_semicolon( RogueClassCmdNativeCode* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdNativeCode__resolve__Scope( RogueClassCmdNativeCode* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->code))
  {
    if (!(((RogueStringList__locate__String( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_code), ROGUE_ARG(THIS->code) ))).exists))
    {
      RogueStringList__add__String( ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_code), ROGUE_ARG(THIS->code) );
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdNoAction__init__Token( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdNoAction*,ROGUE_CREATE_OBJECT(CmdNoAction))), ROGUE_ARG(THIS->t) ))))));
}

void RogueCmdNativeCode__update_this_type__Scope( RogueClassCmdNativeCode* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdNativeCode* RogueCmdNativeCode__init_object( RogueClassCmdNativeCode* THIS )
{
  return (RogueClassCmdNativeCode*)(THIS);
}

RogueClassCmdNativeCode* RogueCmdNativeCode__init__Token_String( RogueClassCmdNativeCode* THIS, RogueClassToken* _auto_1209_0, RogueString* _auto_1210_1 )
{
  THIS->code = _auto_1210_1;
  THIS->t = _auto_1209_0;
  return (RogueClassCmdNativeCode*)(THIS);
}

RogueString* RogueCmdIf__type_name( RogueClassCmdIf* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1058]);
}

RogueClassCmd* RogueCmdIf__clone__CloneArgs( RogueClassCmdIf* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassTaskArgs*,task_args_1,(((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs)))));
  if ((!!(task_args_1) && THIS->contains_yield))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdTaskControlSection*,next_section_2,(((RogueTaskArgs__create_section( task_args_1 )))));
    ROGUE_DEF_LOCAL_REF(RogueClassCmdTaskControlSection*,end_section_3,(((RogueTaskArgs__create_section( task_args_1 )))));
    THIS->task_escape_section = end_section_3;
    RogueTaskArgs__add_conditional_jump__Cmd_CmdTaskControlSection( task_args_1, ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalNot*,ROGUE_CREATE_OBJECT(CmdLogicalNot)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->condition), clone_args_0 ))) )))))))), next_section_2 );
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_2202_5,(THIS->statements));
      RogueInt32 _auto_2203_6 = (0);
      for (;_auto_2203_6 < _auto_2202_5->count;++_auto_2203_6)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,statement_7,(((RogueClassCmd*)(_auto_2202_5->data->objects[_auto_2203_6]))));
        RogueTaskArgs__add__Cmd( task_args_1, ROGUE_ARG((call_ROGUEM71( 6, statement_7, ROGUE_ARG(((RogueClassCloneArgs*)(task_args_1))) ))) );
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, ROGUE_ARG(THIS->t), end_section_3 );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, next_section_2 );
    if (!!(THIS->else_statements))
    {
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_2204_8,(THIS->else_statements));
        RogueInt32 _auto_2205_9 = (0);
        for (;_auto_2205_9 < _auto_2204_8->count;++_auto_2205_9)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassCmd*,statement_10,(((RogueClassCmd*)(_auto_2204_8->data->objects[_auto_2205_9]))));
          RogueTaskArgs__add__Cmd( task_args_1, ROGUE_ARG((call_ROGUEM71( 6, statement_10, ROGUE_ARG(((RogueClassCloneArgs*)(task_args_1))) ))) );
        }
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, ROGUE_ARG(THIS->t), end_section_3 );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, end_section_3 );
    if (end_section_3->ip < task_args_1->cmd_task_control->sections->count)
    {
      RogueTaskArgs__jump_to_new_section__Token( task_args_1, ROGUE_ARG(THIS->t) );
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdIf*,result_4,(((RogueCmdIf__init__Token_Cmd_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdIf*,ROGUE_CREATE_OBJECT(CmdIf))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->condition), clone_args_0 ))), ROGUE_ARG(THIS->_control_type) )))));
    call_ROGUEM211( 35, ((RogueClassCmdControlStructure*)result_4), ROGUE_ARG(((RogueClassCmdControlStructure*)(THIS))) );
    THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_4));
    result_4->statements = ((RogueCmdStatementList__clone__CloneArgs( ROGUE_ARG(THIS->statements), clone_args_0 )));
    result_4->else_statements = ((RogueCmd__clone__CmdStatementList_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->else_statements), clone_args_0 )));
    return (RogueClassCmd*)(((RogueClassCmd*)(result_4)));
  }
}

RogueClassCmd* RogueCmdIf__resolve__Scope( RogueClassCmdIf* THIS, RogueClassScope* scope_0 )
{
  THIS->condition = (call_ROGUEM52( 25, ROGUE_ARG(THIS->condition), scope_0 ));
  THIS->condition = ((RogueCmd__require_logical__Scope( ROGUE_ARG(THIS->condition), scope_0 )));
  RogueCmdControlStructureList__add__CmdControlStructure( ROGUE_ARG(scope_0->control_stack), ROGUE_ARG(((RogueClassCmdControlStructure*)(THIS))) );
  RogueCmdStatementList__resolve__Scope_Logical( ROGUE_ARG(THIS->statements), scope_0, false );
  if (!!(THIS->else_statements))
  {
    RogueCmdStatementList__resolve__Scope_Logical( ROGUE_ARG(THIS->else_statements), scope_0, false );
  }
  RogueCmdControlStructureList__remove_last( ROGUE_ARG(scope_0->control_stack) );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdIf__write_cpp__CPPWriter_Logical( RogueClassCmdIf* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[987] );
  if ((RogueObject_instance_of(THIS->condition,RogueTypeCmdLiteralLogical) && !(((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->condition,RogueTypeCmdLiteralLogical)))->value)))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[80] );
    call_ROGUEM72( 30, ROGUE_ARG(THIS->condition), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
  }
  else
  {
    call_ROGUEM72( 30, ROGUE_ARG(THIS->condition), writer_0, false );
  }
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[28] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[210] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( ROGUE_ARG(THIS->statements), writer_0, false );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[128] );
  if (!!(THIS->else_statements))
  {
    if ((THIS->else_statements->count == 1 && RogueObject_instance_of(((RogueClassCmd*)(THIS->else_statements->data->objects[0])),RogueTypeCmdIf)))
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[988] );
      RogueCmdStatementList__write_cpp__CPPWriter_Logical( ROGUE_ARG(THIS->else_statements), writer_0, false );
    }
    else
    {
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[102] );
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[210] );
      writer_0->indent += 2;
      RogueCmdStatementList__write_cpp__CPPWriter_Logical( ROGUE_ARG(THIS->else_statements), writer_0, false );
      writer_0->indent -= 2;
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[128] );
    }
  }
  if (!!(THIS->escape_label))
  {
    RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, ROGUE_ARG(THIS->escape_label) )))), Rogue_literal_strings[975] );
  }
}

void RogueCmdIf__trace_used_code( RogueClassCmdIf* THIS )
{
  call_ROGUEM59( 31, ROGUE_ARG(THIS->condition) );
  RogueCmdStatementList__trace_used_code( ROGUE_ARG(THIS->statements) );
  if (!!(THIS->else_statements))
  {
    RogueCmdStatementList__trace_used_code( ROGUE_ARG(THIS->else_statements) );
  }
}

void RogueCmdIf__update_this_type__Scope( RogueClassCmdIf* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->condition), scope_0 );
  RogueCmdStatementList__update_this_type__Scope( ROGUE_ARG(THIS->statements), scope_0 );
  if (!!(THIS->else_statements))
  {
    RogueCmdStatementList__update_this_type__Scope( ROGUE_ARG(THIS->else_statements), scope_0 );
  }
}

RogueClassCmdIf* RogueCmdIf__init_object( RogueClassCmdIf* THIS )
{
  return (RogueClassCmdIf*)(THIS);
}

RogueClassCmdIf* RogueCmdIf__init__Token_Cmd_Int32( RogueClassCmdIf* THIS, RogueClassToken* _auto_1211_0, RogueClassCmd* _auto_1212_1, RogueInt32 _auto_1213_2 )
{
  THIS->_control_type = _auto_1213_2;
  THIS->condition = _auto_1212_1;
  THIS->t = _auto_1211_0;
  THIS->statements = ((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )));
  return (RogueClassCmdIf*)(THIS);
}

RogueClassCmdIf* RogueCmdIf__init__Token_Cmd_CmdStatementList_Int32( RogueClassCmdIf* THIS, RogueClassToken* _auto_1214_0, RogueClassCmd* _auto_1215_1, RogueClassCmdStatementList* _auto_1216_2, RogueInt32 _auto_1217_3 )
{
  THIS->_control_type = _auto_1217_3;
  THIS->statements = _auto_1216_2;
  THIS->condition = _auto_1215_1;
  THIS->t = _auto_1214_0;
  return (RogueClassCmdIf*)(THIS);
}

RogueString* RogueCmdWhich__type_name( RogueClassCmdWhich* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1059]);
}

RogueClassCmdWhich* RogueCmdWhich__clone__CloneArgs( RogueClassCmdWhich* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdWhich*,result_1,(((RogueCmdWhich__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWhich*,ROGUE_CREATE_OBJECT(CmdWhich))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->expression), clone_args_0 ))), ROGUE_ARG(((RogueCmdWhichCaseList*)(NULL))), ROGUE_ARG(((RogueClassCmdWhichCase*)(NULL))), 5 )))));
  call_ROGUEM211( 35, ((RogueClassCmdControlStructure*)result_1), ROGUE_ARG(((RogueClassCmdControlStructure*)(THIS))) );
  THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_1));
  ROGUE_DEF_LOCAL_REF(RogueCmdWhichCaseList*,cloned_cases_2,(((RogueCmdWhichCaseList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueCmdWhichCaseList*,ROGUE_CREATE_OBJECT(CmdWhichCaseList))), ROGUE_ARG(THIS->cases->count) )))));
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdWhichCaseList*,_auto_2206_3,(THIS->cases));
    RogueInt32 _auto_2207_4 = (0);
    for (;_auto_2207_4 < _auto_2206_3->count;++_auto_2207_4)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdWhichCase*,c_5,(((RogueClassCmdWhichCase*)(_auto_2206_3->data->objects[_auto_2207_4]))));
      RogueCmdWhichCaseList__add__CmdWhichCase( cloned_cases_2, ROGUE_ARG(((RogueCmdWhichCase__clone__CloneArgs( c_5, clone_args_0 )))) );
    }
  }
  result_1->cases = cloned_cases_2;
  if (!!(THIS->case_others))
  {
    result_1->case_others = ((RogueCmdWhichCase__clone__CloneArgs( ROGUE_ARG(THIS->case_others), clone_args_0 )));
  }
  return (RogueClassCmdWhich*)(result_1);
}

RogueClassCmd* RogueCmdWhich__resolve__Scope( RogueClassCmdWhich* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( ROGUE_ARG(scope_0->control_stack), ROGUE_ARG(((RogueClassCmdControlStructure*)(THIS))) );
  THIS->expression = (call_ROGUEM52( 25, ROGUE_ARG(THIS->expression), scope_0 ));
  RogueLogical all_literal_cases_1 = (true);
  ROGUE_DEF_LOCAL_REF(RogueClassType*,expression_type_2,((call_ROGUEM60( 22, ROGUE_ARG(THIS->expression) ))));
  if (((void*)expression_type_2) != ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    if ((((void*)expression_type_2) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte) || ((void*)expression_type_2) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character)))
    {
      THIS->expression = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG(THIS->expression), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32), scope_0 ))), scope_0 ));
    }
    else
    {
      all_literal_cases_1 = ((RogueLogical)false);
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdWhichCaseList*,_auto_2208_10,(THIS->cases));
    RogueInt32 _auto_2209_11 = (0);
    for (;_auto_2209_11 < _auto_2208_10->count;++_auto_2209_11)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdWhichCase*,c_12,(((RogueClassCmdWhichCase*)(_auto_2208_10->data->objects[_auto_2209_11]))));
      RogueCmdArgs__resolve__Scope( ROGUE_ARG(c_12->conditions), scope_0 );
      if (all_literal_cases_1)
      {
        {
          ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_2210_13,(c_12->conditions));
          RogueInt32 _auto_2211_14 = (0);
          for (;_auto_2211_14 < _auto_2210_13->count;++_auto_2211_14)
          {
            ROGUE_DEF_LOCAL_REF(RogueClassCmd*,condition_15,(((RogueClassCmd*)(_auto_2210_13->data->objects[_auto_2211_14]))));
            if ((!((call_ROGUEM57( 18, condition_15 ))) || RogueObject_instance_of(condition_15,RogueTypeCmdLiteralString)))
            {
              all_literal_cases_1 = ((RogueLogical)false);
              goto _auto_2212;
            }
          }
        }
        _auto_2212:;
      }
      RogueCmdStatementList__resolve__Scope_Logical( ROGUE_ARG(c_12->statements), scope_0, false );
    }
  }
  if (!!(THIS->case_others))
  {
    RogueCmdArgs__resolve__Scope( ROGUE_ARG(THIS->case_others->conditions), scope_0 );
    RogueCmdStatementList__resolve__Scope_Logical( ROGUE_ARG(THIS->case_others->statements), scope_0, false );
  }
  RogueCmdControlStructureList__remove_last( ROGUE_ARG(scope_0->control_stack) );
  if ((all_literal_cases_1 && !(THIS->contains_yield)))
  {
    return (RogueClassCmd*)((call_ROGUEM211( 35, ROGUE_ARG(((RogueClassCmdControlStructure*)((RogueCmdSwitch__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdSwitch*,ROGUE_CREATE_OBJECT(CmdSwitch))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->expression), ROGUE_ARG(THIS->cases), ROGUE_ARG(THIS->case_others), 5 ))))), ROGUE_ARG(((RogueClassCmdControlStructure*)(THIS))) )));
  }
  ROGUE_DEF_LOCAL_REF(RogueClassCmdBlock*,result_3,(((RogueCmdBlock__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdBlock*,ROGUE_CREATE_OBJECT(CmdBlock))), ROGUE_ARG(THIS->t), 5 )))));
  call_ROGUEM211( 35, ((RogueClassCmdControlStructure*)result_3), ROGUE_ARG(((RogueClassCmdControlStructure*)(THIS))) );
  THIS->expression = (call_ROGUEM52( 25, ROGUE_ARG(THIS->expression), scope_0 ));
  ROGUE_DEF_LOCAL_REF(RogueString*,var_name_4,0);
  ROGUE_DEF_LOCAL_REF(RogueClassLocal*,expression_var_5,0);
  if (RogueObject_instance_of(THIS->expression,RogueTypeCmdReadLocal))
  {
    expression_var_5 = ((RogueClassLocal*)((RogueClassCmdReadLocal*)(RogueObject_as(THIS->expression,RogueTypeCmdReadLocal)))->local_info);
    var_name_4 = ((RogueString*)expression_var_5->name);
  }
  else
  {
    var_name_4 = ((RogueString*)((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))));
    expression_var_5 = ((RogueClassLocal*)((RogueMethod__add_local__Token_String_Type_Cmd( ROGUE_ARG(scope_0->this_method), ROGUE_ARG(THIS->t), var_name_4, ROGUE_ARG((call_ROGUEM60( 22, ROGUE_ARG(THIS->expression) ))), ROGUE_ARG(THIS->expression) ))));
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)result_3->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLocalDeclaration*,ROGUE_CREATE_OBJECT(CmdLocalDeclaration))), ROGUE_ARG(THIS->t), expression_var_5, false )))))) );
  }
  if (!!(THIS->cases->count))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdIf*,cmd_if_6,(((RogueCmdIf__init__Token_Cmd_CmdStatementList_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdIf*,ROGUE_CREATE_OBJECT(CmdIf))), ROGUE_ARG(THIS->expression->t), ROGUE_ARG(((RogueCmdWhichCase__as_conditional__String( ROGUE_ARG(((RogueClassCmdWhichCase*)(THIS->cases->data->objects[0]))), var_name_4 )))), ROGUE_ARG(((RogueClassCmdWhichCase*)(THIS->cases->data->objects[0]))->statements), 2 )))));
    ROGUE_DEF_LOCAL_REF(RogueClassCmdIf*,cur_if_7,(cmd_if_6));
    {
      ROGUE_DEF_LOCAL_REF(RogueCmdWhichCaseList*,_auto_2218_16,(THIS->cases));
      RogueInt32 i_17 = (0);
      for (;i_17 < _auto_2218_16->count;++i_17)
      {
        if (i_17 > 0)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassCmdWhichCase*,c_8,(((RogueClassCmdWhichCase*)(THIS->cases->data->objects[i_17]))));
          ROGUE_DEF_LOCAL_REF(RogueClassCmdIf*,cmd_else_if_9,(((RogueCmdIf__init__Token_Cmd_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdIf*,ROGUE_CREATE_OBJECT(CmdIf))), ROGUE_ARG(c_8->t), ROGUE_ARG(((RogueCmdWhichCase__as_conditional__String( c_8, var_name_4 )))), 3 )))));
          cmd_else_if_9->statements = c_8->statements;
          cur_if_7->else_statements = ((RogueCmdStatementList__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))), ROGUE_ARG(((RogueClassCmd*)(cmd_else_if_9))) )));
          cur_if_7 = ((RogueClassCmdIf*)cmd_else_if_9);
        }
      }
    }
    if (!!(THIS->case_others))
    {
      cur_if_7->else_statements = THIS->case_others->statements;
    }
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)result_3->statements)), ROGUE_ARG(((RogueClassCmd*)(cmd_if_6))) );
  }
  else if (!!(THIS->case_others))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_2219_18,(THIS->case_others->statements));
      RogueInt32 _auto_2220_19 = (0);
      for (;_auto_2220_19 < _auto_2219_18->count;++_auto_2220_19)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,cmd_20,(((RogueClassCmd*)(_auto_2219_18->data->objects[_auto_2220_19]))));
        RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)result_3->statements)), cmd_20 );
      }
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBlock__resolve__Scope( result_3, scope_0 ))))));
}

void RogueCmdWhich__update_this_type__Scope( RogueClassCmdWhich* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->expression), scope_0 );
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdWhichCaseList*,_auto_2221_1,(THIS->cases));
    RogueInt32 _auto_2222_2 = (0);
    for (;_auto_2222_2 < _auto_2221_1->count;++_auto_2222_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdWhichCase*,c_3,(((RogueClassCmdWhichCase*)(_auto_2221_1->data->objects[_auto_2222_2]))));
      RogueCmdWhichCase__update_this_type__Scope( c_3, scope_0 );
    }
  }
  if (!!(THIS->case_others))
  {
    RogueCmdWhichCase__update_this_type__Scope( ROGUE_ARG(THIS->case_others), scope_0 );
  }
}

RogueClassCmdWhich* RogueCmdWhich__init_object( RogueClassCmdWhich* THIS )
{
  return (RogueClassCmdWhich*)(THIS);
}

RogueClassCmdWhich* RogueCmdWhich__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Int32( RogueClassCmdWhich* THIS, RogueClassToken* _auto_1218_0, RogueClassCmd* _auto_1219_1, RogueCmdWhichCaseList* _auto_1220_2, RogueClassCmdWhichCase* _auto_1221_3, RogueInt32 _auto_1222_4 )
{
  THIS->_control_type = _auto_1222_4;
  THIS->case_others = _auto_1221_3;
  THIS->cases = _auto_1220_2;
  THIS->expression = _auto_1219_1;
  THIS->t = _auto_1218_0;
  return (RogueClassCmdWhich*)(THIS);
}

RogueClassCmdWhichCase* RogueCmdWhich__add_case__Token( RogueClassCmdWhich* THIS, RogueClassToken* case_t_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdWhichCase*,result_1,(((RogueCmdWhichCase__init__Token_CmdArgs_CmdStatementList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWhichCase*,ROGUE_CREATE_OBJECT(CmdWhichCase))), case_t_0, ROGUE_ARG(((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )))), ROGUE_ARG(((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )))) )))));
  RogueCmdWhichCaseList__add__CmdWhichCase( ROGUE_ARG(THIS->cases), result_1 );
  return (RogueClassCmdWhichCase*)(result_1);
}

RogueClassCmdWhichCase* RogueCmdWhich__add_case_others__Token( RogueClassCmdWhich* THIS, RogueClassToken* case_t_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdWhichCase*,result_1,(((RogueCmdWhichCase__init__Token_CmdArgs_CmdStatementList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWhichCase*,ROGUE_CREATE_OBJECT(CmdWhichCase))), case_t_0, ROGUE_ARG(((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )))), ROGUE_ARG(((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )))) )))));
  THIS->case_others = result_1;
  return (RogueClassCmdWhichCase*)(result_1);
}

RogueString* RogueCmdContingent__type_name( RogueClassCmdContingent* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1060]);
}

RogueClassCmd* RogueCmdContingent__clone__CloneArgs( RogueClassCmdContingent* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassTaskArgs*,task_args_1,(((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs)))));
  if ((!!(task_args_1) && THIS->contains_yield))
  {
    THIS->satisfied_section = ((RogueTaskArgs__create_section( task_args_1 )));
    THIS->unsatisfied_section = ((RogueTaskArgs__create_section( task_args_1 )));
    ROGUE_DEF_LOCAL_REF(RogueClassCmdTaskControlSection*,end_section_2,(((RogueTaskArgs__create_section( task_args_1 )))));
    THIS->task_escape_section = end_section_2;
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_2223_4,(THIS->statements));
      RogueInt32 _auto_2224_5 = (0);
      for (;_auto_2224_5 < _auto_2223_4->count;++_auto_2224_5)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,statement_6,(((RogueClassCmd*)(_auto_2223_4->data->objects[_auto_2224_5]))));
        RogueTaskArgs__add__Cmd( task_args_1, ROGUE_ARG((call_ROGUEM71( 6, statement_6, ROGUE_ARG(((RogueClassCloneArgs*)(task_args_1))) ))) );
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->satisfied_section) );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, ROGUE_ARG(THIS->satisfied_section) );
    if (!!(THIS->satisfied_statements))
    {
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_2225_7,(THIS->satisfied_statements));
        RogueInt32 _auto_2226_8 = (0);
        for (;_auto_2226_8 < _auto_2225_7->count;++_auto_2226_8)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassCmd*,statement_9,(((RogueClassCmd*)(_auto_2225_7->data->objects[_auto_2226_8]))));
          RogueTaskArgs__add__Cmd( task_args_1, ROGUE_ARG((call_ROGUEM71( 6, statement_9, ROGUE_ARG(((RogueClassCloneArgs*)(task_args_1))) ))) );
        }
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, ROGUE_ARG(THIS->t), end_section_2 );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, ROGUE_ARG(THIS->unsatisfied_section) );
    if (!!(THIS->unsatisfied_statements))
    {
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_2227_10,(THIS->unsatisfied_statements));
        RogueInt32 _auto_2228_11 = (0);
        for (;_auto_2228_11 < _auto_2227_10->count;++_auto_2228_11)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassCmd*,statement_12,(((RogueClassCmd*)(_auto_2227_10->data->objects[_auto_2228_11]))));
          RogueTaskArgs__add__Cmd( task_args_1, ROGUE_ARG((call_ROGUEM71( 6, statement_12, ROGUE_ARG(((RogueClassCloneArgs*)(task_args_1))) ))) );
        }
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, ROGUE_ARG(THIS->t), end_section_2 );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, end_section_2 );
    if (end_section_2->ip < task_args_1->cmd_task_control->sections->count)
    {
      RogueTaskArgs__jump_to_new_section__Token( task_args_1, ROGUE_ARG(THIS->t) );
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdContingent*,result_3,(((RogueCmdContingent__init__Token_CmdStatementList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdContingent*,ROGUE_CREATE_OBJECT(CmdContingent))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))) )))));
    RogueCmdContingent__set_control_logic__CmdControlStructure( result_3, ROGUE_ARG(((RogueClassCmdControlStructure*)(THIS))) );
    THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_3));
    result_3->statements = ((RogueCmdStatementList__clone__CloneArgs( ROGUE_ARG(THIS->statements), clone_args_0 )));
    result_3->satisfied_statements = ((RogueCmd__clone__CmdStatementList_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->satisfied_statements), clone_args_0 )));
    result_3->unsatisfied_statements = ((RogueCmd__clone__CmdStatementList_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->unsatisfied_statements), clone_args_0 )));
    return (RogueClassCmd*)(((RogueClassCmd*)(result_3)));
  }
}

RogueClassCmdContingent* RogueCmdContingent__resolve__Scope( RogueClassCmdContingent* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( ROGUE_ARG(scope_0->control_stack), ROGUE_ARG(((RogueClassCmdControlStructure*)(THIS))) );
  if (!(!!(THIS->escape_label)))
  {
    THIS->escape_label = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
  }
  RogueCmdStatementList__resolve__Scope_Logical( ROGUE_ARG(THIS->statements), scope_0, false );
  if (!!(THIS->satisfied_statements))
  {
    RogueCmdStatementList__resolve__Scope_Logical( ROGUE_ARG(THIS->satisfied_statements), scope_0, false );
  }
  if (!!(THIS->unsatisfied_statements))
  {
    RogueCmdStatementList__resolve__Scope_Logical( ROGUE_ARG(THIS->unsatisfied_statements), scope_0, false );
  }
  RogueCmdControlStructureList__remove_last( ROGUE_ARG(scope_0->control_stack) );
  return (RogueClassCmdContingent*)(THIS);
}

void RogueCmdContingent__write_cpp__CPPWriter_Logical( RogueClassCmdContingent* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[210] );
  writer_0->indent += 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[210] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( ROGUE_ARG(THIS->statements), writer_0, false );
  if (!!(THIS->satisfied_label))
  {
    RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, ROGUE_ARG(THIS->satisfied_label) )))), Rogue_literal_strings[975] );
  }
  if (!!(THIS->satisfied_statements))
  {
    RogueCmdStatementList__write_cpp__CPPWriter_Logical( ROGUE_ARG(THIS->satisfied_statements), writer_0, false );
  }
  RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[989] )))), ROGUE_ARG(THIS->escape_label) )))), Rogue_literal_strings[219] );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[128] );
  if (!!(THIS->unsatisfied_label))
  {
    RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, ROGUE_ARG(THIS->unsatisfied_label) )))), Rogue_literal_strings[975] );
  }
  if (!!(THIS->unsatisfied_statements))
  {
    RogueCmdStatementList__write_cpp__CPPWriter_Logical( ROGUE_ARG(THIS->unsatisfied_statements), writer_0, false );
  }
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[128] );
  RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, ROGUE_ARG(THIS->escape_label) )))), Rogue_literal_strings[975] );
}

void RogueCmdContingent__trace_used_code( RogueClassCmdContingent* THIS )
{
  RogueCmdStatementList__trace_used_code( ROGUE_ARG(THIS->statements) );
  if (!!(THIS->satisfied_statements))
  {
    RogueCmdStatementList__trace_used_code( ROGUE_ARG(THIS->satisfied_statements) );
  }
  if (!!(THIS->unsatisfied_statements))
  {
    RogueCmdStatementList__trace_used_code( ROGUE_ARG(THIS->unsatisfied_statements) );
  }
}

void RogueCmdContingent__update_this_type__Scope( RogueClassCmdContingent* THIS, RogueClassScope* scope_0 )
{
  RogueCmdStatementList__update_this_type__Scope( ROGUE_ARG(THIS->statements), scope_0 );
  if (!!(THIS->satisfied_statements))
  {
    RogueCmdStatementList__update_this_type__Scope( ROGUE_ARG(THIS->satisfied_statements), scope_0 );
  }
  if (!!(THIS->unsatisfied_statements))
  {
    RogueCmdStatementList__update_this_type__Scope( ROGUE_ARG(THIS->unsatisfied_statements), scope_0 );
  }
}

RogueClassCmdContingent* RogueCmdContingent__init_object( RogueClassCmdContingent* THIS )
{
  return (RogueClassCmdContingent*)(THIS);
}

RogueClassCmd* RogueCmdContingent__set_control_logic__CmdControlStructure( RogueClassCmdContingent* THIS, RogueClassCmdControlStructure* original_0 )
{
  RogueCmdControlStructure__set_control_logic__CmdControlStructure( ROGUE_ARG(((RogueClassCmdControlStructure*)THIS)), original_0 );
  THIS->satisfied_label = ((RogueClassCmdContingent*)(RogueObject_as(original_0,RogueTypeCmdContingent)))->satisfied_label;
  THIS->unsatisfied_label = ((RogueClassCmdContingent*)(RogueObject_as(original_0,RogueTypeCmdContingent)))->unsatisfied_label;
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmdContingent* RogueCmdContingent__init__Token_CmdStatementList( RogueClassCmdContingent* THIS, RogueClassToken* _auto_1223_0, RogueClassCmdStatementList* _auto_1224_1 )
{
  THIS->statements = _auto_1224_1;
  THIS->t = _auto_1223_0;
  THIS->_control_type = 1;
  return (RogueClassCmdContingent*)(THIS);
}

RogueString* RogueCmdTry__type_name( RogueClassCmdTry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1061]);
}

RogueClassCmdTry* RogueCmdTry__clone__CloneArgs( RogueClassCmdTry* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdTry*,result_1,(((RogueCmdTry__init__Token_CmdStatementList_CmdCatchList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdTry*,ROGUE_CREATE_OBJECT(CmdTry))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))), ROGUE_ARG(((RogueCmdCatchList*)(NULL))) )))));
  call_ROGUEM211( 35, ((RogueClassCmdControlStructure*)result_1), ROGUE_ARG(((RogueClassCmdControlStructure*)(THIS))) );
  THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_1));
  result_1->statements = ((RogueCmdStatementList__clone__CloneArgs( ROGUE_ARG(THIS->statements), clone_args_0 )));
  ROGUE_DEF_LOCAL_REF(RogueCmdCatchList*,new_catches_2,(((RogueCmdCatchList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueCmdCatchList*,ROGUE_CREATE_OBJECT(CmdCatchList))) )))));
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdCatchList*,_auto_2229_3,(THIS->catches));
    RogueInt32 _auto_2230_4 = (0);
    for (;_auto_2230_4 < _auto_2229_3->count;++_auto_2230_4)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdCatch*,c_5,(((RogueClassCmdCatch*)(_auto_2229_3->data->objects[_auto_2230_4]))));
      RogueCmdCatchList__add__CmdCatch( new_catches_2, ROGUE_ARG(((RogueCmdCatch__clone__CloneArgs( c_5, clone_args_0 )))) );
    }
  }
  result_1->catches = new_catches_2;
  return (RogueClassCmdTry*)(result_1);
}

RogueClassCmd* RogueCmdTry__resolve__Scope( RogueClassCmdTry* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( ROGUE_ARG(scope_0->control_stack), ROGUE_ARG(((RogueClassCmdControlStructure*)(THIS))) );
  RogueCmdStatementList__resolve__Scope_Logical( ROGUE_ARG(THIS->statements), scope_0, false );
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdCatchList*,_auto_2231_1,(THIS->catches));
    RogueInt32 _auto_2232_2 = (0);
    for (;_auto_2232_2 < _auto_2231_1->count;++_auto_2232_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdCatch*,c_3,(((RogueClassCmdCatch*)(_auto_2231_1->data->objects[_auto_2232_2]))));
      RogueCmdCatch__resolve__Scope( c_3, scope_0 );
    }
  }
  if (THIS->contains_yield)
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[906] ))));
  }
  RogueCmdControlStructureList__remove_last( ROGUE_ARG(scope_0->control_stack) );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdTry__write_cpp__CPPWriter_Logical( RogueClassCmdTry* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[990] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[210] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( ROGUE_ARG(THIS->statements), writer_0, false );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[128] );
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdCatchList*,_auto_2233_2,(THIS->catches));
    RogueInt32 _auto_2234_3 = (0);
    for (;_auto_2234_3 < _auto_2233_2->count;++_auto_2234_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdCatch*,c_4,(((RogueClassCmdCatch*)(_auto_2233_2->data->objects[_auto_2234_3]))));
      RogueCmdCatch__write_cpp__CPPWriter_Logical( c_4, writer_0, false );
    }
  }
  if (!!(THIS->escape_label))
  {
    RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, ROGUE_ARG(THIS->escape_label) )))), Rogue_literal_strings[975] );
  }
}

void RogueCmdTry__trace_used_code( RogueClassCmdTry* THIS )
{
  RogueCmdStatementList__trace_used_code( ROGUE_ARG(THIS->statements) );
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdCatchList*,_auto_2235_0,(THIS->catches));
    RogueInt32 _auto_2236_1 = (0);
    for (;_auto_2236_1 < _auto_2235_0->count;++_auto_2236_1)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdCatch*,c_2,(((RogueClassCmdCatch*)(_auto_2235_0->data->objects[_auto_2236_1]))));
      RogueCmdCatch__trace_used_code( c_2 );
    }
  }
}

void RogueCmdTry__update_this_type__Scope( RogueClassCmdTry* THIS, RogueClassScope* scope_0 )
{
  RogueCmdStatementList__update_this_type__Scope( ROGUE_ARG(THIS->statements), scope_0 );
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdCatchList*,_auto_2237_1,(THIS->catches));
    RogueInt32 _auto_2238_2 = (0);
    for (;_auto_2238_2 < _auto_2237_1->count;++_auto_2238_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdCatch*,c_3,(((RogueClassCmdCatch*)(_auto_2237_1->data->objects[_auto_2238_2]))));
      RogueCmdCatch__update_this_type__Scope( c_3, scope_0 );
    }
  }
}

RogueClassCmdTry* RogueCmdTry__init_object( RogueClassCmdTry* THIS )
{
  return (RogueClassCmdTry*)(THIS);
}

RogueClassCmdTry* RogueCmdTry__init__Token_CmdStatementList_CmdCatchList( RogueClassCmdTry* THIS, RogueClassToken* _auto_1225_0, RogueClassCmdStatementList* _auto_1226_1, RogueCmdCatchList* _auto_1227_2 )
{
  THIS->catches = _auto_1227_2;
  THIS->statements = _auto_1226_1;
  THIS->t = _auto_1225_0;
  THIS->_control_type = 4;
  return (RogueClassCmdTry*)(THIS);
}

RogueClassCmdCatch* RogueCmdTry__add_catch__Token( RogueClassCmdTry* THIS, RogueClassToken* catch_t_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdCatch*,c_1,(((RogueCmdCatch__init__Token_Local_CmdStatementList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCatch*,ROGUE_CREATE_OBJECT(CmdCatch))), catch_t_0, ROGUE_ARG(((RogueClassLocal*)(NULL))), ROGUE_ARG(((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )))) )))));
  RogueCmdCatchList__add__CmdCatch( ROGUE_ARG(THIS->catches), c_1 );
  return (RogueClassCmdCatch*)(c_1);
}

RogueString* RogueCmdAwait__type_name( RogueClassCmdAwait* THIS )
{
  return (RogueString*)(Rogue_literal_strings[832]);
}

RogueClassCmd* RogueCmdAwait__clone__CloneArgs( RogueClassCmdAwait* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassTaskArgs*,task_args_1,(((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs)))));
  if (!!(task_args_1))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[857] ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAwait__init__Token_Cmd_CmdStatementList_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAwait*,ROGUE_CREATE_OBJECT(CmdAwait))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->expression), ROGUE_ARG(((RogueClassCloneArgs*)(task_args_1))) ))), ROGUE_ARG(((RogueCmdStatementList__clone__CloneArgs( ROGUE_ARG(THIS->statement_list), ROGUE_ARG(((RogueClassCloneArgs*)(task_args_1))) )))), ROGUE_ARG(THIS->result_var) ))))));
  }
}

RogueClassCmd* RogueCmdAwait__resolve__Scope( RogueClassCmdAwait* THIS, RogueClassScope* scope_0 )
{
  if (!(((RogueMethod__is_task_conversion( ROGUE_ARG(scope_0->this_method) )))))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[907] ))));
  }
  THIS->expression = (call_ROGUEM52( 25, ROGUE_ARG(THIS->expression), scope_0 ));
  ROGUE_DEF_LOCAL_REF(RogueClassType*,task_type_1,((call_ROGUEM60( 22, ROGUE_ARG(THIS->expression) ))));
  ROGUE_DEF_LOCAL_REF(RogueClassProperty*,p_result_2,(((RogueType__find_property__String( task_type_1, Rogue_literal_strings[430] )))));
  if (!!(THIS->result_var))
  {
    if (!!(p_result_2))
    {
      THIS->result_var->_type = p_result_2->_type;
    }
    else
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->expression->t), Rogue_literal_strings[908] ))));
    }
  }
  ROGUE_DEF_LOCAL_REF(RogueClassLocal*,task_var_3,(((RogueMethod__add_local__Token_String_Type_Cmd( ROGUE_ARG(scope_0->this_method), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )))), ROGUE_ARG(((RogueClassType*)(NULL))), ROGUE_ARG(((RogueClassCmd*)(NULL))) )))));
  task_var_3->initial_value = THIS->expression;
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS->statement_list)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLocalDeclaration*,ROGUE_CREATE_OBJECT(CmdLocalDeclaration))), ROGUE_ARG(THIS->t), task_var_3, false )))))) );
  ROGUE_DEF_LOCAL_REF(RogueClassCmdGenericLoop*,cmd_while_4,(((RogueCmdGenericLoop__init__Token_Int32_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdGenericLoop*,ROGUE_CREATE_OBJECT(CmdGenericLoop))), ROGUE_ARG(THIS->t), 8, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), ROGUE_ARG(THIS->t), task_var_3 )))))), Rogue_literal_strings[426] )))))), ROGUE_ARG(((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )))), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))) )))));
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)cmd_while_4->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdYield__init__Token( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdYield*,ROGUE_CREATE_OBJECT(CmdYield))), ROGUE_ARG(THIS->t) )))))) );
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS->statement_list)), ROGUE_ARG(((RogueClassCmd*)(cmd_while_4))) );
  if (!!(THIS->result_var))
  {
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS->statement_list)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdWriteLocal__init__Token_Local_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteLocal*,ROGUE_CREATE_OBJECT(CmdWriteLocal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->result_var), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadProperty*,ROGUE_CREATE_OBJECT(CmdReadProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), ROGUE_ARG(THIS->t), task_var_3 )))))), p_result_2 )))))) )))))) );
  }
  RogueCmdStatementList__resolve__Scope_Logical( ROGUE_ARG(THIS->statement_list), scope_0, false );
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBlock__resolve__Scope( ROGUE_ARG(((RogueCmdBlock__init__Token_CmdStatementList_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdBlock*,ROGUE_CREATE_OBJECT(CmdBlock))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->statement_list), 0 )))), scope_0 ))))));
}

RogueClassCmdAwait* RogueCmdAwait__init_object( RogueClassCmdAwait* THIS )
{
  return (RogueClassCmdAwait*)(THIS);
}

RogueClassCmdAwait* RogueCmdAwait__init__Token_Cmd_CmdStatementList_Local( RogueClassCmdAwait* THIS, RogueClassToken* _auto_1228_0, RogueClassCmd* _auto_1229_1, RogueClassCmdStatementList* _auto_1230_2, RogueClassLocal* _auto_1231_3 )
{
  THIS->result_var = _auto_1231_3;
  THIS->statement_list = _auto_1230_2;
  THIS->expression = _auto_1229_1;
  THIS->t = _auto_1228_0;
  return (RogueClassCmdAwait*)(THIS);
}

RogueString* RogueCmdYield__type_name( RogueClassCmdYield* THIS )
{
  return (RogueString*)(Rogue_literal_strings[833]);
}

RogueClassCmd* RogueCmdYield__clone__CloneArgs( RogueClassCmdYield* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassTaskArgs*,task_args_1,(((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs)))));
  if (!!(task_args_1))
  {
    RogueTaskArgs__add_yield__Token( task_args_1, ROGUE_ARG(THIS->t) );
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdYield__init__Token( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdYield*,ROGUE_CREATE_OBJECT(CmdYield))), ROGUE_ARG(THIS->t) ))))));
  }
}

RogueClassCmd* RogueCmdYield__resolve__Scope( RogueClassCmdYield* THIS, RogueClassScope* scope_0 )
{
  if (!(((RogueMethod__is_task_conversion( ROGUE_ARG(scope_0->this_method) )))))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[909] ))));
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdControlStructureList*,_auto_2239_1,(scope_0->control_stack));
    RogueInt32 _auto_2240_2 = (0);
    for (;_auto_2240_2 < _auto_2239_1->count;++_auto_2240_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdControlStructure*,control_structure_3,(((RogueClassCmdControlStructure*)(_auto_2239_1->data->objects[_auto_2240_2]))));
      control_structure_3->contains_yield = true;
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmdYield* RogueCmdYield__init_object( RogueClassCmdYield* THIS )
{
  return (RogueClassCmdYield*)(THIS);
}

RogueClassCmdYield* RogueCmdYield__init__Token( RogueClassCmdYield* THIS, RogueClassToken* _auto_1232_0 )
{
  THIS->t = _auto_1232_0;
  return (RogueClassCmdYield*)(THIS);
}

RogueString* RogueCmdThrow__type_name( RogueClassCmdThrow* THIS )
{
  return (RogueString*)(Rogue_literal_strings[834]);
}

RogueClassCmdThrow* RogueCmdThrow__clone__CloneArgs( RogueClassCmdThrow* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdThrow*)(((RogueCmdThrow__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdThrow*,ROGUE_CREATE_OBJECT(CmdThrow))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->expression), clone_args_0 ))) ))));
}

RogueClassCmd* RogueCmdThrow__resolve__Scope( RogueClassCmdThrow* THIS, RogueClassScope* scope_0 )
{
  THIS->expression = (call_ROGUEM52( 25, ROGUE_ARG(THIS->expression), scope_0 ));
  ROGUE_DEF_LOCAL_REF(RogueClassType*,expression_type_1,((call_ROGUEM60( 22, ROGUE_ARG(THIS->expression) ))));
  RogueType__organize__Scope( expression_type_1, scope_0 );
  if (!(((RogueType__instance_of__Type( expression_type_1, ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Exception) )))))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->expression->t), Rogue_literal_strings[910] ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdThrow__write_cpp__CPPWriter_Logical( RogueClassCmdThrow* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[993] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->expression), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
}

void RogueCmdThrow__trace_used_code( RogueClassCmdThrow* THIS )
{
  call_ROGUEM59( 31, ROGUE_ARG(THIS->expression) );
}

void RogueCmdThrow__update_this_type__Scope( RogueClassCmdThrow* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->expression), scope_0 );
}

RogueClassCmdThrow* RogueCmdThrow__init_object( RogueClassCmdThrow* THIS )
{
  return (RogueClassCmdThrow*)(THIS);
}

RogueClassCmdThrow* RogueCmdThrow__init__Token_Cmd( RogueClassCmdThrow* THIS, RogueClassToken* _auto_1233_0, RogueClassCmd* _auto_1234_1 )
{
  THIS->expression = _auto_1234_1;
  THIS->t = _auto_1233_0;
  return (RogueClassCmdThrow*)(THIS);
}

RogueString* RogueCmdFormattedString__type_name( RogueClassCmdFormattedString* THIS )
{
  return (RogueString*)(Rogue_literal_strings[835]);
}

RogueClassCmd* RogueCmdFormattedString__clone__CloneArgs( RogueClassCmdFormattedString* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdFormattedString__init__Token_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdFormattedString*,ROGUE_CREATE_OBJECT(CmdFormattedString))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->format), ROGUE_ARG(((RogueCmdArgs__clone__CloneArgs( ROGUE_ARG(THIS->args), clone_args_0 )))) ))))));
}

RogueClassType* RogueCmdFormattedString__implicit_type__Scope( RogueClassCmdFormattedString* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String);
}

RogueClassCmd* RogueCmdFormattedString__resolve__Scope( RogueClassCmdFormattedString* THIS, RogueClassScope* scope_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdAccess*,cmd_1,(((RogueCmdAccess__init__Token_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), Rogue_literal_strings[54], ROGUE_ARG(((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )))) )))));
  ROGUE_DEF_LOCAL_REF(RogueString*,fmt_2,(THIS->format));
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_2241_4,(THIS->args));
    RogueInt32 _auto_2242_5 = (0);
    for (;_auto_2242_5 < _auto_2241_4->count;++_auto_2242_5)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_6,(((RogueClassCmd*)(_auto_2241_4->data->objects[_auto_2242_5]))));
      arg_6 = ((RogueClassCmd*)((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, arg_6, scope_0 ))) ))));
      RogueOptionalInt32 i_3 = (((RogueString__locate__Character_OptionalInt32( fmt_2, (RogueCharacter)'$', ROGUE_ARG((RogueOptionalInt32__create())) ))));
      if (!(i_3.exists))
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[911] ))));
      }
      if (i_3.value > 0)
      {
        cmd_1 = ((RogueClassCmdAccess*)((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(cmd_1))), Rogue_literal_strings[912], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralString*,ROGUE_CREATE_OBJECT(CmdLiteralString))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueString__leftmost__Int32( fmt_2, ROGUE_ARG(i_3.value) )))), 0 )))))) )))) ))));
        fmt_2 = ((RogueString*)((RogueString__from__Int32( fmt_2, ROGUE_ARG((i_3.value + 1)) ))));
      }
      else
      {
        fmt_2 = ((RogueString*)((RogueString__from__Int32( fmt_2, 1 ))));
      }
      cmd_1 = ((RogueClassCmdAccess*)((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(cmd_1))), Rogue_literal_strings[912], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdAdd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdAdd*,ROGUE_CREATE_OBJECT(CmdAdd)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralString*,ROGUE_CREATE_OBJECT(CmdLiteralString))), ROGUE_ARG(THIS->t), Rogue_literal_strings[0], 0 )))))), arg_6 )))))))) )))) ))));
    }
  }
  if (!!(fmt_2->count))
  {
    if (((RogueString__locate__Character_OptionalInt32( fmt_2, (RogueCharacter)'$', ROGUE_ARG((RogueOptionalInt32__create())) ))).exists)
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[913] ))));
    }
    cmd_1 = ((RogueClassCmdAccess*)((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(cmd_1))), Rogue_literal_strings[912], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralString*,ROGUE_CREATE_OBJECT(CmdLiteralString))), ROGUE_ARG(THIS->t), fmt_2, 0 )))))) )))) ))));
  }
  return (RogueClassCmd*)((call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG(((RogueCmdAccess__resolve__Scope( cmd_1, scope_0 )))), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String), scope_0 ))), scope_0 )));
}

RogueClassType* Rogue_CmdFormattedString__type( RogueClassCmdFormattedString* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String);
}

void RogueCmdFormattedString__update_this_type__Scope( RogueClassCmdFormattedString* THIS, RogueClassScope* scope_0 )
{
  RogueCmdArgs__update_this_type__Scope( ROGUE_ARG(THIS->args), scope_0 );
}

RogueClassCmdFormattedString* RogueCmdFormattedString__init_object( RogueClassCmdFormattedString* THIS )
{
  return (RogueClassCmdFormattedString*)(THIS);
}

RogueClassCmdFormattedString* RogueCmdFormattedString__init__Token_String_CmdArgs( RogueClassCmdFormattedString* THIS, RogueClassToken* _auto_1235_0, RogueString* _auto_1236_1, RogueClassCmdArgs* _auto_1237_2 )
{
  THIS->args = _auto_1237_2;
  THIS->format = _auto_1236_1;
  THIS->t = _auto_1235_0;
  return (RogueClassCmdFormattedString*)(THIS);
}

RogueString* RogueCmdTrace__type_name( RogueClassCmdTrace* THIS )
{
  return (RogueString*)(Rogue_literal_strings[836]);
}

RogueClassCmdTrace* RogueCmdTrace__clone__CloneArgs( RogueClassCmdTrace* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdTrace*)(((RogueCmdTrace__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdTrace*,ROGUE_CREATE_OBJECT(CmdTrace))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->info), clone_args_0 )))) ))));
}

RogueClassCmd* RogueCmdTrace__resolve__Scope( RogueClassCmdTrace* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), Rogue_literal_strings[57] )))))), Rogue_literal_strings[914], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->info) )))) )))), scope_0 ))));
}

void RogueCmdTrace__trace_used_code( RogueClassCmdTrace* THIS )
{
}

void RogueCmdTrace__update_this_type__Scope( RogueClassCmdTrace* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdTrace* RogueCmdTrace__init_object( RogueClassCmdTrace* THIS )
{
  return (RogueClassCmdTrace*)(THIS);
}

RogueClassCmdTrace* RogueCmdTrace__init__Token_Cmd( RogueClassCmdTrace* THIS, RogueClassToken* _auto_1238_0, RogueClassCmd* _auto_1239_1 )
{
  THIS->info = _auto_1239_1;
  THIS->t = _auto_1238_0;
  return (RogueClassCmdTrace*)(THIS);
}

RogueString* RogueCmdEscape__type_name( RogueClassCmdEscape* THIS )
{
  return (RogueString*)(Rogue_literal_strings[837]);
}

RogueClassCmd* RogueCmdEscape__clone__CloneArgs( RogueClassCmdEscape* THIS, RogueClassCloneArgs* clone_args_0 )
{
  if (!!(THIS->target_cmd->task_escape_section))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassTaskArgs*,task_args_1,(((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs)))));
    return (RogueClassCmd*)(((RogueTaskArgs__create_escape__Token_CmdTaskControlSection( task_args_1, ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->target_cmd->task_escape_section) ))));
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdControlStructure*,new_target_2,(THIS->target_cmd));
    while (!!(new_target_2->cloned_command))
    {
      new_target_2 = ((RogueClassCmdControlStructure*)new_target_2->cloned_command);
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdEscape__init__Token_Int32_CmdControlStructure( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdEscape*,ROGUE_CREATE_OBJECT(CmdEscape))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->_control_type), new_target_2 ))))));
  }
}

RogueClassCmd* RogueCmdEscape__resolve__Scope( RogueClassCmdEscape* THIS, RogueClassScope* scope_0 )
{
  RogueInt32 i_1 = (scope_0->control_stack->count);
  while (i_1 > 0)
  {
    --i_1;
    ROGUE_DEF_LOCAL_REF(RogueClassCmdControlStructure*,cmd_2,(((RogueClassCmdControlStructure*)(scope_0->control_stack->data->objects[i_1]))));
    if (cmd_2->_control_type == THIS->_control_type)
    {
      while (!!(cmd_2->cloned_command))
      {
        cmd_2 = ((RogueClassCmdControlStructure*)cmd_2->cloned_command);
      }
      if (!(!!(cmd_2->escape_label)))
      {
        cmd_2->escape_label = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
      }
      THIS->target_cmd = cmd_2;
      return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
    }
  }
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[915] ))));
}

void RogueCmdEscape__write_cpp__CPPWriter_Logical( RogueClassCmdEscape* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[989], ROGUE_ARG(THIS->target_cmd->escape_label) )))) );
}

void RogueCmdEscape__trace_used_code( RogueClassCmdEscape* THIS )
{
}

void RogueCmdEscape__update_this_type__Scope( RogueClassCmdEscape* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdEscape* RogueCmdEscape__init_object( RogueClassCmdEscape* THIS )
{
  return (RogueClassCmdEscape*)(THIS);
}

RogueClassCmdEscape* RogueCmdEscape__init__Token_Int32_CmdControlStructure( RogueClassCmdEscape* THIS, RogueClassToken* _auto_1240_0, RogueInt32 _auto_1241_1, RogueClassCmdControlStructure* _auto_1242_2 )
{
  THIS->target_cmd = _auto_1242_2;
  THIS->_control_type = _auto_1241_1;
  THIS->t = _auto_1240_0;
  return (RogueClassCmdEscape*)(THIS);
}

RogueString* RogueCmdNextIteration__type_name( RogueClassCmdNextIteration* THIS )
{
  return (RogueString*)(Rogue_literal_strings[838]);
}

RogueClassCmd* RogueCmdNextIteration__clone__CloneArgs( RogueClassCmdNextIteration* THIS, RogueClassCloneArgs* clone_args_0 )
{
  if (!!(THIS->target_cmd->task_upkeep_section))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassTaskArgs*,task_args_1,(((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs)))));
    return (RogueClassCmd*)(((RogueTaskArgs__create_escape__Token_CmdTaskControlSection( task_args_1, ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->target_cmd->task_upkeep_section) ))));
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdControlStructure*,new_target_2,(THIS->target_cmd));
    while (!!(new_target_2->cloned_command))
    {
      new_target_2 = ((RogueClassCmdControlStructure*)new_target_2->cloned_command);
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdNextIteration__init__Token_CmdControlStructure( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdNextIteration*,ROGUE_CREATE_OBJECT(CmdNextIteration))), ROGUE_ARG(THIS->t), new_target_2 ))))));
  }
}

RogueClassCmd* RogueCmdNextIteration__resolve__Scope( RogueClassCmdNextIteration* THIS, RogueClassScope* scope_0 )
{
  RogueInt32 i_1 = (scope_0->control_stack->count);
  while (i_1 > 0)
  {
    --i_1;
    ROGUE_DEF_LOCAL_REF(RogueClassCmdControlStructure*,cmd_2,(((RogueClassCmdControlStructure*)(scope_0->control_stack->data->objects[i_1]))));
    if (cmd_2->_control_type >= 6)
    {
      while (!!(cmd_2->cloned_command))
      {
        cmd_2 = ((RogueClassCmdControlStructure*)cmd_2->cloned_command);
      }
      if (!(!!(cmd_2->upkeep_label)))
      {
        cmd_2->upkeep_label = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
      }
      THIS->target_cmd = cmd_2;
      return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
    }
  }
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[916] ))));
}

void RogueCmdNextIteration__write_cpp__CPPWriter_Logical( RogueClassCmdNextIteration* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[994] );
}

void RogueCmdNextIteration__trace_used_code( RogueClassCmdNextIteration* THIS )
{
}

void RogueCmdNextIteration__update_this_type__Scope( RogueClassCmdNextIteration* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdNextIteration* RogueCmdNextIteration__init_object( RogueClassCmdNextIteration* THIS )
{
  return (RogueClassCmdNextIteration*)(THIS);
}

RogueClassCmdNextIteration* RogueCmdNextIteration__init__Token_CmdControlStructure( RogueClassCmdNextIteration* THIS, RogueClassToken* _auto_1243_0, RogueClassCmdControlStructure* _auto_1244_1 )
{
  THIS->target_cmd = _auto_1244_1;
  THIS->t = _auto_1243_0;
  return (RogueClassCmdNextIteration*)(THIS);
}

RogueString* RogueCmdNecessary__type_name( RogueClassCmdNecessary* THIS )
{
  return (RogueString*)(Rogue_literal_strings[839]);
}

RogueClassCmd* RogueCmdNecessary__clone__CloneArgs( RogueClassCmdNecessary* THIS, RogueClassCloneArgs* clone_args_0 )
{
  if (!!(THIS->target_cmd->unsatisfied_section))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassTaskArgs*,task_args_1,(((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs)))));
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,cmd_jump_2,(((RogueTaskArgs__create_escape__Token_CmdTaskControlSection( task_args_1, ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->target_cmd->unsatisfied_section) )))));
    if (!!(THIS->condition))
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdIf__init__Token_Cmd_CmdStatementList_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdIf*,ROGUE_CREATE_OBJECT(CmdIf))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalNot*,ROGUE_CREATE_OBJECT(CmdLogicalNot)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->condition), ROGUE_ARG(((RogueClassCloneArgs*)(task_args_1))) ))) )))))))), ROGUE_ARG(((RogueCmdStatementList__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))), cmd_jump_2 )))), 2 ))))));
    }
    else
    {
      return (RogueClassCmd*)(cmd_jump_2);
    }
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdControlStructure*,new_target_3,(((RogueClassCmdControlStructure*)(THIS->target_cmd))));
    while (!!(new_target_3->cloned_command))
    {
      new_target_3 = ((RogueClassCmdControlStructure*)new_target_3->cloned_command);
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdNecessary__init__Token_Cmd_CmdContingent( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdNecessary*,ROGUE_CREATE_OBJECT(CmdNecessary))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->condition), clone_args_0 )))), ROGUE_ARG(((RogueClassCmdContingent*)(RogueObject_as(new_target_3,RogueTypeCmdContingent)))) ))))));
  }
}

RogueClassCmd* RogueCmdNecessary__resolve__Scope( RogueClassCmdNecessary* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->condition))
  {
    THIS->condition = (call_ROGUEM52( 25, ROGUE_ARG(THIS->condition), scope_0 ));
  }
  RogueInt32 i_1 = (scope_0->control_stack->count);
  while (i_1 > 0)
  {
    --i_1;
    ROGUE_DEF_LOCAL_REF(RogueClassCmdControlStructure*,cmd_2,(((RogueClassCmdControlStructure*)(scope_0->control_stack->data->objects[i_1]))));
    if (cmd_2->_control_type == 1)
    {
      while (!!(cmd_2->cloned_command))
      {
        cmd_2 = ((RogueClassCmdControlStructure*)cmd_2->cloned_command);
      }
      ROGUE_DEF_LOCAL_REF(RogueClassCmdContingent*,cmd_contingent_3,(((RogueClassCmdContingent*)(RogueObject_as(cmd_2,RogueTypeCmdContingent)))));
      if (!(!!(cmd_contingent_3->unsatisfied_label)))
      {
        cmd_contingent_3->unsatisfied_label = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
      }
      THIS->target_cmd = cmd_contingent_3;
      return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
    }
  }
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[917] ))));
}

void RogueCmdNecessary__write_cpp__CPPWriter_Logical( RogueClassCmdNecessary* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[995] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->condition), writer_0, false );
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[996] )))), ROGUE_ARG(THIS->target_cmd->unsatisfied_label) );
}

void RogueCmdNecessary__trace_used_code( RogueClassCmdNecessary* THIS )
{
  if (!!(THIS->condition))
  {
    call_ROGUEM59( 31, ROGUE_ARG(THIS->condition) );
  }
}

void RogueCmdNecessary__update_this_type__Scope( RogueClassCmdNecessary* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->condition))
  {
    call_ROGUEM56( 32, ROGUE_ARG(THIS->condition), scope_0 );
  }
}

RogueClassCmdNecessary* RogueCmdNecessary__init_object( RogueClassCmdNecessary* THIS )
{
  return (RogueClassCmdNecessary*)(THIS);
}

RogueClassCmdNecessary* RogueCmdNecessary__init__Token_Cmd_CmdContingent( RogueClassCmdNecessary* THIS, RogueClassToken* _auto_1245_0, RogueClassCmd* _auto_1246_1, RogueClassCmdContingent* _auto_1247_2 )
{
  THIS->target_cmd = _auto_1247_2;
  THIS->condition = _auto_1246_1;
  THIS->t = _auto_1245_0;
  return (RogueClassCmdNecessary*)(THIS);
}

RogueString* RogueCmdSufficient__type_name( RogueClassCmdSufficient* THIS )
{
  return (RogueString*)(Rogue_literal_strings[840]);
}

RogueClassCmd* RogueCmdSufficient__clone__CloneArgs( RogueClassCmdSufficient* THIS, RogueClassCloneArgs* clone_args_0 )
{
  if (!!(THIS->target_cmd->satisfied_section))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassTaskArgs*,task_args_1,(((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs)))));
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,cmd_jump_2,(((RogueTaskArgs__create_escape__Token_CmdTaskControlSection( task_args_1, ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->target_cmd->satisfied_section) )))));
    if (!!(THIS->condition))
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdIf__init__Token_Cmd_CmdStatementList_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdIf*,ROGUE_CREATE_OBJECT(CmdIf))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->condition), ROGUE_ARG(((RogueClassCloneArgs*)(task_args_1))) ))), ROGUE_ARG(((RogueCmdStatementList__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))), cmd_jump_2 )))), 2 ))))));
    }
    else
    {
      return (RogueClassCmd*)(cmd_jump_2);
    }
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdControlStructure*,new_target_3,(((RogueClassCmdControlStructure*)(THIS->target_cmd))));
    while (!!(new_target_3->cloned_command))
    {
      new_target_3 = ((RogueClassCmdControlStructure*)new_target_3->cloned_command);
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdSufficient__init__Token_Cmd_CmdContingent( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdSufficient*,ROGUE_CREATE_OBJECT(CmdSufficient))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->condition), clone_args_0 )))), ROGUE_ARG(((RogueClassCmdContingent*)(RogueObject_as(new_target_3,RogueTypeCmdContingent)))) ))))));
  }
}

RogueClassCmd* RogueCmdSufficient__resolve__Scope( RogueClassCmdSufficient* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->condition))
  {
    THIS->condition = (call_ROGUEM52( 25, ROGUE_ARG(THIS->condition), scope_0 ));
  }
  RogueInt32 i_1 = (scope_0->control_stack->count);
  while (i_1 > 0)
  {
    --i_1;
    ROGUE_DEF_LOCAL_REF(RogueClassCmdControlStructure*,cmd_2,(((RogueClassCmdControlStructure*)(scope_0->control_stack->data->objects[i_1]))));
    if (cmd_2->_control_type == 1)
    {
      while (!!(cmd_2->cloned_command))
      {
        cmd_2 = ((RogueClassCmdControlStructure*)cmd_2->cloned_command);
      }
      ROGUE_DEF_LOCAL_REF(RogueClassCmdContingent*,cmd_contingent_3,(((RogueClassCmdContingent*)(RogueObject_as(cmd_2,RogueTypeCmdContingent)))));
      if (!(!!(cmd_contingent_3->satisfied_label)))
      {
        cmd_contingent_3->satisfied_label = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
      }
      THIS->target_cmd = cmd_contingent_3;
      return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
    }
  }
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[917] ))));
}

void RogueCmdSufficient__write_cpp__CPPWriter_Logical( RogueClassCmdSufficient* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[987] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->condition), writer_0, false );
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[997] )))), ROGUE_ARG(THIS->target_cmd->satisfied_label) );
}

void RogueCmdSufficient__trace_used_code( RogueClassCmdSufficient* THIS )
{
  if (!!(THIS->condition))
  {
    call_ROGUEM59( 31, ROGUE_ARG(THIS->condition) );
  }
}

void RogueCmdSufficient__update_this_type__Scope( RogueClassCmdSufficient* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->condition))
  {
    call_ROGUEM56( 32, ROGUE_ARG(THIS->condition), scope_0 );
  }
}

RogueClassCmdSufficient* RogueCmdSufficient__init_object( RogueClassCmdSufficient* THIS )
{
  return (RogueClassCmdSufficient*)(THIS);
}

RogueClassCmdSufficient* RogueCmdSufficient__init__Token_Cmd_CmdContingent( RogueClassCmdSufficient* THIS, RogueClassToken* _auto_1248_0, RogueClassCmd* _auto_1249_1, RogueClassCmdContingent* _auto_1250_2 )
{
  THIS->target_cmd = _auto_1250_2;
  THIS->condition = _auto_1249_1;
  THIS->t = _auto_1248_0;
  return (RogueClassCmdSufficient*)(THIS);
}

RogueString* RogueCmdAdjust__type_name( RogueClassCmdAdjust* THIS )
{
  return (RogueString*)(Rogue_literal_strings[841]);
}

RogueClassCmd* RogueCmdAdjust__resolve__Scope( RogueClassCmdAdjust* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM52( 25, ROGUE_ARG(THIS->operand), scope_0 ));
  return (RogueClassCmd*)((call_ROGUEM64( 27, ROGUE_ARG(THIS->operand), scope_0, ROGUE_ARG(THIS->delta) )));
}

RogueClassCmdAdjust* RogueCmdAdjust__init_object( RogueClassCmdAdjust* THIS )
{
  return (RogueClassCmdAdjust*)(THIS);
}

RogueClassCmdAdjust* RogueCmdAdjust__init__Token_Cmd_Int32( RogueClassCmdAdjust* THIS, RogueClassToken* _auto_1251_0, RogueClassCmd* _auto_1252_1, RogueInt32 _auto_1253_2 )
{
  THIS->delta = _auto_1253_2;
  THIS->operand = _auto_1252_1;
  THIS->t = _auto_1251_0;
  return (RogueClassCmdAdjust*)(THIS);
}

RogueString* RogueCmdModifyAndAssign__type_name( RogueClassCmdModifyAndAssign* THIS )
{
  return (RogueString*)(Rogue_literal_strings[842]);
}

RogueClassCmd* RogueCmdModifyAndAssign__clone__CloneArgs( RogueClassCmdModifyAndAssign* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdModifyAndAssign__init__Token_Cmd_TokenType_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdModifyAndAssign*,ROGUE_CREATE_OBJECT(CmdModifyAndAssign))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->target), clone_args_0 ))), ROGUE_ARG(THIS->op), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->new_value), clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdModifyAndAssign__resolve__Scope( RogueClassCmdModifyAndAssign* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)((call_ROGUEM65( 28, ROGUE_ARG(THIS->target), scope_0, ROGUE_ARG(THIS->op), ROGUE_ARG(THIS->new_value) )));
}

RogueClassCmdModifyAndAssign* RogueCmdModifyAndAssign__init_object( RogueClassCmdModifyAndAssign* THIS )
{
  return (RogueClassCmdModifyAndAssign*)(THIS);
}

RogueClassCmdModifyAndAssign* RogueCmdModifyAndAssign__init__Token_Cmd_TokenType_Cmd( RogueClassCmdModifyAndAssign* THIS, RogueClassToken* _auto_1254_0, RogueClassCmd* _auto_1255_1, RogueClassTokenType* _auto_1256_2, RogueClassCmd* _auto_1257_3 )
{
  THIS->new_value = _auto_1257_3;
  THIS->op = _auto_1256_2;
  THIS->target = _auto_1255_1;
  THIS->t = _auto_1254_0;
  return (RogueClassCmdModifyAndAssign*)(THIS);
}

RogueString* RogueCmdWhichCaseList__to_String( RogueCmdWhichCaseList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdWhichCaseList*,_auto_2243_2,(THIS));
    RogueInt32 _auto_2244_3 = (0);
    for (;_auto_2244_3 < _auto_2243_2->count;++_auto_2244_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdWhichCase*,value_4,(((RogueClassCmdWhichCase*)(_auto_2243_2->data->objects[_auto_2244_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdWhichCaseList__type_name( RogueCmdWhichCaseList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[737]);
}

RogueCmdWhichCaseList* RogueCmdWhichCaseList__init_object( RogueCmdWhichCaseList* THIS )
{
  return (RogueCmdWhichCaseList*)(THIS);
}

RogueCmdWhichCaseList* RogueCmdWhichCaseList__init( RogueCmdWhichCaseList* THIS )
{
  RogueCmdWhichCaseList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueCmdWhichCaseList*)(THIS);
}

RogueCmdWhichCaseList* RogueCmdWhichCaseList__init__Int32( RogueCmdWhichCaseList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassCmdWhichCase*), true );
  }
  return (RogueCmdWhichCaseList*)(THIS);
}

RogueCmdWhichCaseList* RogueCmdWhichCaseList__add__CmdWhichCase( RogueCmdWhichCaseList* THIS, RogueClassCmdWhichCase* value_0 )
{
  ((RogueCmdWhichCaseList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdWhichCaseList*)(THIS);
}

RogueInt32 RogueCmdWhichCaseList__capacity( RogueCmdWhichCaseList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueCmdWhichCaseList* RogueCmdWhichCaseList__reserve__Int32( RogueCmdWhichCaseList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassCmdWhichCase*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueCmdWhichCaseList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassCmdWhichCase*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdWhichCaseList*)(THIS);
}

RogueString* RogueCmdWhichCase__type_name( RogueClassCmdWhichCase* THIS )
{
  return (RogueString*)(Rogue_literal_strings[843]);
}

RogueClassCmdWhichCase* RogueCmdWhichCase__clone__CloneArgs( RogueClassCmdWhichCase* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdWhichCase*)(((RogueCmdWhichCase__init__Token_CmdArgs_CmdStatementList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWhichCase*,ROGUE_CREATE_OBJECT(CmdWhichCase))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueCmdArgs__clone__CloneArgs( ROGUE_ARG(THIS->conditions), clone_args_0 )))), ROGUE_ARG(((RogueCmdStatementList__clone__CloneArgs( ROGUE_ARG(THIS->statements), clone_args_0 )))) ))));
}

void RogueCmdWhichCase__trace_used_code( RogueClassCmdWhichCase* THIS )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_2275_0,(THIS->conditions));
    RogueInt32 _auto_2276_1 = (0);
    for (;_auto_2276_1 < _auto_2275_0->count;++_auto_2276_1)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,condition_2,(((RogueClassCmd*)(_auto_2275_0->data->objects[_auto_2276_1]))));
      call_ROGUEM59( 31, condition_2 );
    }
  }
  RogueCmdStatementList__trace_used_code( ROGUE_ARG(THIS->statements) );
}

void RogueCmdWhichCase__update_this_type__Scope( RogueClassCmdWhichCase* THIS, RogueClassScope* scope_0 )
{
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_2277_1,(THIS->conditions));
    RogueInt32 _auto_2278_2 = (0);
    for (;_auto_2278_2 < _auto_2277_1->count;++_auto_2278_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,condition_3,(((RogueClassCmd*)(_auto_2277_1->data->objects[_auto_2278_2]))));
      call_ROGUEM56( 32, condition_3, scope_0 );
    }
  }
  RogueCmdStatementList__update_this_type__Scope( ROGUE_ARG(THIS->statements), scope_0 );
}

RogueClassCmdWhichCase* RogueCmdWhichCase__init_object( RogueClassCmdWhichCase* THIS )
{
  return (RogueClassCmdWhichCase*)(THIS);
}

RogueClassCmdWhichCase* RogueCmdWhichCase__init__Token_CmdArgs_CmdStatementList( RogueClassCmdWhichCase* THIS, RogueClassToken* _auto_1258_0, RogueClassCmdArgs* _auto_1259_1, RogueClassCmdStatementList* _auto_1260_2 )
{
  THIS->statements = _auto_1260_2;
  THIS->conditions = _auto_1259_1;
  THIS->t = _auto_1258_0;
  return (RogueClassCmdWhichCase*)(THIS);
}

RogueClassCmd* RogueCmdWhichCase__as_conditional__String( RogueClassCmdWhichCase* THIS, RogueString* expression_var_name_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,cmd_1,0);
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_2279_2,(THIS->conditions));
    RogueInt32 _auto_2280_3 = (0);
    for (;_auto_2280_3 < _auto_2279_2->count;++_auto_2280_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,condition_4,(((RogueClassCmd*)(_auto_2279_2->data->objects[_auto_2280_3]))));
      if (!!(cmd_1))
      {
        cmd_1 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdLogicalOr*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdLogicalOr*,ROGUE_CREATE_OBJECT(CmdLogicalOr)))), ROGUE_ARG(THIS->t), cmd_1, ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdCompareEQ*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareEQ*,ROGUE_CREATE_OBJECT(CmdCompareEQ)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), expression_var_name_0 )))))), condition_4 )))))))) ))))))));
      }
      else
      {
        cmd_1 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCompareEQ*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareEQ*,ROGUE_CREATE_OBJECT(CmdCompareEQ)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), expression_var_name_0 )))))), condition_4 ))))))));
      }
    }
  }
  return (RogueClassCmd*)(cmd_1);
}

RogueString* RogueCmdCatchList__to_String( RogueCmdCatchList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdCatchList*,_auto_2281_2,(THIS));
    RogueInt32 _auto_2282_3 = (0);
    for (;_auto_2282_3 < _auto_2281_2->count;++_auto_2282_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdCatch*,value_4,(((RogueClassCmdCatch*)(_auto_2281_2->data->objects[_auto_2282_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdCatchList__type_name( RogueCmdCatchList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[738]);
}

RogueCmdCatchList* RogueCmdCatchList__init_object( RogueCmdCatchList* THIS )
{
  return (RogueCmdCatchList*)(THIS);
}

RogueCmdCatchList* RogueCmdCatchList__init( RogueCmdCatchList* THIS )
{
  RogueCmdCatchList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueCmdCatchList*)(THIS);
}

RogueCmdCatchList* RogueCmdCatchList__init__Int32( RogueCmdCatchList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassCmdCatch*), true );
  }
  return (RogueCmdCatchList*)(THIS);
}

RogueCmdCatchList* RogueCmdCatchList__add__CmdCatch( RogueCmdCatchList* THIS, RogueClassCmdCatch* value_0 )
{
  ((RogueCmdCatchList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdCatchList*)(THIS);
}

RogueInt32 RogueCmdCatchList__capacity( RogueCmdCatchList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueCmdCatchList* RogueCmdCatchList__reserve__Int32( RogueCmdCatchList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassCmdCatch*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueCmdCatchList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassCmdCatch*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdCatchList*)(THIS);
}

RogueString* RogueCmdCatch__type_name( RogueClassCmdCatch* THIS )
{
  return (RogueString*)(Rogue_literal_strings[844]);
}

RogueClassCmdCatch* RogueCmdCatch__clone__CloneArgs( RogueClassCmdCatch* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdCatch*)(((RogueCmdCatch__init__Token_Local_CmdStatementList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCatch*,ROGUE_CREATE_OBJECT(CmdCatch))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->error_var), ROGUE_ARG(((RogueCmdStatementList__clone__CloneArgs( ROGUE_ARG(THIS->statements), clone_args_0 )))) ))));
}

RogueClassCmd* RogueCmdCatch__resolve__Scope( RogueClassCmdCatch* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( ROGUE_ARG(THIS->error_var->_type), scope_0 );
  if (!(((RogueType__instance_of__Type( ROGUE_ARG(THIS->error_var->_type), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Exception) )))))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[905] ))));
  }
  RogueScope__push_local__Local_Logical( scope_0, ROGUE_ARG(THIS->error_var), true );
  RogueCmdStatementList__resolve__Scope_Logical( ROGUE_ARG(THIS->statements), scope_0, false );
  RogueScope__pop_local( scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdCatch__write_cpp__CPPWriter_Logical( RogueClassCmdCatch* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[991] )))), ROGUE_ARG(((RogueLocal__cpp_name( ROGUE_ARG(THIS->error_var) )))) )))), Rogue_literal_strings[193] )))), ROGUE_ARG(THIS->error_var->_type) )))), Rogue_literal_strings[531] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[210] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( ROGUE_ARG(THIS->statements), writer_0, false );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[128] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[992] );
}

void RogueCmdCatch__trace_used_code( RogueClassCmdCatch* THIS )
{
  RogueCmdStatementList__trace_used_code( ROGUE_ARG(THIS->statements) );
}

void RogueCmdCatch__update_this_type__Scope( RogueClassCmdCatch* THIS, RogueClassScope* scope_0 )
{
  RogueCmdStatementList__update_this_type__Scope( ROGUE_ARG(THIS->statements), scope_0 );
}

RogueClassCmdCatch* RogueCmdCatch__init_object( RogueClassCmdCatch* THIS )
{
  return (RogueClassCmdCatch*)(THIS);
}

RogueClassCmdCatch* RogueCmdCatch__init__Token_Local_CmdStatementList( RogueClassCmdCatch* THIS, RogueClassToken* _auto_1265_0, RogueClassLocal* _auto_1266_1, RogueClassCmdStatementList* _auto_1267_2 )
{
  THIS->statements = _auto_1267_2;
  THIS->error_var = _auto_1266_1;
  THIS->t = _auto_1265_0;
  return (RogueClassCmdCatch*)(THIS);
}

RogueString* RogueCmdLocalDeclaration__type_name( RogueClassCmdLocalDeclaration* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1045]);
}

RogueClassCmd* RogueCmdLocalDeclaration__clone__CloneArgs( RogueClassCmdLocalDeclaration* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassTaskArgs*,task_args_1,(((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs)))));
  if (!!(task_args_1))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,new_value_2,(THIS->local_info->initial_value));
    if (!!(new_value_2))
    {
      new_value_2 = ((RogueClassCmd*)(call_ROGUEM71( 6, new_value_2, clone_args_0 )));
    }
    return (RogueClassCmd*)(((RogueTaskArgs__replace_write_local__Token_Local_Cmd( task_args_1, ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info), new_value_2 ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLocalDeclaration*,ROGUE_CREATE_OBJECT(CmdLocalDeclaration))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info), ROGUE_ARG(THIS->skip_initialization) ))))));
  }
}

void RogueCmdLocalDeclaration__exit_scope__Scope( RogueClassCmdLocalDeclaration* THIS, RogueClassScope* scope_0 )
{
  RogueScope__pop_local( scope_0 );
}

RogueClassCmd* RogueCmdLocalDeclaration__resolve__Scope( RogueClassCmdLocalDeclaration* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->local_info->initial_value))
  {
    THIS->local_info->initial_value = (call_ROGUEM52( 25, ROGUE_ARG(THIS->local_info->initial_value), scope_0 ));
    ROGUE_DEF_LOCAL_REF(RogueClassType*,initial_value_type_1,((call_ROGUEM60( 22, ROGUE_ARG(THIS->local_info->initial_value) ))));
    if (((void*)THIS->local_info->_type) == ((void*)NULL))
    {
      THIS->local_info->_type = initial_value_type_1;
    }
  }
  if (((void*)THIS->local_info->_type) == ((void*)NULL))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[919] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->local_info->name) )))) )))), Rogue_literal_strings[920] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->local_info->name) )))) )))), Rogue_literal_strings[333] )))) )))) ))));
  }
  if (!!(THIS->local_info->initial_value))
  {
    THIS->local_info->initial_value = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG(THIS->local_info->initial_value), ROGUE_ARG(THIS->local_info->_type), scope_0 ))), scope_0 ));
  }
  RogueType__organize__Scope( ROGUE_ARG(THIS->local_info->_type), scope_0 );
  RogueScope__push_local__Local_Logical( scope_0, ROGUE_ARG(THIS->local_info), true );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdLocalDeclaration__write_cpp__CPPWriter_Logical( RogueClassCmdLocalDeclaration* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (((RogueType__is_reference( ROGUE_ARG(THIS->local_info->_type) ))))
  {
    if (THIS->skip_initialization)
    {
      RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[998] )))), ROGUE_ARG(THIS->local_info->_type) )))), Rogue_literal_strings[193] )))), ROGUE_ARG(((RogueLocal__cpp_name( ROGUE_ARG(THIS->local_info) )))) )))), Rogue_literal_strings[28] );
    }
    else if (!!(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[999] )))), ROGUE_ARG(THIS->local_info->_type) )))), Rogue_literal_strings[193] )))), ROGUE_ARG(((RogueLocal__cpp_name( ROGUE_ARG(THIS->local_info) )))) )))), Rogue_literal_strings[193] )))))
    {
      if (!!(THIS->local_info->initial_value))
      {
        RogueCPPWriter__print_cast__Type_Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[80] )))), ROGUE_ARG((call_ROGUEM60( 29, ROGUE_ARG(THIS->local_info->initial_value) ))), ROGUE_ARG(THIS->local_info->_type) );
        call_ROGUEM72( 30, ROGUE_ARG(THIS->local_info->initial_value), writer_0, false );
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
      }
      else
      {
        RogueCPPWriter__print_default_value__Type( writer_0, ROGUE_ARG(THIS->local_info->_type) );
      }
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
    }
  }
  else
  {
    RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( writer_0, ROGUE_ARG(THIS->local_info->_type) )))), Rogue_literal_strings[489] )))), ROGUE_ARG(((RogueLocal__cpp_name( ROGUE_ARG(THIS->local_info) )))) );
    if (!(THIS->skip_initialization))
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[537] );
      if (!!(THIS->local_info->initial_value))
      {
        RogueCPPWriter__print_cast__Type_Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[80] )))), ROGUE_ARG((call_ROGUEM60( 29, ROGUE_ARG(THIS->local_info->initial_value) ))), ROGUE_ARG(THIS->local_info->_type) );
        call_ROGUEM72( 30, ROGUE_ARG(THIS->local_info->initial_value), writer_0, false );
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
      }
      else
      {
        RogueCPPWriter__print_default_value__Type( writer_0, ROGUE_ARG(THIS->local_info->_type) );
      }
    }
  }
}

void RogueCmdLocalDeclaration__trace_used_code( RogueClassCmdLocalDeclaration* THIS )
{
  RogueType__trace_used_code( ROGUE_ARG(THIS->local_info->_type) );
  if (!!(THIS->local_info->initial_value))
  {
    call_ROGUEM59( 31, ROGUE_ARG(THIS->local_info->initial_value) );
  }
}

void RogueCmdLocalDeclaration__update_this_type__Scope( RogueClassCmdLocalDeclaration* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->local_info->initial_value))
  {
    call_ROGUEM56( 32, ROGUE_ARG(THIS->local_info->initial_value), scope_0 );
  }
}

RogueClassCmdLocalDeclaration* RogueCmdLocalDeclaration__init_object( RogueClassCmdLocalDeclaration* THIS )
{
  return (RogueClassCmdLocalDeclaration*)(THIS);
}

RogueClassCmdLocalDeclaration* RogueCmdLocalDeclaration__init__Token_Local_Logical( RogueClassCmdLocalDeclaration* THIS, RogueClassToken* _auto_1278_0, RogueClassLocal* _auto_1279_1, RogueLogical _auto_1280_2 )
{
  THIS->skip_initialization = _auto_1280_2;
  THIS->local_info = _auto_1279_1;
  THIS->t = _auto_1278_0;
  return (RogueClassCmdLocalDeclaration*)(THIS);
}

RogueString* RogueCmdAdjustLocal__type_name( RogueClassCmdAdjustLocal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[845]);
}

RogueClassCmd* RogueCmdAdjustLocal__clone__CloneArgs( RogueClassCmdAdjustLocal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassTaskArgs*,task_args_1,(((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs)))));
  if (!!(task_args_1))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAdjust__init__Token_Cmd_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAdjust*,ROGUE_CREATE_OBJECT(CmdAdjust))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueTaskArgs__cmd_read_this__Token( task_args_1, ROGUE_ARG(THIS->t) )))), ROGUE_ARG(((RogueTaskArgs__convert_local_name__Local( task_args_1, ROGUE_ARG(THIS->local_info) )))) )))))), ROGUE_ARG(THIS->delta) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAdjustLocal*,ROGUE_CREATE_OBJECT(CmdAdjustLocal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info), ROGUE_ARG(THIS->delta) ))))));
  }
}

RogueClassCmd* RogueCmdAdjustLocal__resolve__Scope( RogueClassCmdAdjustLocal* THIS, RogueClassScope* scope_0 )
{
  if (((RogueType__is_compound( ROGUE_ARG(THIS->local_info->_type) ))))
  {
    return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ROGUE_ARG(((RogueCmdWriteLocal__init__Token_Local_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteLocal*,ROGUE_CREATE_OBJECT(CmdWriteLocal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info) )))))), Rogue_literal_strings[921], ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->delta) )))))) )))))) )))), scope_0 ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdAdjustLocal__type( RogueClassCmdAdjustLocal* THIS )
{
  return (RogueClassType*)(THIS->local_info->_type);
}

void RogueCmdAdjustLocal__write_cpp__CPPWriter_Logical( RogueClassCmdAdjustLocal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (THIS->delta > 0)
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[217] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[7] );
  }
  RogueCPPWriter__print__String( writer_0, ROGUE_ARG(((RogueLocal__cpp_name( ROGUE_ARG(THIS->local_info) )))) );
}

void RogueCmdAdjustLocal__trace_used_code( RogueClassCmdAdjustLocal* THIS )
{
  RogueType__trace_used_code( ROGUE_ARG(THIS->local_info->_type) );
}

void RogueCmdAdjustLocal__update_this_type__Scope( RogueClassCmdAdjustLocal* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdAdjustLocal* RogueCmdAdjustLocal__init_object( RogueClassCmdAdjustLocal* THIS )
{
  return (RogueClassCmdAdjustLocal*)(THIS);
}

RogueClassCmdAdjustLocal* RogueCmdAdjustLocal__init__Token_Local_Int32( RogueClassCmdAdjustLocal* THIS, RogueClassToken* _auto_1287_0, RogueClassLocal* _auto_1288_1, RogueInt32 _auto_1289_2 )
{
  THIS->delta = _auto_1289_2;
  THIS->local_info = _auto_1288_1;
  THIS->t = _auto_1287_0;
  return (RogueClassCmdAdjustLocal*)(THIS);
}

RogueString* RogueCmdCompareLE__type_name( RogueClassCmdCompareLE* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1161]);
}

RogueClassCmd* RogueCmdCompareLE__clone__CloneArgs( RogueClassCmdCompareLE* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCompareLE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareLE*,ROGUE_CREATE_OBJECT(CmdCompareLE)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

RogueClassCmd* RogueCmdCompareLE__combine_literal_operands__Type( RogueClassCmdCompareLE* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value <= ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value <= ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareLE* RogueCmdCompareLE__init_object( RogueClassCmdCompareLE* THIS )
{
  return (RogueClassCmdCompareLE*)(THIS);
}

RogueString* RogueCmdCompareLE__symbol( RogueClassCmdCompareLE* THIS )
{
  return (RogueString*)(Rogue_literal_strings[205]);
}

RogueClassCmd* RogueCmdCompareLE__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareLE* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,cmd_4,(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1128], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), false, false )))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1126], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM249( 25, ROGUE_ARG(((RogueClassCmdBinary*)((RogueClassCmdCompareNE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareNE*,ROGUE_CREATE_OBJECT(CmdCompareNE)))), ROGUE_ARG(THIS->t), cmd_4, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), 1 )))))) ))))))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1129], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalNot*,ROGUE_CREATE_OBJECT(CmdLogicalNot)))), ROGUE_ARG(THIS->t), cmd_4 ))))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->right), Rogue_literal_strings[1130], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->left) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->right), Rogue_literal_strings[1131], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->left) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalNot*,ROGUE_CREATE_OBJECT(CmdLogicalNot)))), ROGUE_ARG(THIS->t), cmd_4 ))))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1128], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), true, false ))));
}

RogueString* RogueCmdRange__type_name( RogueClassCmdRange* THIS )
{
  return (RogueString*)(Rogue_literal_strings[846]);
}

RogueClassCmd* RogueCmdRange__resolve__Scope( RogueClassCmdRange* THIS, RogueClassScope* scope_0 )
{
  THIS->first = ((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->first), scope_0 ))) )));
  THIS->last = ((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->last), scope_0 ))) )));
  if (!!(THIS->step_size))
  {
    THIS->step_size = ((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->step_size), scope_0 ))) )));
  }
  else
  {
    THIS->step_size = ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM620( 35, ROGUE_ARG(THIS) ))) )))));
  }
  ROGUE_DEF_LOCAL_REF(RogueClassType*,range_type_1,(((RogueCmd__must_find_common_type__Type_Type( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(((RogueCmd__must_find_common_type__Type_Type( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG((call_ROGUEM60( 29, ROGUE_ARG(THIS->first) ))), ROGUE_ARG((call_ROGUEM60( 29, ROGUE_ARG(THIS->last) ))) )))), ROGUE_ARG((call_ROGUEM60( 29, ROGUE_ARG(THIS->step_size) ))) )))));
  return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[922] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(range_type_1))) )))) )))), Rogue_literal_strings[130] )))) )))), ROGUE_ARG(((RogueCmdArgs__init__Cmd_Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->first), ROGUE_ARG(THIS->last), ROGUE_ARG(THIS->step_size) )))) )))), scope_0 ))));
}

void RogueCmdRange__trace_used_code( RogueClassCmdRange* THIS )
{
  call_ROGUEM59( 31, ROGUE_ARG(THIS->first) );
  call_ROGUEM59( 31, ROGUE_ARG(THIS->last) );
  if (!!(THIS->step_size))
  {
    call_ROGUEM59( 31, ROGUE_ARG(THIS->step_size) );
  }
}

void RogueCmdRange__update_this_type__Scope( RogueClassCmdRange* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->first), scope_0 );
  call_ROGUEM56( 32, ROGUE_ARG(THIS->last), scope_0 );
  if (!!(THIS->step_size))
  {
    call_ROGUEM56( 32, ROGUE_ARG(THIS->step_size), scope_0 );
  }
}

RogueClassCmdRange* RogueCmdRange__init_object( RogueClassCmdRange* THIS )
{
  return (RogueClassCmdRange*)(THIS);
}

RogueClassCmdRange* RogueCmdRange__init__Token_Cmd_Cmd_Cmd( RogueClassCmdRange* THIS, RogueClassToken* _auto_1290_0, RogueClassCmd* _auto_1291_1, RogueClassCmd* _auto_1292_2, RogueClassCmd* _auto_1293_3 )
{
  THIS->step_size = _auto_1293_3;
  THIS->last = _auto_1292_2;
  THIS->first = _auto_1291_1;
  THIS->t = _auto_1290_0;
  return (RogueClassCmdRange*)(THIS);
}

RogueInt32 RogueCmdRange__default_step_size( RogueClassCmdRange* THIS )
{
  return (RogueInt32)(1);
}

RogueString* RogueCmdModifyAndAssignLocal__type_name( RogueClassCmdModifyAndAssignLocal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1119]);
}

RogueClassCmd* RogueCmdModifyAndAssignLocal__clone__CloneArgs( RogueClassCmdModifyAndAssignLocal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassTaskArgs*,task_args_1,(((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs)))));
  if (!!(task_args_1))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdModifyAndAssign__init__Token_Cmd_TokenType_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdModifyAndAssign*,ROGUE_CREATE_OBJECT(CmdModifyAndAssign))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdThisContext*,ROGUE_CREATE_OBJECT(CmdThisContext))), ROGUE_ARG(THIS->t), ROGUE_ARG(task_args_1->_task_type) )))))), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->local_info->name) )))) )))), Rogue_literal_strings[425] )))), ROGUE_ARG(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[0], ROGUE_ARG(THIS->local_info->index) )))) )))) )))) )))))), ROGUE_ARG(THIS->op), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->new_value), ROGUE_ARG(((RogueClassCloneArgs*)(task_args_1))) ))) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdModifyAndAssignLocal__init__Token_Local_TokenType_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdModifyAndAssignLocal*,ROGUE_CREATE_OBJECT(CmdModifyAndAssignLocal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info), ROGUE_ARG(THIS->op), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->new_value), clone_args_0 ))) ))))));
  }
}

RogueClassCmd* RogueCmdModifyAndAssignLocal__resolve__Scope( RogueClassCmdModifyAndAssignLocal* THIS, RogueClassScope* scope_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueString*,m_name_1,(((RogueString__operatorPLUS__String( Rogue_literal_strings[356], ROGUE_ARG(((RogueTokenType__to_String( ROGUE_ARG(THIS->op) )))) )))));
  if (((RogueType__is_reference( ROGUE_ARG(THIS->local_info->_type) ))))
  {
    if (!!(((RogueString_MethodListTable__get__String( ROGUE_ARG(THIS->local_info->_type->method_lookup_by_name), m_name_1 )))))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info) )))))), m_name_1, ROGUE_ARG(THIS->new_value) )))), scope_0 ))));
    }
    else
    {
      m_name_1 = ((RogueString*)((RogueString__leftmost__Int32( m_name_1, -1 ))));
      if (!!(((RogueString_MethodListTable__get__String( ROGUE_ARG(THIS->local_info->_type->method_lookup_by_name), m_name_1 )))))
      {
        return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ROGUE_ARG(((RogueCmdWriteLocal__init__Token_Local_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteLocal*,ROGUE_CREATE_OBJECT(CmdWriteLocal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info) )))))), m_name_1, ROGUE_ARG(THIS->new_value) )))))) )))), scope_0 ))));
      }
      else
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,arg_type_2,((call_ROGUEM60( 29, ROGUE_ARG(THIS->new_value) ))->name));
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[923] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(THIS->local_info->_type))) )))) )))), Rogue_literal_strings[924] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], m_name_1 )))) )))), Rogue_literal_strings[925] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], arg_type_2 )))) )))), Rogue_literal_strings[926] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], m_name_1 )))) )))), Rogue_literal_strings[927] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], arg_type_2 )))) )))), Rogue_literal_strings[405] )))) )))) ))));
      }
    }
  }
  else if (((RogueType__is_compound( ROGUE_ARG(THIS->local_info->_type) ))))
  {
    return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ROGUE_ARG(((RogueCmdWriteLocal__init__Token_Local_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteLocal*,ROGUE_CREATE_OBJECT(CmdWriteLocal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info) )))))), ROGUE_ARG(((RogueString__leftmost__Int32( m_name_1, -1 )))), ROGUE_ARG(THIS->new_value) )))))) )))), scope_0 ))));
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueClassTokenType*,_auto_2313_4,(THIS->op));
    if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_2313_4), ROGUE_ARG(((RogueObject*)(RogueTokenType_symbol_caret_equals))) ))))
    {
      return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ROGUE_ARG(((RogueCmdWriteLocal__init__Token_Local_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteLocal*,ROGUE_CREATE_OBJECT(CmdWriteLocal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdPower*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdPower*,ROGUE_CREATE_OBJECT(CmdPower)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info) )))))), ROGUE_ARG(THIS->new_value) )))))))) )))), scope_0 ))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_2313_4), ROGUE_ARG(((RogueObject*)(RogueTokenType_symbol_percent_equals))) ))))
    {
      return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ROGUE_ARG(((RogueCmdWriteLocal__init__Token_Local_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteLocal*,ROGUE_CREATE_OBJECT(CmdWriteLocal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdMod*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdMod*,ROGUE_CREATE_OBJECT(CmdMod)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info) )))))), ROGUE_ARG(THIS->new_value) )))))))) )))), scope_0 ))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_2313_4), ROGUE_ARG(((RogueObject*)(RogueTokenType_symbol_dot_equals))) ))))
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdAccess*,access_3,(((RogueClassCmdAccess*)(RogueObject_as(THIS->new_value,RogueTypeCmdAccess)))));
      if (!(!!(access_3)))
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->new_value->t), Rogue_literal_strings[928] ))));
      }
      if (!!(access_3->context))
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(access_3->t), Rogue_literal_strings[929] ))));
      }
      access_3->context = ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info) )))));
      return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ROGUE_ARG(((RogueCmdWriteLocal__init__Token_Local_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteLocal*,ROGUE_CREATE_OBJECT(CmdWriteLocal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info), ROGUE_ARG(((RogueClassCmd*)(access_3))) )))), scope_0 ))));
    }
  }
  THIS->new_value = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->new_value), scope_0 ))), ROGUE_ARG(THIS->local_info->_type), scope_0 ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdModifyAndAssignLocal__type( RogueClassCmdModifyAndAssignLocal* THIS )
{
  return (RogueClassType*)(THIS->local_info->_type);
}

void RogueCmdModifyAndAssignLocal__write_cpp__CPPWriter_Logical( RogueClassCmdModifyAndAssignLocal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, ROGUE_ARG(((RogueLocal__cpp_name( ROGUE_ARG(THIS->local_info) )))) )))), Rogue_literal_strings[489] )))), ROGUE_ARG(((RogueCmdResolvedModifyAndAssign__cpp_symbol( ROGUE_ARG(((RogueClassCmdResolvedModifyAndAssign*)THIS)) )))) )))), Rogue_literal_strings[489] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->new_value), writer_0, false );
}

void RogueCmdModifyAndAssignLocal__trace_used_code( RogueClassCmdModifyAndAssignLocal* THIS )
{
  RogueType__trace_used_code( ROGUE_ARG(THIS->local_info->_type) );
  call_ROGUEM59( 31, ROGUE_ARG(THIS->new_value) );
}

void RogueCmdModifyAndAssignLocal__update_this_type__Scope( RogueClassCmdModifyAndAssignLocal* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->new_value), scope_0 );
}

RogueClassCmdModifyAndAssignLocal* RogueCmdModifyAndAssignLocal__init_object( RogueClassCmdModifyAndAssignLocal* THIS )
{
  return (RogueClassCmdModifyAndAssignLocal*)(THIS);
}

RogueClassCmdModifyAndAssignLocal* RogueCmdModifyAndAssignLocal__init__Token_Local_TokenType_Cmd( RogueClassCmdModifyAndAssignLocal* THIS, RogueClassToken* _auto_1294_0, RogueClassLocal* _auto_1295_1, RogueClassTokenType* _auto_1296_2, RogueClassCmd* _auto_1297_3 )
{
  THIS->new_value = _auto_1297_3;
  THIS->op = _auto_1296_2;
  THIS->local_info = _auto_1295_1;
  THIS->t = _auto_1294_0;
  return (RogueClassCmdModifyAndAssignLocal*)(THIS);
}

RogueString* RogueCmdResolvedModifyAndAssign__type_name( RogueClassCmdResolvedModifyAndAssign* THIS )
{
  return (RogueString*)(Rogue_literal_strings[847]);
}

RogueClassCmdResolvedModifyAndAssign* RogueCmdResolvedModifyAndAssign__init_object( RogueClassCmdResolvedModifyAndAssign* THIS )
{
  return (RogueClassCmdResolvedModifyAndAssign*)(THIS);
}

RogueString* RogueCmdResolvedModifyAndAssign__symbol( RogueClassCmdResolvedModifyAndAssign* THIS )
{
  if (((void*)THIS->op) == ((void*)RogueTokenType_symbol_tilde_equals))
  {
    return (RogueString*)(Rogue_literal_strings[191]);
  }
  return (RogueString*)(((RogueTokenType__to_String( ROGUE_ARG(THIS->op) ))));
}

RogueString* RogueCmdResolvedModifyAndAssign__cpp_symbol( RogueClassCmdResolvedModifyAndAssign* THIS )
{
  return (RogueString*)(((RogueCmdResolvedModifyAndAssign__symbol( ROGUE_ARG(THIS) ))));
}

RogueString* RogueCmdRangeUpTo__type_name( RogueClassCmdRangeUpTo* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1117]);
}

RogueClassCmd* RogueCmdRangeUpTo__clone__CloneArgs( RogueClassCmdRangeUpTo* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdRangeUpTo*)(((RogueCmdRange__init__Token_Cmd_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdRange*)ROGUE_CREATE_REF(RogueClassCmdRangeUpTo*,ROGUE_CREATE_OBJECT(CmdRangeUpTo)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->first), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->last), clone_args_0 ))), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->step_size), clone_args_0 )))) ))))))));
}

RogueClassCmdRangeUpTo* RogueCmdRangeUpTo__init_object( RogueClassCmdRangeUpTo* THIS )
{
  return (RogueClassCmdRangeUpTo*)(THIS);
}

RogueString* RogueCmdCompareGE__type_name( RogueClassCmdCompareGE* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1162]);
}

RogueClassCmd* RogueCmdCompareGE__clone__CloneArgs( RogueClassCmdCompareGE* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCompareGE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareGE*,ROGUE_CREATE_OBJECT(CmdCompareGE)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

RogueClassCmd* RogueCmdCompareGE__combine_literal_operands__Type( RogueClassCmdCompareGE* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value >= ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value >= ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareGE* RogueCmdCompareGE__init_object( RogueClassCmdCompareGE* THIS )
{
  return (RogueClassCmdCompareGE*)(THIS);
}

RogueString* RogueCmdCompareGE__symbol( RogueClassCmdCompareGE* THIS )
{
  return (RogueString*)(Rogue_literal_strings[203]);
}

RogueClassCmd* RogueCmdCompareGE__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareGE* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,cmd_4,(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1130], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), false, false )))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1126], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM249( 25, ROGUE_ARG(((RogueClassCmdBinary*)((RogueClassCmdCompareNE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareNE*,ROGUE_CREATE_OBJECT(CmdCompareNE)))), ROGUE_ARG(THIS->t), cmd_4, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), -1 )))))) ))))))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1131], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalNot*,ROGUE_CREATE_OBJECT(CmdLogicalNot)))), ROGUE_ARG(THIS->t), cmd_4 ))))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->right), Rogue_literal_strings[1128], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->left) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->right), Rogue_literal_strings[1129], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->left) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalNot*,ROGUE_CREATE_OBJECT(CmdLogicalNot)))), ROGUE_ARG(THIS->t), cmd_4 ))))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1130], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), true, false ))));
}

RogueString* RogueCmdForEach__type_name( RogueClassCmdForEach* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1062]);
}

RogueClassCmd* RogueCmdForEach__clone__CloneArgs( RogueClassCmdForEach* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdForEach*,result_1,(((RogueCmdForEach__init__Token_String_String_Cmd_Cmd_CmdStatementList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdForEach*,ROGUE_CREATE_OBJECT(CmdForEach))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->control_var_name), ROGUE_ARG(THIS->index_var_name), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->collection), clone_args_0 ))), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->step_cmd), clone_args_0 )))), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))) )))));
  call_ROGUEM211( 35, ((RogueClassCmdControlStructure*)result_1), ROGUE_ARG(((RogueClassCmdControlStructure*)(THIS))) );
  THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_1));
  result_1->statements = ((RogueCmdStatementList__clone__CloneArgs( ROGUE_ARG(THIS->statements), clone_args_0 )));
  return (RogueClassCmd*)(((RogueClassCmd*)(result_1)));
}

RogueClassCmd* RogueCmdForEach__resolve__Scope( RogueClassCmdForEach* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( ROGUE_ARG(scope_0->control_stack), ROGUE_ARG(((RogueClassCmdControlStructure*)(THIS))) );
  THIS->collection = (call_ROGUEM52( 25, ROGUE_ARG(THIS->collection), scope_0 ));
  ROGUE_DEF_LOCAL_REF(RogueClassType*,collection_type_1,(((RogueType__organize__Scope( ROGUE_ARG((call_ROGUEM60( 22, ROGUE_ARG(THIS->collection) ))), scope_0 )))));
  RogueLogical has_count_2 = ((!!(((RogueType__find_property__String( collection_type_1, Rogue_literal_strings[881] )))) || !!(((RogueType__find_method__String( collection_type_1, Rogue_literal_strings[930] ))))));
  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_at_3,(((RogueType__find_method__String( collection_type_1, Rogue_literal_strings[931] )))));
  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_get_4,(((RogueType__find_method__String( collection_type_1, Rogue_literal_strings[932] )))));
  RogueLogical has_get_5 = ((!!(m_get_4) || !!(m_at_3)));
  RogueInt32 step_size_6 = (1);
  if (!!(THIS->step_cmd))
  {
    THIS->step_cmd = (call_ROGUEM52( 25, ROGUE_ARG(THIS->step_cmd), scope_0 ));
    ROGUE_DEF_LOCAL_REF(RogueClassCmdLiteralInt32*,literal_integer_cmd_7,(((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->step_cmd,RogueTypeCmdLiteralInt32)))));
    if (!!(literal_integer_cmd_7))
    {
      step_size_6 = ((RogueInt32)literal_integer_cmd_7->value);
    }
    else
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->step_cmd->t), Rogue_literal_strings[933] ))));
    }
  }
  if ((has_count_2 && has_get_5))
  {
    if (!!(m_at_3))
    {
      m_get_4 = ((RogueClassMethod*)m_at_3);
    }
    THIS->collection = (call_ROGUEM52( 25, ROGUE_ARG(THIS->collection), scope_0 ));
    ROGUE_DEF_LOCAL_REF(RogueClassLocal*,collection_var_8,(((RogueMethod__add_local__Token_String_Type_Cmd( ROGUE_ARG(scope_0->this_method), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )))), ROGUE_ARG((call_ROGUEM60( 22, ROGUE_ARG(THIS->collection) ))), ROGUE_ARG(THIS->collection) )))));
    if (!(!!(THIS->index_var_name)))
    {
      THIS->index_var_name = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
    }
    ROGUE_DEF_LOCAL_REF(RogueClassLocal*,index_var_9,(((RogueMethod__add_local__Token_String_Type_Cmd( ROGUE_ARG(scope_0->this_method), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->index_var_name), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32), ROGUE_ARG(((RogueClassCmd*)(NULL))) )))));
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,last_cmd_10,0);
    if (step_size_6 >= 0)
    {
      index_var_9->initial_value = ((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), 0 )))));
      last_cmd_10 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), ROGUE_ARG(THIS->t), collection_var_8 )))))), Rogue_literal_strings[881] ))))));
    }
    else
    {
      index_var_9->initial_value = ((RogueClassCmd*)(((RogueClassCmdSubtract*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdSubtract*,ROGUE_CREATE_OBJECT(CmdSubtract)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), ROGUE_ARG(THIS->t), collection_var_8 )))))), Rogue_literal_strings[881] )))))), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), 1 )))))) )))))));
      last_cmd_10 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), 0 ))))));
    }
    ROGUE_DEF_LOCAL_REF(RogueClassLocal*,control_var_11,0);
    if (!!(THIS->control_var_name))
    {
      control_var_11 = ((RogueClassLocal*)((RogueMethod__add_local__Token_String_Type_Cmd( ROGUE_ARG(scope_0->this_method), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->control_var_name), ROGUE_ARG(((RogueClassType*)(NULL))), ROGUE_ARG(((RogueClassCmd*)(NULL))) ))));
      control_var_11->initial_value = ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), ROGUE_ARG(THIS->t), collection_var_8 )))))), ROGUE_ARG(m_get_4->name), ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), ROGUE_ARG(THIS->t), index_var_9 )))))) )))) )))));
      RogueCmdList__insert__Cmd_Int32( ROGUE_ARG(((RogueCmdList*)THIS->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLocalDeclaration*,ROGUE_CREATE_OBJECT(CmdLocalDeclaration))), ROGUE_ARG(control_var_11->t), control_var_11, false )))))), 0 );
    }
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,modifier_12,0);
    if ((step_size_6 >= -1 && step_size_6 <= 1))
    {
      modifier_12 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAdjustLocal*,ROGUE_CREATE_OBJECT(CmdAdjustLocal))), ROGUE_ARG(THIS->t), index_var_9, step_size_6 ))))));
    }
    else if (step_size_6 >= 0)
    {
      modifier_12 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdModifyAndAssign__init__Token_Cmd_TokenType_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdModifyAndAssign*,ROGUE_CREATE_OBJECT(CmdModifyAndAssign))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(index_var_9->name) )))))), ROGUE_ARG(RogueTokenType_symbol_plus_equals), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), step_size_6 )))))) ))))));
    }
    else
    {
      modifier_12 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdModifyAndAssign__init__Token_Cmd_TokenType_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdModifyAndAssign*,ROGUE_CREATE_OBJECT(CmdModifyAndAssign))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(index_var_9->name) )))))), ROGUE_ARG(RogueTokenType_symbol_minus_equals), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), ROGUE_ARG((-(step_size_6))) )))))) ))))));
    }
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,condition_13,0);
    if (step_size_6 >= 0)
    {
      condition_13 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCompareLT*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareLT*,ROGUE_CREATE_OBJECT(CmdCompareLT)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), ROGUE_ARG(THIS->t), index_var_9 )))))), last_cmd_10 ))))))));
    }
    else
    {
      condition_13 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueClassCmdCompareGE*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareGE*,ROGUE_CREATE_OBJECT(CmdCompareGE)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), ROGUE_ARG(THIS->t), index_var_9 )))))), last_cmd_10 ))))))));
    }
    ROGUE_DEF_LOCAL_REF(RogueClassCmdGenericLoop*,result_14,(((RogueCmdGenericLoop__init__Token_Int32_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdGenericLoop*,ROGUE_CREATE_OBJECT(CmdGenericLoop))), ROGUE_ARG(THIS->t), 9, condition_13, ROGUE_ARG(THIS->statements), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))) )))));
    call_ROGUEM211( 35, ((RogueClassCmdControlStructure*)result_14), ROGUE_ARG(((RogueClassCmdControlStructure*)(THIS))) );
    RogueCmdGenericLoop__add_control_var__Local( result_14, collection_var_8 );
    RogueCmdGenericLoop__add_control_var__Local( result_14, index_var_9 );
    RogueCmdGenericLoop__add_upkeep__Cmd( result_14, modifier_12 );
    RogueCmdControlStructureList__remove_last( ROGUE_ARG(scope_0->control_stack) );
    return (RogueClassCmd*)(((RogueCmdGenericLoop__resolve__Scope( result_14, scope_0 ))));
  }
  else
  {
    RogueLogical has_another_15 = ((!!(((RogueType__find_property__String( collection_type_1, Rogue_literal_strings[934] )))) || !!(((RogueType__find_method__String( collection_type_1, Rogue_literal_strings[935] ))))));
    ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_read_16,(((RogueType__find_method__String( collection_type_1, Rogue_literal_strings[936] )))));
    if ((!(has_another_15) || !(!!(m_read_16))))
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->collection->t), Rogue_literal_strings[937] ))));
    }
    if (!(!!(m_read_16->_return_type)))
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->collection->t), Rogue_literal_strings[938] ))));
    }
    if (!!(THIS->step_cmd))
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->step_cmd->t), Rogue_literal_strings[939] ))));
    }
    ROGUE_DEF_LOCAL_REF(RogueClassLocal*,reader_var_17,(((RogueMethod__add_local__Token_String_Type_Cmd( ROGUE_ARG(scope_0->this_method), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )))), collection_type_1, ROGUE_ARG(THIS->collection) )))));
    ROGUE_DEF_LOCAL_REF(RogueClassLocal*,index_var_18,0);
    if (!!(THIS->index_var_name))
    {
      index_var_18 = ((RogueClassLocal*)((RogueMethod__add_local__Token_String_Type_Cmd( ROGUE_ARG(scope_0->this_method), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->index_var_name), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), 0 )))))) ))));
    }
    if (!!(THIS->control_var_name))
    {
      ROGUE_DEF_LOCAL_REF(RogueClassLocal*,control_var_19,(((RogueMethod__add_local__Token_String_Type_Cmd( ROGUE_ARG(scope_0->this_method), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->control_var_name), ROGUE_ARG(m_read_16->_return_type), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->collection->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->collection->t), ROGUE_ARG(reader_var_17->name) )))))), Rogue_literal_strings[940] )))))) )))));
      RogueCmdList__insert__Cmd_Int32( ROGUE_ARG(((RogueCmdList*)THIS->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLocalDeclaration*,ROGUE_CREATE_OBJECT(CmdLocalDeclaration))), ROGUE_ARG(THIS->collection->t), control_var_19, false )))))), 0 );
    }
    else
    {
      RogueCmdList__insert__Cmd_Int32( ROGUE_ARG(((RogueCmdList*)THIS->statements)), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->collection->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->collection->t), ROGUE_ARG(reader_var_17->name) )))))), Rogue_literal_strings[940] )))))), 0 );
    }
    ROGUE_DEF_LOCAL_REF(RogueClassToken*,rt_20,(reader_var_17->t));
    ROGUE_DEF_LOCAL_REF(RogueClassCmdGenericLoop*,cmd_loop_21,(((RogueCmdGenericLoop__init__Token_Int32_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdGenericLoop*,ROGUE_CREATE_OBJECT(CmdGenericLoop))), ROGUE_ARG(THIS->t), 9, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), rt_20, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadLocal*,ROGUE_CREATE_OBJECT(CmdReadLocal))), rt_20, reader_var_17 )))))), Rogue_literal_strings[934] )))))), ROGUE_ARG(THIS->statements), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))) )))));
    call_ROGUEM211( 35, ((RogueClassCmdControlStructure*)cmd_loop_21), ROGUE_ARG(((RogueClassCmdControlStructure*)(THIS))) );
    RogueCmdGenericLoop__add_control_var__Local( cmd_loop_21, reader_var_17 );
    if (!!(index_var_18))
    {
      RogueCmdGenericLoop__add_control_var__Local( cmd_loop_21, index_var_18 );
      RogueCmdGenericLoop__add_upkeep__Cmd( cmd_loop_21, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAdjustLocal*,ROGUE_CREATE_OBJECT(CmdAdjustLocal))), ROGUE_ARG(THIS->t), index_var_18, 1 )))))) );
    }
    RogueCmdControlStructureList__remove_last( ROGUE_ARG(scope_0->control_stack) );
    return (RogueClassCmd*)(((RogueCmdGenericLoop__resolve__Scope( cmd_loop_21, scope_0 ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdForEach__trace_used_code( RogueClassCmdForEach* THIS )
{
  RogueCmdStatementList__trace_used_code( ROGUE_ARG(THIS->statements) );
  call_ROGUEM59( 31, ROGUE_ARG(THIS->collection) );
  if (!!(THIS->step_cmd))
  {
    call_ROGUEM59( 31, ROGUE_ARG(THIS->step_cmd) );
  }
}

void RogueCmdForEach__update_this_type__Scope( RogueClassCmdForEach* THIS, RogueClassScope* scope_0 )
{
  RogueCmdStatementList__update_this_type__Scope( ROGUE_ARG(THIS->statements), scope_0 );
  call_ROGUEM56( 32, ROGUE_ARG(THIS->collection), scope_0 );
  if (!!(THIS->step_cmd))
  {
    call_ROGUEM56( 32, ROGUE_ARG(THIS->step_cmd), scope_0 );
  }
}

RogueClassCmdForEach* RogueCmdForEach__init_object( RogueClassCmdForEach* THIS )
{
  return (RogueClassCmdForEach*)(THIS);
}

RogueClassCmdForEach* RogueCmdForEach__init__Token_String_String_Cmd_Cmd_CmdStatementList( RogueClassCmdForEach* THIS, RogueClassToken* _auto_1298_0, RogueString* _auto_1299_1, RogueString* _auto_1300_2, RogueClassCmd* _auto_1301_3, RogueClassCmd* _auto_1302_4, RogueClassCmdStatementList* _auto_1303_5 )
{
  THIS->statements = _auto_1303_5;
  THIS->step_cmd = _auto_1302_4;
  THIS->collection = _auto_1301_3;
  THIS->index_var_name = _auto_1300_2;
  THIS->control_var_name = _auto_1299_1;
  THIS->t = _auto_1298_0;
  THIS->_control_type = 9;
  return (RogueClassCmdForEach*)(THIS);
}

RogueString* RogueCmdRangeDownTo__type_name( RogueClassCmdRangeDownTo* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1118]);
}

RogueClassCmd* RogueCmdRangeDownTo__clone__CloneArgs( RogueClassCmdRangeDownTo* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdRangeDownTo*)(((RogueCmdRange__init__Token_Cmd_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdRange*)ROGUE_CREATE_REF(RogueClassCmdRangeDownTo*,ROGUE_CREATE_OBJECT(CmdRangeDownTo)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->first), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->last), clone_args_0 ))), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->step_size), clone_args_0 )))) ))))))));
}

RogueClassCmdRangeDownTo* RogueCmdRangeDownTo__init_object( RogueClassCmdRangeDownTo* THIS )
{
  return (RogueClassCmdRangeDownTo*)(THIS);
}

RogueInt32 RogueCmdRangeDownTo__default_step_size( RogueClassCmdRangeDownTo* THIS )
{
  return (RogueInt32)(-1);
}

RogueString* RogueCmdLogicalXor__type_name( RogueClassCmdLogicalXor* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1122]);
}

RogueClassCmd* RogueCmdLogicalXor__clone__CloneArgs( RogueClassCmdLogicalXor* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalXor*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdLogicalXor*,ROGUE_CREATE_OBJECT(CmdLogicalXor)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

RogueClassCmdLogicalXor* RogueCmdLogicalXor__init_object( RogueClassCmdLogicalXor* THIS )
{
  return (RogueClassCmdLogicalXor*)(THIS);
}

RogueString* RogueCmdLogicalXor__symbol( RogueClassCmdLogicalXor* THIS )
{
  return (RogueString*)(Rogue_literal_strings[184]);
}

RogueString* RogueCmdLogicalXor__cpp_symbol( RogueClassCmdLogicalXor* THIS )
{
  return (RogueString*)(Rogue_literal_strings[190]);
}

RogueLogical RogueCmdLogicalXor__combine_literal_operands__Logical_Logical( RogueClassCmdLogicalXor* THIS, RogueLogical a_0, RogueLogical b_1 )
{
  return (RogueLogical)((a_0 ^ b_1));
}

RogueString* RogueCmdBinaryLogical__type_name( RogueClassCmdBinaryLogical* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1075]);
}

RogueClassCmd* RogueCmdBinaryLogical__resolve__Scope( RogueClassCmdBinaryLogical* THIS, RogueClassScope* scope_0 )
{
  THIS->left = ((RogueCmd__require_logical__Scope( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->left), scope_0 ))), scope_0 )));
  THIS->right = ((RogueCmd__require_logical__Scope( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->right), scope_0 ))), scope_0 )));
  if (((call_ROGUEM57( 18, ROGUE_ARG(THIS->left) )) && (call_ROGUEM57( 18, ROGUE_ARG(THIS->right) ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM658( 42, ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralLogical)))->value), ROGUE_ARG(((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralLogical)))->value) ))) ))))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdBinaryLogical__type( RogueClassCmdBinaryLogical* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

RogueClassCmdBinaryLogical* RogueCmdBinaryLogical__init_object( RogueClassCmdBinaryLogical* THIS )
{
  return (RogueClassCmdBinaryLogical*)(THIS);
}

RogueClassCmd* RogueCmdBinaryLogical__resolve_operator_method__Scope_Type_Type( RogueClassCmdBinaryLogical* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
}

RogueLogical RogueCmdBinaryLogical__combine_literal_operands__Logical_Logical( RogueClassCmdBinaryLogical* THIS, RogueLogical a_0, RogueLogical b_1 )
{
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[347] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM656( 2, ROGUE_ARG(THIS) ))) )))) )))), Rogue_literal_strings[1076] )))) )))) ))));
}

RogueString* RogueCmdLogicalOr__type_name( RogueClassCmdLogicalOr* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1123]);
}

RogueClassCmd* RogueCmdLogicalOr__clone__CloneArgs( RogueClassCmdLogicalOr* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalOr*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdLogicalOr*,ROGUE_CREATE_OBJECT(CmdLogicalOr)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

RogueClassCmdLogicalOr* RogueCmdLogicalOr__init_object( RogueClassCmdLogicalOr* THIS )
{
  return (RogueClassCmdLogicalOr*)(THIS);
}

RogueString* RogueCmdLogicalOr__symbol( RogueClassCmdLogicalOr* THIS )
{
  return (RogueString*)(Rogue_literal_strings[179]);
}

RogueString* RogueCmdLogicalOr__cpp_symbol( RogueClassCmdLogicalOr* THIS )
{
  return (RogueString*)(Rogue_literal_strings[232]);
}

RogueLogical RogueCmdLogicalOr__combine_literal_operands__Logical_Logical( RogueClassCmdLogicalOr* THIS, RogueLogical a_0, RogueLogical b_1 )
{
  return (RogueLogical)((a_0 || b_1));
}

RogueString* RogueCmdLogicalAnd__type_name( RogueClassCmdLogicalAnd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1124]);
}

RogueClassCmd* RogueCmdLogicalAnd__clone__CloneArgs( RogueClassCmdLogicalAnd* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalAnd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdLogicalAnd*,ROGUE_CREATE_OBJECT(CmdLogicalAnd)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

RogueClassCmdLogicalAnd* RogueCmdLogicalAnd__init_object( RogueClassCmdLogicalAnd* THIS )
{
  return (RogueClassCmdLogicalAnd*)(THIS);
}

RogueString* RogueCmdLogicalAnd__symbol( RogueClassCmdLogicalAnd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[169]);
}

RogueString* RogueCmdLogicalAnd__cpp_symbol( RogueClassCmdLogicalAnd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1091]);
}

RogueLogical RogueCmdLogicalAnd__combine_literal_operands__Logical_Logical( RogueClassCmdLogicalAnd* THIS, RogueLogical a_0, RogueLogical b_1 )
{
  return (RogueLogical)((a_0 && b_1));
}

RogueString* RogueCmdCompareEQ__type_name( RogueClassCmdCompareEQ* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1163]);
}

RogueClassCmd* RogueCmdCompareEQ__clone__CloneArgs( RogueClassCmdCompareEQ* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCompareEQ*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareEQ*,ROGUE_CREATE_OBJECT(CmdCompareEQ)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

RogueClassCmd* RogueCmdCompareEQ__combine_literal_operands__Type( RogueClassCmdCompareEQ* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value == ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value == ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareEQ* RogueCmdCompareEQ__init_object( RogueClassCmdCompareEQ* THIS )
{
  return (RogueClassCmdCompareEQ*)(THIS);
}

RogueLogical RogueCmdCompareEQ__requires_parens( RogueClassCmdCompareEQ* THIS )
{
  return (RogueLogical)(false);
}

RogueString* RogueCmdCompareEQ__symbol( RogueClassCmdCompareEQ* THIS )
{
  return (RogueString*)(Rogue_literal_strings[199]);
}

RogueClassCmd* RogueCmdCompareEQ__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareEQ* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,cmd_4,(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1127], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), false, false )))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1126], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM249( 25, ROGUE_ARG(((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareEQ*,ROGUE_CREATE_OBJECT(CmdCompareEQ)))), ROGUE_ARG(THIS->t), cmd_4, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), 0 )))))) ))))))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1125], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalNot*,ROGUE_CREATE_OBJECT(CmdLogicalNot)))), ROGUE_ARG(THIS->t), cmd_4 ))))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->right), Rogue_literal_strings[1127], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->left) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->right), Rogue_literal_strings[1125], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->left) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalNot*,ROGUE_CREATE_OBJECT(CmdLogicalNot)))), ROGUE_ARG(THIS->t), cmd_4 ))))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1127], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), true, false ))));
}

RogueString* RogueCmdCompareIs__type_name( RogueClassCmdCompareIs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1164]);
}

RogueClassCmd* RogueCmdCompareIs__clone__CloneArgs( RogueClassCmdCompareIs* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCompareIs*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareIs*,ROGUE_CREATE_OBJECT(CmdCompareIs)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

void RogueCmdCompareIs__write_cpp__CPPWriter_Logical( RogueClassCmdCompareIs* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1079] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->left), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1080] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->right), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
}

RogueClassCmdCompareIs* RogueCmdCompareIs__init_object( RogueClassCmdCompareIs* THIS )
{
  return (RogueClassCmdCompareIs*)(THIS);
}

RogueClassCmd* RogueCmdCompareIs__resolve_for_types__Scope_Type_Type( RogueClassCmdCompareIs* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  if ((((RogueType__is_reference( left_type_1 ))) && ((RogueType__is_reference( right_type_2 )))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  else if ((((RogueType__is_primitive( left_type_1 ))) && ((RogueType__is_primitive( right_type_2 )))))
  {
    return (RogueClassCmd*)((call_ROGUEM249( 25, ROGUE_ARG(((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareEQ*,ROGUE_CREATE_OBJECT(CmdCompareEQ)))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), ROGUE_ARG(THIS->right) ))))))), scope_0 )));
  }
  else if ((((RogueType__is_compound( left_type_1 ))) && ((RogueType__is_compound( right_type_2 )))))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[1115] ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(THIS->t), false ))))));
  }
}

RogueString* RogueCmdCompareIs__symbol( RogueClassCmdCompareIs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[145]);
}

RogueString* RogueCmdCompareIs__cpp_symbol( RogueClassCmdCompareIs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[199]);
}

RogueString* RogueCmdCompareIsNot__type_name( RogueClassCmdCompareIsNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1165]);
}

RogueClassCmd* RogueCmdCompareIsNot__clone__CloneArgs( RogueClassCmdCompareIsNot* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCompareIsNot*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareIsNot*,ROGUE_CREATE_OBJECT(CmdCompareIsNot)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

void RogueCmdCompareIsNot__write_cpp__CPPWriter_Logical( RogueClassCmdCompareIsNot* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1079] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->left), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1081] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->right), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
}

RogueClassCmdCompareIsNot* RogueCmdCompareIsNot__init_object( RogueClassCmdCompareIsNot* THIS )
{
  return (RogueClassCmdCompareIsNot*)(THIS);
}

RogueClassCmd* RogueCmdCompareIsNot__resolve_for_types__Scope_Type_Type( RogueClassCmdCompareIsNot* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  if ((((RogueType__is_reference( left_type_1 ))) && ((RogueType__is_reference( right_type_2 )))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  else if ((((RogueType__is_primitive( left_type_1 ))) && ((RogueType__is_primitive( right_type_2 )))))
  {
    return (RogueClassCmd*)((call_ROGUEM249( 25, ROGUE_ARG(((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareEQ*,ROGUE_CREATE_OBJECT(CmdCompareEQ)))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), ROGUE_ARG(THIS->right) ))))))), scope_0 )));
  }
  else if ((((RogueType__is_compound( left_type_1 ))) && ((RogueType__is_compound( right_type_2 )))))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[1115] ))));
  }
  else
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[1116] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(left_type_1))) )))) )))), Rogue_literal_strings[379] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(right_type_2))) )))) )))), Rogue_literal_strings[64] )))) )))) ))));
  }
}

RogueString* RogueCmdCompareIsNot__symbol( RogueClassCmdCompareIsNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[146]);
}

RogueString* RogueCmdCompareIsNot__cpp_symbol( RogueClassCmdCompareIsNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[209]);
}

RogueString* RogueCmdCompareLT__type_name( RogueClassCmdCompareLT* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1166]);
}

RogueClassCmd* RogueCmdCompareLT__clone__CloneArgs( RogueClassCmdCompareLT* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCompareLT*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareLT*,ROGUE_CREATE_OBJECT(CmdCompareLT)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

RogueClassCmd* RogueCmdCompareLT__combine_literal_operands__Type( RogueClassCmdCompareLT* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value < ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value < ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareLT* RogueCmdCompareLT__init_object( RogueClassCmdCompareLT* THIS )
{
  return (RogueClassCmdCompareLT*)(THIS);
}

RogueString* RogueCmdCompareLT__symbol( RogueClassCmdCompareLT* THIS )
{
  return (RogueString*)(Rogue_literal_strings[206]);
}

RogueClassCmd* RogueCmdCompareLT__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareLT* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,cmd_4,(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1131], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), false, false )))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1126], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM249( 25, ROGUE_ARG(((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareEQ*,ROGUE_CREATE_OBJECT(CmdCompareEQ)))), ROGUE_ARG(THIS->t), cmd_4, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), -1 )))))) ))))))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1130], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalNot*,ROGUE_CREATE_OBJECT(CmdLogicalNot)))), ROGUE_ARG(THIS->t), cmd_4 ))))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->right), Rogue_literal_strings[1129], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->left) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->right), Rogue_literal_strings[1128], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->left) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalNot*,ROGUE_CREATE_OBJECT(CmdLogicalNot)))), ROGUE_ARG(THIS->t), cmd_4 ))))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1131], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), true, false ))));
}

RogueString* RogueCmdCompareGT__type_name( RogueClassCmdCompareGT* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1167]);
}

RogueClassCmd* RogueCmdCompareGT__clone__CloneArgs( RogueClassCmdCompareGT* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCompareGT*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareGT*,ROGUE_CREATE_OBJECT(CmdCompareGT)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

RogueClassCmd* RogueCmdCompareGT__combine_literal_operands__Type( RogueClassCmdCompareGT* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value > ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value > ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareGT* RogueCmdCompareGT__init_object( RogueClassCmdCompareGT* THIS )
{
  return (RogueClassCmdCompareGT*)(THIS);
}

RogueString* RogueCmdCompareGT__symbol( RogueClassCmdCompareGT* THIS )
{
  return (RogueString*)(Rogue_literal_strings[204]);
}

RogueClassCmd* RogueCmdCompareGT__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareGT* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,cmd_4,(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1129], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), false, false )))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1126], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM249( 25, ROGUE_ARG(((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdCompareEQ*,ROGUE_CREATE_OBJECT(CmdCompareEQ)))), ROGUE_ARG(THIS->t), cmd_4, ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), 1 )))))) ))))))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1128], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalNot*,ROGUE_CREATE_OBJECT(CmdLogicalNot)))), ROGUE_ARG(THIS->t), cmd_4 ))))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->right), Rogue_literal_strings[1131], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->left) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->right), Rogue_literal_strings[1130], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->left) )))) )))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalNot*,ROGUE_CREATE_OBJECT(CmdLogicalNot)))), ROGUE_ARG(THIS->t), cmd_4 ))))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->left), Rogue_literal_strings[1129], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->right) )))) )))), true, false ))));
}

RogueString* RogueCmdInstanceOf__type_name( RogueClassCmdInstanceOf* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1103]);
}

RogueClassCmd* RogueCmdInstanceOf__clone__CloneArgs( RogueClassCmdInstanceOf* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdInstanceOf*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ROGUE_ARG(((RogueClassCmdTypeOperator*)ROGUE_CREATE_REF(RogueClassCmdInstanceOf*,ROGUE_CREATE_OBJECT(CmdInstanceOf)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->operand), clone_args_0 ))), ROGUE_ARG(THIS->_target_type) ))))))));
}

RogueClassCmd* RogueCmdInstanceOf__resolve__Scope( RogueClassCmdInstanceOf* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM52( 25, ROGUE_ARG(THIS->operand), scope_0 ));
  RogueType__organize__Scope( ROGUE_ARG(THIS->_target_type), scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdInstanceOf__type( RogueClassCmdInstanceOf* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

void RogueCmdInstanceOf__write_cpp__CPPWriter_Logical( RogueClassCmdInstanceOf* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1000] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->operand), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[193] );
  RogueCPPWriter__print_type_info__Type( writer_0, ROGUE_ARG(THIS->_target_type) );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
}

RogueClassCmdInstanceOf* RogueCmdInstanceOf__init_object( RogueClassCmdInstanceOf* THIS )
{
  return (RogueClassCmdInstanceOf*)(THIS);
}

RogueString* RogueCmdLogicalNot__type_name( RogueClassCmdLogicalNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1107]);
}

RogueClassCmd* RogueCmdLogicalNot__clone__CloneArgs( RogueClassCmdLogicalNot* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdLogicalNot*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdLogicalNot*,ROGUE_CREATE_OBJECT(CmdLogicalNot)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->operand), clone_args_0 ))) ))))))));
}

RogueClassCmd* RogueCmdLogicalNot__resolve__Scope( RogueClassCmdLogicalNot* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = ((RogueCmd__require_logical__Scope( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->operand), scope_0 ))), scope_0 )));
  if ((call_ROGUEM57( 18, ROGUE_ARG(THIS->operand) )))
  {
    return (RogueClassCmd*)(((RogueCmdLogicalNot__resolve_for_literal_operand__Scope( ROGUE_ARG(THIS), scope_0 ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueCmdUnary__resolve_for_operand_type__Scope_Type( ROGUE_ARG(((RogueClassCmdUnary*)THIS)), scope_0, ROGUE_ARG((call_ROGUEM60( 22, ROGUE_ARG(THIS->operand) ))) ))));
  }
}

RogueClassType* Rogue_CmdLogicalNot__type( RogueClassCmdLogicalNot* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

RogueClassCmdLogicalNot* RogueCmdLogicalNot__init_object( RogueClassCmdLogicalNot* THIS )
{
  return (RogueClassCmdLogicalNot*)(THIS);
}

RogueString* RogueCmdLogicalNot__prefix_symbol( RogueClassCmdLogicalNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1110]);
}

RogueClassCmd* RogueCmdLogicalNot__resolve_for_literal_operand__Scope( RogueClassCmdLogicalNot* THIS, RogueClassScope* scope_0 )
{
  if (RogueObject_instance_of(THIS->operand,RogueTypeCmdLiteralReal64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(THIS->t), ROGUE_ARG(!(!!(((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->operand,RogueTypeCmdLiteralReal64)))->value))) ))))));
  }
  else if (RogueObject_instance_of(THIS->operand,RogueTypeCmdLiteralInt32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(THIS->t), ROGUE_ARG(!(!!(((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->operand,RogueTypeCmdLiteralInt32)))->value))) ))))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdLogicalNot__cpp_prefix_symbol( RogueClassCmdLogicalNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[201]);
}

RogueString* RogueCmdBitwiseXor__type_name( RogueClassCmdBitwiseXor* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1132]);
}

RogueClassCmd* RogueCmdBitwiseXor__clone__CloneArgs( RogueClassCmdBitwiseXor* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdBitwiseXor*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdBitwiseXor*,ROGUE_CREATE_OBJECT(CmdBitwiseXor)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

RogueClassCmd* RogueCmdBitwiseXor__combine_literal_operands__Type( RogueClassCmdBitwiseXor* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), ROGUE_ARG((((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value ^ ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value)) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(THIS->t), ROGUE_ARG((((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralLogical)))->value ^ ((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralLogical)))->value)) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdBitwiseXor* RogueCmdBitwiseXor__init_object( RogueClassCmdBitwiseXor* THIS )
{
  return (RogueClassCmdBitwiseXor*)(THIS);
}

RogueString* RogueCmdBitwiseXor__symbol( RogueClassCmdBitwiseXor* THIS )
{
  return (RogueString*)(Rogue_literal_strings[224]);
}

RogueString* RogueCmdBitwiseXor__cpp_symbol( RogueClassCmdBitwiseXor* THIS )
{
  return (RogueString*)(Rogue_literal_strings[190]);
}

RogueString* RogueCmdBitwiseOp__type_name( RogueClassCmdBitwiseOp* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1094]);
}

RogueClassCmdBitwiseOp* RogueCmdBitwiseOp__init_object( RogueClassCmdBitwiseOp* THIS )
{
  return (RogueClassCmdBitwiseOp*)(THIS);
}

RogueClassCmd* RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type( RogueClassCmdBitwiseOp* THIS, RogueClassScope* scope_0, RogueClassType* common_type_1 )
{
  if (((((void*)common_type_1) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte) || ((void*)common_type_1) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character)) || ((void*)common_type_1) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32)))
  {
    THIS->left = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG(THIS->left), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32), scope_0 ))), scope_0 ));
    THIS->right = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG(THIS->right), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32), scope_0 ))), scope_0 ));
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  if (((void*)common_type_1) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int64))
  {
    THIS->left = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG(THIS->left), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int64), scope_0 ))), scope_0 ));
    THIS->right = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG(THIS->right), ROGUE_ARG(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int64), scope_0 ))), scope_0 ));
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[1089] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM255( 40, ROGUE_ARG(((RogueClassCmdBinary*)THIS)) ))) )))) )))), Rogue_literal_strings[1090] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(common_type_1))) )))) )))), Rogue_literal_strings[64] )))) )))) ))));
}

RogueClassCmd* RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type( RogueClassCmdBitwiseOp* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
}

RogueString* RogueCmdBitwiseOr__type_name( RogueClassCmdBitwiseOr* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1133]);
}

RogueClassCmd* RogueCmdBitwiseOr__clone__CloneArgs( RogueClassCmdBitwiseOr* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdBitwiseOr*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdBitwiseOr*,ROGUE_CREATE_OBJECT(CmdBitwiseOr)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

RogueClassCmd* RogueCmdBitwiseOr__combine_literal_operands__Type( RogueClassCmdBitwiseOr* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), ROGUE_ARG((((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value | ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value)) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(THIS->t), ROGUE_ARG((((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralLogical)))->value || ((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralLogical)))->value)) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdBitwiseOr* RogueCmdBitwiseOr__init_object( RogueClassCmdBitwiseOr* THIS )
{
  return (RogueClassCmdBitwiseOr*)(THIS);
}

RogueString* RogueCmdBitwiseOr__symbol( RogueClassCmdBitwiseOr* THIS )
{
  return (RogueString*)(Rogue_literal_strings[230]);
}

RogueString* RogueCmdBitwiseAnd__type_name( RogueClassCmdBitwiseAnd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1134]);
}

RogueClassCmd* RogueCmdBitwiseAnd__clone__CloneArgs( RogueClassCmdBitwiseAnd* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdBitwiseAnd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdBitwiseAnd*,ROGUE_CREATE_OBJECT(CmdBitwiseAnd)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

RogueClassCmd* RogueCmdBitwiseAnd__combine_literal_operands__Type( RogueClassCmdBitwiseAnd* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), ROGUE_ARG((((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value & ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value)) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralLogical*,ROGUE_CREATE_OBJECT(CmdLiteralLogical))), ROGUE_ARG(THIS->t), ROGUE_ARG((((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralLogical)))->value && ((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralLogical)))->value)) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdBitwiseAnd* RogueCmdBitwiseAnd__init_object( RogueClassCmdBitwiseAnd* THIS )
{
  return (RogueClassCmdBitwiseAnd*)(THIS);
}

RogueString* RogueCmdBitwiseAnd__symbol( RogueClassCmdBitwiseAnd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[185]);
}

RogueString* RogueCmdBitwiseShiftLeft__type_name( RogueClassCmdBitwiseShiftLeft* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1135]);
}

RogueClassCmd* RogueCmdBitwiseShiftLeft__clone__CloneArgs( RogueClassCmdBitwiseShiftLeft* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdBitwiseShiftLeft*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdBitwiseShiftLeft*,ROGUE_CREATE_OBJECT(CmdBitwiseShiftLeft)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

RogueClassCmd* RogueCmdBitwiseShiftLeft__combine_literal_operands__Type( RogueClassCmdBitwiseShiftLeft* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), ROGUE_ARG((((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value << ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value)) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdBitwiseShiftLeft* RogueCmdBitwiseShiftLeft__init_object( RogueClassCmdBitwiseShiftLeft* THIS )
{
  return (RogueClassCmdBitwiseShiftLeft*)(THIS);
}

RogueString* RogueCmdBitwiseShiftLeft__symbol( RogueClassCmdBitwiseShiftLeft* THIS )
{
  return (RogueString*)(Rogue_literal_strings[220]);
}

RogueString* RogueCmdBitwiseShiftLeft__cpp_symbol( RogueClassCmdBitwiseShiftLeft* THIS )
{
  return (RogueString*)(Rogue_literal_strings[212]);
}

RogueString* RogueCmdBitwiseShiftRight__type_name( RogueClassCmdBitwiseShiftRight* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1136]);
}

RogueClassCmd* RogueCmdBitwiseShiftRight__clone__CloneArgs( RogueClassCmdBitwiseShiftRight* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdBitwiseShiftRight*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdBitwiseShiftRight*,ROGUE_CREATE_OBJECT(CmdBitwiseShiftRight)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

RogueClassCmd* RogueCmdBitwiseShiftRight__combine_literal_operands__Type( RogueClassCmdBitwiseShiftRight* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), ROGUE_ARG((((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value << ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value)) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmd* RogueCmdBitwiseShiftRight__resolve__Scope( RogueClassCmdBitwiseShiftRight* THIS, RogueClassScope* scope_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,result_1,((RogueCmdBinary__resolve__Scope( ROGUE_ARG(((RogueClassCmdBinary*)THIS)), scope_0 ))));
  ROGUE_DEF_LOCAL_REF(RogueClassCmdBitwiseShiftRight*,cmd_shift_2,(((RogueClassCmdBitwiseShiftRight*)(RogueObject_as(result_1,RogueTypeCmdBitwiseShiftRight)))));
  if (!(!!(cmd_shift_2)))
  {
    return (RogueClassCmd*)(result_1);
  }
  return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), Rogue_literal_strings[659] )))))), Rogue_literal_strings[1077], ROGUE_ARG(((RogueCmdArgs__init__Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(cmd_shift_2->left), ROGUE_ARG(cmd_shift_2->right) )))) )))), scope_0 ))));
}

RogueClassCmdBitwiseShiftRight* RogueCmdBitwiseShiftRight__init_object( RogueClassCmdBitwiseShiftRight* THIS )
{
  return (RogueClassCmdBitwiseShiftRight*)(THIS);
}

RogueString* RogueCmdBitwiseShiftRight__symbol( RogueClassCmdBitwiseShiftRight* THIS )
{
  return (RogueString*)(Rogue_literal_strings[221]);
}

RogueString* RogueCmdBitwiseShiftRightX__type_name( RogueClassCmdBitwiseShiftRightX* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1137]);
}

RogueClassCmd* RogueCmdBitwiseShiftRightX__clone__CloneArgs( RogueClassCmdBitwiseShiftRightX* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdBitwiseShiftRightX*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdBitwiseShiftRightX*,ROGUE_CREATE_OBJECT(CmdBitwiseShiftRightX)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

RogueClassCmd* RogueCmdBitwiseShiftRightX__combine_literal_operands__Type( RogueClassCmdBitwiseShiftRightX* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), ROGUE_ARG((((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value << ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value)) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdBitwiseShiftRightX* RogueCmdBitwiseShiftRightX__init_object( RogueClassCmdBitwiseShiftRightX* THIS )
{
  return (RogueClassCmdBitwiseShiftRightX*)(THIS);
}

RogueString* RogueCmdBitwiseShiftRightX__symbol( RogueClassCmdBitwiseShiftRightX* THIS )
{
  return (RogueString*)(Rogue_literal_strings[222]);
}

RogueString* RogueCmdBitwiseShiftRightX__cpp_symbol( RogueClassCmdBitwiseShiftRightX* THIS )
{
  return (RogueString*)(Rogue_literal_strings[130]);
}

RogueString* RogueCmdSubtract__type_name( RogueClassCmdSubtract* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1095]);
}

RogueClassCmd* RogueCmdSubtract__clone__CloneArgs( RogueClassCmdSubtract* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdSubtract*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdSubtract*,ROGUE_CREATE_OBJECT(CmdSubtract)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

RogueClassCmd* RogueCmdSubtract__combine_literal_operands__Type( RogueClassCmdSubtract* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralReal64*,ROGUE_CREATE_OBJECT(CmdLiteralReal64))), ROGUE_ARG(THIS->t), ROGUE_ARG((((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value - ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value)) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), ROGUE_ARG((((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value - ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value)) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdSubtract* RogueCmdSubtract__init_object( RogueClassCmdSubtract* THIS )
{
  return (RogueClassCmdSubtract*)(THIS);
}

RogueString* RogueCmdSubtract__fn_name( RogueClassCmdSubtract* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1084]);
}

RogueString* RogueCmdSubtract__symbol( RogueClassCmdSubtract* THIS )
{
  return (RogueString*)(Rogue_literal_strings[207]);
}

RogueString* RogueCmdMultiply__type_name( RogueClassCmdMultiply* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1096]);
}

RogueClassCmd* RogueCmdMultiply__clone__CloneArgs( RogueClassCmdMultiply* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdMultiply*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdMultiply*,ROGUE_CREATE_OBJECT(CmdMultiply)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

RogueClassCmd* RogueCmdMultiply__combine_literal_operands__Type( RogueClassCmdMultiply* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralReal64*,ROGUE_CREATE_OBJECT(CmdLiteralReal64))), ROGUE_ARG(THIS->t), ROGUE_ARG((((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value * ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value)) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), ROGUE_ARG((((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value * ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value)) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdMultiply* RogueCmdMultiply__init_object( RogueClassCmdMultiply* THIS )
{
  return (RogueClassCmdMultiply*)(THIS);
}

RogueString* RogueCmdMultiply__fn_name( RogueClassCmdMultiply* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1085]);
}

RogueString* RogueCmdMultiply__symbol( RogueClassCmdMultiply* THIS )
{
  return (RogueString*)(Rogue_literal_strings[226]);
}

RogueString* RogueCmdDivide__type_name( RogueClassCmdDivide* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1097]);
}

RogueClassCmd* RogueCmdDivide__clone__CloneArgs( RogueClassCmdDivide* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdDivide*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdDivide*,ROGUE_CREATE_OBJECT(CmdDivide)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

RogueClassCmd* RogueCmdDivide__combine_literal_operands__Type( RogueClassCmdDivide* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralReal64*,ROGUE_CREATE_OBJECT(CmdLiteralReal64))), ROGUE_ARG(THIS->t), ROGUE_ARG((((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value / ((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value)) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), ROGUE_ARG((((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value / ((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value)) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdDivide* RogueCmdDivide__init_object( RogueClassCmdDivide* THIS )
{
  return (RogueClassCmdDivide*)(THIS);
}

RogueString* RogueCmdDivide__fn_name( RogueClassCmdDivide* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1086]);
}

RogueString* RogueCmdDivide__symbol( RogueClassCmdDivide* THIS )
{
  return (RogueString*)(Rogue_literal_strings[61]);
}

RogueString* RogueCmdMod__type_name( RogueClassCmdMod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1098]);
}

RogueClassCmd* RogueCmdMod__clone__CloneArgs( RogueClassCmdMod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdMod*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdMod*,ROGUE_CREATE_OBJECT(CmdMod)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

RogueClassCmd* RogueCmdMod__combine_literal_operands__Type( RogueClassCmdMod* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralReal64*,ROGUE_CREATE_OBJECT(CmdLiteralReal64))), ROGUE_ARG(THIS->t), ROGUE_ARG((RogueMath__mod__Real64_Real64( ROGUE_ARG(((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value), ROGUE_ARG(((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value) ))) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), ROGUE_ARG((RogueMath__mod__Int32_Int32( ROGUE_ARG(((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value), ROGUE_ARG(((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value) ))) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmd* RogueCmdMod__resolve__Scope( RogueClassCmdMod* THIS, RogueClassScope* scope_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,result_1,((RogueCmdBinary__resolve__Scope( ROGUE_ARG(((RogueClassCmdBinary*)THIS)), scope_0 ))));
  if ((call_ROGUEM57( 18, result_1 )))
  {
    return (RogueClassCmd*)(result_1);
  }
  ROGUE_DEF_LOCAL_REF(RogueClassCmdMod*,cmd_mod_2,(((RogueClassCmdMod*)(RogueObject_as(result_1,RogueTypeCmdMod)))));
  if (!(!!(cmd_mod_2)))
  {
    return (RogueClassCmd*)(result_1);
  }
  return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), Rogue_literal_strings[659] )))))), Rogue_literal_strings[1078], ROGUE_ARG(((RogueCmdArgs__init__Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(cmd_mod_2->left), ROGUE_ARG(cmd_mod_2->right) )))) )))), scope_0 ))));
}

RogueClassCmdMod* RogueCmdMod__init_object( RogueClassCmdMod* THIS )
{
  return (RogueClassCmdMod*)(THIS);
}

RogueString* RogueCmdMod__fn_name( RogueClassCmdMod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1087]);
}

RogueString* RogueCmdMod__symbol( RogueClassCmdMod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[213]);
}

RogueString* RogueCmdPower__type_name( RogueClassCmdPower* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1099]);
}

RogueClassCmd* RogueCmdPower__clone__CloneArgs( RogueClassCmdPower* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdPower*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdPower*,ROGUE_CREATE_OBJECT(CmdPower)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->left), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->right), clone_args_0 ))) ))))))));
}

RogueClassCmd* RogueCmdPower__combine_literal_operands__Type( RogueClassCmdPower* THIS, RogueClassType* common_type_0 )
{
  if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralReal64*,ROGUE_CREATE_OBJECT(CmdLiteralReal64))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueReal64) pow((double)((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal64)))->value, (double)((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal64)))->value))) ))))));
  }
  else if (((void*)common_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueInt32) pow((double)((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInt32)))->value, (double)((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInt32)))->value))) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

void RogueCmdPower__write_cpp__CPPWriter_Logical( RogueClassCmdPower* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[533] )))), ROGUE_ARG((call_ROGUEM60( 29, ROGUE_ARG(THIS->left) ))) )))), Rogue_literal_strings[1082] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->left), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1083] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->right), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[493] );
}

RogueClassCmdPower* RogueCmdPower__init_object( RogueClassCmdPower* THIS )
{
  return (RogueClassCmdPower*)(THIS);
}

RogueString* RogueCmdPower__fn_name( RogueClassCmdPower* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1088]);
}

RogueString* RogueCmdPower__symbol( RogueClassCmdPower* THIS )
{
  return (RogueString*)(Rogue_literal_strings[190]);
}

RogueString* RogueCmdNegate__type_name( RogueClassCmdNegate* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1108]);
}

RogueClassCmd* RogueCmdNegate__clone__CloneArgs( RogueClassCmdNegate* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdNegate*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdNegate*,ROGUE_CREATE_OBJECT(CmdNegate)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->operand), clone_args_0 ))) ))))))));
}

RogueClassType* RogueCmdNegate__implicit_type__Scope( RogueClassCmdNegate* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassType*)((call_ROGUEM58( 17, ROGUE_ARG(THIS->operand), scope_0 )));
}

RogueClassCmdNegate* RogueCmdNegate__init_object( RogueClassCmdNegate* THIS )
{
  return (RogueClassCmdNegate*)(THIS);
}

RogueString* RogueCmdNegate__prefix_symbol( RogueClassCmdNegate* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1111]);
}

RogueString* RogueCmdNegate__fn_name( RogueClassCmdNegate* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1084]);
}

RogueClassCmd* RogueCmdNegate__resolve_for_literal_operand__Scope( RogueClassCmdNegate* THIS, RogueClassScope* scope_0 )
{
  if (RogueObject_instance_of(THIS->operand,RogueTypeCmdLiteralReal64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralReal64*,ROGUE_CREATE_OBJECT(CmdLiteralReal64))), ROGUE_ARG(THIS->t), ROGUE_ARG((-(((RogueClassCmdLiteralReal64*)(RogueObject_as(THIS->operand,RogueTypeCmdLiteralReal64)))->value))) ))))));
  }
  else if (RogueObject_instance_of(THIS->operand,RogueTypeCmdLiteralInt32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), ROGUE_ARG((-(((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->operand,RogueTypeCmdLiteralInt32)))->value))) ))))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdNegate__suffix_symbol( RogueClassCmdNegate* THIS )
{
  return (RogueString*)(Rogue_literal_strings[28]);
}

RogueString* RogueCmdBitwiseNot__type_name( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1109]);
}

RogueClassCmd* RogueCmdBitwiseNot__clone__CloneArgs( RogueClassCmdBitwiseNot* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdBitwiseNot*)(((RogueCmdUnary__init__Token_Cmd( ROGUE_ARG(((RogueClassCmdUnary*)ROGUE_CREATE_REF(RogueClassCmdBitwiseNot*,ROGUE_CREATE_OBJECT(CmdBitwiseNot)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->operand), clone_args_0 ))) ))))))));
}

RogueClassType* Rogue_CmdBitwiseNot__type( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueClassType*)((call_ROGUEM60( 29, ROGUE_ARG(THIS->operand) )));
}

RogueClassCmdBitwiseNot* RogueCmdBitwiseNot__init_object( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueClassCmdBitwiseNot*)(THIS);
}

RogueString* RogueCmdBitwiseNot__prefix_symbol( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[201]);
}

RogueString* RogueCmdBitwiseNot__fn_name( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1113]);
}

RogueClassCmd* RogueCmdBitwiseNot__resolve_for_literal_operand__Scope( RogueClassCmdBitwiseNot* THIS, RogueClassScope* scope_0 )
{
  if (RogueObject_instance_of(THIS->operand,RogueTypeCmdLiteralInt32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), ROGUE_ARG(~(((RogueClassCmdLiteralInt32*)(RogueObject_as(THIS->operand,RogueTypeCmdLiteralInt32)))->value)) ))))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdBitwiseNot__cpp_prefix_symbol( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[224]);
}

RogueString* RogueCmdElementAccess__type_name( RogueClassCmdElementAccess* THIS )
{
  return (RogueString*)(Rogue_literal_strings[848]);
}

RogueClassCmd* RogueCmdElementAccess__clone__CloneArgs( RogueClassCmdElementAccess* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdElementAccess__init__Token_Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdElementAccess*,ROGUE_CREATE_OBJECT(CmdElementAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->context), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->index), clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdElementAccess__resolve__Scope( RogueClassCmdElementAccess* THIS, RogueClassScope* scope_0 )
{
  THIS->context = (call_ROGUEM52( 25, ROGUE_ARG(THIS->context), scope_0 ));
  ROGUE_DEF_LOCAL_REF(RogueClassType*,context_type_1,((call_ROGUEM60( 22, ROGUE_ARG(THIS->context) ))));
  RogueType__organize__Scope( context_type_1, scope_0 );
  if (context_type_1->is_array)
  {
    return (RogueClassCmd*)(((RogueCmdReadArrayElement__resolve__Scope( ROGUE_ARG(((RogueCmdReadArrayElement__init__Token_Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadArrayElement*,ROGUE_CREATE_OBJECT(CmdReadArrayElement))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), ROGUE_ARG(THIS->index) )))), scope_0 ))));
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,args_2,(((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )))));
    RogueCmdList__add__Cmd( ((RogueCmdList*)args_2), ROGUE_ARG(THIS->index) );
    return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_1, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), Rogue_literal_strings[941], args_2 )))), true, false ))));
  }
}

RogueClassCmd* RogueCmdElementAccess__resolve_assignment__Scope_Cmd( RogueClassCmdElementAccess* THIS, RogueClassScope* scope_0, RogueClassCmd* new_value_1 )
{
  THIS->context = (call_ROGUEM52( 25, ROGUE_ARG(THIS->context), scope_0 ));
  ROGUE_DEF_LOCAL_REF(RogueClassType*,context_type_2,((call_ROGUEM60( 22, ROGUE_ARG(THIS->context) ))));
  RogueType__organize__Scope( context_type_2, scope_0 );
  if (context_type_2->is_array)
  {
    return (RogueClassCmd*)(((RogueCmdWriteArrayElement__resolve__Scope( ROGUE_ARG(((RogueCmdWriteArrayElement__init__Token_Cmd_Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteArrayElement*,ROGUE_CREATE_OBJECT(CmdWriteArrayElement))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), ROGUE_ARG(THIS->index), new_value_1 )))), scope_0 ))));
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,args_3,(((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )))));
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList__add__Cmd( ((RogueCmdList*)args_3), ROGUE_ARG(THIS->index) )))), new_value_1 );
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,result_4,(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_2, ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), Rogue_literal_strings[963], args_3 )))), true, false )))));
    return (RogueClassCmd*)(result_4);
  }
}

RogueClassCmd* RogueCmdElementAccess__resolve_adjust__Scope_Int32( RogueClassCmdElementAccess* THIS, RogueClassScope* scope_0, RogueInt32 delta_1 )
{
  return (RogueClassCmd*)((call_ROGUEM63( 26, ROGUE_ARG(((RogueCmdElementAccess__clone__CloneArgs( ROGUE_ARG(THIS), ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) )))), scope_0, ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdAdd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdAdd*,ROGUE_CREATE_OBJECT(CmdAdd)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(THIS))), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), delta_1 )))))) )))))))) )));
}

void RogueCmdElementAccess__update_this_type__Scope( RogueClassCmdElementAccess* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->context), scope_0 );
  call_ROGUEM56( 32, ROGUE_ARG(THIS->index), scope_0 );
}

RogueClassCmdElementAccess* RogueCmdElementAccess__init_object( RogueClassCmdElementAccess* THIS )
{
  return (RogueClassCmdElementAccess*)(THIS);
}

RogueClassCmdElementAccess* RogueCmdElementAccess__init__Token_Cmd_Cmd( RogueClassCmdElementAccess* THIS, RogueClassToken* _auto_1304_0, RogueClassCmd* _auto_1305_1, RogueClassCmd* _auto_1306_2 )
{
  THIS->index = _auto_1306_2;
  THIS->context = _auto_1305_1;
  THIS->t = _auto_1304_0;
  return (RogueClassCmdElementAccess*)(THIS);
}

RogueString* RogueCmdListConvert__type_name( RogueClassCmdListConvert* THIS )
{
  return (RogueString*)(Rogue_literal_strings[849]);
}

RogueClassCmdListConvert* RogueCmdListConvert__clone__CloneArgs( RogueClassCmdListConvert* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdListConvert*)(((RogueCmdListConvert__init__Token_Cmd_Type_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdListConvert*,ROGUE_CREATE_OBJECT(CmdListConvert))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->list), clone_args_0 ))), ROGUE_ARG(THIS->_to_type), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->convert_fn), clone_args_0 ))) ))));
}

RogueClassType* RogueCmdListConvert__implicit_type__Scope( RogueClassCmdListConvert* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassType*)(THIS->_to_type);
}

RogueClassCmd* RogueCmdListConvert__resolve__Scope( RogueClassCmdListConvert* THIS, RogueClassScope* scope_0 )
{
  THIS->list = (call_ROGUEM52( 25, ROGUE_ARG(THIS->list), scope_0 ));
  ROGUE_DEF_LOCAL_REF(RogueClassType*,list_type_1,(((RogueType__organize__Scope( ROGUE_ARG((call_ROGUEM60( 22, ROGUE_ARG(THIS->list) ))), scope_0 )))));
  RogueType__organize__Scope( ROGUE_ARG(THIS->_to_type), scope_0 );
  if (!(list_type_1->is_list))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[942] ))));
  }
  if (THIS->_to_type->is_list)
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[943] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(list_type_1->_element_type))) )))) )))), Rogue_literal_strings[193] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(THIS->_to_type->_element_type))) )))) )))), Rogue_literal_strings[130] )))) )))) )))))), Rogue_literal_strings[944], ROGUE_ARG(((RogueCmdArgs__init__Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->list), ROGUE_ARG(THIS->convert_fn) )))) )))), scope_0 ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[945] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(list_type_1->_element_type))) )))) )))), Rogue_literal_strings[193] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(THIS->_to_type))) )))) )))), Rogue_literal_strings[130] )))) )))) )))))), Rogue_literal_strings[944], ROGUE_ARG(((RogueCmdArgs__init__Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->list), ROGUE_ARG(THIS->convert_fn) )))) )))), scope_0 ))));
  }
}

RogueClassType* Rogue_CmdListConvert__type( RogueClassCmdListConvert* THIS )
{
  return (RogueClassType*)(THIS->_to_type);
}

RogueClassCmdListConvert* RogueCmdListConvert__init_object( RogueClassCmdListConvert* THIS )
{
  return (RogueClassCmdListConvert*)(THIS);
}

RogueClassCmdListConvert* RogueCmdListConvert__init__Token_Cmd_Type_Cmd( RogueClassCmdListConvert* THIS, RogueClassToken* _auto_1307_0, RogueClassCmd* _auto_1308_1, RogueClassType* _auto_1309_2, RogueClassCmd* _auto_1310_3 )
{
  THIS->convert_fn = _auto_1310_3;
  THIS->_to_type = _auto_1309_2;
  THIS->list = _auto_1308_1;
  THIS->t = _auto_1307_0;
  return (RogueClassCmdListConvert*)(THIS);
}

RogueString* RogueCmdConvertToType__type_name( RogueClassCmdConvertToType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1104]);
}

RogueClassCmd* RogueCmdConvertToType__clone__CloneArgs( RogueClassCmdConvertToType* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdConvertToType*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ROGUE_ARG(((RogueClassCmdTypeOperator*)ROGUE_CREATE_REF(RogueClassCmdConvertToType*,ROGUE_CREATE_OBJECT(CmdConvertToType)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->operand), clone_args_0 ))), ROGUE_ARG(THIS->_target_type) ))))))));
}

RogueClassCmd* RogueCmdConvertToType__resolve__Scope( RogueClassCmdConvertToType* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM52( 25, ROGUE_ARG(THIS->operand), scope_0 ));
  ROGUE_DEF_LOCAL_REF(RogueClassType*,operand_type_1,((call_ROGUEM60( 22, ROGUE_ARG(THIS->operand) ))));
  RogueType__organize__Scope( ROGUE_ARG(THIS->_target_type), scope_0 );
  if (((void*)operand_type_1) == ((void*)THIS->_target_type))
  {
    return (RogueClassCmd*)(THIS->operand);
  }
  if ((((RogueType__is_primitive( operand_type_1 ))) && ((RogueType__is_primitive( ROGUE_ARG(THIS->_target_type) )))))
  {
    return (RogueClassCmd*)(((RogueCmdConvertToPrimitiveType__resolve__Scope( ROGUE_ARG(((RogueClassCmdConvertToPrimitiveType*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ROGUE_ARG(((RogueClassCmdTypeOperator*)ROGUE_CREATE_REF(RogueClassCmdConvertToPrimitiveType*,ROGUE_CREATE_OBJECT(CmdConvertToPrimitiveType)))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->operand), ROGUE_ARG(THIS->_target_type) )))))), scope_0 ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->operand), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[358], ROGUE_ARG(THIS->_target_type->name) )))) )))), scope_0 ))));
  }
}

RogueClassCmdConvertToType* RogueCmdConvertToType__init_object( RogueClassCmdConvertToType* THIS )
{
  return (RogueClassCmdConvertToType*)(THIS);
}

RogueString* RogueCmdCreateCallback__type_name( RogueClassCmdCreateCallback* THIS )
{
  return (RogueString*)(Rogue_literal_strings[850]);
}

RogueClassCmdCreateCallback* RogueCmdCreateCallback__clone__CloneArgs( RogueClassCmdCreateCallback* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdCreateCallback*)(((RogueCmdCreateCallback__init__Token_Cmd_String_String_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCreateCallback*,ROGUE_CREATE_OBJECT(CmdCreateCallback))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->context), clone_args_0 ))), ROGUE_ARG(THIS->name), ROGUE_ARG(THIS->signature), ROGUE_ARG(THIS->_return_type) ))));
}

RogueClassCmd* RogueCmdCreateCallback__resolve__Scope( RogueClassCmdCreateCallback* THIS, RogueClassScope* scope_0 )
{
  if ((((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(THIS->name), Rogue_literal_strings[357] ))) && !!(THIS->_return_type)))
  {
    THIS->name = ((RogueString__operatorPLUS__String( Rogue_literal_strings[358], ROGUE_ARG(THIS->_return_type->name) )));
  }
  THIS->context = (call_ROGUEM52( 25, ROGUE_ARG(THIS->context), scope_0 ));
  ROGUE_DEF_LOCAL_REF(RogueClassType*,context_type_1,((call_ROGUEM60( 22, ROGUE_ARG(THIS->context) ))));
  RogueType__organize__Scope( context_type_1, scope_0 );
  ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_2,(((RogueType__find_method__String( context_type_1, ROGUE_ARG(((RogueString__operatorPLUS__String( ROGUE_ARG(THIS->name), ROGUE_ARG(THIS->signature) )))) )))));
  if (!(!!(m_2)))
  {
    ROGUE_DEF_LOCAL_REF(RogueMethodList*,methods_3,(((RogueString_MethodListTable__get__String( ROGUE_ARG(context_type_1->method_lookup_by_name), ROGUE_ARG(THIS->name) )))));
    if (!(!!(methods_3)))
    {
      methods_3 = ((RogueMethodList*)((RogueString_MethodListTable__get__String( ROGUE_ARG(context_type_1->global_method_lookup_by_name), ROGUE_ARG(THIS->name) ))));
    }
    if (!(!!(methods_3)))
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[946] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->name) )))) )))), Rogue_literal_strings[947] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(context_type_1->name) )))) )))), Rogue_literal_strings[64] )))) )))) ))));
    }
    if (methods_3->count != 1)
    {
      ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[948] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->name) )))) )))), Rogue_literal_strings[949] )))) )))) ))));
    }
    m_2 = ((RogueClassMethod*)((RogueClassMethod*)(methods_3->data->objects[0])));
  }
  ROGUE_DEF_LOCAL_REF(RogueTypeList*,parameter_types_4,0);
  if (!!(m_2->parameters->count))
  {
    parameter_types_4 = ((RogueTypeList*)((RogueTypeList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueTypeList*,ROGUE_CREATE_OBJECT(TypeList))) ))));
    {
      ROGUE_DEF_LOCAL_REF(RogueLocalList*,_auto_2321_13,(m_2->parameters));
      RogueInt32 _auto_2322_14 = (0);
      for (;_auto_2322_14 < _auto_2321_13->count;++_auto_2322_14)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassLocal*,p_15,(((RogueClassLocal*)(_auto_2321_13->data->objects[_auto_2322_14]))));
        RogueTypeList__add__Type( parameter_types_4, ROGUE_ARG(p_15->_type) );
      }
    }
  }
  ROGUE_DEF_LOCAL_REF(RogueString*,callback_type_name_5,(((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__operatorPLUS__String( ROGUE_ARG(context_type_1->name), Rogue_literal_strings[82] )))), ROGUE_ARG(THIS->name) )))), ROGUE_ARG(((RogueProgram__get_callback_type_signature__TypeList( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), parameter_types_4 )))) )))));
  ROGUE_DEF_LOCAL_REF(RogueClassType*,callback_type_6,(((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(THIS->t), callback_type_name_5 )))));
  if (!(callback_type_6->defined))
  {
    callback_type_6->defined = true;
    RogueAttributes__add__Int32( ROGUE_ARG(callback_type_6->attributes), 0 );
    ROGUE_DEF_LOCAL_REF(RogueClassType*,base_type_7,(((RogueProgram__get_callback_type_reference__Token_TypeList_Type( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(THIS->t), parameter_types_4, ROGUE_ARG(m_2->_return_type) )))));
    RogueTypeList__add__Type( ROGUE_ARG(callback_type_6->base_types), base_type_7 );
    ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_call_8,(((RogueType__add_method__Token_String( callback_type_6, ROGUE_ARG(THIS->t), Rogue_literal_strings[279] )))));
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,args_9,(((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )))));
    if (!!(parameter_types_4))
    {
      {
        ROGUE_DEF_LOCAL_REF(RogueTypeList*,_auto_2323_16,(parameter_types_4));
        RogueInt32 i_17 = (0);
        for (;i_17 < _auto_2323_16->count;++i_17)
        {
          ROGUE_DEF_LOCAL_REF(RogueString*,param_name_10,(((RogueString__operatorPLUS__Int32( Rogue_literal_strings[280], ROGUE_ARG((i_17 + 1)) )))));
          RogueMethod__add_parameter__Token_String_Type( m_call_8, ROGUE_ARG(THIS->t), param_name_10, ROGUE_ARG(((RogueClassType*)(parameter_types_4->data->objects[i_17]))) );
          RogueCmdList__add__Cmd( ((RogueCmdList*)args_9), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), param_name_10 )))))) );
        }
      }
    }
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,cmd_11,0);
    if (((RogueMethod__is_global( m_2 ))))
    {
      RogueAttributes__add__Int32( ROGUE_ARG(callback_type_6->attributes), 1024 );
      cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(context_type_1->name) )))))), ROGUE_ARG(THIS->name), args_9 ))))));
    }
    else
    {
      RogueType__add_property__Token_String_Type_Cmd( callback_type_6, ROGUE_ARG(THIS->t), Rogue_literal_strings[424], context_type_1, ROGUE_ARG(((RogueClassCmd*)(NULL))) );
      ROGUE_DEF_LOCAL_REF(RogueClassMethod*,m_init_12,(((RogueType__add_method__Token_String( callback_type_6, ROGUE_ARG(THIS->t), Rogue_literal_strings[345] )))));
      RogueMethod__add_parameter__Token_String_Type( m_init_12, ROGUE_ARG(THIS->t), Rogue_literal_strings[424], ROGUE_ARG(((RogueClassType*)(NULL))) );
      cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), Rogue_literal_strings[424] )))))), ROGUE_ARG(THIS->name), args_9 ))))));
    }
    if (!!(m_2->_return_type))
    {
      m_call_8->_return_type = m_2->_return_type;
      cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReturn*,ROGUE_CREATE_OBJECT(CmdReturn))), ROGUE_ARG(THIS->t), cmd_11 ))))));
    }
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)m_call_8->statements)), cmd_11 );
  }
  if (((RogueMethod__is_global( m_2 ))))
  {
    return (RogueClassCmd*)(((RogueCmdReadSingleton__resolve__Scope( ROGUE_ARG(((RogueCmdReadSingleton__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadSingleton*,ROGUE_CREATE_OBJECT(CmdReadSingleton))), ROGUE_ARG(THIS->t), callback_type_6 )))), scope_0 ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), callback_type_name_5, ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(THIS->context) )))) )))), scope_0 ))));
  }
}

RogueClassCmdCreateCallback* RogueCmdCreateCallback__init_object( RogueClassCmdCreateCallback* THIS )
{
  return (RogueClassCmdCreateCallback*)(THIS);
}

RogueClassCmdCreateCallback* RogueCmdCreateCallback__init__Token_Cmd_String_String_Type( RogueClassCmdCreateCallback* THIS, RogueClassToken* _auto_1311_0, RogueClassCmd* _auto_1312_1, RogueString* _auto_1313_2, RogueString* _auto_1314_3, RogueClassType* _auto_1315_4 )
{
  THIS->_return_type = _auto_1315_4;
  THIS->signature = _auto_1314_3;
  THIS->name = _auto_1313_2;
  THIS->context = _auto_1312_1;
  THIS->t = _auto_1311_0;
  return (RogueClassCmdCreateCallback*)(THIS);
}

RogueString* RogueCmdAs__type_name( RogueClassCmdAs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1105]);
}

RogueClassCmd* RogueCmdAs__clone__CloneArgs( RogueClassCmdAs* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdAs*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ROGUE_ARG(((RogueClassCmdTypeOperator*)ROGUE_CREATE_REF(RogueClassCmdAs*,ROGUE_CREATE_OBJECT(CmdAs)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->operand), clone_args_0 ))), ROGUE_ARG(THIS->_target_type) ))))))));
}

RogueClassCmd* RogueCmdAs__resolve__Scope( RogueClassCmdAs* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM52( 25, ROGUE_ARG(THIS->operand), scope_0 ));
  RogueType__organize__Scope( ROGUE_ARG(THIS->_target_type), scope_0 );
  if (!(((!!((call_ROGUEM345( 29, ROGUE_ARG(((RogueClassCmdTypeOperator*)THIS)) ))) && ((RogueType__is_reference( ROGUE_ARG((call_ROGUEM345( 29, ROGUE_ARG(((RogueClassCmdTypeOperator*)THIS)) ))) )))) && ((RogueType__is_reference( ROGUE_ARG(THIS->_target_type) ))))))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[950] ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdAs__write_cpp__CPPWriter_Logical( RogueClassCmdAs* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[533] )))), ROGUE_ARG(THIS->_target_type) )))), Rogue_literal_strings[1001] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->operand), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[193] );
  RogueCPPWriter__print_type_info__Type( writer_0, ROGUE_ARG(THIS->_target_type) );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1002] );
}

RogueClassCmdAs* RogueCmdAs__init_object( RogueClassCmdAs* THIS )
{
  return (RogueClassCmdAs*)(THIS);
}

RogueString* RogueCmdDefaultValue__type_name( RogueClassCmdDefaultValue* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1071]);
}

RogueClassCmd* RogueCmdDefaultValue__clone__CloneArgs( RogueClassCmdDefaultValue* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdDefaultValue__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdDefaultValue*,ROGUE_CREATE_OBJECT(CmdDefaultValue))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->_of_type) ))))));
}

RogueClassCmd* RogueCmdDefaultValue__resolve__Scope( RogueClassCmdDefaultValue* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( ROGUE_ARG(THIS->_of_type), scope_0 );
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,default_value_1,(((RogueType__create_default_value__Token( ROGUE_ARG(THIS->_of_type), ROGUE_ARG(THIS->t) )))));
  if (((RogueType__is_reference( ROGUE_ARG(THIS->_of_type) ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCastToType*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ROGUE_ARG(((RogueClassCmdTypeOperator*)ROGUE_CREATE_REF(RogueClassCmdCastToType*,ROGUE_CREATE_OBJECT(CmdCastToType)))), ROGUE_ARG(THIS->t), default_value_1, ROGUE_ARG(THIS->_of_type) ))))))));
  }
  else
  {
    return (RogueClassCmd*)(default_value_1);
  }
}

RogueClassType* Rogue_CmdDefaultValue__type( RogueClassCmdDefaultValue* THIS )
{
  return (RogueClassType*)(THIS->_of_type);
}

RogueClassCmdDefaultValue* RogueCmdDefaultValue__init_object( RogueClassCmdDefaultValue* THIS )
{
  return (RogueClassCmdDefaultValue*)(THIS);
}

RogueClassCmdDefaultValue* RogueCmdDefaultValue__init__Token_Type( RogueClassCmdDefaultValue* THIS, RogueClassToken* _auto_1316_0, RogueClassType* _auto_1317_1 )
{
  THIS->_of_type = _auto_1317_1;
  THIS->t = _auto_1316_0;
  return (RogueClassCmdDefaultValue*)(THIS);
}

RogueString* RogueCmdLiteralReal64__type_name( RogueClassCmdLiteralReal64* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1072]);
}

RogueClassCmd* RogueCmdLiteralReal64__clone__CloneArgs( RogueClassCmdLiteralReal64* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralReal64*,ROGUE_CREATE_OBJECT(CmdLiteralReal64))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->value) ))))));
}

RogueClassCmd* RogueCmdLiteralReal64__resolve__Scope( RogueClassCmdLiteralReal64* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralReal64__type( RogueClassCmdLiteralReal64* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64);
}

void RogueCmdLiteralReal64__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralReal64* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (THIS->value == THIS->value)
  {
    if ((THIS->value - THIS->value) == 0.0)
    {
      RogueCPPWriter__print__Real64( writer_0, ROGUE_ARG(THIS->value) );
    }
    else if (THIS->value > 0.0)
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1003] );
    }
    else
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1004] );
    }
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1005] );
  }
}

RogueClassCmdLiteralReal64* RogueCmdLiteralReal64__init_object( RogueClassCmdLiteralReal64* THIS )
{
  return (RogueClassCmdLiteralReal64*)(THIS);
}

RogueClassCmdLiteralReal64* RogueCmdLiteralReal64__init__Token_Real64( RogueClassCmdLiteralReal64* THIS, RogueClassToken* _auto_1318_0, RogueReal64 _auto_1319_1 )
{
  THIS->value = _auto_1319_1;
  THIS->t = _auto_1318_0;
  return (RogueClassCmdLiteralReal64*)(THIS);
}

RogueString* RogueCmdLiteralInt64__type_name( RogueClassCmdLiteralInt64* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1073]);
}

RogueClassCmd* RogueCmdLiteralInt64__cast_to__Type_Scope( RogueClassCmdLiteralInt64* THIS, RogueClassType* target_type_0, RogueClassScope* scope_1 )
{
  if (((void*)target_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal64__init__Token_Real64( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralReal64*,ROGUE_CREATE_OBJECT(CmdLiteralReal64))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueReal64)(THIS->value))) ))))));
  }
  else if (((void*)target_type_0) == ((void*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueInt32)(THIS->value))) ))))));
  }
  else
  {
    return (RogueClassCmd*)((RogueCmd__cast_to__Type_Scope( ROGUE_ARG(((RogueClassCmd*)THIS)), target_type_0, scope_1 )));
  }
}

RogueClassCmd* RogueCmdLiteralInt64__clone__CloneArgs( RogueClassCmdLiteralInt64* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInt64__init__Token_Int64( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt64*,ROGUE_CREATE_OBJECT(CmdLiteralInt64))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->value) ))))));
}

RogueClassCmd* RogueCmdLiteralInt64__resolve__Scope( RogueClassCmdLiteralInt64* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralInt64__type( RogueClassCmdLiteralInt64* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int64);
}

void RogueCmdLiteralInt64__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralInt64* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Int64( writer_0, ROGUE_ARG(THIS->value) )))), Rogue_literal_strings[1006] );
}

RogueClassCmdLiteralInt64* RogueCmdLiteralInt64__init_object( RogueClassCmdLiteralInt64* THIS )
{
  return (RogueClassCmdLiteralInt64*)(THIS);
}

RogueClassCmdLiteralInt64* RogueCmdLiteralInt64__init__Token_Int64( RogueClassCmdLiteralInt64* THIS, RogueClassToken* _auto_1320_0, RogueInt64 _auto_1321_1 )
{
  THIS->value = _auto_1321_1;
  THIS->t = _auto_1320_0;
  return (RogueClassCmdLiteralInt64*)(THIS);
}

RogueString* RogueCmdLiteralCharacter__type_name( RogueClassCmdLiteralCharacter* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1074]);
}

RogueClassCmd* RogueCmdLiteralCharacter__clone__CloneArgs( RogueClassCmdLiteralCharacter* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralCharacter__init__Token_Character( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralCharacter*,ROGUE_CREATE_OBJECT(CmdLiteralCharacter))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->value) ))))));
}

RogueClassCmd* RogueCmdLiteralCharacter__resolve__Scope( RogueClassCmdLiteralCharacter* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralCharacter__type( RogueClassCmdLiteralCharacter* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character);
}

void RogueCmdLiteralCharacter__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralCharacter* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1007] );
  if ((((RogueInt32)(THIS->value)) >= 32 && ((RogueInt32)(THIS->value)) <= 126))
  {
    switch (((RogueInt32)(THIS->value)))
    {
      case 10:
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1008] );
        break;
      }
      case (RogueCharacter)'\\':
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1009] );
        break;
      }
      case (RogueCharacter)'\'':
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1010] );
        break;
      }
      default:
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[69] );
        RogueCPPWriter__print_literal_character__Character_Logical( writer_0, ROGUE_ARG(THIS->value), false );
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[69] );
      }
    }
  }
  else
  {
    RogueCPPWriter__print__Int32( writer_0, ROGUE_ARG(((RogueInt32)(THIS->value))) );
  }
}

RogueClassCmdLiteralCharacter* RogueCmdLiteralCharacter__init_object( RogueClassCmdLiteralCharacter* THIS )
{
  return (RogueClassCmdLiteralCharacter*)(THIS);
}

RogueClassCmdLiteralCharacter* RogueCmdLiteralCharacter__init__Token_Character( RogueClassCmdLiteralCharacter* THIS, RogueClassToken* _auto_1322_0, RogueCharacter _auto_1323_1 )
{
  THIS->value = _auto_1323_1;
  THIS->t = _auto_1322_0;
  return (RogueClassCmdLiteralCharacter*)(THIS);
}

RogueString* RogueCmdCreateList__type_name( RogueClassCmdCreateList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[851]);
}

RogueClassCmd* RogueCmdCreateList__clone__CloneArgs( RogueClassCmdCreateList* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateList__init__Token_CmdArgs_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCreateList*,ROGUE_CREATE_OBJECT(CmdCreateList))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueCmd__clone__CmdArgs_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->args), clone_args_0 )))), ROGUE_ARG(THIS->_list_type) ))))));
}

RogueClassCmd* RogueCmdCreateList__resolve__Scope( RogueClassCmdCreateList* THIS, RogueClassScope* scope_0 )
{
  RogueCmdArgs__resolve__Scope( ROGUE_ARG(THIS->args), scope_0 );
  if ((!(!!(THIS->_list_type)) && !!(THIS->args->count)))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassType*,common_type_1,((call_ROGUEM60( 29, ROGUE_ARG(((RogueClassCmd*)(THIS->args->data->objects[0]))) ))));
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_2324_5,(THIS->args));
      RogueInt32 _auto_2325_6 = (0);
      for (;_auto_2325_6 < _auto_2324_5->count;++_auto_2325_6)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_7,(((RogueClassCmd*)(_auto_2324_5->data->objects[_auto_2325_6]))));
        common_type_1 = ((RogueClassType*)((RogueCmd__find_common_type__Type_Type( ROGUE_ARG(((RogueClassCmd*)THIS)), common_type_1, ROGUE_ARG((call_ROGUEM60( 29, arg_7 ))) ))));
      }
    }
    THIS->_list_type = ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueString__operatorPLUS__String( ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(common_type_1))) )))), Rogue_literal_strings[198] )))) )));
    RogueType__organize__Scope( ROGUE_ARG(THIS->_list_type), scope_0 );
  }
  if (!!(THIS->_list_type))
  {
    ROGUE_DEF_LOCAL_REF(RogueClassType*,element_type_2,(THIS->_list_type->_element_type));
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_2326_8,(THIS->args));
      RogueInt32 index_9 = (0);
      for (;index_9 < _auto_2326_8->count;++index_9)
      {
        THIS->args->data->objects[index_9] = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(((RogueClassCmd*)(THIS->args->data->objects[index_9]))), scope_0 ))), element_type_2, scope_0 ))), scope_0 ));
      }
    }
  }
  if (!(!!(THIS->_list_type)))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[951] ))));
  }
  RogueInt32 initial_capacity_3 = (10);
  if (!!(THIS->args->count))
  {
    initial_capacity_3 = ((RogueInt32)THIS->args->count);
  }
  ROGUE_DEF_LOCAL_REF(RogueClassCmd*,cmd_4,0);
  cmd_4 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->_list_type->name), ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), initial_capacity_3 )))))) )))) ))))));
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_2327_10,(THIS->args));
    RogueInt32 _auto_2328_11 = (0);
    for (;_auto_2328_11 < _auto_2327_10->count;++_auto_2328_11)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_12,(((RogueClassCmd*)(_auto_2327_10->data->objects[_auto_2328_11]))));
      cmd_4 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), cmd_4, Rogue_literal_strings[952], ROGUE_ARG(((RogueCmdArgs__init__Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))), arg_12 )))) ))))));
    }
  }
  return (RogueClassCmd*)((call_ROGUEM52( 25, cmd_4, scope_0 )));
}

RogueClassCmdCreateList* RogueCmdCreateList__init_object( RogueClassCmdCreateList* THIS )
{
  return (RogueClassCmdCreateList*)(THIS);
}

RogueClassCmdCreateList* RogueCmdCreateList__init__Token_CmdArgs_Type( RogueClassCmdCreateList* THIS, RogueClassToken* _auto_1324_0, RogueClassCmdArgs* _auto_1325_1, RogueClassType* _auto_1326_2 )
{
  THIS->_list_type = _auto_1326_2;
  THIS->args = _auto_1325_1;
  THIS->t = _auto_1324_0;
  return (RogueClassCmdCreateList*)(THIS);
}

RogueString* RogueCmdCallPriorMethod__type_name( RogueClassCmdCallPriorMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[852]);
}

RogueClassCmd* RogueCmdCallPriorMethod__clone__CloneArgs( RogueClassCmdCallPriorMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueCmdFlagArgList*,cloned_flag_args_1,0);
  if (!!(THIS->flag_args))
  {
    cloned_flag_args_1 = ((RogueCmdFlagArgList*)((RogueCmdFlagArgList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueCmdFlagArgList*,ROGUE_CREATE_OBJECT(CmdFlagArgList))), ROGUE_ARG(THIS->flag_args->count) ))));
    {
      ROGUE_DEF_LOCAL_REF(RogueCmdFlagArgList*,_auto_2329_2,(THIS->flag_args));
      RogueInt32 _auto_2330_3 = (0);
      for (;_auto_2330_3 < _auto_2329_2->count;++_auto_2330_3)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmdFlagArg*,flag_arg_4,(((RogueClassCmdFlagArg*)(_auto_2329_2->data->objects[_auto_2330_3]))));
        RogueCmdFlagArgList__add__CmdFlagArg( cloned_flag_args_1, ROGUE_ARG(((RogueCmdFlagArg__clone__CloneArgs( flag_arg_4, ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) )))) );
      }
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCallPriorMethod__init__Token_String_CmdArgs_CmdFlagArgList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCallPriorMethod*,ROGUE_CREATE_OBJECT(CmdCallPriorMethod))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->name), ROGUE_ARG(((RogueCmdArgs__clone__CloneArgs( ROGUE_ARG(THIS->args), clone_args_0 )))), cloned_flag_args_1 ))))));
}

RogueClassCmd* RogueCmdCallPriorMethod__resolve__Scope( RogueClassCmdCallPriorMethod* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)((call_ROGUEM52( 4, ROGUE_ARG(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_String_CmdArgs_CmdFlagArgList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->name), ROGUE_ARG(THIS->args), ROGUE_ARG(THIS->flag_args) )))), scope_0 )))), scope_0 )));
}

void RogueCmdCallPriorMethod__update_this_type__Scope( RogueClassCmdCallPriorMethod* THIS, RogueClassScope* scope_0 )
{
  RogueCmdArgs__update_this_type__Scope( ROGUE_ARG(THIS->args), scope_0 );
}

RogueClassCmdCallPriorMethod* RogueCmdCallPriorMethod__init_object( RogueClassCmdCallPriorMethod* THIS )
{
  return (RogueClassCmdCallPriorMethod*)(THIS);
}

RogueClassCmdCallPriorMethod* RogueCmdCallPriorMethod__init__Token_String_CmdArgs_CmdFlagArgList( RogueClassCmdCallPriorMethod* THIS, RogueClassToken* _auto_1327_0, RogueString* _auto_1328_1, RogueClassCmdArgs* _auto_1329_2, RogueCmdFlagArgList* _auto_1330_3 )
{
  THIS->flag_args = _auto_1330_3;
  THIS->args = _auto_1329_2;
  THIS->name = _auto_1328_1;
  THIS->t = _auto_1327_0;
  return (RogueClassCmdCallPriorMethod*)(THIS);
}

RogueString* RogueFnArgList__to_String( RogueFnArgList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueFnArgList*,_auto_2331_2,(THIS));
    RogueInt32 _auto_2332_3 = (0);
    for (;_auto_2332_3 < _auto_2331_2->count;++_auto_2332_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassFnArg*,value_4,(((RogueClassFnArg*)(_auto_2331_2->data->objects[_auto_2332_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueFnArgList__type_name( RogueFnArgList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[739]);
}

RogueFnArgList* RogueFnArgList__init_object( RogueFnArgList* THIS )
{
  return (RogueFnArgList*)(THIS);
}

RogueFnArgList* RogueFnArgList__init( RogueFnArgList* THIS )
{
  RogueFnArgList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueFnArgList*)(THIS);
}

RogueFnArgList* RogueFnArgList__init__Int32( RogueFnArgList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassFnArg*), true );
  }
  return (RogueFnArgList*)(THIS);
}

RogueFnArgList* RogueFnArgList__add__FnArg( RogueFnArgList* THIS, RogueClassFnArg* value_0 )
{
  ((RogueFnArgList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueFnArgList*)(THIS);
}

RogueInt32 RogueFnArgList__capacity( RogueFnArgList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueFnArgList* RogueFnArgList__reserve__Int32( RogueFnArgList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassFnArg*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueFnArgList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassFnArg*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueFnArgList*)(THIS);
}

RogueString* RogueFnArg__type_name( RogueClassFnArg* THIS )
{
  return (RogueString*)(Rogue_literal_strings[693]);
}

RogueClassFnArg* RogueFnArg__init__String_Cmd( RogueClassFnArg* THIS, RogueString* _auto_1331_0, RogueClassCmd* _auto_1332_1 )
{
  THIS->value = _auto_1332_1;
  THIS->name = _auto_1331_0;
  return (RogueClassFnArg*)(THIS);
}

RogueClassFnArg* RogueFnArg__set_type__Type( RogueClassFnArg* THIS, RogueClassType* _auto_1333_0 )
{
  THIS->_type = _auto_1333_0;
  return (RogueClassFnArg*)(THIS);
}

RogueClassFnArg* RogueFnArg__init_object( RogueClassFnArg* THIS )
{
  return (RogueClassFnArg*)(THIS);
}

RogueString* RogueCmdSelect__type_name( RogueClassCmdSelect* THIS )
{
  return (RogueString*)(Rogue_literal_strings[853]);
}

RogueClassCmdSelect* RogueCmdSelect__clone__CloneArgs( RogueClassCmdSelect* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdSelect*,result_1,(((RogueCmdSelect__init__Token_Local_Cmd_CmdSelectCaseList( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdSelect*,ROGUE_CREATE_OBJECT(CmdSelect))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->expression), clone_args_0 )))), ROGUE_ARG(((RogueCmdSelectCaseList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueCmdSelectCaseList*,ROGUE_CREATE_OBJECT(CmdSelectCaseList))), ROGUE_ARG(THIS->cases->count) )))) )))));
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdSelectCaseList*,_auto_2363_2,(THIS->cases));
    RogueInt32 _auto_2364_3 = (0);
    for (;_auto_2364_3 < _auto_2363_2->count;++_auto_2364_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdSelectCase*,c_4,(((RogueClassCmdSelectCase*)(_auto_2363_2->data->objects[_auto_2364_3]))));
      RogueCmdSelectCaseList__add__CmdSelectCase( ROGUE_ARG(result_1->cases), ROGUE_ARG(((RogueCmdSelectCase__clone__CloneArgs( c_4, clone_args_0 )))) );
    }
  }
  return (RogueClassCmdSelect*)(result_1);
}

RogueClassType* RogueCmdSelect__implicit_type__Scope( RogueClassCmdSelect* THIS, RogueClassScope* scope_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassType*,common_type_1,0);
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdSelectCaseList*,_auto_2365_3,(THIS->cases));
    RogueInt32 _auto_2366_4 = (0);
    for (;_auto_2366_4 < _auto_2365_3->count;++_auto_2366_4)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdSelectCase*,c_5,(((RogueClassCmdSelectCase*)(_auto_2365_3->data->objects[_auto_2366_4]))));
      ROGUE_DEF_LOCAL_REF(RogueClassType*,case_type_2,(((RogueCmdSelectCase__implicit_type__Scope( c_5, scope_0 )))));
      if (!(!!(common_type_1)))
      {
        common_type_1 = ((RogueClassType*)case_type_2);
      }
      else if (((void*)common_type_1) != ((void*)case_type_2))
      {
        return (RogueClassType*)(((RogueClassType*)(NULL)));
      }
    }
  }
  return (RogueClassType*)(common_type_1);
}

RogueClassCmd* RogueCmdSelect__resolve__Scope( RogueClassCmdSelect* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->_value_type))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  if (!(!!(THIS->cases->count)))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[954] ))));
  }
  if (!!(((RogueCmdSelectCaseList__last( ROGUE_ARG(THIS->cases) )))->conditions))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(((RogueCmdSelectCaseList__last( ROGUE_ARG(THIS->cases) )))->t), Rogue_literal_strings[955] ))));
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdSelectCaseList*,_auto_2367_3,(THIS->cases));
    RogueInt32 _auto_2368_4 = (0);
    for (;_auto_2368_4 < _auto_2367_3->count;++_auto_2368_4)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdSelectCase*,c_5,(((RogueClassCmdSelectCase*)(_auto_2367_3->data->objects[_auto_2368_4]))));
      RogueCmdSelectCase__resolve__Scope( c_5, scope_0 );
      ROGUE_DEF_LOCAL_REF(RogueClassType*,case_type_1,(((Rogue_CmdSelectCase__type( c_5 )))));
      THIS->_value_type = ((RogueCmd__must_find_common_type__Type_Type( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->_value_type), case_type_1 )));
    }
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdSelectCaseList*,_auto_2369_6,(THIS->cases));
    RogueInt32 _auto_2370_7 = (0);
    for (;_auto_2370_7 < _auto_2369_6->count;++_auto_2370_7)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdSelectCase*,c_8,(((RogueClassCmdSelectCase*)(_auto_2369_6->data->objects[_auto_2370_7]))));
      c_8->value = ((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG(c_8->value), ROGUE_ARG(THIS->_value_type), scope_0 ))), scope_0 ))) )));
    }
  }
  if (!!(THIS->expression))
  {
    THIS->expression = (call_ROGUEM52( 25, ROGUE_ARG(THIS->expression), scope_0 ));
    ROGUE_DEF_LOCAL_REF(RogueClassType*,expr_type_2,((call_ROGUEM60( 22, ROGUE_ARG(THIS->expression) ))));
    {
      ROGUE_DEF_LOCAL_REF(RogueCmdSelectCaseList*,_auto_2371_9,(THIS->cases));
      RogueInt32 _auto_2372_10 = (0);
      for (;_auto_2372_10 < _auto_2371_9->count;++_auto_2372_10)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmdSelectCase*,c_11,(((RogueClassCmdSelectCase*)(_auto_2371_9->data->objects[_auto_2372_10]))));
        RogueCmdSelectCase__cast_conditions__Type_Scope( c_11, expr_type_2, scope_0 );
      }
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdSelect__type( RogueClassCmdSelect* THIS )
{
  return (RogueClassType*)(THIS->_value_type);
}

void RogueCmdSelect__write_cpp__CPPWriter_Logical( RogueClassCmdSelect* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCmdSelect__write_cpp__CmdSelectCaseListReader_CPPWriter_Logical( ROGUE_ARG(THIS), ROGUE_ARG(((RogueCmdSelectCaseList__reader( ROGUE_ARG(THIS->cases) )))), writer_0, true );
}

void RogueCmdSelect__trace_used_code( RogueClassCmdSelect* THIS )
{
  if (!!(THIS->expression))
  {
    call_ROGUEM59( 31, ROGUE_ARG(THIS->expression) );
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdSelectCaseList*,_auto_2382_0,(THIS->cases));
    RogueInt32 _auto_2383_1 = (0);
    for (;_auto_2383_1 < _auto_2382_0->count;++_auto_2383_1)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdSelectCase*,c_2,(((RogueClassCmdSelectCase*)(_auto_2382_0->data->objects[_auto_2383_1]))));
      RogueCmdSelectCase__trace_used_code( c_2 );
    }
  }
}

void RogueCmdSelect__update_this_type__Scope( RogueClassCmdSelect* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->expression))
  {
    call_ROGUEM56( 32, ROGUE_ARG(THIS->expression), scope_0 );
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdSelectCaseList*,_auto_2384_1,(THIS->cases));
    RogueInt32 _auto_2385_2 = (0);
    for (;_auto_2385_2 < _auto_2384_1->count;++_auto_2385_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdSelectCase*,c_3,(((RogueClassCmdSelectCase*)(_auto_2384_1->data->objects[_auto_2385_2]))));
      RogueCmdSelectCase__update_this_type__Scope( c_3, scope_0 );
    }
  }
}

RogueClassCmdSelect* RogueCmdSelect__init_object( RogueClassCmdSelect* THIS )
{
  return (RogueClassCmdSelect*)(THIS);
}

RogueClassCmdSelect* RogueCmdSelect__init__Token_Local_Cmd_CmdSelectCaseList( RogueClassCmdSelect* THIS, RogueClassToken* _auto_1338_0, RogueClassLocal* _auto_1339_1, RogueClassCmd* _auto_1340_2, RogueCmdSelectCaseList* _auto_1341_3 )
{
  THIS->cases = _auto_1341_3;
  THIS->expression = _auto_1340_2;
  THIS->local_info = _auto_1339_1;
  THIS->t = _auto_1338_0;
  return (RogueClassCmdSelect*)(THIS);
}

void RogueCmdSelect__write_cpp__CmdSelectCaseListReader_CPPWriter_Logical( RogueClassCmdSelect* THIS, RogueClassCmdSelectCaseListReader* reader_0, RogueClassCPPWriter* writer_1, RogueLogical first_case_2 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdSelectCase*,select_case_3,(((RogueCmdSelectCaseListReader__read( reader_0 )))));
  if (!(((RogueCmdSelectCaseListReader__has_another( reader_0 )))))
  {
    call_ROGUEM72( 30, ROGUE_ARG(select_case_3->value), writer_1, false );
    return;
  }
  RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[533] );
  RogueLogical first_condition_4 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdList*,_auto_2386_5,(select_case_3->conditions));
    RogueInt32 _auto_2387_6 = (0);
    for (;_auto_2387_6 < _auto_2386_5->count;++_auto_2387_6)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,c_7,(((RogueClassCmd*)(_auto_2386_5->data->objects[_auto_2387_6]))));
      if (first_condition_4)
      {
        first_condition_4 = ((RogueLogical)false);
      }
      else
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[1011] );
      }
      RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[80] );
      if (!!(THIS->expression))
      {
        if (first_case_2)
        {
          RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[80] )))), ROGUE_ARG(((RogueLocal__cpp_name( ROGUE_ARG(THIS->local_info) )))) )))), Rogue_literal_strings[200] );
          call_ROGUEM72( 30, ROGUE_ARG(THIS->expression), writer_1, false );
          RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[28] );
          first_case_2 = ((RogueLogical)false);
        }
        else
        {
          RogueCPPWriter__print__String( writer_1, ROGUE_ARG(((RogueLocal__cpp_name( ROGUE_ARG(THIS->local_info) )))) );
        }
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[199] );
      }
      RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[80] );
      call_ROGUEM72( 30, c_7, writer_1, false );
      RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[493] );
    }
  }
  RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[1012] );
  call_ROGUEM72( 30, ROGUE_ARG(select_case_3->value), writer_1, false );
  RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[1013] );
  RogueCmdSelect__write_cpp__CmdSelectCaseListReader_CPPWriter_Logical( ROGUE_ARG(THIS), reader_0, writer_1, false );
  RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[28] );
}

RogueString* RogueCmdSelectCaseList__to_String( RogueCmdSelectCaseList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdSelectCaseList*,_auto_2388_2,(THIS));
    RogueInt32 _auto_2389_3 = (0);
    for (;_auto_2389_3 < _auto_2388_2->count;++_auto_2389_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdSelectCase*,value_4,(((RogueClassCmdSelectCase*)(_auto_2388_2->data->objects[_auto_2389_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdSelectCaseList__type_name( RogueCmdSelectCaseList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[740]);
}

RogueCmdSelectCaseList* RogueCmdSelectCaseList__init_object( RogueCmdSelectCaseList* THIS )
{
  return (RogueCmdSelectCaseList*)(THIS);
}

RogueCmdSelectCaseList* RogueCmdSelectCaseList__init( RogueCmdSelectCaseList* THIS )
{
  RogueCmdSelectCaseList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueCmdSelectCaseList*)(THIS);
}

RogueCmdSelectCaseList* RogueCmdSelectCaseList__init__Int32( RogueCmdSelectCaseList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassCmdSelectCase*), true );
  }
  return (RogueCmdSelectCaseList*)(THIS);
}

RogueCmdSelectCaseList* RogueCmdSelectCaseList__add__CmdSelectCase( RogueCmdSelectCaseList* THIS, RogueClassCmdSelectCase* value_0 )
{
  ((RogueCmdSelectCaseList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdSelectCaseList*)(THIS);
}

RogueInt32 RogueCmdSelectCaseList__capacity( RogueCmdSelectCaseList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueClassCmdSelectCase* RogueCmdSelectCaseList__last( RogueCmdSelectCaseList* THIS )
{
  return (RogueClassCmdSelectCase*)(((RogueClassCmdSelectCase*)(THIS->data->objects[(THIS->count - 1)])));
}

RogueClassCmdSelectCaseListReader* RogueCmdSelectCaseList__reader( RogueCmdSelectCaseList* THIS )
{
  return (RogueClassCmdSelectCaseListReader*)(((RogueCmdSelectCaseListReader__init__CmdSelectCaseList_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdSelectCaseListReader*,ROGUE_CREATE_OBJECT(CmdSelectCaseListReader))), ROGUE_ARG(THIS), 0 ))));
}

RogueCmdSelectCaseList* RogueCmdSelectCaseList__reserve__Int32( RogueCmdSelectCaseList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassCmdSelectCase*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueCmdSelectCaseList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassCmdSelectCase*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdSelectCaseList*)(THIS);
}

RogueString* RogueCmdSelectCase__type_name( RogueClassCmdSelectCase* THIS )
{
  return (RogueString*)(Rogue_literal_strings[854]);
}

RogueClassCmdSelectCase* RogueCmdSelectCase__clone__CloneArgs( RogueClassCmdSelectCase* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdSelectCase*,result_1,(((RogueCmdSelectCase__init__Token_CmdList_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdSelectCase*,ROGUE_CREATE_OBJECT(CmdSelectCase))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueCmdList*)(NULL))), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->value), clone_args_0 )))) )))));
  if (!!(THIS->conditions))
  {
    result_1->conditions = (call_ROGUEM79( 5, ROGUE_ARG(ROGUE_CREATE_REF(RogueCmdList*,ROGUE_CREATE_OBJECT(CmdList))), ROGUE_ARG(THIS->conditions->count) ));
    {
      ROGUE_DEF_LOCAL_REF(RogueCmdList*,_auto_2411_2,(THIS->conditions));
      RogueInt32 _auto_2412_3 = (0);
      for (;_auto_2412_3 < _auto_2411_2->count;++_auto_2412_3)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,c_4,(((RogueClassCmd*)(_auto_2411_2->data->objects[_auto_2412_3]))));
        RogueCmdList__add__Cmd( ROGUE_ARG(result_1->conditions), ROGUE_ARG((call_ROGUEM71( 6, c_4, clone_args_0 ))) );
      }
    }
  }
  return (RogueClassCmdSelectCase*)(result_1);
}

RogueClassType* RogueCmdSelectCase__implicit_type__Scope( RogueClassCmdSelectCase* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassType*)((call_ROGUEM58( 17, ROGUE_ARG(THIS->value), scope_0 )));
}

RogueClassCmd* RogueCmdSelectCase__resolve__Scope( RogueClassCmdSelectCase* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->conditions))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueCmdList*,_auto_2413_1,(THIS->conditions));
      RogueInt32 i_2 = (0);
      for (;i_2 < _auto_2413_1->count;++i_2)
      {
        THIS->conditions->data->objects[i_2] = ((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(((RogueClassCmd*)(THIS->conditions->data->objects[i_2]))), scope_0 ))) )));
      }
    }
  }
  THIS->value = ((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->value), scope_0 ))) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdSelectCase__type( RogueClassCmdSelectCase* THIS )
{
  return (RogueClassType*)((call_ROGUEM60( 29, ROGUE_ARG(THIS->value) )));
}

void RogueCmdSelectCase__trace_used_code( RogueClassCmdSelectCase* THIS )
{
  if (!!(THIS->conditions))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueCmdList*,_auto_2414_0,(THIS->conditions));
      RogueInt32 _auto_2415_1 = (0);
      for (;_auto_2415_1 < _auto_2414_0->count;++_auto_2415_1)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,c_2,(((RogueClassCmd*)(_auto_2414_0->data->objects[_auto_2415_1]))));
        call_ROGUEM59( 31, c_2 );
      }
    }
  }
  call_ROGUEM59( 31, ROGUE_ARG(THIS->value) );
}

void RogueCmdSelectCase__update_this_type__Scope( RogueClassCmdSelectCase* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->conditions))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueCmdList*,_auto_2416_1,(THIS->conditions));
      RogueInt32 _auto_2417_2 = (0);
      for (;_auto_2417_2 < _auto_2416_1->count;++_auto_2417_2)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,c_3,(((RogueClassCmd*)(_auto_2416_1->data->objects[_auto_2417_2]))));
        call_ROGUEM56( 32, c_3, scope_0 );
      }
    }
  }
  call_ROGUEM56( 32, ROGUE_ARG(THIS->value), scope_0 );
}

RogueClassCmdSelectCase* RogueCmdSelectCase__init_object( RogueClassCmdSelectCase* THIS )
{
  return (RogueClassCmdSelectCase*)(THIS);
}

RogueClassCmdSelectCase* RogueCmdSelectCase__init__Token_CmdList_Cmd( RogueClassCmdSelectCase* THIS, RogueClassToken* _auto_1342_0, RogueCmdList* _auto_1343_1, RogueClassCmd* _auto_1344_2 )
{
  THIS->value = _auto_1344_2;
  THIS->conditions = _auto_1343_1;
  THIS->t = _auto_1342_0;
  return (RogueClassCmdSelectCase*)(THIS);
}

void RogueCmdSelectCase__cast_conditions__Type_Scope( RogueClassCmdSelectCase* THIS, RogueClassType* to_type_0, RogueClassScope* scope_1 )
{
  if (!!(THIS->conditions))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueCmdList*,_auto_2418_2,(THIS->conditions));
      RogueInt32 i_3 = (0);
      for (;i_3 < _auto_2418_2->count;++i_3)
      {
        THIS->conditions->data->objects[i_3] = ((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG(((RogueClassCmd*)(THIS->conditions->data->objects[i_3]))), to_type_0, scope_1 ))), scope_1 ))) )));
      }
    }
  }
}

RogueString* RogueCmdTypedLiteralList__type_name( RogueClassCmdTypedLiteralList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[855]);
}

RogueClassCmdTypedLiteralList* RogueCmdTypedLiteralList__clone__CloneArgs( RogueClassCmdTypedLiteralList* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdTypedLiteralList*)(((RogueCmdTypedLiteralList__init__Token_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdTypedLiteralList*,ROGUE_CREATE_OBJECT(CmdTypedLiteralList))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->list_type_name), ROGUE_ARG(((RogueCmdArgs__clone__CloneArgs( ROGUE_ARG(THIS->elements), clone_args_0 )))) ))));
}

RogueClassType* RogueCmdTypedLiteralList__implicit_type__Scope( RogueClassCmdTypedLiteralList* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassType*)(((Rogue_CmdTypedLiteralList__type( ROGUE_ARG(THIS) ))));
}

RogueClassCmd* RogueCmdTypedLiteralList__resolve__Scope( RogueClassCmdTypedLiteralList* THIS, RogueClassScope* scope_0 )
{
  if (THIS->elements->count <= 32)
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,result_1,(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->list_type_name), ROGUE_ARG(((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )))) )))))));
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_2419_4,(THIS->elements));
      RogueInt32 _auto_2420_5 = (0);
      for (;_auto_2420_5 < _auto_2419_4->count;++_auto_2420_5)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,element_6,(((RogueClassCmd*)(_auto_2419_4->data->objects[_auto_2420_5]))));
        result_1 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), result_1, Rogue_literal_strings[952], element_6 ))))));
      }
    }
    return (RogueClassCmd*)((call_ROGUEM52( 25, result_1, scope_0 )));
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueString*,list_var_name_2,(((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )))));
    ROGUE_DEF_LOCAL_REF(RogueClassLocal*,list_var_3,(((RogueMethod__add_local__Token_String_Type_Cmd( ROGUE_ARG(scope_0->this_method), ROGUE_ARG(THIS->t), list_var_name_2, ROGUE_ARG(((RogueClassType*)(NULL))), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->list_type_name), ROGUE_ARG(((RogueCmdArgs__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdArgs*,ROGUE_CREATE_OBJECT(CmdArgs))) )))) )))))) )))));
    RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)scope_0->this_body)), ROGUE_ARG(((RogueCmdLocalDeclaration__resolve__Scope( ROGUE_ARG(((RogueCmdLocalDeclaration__init__Token_Local_Logical( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLocalDeclaration*,ROGUE_CREATE_OBJECT(CmdLocalDeclaration))), ROGUE_ARG(THIS->t), list_var_3, false )))), scope_0 )))) );
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_2421_7,(THIS->elements));
      RogueInt32 _auto_2422_8 = (0);
      for (;_auto_2422_8 < _auto_2421_7->count;++_auto_2422_8)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,element_9,(((RogueClassCmd*)(_auto_2421_7->data->objects[_auto_2422_8]))));
        RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)scope_0->this_body)), ROGUE_ARG(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), list_var_name_2 )))))), Rogue_literal_strings[952], element_9 )))), scope_0 )))) );
      }
    }
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), list_var_name_2 )))), scope_0 ))));
  }
}

RogueClassType* Rogue_CmdTypedLiteralList__type( RogueClassCmdTypedLiteralList* THIS )
{
  return (RogueClassType*)(((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->list_type_name) ))));
}

RogueClassCmdTypedLiteralList* RogueCmdTypedLiteralList__init_object( RogueClassCmdTypedLiteralList* THIS )
{
  return (RogueClassCmdTypedLiteralList*)(THIS);
}

RogueClassCmdTypedLiteralList* RogueCmdTypedLiteralList__init__Token_String_CmdArgs( RogueClassCmdTypedLiteralList* THIS, RogueClassToken* _auto_1350_0, RogueString* _auto_1351_1, RogueClassCmdArgs* _auto_1352_2 )
{
  THIS->elements = _auto_1352_2;
  THIS->list_type_name = _auto_1351_1;
  THIS->t = _auto_1350_0;
  return (RogueClassCmdTypedLiteralList*)(THIS);
}

RogueClassCmdTypedLiteralList* RogueCmdTypedLiteralList__add__Cmd( RogueClassCmdTypedLiteralList* THIS, RogueClassCmd* element_0 )
{
  RogueCmdList__add__Cmd( ROGUE_ARG(((RogueCmdList*)THIS->elements)), element_0 );
  return (RogueClassCmdTypedLiteralList*)(THIS);
}

RogueString* RogueString_ParseReaderTableEntryList__to_String( RogueTableEntry_of_String_ParseReaderList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_String_ParseReaderList*,_auto_2423_2,(THIS));
    RogueInt32 _auto_2424_3 = (0);
    for (;_auto_2424_3 < _auto_2423_2->count;++_auto_2424_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassString_ParseReaderTableEntry*,value_4,(((RogueClassString_ParseReaderTableEntry*)(_auto_2423_2->data->objects[_auto_2424_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_ParseReaderTableEntryList__type_name( RogueTableEntry_of_String_ParseReaderList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[741]);
}

RogueTableEntry_of_String_ParseReaderList* RogueString_ParseReaderTableEntryList__init_object( RogueTableEntry_of_String_ParseReaderList* THIS )
{
  return (RogueTableEntry_of_String_ParseReaderList*)(THIS);
}

RogueTableEntry_of_String_ParseReaderList* RogueString_ParseReaderTableEntryList__init__Int32_String_ParseReaderTableEntry( RogueTableEntry_of_String_ParseReaderList* THIS, RogueInt32 initial_capacity_0, RogueClassString_ParseReaderTableEntry* initial_value_1 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_ParseReaderTableEntry*), true );
    {
      RogueInt32 i_2 = (1);
      RogueInt32 _auto_1353_3 = (initial_capacity_0);
      for (;i_2 <= _auto_1353_3;++i_2)
      {
        RogueString_ParseReaderTableEntryList__add__String_ParseReaderTableEntry( ROGUE_ARG(THIS), initial_value_1 );
      }
    }
  }
  return (RogueTableEntry_of_String_ParseReaderList*)(THIS);
}

RogueTableEntry_of_String_ParseReaderList* RogueString_ParseReaderTableEntryList__add__String_ParseReaderTableEntry( RogueTableEntry_of_String_ParseReaderList* THIS, RogueClassString_ParseReaderTableEntry* value_0 )
{
  ((RogueString_ParseReaderTableEntryList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_ParseReaderList*)(THIS);
}

RogueInt32 RogueString_ParseReaderTableEntryList__capacity( RogueTableEntry_of_String_ParseReaderList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_ParseReaderList* RogueString_ParseReaderTableEntryList__reserve__Int32( RogueTableEntry_of_String_ParseReaderList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassString_ParseReaderTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueString_ParseReaderTableEntryList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassString_ParseReaderTableEntry*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_ParseReaderList*)(THIS);
}

RogueString* RogueString_ParseReaderTableEntry__type_name( RogueClassString_ParseReaderTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[694]);
}

RogueClassString_ParseReaderTableEntry* RogueString_ParseReaderTableEntry__init__String_ParseReader_Int32( RogueClassString_ParseReaderTableEntry* THIS, RogueString* _key_0, RogueClassParseReader* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_ParseReaderTableEntry*)(THIS);
}

RogueClassString_ParseReaderTableEntry* RogueString_ParseReaderTableEntry__init_object( RogueClassString_ParseReaderTableEntry* THIS )
{
  return (RogueClassString_ParseReaderTableEntry*)(THIS);
}

RogueString* RogueString_ParseReaderTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[779]);
}

RogueString* RogueIOError__type_name( RogueClassIOError* THIS )
{
  return (RogueString*)(Rogue_literal_strings[809]);
}

RogueClassIOError* RogueIOError__init_object( RogueClassIOError* THIS )
{
  THIS->stack_trace = ((RogueStackTrace__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassStackTrace*,ROGUE_CREATE_OBJECT(StackTrace))), 1 )));
  return (RogueClassIOError*)(THIS);
}

RogueString* RogueFileReader__type_name( RogueClassFileReader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[695]);
}

RogueLogical RogueFileReader__has_another( RogueClassFileReader* THIS )
{
  return (RogueLogical)(THIS->position < THIS->count);
}

RogueCharacter RogueFileReader__peek( RogueClassFileReader* THIS )
{
  if (THIS->position == THIS->count)
  {
    return (RogueCharacter)(((RogueCharacter)(0)));
  }
  if (THIS->buffer_position == THIS->buffer->count)
  {
    THIS->buffer->count = (RogueInt32) fread( THIS->buffer->data->bytes, 1, 1024, THIS->fp );

    THIS->buffer_position = 0;
  }
  return (RogueCharacter)(((RogueCharacter)(THIS->buffer->data->bytes[THIS->buffer_position])));
}

RogueCharacter RogueFileReader__read( RogueClassFileReader* THIS )
{
  if (THIS->position == THIS->count)
  {
    return (RogueCharacter)(((RogueCharacter)(0)));
  }
  RogueCharacter result_0 = (((RogueFileReader__peek( ROGUE_ARG(THIS) ))));
  ++THIS->position;
  ++THIS->buffer_position;
  if (THIS->position == THIS->count)
  {
    RogueFileReader__close( ROGUE_ARG(THIS) );
  }
  return (RogueCharacter)(result_0);
}

RogueClassFileReader* RogueFileReader__init__String( RogueClassFileReader* THIS, RogueString* _filepath_0 )
{
  RogueFileReader__open__String( ROGUE_ARG(THIS), _filepath_0 );
  return (RogueClassFileReader*)(THIS);
}

RogueClassFileReader* RogueFileReader__close( RogueClassFileReader* THIS )
{
  if (!!(THIS->fp))
  {
    fclose( THIS->fp );
    THIS->fp = 0;

  }
  THIS->position = 0;
  THIS->count = 0;
  return (RogueClassFileReader*)(THIS);
}

RogueLogical RogueFileReader__open__String( RogueClassFileReader* THIS, RogueString* _auto_1360_0 )
{
  THIS->filepath = _auto_1360_0;
  RogueFileReader__close( ROGUE_ARG(THIS) );
  char path[ PATH_MAX ];
  RogueString_to_c_string( THIS->filepath, path, PATH_MAX );
  THIS->fp = fopen( path, "rb" );
  if (THIS->fp)
  {
    fseek( THIS->fp, 0, SEEK_END );
    THIS->count = (RogueInt32) ftell( THIS->fp );
    fseek( THIS->fp, 0, SEEK_SET );
  }

  if (THIS->count == 0)
  {
    RogueFileReader__close( ROGUE_ARG(THIS) );
  }
  return (RogueLogical)(THIS->position < THIS->count);
}

RogueClassFileReader* RogueFileReader__init_object( RogueClassFileReader* THIS )
{
  THIS->buffer = ((RogueByteList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueByteList*,ROGUE_CREATE_OBJECT(ByteList))), 1024 )));
  return (RogueClassFileReader*)(THIS);
}

RogueString* RogueFileWriter__type_name( RogueClassFileWriter* THIS )
{
  return (RogueString*)(Rogue_literal_strings[696]);
}

RogueClassFileWriter* RogueFileWriter__close( RogueClassFileWriter* THIS )
{
  RogueFileWriter__flush( ROGUE_ARG(THIS) );
  if (!!(THIS->fp))
  {
    fclose( THIS->fp ); THIS->fp = 0;

  }
  return (RogueClassFileWriter*)(THIS);
}

RogueClassFileWriter* RogueFileWriter__flush( RogueClassFileWriter* THIS )
{
  if ((THIS->buffer->count == 0 || !(!!(THIS->fp))))
  {
    return (RogueClassFileWriter*)(THIS);
  }
  fwrite( THIS->buffer->data->bytes, 1, THIS->buffer->count, THIS->fp );

  fflush( THIS->fp );

  RogueByteList__clear( ROGUE_ARG(THIS->buffer) );
  return (RogueClassFileWriter*)(THIS);
}

RogueClassFileWriter* RogueFileWriter__write__Character( RogueClassFileWriter* THIS, RogueCharacter ch_0 )
{
  if (!(!!(THIS->fp)))
  {
    return (RogueClassFileWriter*)(THIS);
  }
  ++THIS->position;
  RogueByteList__add__Byte( ROGUE_ARG(THIS->buffer), ROGUE_ARG(((RogueByte)(ch_0))) );
  if (THIS->buffer->count == 1024)
  {
    return (RogueClassFileWriter*)(((RogueFileWriter__flush( ROGUE_ARG(THIS) ))));
  }
  return (RogueClassFileWriter*)(THIS);
}

RogueClassFileWriter* RogueFileWriter__init__String( RogueClassFileWriter* THIS, RogueString* _filepath_0 )
{
  RogueFileWriter__open__String( ROGUE_ARG(THIS), _filepath_0 );
  return (RogueClassFileWriter*)(THIS);
}

RogueLogical RogueFileWriter__open__String( RogueClassFileWriter* THIS, RogueString* _auto_1361_0 )
{
  THIS->filepath = _auto_1361_0;
  RogueFileWriter__close( ROGUE_ARG(THIS) );
  THIS->error = false;
  char path[ PATH_MAX ];
  RogueString_to_c_string( THIS->filepath, path, PATH_MAX );
  THIS->fp = fopen( path, "wb" );
  THIS->error = !(THIS->fp);
  return !THIS->error;

}

RogueClassFileWriter* RogueFileWriter__init_object( RogueClassFileWriter* THIS )
{
  THIS->buffer = ((RogueByteList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueByteList*,ROGUE_CREATE_OBJECT(ByteList))), 1024 )));
  return (RogueClassFileWriter*)(THIS);
}

RogueString* RogueCmdNoAction__type_name( RogueClassCmdNoAction* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1149]);
}

void RogueCmdNoAction__add_to__CmdStatementList( RogueClassCmdNoAction* THIS, RogueClassCmdStatementList* statements_0 )
{
}

RogueClassCmdNoAction* RogueCmdNoAction__clone__CloneArgs( RogueClassCmdNoAction* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdNoAction*)(((RogueCmdNoAction__init__Token( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdNoAction*,ROGUE_CREATE_OBJECT(CmdNoAction))), ROGUE_ARG(THIS->t) ))));
}

RogueLogical RogueCmdNoAction__requires_semicolon( RogueClassCmdNoAction* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdNoAction__resolve__Scope( RogueClassCmdNoAction* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdNoAction__type( RogueClassCmdNoAction* THIS )
{
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

void RogueCmdNoAction__write_cpp__CPPWriter_Logical( RogueClassCmdNoAction* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
}

void RogueCmdNoAction__trace_used_code( RogueClassCmdNoAction* THIS )
{
}

RogueClassCmdNoAction* RogueCmdNoAction__init_object( RogueClassCmdNoAction* THIS )
{
  return (RogueClassCmdNoAction*)(THIS);
}

RogueClassCmdNoAction* RogueCmdNoAction__init__Token( RogueClassCmdNoAction* THIS, RogueClassToken* _auto_1374_0 )
{
  THIS->t = _auto_1374_0;
  return (RogueClassCmdNoAction*)(THIS);
}

RogueString* RogueTokenListRebuilder__type_name( RogueClassTokenListRebuilder* THIS )
{
  return (RogueString*)(Rogue_literal_strings[697]);
}

RogueClassTokenListRebuilder* RogueTokenListRebuilder__init__TokenList( RogueClassTokenListRebuilder* THIS, RogueTokenList* _auto_1402_0 )
{
  THIS->list = _auto_1402_0;
  return (RogueClassTokenListRebuilder*)(THIS);
}

RogueLogical RogueTokenListRebuilder__has_another( RogueClassTokenListRebuilder* THIS )
{
  if (THIS->read_index < THIS->list->count)
  {
    return (RogueLogical)(true);
  }
  else
  {
    RogueTokenList__discard_from__Int32( ROGUE_ARG(THIS->list), ROGUE_ARG(THIS->write_index) );
    return (RogueLogical)(false);
  }
  return (RogueLogical)(THIS->read_index < THIS->list->count);
}

RogueClassToken* RogueTokenListRebuilder__peek__Int32( RogueClassTokenListRebuilder* THIS, RogueInt32 lookahead_0 )
{
  return (RogueClassToken*)(((RogueClassToken*)(THIS->list->data->objects[(THIS->read_index + lookahead_0)])));
}

RogueClassToken* RogueTokenListRebuilder__read( RogueClassTokenListRebuilder* THIS )
{
  ++THIS->read_index;
  return (RogueClassToken*)(((RogueClassToken*)(THIS->list->data->objects[(THIS->read_index - 1)])));
}

RogueClassTokenListRebuilder* RogueTokenListRebuilder__write__Token( RogueClassTokenListRebuilder* THIS, RogueClassToken* value_0 )
{
  if (THIS->write_index == THIS->read_index)
  {
    RogueTokenList__reserve__Int32( ROGUE_ARG(THIS->list), 1 );
    RogueInt32 unread_count_1 = ((THIS->list->count - THIS->read_index));
    RogueArray_set(THIS->list->data,(((RogueTokenList__capacity( ROGUE_ARG(THIS->list) ))) - unread_count_1),((RogueArray*)(THIS->list->data)),THIS->read_index,unread_count_1);
    THIS->read_index += (((RogueTokenList__capacity( ROGUE_ARG(THIS->list) ))) - THIS->list->count);
    THIS->list->count = ((RogueTokenList__capacity( ROGUE_ARG(THIS->list) )));
  }
  THIS->list->data->objects[THIS->write_index] = value_0;
  ++THIS->write_index;
  return (RogueClassTokenListRebuilder*)(THIS);
}

RogueClassTokenListRebuilder* RogueTokenListRebuilder__init_object( RogueClassTokenListRebuilder* THIS )
{
  return (RogueClassTokenListRebuilder*)(THIS);
}

RogueString* RogueString_TokenTypeTableEntryList__to_String( RogueTableEntry_of_String_TokenTypeList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_String_TokenTypeList*,_auto_2476_2,(THIS));
    RogueInt32 _auto_2477_3 = (0);
    for (;_auto_2477_3 < _auto_2476_2->count;++_auto_2477_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassString_TokenTypeTableEntry*,value_4,(((RogueClassString_TokenTypeTableEntry*)(_auto_2476_2->data->objects[_auto_2477_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_TokenTypeTableEntryList__type_name( RogueTableEntry_of_String_TokenTypeList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[742]);
}

RogueTableEntry_of_String_TokenTypeList* RogueString_TokenTypeTableEntryList__init_object( RogueTableEntry_of_String_TokenTypeList* THIS )
{
  return (RogueTableEntry_of_String_TokenTypeList*)(THIS);
}

RogueTableEntry_of_String_TokenTypeList* RogueString_TokenTypeTableEntryList__init__Int32_String_TokenTypeTableEntry( RogueTableEntry_of_String_TokenTypeList* THIS, RogueInt32 initial_capacity_0, RogueClassString_TokenTypeTableEntry* initial_value_1 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_TokenTypeTableEntry*), true );
    {
      RogueInt32 i_2 = (1);
      RogueInt32 _auto_1477_3 = (initial_capacity_0);
      for (;i_2 <= _auto_1477_3;++i_2)
      {
        RogueString_TokenTypeTableEntryList__add__String_TokenTypeTableEntry( ROGUE_ARG(THIS), initial_value_1 );
      }
    }
  }
  return (RogueTableEntry_of_String_TokenTypeList*)(THIS);
}

RogueTableEntry_of_String_TokenTypeList* RogueString_TokenTypeTableEntryList__add__String_TokenTypeTableEntry( RogueTableEntry_of_String_TokenTypeList* THIS, RogueClassString_TokenTypeTableEntry* value_0 )
{
  ((RogueString_TokenTypeTableEntryList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_TokenTypeList*)(THIS);
}

RogueInt32 RogueString_TokenTypeTableEntryList__capacity( RogueTableEntry_of_String_TokenTypeList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_TokenTypeList* RogueString_TokenTypeTableEntryList__reserve__Int32( RogueTableEntry_of_String_TokenTypeList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassString_TokenTypeTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueString_TokenTypeTableEntryList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassString_TokenTypeTableEntry*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_TokenTypeList*)(THIS);
}

RogueString* RogueString_TokenTypeTableEntry__type_name( RogueClassString_TokenTypeTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[698]);
}

RogueClassString_TokenTypeTableEntry* RogueString_TokenTypeTableEntry__init__String_TokenType_Int32( RogueClassString_TokenTypeTableEntry* THIS, RogueString* _key_0, RogueClassTokenType* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_TokenTypeTableEntry*)(THIS);
}

RogueClassString_TokenTypeTableEntry* RogueString_TokenTypeTableEntry__init_object( RogueClassString_TokenTypeTableEntry* THIS )
{
  return (RogueClassString_TokenTypeTableEntry*)(THIS);
}

RogueString* RogueString_TokenTypeTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[780]);
}

RogueString* RogueString_TypeSpecializerTableEntryList__to_String( RogueTableEntry_of_String_TypeSpecializerList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_String_TypeSpecializerList*,_auto_2508_2,(THIS));
    RogueInt32 _auto_2509_3 = (0);
    for (;_auto_2509_3 < _auto_2508_2->count;++_auto_2509_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassString_TypeSpecializerTableEntry*,value_4,(((RogueClassString_TypeSpecializerTableEntry*)(_auto_2508_2->data->objects[_auto_2509_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_TypeSpecializerTableEntryList__type_name( RogueTableEntry_of_String_TypeSpecializerList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[743]);
}

RogueTableEntry_of_String_TypeSpecializerList* RogueString_TypeSpecializerTableEntryList__init_object( RogueTableEntry_of_String_TypeSpecializerList* THIS )
{
  return (RogueTableEntry_of_String_TypeSpecializerList*)(THIS);
}

RogueTableEntry_of_String_TypeSpecializerList* RogueString_TypeSpecializerTableEntryList__init__Int32_String_TypeSpecializerTableEntry( RogueTableEntry_of_String_TypeSpecializerList* THIS, RogueInt32 initial_capacity_0, RogueClassString_TypeSpecializerTableEntry* initial_value_1 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_TypeSpecializerTableEntry*), true );
    {
      RogueInt32 i_2 = (1);
      RogueInt32 _auto_1484_3 = (initial_capacity_0);
      for (;i_2 <= _auto_1484_3;++i_2)
      {
        RogueString_TypeSpecializerTableEntryList__add__String_TypeSpecializerTableEntry( ROGUE_ARG(THIS), initial_value_1 );
      }
    }
  }
  return (RogueTableEntry_of_String_TypeSpecializerList*)(THIS);
}

RogueTableEntry_of_String_TypeSpecializerList* RogueString_TypeSpecializerTableEntryList__add__String_TypeSpecializerTableEntry( RogueTableEntry_of_String_TypeSpecializerList* THIS, RogueClassString_TypeSpecializerTableEntry* value_0 )
{
  ((RogueString_TypeSpecializerTableEntryList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_TypeSpecializerList*)(THIS);
}

RogueInt32 RogueString_TypeSpecializerTableEntryList__capacity( RogueTableEntry_of_String_TypeSpecializerList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_TypeSpecializerList* RogueString_TypeSpecializerTableEntryList__reserve__Int32( RogueTableEntry_of_String_TypeSpecializerList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassString_TypeSpecializerTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueString_TypeSpecializerTableEntryList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassString_TypeSpecializerTableEntry*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_TypeSpecializerList*)(THIS);
}

RogueString* RogueString_TypeSpecializerTableEntry__type_name( RogueClassString_TypeSpecializerTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[699]);
}

RogueClassString_TypeSpecializerTableEntry* RogueString_TypeSpecializerTableEntry__init__String_TypeSpecializer_Int32( RogueClassString_TypeSpecializerTableEntry* THIS, RogueString* _key_0, RogueClassTypeSpecializer* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_TypeSpecializerTableEntry*)(THIS);
}

RogueClassString_TypeSpecializerTableEntry* RogueString_TypeSpecializerTableEntry__init_object( RogueClassString_TypeSpecializerTableEntry* THIS )
{
  return (RogueClassString_TypeSpecializerTableEntry*)(THIS);
}

RogueString* RogueString_TypeSpecializerTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[781]);
}

RogueString* RogueString_CmdLabelTableEntryList__to_String( RogueTableEntry_of_String_CmdLabelList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_String_CmdLabelList*,_auto_2564_2,(THIS));
    RogueInt32 _auto_2565_3 = (0);
    for (;_auto_2565_3 < _auto_2564_2->count;++_auto_2565_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassString_CmdLabelTableEntry*,value_4,(((RogueClassString_CmdLabelTableEntry*)(_auto_2564_2->data->objects[_auto_2565_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_CmdLabelTableEntryList__type_name( RogueTableEntry_of_String_CmdLabelList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[744]);
}

RogueTableEntry_of_String_CmdLabelList* RogueString_CmdLabelTableEntryList__init_object( RogueTableEntry_of_String_CmdLabelList* THIS )
{
  return (RogueTableEntry_of_String_CmdLabelList*)(THIS);
}

RogueTableEntry_of_String_CmdLabelList* RogueString_CmdLabelTableEntryList__init__Int32_String_CmdLabelTableEntry( RogueTableEntry_of_String_CmdLabelList* THIS, RogueInt32 initial_capacity_0, RogueClassString_CmdLabelTableEntry* initial_value_1 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_CmdLabelTableEntry*), true );
    {
      RogueInt32 i_2 = (1);
      RogueInt32 _auto_1619_3 = (initial_capacity_0);
      for (;i_2 <= _auto_1619_3;++i_2)
      {
        RogueString_CmdLabelTableEntryList__add__String_CmdLabelTableEntry( ROGUE_ARG(THIS), initial_value_1 );
      }
    }
  }
  return (RogueTableEntry_of_String_CmdLabelList*)(THIS);
}

RogueTableEntry_of_String_CmdLabelList* RogueString_CmdLabelTableEntryList__add__String_CmdLabelTableEntry( RogueTableEntry_of_String_CmdLabelList* THIS, RogueClassString_CmdLabelTableEntry* value_0 )
{
  ((RogueString_CmdLabelTableEntryList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_CmdLabelList*)(THIS);
}

RogueInt32 RogueString_CmdLabelTableEntryList__capacity( RogueTableEntry_of_String_CmdLabelList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_CmdLabelList* RogueString_CmdLabelTableEntryList__reserve__Int32( RogueTableEntry_of_String_CmdLabelList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassString_CmdLabelTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueString_CmdLabelTableEntryList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassString_CmdLabelTableEntry*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_CmdLabelList*)(THIS);
}

RogueString* RogueString_CmdLabelTableEntry__type_name( RogueClassString_CmdLabelTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[700]);
}

RogueClassString_CmdLabelTableEntry* RogueString_CmdLabelTableEntry__init__String_CmdLabel_Int32( RogueClassString_CmdLabelTableEntry* THIS, RogueString* _key_0, RogueClassCmdLabel* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_CmdLabelTableEntry*)(THIS);
}

RogueClassString_CmdLabelTableEntry* RogueString_CmdLabelTableEntry__init_object( RogueClassString_CmdLabelTableEntry* THIS )
{
  return (RogueClassString_CmdLabelTableEntry*)(THIS);
}

RogueString* RogueString_CmdLabelTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[782]);
}

RogueString* RogueCmdCreateArray__type_name( RogueClassCmdCreateArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1150]);
}

RogueClassCmd* RogueCmdCreateArray__clone__CloneArgs( RogueClassCmdCreateArray* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateArray__init__Token_Type_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCreateArray*,ROGUE_CREATE_OBJECT(CmdCreateArray))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->_array_type), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->count_cmd), clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdCreateArray__resolve__Scope( RogueClassCmdCreateArray* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( ROGUE_ARG(THIS->_array_type), scope_0 );
  THIS->count_cmd = ((RogueCmd__require_integer( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->count_cmd), scope_0 ))) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdCreateArray__type( RogueClassCmdCreateArray* THIS )
{
  return (RogueClassType*)(THIS->_array_type);
}

void RogueCmdCreateArray__write_cpp__CPPWriter_Logical( RogueClassCmdCreateArray* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1014] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->count_cmd), writer_0, false );
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1015] )))), ROGUE_ARG(THIS->_array_type->_element_type) )))), Rogue_literal_strings[28] );
  if (((RogueType__is_reference( ROGUE_ARG(THIS->_array_type->_element_type) ))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1016] );
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[531] );
}

void RogueCmdCreateArray__trace_used_code( RogueClassCmdCreateArray* THIS )
{
  RogueType__trace_used_code( ROGUE_ARG(THIS->_array_type) );
  call_ROGUEM59( 31, ROGUE_ARG(THIS->count_cmd) );
}

void RogueCmdCreateArray__update_this_type__Scope( RogueClassCmdCreateArray* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->count_cmd), scope_0 );
}

RogueClassCmdCreateArray* RogueCmdCreateArray__init_object( RogueClassCmdCreateArray* THIS )
{
  return (RogueClassCmdCreateArray*)(THIS);
}

RogueClassCmdCreateArray* RogueCmdCreateArray__init__Token_Type_CmdArgs( RogueClassCmdCreateArray* THIS, RogueClassToken* _auto_1630_0, RogueClassType* _auto_1631_1, RogueClassCmdArgs* args_2 )
{
  THIS->_array_type = _auto_1631_1;
  THIS->t = _auto_1630_0;
  if ((((void*)args_2) == ((void*)NULL) || args_2->count != 1))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[864] ))));
  }
  THIS->count_cmd = ((RogueClassCmd*)(args_2->data->objects[0]));
  return (RogueClassCmdCreateArray*)(THIS);
}

RogueClassCmdCreateArray* RogueCmdCreateArray__init__Token_Type_Cmd( RogueClassCmdCreateArray* THIS, RogueClassToken* _auto_1632_0, RogueClassType* _auto_1633_1, RogueClassCmd* _auto_1634_2 )
{
  THIS->count_cmd = _auto_1634_2;
  THIS->_array_type = _auto_1633_1;
  THIS->t = _auto_1632_0;
  return (RogueClassCmdCreateArray*)(THIS);
}

RogueString* RogueCmdCreateObject__type_name( RogueClassCmdCreateObject* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1151]);
}

RogueClassCmd* RogueCmdCreateObject__clone__CloneArgs( RogueClassCmdCreateObject* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateObject__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdCreateObject*,ROGUE_CREATE_OBJECT(CmdCreateObject))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->_of_type) ))))));
}

RogueClassCmd* RogueCmdCreateObject__resolve__Scope( RogueClassCmdCreateObject* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( ROGUE_ARG(THIS->_of_type), scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdCreateObject__type( RogueClassCmdCreateObject* THIS )
{
  return (RogueClassType*)(THIS->_of_type);
}

void RogueCmdCreateObject__write_cpp__CPPWriter_Logical( RogueClassCmdCreateObject* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1017] )))), ROGUE_ARG(THIS->_of_type) )))), Rogue_literal_strings[193] );
  }
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1018] )))), ROGUE_ARG(((Rogue_CmdCreateObject__type( ROGUE_ARG(THIS) )))->cpp_name) )))), Rogue_literal_strings[28] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
  }
}

void RogueCmdCreateObject__trace_used_code( RogueClassCmdCreateObject* THIS )
{
  RogueType__trace_used_code( ROGUE_ARG(THIS->_of_type) );
}

void RogueCmdCreateObject__update_this_type__Scope( RogueClassCmdCreateObject* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdCreateObject* RogueCmdCreateObject__init_object( RogueClassCmdCreateObject* THIS )
{
  return (RogueClassCmdCreateObject*)(THIS);
}

RogueClassCmdCreateObject* RogueCmdCreateObject__init__Token_Type( RogueClassCmdCreateObject* THIS, RogueClassToken* _auto_1635_0, RogueClassType* _auto_1636_1 )
{
  THIS->_of_type = _auto_1636_1;
  THIS->t = _auto_1635_0;
  return (RogueClassCmdCreateObject*)(THIS);
}

RogueString* RogueCmdReadGlobal__type_name( RogueClassCmdReadGlobal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1152]);
}

RogueClassCmd* RogueCmdReadGlobal__clone__CloneArgs( RogueClassCmdReadGlobal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadGlobal*,ROGUE_CREATE_OBJECT(CmdReadGlobal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->global_info) ))))));
}

RogueClassCmd* RogueCmdReadGlobal__resolve__Scope( RogueClassCmdReadGlobal* THIS, RogueClassScope* scope_0 )
{
  RogueType__resolve( ROGUE_ARG(THIS->global_info->type_context) );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdReadGlobal__resolve_adjust__Scope_Int32( RogueClassCmdReadGlobal* THIS, RogueClassScope* scope_0, RogueInt32 delta_1 )
{
  return (RogueClassCmd*)(((RogueCmdAdjustGlobal__resolve__Scope( ROGUE_ARG(((RogueCmdAdjustGlobal__init__Token_Property_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAdjustGlobal*,ROGUE_CREATE_OBJECT(CmdAdjustGlobal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->global_info), delta_1 )))), scope_0 ))));
}

RogueClassType* Rogue_CmdReadGlobal__type( RogueClassCmdReadGlobal* THIS )
{
  return (RogueClassType*)(THIS->global_info->_type);
}

void RogueCmdReadGlobal__write_cpp__CPPWriter_Logical( RogueClassCmdReadGlobal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_open_cast__Type_Type( writer_0, ROGUE_ARG(THIS->global_info->_type), ROGUE_ARG(THIS->global_info->_type) );
  }
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[41] )))), ROGUE_ARG(THIS->global_info->type_context->cpp_name) )))), Rogue_literal_strings[425] );
  RogueCPPWriter__print__String( writer_0, ROGUE_ARG(THIS->global_info->cpp_name) );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_close_cast__Type_Type( writer_0, ROGUE_ARG(THIS->global_info->_type), ROGUE_ARG(THIS->global_info->_type) );
  }
}

void RogueCmdReadGlobal__trace_used_code( RogueClassCmdReadGlobal* THIS )
{
  RogueType__trace_used_code( ROGUE_ARG(THIS->global_info->type_context) );
  RogueType__trace_used_code( ROGUE_ARG(THIS->global_info->_type) );
}

void RogueCmdReadGlobal__update_this_type__Scope( RogueClassCmdReadGlobal* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdReadGlobal* RogueCmdReadGlobal__init_object( RogueClassCmdReadGlobal* THIS )
{
  return (RogueClassCmdReadGlobal*)(THIS);
}

RogueClassCmdReadGlobal* RogueCmdReadGlobal__init__Token_Property( RogueClassCmdReadGlobal* THIS, RogueClassToken* _auto_1637_0, RogueClassProperty* _auto_1638_1 )
{
  THIS->global_info = _auto_1638_1;
  THIS->t = _auto_1637_0;
  return (RogueClassCmdReadGlobal*)(THIS);
}

RogueString* RogueCmdReadProperty__type_name( RogueClassCmdReadProperty* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1153]);
}

RogueClassCmd* RogueCmdReadProperty__clone__CloneArgs( RogueClassCmdReadProperty* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadProperty*,ROGUE_CREATE_OBJECT(CmdReadProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->context), clone_args_0 ))), ROGUE_ARG(THIS->property_info) ))))));
}

RogueClassCmd* RogueCmdReadProperty__resolve__Scope( RogueClassCmdReadProperty* THIS, RogueClassScope* scope_0 )
{
  THIS->context = ((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->context), scope_0 ))) )));
  if (((RogueType__is_aspect( ROGUE_ARG((call_ROGUEM60( 29, ROGUE_ARG(THIS->context) ))) ))))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[888], ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[889] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->property_info->name) )))) )))), Rogue_literal_strings[187] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->property_info->_type->name) )))) )))), Rogue_literal_strings[890] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->property_info->name) )))) )))), Rogue_literal_strings[34] )))) )))) )))) ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdReadProperty__resolve_adjust__Scope_Int32( RogueClassCmdReadProperty* THIS, RogueClassScope* scope_0, RogueInt32 delta_1 )
{
  return (RogueClassCmd*)(((RogueCmdAdjustProperty__resolve__Scope( ROGUE_ARG(((RogueCmdAdjustProperty__init__Token_Cmd_Property_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAdjustProperty*,ROGUE_CREATE_OBJECT(CmdAdjustProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), ROGUE_ARG(THIS->property_info), delta_1 )))), scope_0 ))));
}

RogueClassType* Rogue_CmdReadProperty__type( RogueClassCmdReadProperty* THIS )
{
  return (RogueClassType*)(THIS->property_info->_type);
}

void RogueCmdReadProperty__write_cpp__CPPWriter_Logical( RogueClassCmdReadProperty* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_open_cast__Type_Type( writer_0, ROGUE_ARG(THIS->property_info->_type), ROGUE_ARG(THIS->property_info->_type) );
  }
  call_ROGUEM72( 30, ROGUE_ARG(THIS->context), writer_0, false );
  RogueCPPWriter__print_access_operator__Type( writer_0, ROGUE_ARG((call_ROGUEM60( 29, ROGUE_ARG(THIS->context) ))) );
  RogueCPPWriter__print__String( writer_0, ROGUE_ARG(THIS->property_info->cpp_name) );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_close_cast__Type_Type( writer_0, ROGUE_ARG(THIS->property_info->_type), ROGUE_ARG(THIS->property_info->_type) );
  }
}

void RogueCmdReadProperty__trace_used_code( RogueClassCmdReadProperty* THIS )
{
  call_ROGUEM59( 31, ROGUE_ARG(THIS->context) );
  RogueType__trace_used_code( ROGUE_ARG(THIS->property_info->type_context) );
  RogueType__trace_used_code( ROGUE_ARG(THIS->property_info->_type) );
}

void RogueCmdReadProperty__update_this_type__Scope( RogueClassCmdReadProperty* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->context), scope_0 );
}

RogueClassCmdReadProperty* RogueCmdReadProperty__init_object( RogueClassCmdReadProperty* THIS )
{
  return (RogueClassCmdReadProperty*)(THIS);
}

RogueClassCmdReadProperty* RogueCmdReadProperty__init__Token_Cmd_Property( RogueClassCmdReadProperty* THIS, RogueClassToken* _auto_1639_0, RogueClassCmd* _auto_1640_1, RogueClassProperty* _auto_1641_2 )
{
  THIS->property_info = _auto_1641_2;
  THIS->context = _auto_1640_1;
  THIS->t = _auto_1639_0;
  return (RogueClassCmdReadProperty*)(THIS);
}

RogueString* RogueCmdWriteSingleton__type_name( RogueClassCmdWriteSingleton* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1154]);
}

RogueClassCmd* RogueCmdWriteSingleton__clone__CloneArgs( RogueClassCmdWriteSingleton* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdWriteSingleton__init__Token_Type_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteSingleton*,ROGUE_CREATE_OBJECT(CmdWriteSingleton))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->_of_type), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->new_value), clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdWriteSingleton__resolve__Scope( RogueClassCmdWriteSingleton* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( ROGUE_ARG(THIS->_of_type), scope_0 );
  THIS->new_value = ((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->new_value), scope_0 ))) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdWriteSingleton__write_cpp__CPPWriter_Logical( RogueClassCmdWriteSingleton* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(((RogueType__is_singleton( ROGUE_ARG(THIS->_of_type) )))))
  {
    ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG(THIS->_of_type->name) )))) )))), Rogue_literal_strings[981] )))) )))) ))));
  }
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[464] )))), ROGUE_ARG(THIS->_of_type->cpp_name) )))), Rogue_literal_strings[1019] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->new_value), writer_0, false );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[219] );
}

void RogueCmdWriteSingleton__trace_used_code( RogueClassCmdWriteSingleton* THIS )
{
  RogueType__trace_used_code( ROGUE_ARG(THIS->_of_type) );
  call_ROGUEM59( 31, ROGUE_ARG(THIS->new_value) );
}

void RogueCmdWriteSingleton__update_this_type__Scope( RogueClassCmdWriteSingleton* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->new_value), scope_0 );
}

RogueClassCmdWriteSingleton* RogueCmdWriteSingleton__init_object( RogueClassCmdWriteSingleton* THIS )
{
  return (RogueClassCmdWriteSingleton*)(THIS);
}

RogueClassCmdWriteSingleton* RogueCmdWriteSingleton__init__Token_Type_Cmd( RogueClassCmdWriteSingleton* THIS, RogueClassToken* _auto_1642_0, RogueClassType* _auto_1643_1, RogueClassCmd* _auto_1644_2 )
{
  THIS->new_value = _auto_1644_2;
  THIS->_of_type = _auto_1643_1;
  THIS->t = _auto_1642_0;
  return (RogueClassCmdWriteSingleton*)(THIS);
}

RogueString* RogueCmdWriteLocal__type_name( RogueClassCmdWriteLocal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1155]);
}

RogueClassCmd* RogueCmdWriteLocal__clone__CloneArgs( RogueClassCmdWriteLocal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassMacroArgs*,macro_args_1,(((RogueClassMacroArgs*)(RogueObject_as(clone_args_0,RogueTypeMacroArgs)))));
  if (!!(macro_args_1))
  {
    return (RogueClassCmd*)(((RogueMacroArgs__inline_write_local__CmdWriteLocal( macro_args_1, ROGUE_ARG(THIS) ))));
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassTaskArgs*,task_args_2,(((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs)))));
    if (!!(task_args_2))
    {
      return (RogueClassCmd*)(((RogueTaskArgs__cmd_write__Token_Local_Cmd( task_args_2, ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->new_value), clone_args_0 ))) ))));
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdWriteLocal__init__Token_Local_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteLocal*,ROGUE_CREATE_OBJECT(CmdWriteLocal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->local_info), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->new_value), clone_args_0 )))) ))))));
}

RogueClassCmd* RogueCmdWriteLocal__resolve__Scope( RogueClassCmdWriteLocal* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize__Scope( ROGUE_ARG(THIS->local_info->_type), scope_0 );
  THIS->new_value = (call_ROGUEM52( 25, ROGUE_ARG(THIS->new_value), scope_0 ));
  THIS->new_value = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG(THIS->new_value), ROGUE_ARG(THIS->local_info->_type), scope_0 ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdWriteLocal__write_cpp__CPPWriter_Logical( RogueClassCmdWriteLocal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, ROGUE_ARG(((RogueLocal__cpp_name( ROGUE_ARG(THIS->local_info) )))) )))), Rogue_literal_strings[537] );
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[533] )))), ROGUE_ARG(THIS->local_info->_type) )))), Rogue_literal_strings[28] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->new_value), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
}

void RogueCmdWriteLocal__trace_used_code( RogueClassCmdWriteLocal* THIS )
{
  RogueType__trace_used_code( ROGUE_ARG(THIS->local_info->_type) );
  call_ROGUEM59( 31, ROGUE_ARG(THIS->new_value) );
}

void RogueCmdWriteLocal__update_this_type__Scope( RogueClassCmdWriteLocal* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->new_value), scope_0 );
}

RogueClassCmdWriteLocal* RogueCmdWriteLocal__init_object( RogueClassCmdWriteLocal* THIS )
{
  return (RogueClassCmdWriteLocal*)(THIS);
}

RogueClassCmdWriteLocal* RogueCmdWriteLocal__init__Token_Local_Cmd( RogueClassCmdWriteLocal* THIS, RogueClassToken* _auto_1645_0, RogueClassLocal* _auto_1646_1, RogueClassCmd* _auto_1647_2 )
{
  THIS->new_value = _auto_1647_2;
  THIS->local_info = _auto_1646_1;
  THIS->t = _auto_1645_0;
  return (RogueClassCmdWriteLocal*)(THIS);
}

RogueString* RogueCmdModifyAndAssignGlobal__type_name( RogueClassCmdModifyAndAssignGlobal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1120]);
}

RogueClassCmd* RogueCmdModifyAndAssignGlobal__clone__CloneArgs( RogueClassCmdModifyAndAssignGlobal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdModifyAndAssignGlobal__init__Token_Property_TokenType_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdModifyAndAssignGlobal*,ROGUE_CREATE_OBJECT(CmdModifyAndAssignGlobal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->global_info), ROGUE_ARG(THIS->op), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->new_value), clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdModifyAndAssignGlobal__resolve__Scope( RogueClassCmdModifyAndAssignGlobal* THIS, RogueClassScope* scope_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueString*,m_name_1,(((RogueString__operatorPLUS__String( Rogue_literal_strings[356], ROGUE_ARG(((RogueTokenType__to_String( ROGUE_ARG(THIS->op) )))) )))));
  if (((RogueType__is_reference( ROGUE_ARG(THIS->global_info->_type) ))))
  {
    if (!!(((RogueString_MethodListTable__get__String( ROGUE_ARG(THIS->global_info->_type->method_lookup_by_name), m_name_1 )))))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadGlobal*,ROGUE_CREATE_OBJECT(CmdReadGlobal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->global_info) )))))), m_name_1, ROGUE_ARG(THIS->new_value) )))), scope_0 ))));
    }
    else
    {
      m_name_1 = ((RogueString*)((RogueString__leftmost__Int32( m_name_1, -1 ))));
      if (!!(((RogueString_MethodListTable__get__String( ROGUE_ARG(THIS->global_info->_type->method_lookup_by_name), m_name_1 )))))
      {
        return (RogueClassCmd*)(((RogueCmdWriteGlobal__resolve__Scope( ROGUE_ARG(((RogueCmdWriteGlobal__init__Token_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteGlobal*,ROGUE_CREATE_OBJECT(CmdWriteGlobal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->global_info), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadGlobal*,ROGUE_CREATE_OBJECT(CmdReadGlobal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->global_info) )))))), m_name_1, ROGUE_ARG(THIS->new_value) )))))) )))), scope_0 ))));
      }
      else
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,arg_type_2,((call_ROGUEM60( 29, ROGUE_ARG(THIS->new_value) ))->name));
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[923] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(THIS->global_info->_type))) )))) )))), Rogue_literal_strings[924] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], m_name_1 )))) )))), Rogue_literal_strings[925] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], arg_type_2 )))) )))), Rogue_literal_strings[926] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], m_name_1 )))) )))), Rogue_literal_strings[927] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], arg_type_2 )))) )))), Rogue_literal_strings[405] )))) )))) ))));
      }
    }
  }
  else if (((RogueType__is_compound( ROGUE_ARG(THIS->global_info->_type) ))))
  {
    return (RogueClassCmd*)(((RogueCmdWriteGlobal__resolve__Scope( ROGUE_ARG(((RogueCmdWriteGlobal__init__Token_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteGlobal*,ROGUE_CREATE_OBJECT(CmdWriteGlobal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->global_info), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadGlobal*,ROGUE_CREATE_OBJECT(CmdReadGlobal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->global_info) )))))), ROGUE_ARG(((RogueString__leftmost__Int32( m_name_1, -1 )))), ROGUE_ARG(THIS->new_value) )))))) )))), scope_0 ))));
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueClassTokenType*,_auto_2603_4,(THIS->op));
    if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_2603_4), ROGUE_ARG(((RogueObject*)(RogueTokenType_symbol_caret_equals))) ))))
    {
      return (RogueClassCmd*)(((RogueCmdWriteGlobal__resolve__Scope( ROGUE_ARG(((RogueCmdWriteGlobal__init__Token_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteGlobal*,ROGUE_CREATE_OBJECT(CmdWriteGlobal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->global_info), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdPower*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdPower*,ROGUE_CREATE_OBJECT(CmdPower)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadGlobal*,ROGUE_CREATE_OBJECT(CmdReadGlobal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->global_info) )))))), ROGUE_ARG(THIS->new_value) )))))))) )))), scope_0 ))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_2603_4), ROGUE_ARG(((RogueObject*)(RogueTokenType_symbol_percent_equals))) ))))
    {
      return (RogueClassCmd*)(((RogueCmdWriteGlobal__resolve__Scope( ROGUE_ARG(((RogueCmdWriteGlobal__init__Token_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteGlobal*,ROGUE_CREATE_OBJECT(CmdWriteGlobal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->global_info), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdMod*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdMod*,ROGUE_CREATE_OBJECT(CmdMod)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadGlobal*,ROGUE_CREATE_OBJECT(CmdReadGlobal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->global_info) )))))), ROGUE_ARG(THIS->new_value) )))))))) )))), scope_0 ))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_2603_4), ROGUE_ARG(((RogueObject*)(RogueTokenType_symbol_dot_equals))) ))))
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdAccess*,access_3,(((RogueClassCmdAccess*)(RogueObject_as(THIS->new_value,RogueTypeCmdAccess)))));
      if (!(!!(access_3)))
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->new_value->t), Rogue_literal_strings[928] ))));
      }
      if (!!(access_3->context))
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(access_3->t), Rogue_literal_strings[929] ))));
      }
      access_3->context = ((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadGlobal*,ROGUE_CREATE_OBJECT(CmdReadGlobal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->global_info) )))));
      return (RogueClassCmd*)(((RogueCmdWriteGlobal__resolve__Scope( ROGUE_ARG(((RogueCmdWriteGlobal__init__Token_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteGlobal*,ROGUE_CREATE_OBJECT(CmdWriteGlobal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->global_info), ROGUE_ARG(((RogueClassCmd*)(access_3))) )))), scope_0 ))));
    }
  }
  THIS->new_value = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->new_value), scope_0 ))), ROGUE_ARG(THIS->global_info->_type), scope_0 ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdModifyAndAssignGlobal__type( RogueClassCmdModifyAndAssignGlobal* THIS )
{
  return (RogueClassType*)(THIS->global_info->_type);
}

void RogueCmdModifyAndAssignGlobal__write_cpp__CPPWriter_Logical( RogueClassCmdModifyAndAssignGlobal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[41] )))), ROGUE_ARG(THIS->global_info->type_context->cpp_name) )))), Rogue_literal_strings[425] );
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, ROGUE_ARG(THIS->global_info->cpp_name) )))), Rogue_literal_strings[489] )))), ROGUE_ARG(((RogueCmdResolvedModifyAndAssign__cpp_symbol( ROGUE_ARG(((RogueClassCmdResolvedModifyAndAssign*)THIS)) )))) )))), Rogue_literal_strings[489] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->new_value), writer_0, false );
}

void RogueCmdModifyAndAssignGlobal__trace_used_code( RogueClassCmdModifyAndAssignGlobal* THIS )
{
  RogueType__trace_used_code( ROGUE_ARG(THIS->global_info->type_context) );
  RogueType__trace_used_code( ROGUE_ARG(THIS->global_info->_type) );
  call_ROGUEM59( 31, ROGUE_ARG(THIS->new_value) );
}

void RogueCmdModifyAndAssignGlobal__update_this_type__Scope( RogueClassCmdModifyAndAssignGlobal* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->new_value), scope_0 );
}

RogueClassCmdModifyAndAssignGlobal* RogueCmdModifyAndAssignGlobal__init_object( RogueClassCmdModifyAndAssignGlobal* THIS )
{
  return (RogueClassCmdModifyAndAssignGlobal*)(THIS);
}

RogueClassCmdModifyAndAssignGlobal* RogueCmdModifyAndAssignGlobal__init__Token_Property_TokenType_Cmd( RogueClassCmdModifyAndAssignGlobal* THIS, RogueClassToken* _auto_1648_0, RogueClassProperty* _auto_1649_1, RogueClassTokenType* _auto_1650_2, RogueClassCmd* _auto_1651_3 )
{
  THIS->new_value = _auto_1651_3;
  THIS->op = _auto_1650_2;
  THIS->global_info = _auto_1649_1;
  THIS->t = _auto_1648_0;
  return (RogueClassCmdModifyAndAssignGlobal*)(THIS);
}

RogueString* RogueCmdModifyAndAssignProperty__type_name( RogueClassCmdModifyAndAssignProperty* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1121]);
}

RogueClassCmd* RogueCmdModifyAndAssignProperty__clone__CloneArgs( RogueClassCmdModifyAndAssignProperty* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdModifyAndAssignProperty__init__Token_Cmd_Property_TokenType_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdModifyAndAssignProperty*,ROGUE_CREATE_OBJECT(CmdModifyAndAssignProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->context), clone_args_0 ))), ROGUE_ARG(THIS->property_info), ROGUE_ARG(THIS->op), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->new_value), clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdModifyAndAssignProperty__resolve__Scope( RogueClassCmdModifyAndAssignProperty* THIS, RogueClassScope* scope_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueString*,m_name_1,(((RogueString__operatorPLUS__String( Rogue_literal_strings[356], ROGUE_ARG(((RogueTokenType__to_String( ROGUE_ARG(THIS->op) )))) )))));
  if (((RogueType__is_reference( ROGUE_ARG(THIS->property_info->_type) ))))
  {
    if (!!(((RogueString_MethodListTable__get__String( ROGUE_ARG(THIS->property_info->_type->method_lookup_by_name), m_name_1 )))))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ROGUE_ARG(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadProperty*,ROGUE_CREATE_OBJECT(CmdReadProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), ROGUE_ARG(THIS->property_info) )))))), m_name_1, ROGUE_ARG(THIS->new_value) )))), scope_0 ))));
    }
    else
    {
      m_name_1 = ((RogueString*)((RogueString__leftmost__Int32( m_name_1, -1 ))));
      if (!!(((RogueString_MethodListTable__get__String( ROGUE_ARG(THIS->property_info->_type->method_lookup_by_name), m_name_1 )))))
      {
        return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ROGUE_ARG(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteProperty*,ROGUE_CREATE_OBJECT(CmdWriteProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), ROGUE_ARG(THIS->property_info), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadProperty*,ROGUE_CREATE_OBJECT(CmdReadProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->context), ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) )))), ROGUE_ARG(THIS->property_info) )))))), m_name_1, ROGUE_ARG(THIS->new_value) )))))) )))), scope_0 ))));
      }
      else
      {
        ROGUE_DEF_LOCAL_REF(RogueString*,arg_type_2,((call_ROGUEM60( 29, ROGUE_ARG(THIS->new_value) ))->name));
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[923] )))), ROGUE_ARG(((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ROGUE_ARG(((RogueObject*)(THIS->property_info->_type))) )))) )))), Rogue_literal_strings[924] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], m_name_1 )))) )))), Rogue_literal_strings[925] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], arg_type_2 )))) )))), Rogue_literal_strings[926] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], m_name_1 )))) )))), Rogue_literal_strings[927] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], arg_type_2 )))) )))), Rogue_literal_strings[405] )))) )))) ))));
      }
    }
  }
  else if (((RogueType__is_compound( ROGUE_ARG(THIS->property_info->_type) ))))
  {
    return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ROGUE_ARG(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteProperty*,ROGUE_CREATE_OBJECT(CmdWriteProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->context), ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) )))), ROGUE_ARG(THIS->property_info), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadProperty*,ROGUE_CREATE_OBJECT(CmdReadProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), ROGUE_ARG(THIS->property_info) )))))), ROGUE_ARG(((RogueString__leftmost__Int32( m_name_1, -1 )))), ROGUE_ARG(THIS->new_value) )))))) )))), scope_0 ))));
  }
  {
    ROGUE_DEF_LOCAL_REF(RogueClassTokenType*,_auto_2604_4,(THIS->op));
    if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_2604_4), ROGUE_ARG(((RogueObject*)(RogueTokenType_symbol_caret_equals))) ))))
    {
      return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ROGUE_ARG(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteProperty*,ROGUE_CREATE_OBJECT(CmdWriteProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), ROGUE_ARG(THIS->property_info), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdPower*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdPower*,ROGUE_CREATE_OBJECT(CmdPower)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadProperty*,ROGUE_CREATE_OBJECT(CmdReadProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->context), ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) )))), ROGUE_ARG(THIS->property_info) )))))), ROGUE_ARG(THIS->new_value) )))))))) )))), scope_0 ))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_2604_4), ROGUE_ARG(((RogueObject*)(RogueTokenType_symbol_percent_equals))) ))))
    {
      return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ROGUE_ARG(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteProperty*,ROGUE_CREATE_OBJECT(CmdWriteProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), ROGUE_ARG(THIS->property_info), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdMod*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdMod*,ROGUE_CREATE_OBJECT(CmdMod)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadProperty*,ROGUE_CREATE_OBJECT(CmdReadProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->context), ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) )))), ROGUE_ARG(THIS->property_info) )))))), ROGUE_ARG(THIS->new_value) )))))))) )))), scope_0 ))));
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_2604_4), ROGUE_ARG(((RogueObject*)(RogueTokenType_symbol_dot_equals))) ))))
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdAccess*,access_3,(((RogueClassCmdAccess*)(RogueObject_as(THIS->new_value,RogueTypeCmdAccess)))));
      if (!(!!(access_3)))
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->new_value->t), Rogue_literal_strings[928] ))));
      }
      if (!!(access_3->context))
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(access_3->t), Rogue_literal_strings[929] ))));
      }
      access_3->context = ((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadProperty*,ROGUE_CREATE_OBJECT(CmdReadProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->context), ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) )))), ROGUE_ARG(THIS->property_info) )))));
      return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ROGUE_ARG(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteProperty*,ROGUE_CREATE_OBJECT(CmdWriteProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), ROGUE_ARG(THIS->property_info), ROGUE_ARG(((RogueClassCmd*)(access_3))) )))), scope_0 ))));
    }
  }
  THIS->context = ((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->context), scope_0 ))) )));
  THIS->new_value = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->new_value), scope_0 ))), ROGUE_ARG(THIS->property_info->_type), scope_0 ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdModifyAndAssignProperty__type( RogueClassCmdModifyAndAssignProperty* THIS )
{
  return (RogueClassType*)(THIS->property_info->_type);
}

void RogueCmdModifyAndAssignProperty__write_cpp__CPPWriter_Logical( RogueClassCmdModifyAndAssignProperty* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  call_ROGUEM72( 30, ROGUE_ARG(THIS->context), writer_0, false );
  RogueCPPWriter__print_access_operator__Type( writer_0, ROGUE_ARG((call_ROGUEM60( 29, ROGUE_ARG(THIS->context) ))) );
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, ROGUE_ARG(THIS->property_info->cpp_name) )))), Rogue_literal_strings[489] )))), ROGUE_ARG(((RogueCmdResolvedModifyAndAssign__cpp_symbol( ROGUE_ARG(((RogueClassCmdResolvedModifyAndAssign*)THIS)) )))) )))), Rogue_literal_strings[489] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->new_value), writer_0, false );
}

void RogueCmdModifyAndAssignProperty__trace_used_code( RogueClassCmdModifyAndAssignProperty* THIS )
{
  RogueType__trace_used_code( ROGUE_ARG(THIS->property_info->type_context) );
  RogueType__trace_used_code( ROGUE_ARG(THIS->property_info->_type) );
  call_ROGUEM59( 31, ROGUE_ARG(THIS->new_value) );
}

void RogueCmdModifyAndAssignProperty__update_this_type__Scope( RogueClassCmdModifyAndAssignProperty* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->new_value), scope_0 );
}

RogueClassCmdModifyAndAssignProperty* RogueCmdModifyAndAssignProperty__init_object( RogueClassCmdModifyAndAssignProperty* THIS )
{
  return (RogueClassCmdModifyAndAssignProperty*)(THIS);
}

RogueClassCmdModifyAndAssignProperty* RogueCmdModifyAndAssignProperty__init__Token_Cmd_Property_TokenType_Cmd( RogueClassCmdModifyAndAssignProperty* THIS, RogueClassToken* _auto_1652_0, RogueClassCmd* _auto_1653_1, RogueClassProperty* _auto_1654_2, RogueClassTokenType* _auto_1655_3, RogueClassCmd* _auto_1656_4 )
{
  THIS->new_value = _auto_1656_4;
  THIS->op = _auto_1655_3;
  THIS->property_info = _auto_1654_2;
  THIS->context = _auto_1653_1;
  THIS->t = _auto_1652_0;
  return (RogueClassCmdModifyAndAssignProperty*)(THIS);
}

RogueString* RogueCmdControlStructureArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[783]);
}

RogueString* RogueCmdTaskControlSectionList__to_String( RogueCmdTaskControlSectionList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdTaskControlSectionList*,_auto_2617_2,(THIS));
    RogueInt32 _auto_2618_3 = (0);
    for (;_auto_2618_3 < _auto_2617_2->count;++_auto_2618_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdTaskControlSection*,value_4,(((RogueClassCmdTaskControlSection*)(_auto_2617_2->data->objects[_auto_2618_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdTaskControlSectionList__type_name( RogueCmdTaskControlSectionList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[745]);
}

RogueCmdTaskControlSectionList* RogueCmdTaskControlSectionList__init_object( RogueCmdTaskControlSectionList* THIS )
{
  return (RogueCmdTaskControlSectionList*)(THIS);
}

RogueCmdTaskControlSectionList* RogueCmdTaskControlSectionList__init( RogueCmdTaskControlSectionList* THIS )
{
  RogueCmdTaskControlSectionList__init__Int32( ROGUE_ARG(THIS), 0 );
  return (RogueCmdTaskControlSectionList*)(THIS);
}

RogueCmdTaskControlSectionList* RogueCmdTaskControlSectionList__init__Int32( RogueCmdTaskControlSectionList* THIS, RogueInt32 initial_capacity_0 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassCmdTaskControlSection*), true );
  }
  return (RogueCmdTaskControlSectionList*)(THIS);
}

RogueCmdTaskControlSectionList* RogueCmdTaskControlSectionList__add__CmdTaskControlSection( RogueCmdTaskControlSectionList* THIS, RogueClassCmdTaskControlSection* value_0 )
{
  ((RogueCmdTaskControlSectionList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdTaskControlSectionList*)(THIS);
}

RogueInt32 RogueCmdTaskControlSectionList__capacity( RogueCmdTaskControlSectionList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueCmdTaskControlSectionList* RogueCmdTaskControlSectionList__reserve__Int32( RogueCmdTaskControlSectionList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassCmdTaskControlSection*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueCmdTaskControlSectionList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassCmdTaskControlSection*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdTaskControlSectionList*)(THIS);
}

RogueString* RogueCmdBlock__type_name( RogueClassCmdBlock* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1063]);
}

RogueClassCmd* RogueCmdBlock__clone__CloneArgs( RogueClassCmdBlock* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassTaskArgs*,task_args_1,(((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs)))));
  if ((!!(task_args_1) && THIS->contains_yield))
  {
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdStatementList*,_auto_2649_3,(THIS->statements));
      RogueInt32 _auto_2650_4 = (0);
      for (;_auto_2650_4 < _auto_2649_3->count;++_auto_2650_4)
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmd*,statement_5,(((RogueClassCmd*)(_auto_2649_3->data->objects[_auto_2650_4]))));
        RogueTaskArgs__add__Cmd( task_args_1, ROGUE_ARG((call_ROGUEM71( 6, statement_5, ROGUE_ARG(((RogueClassCloneArgs*)(task_args_1))) ))) );
      }
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdBlock*,result_2,(((RogueCmdBlock__init__Token_CmdStatementList_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdBlock*,ROGUE_CREATE_OBJECT(CmdBlock))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmdStatementList*)(NULL))), 0 )))));
    call_ROGUEM211( 35, ((RogueClassCmdControlStructure*)result_2), ROGUE_ARG(((RogueClassCmdControlStructure*)(THIS))) );
    THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_2));
    result_2->statements = ((RogueCmdStatementList__clone__CloneArgs( ROGUE_ARG(THIS->statements), clone_args_0 )));
    return (RogueClassCmd*)(((RogueClassCmd*)(result_2)));
  }
}

RogueLogical RogueCmdBlock__requires_semicolon( RogueClassCmdBlock* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmdBlock* RogueCmdBlock__resolve__Scope( RogueClassCmdBlock* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( ROGUE_ARG(scope_0->control_stack), ROGUE_ARG(((RogueClassCmdControlStructure*)(THIS))) );
  RogueCmdStatementList__resolve__Scope_Logical( ROGUE_ARG(THIS->statements), scope_0, false );
  RogueCmdControlStructureList__remove_last( ROGUE_ARG(scope_0->control_stack) );
  return (RogueClassCmdBlock*)(THIS);
}

void RogueCmdBlock__write_cpp__CPPWriter_Logical( RogueClassCmdBlock* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[210] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( ROGUE_ARG(THIS->statements), writer_0, false );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[128] );
  if (!!(THIS->escape_label))
  {
    RogueCPPWriter__println__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, ROGUE_ARG(THIS->escape_label) )))), Rogue_literal_strings[975] );
  }
}

void RogueCmdBlock__trace_used_code( RogueClassCmdBlock* THIS )
{
  RogueCmdStatementList__trace_used_code( ROGUE_ARG(THIS->statements) );
}

void RogueCmdBlock__update_this_type__Scope( RogueClassCmdBlock* THIS, RogueClassScope* scope_0 )
{
  RogueCmdStatementList__update_this_type__Scope( ROGUE_ARG(THIS->statements), scope_0 );
}

RogueClassCmdBlock* RogueCmdBlock__init_object( RogueClassCmdBlock* THIS )
{
  return (RogueClassCmdBlock*)(THIS);
}

RogueClassCmdBlock* RogueCmdBlock__init__Token_Int32( RogueClassCmdBlock* THIS, RogueClassToken* _auto_1745_0, RogueInt32 _auto_1746_1 )
{
  THIS->_control_type = _auto_1746_1;
  THIS->t = _auto_1745_0;
  THIS->statements = ((RogueCmdStatementList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdStatementList*,ROGUE_CREATE_OBJECT(CmdStatementList))) )));
  return (RogueClassCmdBlock*)(THIS);
}

RogueClassCmdBlock* RogueCmdBlock__init__Token_CmdStatementList_Int32( RogueClassCmdBlock* THIS, RogueClassToken* _auto_1747_0, RogueClassCmdStatementList* _auto_1748_1, RogueInt32 _auto_1749_2 )
{
  THIS->_control_type = _auto_1749_2;
  THIS->statements = _auto_1748_1;
  THIS->t = _auto_1747_0;
  return (RogueClassCmdBlock*)(THIS);
}

RogueString* RogueCmdTaskControlSectionArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[784]);
}

RogueString* RogueString_DefinitionTableEntryList__to_String( RogueTableEntry_of_String_DefinitionList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_String_DefinitionList*,_auto_2663_2,(THIS));
    RogueInt32 _auto_2664_3 = (0);
    for (;_auto_2664_3 < _auto_2663_2->count;++_auto_2664_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassString_DefinitionTableEntry*,value_4,(((RogueClassString_DefinitionTableEntry*)(_auto_2663_2->data->objects[_auto_2664_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_DefinitionTableEntryList__type_name( RogueTableEntry_of_String_DefinitionList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[746]);
}

RogueTableEntry_of_String_DefinitionList* RogueString_DefinitionTableEntryList__init_object( RogueTableEntry_of_String_DefinitionList* THIS )
{
  return (RogueTableEntry_of_String_DefinitionList*)(THIS);
}

RogueTableEntry_of_String_DefinitionList* RogueString_DefinitionTableEntryList__init__Int32_String_DefinitionTableEntry( RogueTableEntry_of_String_DefinitionList* THIS, RogueInt32 initial_capacity_0, RogueClassString_DefinitionTableEntry* initial_value_1 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_DefinitionTableEntry*), true );
    {
      RogueInt32 i_2 = (1);
      RogueInt32 _auto_1834_3 = (initial_capacity_0);
      for (;i_2 <= _auto_1834_3;++i_2)
      {
        RogueString_DefinitionTableEntryList__add__String_DefinitionTableEntry( ROGUE_ARG(THIS), initial_value_1 );
      }
    }
  }
  return (RogueTableEntry_of_String_DefinitionList*)(THIS);
}

RogueTableEntry_of_String_DefinitionList* RogueString_DefinitionTableEntryList__add__String_DefinitionTableEntry( RogueTableEntry_of_String_DefinitionList* THIS, RogueClassString_DefinitionTableEntry* value_0 )
{
  ((RogueString_DefinitionTableEntryList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_DefinitionList*)(THIS);
}

RogueInt32 RogueString_DefinitionTableEntryList__capacity( RogueTableEntry_of_String_DefinitionList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_DefinitionList* RogueString_DefinitionTableEntryList__reserve__Int32( RogueTableEntry_of_String_DefinitionList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassString_DefinitionTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueString_DefinitionTableEntryList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassString_DefinitionTableEntry*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_DefinitionList*)(THIS);
}

RogueString* RogueString_DefinitionTableEntry__type_name( RogueClassString_DefinitionTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[701]);
}

RogueClassString_DefinitionTableEntry* RogueString_DefinitionTableEntry__init__String_Definition_Int32( RogueClassString_DefinitionTableEntry* THIS, RogueString* _key_0, RogueClassDefinition* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_DefinitionTableEntry*)(THIS);
}

RogueClassString_DefinitionTableEntry* RogueString_DefinitionTableEntry__init_object( RogueClassString_DefinitionTableEntry* THIS )
{
  return (RogueClassString_DefinitionTableEntry*)(THIS);
}

RogueString* RogueString_DefinitionTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[785]);
}

RogueString* RogueString_PropertyTableEntryList__to_String( RogueTableEntry_of_String_PropertyList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_String_PropertyList*,_auto_2701_2,(THIS));
    RogueInt32 _auto_2702_3 = (0);
    for (;_auto_2702_3 < _auto_2701_2->count;++_auto_2702_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassString_PropertyTableEntry*,value_4,(((RogueClassString_PropertyTableEntry*)(_auto_2701_2->data->objects[_auto_2702_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_PropertyTableEntryList__type_name( RogueTableEntry_of_String_PropertyList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[747]);
}

RogueTableEntry_of_String_PropertyList* RogueString_PropertyTableEntryList__init_object( RogueTableEntry_of_String_PropertyList* THIS )
{
  return (RogueTableEntry_of_String_PropertyList*)(THIS);
}

RogueTableEntry_of_String_PropertyList* RogueString_PropertyTableEntryList__init__Int32_String_PropertyTableEntry( RogueTableEntry_of_String_PropertyList* THIS, RogueInt32 initial_capacity_0, RogueClassString_PropertyTableEntry* initial_value_1 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_PropertyTableEntry*), true );
    {
      RogueInt32 i_2 = (1);
      RogueInt32 _auto_1873_3 = (initial_capacity_0);
      for (;i_2 <= _auto_1873_3;++i_2)
      {
        RogueString_PropertyTableEntryList__add__String_PropertyTableEntry( ROGUE_ARG(THIS), initial_value_1 );
      }
    }
  }
  return (RogueTableEntry_of_String_PropertyList*)(THIS);
}

RogueTableEntry_of_String_PropertyList* RogueString_PropertyTableEntryList__add__String_PropertyTableEntry( RogueTableEntry_of_String_PropertyList* THIS, RogueClassString_PropertyTableEntry* value_0 )
{
  ((RogueString_PropertyTableEntryList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_PropertyList*)(THIS);
}

RogueInt32 RogueString_PropertyTableEntryList__capacity( RogueTableEntry_of_String_PropertyList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_PropertyList* RogueString_PropertyTableEntryList__reserve__Int32( RogueTableEntry_of_String_PropertyList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassString_PropertyTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueString_PropertyTableEntryList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassString_PropertyTableEntry*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_PropertyList*)(THIS);
}

RogueString* RogueString_PropertyTableEntry__type_name( RogueClassString_PropertyTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[702]);
}

RogueClassString_PropertyTableEntry* RogueString_PropertyTableEntry__init__String_Property_Int32( RogueClassString_PropertyTableEntry* THIS, RogueString* _key_0, RogueClassProperty* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_PropertyTableEntry*)(THIS);
}

RogueClassString_PropertyTableEntry* RogueString_PropertyTableEntry__init_object( RogueClassString_PropertyTableEntry* THIS )
{
  return (RogueClassString_PropertyTableEntry*)(THIS);
}

RogueString* RogueString_PropertyTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[786]);
}

RogueString* RogueString_CmdTable__to_String( RogueClassString_CmdTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueString_CmdTable__print_to__StringBuilder( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))) )))) ))));
}

RogueString* RogueString_CmdTable__type_name( RogueClassString_CmdTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1140]);
}

RogueClassString_CmdTable* RogueString_CmdTable__init( RogueClassString_CmdTable* THIS )
{
  RogueString_CmdTable__init__Int32( ROGUE_ARG(THIS), 16 );
  return (RogueClassString_CmdTable*)(THIS);
}

RogueClassString_CmdTable* RogueString_CmdTable__init__Int32( RogueClassString_CmdTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_CmdTableEntryList__init__Int32_String_CmdTableEntry( ROGUE_ARG(ROGUE_CREATE_REF(RogueTableEntry_of_String_CmdList*,ROGUE_CREATE_OBJECT(TableEntry_of_String_CmdList))), bin_count_0, ROGUE_ARG(((RogueClassString_CmdTableEntry*)(NULL))) )));
  THIS->keys = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  return (RogueClassString_CmdTable*)(THIS);
}

RogueClassString_CmdTableEntry* RogueString_CmdTable__find__String( RogueClassString_CmdTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  ROGUE_DEF_LOCAL_REF(RogueClassString_CmdTableEntry*,entry_2,(((RogueClassString_CmdTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)]))));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_2->key), key_0 )))))
    {
      return (RogueClassString_CmdTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_CmdTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_CmdTableEntry*)(((RogueClassString_CmdTableEntry*)(NULL)));
}

RogueClassCmd* RogueString_CmdTable__get__String( RogueClassString_CmdTable* THIS, RogueString* key_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassString_CmdTableEntry*,entry_1,(((RogueString_CmdTable__find__String( ROGUE_ARG(THIS), key_0 )))));
  if (!!(entry_1))
  {
    return (RogueClassCmd*)(entry_1->value);
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmd*,default_value_2,0);
    return (RogueClassCmd*)(default_value_2);
  }
}

RogueClassString_CmdTable* RogueString_CmdTable__set__String_Cmd( RogueClassString_CmdTable* THIS, RogueString* key_0, RogueClassCmd* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  ROGUE_DEF_LOCAL_REF(RogueClassString_CmdTableEntry*,entry_4,(((RogueClassString_CmdTableEntry*)(THIS->bins->data->objects[index_3]))));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_4->key), key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_CmdTable*)(THIS);
    }
    entry_4 = ((RogueClassString_CmdTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_CmdTableEntry*)((RogueString_CmdTableEntry__init__String_Cmd_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_CmdTableEntry*,ROGUE_CREATE_OBJECT(String_CmdTableEntry))), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_CmdTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( ROGUE_ARG(THIS->keys), key_0 );
  return (RogueClassString_CmdTable*)(THIS);
}

RogueStringBuilder* RogueString_CmdTable__print_to__StringBuilder( RogueClassString_CmdTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    ROGUE_DEF_LOCAL_REF(RogueString*,key_2,(((RogueString*)(THIS->keys->data->objects[i_1]))));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ROGUE_ARG(((RogueObject*)(((RogueString_CmdTable__get__String( ROGUE_ARG(THIS), key_2 )))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_CmdTable* RogueString_CmdTable__init_object( RogueClassString_CmdTable* THIS )
{
  return (RogueClassString_CmdTable*)(THIS);
}

RogueString* RogueCmdCallStaticMethod__type_name( RogueClassCmdCallStaticMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1175]);
}

RogueClassCmd* RogueCmdCallStaticMethod__clone__CloneArgs( RogueClassCmdCallStaticMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdCallStaticMethod*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ROGUE_ARG(((RogueClassCmdCall*)ROGUE_CREATE_REF(RogueClassCmdCallStaticMethod*,ROGUE_CREATE_OBJECT(CmdCallStaticMethod)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueCmd__clone__Cmd_CloneArgs( ROGUE_ARG(((RogueClassCmd*)THIS)), ROGUE_ARG(THIS->context), clone_args_0 )))), ROGUE_ARG(THIS->method_info), ROGUE_ARG(((RogueCmdArgs__clone__CloneArgs( ROGUE_ARG(THIS->args), clone_args_0 )))) ))))))));
}

RogueClassCmd* RogueCmdCallStaticMethod__resolve__Scope( RogueClassCmdCallStaticMethod* THIS, RogueClassScope* scope_0 )
{
  if (!(!!(THIS->context)))
  {
    THIS->context = ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdThisContext*,ROGUE_CREATE_OBJECT(CmdThisContext))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->method_info->type_context) )))));
  }
  return (RogueClassCmd*)((RogueCmdCall__resolve__Scope( ROGUE_ARG(((RogueClassCmdCall*)THIS)), scope_0 )));
}

void RogueCmdCallStaticMethod__write_cpp__CPPWriter_Logical( RogueClassCmdCallStaticMethod* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[80] )))), ROGUE_ARG(THIS->method_info->_return_type), ROGUE_ARG(THIS->method_info->_return_type) );
  }
  RogueCPPWriter__print__String( writer_0, ROGUE_ARG(THIS->method_info->cpp_name) );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[505] );
  RogueCPPWriter__print_arg__Cmd_Type_Type( writer_0, ROGUE_ARG(THIS->context), ROGUE_ARG(((RogueClassType*)(NULL))), ROGUE_ARG(THIS->method_info->type_context) );
  RogueInt32 i_2 = (0);
  {
    ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_2764_3,(THIS->args));
    RogueInt32 _auto_2765_4 = (0);
    for (;_auto_2765_4 < _auto_2764_3->count;++_auto_2765_4)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmd*,arg_5,(((RogueClassCmd*)(_auto_2764_3->data->objects[_auto_2765_4]))));
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[502] );
      RogueCPPWriter__print_arg__Cmd_Type_Type( writer_0, arg_5, ROGUE_ARG(((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type), ROGUE_ARG(((RogueClassType*)(NULL))) );
      ++i_2;
    }
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[531] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[28] );
  }
}

RogueClassCmdCallStaticMethod* RogueCmdCallStaticMethod__init_object( RogueClassCmdCallStaticMethod* THIS )
{
  return (RogueClassCmdCallStaticMethod*)(THIS);
}

RogueString* RogueFnArgArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[787]);
}

RogueString* RogueString_StringTableEntryList__to_String( RogueTableEntry_of_String_StringList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_String_StringList*,_auto_2784_2,(THIS));
    RogueInt32 _auto_2785_3 = (0);
    for (;_auto_2785_3 < _auto_2784_2->count;++_auto_2785_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassString_StringTableEntry*,value_4,(((RogueClassString_StringTableEntry*)(_auto_2784_2->data->objects[_auto_2785_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_StringTableEntryList__type_name( RogueTableEntry_of_String_StringList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[748]);
}

RogueTableEntry_of_String_StringList* RogueString_StringTableEntryList__init_object( RogueTableEntry_of_String_StringList* THIS )
{
  return (RogueTableEntry_of_String_StringList*)(THIS);
}

RogueTableEntry_of_String_StringList* RogueString_StringTableEntryList__init__Int32_String_StringTableEntry( RogueTableEntry_of_String_StringList* THIS, RogueInt32 initial_capacity_0, RogueClassString_StringTableEntry* initial_value_1 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_StringTableEntry*), true );
    {
      RogueInt32 i_2 = (1);
      RogueInt32 _auto_2176_3 = (initial_capacity_0);
      for (;i_2 <= _auto_2176_3;++i_2)
      {
        RogueString_StringTableEntryList__add__String_StringTableEntry( ROGUE_ARG(THIS), initial_value_1 );
      }
    }
  }
  return (RogueTableEntry_of_String_StringList*)(THIS);
}

RogueTableEntry_of_String_StringList* RogueString_StringTableEntryList__add__String_StringTableEntry( RogueTableEntry_of_String_StringList* THIS, RogueClassString_StringTableEntry* value_0 )
{
  ((RogueString_StringTableEntryList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_StringList*)(THIS);
}

RogueInt32 RogueString_StringTableEntryList__capacity( RogueTableEntry_of_String_StringList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_StringList* RogueString_StringTableEntryList__reserve__Int32( RogueTableEntry_of_String_StringList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassString_StringTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueString_StringTableEntryList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassString_StringTableEntry*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_StringList*)(THIS);
}

RogueString* RogueString_StringTableEntry__type_name( RogueClassString_StringTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[703]);
}

RogueClassString_StringTableEntry* RogueString_StringTableEntry__init__String_String_Int32( RogueClassString_StringTableEntry* THIS, RogueString* _key_0, RogueString* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_StringTableEntry*)(THIS);
}

RogueClassString_StringTableEntry* RogueString_StringTableEntry__init_object( RogueClassString_StringTableEntry* THIS )
{
  return (RogueClassString_StringTableEntry*)(THIS);
}

RogueString* RogueString_StringTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[788]);
}

RogueString* RogueDirectiveTokenType__type_name( RogueClassDirectiveTokenType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1046]);
}

RogueClassToken* RogueDirectiveTokenType__create_token__String_Int32_Int32( RogueClassDirectiveTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ROGUE_ARG(((RogueToken__init__TokenType( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassToken*,ROGUE_CREATE_OBJECT(Token))), ROGUE_ARG(((RogueClassTokenType*)(THIS))) )))), filepath_0, line_1, column_2 ))));
}

RogueLogical RogueDirectiveTokenType__is_directive( RogueClassDirectiveTokenType* THIS )
{
  return (RogueLogical)(true);
}

RogueClassDirectiveTokenType* RogueDirectiveTokenType__init_object( RogueClassDirectiveTokenType* THIS )
{
  return (RogueClassDirectiveTokenType*)(THIS);
}

RogueString* RogueStructuralDirectiveTokenType__type_name( RogueClassStructuralDirectiveTokenType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1047]);
}

RogueClassToken* RogueStructuralDirectiveTokenType__create_token__String_Int32_Int32( RogueClassStructuralDirectiveTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ROGUE_ARG(((RogueToken__init__TokenType( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassToken*,ROGUE_CREATE_OBJECT(Token))), ROGUE_ARG(((RogueClassTokenType*)(THIS))) )))), filepath_0, line_1, column_2 ))));
}

RogueLogical RogueStructuralDirectiveTokenType__is_directive( RogueClassStructuralDirectiveTokenType* THIS )
{
  return (RogueLogical)(true);
}

RogueLogical RogueStructuralDirectiveTokenType__is_structure( RogueClassStructuralDirectiveTokenType* THIS )
{
  return (RogueLogical)(true);
}

RogueClassStructuralDirectiveTokenType* RogueStructuralDirectiveTokenType__init_object( RogueClassStructuralDirectiveTokenType* THIS )
{
  return (RogueClassStructuralDirectiveTokenType*)(THIS);
}

RogueString* RogueEOLTokenType__type_name( RogueClassEOLTokenType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1048]);
}

RogueClassToken* RogueEOLTokenType__create_token__String_Int32_Int32( RogueClassEOLTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ROGUE_ARG(((RogueClassToken*)((RogueEOLToken__init__TokenType_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassEOLToken*,ROGUE_CREATE_OBJECT(EOLToken))), ROGUE_ARG(((RogueClassTokenType*)(THIS))), Rogue_literal_strings[0] ))))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueEOLTokenType__create_token__String_Int32_Int32_String( RogueClassEOLTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2, RogueString* value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ROGUE_ARG(((RogueClassToken*)((RogueEOLToken__init__TokenType_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassEOLToken*,ROGUE_CREATE_OBJECT(EOLToken))), ROGUE_ARG(((RogueClassTokenType*)(THIS))), value_3 ))))), filepath_0, line_1, column_2 ))));
}

RogueLogical RogueEOLTokenType__is_structure( RogueClassEOLTokenType* THIS )
{
  return (RogueLogical)(false);
}

RogueClassEOLTokenType* RogueEOLTokenType__init_object( RogueClassEOLTokenType* THIS )
{
  return (RogueClassEOLTokenType*)(THIS);
}

RogueString* RogueStructureTokenType__type_name( RogueClassStructureTokenType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1049]);
}

RogueClassToken* RogueStructureTokenType__create_token__String_Int32_Int32( RogueClassStructureTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ROGUE_ARG(((RogueToken__init__TokenType( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassToken*,ROGUE_CREATE_OBJECT(Token))), ROGUE_ARG(((RogueClassTokenType*)(THIS))) )))), filepath_0, line_1, column_2 ))));
}

RogueLogical RogueStructureTokenType__is_structure( RogueClassStructureTokenType* THIS )
{
  return (RogueLogical)(true);
}

RogueClassStructureTokenType* RogueStructureTokenType__init_object( RogueClassStructureTokenType* THIS )
{
  return (RogueClassStructureTokenType*)(THIS);
}

RogueString* RogueNativeCodeTokenType__type_name( RogueClassNativeCodeTokenType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1050]);
}

RogueClassToken* RogueNativeCodeTokenType__create_token__String_Int32_Int32_String( RogueClassNativeCodeTokenType* THIS, RogueString* filepath_0, RogueInt32 line_1, RogueInt32 column_2, RogueString* value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ROGUE_ARG(((RogueClassToken*)((RogueNativeCodeToken__init__TokenType_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassNativeCodeToken*,ROGUE_CREATE_OBJECT(NativeCodeToken))), ROGUE_ARG(((RogueClassTokenType*)(THIS))), value_3 ))))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueNativeCodeTokenType__create_token__Token_String( RogueClassNativeCodeTokenType* THIS, RogueClassToken* existing_0, RogueString* value_1 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Int32_Int32( ROGUE_ARG(((RogueClassToken*)((RogueNativeCodeToken__init__TokenType_String( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassNativeCodeToken*,ROGUE_CREATE_OBJECT(NativeCodeToken))), ROGUE_ARG(((RogueClassTokenType*)(THIS))), value_1 ))))), ROGUE_ARG(existing_0->filepath), ROGUE_ARG(existing_0->line), ROGUE_ARG(existing_0->column) ))));
}

RogueClassNativeCodeTokenType* RogueNativeCodeTokenType__init_object( RogueClassNativeCodeTokenType* THIS )
{
  return (RogueClassNativeCodeTokenType*)(THIS);
}

RogueString* RogueModifyAndAssignTokenType__type_name( RogueClassModifyAndAssignTokenType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1051]);
}

RogueLogical RogueModifyAndAssignTokenType__is_op_with_assign( RogueClassModifyAndAssignTokenType* THIS )
{
  return (RogueLogical)(true);
}

RogueClassModifyAndAssignTokenType* RogueModifyAndAssignTokenType__init_object( RogueClassModifyAndAssignTokenType* THIS )
{
  return (RogueClassModifyAndAssignTokenType*)(THIS);
}

RogueString* RogueString_TokenListTable__to_String( RogueClassString_TokenListTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueString_TokenListTable__print_to__StringBuilder( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))) )))) ))));
}

RogueString* RogueString_TokenListTable__type_name( RogueClassString_TokenListTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[704]);
}

RogueClassString_TokenListTable* RogueString_TokenListTable__init( RogueClassString_TokenListTable* THIS )
{
  RogueString_TokenListTable__init__Int32( ROGUE_ARG(THIS), 16 );
  return (RogueClassString_TokenListTable*)(THIS);
}

RogueClassString_TokenListTable* RogueString_TokenListTable__init__Int32( RogueClassString_TokenListTable* THIS, RogueInt32 bin_count_0 )
{
  RogueInt32 bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInt32)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInt32)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_TokenListTableEntryList__init__Int32_String_TokenListTableEntry( ROGUE_ARG(ROGUE_CREATE_REF(RogueTableEntry_of_String_TokenListList*,ROGUE_CREATE_OBJECT(TableEntry_of_String_TokenListList))), bin_count_0, ROGUE_ARG(((RogueClassString_TokenListTableEntry*)(NULL))) )));
  THIS->keys = ((RogueStringList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringList*,ROGUE_CREATE_OBJECT(StringList))) )));
  return (RogueClassString_TokenListTable*)(THIS);
}

RogueClassString_TokenListTableEntry* RogueString_TokenListTable__find__String( RogueClassString_TokenListTable* THIS, RogueString* key_0 )
{
  RogueInt32 hash_1 = (key_0->hash_code);
  ROGUE_DEF_LOCAL_REF(RogueClassString_TokenListTableEntry*,entry_2,(((RogueClassString_TokenListTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)]))));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_2->key), key_0 )))))
    {
      return (RogueClassString_TokenListTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_TokenListTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_TokenListTableEntry*)(((RogueClassString_TokenListTableEntry*)(NULL)));
}

RogueTokenList* RogueString_TokenListTable__get__String( RogueClassString_TokenListTable* THIS, RogueString* key_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassString_TokenListTableEntry*,entry_1,(((RogueString_TokenListTable__find__String( ROGUE_ARG(THIS), key_0 )))));
  if (!!(entry_1))
  {
    return (RogueTokenList*)(entry_1->value);
  }
  else
  {
    ROGUE_DEF_LOCAL_REF(RogueTokenList*,default_value_2,0);
    return (RogueTokenList*)(default_value_2);
  }
}

RogueClassString_TokenListTable* RogueString_TokenListTable__set__String_TokenList( RogueClassString_TokenListTable* THIS, RogueString* key_0, RogueTokenList* value_1 )
{
  RogueInt32 hash_2 = (key_0->hash_code);
  RogueInt32 index_3 = ((hash_2 & THIS->bin_mask));
  ROGUE_DEF_LOCAL_REF(RogueClassString_TokenListTableEntry*,entry_4,(((RogueClassString_TokenListTableEntry*)(THIS->bins->data->objects[index_3]))));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorEQUALSEQUALS__String( ROGUE_ARG(entry_4->key), key_0 )))))
    {
      entry_4->value = value_1;
      return (RogueClassString_TokenListTable*)(THIS);
    }
    entry_4 = ((RogueClassString_TokenListTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_TokenListTableEntry*)((RogueString_TokenListTableEntry__init__String_TokenList_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassString_TokenListTableEntry*,ROGUE_CREATE_OBJECT(String_TokenListTableEntry))), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_TokenListTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( ROGUE_ARG(THIS->keys), key_0 );
  return (RogueClassString_TokenListTable*)(THIS);
}

RogueStringBuilder* RogueString_TokenListTable__print_to__StringBuilder( RogueClassString_TokenListTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInt32 i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    ROGUE_DEF_LOCAL_REF(RogueString*,key_2,(((RogueString*)(THIS->keys->data->objects[i_1]))));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ROGUE_ARG(((RogueObject*)(((RogueString_TokenListTable__get__String( ROGUE_ARG(THIS), key_2 )))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_TokenListTable* RogueString_TokenListTable__init_object( RogueClassString_TokenListTable* THIS )
{
  return (RogueClassString_TokenListTable*)(THIS);
}

RogueString* RoguePreprocessorTokenReader__type_name( RogueClassPreprocessorTokenReader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[705]);
}

RogueClassPreprocessorTokenReader* RoguePreprocessorTokenReader__init__TokenList( RogueClassPreprocessorTokenReader* THIS, RogueTokenList* _auto_2199_0 )
{
  THIS->tokens = _auto_2199_0;
  THIS->count = THIS->tokens->count;
  return (RogueClassPreprocessorTokenReader*)(THIS);
}

RogueClassError* RoguePreprocessorTokenReader__error__String( RogueClassPreprocessorTokenReader* THIS, RogueString* message_0 )
{
  if (((RoguePreprocessorTokenReader__has_another( ROGUE_ARG(THIS) ))))
  {
    return (RogueClassError*)(((RogueClassError*)(((RogueToken__error__String( ROGUE_ARG(((RoguePreprocessorTokenReader__peek( ROGUE_ARG(THIS) )))), message_0 ))))));
  }
  if (!!(THIS->count))
  {
    return (RogueClassError*)(((RogueClassError*)(((RogueToken__error__String( ROGUE_ARG(((RogueTokenType__create_token__Token( ROGUE_ARG(RogueTokenType_eoi), ROGUE_ARG(((RogueTokenList__last( ROGUE_ARG(THIS->tokens) )))) )))), message_0 ))))));
  }
  return (RogueClassError*)(((RogueClassError*)(((RogueRogueError__init__String_String_Int32_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassRogueError*,ROGUE_CREATE_OBJECT(RogueError))), message_0, ROGUE_ARG(((RogueString*)(NULL))), 0, 0 ))))));
}

void RoguePreprocessorTokenReader__expand_definition__Token( RogueClassPreprocessorTokenReader* THIS, RogueClassToken* t_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassString_TokenListTableEntry*,entry_1,(((RogueString_TokenListTable__find__String( ROGUE_ARG(RoguePreprocessor_definitions), ROGUE_ARG((call_ROGUEM39( 1, t_0 ))) )))));
  if (!!(entry_1))
  {
    if (!!(entry_1->value))
    {
      ROGUE_DEF_LOCAL_REF(RogueTokenList*,def_tokens_2,(entry_1->value));
      entry_1->value = ((RogueTokenList*)(NULL));
      {
        ROGUE_DEF_LOCAL_REF(RogueTokenList*,_auto_2825_3,(def_tokens_2));
        RogueInt32 _auto_2826_4 = ((_auto_2825_3->count - 1));
        for (;_auto_2826_4 >= 0;--_auto_2826_4)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassToken*,def_t_5,(((RogueClassToken*)(_auto_2825_3->data->objects[_auto_2826_4]))));
          if (((void*)t_0->_type) == ((void*)RogueTokenType_identifier))
          {
            RoguePreprocessorTokenReader__expand_definition__Token( ROGUE_ARG(THIS), def_t_5 );
          }
          else
          {
            RogueTokenList__add__Token( ROGUE_ARG(THIS->queue), t_0 );
          }
        }
      }
      entry_1->value = def_tokens_2;
      return;
    }
    else
    {
      ROGUE_THROW(((RogueToken__error__String( t_0, ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[66] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM39( 1, t_0 ))) )))) )))), Rogue_literal_strings[15] )))) )))) ))));
    }
  }
  else
  {
    RogueTokenList__add__Token( ROGUE_ARG(THIS->queue), t_0 );
  }
}

RogueLogical RoguePreprocessorTokenReader__has_another( RogueClassPreprocessorTokenReader* THIS )
{
  RoguePreprocessorTokenReader__peek( ROGUE_ARG(THIS) );
  return (RogueLogical)(!!(THIS->queue->count));
}

RogueLogical RoguePreprocessorTokenReader__next_is__TokenType( RogueClassPreprocessorTokenReader* THIS, RogueClassTokenType* type_0 )
{
  if ((THIS->position == THIS->count && THIS->queue->count == 0))
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(((void*)((RoguePreprocessorTokenReader__peek( ROGUE_ARG(THIS) )))->_type) == ((void*)type_0));
}

RogueClassToken* RoguePreprocessorTokenReader__peek( RogueClassPreprocessorTokenReader* THIS )
{
  if (!!(THIS->queue->count))
  {
    return (RogueClassToken*)(((RogueTokenList__last( ROGUE_ARG(THIS->queue) ))));
  }
  return (RogueClassToken*)(((RoguePreprocessorTokenReader__peek__Int32( ROGUE_ARG(THIS), 0 ))));
}

RogueClassToken* RoguePreprocessorTokenReader__peek__Int32( RogueClassPreprocessorTokenReader* THIS, RogueInt32 num_ahead_0 )
{
  if ((THIS->position + num_ahead_0) >= (THIS->count + THIS->queue->count))
  {
    return (RogueClassToken*)(((RogueTokenType__create_token__Token( ROGUE_ARG(RogueTokenType_eoi), ROGUE_ARG(((RogueTokenList__last( ROGUE_ARG(THIS->tokens) )))) ))));
  }
  while (THIS->queue->count <= num_ahead_0)
  {
    ROGUE_DEF_LOCAL_REF(RogueClassToken*,t_1,(((RogueClassToken*)(THIS->tokens->data->objects[THIS->position]))));
    ++THIS->position;
    if (((void*)t_1->_type) == ((void*)RogueTokenType_identifier))
    {
      RoguePreprocessorTokenReader__expand_definition__Token( ROGUE_ARG(THIS), t_1 );
    }
    else
    {
      RogueTokenList__add__Token( ROGUE_ARG(THIS->queue), t_1 );
    }
  }
  return (RogueClassToken*)(((RogueClassToken*)(THIS->queue->data->objects[((THIS->queue->count - num_ahead_0) - 1)])));
}

void RoguePreprocessorTokenReader__push__Token( RogueClassPreprocessorTokenReader* THIS, RogueClassToken* t_0 )
{
  RogueTokenList__add__Token( ROGUE_ARG(THIS->queue), t_0 );
}

RogueClassToken* RoguePreprocessorTokenReader__read( RogueClassPreprocessorTokenReader* THIS )
{
  RoguePreprocessorTokenReader__peek( ROGUE_ARG(THIS) );
  if (THIS->queue->count == 0)
  {
    ROGUE_THROW(((RoguePreprocessorTokenReader__error__String( ROGUE_ARG(THIS), Rogue_literal_strings[67] ))));
  }
  return (RogueClassToken*)(((RogueTokenList__remove_last( ROGUE_ARG(THIS->queue) ))));
}

RogueString* RoguePreprocessorTokenReader__read_identifier( RogueClassPreprocessorTokenReader* THIS )
{
  if (!(((RoguePreprocessorTokenReader__next_is__TokenType( ROGUE_ARG(THIS), ROGUE_ARG(RogueTokenType_identifier) )))))
  {
    ROGUE_THROW(((RoguePreprocessorTokenReader__error__String( ROGUE_ARG(THIS), ROGUE_ARG(((RogueStringBuilder__to_String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__print__String( ROGUE_ARG(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))), Rogue_literal_strings[68] )))), ROGUE_ARG(((RogueString__operatorPLUS__String( Rogue_literal_strings[0], ROGUE_ARG((call_ROGUEM39( 8, ROGUE_ARG(((RoguePreprocessorTokenReader__peek( ROGUE_ARG(THIS) )))) ))) )))) )))), Rogue_literal_strings[64] )))) )))) ))));
  }
  return (RogueString*)((call_ROGUEM39( 1, ROGUE_ARG(((RoguePreprocessorTokenReader__read( ROGUE_ARG(THIS) )))) )));
}

RogueClassPreprocessorTokenReader* RoguePreprocessorTokenReader__init_object( RogueClassPreprocessorTokenReader* THIS )
{
  THIS->queue = ((RogueTokenList__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueTokenList*,ROGUE_CREATE_OBJECT(TokenList))) )));
  return (RogueClassPreprocessorTokenReader*)(THIS);
}

RogueString* RogueCmdWhichCaseArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[789]);
}

RogueString* RogueCmdSwitch__type_name( RogueClassCmdSwitch* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1064]);
}

RogueClassCmdSwitch* RogueCmdSwitch__clone__CloneArgs( RogueClassCmdSwitch* THIS, RogueClassCloneArgs* clone_args_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassCmdSwitch*,result_1,(((RogueCmdSwitch__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdSwitch*,ROGUE_CREATE_OBJECT(CmdSwitch))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->expression), clone_args_0 ))), ROGUE_ARG(((RogueCmdWhichCaseList*)(NULL))), ROGUE_ARG(((RogueClassCmdWhichCase*)(NULL))), 5 )))));
  call_ROGUEM211( 35, ((RogueClassCmdControlStructure*)result_1), ROGUE_ARG(((RogueClassCmdControlStructure*)(THIS))) );
  THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_1));
  ROGUE_DEF_LOCAL_REF(RogueCmdWhichCaseList*,cloned_cases_2,(((RogueCmdWhichCaseList__init__Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueCmdWhichCaseList*,ROGUE_CREATE_OBJECT(CmdWhichCaseList))), ROGUE_ARG(THIS->cases->count) )))));
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdWhichCaseList*,_auto_2827_3,(THIS->cases));
    RogueInt32 _auto_2828_4 = (0);
    for (;_auto_2828_4 < _auto_2827_3->count;++_auto_2828_4)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdWhichCase*,c_5,(((RogueClassCmdWhichCase*)(_auto_2827_3->data->objects[_auto_2828_4]))));
      RogueCmdWhichCaseList__add__CmdWhichCase( cloned_cases_2, ROGUE_ARG(((RogueCmdWhichCase__clone__CloneArgs( c_5, clone_args_0 )))) );
    }
  }
  result_1->cases = cloned_cases_2;
  if (!!(THIS->case_others))
  {
    result_1->case_others = ((RogueCmdWhichCase__clone__CloneArgs( ROGUE_ARG(THIS->case_others), clone_args_0 )));
  }
  return (RogueClassCmdSwitch*)(result_1);
}

RogueClassCmd* RogueCmdSwitch__resolve__Scope( RogueClassCmdSwitch* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( ROGUE_ARG(scope_0->control_stack), ROGUE_ARG(((RogueClassCmdControlStructure*)(THIS))) );
  THIS->expression = (call_ROGUEM52( 25, ROGUE_ARG(THIS->expression), scope_0 ));
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdWhichCaseList*,_auto_2829_1,(THIS->cases));
    RogueInt32 _auto_2830_2 = (0);
    for (;_auto_2830_2 < _auto_2829_1->count;++_auto_2830_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdWhichCase*,c_3,(((RogueClassCmdWhichCase*)(_auto_2829_1->data->objects[_auto_2830_2]))));
      RogueCmdArgs__resolve__Scope( ROGUE_ARG(c_3->conditions), scope_0 );
      RogueCmdStatementList__resolve__Scope_Logical( ROGUE_ARG(c_3->statements), scope_0, false );
    }
  }
  if (!!(THIS->case_others))
  {
    RogueCmdArgs__resolve__Scope( ROGUE_ARG(THIS->case_others->conditions), scope_0 );
    RogueCmdStatementList__resolve__Scope_Logical( ROGUE_ARG(THIS->case_others->statements), scope_0, false );
  }
  RogueCmdControlStructureList__remove_last( ROGUE_ARG(scope_0->control_stack) );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdSwitch__write_cpp__CPPWriter_Logical( RogueClassCmdSwitch* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1020] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->expression), writer_0, false );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[28] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[210] );
  writer_0->indent += 2;
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdWhichCaseList*,_auto_2831_2,(THIS->cases));
    RogueInt32 _auto_2832_3 = (0);
    for (;_auto_2832_3 < _auto_2831_2->count;++_auto_2832_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdWhichCase*,c_4,(((RogueClassCmdWhichCase*)(_auto_2831_2->data->objects[_auto_2832_3]))));
      {
        ROGUE_DEF_LOCAL_REF(RogueClassCmdArgs*,_auto_2833_5,(c_4->conditions));
        RogueInt32 _auto_2834_6 = (0);
        for (;_auto_2834_6 < _auto_2833_5->count;++_auto_2834_6)
        {
          ROGUE_DEF_LOCAL_REF(RogueClassCmd*,condition_7,(((RogueClassCmd*)(_auto_2833_5->data->objects[_auto_2834_6]))));
          RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[597] );
          call_ROGUEM72( 30, condition_7, writer_0, false );
          RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[192] );
        }
      }
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[210] );
      writer_0->indent += 2;
      RogueCmdStatementList__write_cpp__CPPWriter_Logical( ROGUE_ARG(c_4->statements), writer_0, false );
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[1021] );
      writer_0->indent -= 2;
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[128] );
    }
  }
  if (!!(THIS->case_others))
  {
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[601] );
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[210] );
    writer_0->indent += 2;
    RogueCmdStatementList__write_cpp__CPPWriter_Logical( ROGUE_ARG(THIS->case_others->statements), writer_0, false );
    writer_0->indent -= 2;
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[128] );
  }
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[128] );
}

void RogueCmdSwitch__trace_used_code( RogueClassCmdSwitch* THIS )
{
  call_ROGUEM59( 31, ROGUE_ARG(THIS->expression) );
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdWhichCaseList*,_auto_2835_0,(THIS->cases));
    RogueInt32 _auto_2836_1 = (0);
    for (;_auto_2836_1 < _auto_2835_0->count;++_auto_2836_1)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdWhichCase*,c_2,(((RogueClassCmdWhichCase*)(_auto_2835_0->data->objects[_auto_2836_1]))));
      RogueCmdWhichCase__trace_used_code( c_2 );
    }
  }
  if (!!(THIS->case_others))
  {
    RogueCmdWhichCase__trace_used_code( ROGUE_ARG(THIS->case_others) );
  }
}

void RogueCmdSwitch__update_this_type__Scope( RogueClassCmdSwitch* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->expression), scope_0 );
  {
    ROGUE_DEF_LOCAL_REF(RogueCmdWhichCaseList*,_auto_2837_1,(THIS->cases));
    RogueInt32 _auto_2838_2 = (0);
    for (;_auto_2838_2 < _auto_2837_1->count;++_auto_2838_2)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassCmdWhichCase*,c_3,(((RogueClassCmdWhichCase*)(_auto_2837_1->data->objects[_auto_2838_2]))));
      RogueCmdWhichCase__update_this_type__Scope( c_3, scope_0 );
    }
  }
  if (!!(THIS->case_others))
  {
    RogueCmdWhichCase__update_this_type__Scope( ROGUE_ARG(THIS->case_others), scope_0 );
  }
}

RogueClassCmdSwitch* RogueCmdSwitch__init_object( RogueClassCmdSwitch* THIS )
{
  return (RogueClassCmdSwitch*)(THIS);
}

RogueClassCmdSwitch* RogueCmdSwitch__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Int32( RogueClassCmdSwitch* THIS, RogueClassToken* _auto_2213_0, RogueClassCmd* _auto_2214_1, RogueCmdWhichCaseList* _auto_2215_2, RogueClassCmdWhichCase* _auto_2216_3, RogueInt32 _auto_2217_4 )
{
  THIS->_control_type = _auto_2217_4;
  THIS->case_others = _auto_2216_3;
  THIS->cases = _auto_2215_2;
  THIS->expression = _auto_2214_1;
  THIS->t = _auto_2213_0;
  return (RogueClassCmdSwitch*)(THIS);
}

RogueString* RogueCmdCatchArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[790]);
}

RogueString* RogueCmdReadArrayElement__type_name( RogueClassCmdReadArrayElement* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1156]);
}

RogueClassCmd* RogueCmdReadArrayElement__clone__CloneArgs( RogueClassCmdReadArrayElement* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadArrayElement__init__Token_Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadArrayElement*,ROGUE_CREATE_OBJECT(CmdReadArrayElement))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->context), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->index), clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdReadArrayElement__resolve__Scope( RogueClassCmdReadArrayElement* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->_array_type))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  THIS->context = (call_ROGUEM52( 25, ROGUE_ARG(THIS->context), scope_0 ));
  THIS->_array_type = (call_ROGUEM60( 22, ROGUE_ARG(THIS->context) ));
  THIS->index = ((RogueCmd__require_integer( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->index), scope_0 ))) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdReadArrayElement__resolve_adjust__Scope_Int32( RogueClassCmdReadArrayElement* THIS, RogueClassScope* scope_0, RogueInt32 delta_1 )
{
  return (RogueClassCmd*)(((RogueCmdWriteArrayElement__resolve__Scope( ROGUE_ARG(((RogueCmdWriteArrayElement__init__Token_Cmd_Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteArrayElement*,ROGUE_CREATE_OBJECT(CmdWriteArrayElement))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->index), ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) ))), ROGUE_ARG(((RogueClassCmd*)(((RogueClassCmdAdd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ROGUE_ARG(((RogueClassCmdBinary*)ROGUE_CREATE_REF(RogueClassCmdAdd*,ROGUE_CREATE_OBJECT(CmdAdd)))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(THIS))), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), delta_1 )))))) )))))))) )))), scope_0 ))));
}

RogueClassType* Rogue_CmdReadArrayElement__type( RogueClassCmdReadArrayElement* THIS )
{
  return (RogueClassType*)(THIS->_array_type->_element_type);
}

void RogueCmdReadArrayElement__write_cpp__CPPWriter_Logical( RogueClassCmdReadArrayElement* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassType*,element_type_2,(THIS->_array_type->_element_type));
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_open_cast__Type_Type( writer_0, element_type_2, element_type_2 );
  }
  if (((RogueType__is_reference( element_type_2 ))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[533] );
    RogueCPPWriter__print__Type( writer_0, element_type_2 );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[971] );
    call_ROGUEM72( 30, ROGUE_ARG(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1022] );
    call_ROGUEM72( 30, ROGUE_ARG(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1023] );
  }
  else if (((RogueType__is_primitive( element_type_2 ))))
  {
    call_ROGUEM72( 30, ROGUE_ARG(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[187] );
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ROGUE_ARG(((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1024] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ROGUE_ARG(((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real32))) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1025] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ROGUE_ARG(((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int64))) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1026] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ROGUE_ARG(((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1027] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ROGUE_ARG(((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character))) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1028] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ROGUE_ARG(((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte))) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1029] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ROGUE_ARG(((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1030] );
      }
      else
      {
        ROGUE_THROW(((RogueToken__error__String( ROGUE_ARG(THIS->t), Rogue_literal_strings[1031] ))));
      }
    }
    call_ROGUEM72( 30, ROGUE_ARG(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[39] );
  }
  else
  {
    RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[533] )))), element_type_2 )))), Rogue_literal_strings[1032] );
    call_ROGUEM72( 30, ROGUE_ARG(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1033] );
    call_ROGUEM72( 30, ROGUE_ARG(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[39] );
  }
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_close_cast__Type_Type( writer_0, element_type_2, element_type_2 );
  }
}

void RogueCmdReadArrayElement__trace_used_code( RogueClassCmdReadArrayElement* THIS )
{
  call_ROGUEM59( 31, ROGUE_ARG(THIS->context) );
  RogueType__trace_used_code( ROGUE_ARG(THIS->_array_type) );
  call_ROGUEM59( 31, ROGUE_ARG(THIS->index) );
}

void RogueCmdReadArrayElement__update_this_type__Scope( RogueClassCmdReadArrayElement* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->context), scope_0 );
  call_ROGUEM56( 32, ROGUE_ARG(THIS->index), scope_0 );
}

RogueClassCmdReadArrayElement* RogueCmdReadArrayElement__init_object( RogueClassCmdReadArrayElement* THIS )
{
  return (RogueClassCmdReadArrayElement*)(THIS);
}

RogueClassCmdReadArrayElement* RogueCmdReadArrayElement__init__Token_Cmd_Cmd( RogueClassCmdReadArrayElement* THIS, RogueClassToken* _auto_2314_0, RogueClassCmd* _auto_2315_1, RogueClassCmd* _auto_2316_2 )
{
  THIS->index = _auto_2316_2;
  THIS->context = _auto_2315_1;
  THIS->t = _auto_2314_0;
  return (RogueClassCmdReadArrayElement*)(THIS);
}

RogueString* RogueCmdWriteArrayElement__type_name( RogueClassCmdWriteArrayElement* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1157]);
}

RogueClassCmd* RogueCmdWriteArrayElement__clone__CloneArgs( RogueClassCmdWriteArrayElement* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdWriteArrayElement__init__Token_Cmd_Cmd_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteArrayElement*,ROGUE_CREATE_OBJECT(CmdWriteArrayElement))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->context), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->index), clone_args_0 ))), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->new_value), clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdWriteArrayElement__resolve__Scope( RogueClassCmdWriteArrayElement* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->_array_type))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  THIS->context = (call_ROGUEM52( 25, ROGUE_ARG(THIS->context), scope_0 ));
  THIS->_array_type = (call_ROGUEM60( 22, ROGUE_ARG(THIS->context) ));
  THIS->index = ((RogueCmd__require_integer( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->index), scope_0 ))) )));
  THIS->new_value = (call_ROGUEM52( 25, ROGUE_ARG((call_ROGUEM53( 5, ROGUE_ARG(((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->new_value), scope_0 ))) )))), ROGUE_ARG(THIS->_array_type->_element_type), scope_0 ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdWriteArrayElement__type( RogueClassCmdWriteArrayElement* THIS )
{
  return (RogueClassType*)(THIS->_array_type->_element_type);
}

void RogueCmdWriteArrayElement__write_cpp__CPPWriter_Logical( RogueClassCmdWriteArrayElement* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  ROGUE_DEF_LOCAL_REF(RogueClassType*,element_type_2,(THIS->_array_type->_element_type));
  if (((RogueType__is_primitive( element_type_2 ))))
  {
    call_ROGUEM72( 30, ROGUE_ARG(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[187] );
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ROGUE_ARG(((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real64))) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1024] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ROGUE_ARG(((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real32))) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1025] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ROGUE_ARG(((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int64))) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1026] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ROGUE_ARG(((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Int32))) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1027] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ROGUE_ARG(((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character))) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1028] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ROGUE_ARG(((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte))) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1029] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ROGUE_ARG(((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1030] );
      }
    }
    call_ROGUEM72( 30, ROGUE_ARG(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1034] );
    call_ROGUEM72( 30, ROGUE_ARG(THIS->new_value), writer_0, false );
  }
  else if (((RogueType__is_reference( element_type_2 ))))
  {
    call_ROGUEM72( 30, ROGUE_ARG(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[187] );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1035] );
    call_ROGUEM72( 30, ROGUE_ARG(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1034] );
    call_ROGUEM72( 30, ROGUE_ARG(THIS->new_value), writer_0, false );
  }
  else
  {
    RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__Type( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[533] )))), element_type_2 )))), Rogue_literal_strings[1032] );
    call_ROGUEM72( 30, ROGUE_ARG(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1033] );
    call_ROGUEM72( 30, ROGUE_ARG(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[1034] );
    call_ROGUEM72( 30, ROGUE_ARG(THIS->new_value), writer_0, false );
  }
}

void RogueCmdWriteArrayElement__trace_used_code( RogueClassCmdWriteArrayElement* THIS )
{
  call_ROGUEM59( 31, ROGUE_ARG(THIS->context) );
  RogueType__trace_used_code( ROGUE_ARG(THIS->_array_type) );
  call_ROGUEM59( 31, ROGUE_ARG(THIS->new_value) );
  call_ROGUEM59( 31, ROGUE_ARG(THIS->index) );
}

void RogueCmdWriteArrayElement__update_this_type__Scope( RogueClassCmdWriteArrayElement* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->context), scope_0 );
  call_ROGUEM56( 32, ROGUE_ARG(THIS->new_value), scope_0 );
  call_ROGUEM56( 32, ROGUE_ARG(THIS->index), scope_0 );
}

RogueClassCmdWriteArrayElement* RogueCmdWriteArrayElement__init_object( RogueClassCmdWriteArrayElement* THIS )
{
  return (RogueClassCmdWriteArrayElement*)(THIS);
}

RogueClassCmdWriteArrayElement* RogueCmdWriteArrayElement__init__Token_Cmd_Cmd_Cmd( RogueClassCmdWriteArrayElement* THIS, RogueClassToken* _auto_2317_0, RogueClassCmd* _auto_2318_1, RogueClassCmd* _auto_2319_2, RogueClassCmd* _auto_2320_3 )
{
  THIS->new_value = _auto_2320_3;
  THIS->index = _auto_2319_2;
  THIS->context = _auto_2318_1;
  THIS->t = _auto_2317_0;
  return (RogueClassCmdWriteArrayElement*)(THIS);
}

RogueString* RogueCmdConvertToPrimitiveType__type_name( RogueClassCmdConvertToPrimitiveType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1138]);
}

RogueClassCmd* RogueCmdConvertToPrimitiveType__clone__CloneArgs( RogueClassCmdConvertToPrimitiveType* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueClassCmdConvertToPrimitiveType*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ROGUE_ARG(((RogueClassCmdTypeOperator*)ROGUE_CREATE_REF(RogueClassCmdConvertToPrimitiveType*,ROGUE_CREATE_OBJECT(CmdConvertToPrimitiveType)))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->operand), clone_args_0 ))), ROGUE_ARG(THIS->_target_type) ))))))));
}

RogueClassCmd* RogueCmdConvertToPrimitiveType__resolve__Scope( RogueClassCmdConvertToPrimitiveType* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = ((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->operand), scope_0 ))) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdConvertToPrimitiveType__write_cpp__CPPWriter_Logical( RogueClassCmdConvertToPrimitiveType* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[533] )))), ROGUE_ARG(THIS->_target_type->cpp_class_name) )))), Rogue_literal_strings[971] );
  call_ROGUEM72( 30, ROGUE_ARG(THIS->operand), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[493] );
}

RogueClassCmdConvertToPrimitiveType* RogueCmdConvertToPrimitiveType__init_object( RogueClassCmdConvertToPrimitiveType* THIS )
{
  return (RogueClassCmdConvertToPrimitiveType*)(THIS);
}

RogueString* RogueCmdSelectCaseArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[791]);
}

RogueString* RogueCmdSelectCaseListReader__type_name( RogueClassCmdSelectCaseListReader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1141]);
}

RogueLogical RogueCmdSelectCaseListReader__has_another( RogueClassCmdSelectCaseListReader* THIS )
{
  if (THIS->is_limited)
  {
    return (RogueLogical)(THIS->position < THIS->limit);
  }
  else
  {
    return (RogueLogical)(THIS->position < THIS->list->count);
  }
}

RogueClassCmdSelectCase* RogueCmdSelectCaseListReader__read( RogueClassCmdSelectCaseListReader* THIS )
{
  ++THIS->position;
  return (RogueClassCmdSelectCase*)(((RogueClassCmdSelectCase*)(THIS->list->data->objects[(THIS->position - 1)])));
}

RogueClassCmdSelectCaseListReader* RogueCmdSelectCaseListReader__init__CmdSelectCaseList_Int32( RogueClassCmdSelectCaseListReader* THIS, RogueCmdSelectCaseList* _auto_2377_0, RogueInt32 _auto_2378_1 )
{
  THIS->position = _auto_2378_1;
  THIS->list = _auto_2377_0;
  return (RogueClassCmdSelectCaseListReader*)(THIS);
}

RogueClassCmdSelectCaseListReader* RogueCmdSelectCaseListReader__init_object( RogueClassCmdSelectCaseListReader* THIS )
{
  return (RogueClassCmdSelectCaseListReader*)(THIS);
}

RogueString* RogueCmdAdjustGlobal__type_name( RogueClassCmdAdjustGlobal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1158]);
}

RogueClassCmd* RogueCmdAdjustGlobal__clone__CloneArgs( RogueClassCmdAdjustGlobal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAdjustGlobal__init__Token_Property_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAdjustGlobal*,ROGUE_CREATE_OBJECT(CmdAdjustGlobal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->global_info), ROGUE_ARG(THIS->delta) ))))));
}

RogueClassCmd* RogueCmdAdjustGlobal__resolve__Scope( RogueClassCmdAdjustGlobal* THIS, RogueClassScope* scope_0 )
{
  if (((RogueType__is_compound( ROGUE_ARG(THIS->global_info->_type) ))))
  {
    return (RogueClassCmd*)(((RogueCmdWriteGlobal__resolve__Scope( ROGUE_ARG(((RogueCmdWriteGlobal__init__Token_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteGlobal*,ROGUE_CREATE_OBJECT(CmdWriteGlobal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->global_info), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadGlobal*,ROGUE_CREATE_OBJECT(CmdReadGlobal))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->global_info) )))))), Rogue_literal_strings[921], ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->delta) )))))) )))))) )))), scope_0 ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdAdjustGlobal__type( RogueClassCmdAdjustGlobal* THIS )
{
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

void RogueCmdAdjustGlobal__write_cpp__CPPWriter_Logical( RogueClassCmdAdjustGlobal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (THIS->delta > 0)
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[217] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[7] );
  }
  RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( ROGUE_ARG(((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[41] )))), ROGUE_ARG(THIS->global_info->type_context->cpp_name) )))), Rogue_literal_strings[425] );
  RogueCPPWriter__print__String( writer_0, ROGUE_ARG(THIS->global_info->cpp_name) );
}

void RogueCmdAdjustGlobal__trace_used_code( RogueClassCmdAdjustGlobal* THIS )
{
  RogueType__trace_used_code( ROGUE_ARG(THIS->global_info->type_context) );
  RogueType__trace_used_code( ROGUE_ARG(THIS->global_info->_type) );
}

void RogueCmdAdjustGlobal__update_this_type__Scope( RogueClassCmdAdjustGlobal* THIS, RogueClassScope* scope_0 )
{
}

RogueClassCmdAdjustGlobal* RogueCmdAdjustGlobal__init_object( RogueClassCmdAdjustGlobal* THIS )
{
  return (RogueClassCmdAdjustGlobal*)(THIS);
}

RogueClassCmdAdjustGlobal* RogueCmdAdjustGlobal__init__Token_Property_Int32( RogueClassCmdAdjustGlobal* THIS, RogueClassToken* _auto_2596_0, RogueClassProperty* _auto_2597_1, RogueInt32 _auto_2598_2 )
{
  THIS->delta = _auto_2598_2;
  THIS->global_info = _auto_2597_1;
  THIS->t = _auto_2596_0;
  return (RogueClassCmdAdjustGlobal*)(THIS);
}

RogueString* RogueCmdAdjustProperty__type_name( RogueClassCmdAdjustProperty* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1159]);
}

RogueClassCmd* RogueCmdAdjustProperty__clone__CloneArgs( RogueClassCmdAdjustProperty* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAdjustProperty__init__Token_Cmd_Property_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAdjustProperty*,ROGUE_CREATE_OBJECT(CmdAdjustProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->context), clone_args_0 ))), ROGUE_ARG(THIS->property_info), ROGUE_ARG(THIS->delta) ))))));
}

RogueClassCmd* RogueCmdAdjustProperty__resolve__Scope( RogueClassCmdAdjustProperty* THIS, RogueClassScope* scope_0 )
{
  THIS->context = ((RogueCmd__require_value( ROGUE_ARG((call_ROGUEM52( 25, ROGUE_ARG(THIS->context), scope_0 ))) )));
  if (((RogueType__is_compound( ROGUE_ARG(THIS->property_info->_type) ))))
  {
    return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ROGUE_ARG(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdWriteProperty*,ROGUE_CREATE_OBJECT(CmdWriteProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG((call_ROGUEM71( 6, ROGUE_ARG(THIS->context), ROGUE_ARG(((RogueClassCloneArgs*)(NULL))) ))), ROGUE_ARG(THIS->property_info), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdAccess*,ROGUE_CREATE_OBJECT(CmdAccess))), ROGUE_ARG(THIS->t), ROGUE_ARG(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdReadProperty*,ROGUE_CREATE_OBJECT(CmdReadProperty))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->context), ROGUE_ARG(THIS->property_info) )))))), Rogue_literal_strings[921], ROGUE_ARG(((RogueClassCmd*)(((RogueCmdLiteralInt32__init__Token_Int32( ROGUE_ARG(ROGUE_CREATE_REF(RogueClassCmdLiteralInt32*,ROGUE_CREATE_OBJECT(CmdLiteralInt32))), ROGUE_ARG(THIS->t), ROGUE_ARG(THIS->delta) )))))) )))))) )))), scope_0 ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdAdjustProperty__type( RogueClassCmdAdjustProperty* THIS )
{
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

void RogueCmdAdjustProperty__write_cpp__CPPWriter_Logical( RogueClassCmdAdjustProperty* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (THIS->delta > 0)
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[217] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[7] );
  }
  call_ROGUEM72( 30, ROGUE_ARG(THIS->context), writer_0, false );
  RogueCPPWriter__print_access_operator__Type( writer_0, ROGUE_ARG((call_ROGUEM60( 29, ROGUE_ARG(THIS->context) ))) );
  RogueCPPWriter__print__String( writer_0, ROGUE_ARG(THIS->property_info->cpp_name) );
}

void RogueCmdAdjustProperty__trace_used_code( RogueClassCmdAdjustProperty* THIS )
{
  call_ROGUEM59( 31, ROGUE_ARG(THIS->context) );
  RogueType__trace_used_code( ROGUE_ARG(THIS->property_info->type_context) );
  RogueType__trace_used_code( ROGUE_ARG(THIS->property_info->_type) );
}

void RogueCmdAdjustProperty__update_this_type__Scope( RogueClassCmdAdjustProperty* THIS, RogueClassScope* scope_0 )
{
  call_ROGUEM56( 32, ROGUE_ARG(THIS->context), scope_0 );
}

RogueClassCmdAdjustProperty* RogueCmdAdjustProperty__init_object( RogueClassCmdAdjustProperty* THIS )
{
  return (RogueClassCmdAdjustProperty*)(THIS);
}

RogueClassCmdAdjustProperty* RogueCmdAdjustProperty__init__Token_Cmd_Property_Int32( RogueClassCmdAdjustProperty* THIS, RogueClassToken* _auto_2599_0, RogueClassCmd* _auto_2600_1, RogueClassProperty* _auto_2601_2, RogueInt32 _auto_2602_3 )
{
  THIS->delta = _auto_2602_3;
  THIS->property_info = _auto_2601_2;
  THIS->context = _auto_2600_1;
  THIS->t = _auto_2599_0;
  return (RogueClassCmdAdjustProperty*)(THIS);
}

RogueString* RogueString_CmdTableEntryList__to_String( RogueTableEntry_of_String_CmdList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_String_CmdList*,_auto_2905_2,(THIS));
    RogueInt32 _auto_2906_3 = (0);
    for (;_auto_2906_3 < _auto_2905_2->count;++_auto_2906_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassString_CmdTableEntry*,value_4,(((RogueClassString_CmdTableEntry*)(_auto_2905_2->data->objects[_auto_2906_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_CmdTableEntryList__type_name( RogueTableEntry_of_String_CmdList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1143]);
}

RogueTableEntry_of_String_CmdList* RogueString_CmdTableEntryList__init_object( RogueTableEntry_of_String_CmdList* THIS )
{
  return (RogueTableEntry_of_String_CmdList*)(THIS);
}

RogueTableEntry_of_String_CmdList* RogueString_CmdTableEntryList__init__Int32_String_CmdTableEntry( RogueTableEntry_of_String_CmdList* THIS, RogueInt32 initial_capacity_0, RogueClassString_CmdTableEntry* initial_value_1 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_CmdTableEntry*), true );
    {
      RogueInt32 i_2 = (1);
      RogueInt32 _auto_2757_3 = (initial_capacity_0);
      for (;i_2 <= _auto_2757_3;++i_2)
      {
        RogueString_CmdTableEntryList__add__String_CmdTableEntry( ROGUE_ARG(THIS), initial_value_1 );
      }
    }
  }
  return (RogueTableEntry_of_String_CmdList*)(THIS);
}

RogueTableEntry_of_String_CmdList* RogueString_CmdTableEntryList__add__String_CmdTableEntry( RogueTableEntry_of_String_CmdList* THIS, RogueClassString_CmdTableEntry* value_0 )
{
  ((RogueString_CmdTableEntryList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_CmdList*)(THIS);
}

RogueInt32 RogueString_CmdTableEntryList__capacity( RogueTableEntry_of_String_CmdList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_CmdList* RogueString_CmdTableEntryList__reserve__Int32( RogueTableEntry_of_String_CmdList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassString_CmdTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueString_CmdTableEntryList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassString_CmdTableEntry*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_CmdList*)(THIS);
}

RogueString* RogueString_CmdTableEntry__type_name( RogueClassString_CmdTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1142]);
}

RogueClassString_CmdTableEntry* RogueString_CmdTableEntry__init__String_Cmd_Int32( RogueClassString_CmdTableEntry* THIS, RogueString* _key_0, RogueClassCmd* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_CmdTableEntry*)(THIS);
}

RogueClassString_CmdTableEntry* RogueString_CmdTableEntry__init_object( RogueClassString_CmdTableEntry* THIS )
{
  return (RogueClassString_CmdTableEntry*)(THIS);
}

RogueString* RogueString_CmdTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1144]);
}

RogueString* RogueNativeCodeToken__to_String( RogueClassNativeCodeToken* THIS )
{
  return (RogueString*)(THIS->value);
}

RogueString* RogueNativeCodeToken__type_name( RogueClassNativeCodeToken* THIS )
{
  return (RogueString*)(Rogue_literal_strings[1145]);
}

RogueString* RogueNativeCodeToken__quoted_name( RogueClassNativeCodeToken* THIS )
{
  if (((void*)THIS->_type) == ((void*)RogueTokenType_keyword_nativeHeader))
  {
    return (RogueString*)(Rogue_literal_strings[151]);
  }
  return (RogueString*)(Rogue_literal_strings[150]);
}

RogueClassNativeCodeToken* RogueNativeCodeToken__init_object( RogueClassNativeCodeToken* THIS )
{
  return (RogueClassNativeCodeToken*)(THIS);
}

RogueClassNativeCodeToken* RogueNativeCodeToken__init__TokenType_String( RogueClassNativeCodeToken* THIS, RogueClassTokenType* _auto_2816_0, RogueString* _auto_2817_1 )
{
  THIS->value = _auto_2817_1;
  THIS->_type = _auto_2816_0;
  return (RogueClassNativeCodeToken*)(THIS);
}

RogueString* RogueString_TokenListTableEntryList__to_String( RogueTableEntry_of_String_TokenListList* THIS )
{
  ROGUE_DEF_LOCAL_REF(RogueStringBuilder*,buffer_0,(((RogueStringBuilder__init( ROGUE_ARG(ROGUE_CREATE_REF(RogueStringBuilder*,ROGUE_CREATE_OBJECT(StringBuilder))) )))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    ROGUE_DEF_LOCAL_REF(RogueTableEntry_of_String_TokenListList*,_auto_2943_2,(THIS));
    RogueInt32 _auto_2944_3 = (0);
    for (;_auto_2944_3 < _auto_2943_2->count;++_auto_2944_3)
    {
      ROGUE_DEF_LOCAL_REF(RogueClassString_TokenListTableEntry*,value_4,(((RogueClassString_TokenListTableEntry*)(_auto_2943_2->data->objects[_auto_2944_3]))));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (((void*)value_4) == ((void*)NULL))
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ROGUE_ARG((call_ROGUEM2( 1, ((RogueObject*)value_4) ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_TokenListTableEntryList__type_name( RogueTableEntry_of_String_TokenListList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[749]);
}

RogueTableEntry_of_String_TokenListList* RogueString_TokenListTableEntryList__init_object( RogueTableEntry_of_String_TokenListList* THIS )
{
  return (RogueTableEntry_of_String_TokenListList*)(THIS);
}

RogueTableEntry_of_String_TokenListList* RogueString_TokenListTableEntryList__init__Int32_String_TokenListTableEntry( RogueTableEntry_of_String_TokenListList* THIS, RogueInt32 initial_capacity_0, RogueClassString_TokenListTableEntry* initial_value_1 )
{
  if (!!(initial_capacity_0))
  {
    THIS->data = RogueType_create_array( initial_capacity_0, sizeof(RogueClassString_TokenListTableEntry*), true );
    {
      RogueInt32 i_2 = (1);
      RogueInt32 _auto_2818_3 = (initial_capacity_0);
      for (;i_2 <= _auto_2818_3;++i_2)
      {
        RogueString_TokenListTableEntryList__add__String_TokenListTableEntry( ROGUE_ARG(THIS), initial_value_1 );
      }
    }
  }
  return (RogueTableEntry_of_String_TokenListList*)(THIS);
}

RogueTableEntry_of_String_TokenListList* RogueString_TokenListTableEntryList__add__String_TokenListTableEntry( RogueTableEntry_of_String_TokenListList* THIS, RogueClassString_TokenListTableEntry* value_0 )
{
  ((RogueString_TokenListTableEntryList__reserve__Int32( ROGUE_ARG(THIS), 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_TokenListList*)(THIS);
}

RogueInt32 RogueString_TokenListTableEntryList__capacity( RogueTableEntry_of_String_TokenListList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInt32)(0);
  }
  return (RogueInt32)(THIS->data->count);
}

RogueTableEntry_of_String_TokenListList* RogueString_TokenListTableEntryList__reserve__Int32( RogueTableEntry_of_String_TokenListList* THIS, RogueInt32 additional_count_0 )
{
  RogueInt32 required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    if (required_capacity_1 < 10)
    {
      required_capacity_1 = ((RogueInt32)10);
    }
    THIS->data = RogueType_create_array( required_capacity_1, sizeof(RogueClassString_TokenListTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInt32 cap_2 = (((RogueString_TokenListTableEntryList__capacity( ROGUE_ARG(THIS) ))));
    if (required_capacity_1 < (cap_2 + cap_2))
    {
      required_capacity_1 = ((RogueInt32)(cap_2 + cap_2));
    }
    ROGUE_DEF_LOCAL_REF(RogueArray*,new_data_3,(RogueType_create_array( required_capacity_1, sizeof(RogueClassString_TokenListTableEntry*), true )));
    RogueArray_set(new_data_3,0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_TokenListList*)(THIS);
}

RogueString* RogueString_TokenListTableEntry__type_name( RogueClassString_TokenListTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[706]);
}

RogueClassString_TokenListTableEntry* RogueString_TokenListTableEntry__init__String_TokenList_Int32( RogueClassString_TokenListTableEntry* THIS, RogueString* _key_0, RogueTokenList* _value_1, RogueInt32 _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_TokenListTableEntry*)(THIS);
}

RogueClassString_TokenListTableEntry* RogueString_TokenListTableEntry__init_object( RogueClassString_TokenListTableEntry* THIS )
{
  return (RogueClassString_TokenListTableEntry*)(THIS);
}

RogueString* RogueString_TokenListTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[792]);
}

RogueString* RogueSystemEnvironment__get__String( RogueClassSystemEnvironment THIS, RogueString* name_0 )
{
  ROGUE_DEF_LOCAL_REF(RogueString*,result_1,0);
  char buffer[128];
  RogueString_to_c_string( name_0, buffer, 128 );
  char* c_result = getenv( buffer );
  if (c_result)
  {
    result_1 = RogueString_create_from_c_string( c_result );
  }

  return (RogueString*)(((((!(!!(result_1))))) ? (((RogueString*)(NULL))) : ((RogueString__decode_utf8( result_1 )))));
}


void Rogue_configure( int argc, const char* argv[] )
{
  if (Rogue_configured) return;
  Rogue_configured = 1;
  
  Rogue_argc = argc;
  Rogue_argv = argv;
  
  Rogue_configure_gc();
  Rogue_configure_types();
  
  RogueTypeReal64 = &Rogue_types[ 0 ];
  RogueTypeInt64 = &Rogue_types[ 1 ];
  RogueTypeInt32 = &Rogue_types[ 2 ];
  RogueTypeStringBuilder = &Rogue_types[ 3 ];
  RogueTypeObject = &Rogue_types[ 4 ];
  RogueTypeByte = &Rogue_types[ 5 ];
  RogueTypeCharacter = &Rogue_types[ 6 ];
  RogueTypeLogical = &Rogue_types[ 7 ];
  RogueTypeString = &Rogue_types[ 8 ];
  RogueTypeCharacterList = &Rogue_types[ 9 ];
  RogueTypeGenericList = &Rogue_types[ 10 ];
  RogueTypeArray = &Rogue_types[ 12 ];
  RogueTypeStringReader = &Rogue_types[ 13 ];
  RogueTypeCharacterReader = &Rogue_types[ 14 ];
  RogueTypeStringList = &Rogue_types[ 15 ];
  RogueTypeGlobal = &Rogue_types[ 17 ];
  RogueTypePrintWriterAspect = &Rogue_types[ 18 ];
  RogueTypeConsole = &Rogue_types[ 19 ];
  RogueTypeCharacterWriter = &Rogue_types[ 20 ];
  RogueTypeRogueC = &Rogue_types[ 21 ];
  RogueTypeException = &Rogue_types[ 22 ];
  RogueTypeStackTrace = &Rogue_types[ 23 ];
  RogueTypeProgram = &Rogue_types[ 24 ];
  RogueTypeTemplateList = &Rogue_types[ 25 ];
  RogueTypeTemplate = &Rogue_types[ 26 ];
  RogueTypeString_TemplateTable = &Rogue_types[ 27 ];
  RogueTypeString_AugmentListTable = &Rogue_types[ 28 ];
  RogueTypeMethod = &Rogue_types[ 29 ];
  RogueTypePropertyList = &Rogue_types[ 30 ];
  RogueTypeProperty = &Rogue_types[ 31 ];
  RogueTypeString_MethodListTable = &Rogue_types[ 32 ];
  RogueTypeTypeList = &Rogue_types[ 33 ];
  RogueTypeType = &Rogue_types[ 34 ];
  RogueTypeString_TypeTable = &Rogue_types[ 35 ];
  RogueTypeString_Int32Table = &Rogue_types[ 36 ];
  RogueTypeString_StringListTable = &Rogue_types[ 37 ];
  RogueTypeString_Int32TableEntry = &Rogue_types[ 38 ];
  RogueTypeInt32_TemplateTable = &Rogue_types[ 39 ];
  RogueTypeToken = &Rogue_types[ 40 ];
  RogueTypeError = &Rogue_types[ 41 ];
  RogueTypeRogueError = &Rogue_types[ 42 ];
  RogueTypeCmdLabel = &Rogue_types[ 43 ];
  RogueTypeCmd = &Rogue_types[ 44 ];
  RogueTypeCmdStatementList = &Rogue_types[ 45 ];
  RogueTypeCmdList = &Rogue_types[ 46 ];
  RogueTypeAttributes = &Rogue_types[ 48 ];
  RogueTypeCmdReturn = &Rogue_types[ 49 ];
  RogueTypeCmdStatement = &Rogue_types[ 50 ];
  RogueTypeTokenType = &Rogue_types[ 51 ];
  RogueTypeScope = &Rogue_types[ 53 ];
  RogueTypeMethodList = &Rogue_types[ 54 ];
  RogueTypeFunction_Type_RETURNSLogical = &Rogue_types[ 57 ];
  RogueTypeFunction_159 = &Rogue_types[ 58 ];
  RogueTypeFunction_160 = &Rogue_types[ 59 ];
  RogueTypeCPPWriter = &Rogue_types[ 60 ];
  RogueTypeString_MethodTable = &Rogue_types[ 61 ];
  RogueTypeLocalList = &Rogue_types[ 62 ];
  RogueTypeLocal = &Rogue_types[ 63 ];
  RogueTypeInt32List = &Rogue_types[ 65 ];
  RogueTypeMath = &Rogue_types[ 67 ];
  RogueTypeByteList = &Rogue_types[ 68 ];
  RogueTypeSystem = &Rogue_types[ 70 ];
  RogueTypeReader_of_String = &Rogue_types[ 71 ];
  RogueTypeString_LogicalTable = &Rogue_types[ 72 ];
  RogueTypeParserList = &Rogue_types[ 73 ];
  RogueTypeParser = &Rogue_types[ 74 ];
  RogueTypeString_ParseReaderTable = &Rogue_types[ 75 ];
  RogueTypeStopwatch = &Rogue_types[ 76 ];
  RogueTypeFile = &Rogue_types[ 77 ];
  RogueTypeCmdMakeRequisite = &Rogue_types[ 79 ];
  RogueTypeTokenList = &Rogue_types[ 80 ];
  RogueTypeLineReader = &Rogue_types[ 81 ];
  RogueTypeTypeParameterList = &Rogue_types[ 82 ];
  RogueTypeTypeParameter = &Rogue_types[ 83 ];
  RogueTypeAugmentList = &Rogue_types[ 84 ];
  RogueTypeAugment = &Rogue_types[ 85 ];
  RogueTypeString_TokenTypeTable = &Rogue_types[ 87 ];
  RogueTypeLiteralCharacterToken = &Rogue_types[ 88 ];
  RogueTypeLiteralInt64Token = &Rogue_types[ 89 ];
  RogueTypeLiteralInt32Token = &Rogue_types[ 90 ];
  RogueTypeLiteralReal64Token = &Rogue_types[ 91 ];
  RogueTypeStringDataToken = &Rogue_types[ 92 ];
  RogueTypeString_TypeSpecializerTable = &Rogue_types[ 94 ];
  RogueTypeTypeSpecializer = &Rogue_types[ 96 ];
  RogueTypeTypeSpecializerList = &Rogue_types[ 97 ];
  RogueTypeTableEntry_of_String_TemplateList = &Rogue_types[ 98 ];
  RogueTypeString_TemplateTableEntry = &Rogue_types[ 99 ];
  RogueTypeTableEntry_of_String_AugmentListList = &Rogue_types[ 101 ];
  RogueTypeString_AugmentListTableEntry = &Rogue_types[ 102 ];
  RogueTypeCmdLabelList = &Rogue_types[ 104 ];
  RogueTypeString_CmdLabelTable = &Rogue_types[ 105 ];
  RogueTypeCloneArgs = &Rogue_types[ 106 ];
  RogueTypeCloneMethodArgs = &Rogue_types[ 107 ];
  RogueTypeCmdAccess = &Rogue_types[ 108 ];
  RogueTypeCmdArgs = &Rogue_types[ 109 ];
  RogueTypeCmdFlagArgList = &Rogue_types[ 110 ];
  RogueTypeCmdFlagArg = &Rogue_types[ 111 ];
  RogueTypeCmdAssign = &Rogue_types[ 112 ];
  RogueTypeCmdControlStructureList = &Rogue_types[ 113 ];
  RogueTypeCmdControlStructure = &Rogue_types[ 114 ];
  RogueTypeCmdLiteralThis = &Rogue_types[ 115 ];
  RogueTypeCmdThisContext = &Rogue_types[ 116 ];
  RogueTypeCmdGenericLoop = &Rogue_types[ 118 ];
  RogueTypeCmdLiteralInt32 = &Rogue_types[ 119 ];
  RogueTypeCmdLiteral = &Rogue_types[ 120 ];
  RogueTypeCmdCompareNE = &Rogue_types[ 121 ];
  RogueTypeCmdComparison = &Rogue_types[ 122 ];
  RogueTypeCmdBinary = &Rogue_types[ 123 ];
  RogueTypeTaskArgs = &Rogue_types[ 124 ];
  RogueTypeCmdTaskControl = &Rogue_types[ 126 ];
  RogueTypeCmdTaskControlSection = &Rogue_types[ 127 ];
  RogueTypeTableEntry_of_String_MethodListList = &Rogue_types[ 128 ];
  RogueTypeString_MethodListTableEntry = &Rogue_types[ 129 ];
  RogueTypeDefinitionList = &Rogue_types[ 131 ];
  RogueTypeDefinition = &Rogue_types[ 132 ];
  RogueTypeString_DefinitionTable = &Rogue_types[ 133 ];
  RogueTypeNativePropertyList = &Rogue_types[ 134 ];
  RogueTypeNativeProperty = &Rogue_types[ 135 ];
  RogueTypeString_PropertyTable = &Rogue_types[ 136 ];
  RogueTypeCmdLiteralNull = &Rogue_types[ 137 ];
  RogueTypeCmdCreateCompound = &Rogue_types[ 138 ];
  RogueTypeCmdLiteralLogical = &Rogue_types[ 139 ];
  RogueTypeCmdLiteralString = &Rogue_types[ 140 ];
  RogueTypeCmdWriteGlobal = &Rogue_types[ 141 ];
  RogueTypeCmdWriteProperty = &Rogue_types[ 142 ];
  RogueTypeTableEntry_of_String_TypeList = &Rogue_types[ 145 ];
  RogueTypeString_TypeTableEntry = &Rogue_types[ 146 ];
  RogueTypeTableEntry_of_String_Int32List = &Rogue_types[ 148 ];
  RogueTypeTableEntry_of_String_StringListList = &Rogue_types[ 150 ];
  RogueTypeString_StringListTableEntry = &Rogue_types[ 151 ];
  RogueTypeTableEntry_of_Int32_TemplateList = &Rogue_types[ 153 ];
  RogueTypeInt32_TemplateTableEntry = &Rogue_types[ 154 ];
  RogueTypeCmdCastToType = &Rogue_types[ 156 ];
  RogueTypeCmdTypeOperator = &Rogue_types[ 157 ];
  RogueTypeCmdLogicalize = &Rogue_types[ 158 ];
  RogueTypeCmdUnary = &Rogue_types[ 159 ];
  RogueTypeCmdReadSingleton = &Rogue_types[ 160 ];
  RogueTypeCmdCallInlineNativeRoutine = &Rogue_types[ 162 ];
  RogueTypeCmdCallInlineNative = &Rogue_types[ 163 ];
  RogueTypeCmdCall = &Rogue_types[ 164 ];
  RogueTypeCmdCallNativeRoutine = &Rogue_types[ 165 ];
  RogueTypeMacroArgs = &Rogue_types[ 166 ];
  RogueTypeCmdInlineNative = &Rogue_types[ 167 ];
  RogueTypeCmdCallRoutine = &Rogue_types[ 168 ];
  RogueTypeCmdReadArrayCount = &Rogue_types[ 169 ];
  RogueTypeCmdCallInlineNativeMethod = &Rogue_types[ 170 ];
  RogueTypeCmdCallNativeMethod = &Rogue_types[ 171 ];
  RogueTypeCmdCallAspectMethod = &Rogue_types[ 172 ];
  RogueTypeCmdCallDynamicMethod = &Rogue_types[ 173 ];
  RogueTypeCmdCallMethod = &Rogue_types[ 174 ];
  RogueTypeCandidateMethods = &Rogue_types[ 175 ];
  RogueTypeCmdCreateFunction = &Rogue_types[ 176 ];
  RogueTypeFnParamList = &Rogue_types[ 177 ];
  RogueTypeFnParam = &Rogue_types[ 178 ];
  RogueTypeCmdReadLocal = &Rogue_types[ 181 ];
  RogueTypeTableEntry_of_String_MethodList = &Rogue_types[ 182 ];
  RogueTypeString_MethodTableEntry = &Rogue_types[ 183 ];
  RogueTypeTableEntry_of_String_LogicalList = &Rogue_types[ 185 ];
  RogueTypeString_LogicalTableEntry = &Rogue_types[ 186 ];
  RogueTypeTokenReader = &Rogue_types[ 188 ];
  RogueTypeString_StringTable = &Rogue_types[ 189 ];
  RogueTypeTokenizer = &Rogue_types[ 190 ];
  RogueTypeParseReader = &Rogue_types[ 191 ];
  RogueTypePreprocessor = &Rogue_types[ 192 ];
  RogueTypeEOLToken = &Rogue_types[ 193 ];
  RogueTypeCmdAdd = &Rogue_types[ 194 ];
  RogueTypeCmdNativeHeader = &Rogue_types[ 195 ];
  RogueTypeCmdNativeCode = &Rogue_types[ 196 ];
  RogueTypeCmdIf = &Rogue_types[ 197 ];
  RogueTypeCmdWhich = &Rogue_types[ 198 ];
  RogueTypeCmdContingent = &Rogue_types[ 199 ];
  RogueTypeCmdTry = &Rogue_types[ 200 ];
  RogueTypeCmdAwait = &Rogue_types[ 201 ];
  RogueTypeCmdYield = &Rogue_types[ 202 ];
  RogueTypeCmdThrow = &Rogue_types[ 203 ];
  RogueTypeCmdFormattedString = &Rogue_types[ 204 ];
  RogueTypeCmdTrace = &Rogue_types[ 205 ];
  RogueTypeCmdEscape = &Rogue_types[ 206 ];
  RogueTypeCmdNextIteration = &Rogue_types[ 207 ];
  RogueTypeCmdNecessary = &Rogue_types[ 208 ];
  RogueTypeCmdSufficient = &Rogue_types[ 209 ];
  RogueTypeCmdAdjust = &Rogue_types[ 210 ];
  RogueTypeCmdModifyAndAssign = &Rogue_types[ 211 ];
  RogueTypeCmdWhichCaseList = &Rogue_types[ 212 ];
  RogueTypeCmdWhichCase = &Rogue_types[ 213 ];
  RogueTypeCmdCatchList = &Rogue_types[ 214 ];
  RogueTypeCmdCatch = &Rogue_types[ 215 ];
  RogueTypeCmdLocalDeclaration = &Rogue_types[ 216 ];
  RogueTypeCmdAdjustLocal = &Rogue_types[ 217 ];
  RogueTypeCmdCompareLE = &Rogue_types[ 218 ];
  RogueTypeCmdRange = &Rogue_types[ 219 ];
  RogueTypeCmdModifyAndAssignLocal = &Rogue_types[ 220 ];
  RogueTypeCmdResolvedModifyAndAssign = &Rogue_types[ 221 ];
  RogueTypeCmdRangeUpTo = &Rogue_types[ 222 ];
  RogueTypeCmdCompareGE = &Rogue_types[ 223 ];
  RogueTypeCmdForEach = &Rogue_types[ 224 ];
  RogueTypeCmdRangeDownTo = &Rogue_types[ 225 ];
  RogueTypeCmdLogicalXor = &Rogue_types[ 226 ];
  RogueTypeCmdBinaryLogical = &Rogue_types[ 227 ];
  RogueTypeCmdLogicalOr = &Rogue_types[ 228 ];
  RogueTypeCmdLogicalAnd = &Rogue_types[ 229 ];
  RogueTypeCmdCompareEQ = &Rogue_types[ 230 ];
  RogueTypeCmdCompareIs = &Rogue_types[ 231 ];
  RogueTypeCmdCompareIsNot = &Rogue_types[ 232 ];
  RogueTypeCmdCompareLT = &Rogue_types[ 233 ];
  RogueTypeCmdCompareGT = &Rogue_types[ 234 ];
  RogueTypeCmdInstanceOf = &Rogue_types[ 235 ];
  RogueTypeCmdLogicalNot = &Rogue_types[ 236 ];
  RogueTypeCmdBitwiseXor = &Rogue_types[ 237 ];
  RogueTypeCmdBitwiseOp = &Rogue_types[ 238 ];
  RogueTypeCmdBitwiseOr = &Rogue_types[ 239 ];
  RogueTypeCmdBitwiseAnd = &Rogue_types[ 240 ];
  RogueTypeCmdBitwiseShiftLeft = &Rogue_types[ 241 ];
  RogueTypeCmdBitwiseShiftRight = &Rogue_types[ 242 ];
  RogueTypeCmdBitwiseShiftRightX = &Rogue_types[ 243 ];
  RogueTypeCmdSubtract = &Rogue_types[ 244 ];
  RogueTypeCmdMultiply = &Rogue_types[ 245 ];
  RogueTypeCmdDivide = &Rogue_types[ 246 ];
  RogueTypeCmdMod = &Rogue_types[ 247 ];
  RogueTypeCmdPower = &Rogue_types[ 248 ];
  RogueTypeCmdNegate = &Rogue_types[ 249 ];
  RogueTypeCmdBitwiseNot = &Rogue_types[ 250 ];
  RogueTypeCmdElementAccess = &Rogue_types[ 251 ];
  RogueTypeCmdListConvert = &Rogue_types[ 252 ];
  RogueTypeCmdConvertToType = &Rogue_types[ 253 ];
  RogueTypeCmdCreateCallback = &Rogue_types[ 254 ];
  RogueTypeCmdAs = &Rogue_types[ 255 ];
  RogueTypeCmdDefaultValue = &Rogue_types[ 256 ];
  RogueTypeCmdLiteralReal64 = &Rogue_types[ 257 ];
  RogueTypeCmdLiteralInt64 = &Rogue_types[ 258 ];
  RogueTypeCmdLiteralCharacter = &Rogue_types[ 259 ];
  RogueTypeCmdCreateList = &Rogue_types[ 260 ];
  RogueTypeCmdCallPriorMethod = &Rogue_types[ 261 ];
  RogueTypeFnArgList = &Rogue_types[ 262 ];
  RogueTypeFnArg = &Rogue_types[ 263 ];
  RogueTypeCmdSelect = &Rogue_types[ 264 ];
  RogueTypeCmdSelectCaseList = &Rogue_types[ 265 ];
  RogueTypeCmdSelectCase = &Rogue_types[ 266 ];
  RogueTypeCmdTypedLiteralList = &Rogue_types[ 267 ];
  RogueTypeTableEntry_of_String_ParseReaderList = &Rogue_types[ 268 ];
  RogueTypeString_ParseReaderTableEntry = &Rogue_types[ 269 ];
  RogueTypeIOError = &Rogue_types[ 271 ];
  RogueTypeFileReader = &Rogue_types[ 272 ];
  RogueTypeFileWriter = &Rogue_types[ 273 ];
  RogueTypeCmdNoAction = &Rogue_types[ 274 ];
  RogueTypeTokenListRebuilder = &Rogue_types[ 275 ];
  RogueTypeTableEntry_of_String_TokenTypeList = &Rogue_types[ 276 ];
  RogueTypeString_TokenTypeTableEntry = &Rogue_types[ 277 ];
  RogueTypeTableEntry_of_String_TypeSpecializerList = &Rogue_types[ 279 ];
  RogueTypeString_TypeSpecializerTableEntry = &Rogue_types[ 280 ];
  RogueTypeTableEntry_of_String_CmdLabelList = &Rogue_types[ 282 ];
  RogueTypeString_CmdLabelTableEntry = &Rogue_types[ 283 ];
  RogueTypeCmdCreateArray = &Rogue_types[ 285 ];
  RogueTypeCmdCreateObject = &Rogue_types[ 286 ];
  RogueTypeCmdReadGlobal = &Rogue_types[ 287 ];
  RogueTypeCmdReadProperty = &Rogue_types[ 288 ];
  RogueTypeCmdWriteSingleton = &Rogue_types[ 289 ];
  RogueTypeCmdWriteLocal = &Rogue_types[ 290 ];
  RogueTypeCmdModifyAndAssignGlobal = &Rogue_types[ 291 ];
  RogueTypeCmdModifyAndAssignProperty = &Rogue_types[ 292 ];
  RogueTypeCmdTaskControlSectionList = &Rogue_types[ 294 ];
  RogueTypeCmdBlock = &Rogue_types[ 295 ];
  RogueTypeTableEntry_of_String_DefinitionList = &Rogue_types[ 297 ];
  RogueTypeString_DefinitionTableEntry = &Rogue_types[ 298 ];
  RogueTypeTableEntry_of_String_PropertyList = &Rogue_types[ 300 ];
  RogueTypeString_PropertyTableEntry = &Rogue_types[ 301 ];
  RogueTypeString_CmdTable = &Rogue_types[ 303 ];
  RogueTypeCmdCallStaticMethod = &Rogue_types[ 304 ];
  RogueTypeTableEntry_of_String_StringList = &Rogue_types[ 306 ];
  RogueTypeString_StringTableEntry = &Rogue_types[ 307 ];
  RogueTypeDirectiveTokenType = &Rogue_types[ 309 ];
  RogueTypeStructuralDirectiveTokenType = &Rogue_types[ 310 ];
  RogueTypeEOLTokenType = &Rogue_types[ 311 ];
  RogueTypeStructureTokenType = &Rogue_types[ 312 ];
  RogueTypeNativeCodeTokenType = &Rogue_types[ 313 ];
  RogueTypeModifyAndAssignTokenType = &Rogue_types[ 314 ];
  RogueTypeString_TokenListTable = &Rogue_types[ 315 ];
  RogueTypePreprocessorTokenReader = &Rogue_types[ 316 ];
  RogueTypeCmdSwitch = &Rogue_types[ 318 ];
  RogueTypeCmdReadArrayElement = &Rogue_types[ 320 ];
  RogueTypeCmdWriteArrayElement = &Rogue_types[ 321 ];
  RogueTypeCmdConvertToPrimitiveType = &Rogue_types[ 322 ];
  RogueTypeCmdSelectCaseListReader = &Rogue_types[ 324 ];
  RogueTypeCmdSelectCaseReader = &Rogue_types[ 325 ];
  RogueTypeCmdAdjustGlobal = &Rogue_types[ 326 ];
  RogueTypeCmdAdjustProperty = &Rogue_types[ 327 ];
  RogueTypeTableEntry_of_String_CmdList = &Rogue_types[ 328 ];
  RogueTypeString_CmdTableEntry = &Rogue_types[ 329 ];
  RogueTypeNativeCodeToken = &Rogue_types[ 331 ];
  RogueTypeTableEntry_of_String_TokenListList = &Rogue_types[ 332 ];
  RogueTypeString_TokenListTableEntry = &Rogue_types[ 333 ];
  RogueTypeOptionalInt32 = &Rogue_types[ 335 ];
  RogueTypeOptionalCharacter = &Rogue_types[ 336 ];
  RogueTypeSystemEnvironment = &Rogue_types[ 337 ];

  Rogue_literal_strings[0] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "", 0 ) ); 
  Rogue_literal_strings[1] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ROGUE_GC_THRESHOLD", 18 ) ); 
  Rogue_literal_strings[2] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "null", 4 ) ); 
  Rogue_literal_strings[3] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "MB", 2 ) ); 
  Rogue_literal_strings[4] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "KB", 2 ) ); 
  Rogue_literal_strings[5] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "/Libraries/", 11 ) ); 
  Rogue_literal_strings[6] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "C++", 3 ) ); 
  Rogue_literal_strings[7] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--", 2 ) ); 
  Rogue_literal_strings[8] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--output", 8 ) ); 
  Rogue_literal_strings[9] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Output filepath expected after \"--output=\".", 43 ) ); 
  Rogue_literal_strings[10] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--execute", 9 ) ); 
  Rogue_literal_strings[11] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--debug", 7 ) ); 
  Rogue_literal_strings[12] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--libraries", 11 ) ); 
  Rogue_literal_strings[13] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "One or more paths expected after \"--libraries=\".", 48 ) ); 
  Rogue_literal_strings[14] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--libraries option specifies non-existent folder \"", 50 ) ); 
  Rogue_literal_strings[15] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\".", 2 ) ); 
  Rogue_literal_strings[16] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--main", 6 ) ); 
  Rogue_literal_strings[17] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Unexpected value for '--main' option.", 37 ) ); 
  Rogue_literal_strings[18] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--package", 9 ) ); 
  Rogue_literal_strings[19] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Java package name expected after \"--package=\" (e.g. \"com.developer.app\").", 73 ) ); 
  Rogue_literal_strings[20] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--requisite", 11 ) ); 
  Rogue_literal_strings[21] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--target", 8 ) ); 
  Rogue_literal_strings[22] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "One or more comma-separated target names expected after \"--target=\" (e.g. \"C++\").", 81 ) ); 
  Rogue_literal_strings[23] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--gc", 4 ) ); 
  Rogue_literal_strings[24] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "auto", 4 ) ); 
  Rogue_literal_strings[25] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "manual", 6 ) ); 
  Rogue_literal_strings[26] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "boehm", 5 ) ); 
  Rogue_literal_strings[27] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Unknown GC mode (--gc=", 22 ) ); 
  Rogue_literal_strings[28] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ")", 1 ) ); 
  Rogue_literal_strings[29] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "--gc-threshold", 14 ) ); 
  Rogue_literal_strings[30] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "A value such as 1.1MB, 512K, or 65536 expected after \"--gc-threshold=\".", 71 ) ); 
  Rogue_literal_strings[31] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "mb", 2 ) ); 
  Rogue_literal_strings[32] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "kb", 2 ) ); 
  Rogue_literal_strings[33] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Unknown option '", 16 ) ); 
  Rogue_literal_strings[34] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'.", 2 ) ); 
  Rogue_literal_strings[35] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Rogue Compiler v", 16 ) ); 
  Rogue_literal_strings[36] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "1.0.26.4", 8 ) ); 
  Rogue_literal_strings[37] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "March 14, 2016", 14 ) ); 
  Rogue_literal_strings[38] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\nUSAGE\n  roguec [options] file1.rogue [file2.rogue ...]\n\nOPTIONS\n  --main\n    Include a main() function in the output file.\n\n  --debug\n    Enables exception stack traces.\n\n  --execute[=\"args\"]\n    Use command line directives to compile and run the output of the\n    compiled .rogue program.  Automatically enables the --main option.\n\n  --gc[=[manual|auto|boehm]]\n    Set the garbage collection mode:\n      (no --gc)   - Manual GC mode, the default (see below).\n      --gc        - Auto GC mode (see below).\n      --gc=manual - Rogue_collect_garbage() must be called in-between calls\n                    into the Rogue runtime.\n      --gc=auto   - Rogue collects garbage as it executes.  Slower than\n                    'manual' without optimizations enabled.\n      --gc=boehm  - Uses the Boehm garbage collector.  The Boehm's GC library\n                    must be obtained separately and linked in.\n\n  --gc-threshold={number}[MB|K]\n    Specifies the default garbage collection threshold of the compiled program.\n    Default is 1MB.  If neither MB nor K is specified then the number is\n    assumed to be bytes.\n\n  --libraries=\"path1[;path2...]\"\n    Add one or more additional library folders to the search path.\n\n  --output=destpath/[filename]\n    Specify the destination folder and optionally the base filename for the\n    output.\n\n  --requisite=[ClassName|ClassName.method_name(ParamType1,ParamType2,...)],...\n\n  --target=", 1424 ) ); 
  Rogue_literal_strings[39] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "]", 1 ) ); 
  Rogue_literal_strings[40] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ",Mac,Windows,iOS,Android,...]\n", 30 ) ); 
  Rogue_literal_strings[41] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Rogue", 5 ) ); 
  Rogue_literal_strings[42] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Rogue_program", 13 ) ); 
  Rogue_literal_strings[43] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Internal", 8 ) ); 
  Rogue_literal_strings[44] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[Built-in Type]", 15 ) ); 
  Rogue_literal_strings[45] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Real64", 6 ) ); 
  Rogue_literal_strings[46] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Real32", 6 ) ); 
  Rogue_literal_strings[47] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Int64", 5 ) ); 
  Rogue_literal_strings[48] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Int32", 5 ) ); 
  Rogue_literal_strings[49] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Character", 9 ) ); 
  Rogue_literal_strings[50] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Byte", 4 ) ); 
  Rogue_literal_strings[51] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Logical", 7 ) ); 
  Rogue_literal_strings[52] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Object", 6 ) ); 
  Rogue_literal_strings[53] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "String", 6 ) ); 
  Rogue_literal_strings[54] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "StringBuilder", 13 ) ); 
  Rogue_literal_strings[55] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "NativeArray", 11 ) ); 
  Rogue_literal_strings[56] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "GenericList", 11 ) ); 
  Rogue_literal_strings[57] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Global", 6 ) ); 
  Rogue_literal_strings[58] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Exception", 9 ) ); 
  Rogue_literal_strings[59] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".rogue", 6 ) ); 
  Rogue_literal_strings[60] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No such file \"", 14 ) ); 
  Rogue_literal_strings[61] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "/", 1 ) ); 
  Rogue_literal_strings[62] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Can not find \"", 14 ) ); 
  Rogue_literal_strings[63] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\" to include.", 13 ) ); 
  Rogue_literal_strings[64] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".", 1 ) ); 
  Rogue_literal_strings[65] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Could not get absolute path", 27 ) ); 
  Rogue_literal_strings[66] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Recursive definition for \"", 26 ) ); 
  Rogue_literal_strings[67] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Unexpected end of input.", 24 ) ); 
  Rogue_literal_strings[68] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Identifier expected, found ", 27 ) ); 
  Rogue_literal_strings[69] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'", 1 ) ); 
  Rogue_literal_strings[70] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Filepath expected.", 18 ) ); 
  Rogue_literal_strings[71] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot target folder \"", 22 ) ); 
  Rogue_literal_strings[72] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\" for a native include.", 23 ) ); 
  Rogue_literal_strings[73] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "header", 6 ) ); 
  Rogue_literal_strings[74] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "code", 4 ) ); 
  Rogue_literal_strings[75] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Syntax error - $elseIf does not match any previous $if.", 55 ) ); 
  Rogue_literal_strings[76] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Syntax error - $else does not match any previous $if.", 53 ) ); 
  Rogue_literal_strings[77] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Syntax error - $endIf does not match any previous $if.", 54 ) ); 
  Rogue_literal_strings[78] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Expected '", 10 ) ); 
  Rogue_literal_strings[79] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Syntax error in directive: '", 28 ) ); 
  Rogue_literal_strings[80] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(", 1 ) ); 
  Rogue_literal_strings[81] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " 0x", 3 ) ); 
  Rogue_literal_strings[82] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::", 2 ) ); 
  Rogue_literal_strings[83] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$define", 7 ) ); 
  Rogue_literal_strings[84] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$include", 8 ) ); 
  Rogue_literal_strings[85] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$includeNativeCode", 18 ) ); 
  Rogue_literal_strings[86] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$includeNativeHeader", 20 ) ); 
  Rogue_literal_strings[87] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$if", 3 ) ); 
  Rogue_literal_strings[88] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$elseIf", 7 ) ); 
  Rogue_literal_strings[89] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$else", 5 ) ); 
  Rogue_literal_strings[90] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$endIf", 6 ) ); 
  Rogue_literal_strings[91] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$requisite", 10 ) ); 
  Rogue_literal_strings[92] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "module", 6 ) ); 
  Rogue_literal_strings[93] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "using", 5 ) ); 
  Rogue_literal_strings[94] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$id", 3 ) ); 
  Rogue_literal_strings[95] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "end of line", 11 ) ); 
  Rogue_literal_strings[96] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "end of input", 12 ) ); 
  Rogue_literal_strings[97] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "augment", 7 ) ); 
  Rogue_literal_strings[98] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "case", 4 ) ); 
  Rogue_literal_strings[99] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "catch", 5 ) ); 
  Rogue_literal_strings[100] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "class", 5 ) ); 
  Rogue_literal_strings[101] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "DEFINITIONS", 11 ) ); 
  Rogue_literal_strings[102] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "else", 4 ) ); 
  Rogue_literal_strings[103] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "elseIf", 6 ) ); 
  Rogue_literal_strings[104] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endAugment", 10 ) ); 
  Rogue_literal_strings[105] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endClass", 8 ) ); 
  Rogue_literal_strings[106] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endContingent", 13 ) ); 
  Rogue_literal_strings[107] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endForEach", 10 ) ); 
  Rogue_literal_strings[108] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endFunction", 11 ) ); 
  Rogue_literal_strings[109] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endIf", 5 ) ); 
  Rogue_literal_strings[110] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endLoop", 7 ) ); 
  Rogue_literal_strings[111] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endRoutine", 10 ) ); 
  Rogue_literal_strings[112] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endTry", 6 ) ); 
  Rogue_literal_strings[113] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endWhich", 8 ) ); 
  Rogue_literal_strings[114] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endWhile", 8 ) ); 
  Rogue_literal_strings[115] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ENUMERATE", 9 ) ); 
  Rogue_literal_strings[116] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "GLOBAL", 6 ) ); 
  Rogue_literal_strings[117] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "GLOBAL_METHODS", 14 ) ); 
  Rogue_literal_strings[118] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "GLOBAL_PROPERTIES", 17 ) ); 
  Rogue_literal_strings[119] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "macro", 5 ) ); 
  Rogue_literal_strings[120] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "method", 6 ) ); 
  Rogue_literal_strings[121] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "METHODS", 7 ) ); 
  Rogue_literal_strings[122] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "others", 6 ) ); 
  Rogue_literal_strings[123] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "PROPERTIES", 10 ) ); 
  Rogue_literal_strings[124] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "routine", 7 ) ); 
  Rogue_literal_strings[125] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "satisfied", 9 ) ); 
  Rogue_literal_strings[126] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "unsatisfied", 11 ) ); 
  Rogue_literal_strings[127] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "with", 4 ) ); 
  Rogue_literal_strings[128] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "}", 1 ) ); 
  Rogue_literal_strings[129] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "}#", 2 ) ); 
  Rogue_literal_strings[130] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ">>", 2 ) ); 
  Rogue_literal_strings[131] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "await", 5 ) ); 
  Rogue_literal_strings[132] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "contingent", 10 ) ); 
  Rogue_literal_strings[133] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "escapeContingent", 16 ) ); 
  Rogue_literal_strings[134] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "escapeForEach", 13 ) ); 
  Rogue_literal_strings[135] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "escapeIf", 8 ) ); 
  Rogue_literal_strings[136] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "escapeLoop", 10 ) ); 
  Rogue_literal_strings[137] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "escapeTry", 9 ) ); 
  Rogue_literal_strings[138] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "escapeWhich", 11 ) ); 
  Rogue_literal_strings[139] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "escapeWhile", 11 ) ); 
  Rogue_literal_strings[140] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "forEach", 7 ) ); 
  Rogue_literal_strings[141] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "function", 8 ) ); 
  Rogue_literal_strings[142] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "global", 6 ) ); 
  Rogue_literal_strings[143] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "if", 2 ) ); 
  Rogue_literal_strings[144] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "in", 2 ) ); 
  Rogue_literal_strings[145] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "is", 2 ) ); 
  Rogue_literal_strings[146] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "isNot", 5 ) ); 
  Rogue_literal_strings[147] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "local", 5 ) ); 
  Rogue_literal_strings[148] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "loop", 4 ) ); 
  Rogue_literal_strings[149] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "native", 6 ) ); 
  Rogue_literal_strings[150] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "nativeCode", 10 ) ); 
  Rogue_literal_strings[151] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "nativeHeader", 12 ) ); 
  Rogue_literal_strings[152] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "necessary", 9 ) ); 
  Rogue_literal_strings[153] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "nextIteration", 13 ) ); 
  Rogue_literal_strings[154] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "noAction", 8 ) ); 
  Rogue_literal_strings[155] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "of", 2 ) ); 
  Rogue_literal_strings[156] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "return", 6 ) ); 
  Rogue_literal_strings[157] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "select", 6 ) ); 
  Rogue_literal_strings[158] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "step", 4 ) ); 
  Rogue_literal_strings[159] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "sufficient", 10 ) ); 
  Rogue_literal_strings[160] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "throw", 5 ) ); 
  Rogue_literal_strings[161] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "trace", 5 ) ); 
  Rogue_literal_strings[162] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "@trace", 6 ) ); 
  Rogue_literal_strings[163] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "try", 3 ) ); 
  Rogue_literal_strings[164] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "which", 5 ) ); 
  Rogue_literal_strings[165] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "while", 5 ) ); 
  Rogue_literal_strings[166] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "yield", 5 ) ); 
  Rogue_literal_strings[167] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "identifier", 10 ) ); 
  Rogue_literal_strings[168] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "type identifier", 15 ) ); 
  Rogue_literal_strings[169] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "and", 3 ) ); 
  Rogue_literal_strings[170] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "as", 2 ) ); 
  Rogue_literal_strings[171] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "downTo", 6 ) ); 
  Rogue_literal_strings[172] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "false", 5 ) ); 
  Rogue_literal_strings[173] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "instanceOf", 10 ) ); 
  Rogue_literal_strings[174] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "infinity", 8 ) ); 
  Rogue_literal_strings[175] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "meta", 4 ) ); 
  Rogue_literal_strings[176] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "NaN", 3 ) ); 
  Rogue_literal_strings[177] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "not", 3 ) ); 
  Rogue_literal_strings[178] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "notInstanceOf", 13 ) ); 
  Rogue_literal_strings[179] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "or", 2 ) ); 
  Rogue_literal_strings[180] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "pi", 2 ) ); 
  Rogue_literal_strings[181] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "prior", 5 ) ); 
  Rogue_literal_strings[182] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "this", 4 ) ); 
  Rogue_literal_strings[183] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "true", 4 ) ); 
  Rogue_literal_strings[184] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "xor", 3 ) ); 
  Rogue_literal_strings[185] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "&", 1 ) ); 
  Rogue_literal_strings[186] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "&=", 2 ) ); 
  Rogue_literal_strings[187] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "->", 2 ) ); 
  Rogue_literal_strings[188] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "@", 1 ) ); 
  Rogue_literal_strings[189] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\\", 1 ) ); 
  Rogue_literal_strings[190] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "^", 1 ) ); 
  Rogue_literal_strings[191] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "^=", 2 ) ); 
  Rogue_literal_strings[192] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ":", 1 ) ); 
  Rogue_literal_strings[193] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ",", 1 ) ); 
  Rogue_literal_strings[194] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "<>", 2 ) ); 
  Rogue_literal_strings[195] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".=", 2 ) ); 
  Rogue_literal_strings[196] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "..>", 3 ) ); 
  Rogue_literal_strings[197] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "{}", 2 ) ); 
  Rogue_literal_strings[198] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[]", 2 ) ); 
  Rogue_literal_strings[199] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "==", 2 ) ); 
  Rogue_literal_strings[200] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "=", 1 ) ); 
  Rogue_literal_strings[201] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "!", 1 ) ); 
  Rogue_literal_strings[202] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "=>", 2 ) ); 
  Rogue_literal_strings[203] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ">=", 2 ) ); 
  Rogue_literal_strings[204] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ">", 1 ) ); 
  Rogue_literal_strings[205] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "<=", 2 ) ); 
  Rogue_literal_strings[206] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "<", 1 ) ); 
  Rogue_literal_strings[207] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "-", 1 ) ); 
  Rogue_literal_strings[208] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "-=", 2 ) ); 
  Rogue_literal_strings[209] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "!=", 2 ) ); 
  Rogue_literal_strings[210] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "{", 1 ) ); 
  Rogue_literal_strings[211] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[", 1 ) ); 
  Rogue_literal_strings[212] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "<<", 2 ) ); 
  Rogue_literal_strings[213] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "%", 1 ) ); 
  Rogue_literal_strings[214] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "%=", 2 ) ); 
  Rogue_literal_strings[215] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "+", 1 ) ); 
  Rogue_literal_strings[216] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "+=", 2 ) ); 
  Rogue_literal_strings[217] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "++", 2 ) ); 
  Rogue_literal_strings[218] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "?", 1 ) ); 
  Rogue_literal_strings[219] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ";", 1 ) ); 
  Rogue_literal_strings[220] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ":<<:", 4 ) ); 
  Rogue_literal_strings[221] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ":>>:", 4 ) ); 
  Rogue_literal_strings[222] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ":>>>:", 5 ) ); 
  Rogue_literal_strings[223] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "/=", 2 ) ); 
  Rogue_literal_strings[224] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "~", 1 ) ); 
  Rogue_literal_strings[225] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "~=", 2 ) ); 
  Rogue_literal_strings[226] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "*", 1 ) ); 
  Rogue_literal_strings[227] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "*=", 2 ) ); 
  Rogue_literal_strings[228] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "..", 2 ) ); 
  Rogue_literal_strings[229] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "..<", 3 ) ); 
  Rogue_literal_strings[230] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "|", 1 ) ); 
  Rogue_literal_strings[231] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "|=", 2 ) ); 
  Rogue_literal_strings[232] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "||", 2 ) ); 
  Rogue_literal_strings[233] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Identifier expected.", 20 ) ); 
  Rogue_literal_strings[234] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endNativeCode", 13 ) ); 
  Rogue_literal_strings[235] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'endNativeCode' expected before EOF.", 36 ) ); 
  Rogue_literal_strings[236] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "endNativeHeader", 15 ) ); 
  Rogue_literal_strings[237] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'endNativeHeader' expected before EOF.", 38 ) ); 
  Rogue_literal_strings[238] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Character expected.", 19 ) ); 
  Rogue_literal_strings[239] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Character expected; found end of line.", 38 ) ); 
  Rogue_literal_strings[240] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Escaped character expected; found end of input.", 47 ) ); 
  Rogue_literal_strings[241] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "-9223372036854775808", 20 ) ); 
  Rogue_literal_strings[242] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "-digit hex value expected; found end of file.", 45 ) ); 
  Rogue_literal_strings[243] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Invalid hex digit ", 18 ) ); 
  Rogue_literal_strings[244] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Invalid escape sequence.  Supported: \\n \\r \\s \\t \\0 \\/ \\' \\\\ \\\" \\", 65 ) ); 
  Rogue_literal_strings[245] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "uXXXX \\", 7 ) ); 
  Rogue_literal_strings[246] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "xXX.", 4 ) ); 
  Rogue_literal_strings[247] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "End of file reached while looking for end of string.", 52 ) ); 
  Rogue_literal_strings[248] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "End of input reached while looking for end of string.", 53 ) ); 
  Rogue_literal_strings[249] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Digit out of range for base ", 28 ) ); 
  Rogue_literal_strings[250] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "One or more digits expected.", 28 ) ); 
  Rogue_literal_strings[251] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "End of File reached while looking for end of verbatim string.", 61 ) ); 
  Rogue_literal_strings[252] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "define", 6 ) ); 
  Rogue_literal_strings[253] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "include", 7 ) ); 
  Rogue_literal_strings[254] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "includeNativeCode", 17 ) ); 
  Rogue_literal_strings[255] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "includeNativeHeader", 19 ) ); 
  Rogue_literal_strings[256] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "requisite", 9 ) ); 
  Rogue_literal_strings[257] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$", 1 ) ); 
  Rogue_literal_strings[258] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Use 'and' instead of '&&'.", 26 ) ); 
  Rogue_literal_strings[259] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "End of line expected after '...'.", 33 ) ); 
  Rogue_literal_strings[260] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "<<:", 3 ) ); 
  Rogue_literal_strings[261] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ">>:", 3 ) ); 
  Rogue_literal_strings[262] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ">>>:", 4 ) ); 
  Rogue_literal_strings[263] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Unexpected input '", 18 ) ); 
  Rogue_literal_strings[264] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "EOL", 3 ) ); 
  Rogue_literal_strings[265] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(Unicode ", 9 ) ); 
  Rogue_literal_strings[266] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Syntax error - unexpected input ", 32 ) ); 
  Rogue_literal_strings[267] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Standard", 8 ) ); 
  Rogue_literal_strings[268] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "on_launch", 9 ) ); 
  Rogue_literal_strings[269] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "insert", 6 ) ); 
  Rogue_literal_strings[270] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "All methods implicitly define the label <<insert>> at the beginning of the method.  No duplicates are allowed.", 110 ) ); 
  Rogue_literal_strings[271] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "append", 6 ) ); 
  Rogue_literal_strings[272] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "All methods implicitly define the label <<append>> at the end of the method.  No duplicates are allowed.", 104 ) ); 
  Rogue_literal_strings[273] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " expected, found ", 17 ) ); 
  Rogue_literal_strings[274] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Unable to determine type for metadata access.", 45 ) ); 
  Rogue_literal_strings[275] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "default_value", 13 ) ); 
  Rogue_literal_strings[276] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'default_value' expected after 'meta.'.", 39 ) ); 
  Rogue_literal_strings[277] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Closing '>>' expected before end of line.", 41 ) ); 
  Rogue_literal_strings[278] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Function", 8 ) ); 
  Rogue_literal_strings[279] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "call", 4 ) ); 
  Rogue_literal_strings[280] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "param", 5 ) ); 
  Rogue_literal_strings[281] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "List conversion function expected.", 34 ) ); 
  Rogue_literal_strings[282] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Value expected, found empty parentheses ().", 43 ) ); 
  Rogue_literal_strings[283] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[][]", 4 ) ); 
  Rogue_literal_strings[284] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Literal list content contains more dimensions than literal list type.", 69 ) ); 
  Rogue_literal_strings[285] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "PropertyList", 12 ) ); 
  Rogue_literal_strings[286] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "_auto_", 6 ) ); 
  Rogue_literal_strings[287] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "function parameters must all be typed or all be generic.", 56 ) ); 
  Rogue_literal_strings[288] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "A function with generic parameters must use '=>' to define its body.", 68 ) ); 
  Rogue_literal_strings[289] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "A function with typed parameters must use '->' to define its return type (if desired) and cannot use the generic function definition symbol '='.", 144 ) ); 
  Rogue_literal_strings[290] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Single identifier expected for control variable name.", 53 ) ); 
  Rogue_literal_strings[291] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "at", 2 ) ); 
  Rogue_literal_strings[292] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Missing element name before 'at'.", 33 ) ); 
  Rogue_literal_strings[293] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot use 'at' with a range.", 29 ) ); 
  Rogue_literal_strings[294] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot use 'at' with forEach-of.", 32 ) ); 
  Rogue_literal_strings[295] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Use forEach-in with a literal range instead of forEach-of.", 58 ) ); 
  Rogue_literal_strings[296] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Syntax error in forEach - keyword 'in' or 'of' expected.", 56 ) ); 
  Rogue_literal_strings[297] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Invalid syntax in forEach.", 26 ) ); 
  Rogue_literal_strings[298] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[Parser.parse_for_each() Parser.rogue:1705]", 43 ) ); 
  Rogue_literal_strings[299] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[INTERNAL ERROR]", 16 ) ); 
  Rogue_literal_strings[300] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Omit the 'return' in a macro method with a return type.", 55 ) ); 
  Rogue_literal_strings[301] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "() ", 3 ) ); 
  Rogue_literal_strings[302] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "  ", 2 ) ); 
  Rogue_literal_strings[303] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ":$", 2 ) ); 
  Rogue_literal_strings[304] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "A comma-separated list of values is expected.", 45 ) ); 
  Rogue_literal_strings[305] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Augment section labels should be defined in the outer scope of the method and cannot be nested inside a control structure.", 122 ) ); 
  Rogue_literal_strings[306] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Literal string expected.", 24 ) ); 
  Rogue_literal_strings[307] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Syntax error: unexpected '", 26 ) ); 
  Rogue_literal_strings[308] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "abstract", 8 ) ); 
  Rogue_literal_strings[309] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "aspect", 6 ) ); 
  Rogue_literal_strings[310] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "A class cannot be both '", 24 ) ); 
  Rogue_literal_strings[311] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "' and '", 7 ) ); 
  Rogue_literal_strings[312] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "primitive", 9 ) ); 
  Rogue_literal_strings[313] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "compound", 8 ) ); 
  Rogue_literal_strings[314] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "fallback", 8 ) ); 
  Rogue_literal_strings[315] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "foreign", 7 ) ); 
  Rogue_literal_strings[316] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "immutable", 9 ) ); 
  Rogue_literal_strings[317] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "singleton", 9 ) ); 
  Rogue_literal_strings[318] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "special", 7 ) ); 
  Rogue_literal_strings[319] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "task", 4 ) ); 
  Rogue_literal_strings[320] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Invalid attribute: ", 19 ) ); 
  Rogue_literal_strings[321] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "A class named ", 14 ) ); 
  Rogue_literal_strings[322] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " already exists.", 16 ) ); 
  Rogue_literal_strings[323] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "end_type:", 9 ) ); 
  Rogue_literal_strings[324] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " expected, found end of file.", 29 ) ); 
  Rogue_literal_strings[325] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Illegal placeholder type in augment.  Write '", 45 ) ); 
  Rogue_literal_strings[326] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "' without the specializers (<<...>>) to apply the augment to all template instances or write specific types such as ", 116 ) ); 
  Rogue_literal_strings[327] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "<<String>> to restrict the augment to that type.", 48 ) ); 
  Rogue_literal_strings[328] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Syntax error - unexpected ", 26 ) ); 
  Rogue_literal_strings[329] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[Command Line Arguments]", 24 ) ); 
  Rogue_literal_strings[330] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot infer the type of the global property from its initial value.  Assign a type by appending ': TypeName' to the end of the declaration.", 140 ) ); 
  Rogue_literal_strings[331] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot determine the type of the global property - either assign an initial value (global ", 90 ) ); 
  Rogue_literal_strings[332] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " = ...) or assign a type (global ", 33 ) ); 
  Rogue_literal_strings[333] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " : Int32).", 10 ) ); 
  Rogue_literal_strings[334] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Optional", 8 ) ); 
  Rogue_literal_strings[335] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "List", 4 ) ); 
  Rogue_literal_strings[336] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No ", 3 ) ); 
  Rogue_literal_strings[337] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " template accepting ", 20 ) ); 
  Rogue_literal_strings[338] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "# parameter", 11 ) ); 
  Rogue_literal_strings[339] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "#", 1 ) ); 
  Rogue_literal_strings[340] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "es", 2 ) ); 
  Rogue_literal_strings[341] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "s", 1 ) ); 
  Rogue_literal_strings[342] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " is defined.", 12 ) ); 
  Rogue_literal_strings[343] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "$DataType", 9 ) ); 
  Rogue_literal_strings[344] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "create", 6 ) ); 
  Rogue_literal_strings[345] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "init", 4 ) ); 
  Rogue_literal_strings[346] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Definition expected.", 20 ) ); 
  Rogue_literal_strings[347] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[INTERNAL] ", 11 ) ); 
  Rogue_literal_strings[348] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cmd", 3 ) ); 
  Rogue_literal_strings[349] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::clone() is not implemented.", 29 ) ); 
  Rogue_literal_strings[350] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "property", 8 ) ); 
  Rogue_literal_strings[351] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "global property", 15 ) ); 
  Rogue_literal_strings[352] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot determine ", 17 ) ); 
  Rogue_literal_strings[353] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " type from initial value; append an explicit type declaration such as \": Object\" ", 81 ) ); 
  Rogue_literal_strings[354] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "An initial value or ", 20 ) ); 
  Rogue_literal_strings[355] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " type (for example, \": Object\") must be specified.", 50 ) ); 
  Rogue_literal_strings[356] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator", 8 ) ); 
  Rogue_literal_strings[357] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "to", 2 ) ); 
  Rogue_literal_strings[358] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "to_", 3 ) ); 
  Rogue_literal_strings[359] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Boxed<<String>>", 15 ) ); 
  Rogue_literal_strings[360] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Native expression types cannot be specified in macro methods - remove the \"->", 77 ) ); 
  Rogue_literal_strings[361] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Reference to ", 13 ) ); 
  Rogue_literal_strings[362] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " is missing required type parameters (", 38 ) ); 
  Rogue_literal_strings[363] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "<<...>>).", 9 ) ); 
  Rogue_literal_strings[364] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Too many type specializers given.", 33 ) ); 
  Rogue_literal_strings[365] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Insufficient number of type parameters in ", 42 ) ); 
  Rogue_literal_strings[366] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "; ", 2 ) ); 
  Rogue_literal_strings[367] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " given, ", 8 ) ); 
  Rogue_literal_strings[368] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " expected.", 10 ) ); 
  Rogue_literal_strings[369] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Type parameters given for non-template type.", 44 ) ); 
  Rogue_literal_strings[370] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Reference to undefined type '", 29 ) ); 
  Rogue_literal_strings[371] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Aspects can only extend other aspects.", 38 ) ); 
  Rogue_literal_strings[372] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Compounds can only extend aspects.", 34 ) ); 
  Rogue_literal_strings[373] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cyclic inheritance attempted - ", 31 ) ); 
  Rogue_literal_strings[374] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " cannot extend ", 15 ) ); 
  Rogue_literal_strings[375] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " because ", 9 ) ); 
  Rogue_literal_strings[376] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " already extends ", 17 ) ); 
  Rogue_literal_strings[377] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Class ", 6 ) ); 
  Rogue_literal_strings[378] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " can only have one base class (", 31 ) ); 
  Rogue_literal_strings[379] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " and ", 5 ) ); 
  Rogue_literal_strings[380] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " are both specified as base classes).", 37 ) ); 
  Rogue_literal_strings[381] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "A property named \"", 18 ) ); 
  Rogue_literal_strings[382] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\" already exists.", 17 ) ); 
  Rogue_literal_strings[383] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Conflicting initial values are given for property \"", 51 ) ); 
  Rogue_literal_strings[384] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\" in unrelated types ", 21 ) ); 
  Rogue_literal_strings[385] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Conflicting types given for property \"", 38 ) ); 
  Rogue_literal_strings[386] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\" - ", 4 ) ); 
  Rogue_literal_strings[387] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " in ", 4 ) ); 
  Rogue_literal_strings[388] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "type_name", 9 ) ); 
  Rogue_literal_strings[389] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "init() methods cannot be global methods.  Rename your method create_class() if you need to perform one-time setup.", 114 ) ); 
  Rogue_literal_strings[390] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Compounds cannot have initializers.  Use global create(...) methods instead.", 76 ) ); 
  Rogue_literal_strings[391] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Global methods and routines cannot be tasks.", 44 ) ); 
  Rogue_literal_strings[392] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TaskWithResult<<", 16 ) ); 
  Rogue_literal_strings[393] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Task", 4 ) ); 
  Rogue_literal_strings[394] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No type declared for parameter \"", 32 ) ); 
  Rogue_literal_strings[395] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "A global method with the signature ", 35 ) ); 
  Rogue_literal_strings[396] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " is already defined.", 20 ) ); 
  Rogue_literal_strings[397] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "A method with the signature ", 28 ) ); 
  Rogue_literal_strings[398] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No corresponding label <<", 25 ) ); 
  Rogue_literal_strings[399] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ">> in augmented code.", 21 ) ); 
  Rogue_literal_strings[400] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Type ", 5 ) ); 
  Rogue_literal_strings[401] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " already defines global method ", 31 ) ); 
  Rogue_literal_strings[402] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "In ", 3 ) ); 
  Rogue_literal_strings[403] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " the overridden return type (", 29 ) ); 
  Rogue_literal_strings[404] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ") is not compatible with the prior definition return type (", 59 ) ); 
  Rogue_literal_strings[405] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ").", 2 ) ); 
  Rogue_literal_strings[406] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " already defines method ", 24 ) ); 
  Rogue_literal_strings[407] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "init_class()", 12 ) ); 
  Rogue_literal_strings[408] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::init_class() must be declared under GLOBAL METHODS.", 53 ) ); 
  Rogue_literal_strings[409] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "init_class", 10 ) ); 
  Rogue_literal_strings[410] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "init_object()", 13 ) ); 
  Rogue_literal_strings[411] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "init_object", 11 ) ); 
  Rogue_literal_strings[412] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Alpha", 5 ) ); 
  Rogue_literal_strings[413] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "clean_up()", 10 ) ); 
  Rogue_literal_strings[414] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "clean_up() cannot return a value.", 33 ) ); 
  Rogue_literal_strings[415] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "to_String()", 11 ) ); 
  Rogue_literal_strings[416] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "to_String", 9 ) ); 
  Rogue_literal_strings[417] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "to_Object()", 11 ) ); 
  Rogue_literal_strings[418] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "to_Object", 9 ) ); 
  Rogue_literal_strings[419] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Boxed<<", 7 ) ); 
  Rogue_literal_strings[420] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "A class that is instanceOf NativeArray must also be instanceOf Array<<DataType>>.", 81 ) ); 
  Rogue_literal_strings[421] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<", 7 ) ); 
  Rogue_literal_strings[422] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "__", 2 ) ); 
  Rogue_literal_strings[423] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "__task", 6 ) ); 
  Rogue_literal_strings[424] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "context", 7 ) ); 
  Rogue_literal_strings[425] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "_", 1 ) ); 
  Rogue_literal_strings[426] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "update", 6 ) ); 
  Rogue_literal_strings[427] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "execute", 7 ) ); 
  Rogue_literal_strings[428] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ip", 2 ) ); 
  Rogue_literal_strings[429] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "__task_resolver", 15 ) ); 
  Rogue_literal_strings[430] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "result", 6 ) ); 
  Rogue_literal_strings[431] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "A local variable named \"", 24 ) ); 
  Rogue_literal_strings[432] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::resolve() is not defined.", 27 ) ); 
  Rogue_literal_strings[433] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "locals left on scope stack", 26 ) ); 
  Rogue_literal_strings[434] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "control stucture left on scope stack", 36 ) ); 
  Rogue_literal_strings[435] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " is not declared as returning a value.", 38 ) ); 
  Rogue_literal_strings[436] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::type() is not defined.", 24 ) ); 
  Rogue_literal_strings[437] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Value expected; this statement or expression does not result in a value.", 72 ) ); 
  Rogue_literal_strings[438] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " cannot be cast to required type ", 33 ) ); 
  Rogue_literal_strings[439] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "init()", 6 ) ); 
  Rogue_literal_strings[440] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::trace_used_code() is not defined.", 35 ) ); 
  Rogue_literal_strings[441] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueProgram", 12 ) ); 
  Rogue_literal_strings[442] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".cpp", 4 ) ); 
  Rogue_literal_strings[443] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "type", 4 ) ); 
  Rogue_literal_strings[444] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "_of_", 4 ) ); 
  Rogue_literal_strings[445] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "NOT", 3 ) ); 
  Rogue_literal_strings[446] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "MOD", 3 ) ); 
  Rogue_literal_strings[447] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "AND", 3 ) ); 
  Rogue_literal_strings[448] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TIMES", 5 ) ); 
  Rogue_literal_strings[449] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "PLUS", 4 ) ); 
  Rogue_literal_strings[450] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RETURNS", 7 ) ); 
  Rogue_literal_strings[451] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "MINUS", 5 ) ); 
  Rogue_literal_strings[452] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "SLASH", 5 ) ); 
  Rogue_literal_strings[453] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "LE", 2 ) ); 
  Rogue_literal_strings[454] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "LT", 2 ) ); 
  Rogue_literal_strings[455] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "EQUALS", 6 ) ); 
  Rogue_literal_strings[456] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "GE", 2 ) ); 
  Rogue_literal_strings[457] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "GT", 2 ) ); 
  Rogue_literal_strings[458] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "POWER", 5 ) ); 
  Rogue_literal_strings[459] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "OR", 2 ) ); 
  Rogue_literal_strings[460] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "XOR", 3 ) ); 
  Rogue_literal_strings[461] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueArray", 10 ) ); 
  Rogue_literal_strings[462] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array", 5 ) ); 
  Rogue_literal_strings[463] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueClass", 10 ) ); 
  Rogue_literal_strings[464] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueType", 9 ) ); 
  Rogue_literal_strings[465] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Writing ", 8 ) ); 
  Rogue_literal_strings[466] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".h...", 5 ) ); 
  Rogue_literal_strings[467] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".h", 2 ) ); 
  Rogue_literal_strings[468] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "//-----------------------------------------------------------------------------", 79 ) ); 
  Rogue_literal_strings[469] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "//  Generated by the Rogue compiler", 35 ) ); 
  Rogue_literal_strings[470] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "#pragma once", 12 ) ); 
  Rogue_literal_strings[471] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "#define ROGUE_GC_MODE_MANUAL ", 29 ) ); 
  Rogue_literal_strings[472] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "1", 1 ) ); 
  Rogue_literal_strings[473] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "0", 1 ) ); 
  Rogue_literal_strings[474] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "#define ROGUE_GC_MODE_AUTO ", 27 ) ); 
  Rogue_literal_strings[475] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "#define ROGUE_GC_MODE_BOEHM ", 28 ) ); 
  Rogue_literal_strings[476] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "#ifndef ROGUE_GC_THRESHOLD_DEFAULT", 34 ) ); 
  Rogue_literal_strings[477] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "  #define ROGUE_GC_THRESHOLD_DEFAULT ", 37 ) ); 
  Rogue_literal_strings[478] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "#endif", 6 ) ); 
  Rogue_literal_strings[479] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "// NATIVE HEADERS", 17 ) ); 
  Rogue_literal_strings[480] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "#include <cmath>", 16 ) ); 
  Rogue_literal_strings[481] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "// FORWARD DECLARATIONS", 23 ) ); 
  Rogue_literal_strings[482] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "struct ", 7 ) ); 
  Rogue_literal_strings[483] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "// COMPOUND DEFINITIONS", 23 ) ); 
  Rogue_literal_strings[484] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " : ", 3 ) ); 
  Rogue_literal_strings[485] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "void", 4 ) ); 
  Rogue_literal_strings[486] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " : RogueObject", 14 ) ); 
  Rogue_literal_strings[487] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "// GLOBAL PROPERTIES", 20 ) ); 
  Rogue_literal_strings[488] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "static ", 7 ) ); 
  Rogue_literal_strings[489] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " ", 1 ) ); 
  Rogue_literal_strings[490] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "// PROPERTIES", 13 ) ); 
  Rogue_literal_strings[491] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "release", 7 ) ); 
  Rogue_literal_strings[492] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueObject_release(", 20 ) ); 
  Rogue_literal_strings[493] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "))", 2 ) ); 
  Rogue_literal_strings[494] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "retain", 6 ) ); 
  Rogue_literal_strings[495] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueObject_retain(", 19 ) ); 
  Rogue_literal_strings[496] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Unrecognized native code insertion marker: ", 43 ) ); 
  Rogue_literal_strings[497] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "THIS", 4 ) ); 
  Rogue_literal_strings[498] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "THIS->", 6 ) ); 
  Rogue_literal_strings[499] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ROGUE_DEF_COMPOUND_REF_PROP(", 28 ) ); 
  Rogue_literal_strings[500] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ");", 2 ) ); 
  Rogue_literal_strings[501] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "() : ", 5 ) ); 
  Rogue_literal_strings[502] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ", ", 2 ) ); 
  Rogue_literal_strings[503] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "()", 2 ) ); 
  Rogue_literal_strings[504] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " {}", 3 ) ); 
  Rogue_literal_strings[505] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "( ", 2 ) ); 
  Rogue_literal_strings[506] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " value, bool exists=true ) : value(value), exists(exists) {}", 60 ) ); 
  Rogue_literal_strings[507] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " ) : ", 5 ) ); 
  Rogue_literal_strings[508] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "};", 2 ) ); 
  Rogue_literal_strings[509] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "extern ", 7 ) ); 
  Rogue_literal_strings[510] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " Rogue", 6 ) ); 
  Rogue_literal_strings[511] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "// CLASS DEFINITIONS", 20 ) ); 
  Rogue_literal_strings[512] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "// ROGUE TYPES", 14 ) ); 
  Rogue_literal_strings[513] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "extern RogueType* RogueType", 27 ) ); 
  Rogue_literal_strings[514] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "// ROUTINE PROTOTYPES", 21 ) ); 
  Rogue_literal_strings[515] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " THIS", 5 ) ); 
  Rogue_literal_strings[516] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "// METHOD PROTOTYPES", 20 ) ); 
  Rogue_literal_strings[517] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "// INTERNAL PROTOTYPES", 22 ) ); 
  Rogue_literal_strings[518] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "void Rogue_trace();", 19 ) ); 
  Rogue_literal_strings[519] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".cpp...", 7 ) ); 
  Rogue_literal_strings[520] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "#include <stdio.h>", 18 ) ); 
  Rogue_literal_strings[521] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "#include \"", 10 ) ); 
  Rogue_literal_strings[522] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".h\"", 3 ) ); 
  Rogue_literal_strings[523] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(*)(", 4 ) ); 
  Rogue_literal_strings[524] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ROGUEM", 6 ) ); 
  Rogue_literal_strings[525] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "typedef ", 8 ) ); 
  Rogue_literal_strings[526] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(*)", 3 ) ); 
  Rogue_literal_strings[527] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(*", 2 ) ); 
  Rogue_literal_strings[528] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " call_", 6 ) ); 
  Rogue_literal_strings[529] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "( int i, ", 9 ) ); 
  Rogue_literal_strings[530] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " p", 2 ) ); 
  Rogue_literal_strings[531] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " )", 2 ) ); 
  Rogue_literal_strings[532] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "return ", 7 ) ); 
  Rogue_literal_strings[533] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "((", 2 ) ); 
  Rogue_literal_strings[534] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ")(THIS->type->methods[i]))( THIS", 32 ) ); 
  Rogue_literal_strings[535] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ", p", 3 ) ); 
  Rogue_literal_strings[536] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " );", 3 ) ); 
  Rogue_literal_strings[537] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " = ", 3 ) ); 
  Rogue_literal_strings[538] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "void Rogue", 10 ) ); 
  Rogue_literal_strings[539] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "_trace( void* obj );", 20 ) ); 
  Rogue_literal_strings[540] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "_trace( void* obj )", 19 ) ); 
  Rogue_literal_strings[541] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "void* link;", 11 ) ); 
  Rogue_literal_strings[542] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "if ((link=((", 12 ) ); 
  Rogue_literal_strings[543] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "*)obj)->", 8 ) ); 
  Rogue_literal_strings[544] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ")) ((RogueObject*)link)->type->trace_fn( link );", 48 ) ); 
  Rogue_literal_strings[545] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "_trace( &", 9 ) ); 
  Rogue_literal_strings[546] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "if ((link=", 10 ) ); 
  Rogue_literal_strings[547] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ")) Rogue", 8 ) ); 
  Rogue_literal_strings[548] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "_trace( link );", 15 ) ); 
  Rogue_literal_strings[549] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueArray* array = (RogueArray*) obj;\nint count;", 49 ) ); 
  Rogue_literal_strings[550] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "* cur;", 6 ) ); 
  Rogue_literal_strings[551] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\nif ( !array || array->object_size < 0 ) return;\narray->object_size = ~array->object_size;\n\ncount = array->count;", 113 ) ); 
  Rogue_literal_strings[552] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "cur = ((", 8 ) ); 
  Rogue_literal_strings[553] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "*)(array->bytes)) - 1;", 22 ) ); 
  Rogue_literal_strings[554] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "while (--count >= 0)", 20 ) ); 
  Rogue_literal_strings[555] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "  Rogue", 7 ) ); 
  Rogue_literal_strings[556] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "_trace( ++cur );", 16 ) ); 
  Rogue_literal_strings[557] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;\n((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;\n", 130 ) ); 
  Rogue_literal_strings[558] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "int Rogue_type_name_index_table[] =", 35 ) ); 
  Rogue_literal_strings[559] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueInitFn Rogue_init_object_fn_table[] =", 42 ) ); 
  Rogue_literal_strings[560] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(RogueInitFn) ", 14 ) ); 
  Rogue_literal_strings[561] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueInitFn Rogue_init_fn_table[] =", 35 ) ); 
  Rogue_literal_strings[562] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueCleanUpFn Rogue_clean_up_fn_table[] =", 42 ) ); 
  Rogue_literal_strings[563] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(RogueCleanUpFn) ", 17 ) ); 
  Rogue_literal_strings[564] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueTraceFn Rogue_trace_fn_table[] =", 37 ) ); 
  Rogue_literal_strings[565] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueArray_trace", 16 ) ); 
  Rogue_literal_strings[566] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "_trace", 6 ) ); 
  Rogue_literal_strings[567] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueObject_trace", 17 ) ); 
  Rogue_literal_strings[568] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "void Rogue_trace()", 18 ) ); 
  Rogue_literal_strings[569] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "int i;", 6 ) ); 
  Rogue_literal_strings[570] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "// Trace GLOBAL PROPERTIES", 26 ) ); 
  Rogue_literal_strings[571] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "if ((link=Rogue", 15 ) ); 
  Rogue_literal_strings[572] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "// Trace singletons\nfor (i=Rogue_type_count; --i>=0; )\n{\n  RogueType* type = &Rogue_types[i];\n  if (type->_singleton)\n  {\n    type->trace_fn( type->_singleton );\n  }\n}", 167 ) ); 
  Rogue_literal_strings[573] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "void* Rogue_dynamic_method_table[] =", 36 ) ); 
  Rogue_literal_strings[574] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(void*) (", 9 ) ); 
  Rogue_literal_strings[575] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ") ", 2 ) ); 
  Rogue_literal_strings[576] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "0,", 2 ) ); 
  Rogue_literal_strings[577] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " // ", 4 ) ); 
  Rogue_literal_strings[578] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "int Rogue_type_info_table[", 26 ) ); 
  Rogue_literal_strings[579] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "] =", 3 ) ); 
  Rogue_literal_strings[580] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "// allocator_index, dynamic_method_table_index, base_class_count, base_class_index[base_class_count], ...", 105 ) ); 
  Rogue_literal_strings[581] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\\\"", 2 ) ); 
  Rogue_literal_strings[582] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\"", 1 ) ); 
  Rogue_literal_strings[583] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\\'", 2 ) ); 
  Rogue_literal_strings[584] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\\\\", 2 ) ); 
  Rogue_literal_strings[585] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\\n", 2 ) ); 
  Rogue_literal_strings[586] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "int Rogue_object_size_table[", 28 ) ); 
  Rogue_literal_strings[587] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(int) sizeof(", 13 ) ); 
  Rogue_literal_strings[588] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "int Rogue_allocator_count = ", 28 ) ); 
  Rogue_literal_strings[589] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueAllocator Rogue_allocators[", 32 ) ); 
  Rogue_literal_strings[590] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "];", 2 ) ); 
  Rogue_literal_strings[591] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "int Rogue_type_count = ", 23 ) ); 
  Rogue_literal_strings[592] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueType Rogue_types[", 22 ) ); 
  Rogue_literal_strings[593] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueType* RogueType", 20 ) ); 
  Rogue_literal_strings[594] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "int Rogue_literal_string_count = ", 33 ) ); 
  Rogue_literal_strings[595] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueString* Rogue_literal_strings[", 35 ) ); 
  Rogue_literal_strings[596] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "switch (THIS->type->index)", 26 ) ); 
  Rogue_literal_strings[597] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "case ", 5 ) ); 
  Rogue_literal_strings[598] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "  return ", 9 ) ); 
  Rogue_literal_strings[599] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "( (", 3 ) ); 
  Rogue_literal_strings[600] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ")THIS", 5 ) ); 
  Rogue_literal_strings[601] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "default:", 8 ) ); 
  Rogue_literal_strings[602] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueCallTrace __trace( \"", 25 ) ); 
  Rogue_literal_strings[603] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\" );", 4 ) ); 
  Rogue_literal_strings[604] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::write_cpp() is not defined.", 29 ) ); 
  Rogue_literal_strings[605] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "void Rogue_configure( int argc, const char* argv[] )", 52 ) ); 
  Rogue_literal_strings[606] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "if (Rogue_configured) return;\nRogue_configured = 1;\n\nRogue_argc = argc;\nRogue_argv = argv;\n\nRogue_configure_gc();\nRogue_configure_types();\n", 139 ) ); 
  Rogue_literal_strings[607] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " = &Rogue_types[ ", 17 ) ); 
  Rogue_literal_strings[608] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " ];", 3 ) ); 
  Rogue_literal_strings[609] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Rogue_literal_strings[", 22 ) ); 
  Rogue_literal_strings[610] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ", 73 ) ); 
  Rogue_literal_strings[611] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " ) ); ", 6 ) ); 
  Rogue_literal_strings[612] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "void Rogue_launch()", 19 ) ); 
  Rogue_literal_strings[613] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueErrorHandler uncaught_error_handler;\nRogue_error_handler = &uncaught_error_handler;\nif (ROGUE_SETJMP(Rogue_error_handler->info))\n{\n  if (Rogue_error_object && Rogue_error_object->type)\n  {\n    printf( \"Uncaught \" );\n    RogueType_print_name( Rogue_error_object->type );\n    printf( \".\\n\\n\" );\n\n    RogueStackTrace__print( ((RogueClassException*)Rogue_error_object)->stack_trace );\n  }\n  else\n  {\n    printf( \"Uncaught error.\\n\" );\n  }\n  return;\n}", 451 ) ); 
  Rogue_literal_strings[614] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "();", 3 ) ); 
  Rogue_literal_strings[615] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueSystem_executable_filepath = RogueString_create_from_c_string(\n    Rogue_argc ? Rogue_argv[0] : \"Rogue\", -1 );\n\nfor (int i=1; i<Rogue_argc; ++i)\n{\n  RogueStringList__add__String( RogueSystem_command_line_arguments,\n      RogueString_create_from_c_string( Rogue_argv[i], -1 ) );\n}", 284 ) ); 
  Rogue_literal_strings[616] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "// Instantiate requisite singletons", 35 ) ); 
  Rogue_literal_strings[617] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ROGUE_SINGLETON( ", 17 ) ); 
  Rogue_literal_strings[618] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueGlobal__on_launch( (RogueClassGlobal*) (RogueType_singleton(RogueTypeGlobal)) );\nRogue_collect_garbage();", 110 ) ); 
  Rogue_literal_strings[619] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "bool Rogue_update_tasks()\n{\n  // Returns true if any tasks are still active", 75 ) ); 
  Rogue_literal_strings[620] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TaskManager", 11 ) ); 
  Rogue_literal_strings[621] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "  RogueClassTaskManager* task_manager = (RogueClassTaskManager*) ROGUE_SINGLETON(TaskManager);\n  bool result = RogueTaskManager__update( task_manager );\n  Rogue_collect_garbage();\n  return result;", 196 ) ); 
  Rogue_literal_strings[622] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "  Rogue_collect_garbage();\n  return false;", 42 ) ); 
  Rogue_literal_strings[623] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "}\n", 2 ) ); 
  Rogue_literal_strings[624] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "int main( int argc, const char* argv[] )\n{\n  Rogue_configure( argc, argv );\n  Rogue_launch();\n\n  while (Rogue_update_tasks()) {}\n\n  // Give a few GC's to allow objects requiring clean-up to do so.\n  Rogue_collect_garbage( true );\n  Rogue_collect_garbage( true );\n  Rogue_collect_garbage( true );\n\n  Rogue_quit();\n\n  return 0;\n}", 327 ) ); 
  Rogue_literal_strings[625] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "SUCCESS (", 9 ) ); 
  Rogue_literal_strings[626] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "clang++ -std=c++11 -fno-strict-aliasing ", 40 ) ); 
  Rogue_literal_strings[627] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".cpp -o ", 8 ) ); 
  Rogue_literal_strings[628] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " && ./", 6 ) ); 
  Rogue_literal_strings[629] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Process was not created", 23 ) ); 
  Rogue_literal_strings[630] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Compile target \"", 16 ) ); 
  Rogue_literal_strings[631] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\" is not supported.", 19 ) ); 
  Rogue_literal_strings[632] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "-infinity", 9 ) ); 
  Rogue_literal_strings[633] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " seconds", 8 ) ); 
  Rogue_literal_strings[634] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "StringReader", 12 ) ); 
  Rogue_literal_strings[635] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Console", 7 ) ); 
  Rogue_literal_strings[636] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueC", 6 ) ); 
  Rogue_literal_strings[637] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "StackTrace", 10 ) ); 
  Rogue_literal_strings[638] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Program", 7 ) ); 
  Rogue_literal_strings[639] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Template", 8 ) ); 
  Rogue_literal_strings[640] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Template>>", 24 ) ); 
  Rogue_literal_strings[641] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Augment[]>>", 25 ) ); 
  Rogue_literal_strings[642] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Method", 6 ) ); 
  Rogue_literal_strings[643] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Property", 8 ) ); 
  Rogue_literal_strings[644] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Method[]>>", 24 ) ); 
  Rogue_literal_strings[645] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Type", 4 ) ); 
  Rogue_literal_strings[646] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Type>>", 20 ) ); 
  Rogue_literal_strings[647] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Int32>>", 21 ) ); 
  Rogue_literal_strings[648] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,String[]>>", 24 ) ); 
  Rogue_literal_strings[649] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Int32>>", 26 ) ); 
  Rogue_literal_strings[650] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<Int32,Template>>", 23 ) ); 
  Rogue_literal_strings[651] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Token", 5 ) ); 
  Rogue_literal_strings[652] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Attributes", 10 ) ); 
  Rogue_literal_strings[653] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TokenType", 9 ) ); 
  Rogue_literal_strings[654] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Scope", 5 ) ); 
  Rogue_literal_strings[655] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Function(Type)->Logical", 23 ) ); 
  Rogue_literal_strings[656] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CPPWriter", 9 ) ); 
  Rogue_literal_strings[657] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Method>>", 22 ) ); 
  Rogue_literal_strings[658] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Local", 5 ) ); 
  Rogue_literal_strings[659] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Math", 4 ) ); 
  Rogue_literal_strings[660] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "System", 6 ) ); 
  Rogue_literal_strings[661] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Logical>>", 23 ) ); 
  Rogue_literal_strings[662] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Parser", 6 ) ); 
  Rogue_literal_strings[663] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,ParseReader>>", 27 ) ); 
  Rogue_literal_strings[664] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Stopwatch", 9 ) ); 
  Rogue_literal_strings[665] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "File", 4 ) ); 
  Rogue_literal_strings[666] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "LineReader", 10 ) ); 
  Rogue_literal_strings[667] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TypeParameter", 13 ) ); 
  Rogue_literal_strings[668] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Augment", 7 ) ); 
  Rogue_literal_strings[669] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,TokenType>>", 25 ) ); 
  Rogue_literal_strings[670] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,TypeSpecializer>>", 31 ) ); 
  Rogue_literal_strings[671] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TypeSpecializer", 15 ) ); 
  Rogue_literal_strings[672] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Template>>", 29 ) ); 
  Rogue_literal_strings[673] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Augment[]>>", 30 ) ); 
  Rogue_literal_strings[674] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,CmdLabel>>", 24 ) ); 
  Rogue_literal_strings[675] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CloneArgs", 9 ) ); 
  Rogue_literal_strings[676] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdTaskControlSection", 21 ) ); 
  Rogue_literal_strings[677] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Method[]>>", 29 ) ); 
  Rogue_literal_strings[678] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Definition", 10 ) ); 
  Rogue_literal_strings[679] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Definition>>", 26 ) ); 
  Rogue_literal_strings[680] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "NativeProperty", 14 ) ); 
  Rogue_literal_strings[681] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Property>>", 24 ) ); 
  Rogue_literal_strings[682] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Type>>", 25 ) ); 
  Rogue_literal_strings[683] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,String[]>>", 29 ) ); 
  Rogue_literal_strings[684] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<Int32,Template>>", 28 ) ); 
  Rogue_literal_strings[685] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "FnParam", 7 ) ); 
  Rogue_literal_strings[686] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Method>>", 27 ) ); 
  Rogue_literal_strings[687] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Logical>>", 28 ) ); 
  Rogue_literal_strings[688] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TokenReader", 11 ) ); 
  Rogue_literal_strings[689] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,String>>", 22 ) ); 
  Rogue_literal_strings[690] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Tokenizer", 9 ) ); 
  Rogue_literal_strings[691] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ParseReader", 11 ) ); 
  Rogue_literal_strings[692] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Preprocessor", 12 ) ); 
  Rogue_literal_strings[693] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "FnArg", 5 ) ); 
  Rogue_literal_strings[694] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,ParseReader>>", 32 ) ); 
  Rogue_literal_strings[695] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "FileReader", 10 ) ); 
  Rogue_literal_strings[696] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "FileWriter", 10 ) ); 
  Rogue_literal_strings[697] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ListRebuilder<<Token>>", 22 ) ); 
  Rogue_literal_strings[698] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,TokenType>>", 30 ) ); 
  Rogue_literal_strings[699] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,TypeSpecializer>>", 36 ) ); 
  Rogue_literal_strings[700] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,CmdLabel>>", 29 ) ); 
  Rogue_literal_strings[701] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Definition>>", 31 ) ); 
  Rogue_literal_strings[702] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Property>>", 29 ) ); 
  Rogue_literal_strings[703] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,String>>", 27 ) ); 
  Rogue_literal_strings[704] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Token[]>>", 23 ) ); 
  Rogue_literal_strings[705] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "PreprocessorTokenReader", 23 ) ); 
  Rogue_literal_strings[706] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Token[]>>", 28 ) ); 
  Rogue_literal_strings[707] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Character[]", 11 ) ); 
  Rogue_literal_strings[708] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "String[]", 8 ) ); 
  Rogue_literal_strings[709] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Template[]", 10 ) ); 
  Rogue_literal_strings[710] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Property[]", 10 ) ); 
  Rogue_literal_strings[711] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Type[]", 6 ) ); 
  Rogue_literal_strings[712] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cmd[]", 5 ) ); 
  Rogue_literal_strings[713] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Method[]", 8 ) ); 
  Rogue_literal_strings[714] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Local[]", 7 ) ); 
  Rogue_literal_strings[715] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Int32[]", 7 ) ); 
  Rogue_literal_strings[716] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Byte[]", 6 ) ); 
  Rogue_literal_strings[717] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Parser[]", 8 ) ); 
  Rogue_literal_strings[718] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Token[]", 7 ) ); 
  Rogue_literal_strings[719] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TypeParameter[]", 15 ) ); 
  Rogue_literal_strings[720] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Augment[]", 9 ) ); 
  Rogue_literal_strings[721] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TypeSpecializer[]", 17 ) ); 
  Rogue_literal_strings[722] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Template>>[]", 31 ) ); 
  Rogue_literal_strings[723] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Augment[]>>[]", 32 ) ); 
  Rogue_literal_strings[724] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLabel[]", 10 ) ); 
  Rogue_literal_strings[725] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdFlagArg[]", 12 ) ); 
  Rogue_literal_strings[726] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdControlStructure[]", 21 ) ); 
  Rogue_literal_strings[727] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Method[]>>[]", 31 ) ); 
  Rogue_literal_strings[728] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Definition[]", 12 ) ); 
  Rogue_literal_strings[729] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "NativeProperty[]", 16 ) ); 
  Rogue_literal_strings[730] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Type>>[]", 27 ) ); 
  Rogue_literal_strings[731] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Int32>>[]", 28 ) ); 
  Rogue_literal_strings[732] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,String[]>>[]", 31 ) ); 
  Rogue_literal_strings[733] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<Int32,Template>>[]", 30 ) ); 
  Rogue_literal_strings[734] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "FnParam[]", 9 ) ); 
  Rogue_literal_strings[735] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Method>>[]", 29 ) ); 
  Rogue_literal_strings[736] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Logical>>[]", 30 ) ); 
  Rogue_literal_strings[737] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdWhichCase[]", 14 ) ); 
  Rogue_literal_strings[738] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCatch[]", 10 ) ); 
  Rogue_literal_strings[739] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "FnArg[]", 7 ) ); 
  Rogue_literal_strings[740] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdSelectCase[]", 15 ) ); 
  Rogue_literal_strings[741] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,ParseReader>>[]", 34 ) ); 
  Rogue_literal_strings[742] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,TokenType>>[]", 32 ) ); 
  Rogue_literal_strings[743] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,TypeSpecializer>>[]", 38 ) ); 
  Rogue_literal_strings[744] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,CmdLabel>>[]", 31 ) ); 
  Rogue_literal_strings[745] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdTaskControlSection[]", 23 ) ); 
  Rogue_literal_strings[746] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Definition>>[]", 33 ) ); 
  Rogue_literal_strings[747] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Property>>[]", 31 ) ); 
  Rogue_literal_strings[748] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,String>>[]", 29 ) ); 
  Rogue_literal_strings[749] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Token[]>>[]", 30 ) ); 
  Rogue_literal_strings[750] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Character>>", 18 ) ); 
  Rogue_literal_strings[751] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<String>>", 15 ) ); 
  Rogue_literal_strings[752] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Type>>", 13 ) ); 
  Rogue_literal_strings[753] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Property>>", 17 ) ); 
  Rogue_literal_strings[754] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Method>>", 15 ) ); 
  Rogue_literal_strings[755] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Template>>", 17 ) ); 
  Rogue_literal_strings[756] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Local>>", 14 ) ); 
  Rogue_literal_strings[757] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Int32>>", 14 ) ); 
  Rogue_literal_strings[758] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Byte>>", 13 ) ); 
  Rogue_literal_strings[759] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Parser>>", 15 ) ); 
  Rogue_literal_strings[760] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Augment>>", 16 ) ); 
  Rogue_literal_strings[761] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Token>>", 14 ) ); 
  Rogue_literal_strings[762] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TypeParameter>>", 22 ) ); 
  Rogue_literal_strings[763] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Template>>>>", 38 ) ); 
  Rogue_literal_strings[764] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Augment[]>>>>", 39 ) ); 
  Rogue_literal_strings[765] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<CmdLabel>>", 17 ) ); 
  Rogue_literal_strings[766] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Cmd>>", 12 ) ); 
  Rogue_literal_strings[767] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Method[]>>>>", 38 ) ); 
  Rogue_literal_strings[768] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<Definition>>", 19 ) ); 
  Rogue_literal_strings[769] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<NativeProperty>>", 23 ) ); 
  Rogue_literal_strings[770] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Type>>>>", 34 ) ); 
  Rogue_literal_strings[771] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Int32>>>>", 35 ) ); 
  Rogue_literal_strings[772] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,String[]>>>>", 38 ) ); 
  Rogue_literal_strings[773] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<Int32,Template>>>>", 37 ) ); 
  Rogue_literal_strings[774] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<CmdFlagArg>>", 19 ) ); 
  Rogue_literal_strings[775] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<FnParam>>", 16 ) ); 
  Rogue_literal_strings[776] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TypeSpecializer>>", 24 ) ); 
  Rogue_literal_strings[777] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Method>>>>", 36 ) ); 
  Rogue_literal_strings[778] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Logical>>>>", 37 ) ); 
  Rogue_literal_strings[779] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,ParseReader>>>>", 41 ) ); 
  Rogue_literal_strings[780] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,TokenType>>>>", 39 ) ); 
  Rogue_literal_strings[781] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,TypeSpecializer>>>>", 45 ) ); 
  Rogue_literal_strings[782] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,CmdLabel>>>>", 38 ) ); 
  Rogue_literal_strings[783] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<CmdControlStructure>>", 28 ) ); 
  Rogue_literal_strings[784] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<CmdTaskControlSection>>", 30 ) ); 
  Rogue_literal_strings[785] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Definition>>>>", 40 ) ); 
  Rogue_literal_strings[786] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Property>>>>", 38 ) ); 
  Rogue_literal_strings[787] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<FnArg>>", 14 ) ); 
  Rogue_literal_strings[788] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,String>>>>", 36 ) ); 
  Rogue_literal_strings[789] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<CmdWhichCase>>", 21 ) ); 
  Rogue_literal_strings[790] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<CmdCatch>>", 17 ) ); 
  Rogue_literal_strings[791] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<CmdSelectCase>>", 22 ) ); 
  Rogue_literal_strings[792] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Token[]>>>>", 37 ) ); 
  Rogue_literal_strings[793] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\n", 1 ) ); 
  Rogue_literal_strings[794] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "===============================================================================", 79 ) ); 
  Rogue_literal_strings[795] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ERROR in \"", 10 ) ); 
  Rogue_literal_strings[796] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\"  line ", 8 ) ); 
  Rogue_literal_strings[797] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ", column ", 9 ) ); 
  Rogue_literal_strings[798] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ERROR", 5 ) ); 
  Rogue_literal_strings[799] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Error", 5 ) ); 
  Rogue_literal_strings[800] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "0.0", 3 ) ); 
  Rogue_literal_strings[801] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "EOL  # ", 7 ) ); 
  Rogue_literal_strings[802] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "LiteralCharacterToken", 21 ) ); 
  Rogue_literal_strings[803] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "LiteralInt64Token", 17 ) ); 
  Rogue_literal_strings[804] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "LiteralInt32Token", 17 ) ); 
  Rogue_literal_strings[805] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "LiteralReal64Token", 18 ) ); 
  Rogue_literal_strings[806] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "StringDataToken", 15 ) ); 
  Rogue_literal_strings[807] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "EOLToken", 8 ) ); 
  Rogue_literal_strings[808] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueError", 10 ) ); 
  Rogue_literal_strings[809] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "IOError", 7 ) ); 
  Rogue_literal_strings[810] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdAccess", 9 ) ); 
  Rogue_literal_strings[811] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::type() is not defined (access name '", 38 ) ); 
  Rogue_literal_strings[812] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "').", 3 ) ); 
  Rogue_literal_strings[813] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLabel", 8 ) ); 
  Rogue_literal_strings[814] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdStatement", 12 ) ); 
  Rogue_literal_strings[815] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdMakeRequisite", 16 ) ); 
  Rogue_literal_strings[816] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdFlagArg", 10 ) ); 
  Rogue_literal_strings[817] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdAssign", 9 ) ); 
  Rogue_literal_strings[818] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdThisContext", 14 ) ); 
  Rogue_literal_strings[819] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLiteral", 10 ) ); 
  Rogue_literal_strings[820] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBinary", 9 ) ); 
  Rogue_literal_strings[821] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdTaskControl", 14 ) ); 
  Rogue_literal_strings[822] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCreateCompound", 17 ) ); 
  Rogue_literal_strings[823] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdWriteGlobal", 14 ) ); 
  Rogue_literal_strings[824] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdWriteProperty", 16 ) ); 
  Rogue_literal_strings[825] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdTypeOperator", 15 ) ); 
  Rogue_literal_strings[826] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdUnary", 8 ) ); 
  Rogue_literal_strings[827] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdInlineNative", 15 ) ); 
  Rogue_literal_strings[828] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCreateFunction", 17 ) ); 
  Rogue_literal_strings[829] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdReadLocal", 12 ) ); 
  Rogue_literal_strings[830] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdNativeHeader", 15 ) ); 
  Rogue_literal_strings[831] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdNativeCode", 13 ) ); 
  Rogue_literal_strings[832] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdAwait", 8 ) ); 
  Rogue_literal_strings[833] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdYield", 8 ) ); 
  Rogue_literal_strings[834] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdThrow", 8 ) ); 
  Rogue_literal_strings[835] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdFormattedString", 18 ) ); 
  Rogue_literal_strings[836] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdTrace", 8 ) ); 
  Rogue_literal_strings[837] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdEscape", 9 ) ); 
  Rogue_literal_strings[838] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdNextIteration", 16 ) ); 
  Rogue_literal_strings[839] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdNecessary", 12 ) ); 
  Rogue_literal_strings[840] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdSufficient", 13 ) ); 
  Rogue_literal_strings[841] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdAdjust", 9 ) ); 
  Rogue_literal_strings[842] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdModifyAndAssign", 18 ) ); 
  Rogue_literal_strings[843] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdWhichCase", 12 ) ); 
  Rogue_literal_strings[844] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCatch", 8 ) ); 
  Rogue_literal_strings[845] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdAdjustLocal", 14 ) ); 
  Rogue_literal_strings[846] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdRange", 8 ) ); 
  Rogue_literal_strings[847] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdResolvedModifyAndAssign", 26 ) ); 
  Rogue_literal_strings[848] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdElementAccess", 16 ) ); 
  Rogue_literal_strings[849] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdListConvert", 14 ) ); 
  Rogue_literal_strings[850] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCreateCallback", 17 ) ); 
  Rogue_literal_strings[851] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCreateList", 13 ) ); 
  Rogue_literal_strings[852] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallPriorMethod", 18 ) ); 
  Rogue_literal_strings[853] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdSelect", 9 ) ); 
  Rogue_literal_strings[854] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdSelectCase", 13 ) ); 
  Rogue_literal_strings[855] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdTypedLiteralList", 19 ) ); 
  Rogue_literal_strings[856] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Illegal arguments on inline code.", 33 ) ); 
  Rogue_literal_strings[857] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[INTERNAL] CmdAwait should have been converted to other commands before being adapted to a task.", 96 ) ); 
  Rogue_literal_strings[858] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No such method ", 15 ) ); 
  Rogue_literal_strings[859] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " in type ", 9 ) ); 
  Rogue_literal_strings[860] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "exists", 6 ) ); 
  Rogue_literal_strings[861] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Function_", 9 ) ); 
  Rogue_literal_strings[862] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::update_this_type( scope )() is not defined.", 45 ) ); 
  Rogue_literal_strings[863] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Illegal '@'.", 12 ) ); 
  Rogue_literal_strings[864] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array count expected.", 21 ) ); 
  Rogue_literal_strings[865] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Int32 value expected.", 21 ) ); 
  Rogue_literal_strings[866] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No such method or variable \"", 28 ) ); 
  Rogue_literal_strings[867] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\" exists in current scope of type ", 34 ) ); 
  Rogue_literal_strings[868] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No exact match for ambiguous call to ", 37 ) ); 
  Rogue_literal_strings[869] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ":\n\n", 3 ) ); 
  Rogue_literal_strings[870] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Call to ", 8 ) ); 
  Rogue_literal_strings[871] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " has arguments that are incompatible with the best candidate:\n\n", 63 ) ); 
  Rogue_literal_strings[872] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Function(", 9 ) ); 
  Rogue_literal_strings[873] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Generic function argument does not match any compatible Function parameters in available methods.", 97 ) ); 
  Rogue_literal_strings[874] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Generic function argument ambiguously matches Function parameters in multiple available methods.", 96 ) ); 
  Rogue_literal_strings[875] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Called method does not have a parameter named '", 47 ) ); 
  Rogue_literal_strings[876] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Type name expected, e.g. \"", 26 ) ); 
  Rogue_literal_strings[877] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ".\".", 3 ) ); 
  Rogue_literal_strings[878] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Type name expected.", 19 ) ); 
  Rogue_literal_strings[879] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Missing return value in macro method.", 37 ) ); 
  Rogue_literal_strings[880] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Only single line macros are supported.", 38 ) ); 
  Rogue_literal_strings[881] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "count", 5 ) ); 
  Rogue_literal_strings[882] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Invalid arguments to array count.", 33 ) ); 
  Rogue_literal_strings[883] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Recursive call to getter ", 25 ) ); 
  Rogue_literal_strings[884] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "() - write @", 12 ) ); 
  Rogue_literal_strings[885] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " instead.", 9 ) ); 
  Rogue_literal_strings[886] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot access object property '", 31 ) ); 
  Rogue_literal_strings[887] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "' from a global method.", 23 ) ); 
  Rogue_literal_strings[888] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot read properties using aspect references.  Add a getter to the aspect definition - ", 89 ) ); 
  Rogue_literal_strings[889] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'method ", 8 ) ); 
  Rogue_literal_strings[890] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ": return @", 10 ) ); 
  Rogue_literal_strings[891] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Invalid assignment.", 19 ) ); 
  Rogue_literal_strings[892] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::fn_name() is not defined.", 27 ) ); 
  Rogue_literal_strings[893] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No method ", 10 ) ); 
  Rogue_literal_strings[894] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(1) is defined.", 15 ) ); 
  Rogue_literal_strings[895] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Neither method ", 15 ) ); 
  Rogue_literal_strings[896] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(1) nor global method ", 22 ) ); 
  Rogue_literal_strings[897] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(2) is defined.", 15 ) ); 
  Rogue_literal_strings[898] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Types ", 6 ) ); 
  Rogue_literal_strings[899] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " are incompatible.", 18 ) ); 
  Rogue_literal_strings[900] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot write properties using aspect references.  Add a setter to the aspect definition - ", 90 ) ); 
  Rogue_literal_strings[901] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'method set_", 12 ) ); 
  Rogue_literal_strings[902] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(@", 2 ) ); 
  Rogue_literal_strings[903] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ")'.", 3 ) ); 
  Rogue_literal_strings[904] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "() is defined.", 14 ) ); 
  Rogue_literal_strings[905] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Caught value must be instanceOf class Error.", 44 ) ); 
  Rogue_literal_strings[906] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "try/catch blocks cannot contain 'yield' statements.", 51 ) ); 
  Rogue_literal_strings[907] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "The 'await' command can only be used in [task] methods.", 55 ) ); 
  Rogue_literal_strings[908] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Task method does not return a result.  Ensure you are not awaiting a task method that calls start() - remove the call to start().", 129 ) ); 
  Rogue_literal_strings[909] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "The 'yield' statement can only be used in [task] methods.", 57 ) ); 
  Rogue_literal_strings[910] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Thrown value must be instanceOf class Error.", 44 ) ); 
  Rogue_literal_strings[911] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "More arguments than format markers ('$') in formatted string.", 61 ) ); 
  Rogue_literal_strings[912] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "print", 5 ) ); 
  Rogue_literal_strings[913] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "More format markers ('$') than arguments in formatted string.", 61 ) ); 
  Rogue_literal_strings[914] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "println", 7 ) ); 
  Rogue_literal_strings[915] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No enclosing structure to escape.", 33 ) ); 
  Rogue_literal_strings[916] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No enclosing loop for 'nextIteration' to affect.", 48 ) ); 
  Rogue_literal_strings[917] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No enclosing contingent.", 24 ) ); 
  Rogue_literal_strings[918] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Invalid target for increment/decrement. (", 41 ) ); 
  Rogue_literal_strings[919] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot determine the type of the local variable - either assign an initial value (local ", 88 ) ); 
  Rogue_literal_strings[920] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " = ...) or assign a type (local ", 32 ) ); 
  Rogue_literal_strings[921] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator+", 9 ) ); 
  Rogue_literal_strings[922] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Range<<", 7 ) ); 
  Rogue_literal_strings[923] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No suitable operator method found; type ", 40 ) ); 
  Rogue_literal_strings[924] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " implements neither ", 20 ) ); 
  Rogue_literal_strings[925] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "()(", 3 ) ); 
  Rogue_literal_strings[926] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ") nor ", 6 ) ); 
  Rogue_literal_strings[927] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "=(", 2 ) ); 
  Rogue_literal_strings[928] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Property or method name expected.", 33 ) ); 
  Rogue_literal_strings[929] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Property or method name expected - '.=' cannot be used with a chain of references.", 82 ) ); 
  Rogue_literal_strings[930] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "count()", 7 ) ); 
  Rogue_literal_strings[931] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "at(Int32)", 9 ) ); 
  Rogue_literal_strings[932] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "get(Int32)", 10 ) ); 
  Rogue_literal_strings[933] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Literal integer value expected.", 31 ) ); 
  Rogue_literal_strings[934] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "has_another", 11 ) ); 
  Rogue_literal_strings[935] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "has_another()", 13 ) ); 
  Rogue_literal_strings[936] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "read()", 6 ) ); 
  Rogue_literal_strings[937] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Illegal iteration target - forEach requires either an indexed collection (.count, .get/.at) or a reader (.has_another, .read).", 126 ) ); 
  Rogue_literal_strings[938] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Object's read() method does not return a value.", 47 ) ); 
  Rogue_literal_strings[939] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot specify a step size for a reader - only for an indexed collection.", 73 ) ); 
  Rogue_literal_strings[940] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "read", 4 ) ); 
  Rogue_literal_strings[941] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "get", 3 ) ); 
  Rogue_literal_strings[942] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "List conversion syntax used on a non-list value.", 48 ) ); 
  Rogue_literal_strings[943] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ListMap<<", 9 ) ); 
  Rogue_literal_strings[944] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "convert", 7 ) ); 
  Rogue_literal_strings[945] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ListReduce<<", 12 ) ); 
  Rogue_literal_strings[946] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "No such method '", 16 ) ); 
  Rogue_literal_strings[947] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "' exists in type ", 17 ) ); 
  Rogue_literal_strings[948] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Multiple candidates match ambiguous reference to '", 50 ) ); 
  Rogue_literal_strings[949] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'; add qualifiying parameter types.", 35 ) ); 
  Rogue_literal_strings[950] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'as' can only be used to reinterpret references.", 48 ) ); 
  Rogue_literal_strings[951] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TODO: [] -> Property[]", 22 ) ); 
  Rogue_literal_strings[952] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "add", 3 ) ); 
  Rogue_literal_strings[953] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Illegal target - 'prior' can only be used to call overridden methods.", 69 ) ); 
  Rogue_literal_strings[954] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Selection list cannot be empty.", 31 ) ); 
  Rogue_literal_strings[955] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "The final 'select' cannot have an attached condition.", 53 ) ); 
  Rogue_literal_strings[956] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "The result of a call cannot be assigned a value.", 48 ) ); 
  Rogue_literal_strings[957] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "set_", 4 ) ); 
  Rogue_literal_strings[958] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Recursive call to setter set_", 29 ) ); 
  Rogue_literal_strings[959] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "() - write \"@", 13 ) ); 
  Rogue_literal_strings[960] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " = ...\" instead.", 16 ) ); 
  Rogue_literal_strings[961] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\" exists in the current scope.", 30 ) ); 
  Rogue_literal_strings[962] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot assign to inline native code without specifying its type.  For example, native(\"...\")->", 94 ) ); 
  Rogue_literal_strings[963] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "set", 3 ) ); 
  Rogue_literal_strings[964] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot increment or decrement inline native code without specifying its type.  For example, native(\"...\")->", 107 ) ); 
  Rogue_literal_strings[965] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Local variable '", 16 ) ); 
  Rogue_literal_strings[966] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "' cannot be called like a method.", 33 ) ); 
  Rogue_literal_strings[967] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[CmdAccess.expand_modify_and_assign() Cmd.rogue:1833]", 53 ) ); 
  Rogue_literal_strings[968] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[INTERNAL]", 10 ) ); 
  Rogue_literal_strings[969] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot modify-and-assign inline native code without specifying its type.  For example, native(\"...\")->", 102 ) ); 
  Rogue_literal_strings[970] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "return (", 8 ) ); 
  Rogue_literal_strings[971] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ")(", 2 ) ); 
  Rogue_literal_strings[972] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::write_cpp() is not defined (access name ", 42 ) ); 
  Rogue_literal_strings[973] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "for (;", 6 ) ); 
  Rogue_literal_strings[974] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "while (", 7 ) ); 
  Rogue_literal_strings[975] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ":;", 2 ) ); 
  Rogue_literal_strings[976] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::symbol() is not defined.", 26 ) ); 
  Rogue_literal_strings[977] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "switch (++THIS->ip)", 19 ) ); 
  Rogue_literal_strings[978] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "  THIS->ip = -1;", 16 ) ); 
  Rogue_literal_strings[979] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "  return false;", 15 ) ); 
  Rogue_literal_strings[980] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "NULL", 4 ) ); 
  Rogue_literal_strings[981] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " is not a singleton.", 20 ) ); 
  Rogue_literal_strings[982] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ")ROGUE_SINGLETON(", 17 ) ); 
  Rogue_literal_strings[983] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Illegal use of '$this' in global method.", 40 ) ); 
  Rogue_literal_strings[984] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ROGUE_ARG(", 10 ) ); 
  Rogue_literal_strings[985] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "->count", 7 ) ); 
  Rogue_literal_strings[986] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "call_", 5 ) ); 
  Rogue_literal_strings[987] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "if (", 4 ) ); 
  Rogue_literal_strings[988] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "else ", 5 ) ); 
  Rogue_literal_strings[989] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "goto ", 5 ) ); 
  Rogue_literal_strings[990] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ROGUE_TRY", 9 ) ); 
  Rogue_literal_strings[991] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ROGUE_CATCH( ", 13 ) ); 
  Rogue_literal_strings[992] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ROGUE_END_TRY", 13 ) ); 
  Rogue_literal_strings[993] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ROGUE_THROW(", 12 ) ); 
  Rogue_literal_strings[994] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "continue", 8 ) ); 
  Rogue_literal_strings[995] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "if ( !(", 7 ) ); 
  Rogue_literal_strings[996] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ") ) goto ", 9 ) ); 
  Rogue_literal_strings[997] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ") goto ", 7 ) ); 
  Rogue_literal_strings[998] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ROGUE_DEF_LOCAL_REF_NULL(", 25 ) ); 
  Rogue_literal_strings[999] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ROGUE_DEF_LOCAL_REF(", 20 ) ); 
  Rogue_literal_strings[1000] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueObject_instance_of(", 24 ) ); 
  Rogue_literal_strings[1001] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ")(RogueObject_as(", 17 ) ); 
  Rogue_literal_strings[1002] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ")))", 3 ) ); 
  Rogue_literal_strings[1003] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(1.0/0.0)", 9 ) ); 
  Rogue_literal_strings[1004] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(-1.0/0.0)", 10 ) ); 
  Rogue_literal_strings[1005] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(0.0/0.0)", 9 ) ); 
  Rogue_literal_strings[1006] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "LL", 2 ) ); 
  Rogue_literal_strings[1007] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(RogueCharacter)", 16 ) ); 
  Rogue_literal_strings[1008] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'\\n'", 4 ) ); 
  Rogue_literal_strings[1009] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'\\\\'", 4 ) ); 
  Rogue_literal_strings[1010] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "'\\''", 4 ) ); 
  Rogue_literal_strings[1011] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " || ", 4 ) ); 
  Rogue_literal_strings[1012] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ") ? (", 5 ) ); 
  Rogue_literal_strings[1013] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ") : ", 4 ) ); 
  Rogue_literal_strings[1014] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "RogueType_create_array( ", 24 ) ); 
  Rogue_literal_strings[1015] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ", sizeof(", 9 ) ); 
  Rogue_literal_strings[1016] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ", true", 6 ) ); 
  Rogue_literal_strings[1017] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ROGUE_CREATE_REF(", 17 ) ); 
  Rogue_literal_strings[1018] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ROGUE_CREATE_OBJECT(", 20 ) ); 
  Rogue_literal_strings[1019] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "->_singleton = ", 15 ) ); 
  Rogue_literal_strings[1020] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "switch (", 8 ) ); 
  Rogue_literal_strings[1021] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "break;", 6 ) ); 
  Rogue_literal_strings[1022] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "->objects[", 10 ) ); 
  Rogue_literal_strings[1023] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "]))", 3 ) ); 
  Rogue_literal_strings[1024] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "reals[", 6 ) ); 
  Rogue_literal_strings[1025] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "floats[", 7 ) ); 
  Rogue_literal_strings[1026] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "longs[", 6 ) ); 
  Rogue_literal_strings[1027] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "integers[", 9 ) ); 
  Rogue_literal_strings[1028] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "characters[", 11 ) ); 
  Rogue_literal_strings[1029] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "bytes[", 6 ) ); 
  Rogue_literal_strings[1030] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "logicals[", 9 ) ); 
  Rogue_literal_strings[1031] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[INTERNAL] Unhandled type in CmdReadArrayElement.", 49 ) ); 
  Rogue_literal_strings[1032] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "*)(", 3 ) ); 
  Rogue_literal_strings[1033] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "->bytes))[", 10 ) ); 
  Rogue_literal_strings[1034] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "] = ", 4 ) ); 
  Rogue_literal_strings[1035] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "objects[", 8 ) ); 
  Rogue_literal_strings[1036] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::trace_used_code() (\"", 22 ) ); 
  Rogue_literal_strings[1037] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "\") is not defined.", 18 ) ); 
  Rogue_literal_strings[1038] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdStatementList", 16 ) ); 
  Rogue_literal_strings[1039] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdArgs", 7 ) ); 
  Rogue_literal_strings[1040] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " is not an override - no prior version of it exists.", 52 ) ); 
  Rogue_literal_strings[1041] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Value expected; call to ", 24 ) ); 
  Rogue_literal_strings[1042] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( " does not return a value.", 25 ) ); 
  Rogue_literal_strings[1043] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdReturn", 9 ) ); 
  Rogue_literal_strings[1044] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdControlStructure", 19 ) ); 
  Rogue_literal_strings[1045] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLocalDeclaration", 19 ) ); 
  Rogue_literal_strings[1046] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "DirectiveTokenType", 18 ) ); 
  Rogue_literal_strings[1047] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "StructuralDirectiveTokenType", 28 ) ); 
  Rogue_literal_strings[1048] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "EOLTokenType", 12 ) ); 
  Rogue_literal_strings[1049] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "StructureTokenType", 18 ) ); 
  Rogue_literal_strings[1050] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "NativeCodeTokenType", 19 ) ); 
  Rogue_literal_strings[1051] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ModifyAndAssignTokenType", 24 ) ); 
  Rogue_literal_strings[1052] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Function_159", 12 ) ); 
  Rogue_literal_strings[1053] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Function_160", 12 ) ); 
  Rogue_literal_strings[1054] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CloneMethodArgs", 15 ) ); 
  Rogue_literal_strings[1055] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TaskArgs", 8 ) ); 
  Rogue_literal_strings[1056] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "MacroArgs", 9 ) ); 
  Rogue_literal_strings[1057] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdGenericLoop", 14 ) ); 
  Rogue_literal_strings[1058] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdIf", 5 ) ); 
  Rogue_literal_strings[1059] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdWhich", 8 ) ); 
  Rogue_literal_strings[1060] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdContingent", 13 ) ); 
  Rogue_literal_strings[1061] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdTry", 6 ) ); 
  Rogue_literal_strings[1062] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdForEach", 10 ) ); 
  Rogue_literal_strings[1063] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBlock", 8 ) ); 
  Rogue_literal_strings[1064] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdSwitch", 9 ) ); 
  Rogue_literal_strings[1065] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLiteralThis", 14 ) ); 
  Rogue_literal_strings[1066] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Invalid reference to 'this' object - global methods have no object context.", 75 ) ); 
  Rogue_literal_strings[1067] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLiteralInt32", 15 ) ); 
  Rogue_literal_strings[1068] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLiteralNull", 14 ) ); 
  Rogue_literal_strings[1069] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLiteralLogical", 17 ) ); 
  Rogue_literal_strings[1070] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLiteralString", 16 ) ); 
  Rogue_literal_strings[1071] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdDefaultValue", 15 ) ); 
  Rogue_literal_strings[1072] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLiteralReal64", 16 ) ); 
  Rogue_literal_strings[1073] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLiteralInt64", 15 ) ); 
  Rogue_literal_strings[1074] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLiteralCharacter", 19 ) ); 
  Rogue_literal_strings[1075] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBinaryLogical", 16 ) ); 
  Rogue_literal_strings[1076] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "::combine_literal_operands(Logical,Logical) is not defined.", 59 ) ); 
  Rogue_literal_strings[1077] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "shift_right", 11 ) ); 
  Rogue_literal_strings[1078] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "mod", 3 ) ); 
  Rogue_literal_strings[1079] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "((void*)", 8 ) ); 
  Rogue_literal_strings[1080] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ") == ((void*)", 13 ) ); 
  Rogue_literal_strings[1081] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ") != ((void*)", 13 ) ); 
  Rogue_literal_strings[1082] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ") pow((double)", 14 ) ); 
  Rogue_literal_strings[1083] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( ", (double)", 10 ) ); 
  Rogue_literal_strings[1084] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator-", 9 ) ); 
  Rogue_literal_strings[1085] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator*", 9 ) ); 
  Rogue_literal_strings[1086] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator/", 9 ) ); 
  Rogue_literal_strings[1087] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator%", 9 ) ); 
  Rogue_literal_strings[1088] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator^", 9 ) ); 
  Rogue_literal_strings[1089] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "The '", 5 ) ); 
  Rogue_literal_strings[1090] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "' operator cannot be applied to type ", 37 ) ); 
  Rogue_literal_strings[1091] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "&&", 2 ) ); 
  Rogue_literal_strings[1092] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdComparison", 13 ) ); 
  Rogue_literal_strings[1093] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdAdd", 6 ) ); 
  Rogue_literal_strings[1094] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBitwiseOp", 12 ) ); 
  Rogue_literal_strings[1095] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdSubtract", 11 ) ); 
  Rogue_literal_strings[1096] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdMultiply", 11 ) ); 
  Rogue_literal_strings[1097] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdDivide", 9 ) ); 
  Rogue_literal_strings[1098] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdMod", 6 ) ); 
  Rogue_literal_strings[1099] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdPower", 8 ) ); 
  Rogue_literal_strings[1100] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[INTERNAL] $::resolve_for_reference() is undefined.", 51 ) ); 
  Rogue_literal_strings[1101] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Incompatible types for comparison: ", 35 ) ); 
  Rogue_literal_strings[1102] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCastToType", 13 ) ); 
  Rogue_literal_strings[1103] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdInstanceOf", 13 ) ); 
  Rogue_literal_strings[1104] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdConvertToType", 16 ) ); 
  Rogue_literal_strings[1105] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdAs", 5 ) ); 
  Rogue_literal_strings[1106] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLogicalize", 13 ) ); 
  Rogue_literal_strings[1107] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLogicalNot", 13 ) ); 
  Rogue_literal_strings[1108] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdNegate", 9 ) ); 
  Rogue_literal_strings[1109] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBitwiseNot", 13 ) ); 
  Rogue_literal_strings[1110] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "not ", 4 ) ); 
  Rogue_literal_strings[1111] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "(-", 2 ) ); 
  Rogue_literal_strings[1112] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator?", 9 ) ); 
  Rogue_literal_strings[1113] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator!", 9 ) ); 
  Rogue_literal_strings[1114] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "!!", 2 ) ); 
  Rogue_literal_strings[1115] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "[INTERNAL] TODO: 'is' for compounds.", 36 ) ); 
  Rogue_literal_strings[1116] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Cannot use 'isNot' between mixed type categories ", 49 ) ); 
  Rogue_literal_strings[1117] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdRangeUpTo", 12 ) ); 
  Rogue_literal_strings[1118] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdRangeDownTo", 14 ) ); 
  Rogue_literal_strings[1119] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdModifyAndAssignLocal", 23 ) ); 
  Rogue_literal_strings[1120] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdModifyAndAssignGlobal", 24 ) ); 
  Rogue_literal_strings[1121] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdModifyAndAssignProperty", 26 ) ); 
  Rogue_literal_strings[1122] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLogicalXor", 13 ) ); 
  Rogue_literal_strings[1123] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLogicalOr", 12 ) ); 
  Rogue_literal_strings[1124] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdLogicalAnd", 13 ) ); 
  Rogue_literal_strings[1125] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator!=", 10 ) ); 
  Rogue_literal_strings[1126] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator<>", 10 ) ); 
  Rogue_literal_strings[1127] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator==", 10 ) ); 
  Rogue_literal_strings[1128] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator<=", 10 ) ); 
  Rogue_literal_strings[1129] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator>", 9 ) ); 
  Rogue_literal_strings[1130] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator>=", 10 ) ); 
  Rogue_literal_strings[1131] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "operator<", 9 ) ); 
  Rogue_literal_strings[1132] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBitwiseXor", 13 ) ); 
  Rogue_literal_strings[1133] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBitwiseOr", 12 ) ); 
  Rogue_literal_strings[1134] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBitwiseAnd", 13 ) ); 
  Rogue_literal_strings[1135] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBitwiseShiftLeft", 19 ) ); 
  Rogue_literal_strings[1136] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBitwiseShiftRight", 20 ) ); 
  Rogue_literal_strings[1137] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdBitwiseShiftRightX", 21 ) ); 
  Rogue_literal_strings[1138] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdConvertToPrimitiveType", 25 ) ); 
  Rogue_literal_strings[1139] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CandidateMethods", 16 ) ); 
  Rogue_literal_strings[1140] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Table<<String,Cmd>>", 19 ) ); 
  Rogue_literal_strings[1141] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "ListReader<<CmdSelectCase>>", 27 ) ); 
  Rogue_literal_strings[1142] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Cmd>>", 24 ) ); 
  Rogue_literal_strings[1143] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "TableEntry<<String,Cmd>>[]", 26 ) ); 
  Rogue_literal_strings[1144] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Array<<TableEntry<<String,Cmd>>>>", 33 ) ); 
  Rogue_literal_strings[1145] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "NativeCodeToken", 15 ) ); 
  Rogue_literal_strings[1146] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdReadSingleton", 16 ) ); 
  Rogue_literal_strings[1147] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCall", 7 ) ); 
  Rogue_literal_strings[1148] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdReadArrayCount", 17 ) ); 
  Rogue_literal_strings[1149] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdNoAction", 11 ) ); 
  Rogue_literal_strings[1150] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCreateArray", 14 ) ); 
  Rogue_literal_strings[1151] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCreateObject", 15 ) ); 
  Rogue_literal_strings[1152] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdReadGlobal", 13 ) ); 
  Rogue_literal_strings[1153] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdReadProperty", 15 ) ); 
  Rogue_literal_strings[1154] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdWriteSingleton", 17 ) ); 
  Rogue_literal_strings[1155] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdWriteLocal", 13 ) ); 
  Rogue_literal_strings[1156] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdReadArrayElement", 19 ) ); 
  Rogue_literal_strings[1157] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdWriteArrayElement", 20 ) ); 
  Rogue_literal_strings[1158] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdAdjustGlobal", 15 ) ); 
  Rogue_literal_strings[1159] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdAdjustProperty", 17 ) ); 
  Rogue_literal_strings[1160] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCompareNE", 12 ) ); 
  Rogue_literal_strings[1161] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCompareLE", 12 ) ); 
  Rogue_literal_strings[1162] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCompareGE", 12 ) ); 
  Rogue_literal_strings[1163] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCompareEQ", 12 ) ); 
  Rogue_literal_strings[1164] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCompareIs", 12 ) ); 
  Rogue_literal_strings[1165] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCompareIsNot", 15 ) ); 
  Rogue_literal_strings[1166] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCompareLT", 12 ) ); 
  Rogue_literal_strings[1167] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCompareGT", 12 ) ); 
  Rogue_literal_strings[1168] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallInlineNative", 19 ) ); 
  Rogue_literal_strings[1169] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallNativeRoutine", 20 ) ); 
  Rogue_literal_strings[1170] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallRoutine", 14 ) ); 
  Rogue_literal_strings[1171] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallNativeMethod", 19 ) ); 
  Rogue_literal_strings[1172] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallAspectMethod", 19 ) ); 
  Rogue_literal_strings[1173] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallMethod", 13 ) ); 
  Rogue_literal_strings[1174] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallDynamicMethod", 20 ) ); 
  Rogue_literal_strings[1175] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallStaticMethod", 19 ) ); 
  Rogue_literal_strings[1176] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallInlineNativeRoutine", 26 ) ); 
  Rogue_literal_strings[1177] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "CmdCallInlineNativeMethod", 25 ) ); 
  Rogue_literal_strings[1178] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Reader<<Character>>", 19 ) ); 
  Rogue_literal_strings[1179] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "PrintWriterAspect", 17 ) ); 
  Rogue_literal_strings[1180] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Writer<<Character>>", 19 ) ); 
  Rogue_literal_strings[1181] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Reader<<String>>", 16 ) ); 
  Rogue_literal_strings[1182] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Reader<<CmdSelectCase>>", 23 ) ); 
  Rogue_literal_strings[1183] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Int32?", 6 ) ); 
  Rogue_literal_strings[1184] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "Character?", 10 ) ); 
  Rogue_literal_strings[1185] = (RogueString*) RogueObject_retain( RogueString_create_from_c_string( "SystemEnvironment", 17 ) ); 

}

void Rogue_launch()
{
  RogueErrorHandler uncaught_error_handler;
  Rogue_error_handler = &uncaught_error_handler;
  if (ROGUE_SETJMP(Rogue_error_handler->info))
  {
    if (Rogue_error_object && Rogue_error_object->type)
    {
      printf( "Uncaught " );
      RogueType_print_name( Rogue_error_object->type );
      printf( ".\n\n" );
  
      RogueStackTrace__print( ((RogueClassException*)Rogue_error_object)->stack_trace );
    }
    else
    {
      printf( "Uncaught error.\n" );
    }
    return;
  }
  RogueStringBuilder__init_class();
  RogueCmdStatementList__init_class();
  RogueTokenType__init_class();
  RogueSystem__init_class();
  RoguePreprocessor__init_class();

  RogueSystem_executable_filepath = RogueString_create_from_c_string(
      Rogue_argc ? Rogue_argv[0] : "Rogue", -1 );
  
  for (int i=1; i<Rogue_argc; ++i)
  {
    RogueStringList__add__String( RogueSystem_command_line_arguments,
        RogueString_create_from_c_string( Rogue_argv[i], -1 ) );
  }

  // Instantiate requisite singletons
  ROGUE_SINGLETON( Global );
  ROGUE_SINGLETON( Console );
  ROGUE_SINGLETON( RogueC );
  ROGUE_SINGLETON( Program );
  ROGUE_SINGLETON( Function_159 );
  ROGUE_SINGLETON( Function_160 );

  RogueGlobal__on_launch( (RogueClassGlobal*) (RogueType_singleton(RogueTypeGlobal)) );
  Rogue_collect_garbage();
}

bool Rogue_update_tasks()
{
  // Returns true if any tasks are still active
  Rogue_collect_garbage();
  return false;
}


int main( int argc, const char* argv[] )
{
  Rogue_configure( argc, argv );
  Rogue_launch();

  while (Rogue_update_tasks()) {}

  // Give a few GC's to allow objects requiring clean-up to do so.
  Rogue_collect_garbage( true );
  Rogue_collect_garbage( true );
  Rogue_collect_garbage( true );

  Rogue_quit();

  return 0;
}
