#include <stdio.h>
#include "RogueC.h"

//=============================================================================
//  Rogue.cpp
//
//  Rogue runtime.
//
//  ---------------------------------------------------------------------------
//
//  Created 2015.01.19 by Abe Pralle
//
//  This is free and unencumbered software released into the public domain
//  under the terms of the UNLICENSE ( http://unlicense.org ).
//=============================================================================

#include <fcntl.h>
#include <math.h>
#include <string.h>
#include <sys/timeb.h>
#include <sys/types.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <inttypes.h>

#if !defined(_WIN32)
#  include <sys/time.h>
#  include <unistd.h>
#  include <signal.h>
#  include <dirent.h>
#  include <sys/socket.h>
#  include <sys/uio.h>
#  include <sys/stat.h>
#  include <netdb.h>
#  include <errno.h>
#  include <pthread.h>
#endif

#if defined(ANDROID)
#  include <netinet/in.h>
#endif

#if defined(_WIN32)
#  include <direct.h>
#  define chdir _chdir
#endif

#if TARGET_OS_IPHONE 
#  include <sys/types.h>
#  include <sys/sysctl.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#ifndef PATH_MAX
#  define PATH_MAX 4096
#endif

//-----------------------------------------------------------------------------
//  RogueType
//-----------------------------------------------------------------------------
RogueType::RogueType() : base_type_count(0), base_types(0), index(-1), object_size(0), _singleton(0)
{
  if (Rogue_program.next_type_index == Rogue_program.type_count)
  {
    printf( "INTERNAL ERROR: Not enough type slots.\n" );
    exit( 1 );
  }

  Rogue_program.types[ Rogue_program.next_type_index++ ] = this;
}

RogueType::~RogueType()
{
  if (base_types)
  {
    delete base_types;
    base_types = 0;
    base_type_count = 0;
  }
}

RogueObject* RogueType::create_object()
{
  return Rogue_program.allocate_object( this, object_size );
}

RogueLogical RogueType::instance_of( RogueType* ancestor_type )
{
  if (this == ancestor_type) return true;

  int count = base_type_count;
  RogueType** base_type_ptr = base_types - 1;
  while (--count >= 0)
  {
    if (ancestor_type == *(++base_type_ptr)) return true;
  }

  return false;
}

RogueObject* RogueType::singleton()
{
  if ( !_singleton ) _singleton = create_object();
  return _singleton;
}

//-----------------------------------------------------------------------------
//  RogueObject
//-----------------------------------------------------------------------------
void RogueObjectType::configure()
{
  object_size = (int) sizeof( RogueObject );
}

RogueObject* RogueObjectType::create_object()
{
  return (RogueObject*) Rogue_program.allocate_object( this, sizeof(RogueObject) );
}

const char* RogueObjectType::name() { return "Object"; }


RogueObject* RogueObject::as( RogueObject* object, RogueType* specialized_type )
{
  if (object && object->type->instance_of(specialized_type)) return object;
  return NULL;
}

RogueLogical RogueObject::instance_of( RogueObject* object, RogueType* ancestor_type )
{
  return (!object || object->type->instance_of(ancestor_type));
}


//-----------------------------------------------------------------------------
//  RogueString
//-----------------------------------------------------------------------------
void RogueStringType::configure()
{
  object_size = (int) sizeof( RogueString );
}

RogueString* RogueString::create( int count )
{
  if (count < 0) count = 0;

  int total_size = sizeof(RogueString) + (count * sizeof(RogueCharacter));

  RogueString* st = (RogueString*) Rogue_program.allocate_object( Rogue_program.type_String, total_size );
  st->count = count;
  st->hash_code = 0;

  return st;
}

RogueString* RogueString::create( const char* c_string, int count )
{
  if (count == -1) count = strlen( c_string );

  RogueString* st = RogueString::create( count );

  // Copy 8-bit chars to 16-bit data while computing hash code.
  RogueCharacter* dest = st->characters - 1;
  const unsigned char* src = (const unsigned char*) (c_string - 1);
  int hash_code = 0;
  while (--count >= 0)
  {
    int ch = *(++src);
    *(++dest) = (RogueCharacter) ch;
    hash_code = ((hash_code << 3) - hash_code) + ch;  // hash * 7 + ch
  }

  st->hash_code = hash_code;

  return st;
}

RogueString* RogueString::create( RogueCharacterList* characters )
{
  if ( !characters ) return RogueString::create(0);

  int count = characters->count;
  RogueString* result = RogueString::create( characters->count );
  memcpy( result->characters, characters->data->characters, count*sizeof(RogueCharacter) );
  result->update_hash_code();
  return result;
}

bool RogueString::to_c_string( char* buffer, int buffer_size )
{
  if (count + 1 > buffer_size) return false;

  RogueCharacter* src = characters - 1;
  char* dest = buffer - 1;
  int n = count;

  while (--n >= 0)
  {
    *(++dest) = (char) (*(++src));
  }
  *(++dest) = 0;

  return true;
}

RogueString* RogueString::update_hash_code()
{
  int code = hash_code;
  int len = count;
  RogueCharacter* src = characters - 1;
  while (--len >= 0)
  {
    code = ((code<<3) - code) + *(++src);
  }
  hash_code = code;
  return this;
}

void RogueString::print( RogueString* st )
{
  if (st)
  {
    RogueString::print( st->characters, st->count );
  }
  else
  {
    printf( "null" );
  }
}

void RogueString::print( RogueCharacter* characters, int count )
{
  if (characters)
  {
    RogueCharacter* src = characters - 1;
    while (--count >= 0)
    {
      int ch = *(++src);
      putchar( ch );
    }
  }
  else
  {
    printf( "null" );
  }
}

//-----------------------------------------------------------------------------
//  RogueArray
//-----------------------------------------------------------------------------
void RogueArrayType::configure()
{
  object_size = (int) sizeof( RogueArray );
}

void RogueArrayType::trace( RogueObject* obj )
{
  RogueArray* array = (RogueArray*) obj;
  if ( !array->is_reference_array ) return;

  int count = array->count;
  RogueObject** cur = array->objects + count;
  while (--count >= 0)
  {
    ROGUE_TRACE( *(--cur) );
  }
}

RogueArray* RogueArray::create( int count, int element_size, bool is_reference_array )
{
  if (count < 0) count = 0;
  int data_size  = count * element_size;
  int total_size = sizeof(RogueArray) + data_size;

  RogueArray* array = (RogueArray*) Rogue_program.allocate_object( Rogue_program.type_Array, total_size );

  memset( array->bytes, 0, data_size );
  array->count = count;
  array->element_size = element_size;
  array->is_reference_array = is_reference_array;

  return array;
}

RogueArray* RogueArray::set( RogueInteger i1, RogueArray* other, RogueInteger other_i1, RogueInteger other_i2 )
{
  if ( !other || i1 >= count ) return this;
  if (this->is_reference_array ^ other->is_reference_array) return this;

  if (other_i2 == -1) other_i2 = other->count - 1;

  if (i1 < 0)
  {
    other_i1 -= i1;
    i1 = 0;
  }

  if (other_i1 < 0) other_i1 = 0;
  if (other_i2 >= other->count) other_i2 = other->count - 1;
  if (other_i1 > other_i2) return this;

  RogueByte* src = other->bytes + other_i1 * element_size;
  int other_bytes = ((other_i2 - other_i1) + 1) * element_size;

  RogueByte* dest = bytes + (i1 * element_size);
  int allowable_bytes = (count - i1) * element_size;

  if (other_bytes > allowable_bytes) other_bytes = allowable_bytes;

  if (src >= dest + other_bytes || (src + other_bytes) < dest)
  {
    // Copy region does not overlap
    memcpy( dest, src, other_bytes );
  }
  else
  {
    // Copy region overlaps
    memmove( dest, src, other_bytes );
  }

  return this;
}

//-----------------------------------------------------------------------------
//  RogueProgramCore
//-----------------------------------------------------------------------------
RogueProgramCore::RogueProgramCore( int type_count ) : objects(NULL), next_type_index(0)
{
  type_count += ROGUE_BUILT_IN_TYPE_COUNT;
  this->type_count = type_count;
  types = new RogueType*[ type_count ];
  memset( types, 0, sizeof(RogueType*) );

  type_Object = new RogueObjectType();
  type_String = new RogueStringType();
  type_Array  = new RogueArrayType();

  for (int i=0; i<next_type_index; ++i)
  {
    types[i]->configure();
  }
}

RogueProgramCore::~RogueProgramCore()
{
  while (objects)
  {
    RogueObject* next_object = objects->next_object;
    Rogue_allocator.free( objects, objects->object_size );
    objects = next_object;
  }

  for (int i=0; i<type_count; ++i)
  {
    if (types[i])
    {
      delete types[i];
      types[i] = 0;
    }
  }
}

RogueObject* RogueProgramCore::allocate_object( RogueType* type, int size )
{
  RogueObject* obj = (RogueObject*) Rogue_allocator.allocate( size );
  memset( obj, 0, size );

  obj->next_object = objects;
  objects = obj;
  obj->type = type;
  obj->object_size = size;

  return obj;
}

void RogueProgramCore::collect_garbage()
{
  ROGUE_TRACE( main_object );

  // Trace singletons
  for (int i=type_count-1; i>=0; --i)
  {
    RogueType* type = types[i];
    if (type) ROGUE_TRACE( type->_singleton );
  }

  // Trace through all as-yet unreferenced objects that are manually retained.
  RogueObject* cur = objects;
  while (cur)
  {
    if (cur->object_size >= 0 && cur->reference_count > 0)
    {
      ROGUE_TRACE( cur );
    }
    cur = cur->next_object;
  }

  cur = objects;
  objects = NULL;
  RogueObject* survivors = NULL;  // local var for speed

  while (cur)
  {
    RogueObject* next_object = cur->next_object;
    if (cur->object_size < 0)
    {
      // Discovered automatically during tracing.
      //printf( "Referenced %s\n", cur->type->name() );
      cur->object_size = ~cur->object_size;
      cur->next_object = survivors;
      survivors = cur;
    }
    else
    {
      //printf( "Unreferenced %s\n", cur->type->name() );
      Rogue_allocator.free( cur, cur->object_size );
    }
    cur = next_object;
  }

  objects = survivors;
}

//-----------------------------------------------------------------------------
//  RogueAllocationPage
//-----------------------------------------------------------------------------
RogueAllocationPage::RogueAllocationPage( RogueAllocationPage* next_page )
  : next_page(next_page)
{
  cursor = data;
  remaining = ROGUEMM_PAGE_SIZE;
  //printf( "New page\n");
}

void* RogueAllocationPage::allocate( int size )
{
  // Round size up to multiple of 8.
  if (size > 0) size = (size + 7) & ~7;
  else          size = 8;

  if (size > remaining) return NULL;

  //printf( "Allocating %d bytes from page.\n", size );
  void* result = cursor;
  cursor += size;
  remaining -= size;

  //printf( "%d / %d\n", ROGUEMM_PAGE_SIZE - remaining, ROGUEMM_PAGE_SIZE );
  return result;
}


//-----------------------------------------------------------------------------
//  RogueAllocator
//-----------------------------------------------------------------------------
RogueAllocator::RogueAllocator() : pages(NULL)
{
  for (int i=0; i<ROGUEMM_SLOT_COUNT; ++i)
  {
    free_objects[i] = NULL;
  }
}

RogueAllocator::~RogueAllocator()
{
  while (pages)
  {
    RogueAllocationPage* next_page = pages->next_page;
    delete pages;
    pages = next_page;
  }
}

void* RogueAllocator::allocate( int size )
{
  if (size > ROGUEMM_SMALL_ALLOCATION_SIZE_LIMIT) return malloc( size );

  if (size <= 0) size = ROGUEMM_GRANULARITY_SIZE;
  else           size = (size + ROGUEMM_GRANULARITY_MASK) & ~ROGUEMM_GRANULARITY_MASK;

  int slot = (size >> ROGUEMM_GRANULARITY_BITS);
  RogueObject* obj = free_objects[slot];
  
  if (obj)
  {
    //printf( "found free object\n");
    free_objects[slot] = obj->next_object;
    return obj;
  }

  // No free objects for requested size.

  // Try allocating a new object from the current page.
  if ( !pages )
  {
    pages = new RogueAllocationPage(NULL);
  }

  obj = (RogueObject*) pages->allocate( size );
  if (obj) return obj;


  // Not enough room on allocation page.  Allocate any smaller blocks
  // we're able to and then move on to a new page.
  int s = slot - 1;
  while (s >= 1)
  {
    obj = (RogueObject*) pages->allocate( s << ROGUEMM_GRANULARITY_BITS );
    if (obj)
    {
      //printf( "free obj size %d\n", (s << ROGUEMM_GRANULARITY_BITS) );
      obj->next_object = free_objects[s];
      free_objects[s] = obj;
    }
    else
    {
      --s;
    }
  }

  // New page; this will work for sure.
  pages = new RogueAllocationPage( pages );
  return pages->allocate( size );
}

void* RogueAllocator::free( void* data, int size )
{
  if (data)
  {
    if (size > ROGUEMM_SMALL_ALLOCATION_SIZE_LIMIT)
    {
      ::free( data );
    }
    else
    {
      // Return object to small allocation pool
      RogueObject* obj = (RogueObject*) data;
      int slot = (size + ROGUEMM_GRANULARITY_MASK) >> ROGUEMM_GRANULARITY_BITS;
      if (slot <= 0) slot = 1;
      obj->next_object = free_objects[slot];
      free_objects[slot] = obj;
    }
  }

  // Always returns null, allowing a pointer to be freed and assigned null in
  // a single step.
  return NULL;
}

RogueAllocator Rogue_allocator;

typedef RogueString*(*ROGUEM0)(RogueCharacterList*);
typedef RogueCharacterList*(*ROGUEM1)(RogueCharacterList*);
typedef RogueString*(*ROGUEM2)(RogueObject*);
typedef RogueString*(*ROGUEM3)(RogueClassGenericList*);
typedef RogueClassGenericList*(*ROGUEM4)(RogueClassGenericList*);
typedef RogueString*(*ROGUEM5)(RogueStringBuilder*);
typedef RogueString*(*ROGUEM6)(RogueStringList*);
typedef RogueStringList*(*ROGUEM7)(RogueStringList*);
typedef RogueString*(*ROGUEM8)(RogueArray*);
typedef RogueString*(*ROGUEM9)(RogueClassStringReader*);
typedef RogueLogical(*ROGUEM10)(RogueClassStringReader*);
typedef RogueCharacter(*ROGUEM11)(RogueClassStringReader*);
typedef RogueString*(*ROGUEM12)(RogueClassGlobal*);
typedef RogueString*(*ROGUEM13)(RogueClassConsole*);
typedef RogueString*(*ROGUEM14)(RogueClassRogueC*);
typedef RogueString*(*ROGUEM15)(RogueClassError*);
typedef RogueClassError*(*ROGUEM16)(RogueClassError*);
typedef RogueString*(*ROGUEM17)(RogueClassProgram*);
typedef RogueString*(*ROGUEM18)(RogueTemplateList*);
typedef RogueTemplateList*(*ROGUEM19)(RogueTemplateList*);
typedef RogueString*(*ROGUEM20)(RogueClassTemplate*);
typedef RogueString*(*ROGUEM21)(RogueClassString_TemplateTable*);
typedef RogueString*(*ROGUEM22)(RogueClassString_AugmentListTable*);
typedef RogueString*(*ROGUEM23)(RogueRequisiteItemList*);
typedef RogueRequisiteItemList*(*ROGUEM24)(RogueRequisiteItemList*);
typedef RogueString*(*ROGUEM25)(RogueClassRequisiteItem*);
typedef RogueString*(*ROGUEM26)(RogueClassMethod*);
typedef RogueString*(*ROGUEM27)(RogueClassString_MethodListTable*);
typedef RogueString*(*ROGUEM28)(RogueTypeList*);
typedef RogueTypeList*(*ROGUEM29)(RogueTypeList*);
typedef RogueString*(*ROGUEM30)(RogueClassType*);
typedef RogueString*(*ROGUEM31)(RogueClassString_TypeTable*);
typedef RogueString*(*ROGUEM32)(RogueClassString_IntegerTable*);
typedef RogueString*(*ROGUEM33)(RogueClassToken*);
typedef RogueCharacter(*ROGUEM34)(RogueClassToken*);
typedef RogueInteger(*ROGUEM35)(RogueClassToken*);
typedef RogueLong(*ROGUEM36)(RogueClassToken*);
typedef RogueReal(*ROGUEM37)(RogueClassToken*);
typedef RogueClassType*(*ROGUEM38)(RogueClassToken*);
typedef RogueClassToken*(*ROGUEM39)(RogueClassToken*);
typedef RogueString*(*ROGUEM40)(RogueClassAttributes*);
typedef RogueString*(*ROGUEM41)(RogueClassCmd*);
typedef RogueClassCmd*(*ROGUEM42)(RogueClassCmd*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM43)(RogueClassCmd*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM44)(RogueClassCmd*,RogueClassCloneArgs*);
typedef void(*ROGUEM45)(RogueClassCmd*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM46)(RogueClassCmd*);
typedef RogueLogical(*ROGUEM47)(RogueClassCmd*);
typedef void(*ROGUEM48)(RogueClassCmd*);
typedef RogueClassCmd*(*ROGUEM49)(RogueClassCmd*,RogueClassScope*,RogueClassCmd*);
typedef RogueClassCmd*(*ROGUEM50)(RogueClassCmd*,RogueClassScope*,RogueInteger);
typedef RogueClassCmd*(*ROGUEM51)(RogueClassCmd*,RogueClassScope*,RogueClassTokenType*,RogueClassCmd*);
typedef void(*ROGUEM52)(RogueClassCmd*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmd*(*ROGUEM53)(RogueClassCmd*);
typedef RogueString*(*ROGUEM54)(RogueClassCmdReturn*);
typedef RogueClassCmd*(*ROGUEM55)(RogueClassCmdReturn*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM56)(RogueClassCmdReturn*,RogueClassScope*);
typedef void(*ROGUEM57)(RogueClassCmdReturn*);
typedef RogueClassType*(*ROGUEM58)(RogueClassCmdReturn*);
typedef void(*ROGUEM59)(RogueClassCmdReturn*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdReturn*(*ROGUEM60)(RogueClassCmdReturn*);
typedef RogueString*(*ROGUEM61)(RogueClassCmdStatement*);
typedef void(*ROGUEM62)(RogueClassCmdStatement*);
typedef RogueClassCmdStatement*(*ROGUEM63)(RogueClassCmdStatement*);
typedef RogueString*(*ROGUEM64)(RogueCmdList*);
typedef RogueString*(*ROGUEM65)(RogueClassCmdStatementList*);
typedef RogueClassCmdStatementList*(*ROGUEM66)(RogueClassCmdStatementList*);
typedef RogueClassCmdStatementList*(*ROGUEM67)(RogueClassCmdStatementList*,RogueInteger);
typedef RogueCmdList*(*ROGUEM68)(RogueCmdList*);
typedef RogueCmdList*(*ROGUEM69)(RogueCmdList*,RogueInteger);
typedef RogueString*(*ROGUEM70)(RogueClassTokenType*);
typedef RogueClassToken*(*ROGUEM71)(RogueClassTokenType*,RogueString*,RogueInteger,RogueInteger);
typedef RogueClassToken*(*ROGUEM72)(RogueClassTokenType*,RogueString*,RogueInteger,RogueInteger,RogueString*);
typedef RogueLogical(*ROGUEM73)(RogueClassTokenType*);
typedef RogueClassTokenType*(*ROGUEM74)(RogueClassTokenType*);
typedef RogueString*(*ROGUEM75)(RogueClassCmdLabel*);
typedef RogueClassCmdLabel*(*ROGUEM76)(RogueClassCmdLabel*,RogueClassCloneArgs*);
typedef RogueLogical(*ROGUEM77)(RogueClassCmdLabel*);
typedef RogueClassCmd*(*ROGUEM78)(RogueClassCmdLabel*,RogueClassScope*);
typedef void(*ROGUEM79)(RogueClassCmdLabel*);
typedef void(*ROGUEM80)(RogueClassCmdLabel*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLabel*(*ROGUEM81)(RogueClassCmdLabel*);
typedef RogueString*(*ROGUEM82)(RogueClassRogueError*);
typedef RogueClassRogueError*(*ROGUEM83)(RogueClassRogueError*);
typedef RogueString*(*ROGUEM84)(RogueMethodList*);
typedef RogueMethodList*(*ROGUEM85)(RogueMethodList*);
typedef RogueString*(*ROGUEM86)(RogueClassCPPWriter*);
typedef RogueString*(*ROGUEM87)(RogueClassString_MethodTable*);
typedef RogueString*(*ROGUEM88)(RogueLocalList*);
typedef RogueLocalList*(*ROGUEM89)(RogueLocalList*);
typedef RogueString*(*ROGUEM90)(RogueClassLocal*);
typedef RogueString*(*ROGUEM91)(RogueByteList*);
typedef RogueByteList*(*ROGUEM92)(RogueByteList*);
typedef RogueString*(*ROGUEM93)(RogueClassMath*);
typedef RogueString*(*ROGUEM94)(RogueClassSystem*);
typedef RogueString*(*ROGUEM95)(RogueClassTaskManager*);
typedef RogueString*(*ROGUEM96)(RogueClassTask*);
typedef RogueClassTask*(*ROGUEM97)(RogueClassTask*);
typedef RogueString*(*ROGUEM98)(RogueTaskList*);
typedef RogueTaskList*(*ROGUEM99)(RogueTaskList*);
typedef RogueString*(*ROGUEM100)(RogueClassString_LogicalTable*);
typedef RogueString*(*ROGUEM101)(RogueClassFile*);
typedef RogueString*(*ROGUEM102)(RogueClassParser*);
typedef RogueString*(*ROGUEM103)(RogueTokenList*);
typedef RogueTokenList*(*ROGUEM104)(RogueTokenList*);
typedef RogueString*(*ROGUEM105)(RogueClassLineReader*);
typedef RogueLogical(*ROGUEM106)(RogueClassLineReader*);
typedef RogueString*(*ROGUEM107)(RogueTypeParameterList*);
typedef RogueTypeParameterList*(*ROGUEM108)(RogueTypeParameterList*);
typedef RogueString*(*ROGUEM109)(RogueClassTypeParameter*);
typedef RogueString*(*ROGUEM110)(RogueAugmentList*);
typedef RogueAugmentList*(*ROGUEM111)(RogueAugmentList*);
typedef RogueString*(*ROGUEM112)(RogueClassAugment*);
typedef RogueString*(*ROGUEM113)(RogueClassString_TokenTypeTable*);
typedef RogueString*(*ROGUEM114)(RogueClassLiteralCharacterToken*);
typedef RogueCharacter(*ROGUEM115)(RogueClassLiteralCharacterToken*);
typedef RogueClassLiteralCharacterToken*(*ROGUEM116)(RogueClassLiteralCharacterToken*);
typedef RogueString*(*ROGUEM117)(RogueClassLiteralLongToken*);
typedef RogueInteger(*ROGUEM118)(RogueClassLiteralLongToken*);
typedef RogueLong(*ROGUEM119)(RogueClassLiteralLongToken*);
typedef RogueReal(*ROGUEM120)(RogueClassLiteralLongToken*);
typedef RogueClassLiteralLongToken*(*ROGUEM121)(RogueClassLiteralLongToken*);
typedef RogueString*(*ROGUEM122)(RogueClassLiteralIntegerToken*);
typedef RogueInteger(*ROGUEM123)(RogueClassLiteralIntegerToken*);
typedef RogueReal(*ROGUEM124)(RogueClassLiteralIntegerToken*);
typedef RogueClassLiteralIntegerToken*(*ROGUEM125)(RogueClassLiteralIntegerToken*);
typedef RogueString*(*ROGUEM126)(RogueClassLiteralRealToken*);
typedef RogueInteger(*ROGUEM127)(RogueClassLiteralRealToken*);
typedef RogueReal(*ROGUEM128)(RogueClassLiteralRealToken*);
typedef RogueClassLiteralRealToken*(*ROGUEM129)(RogueClassLiteralRealToken*);
typedef RogueString*(*ROGUEM130)(RogueClassLiteralStringToken*);
typedef RogueClassLiteralStringToken*(*ROGUEM131)(RogueClassLiteralStringToken*);
typedef RogueString*(*ROGUEM132)(RogueClassString_TypeSpecializerTable*);
typedef RogueString*(*ROGUEM133)(RogueClassTypeSpecializer*);
typedef RogueString*(*ROGUEM134)(RogueTableEntry_of_String_TemplateList*);
typedef RogueTableEntry_of_String_TemplateList*(*ROGUEM135)(RogueTableEntry_of_String_TemplateList*);
typedef RogueString*(*ROGUEM136)(RogueClassString_TemplateTableEntry*);
typedef RogueString*(*ROGUEM137)(RogueTableEntry_of_String_AugmentListList*);
typedef RogueTableEntry_of_String_AugmentListList*(*ROGUEM138)(RogueTableEntry_of_String_AugmentListList*);
typedef RogueString*(*ROGUEM139)(RogueClassString_AugmentListTableEntry*);
typedef RogueString*(*ROGUEM140)(RogueCmdLabelList*);
typedef RogueCmdLabelList*(*ROGUEM141)(RogueCmdLabelList*);
typedef RogueString*(*ROGUEM142)(RogueClassString_CmdLabelTable*);
typedef RogueString*(*ROGUEM143)(RogueClassCloneArgs*);
typedef RogueClassCmdLabel*(*ROGUEM144)(RogueClassCloneArgs*,RogueClassCmdLabel*);
typedef RogueClassCloneArgs*(*ROGUEM145)(RogueClassCloneArgs*);
typedef RogueString*(*ROGUEM146)(RogueClassCloneMethodArgs*);
typedef RogueClassCmdLabel*(*ROGUEM147)(RogueClassCloneMethodArgs*,RogueClassCmdLabel*);
typedef RogueClassCloneMethodArgs*(*ROGUEM148)(RogueClassCloneMethodArgs*);
typedef RogueString*(*ROGUEM149)(RogueClassProperty*);
typedef RogueString*(*ROGUEM150)(RogueClassCmdAccess*);
typedef RogueClassCmd*(*ROGUEM151)(RogueClassCmdAccess*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM152)(RogueClassCmdAccess*);
typedef RogueClassCmd*(*ROGUEM153)(RogueClassCmdAccess*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM154)(RogueClassCmdAccess*,RogueClassScope*,RogueClassCmd*);
typedef RogueClassCmd*(*ROGUEM155)(RogueClassCmdAccess*,RogueClassScope*,RogueClassTokenType*,RogueClassCmd*);
typedef void(*ROGUEM156)(RogueClassCmdAccess*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdAccess*(*ROGUEM157)(RogueClassCmdAccess*);
typedef RogueString*(*ROGUEM158)(RogueClassCmdArgs*);
typedef RogueClassCmdArgs*(*ROGUEM159)(RogueClassCmdArgs*);
typedef RogueClassCmdArgs*(*ROGUEM160)(RogueClassCmdArgs*,RogueInteger);
typedef RogueString*(*ROGUEM161)(RogueClassCmdAssign*);
typedef RogueClassCmd*(*ROGUEM162)(RogueClassCmdAssign*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM163)(RogueClassCmdAssign*,RogueClassScope*);
typedef RogueClassCmdAssign*(*ROGUEM164)(RogueClassCmdAssign*);
typedef RogueString*(*ROGUEM165)(RogueClassScope*);
typedef RogueString*(*ROGUEM166)(RogueCmdControlStructureList*);
typedef RogueCmdControlStructureList*(*ROGUEM167)(RogueCmdControlStructureList*);
typedef RogueString*(*ROGUEM168)(RogueClassCmdControlStructure*);
typedef RogueLogical(*ROGUEM169)(RogueClassCmdControlStructure*);
typedef RogueClassCmdControlStructure*(*ROGUEM170)(RogueClassCmdControlStructure*);
typedef RogueClassCmd*(*ROGUEM171)(RogueClassCmdControlStructure*,RogueClassCmdControlStructure*);
typedef RogueString*(*ROGUEM172)(RogueClassCmdLiteralThis*);
typedef RogueClassCmd*(*ROGUEM173)(RogueClassCmdLiteralThis*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM174)(RogueClassCmdThisContext*);
typedef void(*ROGUEM175)(RogueClassCmdLiteralThis*);
typedef RogueClassCmd*(*ROGUEM176)(RogueClassCmdLiteralThis*,RogueClassScope*);
typedef void(*ROGUEM177)(RogueClassCmdThisContext*);
typedef void(*ROGUEM178)(RogueClassCmdThisContext*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralThis*(*ROGUEM179)(RogueClassCmdLiteralThis*);
typedef RogueString*(*ROGUEM180)(RogueClassCmdThisContext*);
typedef RogueClassCmd*(*ROGUEM181)(RogueClassCmdThisContext*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM182)(RogueClassCmdThisContext*,RogueClassScope*);
typedef RogueClassCmdThisContext*(*ROGUEM183)(RogueClassCmdThisContext*);
typedef RogueString*(*ROGUEM184)(RogueClassCmdGenericLoop*);
typedef RogueClassCmd*(*ROGUEM185)(RogueClassCmdGenericLoop*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM186)(RogueClassCmdGenericLoop*,RogueClassScope*);
typedef void(*ROGUEM187)(RogueClassCmdGenericLoop*);
typedef void(*ROGUEM188)(RogueClassCmdGenericLoop*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdGenericLoop*(*ROGUEM189)(RogueClassCmdGenericLoop*);
typedef RogueString*(*ROGUEM190)(RogueClassCmdLiteralInteger*);
typedef RogueClassCmd*(*ROGUEM191)(RogueClassCmdLiteralInteger*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM192)(RogueClassCmdLiteralInteger*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM193)(RogueClassCmdLiteral*);
typedef RogueLogical(*ROGUEM194)(RogueClassCmdLiteral*);
typedef RogueClassCmd*(*ROGUEM195)(RogueClassCmdLiteralInteger*,RogueClassScope*);
typedef void(*ROGUEM196)(RogueClassCmdLiteral*);
typedef RogueClassType*(*ROGUEM197)(RogueClassCmdLiteralInteger*);
typedef void(*ROGUEM198)(RogueClassCmdLiteralInteger*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralInteger*(*ROGUEM199)(RogueClassCmdLiteralInteger*);
typedef RogueString*(*ROGUEM200)(RogueClassCmdLiteral*);
typedef RogueClassCmdLiteral*(*ROGUEM201)(RogueClassCmdLiteral*);
typedef RogueString*(*ROGUEM202)(RogueClassCmdCompareNE*);
typedef RogueClassCmd*(*ROGUEM203)(RogueClassCmdCompareNE*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM204)(RogueClassCmdCompareNE*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM205)(RogueClassCmdBinary*,RogueClassScope*);
typedef void(*ROGUEM206)(RogueClassCmdBinary*);
typedef RogueClassType*(*ROGUEM207)(RogueClassCmdComparison*);
typedef void(*ROGUEM208)(RogueClassCmdBinary*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCompareNE*(*ROGUEM209)(RogueClassCmdCompareNE*);
typedef RogueString*(*ROGUEM210)(RogueClassCmdBinary*);
typedef RogueLogical(*ROGUEM211)(RogueClassCmdComparison*);
typedef RogueClassCmd*(*ROGUEM212)(RogueClassCmdComparison*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM213)(RogueClassCmdBinary*,RogueClassScope*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM214)(RogueClassCmdBinary*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM215)(RogueClassCmdCompareNE*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM216)(RogueClassCmdComparison*);
typedef RogueClassCmdComparison*(*ROGUEM217)(RogueClassCmdComparison*);
typedef RogueClassCmd*(*ROGUEM218)(RogueClassCmdComparison*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueClassType*(*ROGUEM219)(RogueClassCmdBinary*);
typedef RogueClassCmdBinary*(*ROGUEM220)(RogueClassCmdBinary*);
typedef RogueLogical(*ROGUEM221)(RogueClassCmdBinary*);
typedef RogueString*(*ROGUEM222)(RogueClassTaskArgs*);
typedef RogueClassTaskArgs*(*ROGUEM223)(RogueClassTaskArgs*);
typedef RogueString*(*ROGUEM224)(RogueClassCmdTaskControl*);
typedef RogueLogical(*ROGUEM225)(RogueClassCmdTaskControl*);
typedef RogueClassCmd*(*ROGUEM226)(RogueClassCmdTaskControl*,RogueClassScope*);
typedef void(*ROGUEM227)(RogueClassCmdTaskControl*);
typedef void(*ROGUEM228)(RogueClassCmdTaskControl*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdTaskControl*(*ROGUEM229)(RogueClassCmdTaskControl*);
typedef RogueString*(*ROGUEM230)(RogueClassCmdTaskControlSection*);
typedef RogueString*(*ROGUEM231)(RogueTableEntry_of_String_MethodListList*);
typedef RogueTableEntry_of_String_MethodListList*(*ROGUEM232)(RogueTableEntry_of_String_MethodListList*);
typedef RogueString*(*ROGUEM233)(RogueClassString_MethodListTableEntry*);
typedef RogueString*(*ROGUEM234)(RogueClassString_CmdTable*);
typedef RogueString*(*ROGUEM235)(RoguePropertyList*);
typedef RoguePropertyList*(*ROGUEM236)(RoguePropertyList*);
typedef RogueString*(*ROGUEM237)(RogueClassString_PropertyTable*);
typedef RogueString*(*ROGUEM238)(RogueClassCmdLiteralNull*);
typedef RogueClassCmd*(*ROGUEM239)(RogueClassCmdLiteralNull*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM240)(RogueClassCmdLiteralNull*,RogueClassCloneArgs*);
typedef RogueClassCmdLiteralNull*(*ROGUEM241)(RogueClassCmdLiteralNull*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM242)(RogueClassCmdLiteralNull*);
typedef void(*ROGUEM243)(RogueClassCmdLiteralNull*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralNull*(*ROGUEM244)(RogueClassCmdLiteralNull*);
typedef RogueString*(*ROGUEM245)(RogueClassCmdCreateCompound*);
typedef RogueClassCmd*(*ROGUEM246)(RogueClassCmdCreateCompound*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM247)(RogueClassCmdCreateCompound*,RogueClassScope*);
typedef void(*ROGUEM248)(RogueClassCmdCreateCompound*);
typedef RogueClassType*(*ROGUEM249)(RogueClassCmdCreateCompound*);
typedef void(*ROGUEM250)(RogueClassCmdCreateCompound*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCreateCompound*(*ROGUEM251)(RogueClassCmdCreateCompound*);
typedef RogueString*(*ROGUEM252)(RogueClassCmdLiteralLogical*);
typedef RogueClassCmd*(*ROGUEM253)(RogueClassCmdLiteralLogical*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM254)(RogueClassCmdLiteralLogical*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM255)(RogueClassCmdLiteralLogical*);
typedef void(*ROGUEM256)(RogueClassCmdLiteralLogical*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralLogical*(*ROGUEM257)(RogueClassCmdLiteralLogical*);
typedef RogueString*(*ROGUEM258)(RogueClassCmdLiteralString*);
typedef RogueClassCmd*(*ROGUEM259)(RogueClassCmdLiteralString*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM260)(RogueClassCmdLiteralString*,RogueClassScope*);
typedef void(*ROGUEM261)(RogueClassCmdLiteralString*);
typedef RogueClassType*(*ROGUEM262)(RogueClassCmdLiteralString*);
typedef void(*ROGUEM263)(RogueClassCmdLiteralString*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralString*(*ROGUEM264)(RogueClassCmdLiteralString*);
typedef RogueString*(*ROGUEM265)(RogueClassCmdWriteSetting*);
typedef RogueClassCmd*(*ROGUEM266)(RogueClassCmdWriteSetting*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM267)(RogueClassCmdWriteSetting*,RogueClassScope*);
typedef void(*ROGUEM268)(RogueClassCmdWriteSetting*);
typedef RogueClassType*(*ROGUEM269)(RogueClassCmdWriteSetting*);
typedef void(*ROGUEM270)(RogueClassCmdWriteSetting*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdWriteSetting*(*ROGUEM271)(RogueClassCmdWriteSetting*);
typedef RogueString*(*ROGUEM272)(RogueClassCmdWriteProperty*);
typedef RogueClassCmd*(*ROGUEM273)(RogueClassCmdWriteProperty*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM274)(RogueClassCmdWriteProperty*,RogueClassScope*);
typedef void(*ROGUEM275)(RogueClassCmdWriteProperty*);
typedef RogueClassType*(*ROGUEM276)(RogueClassCmdWriteProperty*);
typedef void(*ROGUEM277)(RogueClassCmdWriteProperty*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdWriteProperty*(*ROGUEM278)(RogueClassCmdWriteProperty*);
typedef RogueString*(*ROGUEM279)(RogueTableEntry_of_String_TypeList*);
typedef RogueTableEntry_of_String_TypeList*(*ROGUEM280)(RogueTableEntry_of_String_TypeList*);
typedef RogueString*(*ROGUEM281)(RogueClassString_TypeTableEntry*);
typedef RogueString*(*ROGUEM282)(RogueTableEntry_of_String_IntegerList*);
typedef RogueTableEntry_of_String_IntegerList*(*ROGUEM283)(RogueTableEntry_of_String_IntegerList*);
typedef RogueString*(*ROGUEM284)(RogueClassString_IntegerTableEntry*);
typedef RogueString*(*ROGUEM285)(RogueClassCmdCastToType*);
typedef RogueClassCmd*(*ROGUEM286)(RogueClassCmdCastToType*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM287)(RogueClassCmdCastToType*,RogueClassScope*);
typedef void(*ROGUEM288)(RogueClassCmdTypeOperator*);
typedef RogueClassType*(*ROGUEM289)(RogueClassCmdTypeOperator*);
typedef void(*ROGUEM290)(RogueClassCmdCastToType*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCastToType*(*ROGUEM291)(RogueClassCmdCastToType*);
typedef RogueString*(*ROGUEM292)(RogueClassCmdTypeOperator*);
typedef RogueClassCmdTypeOperator*(*ROGUEM293)(RogueClassCmdTypeOperator*);
typedef RogueString*(*ROGUEM294)(RogueClassCmdLogicalize*);
typedef RogueClassCmd*(*ROGUEM295)(RogueClassCmdLogicalize*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM296)(RogueClassCmdLogicalize*,RogueClassScope*);
typedef void(*ROGUEM297)(RogueClassCmdUnary*);
typedef RogueClassType*(*ROGUEM298)(RogueClassCmdLogicalize*);
typedef void(*ROGUEM299)(RogueClassCmdUnary*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLogicalize*(*ROGUEM300)(RogueClassCmdLogicalize*);
typedef RogueString*(*ROGUEM301)(RogueClassCmdUnary*);
typedef RogueClassCmd*(*ROGUEM302)(RogueClassCmdUnary*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM303)(RogueClassCmdUnary*);
typedef RogueClassCmdUnary*(*ROGUEM304)(RogueClassCmdUnary*);
typedef RogueString*(*ROGUEM305)(RogueClassCmdCreateOptionalValue*);
typedef RogueClassCmd*(*ROGUEM306)(RogueClassCmdCreateOptionalValue*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM307)(RogueClassCmdCreateOptionalValue*,RogueClassScope*);
typedef void(*ROGUEM308)(RogueClassCmdCreateOptionalValue*);
typedef RogueClassType*(*ROGUEM309)(RogueClassCmdCreateOptionalValue*);
typedef void(*ROGUEM310)(RogueClassCmdCreateOptionalValue*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCreateOptionalValue*(*ROGUEM311)(RogueClassCmdCreateOptionalValue*);
typedef RogueString*(*ROGUEM312)(RogueTableEntry_of_String_MethodList*);
typedef RogueTableEntry_of_String_MethodList*(*ROGUEM313)(RogueTableEntry_of_String_MethodList*);
typedef RogueString*(*ROGUEM314)(RogueClassString_MethodTableEntry*);
typedef RogueString*(*ROGUEM315)(RogueTableEntry_of_String_LogicalList*);
typedef RogueTableEntry_of_String_LogicalList*(*ROGUEM316)(RogueTableEntry_of_String_LogicalList*);
typedef RogueString*(*ROGUEM317)(RogueClassString_LogicalTableEntry*);
typedef RogueString*(*ROGUEM318)(RogueClassFileReader*);
typedef RogueLogical(*ROGUEM319)(RogueClassFileReader*);
typedef RogueCharacter(*ROGUEM320)(RogueClassFileReader*);
typedef RogueString*(*ROGUEM321)(RogueClassFileWriter*);
typedef RogueString*(*ROGUEM322)(RogueClassTokenReader*);
typedef RogueString*(*ROGUEM323)(RogueClassTokenizer*);
typedef RogueString*(*ROGUEM324)(RogueClassParseReader*);
typedef RogueLogical(*ROGUEM325)(RogueClassParseReader*);
typedef RogueCharacter(*ROGUEM326)(RogueClassParseReader*);
typedef RogueString*(*ROGUEM327)(RogueClassPreprocessor*);
typedef RogueString*(*ROGUEM328)(RogueClassCmdAdd*);
typedef RogueClassCmd*(*ROGUEM329)(RogueClassCmdAdd*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM330)(RogueClassCmdAdd*,RogueClassType*);
typedef RogueClassCmdAdd*(*ROGUEM331)(RogueClassCmdAdd*);
typedef RogueClassCmd*(*ROGUEM332)(RogueClassCmdAdd*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueString*(*ROGUEM333)(RogueClassCmdIf*);
typedef RogueClassCmd*(*ROGUEM334)(RogueClassCmdIf*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM335)(RogueClassCmdIf*,RogueClassScope*);
typedef void(*ROGUEM336)(RogueClassCmdIf*);
typedef void(*ROGUEM337)(RogueClassCmdIf*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdIf*(*ROGUEM338)(RogueClassCmdIf*);
typedef RogueString*(*ROGUEM339)(RogueClassCmdWhich*);
typedef RogueClassCmdWhich*(*ROGUEM340)(RogueClassCmdWhich*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM341)(RogueClassCmdWhich*,RogueClassScope*);
typedef RogueClassCmdWhich*(*ROGUEM342)(RogueClassCmdWhich*);
typedef RogueString*(*ROGUEM343)(RogueClassCmdContingent*);
typedef RogueClassCmd*(*ROGUEM344)(RogueClassCmdContingent*,RogueClassCloneArgs*);
typedef RogueClassCmdContingent*(*ROGUEM345)(RogueClassCmdContingent*,RogueClassScope*);
typedef void(*ROGUEM346)(RogueClassCmdContingent*);
typedef void(*ROGUEM347)(RogueClassCmdContingent*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdContingent*(*ROGUEM348)(RogueClassCmdContingent*);
typedef RogueClassCmd*(*ROGUEM349)(RogueClassCmdContingent*,RogueClassCmdControlStructure*);
typedef RogueString*(*ROGUEM350)(RogueClassCmdTry*);
typedef RogueClassCmdTry*(*ROGUEM351)(RogueClassCmdTry*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM352)(RogueClassCmdTry*,RogueClassScope*);
typedef void(*ROGUEM353)(RogueClassCmdTry*);
typedef void(*ROGUEM354)(RogueClassCmdTry*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdTry*(*ROGUEM355)(RogueClassCmdTry*);
typedef RogueString*(*ROGUEM356)(RogueClassCmdAwait*);
typedef RogueClassCmd*(*ROGUEM357)(RogueClassCmdAwait*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM358)(RogueClassCmdAwait*,RogueClassScope*);
typedef RogueClassCmdAwait*(*ROGUEM359)(RogueClassCmdAwait*);
typedef RogueString*(*ROGUEM360)(RogueClassCmdYield*);
typedef RogueClassCmd*(*ROGUEM361)(RogueClassCmdYield*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM362)(RogueClassCmdYield*,RogueClassScope*);
typedef RogueClassCmdYield*(*ROGUEM363)(RogueClassCmdYield*);
typedef RogueString*(*ROGUEM364)(RogueClassCmdThrow*);
typedef RogueClassCmdThrow*(*ROGUEM365)(RogueClassCmdThrow*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM366)(RogueClassCmdThrow*,RogueClassScope*);
typedef void(*ROGUEM367)(RogueClassCmdThrow*);
typedef void(*ROGUEM368)(RogueClassCmdThrow*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdThrow*(*ROGUEM369)(RogueClassCmdThrow*);
typedef RogueString*(*ROGUEM370)(RogueClassCmdTrace*);
typedef RogueClassCmdTrace*(*ROGUEM371)(RogueClassCmdTrace*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM372)(RogueClassCmdTrace*,RogueClassScope*);
typedef void(*ROGUEM373)(RogueClassCmdTrace*);
typedef RogueClassCmdTrace*(*ROGUEM374)(RogueClassCmdTrace*);
typedef RogueString*(*ROGUEM375)(RogueClassCmdEscape*);
typedef RogueClassCmd*(*ROGUEM376)(RogueClassCmdEscape*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM377)(RogueClassCmdEscape*,RogueClassScope*);
typedef void(*ROGUEM378)(RogueClassCmdEscape*);
typedef void(*ROGUEM379)(RogueClassCmdEscape*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdEscape*(*ROGUEM380)(RogueClassCmdEscape*);
typedef RogueString*(*ROGUEM381)(RogueClassCmdNextIteration*);
typedef RogueClassCmd*(*ROGUEM382)(RogueClassCmdNextIteration*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM383)(RogueClassCmdNextIteration*,RogueClassScope*);
typedef void(*ROGUEM384)(RogueClassCmdNextIteration*);
typedef void(*ROGUEM385)(RogueClassCmdNextIteration*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdNextIteration*(*ROGUEM386)(RogueClassCmdNextIteration*);
typedef RogueString*(*ROGUEM387)(RogueClassCmdNecessary*);
typedef RogueClassCmd*(*ROGUEM388)(RogueClassCmdNecessary*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM389)(RogueClassCmdNecessary*,RogueClassScope*);
typedef void(*ROGUEM390)(RogueClassCmdNecessary*);
typedef void(*ROGUEM391)(RogueClassCmdNecessary*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdNecessary*(*ROGUEM392)(RogueClassCmdNecessary*);
typedef RogueString*(*ROGUEM393)(RogueClassCmdSufficient*);
typedef RogueClassCmd*(*ROGUEM394)(RogueClassCmdSufficient*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM395)(RogueClassCmdSufficient*,RogueClassScope*);
typedef void(*ROGUEM396)(RogueClassCmdSufficient*);
typedef void(*ROGUEM397)(RogueClassCmdSufficient*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdSufficient*(*ROGUEM398)(RogueClassCmdSufficient*);
typedef RogueString*(*ROGUEM399)(RogueClassCmdAdjust*);
typedef RogueClassCmd*(*ROGUEM400)(RogueClassCmdAdjust*,RogueClassScope*);
typedef RogueClassCmdAdjust*(*ROGUEM401)(RogueClassCmdAdjust*);
typedef RogueString*(*ROGUEM402)(RogueClassCmdOpWithAssign*);
typedef RogueClassCmd*(*ROGUEM403)(RogueClassCmdOpWithAssign*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM404)(RogueClassCmdOpWithAssign*,RogueClassScope*);
typedef RogueClassCmdOpWithAssign*(*ROGUEM405)(RogueClassCmdOpWithAssign*);
typedef RogueString*(*ROGUEM406)(RogueCmdWhichCaseList*);
typedef RogueCmdWhichCaseList*(*ROGUEM407)(RogueCmdWhichCaseList*);
typedef RogueString*(*ROGUEM408)(RogueClassCmdWhichCase*);
typedef RogueClassCmdWhichCase*(*ROGUEM409)(RogueClassCmdWhichCase*,RogueClassCloneArgs*);
typedef void(*ROGUEM410)(RogueClassCmdWhichCase*);
typedef RogueClassCmdWhichCase*(*ROGUEM411)(RogueClassCmdWhichCase*);
typedef RogueString*(*ROGUEM412)(RogueCmdCatchList*);
typedef RogueCmdCatchList*(*ROGUEM413)(RogueCmdCatchList*);
typedef RogueString*(*ROGUEM414)(RogueClassCmdCatch*);
typedef RogueClassCmdCatch*(*ROGUEM415)(RogueClassCmdCatch*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM416)(RogueClassCmdCatch*,RogueClassScope*);
typedef void(*ROGUEM417)(RogueClassCmdCatch*);
typedef void(*ROGUEM418)(RogueClassCmdCatch*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCatch*(*ROGUEM419)(RogueClassCmdCatch*);
typedef RogueString*(*ROGUEM420)(RogueClassCmdLocalDeclaration*);
typedef RogueClassCmd*(*ROGUEM421)(RogueClassCmdLocalDeclaration*,RogueClassCloneArgs*);
typedef void(*ROGUEM422)(RogueClassCmdLocalDeclaration*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM423)(RogueClassCmdLocalDeclaration*,RogueClassScope*);
typedef void(*ROGUEM424)(RogueClassCmdLocalDeclaration*);
typedef void(*ROGUEM425)(RogueClassCmdLocalDeclaration*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLocalDeclaration*(*ROGUEM426)(RogueClassCmdLocalDeclaration*);
typedef RogueString*(*ROGUEM427)(RogueClassCmdAdjustLocal*);
typedef RogueClassCmd*(*ROGUEM428)(RogueClassCmdAdjustLocal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM429)(RogueClassCmdAdjustLocal*,RogueClassScope*);
typedef void(*ROGUEM430)(RogueClassCmdAdjustLocal*);
typedef RogueClassType*(*ROGUEM431)(RogueClassCmdAdjustLocal*);
typedef void(*ROGUEM432)(RogueClassCmdAdjustLocal*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdAdjustLocal*(*ROGUEM433)(RogueClassCmdAdjustLocal*);
typedef RogueString*(*ROGUEM434)(RogueClassCmdReadLocal*);
typedef RogueClassCmd*(*ROGUEM435)(RogueClassCmdReadLocal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM436)(RogueClassCmdReadLocal*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM437)(RogueClassCmdReadLocal*,RogueClassScope*,RogueInteger);
typedef void(*ROGUEM438)(RogueClassCmdReadLocal*);
typedef RogueClassType*(*ROGUEM439)(RogueClassCmdReadLocal*);
typedef void(*ROGUEM440)(RogueClassCmdReadLocal*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdReadLocal*(*ROGUEM441)(RogueClassCmdReadLocal*);
typedef RogueString*(*ROGUEM442)(RogueClassCmdCompareLE*);
typedef RogueClassCmd*(*ROGUEM443)(RogueClassCmdCompareLE*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM444)(RogueClassCmdCompareLE*,RogueClassType*);
typedef RogueClassCmdCompareLE*(*ROGUEM445)(RogueClassCmdCompareLE*);
typedef RogueClassCmd*(*ROGUEM446)(RogueClassCmdCompareLE*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM447)(RogueClassCmdRange*);
typedef void(*ROGUEM448)(RogueClassCmdRange*);
typedef RogueClassCmdRange*(*ROGUEM449)(RogueClassCmdRange*);
typedef RogueString*(*ROGUEM450)(RogueClassCmdLocalOpWithAssign*);
typedef RogueClassCmd*(*ROGUEM451)(RogueClassCmdLocalOpWithAssign*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM452)(RogueClassCmdLocalOpWithAssign*,RogueClassScope*);
typedef void(*ROGUEM453)(RogueClassCmdLocalOpWithAssign*);
typedef RogueClassType*(*ROGUEM454)(RogueClassCmdLocalOpWithAssign*);
typedef void(*ROGUEM455)(RogueClassCmdLocalOpWithAssign*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLocalOpWithAssign*(*ROGUEM456)(RogueClassCmdLocalOpWithAssign*);
typedef RogueString*(*ROGUEM457)(RogueClassCmdResolvedOpWithAssign*);
typedef RogueClassCmdResolvedOpWithAssign*(*ROGUEM458)(RogueClassCmdResolvedOpWithAssign*);
typedef RogueString*(*ROGUEM459)(RogueClassCmdForEach*);
typedef RogueClassCmd*(*ROGUEM460)(RogueClassCmdForEach*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM461)(RogueClassCmdForEach*,RogueClassScope*);
typedef void(*ROGUEM462)(RogueClassCmdForEach*);
typedef RogueClassCmdForEach*(*ROGUEM463)(RogueClassCmdForEach*);
typedef RogueString*(*ROGUEM464)(RogueClassCmdRangeUpTo*);
typedef RogueClassCmd*(*ROGUEM465)(RogueClassCmdRangeUpTo*,RogueClassCloneArgs*);
typedef RogueClassCmdRangeUpTo*(*ROGUEM466)(RogueClassCmdRangeUpTo*);
typedef RogueString*(*ROGUEM467)(RogueClassCmdLogicalXor*);
typedef RogueClassCmd*(*ROGUEM468)(RogueClassCmdLogicalXor*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM469)(RogueClassCmdBinaryLogical*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM470)(RogueClassCmdBinaryLogical*);
typedef RogueClassCmdLogicalXor*(*ROGUEM471)(RogueClassCmdLogicalXor*);
typedef RogueClassCmd*(*ROGUEM472)(RogueClassCmdBinaryLogical*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueLogical(*ROGUEM473)(RogueClassCmdLogicalXor*,RogueLogical,RogueLogical);
typedef RogueString*(*ROGUEM474)(RogueClassCmdBinaryLogical*);
typedef RogueClassCmdBinaryLogical*(*ROGUEM475)(RogueClassCmdBinaryLogical*);
typedef RogueLogical(*ROGUEM476)(RogueClassCmdBinaryLogical*,RogueLogical,RogueLogical);
typedef RogueString*(*ROGUEM477)(RogueClassCmdLogicalOr*);
typedef RogueClassCmd*(*ROGUEM478)(RogueClassCmdLogicalOr*,RogueClassCloneArgs*);
typedef RogueClassCmdLogicalOr*(*ROGUEM479)(RogueClassCmdLogicalOr*);
typedef RogueLogical(*ROGUEM480)(RogueClassCmdLogicalOr*,RogueLogical,RogueLogical);
typedef RogueString*(*ROGUEM481)(RogueClassCmdLogicalAnd*);
typedef RogueClassCmd*(*ROGUEM482)(RogueClassCmdLogicalAnd*,RogueClassCloneArgs*);
typedef RogueClassCmdLogicalAnd*(*ROGUEM483)(RogueClassCmdLogicalAnd*);
typedef RogueLogical(*ROGUEM484)(RogueClassCmdLogicalAnd*,RogueLogical,RogueLogical);
typedef RogueString*(*ROGUEM485)(RogueClassCmdCompareEQ*);
typedef RogueClassCmd*(*ROGUEM486)(RogueClassCmdCompareEQ*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM487)(RogueClassCmdCompareEQ*,RogueClassType*);
typedef RogueClassCmdCompareEQ*(*ROGUEM488)(RogueClassCmdCompareEQ*);
typedef RogueLogical(*ROGUEM489)(RogueClassCmdCompareEQ*);
typedef RogueClassCmd*(*ROGUEM490)(RogueClassCmdCompareEQ*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM491)(RogueClassCmdCompareIs*);
typedef RogueClassCmd*(*ROGUEM492)(RogueClassCmdCompareIs*,RogueClassCloneArgs*);
typedef RogueClassCmdCompareIs*(*ROGUEM493)(RogueClassCmdCompareIs*);
typedef RogueClassCmd*(*ROGUEM494)(RogueClassCmdCompareIs*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueString*(*ROGUEM495)(RogueClassCmdCompareIsNot*);
typedef RogueClassCmd*(*ROGUEM496)(RogueClassCmdCompareIsNot*,RogueClassCloneArgs*);
typedef RogueClassCmdCompareIsNot*(*ROGUEM497)(RogueClassCmdCompareIsNot*);
typedef RogueClassCmd*(*ROGUEM498)(RogueClassCmdCompareIsNot*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueString*(*ROGUEM499)(RogueClassCmdCompareLT*);
typedef RogueClassCmd*(*ROGUEM500)(RogueClassCmdCompareLT*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM501)(RogueClassCmdCompareLT*,RogueClassType*);
typedef RogueClassCmdCompareLT*(*ROGUEM502)(RogueClassCmdCompareLT*);
typedef RogueClassCmd*(*ROGUEM503)(RogueClassCmdCompareLT*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM504)(RogueClassCmdCompareGT*);
typedef RogueClassCmd*(*ROGUEM505)(RogueClassCmdCompareGT*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM506)(RogueClassCmdCompareGT*,RogueClassType*);
typedef RogueClassCmdCompareGT*(*ROGUEM507)(RogueClassCmdCompareGT*);
typedef RogueClassCmd*(*ROGUEM508)(RogueClassCmdCompareGT*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM509)(RogueClassCmdCompareGE*);
typedef RogueClassCmd*(*ROGUEM510)(RogueClassCmdCompareGE*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM511)(RogueClassCmdCompareGE*,RogueClassType*);
typedef RogueClassCmdCompareGE*(*ROGUEM512)(RogueClassCmdCompareGE*);
typedef RogueClassCmd*(*ROGUEM513)(RogueClassCmdCompareGE*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM514)(RogueClassCmdInstanceOf*);
typedef RogueClassCmd*(*ROGUEM515)(RogueClassCmdInstanceOf*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM516)(RogueClassCmdInstanceOf*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM517)(RogueClassCmdInstanceOf*);
typedef void(*ROGUEM518)(RogueClassCmdInstanceOf*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdInstanceOf*(*ROGUEM519)(RogueClassCmdInstanceOf*);
typedef RogueString*(*ROGUEM520)(RogueClassCmdLogicalNot*);
typedef RogueClassCmd*(*ROGUEM521)(RogueClassCmdLogicalNot*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM522)(RogueClassCmdLogicalNot*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM523)(RogueClassCmdLogicalNot*);
typedef RogueClassCmdLogicalNot*(*ROGUEM524)(RogueClassCmdLogicalNot*);
typedef RogueString*(*ROGUEM525)(RogueClassCmdBitwiseXor*);
typedef RogueClassCmd*(*ROGUEM526)(RogueClassCmdBitwiseXor*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM527)(RogueClassCmdBitwiseXor*,RogueClassType*);
typedef RogueClassCmdBitwiseXor*(*ROGUEM528)(RogueClassCmdBitwiseXor*);
typedef RogueClassCmd*(*ROGUEM529)(RogueClassCmdBitwiseOp*,RogueClassScope*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM530)(RogueClassCmdBitwiseOp*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueString*(*ROGUEM531)(RogueClassCmdBitwiseOp*);
typedef RogueClassCmdBitwiseOp*(*ROGUEM532)(RogueClassCmdBitwiseOp*);
typedef RogueString*(*ROGUEM533)(RogueClassCmdBitwiseOr*);
typedef RogueClassCmd*(*ROGUEM534)(RogueClassCmdBitwiseOr*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM535)(RogueClassCmdBitwiseOr*,RogueClassType*);
typedef RogueClassCmdBitwiseOr*(*ROGUEM536)(RogueClassCmdBitwiseOr*);
typedef RogueString*(*ROGUEM537)(RogueClassCmdBitwiseAnd*);
typedef RogueClassCmd*(*ROGUEM538)(RogueClassCmdBitwiseAnd*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM539)(RogueClassCmdBitwiseAnd*,RogueClassType*);
typedef RogueClassCmdBitwiseAnd*(*ROGUEM540)(RogueClassCmdBitwiseAnd*);
typedef RogueString*(*ROGUEM541)(RogueClassCmdBitwiseShiftLeft*);
typedef RogueClassCmd*(*ROGUEM542)(RogueClassCmdBitwiseShiftLeft*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM543)(RogueClassCmdBitwiseShiftLeft*,RogueClassType*);
typedef RogueClassCmdBitwiseShiftLeft*(*ROGUEM544)(RogueClassCmdBitwiseShiftLeft*);
typedef RogueString*(*ROGUEM545)(RogueClassCmdBitwiseShiftRight*);
typedef RogueClassCmd*(*ROGUEM546)(RogueClassCmdBitwiseShiftRight*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM547)(RogueClassCmdBitwiseShiftRight*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM548)(RogueClassCmdBitwiseShiftRight*,RogueClassScope*);
typedef RogueClassCmdBitwiseShiftRight*(*ROGUEM549)(RogueClassCmdBitwiseShiftRight*);
typedef RogueString*(*ROGUEM550)(RogueClassCmdBitwiseShiftRightX*);
typedef RogueClassCmd*(*ROGUEM551)(RogueClassCmdBitwiseShiftRightX*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM552)(RogueClassCmdBitwiseShiftRightX*,RogueClassType*);
typedef RogueClassCmdBitwiseShiftRightX*(*ROGUEM553)(RogueClassCmdBitwiseShiftRightX*);
typedef RogueString*(*ROGUEM554)(RogueClassCmdSubtract*);
typedef RogueClassCmd*(*ROGUEM555)(RogueClassCmdSubtract*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM556)(RogueClassCmdSubtract*,RogueClassType*);
typedef RogueClassCmdSubtract*(*ROGUEM557)(RogueClassCmdSubtract*);
typedef RogueString*(*ROGUEM558)(RogueClassCmdMultiply*);
typedef RogueClassCmd*(*ROGUEM559)(RogueClassCmdMultiply*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM560)(RogueClassCmdMultiply*,RogueClassType*);
typedef RogueClassCmdMultiply*(*ROGUEM561)(RogueClassCmdMultiply*);
typedef RogueString*(*ROGUEM562)(RogueClassCmdDivide*);
typedef RogueClassCmd*(*ROGUEM563)(RogueClassCmdDivide*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM564)(RogueClassCmdDivide*,RogueClassType*);
typedef RogueClassCmdDivide*(*ROGUEM565)(RogueClassCmdDivide*);
typedef RogueString*(*ROGUEM566)(RogueClassCmdMod*);
typedef RogueClassCmd*(*ROGUEM567)(RogueClassCmdMod*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM568)(RogueClassCmdMod*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM569)(RogueClassCmdMod*,RogueClassScope*);
typedef RogueClassCmdMod*(*ROGUEM570)(RogueClassCmdMod*);
typedef RogueString*(*ROGUEM571)(RogueClassCmdPower*);
typedef RogueClassCmd*(*ROGUEM572)(RogueClassCmdPower*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM573)(RogueClassCmdPower*,RogueClassType*);
typedef void(*ROGUEM574)(RogueClassCmdPower*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdPower*(*ROGUEM575)(RogueClassCmdPower*);
typedef RogueString*(*ROGUEM576)(RogueClassCmdNegate*);
typedef RogueClassCmd*(*ROGUEM577)(RogueClassCmdNegate*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM578)(RogueClassCmdNegate*);
typedef RogueClassCmdNegate*(*ROGUEM579)(RogueClassCmdNegate*);
typedef RogueClassCmd*(*ROGUEM580)(RogueClassCmdNegate*,RogueClassScope*);
typedef RogueString*(*ROGUEM581)(RogueClassCmdBitwiseNot*);
typedef RogueClassCmd*(*ROGUEM582)(RogueClassCmdBitwiseNot*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM583)(RogueClassCmdBitwiseNot*);
typedef RogueClassCmdBitwiseNot*(*ROGUEM584)(RogueClassCmdBitwiseNot*);
typedef RogueClassCmd*(*ROGUEM585)(RogueClassCmdBitwiseNot*,RogueClassScope*);
typedef RogueString*(*ROGUEM586)(RogueClassCmdGetOptionalValue*);
typedef RogueClassCmd*(*ROGUEM587)(RogueClassCmdGetOptionalValue*,RogueClassCloneArgs*);
typedef RogueClassCmdGetOptionalValue*(*ROGUEM588)(RogueClassCmdGetOptionalValue*,RogueClassScope*);
typedef void(*ROGUEM589)(RogueClassCmdGetOptionalValue*);
typedef RogueClassType*(*ROGUEM590)(RogueClassCmdGetOptionalValue*);
typedef void(*ROGUEM591)(RogueClassCmdGetOptionalValue*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdGetOptionalValue*(*ROGUEM592)(RogueClassCmdGetOptionalValue*);
typedef RogueString*(*ROGUEM593)(RogueClassCmdElementAccess*);
typedef RogueClassCmd*(*ROGUEM594)(RogueClassCmdElementAccess*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM595)(RogueClassCmdElementAccess*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM596)(RogueClassCmdElementAccess*,RogueClassScope*,RogueClassCmd*);
typedef RogueClassCmd*(*ROGUEM597)(RogueClassCmdElementAccess*,RogueClassScope*,RogueInteger);
typedef RogueClassCmdElementAccess*(*ROGUEM598)(RogueClassCmdElementAccess*);
typedef RogueString*(*ROGUEM599)(RogueClassCmdConvertToType*);
typedef RogueClassCmd*(*ROGUEM600)(RogueClassCmdConvertToType*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM601)(RogueClassCmdConvertToType*,RogueClassScope*);
typedef RogueClassCmdConvertToType*(*ROGUEM602)(RogueClassCmdConvertToType*);
typedef RogueString*(*ROGUEM603)(RogueClassCmdCreateCallback*);
typedef RogueClassCmdCreateCallback*(*ROGUEM604)(RogueClassCmdCreateCallback*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM605)(RogueClassCmdCreateCallback*,RogueClassScope*);
typedef RogueClassCmdCreateCallback*(*ROGUEM606)(RogueClassCmdCreateCallback*);
typedef RogueString*(*ROGUEM607)(RogueClassCmdAs*);
typedef RogueClassCmd*(*ROGUEM608)(RogueClassCmdAs*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM609)(RogueClassCmdAs*,RogueClassScope*);
typedef void(*ROGUEM610)(RogueClassCmdAs*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdAs*(*ROGUEM611)(RogueClassCmdAs*);
typedef RogueString*(*ROGUEM612)(RogueClassCmdDefaultValue*);
typedef RogueClassCmd*(*ROGUEM613)(RogueClassCmdDefaultValue*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM614)(RogueClassCmdDefaultValue*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM615)(RogueClassCmdDefaultValue*);
typedef RogueClassCmdDefaultValue*(*ROGUEM616)(RogueClassCmdDefaultValue*);
typedef RogueString*(*ROGUEM617)(RogueClassCmdFormattedString*);
typedef RogueClassCmd*(*ROGUEM618)(RogueClassCmdFormattedString*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM619)(RogueClassCmdFormattedString*);
typedef RogueClassCmd*(*ROGUEM620)(RogueClassCmdFormattedString*,RogueClassScope*);
typedef RogueClassCmdFormattedString*(*ROGUEM621)(RogueClassCmdFormattedString*);
typedef RogueString*(*ROGUEM622)(RogueClassCmdLiteralReal*);
typedef RogueClassCmd*(*ROGUEM623)(RogueClassCmdLiteralReal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM624)(RogueClassCmdLiteralReal*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM625)(RogueClassCmdLiteralReal*);
typedef void(*ROGUEM626)(RogueClassCmdLiteralReal*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralReal*(*ROGUEM627)(RogueClassCmdLiteralReal*);
typedef RogueString*(*ROGUEM628)(RogueClassCmdLiteralLong*);
typedef RogueClassCmd*(*ROGUEM629)(RogueClassCmdLiteralLong*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM630)(RogueClassCmdLiteralLong*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM631)(RogueClassCmdLiteralLong*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM632)(RogueClassCmdLiteralLong*);
typedef void(*ROGUEM633)(RogueClassCmdLiteralLong*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralLong*(*ROGUEM634)(RogueClassCmdLiteralLong*);
typedef RogueString*(*ROGUEM635)(RogueClassCmdLiteralCharacter*);
typedef RogueClassCmd*(*ROGUEM636)(RogueClassCmdLiteralCharacter*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM637)(RogueClassCmdLiteralCharacter*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM638)(RogueClassCmdLiteralCharacter*);
typedef void(*ROGUEM639)(RogueClassCmdLiteralCharacter*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralCharacter*(*ROGUEM640)(RogueClassCmdLiteralCharacter*);
typedef RogueString*(*ROGUEM641)(RogueClassCmdCreateList*);
typedef RogueClassCmd*(*ROGUEM642)(RogueClassCmdCreateList*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM643)(RogueClassCmdCreateList*,RogueClassScope*);
typedef RogueClassCmdCreateList*(*ROGUEM644)(RogueClassCmdCreateList*);
typedef RogueString*(*ROGUEM645)(RogueClassCmdCallPriorMethod*);
typedef RogueClassCmd*(*ROGUEM646)(RogueClassCmdCallPriorMethod*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM647)(RogueClassCmdCallPriorMethod*,RogueClassScope*);
typedef RogueClassCmdCallPriorMethod*(*ROGUEM648)(RogueClassCmdCallPriorMethod*);
typedef RogueString*(*ROGUEM649)(RogueFnParamList*);
typedef RogueFnParamList*(*ROGUEM650)(RogueFnParamList*);
typedef RogueString*(*ROGUEM651)(RogueClassFnParam*);
typedef RogueString*(*ROGUEM652)(RogueFnArgList*);
typedef RogueFnArgList*(*ROGUEM653)(RogueFnArgList*);
typedef RogueString*(*ROGUEM654)(RogueClassFnArg*);
typedef RogueString*(*ROGUEM655)(RogueClassCmdCreateFunction*);
typedef RogueClassCmdCreateFunction*(*ROGUEM656)(RogueClassCmdCreateFunction*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM657)(RogueClassCmdCreateFunction*,RogueClassScope*);
typedef RogueClassCmdCreateFunction*(*ROGUEM658)(RogueClassCmdCreateFunction*);
typedef RogueString*(*ROGUEM659)(RogueClassCmdNativeCode*);
typedef RogueClassCmdNativeCode*(*ROGUEM660)(RogueClassCmdNativeCode*,RogueClassCloneArgs*);
typedef RogueLogical(*ROGUEM661)(RogueClassCmdNativeCode*);
typedef RogueClassCmd*(*ROGUEM662)(RogueClassCmdNativeCode*,RogueClassScope*);
typedef void(*ROGUEM663)(RogueClassCmdNativeCode*);
typedef RogueClassType*(*ROGUEM664)(RogueClassCmdNativeCode*);
typedef void(*ROGUEM665)(RogueClassCmdNativeCode*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdNativeCode*(*ROGUEM666)(RogueClassCmdNativeCode*);
typedef RogueString*(*ROGUEM667)(RogueTableEntry_of_String_TokenTypeList*);
typedef RogueTableEntry_of_String_TokenTypeList*(*ROGUEM668)(RogueTableEntry_of_String_TokenTypeList*);
typedef RogueString*(*ROGUEM669)(RogueClassString_TokenTypeTableEntry*);
typedef RogueString*(*ROGUEM670)(RogueTableEntry_of_String_TypeSpecializerList*);
typedef RogueTableEntry_of_String_TypeSpecializerList*(*ROGUEM671)(RogueTableEntry_of_String_TypeSpecializerList*);
typedef RogueString*(*ROGUEM672)(RogueClassString_TypeSpecializerTableEntry*);
typedef RogueString*(*ROGUEM673)(RogueTableEntry_of_String_CmdLabelList*);
typedef RogueTableEntry_of_String_CmdLabelList*(*ROGUEM674)(RogueTableEntry_of_String_CmdLabelList*);
typedef RogueString*(*ROGUEM675)(RogueClassString_CmdLabelTableEntry*);
typedef RogueString*(*ROGUEM676)(RogueClassMacroArgs*);
typedef RogueClassMacroArgs*(*ROGUEM677)(RogueClassMacroArgs*);
typedef RogueString*(*ROGUEM678)(RogueClassCmdReadSingleton*);
typedef RogueClassCmd*(*ROGUEM679)(RogueClassCmdReadSingleton*,RogueClassCloneArgs*);
typedef void(*ROGUEM680)(RogueClassCmdReadSingleton*);
typedef RogueClassCmd*(*ROGUEM681)(RogueClassCmdReadSingleton*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM682)(RogueClassCmdReadSingleton*);
typedef void(*ROGUEM683)(RogueClassCmdReadSingleton*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdReadSingleton*(*ROGUEM684)(RogueClassCmdReadSingleton*);
typedef RogueString*(*ROGUEM685)(RogueClassCmdCreateArray*);
typedef RogueClassCmd*(*ROGUEM686)(RogueClassCmdCreateArray*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM687)(RogueClassCmdCreateArray*,RogueClassScope*);
typedef void(*ROGUEM688)(RogueClassCmdCreateArray*);
typedef RogueClassType*(*ROGUEM689)(RogueClassCmdCreateArray*);
typedef void(*ROGUEM690)(RogueClassCmdCreateArray*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCreateArray*(*ROGUEM691)(RogueClassCmdCreateArray*);
typedef RogueString*(*ROGUEM692)(RogueClassCmdCallRoutine*);
typedef RogueClassCmd*(*ROGUEM693)(RogueClassCmdCallRoutine*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM694)(RogueClassCmdCall*,RogueClassScope*);
typedef void(*ROGUEM695)(RogueClassCmdCall*);
typedef RogueClassType*(*ROGUEM696)(RogueClassCmdCall*);
typedef void(*ROGUEM697)(RogueClassCmdCallRoutine*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallRoutine*(*ROGUEM698)(RogueClassCmdCallRoutine*);
typedef RogueString*(*ROGUEM699)(RogueClassCmdCall*);
typedef RogueClassCmdCall*(*ROGUEM700)(RogueClassCmdCall*);
typedef RogueString*(*ROGUEM701)(RogueClassCmdCreateObject*);
typedef RogueClassCmd*(*ROGUEM702)(RogueClassCmdCreateObject*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM703)(RogueClassCmdCreateObject*,RogueClassScope*);
typedef void(*ROGUEM704)(RogueClassCmdCreateObject*);
typedef RogueClassType*(*ROGUEM705)(RogueClassCmdCreateObject*);
typedef void(*ROGUEM706)(RogueClassCmdCreateObject*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCreateObject*(*ROGUEM707)(RogueClassCmdCreateObject*);
typedef RogueString*(*ROGUEM708)(RogueClassCmdReadSetting*);
typedef RogueClassCmd*(*ROGUEM709)(RogueClassCmdReadSetting*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM710)(RogueClassCmdReadSetting*,RogueClassScope*);
typedef void(*ROGUEM711)(RogueClassCmdReadSetting*);
typedef RogueClassType*(*ROGUEM712)(RogueClassCmdReadSetting*);
typedef void(*ROGUEM713)(RogueClassCmdReadSetting*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdReadSetting*(*ROGUEM714)(RogueClassCmdReadSetting*);
typedef RogueString*(*ROGUEM715)(RogueClassCmdReadProperty*);
typedef RogueClassCmd*(*ROGUEM716)(RogueClassCmdReadProperty*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM717)(RogueClassCmdReadProperty*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM718)(RogueClassCmdReadProperty*,RogueClassScope*,RogueInteger);
typedef void(*ROGUEM719)(RogueClassCmdReadProperty*);
typedef RogueClassType*(*ROGUEM720)(RogueClassCmdReadProperty*);
typedef void(*ROGUEM721)(RogueClassCmdReadProperty*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdReadProperty*(*ROGUEM722)(RogueClassCmdReadProperty*);
typedef RogueString*(*ROGUEM723)(RogueClassCmdLogicalizeOptionalValue*);
typedef RogueClassCmd*(*ROGUEM724)(RogueClassCmdLogicalizeOptionalValue*,RogueClassCloneArgs*);
typedef RogueClassCmdLogicalizeOptionalValue*(*ROGUEM725)(RogueClassCmdLogicalizeOptionalValue*,RogueClassScope*);
typedef void(*ROGUEM726)(RogueClassCmdLogicalizeOptionalValue*);
typedef RogueClassType*(*ROGUEM727)(RogueClassCmdLogicalizeOptionalValue*);
typedef void(*ROGUEM728)(RogueClassCmdLogicalizeOptionalValue*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLogicalizeOptionalValue*(*ROGUEM729)(RogueClassCmdLogicalizeOptionalValue*);
typedef RogueString*(*ROGUEM730)(RogueClassCmdWriteLocal*);
typedef RogueClassCmd*(*ROGUEM731)(RogueClassCmdWriteLocal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM732)(RogueClassCmdWriteLocal*,RogueClassScope*);
typedef void(*ROGUEM733)(RogueClassCmdWriteLocal*);
typedef RogueClassType*(*ROGUEM734)(RogueClassCmdWriteLocal*);
typedef void(*ROGUEM735)(RogueClassCmdWriteLocal*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdWriteLocal*(*ROGUEM736)(RogueClassCmdWriteLocal*);
typedef RogueString*(*ROGUEM737)(RogueClassCmdOpAssignSetting*);
typedef RogueClassCmd*(*ROGUEM738)(RogueClassCmdOpAssignSetting*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM739)(RogueClassCmdOpAssignSetting*,RogueClassScope*);
typedef void(*ROGUEM740)(RogueClassCmdOpAssignSetting*);
typedef RogueClassType*(*ROGUEM741)(RogueClassCmdOpAssignSetting*);
typedef void(*ROGUEM742)(RogueClassCmdOpAssignSetting*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdOpAssignSetting*(*ROGUEM743)(RogueClassCmdOpAssignSetting*);
typedef RogueString*(*ROGUEM744)(RogueClassCmdOpAssignProperty*);
typedef RogueClassCmd*(*ROGUEM745)(RogueClassCmdOpAssignProperty*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM746)(RogueClassCmdOpAssignProperty*,RogueClassScope*);
typedef void(*ROGUEM747)(RogueClassCmdOpAssignProperty*);
typedef RogueClassType*(*ROGUEM748)(RogueClassCmdOpAssignProperty*);
typedef void(*ROGUEM749)(RogueClassCmdOpAssignProperty*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdOpAssignProperty*(*ROGUEM750)(RogueClassCmdOpAssignProperty*);
typedef RogueString*(*ROGUEM751)(RogueClassCmdCallInlineNative*);
typedef RogueString*(*ROGUEM752)(RogueClassCmdCallInlineNativeRoutine*);
typedef RogueClassCmd*(*ROGUEM753)(RogueClassCmdCallInlineNativeRoutine*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM754)(RogueClassCmdCallInlineNativeRoutine*);
typedef void(*ROGUEM755)(RogueClassCmdCallInlineNative*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallInlineNativeRoutine*(*ROGUEM756)(RogueClassCmdCallInlineNativeRoutine*);
typedef void(*ROGUEM757)(RogueClassCmdCallInlineNative*,RogueClassCPPWriter*);
typedef RogueClassCmdCallInlineNative*(*ROGUEM758)(RogueClassCmdCallInlineNative*);
typedef RogueString*(*ROGUEM759)(RogueClassCmdCallNativeRoutine*);
typedef RogueClassCmd*(*ROGUEM760)(RogueClassCmdCallNativeRoutine*,RogueClassCloneArgs*);
typedef void(*ROGUEM761)(RogueClassCmdCallNativeRoutine*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallNativeRoutine*(*ROGUEM762)(RogueClassCmdCallNativeRoutine*);
typedef RogueString*(*ROGUEM763)(RogueClassCmdReadArrayCount*);
typedef RogueClassCmd*(*ROGUEM764)(RogueClassCmdReadArrayCount*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM765)(RogueClassCmdReadArrayCount*,RogueClassScope*);
typedef void(*ROGUEM766)(RogueClassCmdReadArrayCount*);
typedef RogueClassType*(*ROGUEM767)(RogueClassCmdReadArrayCount*);
typedef void(*ROGUEM768)(RogueClassCmdReadArrayCount*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdReadArrayCount*(*ROGUEM769)(RogueClassCmdReadArrayCount*);
typedef RogueString*(*ROGUEM770)(RogueClassCmdCallInlineNativeMethod*);
typedef RogueClassCmd*(*ROGUEM771)(RogueClassCmdCallInlineNativeMethod*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM772)(RogueClassCmdCallInlineNativeMethod*);
typedef RogueClassCmdCallInlineNativeMethod*(*ROGUEM773)(RogueClassCmdCallInlineNativeMethod*);
typedef void(*ROGUEM774)(RogueClassCmdCallInlineNativeMethod*,RogueClassCPPWriter*);
typedef RogueString*(*ROGUEM775)(RogueClassCmdCallNativeMethod*);
typedef RogueClassCmd*(*ROGUEM776)(RogueClassCmdCallNativeMethod*,RogueClassCloneArgs*);
typedef void(*ROGUEM777)(RogueClassCmdCallNativeMethod*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallNativeMethod*(*ROGUEM778)(RogueClassCmdCallNativeMethod*);
typedef RogueString*(*ROGUEM779)(RogueClassCmdCallAspectMethod*);
typedef RogueClassCmd*(*ROGUEM780)(RogueClassCmdCallAspectMethod*,RogueClassCloneArgs*);
typedef void(*ROGUEM781)(RogueClassCmdCallAspectMethod*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallAspectMethod*(*ROGUEM782)(RogueClassCmdCallAspectMethod*);
typedef RogueString*(*ROGUEM783)(RogueClassCmdCallDynamicMethod*);
typedef RogueClassCmd*(*ROGUEM784)(RogueClassCmdCallMethod*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM785)(RogueClassCmdCallDynamicMethod*,RogueClassCloneArgs*);
typedef void(*ROGUEM786)(RogueClassCmdCallDynamicMethod*);
typedef void(*ROGUEM787)(RogueClassCmdCallDynamicMethod*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallDynamicMethod*(*ROGUEM788)(RogueClassCmdCallDynamicMethod*);
typedef RogueString*(*ROGUEM789)(RogueClassCmdCallMethod*);
typedef RogueClassCmdCallMethod*(*ROGUEM790)(RogueClassCmdCallMethod*);
typedef RogueString*(*ROGUEM791)(RogueClassCandidateMethods*);
typedef RogueString*(*ROGUEM792)(RogueCmdTaskControlSectionList*);
typedef RogueCmdTaskControlSectionList*(*ROGUEM793)(RogueCmdTaskControlSectionList*);
typedef RogueString*(*ROGUEM794)(RogueClassCmdBlock*);
typedef RogueClassCmd*(*ROGUEM795)(RogueClassCmdBlock*,RogueClassCloneArgs*);
typedef RogueLogical(*ROGUEM796)(RogueClassCmdBlock*);
typedef RogueClassCmdBlock*(*ROGUEM797)(RogueClassCmdBlock*,RogueClassScope*);
typedef void(*ROGUEM798)(RogueClassCmdBlock*);
typedef void(*ROGUEM799)(RogueClassCmdBlock*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdBlock*(*ROGUEM800)(RogueClassCmdBlock*);
typedef RogueString*(*ROGUEM801)(RogueTableEntry_of_String_CmdList*);
typedef RogueTableEntry_of_String_CmdList*(*ROGUEM802)(RogueTableEntry_of_String_CmdList*);
typedef RogueString*(*ROGUEM803)(RogueClassString_CmdTableEntry*);
typedef RogueString*(*ROGUEM804)(RogueTableEntry_of_String_PropertyList*);
typedef RogueTableEntry_of_String_PropertyList*(*ROGUEM805)(RogueTableEntry_of_String_PropertyList*);
typedef RogueString*(*ROGUEM806)(RogueClassString_PropertyTableEntry*);
typedef RogueString*(*ROGUEM807)(RogueClassDirectiveTokenType*);
typedef RogueClassToken*(*ROGUEM808)(RogueClassDirectiveTokenType*,RogueString*,RogueInteger,RogueInteger);
typedef RogueLogical(*ROGUEM809)(RogueClassDirectiveTokenType*);
typedef RogueClassDirectiveTokenType*(*ROGUEM810)(RogueClassDirectiveTokenType*);
typedef RogueString*(*ROGUEM811)(RogueClassStructuralDirectiveTokenType*);
typedef RogueClassToken*(*ROGUEM812)(RogueClassStructuralDirectiveTokenType*,RogueString*,RogueInteger,RogueInteger);
typedef RogueLogical(*ROGUEM813)(RogueClassStructuralDirectiveTokenType*);
typedef RogueClassStructuralDirectiveTokenType*(*ROGUEM814)(RogueClassStructuralDirectiveTokenType*);
typedef RogueString*(*ROGUEM815)(RogueClassEOLTokenType*);
typedef RogueClassToken*(*ROGUEM816)(RogueClassEOLTokenType*,RogueString*,RogueInteger,RogueInteger);
typedef RogueClassToken*(*ROGUEM817)(RogueClassEOLTokenType*,RogueString*,RogueInteger,RogueInteger,RogueString*);
typedef RogueLogical(*ROGUEM818)(RogueClassEOLTokenType*);
typedef RogueClassEOLTokenType*(*ROGUEM819)(RogueClassEOLTokenType*);
typedef RogueString*(*ROGUEM820)(RogueClassStructureTokenType*);
typedef RogueClassToken*(*ROGUEM821)(RogueClassStructureTokenType*,RogueString*,RogueInteger,RogueInteger);
typedef RogueLogical(*ROGUEM822)(RogueClassStructureTokenType*);
typedef RogueClassStructureTokenType*(*ROGUEM823)(RogueClassStructureTokenType*);
typedef RogueString*(*ROGUEM824)(RogueClassOpWithAssignTokenType*);
typedef RogueLogical(*ROGUEM825)(RogueClassOpWithAssignTokenType*);
typedef RogueClassOpWithAssignTokenType*(*ROGUEM826)(RogueClassOpWithAssignTokenType*);
typedef RogueString*(*ROGUEM827)(RogueClassEOLToken*);
typedef RogueClassEOLToken*(*ROGUEM828)(RogueClassEOLToken*);
typedef RogueString*(*ROGUEM829)(RogueClassString_TokenListTable*);
typedef RogueString*(*ROGUEM830)(RogueClassPreprocessorTokenReader*);
typedef RogueString*(*ROGUEM831)(RogueClassCmdSwitch*);
typedef RogueClassCmdSwitch*(*ROGUEM832)(RogueClassCmdSwitch*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM833)(RogueClassCmdSwitch*,RogueClassScope*);
typedef void(*ROGUEM834)(RogueClassCmdSwitch*);
typedef void(*ROGUEM835)(RogueClassCmdSwitch*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdSwitch*(*ROGUEM836)(RogueClassCmdSwitch*);
typedef RogueString*(*ROGUEM837)(RogueClassCmdReadArrayElement*);
typedef RogueClassCmd*(*ROGUEM838)(RogueClassCmdReadArrayElement*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM839)(RogueClassCmdReadArrayElement*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM840)(RogueClassCmdReadArrayElement*,RogueClassScope*,RogueInteger);
typedef void(*ROGUEM841)(RogueClassCmdReadArrayElement*);
typedef RogueClassType*(*ROGUEM842)(RogueClassCmdReadArrayElement*);
typedef void(*ROGUEM843)(RogueClassCmdReadArrayElement*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdReadArrayElement*(*ROGUEM844)(RogueClassCmdReadArrayElement*);
typedef RogueString*(*ROGUEM845)(RogueClassCmdWriteArrayElement*);
typedef RogueClassCmd*(*ROGUEM846)(RogueClassCmdWriteArrayElement*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM847)(RogueClassCmdWriteArrayElement*,RogueClassScope*);
typedef void(*ROGUEM848)(RogueClassCmdWriteArrayElement*);
typedef RogueClassType*(*ROGUEM849)(RogueClassCmdWriteArrayElement*);
typedef void(*ROGUEM850)(RogueClassCmdWriteArrayElement*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdWriteArrayElement*(*ROGUEM851)(RogueClassCmdWriteArrayElement*);
typedef RogueString*(*ROGUEM852)(RogueClassCmdConvertToPrimitiveType*);
typedef RogueClassCmd*(*ROGUEM853)(RogueClassCmdConvertToPrimitiveType*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM854)(RogueClassCmdConvertToPrimitiveType*,RogueClassScope*);
typedef void(*ROGUEM855)(RogueClassCmdConvertToPrimitiveType*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdConvertToPrimitiveType*(*ROGUEM856)(RogueClassCmdConvertToPrimitiveType*);
typedef RogueString*(*ROGUEM857)(RogueClassCmdAdjustProperty*);
typedef RogueClassCmd*(*ROGUEM858)(RogueClassCmdAdjustProperty*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM859)(RogueClassCmdAdjustProperty*,RogueClassScope*);
typedef void(*ROGUEM860)(RogueClassCmdAdjustProperty*);
typedef RogueClassType*(*ROGUEM861)(RogueClassCmdAdjustProperty*);
typedef void(*ROGUEM862)(RogueClassCmdAdjustProperty*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdAdjustProperty*(*ROGUEM863)(RogueClassCmdAdjustProperty*);
typedef RogueString*(*ROGUEM864)(RogueClassCmdCallStaticMethod*);
typedef RogueClassCmd*(*ROGUEM865)(RogueClassCmdCallStaticMethod*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM866)(RogueClassCmdCallStaticMethod*,RogueClassScope*);
typedef void(*ROGUEM867)(RogueClassCmdCallStaticMethod*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallStaticMethod*(*ROGUEM868)(RogueClassCmdCallStaticMethod*);
typedef RogueString*(*ROGUEM869)(RogueTableEntry_of_String_TokenListList*);
typedef RogueTableEntry_of_String_TokenListList*(*ROGUEM870)(RogueTableEntry_of_String_TokenListList*);
typedef RogueString*(*ROGUEM871)(RogueClassString_TokenListTableEntry*);

RogueString* call_ROGUEM2( int i, RogueObject* THIS )
{
  return ((ROGUEM2)(THIS->type->methods[i]))( THIS );
}

RogueString* call_ROGUEM33( int i, RogueClassToken* THIS )
{
  return ((ROGUEM33)(THIS->type->methods[i]))( THIS );
}

RogueCharacter call_ROGUEM34( int i, RogueClassToken* THIS )
{
  return ((ROGUEM34)(THIS->type->methods[i]))( THIS );
}

RogueInteger call_ROGUEM35( int i, RogueClassToken* THIS )
{
  return ((ROGUEM35)(THIS->type->methods[i]))( THIS );
}

RogueLong call_ROGUEM36( int i, RogueClassToken* THIS )
{
  return ((ROGUEM36)(THIS->type->methods[i]))( THIS );
}

RogueReal call_ROGUEM37( int i, RogueClassToken* THIS )
{
  return ((ROGUEM37)(THIS->type->methods[i]))( THIS );
}

RogueClassType* call_ROGUEM38( int i, RogueClassToken* THIS )
{
  return ((ROGUEM38)(THIS->type->methods[i]))( THIS );
}

RogueString* call_ROGUEM41( int i, RogueClassCmd* THIS )
{
  return ((ROGUEM41)(THIS->type->methods[i]))( THIS );
}

RogueClassCmd* call_ROGUEM42( int i, RogueClassCmd* THIS, RogueClassScope* p0 )
{
  return ((ROGUEM42)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassCmd* call_ROGUEM43( int i, RogueClassCmd* THIS, RogueClassType* p0 )
{
  return ((ROGUEM43)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassCmd* call_ROGUEM44( int i, RogueClassCmd* THIS, RogueClassCloneArgs* p0 )
{
  return ((ROGUEM44)(THIS->type->methods[i]))( THIS, p0 );
}

void call_ROGUEM45( int i, RogueClassCmd* THIS, RogueClassScope* p0 )
{
  ((ROGUEM45)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassType* call_ROGUEM46( int i, RogueClassCmd* THIS )
{
  return ((ROGUEM46)(THIS->type->methods[i]))( THIS );
}

RogueLogical call_ROGUEM47( int i, RogueClassCmd* THIS )
{
  return ((ROGUEM47)(THIS->type->methods[i]))( THIS );
}

void call_ROGUEM48( int i, RogueClassCmd* THIS )
{
  ((ROGUEM48)(THIS->type->methods[i]))( THIS );
}

RogueClassCmd* call_ROGUEM49( int i, RogueClassCmd* THIS, RogueClassScope* p0, RogueClassCmd* p1 )
{
  return ((ROGUEM49)(THIS->type->methods[i]))( THIS, p0, p1 );
}

RogueClassCmd* call_ROGUEM50( int i, RogueClassCmd* THIS, RogueClassScope* p0, RogueInteger p1 )
{
  return ((ROGUEM50)(THIS->type->methods[i]))( THIS, p0, p1 );
}

RogueClassCmd* call_ROGUEM51( int i, RogueClassCmd* THIS, RogueClassScope* p0, RogueClassTokenType* p1, RogueClassCmd* p2 )
{
  return ((ROGUEM51)(THIS->type->methods[i]))( THIS, p0, p1, p2 );
}

void call_ROGUEM52( int i, RogueClassCmd* THIS, RogueClassCPPWriter* p0, RogueLogical p1 )
{
  ((ROGUEM52)(THIS->type->methods[i]))( THIS, p0, p1 );
}

RogueCmdList* call_ROGUEM69( int i, RogueCmdList* THIS, RogueInteger p0 )
{
  return ((ROGUEM69)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassToken* call_ROGUEM71( int i, RogueClassTokenType* THIS, RogueString* p0, RogueInteger p1, RogueInteger p2 )
{
  return ((ROGUEM71)(THIS->type->methods[i]))( THIS, p0, p1, p2 );
}

RogueClassToken* call_ROGUEM72( int i, RogueClassTokenType* THIS, RogueString* p0, RogueInteger p1, RogueInteger p2, RogueString* p3 )
{
  return ((ROGUEM72)(THIS->type->methods[i]))( THIS, p0, p1, p2, p3 );
}

RogueLogical call_ROGUEM73( int i, RogueClassTokenType* THIS )
{
  return ((ROGUEM73)(THIS->type->methods[i]))( THIS );
}

RogueClassCmdLabel* call_ROGUEM144( int i, RogueClassCloneArgs* THIS, RogueClassCmdLabel* p0 )
{
  return ((ROGUEM144)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassCmd* call_ROGUEM171( int i, RogueClassCmdControlStructure* THIS, RogueClassCmdControlStructure* p0 )
{
  return ((ROGUEM171)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassCmd* call_ROGUEM205( int i, RogueClassCmdBinary* THIS, RogueClassScope* p0 )
{
  return ((ROGUEM205)(THIS->type->methods[i]))( THIS, p0 );
}

RogueString* call_ROGUEM210( int i, RogueClassCmdBinary* THIS )
{
  return ((ROGUEM210)(THIS->type->methods[i]))( THIS );
}

RogueClassCmd* call_ROGUEM213( int i, RogueClassCmdBinary* THIS, RogueClassScope* p0, RogueClassType* p1 )
{
  return ((ROGUEM213)(THIS->type->methods[i]))( THIS, p0, p1 );
}

RogueClassCmd* call_ROGUEM214( int i, RogueClassCmdBinary* THIS, RogueClassScope* p0, RogueClassType* p1, RogueClassType* p2 )
{
  return ((ROGUEM214)(THIS->type->methods[i]))( THIS, p0, p1, p2 );
}

RogueClassCmd* call_ROGUEM218( int i, RogueClassCmdComparison* THIS, RogueClassScope* p0, RogueClassType* p1, RogueClassType* p2, RogueLogical p3 )
{
  return ((ROGUEM218)(THIS->type->methods[i]))( THIS, p0, p1, p2, p3 );
}

RogueLogical call_ROGUEM221( int i, RogueClassCmdBinary* THIS )
{
  return ((ROGUEM221)(THIS->type->methods[i]))( THIS );
}

RogueString* call_ROGUEM301( int i, RogueClassCmdUnary* THIS )
{
  return ((ROGUEM301)(THIS->type->methods[i]))( THIS );
}

RogueClassCmd* call_ROGUEM302( int i, RogueClassCmdUnary* THIS, RogueClassScope* p0 )
{
  return ((ROGUEM302)(THIS->type->methods[i]))( THIS, p0 );
}

RogueString* call_ROGUEM474( int i, RogueClassCmdBinaryLogical* THIS )
{
  return ((ROGUEM474)(THIS->type->methods[i]))( THIS );
}

RogueLogical call_ROGUEM476( int i, RogueClassCmdBinaryLogical* THIS, RogueLogical p0, RogueLogical p1 )
{
  return ((ROGUEM476)(THIS->type->methods[i]))( THIS, p0, p1 );
}

void call_ROGUEM757( int i, RogueClassCmdCallInlineNative* THIS, RogueClassCPPWriter* p0 )
{
  ((ROGUEM757)(THIS->type->methods[i]))( THIS, p0 );
}


void* Rogue_dynamic_method_table[] =
{
  NULL, // Character[]
  (void*) (ROGUEM0) RogueCharacterList__to_String,
  (void*) (ROGUEM0) RogueCharacterList__type_name,
  (void*) (ROGUEM1) RogueCharacterList__init_object,
  NULL, // GenericList
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM3) RogueGenericList__type_name,
  (void*) (ROGUEM4) RogueGenericList__init_object,
  NULL, // StringBuilder
  (void*) (ROGUEM5) RogueStringBuilder__to_String,
  (void*) (ROGUEM5) RogueStringBuilder__type_name,
  NULL, // String[]
  (void*) (ROGUEM6) RogueStringList__to_String,
  (void*) (ROGUEM6) RogueStringList__type_name,
  (void*) (ROGUEM7) RogueStringList__init_object,
  NULL, // StringReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM9) RogueStringReader__type_name,
  (void*) (ROGUEM10) RogueStringReader__has_another,
  (void*) (ROGUEM11) RogueStringReader__read,
  NULL, // Reader<<Character>>
  NULL, // Global
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM12) RogueGlobal__type_name,
  NULL, // Console
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM13) RogueConsole__type_name,
  NULL, // RogueC
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM14) RogueRogueC__type_name,
  NULL, // Error
  (void*) (ROGUEM15) RogueError__to_String,
  (void*) (ROGUEM15) RogueError__type_name,
  (void*) (ROGUEM16) RogueError__init_object,
  NULL, // Program
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM17) RogueProgram__type_name,
  NULL, // Template[]
  (void*) (ROGUEM18) RogueTemplateList__to_String,
  (void*) (ROGUEM18) RogueTemplateList__type_name,
  (void*) (ROGUEM19) RogueTemplateList__init_object,
  NULL, // Template
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM20) RogueTemplate__type_name,
  NULL, // Table<<String,Template>>
  (void*) (ROGUEM21) RogueString_TemplateTable__to_String,
  (void*) (ROGUEM21) RogueString_TemplateTable__type_name,
  NULL, // Table<<String,Augment[]>>
  (void*) (ROGUEM22) RogueString_AugmentListTable__to_String,
  (void*) (ROGUEM22) RogueString_AugmentListTable__type_name,
  NULL, // RequisiteItem[]
  (void*) (ROGUEM23) RogueRequisiteItemList__to_String,
  (void*) (ROGUEM23) RogueRequisiteItemList__type_name,
  (void*) (ROGUEM24) RogueRequisiteItemList__init_object,
  NULL, // RequisiteItem
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM25) RogueRequisiteItem__type_name,
  NULL, // Method
  (void*) (ROGUEM26) RogueMethod__to_String,
  (void*) (ROGUEM26) RogueMethod__type_name,
  NULL, // Table<<String,Method[]>>
  (void*) (ROGUEM27) RogueString_MethodListTable__to_String,
  (void*) (ROGUEM27) RogueString_MethodListTable__type_name,
  NULL, // Type[]
  (void*) (ROGUEM28) RogueTypeList__to_String,
  (void*) (ROGUEM28) RogueTypeList__type_name,
  (void*) (ROGUEM29) RogueTypeList__init_object,
  NULL, // Type
  (void*) (ROGUEM30) RogueType__to_String,
  (void*) (ROGUEM30) RogueType__type_name,
  NULL, // Table<<String,Type>>
  (void*) (ROGUEM31) RogueString_TypeTable__to_String,
  (void*) (ROGUEM31) RogueString_TypeTable__type_name,
  NULL, // Table<<String,Integer>>
  (void*) (ROGUEM32) RogueString_IntegerTable__to_String,
  (void*) (ROGUEM32) RogueString_IntegerTable__type_name,
  NULL, // Token
  (void*) (ROGUEM33) RogueToken__to_String,
  (void*) (ROGUEM33) RogueToken__type_name,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM34) RogueToken__to_Character,
  (void*) (ROGUEM35) RogueToken__to_Integer,
  (void*) (ROGUEM36) RogueToken__to_Long,
  (void*) (ROGUEM37) RogueToken__to_Real,
  (void*) (ROGUEM38) RogueToken__to_Type,
  (void*) (ROGUEM39) RogueToken__init_object,
  NULL, // Attributes
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM40) RogueAttributes__type_name,
  NULL, // Cmd
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM41) RogueCmd__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM42) RogueCmd__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM53) RogueCmd__init_object,
  NULL, // CmdReturn
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM54) RogueCmdReturn__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM55) RogueCmdReturn__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM56) RogueCmdReturn__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM57) RogueCmdReturn__trace_used_code,
  (void*) (ROGUEM58) Rogue_CmdReturn__type,
  (void*) (ROGUEM59) RogueCmdReturn__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM60) RogueCmdReturn__init_object,
  NULL, // CmdStatement
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM61) RogueCmdStatement__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM42) RogueCmd__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM62) RogueCmdStatement__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM63) RogueCmdStatement__init_object,
  NULL, // CmdStatementList
  (void*) (ROGUEM64) RogueCmdList__to_String,
  (void*) (ROGUEM65) RogueCmdStatementList__type_name,
  (void*) (ROGUEM66) RogueCmdStatementList__init_object,
  (void*) (ROGUEM66) RogueCmdStatementList__init,
  (void*) (ROGUEM67) RogueCmdStatementList__init__Integer,
  NULL, // Cmd[]
  (void*) (ROGUEM64) RogueCmdList__to_String,
  (void*) (ROGUEM64) RogueCmdList__type_name,
  (void*) (ROGUEM68) RogueCmdList__init_object,
  (void*) (ROGUEM68) RogueCmdList__init,
  (void*) (ROGUEM69) RogueCmdList__init__Integer,
  NULL, // TokenType
  (void*) (ROGUEM70) RogueTokenType__to_String,
  (void*) (ROGUEM70) RogueTokenType__type_name,
  NULL,
  (void*) (ROGUEM71) RogueTokenType__create_token__String_Integer_Integer,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM72) RogueTokenType__create_token__String_Integer_Integer_String,
  NULL,
  (void*) (ROGUEM73) RogueTokenType__is_directive,
  (void*) (ROGUEM73) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM73) RogueTokenType__is_structure,
  NULL,
  NULL,
  (void*) (ROGUEM74) RogueTokenType__init_object,
  NULL, // CmdLabel
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM75) RogueCmdLabel__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM76) RogueCmdLabel__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM77) RogueCmdLabel__requires_semicolon,
  (void*) (ROGUEM78) RogueCmdLabel__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM79) RogueCmdLabel__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM80) RogueCmdLabel__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM81) RogueCmdLabel__init_object,
  NULL, // RogueError
  (void*) (ROGUEM82) RogueRogueError__to_String,
  (void*) (ROGUEM82) RogueRogueError__type_name,
  (void*) (ROGUEM83) RogueRogueError__init_object,
  NULL, // Method[]
  (void*) (ROGUEM84) RogueMethodList__to_String,
  (void*) (ROGUEM84) RogueMethodList__type_name,
  (void*) (ROGUEM85) RogueMethodList__init_object,
  NULL, // CPPWriter
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM86) RogueCPPWriter__type_name,
  NULL, // Table<<String,Method>>
  (void*) (ROGUEM87) RogueString_MethodTable__to_String,
  (void*) (ROGUEM87) RogueString_MethodTable__type_name,
  NULL, // Local[]
  (void*) (ROGUEM88) RogueLocalList__to_String,
  (void*) (ROGUEM88) RogueLocalList__type_name,
  (void*) (ROGUEM89) RogueLocalList__init_object,
  NULL, // Local
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM90) RogueLocal__type_name,
  NULL, // Byte[]
  (void*) (ROGUEM91) RogueByteList__to_String,
  (void*) (ROGUEM91) RogueByteList__type_name,
  (void*) (ROGUEM92) RogueByteList__init_object,
  NULL, // Math
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM93) RogueMath__type_name,
  NULL, // System
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM94) RogueSystem__type_name,
  NULL, // TaskManager
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM95) RogueTaskManager__type_name,
  NULL, // Task
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM96) RogueTask__type_name,
  (void*) (ROGUEM97) RogueTask__init_object,
  NULL, // Task[]
  (void*) (ROGUEM98) RogueTaskList__to_String,
  (void*) (ROGUEM98) RogueTaskList__type_name,
  (void*) (ROGUEM99) RogueTaskList__init_object,
  NULL, // Table<<String,Logical>>
  (void*) (ROGUEM100) RogueString_LogicalTable__to_String,
  (void*) (ROGUEM100) RogueString_LogicalTable__type_name,
  NULL, // File
  (void*) (ROGUEM101) RogueFile__to_String,
  (void*) (ROGUEM101) RogueFile__type_name,
  NULL, // Parser
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM102) RogueParser__type_name,
  NULL, // Token[]
  (void*) (ROGUEM103) RogueTokenList__to_String,
  (void*) (ROGUEM103) RogueTokenList__type_name,
  (void*) (ROGUEM104) RogueTokenList__init_object,
  NULL, // LineReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM105) RogueLineReader__type_name,
  (void*) (ROGUEM106) RogueLineReader__has_another,
  (void*) (ROGUEM105) RogueLineReader__read,
  NULL, // TypeParameter[]
  (void*) (ROGUEM107) RogueTypeParameterList__to_String,
  (void*) (ROGUEM107) RogueTypeParameterList__type_name,
  (void*) (ROGUEM108) RogueTypeParameterList__init_object,
  NULL, // TypeParameter
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM109) RogueTypeParameter__type_name,
  NULL, // Augment[]
  (void*) (ROGUEM110) RogueAugmentList__to_String,
  (void*) (ROGUEM110) RogueAugmentList__type_name,
  (void*) (ROGUEM111) RogueAugmentList__init_object,
  NULL, // Augment
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM112) RogueAugment__type_name,
  NULL, // Table<<String,TokenType>>
  (void*) (ROGUEM113) RogueString_TokenTypeTable__to_String,
  (void*) (ROGUEM113) RogueString_TokenTypeTable__type_name,
  NULL, // LiteralCharacterToken
  (void*) (ROGUEM114) RogueLiteralCharacterToken__to_String,
  (void*) (ROGUEM114) RogueLiteralCharacterToken__type_name,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM115) RogueLiteralCharacterToken__to_Character,
  (void*) (ROGUEM35) RogueToken__to_Integer,
  (void*) (ROGUEM36) RogueToken__to_Long,
  (void*) (ROGUEM37) RogueToken__to_Real,
  (void*) (ROGUEM38) RogueToken__to_Type,
  (void*) (ROGUEM116) RogueLiteralCharacterToken__init_object,
  NULL, // LiteralLongToken
  (void*) (ROGUEM117) RogueLiteralLongToken__to_String,
  (void*) (ROGUEM117) RogueLiteralLongToken__type_name,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM34) RogueToken__to_Character,
  (void*) (ROGUEM118) RogueLiteralLongToken__to_Integer,
  (void*) (ROGUEM119) RogueLiteralLongToken__to_Long,
  (void*) (ROGUEM120) RogueLiteralLongToken__to_Real,
  (void*) (ROGUEM38) RogueToken__to_Type,
  (void*) (ROGUEM121) RogueLiteralLongToken__init_object,
  NULL, // LiteralIntegerToken
  (void*) (ROGUEM122) RogueLiteralIntegerToken__to_String,
  (void*) (ROGUEM122) RogueLiteralIntegerToken__type_name,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM34) RogueToken__to_Character,
  (void*) (ROGUEM123) RogueLiteralIntegerToken__to_Integer,
  (void*) (ROGUEM36) RogueToken__to_Long,
  (void*) (ROGUEM124) RogueLiteralIntegerToken__to_Real,
  (void*) (ROGUEM38) RogueToken__to_Type,
  (void*) (ROGUEM125) RogueLiteralIntegerToken__init_object,
  NULL, // LiteralRealToken
  (void*) (ROGUEM126) RogueLiteralRealToken__to_String,
  (void*) (ROGUEM126) RogueLiteralRealToken__type_name,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM34) RogueToken__to_Character,
  (void*) (ROGUEM127) RogueLiteralRealToken__to_Integer,
  (void*) (ROGUEM36) RogueToken__to_Long,
  (void*) (ROGUEM128) RogueLiteralRealToken__to_Real,
  (void*) (ROGUEM38) RogueToken__to_Type,
  (void*) (ROGUEM129) RogueLiteralRealToken__init_object,
  NULL, // LiteralStringToken
  (void*) (ROGUEM130) RogueLiteralStringToken__to_String,
  (void*) (ROGUEM130) RogueLiteralStringToken__type_name,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM34) RogueToken__to_Character,
  (void*) (ROGUEM35) RogueToken__to_Integer,
  (void*) (ROGUEM36) RogueToken__to_Long,
  (void*) (ROGUEM37) RogueToken__to_Real,
  (void*) (ROGUEM38) RogueToken__to_Type,
  (void*) (ROGUEM131) RogueLiteralStringToken__init_object,
  NULL, // Table<<String,TypeSpecializer>>
  (void*) (ROGUEM132) RogueString_TypeSpecializerTable__to_String,
  (void*) (ROGUEM132) RogueString_TypeSpecializerTable__type_name,
  NULL, // TypeSpecializer
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM133) RogueTypeSpecializer__type_name,
  NULL, // TableEntry<<String,Template>>[]
  (void*) (ROGUEM134) RogueString_TemplateTableEntryList__to_String,
  (void*) (ROGUEM134) RogueString_TemplateTableEntryList__type_name,
  (void*) (ROGUEM135) RogueString_TemplateTableEntryList__init_object,
  NULL, // TableEntry<<String,Template>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM136) RogueString_TemplateTableEntry__type_name,
  NULL, // TableEntry<<String,Augment[]>>[]
  (void*) (ROGUEM137) RogueString_AugmentListTableEntryList__to_String,
  (void*) (ROGUEM137) RogueString_AugmentListTableEntryList__type_name,
  (void*) (ROGUEM138) RogueString_AugmentListTableEntryList__init_object,
  NULL, // TableEntry<<String,Augment[]>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM139) RogueString_AugmentListTableEntry__type_name,
  NULL, // CmdLabel[]
  (void*) (ROGUEM140) RogueCmdLabelList__to_String,
  (void*) (ROGUEM140) RogueCmdLabelList__type_name,
  (void*) (ROGUEM141) RogueCmdLabelList__init_object,
  NULL, // Table<<String,CmdLabel>>
  (void*) (ROGUEM142) RogueString_CmdLabelTable__to_String,
  (void*) (ROGUEM142) RogueString_CmdLabelTable__type_name,
  NULL, // CloneArgs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM143) RogueCloneArgs__type_name,
  (void*) (ROGUEM144) RogueCloneArgs__register_label__CmdLabel,
  (void*) (ROGUEM145) RogueCloneArgs__init_object,
  NULL, // CloneMethodArgs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM146) RogueCloneMethodArgs__type_name,
  (void*) (ROGUEM147) RogueCloneMethodArgs__register_label__CmdLabel,
  (void*) (ROGUEM148) RogueCloneMethodArgs__init_object,
  NULL, // Property
  (void*) (ROGUEM149) RogueProperty__to_String,
  (void*) (ROGUEM149) RogueProperty__type_name,
  NULL, // CmdAccess
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM150) RogueCmdAccess__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM151) RogueCmdAccess__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM152) Rogue_CmdAccess__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM153) RogueCmdAccess__resolve__Scope,
  (void*) (ROGUEM154) RogueCmdAccess__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM155) RogueCmdAccess__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM152) Rogue_CmdAccess__type,
  (void*) (ROGUEM156) RogueCmdAccess__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM157) RogueCmdAccess__init_object,
  NULL, // CmdArgs
  (void*) (ROGUEM64) RogueCmdList__to_String,
  (void*) (ROGUEM158) RogueCmdArgs__type_name,
  (void*) (ROGUEM159) RogueCmdArgs__init_object,
  (void*) (ROGUEM159) RogueCmdArgs__init,
  (void*) (ROGUEM160) RogueCmdArgs__init__Integer,
  NULL, // CmdAssign
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM161) RogueCmdAssign__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM162) RogueCmdAssign__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM163) RogueCmdAssign__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM164) RogueCmdAssign__init_object,
  NULL, // Scope
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM165) RogueScope__type_name,
  NULL, // CmdControlStructure[]
  (void*) (ROGUEM166) RogueCmdControlStructureList__to_String,
  (void*) (ROGUEM166) RogueCmdControlStructureList__type_name,
  (void*) (ROGUEM167) RogueCmdControlStructureList__init_object,
  NULL, // CmdControlStructure
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM168) RogueCmdControlStructure__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM169) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM42) RogueCmd__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM62) RogueCmdStatement__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM170) RogueCmdControlStructure__init_object,
  (void*) (ROGUEM171) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  NULL, // CmdLiteralThis
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM172) RogueCmdLiteralThis__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM173) RogueCmdLiteralThis__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM174) Rogue_CmdThisContext__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM175) RogueCmdLiteralThis__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM176) RogueCmdLiteralThis__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM177) RogueCmdThisContext__trace_used_code,
  (void*) (ROGUEM174) Rogue_CmdThisContext__type,
  (void*) (ROGUEM178) RogueCmdThisContext__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM179) RogueCmdLiteralThis__init_object,
  NULL, // CmdThisContext
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM180) RogueCmdThisContext__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM181) RogueCmdThisContext__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM174) Rogue_CmdThisContext__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM177) RogueCmdThisContext__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM182) RogueCmdThisContext__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM177) RogueCmdThisContext__trace_used_code,
  (void*) (ROGUEM174) Rogue_CmdThisContext__type,
  (void*) (ROGUEM178) RogueCmdThisContext__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM183) RogueCmdThisContext__init_object,
  NULL, // CmdGenericLoop
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM184) RogueCmdGenericLoop__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM185) RogueCmdGenericLoop__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM169) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM186) RogueCmdGenericLoop__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM187) RogueCmdGenericLoop__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM188) RogueCmdGenericLoop__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM189) RogueCmdGenericLoop__init_object,
  (void*) (ROGUEM171) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  NULL, // CmdLiteralInteger
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM190) RogueCmdLiteralInteger__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM191) RogueCmdLiteralInteger__cast_to__Type,
  (void*) (ROGUEM192) RogueCmdLiteralInteger__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM193) Rogue_CmdLiteral__implicit_type,
  (void*) (ROGUEM194) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM195) RogueCmdLiteralInteger__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM196) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM197) Rogue_CmdLiteralInteger__type,
  (void*) (ROGUEM198) RogueCmdLiteralInteger__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM199) RogueCmdLiteralInteger__init_object,
  NULL, // CmdLiteral
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM200) RogueCmdLiteral__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM193) Rogue_CmdLiteral__implicit_type,
  (void*) (ROGUEM194) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM42) RogueCmd__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM196) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM201) RogueCmdLiteral__init_object,
  NULL, // CmdCompareNE
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM202) RogueCmdCompareNE__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM203) RogueCmdCompareNE__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM204) RogueCmdCompareNE__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM205) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM207) Rogue_CmdComparison__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM209) RogueCmdCompareNE__init_object,
  NULL,
  (void*) (ROGUEM210) RogueCmdBinary__fn_name,
  (void*) (ROGUEM211) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM212) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM202) RogueCmdCompareNE__symbol,
  (void*) (ROGUEM210) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM215) RogueCmdCompareNE__resolve_for_reference__Scope_Type_Type_Logical,
  NULL, // CmdComparison
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM216) RogueCmdComparison__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM205) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM207) Rogue_CmdComparison__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM217) RogueCmdComparison__init_object,
  NULL,
  (void*) (ROGUEM210) RogueCmdBinary__fn_name,
  (void*) (ROGUEM211) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM212) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM210) RogueCmdBinary__symbol,
  (void*) (ROGUEM210) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM218) RogueCmdComparison__resolve_for_reference__Scope_Type_Type_Logical,
  NULL, // CmdBinary
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM210) RogueCmdBinary__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM205) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM219) Rogue_CmdBinary__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM220) RogueCmdBinary__init_object,
  NULL,
  (void*) (ROGUEM210) RogueCmdBinary__fn_name,
  (void*) (ROGUEM221) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM210) RogueCmdBinary__symbol,
  (void*) (ROGUEM210) RogueCmdBinary__cpp_symbol,
  NULL, // TaskArgs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM222) RogueTaskArgs__type_name,
  (void*) (ROGUEM144) RogueCloneArgs__register_label__CmdLabel,
  (void*) (ROGUEM223) RogueTaskArgs__init_object,
  NULL, // CmdTaskControl
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM224) RogueCmdTaskControl__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM225) RogueCmdTaskControl__requires_semicolon,
  (void*) (ROGUEM226) RogueCmdTaskControl__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM227) RogueCmdTaskControl__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM228) RogueCmdTaskControl__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM229) RogueCmdTaskControl__init_object,
  NULL, // CmdTaskControlSection
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM230) RogueCmdTaskControlSection__type_name,
  NULL, // TableEntry<<String,Method[]>>[]
  (void*) (ROGUEM231) RogueString_MethodListTableEntryList__to_String,
  (void*) (ROGUEM231) RogueString_MethodListTableEntryList__type_name,
  (void*) (ROGUEM232) RogueString_MethodListTableEntryList__init_object,
  NULL, // TableEntry<<String,Method[]>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM233) RogueString_MethodListTableEntry__type_name,
  NULL, // Table<<String,Cmd>>
  (void*) (ROGUEM234) RogueString_CmdTable__to_String,
  (void*) (ROGUEM234) RogueString_CmdTable__type_name,
  NULL, // Property[]
  (void*) (ROGUEM235) RoguePropertyList__to_String,
  (void*) (ROGUEM235) RoguePropertyList__type_name,
  (void*) (ROGUEM236) RoguePropertyList__init_object,
  NULL, // Table<<String,Property>>
  (void*) (ROGUEM237) RogueString_PropertyTable__to_String,
  (void*) (ROGUEM237) RogueString_PropertyTable__type_name,
  NULL, // CmdLiteralNull
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM238) RogueCmdLiteralNull__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM239) RogueCmdLiteralNull__cast_to__Type,
  (void*) (ROGUEM240) RogueCmdLiteralNull__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM193) Rogue_CmdLiteral__implicit_type,
  (void*) (ROGUEM194) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM241) RogueCmdLiteralNull__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM196) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM242) Rogue_CmdLiteralNull__type,
  (void*) (ROGUEM243) RogueCmdLiteralNull__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM244) RogueCmdLiteralNull__init_object,
  NULL, // CmdCreateCompound
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM245) RogueCmdCreateCompound__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM246) RogueCmdCreateCompound__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM247) RogueCmdCreateCompound__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM248) RogueCmdCreateCompound__trace_used_code,
  (void*) (ROGUEM249) Rogue_CmdCreateCompound__type,
  (void*) (ROGUEM250) RogueCmdCreateCompound__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM251) RogueCmdCreateCompound__init_object,
  NULL, // CmdLiteralLogical
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM252) RogueCmdLiteralLogical__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM253) RogueCmdLiteralLogical__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM193) Rogue_CmdLiteral__implicit_type,
  (void*) (ROGUEM194) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM254) RogueCmdLiteralLogical__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM196) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM255) Rogue_CmdLiteralLogical__type,
  (void*) (ROGUEM256) RogueCmdLiteralLogical__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM257) RogueCmdLiteralLogical__init_object,
  NULL, // CmdLiteralString
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM258) RogueCmdLiteralString__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM259) RogueCmdLiteralString__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM193) Rogue_CmdLiteral__implicit_type,
  (void*) (ROGUEM194) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM260) RogueCmdLiteralString__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM261) RogueCmdLiteralString__trace_used_code,
  (void*) (ROGUEM262) Rogue_CmdLiteralString__type,
  (void*) (ROGUEM263) RogueCmdLiteralString__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM264) RogueCmdLiteralString__init_object,
  NULL, // CmdWriteSetting
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM265) RogueCmdWriteSetting__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM266) RogueCmdWriteSetting__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM267) RogueCmdWriteSetting__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM268) RogueCmdWriteSetting__trace_used_code,
  (void*) (ROGUEM269) Rogue_CmdWriteSetting__type,
  (void*) (ROGUEM270) RogueCmdWriteSetting__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM271) RogueCmdWriteSetting__init_object,
  NULL, // CmdWriteProperty
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM272) RogueCmdWriteProperty__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM273) RogueCmdWriteProperty__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM274) RogueCmdWriteProperty__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM275) RogueCmdWriteProperty__trace_used_code,
  (void*) (ROGUEM276) Rogue_CmdWriteProperty__type,
  (void*) (ROGUEM277) RogueCmdWriteProperty__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM278) RogueCmdWriteProperty__init_object,
  NULL, // TableEntry<<String,Type>>[]
  (void*) (ROGUEM279) RogueString_TypeTableEntryList__to_String,
  (void*) (ROGUEM279) RogueString_TypeTableEntryList__type_name,
  (void*) (ROGUEM280) RogueString_TypeTableEntryList__init_object,
  NULL, // TableEntry<<String,Type>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM281) RogueString_TypeTableEntry__type_name,
  NULL, // TableEntry<<String,Integer>>[]
  (void*) (ROGUEM282) RogueString_IntegerTableEntryList__to_String,
  (void*) (ROGUEM282) RogueString_IntegerTableEntryList__type_name,
  (void*) (ROGUEM283) RogueString_IntegerTableEntryList__init_object,
  NULL, // TableEntry<<String,Integer>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM284) RogueString_IntegerTableEntry__type_name,
  NULL, // CmdCastToType
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM285) RogueCmdCastToType__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM286) RogueCmdCastToType__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM287) RogueCmdCastToType__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM288) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM289) Rogue_CmdTypeOperator__type,
  (void*) (ROGUEM290) RogueCmdCastToType__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM291) RogueCmdCastToType__init_object,
  NULL, // CmdTypeOperator
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM292) RogueCmdTypeOperator__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM42) RogueCmd__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM288) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM289) Rogue_CmdTypeOperator__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM293) RogueCmdTypeOperator__init_object,
  NULL, // CmdLogicalize
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM294) RogueCmdLogicalize__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM295) RogueCmdLogicalize__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM296) RogueCmdLogicalize__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM297) RogueCmdUnary__trace_used_code,
  (void*) (ROGUEM298) Rogue_CmdLogicalize__type,
  (void*) (ROGUEM299) RogueCmdUnary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM300) RogueCmdLogicalize__init_object,
  NULL,
  (void*) (ROGUEM294) RogueCmdLogicalize__prefix_symbol,
  (void*) (ROGUEM296) RogueCmdLogicalize__resolve_for_literal_operand__Scope,
  NULL,
  (void*) (ROGUEM294) RogueCmdLogicalize__suffix_symbol,
  (void*) (ROGUEM294) RogueCmdLogicalize__cpp_prefix_symbol,
  (void*) (ROGUEM294) RogueCmdLogicalize__cpp_suffix_symbol,
  NULL, // CmdUnary
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM301) RogueCmdUnary__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM302) RogueCmdUnary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM297) RogueCmdUnary__trace_used_code,
  (void*) (ROGUEM303) Rogue_CmdUnary__type,
  (void*) (ROGUEM299) RogueCmdUnary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM304) RogueCmdUnary__init_object,
  NULL,
  (void*) (ROGUEM301) RogueCmdUnary__prefix_symbol,
  (void*) (ROGUEM302) RogueCmdUnary__resolve_for_literal_operand__Scope,
  NULL,
  (void*) (ROGUEM301) RogueCmdUnary__suffix_symbol,
  (void*) (ROGUEM301) RogueCmdUnary__cpp_prefix_symbol,
  (void*) (ROGUEM301) RogueCmdUnary__cpp_suffix_symbol,
  NULL, // CmdCreateOptionalValue
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM305) RogueCmdCreateOptionalValue__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM306) RogueCmdCreateOptionalValue__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM307) RogueCmdCreateOptionalValue__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM308) RogueCmdCreateOptionalValue__trace_used_code,
  (void*) (ROGUEM309) Rogue_CmdCreateOptionalValue__type,
  (void*) (ROGUEM310) RogueCmdCreateOptionalValue__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM311) RogueCmdCreateOptionalValue__init_object,
  NULL, // TableEntry<<String,Method>>[]
  (void*) (ROGUEM312) RogueString_MethodTableEntryList__to_String,
  (void*) (ROGUEM312) RogueString_MethodTableEntryList__type_name,
  (void*) (ROGUEM313) RogueString_MethodTableEntryList__init_object,
  NULL, // TableEntry<<String,Method>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM314) RogueString_MethodTableEntry__type_name,
  NULL, // TableEntry<<String,Logical>>[]
  (void*) (ROGUEM315) RogueString_LogicalTableEntryList__to_String,
  (void*) (ROGUEM315) RogueString_LogicalTableEntryList__type_name,
  (void*) (ROGUEM316) RogueString_LogicalTableEntryList__init_object,
  NULL, // TableEntry<<String,Logical>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM317) RogueString_LogicalTableEntry__type_name,
  NULL, // FileReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM318) RogueFileReader__type_name,
  (void*) (ROGUEM319) RogueFileReader__has_another,
  (void*) (ROGUEM320) RogueFileReader__peek,
  (void*) (ROGUEM320) RogueFileReader__read,
  NULL, // FileWriter
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM321) RogueFileWriter__type_name,
  NULL, // TokenReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM322) RogueTokenReader__type_name,
  NULL, // Tokenizer
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM323) RogueTokenizer__type_name,
  NULL, // ParseReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM324) RogueParseReader__type_name,
  (void*) (ROGUEM325) RogueParseReader__has_another,
  (void*) (ROGUEM326) RogueParseReader__peek,
  (void*) (ROGUEM326) RogueParseReader__read,
  NULL, // Preprocessor
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM327) RoguePreprocessor__type_name,
  NULL, // CmdAdd
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM328) RogueCmdAdd__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM329) RogueCmdAdd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM330) RogueCmdAdd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM205) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM219) Rogue_CmdBinary__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM331) RogueCmdAdd__init_object,
  NULL,
  (void*) (ROGUEM328) RogueCmdAdd__fn_name,
  (void*) (ROGUEM221) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM332) RogueCmdAdd__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM328) RogueCmdAdd__symbol,
  (void*) (ROGUEM210) RogueCmdBinary__cpp_symbol,
  NULL, // CmdIf
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM333) RogueCmdIf__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM334) RogueCmdIf__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM169) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM335) RogueCmdIf__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM336) RogueCmdIf__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM337) RogueCmdIf__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM338) RogueCmdIf__init_object,
  (void*) (ROGUEM171) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  NULL, // CmdWhich
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM339) RogueCmdWhich__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM340) RogueCmdWhich__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM169) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM341) RogueCmdWhich__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM62) RogueCmdStatement__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM342) RogueCmdWhich__init_object,
  (void*) (ROGUEM171) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  NULL, // CmdContingent
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM343) RogueCmdContingent__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM344) RogueCmdContingent__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM169) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM345) RogueCmdContingent__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM346) RogueCmdContingent__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM347) RogueCmdContingent__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM348) RogueCmdContingent__init_object,
  (void*) (ROGUEM349) RogueCmdContingent__set_control_logic__CmdControlStructure,
  NULL, // CmdTry
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM350) RogueCmdTry__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM351) RogueCmdTry__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM169) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM352) RogueCmdTry__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM353) RogueCmdTry__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM354) RogueCmdTry__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM355) RogueCmdTry__init_object,
  (void*) (ROGUEM171) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  NULL, // CmdAwait
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM356) RogueCmdAwait__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM357) RogueCmdAwait__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM358) RogueCmdAwait__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM359) RogueCmdAwait__init_object,
  NULL, // CmdYield
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM360) RogueCmdYield__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM361) RogueCmdYield__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM362) RogueCmdYield__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM363) RogueCmdYield__init_object,
  NULL, // CmdThrow
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM364) RogueCmdThrow__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM365) RogueCmdThrow__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM366) RogueCmdThrow__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM367) RogueCmdThrow__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM368) RogueCmdThrow__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM369) RogueCmdThrow__init_object,
  NULL, // CmdTrace
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM370) RogueCmdTrace__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM371) RogueCmdTrace__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM372) RogueCmdTrace__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM373) RogueCmdTrace__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM374) RogueCmdTrace__init_object,
  NULL, // CmdEscape
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM375) RogueCmdEscape__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM376) RogueCmdEscape__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM377) RogueCmdEscape__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM378) RogueCmdEscape__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM379) RogueCmdEscape__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM380) RogueCmdEscape__init_object,
  NULL, // CmdNextIteration
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM381) RogueCmdNextIteration__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM382) RogueCmdNextIteration__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM383) RogueCmdNextIteration__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM384) RogueCmdNextIteration__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM385) RogueCmdNextIteration__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM386) RogueCmdNextIteration__init_object,
  NULL, // CmdNecessary
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM387) RogueCmdNecessary__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM388) RogueCmdNecessary__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM389) RogueCmdNecessary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM390) RogueCmdNecessary__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM391) RogueCmdNecessary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM392) RogueCmdNecessary__init_object,
  NULL, // CmdSufficient
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM393) RogueCmdSufficient__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM394) RogueCmdSufficient__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM395) RogueCmdSufficient__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM396) RogueCmdSufficient__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM397) RogueCmdSufficient__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM398) RogueCmdSufficient__init_object,
  NULL, // CmdAdjust
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM399) RogueCmdAdjust__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM400) RogueCmdAdjust__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM401) RogueCmdAdjust__init_object,
  NULL, // CmdOpWithAssign
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM402) RogueCmdOpWithAssign__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM403) RogueCmdOpWithAssign__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM404) RogueCmdOpWithAssign__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM405) RogueCmdOpWithAssign__init_object,
  NULL, // CmdWhichCase[]
  (void*) (ROGUEM406) RogueCmdWhichCaseList__to_String,
  (void*) (ROGUEM406) RogueCmdWhichCaseList__type_name,
  (void*) (ROGUEM407) RogueCmdWhichCaseList__init_object,
  NULL, // CmdWhichCase
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM408) RogueCmdWhichCase__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM409) RogueCmdWhichCase__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM42) RogueCmd__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM410) RogueCmdWhichCase__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM411) RogueCmdWhichCase__init_object,
  NULL, // CmdCatch[]
  (void*) (ROGUEM412) RogueCmdCatchList__to_String,
  (void*) (ROGUEM412) RogueCmdCatchList__type_name,
  (void*) (ROGUEM413) RogueCmdCatchList__init_object,
  NULL, // CmdCatch
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM414) RogueCmdCatch__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM415) RogueCmdCatch__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM416) RogueCmdCatch__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM417) RogueCmdCatch__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM418) RogueCmdCatch__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM419) RogueCmdCatch__init_object,
  NULL, // CmdLocalDeclaration
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM420) RogueCmdLocalDeclaration__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM421) RogueCmdLocalDeclaration__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM422) RogueCmdLocalDeclaration__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM423) RogueCmdLocalDeclaration__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM424) RogueCmdLocalDeclaration__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM425) RogueCmdLocalDeclaration__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM426) RogueCmdLocalDeclaration__init_object,
  NULL, // CmdAdjustLocal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM427) RogueCmdAdjustLocal__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM428) RogueCmdAdjustLocal__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM429) RogueCmdAdjustLocal__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM430) RogueCmdAdjustLocal__trace_used_code,
  (void*) (ROGUEM431) Rogue_CmdAdjustLocal__type,
  (void*) (ROGUEM432) RogueCmdAdjustLocal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM433) RogueCmdAdjustLocal__init_object,
  NULL, // CmdReadLocal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM434) RogueCmdReadLocal__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM435) RogueCmdReadLocal__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM436) RogueCmdReadLocal__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM437) RogueCmdReadLocal__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM438) RogueCmdReadLocal__trace_used_code,
  (void*) (ROGUEM439) Rogue_CmdReadLocal__type,
  (void*) (ROGUEM440) RogueCmdReadLocal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM441) RogueCmdReadLocal__init_object,
  NULL, // CmdCompareLE
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM442) RogueCmdCompareLE__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM443) RogueCmdCompareLE__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM444) RogueCmdCompareLE__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM205) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM207) Rogue_CmdComparison__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM445) RogueCmdCompareLE__init_object,
  NULL,
  (void*) (ROGUEM210) RogueCmdBinary__fn_name,
  (void*) (ROGUEM211) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM212) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM442) RogueCmdCompareLE__symbol,
  (void*) (ROGUEM210) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM446) RogueCmdCompareLE__resolve_for_reference__Scope_Type_Type_Logical,
  NULL, // CmdRange
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM447) RogueCmdRange__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM42) RogueCmd__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM448) RogueCmdRange__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM449) RogueCmdRange__init_object,
  NULL, // CmdLocalOpWithAssign
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM450) RogueCmdLocalOpWithAssign__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM451) RogueCmdLocalOpWithAssign__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM452) RogueCmdLocalOpWithAssign__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM453) RogueCmdLocalOpWithAssign__trace_used_code,
  (void*) (ROGUEM454) Rogue_CmdLocalOpWithAssign__type,
  (void*) (ROGUEM455) RogueCmdLocalOpWithAssign__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM456) RogueCmdLocalOpWithAssign__init_object,
  NULL, // CmdResolvedOpWithAssign
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM457) RogueCmdResolvedOpWithAssign__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM42) RogueCmd__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM458) RogueCmdResolvedOpWithAssign__init_object,
  NULL, // CmdForEach
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM459) RogueCmdForEach__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM460) RogueCmdForEach__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM169) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM461) RogueCmdForEach__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM462) RogueCmdForEach__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM463) RogueCmdForEach__init_object,
  (void*) (ROGUEM171) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  NULL, // CmdRangeUpTo
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM464) RogueCmdRangeUpTo__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM465) RogueCmdRangeUpTo__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM42) RogueCmd__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM448) RogueCmdRange__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM466) RogueCmdRangeUpTo__init_object,
  NULL, // CmdLogicalXor
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM467) RogueCmdLogicalXor__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM468) RogueCmdLogicalXor__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM469) RogueCmdBinaryLogical__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM470) Rogue_CmdBinaryLogical__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM471) RogueCmdLogicalXor__init_object,
  NULL,
  (void*) (ROGUEM210) RogueCmdBinary__fn_name,
  (void*) (ROGUEM221) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM472) RogueCmdBinaryLogical__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM467) RogueCmdLogicalXor__symbol,
  (void*) (ROGUEM467) RogueCmdLogicalXor__cpp_symbol,
  (void*) (ROGUEM473) RogueCmdLogicalXor__combine_literal_operands__Logical_Logical,
  NULL, // CmdBinaryLogical
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM474) RogueCmdBinaryLogical__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM469) RogueCmdBinaryLogical__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM470) Rogue_CmdBinaryLogical__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM475) RogueCmdBinaryLogical__init_object,
  NULL,
  (void*) (ROGUEM210) RogueCmdBinary__fn_name,
  (void*) (ROGUEM221) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM472) RogueCmdBinaryLogical__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM210) RogueCmdBinary__symbol,
  (void*) (ROGUEM210) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM476) RogueCmdBinaryLogical__combine_literal_operands__Logical_Logical,
  NULL, // CmdLogicalOr
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM477) RogueCmdLogicalOr__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM478) RogueCmdLogicalOr__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM469) RogueCmdBinaryLogical__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM470) Rogue_CmdBinaryLogical__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM479) RogueCmdLogicalOr__init_object,
  NULL,
  (void*) (ROGUEM210) RogueCmdBinary__fn_name,
  (void*) (ROGUEM221) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM472) RogueCmdBinaryLogical__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM477) RogueCmdLogicalOr__symbol,
  (void*) (ROGUEM477) RogueCmdLogicalOr__cpp_symbol,
  (void*) (ROGUEM480) RogueCmdLogicalOr__combine_literal_operands__Logical_Logical,
  NULL, // CmdLogicalAnd
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM481) RogueCmdLogicalAnd__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM482) RogueCmdLogicalAnd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM469) RogueCmdBinaryLogical__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM470) Rogue_CmdBinaryLogical__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM483) RogueCmdLogicalAnd__init_object,
  NULL,
  (void*) (ROGUEM210) RogueCmdBinary__fn_name,
  (void*) (ROGUEM221) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM472) RogueCmdBinaryLogical__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM481) RogueCmdLogicalAnd__symbol,
  (void*) (ROGUEM481) RogueCmdLogicalAnd__cpp_symbol,
  (void*) (ROGUEM484) RogueCmdLogicalAnd__combine_literal_operands__Logical_Logical,
  NULL, // CmdCompareEQ
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM485) RogueCmdCompareEQ__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM486) RogueCmdCompareEQ__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM487) RogueCmdCompareEQ__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM205) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM207) Rogue_CmdComparison__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM488) RogueCmdCompareEQ__init_object,
  NULL,
  (void*) (ROGUEM210) RogueCmdBinary__fn_name,
  (void*) (ROGUEM489) RogueCmdCompareEQ__requires_parens,
  (void*) (ROGUEM212) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM485) RogueCmdCompareEQ__symbol,
  (void*) (ROGUEM210) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM490) RogueCmdCompareEQ__resolve_for_reference__Scope_Type_Type_Logical,
  NULL, // CmdCompareIs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM491) RogueCmdCompareIs__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM492) RogueCmdCompareIs__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM205) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM207) Rogue_CmdComparison__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM493) RogueCmdCompareIs__init_object,
  NULL,
  (void*) (ROGUEM210) RogueCmdBinary__fn_name,
  (void*) (ROGUEM211) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM494) RogueCmdCompareIs__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM491) RogueCmdCompareIs__symbol,
  (void*) (ROGUEM491) RogueCmdCompareIs__cpp_symbol,
  (void*) (ROGUEM218) RogueCmdComparison__resolve_for_reference__Scope_Type_Type_Logical,
  NULL, // CmdCompareIsNot
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM495) RogueCmdCompareIsNot__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM496) RogueCmdCompareIsNot__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM205) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM207) Rogue_CmdComparison__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM497) RogueCmdCompareIsNot__init_object,
  NULL,
  (void*) (ROGUEM210) RogueCmdBinary__fn_name,
  (void*) (ROGUEM211) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM498) RogueCmdCompareIsNot__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM495) RogueCmdCompareIsNot__symbol,
  (void*) (ROGUEM495) RogueCmdCompareIsNot__cpp_symbol,
  (void*) (ROGUEM218) RogueCmdComparison__resolve_for_reference__Scope_Type_Type_Logical,
  NULL, // CmdCompareLT
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM499) RogueCmdCompareLT__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM500) RogueCmdCompareLT__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM501) RogueCmdCompareLT__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM205) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM207) Rogue_CmdComparison__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM502) RogueCmdCompareLT__init_object,
  NULL,
  (void*) (ROGUEM210) RogueCmdBinary__fn_name,
  (void*) (ROGUEM211) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM212) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM499) RogueCmdCompareLT__symbol,
  (void*) (ROGUEM210) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM503) RogueCmdCompareLT__resolve_for_reference__Scope_Type_Type_Logical,
  NULL, // CmdCompareGT
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM504) RogueCmdCompareGT__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM505) RogueCmdCompareGT__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM506) RogueCmdCompareGT__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM205) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM207) Rogue_CmdComparison__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM507) RogueCmdCompareGT__init_object,
  NULL,
  (void*) (ROGUEM210) RogueCmdBinary__fn_name,
  (void*) (ROGUEM211) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM212) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM504) RogueCmdCompareGT__symbol,
  (void*) (ROGUEM210) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM508) RogueCmdCompareGT__resolve_for_reference__Scope_Type_Type_Logical,
  NULL, // CmdCompareGE
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM509) RogueCmdCompareGE__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM510) RogueCmdCompareGE__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM511) RogueCmdCompareGE__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM205) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM207) Rogue_CmdComparison__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM512) RogueCmdCompareGE__init_object,
  NULL,
  (void*) (ROGUEM210) RogueCmdBinary__fn_name,
  (void*) (ROGUEM211) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM212) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM509) RogueCmdCompareGE__symbol,
  (void*) (ROGUEM210) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM513) RogueCmdCompareGE__resolve_for_reference__Scope_Type_Type_Logical,
  NULL, // CmdInstanceOf
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM514) RogueCmdInstanceOf__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM515) RogueCmdInstanceOf__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM516) RogueCmdInstanceOf__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM288) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM517) Rogue_CmdInstanceOf__type,
  (void*) (ROGUEM518) RogueCmdInstanceOf__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM519) RogueCmdInstanceOf__init_object,
  NULL, // CmdLogicalNot
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM520) RogueCmdLogicalNot__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM521) RogueCmdLogicalNot__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM522) RogueCmdLogicalNot__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM297) RogueCmdUnary__trace_used_code,
  (void*) (ROGUEM523) Rogue_CmdLogicalNot__type,
  (void*) (ROGUEM299) RogueCmdUnary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM524) RogueCmdLogicalNot__init_object,
  NULL,
  (void*) (ROGUEM520) RogueCmdLogicalNot__prefix_symbol,
  (void*) (ROGUEM522) RogueCmdLogicalNot__resolve_for_literal_operand__Scope,
  NULL,
  (void*) (ROGUEM301) RogueCmdUnary__suffix_symbol,
  (void*) (ROGUEM520) RogueCmdLogicalNot__cpp_prefix_symbol,
  (void*) (ROGUEM301) RogueCmdUnary__cpp_suffix_symbol,
  NULL, // CmdBitwiseXor
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM525) RogueCmdBitwiseXor__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM526) RogueCmdBitwiseXor__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM527) RogueCmdBitwiseXor__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM205) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM219) Rogue_CmdBinary__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM528) RogueCmdBitwiseXor__init_object,
  NULL,
  (void*) (ROGUEM210) RogueCmdBinary__fn_name,
  (void*) (ROGUEM221) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM529) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM530) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM525) RogueCmdBitwiseXor__symbol,
  (void*) (ROGUEM525) RogueCmdBitwiseXor__cpp_symbol,
  NULL, // CmdBitwiseOp
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM531) RogueCmdBitwiseOp__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM205) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM219) Rogue_CmdBinary__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM532) RogueCmdBitwiseOp__init_object,
  NULL,
  (void*) (ROGUEM210) RogueCmdBinary__fn_name,
  (void*) (ROGUEM221) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM529) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM530) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM210) RogueCmdBinary__symbol,
  (void*) (ROGUEM210) RogueCmdBinary__cpp_symbol,
  NULL, // CmdBitwiseOr
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM533) RogueCmdBitwiseOr__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM534) RogueCmdBitwiseOr__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM535) RogueCmdBitwiseOr__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM205) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM219) Rogue_CmdBinary__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM536) RogueCmdBitwiseOr__init_object,
  NULL,
  (void*) (ROGUEM210) RogueCmdBinary__fn_name,
  (void*) (ROGUEM221) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM529) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM530) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM533) RogueCmdBitwiseOr__symbol,
  (void*) (ROGUEM210) RogueCmdBinary__cpp_symbol,
  NULL, // CmdBitwiseAnd
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM537) RogueCmdBitwiseAnd__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM538) RogueCmdBitwiseAnd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM539) RogueCmdBitwiseAnd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM205) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM219) Rogue_CmdBinary__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM540) RogueCmdBitwiseAnd__init_object,
  NULL,
  (void*) (ROGUEM210) RogueCmdBinary__fn_name,
  (void*) (ROGUEM221) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM529) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM530) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM537) RogueCmdBitwiseAnd__symbol,
  (void*) (ROGUEM210) RogueCmdBinary__cpp_symbol,
  NULL, // CmdBitwiseShiftLeft
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM541) RogueCmdBitwiseShiftLeft__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM542) RogueCmdBitwiseShiftLeft__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM543) RogueCmdBitwiseShiftLeft__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM205) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM219) Rogue_CmdBinary__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM544) RogueCmdBitwiseShiftLeft__init_object,
  NULL,
  (void*) (ROGUEM210) RogueCmdBinary__fn_name,
  (void*) (ROGUEM221) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM529) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM530) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM541) RogueCmdBitwiseShiftLeft__symbol,
  (void*) (ROGUEM541) RogueCmdBitwiseShiftLeft__cpp_symbol,
  NULL, // CmdBitwiseShiftRight
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM545) RogueCmdBitwiseShiftRight__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM546) RogueCmdBitwiseShiftRight__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM547) RogueCmdBitwiseShiftRight__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM548) RogueCmdBitwiseShiftRight__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM219) Rogue_CmdBinary__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM549) RogueCmdBitwiseShiftRight__init_object,
  NULL,
  (void*) (ROGUEM210) RogueCmdBinary__fn_name,
  (void*) (ROGUEM221) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM529) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM530) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM545) RogueCmdBitwiseShiftRight__symbol,
  (void*) (ROGUEM210) RogueCmdBinary__cpp_symbol,
  NULL, // CmdBitwiseShiftRightX
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM550) RogueCmdBitwiseShiftRightX__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM551) RogueCmdBitwiseShiftRightX__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM552) RogueCmdBitwiseShiftRightX__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM205) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM219) Rogue_CmdBinary__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM553) RogueCmdBitwiseShiftRightX__init_object,
  NULL,
  (void*) (ROGUEM210) RogueCmdBinary__fn_name,
  (void*) (ROGUEM221) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM529) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM530) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM550) RogueCmdBitwiseShiftRightX__symbol,
  (void*) (ROGUEM550) RogueCmdBitwiseShiftRightX__cpp_symbol,
  NULL, // CmdSubtract
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM554) RogueCmdSubtract__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM555) RogueCmdSubtract__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM556) RogueCmdSubtract__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM205) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM219) Rogue_CmdBinary__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM557) RogueCmdSubtract__init_object,
  NULL,
  (void*) (ROGUEM554) RogueCmdSubtract__fn_name,
  (void*) (ROGUEM221) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM554) RogueCmdSubtract__symbol,
  (void*) (ROGUEM210) RogueCmdBinary__cpp_symbol,
  NULL, // CmdMultiply
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM558) RogueCmdMultiply__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM559) RogueCmdMultiply__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM560) RogueCmdMultiply__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM205) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM219) Rogue_CmdBinary__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM561) RogueCmdMultiply__init_object,
  NULL,
  (void*) (ROGUEM558) RogueCmdMultiply__fn_name,
  (void*) (ROGUEM221) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM558) RogueCmdMultiply__symbol,
  (void*) (ROGUEM210) RogueCmdBinary__cpp_symbol,
  NULL, // CmdDivide
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM562) RogueCmdDivide__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM563) RogueCmdDivide__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM564) RogueCmdDivide__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM205) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM219) Rogue_CmdBinary__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM565) RogueCmdDivide__init_object,
  NULL,
  (void*) (ROGUEM562) RogueCmdDivide__fn_name,
  (void*) (ROGUEM221) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM562) RogueCmdDivide__symbol,
  (void*) (ROGUEM210) RogueCmdBinary__cpp_symbol,
  NULL, // CmdMod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM566) RogueCmdMod__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM567) RogueCmdMod__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM568) RogueCmdMod__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM569) RogueCmdMod__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM219) Rogue_CmdBinary__type,
  (void*) (ROGUEM208) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM570) RogueCmdMod__init_object,
  NULL,
  (void*) (ROGUEM566) RogueCmdMod__fn_name,
  (void*) (ROGUEM221) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM566) RogueCmdMod__symbol,
  (void*) (ROGUEM210) RogueCmdBinary__cpp_symbol,
  NULL, // CmdPower
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM571) RogueCmdPower__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM572) RogueCmdPower__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM573) RogueCmdPower__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM205) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM206) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM219) Rogue_CmdBinary__type,
  (void*) (ROGUEM574) RogueCmdPower__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM575) RogueCmdPower__init_object,
  NULL,
  (void*) (ROGUEM571) RogueCmdPower__fn_name,
  (void*) (ROGUEM221) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM214) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM571) RogueCmdPower__symbol,
  (void*) (ROGUEM210) RogueCmdBinary__cpp_symbol,
  NULL, // CmdNegate
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM576) RogueCmdNegate__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM577) RogueCmdNegate__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM578) Rogue_CmdNegate__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM302) RogueCmdUnary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM297) RogueCmdUnary__trace_used_code,
  (void*) (ROGUEM303) Rogue_CmdUnary__type,
  (void*) (ROGUEM299) RogueCmdUnary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM579) RogueCmdNegate__init_object,
  NULL,
  (void*) (ROGUEM576) RogueCmdNegate__prefix_symbol,
  (void*) (ROGUEM580) RogueCmdNegate__resolve_for_literal_operand__Scope,
  NULL,
  (void*) (ROGUEM576) RogueCmdNegate__suffix_symbol,
  (void*) (ROGUEM301) RogueCmdUnary__cpp_prefix_symbol,
  (void*) (ROGUEM301) RogueCmdUnary__cpp_suffix_symbol,
  NULL, // CmdBitwiseNot
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM581) RogueCmdBitwiseNot__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM582) RogueCmdBitwiseNot__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM302) RogueCmdUnary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM297) RogueCmdUnary__trace_used_code,
  (void*) (ROGUEM583) Rogue_CmdBitwiseNot__type,
  (void*) (ROGUEM299) RogueCmdUnary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM584) RogueCmdBitwiseNot__init_object,
  NULL,
  (void*) (ROGUEM581) RogueCmdBitwiseNot__prefix_symbol,
  (void*) (ROGUEM585) RogueCmdBitwiseNot__resolve_for_literal_operand__Scope,
  NULL,
  (void*) (ROGUEM301) RogueCmdUnary__suffix_symbol,
  (void*) (ROGUEM581) RogueCmdBitwiseNot__cpp_prefix_symbol,
  (void*) (ROGUEM301) RogueCmdUnary__cpp_suffix_symbol,
  NULL, // CmdGetOptionalValue
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM586) RogueCmdGetOptionalValue__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM587) RogueCmdGetOptionalValue__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM588) RogueCmdGetOptionalValue__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM589) RogueCmdGetOptionalValue__trace_used_code,
  (void*) (ROGUEM590) Rogue_CmdGetOptionalValue__type,
  (void*) (ROGUEM591) RogueCmdGetOptionalValue__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM592) RogueCmdGetOptionalValue__init_object,
  NULL, // CmdElementAccess
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM593) RogueCmdElementAccess__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM594) RogueCmdElementAccess__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM595) RogueCmdElementAccess__resolve__Scope,
  (void*) (ROGUEM596) RogueCmdElementAccess__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM597) RogueCmdElementAccess__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM598) RogueCmdElementAccess__init_object,
  NULL, // CmdConvertToType
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM599) RogueCmdConvertToType__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM600) RogueCmdConvertToType__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM601) RogueCmdConvertToType__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM288) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM289) Rogue_CmdTypeOperator__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM602) RogueCmdConvertToType__init_object,
  NULL, // CmdCreateCallback
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM603) RogueCmdCreateCallback__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM604) RogueCmdCreateCallback__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM605) RogueCmdCreateCallback__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM606) RogueCmdCreateCallback__init_object,
  NULL, // CmdAs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM607) RogueCmdAs__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM608) RogueCmdAs__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM609) RogueCmdAs__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM288) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM289) Rogue_CmdTypeOperator__type,
  (void*) (ROGUEM610) RogueCmdAs__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM611) RogueCmdAs__init_object,
  NULL, // CmdDefaultValue
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM612) RogueCmdDefaultValue__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM613) RogueCmdDefaultValue__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM193) Rogue_CmdLiteral__implicit_type,
  (void*) (ROGUEM194) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM614) RogueCmdDefaultValue__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM196) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM615) Rogue_CmdDefaultValue__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM616) RogueCmdDefaultValue__init_object,
  NULL, // CmdFormattedString
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM617) RogueCmdFormattedString__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM618) RogueCmdFormattedString__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM619) Rogue_CmdFormattedString__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM620) RogueCmdFormattedString__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM619) Rogue_CmdFormattedString__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM621) RogueCmdFormattedString__init_object,
  NULL, // CmdLiteralReal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM622) RogueCmdLiteralReal__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM623) RogueCmdLiteralReal__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM193) Rogue_CmdLiteral__implicit_type,
  (void*) (ROGUEM194) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM624) RogueCmdLiteralReal__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM196) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM625) Rogue_CmdLiteralReal__type,
  (void*) (ROGUEM626) RogueCmdLiteralReal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM627) RogueCmdLiteralReal__init_object,
  NULL, // CmdLiteralLong
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM628) RogueCmdLiteralLong__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM629) RogueCmdLiteralLong__cast_to__Type,
  (void*) (ROGUEM630) RogueCmdLiteralLong__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM193) Rogue_CmdLiteral__implicit_type,
  (void*) (ROGUEM194) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM631) RogueCmdLiteralLong__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM196) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM632) Rogue_CmdLiteralLong__type,
  (void*) (ROGUEM633) RogueCmdLiteralLong__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM634) RogueCmdLiteralLong__init_object,
  NULL, // CmdLiteralCharacter
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM635) RogueCmdLiteralCharacter__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM636) RogueCmdLiteralCharacter__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM193) Rogue_CmdLiteral__implicit_type,
  (void*) (ROGUEM194) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM637) RogueCmdLiteralCharacter__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM196) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM638) Rogue_CmdLiteralCharacter__type,
  (void*) (ROGUEM639) RogueCmdLiteralCharacter__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM640) RogueCmdLiteralCharacter__init_object,
  NULL, // CmdCreateList
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM641) RogueCmdCreateList__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM642) RogueCmdCreateList__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM643) RogueCmdCreateList__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM644) RogueCmdCreateList__init_object,
  NULL, // CmdCallPriorMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM645) RogueCmdCallPriorMethod__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM646) RogueCmdCallPriorMethod__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM647) RogueCmdCallPriorMethod__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM648) RogueCmdCallPriorMethod__init_object,
  NULL, // FnParam[]
  (void*) (ROGUEM649) RogueFnParamList__to_String,
  (void*) (ROGUEM649) RogueFnParamList__type_name,
  (void*) (ROGUEM650) RogueFnParamList__init_object,
  NULL, // FnParam
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM651) RogueFnParam__type_name,
  NULL, // FnArg[]
  (void*) (ROGUEM652) RogueFnArgList__to_String,
  (void*) (ROGUEM652) RogueFnArgList__type_name,
  (void*) (ROGUEM653) RogueFnArgList__init_object,
  NULL, // FnArg
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM654) RogueFnArg__type_name,
  NULL, // CmdCreateFunction
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM655) RogueCmdCreateFunction__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM656) RogueCmdCreateFunction__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM657) RogueCmdCreateFunction__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM658) RogueCmdCreateFunction__init_object,
  NULL, // CmdNativeCode
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM659) RogueCmdNativeCode__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM660) RogueCmdNativeCode__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM661) RogueCmdNativeCode__requires_semicolon,
  (void*) (ROGUEM662) RogueCmdNativeCode__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM663) RogueCmdNativeCode__trace_used_code,
  (void*) (ROGUEM664) Rogue_CmdNativeCode__type,
  (void*) (ROGUEM665) RogueCmdNativeCode__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM666) RogueCmdNativeCode__init_object,
  NULL, // TableEntry<<String,TokenType>>[]
  (void*) (ROGUEM667) RogueString_TokenTypeTableEntryList__to_String,
  (void*) (ROGUEM667) RogueString_TokenTypeTableEntryList__type_name,
  (void*) (ROGUEM668) RogueString_TokenTypeTableEntryList__init_object,
  NULL, // TableEntry<<String,TokenType>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM669) RogueString_TokenTypeTableEntry__type_name,
  NULL, // TableEntry<<String,TypeSpecializer>>[]
  (void*) (ROGUEM670) RogueString_TypeSpecializerTableEntryList__to_String,
  (void*) (ROGUEM670) RogueString_TypeSpecializerTableEntryList__type_name,
  (void*) (ROGUEM671) RogueString_TypeSpecializerTableEntryList__init_object,
  NULL, // TableEntry<<String,TypeSpecializer>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM672) RogueString_TypeSpecializerTableEntry__type_name,
  NULL, // TableEntry<<String,CmdLabel>>[]
  (void*) (ROGUEM673) RogueString_CmdLabelTableEntryList__to_String,
  (void*) (ROGUEM673) RogueString_CmdLabelTableEntryList__type_name,
  (void*) (ROGUEM674) RogueString_CmdLabelTableEntryList__init_object,
  NULL, // TableEntry<<String,CmdLabel>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM675) RogueString_CmdLabelTableEntry__type_name,
  NULL, // MacroArgs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM676) RogueMacroArgs__type_name,
  (void*) (ROGUEM144) RogueCloneArgs__register_label__CmdLabel,
  (void*) (ROGUEM677) RogueMacroArgs__init_object,
  NULL, // CmdReadSingleton
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM678) RogueCmdReadSingleton__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM679) RogueCmdReadSingleton__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM680) RogueCmdReadSingleton__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM681) RogueCmdReadSingleton__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM680) RogueCmdReadSingleton__trace_used_code,
  (void*) (ROGUEM682) Rogue_CmdReadSingleton__type,
  (void*) (ROGUEM683) RogueCmdReadSingleton__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM684) RogueCmdReadSingleton__init_object,
  NULL, // CmdCreateArray
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM685) RogueCmdCreateArray__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM686) RogueCmdCreateArray__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM687) RogueCmdCreateArray__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM688) RogueCmdCreateArray__trace_used_code,
  (void*) (ROGUEM689) Rogue_CmdCreateArray__type,
  (void*) (ROGUEM690) RogueCmdCreateArray__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM691) RogueCmdCreateArray__init_object,
  NULL, // CmdCallRoutine
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM692) RogueCmdCallRoutine__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM693) RogueCmdCallRoutine__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM694) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM695) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM696) Rogue_CmdCall__type,
  (void*) (ROGUEM697) RogueCmdCallRoutine__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM698) RogueCmdCallRoutine__init_object,
  NULL, // CmdCall
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM699) RogueCmdCall__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM694) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM695) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM696) Rogue_CmdCall__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM700) RogueCmdCall__init_object,
  NULL, // CmdCreateObject
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM701) RogueCmdCreateObject__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM702) RogueCmdCreateObject__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM703) RogueCmdCreateObject__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM704) RogueCmdCreateObject__trace_used_code,
  (void*) (ROGUEM705) Rogue_CmdCreateObject__type,
  (void*) (ROGUEM706) RogueCmdCreateObject__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM707) RogueCmdCreateObject__init_object,
  NULL, // CmdReadSetting
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM708) RogueCmdReadSetting__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM709) RogueCmdReadSetting__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM710) RogueCmdReadSetting__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM711) RogueCmdReadSetting__trace_used_code,
  (void*) (ROGUEM712) Rogue_CmdReadSetting__type,
  (void*) (ROGUEM713) RogueCmdReadSetting__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM714) RogueCmdReadSetting__init_object,
  NULL, // CmdReadProperty
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM715) RogueCmdReadProperty__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM716) RogueCmdReadProperty__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM717) RogueCmdReadProperty__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM718) RogueCmdReadProperty__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM719) RogueCmdReadProperty__trace_used_code,
  (void*) (ROGUEM720) Rogue_CmdReadProperty__type,
  (void*) (ROGUEM721) RogueCmdReadProperty__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM722) RogueCmdReadProperty__init_object,
  NULL, // CmdLogicalizeOptionalValue
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM723) RogueCmdLogicalizeOptionalValue__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM724) RogueCmdLogicalizeOptionalValue__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM725) RogueCmdLogicalizeOptionalValue__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM726) RogueCmdLogicalizeOptionalValue__trace_used_code,
  (void*) (ROGUEM727) Rogue_CmdLogicalizeOptionalValue__type,
  (void*) (ROGUEM728) RogueCmdLogicalizeOptionalValue__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM729) RogueCmdLogicalizeOptionalValue__init_object,
  NULL, // CmdWriteLocal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM730) RogueCmdWriteLocal__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM731) RogueCmdWriteLocal__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM732) RogueCmdWriteLocal__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM733) RogueCmdWriteLocal__trace_used_code,
  (void*) (ROGUEM734) Rogue_CmdWriteLocal__type,
  (void*) (ROGUEM735) RogueCmdWriteLocal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM736) RogueCmdWriteLocal__init_object,
  NULL, // CmdOpAssignSetting
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM737) RogueCmdOpAssignSetting__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM738) RogueCmdOpAssignSetting__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM739) RogueCmdOpAssignSetting__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM740) RogueCmdOpAssignSetting__trace_used_code,
  (void*) (ROGUEM741) Rogue_CmdOpAssignSetting__type,
  (void*) (ROGUEM742) RogueCmdOpAssignSetting__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM743) RogueCmdOpAssignSetting__init_object,
  NULL, // CmdOpAssignProperty
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM744) RogueCmdOpAssignProperty__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM745) RogueCmdOpAssignProperty__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM746) RogueCmdOpAssignProperty__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM747) RogueCmdOpAssignProperty__trace_used_code,
  (void*) (ROGUEM748) Rogue_CmdOpAssignProperty__type,
  (void*) (ROGUEM749) RogueCmdOpAssignProperty__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM750) RogueCmdOpAssignProperty__init_object,
  NULL, // CmdCallInlineNativeRoutine
  (void*) (ROGUEM751) RogueCmdCallInlineNative__to_String,
  (void*) (ROGUEM752) RogueCmdCallInlineNativeRoutine__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM753) RogueCmdCallInlineNativeRoutine__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM694) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM695) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM754) Rogue_CmdCallInlineNativeRoutine__type,
  (void*) (ROGUEM755) RogueCmdCallInlineNative__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM756) RogueCmdCallInlineNativeRoutine__init_object,
  NULL,
  (void*) (ROGUEM757) RogueCmdCallInlineNative__print_this__CPPWriter,
  NULL, // CmdCallInlineNative
  (void*) (ROGUEM751) RogueCmdCallInlineNative__to_String,
  (void*) (ROGUEM751) RogueCmdCallInlineNative__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM694) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM695) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM696) Rogue_CmdCall__type,
  (void*) (ROGUEM755) RogueCmdCallInlineNative__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM758) RogueCmdCallInlineNative__init_object,
  NULL,
  (void*) (ROGUEM757) RogueCmdCallInlineNative__print_this__CPPWriter,
  NULL, // CmdCallNativeRoutine
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM759) RogueCmdCallNativeRoutine__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM760) RogueCmdCallNativeRoutine__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM694) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM695) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM696) Rogue_CmdCall__type,
  (void*) (ROGUEM761) RogueCmdCallNativeRoutine__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM762) RogueCmdCallNativeRoutine__init_object,
  NULL, // CmdReadArrayCount
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM763) RogueCmdReadArrayCount__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM764) RogueCmdReadArrayCount__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM765) RogueCmdReadArrayCount__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM766) RogueCmdReadArrayCount__trace_used_code,
  (void*) (ROGUEM767) Rogue_CmdReadArrayCount__type,
  (void*) (ROGUEM768) RogueCmdReadArrayCount__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM769) RogueCmdReadArrayCount__init_object,
  NULL, // CmdCallInlineNativeMethod
  (void*) (ROGUEM751) RogueCmdCallInlineNative__to_String,
  (void*) (ROGUEM770) RogueCmdCallInlineNativeMethod__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM771) RogueCmdCallInlineNativeMethod__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM694) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM695) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM772) Rogue_CmdCallInlineNativeMethod__type,
  (void*) (ROGUEM755) RogueCmdCallInlineNative__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM773) RogueCmdCallInlineNativeMethod__init_object,
  NULL,
  (void*) (ROGUEM774) RogueCmdCallInlineNativeMethod__print_this__CPPWriter,
  NULL, // CmdCallNativeMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM775) RogueCmdCallNativeMethod__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM776) RogueCmdCallNativeMethod__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM694) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM695) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM696) Rogue_CmdCall__type,
  (void*) (ROGUEM777) RogueCmdCallNativeMethod__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM778) RogueCmdCallNativeMethod__init_object,
  NULL, // CmdCallAspectMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM779) RogueCmdCallAspectMethod__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM780) RogueCmdCallAspectMethod__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM694) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM695) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM696) Rogue_CmdCall__type,
  (void*) (ROGUEM781) RogueCmdCallAspectMethod__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM782) RogueCmdCallAspectMethod__init_object,
  NULL, // CmdCallDynamicMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM783) RogueCmdCallDynamicMethod__type_name,
  (void*) (ROGUEM784) RogueCmdCallMethod__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM785) RogueCmdCallDynamicMethod__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM694) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM786) RogueCmdCallDynamicMethod__trace_used_code,
  (void*) (ROGUEM696) Rogue_CmdCall__type,
  (void*) (ROGUEM787) RogueCmdCallDynamicMethod__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM788) RogueCmdCallDynamicMethod__init_object,
  NULL, // CmdCallMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM789) RogueCmdCallMethod__type_name,
  (void*) (ROGUEM784) RogueCmdCallMethod__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM694) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM695) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM696) Rogue_CmdCall__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM790) RogueCmdCallMethod__init_object,
  NULL, // CandidateMethods
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM791) RogueCandidateMethods__type_name,
  NULL, // CmdTaskControlSection[]
  (void*) (ROGUEM792) RogueCmdTaskControlSectionList__to_String,
  (void*) (ROGUEM792) RogueCmdTaskControlSectionList__type_name,
  (void*) (ROGUEM793) RogueCmdTaskControlSectionList__init_object,
  NULL, // CmdBlock
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM794) RogueCmdBlock__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM795) RogueCmdBlock__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM796) RogueCmdBlock__requires_semicolon,
  (void*) (ROGUEM797) RogueCmdBlock__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM798) RogueCmdBlock__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM799) RogueCmdBlock__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM800) RogueCmdBlock__init_object,
  (void*) (ROGUEM171) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  NULL, // TableEntry<<String,Cmd>>[]
  (void*) (ROGUEM801) RogueString_CmdTableEntryList__to_String,
  (void*) (ROGUEM801) RogueString_CmdTableEntryList__type_name,
  (void*) (ROGUEM802) RogueString_CmdTableEntryList__init_object,
  NULL, // TableEntry<<String,Cmd>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM803) RogueString_CmdTableEntry__type_name,
  NULL, // TableEntry<<String,Property>>[]
  (void*) (ROGUEM804) RogueString_PropertyTableEntryList__to_String,
  (void*) (ROGUEM804) RogueString_PropertyTableEntryList__type_name,
  (void*) (ROGUEM805) RogueString_PropertyTableEntryList__init_object,
  NULL, // TableEntry<<String,Property>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM806) RogueString_PropertyTableEntry__type_name,
  NULL, // DirectiveTokenType
  (void*) (ROGUEM70) RogueTokenType__to_String,
  (void*) (ROGUEM807) RogueDirectiveTokenType__type_name,
  NULL,
  (void*) (ROGUEM808) RogueDirectiveTokenType__create_token__String_Integer_Integer,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM72) RogueTokenType__create_token__String_Integer_Integer_String,
  NULL,
  (void*) (ROGUEM809) RogueDirectiveTokenType__is_directive,
  (void*) (ROGUEM73) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM73) RogueTokenType__is_structure,
  NULL,
  NULL,
  (void*) (ROGUEM810) RogueDirectiveTokenType__init_object,
  NULL, // StructuralDirectiveTokenType
  (void*) (ROGUEM70) RogueTokenType__to_String,
  (void*) (ROGUEM811) RogueStructuralDirectiveTokenType__type_name,
  NULL,
  (void*) (ROGUEM812) RogueStructuralDirectiveTokenType__create_token__String_Integer_Integer,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM72) RogueTokenType__create_token__String_Integer_Integer_String,
  NULL,
  (void*) (ROGUEM813) RogueStructuralDirectiveTokenType__is_directive,
  (void*) (ROGUEM73) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM813) RogueStructuralDirectiveTokenType__is_structure,
  NULL,
  NULL,
  (void*) (ROGUEM814) RogueStructuralDirectiveTokenType__init_object,
  NULL, // EOLTokenType
  (void*) (ROGUEM70) RogueTokenType__to_String,
  (void*) (ROGUEM815) RogueEOLTokenType__type_name,
  NULL,
  (void*) (ROGUEM816) RogueEOLTokenType__create_token__String_Integer_Integer,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM817) RogueEOLTokenType__create_token__String_Integer_Integer_String,
  NULL,
  (void*) (ROGUEM73) RogueTokenType__is_directive,
  (void*) (ROGUEM73) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM818) RogueEOLTokenType__is_structure,
  NULL,
  NULL,
  (void*) (ROGUEM819) RogueEOLTokenType__init_object,
  NULL, // StructureTokenType
  (void*) (ROGUEM70) RogueTokenType__to_String,
  (void*) (ROGUEM820) RogueStructureTokenType__type_name,
  NULL,
  (void*) (ROGUEM821) RogueStructureTokenType__create_token__String_Integer_Integer,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM72) RogueTokenType__create_token__String_Integer_Integer_String,
  NULL,
  (void*) (ROGUEM73) RogueTokenType__is_directive,
  (void*) (ROGUEM73) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM822) RogueStructureTokenType__is_structure,
  NULL,
  NULL,
  (void*) (ROGUEM823) RogueStructureTokenType__init_object,
  NULL, // OpWithAssignTokenType
  (void*) (ROGUEM70) RogueTokenType__to_String,
  (void*) (ROGUEM824) RogueOpWithAssignTokenType__type_name,
  NULL,
  (void*) (ROGUEM71) RogueTokenType__create_token__String_Integer_Integer,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM72) RogueTokenType__create_token__String_Integer_Integer_String,
  NULL,
  (void*) (ROGUEM73) RogueTokenType__is_directive,
  (void*) (ROGUEM825) RogueOpWithAssignTokenType__is_op_with_assign,
  (void*) (ROGUEM73) RogueTokenType__is_structure,
  NULL,
  NULL,
  (void*) (ROGUEM826) RogueOpWithAssignTokenType__init_object,
  NULL, // EOLToken
  (void*) (ROGUEM827) RogueEOLToken__to_String,
  (void*) (ROGUEM827) RogueEOLToken__type_name,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM34) RogueToken__to_Character,
  (void*) (ROGUEM35) RogueToken__to_Integer,
  (void*) (ROGUEM36) RogueToken__to_Long,
  (void*) (ROGUEM37) RogueToken__to_Real,
  (void*) (ROGUEM38) RogueToken__to_Type,
  (void*) (ROGUEM828) RogueEOLToken__init_object,
  NULL, // Table<<String,Token[]>>
  (void*) (ROGUEM829) RogueString_TokenListTable__to_String,
  (void*) (ROGUEM829) RogueString_TokenListTable__type_name,
  NULL, // PreprocessorTokenReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM830) RoguePreprocessorTokenReader__type_name,
  NULL, // CmdSwitch
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM831) RogueCmdSwitch__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM832) RogueCmdSwitch__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM169) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM833) RogueCmdSwitch__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM834) RogueCmdSwitch__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM835) RogueCmdSwitch__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM836) RogueCmdSwitch__init_object,
  (void*) (ROGUEM171) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  NULL, // CmdReadArrayElement
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM837) RogueCmdReadArrayElement__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM838) RogueCmdReadArrayElement__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM839) RogueCmdReadArrayElement__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM840) RogueCmdReadArrayElement__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM841) RogueCmdReadArrayElement__trace_used_code,
  (void*) (ROGUEM842) Rogue_CmdReadArrayElement__type,
  (void*) (ROGUEM843) RogueCmdReadArrayElement__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM844) RogueCmdReadArrayElement__init_object,
  NULL, // CmdWriteArrayElement
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM845) RogueCmdWriteArrayElement__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM846) RogueCmdWriteArrayElement__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM847) RogueCmdWriteArrayElement__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM848) RogueCmdWriteArrayElement__trace_used_code,
  (void*) (ROGUEM849) Rogue_CmdWriteArrayElement__type,
  (void*) (ROGUEM850) RogueCmdWriteArrayElement__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM851) RogueCmdWriteArrayElement__init_object,
  NULL, // CmdConvertToPrimitiveType
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM852) RogueCmdConvertToPrimitiveType__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM853) RogueCmdConvertToPrimitiveType__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM854) RogueCmdConvertToPrimitiveType__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM288) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM289) Rogue_CmdTypeOperator__type,
  (void*) (ROGUEM855) RogueCmdConvertToPrimitiveType__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM856) RogueCmdConvertToPrimitiveType__init_object,
  NULL, // CmdAdjustProperty
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM857) RogueCmdAdjustProperty__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM858) RogueCmdAdjustProperty__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM859) RogueCmdAdjustProperty__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM860) RogueCmdAdjustProperty__trace_used_code,
  (void*) (ROGUEM861) Rogue_CmdAdjustProperty__type,
  (void*) (ROGUEM862) RogueCmdAdjustProperty__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM863) RogueCmdAdjustProperty__init_object,
  NULL, // CmdCallStaticMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM864) RogueCmdCallStaticMethod__type_name,
  (void*) (ROGUEM784) RogueCmdCallMethod__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM865) RogueCmdCallStaticMethod__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  NULL,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM866) RogueCmdCallStaticMethod__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM695) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM696) Rogue_CmdCall__type,
  (void*) (ROGUEM867) RogueCmdCallStaticMethod__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM868) RogueCmdCallStaticMethod__init_object,
  NULL, // TableEntry<<String,Token[]>>[]
  (void*) (ROGUEM869) RogueString_TokenListTableEntryList__to_String,
  (void*) (ROGUEM869) RogueString_TokenListTableEntryList__type_name,
  (void*) (ROGUEM870) RogueString_TokenListTableEntryList__init_object,
  NULL, // TableEntry<<String,Token[]>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM871) RogueString_TokenListTableEntry__type_name,

};

int Rogue_base_class_count_lookup[291] =
{

};

struct RogueTypeReal : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueReal );
  }

  const char* name() { return "Real"; }

};

struct RogueTypeLong : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueLong );
  }

  const char* name() { return "Long"; }

};

struct RogueTypeInteger : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueInteger );
  }

  const char* name() { return "Integer"; }

};

struct RogueTypeCharacterList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueCharacterList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 0;
  }

  const char* name() { return "Character[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueCharacterList*)THIS)->data );
  }
};

struct RogueTypeCharacter : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueCharacter );
  }

  const char* name() { return "Character"; }

};

struct RogueTypeGenericList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassGenericList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 4;
  }

  const char* name() { return "GenericList"; }

};

struct RogueTypeStringBuilder : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueStringBuilder );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 8;
  }

  RogueObject* init_object( RogueObject* THIS )
  {
    return (RogueObject*) RogueStringBuilder__init_object( (RogueStringBuilder*) THIS );
  }

  const char* name() { return "StringBuilder"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueStringBuilder*)THIS)->characters );
  }
};

struct RogueTypeOptionalInteger : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueOptionalInteger );
    methods = Rogue_dynamic_method_table + 0;
  }

  const char* name() { return "Integer?"; }

};

struct RogueTypeLogical : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueLogical );
  }

  const char* name() { return "Logical"; }

};

struct RogueTypeStringList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueStringList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 11;
  }

  const char* name() { return "String[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueStringList*)THIS)->data );
  }
};

struct RogueTypeByte : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueByte );
  }

  const char* name() { return "Byte"; }

};

struct RogueTypeStringReader : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassStringReader );
    base_type_count = 2;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    base_types[1] = (RogueType*) Rogue_program.type_CharacterReader;
    methods = Rogue_dynamic_method_table + 15;
  }

  const char* name() { return "StringReader"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassStringReader*)THIS)->string );
  }
};

struct RogueTypeCharacterReader : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCharacterReader );
    methods = Rogue_dynamic_method_table + 20;
  }

  const char* name() { return "Reader<<Character>>"; }

};

struct RogueTypeGlobal : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassGlobal );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 21;
  }

  RogueObject* init_object( RogueObject* THIS )
  {
    return (RogueObject*) RogueGlobal__init_object( (RogueClassGlobal*) THIS );
  }

  const char* name() { return "Global"; }

  RogueClassGlobal* singleton()
  {
    if ( !_singleton )
    {
      _singleton = create_object();
      init_object( _singleton );
    }
    return (RogueClassGlobal*) _singleton;
  }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassGlobal*)THIS)->global_output_buffer );
    ROGUE_TRACE( ((RogueClassGlobal*)THIS)->standard_output );
  }
};

struct RogueTypeConsole : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassConsole );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 24;
  }

  const char* name() { return "Console"; }

  RogueClassConsole* singleton()
  {
    if ( !_singleton )
    {
      _singleton = create_object();
      init_object( _singleton );
    }
    return (RogueClassConsole*) _singleton;
  }

};

struct RogueTypeRogueC : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassRogueC );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 27;
  }

  RogueObject* init_object( RogueObject* THIS )
  {
    return (RogueObject*) RogueRogueC__init_object( (RogueClassRogueC*) THIS );
  }

  const char* name() { return "RogueC"; }

  RogueClassRogueC* singleton()
  {
    if ( !_singleton )
    {
      _singleton = create_object();
      init_object( _singleton );
    }
    return (RogueClassRogueC*) _singleton;
  }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassRogueC*)THIS)->included_files );
    ROGUE_TRACE( ((RogueClassRogueC*)THIS)->prefix_path_list );
    ROGUE_TRACE( ((RogueClassRogueC*)THIS)->prefix_path_lookup );
    ROGUE_TRACE( ((RogueClassRogueC*)THIS)->compile_targets );
    ROGUE_TRACE( ((RogueClassRogueC*)THIS)->libraries_folder );
    ROGUE_TRACE( ((RogueClassRogueC*)THIS)->source_files );
    ROGUE_TRACE( ((RogueClassRogueC*)THIS)->first_filepath );
    ROGUE_TRACE( ((RogueClassRogueC*)THIS)->output_filepath );
    ROGUE_TRACE( ((RogueClassRogueC*)THIS)->supported_targets );
    ROGUE_TRACE( ((RogueClassRogueC*)THIS)->target );
    ROGUE_TRACE( ((RogueClassRogueC*)THIS)->execute_args );
  }
};

struct RogueTypeError : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassError );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 30;
  }

  const char* name() { return "Error"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassError*)THIS)->message );
  }
};

struct RogueTypeProgram : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassProgram );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 34;
  }

  RogueObject* init_object( RogueObject* THIS )
  {
    return (RogueObject*) RogueProgram__init_object( (RogueClassProgram*) THIS );
  }

  const char* name() { return "Program"; }

  RogueClassProgram* singleton()
  {
    if ( !_singleton )
    {
      _singleton = create_object();
      init_object( _singleton );
    }
    return (RogueClassProgram*) _singleton;
  }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->code_prefix );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->program_name );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->template_list );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->template_lookup );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->augment_lookup );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->requisite_list );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->first_filepath );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->m_on_launch );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->native_header );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->native_code );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->methods_by_signature );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->type_list );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->type_lookup );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->type_null );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->type_Real );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->type_Float );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->type_Long );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->type_Integer );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->type_Character );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->type_Byte );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->type_Logical );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->type_Object );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->type_String );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->type_NativeArray );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->type_GenericList );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->type_Global );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->type_Error );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->type_StringBuilder );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->literal_string_lookup );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->literal_string_list );
    ROGUE_TRACE( ((RogueClassProgram*)THIS)->string_buffer );
  }
};

struct RogueTypeTemplateList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueTemplateList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 37;
  }

  const char* name() { return "Template[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueTemplateList*)THIS)->data );
  }
};

struct RogueTypeTemplate : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassTemplate );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 41;
  }

  RogueObject* init_object( RogueObject* THIS )
  {
    return (RogueObject*) RogueTemplate__init_object( (RogueClassTemplate*) THIS );
  }

  const char* name() { return "Template"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassTemplate*)THIS)->t );
    ROGUE_TRACE( ((RogueClassTemplate*)THIS)->name );
    ROGUE_TRACE( ((RogueClassTemplate*)THIS)->tokens );
    ROGUE_TRACE( ((RogueClassTemplate*)THIS)->attributes );
    ROGUE_TRACE( ((RogueClassTemplate*)THIS)->type_parameters );
  }
};

struct RogueTypeString_TemplateTable : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_TemplateTable );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 44;
  }

  const char* name() { return "Table<<String,Template>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_TemplateTable*)THIS)->bins );
    ROGUE_TRACE( ((RogueClassString_TemplateTable*)THIS)->keys );
  }
};

struct RogueTypeString_AugmentListTable : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_AugmentListTable );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 47;
  }

  const char* name() { return "Table<<String,Augment[]>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_AugmentListTable*)THIS)->bins );
    ROGUE_TRACE( ((RogueClassString_AugmentListTable*)THIS)->keys );
  }
};

struct RogueTypeRequisiteItemList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueRequisiteItemList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 50;
  }

  const char* name() { return "RequisiteItem[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueRequisiteItemList*)THIS)->data );
  }
};

struct RogueTypeRequisiteItem : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassRequisiteItem );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 54;
  }

  const char* name() { return "RequisiteItem"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassRequisiteItem*)THIS)->t );
    ROGUE_TRACE( ((RogueClassRequisiteItem*)THIS)->_type );
    ROGUE_TRACE( ((RogueClassRequisiteItem*)THIS)->signature );
  }
};

struct RogueTypeMethod : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassMethod );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 57;
  }

  RogueObject* init_object( RogueObject* THIS )
  {
    return (RogueObject*) RogueMethod__init_object( (RogueClassMethod*) THIS );
  }

  const char* name() { return "Method"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassMethod*)THIS)->t );
    ROGUE_TRACE( ((RogueClassMethod*)THIS)->type_context );
    ROGUE_TRACE( ((RogueClassMethod*)THIS)->name );
    ROGUE_TRACE( ((RogueClassMethod*)THIS)->signature );
    ROGUE_TRACE( ((RogueClassMethod*)THIS)->attributes );
    ROGUE_TRACE( ((RogueClassMethod*)THIS)->_return_type );
    ROGUE_TRACE( ((RogueClassMethod*)THIS)->_task_result_type );
    ROGUE_TRACE( ((RogueClassMethod*)THIS)->parameters );
    ROGUE_TRACE( ((RogueClassMethod*)THIS)->locals );
    ROGUE_TRACE( ((RogueClassMethod*)THIS)->statements );
    ROGUE_TRACE( ((RogueClassMethod*)THIS)->aspect_statements );
    ROGUE_TRACE( ((RogueClassMethod*)THIS)->incorporating_classes );
    ROGUE_TRACE( ((RogueClassMethod*)THIS)->overridden_method );
    ROGUE_TRACE( ((RogueClassMethod*)THIS)->overriding_methods );
    ROGUE_TRACE( ((RogueClassMethod*)THIS)->native_code );
    ROGUE_TRACE( ((RogueClassMethod*)THIS)->label_list );
    ROGUE_TRACE( ((RogueClassMethod*)THIS)->label_lookup );
    ROGUE_TRACE( ((RogueClassMethod*)THIS)->cur_label );
    ROGUE_TRACE( ((RogueClassMethod*)THIS)->cpp_name );
    ROGUE_TRACE( ((RogueClassMethod*)THIS)->cpp_typedef );
  }
};

struct RogueTypeString_MethodListTable : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_MethodListTable );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 60;
  }

  const char* name() { return "Table<<String,Method[]>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_MethodListTable*)THIS)->bins );
    ROGUE_TRACE( ((RogueClassString_MethodListTable*)THIS)->keys );
  }
};

struct RogueTypeTypeList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueTypeList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 63;
  }

  const char* name() { return "Type[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueTypeList*)THIS)->data );
  }
};

struct RogueTypeType : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassType );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 67;
  }

  RogueObject* init_object( RogueObject* THIS )
  {
    return (RogueObject*) RogueType__init_object( (RogueClassType*) THIS );
  }

  const char* name() { return "Type"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassType*)THIS)->t );
    ROGUE_TRACE( ((RogueClassType*)THIS)->name );
    ROGUE_TRACE( ((RogueClassType*)THIS)->attributes );
    ROGUE_TRACE( ((RogueClassType*)THIS)->base_class );
    ROGUE_TRACE( ((RogueClassType*)THIS)->base_types );
    ROGUE_TRACE( ((RogueClassType*)THIS)->flat_base_types );
    ROGUE_TRACE( ((RogueClassType*)THIS)->_element_type );
    ROGUE_TRACE( ((RogueClassType*)THIS)->definition_list );
    ROGUE_TRACE( ((RogueClassType*)THIS)->definition_lookup );
    ROGUE_TRACE( ((RogueClassType*)THIS)->prev_enum_cmd );
    ROGUE_TRACE( ((RogueClassType*)THIS)->native_properties );
    ROGUE_TRACE( ((RogueClassType*)THIS)->settings_list );
    ROGUE_TRACE( ((RogueClassType*)THIS)->settings_lookup );
    ROGUE_TRACE( ((RogueClassType*)THIS)->property_list );
    ROGUE_TRACE( ((RogueClassType*)THIS)->property_lookup );
    ROGUE_TRACE( ((RogueClassType*)THIS)->routine_list );
    ROGUE_TRACE( ((RogueClassType*)THIS)->routine_lookup_by_name );
    ROGUE_TRACE( ((RogueClassType*)THIS)->routine_lookup_by_signature );
    ROGUE_TRACE( ((RogueClassType*)THIS)->method_list );
    ROGUE_TRACE( ((RogueClassType*)THIS)->method_lookup_by_name );
    ROGUE_TRACE( ((RogueClassType*)THIS)->method_lookup_by_signature );
    ROGUE_TRACE( ((RogueClassType*)THIS)->cpp_name );
    ROGUE_TRACE( ((RogueClassType*)THIS)->cpp_class_name );
    ROGUE_TRACE( ((RogueClassType*)THIS)->cpp_type_name );
  }
};

struct RogueTypeString_TypeTable : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_TypeTable );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 70;
  }

  const char* name() { return "Table<<String,Type>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_TypeTable*)THIS)->bins );
    ROGUE_TRACE( ((RogueClassString_TypeTable*)THIS)->keys );
  }
};

struct RogueTypeString_IntegerTable : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_IntegerTable );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 73;
  }

  const char* name() { return "Table<<String,Integer>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_IntegerTable*)THIS)->bins );
    ROGUE_TRACE( ((RogueClassString_IntegerTable*)THIS)->keys );
  }
};

struct RogueTypeToken : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassToken );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 76;
  }

  const char* name() { return "Token"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassToken*)THIS)->_type );
    ROGUE_TRACE( ((RogueClassToken*)THIS)->filepath );
  }
};

struct RogueTypeAttributes : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassAttributes );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 91;
  }

  const char* name() { return "Attributes"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassAttributes*)THIS)->tags );
  }
};

struct RogueTypeCmd : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmd );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 94;
  }

  const char* name() { return "Cmd"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmd*)THIS)->t );
  }
};

struct RogueTypeCmdReturn : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdReturn );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdStatement;
    methods = Rogue_dynamic_method_table + 125;
  }

  const char* name() { return "CmdReturn"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdReturn*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdReturn*)THIS)->value );
  }
};

struct RogueTypeCmdStatement : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdStatement );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 156;
  }

  const char* name() { return "CmdStatement"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdStatement*)THIS)->t );
  }
};

struct RogueTypeCmdStatementList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdStatementList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdList;
    methods = Rogue_dynamic_method_table + 187;
  }

  const char* name() { return "CmdStatementList"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdStatementList*)THIS)->data );
  }
};

struct RogueTypeCmdList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueCmdList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 193;
  }

  const char* name() { return "Cmd[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueCmdList*)THIS)->data );
  }
};

struct RogueTypeTokenType : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassTokenType );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 199;
  }

  const char* name() { return "TokenType"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassTokenType*)THIS)->name );
  }
};

struct RogueTypeCmdLabel : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdLabel );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 216;
  }

  const char* name() { return "CmdLabel"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdLabel*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdLabel*)THIS)->name );
    ROGUE_TRACE( ((RogueClassCmdLabel*)THIS)->statements );
  }
};

struct RogueTypeRogueError : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassRogueError );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Error;
    methods = Rogue_dynamic_method_table + 247;
  }

  const char* name() { return "RogueError"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassRogueError*)THIS)->message );
    ROGUE_TRACE( ((RogueClassRogueError*)THIS)->filepath );
  }
};

struct RogueTypeMethodList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueMethodList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 251;
  }

  const char* name() { return "Method[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueMethodList*)THIS)->data );
  }
};

struct RogueTypeCPPWriter : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCPPWriter );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 255;
  }

  RogueObject* init_object( RogueObject* THIS )
  {
    return (RogueObject*) RogueCPPWriter__init_object( (RogueClassCPPWriter*) THIS );
  }

  const char* name() { return "CPPWriter"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCPPWriter*)THIS)->filepath );
    ROGUE_TRACE( ((RogueClassCPPWriter*)THIS)->buffer );
    ROGUE_TRACE( ((RogueClassCPPWriter*)THIS)->temp_buffer );
  }
};

struct RogueTypeString_MethodTable : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_MethodTable );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 258;
  }

  const char* name() { return "Table<<String,Method>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_MethodTable*)THIS)->bins );
    ROGUE_TRACE( ((RogueClassString_MethodTable*)THIS)->keys );
  }
};

struct RogueTypeLocalList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueLocalList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 261;
  }

  const char* name() { return "Local[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueLocalList*)THIS)->data );
  }
};

struct RogueTypeLocal : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassLocal );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 265;
  }

  const char* name() { return "Local"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassLocal*)THIS)->t );
    ROGUE_TRACE( ((RogueClassLocal*)THIS)->name );
    ROGUE_TRACE( ((RogueClassLocal*)THIS)->_type );
    ROGUE_TRACE( ((RogueClassLocal*)THIS)->initial_value );
    ROGUE_TRACE( ((RogueClassLocal*)THIS)->_cpp_name );
  }
};

struct RogueTypeByteList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueByteList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 268;
  }

  const char* name() { return "Byte[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueByteList*)THIS)->data );
  }
};

struct RogueTypeMath : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassMath );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 272;
  }

  const char* name() { return "Math"; }

};

struct RogueTypeSystem : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassSystem );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 275;
  }

  const char* name() { return "System"; }

};

struct RogueTypeTaskManager : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassTaskManager );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 278;
  }

  RogueObject* init_object( RogueObject* THIS )
  {
    return (RogueObject*) RogueTaskManager__init_object( (RogueClassTaskManager*) THIS );
  }

  const char* name() { return "TaskManager"; }

  RogueClassTaskManager* singleton()
  {
    if ( !_singleton )
    {
      _singleton = create_object();
      init_object( _singleton );
    }
    return (RogueClassTaskManager*) _singleton;
  }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassTaskManager*)THIS)->active_list );
    ROGUE_TRACE( ((RogueClassTaskManager*)THIS)->update_list );
  }
};

struct RogueTypeTask : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassTask );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 281;
  }

  const char* name() { return "Task"; }

};

struct RogueTypeTaskList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueTaskList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 285;
  }

  const char* name() { return "Task[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueTaskList*)THIS)->data );
  }
};

struct RogueTypeString_LogicalTable : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_LogicalTable );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 289;
  }

  const char* name() { return "Table<<String,Logical>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_LogicalTable*)THIS)->bins );
    ROGUE_TRACE( ((RogueClassString_LogicalTable*)THIS)->keys );
  }
};

struct RogueTypeFile : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassFile );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 292;
  }

  const char* name() { return "File"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassFile*)THIS)->filepath );
  }
};

struct RogueTypeParser : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassParser );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 295;
  }

  RogueObject* init_object( RogueObject* THIS )
  {
    return (RogueObject*) RogueParser__init_object( (RogueClassParser*) THIS );
  }

  const char* name() { return "Parser"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassParser*)THIS)->reader );
    ROGUE_TRACE( ((RogueClassParser*)THIS)->_this_type );
    ROGUE_TRACE( ((RogueClassParser*)THIS)->this_method );
    ROGUE_TRACE( ((RogueClassParser*)THIS)->local_declarations );
    ROGUE_TRACE( ((RogueClassParser*)THIS)->property_list );
    ROGUE_TRACE( ((RogueClassParser*)THIS)->string_buffer );
    ROGUE_TRACE( ((RogueClassParser*)THIS)->cur_statement_list );
  }
};

struct RogueTypeTokenList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueTokenList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 298;
  }

  const char* name() { return "Token[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueTokenList*)THIS)->data );
  }
};

struct RogueTypeLineReader : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassLineReader );
    base_type_count = 2;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    base_types[1] = (RogueType*) Rogue_program.type_Reader_of_String;
    methods = Rogue_dynamic_method_table + 302;
  }

  RogueObject* init_object( RogueObject* THIS )
  {
    return (RogueObject*) RogueLineReader__init_object( (RogueClassLineReader*) THIS );
  }

  const char* name() { return "LineReader"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassLineReader*)THIS)->source );
    ROGUE_TRACE( ((RogueClassLineReader*)THIS)->next );
    ROGUE_TRACE( ((RogueClassLineReader*)THIS)->buffer );
  }
};

struct RogueTypeReader_of_String : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassReader_of_String );
    methods = Rogue_dynamic_method_table + 307;
  }

  const char* name() { return "Reader<<String>>"; }

};

struct RogueTypeTypeParameterList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueTypeParameterList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 307;
  }

  const char* name() { return "TypeParameter[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueTypeParameterList*)THIS)->data );
  }
};

struct RogueTypeTypeParameter : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassTypeParameter );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 311;
  }

  const char* name() { return "TypeParameter"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassTypeParameter*)THIS)->t );
    ROGUE_TRACE( ((RogueClassTypeParameter*)THIS)->name );
  }
};

struct RogueTypeAugmentList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueAugmentList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 314;
  }

  const char* name() { return "Augment[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueAugmentList*)THIS)->data );
  }
};

struct RogueTypeAugment : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassAugment );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 318;
  }

  RogueObject* init_object( RogueObject* THIS )
  {
    return (RogueObject*) RogueAugment__init_object( (RogueClassAugment*) THIS );
  }

  const char* name() { return "Augment"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassAugment*)THIS)->t );
    ROGUE_TRACE( ((RogueClassAugment*)THIS)->name );
    ROGUE_TRACE( ((RogueClassAugment*)THIS)->base_types );
    ROGUE_TRACE( ((RogueClassAugment*)THIS)->tokens );
  }
};

struct RogueTypeString_TokenTypeTable : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_TokenTypeTable );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 321;
  }

  const char* name() { return "Table<<String,TokenType>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_TokenTypeTable*)THIS)->bins );
    ROGUE_TRACE( ((RogueClassString_TokenTypeTable*)THIS)->keys );
  }
};

struct RogueTypeLiteralCharacterToken : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassLiteralCharacterToken );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Token;
    methods = Rogue_dynamic_method_table + 324;
  }

  const char* name() { return "LiteralCharacterToken"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassLiteralCharacterToken*)THIS)->_type );
    ROGUE_TRACE( ((RogueClassLiteralCharacterToken*)THIS)->filepath );
  }
};

struct RogueTypeLiteralLongToken : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassLiteralLongToken );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Token;
    methods = Rogue_dynamic_method_table + 339;
  }

  const char* name() { return "LiteralLongToken"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassLiteralLongToken*)THIS)->_type );
    ROGUE_TRACE( ((RogueClassLiteralLongToken*)THIS)->filepath );
  }
};

struct RogueTypeLiteralIntegerToken : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassLiteralIntegerToken );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Token;
    methods = Rogue_dynamic_method_table + 354;
  }

  const char* name() { return "LiteralIntegerToken"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassLiteralIntegerToken*)THIS)->_type );
    ROGUE_TRACE( ((RogueClassLiteralIntegerToken*)THIS)->filepath );
  }
};

struct RogueTypeLiteralRealToken : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassLiteralRealToken );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Token;
    methods = Rogue_dynamic_method_table + 369;
  }

  const char* name() { return "LiteralRealToken"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassLiteralRealToken*)THIS)->_type );
    ROGUE_TRACE( ((RogueClassLiteralRealToken*)THIS)->filepath );
  }
};

struct RogueTypeLiteralStringToken : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassLiteralStringToken );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Token;
    methods = Rogue_dynamic_method_table + 384;
  }

  const char* name() { return "LiteralStringToken"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassLiteralStringToken*)THIS)->_type );
    ROGUE_TRACE( ((RogueClassLiteralStringToken*)THIS)->filepath );
    ROGUE_TRACE( ((RogueClassLiteralStringToken*)THIS)->value );
  }
};

struct RogueTypeString_TypeSpecializerTable : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_TypeSpecializerTable );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 399;
  }

  const char* name() { return "Table<<String,TypeSpecializer>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_TypeSpecializerTable*)THIS)->bins );
    ROGUE_TRACE( ((RogueClassString_TypeSpecializerTable*)THIS)->keys );
  }
};

struct RogueTypeTypeSpecializer : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassTypeSpecializer );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 402;
  }

  const char* name() { return "TypeSpecializer"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassTypeSpecializer*)THIS)->name );
    ROGUE_TRACE( ((RogueClassTypeSpecializer*)THIS)->tokens );
  }
};

struct RogueTypeTableEntry_of_String_TemplateList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueTableEntry_of_String_TemplateList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 405;
  }

  const char* name() { return "TableEntry<<String,Template>>[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueTableEntry_of_String_TemplateList*)THIS)->data );
  }
};

struct RogueTypeString_TemplateTableEntry : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_TemplateTableEntry );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 409;
  }

  const char* name() { return "TableEntry<<String,Template>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_TemplateTableEntry*)THIS)->key );
    ROGUE_TRACE( ((RogueClassString_TemplateTableEntry*)THIS)->value );
    ROGUE_TRACE( ((RogueClassString_TemplateTableEntry*)THIS)->next_entry );
  }
};

struct RogueTypeTableEntry_of_String_AugmentListList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueTableEntry_of_String_AugmentListList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 412;
  }

  const char* name() { return "TableEntry<<String,Augment[]>>[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueTableEntry_of_String_AugmentListList*)THIS)->data );
  }
};

struct RogueTypeString_AugmentListTableEntry : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_AugmentListTableEntry );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 416;
  }

  const char* name() { return "TableEntry<<String,Augment[]>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_AugmentListTableEntry*)THIS)->key );
    ROGUE_TRACE( ((RogueClassString_AugmentListTableEntry*)THIS)->value );
    ROGUE_TRACE( ((RogueClassString_AugmentListTableEntry*)THIS)->next_entry );
  }
};

struct RogueTypeCmdLabelList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueCmdLabelList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 419;
  }

  const char* name() { return "CmdLabel[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueCmdLabelList*)THIS)->data );
  }
};

struct RogueTypeString_CmdLabelTable : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_CmdLabelTable );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 423;
  }

  const char* name() { return "Table<<String,CmdLabel>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_CmdLabelTable*)THIS)->bins );
    ROGUE_TRACE( ((RogueClassString_CmdLabelTable*)THIS)->keys );
  }
};

struct RogueTypeCloneArgs : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCloneArgs );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 426;
  }

  const char* name() { return "CloneArgs"; }

};

struct RogueTypeCloneMethodArgs : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCloneMethodArgs );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CloneArgs;
    methods = Rogue_dynamic_method_table + 431;
  }

  const char* name() { return "CloneMethodArgs"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCloneMethodArgs*)THIS)->cloned_method );
  }
};

struct RogueTypeProperty : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassProperty );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 436;
  }

  const char* name() { return "Property"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassProperty*)THIS)->t );
    ROGUE_TRACE( ((RogueClassProperty*)THIS)->type_context );
    ROGUE_TRACE( ((RogueClassProperty*)THIS)->name );
    ROGUE_TRACE( ((RogueClassProperty*)THIS)->_type );
    ROGUE_TRACE( ((RogueClassProperty*)THIS)->initial_value );
    ROGUE_TRACE( ((RogueClassProperty*)THIS)->cpp_name );
  }
};

struct RogueTypeCmdAccess : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdAccess );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 439;
  }

  const char* name() { return "CmdAccess"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdAccess*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdAccess*)THIS)->context );
    ROGUE_TRACE( ((RogueClassCmdAccess*)THIS)->name );
    ROGUE_TRACE( ((RogueClassCmdAccess*)THIS)->args );
  }
};

struct RogueTypeCmdArgs : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdArgs );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdList;
    methods = Rogue_dynamic_method_table + 470;
  }

  const char* name() { return "CmdArgs"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdArgs*)THIS)->data );
  }
};

struct RogueTypeCmdAssign : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdAssign );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 476;
  }

  const char* name() { return "CmdAssign"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdAssign*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdAssign*)THIS)->target );
    ROGUE_TRACE( ((RogueClassCmdAssign*)THIS)->new_value );
  }
};

struct RogueTypeScope : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassScope );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 507;
  }

  RogueObject* init_object( RogueObject* THIS )
  {
    return (RogueObject*) RogueScope__init_object( (RogueClassScope*) THIS );
  }

  const char* name() { return "Scope"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassScope*)THIS)->_this_type );
    ROGUE_TRACE( ((RogueClassScope*)THIS)->this_method );
    ROGUE_TRACE( ((RogueClassScope*)THIS)->local_list );
    ROGUE_TRACE( ((RogueClassScope*)THIS)->control_stack );
  }
};

struct RogueTypeCmdControlStructureList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueCmdControlStructureList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 510;
  }

  const char* name() { return "CmdControlStructure[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueCmdControlStructureList*)THIS)->data );
  }
};

struct RogueTypeCmdControlStructure : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdControlStructure );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdStatement;
    methods = Rogue_dynamic_method_table + 514;
  }

  const char* name() { return "CmdControlStructure"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdControlStructure*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdControlStructure*)THIS)->statements );
    ROGUE_TRACE( ((RogueClassCmdControlStructure*)THIS)->escape_label );
    ROGUE_TRACE( ((RogueClassCmdControlStructure*)THIS)->upkeep_label );
    ROGUE_TRACE( ((RogueClassCmdControlStructure*)THIS)->task_escape_section );
    ROGUE_TRACE( ((RogueClassCmdControlStructure*)THIS)->task_upkeep_section );
    ROGUE_TRACE( ((RogueClassCmdControlStructure*)THIS)->cloned_command );
  }
};

struct RogueTypeCmdLiteralThis : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdLiteralThis );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdThisContext;
    methods = Rogue_dynamic_method_table + 546;
  }

  const char* name() { return "CmdLiteralThis"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdLiteralThis*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdLiteralThis*)THIS)->_this_type );
  }
};

struct RogueTypeCmdThisContext : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdThisContext );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 577;
  }

  const char* name() { return "CmdThisContext"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdThisContext*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdThisContext*)THIS)->_this_type );
  }
};

struct RogueTypeCmdGenericLoop : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdGenericLoop );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdControlStructure;
    methods = Rogue_dynamic_method_table + 608;
  }

  const char* name() { return "CmdGenericLoop"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdGenericLoop*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdGenericLoop*)THIS)->statements );
    ROGUE_TRACE( ((RogueClassCmdGenericLoop*)THIS)->escape_label );
    ROGUE_TRACE( ((RogueClassCmdGenericLoop*)THIS)->upkeep_label );
    ROGUE_TRACE( ((RogueClassCmdGenericLoop*)THIS)->task_escape_section );
    ROGUE_TRACE( ((RogueClassCmdGenericLoop*)THIS)->task_upkeep_section );
    ROGUE_TRACE( ((RogueClassCmdGenericLoop*)THIS)->cloned_command );
    ROGUE_TRACE( ((RogueClassCmdGenericLoop*)THIS)->control_statements );
    ROGUE_TRACE( ((RogueClassCmdGenericLoop*)THIS)->condition );
    ROGUE_TRACE( ((RogueClassCmdGenericLoop*)THIS)->upkeep );
  }
};

struct RogueTypeCmdLiteralInteger : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdLiteralInteger );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdLiteral;
    methods = Rogue_dynamic_method_table + 640;
  }

  const char* name() { return "CmdLiteralInteger"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdLiteralInteger*)THIS)->t );
  }
};

struct RogueTypeCmdLiteral : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdLiteral );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 671;
  }

  const char* name() { return "CmdLiteral"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdLiteral*)THIS)->t );
  }
};

struct RogueTypeCmdCompareNE : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCompareNE );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdComparison;
    methods = Rogue_dynamic_method_table + 702;
  }

  const char* name() { return "CmdCompareNE"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCompareNE*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCompareNE*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdCompareNE*)THIS)->right );
  }
};

struct RogueTypeCmdComparison : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdComparison );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdBinary;
    methods = Rogue_dynamic_method_table + 742;
  }

  const char* name() { return "CmdComparison"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdComparison*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdComparison*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdComparison*)THIS)->right );
  }
};

struct RogueTypeCmdBinary : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdBinary );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 782;
  }

  const char* name() { return "CmdBinary"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdBinary*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdBinary*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdBinary*)THIS)->right );
  }
};

struct RogueTypeTaskArgs : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassTaskArgs );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CloneArgs;
    methods = Rogue_dynamic_method_table + 821;
  }

  const char* name() { return "TaskArgs"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassTaskArgs*)THIS)->_task_type );
    ROGUE_TRACE( ((RogueClassTaskArgs*)THIS)->task_method );
    ROGUE_TRACE( ((RogueClassTaskArgs*)THIS)->_original_type );
    ROGUE_TRACE( ((RogueClassTaskArgs*)THIS)->original_method );
    ROGUE_TRACE( ((RogueClassTaskArgs*)THIS)->cmd_task_control );
    ROGUE_TRACE( ((RogueClassTaskArgs*)THIS)->context_property );
    ROGUE_TRACE( ((RogueClassTaskArgs*)THIS)->ip_property );
  }
};

struct RogueTypeCmdTaskControl : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdTaskControl );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 826;
  }

  RogueObject* init_object( RogueObject* THIS )
  {
    return (RogueObject*) RogueCmdTaskControl__init_object( (RogueClassCmdTaskControl*) THIS );
  }

  const char* name() { return "CmdTaskControl"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdTaskControl*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdTaskControl*)THIS)->sections );
    ROGUE_TRACE( ((RogueClassCmdTaskControl*)THIS)->current_section );
  }
};

struct RogueTypeCmdTaskControlSection : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdTaskControlSection );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 857;
  }

  RogueObject* init_object( RogueObject* THIS )
  {
    return (RogueObject*) RogueCmdTaskControlSection__init_object( (RogueClassCmdTaskControlSection*) THIS );
  }

  const char* name() { return "CmdTaskControlSection"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdTaskControlSection*)THIS)->statements );
  }
};

struct RogueTypeTableEntry_of_String_MethodListList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueTableEntry_of_String_MethodListList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 860;
  }

  const char* name() { return "TableEntry<<String,Method[]>>[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueTableEntry_of_String_MethodListList*)THIS)->data );
  }
};

struct RogueTypeString_MethodListTableEntry : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_MethodListTableEntry );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 864;
  }

  const char* name() { return "TableEntry<<String,Method[]>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_MethodListTableEntry*)THIS)->key );
    ROGUE_TRACE( ((RogueClassString_MethodListTableEntry*)THIS)->value );
    ROGUE_TRACE( ((RogueClassString_MethodListTableEntry*)THIS)->next_entry );
  }
};

struct RogueTypeString_CmdTable : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_CmdTable );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 867;
  }

  const char* name() { return "Table<<String,Cmd>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_CmdTable*)THIS)->bins );
    ROGUE_TRACE( ((RogueClassString_CmdTable*)THIS)->keys );
  }
};

struct RogueTypePropertyList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RoguePropertyList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 870;
  }

  const char* name() { return "Property[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RoguePropertyList*)THIS)->data );
  }
};

struct RogueTypeString_PropertyTable : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_PropertyTable );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 874;
  }

  const char* name() { return "Table<<String,Property>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_PropertyTable*)THIS)->bins );
    ROGUE_TRACE( ((RogueClassString_PropertyTable*)THIS)->keys );
  }
};

struct RogueTypeCmdLiteralNull : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdLiteralNull );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdLiteral;
    methods = Rogue_dynamic_method_table + 877;
  }

  const char* name() { return "CmdLiteralNull"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdLiteralNull*)THIS)->t );
  }
};

struct RogueTypeCmdCreateCompound : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCreateCompound );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 908;
  }

  const char* name() { return "CmdCreateCompound"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCreateCompound*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCreateCompound*)THIS)->_of_type );
    ROGUE_TRACE( ((RogueClassCmdCreateCompound*)THIS)->args );
  }
};

struct RogueTypeCmdLiteralLogical : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdLiteralLogical );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdLiteral;
    methods = Rogue_dynamic_method_table + 939;
  }

  const char* name() { return "CmdLiteralLogical"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdLiteralLogical*)THIS)->t );
  }
};

struct RogueTypeCmdLiteralString : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdLiteralString );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdLiteral;
    methods = Rogue_dynamic_method_table + 970;
  }

  const char* name() { return "CmdLiteralString"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdLiteralString*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdLiteralString*)THIS)->value );
  }
};

struct RogueTypeCmdWriteSetting : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdWriteSetting );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 1001;
  }

  const char* name() { return "CmdWriteSetting"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdWriteSetting*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdWriteSetting*)THIS)->setting_info );
    ROGUE_TRACE( ((RogueClassCmdWriteSetting*)THIS)->new_value );
  }
};

struct RogueTypeCmdWriteProperty : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdWriteProperty );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 1032;
  }

  const char* name() { return "CmdWriteProperty"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdWriteProperty*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdWriteProperty*)THIS)->context );
    ROGUE_TRACE( ((RogueClassCmdWriteProperty*)THIS)->property_info );
    ROGUE_TRACE( ((RogueClassCmdWriteProperty*)THIS)->new_value );
  }
};

struct RogueTypeTableEntry_of_String_TypeList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueTableEntry_of_String_TypeList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 1063;
  }

  const char* name() { return "TableEntry<<String,Type>>[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueTableEntry_of_String_TypeList*)THIS)->data );
  }
};

struct RogueTypeString_TypeTableEntry : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_TypeTableEntry );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 1067;
  }

  const char* name() { return "TableEntry<<String,Type>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_TypeTableEntry*)THIS)->key );
    ROGUE_TRACE( ((RogueClassString_TypeTableEntry*)THIS)->value );
    ROGUE_TRACE( ((RogueClassString_TypeTableEntry*)THIS)->next_entry );
  }
};

struct RogueTypeTableEntry_of_String_IntegerList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueTableEntry_of_String_IntegerList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 1070;
  }

  const char* name() { return "TableEntry<<String,Integer>>[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueTableEntry_of_String_IntegerList*)THIS)->data );
  }
};

struct RogueTypeString_IntegerTableEntry : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_IntegerTableEntry );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 1074;
  }

  const char* name() { return "TableEntry<<String,Integer>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_IntegerTableEntry*)THIS)->key );
    ROGUE_TRACE( ((RogueClassString_IntegerTableEntry*)THIS)->next_entry );
  }
};

struct RogueTypeCmdCastToType : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCastToType );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdTypeOperator;
    methods = Rogue_dynamic_method_table + 1077;
  }

  const char* name() { return "CmdCastToType"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCastToType*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCastToType*)THIS)->operand );
    ROGUE_TRACE( ((RogueClassCmdCastToType*)THIS)->_target_type );
  }
};

struct RogueTypeCmdTypeOperator : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdTypeOperator );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 1108;
  }

  const char* name() { return "CmdTypeOperator"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdTypeOperator*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdTypeOperator*)THIS)->operand );
    ROGUE_TRACE( ((RogueClassCmdTypeOperator*)THIS)->_target_type );
  }
};

struct RogueTypeCmdLogicalize : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdLogicalize );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdUnary;
    methods = Rogue_dynamic_method_table + 1139;
  }

  const char* name() { return "CmdLogicalize"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdLogicalize*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdLogicalize*)THIS)->operand );
  }
};

struct RogueTypeCmdUnary : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdUnary );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 1177;
  }

  const char* name() { return "CmdUnary"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdUnary*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdUnary*)THIS)->operand );
  }
};

struct RogueTypeCmdCreateOptionalValue : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCreateOptionalValue );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 1215;
  }

  const char* name() { return "CmdCreateOptionalValue"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCreateOptionalValue*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCreateOptionalValue*)THIS)->_of_type );
    ROGUE_TRACE( ((RogueClassCmdCreateOptionalValue*)THIS)->value );
  }
};

struct RogueTypeTableEntry_of_String_MethodList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueTableEntry_of_String_MethodList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 1246;
  }

  const char* name() { return "TableEntry<<String,Method>>[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueTableEntry_of_String_MethodList*)THIS)->data );
  }
};

struct RogueTypeString_MethodTableEntry : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_MethodTableEntry );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 1250;
  }

  const char* name() { return "TableEntry<<String,Method>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_MethodTableEntry*)THIS)->key );
    ROGUE_TRACE( ((RogueClassString_MethodTableEntry*)THIS)->value );
    ROGUE_TRACE( ((RogueClassString_MethodTableEntry*)THIS)->next_entry );
  }
};

struct RogueTypeTableEntry_of_String_LogicalList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueTableEntry_of_String_LogicalList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 1253;
  }

  const char* name() { return "TableEntry<<String,Logical>>[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueTableEntry_of_String_LogicalList*)THIS)->data );
  }
};

struct RogueTypeString_LogicalTableEntry : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_LogicalTableEntry );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 1257;
  }

  const char* name() { return "TableEntry<<String,Logical>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_LogicalTableEntry*)THIS)->key );
    ROGUE_TRACE( ((RogueClassString_LogicalTableEntry*)THIS)->next_entry );
  }
};

struct RogueTypeFileReader : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassFileReader );
    base_type_count = 2;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    base_types[1] = (RogueType*) Rogue_program.type_CharacterReader;
    methods = Rogue_dynamic_method_table + 1260;
  }

  RogueObject* init_object( RogueObject* THIS )
  {
    return (RogueObject*) RogueFileReader__init_object( (RogueClassFileReader*) THIS );
  }

  const char* name() { return "FileReader"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassFileReader*)THIS)->filepath );
    ROGUE_TRACE( ((RogueClassFileReader*)THIS)->buffer );
  }
};

struct RogueTypeFileWriter : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassFileWriter );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 1266;
  }

  RogueObject* init_object( RogueObject* THIS )
  {
    return (RogueObject*) RogueFileWriter__init_object( (RogueClassFileWriter*) THIS );
  }

  const char* name() { return "FileWriter"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassFileWriter*)THIS)->filepath );
    ROGUE_TRACE( ((RogueClassFileWriter*)THIS)->buffer );
  }
};

struct RogueTypeTokenReader : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassTokenReader );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 1269;
  }

  const char* name() { return "TokenReader"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassTokenReader*)THIS)->tokens );
  }
};

struct RogueTypeTokenizer : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassTokenizer );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 1272;
  }

  RogueObject* init_object( RogueObject* THIS )
  {
    return (RogueObject*) RogueTokenizer__init_object( (RogueClassTokenizer*) THIS );
  }

  const char* name() { return "Tokenizer"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassTokenizer*)THIS)->filepath );
    ROGUE_TRACE( ((RogueClassTokenizer*)THIS)->reader );
    ROGUE_TRACE( ((RogueClassTokenizer*)THIS)->tokens );
    ROGUE_TRACE( ((RogueClassTokenizer*)THIS)->buffer );
    ROGUE_TRACE( ((RogueClassTokenizer*)THIS)->next_filepath );
  }
};

struct RogueTypeParseReader : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassParseReader );
    base_type_count = 2;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    base_types[1] = (RogueType*) Rogue_program.type_CharacterReader;
    methods = Rogue_dynamic_method_table + 1275;
  }

  const char* name() { return "ParseReader"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassParseReader*)THIS)->data );
  }
};

struct RogueTypePreprocessor : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassPreprocessor );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 1281;
  }

  const char* name() { return "Preprocessor"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassPreprocessor*)THIS)->reader );
    ROGUE_TRACE( ((RogueClassPreprocessor*)THIS)->tokens );
  }
};

struct RogueTypeCmdAdd : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdAdd );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdBinary;
    methods = Rogue_dynamic_method_table + 1284;
  }

  const char* name() { return "CmdAdd"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdAdd*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdAdd*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdAdd*)THIS)->right );
  }
};

struct RogueTypeCmdIf : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdIf );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdControlStructure;
    methods = Rogue_dynamic_method_table + 1323;
  }

  const char* name() { return "CmdIf"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdIf*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdIf*)THIS)->statements );
    ROGUE_TRACE( ((RogueClassCmdIf*)THIS)->escape_label );
    ROGUE_TRACE( ((RogueClassCmdIf*)THIS)->upkeep_label );
    ROGUE_TRACE( ((RogueClassCmdIf*)THIS)->task_escape_section );
    ROGUE_TRACE( ((RogueClassCmdIf*)THIS)->task_upkeep_section );
    ROGUE_TRACE( ((RogueClassCmdIf*)THIS)->cloned_command );
    ROGUE_TRACE( ((RogueClassCmdIf*)THIS)->condition );
    ROGUE_TRACE( ((RogueClassCmdIf*)THIS)->else_statements );
  }
};

struct RogueTypeCmdWhich : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdWhich );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdControlStructure;
    methods = Rogue_dynamic_method_table + 1355;
  }

  const char* name() { return "CmdWhich"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdWhich*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdWhich*)THIS)->statements );
    ROGUE_TRACE( ((RogueClassCmdWhich*)THIS)->escape_label );
    ROGUE_TRACE( ((RogueClassCmdWhich*)THIS)->upkeep_label );
    ROGUE_TRACE( ((RogueClassCmdWhich*)THIS)->task_escape_section );
    ROGUE_TRACE( ((RogueClassCmdWhich*)THIS)->task_upkeep_section );
    ROGUE_TRACE( ((RogueClassCmdWhich*)THIS)->cloned_command );
    ROGUE_TRACE( ((RogueClassCmdWhich*)THIS)->expression );
    ROGUE_TRACE( ((RogueClassCmdWhich*)THIS)->cases );
    ROGUE_TRACE( ((RogueClassCmdWhich*)THIS)->case_others );
  }
};

struct RogueTypeCmdContingent : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdContingent );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdControlStructure;
    methods = Rogue_dynamic_method_table + 1387;
  }

  const char* name() { return "CmdContingent"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdContingent*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdContingent*)THIS)->statements );
    ROGUE_TRACE( ((RogueClassCmdContingent*)THIS)->escape_label );
    ROGUE_TRACE( ((RogueClassCmdContingent*)THIS)->upkeep_label );
    ROGUE_TRACE( ((RogueClassCmdContingent*)THIS)->task_escape_section );
    ROGUE_TRACE( ((RogueClassCmdContingent*)THIS)->task_upkeep_section );
    ROGUE_TRACE( ((RogueClassCmdContingent*)THIS)->cloned_command );
    ROGUE_TRACE( ((RogueClassCmdContingent*)THIS)->satisfied_statements );
    ROGUE_TRACE( ((RogueClassCmdContingent*)THIS)->unsatisfied_statements );
    ROGUE_TRACE( ((RogueClassCmdContingent*)THIS)->satisfied_label );
    ROGUE_TRACE( ((RogueClassCmdContingent*)THIS)->unsatisfied_label );
    ROGUE_TRACE( ((RogueClassCmdContingent*)THIS)->satisfied_section );
    ROGUE_TRACE( ((RogueClassCmdContingent*)THIS)->unsatisfied_section );
  }
};

struct RogueTypeCmdTry : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdTry );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdControlStructure;
    methods = Rogue_dynamic_method_table + 1419;
  }

  const char* name() { return "CmdTry"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdTry*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdTry*)THIS)->statements );
    ROGUE_TRACE( ((RogueClassCmdTry*)THIS)->escape_label );
    ROGUE_TRACE( ((RogueClassCmdTry*)THIS)->upkeep_label );
    ROGUE_TRACE( ((RogueClassCmdTry*)THIS)->task_escape_section );
    ROGUE_TRACE( ((RogueClassCmdTry*)THIS)->task_upkeep_section );
    ROGUE_TRACE( ((RogueClassCmdTry*)THIS)->cloned_command );
    ROGUE_TRACE( ((RogueClassCmdTry*)THIS)->catches );
  }
};

struct RogueTypeCmdAwait : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdAwait );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 1451;
  }

  const char* name() { return "CmdAwait"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdAwait*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdAwait*)THIS)->expression );
    ROGUE_TRACE( ((RogueClassCmdAwait*)THIS)->statement_list );
    ROGUE_TRACE( ((RogueClassCmdAwait*)THIS)->result_var );
  }
};

struct RogueTypeCmdYield : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdYield );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 1482;
  }

  const char* name() { return "CmdYield"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdYield*)THIS)->t );
  }
};

struct RogueTypeCmdThrow : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdThrow );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 1513;
  }

  const char* name() { return "CmdThrow"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdThrow*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdThrow*)THIS)->expression );
  }
};

struct RogueTypeCmdTrace : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdTrace );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 1544;
  }

  const char* name() { return "CmdTrace"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdTrace*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdTrace*)THIS)->value );
  }
};

struct RogueTypeCmdEscape : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdEscape );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 1575;
  }

  const char* name() { return "CmdEscape"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdEscape*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdEscape*)THIS)->target_cmd );
  }
};

struct RogueTypeCmdNextIteration : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdNextIteration );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 1606;
  }

  const char* name() { return "CmdNextIteration"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdNextIteration*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdNextIteration*)THIS)->target_cmd );
  }
};

struct RogueTypeCmdNecessary : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdNecessary );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 1637;
  }

  const char* name() { return "CmdNecessary"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdNecessary*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdNecessary*)THIS)->target_cmd );
    ROGUE_TRACE( ((RogueClassCmdNecessary*)THIS)->condition );
  }
};

struct RogueTypeCmdSufficient : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdSufficient );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 1668;
  }

  const char* name() { return "CmdSufficient"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdSufficient*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdSufficient*)THIS)->target_cmd );
    ROGUE_TRACE( ((RogueClassCmdSufficient*)THIS)->condition );
  }
};

struct RogueTypeCmdAdjust : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdAdjust );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 1699;
  }

  const char* name() { return "CmdAdjust"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdAdjust*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdAdjust*)THIS)->operand );
  }
};

struct RogueTypeCmdOpWithAssign : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdOpWithAssign );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 1730;
  }

  const char* name() { return "CmdOpWithAssign"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdOpWithAssign*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdOpWithAssign*)THIS)->target );
    ROGUE_TRACE( ((RogueClassCmdOpWithAssign*)THIS)->op );
    ROGUE_TRACE( ((RogueClassCmdOpWithAssign*)THIS)->new_value );
  }
};

struct RogueTypeCmdWhichCaseList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueCmdWhichCaseList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 1761;
  }

  const char* name() { return "CmdWhichCase[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueCmdWhichCaseList*)THIS)->data );
  }
};

struct RogueTypeCmdWhichCase : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdWhichCase );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 1765;
  }

  const char* name() { return "CmdWhichCase"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdWhichCase*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdWhichCase*)THIS)->conditions );
    ROGUE_TRACE( ((RogueClassCmdWhichCase*)THIS)->statements );
  }
};

struct RogueTypeCmdCatchList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueCmdCatchList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 1796;
  }

  const char* name() { return "CmdCatch[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueCmdCatchList*)THIS)->data );
  }
};

struct RogueTypeCmdCatch : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCatch );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 1800;
  }

  const char* name() { return "CmdCatch"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCatch*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCatch*)THIS)->error_var );
    ROGUE_TRACE( ((RogueClassCmdCatch*)THIS)->statements );
  }
};

struct RogueTypeCmdLocalDeclaration : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdLocalDeclaration );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdStatement;
    methods = Rogue_dynamic_method_table + 1831;
  }

  const char* name() { return "CmdLocalDeclaration"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdLocalDeclaration*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdLocalDeclaration*)THIS)->local_info );
  }
};

struct RogueTypeCmdAdjustLocal : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdAdjustLocal );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 1862;
  }

  const char* name() { return "CmdAdjustLocal"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdAdjustLocal*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdAdjustLocal*)THIS)->local_info );
  }
};

struct RogueTypeCmdReadLocal : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdReadLocal );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 1893;
  }

  const char* name() { return "CmdReadLocal"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdReadLocal*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdReadLocal*)THIS)->local_info );
  }
};

struct RogueTypeCmdCompareLE : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCompareLE );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdComparison;
    methods = Rogue_dynamic_method_table + 1924;
  }

  const char* name() { return "CmdCompareLE"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCompareLE*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCompareLE*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdCompareLE*)THIS)->right );
  }
};

struct RogueTypeCmdRange : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdRange );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 1964;
  }

  const char* name() { return "CmdRange"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdRange*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdRange*)THIS)->first );
    ROGUE_TRACE( ((RogueClassCmdRange*)THIS)->last );
    ROGUE_TRACE( ((RogueClassCmdRange*)THIS)->step_size );
  }
};

struct RogueTypeCmdLocalOpWithAssign : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdLocalOpWithAssign );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdResolvedOpWithAssign;
    methods = Rogue_dynamic_method_table + 1995;
  }

  const char* name() { return "CmdLocalOpWithAssign"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdLocalOpWithAssign*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdLocalOpWithAssign*)THIS)->op );
    ROGUE_TRACE( ((RogueClassCmdLocalOpWithAssign*)THIS)->new_value );
    ROGUE_TRACE( ((RogueClassCmdLocalOpWithAssign*)THIS)->local_info );
  }
};

struct RogueTypeCmdResolvedOpWithAssign : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdResolvedOpWithAssign );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 2026;
  }

  const char* name() { return "CmdResolvedOpWithAssign"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdResolvedOpWithAssign*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdResolvedOpWithAssign*)THIS)->op );
    ROGUE_TRACE( ((RogueClassCmdResolvedOpWithAssign*)THIS)->new_value );
  }
};

struct RogueTypeCmdForEach : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdForEach );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdControlStructure;
    methods = Rogue_dynamic_method_table + 2057;
  }

  const char* name() { return "CmdForEach"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdForEach*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdForEach*)THIS)->statements );
    ROGUE_TRACE( ((RogueClassCmdForEach*)THIS)->escape_label );
    ROGUE_TRACE( ((RogueClassCmdForEach*)THIS)->upkeep_label );
    ROGUE_TRACE( ((RogueClassCmdForEach*)THIS)->task_escape_section );
    ROGUE_TRACE( ((RogueClassCmdForEach*)THIS)->task_upkeep_section );
    ROGUE_TRACE( ((RogueClassCmdForEach*)THIS)->cloned_command );
    ROGUE_TRACE( ((RogueClassCmdForEach*)THIS)->control_var_name );
    ROGUE_TRACE( ((RogueClassCmdForEach*)THIS)->index_var_name );
    ROGUE_TRACE( ((RogueClassCmdForEach*)THIS)->collection );
    ROGUE_TRACE( ((RogueClassCmdForEach*)THIS)->step_cmd );
  }
};

struct RogueTypeCmdRangeUpTo : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdRangeUpTo );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdRange;
    methods = Rogue_dynamic_method_table + 2089;
  }

  const char* name() { return "CmdRangeUpTo"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdRangeUpTo*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdRangeUpTo*)THIS)->first );
    ROGUE_TRACE( ((RogueClassCmdRangeUpTo*)THIS)->last );
    ROGUE_TRACE( ((RogueClassCmdRangeUpTo*)THIS)->step_size );
  }
};

struct RogueTypeCmdLogicalXor : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdLogicalXor );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdBinaryLogical;
    methods = Rogue_dynamic_method_table + 2120;
  }

  const char* name() { return "CmdLogicalXor"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdLogicalXor*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdLogicalXor*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdLogicalXor*)THIS)->right );
  }
};

struct RogueTypeCmdBinaryLogical : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdBinaryLogical );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdBinary;
    methods = Rogue_dynamic_method_table + 2160;
  }

  const char* name() { return "CmdBinaryLogical"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdBinaryLogical*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdBinaryLogical*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdBinaryLogical*)THIS)->right );
  }
};

struct RogueTypeCmdLogicalOr : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdLogicalOr );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdBinaryLogical;
    methods = Rogue_dynamic_method_table + 2200;
  }

  const char* name() { return "CmdLogicalOr"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdLogicalOr*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdLogicalOr*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdLogicalOr*)THIS)->right );
  }
};

struct RogueTypeCmdLogicalAnd : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdLogicalAnd );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdBinaryLogical;
    methods = Rogue_dynamic_method_table + 2240;
  }

  const char* name() { return "CmdLogicalAnd"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdLogicalAnd*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdLogicalAnd*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdLogicalAnd*)THIS)->right );
  }
};

struct RogueTypeCmdCompareEQ : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCompareEQ );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdComparison;
    methods = Rogue_dynamic_method_table + 2280;
  }

  const char* name() { return "CmdCompareEQ"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCompareEQ*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCompareEQ*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdCompareEQ*)THIS)->right );
  }
};

struct RogueTypeCmdCompareIs : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCompareIs );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdComparison;
    methods = Rogue_dynamic_method_table + 2320;
  }

  const char* name() { return "CmdCompareIs"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCompareIs*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCompareIs*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdCompareIs*)THIS)->right );
  }
};

struct RogueTypeCmdCompareIsNot : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCompareIsNot );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdComparison;
    methods = Rogue_dynamic_method_table + 2360;
  }

  const char* name() { return "CmdCompareIsNot"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCompareIsNot*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCompareIsNot*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdCompareIsNot*)THIS)->right );
  }
};

struct RogueTypeCmdCompareLT : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCompareLT );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdComparison;
    methods = Rogue_dynamic_method_table + 2400;
  }

  const char* name() { return "CmdCompareLT"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCompareLT*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCompareLT*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdCompareLT*)THIS)->right );
  }
};

struct RogueTypeCmdCompareGT : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCompareGT );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdComparison;
    methods = Rogue_dynamic_method_table + 2440;
  }

  const char* name() { return "CmdCompareGT"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCompareGT*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCompareGT*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdCompareGT*)THIS)->right );
  }
};

struct RogueTypeCmdCompareGE : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCompareGE );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdComparison;
    methods = Rogue_dynamic_method_table + 2480;
  }

  const char* name() { return "CmdCompareGE"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCompareGE*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCompareGE*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdCompareGE*)THIS)->right );
  }
};

struct RogueTypeCmdInstanceOf : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdInstanceOf );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdTypeOperator;
    methods = Rogue_dynamic_method_table + 2520;
  }

  const char* name() { return "CmdInstanceOf"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdInstanceOf*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdInstanceOf*)THIS)->operand );
    ROGUE_TRACE( ((RogueClassCmdInstanceOf*)THIS)->_target_type );
  }
};

struct RogueTypeCmdLogicalNot : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdLogicalNot );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdUnary;
    methods = Rogue_dynamic_method_table + 2551;
  }

  const char* name() { return "CmdLogicalNot"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdLogicalNot*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdLogicalNot*)THIS)->operand );
  }
};

struct RogueTypeCmdBitwiseXor : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdBitwiseXor );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdBitwiseOp;
    methods = Rogue_dynamic_method_table + 2589;
  }

  const char* name() { return "CmdBitwiseXor"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdBitwiseXor*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdBitwiseXor*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdBitwiseXor*)THIS)->right );
  }
};

struct RogueTypeCmdBitwiseOp : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdBitwiseOp );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdBinary;
    methods = Rogue_dynamic_method_table + 2628;
  }

  const char* name() { return "CmdBitwiseOp"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdBitwiseOp*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdBitwiseOp*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdBitwiseOp*)THIS)->right );
  }
};

struct RogueTypeCmdBitwiseOr : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdBitwiseOr );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdBitwiseOp;
    methods = Rogue_dynamic_method_table + 2667;
  }

  const char* name() { return "CmdBitwiseOr"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdBitwiseOr*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdBitwiseOr*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdBitwiseOr*)THIS)->right );
  }
};

struct RogueTypeCmdBitwiseAnd : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdBitwiseAnd );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdBitwiseOp;
    methods = Rogue_dynamic_method_table + 2706;
  }

  const char* name() { return "CmdBitwiseAnd"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdBitwiseAnd*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdBitwiseAnd*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdBitwiseAnd*)THIS)->right );
  }
};

struct RogueTypeCmdBitwiseShiftLeft : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdBitwiseShiftLeft );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdBitwiseOp;
    methods = Rogue_dynamic_method_table + 2745;
  }

  const char* name() { return "CmdBitwiseShiftLeft"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdBitwiseShiftLeft*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdBitwiseShiftLeft*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdBitwiseShiftLeft*)THIS)->right );
  }
};

struct RogueTypeCmdBitwiseShiftRight : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdBitwiseShiftRight );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdBitwiseOp;
    methods = Rogue_dynamic_method_table + 2784;
  }

  const char* name() { return "CmdBitwiseShiftRight"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdBitwiseShiftRight*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdBitwiseShiftRight*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdBitwiseShiftRight*)THIS)->right );
  }
};

struct RogueTypeCmdBitwiseShiftRightX : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdBitwiseShiftRightX );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdBitwiseOp;
    methods = Rogue_dynamic_method_table + 2823;
  }

  const char* name() { return "CmdBitwiseShiftRightX"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdBitwiseShiftRightX*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdBitwiseShiftRightX*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdBitwiseShiftRightX*)THIS)->right );
  }
};

struct RogueTypeCmdSubtract : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdSubtract );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdBinary;
    methods = Rogue_dynamic_method_table + 2862;
  }

  const char* name() { return "CmdSubtract"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdSubtract*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdSubtract*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdSubtract*)THIS)->right );
  }
};

struct RogueTypeCmdMultiply : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdMultiply );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdBinary;
    methods = Rogue_dynamic_method_table + 2901;
  }

  const char* name() { return "CmdMultiply"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdMultiply*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdMultiply*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdMultiply*)THIS)->right );
  }
};

struct RogueTypeCmdDivide : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdDivide );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdBinary;
    methods = Rogue_dynamic_method_table + 2940;
  }

  const char* name() { return "CmdDivide"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdDivide*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdDivide*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdDivide*)THIS)->right );
  }
};

struct RogueTypeCmdMod : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdMod );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdBinary;
    methods = Rogue_dynamic_method_table + 2979;
  }

  const char* name() { return "CmdMod"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdMod*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdMod*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdMod*)THIS)->right );
  }
};

struct RogueTypeCmdPower : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdPower );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdBinary;
    methods = Rogue_dynamic_method_table + 3018;
  }

  const char* name() { return "CmdPower"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdPower*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdPower*)THIS)->left );
    ROGUE_TRACE( ((RogueClassCmdPower*)THIS)->right );
  }
};

struct RogueTypeCmdNegate : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdNegate );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdUnary;
    methods = Rogue_dynamic_method_table + 3057;
  }

  const char* name() { return "CmdNegate"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdNegate*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdNegate*)THIS)->operand );
  }
};

struct RogueTypeCmdBitwiseNot : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdBitwiseNot );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdUnary;
    methods = Rogue_dynamic_method_table + 3095;
  }

  const char* name() { return "CmdBitwiseNot"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdBitwiseNot*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdBitwiseNot*)THIS)->operand );
  }
};

struct RogueTypeCmdGetOptionalValue : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdGetOptionalValue );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 3133;
  }

  const char* name() { return "CmdGetOptionalValue"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdGetOptionalValue*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdGetOptionalValue*)THIS)->value );
  }
};

struct RogueTypeCmdElementAccess : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdElementAccess );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 3164;
  }

  const char* name() { return "CmdElementAccess"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdElementAccess*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdElementAccess*)THIS)->context );
    ROGUE_TRACE( ((RogueClassCmdElementAccess*)THIS)->index );
  }
};

struct RogueTypeCmdConvertToType : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdConvertToType );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdTypeOperator;
    methods = Rogue_dynamic_method_table + 3195;
  }

  const char* name() { return "CmdConvertToType"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdConvertToType*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdConvertToType*)THIS)->operand );
    ROGUE_TRACE( ((RogueClassCmdConvertToType*)THIS)->_target_type );
  }
};

struct RogueTypeCmdCreateCallback : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCreateCallback );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 3226;
  }

  const char* name() { return "CmdCreateCallback"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCreateCallback*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCreateCallback*)THIS)->context );
    ROGUE_TRACE( ((RogueClassCmdCreateCallback*)THIS)->name );
    ROGUE_TRACE( ((RogueClassCmdCreateCallback*)THIS)->signature );
    ROGUE_TRACE( ((RogueClassCmdCreateCallback*)THIS)->_return_type );
  }
};

struct RogueTypeCmdAs : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdAs );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdTypeOperator;
    methods = Rogue_dynamic_method_table + 3257;
  }

  const char* name() { return "CmdAs"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdAs*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdAs*)THIS)->operand );
    ROGUE_TRACE( ((RogueClassCmdAs*)THIS)->_target_type );
  }
};

struct RogueTypeCmdDefaultValue : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdDefaultValue );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdLiteral;
    methods = Rogue_dynamic_method_table + 3288;
  }

  const char* name() { return "CmdDefaultValue"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdDefaultValue*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdDefaultValue*)THIS)->_of_type );
  }
};

struct RogueTypeCmdFormattedString : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdFormattedString );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 3319;
  }

  const char* name() { return "CmdFormattedString"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdFormattedString*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdFormattedString*)THIS)->format );
    ROGUE_TRACE( ((RogueClassCmdFormattedString*)THIS)->args );
  }
};

struct RogueTypeCmdLiteralReal : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdLiteralReal );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdLiteral;
    methods = Rogue_dynamic_method_table + 3350;
  }

  const char* name() { return "CmdLiteralReal"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdLiteralReal*)THIS)->t );
  }
};

struct RogueTypeCmdLiteralLong : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdLiteralLong );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdLiteral;
    methods = Rogue_dynamic_method_table + 3381;
  }

  const char* name() { return "CmdLiteralLong"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdLiteralLong*)THIS)->t );
  }
};

struct RogueTypeCmdLiteralCharacter : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdLiteralCharacter );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdLiteral;
    methods = Rogue_dynamic_method_table + 3412;
  }

  const char* name() { return "CmdLiteralCharacter"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdLiteralCharacter*)THIS)->t );
  }
};

struct RogueTypeCmdCreateList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCreateList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 3443;
  }

  const char* name() { return "CmdCreateList"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCreateList*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCreateList*)THIS)->args );
    ROGUE_TRACE( ((RogueClassCmdCreateList*)THIS)->_list_type );
  }
};

struct RogueTypeCmdCallPriorMethod : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCallPriorMethod );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 3474;
  }

  const char* name() { return "CmdCallPriorMethod"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCallPriorMethod*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCallPriorMethod*)THIS)->name );
    ROGUE_TRACE( ((RogueClassCmdCallPriorMethod*)THIS)->args );
  }
};

struct RogueTypeFnParamList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueFnParamList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 3505;
  }

  const char* name() { return "FnParam[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueFnParamList*)THIS)->data );
  }
};

struct RogueTypeFnParam : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassFnParam );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 3509;
  }

  const char* name() { return "FnParam"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassFnParam*)THIS)->name );
    ROGUE_TRACE( ((RogueClassFnParam*)THIS)->_type );
  }
};

struct RogueTypeFnArgList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueFnArgList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 3512;
  }

  const char* name() { return "FnArg[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueFnArgList*)THIS)->data );
  }
};

struct RogueTypeFnArg : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassFnArg );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 3516;
  }

  const char* name() { return "FnArg"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassFnArg*)THIS)->name );
    ROGUE_TRACE( ((RogueClassFnArg*)THIS)->value );
    ROGUE_TRACE( ((RogueClassFnArg*)THIS)->_type );
  }
};

struct RogueTypeCmdCreateFunction : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCreateFunction );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 3519;
  }

  const char* name() { return "CmdCreateFunction"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCreateFunction*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCreateFunction*)THIS)->parameters );
    ROGUE_TRACE( ((RogueClassCmdCreateFunction*)THIS)->_return_type );
    ROGUE_TRACE( ((RogueClassCmdCreateFunction*)THIS)->with_args );
    ROGUE_TRACE( ((RogueClassCmdCreateFunction*)THIS)->statements );
  }
};

struct RogueTypeCmdNativeCode : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdNativeCode );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 3550;
  }

  const char* name() { return "CmdNativeCode"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdNativeCode*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdNativeCode*)THIS)->code );
    ROGUE_TRACE( ((RogueClassCmdNativeCode*)THIS)->this_method );
    ROGUE_TRACE( ((RogueClassCmdNativeCode*)THIS)->_result_type );
  }
};

struct RogueTypeTableEntry_of_String_TokenTypeList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueTableEntry_of_String_TokenTypeList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 3581;
  }

  const char* name() { return "TableEntry<<String,TokenType>>[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueTableEntry_of_String_TokenTypeList*)THIS)->data );
  }
};

struct RogueTypeString_TokenTypeTableEntry : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_TokenTypeTableEntry );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 3585;
  }

  const char* name() { return "TableEntry<<String,TokenType>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_TokenTypeTableEntry*)THIS)->key );
    ROGUE_TRACE( ((RogueClassString_TokenTypeTableEntry*)THIS)->value );
    ROGUE_TRACE( ((RogueClassString_TokenTypeTableEntry*)THIS)->next_entry );
  }
};

struct RogueTypeTableEntry_of_String_TypeSpecializerList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueTableEntry_of_String_TypeSpecializerList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 3588;
  }

  const char* name() { return "TableEntry<<String,TypeSpecializer>>[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueTableEntry_of_String_TypeSpecializerList*)THIS)->data );
  }
};

struct RogueTypeString_TypeSpecializerTableEntry : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_TypeSpecializerTableEntry );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 3592;
  }

  const char* name() { return "TableEntry<<String,TypeSpecializer>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_TypeSpecializerTableEntry*)THIS)->key );
    ROGUE_TRACE( ((RogueClassString_TypeSpecializerTableEntry*)THIS)->value );
    ROGUE_TRACE( ((RogueClassString_TypeSpecializerTableEntry*)THIS)->next_entry );
  }
};

struct RogueTypeTableEntry_of_String_CmdLabelList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueTableEntry_of_String_CmdLabelList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 3595;
  }

  const char* name() { return "TableEntry<<String,CmdLabel>>[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueTableEntry_of_String_CmdLabelList*)THIS)->data );
  }
};

struct RogueTypeString_CmdLabelTableEntry : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_CmdLabelTableEntry );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 3599;
  }

  const char* name() { return "TableEntry<<String,CmdLabel>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_CmdLabelTableEntry*)THIS)->key );
    ROGUE_TRACE( ((RogueClassString_CmdLabelTableEntry*)THIS)->value );
    ROGUE_TRACE( ((RogueClassString_CmdLabelTableEntry*)THIS)->next_entry );
  }
};

struct RogueTypeMacroArgs : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassMacroArgs );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CloneArgs;
    methods = Rogue_dynamic_method_table + 3602;
  }

  const char* name() { return "MacroArgs"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassMacroArgs*)THIS)->this_context );
    ROGUE_TRACE( ((RogueClassMacroArgs*)THIS)->method_info );
    ROGUE_TRACE( ((RogueClassMacroArgs*)THIS)->arg_lookup );
  }
};

struct RogueTypeCmdReadSingleton : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdReadSingleton );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 3607;
  }

  const char* name() { return "CmdReadSingleton"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdReadSingleton*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdReadSingleton*)THIS)->_of_type );
  }
};

struct RogueTypeCmdCreateArray : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCreateArray );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 3638;
  }

  const char* name() { return "CmdCreateArray"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCreateArray*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCreateArray*)THIS)->_array_type );
    ROGUE_TRACE( ((RogueClassCmdCreateArray*)THIS)->count_cmd );
  }
};

struct RogueTypeCmdCallRoutine : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCallRoutine );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdCall;
    methods = Rogue_dynamic_method_table + 3669;
  }

  const char* name() { return "CmdCallRoutine"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCallRoutine*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCallRoutine*)THIS)->context );
    ROGUE_TRACE( ((RogueClassCmdCallRoutine*)THIS)->method_info );
    ROGUE_TRACE( ((RogueClassCmdCallRoutine*)THIS)->args );
  }
};

struct RogueTypeCmdCall : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCall );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 3700;
  }

  const char* name() { return "CmdCall"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCall*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCall*)THIS)->context );
    ROGUE_TRACE( ((RogueClassCmdCall*)THIS)->method_info );
    ROGUE_TRACE( ((RogueClassCmdCall*)THIS)->args );
  }
};

struct RogueTypeCmdCreateObject : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCreateObject );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 3731;
  }

  const char* name() { return "CmdCreateObject"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCreateObject*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCreateObject*)THIS)->_of_type );
  }
};

struct RogueTypeCmdReadSetting : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdReadSetting );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 3762;
  }

  const char* name() { return "CmdReadSetting"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdReadSetting*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdReadSetting*)THIS)->setting_info );
  }
};

struct RogueTypeCmdReadProperty : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdReadProperty );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 3793;
  }

  const char* name() { return "CmdReadProperty"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdReadProperty*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdReadProperty*)THIS)->context );
    ROGUE_TRACE( ((RogueClassCmdReadProperty*)THIS)->property_info );
  }
};

struct RogueTypeCmdLogicalizeOptionalValue : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdLogicalizeOptionalValue );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 3824;
  }

  const char* name() { return "CmdLogicalizeOptionalValue"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdLogicalizeOptionalValue*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdLogicalizeOptionalValue*)THIS)->value );
  }
};

struct RogueTypeCmdWriteLocal : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdWriteLocal );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 3855;
  }

  const char* name() { return "CmdWriteLocal"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdWriteLocal*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdWriteLocal*)THIS)->local_info );
    ROGUE_TRACE( ((RogueClassCmdWriteLocal*)THIS)->new_value );
  }
};

struct RogueTypeCmdOpAssignSetting : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdOpAssignSetting );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdResolvedOpWithAssign;
    methods = Rogue_dynamic_method_table + 3886;
  }

  const char* name() { return "CmdOpAssignSetting"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdOpAssignSetting*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdOpAssignSetting*)THIS)->op );
    ROGUE_TRACE( ((RogueClassCmdOpAssignSetting*)THIS)->new_value );
    ROGUE_TRACE( ((RogueClassCmdOpAssignSetting*)THIS)->setting_info );
  }
};

struct RogueTypeCmdOpAssignProperty : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdOpAssignProperty );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdResolvedOpWithAssign;
    methods = Rogue_dynamic_method_table + 3917;
  }

  const char* name() { return "CmdOpAssignProperty"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdOpAssignProperty*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdOpAssignProperty*)THIS)->op );
    ROGUE_TRACE( ((RogueClassCmdOpAssignProperty*)THIS)->new_value );
    ROGUE_TRACE( ((RogueClassCmdOpAssignProperty*)THIS)->context );
    ROGUE_TRACE( ((RogueClassCmdOpAssignProperty*)THIS)->property_info );
  }
};

struct RogueTypeCmdCallInlineNativeRoutine : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCallInlineNativeRoutine );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdCallInlineNative;
    methods = Rogue_dynamic_method_table + 3948;
  }

  const char* name() { return "CmdCallInlineNativeRoutine"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCallInlineNativeRoutine*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCallInlineNativeRoutine*)THIS)->context );
    ROGUE_TRACE( ((RogueClassCmdCallInlineNativeRoutine*)THIS)->method_info );
    ROGUE_TRACE( ((RogueClassCmdCallInlineNativeRoutine*)THIS)->args );
  }
};

struct RogueTypeCmdCallInlineNative : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCallInlineNative );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdCall;
    methods = Rogue_dynamic_method_table + 3981;
  }

  const char* name() { return "CmdCallInlineNative"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCallInlineNative*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCallInlineNative*)THIS)->context );
    ROGUE_TRACE( ((RogueClassCmdCallInlineNative*)THIS)->method_info );
    ROGUE_TRACE( ((RogueClassCmdCallInlineNative*)THIS)->args );
  }
};

struct RogueTypeCmdCallNativeRoutine : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCallNativeRoutine );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdCall;
    methods = Rogue_dynamic_method_table + 4014;
  }

  const char* name() { return "CmdCallNativeRoutine"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCallNativeRoutine*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCallNativeRoutine*)THIS)->context );
    ROGUE_TRACE( ((RogueClassCmdCallNativeRoutine*)THIS)->method_info );
    ROGUE_TRACE( ((RogueClassCmdCallNativeRoutine*)THIS)->args );
  }
};

struct RogueTypeCmdReadArrayCount : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdReadArrayCount );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 4045;
  }

  const char* name() { return "CmdReadArrayCount"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdReadArrayCount*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdReadArrayCount*)THIS)->context );
    ROGUE_TRACE( ((RogueClassCmdReadArrayCount*)THIS)->_array_type );
  }
};

struct RogueTypeCmdCallInlineNativeMethod : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCallInlineNativeMethod );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdCallInlineNative;
    methods = Rogue_dynamic_method_table + 4076;
  }

  const char* name() { return "CmdCallInlineNativeMethod"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCallInlineNativeMethod*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCallInlineNativeMethod*)THIS)->context );
    ROGUE_TRACE( ((RogueClassCmdCallInlineNativeMethod*)THIS)->method_info );
    ROGUE_TRACE( ((RogueClassCmdCallInlineNativeMethod*)THIS)->args );
  }
};

struct RogueTypeCmdCallNativeMethod : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCallNativeMethod );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdCall;
    methods = Rogue_dynamic_method_table + 4109;
  }

  const char* name() { return "CmdCallNativeMethod"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCallNativeMethod*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCallNativeMethod*)THIS)->context );
    ROGUE_TRACE( ((RogueClassCmdCallNativeMethod*)THIS)->method_info );
    ROGUE_TRACE( ((RogueClassCmdCallNativeMethod*)THIS)->args );
  }
};

struct RogueTypeCmdCallAspectMethod : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCallAspectMethod );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdCall;
    methods = Rogue_dynamic_method_table + 4140;
  }

  const char* name() { return "CmdCallAspectMethod"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCallAspectMethod*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCallAspectMethod*)THIS)->context );
    ROGUE_TRACE( ((RogueClassCmdCallAspectMethod*)THIS)->method_info );
    ROGUE_TRACE( ((RogueClassCmdCallAspectMethod*)THIS)->args );
  }
};

struct RogueTypeCmdCallDynamicMethod : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCallDynamicMethod );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdCallMethod;
    methods = Rogue_dynamic_method_table + 4171;
  }

  const char* name() { return "CmdCallDynamicMethod"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCallDynamicMethod*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCallDynamicMethod*)THIS)->context );
    ROGUE_TRACE( ((RogueClassCmdCallDynamicMethod*)THIS)->method_info );
    ROGUE_TRACE( ((RogueClassCmdCallDynamicMethod*)THIS)->args );
  }
};

struct RogueTypeCmdCallMethod : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCallMethod );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdCall;
    methods = Rogue_dynamic_method_table + 4202;
  }

  const char* name() { return "CmdCallMethod"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCallMethod*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCallMethod*)THIS)->context );
    ROGUE_TRACE( ((RogueClassCmdCallMethod*)THIS)->method_info );
    ROGUE_TRACE( ((RogueClassCmdCallMethod*)THIS)->args );
  }
};

struct RogueTypeCandidateMethods : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCandidateMethods );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 4233;
  }

  RogueObject* init_object( RogueObject* THIS )
  {
    return (RogueObject*) RogueCandidateMethods__init_object( (RogueClassCandidateMethods*) THIS );
  }

  const char* name() { return "CandidateMethods"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCandidateMethods*)THIS)->type_context );
    ROGUE_TRACE( ((RogueClassCandidateMethods*)THIS)->access );
    ROGUE_TRACE( ((RogueClassCandidateMethods*)THIS)->available );
    ROGUE_TRACE( ((RogueClassCandidateMethods*)THIS)->compatible );
  }
};

struct RogueTypeCmdTaskControlSectionList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueCmdTaskControlSectionList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 4236;
  }

  const char* name() { return "CmdTaskControlSection[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueCmdTaskControlSectionList*)THIS)->data );
  }
};

struct RogueTypeCmdBlock : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdBlock );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdControlStructure;
    methods = Rogue_dynamic_method_table + 4240;
  }

  const char* name() { return "CmdBlock"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdBlock*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdBlock*)THIS)->statements );
    ROGUE_TRACE( ((RogueClassCmdBlock*)THIS)->escape_label );
    ROGUE_TRACE( ((RogueClassCmdBlock*)THIS)->upkeep_label );
    ROGUE_TRACE( ((RogueClassCmdBlock*)THIS)->task_escape_section );
    ROGUE_TRACE( ((RogueClassCmdBlock*)THIS)->task_upkeep_section );
    ROGUE_TRACE( ((RogueClassCmdBlock*)THIS)->cloned_command );
  }
};

struct RogueTypeTableEntry_of_String_CmdList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueTableEntry_of_String_CmdList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 4272;
  }

  const char* name() { return "TableEntry<<String,Cmd>>[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueTableEntry_of_String_CmdList*)THIS)->data );
  }
};

struct RogueTypeString_CmdTableEntry : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_CmdTableEntry );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 4276;
  }

  const char* name() { return "TableEntry<<String,Cmd>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_CmdTableEntry*)THIS)->key );
    ROGUE_TRACE( ((RogueClassString_CmdTableEntry*)THIS)->value );
    ROGUE_TRACE( ((RogueClassString_CmdTableEntry*)THIS)->next_entry );
  }
};

struct RogueTypeTableEntry_of_String_PropertyList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueTableEntry_of_String_PropertyList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 4279;
  }

  const char* name() { return "TableEntry<<String,Property>>[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueTableEntry_of_String_PropertyList*)THIS)->data );
  }
};

struct RogueTypeString_PropertyTableEntry : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_PropertyTableEntry );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 4283;
  }

  const char* name() { return "TableEntry<<String,Property>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_PropertyTableEntry*)THIS)->key );
    ROGUE_TRACE( ((RogueClassString_PropertyTableEntry*)THIS)->value );
    ROGUE_TRACE( ((RogueClassString_PropertyTableEntry*)THIS)->next_entry );
  }
};

struct RogueTypeDirectiveTokenType : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassDirectiveTokenType );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_TokenType;
    methods = Rogue_dynamic_method_table + 4286;
  }

  const char* name() { return "DirectiveTokenType"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassDirectiveTokenType*)THIS)->name );
  }
};

struct RogueTypeStructuralDirectiveTokenType : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassStructuralDirectiveTokenType );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_TokenType;
    methods = Rogue_dynamic_method_table + 4303;
  }

  const char* name() { return "StructuralDirectiveTokenType"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassStructuralDirectiveTokenType*)THIS)->name );
  }
};

struct RogueTypeEOLTokenType : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassEOLTokenType );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_TokenType;
    methods = Rogue_dynamic_method_table + 4320;
  }

  const char* name() { return "EOLTokenType"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassEOLTokenType*)THIS)->name );
  }
};

struct RogueTypeStructureTokenType : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassStructureTokenType );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_TokenType;
    methods = Rogue_dynamic_method_table + 4337;
  }

  const char* name() { return "StructureTokenType"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassStructureTokenType*)THIS)->name );
  }
};

struct RogueTypeOpWithAssignTokenType : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassOpWithAssignTokenType );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_TokenType;
    methods = Rogue_dynamic_method_table + 4354;
  }

  const char* name() { return "OpWithAssignTokenType"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassOpWithAssignTokenType*)THIS)->name );
  }
};

struct RogueTypeEOLToken : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassEOLToken );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Token;
    methods = Rogue_dynamic_method_table + 4371;
  }

  const char* name() { return "EOLToken"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassEOLToken*)THIS)->_type );
    ROGUE_TRACE( ((RogueClassEOLToken*)THIS)->filepath );
    ROGUE_TRACE( ((RogueClassEOLToken*)THIS)->comment );
  }
};

struct RogueTypeString_TokenListTable : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_TokenListTable );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 4386;
  }

  const char* name() { return "Table<<String,Token[]>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_TokenListTable*)THIS)->bins );
    ROGUE_TRACE( ((RogueClassString_TokenListTable*)THIS)->keys );
  }
};

struct RogueTypePreprocessorTokenReader : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassPreprocessorTokenReader );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 4389;
  }

  RogueObject* init_object( RogueObject* THIS )
  {
    return (RogueObject*) RoguePreprocessorTokenReader__init_object( (RogueClassPreprocessorTokenReader*) THIS );
  }

  const char* name() { return "PreprocessorTokenReader"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassPreprocessorTokenReader*)THIS)->tokens );
    ROGUE_TRACE( ((RogueClassPreprocessorTokenReader*)THIS)->queue );
  }
};

struct RogueTypeCmdSwitch : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdSwitch );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdControlStructure;
    methods = Rogue_dynamic_method_table + 4392;
  }

  const char* name() { return "CmdSwitch"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdSwitch*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdSwitch*)THIS)->statements );
    ROGUE_TRACE( ((RogueClassCmdSwitch*)THIS)->escape_label );
    ROGUE_TRACE( ((RogueClassCmdSwitch*)THIS)->upkeep_label );
    ROGUE_TRACE( ((RogueClassCmdSwitch*)THIS)->task_escape_section );
    ROGUE_TRACE( ((RogueClassCmdSwitch*)THIS)->task_upkeep_section );
    ROGUE_TRACE( ((RogueClassCmdSwitch*)THIS)->cloned_command );
    ROGUE_TRACE( ((RogueClassCmdSwitch*)THIS)->expression );
    ROGUE_TRACE( ((RogueClassCmdSwitch*)THIS)->cases );
    ROGUE_TRACE( ((RogueClassCmdSwitch*)THIS)->case_others );
  }
};

struct RogueTypeCmdReadArrayElement : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdReadArrayElement );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 4424;
  }

  const char* name() { return "CmdReadArrayElement"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdReadArrayElement*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdReadArrayElement*)THIS)->context );
    ROGUE_TRACE( ((RogueClassCmdReadArrayElement*)THIS)->_array_type );
    ROGUE_TRACE( ((RogueClassCmdReadArrayElement*)THIS)->index );
  }
};

struct RogueTypeCmdWriteArrayElement : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdWriteArrayElement );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 4455;
  }

  const char* name() { return "CmdWriteArrayElement"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdWriteArrayElement*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdWriteArrayElement*)THIS)->context );
    ROGUE_TRACE( ((RogueClassCmdWriteArrayElement*)THIS)->_array_type );
    ROGUE_TRACE( ((RogueClassCmdWriteArrayElement*)THIS)->index );
    ROGUE_TRACE( ((RogueClassCmdWriteArrayElement*)THIS)->new_value );
  }
};

struct RogueTypeCmdConvertToPrimitiveType : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdConvertToPrimitiveType );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdConvertToType;
    methods = Rogue_dynamic_method_table + 4486;
  }

  const char* name() { return "CmdConvertToPrimitiveType"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdConvertToPrimitiveType*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdConvertToPrimitiveType*)THIS)->operand );
    ROGUE_TRACE( ((RogueClassCmdConvertToPrimitiveType*)THIS)->_target_type );
  }
};

struct RogueTypeCmdAdjustProperty : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdAdjustProperty );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Cmd;
    methods = Rogue_dynamic_method_table + 4517;
  }

  const char* name() { return "CmdAdjustProperty"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdAdjustProperty*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdAdjustProperty*)THIS)->context );
    ROGUE_TRACE( ((RogueClassCmdAdjustProperty*)THIS)->property_info );
  }
};

struct RogueTypeCmdCallStaticMethod : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassCmdCallStaticMethod );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_CmdCallMethod;
    methods = Rogue_dynamic_method_table + 4548;
  }

  const char* name() { return "CmdCallStaticMethod"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassCmdCallStaticMethod*)THIS)->t );
    ROGUE_TRACE( ((RogueClassCmdCallStaticMethod*)THIS)->context );
    ROGUE_TRACE( ((RogueClassCmdCallStaticMethod*)THIS)->method_info );
    ROGUE_TRACE( ((RogueClassCmdCallStaticMethod*)THIS)->args );
  }
};

struct RogueTypeTableEntry_of_String_TokenListList : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueTableEntry_of_String_TokenListList );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_GenericList;
    methods = Rogue_dynamic_method_table + 4579;
  }

  const char* name() { return "TableEntry<<String,Token[]>>[]"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueTableEntry_of_String_TokenListList*)THIS)->data );
  }
};

struct RogueTypeString_TokenListTableEntry : RogueType
{
  void configure()
  {
    object_size = (int) sizeof( RogueClassString_TokenListTableEntry );
    base_type_count = 1;
    base_types = new RogueType*[ base_type_count ];
    base_types[0] = (RogueType*) Rogue_program.type_Object;
    methods = Rogue_dynamic_method_table + 4583;
  }

  const char* name() { return "TableEntry<<String,Token[]>>"; }

  void trace( RogueObject* THIS )
  {
    ROGUE_TRACE( ((RogueClassString_TokenListTableEntry*)THIS)->key );
    ROGUE_TRACE( ((RogueClassString_TokenListTableEntry*)THIS)->value );
    ROGUE_TRACE( ((RogueClassString_TokenListTableEntry*)THIS)->next_entry );
  }
};


void RogueStringBuilder__init_class();
void RogueTokenType__init_class();
RogueInteger RogueMath__mod__Integer_Integer( RogueInteger a_0, RogueInteger b_1 );
RogueLong RogueMath__mod__Long_Long( RogueLong a_0, RogueLong b_1 );
RogueReal RogueMath__mod__Real_Real( RogueReal a_0, RogueReal b_1 );
void RogueSystem__exit__Integer( RogueInteger result_code_0 );
void RogueSystem__init_class();
RogueString* RogueFile__absolute_filepath__String( RogueString* filepath_0 );
RogueLogical RogueFile__exists__String( RogueString* filepath_0 );
RogueString* RogueFile__filename__String( RogueString* filepath_0 );
RogueLogical RogueFile__is_folder__String( RogueString* filepath_0 );
RogueByteList* RogueFile__load_as_bytes__String( RogueString* filepath_0 );
RogueString* RogueFile__path__String( RogueString* filepath_0 );
RogueClassFileReader* RogueFile__reader__String( RogueString* filepath_0 );
RogueLogical RogueFile__save__String_String( RogueString* filepath_0, RogueString* data_1 );
RogueInteger RogueFile__size__String( RogueString* filepath_0 );
RogueClassFileWriter* RogueFile__writer__String( RogueString* filepath_0 );
void RoguePreprocessor__init_class();

void RogueStringBuilder__init_class()
{
  RogueStringBuilder::work_bytes = ((RogueByteList__init( ((RogueByteList*)Rogue_program.type_ByteList->create_and_init_object()) )));
}

void RogueTokenType__init_class()
{
}

RogueInteger RogueMath__mod__Integer_Integer( RogueInteger a_0, RogueInteger b_1 )
{
  if (((!(!!(a_0)) && !(!!(b_1))) || b_1 == 1))
  {
    return (RogueInteger)(0);
  }
  RogueInteger r_2 = (a_0 % b_1);
  if ((a_0 ^ b_1) < 0)
  {
    if (!!(r_2))
    {
      return (RogueInteger)((r_2 + b_1));
    }
    else
    {
      return (RogueInteger)(0);
    }
  }
  else
  {
    return (RogueInteger)(r_2);
  }
}

RogueLong RogueMath__mod__Long_Long( RogueLong a_0, RogueLong b_1 )
{
  if (((!(!!(a_0)) && !(!!(b_1))) || b_1 == ((RogueLong)1)))
  {
    return (RogueLong)(((RogueLong)0));
  }
  RogueInteger r_2 = (a_0 % b_1);
  if ((a_0 ^ b_1) < ((RogueLong)0))
  {
    if (!!(r_2))
    {
      return (RogueLong)((((RogueLong)r_2) + b_1));
    }
    else
    {
      return (RogueLong)(((RogueLong)0));
    }
  }
  else
  {
    return (RogueLong)(((RogueLong)r_2));
  }
}

RogueReal RogueMath__mod__Real_Real( RogueReal a_0, RogueReal b_1 )
{
  RogueReal q_2 = ((a_0 / b_1));
  return (RogueReal)((a_0 - (floor((double)q_2) * b_1)));
}

void RogueSystem__exit__Integer( RogueInteger result_code_0 )
{
  exit( result_code_0 );
}

void RogueSystem__init_class()
{
  RogueClassSystem::command_line_arguments = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
}

RogueString* RogueFile__absolute_filepath__String( RogueString* filepath_0 )
{
  if ( !filepath_0 ) return 0;

  char c_filepath[ PATH_MAX ];
  filepath_0->to_c_string( c_filepath, PATH_MAX );

#if defined(_WIN32)
  {
    char long_name[PATH_MAX+4];
    char full_name[PATH_MAX+4];

    if (GetLongPathName(c_filepath, long_name, PATH_MAX+4) == 0)
    {
      strcpy_s( long_name, PATH_MAX+4, c_filepath );
    }

    if (GetFullPathName(long_name, PATH_MAX+4, full_name, 0) == 0)
    {
      // bail with name unchanged 
      return filepath_0;
    }

    return RogueString::create( full_name );
  }
#else

  bool is_folder = RogueFile__is_folder__String( filepath_0 );

  {
    int original_dir_fd;
    int new_dir_fd;
    char filename[PATH_MAX];

    // A way to get back to the starting folder when finished.
    original_dir_fd = open( ".", O_RDONLY );  

    if (is_folder)
    {
      filename[0] = 0;
    }
    else
    {
      // fchdir only works with a path, not a path+filename (c_filepath).
      // Copy out the filename and null terminate the filepath to be just a path.
      int i = (int) strlen( c_filepath ) - 1;
      while (i >= 0 && c_filepath[i] != '/') --i;
      strcpy( filename, c_filepath+i+1 );
      c_filepath[i] = 0;
    }
    new_dir_fd = open( c_filepath, O_RDONLY );

    if (original_dir_fd >= 0 && new_dir_fd >= 0)
    {
      fchdir( new_dir_fd );
      getcwd( c_filepath, PATH_MAX );
      if ( !is_folder ) 
      {
        strcat( c_filepath, "/" );
        strcat( c_filepath, filename );
      }
      fchdir( original_dir_fd );
    }
    if (original_dir_fd >= 0) close( original_dir_fd );
    if (new_dir_fd >= 0) close( new_dir_fd );

    return RogueString::create( c_filepath );
  }
#endif
}

RogueLogical RogueFile__exists__String( RogueString* filepath_0 )
{
  if ( !filepath_0 ) return false;

  char c_filepath[ PATH_MAX ];
  filepath_0->to_c_string( c_filepath, PATH_MAX );

  FILE* fp = fopen( c_filepath, "rb" );
  if ( !fp ) return false;

  fclose( fp );
  return true;
}

RogueString* RogueFile__filename__String( RogueString* filepath_0 )
{
  RogueOptionalInteger i_1 = (((RogueString__locate_last__Character_OptionalInteger( filepath_0, (RogueCharacter)'/', RogueOptionalInteger() ))));
  if (!(i_1.exists))
  {
    i_1 = ((RogueOptionalInteger)((RogueString__locate_last__Character_OptionalInteger( filepath_0, (RogueCharacter)'\\', RogueOptionalInteger() ))));
  }
  if (!(i_1.exists))
  {
    return (RogueString*)(filepath_0);
  }
  return (RogueString*)(((RogueString__from__Integer( filepath_0, (i_1.value + 1) ))));
}

RogueLogical RogueFile__is_folder__String( RogueString* filepath_0 )
{
  if ( !filepath_0 ) return false;

  char c_filepath[ PATH_MAX ];
  filepath_0->to_c_string( c_filepath, PATH_MAX );

#if defined(_WIN32)
    char filepath_copy[PATH_MAX];
    strcpy( filepath_copy, c_filepath );

    int path_len = strlen( c_filepath );
    int i = strlen(filepath_copy)-1;
    while (i > 0 && (filepath_copy[i] == '/' || filepath_copy[i] == '\\')) filepath_copy[i--] = 0;

    // Windows allows dir\* to count as a directory; guard against.
    for (i=0; filepath_copy[i]; ++i)
    {
      if (filepath_copy[i] == '*' || filepath_copy[i] == '?') return 0;
    }

    WIN32_FIND_DATA entry;
    HANDLE dir = FindFirstFile( filepath_copy, &entry );
    if (dir != INVALID_HANDLE_VALUE)
    {
      if (entry.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
      {
        FindClose( dir );
        return 1;
      }
    }
    FindClose( dir );
    return 0;

#else
    DIR* dir = opendir( c_filepath );
    if ( !dir ) return 0;

    closedir( dir );
    return 1;
#endif
}

RogueByteList* RogueFile__load_as_bytes__String( RogueString* filepath_0 )
{
  RogueInteger count_1 = ((RogueFile__size__String( filepath_0 )));
  RogueByteList* bytes_2 = (((RogueByteList__init__Integer( ((RogueByteList*)Rogue_program.type_ByteList->create_and_init_object()), count_1 ))));
  RogueClassFileReader* infile_3 = ((RogueFile__reader__String( filepath_0 )));
  {
    RogueInteger _auto_198_4 = (1);
    RogueInteger _auto_199_5 = (count_1);
    for (;_auto_198_4 <= _auto_199_5;++_auto_198_4)
    {
      RogueByteList__add__Byte( bytes_2, ((RogueByte)(((RogueFileReader__read( infile_3 ))))) );
    }
  }
  RogueFileReader__close( infile_3 );
  return (RogueByteList*)(bytes_2);
}

RogueString* RogueFile__path__String( RogueString* filepath_0 )
{
  RogueOptionalInteger i_1 = (((RogueString__locate_last__Character_OptionalInteger( filepath_0, (RogueCharacter)'/', RogueOptionalInteger() ))));
  if (!(i_1.exists))
  {
    i_1 = ((RogueOptionalInteger)((RogueString__locate_last__Character_OptionalInteger( filepath_0, (RogueCharacter)'\\', RogueOptionalInteger() ))));
  }
  if (!(i_1.exists))
  {
    return (RogueString*)(Rogue_program.literal_strings[0]);
  }
  return (RogueString*)(((RogueString__from__Integer_Integer( filepath_0, 0, (i_1.value - 1) ))));
}

RogueClassFileReader* RogueFile__reader__String( RogueString* filepath_0 )
{
  return (RogueClassFileReader*)(((RogueFileReader__init__String( ((RogueClassFileReader*)Rogue_program.type_FileReader->create_and_init_object()), filepath_0 ))));
}

RogueLogical RogueFile__save__String_String( RogueString* filepath_0, RogueString* data_1 )
{
  RogueClassFileWriter* outfile_2 = ((RogueFile__writer__String( filepath_0 )));
  {
    RogueString* _auto_600_3 = (data_1);
    RogueInteger _auto_601_4 = (0);
    for (;_auto_601_4 < _auto_600_3->count;++_auto_601_4)
    {
      RogueCharacter ch_5 = (_auto_600_3->characters[_auto_601_4]);
      RogueFileWriter__write__Character( outfile_2, ch_5 );
    }
  }
  RogueFileWriter__close( outfile_2 );
  return (RogueLogical)(true);
}

RogueInteger RogueFile__size__String( RogueString* filepath_0 )
{
  if ( !filepath_0 ) return 0;

  char c_filepath[ PATH_MAX ];
  filepath_0->to_c_string( c_filepath, sizeof(c_filepath) );

  FILE* fp = fopen( c_filepath, "rb" );
  if ( !fp ) return 0;

  fseek( fp, 0, SEEK_END );
  RogueInteger size = (RogueInteger) ftell( fp );
  fclose( fp );

  return size;
}

RogueClassFileWriter* RogueFile__writer__String( RogueString* filepath_0 )
{
  return (RogueClassFileWriter*)(((RogueFileWriter__init__String( ((RogueClassFileWriter*)Rogue_program.type_FileWriter->create_and_init_object()), filepath_0 ))));
}

void RoguePreprocessor__init_class()
{
  RogueClassPreprocessor::definitions = ((RogueString_TokenListTable__init( ((RogueClassString_TokenListTable*)Rogue_program.type_String_TokenListTable->create_and_init_object()) )));
}


RogueString* RogueInteger__to_String( RogueInteger THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Integer( Rogue_program.literal_strings[0], THIS ))));
}

RogueString* RogueString__after_first__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInteger i_1 = (((RogueString__locate__Character_OptionalInteger( THIS, ch_0, RogueOptionalInteger() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Integer( THIS, (i_1.value + 1) ))));
  }
  else
  {
    return (RogueString*)(Rogue_program.literal_strings[0]);
  }
}

RogueString* RogueString__after_first__String( RogueString* THIS, RogueString* st_0 )
{
  RogueOptionalInteger i_1 = (((RogueString__locate__String_OptionalInteger( THIS, st_0, RogueOptionalInteger() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Integer( THIS, (i_1.value + st_0->count) ))));
  }
  else
  {
    return (RogueString*)(Rogue_program.literal_strings[0]);
  }
}

RogueString* RogueString__after_last__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInteger i_1 = (((RogueString__locate_last__Character_OptionalInteger( THIS, ch_0, RogueOptionalInteger() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Integer( THIS, (i_1.value + 1) ))));
  }
  else
  {
    return (RogueString*)(Rogue_program.literal_strings[0]);
  }
}

RogueString* RogueString__before_first__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInteger i_1 = (((RogueString__locate__Character_OptionalInteger( THIS, ch_0, RogueOptionalInteger() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Integer_Integer( THIS, 0, (i_1.value - 1) ))));
  }
  else
  {
    return (RogueString*)(THIS);
  }
}

RogueString* RogueString__before_first__String( RogueString* THIS, RogueString* st_0 )
{
  RogueOptionalInteger i_1 = (((RogueString__locate__String_OptionalInteger( THIS, st_0, RogueOptionalInteger() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Integer_Integer( THIS, 0, (i_1.value - 1) ))));
  }
  else
  {
    return (RogueString*)(THIS);
  }
}

RogueString* RogueString__before_last__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInteger i_1 = (((RogueString__locate_last__Character_OptionalInteger( THIS, ch_0, RogueOptionalInteger() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Integer_Integer( THIS, 0, (i_1.value - 1) ))));
  }
  else
  {
    return (RogueString*)(THIS);
  }
}

RogueString* RogueString__before_last__String( RogueString* THIS, RogueString* st_0 )
{
  RogueOptionalInteger i_1 = (((RogueString__locate_last__String_OptionalInteger( THIS, st_0, RogueOptionalInteger() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Integer_Integer( THIS, 0, (i_1.value - 1) ))));
  }
  else
  {
    return (RogueString*)(THIS);
  }
}

RogueLogical RogueString__begins_with__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  return (RogueLogical)((!!(THIS->count) && THIS->characters[0] == ch_0));
}

RogueLogical RogueString__begins_with__String( RogueString* THIS, RogueString* other_0 )
{
  RogueInteger other_count_1 = (other_0->count);
  return (RogueLogical)((THIS->count >= other_count_1 && ((RogueString__contains_at__String_Integer( THIS, other_0, 0 )))));
}

RogueLogical RogueString__contains__String( RogueString* THIS, RogueString* substring_0 )
{
  return (RogueLogical)(((RogueString__locate__String_OptionalInteger( THIS, substring_0, RogueOptionalInteger() ))).exists);
}

RogueLogical RogueString__contains_at__String_Integer( RogueString* THIS, RogueString* substring_0, RogueInteger at_index_1 )
{
  RogueInteger other_count = substring_0->count;
  if (at_index_1 < 0 || at_index_1 + other_count > THIS->count) return false;

  RogueCharacter* this_data  = THIS->characters;
  RogueCharacter* other_data = substring_0->characters;

  int i = -1;
  int i2 = other_count - 1;
  while (++i <= i2)
  {
    if (this_data[at_index_1+i] != other_data[i]) return false;
  }

  return true;
}

RogueLogical RogueString__ends_with__String( RogueString* THIS, RogueString* other_0 )
{
  RogueInteger other_count_1 = (other_0->count);
  return (RogueLogical)(((THIS->count >= other_count_1 && other_count_1 > 0) && ((RogueString__contains_at__String_Integer( THIS, other_0, (THIS->count - other_count_1) )))));
}

RogueString* RogueString__from__Integer( RogueString* THIS, RogueInteger i1_0 )
{
  return (RogueString*)(((RogueString__from__Integer_Integer( THIS, i1_0, (THIS->count - 1) ))));
}

RogueString* RogueString__from__Integer_Integer( RogueString* THIS, RogueInteger i1_0, RogueInteger i2_1 )
{
  // Clamp i1 and i2
  if (i1_0 < 0) i1_0 = 0;
  if (i2_1 >= THIS->count) i2_1 = THIS->count - 1;

  // Return empty quotes if zero-length
  if (i1_0 > i2_1) return Rogue_program.literal_strings[0]; // empty string

  int new_count = (i2_1 - i1_0) + 1;

  RogueString* result = RogueString::create( new_count );

  // Copy character substring while computing hash code.
  RogueCharacter* dest = result->characters - 1;
  RogueCharacter* src  = (THIS->characters + i1_0) - 1;
  RogueInteger hash_code = 0;
  while (--new_count >= 0)
  {
    RogueCharacter ch = *(++src);
    *(++dest) = ch;
    hash_code = ((hash_code << 3) - hash_code) + ch;  // hash * 7 + ch
  }

  result->hash_code = hash_code;
  return result;
}

RogueString* RogueString__from_first__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInteger i_1 = (((RogueString__locate__Character_OptionalInteger( THIS, ch_0, RogueOptionalInteger() ))));
  if (!(i_1.exists))
  {
    return (RogueString*)(Rogue_program.literal_strings[0]);
  }
  return (RogueString*)(((RogueString__from__Integer( THIS, i_1.value ))));
}

RogueCharacter RogueString__last( RogueString* THIS )
{
  return (RogueCharacter)(THIS->characters[(THIS->count - 1)]);
}

RogueString* RogueString__leftmost__Integer( RogueString* THIS, RogueInteger n_0 )
{
  if (n_0 >= 0)
  {
    return (RogueString*)(((RogueString__from__Integer_Integer( THIS, 0, (n_0 - 1) ))));
  }
  else
  {
    return (RogueString*)(((RogueString__from__Integer_Integer( THIS, 0, ((THIS->count + n_0) - 1) ))));
  }
}

RogueOptionalInteger RogueString__locate__Character_OptionalInteger( RogueString* THIS, RogueCharacter ch_0, RogueOptionalInteger optional_i1_1 )
{
  RogueInteger    limit = THIS->count;
  RogueCharacter* data  = THIS->characters;
  RogueInteger    i1 = optional_i1_1.exists ? (optional_i1_1.value-1) : -1;

  while (++i1 < limit)
  {
    if (data[i1] == ch_0)
    {
      return RogueOptionalInteger(i1);
    }
  }
  return RogueOptionalInteger();
}

RogueOptionalInteger RogueString__locate__String_OptionalInteger( RogueString* THIS, RogueString* other_0, RogueOptionalInteger optional_i1_1 )
{
  RogueInteger other_count_2 = (other_0->count);
  if (other_count_2 == 1)
  {
    return (RogueOptionalInteger)(((RogueString__locate__Character_OptionalInteger( THIS, other_0->characters[0], optional_i1_1 ))));
  }
  RogueInteger this_limit_3 = (((THIS->count - other_count_2) + 1));
  if ((other_count_2 == 0 || this_limit_3 <= 0))
  {
    return (RogueOptionalInteger)(RogueOptionalInteger());
  }
  RogueInteger i1_4 = 0;
  if (optional_i1_1.exists)
  {
    i1_4 = ((RogueInteger)(optional_i1_1.value - 1));
    if (i1_4 < -1)
    {
      i1_4 = ((RogueInteger)-1);
    }
  }
  else
  {
    i1_4 = ((RogueInteger)-1);
  }
  while (++i1_4 < this_limit_3)
  {
    if (((RogueString__contains_at__String_Integer( THIS, other_0, i1_4 ))))
    {
      return (RogueOptionalInteger)(RogueOptionalInteger( i1_4 ));
    }
  }
  return (RogueOptionalInteger)(RogueOptionalInteger());
}

RogueOptionalInteger RogueString__locate_last__Character_OptionalInteger( RogueString* THIS, RogueCharacter ch_0, RogueOptionalInteger starting_index_1 )
{
  RogueInteger    limit = THIS->count;
  RogueCharacter* data  = THIS->characters;

  int i;
  if (starting_index_1.exists)
  {
    i = starting_index_1.value + 1;
    if (i > limit) i = limit;
  }
  else
  {
    i = limit;
  }

  while (--i >= 0)
  {
    if (data[i] == ch_0) return RogueOptionalInteger(i);
  }

  return RogueOptionalInteger();
}

RogueOptionalInteger RogueString__locate_last__String_OptionalInteger( RogueString* THIS, RogueString* other_0, RogueOptionalInteger starting_index_1 )
{
  RogueInteger other_count_2 = (other_0->count);
  if (other_count_2 == 1)
  {
    return (RogueOptionalInteger)(((RogueString__locate_last__Character_OptionalInteger( THIS, other_0->characters[0], starting_index_1 ))));
  }
  RogueInteger this_limit_3 = (((THIS->count - other_count_2) + 1));
  if ((other_count_2 == 0 || this_limit_3 <= 0))
  {
    return (RogueOptionalInteger)(RogueOptionalInteger());
  }
  RogueInteger i_4 = 0;
  if (starting_index_1.exists)
  {
    i_4 = ((RogueInteger)(starting_index_1.value + 1));
    if (i_4 > this_limit_3)
    {
      i_4 = ((RogueInteger)this_limit_3);
    }
  }
  else
  {
    i_4 = ((RogueInteger)this_limit_3);
  }
  while (--i_4 >= 0)
  {
    if (((RogueString__contains_at__String_Integer( THIS, other_0, i_4 ))))
    {
      return (RogueOptionalInteger)(RogueOptionalInteger( i_4 ));
    }
  }
  return (RogueOptionalInteger)(RogueOptionalInteger());
}

RogueString* RogueString__operatorPLUS__Character( RogueString* THIS, RogueCharacter value_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__Character( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), THIS ))), value_0 ))) ))));
}

RogueString* RogueString__operatorPLUS__Integer( RogueString* THIS, RogueInteger value_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__Integer( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), THIS ))), value_0 ))) ))));
}

RogueInteger RogueString__operatorLESSTHANGREATERTHAN__String( RogueString* THIS, RogueString* other_0 )
{
  if (THIS == other_0) return 0;

  RogueInteger other_count = other_0->count;
  RogueInteger limit = THIS->count;

  int result;
  if (limit == other_count)
  {
    // Strings are same length
    result = memcmp( THIS->characters, other_0->characters, limit * sizeof(RogueCharacter) );
    if (result == 0) return 0;
  }
  else
  {
    // Strings differ in length.  Compare the part that matches first.
    if (limit > other_count) limit = other_count;
    result = memcmp( THIS->characters, other_0->characters, limit * sizeof(RogueCharacter) );
    if (result == 0)
    {
      // Equal so far - the shorter string comes before the longer one.
      if (limit == other_count) return 1;
      return -1;
    }
  }
  if (result < 0) return -1;
  else            return 1;
}

RogueString* RogueString__operatorPLUS__Long( RogueString* THIS, RogueLong value_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__Long( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), THIS ))), value_0 ))) ))));
}

RogueString* RogueString__operatorPLUS__Object( RogueString* THIS, RogueObject* value_0 )
{
  if (!!(value_0))
  {
    return (RogueString*)(((RogueString__operatorPLUS__String( THIS, (call_ROGUEM2( 1, (RogueObject*)(value_0) )) ))));
  }
  else
  {
    return (RogueString*)(((RogueString__operatorPLUS__String( THIS, Rogue_program.literal_strings[2] ))));
  }
}

RogueString* RogueString__operatorPLUS__Real( RogueString* THIS, RogueReal value_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__Real( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), THIS ))), value_0 ))) ))));
}

RogueString* RogueString__operatorPLUS__String( RogueString* THIS, RogueString* value_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), THIS ))), value_0 ))) ))));
}

RogueClassStringReader* RogueString__reader( RogueString* THIS )
{
  return (RogueClassStringReader*)(((RogueStringReader__init__String( ((RogueClassStringReader*)Rogue_program.type_StringReader->create_and_init_object()), THIS ))));
}

RogueString* RogueString__replace__Character_Character( RogueString* THIS, RogueCharacter existing_ch_0, RogueCharacter replacement_ch_1 )
{
  {
    {
      {
        RogueString* _auto_17_3 = (THIS);
        RogueInteger _auto_18_4 = (0);
        for (;_auto_18_4 < _auto_17_3->count;++_auto_18_4)
        {
          RogueCharacter ch_5 = (_auto_17_3->characters[_auto_18_4]);
          if ( !(ch_5 != existing_ch_0) ) goto _auto_19;
        }
      }
      return (RogueString*)(THIS);
      goto _auto_16;
    }
    _auto_19:;
    RogueStringBuilder* result_2 = (((RogueStringBuilder__init__Integer( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()), THIS->count ))));
    {
      RogueString* _auto_20_6 = (THIS);
      RogueInteger _auto_21_7 = (0);
      for (;_auto_21_7 < _auto_20_6->count;++_auto_21_7)
      {
        RogueCharacter ch_8 = (_auto_20_6->characters[_auto_21_7]);
        if (ch_8 == existing_ch_0)
        {
          RogueStringBuilder__print__Character( result_2, replacement_ch_1 );
        }
        else
        {
          RogueStringBuilder__print__Character( result_2, ch_8 );
        }
      }
    }
    return (RogueString*)(((RogueStringBuilder__to_String( result_2 ))));
  }
  _auto_16:;
}

RogueString* RogueString__rightmost__Integer( RogueString* THIS, RogueInteger n_0 )
{
  RogueInteger this_count_1 = (THIS->count);
  if (n_0 < 0)
  {
    return (RogueString*)(((RogueString__from__Integer_Integer( THIS, (-(n_0)), (this_count_1 - 1) ))));
  }
  else
  {
    return (RogueString*)(((RogueString__from__Integer_Integer( THIS, (this_count_1 - n_0), (this_count_1 - 1) ))));
  }
}

RogueStringList* RogueString__split__Character( RogueString* THIS, RogueCharacter separator_0 )
{
  RogueStringList* result_1 = (((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) ))));
  RogueInteger i1_2 = (0);
  RogueOptionalInteger i2_3 = (((RogueString__locate__Character_OptionalInteger( THIS, separator_0, RogueOptionalInteger( i1_2 ) ))));
  while (i2_3.exists)
  {
    RogueStringList__add__String( result_1, ((RogueString__from__Integer_Integer( THIS, i1_2, (i2_3.value - 1) ))) );
    i1_2 = ((RogueInteger)(i2_3.value + 1));
    i2_3 = ((RogueOptionalInteger)((RogueString__locate__Character_OptionalInteger( THIS, separator_0, RogueOptionalInteger( i1_2 ) ))));
  }
  RogueStringList__add__String( result_1, ((RogueString__from__Integer( THIS, i1_2 ))) );
  return (RogueStringList*)(result_1);
}

RogueString* RogueString__to_lowercase( RogueString* THIS )
{
  RogueLogical has_uc_0 = (false);
  {
    RogueString* _auto_24_2 = (THIS);
    RogueInteger _auto_25_3 = (0);
    for (;_auto_25_3 < _auto_24_2->count;++_auto_25_3)
    {
      RogueCharacter ch_4 = (_auto_24_2->characters[_auto_25_3]);
      if ((ch_4 >= (RogueCharacter)'A' && ch_4 <= (RogueCharacter)'Z'))
      {
        has_uc_0 = ((RogueLogical)true);
        goto _auto_26;
      }
    }
  }
  _auto_26:;
  if (!(has_uc_0))
  {
    return (RogueString*)(THIS);
  }
  RogueStringBuilder* result_1 = (((RogueStringBuilder__init__Integer( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()), THIS->count ))));
  {
    RogueString* _auto_27_5 = (THIS);
    RogueInteger _auto_28_6 = (0);
    for (;_auto_28_6 < _auto_27_5->count;++_auto_28_6)
    {
      RogueCharacter ch_7 = (_auto_27_5->characters[_auto_28_6]);
      if ((ch_7 >= (RogueCharacter)'A' && ch_7 <= (RogueCharacter)'Z'))
      {
        RogueStringBuilder__print__Character( result_1, ((RogueCharacter)(((ch_7 - (RogueCharacter)'A') + ((RogueInteger)((RogueCharacter)'a'))))) );
      }
      else
      {
        RogueStringBuilder__print__Character( result_1, ch_7 );
      }
    }
  }
  return (RogueString*)(((RogueStringBuilder__to_String( result_1 ))));
}

RogueStringList* RogueString__word_wrapped__Integer( RogueString* THIS, RogueInteger width_0 )
{
  return (RogueStringList*)(((RogueString__split__Character( ((RogueStringBuilder__to_String( ((RogueString__word_wrapped__Integer_StringBuilder( THIS, width_0, ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))) ))) ))), (RogueCharacter)10 ))));
}

RogueStringBuilder* RogueString__word_wrapped__Integer_StringBuilder( RogueString* THIS, RogueInteger width_0, RogueStringBuilder* buffer_1 )
{
  RogueInteger i1_2 = 0;
  RogueInteger i2_3 = 0;
  RogueInteger len_4 = (THIS->count);
  if (len_4 == 0)
  {
    return (RogueStringBuilder*)(buffer_1);
  }
  RogueLogical needs_newline_5 = (false);
  while (i2_3 < len_4)
  {
    while ((((i2_3 - i1_2) < width_0 && i2_3 < len_4) && THIS->characters[i2_3] != (RogueCharacter)10))
    {
      ++i2_3;
    }
    if ((i2_3 - i1_2) == width_0)
    {
      if (i2_3 >= len_4)
      {
        i2_3 = ((RogueInteger)len_4);
      }
      else
      {
        while (((THIS->characters[i2_3] != (RogueCharacter)' ' && THIS->characters[i2_3] != (RogueCharacter)10) && i2_3 > i1_2))
        {
          --i2_3;
        }
        if (i2_3 == i1_2)
        {
          i2_3 = ((RogueInteger)(i1_2 + width_0));
        }
      }
    }
    if (needs_newline_5)
    {
      RogueStringBuilder__println( buffer_1 );
    }
    {
      RogueInteger i_6 = (i1_2);
      RogueInteger _auto_6_7 = ((i2_3 - 1));
      for (;i_6 <= _auto_6_7;++i_6)
      {
        RogueStringBuilder__print__Character( buffer_1, THIS->characters[i_6] );
      }
    }
    needs_newline_5 = ((RogueLogical)true);
    if (i2_3 == len_4)
    {
      return (RogueStringBuilder*)(buffer_1);
    }
    else
    {
      switch (((RogueInteger)(THIS->characters[i2_3])))
      {
        case (RogueCharacter)' ':
        {
          while ((i2_3 < len_4 && THIS->characters[i2_3] == (RogueCharacter)' '))
          {
            ++i2_3;
          }
          if ((i2_3 < len_4 && THIS->characters[i2_3] == (RogueCharacter)10))
          {
            ++i2_3;
          }
          break;
        }
        case (RogueCharacter)10:
        {
          ++i2_3;
          break;
        }
      }
      i1_2 = ((RogueInteger)i2_3);
    }
  }
  return (RogueStringBuilder*)(buffer_1);
}

RogueString* RogueCharacterList__to_String( RogueCharacterList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueCharacterList* _auto_188_2 = (THIS);
    RogueInteger _auto_189_3 = (0);
    for (;_auto_189_3 < _auto_188_2->count;++_auto_189_3)
    {
      RogueCharacter value_4 = (_auto_188_2->data->characters[_auto_189_3]);
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Character( buffer_0, value_4 ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueCharacterList__type_name( RogueCharacterList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[915]);
}

RogueCharacterList* RogueCharacterList__init_object( RogueCharacterList* THIS )
{
  return (RogueCharacterList*)(THIS);
}

RogueCharacterList* RogueCharacterList__init__Integer( RogueCharacterList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueCharacter) );
  return (RogueCharacterList*)(THIS);
}

RogueCharacterList* RogueCharacterList__add__Character( RogueCharacterList* THIS, RogueCharacter value_0 )
{
  ((RogueCharacterList__reserve__Integer( THIS, 1 )))->data->characters[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCharacterList*)(THIS);
}

RogueInteger RogueCharacterList__capacity( RogueCharacterList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueCharacterList* RogueCharacterList__clear( RogueCharacterList* THIS )
{
  THIS->count = 0;
  return (RogueCharacterList*)(THIS);
}

RogueCharacterList* RogueCharacterList__reserve__Integer( RogueCharacterList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueCharacter) );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueCharacterList__capacity( THIS ))) + ((RogueCharacterList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueCharacter) ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCharacterList*)(THIS);
}

RogueLogical RogueCharacter__is_alphanumeric( RogueCharacter THIS )
{
  return (RogueLogical)((((THIS >= (RogueCharacter)'0' && THIS <= (RogueCharacter)'9') || (THIS >= (RogueCharacter)'a' && THIS <= (RogueCharacter)'z')) || (THIS >= (RogueCharacter)'A' && THIS <= (RogueCharacter)'Z')));
}

RogueLogical RogueCharacter__is_identifier( RogueCharacter THIS )
{
  return (RogueLogical)(((((THIS >= (RogueCharacter)'0' && THIS <= (RogueCharacter)'9') || (THIS >= (RogueCharacter)'a' && THIS <= (RogueCharacter)'z')) || (THIS >= (RogueCharacter)'A' && THIS <= (RogueCharacter)'Z')) || THIS == (RogueCharacter)'_'));
}

RogueLogical RogueCharacter__is_letter( RogueCharacter THIS )
{
  return (RogueLogical)(((THIS >= (RogueCharacter)'a' && THIS <= (RogueCharacter)'z') || (THIS >= (RogueCharacter)'A' && THIS <= (RogueCharacter)'Z')));
}

RogueLogical RogueCharacter__is_number__Integer( RogueCharacter THIS, RogueInteger base_0 )
{
  return (RogueLogical)(((RogueCharacter__to_number__Integer( THIS, base_0 ))) != -1);
}

RogueString* RogueCharacter__to_String( RogueCharacter THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Character( Rogue_program.literal_strings[0], THIS ))));
}

RogueInteger RogueCharacter__to_number__Integer( RogueCharacter THIS, RogueInteger base_0 )
{
  if ((THIS >= (RogueCharacter)'0' && ((RogueInteger)(THIS)) < (((RogueInteger)((RogueCharacter)'0')) + base_0)))
  {
    return (RogueInteger)((THIS - (RogueCharacter)'0'));
  }
  if ((THIS >= (RogueCharacter)'a' && ((RogueInteger)(THIS)) < ((((RogueInteger)((RogueCharacter)'a')) - 10) + base_0)))
  {
    return (RogueInteger)(((THIS - (RogueCharacter)'a') + 10));
  }
  if ((THIS >= (RogueCharacter)'A' && ((RogueInteger)(THIS)) < ((((RogueInteger)((RogueCharacter)'A')) - 10) + base_0)))
  {
    return (RogueInteger)(((THIS - (RogueCharacter)'A') + 10));
  }
  return (RogueInteger)(-1);
}

RogueString* RogueGenericList__type_name( RogueClassGenericList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[34]);
}

RogueClassGenericList* RogueGenericList__init_object( RogueClassGenericList* THIS )
{
  return (RogueClassGenericList*)(THIS);
}

RogueLogical RogueObject__operatorEQUALSEQUALS__Object( RogueObject* THIS, RogueObject* other_0 )
{
  return (RogueLogical)(THIS == other_0);
}

RogueString* RogueObject__to_String( RogueObject* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( Rogue_program.literal_strings[176], (call_ROGUEM2( 2, (RogueObject*)(THIS) )) ))), Rogue_program.literal_strings[102] ))));
}

RogueString* RogueObject__type_name( RogueObject* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[30]);
}

RogueString* RogueStringBuilder__to_String( RogueStringBuilder* THIS )
{
  return (RogueString*)(RogueString::create( THIS->characters ));
}

RogueString* RogueStringBuilder__type_name( RogueStringBuilder* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[32]);
}

RogueStringBuilder* RogueStringBuilder__init( RogueStringBuilder* THIS )
{
  RogueStringBuilder__init__Integer( THIS, 40 );
  return (RogueStringBuilder*)(THIS);
}

RogueStringBuilder* RogueStringBuilder__init__Integer( RogueStringBuilder* THIS, RogueInteger initial_capacity_0 )
{
  THIS->characters = ((RogueCharacterList__init__Integer( ((RogueCharacterList*)Rogue_program.type_CharacterList->create_and_init_object()), initial_capacity_0 )));
  return (RogueStringBuilder*)(THIS);
}

RogueStringBuilder* RogueStringBuilder__clear( RogueStringBuilder* THIS )
{
  RogueCharacterList__clear( THIS->characters );
  THIS->at_newline = true;
  return (RogueStringBuilder*)(THIS);
}

RogueLogical RogueStringBuilder__needs_indent( RogueStringBuilder* THIS )
{
  return (RogueLogical)((THIS->at_newline && THIS->indent > 0));
}

RogueStringBuilder* RogueStringBuilder__print__Character( RogueStringBuilder* THIS, RogueCharacter value_0 )
{
  if (value_0 == (RogueCharacter)10)
  {
    THIS->at_newline = true;
  }
  else if (((RogueStringBuilder__needs_indent( THIS ))))
  {
    RogueStringBuilder__print_indent( THIS );
  }
  RogueCharacterList__add__Character( THIS->characters, value_0 );
  return (RogueStringBuilder*)(THIS);
}

RogueStringBuilder* RogueStringBuilder__print__Integer( RogueStringBuilder* THIS, RogueInteger value_0 )
{
  return (RogueStringBuilder*)(((RogueStringBuilder__print__Long( THIS, ((RogueLong)(value_0)) ))));
}

RogueStringBuilder* RogueStringBuilder__print__Logical( RogueStringBuilder* THIS, RogueLogical value_0 )
{
  if (value_0)
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__String( THIS, Rogue_program.literal_strings[148] ))));
  }
  else
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__String( THIS, Rogue_program.literal_strings[139] ))));
  }
}

RogueStringBuilder* RogueStringBuilder__print__Long( RogueStringBuilder* THIS, RogueLong value_0 )
{
  if (value_0 == (((RogueLong)(1)) << ((RogueLong)63)))
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__String( THIS, Rogue_program.literal_strings[206] ))));
  }
  else if (value_0 < ((RogueLong)0))
  {
    RogueStringBuilder__print__Character( THIS, (RogueCharacter)'-' );
    return (RogueStringBuilder*)(((RogueStringBuilder__print__Long( THIS, (-(value_0)) ))));
  }
  else if (value_0 >= ((RogueLong)10))
  {
    RogueStringBuilder__print__Long( THIS, (value_0 / ((RogueLong)10)) );
    return (RogueStringBuilder*)(((RogueStringBuilder__print__Character( THIS, ((RogueCharacter)((((RogueLong)((RogueCharacter)'0')) + (RogueMath__mod__Long_Long( value_0, ((RogueLong)10) ))))) ))));
  }
  else
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__Character( THIS, ((RogueCharacter)((((RogueLong)((RogueCharacter)'0')) + value_0))) ))));
  }
}

RogueStringBuilder* RogueStringBuilder__print__Object( RogueStringBuilder* THIS, RogueObject* value_0 )
{
  if (!!(value_0))
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__String( THIS, (call_ROGUEM2( 1, (RogueObject*)(value_0) )) ))));
  }
  return (RogueStringBuilder*)(((RogueStringBuilder__print__String( THIS, Rogue_program.literal_strings[2] ))));
}

RogueStringBuilder* RogueStringBuilder__print__Real( RogueStringBuilder* THIS, RogueReal value_0 )
{
  RogueReal original_value_1 = (value_0);
  if (value_0 < 0.0)
  {
    RogueStringBuilder__print__Character( THIS, (RogueCharacter)'-' );
    value_0 = ((RogueReal)(-(value_0)));
  }
  if (value_0 == 0.0)
  {
    RogueStringBuilder__print__String( THIS, Rogue_program.literal_strings[627] );
    return (RogueStringBuilder*)(THIS);
  }
  if (value_0 >= 1.0e15)
  {
    RogueInteger pow10_2 = (0);
    while (value_0 >= 10.0)
    {
      value_0 /= 10.0;
      ++pow10_2;
    }
    return (RogueStringBuilder*)(((RogueStringBuilder__print__Integer( ((RogueStringBuilder__print__Character( ((RogueStringBuilder__print__Real( THIS, value_0 ))), (RogueCharacter)'e' ))), pow10_2 ))));
  }
  if (value_0 < 0.00001)
  {
    RogueInteger pow10_3 = (0);
    while (value_0 < 0.1)
    {
      value_0 *= 10.0;
      --pow10_3;
    }
    return (RogueStringBuilder*)(((RogueStringBuilder__print__Integer( ((RogueStringBuilder__print__Character( ((RogueStringBuilder__print__Real( THIS, value_0 ))), (RogueCharacter)'e' ))), pow10_3 ))));
  }
  {
    RogueInteger decimal_count_4 = (1);
    RogueInteger _auto_8_5 = (18);
    for (;decimal_count_4 <= _auto_8_5;++decimal_count_4)
    {
      RogueStringBuilder__print_to_work_bytes__Real_Integer( THIS, value_0, decimal_count_4 );
      if (((RogueStringBuilder__scan_work_bytes( THIS ))) == value_0)
      {
        goto _auto_172;
      }
    }
  }
  _auto_172:;
  RogueStringBuilder__print_work_bytes( THIS );
  return (RogueStringBuilder*)(THIS);
}

RogueStringBuilder* RogueStringBuilder__print__String( RogueStringBuilder* THIS, RogueString* value_0 )
{
  if (!!(value_0))
  {
    if (!!(THIS->indent))
    {
      {
        RogueString* _auto_173_1 = (value_0);
        RogueInteger _auto_174_2 = (0);
        for (;_auto_174_2 < _auto_173_1->count;++_auto_174_2)
        {
          RogueCharacter ch_3 = (_auto_173_1->characters[_auto_174_2]);
          RogueStringBuilder__print__Character( THIS, ch_3 );
        }
      }
    }
    else
    {
      {
        RogueString* _auto_175_4 = (value_0);
        RogueInteger _auto_176_5 = (0);
        for (;_auto_176_5 < _auto_175_4->count;++_auto_176_5)
        {
          RogueCharacter ch_6 = (_auto_175_4->characters[_auto_176_5]);
          RogueCharacterList__add__Character( THIS->characters, ch_6 );
        }
      }
      if ((!!(value_0->count) && ((RogueString__last( value_0 ))) == (RogueCharacter)10))
      {
        THIS->at_newline = true;
      }
    }
    return (RogueStringBuilder*)(THIS);
  }
  else
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__String( THIS, Rogue_program.literal_strings[2] ))));
  }
}

void RogueStringBuilder__print_indent( RogueStringBuilder* THIS )
{
  if ((!(((RogueStringBuilder__needs_indent( THIS )))) || THIS->indent == 0))
  {
    return;
  }
  {
    RogueInteger i_0 = (1);
    RogueInteger _auto_9_1 = (THIS->indent);
    for (;i_0 <= _auto_9_1;++i_0)
    {
      RogueCharacterList__add__Character( THIS->characters, (RogueCharacter)' ' );
    }
  }
  THIS->at_newline = false;
}

RogueStringBuilder* RogueStringBuilder__print_to_work_bytes__Real_Integer( RogueStringBuilder* THIS, RogueReal value_0, RogueInteger decimal_places_1 )
{
  RogueByteList__clear( RogueStringBuilder::work_bytes );
  RogueReal whole_2 = (floor((double)value_0));
  value_0 -= whole_2;
  while (whole_2 >= 10.0)
  {
    RogueByteList__add__Byte( RogueStringBuilder::work_bytes, ((RogueByte)(((RogueCharacter)((((RogueInteger)((RogueCharacter)'0')) + ((RogueInteger)((RogueMath__mod__Real_Real( whole_2, 10.0 ))))))))) );
    whole_2 /= 10.0;
  }
  RogueByteList__add__Byte( RogueStringBuilder::work_bytes, ((RogueByte)(((RogueCharacter)((((RogueInteger)((RogueCharacter)'0')) + ((RogueInteger)((RogueMath__mod__Real_Real( whole_2, 10.0 ))))))))) );
  RogueByteList__reverse( RogueStringBuilder::work_bytes );
  if (decimal_places_1 != 0)
  {
    RogueByteList__add__Byte( RogueStringBuilder::work_bytes, ((RogueByte)((RogueCharacter)'.')) );
    {
      RogueInteger _auto_10_3 = (1);
      RogueInteger _auto_11_4 = (decimal_places_1);
      for (;_auto_10_3 <= _auto_11_4;++_auto_10_3)
      {
        value_0 *= 10.0;
        RogueInteger digit_5 = (((RogueInteger)(floor((double)value_0))));
        value_0 -= ((RogueReal)(digit_5));
        RogueByteList__add__Byte( RogueStringBuilder::work_bytes, ((RogueByte)(((RogueCharacter)((((RogueInteger)((RogueCharacter)'0')) + digit_5))))) );
      }
    }
  }
  if (value_0 >= 0.5)
  {
    RogueByteList__add__Byte( RogueStringBuilder::work_bytes, ((RogueByte)((RogueCharacter)'5')) );
    RogueStringBuilder__round_off_work_bytes( THIS );
  }
  return (RogueStringBuilder*)(THIS);
}

void RogueStringBuilder__print_work_bytes( RogueStringBuilder* THIS )
{
  {
    RogueByteList* _auto_177_0 = (RogueStringBuilder::work_bytes);
    RogueInteger _auto_178_1 = (0);
    for (;_auto_178_1 < _auto_177_0->count;++_auto_178_1)
    {
      RogueByte digit_2 = (_auto_177_0->data->bytes[_auto_178_1]);
      RogueStringBuilder__print__Character( THIS, ((RogueCharacter)(digit_2)) );
    }
  }
}

RogueStringBuilder* RogueStringBuilder__println( RogueStringBuilder* THIS )
{
  return (RogueStringBuilder*)(((RogueStringBuilder__print__Character( THIS, (RogueCharacter)10 ))));
}

RogueStringBuilder* RogueStringBuilder__println__Integer( RogueStringBuilder* THIS, RogueInteger value_0 )
{
  return (RogueStringBuilder*)(((RogueStringBuilder__print__Character( ((RogueStringBuilder__print__Integer( THIS, value_0 ))), (RogueCharacter)10 ))));
}

RogueStringBuilder* RogueStringBuilder__println__String( RogueStringBuilder* THIS, RogueString* value_0 )
{
  return (RogueStringBuilder*)(((RogueStringBuilder__print__Character( ((RogueStringBuilder__print__String( THIS, value_0 ))), (RogueCharacter)10 ))));
}

RogueStringBuilder* RogueStringBuilder__reserve__Integer( RogueStringBuilder* THIS, RogueInteger additional_count_0 )
{
  RogueCharacterList__reserve__Integer( THIS->characters, additional_count_0 );
  return (RogueStringBuilder*)(THIS);
}

void RogueStringBuilder__round_off_work_bytes( RogueStringBuilder* THIS )
{
  if (((RogueCharacter)(((RogueByteList__remove_last( RogueStringBuilder::work_bytes ))))) >= (RogueCharacter)'5')
  {
    RogueInteger i_0 = ((RogueStringBuilder::work_bytes->count - 1));
    while (i_0 >= 0)
    {
      if (((RogueCharacter)(RogueStringBuilder::work_bytes->data->bytes[i_0])) != (RogueCharacter)'.')
      {
        RogueStringBuilder::work_bytes->data->bytes[i_0] = ((RogueByte)((((RogueInteger)(RogueStringBuilder::work_bytes->data->bytes[i_0])) + 1)));
        if (((RogueInteger)(RogueStringBuilder::work_bytes->data->bytes[i_0])) == (((RogueInteger)((RogueCharacter)'9')) + 1))
        {
          RogueStringBuilder::work_bytes->data->bytes[i_0] = ((RogueByte)((RogueCharacter)'0'));
        }
        else
        {
          return;
        }
      }
      --i_0;
    }
    RogueByteList__insert__Byte_Integer( RogueStringBuilder::work_bytes, ((RogueByte)((RogueCharacter)'1')), 0 );
  }
}

RogueReal RogueStringBuilder__scan_work_bytes( RogueStringBuilder* THIS )
{
  RogueReal whole_0 = (0.0);
  RogueReal decimal_1 = (0.0);
  RogueInteger decimal_count_2 = (0);
  RogueLogical scanning_whole_3 = (true);
  {
    RogueByteList* _auto_179_4 = (RogueStringBuilder::work_bytes);
    RogueInteger _auto_180_5 = (0);
    for (;_auto_180_5 < _auto_179_4->count;++_auto_180_5)
    {
      RogueByte digit_6 = (_auto_179_4->data->bytes[_auto_180_5]);
      if (scanning_whole_3)
      {
        if (((RogueCharacter)(digit_6)) == (RogueCharacter)'.')
        {
          scanning_whole_3 = ((RogueLogical)false);
        }
        else
        {
          whole_0 = ((RogueReal)((whole_0 * 10.0) + ((RogueReal)((((RogueCharacter)(digit_6)) - (RogueCharacter)'0')))));
        }
      }
      else
      {
        decimal_1 = ((RogueReal)((decimal_1 * 10.0) + ((RogueReal)((((RogueCharacter)(digit_6)) - (RogueCharacter)'0')))));
        ++decimal_count_2;
      }
    }
  }
  return (RogueReal)((whole_0 + (decimal_1 / ((RogueReal) pow((double)10.0, (double)((RogueReal)(decimal_count_2)))))));
}

RogueStringBuilder* RogueStringBuilder__init_object( RogueStringBuilder* THIS )
{
  THIS->at_newline = true;
  return (RogueStringBuilder*)(THIS);
}

RogueString* RogueStringList__to_String( RogueStringList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueStringList* _auto_35_2 = (THIS);
    RogueInteger _auto_36_3 = (0);
    for (;_auto_36_3 < _auto_35_2->count;++_auto_36_3)
    {
      RogueString* value_4 = (((RogueString*)(_auto_35_2->data->objects[_auto_36_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, value_4 ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueStringList__type_name( RogueStringList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[916]);
}

RogueStringList* RogueStringList__init_object( RogueStringList* THIS )
{
  return (RogueStringList*)(THIS);
}

RogueStringList* RogueStringList__init( RogueStringList* THIS )
{
  RogueStringList__init__Integer( THIS, 10 );
  return (RogueStringList*)(THIS);
}

RogueStringList* RogueStringList__init__Integer( RogueStringList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueString*), true );
  return (RogueStringList*)(THIS);
}

RogueStringList* RogueStringList__add__String( RogueStringList* THIS, RogueString* value_0 )
{
  ((RogueStringList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueStringList*)(THIS);
}

RogueInteger RogueStringList__capacity( RogueStringList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueStringList* RogueStringList__clear( RogueStringList* THIS )
{
  THIS->count = 0;
  return (RogueStringList*)(THIS);
}

RogueOptionalInteger RogueStringList__locate__String( RogueStringList* THIS, RogueString* value_0 )
{
  {
    RogueStringList* _auto_43_1 = (THIS);
    RogueInteger i_2 = (0);
    for (;i_2 < _auto_43_1->count;++i_2)
    {
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( value_0, ((RogueString*)(THIS->data->objects[i_2])) ))) == 0)
      {
        return (RogueOptionalInteger)(RogueOptionalInteger( i_2 ));
      }
    }
  }
  return (RogueOptionalInteger)(RogueOptionalInteger());
}

RogueStringList* RogueStringList__reserve__Integer( RogueStringList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueString*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueStringList__capacity( THIS ))) + ((RogueStringList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueString*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueStringList*)(THIS);
}

RogueString* RogueStringList__joined__String( RogueStringList* THIS, RogueString* separator_0 )
{
  RogueInteger total_count_1 = (0);
  {
    RogueStringList* _auto_46_3 = (THIS);
    RogueInteger _auto_47_4 = (0);
    for (;_auto_47_4 < _auto_46_3->count;++_auto_47_4)
    {
      RogueString* line_5 = (((RogueString*)(_auto_46_3->data->objects[_auto_47_4])));
      total_count_1 += line_5->count;
    }
  }
  RogueStringBuilder* builder_2 = (((RogueStringBuilder__init__Integer( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()), total_count_1 ))));
  {
    RogueStringList* _auto_48_6 = (THIS);
    RogueInteger _auto_49_7 = (0);
    for (;_auto_49_7 < _auto_48_6->count;++_auto_49_7)
    {
      RogueString* line_8 = (((RogueString*)(_auto_48_6->data->objects[_auto_49_7])));
      if (!!(builder_2->characters->count))
      {
        RogueStringBuilder__print__String( builder_2, separator_0 );
      }
      RogueStringBuilder__print__String( builder_2, line_8 );
    }
  }
  return (RogueString*)(((RogueStringBuilder__to_String( builder_2 ))));
}

RogueString* RogueStringArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[587]);
}

RogueString* RogueNativeArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[33]);
}

RogueString* RogueStringReader__type_name( RogueClassStringReader* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[526]);
}

RogueLogical RogueStringReader__has_another( RogueClassStringReader* THIS )
{
  return (RogueLogical)(THIS->position < THIS->count);
}

RogueCharacter RogueStringReader__read( RogueClassStringReader* THIS )
{
  ++THIS->position;
  return (RogueCharacter)(THIS->string->characters[(THIS->position - 1)]);
}

RogueClassStringReader* RogueStringReader__init__String( RogueClassStringReader* THIS, RogueString* _auto_15_0 )
{
  THIS->string = _auto_15_0;
  if (!!(THIS->string))
  {
    THIS->count = THIS->string->count;
  }
  return (RogueClassStringReader*)(THIS);
}

RogueClassStringReader* RogueStringReader__init_object( RogueClassStringReader* THIS )
{
  return (RogueClassStringReader*)(THIS);
}

RogueLogical RogueCharacterReader__has_another( RogueObject* THIS )
{
  switch (THIS->type->index)
  {
    case 16:
      return RogueStringReader__has_another( (RogueClassStringReader*)THIS );
    case 151:
      return RogueFileReader__has_another( (RogueClassFileReader*)THIS );
    case 155:
      return RogueParseReader__has_another( (RogueClassParseReader*)THIS );
    default:
      return 0;
  }
}

RogueCharacter RogueCharacterReader__read( RogueObject* THIS )
{
  switch (THIS->type->index)
  {
    case 16:
      return RogueStringReader__read( (RogueClassStringReader*)THIS );
    case 151:
      return RogueFileReader__read( (RogueClassFileReader*)THIS );
    case 155:
      return RogueParseReader__read( (RogueClassParseReader*)THIS );
    default:
      return 0;
  }
}

RogueString* RogueGlobal__type_name( RogueClassGlobal* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[35]);
}

void RogueGlobal__on_launch( RogueClassGlobal* THIS )
{
  RogueRogueC__launch( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC)) );
}

RogueClassGlobal* RogueGlobal__flush( RogueClassGlobal* THIS )
{
  if (!!(THIS->global_output_buffer->characters->count))
  {
    RogueConsole__print__StringBuilder( THIS->standard_output, THIS->global_output_buffer );
    RogueStringBuilder__clear( THIS->global_output_buffer );
  }
  return (RogueClassGlobal*)(THIS);
}

RogueClassGlobal* RogueGlobal__print__Object( RogueClassGlobal* THIS, RogueObject* value_0 )
{
  RogueStringBuilder__print__Object( THIS->global_output_buffer, value_0 );
  return (RogueClassGlobal*)(THIS);
}

RogueClassGlobal* RogueGlobal__print__String( RogueClassGlobal* THIS, RogueString* value_0 )
{
  RogueStringBuilder__print__String( THIS->global_output_buffer, value_0 );
  return (RogueClassGlobal*)(THIS);
}

RogueClassGlobal* RogueGlobal__println( RogueClassGlobal* THIS )
{
  RogueStringBuilder__print__Character( THIS->global_output_buffer, (RogueCharacter)10 );
  return (RogueClassGlobal*)(((RogueGlobal__flush( THIS ))));
}

RogueClassGlobal* RogueGlobal__println__Object( RogueClassGlobal* THIS, RogueObject* value_0 )
{
  return (RogueClassGlobal*)(((RogueGlobal__println( ((RogueGlobal__print__Object( THIS, value_0 ))) ))));
}

RogueClassGlobal* RogueGlobal__println__String( RogueClassGlobal* THIS, RogueString* value_0 )
{
  return (RogueClassGlobal*)(((RogueGlobal__println( ((RogueGlobal__print__String( THIS, value_0 ))) ))));
}

RogueClassGlobal* RogueGlobal__init_object( RogueClassGlobal* THIS )
{
  THIS->global_output_buffer = ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) )));
  THIS->standard_output = ((RogueClassConsole*)ROGUE_SINGLETON(Console));
  return (RogueClassGlobal*)(THIS);
}

RogueString* RogueConsole__type_name( RogueClassConsole* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[527]);
}

void RogueConsole__print__StringBuilder( RogueClassConsole* THIS, RogueStringBuilder* value_0 )
{
  RogueString::print( value_0->characters->data->characters, value_0->characters->count );
}

RogueClassConsole* RogueConsole__init_object( RogueClassConsole* THIS )
{
  return (RogueClassConsole*)(THIS);
}

RogueString* RogueRogueC__type_name( RogueClassRogueC* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[528]);
}

void RogueRogueC__launch( RogueClassRogueC* THIS )
{
  RogueString* libs_0 = (((RogueString__operatorPLUS__String( (RogueFile__path__String( RogueClassSystem::executable_filepath )), Rogue_program.literal_strings[3] ))));
  if ((RogueFile__exists__String( libs_0 )))
  {
    THIS->libraries_folder = libs_0;
    RogueStringList__add__String( THIS->prefix_path_list, libs_0 );
  }
  RogueStringList__add__String( THIS->supported_targets, Rogue_program.literal_strings[1] );
  try
  {
    RogueRogueC__process_command_line_arguments( THIS );
    if (THIS->source_files->count == 0)
    {
      RogueString* usage_1 = (Rogue_program.literal_strings[14]);
      usage_1 = ((RogueString*)((RogueString__operatorPLUS__String( usage_1, ((RogueString__operatorPLUS__String( ((RogueString__replace__Character_Character( ((RogueStringList__to_String( THIS->supported_targets ))), (RogueCharacter)',', (RogueCharacter)'|' ))), Rogue_program.literal_strings[18] ))) ))));
      RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), usage_1 );
      RogueSystem__exit__Integer( 1 );
    }
    RogueString_LogicalTable__set__String_Logical( THIS->compile_targets, Rogue_program.literal_strings[1], true );
    RogueProgram__configure( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) );
    {
      RogueStringList* _auto_203_3 = (THIS->source_files);
      RogueInteger _auto_204_4 = (0);
      for (;_auto_204_4 < _auto_203_3->count;++_auto_204_4)
      {
        RogueString* filepath_5 = (((RogueString*)(_auto_203_3->data->objects[_auto_204_4])));
        RogueRogueC__include__String( THIS, filepath_5 );
      }
    }
    RogueRogueC__include__String( THIS, Rogue_program.literal_strings[280] );
    RogueProgram__resolve( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) );
    RogueRogueC__write_output( THIS );
  }
  catch ( RogueClassError* err_2 )
  {
    RogueGlobal__println__Object( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ((RogueObject*)(err_2)) );
    RogueSystem__exit__Integer( 1 );
  }
}

void RogueRogueC__write_output( RogueClassRogueC* THIS )
{
  if (((RogueString__operatorLESSTHANGREATERTHAN__String( THIS->target, Rogue_program.literal_strings[1] ))) == 0)
  {
    RogueRogueC__write_cpp( THIS );
    return;
  }
  throw ((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)Rogue_program.type_RogueError->create_and_init_object()), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[524] ))), THIS->target ))), Rogue_program.literal_strings[525] ))) ))), ((RogueString*)(NULL)), 0, 0 )));
}

void RogueRogueC__include__String( RogueClassRogueC* THIS, RogueString* filepath_0 )
{
  if (!(!!(THIS->first_filepath)))
  {
    THIS->first_filepath = filepath_0;
  }
  RogueRogueC__include__Token_String( THIS, ((RogueClassToken*)(NULL)), filepath_0 );
}

void RogueRogueC__include__Token_String( RogueClassRogueC* THIS, RogueClassToken* t_0, RogueString* filepath_1 )
{
  RogueClassFile* file_2 = (((RogueFile__init__String( ((RogueClassFile*)Rogue_program.type_File->create_and_init_object()), filepath_1 ))));
  if ((RogueFile__exists__String( ((RogueString__operatorPLUS__String( filepath_1, Rogue_program.literal_strings[37] ))) )))
  {
    filepath_1 = ((RogueString*)((RogueString__operatorPLUS__String( filepath_1, Rogue_program.literal_strings[37] ))));
    file_2 = ((RogueClassFile*)((RogueFile__init__String( ((RogueClassFile*)Rogue_program.type_File->create_and_init_object()), filepath_1 ))));
  }
  if (!((RogueFile__exists__String( file_2->filepath ))))
  {
    {
      RogueStringList* _auto_205_10 = (THIS->prefix_path_list);
      RogueInteger _auto_206_11 = (0);
      for (;_auto_206_11 < _auto_205_10->count;++_auto_206_11)
      {
        RogueString* prefix_12 = (((RogueString*)(_auto_205_10->data->objects[_auto_206_11])));
        RogueString* prefixed_filepath_3 = (((RogueString__operatorPLUS__String( prefix_12, filepath_1 ))));
        RogueClassFile* prefixed_file_4 = (((RogueFile__init__String( ((RogueClassFile*)Rogue_program.type_File->create_and_init_object()), prefixed_filepath_3 ))));
        if ((RogueFile__exists__String( ((RogueString__operatorPLUS__String( prefixed_filepath_3, Rogue_program.literal_strings[37] ))) )))
        {
          filepath_1 = ((RogueString*)((RogueString__operatorPLUS__String( prefixed_filepath_3, Rogue_program.literal_strings[37] ))));
          file_2 = ((RogueClassFile*)((RogueFile__init__String( ((RogueClassFile*)Rogue_program.type_File->create_and_init_object()), filepath_1 ))));
          goto _auto_207;
        }
        else if ((RogueFile__exists__String( prefixed_file_4->filepath )))
        {
          filepath_1 = ((RogueString*)prefixed_filepath_3);
          file_2 = ((RogueClassFile*)prefixed_file_4);
          goto _auto_207;
        }
      }
    }
    _auto_207:;
  }
  if (!((RogueFile__exists__String( file_2->filepath ))))
  {
    RogueString* mesg_5 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[38] ))), filepath_1 ))), Rogue_program.literal_strings[39] ))) ))));
    if (!!(t_0))
    {
      throw ((RogueToken__error__String( t_0, mesg_5 )));
    }
    else
    {
      throw ((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)Rogue_program.type_RogueError->create_and_init_object()), mesg_5, ((RogueString*)(NULL)), 0, 0 )));
    }
  }
  if ((RogueFile__is_folder__String( file_2->filepath )))
  {
    RogueString* path2_6 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), filepath_1 ))), Rogue_program.literal_strings[40] ))), ((RogueFile__filename( file_2 ))) ))), Rogue_program.literal_strings[37] ))) ))));
    RogueClassFile* file2_7 = (((RogueFile__init__String( ((RogueClassFile*)Rogue_program.type_File->create_and_init_object()), path2_6 ))));
    if ((!((RogueFile__exists__String( file2_7->filepath ))) || (RogueFile__is_folder__String( file2_7->filepath ))))
    {
      RogueString* mesg_8 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[41] ))), path2_6 ))), Rogue_program.literal_strings[42] ))) ))));
      if (!!(t_0))
      {
        throw ((RogueToken__error__String( t_0, mesg_8 )));
      }
      else
      {
        throw ((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)Rogue_program.type_RogueError->create_and_init_object()), mesg_8, ((RogueString*)(NULL)), 0, 0 )));
      }
    }
    else
    {
      filepath_1 = ((RogueString*)path2_6);
      file_2 = ((RogueClassFile*)file2_7);
    }
  }
  filepath_1 = ((RogueString*)(RogueFile__absolute_filepath__String( file_2->filepath )));
  if (((RogueStringList__locate__String( THIS->included_files, filepath_1 ))).exists)
  {
    return;
  }
  if (THIS->included_files->count == 0)
  {
    ((RogueClassProgram*)ROGUE_SINGLETON(Program))->first_filepath = filepath_1;
  }
  RogueStringList__add__String( THIS->included_files, filepath_1 );
  RogueString* prefix_9 = (((RogueString__operatorPLUS__String( ((RogueString__before_last__Character( filepath_1, (RogueCharacter)'/' ))), Rogue_program.literal_strings[40] ))));
  if (!(((RogueString_LogicalTable__contains__String( THIS->prefix_path_lookup, prefix_9 )))))
  {
    RogueString_LogicalTable__set__String_Logical( THIS->prefix_path_lookup, prefix_9, true );
    RogueStringList__add__String( THIS->prefix_path_list, prefix_9 );
  }
  RogueParser__parse_elements( ((RogueParser__init__String( ((RogueClassParser*)Rogue_program.type_Parser->create_and_init_object()), filepath_1 ))) );
}

void RogueRogueC__include_native__Token_String_String( RogueClassRogueC* THIS, RogueClassToken* t_0, RogueString* filepath_1, RogueString* native_type_2 )
{
  RogueClassFile* file_3 = (((RogueFile__init__String( ((RogueClassFile*)Rogue_program.type_File->create_and_init_object()), filepath_1 ))));
  if (!((RogueFile__exists__String( file_3->filepath ))))
  {
    {
      RogueStringList* _auto_210_9 = (THIS->prefix_path_list);
      RogueInteger _auto_211_10 = (0);
      for (;_auto_211_10 < _auto_210_9->count;++_auto_211_10)
      {
        RogueString* prefix_11 = (((RogueString*)(_auto_210_9->data->objects[_auto_211_10])));
        RogueString* prefixed_filepath_4 = (((RogueString__operatorPLUS__String( prefix_11, filepath_1 ))));
        RogueClassFile* prefixed_file_5 = (((RogueFile__init__String( ((RogueClassFile*)Rogue_program.type_File->create_and_init_object()), prefixed_filepath_4 ))));
        if ((RogueFile__exists__String( prefixed_file_5->filepath )))
        {
          filepath_1 = ((RogueString*)prefixed_filepath_4);
          file_3 = ((RogueClassFile*)prefixed_file_5);
          goto _auto_212;
        }
      }
    }
    _auto_212:;
  }
  if (!((RogueFile__exists__String( file_3->filepath ))))
  {
    RogueString* mesg_6 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[38] ))), filepath_1 ))), Rogue_program.literal_strings[39] ))) ))));
    if (!!(t_0))
    {
      throw ((RogueToken__error__String( t_0, mesg_6 )));
    }
    else
    {
      throw ((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)Rogue_program.type_RogueError->create_and_init_object()), mesg_6, ((RogueString*)(NULL)), 0, 0 )));
    }
  }
  if ((RogueFile__is_folder__String( file_3->filepath )))
  {
    RogueString* mesg_7 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[49] ))), file_3->filepath ))), Rogue_program.literal_strings[50] ))) ))));
    if (!!(t_0))
    {
      throw ((RogueToken__error__String( t_0, mesg_7 )));
    }
    else
    {
      throw ((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)Rogue_program.type_RogueError->create_and_init_object()), mesg_7, ((RogueString*)(NULL)), 0, 0 )));
    }
  }
  filepath_1 = ((RogueString*)(RogueFile__absolute_filepath__String( file_3->filepath )));
  if (((RogueStringList__locate__String( THIS->included_files, filepath_1 ))).exists)
  {
    return;
  }
  RogueStringList__add__String( THIS->included_files, filepath_1 );
  RogueString* prefix_8 = (((RogueString__operatorPLUS__String( ((RogueString__before_last__Character( filepath_1, (RogueCharacter)'/' ))), Rogue_program.literal_strings[40] ))));
  if (!(((RogueString_LogicalTable__contains__String( THIS->prefix_path_lookup, prefix_8 )))))
  {
    RogueString_LogicalTable__set__String_Logical( THIS->prefix_path_lookup, prefix_8, true );
    RogueStringList__add__String( THIS->prefix_path_list, prefix_8 );
  }
  if (((RogueString__operatorLESSTHANGREATERTHAN__String( native_type_2, Rogue_program.literal_strings[51] ))) == 0)
  {
    {
      RogueClassLineReader* _auto_214_12 = (((RogueLineReader__init__File( ((RogueClassLineReader*)Rogue_program.type_LineReader->create_and_init_object()), file_3 ))));
      while (((RogueLineReader__has_another( _auto_214_12 ))))
      {
        RogueString* line_13 = (((RogueLineReader__read( _auto_214_12 ))));
        RogueStringList__add__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_header, line_13 );
      }
    }
  }
  else
  {
    {
      RogueClassLineReader* _auto_215_14 = (((RogueLineReader__init__File( ((RogueClassLineReader*)Rogue_program.type_LineReader->create_and_init_object()), file_3 ))));
      while (((RogueLineReader__has_another( _auto_215_14 ))))
      {
        RogueString* line_15 = (((RogueLineReader__read( _auto_215_14 ))));
        RogueStringList__add__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_code, line_15 );
      }
    }
  }
}

void RogueRogueC__process_command_line_arguments( RogueClassRogueC* THIS )
{
  {
    RogueStringList* _auto_216_1 = (RogueClassSystem::command_line_arguments);
    RogueInteger _auto_217_2 = (0);
    for (;_auto_217_2 < _auto_216_1->count;++_auto_217_2)
    {
      RogueString* arg_3 = (((RogueString*)(_auto_216_1->data->objects[_auto_217_2])));
      RogueString* value_0 = (((RogueString__after_first__Character( arg_3, (RogueCharacter)'=' ))));
      arg_3 = ((RogueString*)((RogueString__before_first__Character( arg_3, (RogueCharacter)'=' ))));
      if (((RogueString__begins_with__String( arg_3, Rogue_program.literal_strings[4] ))))
      {
        if (((RogueString__operatorLESSTHANGREATERTHAN__String( arg_3, Rogue_program.literal_strings[5] ))) == 0)
        {
          if (value_0->count == 0)
          {
            throw ((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)Rogue_program.type_RogueError->create_and_init_object()), Rogue_program.literal_strings[6], ((RogueString*)(NULL)), 0, 0 )));
          }
          THIS->output_filepath = value_0;
        }
        else if (((RogueString__operatorLESSTHANGREATERTHAN__String( arg_3, Rogue_program.literal_strings[7] ))) == 0)
        {
          THIS->generate_main = true;
          THIS->execute_args = value_0;
        }
        else if (((RogueString__operatorLESSTHANGREATERTHAN__String( arg_3, Rogue_program.literal_strings[8] ))) == 0)
        {
          if (!!(value_0->count))
          {
            throw ((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)Rogue_program.type_RogueError->create_and_init_object()), Rogue_program.literal_strings[9], ((RogueString*)(NULL)), 0, 0 )));
          }
          THIS->generate_main = true;
        }
        else if (((RogueString__operatorLESSTHANGREATERTHAN__String( arg_3, Rogue_program.literal_strings[10] ))) == 0)
        {
          if (!(!!(value_0->count)))
          {
            throw ((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)Rogue_program.type_RogueError->create_and_init_object()), Rogue_program.literal_strings[11], ((RogueString*)(NULL)), 0, 0 )));
          }
          THIS->target = value_0;
        }
        else
        {
          throw ((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)Rogue_program.type_RogueError->create_and_init_object()), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[12] ))), arg_3 ))), Rogue_program.literal_strings[13] ))) ))), ((RogueString*)(NULL)), 0, 0 )));
        }
      }
      else
      {
        RogueStringList__add__String( THIS->source_files, arg_3 );
      }
    }
  }
}

void RogueRogueC__write_cpp( RogueClassRogueC* THIS )
{
  if (THIS->output_filepath == NULL)
  {
    THIS->output_filepath = (RogueFile__filename__String( THIS->first_filepath ));
    if (((RogueString__ends_with__String( ((RogueString__to_lowercase( THIS->output_filepath ))), Rogue_program.literal_strings[37] ))))
    {
      THIS->output_filepath = ((RogueString__leftmost__Integer( THIS->output_filepath, -6 )));
    }
  }
  else if ((RogueFile__is_folder__String( THIS->output_filepath )))
  {
    THIS->output_filepath = ((RogueString__operatorPLUS__String( (RogueFile__path__String( THIS->output_filepath )), Rogue_program.literal_strings[369] )));
  }
  else if (((RogueString__ends_with__String( ((RogueString__to_lowercase( THIS->output_filepath ))), Rogue_program.literal_strings[370] ))))
  {
    THIS->output_filepath = ((RogueString__leftmost__Integer( THIS->output_filepath, -4 )));
  }
  RogueProgram__write_cpp__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->output_filepath );
  if (!!(THIS->execute_args))
  {
    RogueString* exe_0 = (((RogueString__to_lowercase( THIS->output_filepath ))));
    RogueString* cmd_1 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[521] ))), THIS->output_filepath ))), Rogue_program.literal_strings[522] ))), exe_0 ))), Rogue_program.literal_strings[523] ))), exe_0 ))), Rogue_program.literal_strings[255] ))), THIS->execute_args ))) ))));
    RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), cmd_1 );
    RogueGlobal__println( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)) );
    {
      char cmd_buffer[4096];
      cmd_1->to_c_string( cmd_buffer, 4096 );
      system( cmd_buffer );
    };
  }
}

RogueClassRogueC* RogueRogueC__init_object( RogueClassRogueC* THIS )
{
  THIS->included_files = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  THIS->prefix_path_list = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  THIS->prefix_path_lookup = ((RogueString_LogicalTable__init( ((RogueClassString_LogicalTable*)Rogue_program.type_String_LogicalTable->create_and_init_object()) )));
  THIS->compile_targets = ((RogueString_LogicalTable__init( ((RogueClassString_LogicalTable*)Rogue_program.type_String_LogicalTable->create_and_init_object()) )));
  THIS->libraries_folder = Rogue_program.literal_strings[0];
  THIS->source_files = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  THIS->supported_targets = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  THIS->target = Rogue_program.literal_strings[1];
  return (RogueClassRogueC*)(THIS);
}

RogueString* RogueError__to_String( RogueClassError* THIS )
{
  return (RogueString*)(THIS->message);
}

RogueString* RogueError__type_name( RogueClassError* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[36]);
}

RogueClassError* RogueError__init_object( RogueClassError* THIS )
{
  return (RogueClassError*)(THIS);
}

RogueString* RogueProgram__type_name( RogueClassProgram* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[529]);
}

void RogueProgram__configure( RogueClassProgram* THIS )
{
  THIS->type_null = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_program.literal_strings[2], 32 )));
  THIS->type_Real = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_program.literal_strings[23], 1 )));
  THIS->type_Float = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_program.literal_strings[24], 1 )));
  THIS->type_Long = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_program.literal_strings[25], 1 )));
  THIS->type_Integer = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_program.literal_strings[26], 1 )));
  THIS->type_Character = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_program.literal_strings[27], 1 )));
  THIS->type_Byte = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_program.literal_strings[28], 1 )));
  THIS->type_Logical = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_program.literal_strings[29], 1 )));
  THIS->type_Object = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_program.literal_strings[30], 32 )));
  THIS->type_String = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_program.literal_strings[31], 48 )));
  THIS->type_StringBuilder = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_program.literal_strings[32], 0 )));
  THIS->type_NativeArray = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_program.literal_strings[33], 32 )));
  THIS->type_GenericList = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_program.literal_strings[34], 0 )));
  THIS->type_Global = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_program.literal_strings[35], 0 )));
  THIS->type_Error = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_program.literal_strings[36], 0 )));
  THIS->type_Object->simplify_name = true;
  THIS->type_String->simplify_name = true;
  THIS->type_StringBuilder->simplify_name = true;
  THIS->type_null->organized = true;
  THIS->type_null->defined = true;
  RogueStringList__add__String( THIS->literal_string_list, Rogue_program.literal_strings[0] );
  RogueString_IntegerTable__set__String_Integer( THIS->literal_string_lookup, Rogue_program.literal_strings[0], 0 );
}

RogueString* RogueProgram__create_unique_id( RogueClassProgram* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Integer( Rogue_program.literal_strings[243], ((RogueProgram__next_unique_integer( THIS ))) ))));
}

RogueInteger RogueProgram__next_unique_integer( RogueClassProgram* THIS )
{
  ++THIS->unique_integer;
  return (RogueInteger)((THIS->unique_integer - 1));
}

RogueClassTemplate* RogueProgram__find_template__String( RogueClassProgram* THIS, RogueString* name_0 )
{
  switch (((RogueInteger)(((RogueString__last( name_0 ))))))
  {
    case (RogueCharacter)'?':
    {
      if (!!(((RogueProgram__find_type__String( THIS, ((RogueString__leftmost__Integer( name_0, -1 ))) )))))
      {
        return (RogueClassTemplate*)(((RogueString_TemplateTable__get__String( THIS->template_lookup, Rogue_program.literal_strings[281] ))));
      }
      else
      {
        return (RogueClassTemplate*)(((RogueClassTemplate*)(NULL)));
      }
      break;
    }
    case (RogueCharacter)']':
    {
      return (RogueClassTemplate*)(((RogueString_TemplateTable__get__String( THIS->template_lookup, Rogue_program.literal_strings[282] ))));
      break;
    }
    default:
    {
      return (RogueClassTemplate*)(((RogueString_TemplateTable__get__String( THIS->template_lookup, ((RogueString__before_first__Character( name_0, (RogueCharacter)'<' ))) ))));
    }
  }
}

RogueClassType* RogueProgram__find_type__String( RogueClassProgram* THIS, RogueString* name_0 )
{
  RogueClassType* type_1 = (((RogueString_TypeTable__get__String( THIS->type_lookup, name_0 ))));
  if (!!(type_1))
  {
    return (RogueClassType*)(type_1);
  }
  RogueClassTemplate* template_2 = (((RogueProgram__find_template__String( THIS, name_0 ))));
  if (!!(template_2))
  {
    type_1 = ((RogueClassType*)((RogueType__init__Token_String( ((RogueClassType*)Rogue_program.type_Type->create_and_init_object()), template_2->t, name_0 ))));
    RogueString_TypeTable__set__String_Type( THIS->type_lookup, name_0, type_1 );
    return (RogueClassType*)(type_1);
  }
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

RogueClassType* RogueProgram__get_type_reference__Token_String( RogueClassProgram* THIS, RogueClassToken* t_0, RogueString* name_1 )
{
  RogueClassType* type_2 = (((RogueString_TypeTable__get__String( THIS->type_lookup, name_1 ))));
  if (!!(type_2))
  {
    return (RogueClassType*)(type_2);
  }
  type_2 = ((RogueClassType*)((RogueType__init__Token_String( ((RogueClassType*)Rogue_program.type_Type->create_and_init_object()), t_0, name_1 ))));
  RogueString_TypeTable__set__String_Type( THIS->type_lookup, name_1, type_2 );
  return (RogueClassType*)(type_2);
}

RogueString* RogueProgram__get_callback_type_signature__TypeList( RogueClassProgram* THIS, RogueTypeList* parameter_types_0 )
{
  RogueStringBuilder__print__String( ((RogueStringBuilder__clear( THIS->string_buffer ))), Rogue_program.literal_strings[176] );
  if (!!(parameter_types_0))
  {
    RogueLogical first_1 = (true);
    {
      RogueTypeList* _auto_70_2 = (parameter_types_0);
      RogueInteger _auto_71_3 = (0);
      for (;_auto_71_3 < _auto_70_2->count;++_auto_71_3)
      {
        RogueClassType* type_4 = (((RogueClassType*)(_auto_70_2->data->objects[_auto_71_3])));
        if (first_1)
        {
          first_1 = ((RogueLogical)false);
        }
        else
        {
          RogueStringBuilder__print__Character( THIS->string_buffer, (RogueCharacter)',' );
        }
        RogueStringBuilder__print__String( THIS->string_buffer, type_4->name );
      }
    }
  }
  RogueStringBuilder__print__Character( THIS->string_buffer, (RogueCharacter)')' );
  return (RogueString*)(((RogueStringBuilder__to_String( THIS->string_buffer ))));
}

RogueClassType* RogueProgram__get_callback_type_reference__Token_TypeList_Type( RogueClassProgram* THIS, RogueClassToken* t_0, RogueTypeList* parameter_types_1, RogueClassType* return_type_2 )
{
  RogueString* name_3 = (((RogueString__operatorPLUS__String( Rogue_program.literal_strings[238], ((RogueProgram__get_callback_type_signature__TypeList( THIS, parameter_types_1 ))) ))));
  if (!!(return_type_2))
  {
    name_3 = ((RogueString*)((RogueString__operatorPLUS__String( name_3, ((RogueString__operatorPLUS__String( Rogue_program.literal_strings[152], return_type_2->name ))) ))));
  }
  RogueClassType* type_4 = (((RogueProgram__get_type_reference__Token_String( THIS, t_0, name_3 ))));
  if (type_4->defined)
  {
    return (RogueClassType*)(type_4);
  }
  type_4->defined = true;
  RogueAttributes__add__Integer( type_4->attributes, 0 );
  RogueClassMethod* m_call_5 = (((RogueType__add_method__Token_String( type_4, t_0, Rogue_program.literal_strings[239] ))));
  if (!!(parameter_types_1))
  {
    {
      RogueTypeList* _auto_73_6 = (parameter_types_1);
      RogueInteger i_7 = (0);
      for (;i_7 < _auto_73_6->count;++i_7)
      {
        RogueMethod__add_parameter__Token_String_Type( m_call_5, t_0, ((RogueString__operatorPLUS__Integer( Rogue_program.literal_strings[240], (i_7 + 1) ))), ((RogueClassType*)(parameter_types_1->data->objects[i_7])) );
      }
    }
  }
  if (!!(return_type_2))
  {
    m_call_5->_return_type = return_type_2;
    RogueCmdList__add__Cmd( ((RogueCmdList*)m_call_5->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)Rogue_program.type_CmdReturn->create_and_init_object()), t_0, ((RogueType__create_default_value__Token( return_type_2, t_0 ))) ))))) );
  }
  return (RogueClassType*)(type_4);
}

RogueClassType* RogueProgram__create_built_in_type__String_Integer( RogueClassProgram* THIS, RogueString* name_0, RogueInteger attributes_1 )
{
  RogueClassToken* t_2 = ((call_ROGUEM71( 4, (RogueClassTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[21] )))), Rogue_program.literal_strings[22], 0, 0 )));
  RogueClassType* type_3 = (((RogueProgram__get_type_reference__Token_String( THIS, t_2, name_0 ))));
  RogueAttributes__add__Integer( type_3->attributes, attributes_1 );
  return (RogueClassType*)(type_3);
}

void RogueProgram__resolve( RogueClassProgram* THIS )
{
  if (!!(THIS->m_on_launch))
  {
    RogueType__add_method__Method( THIS->type_Global, THIS->m_on_launch );
  }
  else
  {
    THIS->m_on_launch = ((RogueType__add_method__Token_String( THIS->type_Global, THIS->type_Global->t, Rogue_program.literal_strings[278] )));
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->m_on_launch->statements), ((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( THIS->m_on_launch, THIS->m_on_launch->t, Rogue_program.literal_strings[259], false ))))) );
  RogueAttributes__add__Integer( THIS->m_on_launch->attributes, 32768 );
  RogueType__resolve( THIS->type_null );
  RogueType__resolve( THIS->type_Real );
  RogueType__resolve( THIS->type_Float );
  RogueType__resolve( THIS->type_Long );
  RogueType__resolve( THIS->type_Integer );
  RogueType__resolve( THIS->type_Character );
  RogueType__resolve( THIS->type_Byte );
  RogueType__resolve( THIS->type_Logical );
  RogueType__resolve( THIS->type_Global );
  RogueType__resolve( THIS->type_Error );
  RogueType__resolve( THIS->type_Object );
  RogueType__resolve( THIS->type_NativeArray );
  RogueType__resolve( THIS->type_GenericList );
  RogueType__resolve( THIS->type_String );
  {
    RogueRequisiteItemList* _auto_81_2 = (THIS->requisite_list);
    RogueInteger _auto_82_3 = (0);
    for (;_auto_82_3 < _auto_81_2->count;++_auto_82_3)
    {
      RogueClassRequisiteItem* req_4 = (((RogueClassRequisiteItem*)(_auto_81_2->data->objects[_auto_82_3])));
      RogueType__resolve( req_4->_type );
      RogueAttributes__add__Integer( req_4->_type->attributes, 32768 );
      if (!!(req_4->signature))
      {
        RogueClassMethod* m_0 = (((RogueType__find_method__String( req_4->_type, req_4->signature ))));
        if (!!(m_0))
        {
          RogueAttributes__add__Integer( m_0->attributes, 32768 );
        }
        else
        {
          throw ((RogueToken__error__String( req_4->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[365] ))), req_4->signature ))), Rogue_program.literal_strings[366] ))), req_4->_type->name ))), Rogue_program.literal_strings[47] ))) ))) )));
        }
      }
    }
  }
  {
    RogueTemplateList* _auto_87_5 = (THIS->template_list);
    RogueInteger _auto_88_6 = (0);
    for (;_auto_88_6 < _auto_87_5->count;++_auto_88_6)
    {
      RogueClassTemplate* templ_7 = (((RogueClassTemplate*)(_auto_87_5->data->objects[_auto_88_6])));
      if ((!!((templ_7->attributes->flags & 32768)) && !(!!(templ_7->type_parameters))))
      {
        RogueType__resolve( ((RogueProgram__get_type_reference__Token_String( THIS, templ_7->t, templ_7->name ))) );
      }
    }
  }
  RogueInteger i_1 = (0);
  while (i_1 < THIS->type_list->count)
  {
    RogueType__resolve( ((RogueClassType*)(THIS->type_list->data->objects[i_1])) );
    ++i_1;
  }
  RogueProgram__cull_unused_code( THIS );
}

void RogueProgram__cull_unused_code( RogueClassProgram* THIS )
{
  {
    RogueTypeList* _auto_89_0 = (THIS->type_list);
    RogueInteger _auto_90_1 = (0);
    for (;_auto_90_1 < _auto_89_0->count;++_auto_90_1)
    {
      RogueClassType* type_2 = (((RogueClassType*)(_auto_89_0->data->objects[_auto_90_1])));
      if (((RogueType__is_requisite( type_2 ))))
      {
        RogueType__trace_used_code( type_2 );
      }
    }
  }
  RogueProgram__trace_overridden_methods( THIS );
  {
    RogueTypeList* _auto_91_3 = (THIS->type_list);
    RogueInteger _auto_92_4 = (0);
    for (;_auto_92_4 < _auto_91_3->count;++_auto_92_4)
    {
      RogueClassType* type_5 = (((RogueClassType*)(_auto_91_3->data->objects[_auto_92_4])));
      RogueType__cull_unused_methods( type_5 );
    }
  }
}

void RogueProgram__trace_overridden_methods( RogueClassProgram* THIS )
{
  RogueLogical traced_new_methods_0 = (true);
  while (traced_new_methods_0)
  {
    traced_new_methods_0 = ((RogueLogical)false);
    {
      RogueTypeList* _auto_93_2 = (THIS->type_list);
      RogueInteger _auto_94_3 = (0);
      for (;_auto_94_3 < _auto_93_2->count;++_auto_94_3)
      {
        RogueClassType* type_4 = (((RogueClassType*)(_auto_93_2->data->objects[_auto_94_3])));
        if (type_4->is_used)
        {
          if (((RogueType__is_aspect( type_4 ))))
          {
            {
              RogueMethodList* _auto_96_5 = (type_4->method_list);
              RogueInteger _auto_97_6 = (0);
              for (;_auto_97_6 < _auto_96_5->count;++_auto_97_6)
              {
                RogueClassMethod* m_7 = (((RogueClassMethod*)(_auto_96_5->data->objects[_auto_97_6])));
                if (m_7->is_used)
                {
                  {
                    RogueTypeList* _auto_98_8 = (m_7->incorporating_classes);
                    RogueInteger _auto_99_9 = (0);
                    for (;_auto_99_9 < _auto_98_8->count;++_auto_99_9)
                    {
                      RogueClassType* ic_10 = (((RogueClassType*)(_auto_98_8->data->objects[_auto_99_9])));
                      if (ic_10->is_used)
                      {
                        RogueClassMethod* im_1 = (((RogueType__find_method__String( ic_10, m_7->signature ))));
                        if (!(im_1->is_used))
                        {
                          traced_new_methods_0 = ((RogueLogical)true);
                          RogueMethod__trace_used_code( im_1 );
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            {
              RogueMethodList* _auto_100_11 = (type_4->method_list);
              RogueInteger _auto_101_12 = (0);
              for (;_auto_101_12 < _auto_100_11->count;++_auto_101_12)
              {
                RogueClassMethod* m_13 = (((RogueClassMethod*)(_auto_100_11->data->objects[_auto_101_12])));
                if (m_13->is_used)
                {
                  {
                    RogueMethodList* _auto_102_14 = (m_13->overriding_methods);
                    RogueInteger _auto_103_15 = (0);
                    for (;_auto_103_15 < _auto_102_14->count;++_auto_103_15)
                    {
                      RogueClassMethod* overriding_m_16 = (((RogueClassMethod*)(_auto_102_14->data->objects[_auto_103_15])));
                      if ((!(overriding_m_16->is_used) && overriding_m_16->type_context->is_used))
                      {
                        traced_new_methods_0 = ((RogueLogical)true);
                        RogueMethod__trace_used_code( overriding_m_16 );
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

RogueString* RogueProgram__validate_cpp_name__String( RogueClassProgram* THIS, RogueString* name_0 )
{
  RogueLogical begins_with_code_prefix_1 = (false);
  if (((RogueString__begins_with__String( name_0, THIS->code_prefix ))))
  {
    begins_with_code_prefix_1 = ((RogueLogical)true);
    name_0 = ((RogueString*)((RogueString__from__Integer( name_0, THIS->code_prefix->count ))));
  }
  RogueLogical all_underscores_2 = (true);
  if (((RogueString__ends_with__String( name_0, Rogue_program.literal_strings[371] ))))
  {
    {
      RogueInteger i_3 = (0);
      RogueInteger _auto_50_4 = ((name_0->count - 5));
      for (;i_3 <= _auto_50_4;++i_3)
      {
        if (name_0->characters[i_3] != (RogueCharacter)'_')
        {
          all_underscores_2 = ((RogueLogical)false);
          goto _auto_104;
        }
      }
    }
    _auto_104:;
    name_0 = ((RogueString*)((RogueString__operatorPLUS__String( Rogue_program.literal_strings[352], name_0 ))));
  }
  RogueOptionalInteger i1_5 = (((RogueString__locate__Character_OptionalInteger( name_0, (RogueCharacter)'?', RogueOptionalInteger() ))));
  while (i1_5.exists)
  {
    name_0 = ((RogueString*)((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( Rogue_program.literal_strings[281], ((RogueString__leftmost__Integer( name_0, i1_5.value ))) ))), ((RogueString__from__Integer( name_0, (i1_5.value + 1) ))) ))));
    i1_5 = ((RogueOptionalInteger)((RogueString__locate__Character_OptionalInteger( name_0, (RogueCharacter)'?', RogueOptionalInteger() ))));
  }
  i1_5 = ((RogueOptionalInteger)((RogueString__locate__String_OptionalInteger( name_0, Rogue_program.literal_strings[177], RogueOptionalInteger() ))));
  while (i1_5.exists)
  {
    RogueOptionalInteger i2_6 = (((RogueString__locate_last__String_OptionalInteger( name_0, Rogue_program.literal_strings[103], RogueOptionalInteger() ))));
    if (!(i2_6.exists))
    {
      goto _auto_105;
    }
    RogueString* before_7 = (((RogueString__from__Integer_Integer( name_0, 0, (i1_5.value - 1) ))));
    RogueString* after_8 = (((RogueString__from__Integer( name_0, (i2_6.value + 2) ))));
    RogueString* middle_9 = (((RogueString__from__Integer_Integer( name_0, (i1_5.value + 2), (i2_6.value - 1) ))));
    name_0 = ((RogueString*)((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), ((RogueProgram__validate_cpp_name__String( THIS, middle_9 ))) ))), before_7 ))), after_8 ))) ))));
    if (!!(((RogueProgram__find_type__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), name_0 )))))
    {
      name_0 = ((RogueString*)((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), before_7 ))), Rogue_program.literal_strings[372] ))), middle_9 ))), after_8 ))) ))));
    }
    i1_5 = ((RogueOptionalInteger)((RogueString__locate__String_OptionalInteger( name_0, Rogue_program.literal_strings[177], RogueOptionalInteger() ))));
  }
  _auto_105:;
  i1_5 = ((RogueOptionalInteger)((RogueString__locate__String_OptionalInteger( name_0, Rogue_program.literal_strings[163], RogueOptionalInteger() ))));
  while (i1_5.exists)
  {
    name_0 = ((RogueString*)((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( ((RogueString__from__Integer_Integer( name_0, 0, (i1_5.value - 1) ))), Rogue_program.literal_strings[282] ))), ((RogueString__from__Integer( name_0, (i1_5.value + 2) ))) ))));
    i1_5 = ((RogueOptionalInteger)((RogueString__locate__String_OptionalInteger( name_0, Rogue_program.literal_strings[163], RogueOptionalInteger() ))));
  }
  RogueStringBuilder__clear( THIS->string_buffer );
  if (begins_with_code_prefix_1)
  {
    RogueStringBuilder__print__String( THIS->string_buffer, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->code_prefix );
  }
  {
    RogueString* _auto_106_10 = (name_0);
    RogueInteger _auto_107_11 = (0);
    for (;_auto_107_11 < _auto_106_10->count;++_auto_107_11)
    {
      RogueCharacter ch_12 = (_auto_106_10->characters[_auto_107_11]);
      if (((RogueCharacter__is_alphanumeric( ch_12 ))))
      {
        RogueStringBuilder__print__Character( THIS->string_buffer, ch_12 );
      }
      else
      {
        switch (((RogueInteger)(ch_12)))
        {
          case (RogueCharacter)'!':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_program.literal_strings[373] );
            break;
          }
          case (RogueCharacter)'%':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_program.literal_strings[374] );
            break;
          }
          case (RogueCharacter)'&':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_program.literal_strings[375] );
            break;
          }
          case (RogueCharacter)'*':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_program.literal_strings[376] );
            break;
          }
          case (RogueCharacter)'+':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_program.literal_strings[377] );
            break;
          }
          case (RogueCharacter)'-':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_program.literal_strings[378] );
            break;
          }
          case (RogueCharacter)'.':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_program.literal_strings[379] );
            break;
          }
          case (RogueCharacter)'/':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_program.literal_strings[380] );
            break;
          }
          case (RogueCharacter)'<':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_program.literal_strings[381] );
            break;
          }
          case (RogueCharacter)'=':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_program.literal_strings[382] );
            break;
          }
          case (RogueCharacter)'>':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_program.literal_strings[383] );
            break;
          }
          case (RogueCharacter)'^':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_program.literal_strings[384] );
            break;
          }
          case (RogueCharacter)'|':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_program.literal_strings[385] );
            break;
          }
          case (RogueCharacter)'~':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_program.literal_strings[386] );
            break;
          }
          default:
          {
            RogueStringBuilder__print__Character( THIS->string_buffer, (RogueCharacter)'_' );
          }
        }
      }
    }
  }
  return (RogueString*)(((RogueStringBuilder__to_String( THIS->string_buffer ))));
}

void RogueProgram__write_cpp__String( RogueClassProgram* THIS, RogueString* filepath_0 )
{
  {
    RogueTypeList* _auto_108_11 = (THIS->type_list);
    RogueInteger _auto_109_12 = (0);
    for (;_auto_109_12 < _auto_108_11->count;++_auto_109_12)
    {
      RogueClassType* type_13 = (((RogueClassType*)(_auto_108_11->data->objects[_auto_109_12])));
      RogueType__assign_cpp_name( type_13 );
    }
  }
  THIS->type_NativeArray->cpp_class_name = Rogue_program.literal_strings[387];
  {
    RogueTypeList* _auto_110_14 = (THIS->type_list);
    RogueInteger _auto_111_15 = (0);
    for (;_auto_111_15 < _auto_110_14->count;++_auto_111_15)
    {
      RogueClassType* type_16 = (((RogueClassType*)(_auto_110_14->data->objects[_auto_111_15])));
      {
        RogueMethodList* _auto_112_17 = (type_16->routine_list);
        RogueInteger _auto_113_18 = (0);
        for (;_auto_113_18 < _auto_112_17->count;++_auto_113_18)
        {
          RogueClassMethod* r_19 = (((RogueClassMethod*)(_auto_112_17->data->objects[_auto_113_18])));
          RogueMethod__assign_cpp_name( r_19 );
        }
      }
      {
        RogueMethodList* _auto_114_20 = (type_16->method_list);
        RogueInteger _auto_115_21 = (0);
        for (;_auto_115_21 < _auto_114_20->count;++_auto_115_21)
        {
          RogueClassMethod* m_22 = (((RogueClassMethod*)(_auto_114_20->data->objects[_auto_115_21])));
          RogueMethod__assign_cpp_name( m_22 );
        }
      }
    }
  }
  RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[391] ))), filepath_0 ))), Rogue_program.literal_strings[392] ))) ))) );
  RogueClassCPPWriter* writer_1 = (((RogueCPPWriter__init__String( ((RogueClassCPPWriter*)Rogue_program.type_CPPWriter->create_and_init_object()), ((RogueString__operatorPLUS__String( filepath_0, Rogue_program.literal_strings[393] ))) ))));
  {
    RogueStringList* _auto_119_23 = (THIS->native_header);
    RogueInteger _auto_120_24 = (0);
    for (;_auto_120_24 < _auto_119_23->count;++_auto_120_24)
    {
      RogueString* line_25 = (((RogueString*)(_auto_119_23->data->objects[_auto_120_24])));
      RogueCPPWriter__println__String( writer_1, line_25 );
    }
  }
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[394] );
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_121_26 = (THIS->type_list);
    RogueInteger _auto_122_27 = (0);
    for (;_auto_122_27 < _auto_121_26->count;++_auto_122_27)
    {
      RogueClassType* type_28 = (((RogueClassType*)(_auto_121_26->data->objects[_auto_122_27])));
      if (!(((RogueType__omit_output( type_28 )))))
      {
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_program.literal_strings[395] ))), type_28->cpp_type_name ))), Rogue_program.literal_strings[184] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_123_29 = (THIS->type_list);
    RogueInteger _auto_124_30 = (0);
    for (;_auto_124_30 < _auto_123_29->count;++_auto_124_30)
    {
      RogueClassType* type_31 = (((RogueClassType*)(_auto_123_29->data->objects[_auto_124_30])));
      if ((!(((RogueType__omit_output( type_31 )))) && !(((RogueType__is_primitive( type_31 ))))))
      {
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_program.literal_strings[395] ))), type_31->cpp_class_name ))), Rogue_program.literal_strings[184] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_125_32 = (THIS->type_list);
    RogueInteger _auto_126_33 = (0);
    for (;_auto_126_33 < _auto_125_32->count;++_auto_126_33)
    {
      RogueClassType* type_34 = (((RogueClassType*)(_auto_125_32->data->objects[_auto_126_33])));
      if ((((RogueType__is_compound( type_34 ))) && !(((RogueType__omit_output( type_34 ))))))
      {
        RogueType__print_data_definition__CPPWriter( type_34, writer_1 );
        RogueCPPWriter__println( writer_1 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_127_35 = (THIS->type_list);
    RogueInteger _auto_128_36 = (0);
    for (;_auto_128_36 < _auto_127_35->count;++_auto_128_36)
    {
      RogueClassType* type_37 = (((RogueClassType*)(_auto_127_35->data->objects[_auto_128_36])));
      if ((!(((RogueType__is_compound( type_37 )))) && !(((RogueType__omit_output( type_37 ))))))
      {
        RogueType__print_data_definition__CPPWriter( type_37, writer_1 );
        RogueCPPWriter__println( writer_1 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[426] );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[175] );
  {
    RogueTypeList* _auto_129_38 = (THIS->type_list);
    RogueInteger _auto_130_39 = (0);
    for (;_auto_130_39 < _auto_129_38->count;++_auto_130_39)
    {
      RogueClassType* type_40 = (((RogueClassType*)(_auto_129_38->data->objects[_auto_130_39])));
      if (!(((RogueType__omit_output( type_40 )))))
      {
        RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_program.literal_strings[427] ))), type_40->cpp_type_name ))), Rogue_program.literal_strings[428] );
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_1, type_40->cpp_name ))), Rogue_program.literal_strings[184] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[429] );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[430] );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[431] );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[432] );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[433] );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[425] );
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_131_41 = (THIS->type_list);
    RogueInteger _auto_132_42 = (0);
    for (;_auto_132_42 < _auto_131_41->count;++_auto_132_42)
    {
      RogueClassType* type_43 = (((RogueClassType*)(_auto_131_41->data->objects[_auto_132_42])));
      RogueType__print_method_prototypes__CPPWriter( type_43, writer_1 );
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[435] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__close( writer_1 );
  RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[391] ))), filepath_0 ))), Rogue_program.literal_strings[436] ))) ))) );
  writer_1 = ((RogueClassCPPWriter*)((RogueCPPWriter__init__String( ((RogueClassCPPWriter*)Rogue_program.type_CPPWriter->create_and_init_object()), ((RogueString__operatorPLUS__String( filepath_0, Rogue_program.literal_strings[370] ))) ))));
  RogueString* base_filename_2 = (filepath_0);
  if (((RogueString__contains__String( base_filename_2, ((RogueCharacter__to_String( (RogueCharacter)'/' ))) ))))
  {
    base_filename_2 = ((RogueString*)((RogueString__after_last__Character( base_filename_2, (RogueCharacter)'/' ))));
  }
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[437] );
  RogueCPPWriter__println__String( writer_1, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[438] ))), base_filename_2 ))), Rogue_program.literal_strings[439] ))) ))) );
  RogueCPPWriter__println( writer_1 );
  {
    RogueStringList* _auto_133_44 = (THIS->native_code);
    RogueInteger _auto_134_45 = (0);
    for (;_auto_134_45 < _auto_133_44->count;++_auto_134_45)
    {
      RogueString* line_46 = (((RogueString*)(_auto_133_44->data->objects[_auto_134_45])));
      RogueCPPWriter__println__String( writer_1, line_46 );
    }
  }
  RogueStringList* native_method_signature_list_3 = (((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) ))));
  RogueClassString_MethodTable* native_method_signature_lookup_4 = (((RogueString_MethodTable__init( ((RogueClassString_MethodTable*)Rogue_program.type_String_MethodTable->create_and_init_object()) ))));
  {
    RogueTypeList* _auto_135_47 = (THIS->type_list);
    RogueInteger _auto_136_48 = (0);
    for (;_auto_136_48 < _auto_135_47->count;++_auto_136_48)
    {
      RogueClassType* type_49 = (((RogueClassType*)(_auto_135_47->data->objects[_auto_136_48])));
      if (type_49->is_used)
      {
        RogueType__determine_cpp_method_typedefs__StringList_String_MethodTable( type_49, native_method_signature_list_3, native_method_signature_lookup_4 );
      }
    }
  }
  {
    RogueStringList* _auto_137_50 = (native_method_signature_list_3);
    RogueInteger _auto_138_51 = (0);
    for (;_auto_138_51 < _auto_137_50->count;++_auto_138_51)
    {
      RogueString* sig_52 = (((RogueString*)(_auto_137_50->data->objects[_auto_138_51])));
      RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_program.literal_strings[442] ))), ((RogueString__before_first__String( sig_52, Rogue_program.literal_strings[443] ))) ))), Rogue_program.literal_strings[444] );
      RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, ((RogueString_MethodTable__get__String( native_method_signature_lookup_4, sig_52 )))->cpp_typedef ))), Rogue_program.literal_strings[102] );
      RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_1, ((RogueString__after_first__String( sig_52, Rogue_program.literal_strings[443] ))) ))), Rogue_program.literal_strings[184] );
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueStringList* _auto_139_53 = (native_method_signature_list_3);
    RogueInteger _auto_140_54 = (0);
    for (;_auto_140_54 < _auto_139_53->count;++_auto_140_54)
    {
      RogueString* sig_55 = (((RogueString*)(_auto_139_53->data->objects[_auto_140_54])));
      RogueClassMethod* m_5 = (((RogueString_MethodTable__get__String( native_method_signature_lookup_4, sig_55 ))));
      if (m_5->called_dynamically)
      {
        RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_1, m_5->_return_type ))), Rogue_program.literal_strings[445] ))), m_5->cpp_typedef );
        RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_1, Rogue_program.literal_strings[446] ))), m_5->type_context ))), Rogue_program.literal_strings[434] );
        {
          RogueLocalList* _auto_144_56 = (m_5->parameters);
          RogueInteger i_57 = (0);
          for (;i_57 < _auto_144_56->count;++i_57)
          {
            RogueClassLocal* p_6 = (((RogueClassLocal*)(m_5->parameters->data->objects[i_57])));
            RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_1, Rogue_program.literal_strings[403] ))), ((Rogue_Type__compile_type( p_6->_type ))) ))), Rogue_program.literal_strings[447] ))), i_57 );
          }
        }
        RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[448] );
        RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[175] );
        RogueCPPWriter__print__String( writer_1, Rogue_program.literal_strings[427] );
        if (!!(m_5->_return_type))
        {
          RogueCPPWriter__print__String( writer_1, Rogue_program.literal_strings[449] );
        }
        RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_program.literal_strings[450] ))), m_5->cpp_typedef );
        RogueCPPWriter__print__String( writer_1, Rogue_program.literal_strings[451] );
        {
          RogueLocalList* _auto_145_58 = (m_5->parameters);
          RogueInteger i_59 = (0);
          for (;i_59 < _auto_145_58->count;++i_59)
          {
            RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( writer_1, Rogue_program.literal_strings[452] ))), i_59 );
          }
        }
        RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[420] );
        RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[100] );
        RogueCPPWriter__println( writer_1 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[453] );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[175] );
  writer_1->indent += 2;
  RogueInteger table_index_7 = (0);
  {
    RogueTypeList* _auto_146_60 = (THIS->type_list);
    RogueInteger _auto_147_61 = (0);
    for (;_auto_147_61 < _auto_146_60->count;++_auto_147_61)
    {
      RogueClassType* type_62 = (((RogueClassType*)(_auto_146_60->data->objects[_auto_147_61])));
      if (!(((RogueType__omit_output( type_62 )))))
      {
        table_index_7 = ((RogueInteger)((RogueType__print_dynamic_method_table_entries__Integer_CPPWriter( type_62, table_index_7, writer_1 ))));
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[425] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( writer_1, Rogue_program.literal_strings[458] ))), THIS->type_list->count ))), Rogue_program.literal_strings[459] );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[175] );
  writer_1->indent += 2;
  RogueLogical needs_comma_8 = (false);
  {
    RogueTypeList* _auto_148_63 = (THIS->type_list);
    RogueInteger _auto_149_64 = (0);
    for (;_auto_149_64 < _auto_148_63->count;++_auto_149_64)
    {
      RogueClassType* type_65 = (((RogueClassType*)(_auto_148_63->data->objects[_auto_149_64])));
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[425] );
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_150_66 = (THIS->type_list);
    RogueInteger _auto_151_67 = (0);
    for (;_auto_151_67 < _auto_150_66->count;++_auto_151_67)
    {
      RogueClassType* type_68 = (((RogueClassType*)(_auto_150_66->data->objects[_auto_151_67])));
      RogueType__print_type_definition__CPPWriter( type_68, writer_1 );
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_152_69 = (THIS->type_list);
    RogueInteger _auto_153_70 = (0);
    for (;_auto_153_70 < _auto_152_69->count;++_auto_153_70)
    {
      RogueClassType* type_71 = (((RogueClassType*)(_auto_152_69->data->objects[_auto_153_70])));
      RogueType__print_routine_prototypes__CPPWriter( type_71, writer_1 );
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_154_72 = (THIS->type_list);
    RogueInteger _auto_155_73 = (0);
    for (;_auto_155_73 < _auto_154_72->count;++_auto_155_73)
    {
      RogueClassType* type_74 = (((RogueClassType*)(_auto_154_72->data->objects[_auto_155_73])));
      RogueType__print_routine_definitions__CPPWriter( type_74, writer_1 );
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_156_75 = (THIS->type_list);
    RogueInteger _auto_157_76 = (0);
    for (;_auto_157_76 < _auto_156_75->count;++_auto_157_76)
    {
      RogueClassType* type_77 = (((RogueClassType*)(_auto_156_75->data->objects[_auto_157_76])));
      RogueType__print_method_definitions__CPPWriter( type_77, writer_1 );
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueInteger type_count_9 = (0);
  {
    RogueTypeList* _auto_158_78 = (THIS->type_list);
    RogueInteger _auto_159_79 = (0);
    for (;_auto_159_79 < _auto_158_78->count;++_auto_159_79)
    {
      RogueClassType* type_80 = (((RogueClassType*)(_auto_158_78->data->objects[_auto_159_79])));
      if (!(type_80->is_array))
      {
        ++type_count_9;
      }
    }
  }
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( writer_1, Rogue_program.literal_strings[492] ))), type_count_9 ))), Rogue_program.literal_strings[102] );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[175] );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[100] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[493] );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[175] );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[100] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[494] );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[175] );
  writer_1->indent += 2;
  {
    RogueTypeList* _auto_160_81 = (THIS->type_list);
    RogueInteger _auto_161_82 = (0);
    for (;_auto_161_82 < _auto_160_81->count;++_auto_161_82)
    {
      RogueClassType* type_83 = (((RogueClassType*)(_auto_160_81->data->objects[_auto_161_82])));
      if (!(((RogueType__omit_output( type_83 )))))
      {
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_program.literal_strings[495] ))), type_83->cpp_name ))), Rogue_program.literal_strings[496] ))), type_83->cpp_type_name ))), Rogue_program.literal_strings[497] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_162_84 = (THIS->type_list);
    RogueInteger _auto_163_85 = (0);
    for (;_auto_163_85 < _auto_162_84->count;++_auto_163_85)
    {
      RogueClassType* type_86 = (((RogueClassType*)(_auto_162_84->data->objects[_auto_163_85])));
      if ((((RogueType__is_native( type_86 ))) || !(((RogueType__omit_output( type_86 ))))))
      {
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_program.literal_strings[495] ))), type_86->cpp_name ))), Rogue_program.literal_strings[498] ))), type_86->index ))), Rogue_program.literal_strings[184] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_164_87 = (THIS->type_list);
    RogueInteger _auto_165_88 = (0);
    for (;_auto_165_88 < _auto_164_87->count;++_auto_165_88)
    {
      RogueClassType* type_89 = (((RogueClassType*)(_auto_164_87->data->objects[_auto_165_88])));
      if (!(((RogueType__omit_output( type_89 )))))
      {
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_program.literal_strings[495] ))), type_89->cpp_name ))), Rogue_program.literal_strings[499] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( writer_1, Rogue_program.literal_strings[500] ))), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_list->count ))), Rogue_program.literal_strings[184] );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[501] );
  {
    RogueStringList* _auto_166_90 = (((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_list);
    RogueInteger i_91 = (0);
    for (;i_91 < _auto_166_90->count;++i_91)
    {
      RogueCPPWriter__print__String( ((RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( writer_1, Rogue_program.literal_strings[502] ))), i_91 ))), Rogue_program.literal_strings[503] );
      RogueCPPWriter__print_string_utf8__String( writer_1, ((RogueString*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_list->data->objects[i_91])) );
      RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[509] );
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[100] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[510] );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[175] );
  writer_1->indent += 2;
  {
    RogueTypeList* _auto_167_92 = (THIS->type_list);
    RogueInteger _auto_168_93 = (0);
    for (;_auto_168_93 < _auto_167_92->count;++_auto_168_93)
    {
      RogueClassType* type_94 = (((RogueClassType*)(_auto_167_92->data->objects[_auto_168_93])));
      if (!(((RogueType__omit_output( type_94 )))))
      {
        RogueClassMethod* m_10 = (((RogueType__find_routine__String( type_94, Rogue_program.literal_strings[343] ))));
        if ((!!(m_10) && m_10->type_context == type_94))
        {
          RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_1, m_10->cpp_name ))), Rogue_program.literal_strings[497] );
        }
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[511] );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[512] );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[175] );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[513] );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[100] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[514] );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[515] );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[100] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[516] );
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_169_95 = (THIS->type_list);
    RogueInteger _auto_170_96 = (0);
    for (;_auto_170_96 < _auto_169_95->count;++_auto_170_96)
    {
      RogueClassType* type_97 = (((RogueClassType*)(_auto_169_95->data->objects[_auto_170_96])));
      RogueType__declare_settings__CPPWriter( type_97, writer_1 );
    }
  }
  if (((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->generate_main)
  {
    RogueCPPWriter__println( writer_1 );
    RogueCPPWriter__println__String( writer_1, Rogue_program.literal_strings[520] );
  }
  RogueCPPWriter__close( writer_1 );
}

RogueClassProgram* RogueProgram__init_object( RogueClassProgram* THIS )
{
  THIS->code_prefix = Rogue_program.literal_strings[19];
  THIS->program_name = Rogue_program.literal_strings[20];
  THIS->template_list = ((RogueTemplateList__init( ((RogueTemplateList*)Rogue_program.type_TemplateList->create_and_init_object()) )));
  THIS->template_lookup = ((RogueString_TemplateTable__init( ((RogueClassString_TemplateTable*)Rogue_program.type_String_TemplateTable->create_and_init_object()) )));
  THIS->augment_lookup = ((RogueString_AugmentListTable__init( ((RogueClassString_AugmentListTable*)Rogue_program.type_String_AugmentListTable->create_and_init_object()) )));
  THIS->requisite_list = ((RogueRequisiteItemList__init( ((RogueRequisiteItemList*)Rogue_program.type_RequisiteItemList->create_and_init_object()) )));
  THIS->first_filepath = Rogue_program.literal_strings[0];
  THIS->native_header = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  THIS->native_code = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  THIS->methods_by_signature = ((RogueString_MethodListTable__init( ((RogueClassString_MethodListTable*)Rogue_program.type_String_MethodListTable->create_and_init_object()) )));
  THIS->type_list = ((RogueTypeList__init( ((RogueTypeList*)Rogue_program.type_TypeList->create_and_init_object()) )));
  THIS->type_lookup = ((RogueString_TypeTable__init( ((RogueClassString_TypeTable*)Rogue_program.type_String_TypeTable->create_and_init_object()) )));
  THIS->literal_string_lookup = ((RogueString_IntegerTable__init( ((RogueClassString_IntegerTable*)Rogue_program.type_String_IntegerTable->create_and_init_object()) )));
  THIS->literal_string_list = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  THIS->string_buffer = ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) )));
  return (RogueClassProgram*)(THIS);
}

RogueString* RogueTemplateList__to_String( RogueTemplateList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueTemplateList* _auto_218_2 = (THIS);
    RogueInteger _auto_219_3 = (0);
    for (;_auto_219_3 < _auto_218_2->count;++_auto_219_3)
    {
      RogueClassTemplate* value_4 = (((RogueClassTemplate*)(_auto_218_2->data->objects[_auto_219_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueTemplateList__type_name( RogueTemplateList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[917]);
}

RogueTemplateList* RogueTemplateList__init_object( RogueTemplateList* THIS )
{
  return (RogueTemplateList*)(THIS);
}

RogueTemplateList* RogueTemplateList__init( RogueTemplateList* THIS )
{
  RogueTemplateList__init__Integer( THIS, 10 );
  return (RogueTemplateList*)(THIS);
}

RogueTemplateList* RogueTemplateList__init__Integer( RogueTemplateList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassTemplate*), true );
  return (RogueTemplateList*)(THIS);
}

RogueTemplateList* RogueTemplateList__add__Template( RogueTemplateList* THIS, RogueClassTemplate* value_0 )
{
  ((RogueTemplateList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTemplateList*)(THIS);
}

RogueInteger RogueTemplateList__capacity( RogueTemplateList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTemplateList* RogueTemplateList__reserve__Integer( RogueTemplateList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassTemplate*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueTemplateList__capacity( THIS ))) + ((RogueTemplateList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassTemplate*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTemplateList*)(THIS);
}

RogueString* RogueTemplate__type_name( RogueClassTemplate* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[530]);
}

RogueClassTemplate* RogueTemplate__init__Token_String_Integer( RogueClassTemplate* THIS, RogueClassToken* _auto_51_0, RogueString* _auto_52_1, RogueInteger attribute_flags_2 )
{
  THIS->name = _auto_52_1;
  THIS->t = _auto_51_0;
  RogueAttributes__add__Integer( THIS->attributes, attribute_flags_2 );
  return (RogueClassTemplate*)(THIS);
}

RogueClassTypeParameter* RogueTemplate__add_type_parameter__Token_String( RogueClassTemplate* THIS, RogueClassToken* p_t_0, RogueString* p_name_1 )
{
  if (THIS->type_parameters == NULL)
  {
    THIS->type_parameters = ((RogueTypeParameterList__init( ((RogueTypeParameterList*)Rogue_program.type_TypeParameterList->create_and_init_object()) )));
  }
  RogueClassTypeParameter* param_2 = (((RogueTypeParameter__init__Token_String( ((RogueClassTypeParameter*)Rogue_program.type_TypeParameter->create_and_init_object()), p_t_0, p_name_1 ))));
  RogueTypeParameterList__add__TypeParameter( THIS->type_parameters, param_2 );
  return (RogueClassTypeParameter*)(param_2);
}

RogueInteger Rogue_Template__element_type( RogueClassTemplate* THIS )
{
  return (RogueInteger)((THIS->attributes->flags & 7));
}

void RogueTemplate__instantiate__Type( RogueClassTemplate* THIS, RogueClassType* type_0 )
{
  type_0->t = THIS->t;
  RogueAttributes__add__Attributes( type_0->attributes, THIS->attributes );
  RogueTokenList* augmented_tokens_1 = (THIS->tokens);
  RogueAugmentList* augments_2 = (((RogueString_AugmentListTable__get__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->augment_lookup, type_0->name ))));
  if (!!(augments_2))
  {
    RogueInteger t_count_3 = (THIS->tokens->count);
    {
      RogueAugmentList* _auto_234_4 = (augments_2);
      RogueInteger _auto_235_5 = (0);
      for (;_auto_235_5 < _auto_234_4->count;++_auto_235_5)
      {
        RogueClassAugment* aug_6 = (((RogueClassAugment*)(_auto_234_4->data->objects[_auto_235_5])));
        t_count_3 += aug_6->tokens->count;
      }
    }
    augmented_tokens_1 = ((RogueTokenList*)((RogueTokenList__init__Integer( ((RogueTokenList*)Rogue_program.type_TokenList->create_and_init_object()), t_count_3 ))));
    RogueTokenList__add__TokenList( augmented_tokens_1, THIS->tokens );
    RogueTokenList__remove_last( augmented_tokens_1 );
    RogueTokenList__add__Token( augmented_tokens_1, ((RogueToken__init__TokenType( ((RogueClassToken*)Rogue_program.type_Token->create_and_init_object()), RogueClassTokenType::begin_augment_tokens ))) );
    {
      RogueAugmentList* _auto_249_7 = (augments_2);
      RogueInteger _auto_250_8 = (0);
      for (;_auto_250_8 < _auto_249_7->count;++_auto_250_8)
      {
        RogueClassAugment* aug_9 = (((RogueClassAugment*)(_auto_249_7->data->objects[_auto_250_8])));
        {
          RogueTypeList* _auto_251_10 = (aug_9->base_types);
          RogueInteger _auto_252_11 = (0);
          for (;_auto_252_11 < _auto_251_10->count;++_auto_252_11)
          {
            RogueClassType* base_type_12 = (((RogueClassType*)(_auto_251_10->data->objects[_auto_252_11])));
            RogueTypeList__add__Type( type_0->base_types, base_type_12 );
          }
        }
        RogueTokenList__add__TokenList( augmented_tokens_1, aug_9->tokens );
      }
    }
    RogueTokenList__add__Token( augmented_tokens_1, ((RogueTokenList__last( THIS->tokens ))) );
  }
  if (((RogueString__ends_with__String( type_0->name, ((RogueCharacter__to_String( (RogueCharacter)']' ))) ))))
  {
    RogueTemplate__instantiate_list__Type_TokenList( THIS, type_0, augmented_tokens_1 );
  }
  else if (((RogueString__ends_with__String( type_0->name, ((RogueCharacter__to_String( (RogueCharacter)'?' ))) ))))
  {
    RogueTemplate__instantiate_optional__Type_TokenList( THIS, type_0, augmented_tokens_1 );
  }
  else if (!!(THIS->type_parameters))
  {
    RogueTemplate__instantiate_parameterized_type__Type_TokenList( THIS, type_0, augmented_tokens_1 );
  }
  else
  {
    RogueTemplate__instantiate_standard_type__Type_TokenList( THIS, type_0, augmented_tokens_1 );
  }
}

void RogueTemplate__instantiate_list__Type_TokenList( RogueClassTemplate* THIS, RogueClassType* type_0, RogueTokenList* augmented_tokens_1 )
{
  type_0->is_list = true;
  type_0->_element_type = ((RogueType__organize( ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, ((RogueString__leftmost__Integer( type_0->name, -2 ))) ))) )));
  RogueTokenList* instance_tokens_2 = (((RogueTokenList__init__Integer( ((RogueTokenList*)Rogue_program.type_TokenList->create_and_init_object()), augmented_tokens_1->count ))));
  {
    RogueTokenList* _auto_253_3 = (augmented_tokens_1);
    RogueInteger _auto_254_4 = (0);
    for (;_auto_254_4 < _auto_253_3->count;++_auto_254_4)
    {
      RogueClassToken* template_t_5 = (((RogueClassToken*)(_auto_253_3->data->objects[_auto_254_4])));
      if (template_t_5->_type == RogueClassTokenType::placeholder_id)
      {
        if (((RogueString__operatorLESSTHANGREATERTHAN__String( (call_ROGUEM33( 1, (RogueClassToken*)(template_t_5) )), Rogue_program.literal_strings[283] ))) == 0)
        {
          RogueTokenList__add__Token( instance_tokens_2, ((RogueTokenType__create_token__Token_String( RogueClassTokenType::identifier, template_t_5, type_0->_element_type->name ))) );
        }
        else
        {
          RogueTokenList__add__Token( instance_tokens_2, template_t_5 );
        }
      }
      else
      {
        RogueTokenList__add__Token( instance_tokens_2, template_t_5 );
      }
    }
  }
  RogueParser__parse_type_def__Type( ((RogueParser__init__TokenList( ((RogueClassParser*)Rogue_program.type_Parser->create_and_init_object()), instance_tokens_2 ))), type_0 );
}

void RogueTemplate__instantiate_optional__Type_TokenList( RogueClassTemplate* THIS, RogueClassType* type_0, RogueTokenList* augmented_tokens_1 )
{
  type_0->is_optional = true;
  type_0->_element_type = ((RogueType__organize( ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, ((RogueString__leftmost__Integer( type_0->name, -1 ))) ))) )));
  RogueTokenList* instance_tokens_2 = (((RogueTokenList__init__Integer( ((RogueTokenList*)Rogue_program.type_TokenList->create_and_init_object()), augmented_tokens_1->count ))));
  {
    RogueTokenList* _auto_255_3 = (augmented_tokens_1);
    RogueInteger _auto_256_4 = (0);
    for (;_auto_256_4 < _auto_255_3->count;++_auto_256_4)
    {
      RogueClassToken* template_t_5 = (((RogueClassToken*)(_auto_255_3->data->objects[_auto_256_4])));
      if (template_t_5->_type == RogueClassTokenType::placeholder_id)
      {
        if (((RogueString__operatorLESSTHANGREATERTHAN__String( (call_ROGUEM33( 1, (RogueClassToken*)(template_t_5) )), Rogue_program.literal_strings[283] ))) == 0)
        {
          RogueTokenList__add__Token( instance_tokens_2, ((RogueTokenType__create_token__Token_String( RogueClassTokenType::identifier, template_t_5, type_0->_element_type->name ))) );
        }
        else
        {
          RogueTokenList__add__Token( instance_tokens_2, template_t_5 );
        }
      }
      else
      {
        RogueTokenList__add__Token( instance_tokens_2, template_t_5 );
      }
    }
  }
  RogueParser__parse_type_def__Type( ((RogueParser__init__TokenList( ((RogueClassParser*)Rogue_program.type_Parser->create_and_init_object()), instance_tokens_2 ))), type_0 );
}

void RogueTemplate__instantiate_parameterized_type__Type_TokenList( RogueClassTemplate* THIS, RogueClassType* type_0, RogueTokenList* augmented_tokens_1 )
{
  RogueTokenList* instance_tokens_2 = (augmented_tokens_1);
  RogueClassString_TypeSpecializerTable* type_specializers_3 = (((RogueString_TypeSpecializerTable__init( ((RogueClassString_TypeSpecializerTable*)Rogue_program.type_String_TypeSpecializerTable->create_and_init_object()) ))));
  RogueString* specialization_string_4 = (((RogueString__from_first__Character( type_0->name, (RogueCharacter)'<' ))));
  if (specialization_string_4->count == 0)
  {
    throw ((RogueToken__error__String( type_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[300] ))), type_0->name ))), Rogue_program.literal_strings[301] ))), type_0->name ))), Rogue_program.literal_strings[302] ))) ))) )));
  }
  RogueClassParser* parser_5 = (((RogueParser__init__Token_String_String( ((RogueClassParser*)Rogue_program.type_Parser->create_and_init_object()), THIS->t, type_0->name, ((RogueString__from_first__Character( type_0->name, (RogueCharacter)'<' ))) ))));
  RogueParser__read( parser_5 );
  RogueStringBuilder* buffer_6 = (((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))));
  RogueLogical first_7 = (true);
  while ((first_7 || ((RogueParser__consume__TokenType( parser_5, RogueClassTokenType::symbol_comma )))))
  {
    first_7 = ((RogueLogical)false);
    RogueTokenList* specializer_tokens_8 = (((RogueTokenList__init( ((RogueTokenList*)Rogue_program.type_TokenList->create_and_init_object()) ))));
    RogueParser__parse_specializer__StringBuilder_TokenList( parser_5, ((RogueStringBuilder__clear( buffer_6 ))), specializer_tokens_8 );
    RogueInteger index_9 = (((RogueString_TypeSpecializerTable__count( type_specializers_3 ))));
    if (index_9 >= THIS->type_parameters->count)
    {
      throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[303] )));
    }
    RogueClassTypeParameter* param_10 = (((RogueClassTypeParameter*)(THIS->type_parameters->data->objects[index_9])));
    RogueClassTypeSpecializer* specializer_11 = (((RogueTypeSpecializer__init__String_Integer( ((RogueClassTypeSpecializer*)Rogue_program.type_TypeSpecializer->create_and_init_object()), param_10->name, index_9 ))));
    specializer_11->tokens = specializer_tokens_8;
    RogueString_TypeSpecializerTable__set__String_TypeSpecializer( type_specializers_3, specializer_11->name, specializer_11 );
  }
  if (((RogueString_TypeSpecializerTable__count( type_specializers_3 ))) < THIS->type_parameters->count)
  {
    throw ((RogueToken__error__String( type_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[304] ))), type_0->name ))), Rogue_program.literal_strings[305] ))), ((RogueInteger__to_String( ((RogueString_TypeSpecializerTable__count( type_specializers_3 ))) ))) ))), Rogue_program.literal_strings[306] ))), ((RogueInteger__to_String( THIS->type_parameters->count ))) ))), Rogue_program.literal_strings[307] ))) ))) )));
  }
  instance_tokens_2 = ((RogueTokenList*)((RogueTokenList__init__Integer( ((RogueTokenList*)Rogue_program.type_TokenList->create_and_init_object()), (augmented_tokens_1->count * 2) ))));
  {
    RogueTokenList* _auto_259_13 = (augmented_tokens_1);
    RogueInteger _auto_260_14 = (0);
    for (;_auto_260_14 < _auto_259_13->count;++_auto_260_14)
    {
      RogueClassToken* template_t_15 = (((RogueClassToken*)(_auto_259_13->data->objects[_auto_260_14])));
      if (template_t_15->_type == RogueClassTokenType::placeholder_id)
      {
        RogueClassTypeSpecializer* specializer_12 = (((RogueString_TypeSpecializerTable__get__String( type_specializers_3, (call_ROGUEM33( 1, (RogueClassToken*)(template_t_15) )) ))));
        if (!!(specializer_12))
        {
          {
            RogueTokenList* _auto_261_16 = (specializer_12->tokens);
            RogueInteger _auto_262_17 = (0);
            for (;_auto_262_17 < _auto_261_16->count;++_auto_262_17)
            {
              RogueClassToken* specializer_t_18 = (((RogueClassToken*)(_auto_261_16->data->objects[_auto_262_17])));
              RogueTokenList__add__Token( instance_tokens_2, specializer_t_18 );
            }
          }
        }
        else
        {
          RogueTokenList__add__Token( instance_tokens_2, template_t_15 );
        }
      }
      else
      {
        RogueTokenList__add__Token( instance_tokens_2, template_t_15 );
      }
    }
  }
  RogueParser__parse_type_def__Type( ((RogueParser__init__TokenList( ((RogueClassParser*)Rogue_program.type_Parser->create_and_init_object()), instance_tokens_2 ))), type_0 );
}

void RogueTemplate__instantiate_standard_type__Type_TokenList( RogueClassTemplate* THIS, RogueClassType* type_0, RogueTokenList* augmented_tokens_1 )
{
  if (((RogueString__contains__String( type_0->name, ((RogueCharacter__to_String( (RogueCharacter)'<' ))) ))))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[308] )));
  }
  RogueParser__parse_type_def__Type( ((RogueParser__init__TokenList( ((RogueClassParser*)Rogue_program.type_Parser->create_and_init_object()), augmented_tokens_1 ))), type_0 );
}

RogueClassTemplate* RogueTemplate__init_object( RogueClassTemplate* THIS )
{
  THIS->tokens = ((RogueTokenList__init( ((RogueTokenList*)Rogue_program.type_TokenList->create_and_init_object()) )));
  THIS->attributes = ((RogueClassAttributes*)Rogue_program.type_Attributes->create_and_init_object());
  return (RogueClassTemplate*)(THIS);
}

RogueString* RogueString_TemplateTable__to_String( RogueClassString_TemplateTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_TemplateTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))) ))) ))));
}

RogueString* RogueString_TemplateTable__type_name( RogueClassString_TemplateTable* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[531]);
}

RogueClassString_TemplateTable* RogueString_TemplateTable__init( RogueClassString_TemplateTable* THIS )
{
  RogueString_TemplateTable__init__Integer( THIS, 16 );
  return (RogueClassString_TemplateTable*)(THIS);
}

RogueClassString_TemplateTable* RogueString_TemplateTable__init__Integer( RogueClassString_TemplateTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_TemplateTableEntryList__init__Integer_String_TemplateTableEntry( ((RogueTableEntry_of_String_TemplateList*)Rogue_program.type_TableEntry_of_String_TemplateList->create_and_init_object()), bin_count_0, ((RogueClassString_TemplateTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  return (RogueClassString_TemplateTable*)(THIS);
}

RogueClassString_TemplateTableEntry* RogueString_TemplateTable__find__String( RogueClassString_TemplateTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_TemplateTableEntry* entry_2 = (((RogueClassString_TemplateTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_TemplateTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_TemplateTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_TemplateTableEntry*)(((RogueClassString_TemplateTableEntry*)(NULL)));
}

RogueClassTemplate* RogueString_TemplateTable__get__String( RogueClassString_TemplateTable* THIS, RogueString* key_0 )
{
  RogueClassString_TemplateTableEntry* entry_1 = (((RogueString_TemplateTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassTemplate*)(entry_1->value);
  }
  else
  {
    RogueClassTemplate* default_value_2 = 0;
    return (RogueClassTemplate*)(default_value_2);
  }
}

void RogueString_TemplateTable__set__String_Template( RogueClassString_TemplateTable* THIS, RogueString* key_0, RogueClassTemplate* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_TemplateTableEntry* entry_4 = (((RogueClassString_TemplateTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_TemplateTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_TemplateTableEntry*)((RogueString_TemplateTableEntry__init__String_Template_Integer( ((RogueClassString_TemplateTableEntry*)Rogue_program.type_String_TemplateTableEntry->create_and_init_object()), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_TemplateTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_TemplateTable__print_to__StringBuilder( RogueClassString_TemplateTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_TemplateTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_TemplateTable* RogueString_TemplateTable__init_object( RogueClassString_TemplateTable* THIS )
{
  return (RogueClassString_TemplateTable*)(THIS);
}

RogueString* RogueString_AugmentListTable__to_String( RogueClassString_AugmentListTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_AugmentListTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))) ))) ))));
}

RogueString* RogueString_AugmentListTable__type_name( RogueClassString_AugmentListTable* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[532]);
}

RogueClassString_AugmentListTable* RogueString_AugmentListTable__init( RogueClassString_AugmentListTable* THIS )
{
  RogueString_AugmentListTable__init__Integer( THIS, 16 );
  return (RogueClassString_AugmentListTable*)(THIS);
}

RogueClassString_AugmentListTable* RogueString_AugmentListTable__init__Integer( RogueClassString_AugmentListTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_AugmentListTableEntryList__init__Integer_String_AugmentListTableEntry( ((RogueTableEntry_of_String_AugmentListList*)Rogue_program.type_TableEntry_of_String_AugmentListList->create_and_init_object()), bin_count_0, ((RogueClassString_AugmentListTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  return (RogueClassString_AugmentListTable*)(THIS);
}

RogueClassString_AugmentListTableEntry* RogueString_AugmentListTable__find__String( RogueClassString_AugmentListTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_AugmentListTableEntry* entry_2 = (((RogueClassString_AugmentListTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_AugmentListTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_AugmentListTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_AugmentListTableEntry*)(((RogueClassString_AugmentListTableEntry*)(NULL)));
}

RogueAugmentList* RogueString_AugmentListTable__get__String( RogueClassString_AugmentListTable* THIS, RogueString* key_0 )
{
  RogueClassString_AugmentListTableEntry* entry_1 = (((RogueString_AugmentListTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueAugmentList*)(entry_1->value);
  }
  else
  {
    RogueAugmentList* default_value_2 = 0;
    return (RogueAugmentList*)(default_value_2);
  }
}

void RogueString_AugmentListTable__set__String_AugmentList( RogueClassString_AugmentListTable* THIS, RogueString* key_0, RogueAugmentList* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_AugmentListTableEntry* entry_4 = (((RogueClassString_AugmentListTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_AugmentListTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_AugmentListTableEntry*)((RogueString_AugmentListTableEntry__init__String_AugmentList_Integer( ((RogueClassString_AugmentListTableEntry*)Rogue_program.type_String_AugmentListTableEntry->create_and_init_object()), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_AugmentListTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_AugmentListTable__print_to__StringBuilder( RogueClassString_AugmentListTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_AugmentListTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_AugmentListTable* RogueString_AugmentListTable__init_object( RogueClassString_AugmentListTable* THIS )
{
  return (RogueClassString_AugmentListTable*)(THIS);
}

RogueString* RogueRequisiteItemList__to_String( RogueRequisiteItemList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueRequisiteItemList* _auto_271_2 = (THIS);
    RogueInteger _auto_272_3 = (0);
    for (;_auto_272_3 < _auto_271_2->count;++_auto_272_3)
    {
      RogueClassRequisiteItem* value_4 = (((RogueClassRequisiteItem*)(_auto_271_2->data->objects[_auto_272_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueRequisiteItemList__type_name( RogueRequisiteItemList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[918]);
}

RogueRequisiteItemList* RogueRequisiteItemList__init_object( RogueRequisiteItemList* THIS )
{
  return (RogueRequisiteItemList*)(THIS);
}

RogueRequisiteItemList* RogueRequisiteItemList__init( RogueRequisiteItemList* THIS )
{
  RogueRequisiteItemList__init__Integer( THIS, 10 );
  return (RogueRequisiteItemList*)(THIS);
}

RogueRequisiteItemList* RogueRequisiteItemList__init__Integer( RogueRequisiteItemList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassRequisiteItem*), true );
  return (RogueRequisiteItemList*)(THIS);
}

RogueRequisiteItemList* RogueRequisiteItemList__add__RequisiteItem( RogueRequisiteItemList* THIS, RogueClassRequisiteItem* value_0 )
{
  ((RogueRequisiteItemList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueRequisiteItemList*)(THIS);
}

RogueInteger RogueRequisiteItemList__capacity( RogueRequisiteItemList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueRequisiteItemList* RogueRequisiteItemList__reserve__Integer( RogueRequisiteItemList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassRequisiteItem*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueRequisiteItemList__capacity( THIS ))) + ((RogueRequisiteItemList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassRequisiteItem*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueRequisiteItemList*)(THIS);
}

RogueString* RogueRequisiteItem__type_name( RogueClassRequisiteItem* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[533]);
}

RogueClassRequisiteItem* RogueRequisiteItem__init__Token_Type_String( RogueClassRequisiteItem* THIS, RogueClassToken* _auto_54_0, RogueClassType* _auto_55_1, RogueString* _auto_56_2 )
{
  THIS->signature = _auto_56_2;
  THIS->_type = _auto_55_1;
  THIS->t = _auto_54_0;
  return (RogueClassRequisiteItem*)(THIS);
}

RogueClassRequisiteItem* RogueRequisiteItem__init_object( RogueClassRequisiteItem* THIS )
{
  return (RogueClassRequisiteItem*)(THIS);
}

RogueString* RogueMethod__to_String( RogueClassMethod* THIS )
{
  return (RogueString*)(THIS->signature);
}

RogueString* RogueMethod__type_name( RogueClassMethod* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[534]);
}

RogueClassMethod* RogueMethod__init__Token_Type_String( RogueClassMethod* THIS, RogueClassToken* _auto_58_0, RogueClassType* _auto_59_1, RogueString* _auto_60_2 )
{
  THIS->name = _auto_60_2;
  RogueMethod__set_type_context__Type( THIS, _auto_59_1 );
  THIS->t = _auto_58_0;
  return (RogueClassMethod*)(THIS);
}

RogueClassMethod* RogueMethod__clone( RogueClassMethod* THIS )
{
  RogueClassMethod* result_0 = (((RogueMethod__init__Token_Type_String( ((RogueClassMethod*)Rogue_program.type_Method->create_and_init_object()), THIS->t, THIS->type_context, THIS->name ))));
  result_0->cpp_name = THIS->cpp_name;
  result_0->cpp_typedef = THIS->cpp_typedef;
  result_0->signature = THIS->signature;
  result_0->attributes = ((RogueAttributes__clone( THIS->attributes )));
  result_0->_return_type = THIS->_return_type;
  result_0->_task_result_type = THIS->_task_result_type;
  result_0->locals = ((RogueLocalList__init( ((RogueLocalList*)Rogue_program.type_LocalList->create_and_init_object()) )));
  {
    RogueLocalList* _auto_282_1 = (THIS->locals);
    RogueInteger _auto_283_2 = (0);
    for (;_auto_283_2 < _auto_282_1->count;++_auto_283_2)
    {
      RogueClassLocal* v_3 = (((RogueClassLocal*)(_auto_282_1->data->objects[_auto_283_2])));
      RogueLocalList__add__Local( result_0->locals, ((RogueLocal__clone__CloneArgs( v_3, ((RogueClassCloneArgs*)(NULL)) ))) );
    }
  }
  result_0->parameters = ((RogueLocalList__init( ((RogueLocalList*)Rogue_program.type_LocalList->create_and_init_object()) )));
  {
    RogueLocalList* _auto_284_4 = (THIS->parameters);
    RogueInteger i_5 = (0);
    for (;i_5 < _auto_284_4->count;++i_5)
    {
      RogueLocalList__add__Local( result_0->parameters, ((RogueClassLocal*)(THIS->locals->data->objects[i_5])) );
    }
  }
  result_0->label_list = ((RogueCmdLabelList__init__Integer( ((RogueCmdLabelList*)Rogue_program.type_CmdLabelList->create_and_init_object()), THIS->label_list->count )));
  result_0->label_lookup = ((RogueString_CmdLabelTable__init( ((RogueClassString_CmdLabelTable*)Rogue_program.type_String_CmdLabelTable->create_and_init_object()) )));
  result_0->min_args = THIS->min_args;
  result_0->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, ((RogueClassCloneArgs*)(((RogueCloneMethodArgs__init__Method( ((RogueClassCloneMethodArgs*)Rogue_program.type_CloneMethodArgs->create_and_init_object()), result_0 ))))) )));
  result_0->native_code = THIS->native_code;
  result_0->index = THIS->index;
  return (RogueClassMethod*)(result_0);
}

RogueClassMethod* RogueMethod__incorporate__Type( RogueClassMethod* THIS, RogueClassType* into_type_0 )
{
  RogueClassMethod* m_1 = (((RogueMethod__set_incorporated( ((RogueMethod__set_type_context__Type( ((RogueMethod__clone( THIS ))), into_type_0 ))) ))));
  m_1->cpp_name = ((RogueString*)(NULL));
  if (!!(THIS->aspect_statements))
  {
    m_1->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->aspect_statements, ((RogueClassCloneArgs*)(RogueObject::as(NULL,Rogue_program.type_CloneArgs))) )));
  }
  if (THIS->incorporating_classes == NULL)
  {
    THIS->incorporating_classes = ((RogueTypeList__init( ((RogueTypeList*)Rogue_program.type_TypeList->create_and_init_object()) )));
  }
  RogueTypeList__add__Type( THIS->incorporating_classes, into_type_0 );
  m_1->signature = ((RogueString*)(NULL));
  RogueMethod__assign_signature( m_1 );
  return (RogueClassMethod*)(m_1);
}

RogueLogical RogueMethod__accepts_arg_count__Integer( RogueClassMethod* THIS, RogueInteger n_0 )
{
  return (RogueLogical)((n_0 >= THIS->min_args && n_0 <= THIS->parameters->count));
}

RogueClassLocal* RogueMethod__add_local__Token_String_Type_Cmd( RogueClassMethod* THIS, RogueClassToken* v_t_0, RogueString* v_name_1, RogueClassType* v_type_2, RogueClassCmd* v_initial_value_3 )
{
  RogueClassLocal* v_4 = (((RogueLocal__init__Token_String( ((RogueClassLocal*)Rogue_program.type_Local->create_and_init_object()), v_t_0, v_name_1 ))));
  v_4->index = THIS->locals->count;
  v_4->_type = v_type_2;
  v_4->initial_value = v_initial_value_3;
  RogueLocalList__add__Local( THIS->locals, v_4 );
  return (RogueClassLocal*)(v_4);
}

RogueClassLocal* RogueMethod__add_parameter__Token_String_Type( RogueClassMethod* THIS, RogueClassToken* p_t_0, RogueString* p_name_1, RogueClassType* p_type_2 )
{
  RogueClassLocal* p_3 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS, p_t_0, p_name_1, p_type_2, ((RogueClassCmd*)(NULL)) ))));
  RogueLocalList__add__Local( THIS->parameters, p_3 );
  return (RogueClassLocal*)(p_3);
}

void RogueMethod__assign_signature( RogueClassMethod* THIS )
{
  if (!!(THIS->signature))
  {
    return;
  }
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))));
  RogueStringBuilder__print__String( buffer_0, THIS->name );
  RogueStringBuilder__print__String( buffer_0, Rogue_program.literal_strings[176] );
  RogueLogical first_1 = (true);
  {
    RogueLocalList* _auto_286_2 = (THIS->parameters);
    RogueInteger _auto_287_3 = (0);
    for (;_auto_287_3 < _auto_286_2->count;++_auto_287_3)
    {
      RogueClassLocal* param_4 = (((RogueClassLocal*)(_auto_286_2->data->objects[_auto_287_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_program.literal_strings[16] );
      }
      RogueStringBuilder__print__String( buffer_0, param_4->_type->name );
    }
  }
  RogueStringBuilder__print__String( buffer_0, Rogue_program.literal_strings[102] );
  THIS->signature = ((RogueStringBuilder__to_String( buffer_0 )));
}

RogueClassCmdLabel* RogueMethod__begin_label__Token_String_Logical( RogueClassMethod* THIS, RogueClassToken* label_t_0, RogueString* label_name_1, RogueLogical consolidate_duplicates_2 )
{
  if (consolidate_duplicates_2)
  {
    THIS->cur_label = ((RogueString_CmdLabelTable__get__String( THIS->label_lookup, label_name_1 )));
    if (!!(THIS->cur_label))
    {
      return (RogueClassCmdLabel*)(THIS->cur_label);
    }
  }
  else if ((((RogueString__operatorLESSTHANGREATERTHAN__String( label_name_1, Rogue_program.literal_strings[257] ))) == 0 && ((RogueString_CmdLabelTable__contains__String( THIS->label_lookup, label_name_1 )))))
  {
    throw ((RogueToken__error__String( label_t_0, Rogue_program.literal_strings[258] )));
  }
  else if ((((RogueString__operatorLESSTHANGREATERTHAN__String( label_name_1, Rogue_program.literal_strings[259] ))) == 0 && ((RogueString_CmdLabelTable__contains__String( THIS->label_lookup, label_name_1 )))))
  {
    throw ((RogueToken__error__String( ((RogueString_CmdLabelTable__get__String( THIS->label_lookup, label_name_1 )))->t, Rogue_program.literal_strings[260] )));
  }
  THIS->cur_label = ((RogueCmdLabel__init__Token_String_CmdStatementList( ((RogueClassCmdLabel*)Rogue_program.type_CmdLabel->create_and_init_object()), label_t_0, label_name_1, ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) ))) )));
  RogueString_CmdLabelTable__set__String_CmdLabel( THIS->label_lookup, label_name_1, THIS->cur_label );
  RogueCmdLabelList__add__CmdLabel( THIS->label_list, THIS->cur_label );
  return (RogueClassCmdLabel*)(THIS->cur_label);
}

RogueLogical RogueMethod__is_augment( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 262144)));
}

RogueLogical RogueMethod__is_dynamic( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 2048)));
}

RogueLogical RogueMethod__is_generated( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 16384)));
}

RogueLogical RogueMethod__is_incorporated( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 8192)));
}

RogueLogical RogueMethod__is_initializer( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 128)));
}

RogueLogical RogueMethod__is_macro( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 64)));
}

RogueLogical RogueMethod__is_native( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 32)));
}

RogueLogical RogueMethod__is_overridden( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 4096)));
}

RogueLogical RogueMethod__is_requisite( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 32768)));
}

RogueLogical RogueMethod__is_routine( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 512)));
}

RogueLogical RogueMethod__is_task( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 65536)));
}

RogueLogical RogueMethod__is_task_conversion( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 131072)));
}

RogueLogical RogueMethod__omit_output( RogueClassMethod* THIS )
{
  return (RogueLogical)((((((RogueMethod__is_native( THIS ))) || ((RogueMethod__is_macro( THIS )))) || !(THIS->is_used)) || ((((RogueMethod__is_generated( THIS ))) && ((RogueString__operatorLESSTHANGREATERTHAN__String( THIS->name, Rogue_program.literal_strings[284] ))) == 0) && ((RogueType__is_compound( THIS->type_context ))))));
}

RogueClassMethod* RogueMethod__organize__Logical( RogueClassMethod* THIS, RogueLogical add_to_lookup_0 )
{
  if (THIS->organized)
  {
    return (RogueClassMethod*)(THIS);
  }
  THIS->organized = true;
  if (((RogueString__operatorLESSTHANGREATERTHAN__String( THIS->name, Rogue_program.literal_strings[285] ))) == 0)
  {
    if (((RogueType__is_compound( THIS->type_context ))))
    {
      throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[327] )));
    }
    THIS->attributes->flags |= 128;
    THIS->_return_type = THIS->type_context;
  }
  if (((RogueMethod__is_task( THIS ))))
  {
    THIS->_task_result_type = THIS->_return_type;
    if (!!(THIS->_return_type))
    {
      RogueType__organize( THIS->_return_type );
      THIS->_return_type = ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[328] ))), THIS->_return_type->name ))), Rogue_program.literal_strings[103] ))) ))) )));
    }
    else
    {
      THIS->_return_type = ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, Rogue_program.literal_strings[329] )));
    }
    RogueType__organize( THIS->_return_type );
  }
  {
    RogueLocalList* _auto_288_7 = (THIS->parameters);
    RogueInteger _auto_289_8 = (0);
    for (;_auto_289_8 < _auto_288_7->count;++_auto_289_8)
    {
      RogueClassLocal* param_9 = (((RogueClassLocal*)(_auto_288_7->data->objects[_auto_289_8])));
      if (!(((RogueMethod__is_routine( THIS )))))
      {
        RogueClassProperty* property_1 = (((RogueType__find_property__String( THIS->type_context, param_9->name ))));
        if (!!(property_1))
        {
          if (param_9->_type == NULL)
          {
            RogueString* new_name_2 = (((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))));
            RogueClassToken* pt_3 = (param_9->t);
            RogueCmdList__insert__Cmd_Integer( ((RogueCmdList*)THIS->statements), ((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)Rogue_program.type_CmdAssign->create_and_init_object()), pt_3, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), pt_3, param_9->name ))))), ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), pt_3, new_name_2 ))))) ))))), 0 );
            param_9->name = new_name_2;
            param_9->_type = property_1->_type;
          }
          else
          {
            throw ((RogueToken__error__String( param_9->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[319] ))), param_9->name ))), Rogue_program.literal_strings[320] ))) ))) )));
          }
        }
      }
      if (!(!!(param_9->_type)))
      {
        throw ((RogueToken__error__String( param_9->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[330] ))), param_9->name ))), Rogue_program.literal_strings[39] ))) ))) )));
      }
    }
  }
  RogueMethod__assign_signature( THIS );
  if ((add_to_lookup_0 && !(((RogueMethod__is_augment( THIS ))))))
  {
    RogueMethodList* list_4 = (((RogueString_MethodListTable__get__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->methods_by_signature, THIS->signature ))));
    if (!(!!(list_4)))
    {
      list_4 = ((RogueMethodList*)((RogueMethodList__init( ((RogueMethodList*)Rogue_program.type_MethodList->create_and_init_object()) ))));
      RogueString_MethodListTable__set__String_MethodList( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->methods_by_signature, THIS->signature, list_4 );
    }
    RogueMethodList__add__Method( list_4, THIS );
    if (((RogueMethod__is_routine( THIS ))))
    {
      RogueClassMethod* existing_m_5 = (((RogueString_MethodTable__get__String( THIS->type_context->routine_lookup_by_signature, THIS->signature ))));
      if ((!!(existing_m_5) && existing_m_5->type_context == THIS->type_context))
      {
        throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[331] ))), THIS->signature ))), Rogue_program.literal_strings[332] ))) ))) )));
      }
      RogueString_MethodTable__set__String_Method( THIS->type_context->routine_lookup_by_signature, THIS->signature, THIS );
    }
    else
    {
      RogueClassMethod* existing_m_6 = (((RogueString_MethodTable__get__String( THIS->type_context->method_lookup_by_signature, THIS->signature ))));
      if ((!!(existing_m_6) && existing_m_6->type_context == THIS->type_context))
      {
        throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[333] ))), THIS->signature ))), Rogue_program.literal_strings[332] ))) ))) )));
      }
      RogueString_MethodTable__set__String_Method( THIS->type_context->method_lookup_by_signature, THIS->signature, THIS );
    }
  }
  THIS->min_args = THIS->parameters->count;
  while ((THIS->min_args >= 1 && !!(((RogueClassLocal*)(THIS->parameters->data->objects[(THIS->min_args - 1)]))->initial_value)))
  {
    --THIS->min_args;
  }
  return (RogueClassMethod*)(THIS);
}

void RogueMethod__resolve( RogueClassMethod* THIS )
{
  if (THIS->resolved)
  {
    return;
  }
  THIS->resolved = true;
  {
    RogueLocalList* _auto_314_2 = (THIS->parameters);
    RogueInteger _auto_315_3 = (0);
    for (;_auto_315_3 < _auto_314_2->count;++_auto_315_3)
    {
      RogueClassLocal* param_4 = (((RogueClassLocal*)(_auto_314_2->data->objects[_auto_315_3])));
      RogueType__organize( param_4->_type );
    }
  }
  if (!!(THIS->_return_type))
  {
    RogueType__organize( THIS->_return_type );
  }
  if (((RogueType__is_aspect( THIS->type_context ))))
  {
    THIS->aspect_statements = THIS->statements;
    THIS->statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) )));
  }
  if (((RogueMethod__is_task( THIS ))))
  {
    RogueMethod__convert_to_task( THIS );
  }
  RogueClassScope* scope_0 = (((RogueScope__init__Type_Method( ((RogueClassScope*)Rogue_program.type_Scope->create_and_init_object()), THIS->type_context, THIS ))));
  {
    RogueLocalList* _auto_318_5 = (THIS->parameters);
    RogueInteger _auto_319_6 = (0);
    for (;_auto_319_6 < _auto_318_5->count;++_auto_319_6)
    {
      RogueClassLocal* p_7 = (((RogueClassLocal*)(_auto_318_5->data->objects[_auto_319_6])));
      RogueScope__push_local__Local_Logical( scope_0, p_7, true );
    }
  }
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  if (scope_0->local_list->count > THIS->parameters->count)
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[360] )));
  }
  if (!!(scope_0->control_stack->count))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[361] )));
  }
  if (((RogueMethod__is_initializer( THIS ))))
  {
    RogueClassToken* return_t_1 = (THIS->t);
    if (!!(THIS->statements->count))
    {
      return_t_1 = ((RogueClassToken*)((RogueCmdList__last( ((RogueCmdList*)THIS->statements) )))->t);
    }
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->statements), ((RogueCmdReturn__resolve__Scope( ((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)Rogue_program.type_CmdReturn->create_and_init_object()), return_t_1, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)((RogueClassCmdLiteralThis*)Rogue_program.type_CmdLiteralThis->create_and_init_object())), return_t_1, THIS->type_context ))))) ))), scope_0 ))) );
  }
}

void RogueMethod__convert_augment_to_standalone( RogueClassMethod* THIS )
{
  THIS->attributes->flags &= -262145;
  if (!(!!(THIS->native_code)))
  {
    if (THIS->label_list->count > 2)
    {
      RogueClassCmdLabel* label_0 = (((RogueClassCmdLabel*)(THIS->label_list->data->objects[2])));
      throw ((RogueToken__error__String( label_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[334] ))), label_0->name ))), Rogue_program.literal_strings[335] ))) ))) )));
    }
    RogueClassCmdLabel* insert_label_1 = (((RogueString_CmdLabelTable__get__String( THIS->label_lookup, Rogue_program.literal_strings[257] ))));
    RogueClassCmdLabel* append_label_2 = (((RogueString_CmdLabelTable__get__String( THIS->label_lookup, Rogue_program.literal_strings[259] ))));
    RogueString_CmdLabelTable__clear( THIS->label_lookup );
    RogueCmdLabelList__clear( THIS->label_list );
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->statements), ((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( THIS, THIS->t, Rogue_program.literal_strings[257], false ))))) );
    RogueCmdList__add__CmdList( ((RogueCmdList*)THIS->statements), ((RogueCmdList*)(insert_label_1->statements)) );
    RogueCmdList__add__CmdList( ((RogueCmdList*)THIS->statements), ((RogueCmdList*)(append_label_2->statements)) );
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->statements), ((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( THIS, THIS->t, Rogue_program.literal_strings[259], false ))))) );
  }
}

void RogueMethod__convert_to_task( RogueClassMethod* THIS )
{
  RogueClassType* task_type_0 = (((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), THIS->type_context->name ))), Rogue_program.literal_strings[349] ))), THIS->name ))), Rogue_program.literal_strings[350] ))), ((RogueInteger__to_String( ((RogueProgram__next_unique_integer( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))) ))) ))) ))) ))));
  RogueAttributes__add__Integer( task_type_0->attributes, 0 );
  RogueTypeList__add__Type( task_type_0->base_types, THIS->_return_type );
  RogueClassMethod* m_init_1 = (((RogueType__add_method__Token_String( task_type_0, THIS->t, Rogue_program.literal_strings[285] ))));
  RogueMethod__add_parameter__Token_String_Type( m_init_1, THIS->t, Rogue_program.literal_strings[351], ((RogueClassType*)(NULL)) );
  {
    RogueLocalList* _auto_324_9 = (THIS->parameters);
    RogueInteger _auto_325_10 = (0);
    for (;_auto_325_10 < _auto_324_9->count;++_auto_325_10)
    {
      RogueClassLocal* p_11 = (((RogueClassLocal*)(_auto_324_9->data->objects[_auto_325_10])));
      RogueMethod__add_parameter__Token_String_Type( m_init_1, THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), p_11->name ))), Rogue_program.literal_strings[352] ))), ((RogueInteger__to_String( p_11->index ))) ))) ))), ((RogueClassType*)(NULL)) );
    }
  }
  RogueClassMethod* m_update_2 = (((RogueType__add_method__Token_String( task_type_0, THIS->t, Rogue_program.literal_strings[353] ))));
  m_update_2->_return_type = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical;
  RogueCmdList__add__Cmd( ((RogueCmdList*)m_update_2->statements), ((RogueClassCmd*)(((RogueCmdGenericLoop__init__Token_Integer_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)Rogue_program.type_CmdGenericLoop->create_and_init_object()), THIS->t, 8, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, Rogue_program.literal_strings[354], ((RogueCmdArgs__init( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()) ))) ))))), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) ))), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))))) );
  RogueCmdList__add__Cmd( ((RogueCmdList*)m_update_2->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)Rogue_program.type_CmdReturn->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareNE*)Rogue_program.type_CmdCompareNE->create_and_init_object())), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, Rogue_program.literal_strings[355] ))))), ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, -1 ))))) ))))) ))))) );
  RogueClassMethod* m_execute_3 = (((RogueType__add_method__Token_String( task_type_0, THIS->t, Rogue_program.literal_strings[354] ))));
  m_execute_3->_return_type = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical;
  task_type_0->defined = true;
  RogueString* m_name_4 = (((RogueString__operatorPLUS__String( Rogue_program.literal_strings[356], ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))) ))));
  RogueClassMethod* m_temp_5 = (((RogueMethod__init__Token_Type_String( ((RogueClassMethod*)Rogue_program.type_Method->create_and_init_object()), THIS->t, THIS->type_context, m_name_4 ))));
  m_temp_5->_return_type = THIS->_task_result_type;
  RogueAttributes__add__Integer( m_temp_5->attributes, 131072 );
  m_temp_5->parameters = THIS->parameters;
  m_temp_5->locals = THIS->locals;
  m_temp_5->statements = THIS->statements;
  RogueMethod__organize__Logical( m_temp_5, false );
  RogueMethod__resolve( m_temp_5 );
  THIS->locals = ((RogueLocalList__init( ((RogueLocalList*)Rogue_program.type_LocalList->create_and_init_object()) )));
  THIS->parameters = ((RogueLocalList__init( ((RogueLocalList*)Rogue_program.type_LocalList->create_and_init_object()) )));
  {
    RogueLocalList* _auto_342_12 = (m_temp_5->locals);
    RogueInteger _auto_343_13 = (0);
    for (;_auto_343_13 < _auto_342_12->count;++_auto_343_13)
    {
      RogueClassLocal* v_14 = (((RogueClassLocal*)(_auto_342_12->data->objects[_auto_343_13])));
      if (v_14->index < m_temp_5->parameters->count)
      {
        RogueMethod__add_parameter__Token_String_Type( THIS, v_14->t, v_14->name, v_14->_type );
      }
    }
  }
  THIS->statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) )));
  RogueClassCmdArgs* args_6 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()) ))));
  RogueCmdList__add__Cmd( ((RogueCmdList*)args_6), ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)((RogueClassCmdLiteralThis*)Rogue_program.type_CmdLiteralThis->create_and_init_object())), THIS->t, THIS->type_context ))))) );
  {
    RogueLocalList* _auto_344_15 = (m_temp_5->parameters);
    RogueInteger _auto_345_16 = (0);
    for (;_auto_345_16 < _auto_344_15->count;++_auto_345_16)
    {
      RogueClassLocal* p_17 = (((RogueClassLocal*)(_auto_344_15->data->objects[_auto_345_16])));
      RogueCmdList__add__Cmd( ((RogueCmdList*)args_6), ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, p_17->name ))))) );
    }
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)Rogue_program.type_CmdReturn->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, task_type_0->name, args_6 ))))) ))))) );
  {
    RogueLocalList* _auto_346_18 = (m_temp_5->locals);
    RogueInteger _auto_347_19 = (0);
    for (;_auto_347_19 < _auto_346_18->count;++_auto_347_19)
    {
      RogueClassLocal* v_20 = (((RogueClassLocal*)(_auto_346_18->data->objects[_auto_347_19])));
      RogueString* p_name_7 = (((RogueString__operatorPLUS__Integer( ((RogueString__operatorPLUS__String( v_20->name, Rogue_program.literal_strings[352] ))), v_20->index ))));
      RogueType__add_property__Token_String_Type_Cmd( task_type_0, v_20->t, p_name_7, v_20->_type, ((RogueClassCmd*)(NULL)) );
    }
  }
  RogueClassTaskArgs* task_args_8 = (((RogueTaskArgs__init__Type_Method_Type_Method( ((RogueClassTaskArgs*)Rogue_program.type_TaskArgs->create_and_init_object()), task_type_0, m_execute_3, THIS->type_context, THIS ))));
  task_args_8->context_property = ((RogueType__add_property__Token_String_Type_Cmd( task_type_0, THIS->t, Rogue_program.literal_strings[351], THIS->type_context, ((RogueClassCmd*)(NULL)) )));
  task_args_8->ip_property = ((RogueType__add_property__Token_String_Type_Cmd( task_type_0, THIS->t, Rogue_program.literal_strings[355], ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer, ((RogueClassCmd*)(NULL)) )));
  {
    RogueClassCmdStatementList* _auto_352_21 = (m_temp_5->statements);
    RogueInteger _auto_353_22 = (0);
    for (;_auto_353_22 < _auto_352_21->count;++_auto_353_22)
    {
      RogueClassCmd* statement_23 = (((RogueClassCmd*)(_auto_352_21->data->objects[_auto_353_22])));
      statement_23 = ((RogueClassCmd*)(call_ROGUEM44( 5, (RogueClassCmd*)(statement_23), ((RogueClassCloneArgs*)(task_args_8)) )));
      if (!!(statement_23))
      {
        RogueTaskArgs__add__Cmd( task_args_8, statement_23 );
      }
    }
  }
  if (task_args_8->cmd_task_control->current_section->statements->count == 0)
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)task_args_8->cmd_task_control->current_section->statements), ((RogueTaskArgs__create_return__Token_Cmd( task_args_8, THIS->t, ((RogueClassCmd*)(NULL)) ))) );
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)m_execute_3->statements), ((RogueClassCmd*)(task_args_8->cmd_task_control)) );
  RogueType__organize( task_type_0 );
}

RogueClassMethod* RogueMethod__set_incorporated( RogueClassMethod* THIS )
{
  RogueAttributes__add__Integer( THIS->attributes, 8192 );
  return (RogueClassMethod*)(THIS);
}

RogueClassMethod* RogueMethod__set_type_context__Type( RogueClassMethod* THIS, RogueClassType* _auto_61_0 )
{
  THIS->type_context = _auto_61_0;
  return (RogueClassMethod*)(THIS);
}

void RogueMethod__trace_used_code( RogueClassMethod* THIS )
{
  if (THIS->is_used)
  {
    return;
  }
  THIS->is_used = true;
  RogueType__trace_used_code( THIS->type_context );
  {
    RogueLocalList* _auto_356_0 = (THIS->parameters);
    RogueInteger _auto_357_1 = (0);
    for (;_auto_357_1 < _auto_356_0->count;++_auto_357_1)
    {
      RogueClassLocal* param_2 = (((RogueClassLocal*)(_auto_356_0->data->objects[_auto_357_1])));
      RogueType__trace_used_code( param_2->_type );
    }
  }
  if (!!(THIS->_return_type))
  {
    RogueType__trace_used_code( THIS->_return_type );
  }
  RogueCmdStatementList__trace_used_code( THIS->statements );
}

void RogueMethod__assign_cpp_name( RogueClassMethod* THIS )
{
  if (!!(THIS->cpp_name))
  {
    return;
  }
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))));
  RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( buffer_0, THIS->type_context->name ))), Rogue_program.literal_strings[349] );
  RogueStringBuilder__print__String( buffer_0, THIS->name );
  if (!!(THIS->parameters->count))
  {
    RogueStringBuilder__print__String( buffer_0, Rogue_program.literal_strings[352] );
    {
      RogueLocalList* _auto_358_1 = (THIS->parameters);
      RogueInteger _auto_359_2 = (0);
      for (;_auto_359_2 < _auto_358_1->count;++_auto_359_2)
      {
        RogueClassLocal* param_3 = (((RogueClassLocal*)(_auto_358_1->data->objects[_auto_359_2])));
        RogueStringBuilder__print__String( buffer_0, Rogue_program.literal_strings[352] );
        RogueStringBuilder__print__String( buffer_0, param_3->_type->cpp_name );
      }
    }
  }
  THIS->cpp_name = ((RogueString__operatorPLUS__String( Rogue_program.literal_strings[19], ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ((RogueStringBuilder__to_String( buffer_0 ))) ))) )));
}

void RogueMethod__print_prototype__CPPWriter( RogueClassMethod* THIS, RogueClassCPPWriter* writer_0 )
{
  if (((RogueMethod__omit_output( THIS ))))
  {
    return;
  }
  RogueMethod__print_signature__CPPWriter( THIS, writer_0 );
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[184] );
}

void RogueMethod__print_signature__CPPWriter( RogueClassMethod* THIS, RogueClassCPPWriter* writer_0 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, THIS->_return_type ))), Rogue_program.literal_strings[255] ))), THIS->cpp_name );
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[176] );
  RogueLogical first_1 = (true);
  if (!(((RogueMethod__is_routine( THIS )))))
  {
    first_1 = ((RogueLogical)false);
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[255] );
    if (((RogueType__is_aspect( THIS->type_context ))))
    {
      RogueCPPWriter__print__Type( writer_0, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object );
    }
    else
    {
      RogueCPPWriter__print__Type( writer_0, THIS->type_context );
    }
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[434] );
  }
  if (!!(THIS->parameters->count))
  {
    {
      RogueLocalList* _auto_360_2 = (THIS->parameters);
      RogueInteger _auto_361_3 = (0);
      for (;_auto_361_3 < _auto_360_2->count;++_auto_361_3)
      {
        RogueClassLocal* param_4 = (((RogueClassLocal*)(_auto_360_2->data->objects[_auto_361_3])));
        if (first_1)
        {
          RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[255] );
          first_1 = ((RogueLogical)false);
        }
        else
        {
          RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[403] );
        }
        RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, param_4->_type ))), Rogue_program.literal_strings[255] ))), ((RogueLocal__cpp_name( param_4 ))) );
      }
    }
  }
  if (!(first_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[255] );
  }
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] );
}

void RogueMethod__print_definition__CPPWriter( RogueClassMethod* THIS, RogueClassCPPWriter* writer_0 )
{
  if (((RogueMethod__omit_output( THIS ))))
  {
    return;
  }
  RogueMethod__print_signature__CPPWriter( THIS, writer_0 );
  RogueCPPWriter__println( writer_0 );
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
  writer_0->indent += 2;
  if (((RogueType__is_aspect( THIS->type_context ))))
  {
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[486] );
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
    writer_0->indent += 2;
    if (!!(THIS->incorporating_classes))
    {
      {
        RogueTypeList* _auto_362_2 = (THIS->incorporating_classes);
        RogueInteger _auto_363_3 = (0);
        for (;_auto_363_3 < _auto_362_2->count;++_auto_363_3)
        {
          RogueClassType* ic_4 = (((RogueClassType*)(_auto_362_2->data->objects[_auto_363_3])));
          if (ic_4->is_used)
          {
            RogueClassMethod* m_1 = (((RogueType__find_method__String( ic_4, THIS->signature ))));
            if (m_1->is_used)
            {
              RogueCPPWriter__println__String( ((RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[487] ))), ic_4->index ))), Rogue_program.literal_strings[157] );
              if (!!(THIS->_return_type))
              {
                RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[488] );
              }
              else
              {
                RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[427] );
              }
              RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, m_1->cpp_name ))), Rogue_program.literal_strings[471] ))), m_1->type_context ))), Rogue_program.literal_strings[489] );
              {
                RogueLocalList* _auto_364_5 = (THIS->parameters);
                RogueInteger _auto_365_6 = (0);
                for (;_auto_365_6 < _auto_364_5->count;++_auto_365_6)
                {
                  RogueClassLocal* param_7 = (((RogueClassLocal*)(_auto_364_5->data->objects[_auto_365_6])));
                  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[403] ))), ((RogueLocal__cpp_name( param_7 ))) );
                }
              }
              RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[420] );
            }
          }
        }
      }
    }
    if (!!(THIS->_return_type))
    {
      RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[490] );
      RogueCPPWriter__println__String( ((RogueCPPWriter__print_default_value__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[488] ))), THIS->_return_type ))), Rogue_program.literal_strings[184] );
    }
    writer_0->indent -= 2;
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
  }
  else
  {
    RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, false );
  }
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
  RogueCPPWriter__println( writer_0 );
}

RogueClassMethod* RogueMethod__init_object( RogueClassMethod* THIS )
{
  THIS->attributes = ((RogueClassAttributes*)Rogue_program.type_Attributes->create_and_init_object());
  THIS->parameters = ((RogueLocalList__init( ((RogueLocalList*)Rogue_program.type_LocalList->create_and_init_object()) )));
  THIS->locals = ((RogueLocalList__init( ((RogueLocalList*)Rogue_program.type_LocalList->create_and_init_object()) )));
  THIS->statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) )));
  THIS->overriding_methods = ((RogueMethodList__init( ((RogueMethodList*)Rogue_program.type_MethodList->create_and_init_object()) )));
  THIS->label_list = ((RogueCmdLabelList__init( ((RogueCmdLabelList*)Rogue_program.type_CmdLabelList->create_and_init_object()) )));
  THIS->label_lookup = ((RogueString_CmdLabelTable__init( ((RogueClassString_CmdLabelTable*)Rogue_program.type_String_CmdLabelTable->create_and_init_object()) )));
  return (RogueClassMethod*)(THIS);
}

RogueString* RogueString_MethodListTable__to_String( RogueClassString_MethodListTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_MethodListTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))) ))) ))));
}

RogueString* RogueString_MethodListTable__type_name( RogueClassString_MethodListTable* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[535]);
}

RogueClassString_MethodListTable* RogueString_MethodListTable__init( RogueClassString_MethodListTable* THIS )
{
  RogueString_MethodListTable__init__Integer( THIS, 16 );
  return (RogueClassString_MethodListTable*)(THIS);
}

RogueClassString_MethodListTable* RogueString_MethodListTable__init__Integer( RogueClassString_MethodListTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_MethodListTableEntryList__init__Integer_String_MethodListTableEntry( ((RogueTableEntry_of_String_MethodListList*)Rogue_program.type_TableEntry_of_String_MethodListList->create_and_init_object()), bin_count_0, ((RogueClassString_MethodListTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  return (RogueClassString_MethodListTable*)(THIS);
}

void RogueString_MethodListTable__clear( RogueClassString_MethodListTable* THIS )
{
  {
    RogueTableEntry_of_String_MethodListList* _auto_369_0 = (THIS->bins);
    RogueInteger i_1 = (0);
    for (;i_1 < _auto_369_0->count;++i_1)
    {
      THIS->bins->data->objects[i_1] = ((RogueClassString_MethodListTableEntry*)(NULL));
    }
  }
  RogueStringList__clear( THIS->keys );
}

RogueClassString_MethodListTableEntry* RogueString_MethodListTable__find__String( RogueClassString_MethodListTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_MethodListTableEntry* entry_2 = (((RogueClassString_MethodListTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_MethodListTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_MethodListTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_MethodListTableEntry*)(((RogueClassString_MethodListTableEntry*)(NULL)));
}

RogueMethodList* RogueString_MethodListTable__get__String( RogueClassString_MethodListTable* THIS, RogueString* key_0 )
{
  RogueClassString_MethodListTableEntry* entry_1 = (((RogueString_MethodListTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueMethodList*)(entry_1->value);
  }
  else
  {
    RogueMethodList* default_value_2 = 0;
    return (RogueMethodList*)(default_value_2);
  }
}

void RogueString_MethodListTable__set__String_MethodList( RogueClassString_MethodListTable* THIS, RogueString* key_0, RogueMethodList* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_MethodListTableEntry* entry_4 = (((RogueClassString_MethodListTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_MethodListTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_MethodListTableEntry*)((RogueString_MethodListTableEntry__init__String_MethodList_Integer( ((RogueClassString_MethodListTableEntry*)Rogue_program.type_String_MethodListTableEntry->create_and_init_object()), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_MethodListTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_MethodListTable__print_to__StringBuilder( RogueClassString_MethodListTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_MethodListTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_MethodListTable* RogueString_MethodListTable__init_object( RogueClassString_MethodListTable* THIS )
{
  return (RogueClassString_MethodListTable*)(THIS);
}

RogueString* RogueTypeList__to_String( RogueTypeList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueTypeList* _auto_370_2 = (THIS);
    RogueInteger _auto_371_3 = (0);
    for (;_auto_371_3 < _auto_370_2->count;++_auto_371_3)
    {
      RogueClassType* value_4 = (((RogueClassType*)(_auto_370_2->data->objects[_auto_371_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueTypeList__type_name( RogueTypeList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[919]);
}

RogueTypeList* RogueTypeList__init_object( RogueTypeList* THIS )
{
  return (RogueTypeList*)(THIS);
}

RogueTypeList* RogueTypeList__init( RogueTypeList* THIS )
{
  RogueTypeList__init__Integer( THIS, 10 );
  return (RogueTypeList*)(THIS);
}

RogueTypeList* RogueTypeList__init__Integer( RogueTypeList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassType*), true );
  return (RogueTypeList*)(THIS);
}

RogueTypeList* RogueTypeList__add__Type( RogueTypeList* THIS, RogueClassType* value_0 )
{
  ((RogueTypeList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTypeList*)(THIS);
}

RogueInteger RogueTypeList__capacity( RogueTypeList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTypeList* RogueTypeList__clear( RogueTypeList* THIS )
{
  THIS->count = 0;
  return (RogueTypeList*)(THIS);
}

RogueTypeList* RogueTypeList__insert__Type_Integer( RogueTypeList* THIS, RogueClassType* value_0, RogueInteger before_index_1 )
{
  if (before_index_1 < 0)
  {
    before_index_1 = ((RogueInteger)0);
  }
  if (before_index_1 >= THIS->count)
  {
    return (RogueTypeList*)(((RogueTypeList__add__Type( THIS, value_0 ))));
  }
  else
  {
    RogueTypeList__add__Type( THIS, ((RogueClassType*)(THIS->data->objects[0])) );
    THIS->data->set((before_index_1 + 1),((RogueArray*)(THIS->data)),before_index_1,(THIS->count - 2));
    THIS->data->objects[before_index_1] = value_0;
  }
  return (RogueTypeList*)(THIS);
}

RogueOptionalInteger RogueTypeList__locate__Type( RogueTypeList* THIS, RogueClassType* value_0 )
{
  {
    RogueTypeList* _auto_378_1 = (THIS);
    RogueInteger i_2 = (0);
    for (;i_2 < _auto_378_1->count;++i_2)
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)value_0), ((RogueObject*)(((RogueClassType*)(THIS->data->objects[i_2])))) ))))
      {
        return (RogueOptionalInteger)(RogueOptionalInteger( i_2 ));
      }
    }
  }
  return (RogueOptionalInteger)(RogueOptionalInteger());
}

RogueTypeList* RogueTypeList__reserve__Integer( RogueTypeList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassType*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueTypeList__capacity( THIS ))) + ((RogueTypeList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassType*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTypeList*)(THIS);
}

RogueString* RogueType__to_String( RogueClassType* THIS )
{
  return (RogueString*)(THIS->name);
}

RogueString* RogueType__type_name( RogueClassType* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[536]);
}

RogueClassType* RogueType__init__Token_String( RogueClassType* THIS, RogueClassToken* _auto_63_0, RogueString* _auto_64_1 )
{
  THIS->name = _auto_64_1;
  THIS->t = _auto_63_0;
  return (RogueClassType*)(THIS);
}

RogueClassMethod* RogueType__add_method__Token_String( RogueClassType* THIS, RogueClassToken* m_t_0, RogueString* m_name_1 )
{
  return (RogueClassMethod*)(((RogueType__add_method__Method( THIS, ((RogueMethod__init__Token_Type_String( ((RogueClassMethod*)Rogue_program.type_Method->create_and_init_object()), m_t_0, THIS, m_name_1 ))) ))));
}

RogueClassMethod* RogueType__add_method__Method( RogueClassType* THIS, RogueClassMethod* m_0 )
{
  RogueMethodList__add__Method( THIS->method_list, m_0 );
  RogueMethodList* list_1 = (((RogueString_MethodListTable__get__String( THIS->method_lookup_by_name, m_0->name ))));
  if (!(!!(list_1)))
  {
    list_1 = ((RogueMethodList*)((RogueMethodList__init( ((RogueMethodList*)Rogue_program.type_MethodList->create_and_init_object()) ))));
    RogueString_MethodListTable__set__String_MethodList( THIS->method_lookup_by_name, m_0->name, list_1 );
  }
  RogueMethodList__add__Method( list_1, m_0 );
  return (RogueClassMethod*)(m_0);
}

RogueClassMethod* RogueType__add_routine__Token_String( RogueClassType* THIS, RogueClassToken* r_t_0, RogueString* r_name_1 )
{
  RogueClassMethod* r_2 = (((RogueMethod__init__Token_Type_String( ((RogueClassMethod*)Rogue_program.type_Method->create_and_init_object()), r_t_0, THIS, r_name_1 ))));
  RogueAttributes__add__Integer( r_2->attributes, 512 );
  RogueMethodList__add__Method( THIS->routine_list, r_2 );
  RogueMethodList* list_3 = (((RogueString_MethodListTable__get__String( THIS->routine_lookup_by_name, r_name_1 ))));
  if (!(!!(list_3)))
  {
    list_3 = ((RogueMethodList*)((RogueMethodList__init( ((RogueMethodList*)Rogue_program.type_MethodList->create_and_init_object()) ))));
    RogueString_MethodListTable__set__String_MethodList( THIS->routine_lookup_by_name, r_name_1, list_3 );
  }
  RogueMethodList__add__Method( list_3, r_2 );
  return (RogueClassMethod*)(r_2);
}

RogueClassProperty* RogueType__add_setting__Token_String( RogueClassType* THIS, RogueClassToken* s_t_0, RogueString* s_name_1 )
{
  RogueClassProperty* s_2 = (((RogueProperty__init__Token_Type_String_Type_Cmd( ((RogueClassProperty*)Rogue_program.type_Property->create_and_init_object()), s_t_0, THIS, s_name_1, ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
  RoguePropertyList__add__Property( THIS->settings_list, s_2 );
  RogueString_PropertyTable__set__String_Property( THIS->settings_lookup, s_name_1, s_2 );
  return (RogueClassProperty*)(s_2);
}

RogueClassProperty* RogueType__add_property__Token_String_Type_Cmd( RogueClassType* THIS, RogueClassToken* p_t_0, RogueString* p_name_1, RogueClassType* p_type_2, RogueClassCmd* initial_value_3 )
{
  return (RogueClassProperty*)(((RogueType__add_property__Property( THIS, ((RogueProperty__init__Token_Type_String_Type_Cmd( ((RogueClassProperty*)Rogue_program.type_Property->create_and_init_object()), p_t_0, THIS, p_name_1, p_type_2, initial_value_3 ))) ))));
}

RogueClassProperty* RogueType__add_property__Property( RogueClassType* THIS, RogueClassProperty* p_0 )
{
  RoguePropertyList__add__Property( THIS->property_list, p_0 );
  RogueString_PropertyTable__set__String_Property( THIS->property_lookup, p_0->name, p_0 );
  return (RogueClassProperty*)(p_0);
}

RogueClassType* Rogue_Type__compile_type( RogueClassType* THIS )
{
  return (RogueClassType*)(THIS);
}

RogueClassCmd* RogueType__create_default_value__Token( RogueClassType* THIS, RogueClassToken* _t_0 )
{
  if (((RogueType__is_reference( THIS ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralNull__init__Token( ((RogueClassCmdLiteralNull*)Rogue_program.type_CmdLiteralNull->create_and_init_object()), _t_0 ))))));
  }
  if (((RogueType__is_compound( THIS ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateCompound__init__Token_Type_CmdArgs( ((RogueClassCmdCreateCompound*)Rogue_program.type_CmdCreateCompound->create_and_init_object()), _t_0, THIS, ((RogueClassCmdArgs*)(NULL)) ))))));
  }
  if (THIS == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), _t_0, false ))))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), _t_0, 0 ))))));
}

RogueClassMethod* RogueType__find_method__String( RogueClassType* THIS, RogueString* signature_0 )
{
  RogueClassMethod* m_1 = (((RogueString_MethodTable__get__String( THIS->method_lookup_by_signature, signature_0 ))));
  if (!!(m_1))
  {
    return (RogueClassMethod*)(m_1);
  }
  return (RogueClassMethod*)(((RogueType__find_routine__String( THIS, signature_0 ))));
}

RogueClassMethod* RogueType__find_routine__String( RogueClassType* THIS, RogueString* signature_0 )
{
  RogueClassMethod* m_1 = (((RogueString_MethodTable__get__String( THIS->routine_lookup_by_signature, signature_0 ))));
  if (!!(m_1))
  {
    return (RogueClassMethod*)(m_1);
  }
  return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
}

RogueClassProperty* RogueType__find_property__String( RogueClassType* THIS, RogueString* p_name_0 )
{
  if (p_name_0->characters[0] == (RogueCharacter)'@')
  {
    p_name_0 = ((RogueString*)((RogueString__rightmost__Integer( p_name_0, -1 ))));
  }
  return (RogueClassProperty*)(((RogueString_PropertyTable__get__String( THIS->property_lookup, p_name_0 ))));
}

RogueClassProperty* RogueType__find_setting__String( RogueClassType* THIS, RogueString* s_name_0 )
{
  if (s_name_0->characters[0] == (RogueCharacter)'@')
  {
    s_name_0 = ((RogueString*)((RogueString__rightmost__Integer( s_name_0, -1 ))));
  }
  return (RogueClassProperty*)(((RogueString_PropertyTable__get__String( THIS->settings_lookup, s_name_0 ))));
}

RogueLogical RogueType__has_method_named__String( RogueClassType* THIS, RogueString* m_name_0 )
{
  RogueMethodList* list_1 = (((RogueString_MethodListTable__get__String( THIS->method_lookup_by_name, m_name_0 ))));
  return (RogueLogical)((!!(list_1) && !!(list_1->count)));
}

RogueLogical RogueType__has_routine_named__String( RogueClassType* THIS, RogueString* r_name_0 )
{
  RogueMethodList* list_1 = (((RogueString_MethodListTable__get__String( THIS->routine_lookup_by_name, r_name_0 ))));
  return (RogueLogical)((!!(list_1) && !!(list_1->count)));
}

RogueLogical RogueType__instance_of__Type( RogueClassType* THIS, RogueClassType* ancestor_type_0 )
{
  if (THIS == ancestor_type_0)
  {
    return (RogueLogical)(true);
  }
  if ((THIS == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_null && ((RogueType__is_reference( ancestor_type_0 )))))
  {
    return (RogueLogical)(true);
  }
  {
    RogueTypeList* _auto_387_1 = (THIS->base_types);
    RogueInteger _auto_388_2 = (0);
    for (;_auto_388_2 < _auto_387_1->count;++_auto_388_2)
    {
      RogueClassType* base_type_3 = (((RogueClassType*)(_auto_387_1->data->objects[_auto_388_2])));
      if (((RogueType__instance_of__Type( base_type_3, ancestor_type_0 ))))
      {
        return (RogueLogical)(true);
      }
    }
  }
  return (RogueLogical)(false);
}

RogueLogical RogueType__is_compatible_with__Type( RogueClassType* THIS, RogueClassType* other_0 )
{
  if (THIS == other_0)
  {
    return (RogueLogical)(true);
  }
  if ((((RogueType__is_primitive( THIS ))) && ((RogueType__is_primitive( other_0 )))))
  {
    if ((THIS == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical ^ other_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))
    {
      return (RogueLogical)(false);
    }
    return (RogueLogical)(true);
  }
  if ((other_0->is_optional && other_0->_element_type == THIS))
  {
    return (RogueLogical)(true);
  }
  return (RogueLogical)(((RogueType__instance_of__Type( THIS, other_0 ))));
}

RogueLogical RogueType__is_aspect( RogueClassType* THIS )
{
  return (RogueLogical)((THIS->attributes->flags & 7) == 2);
}

RogueLogical RogueType__is_class( RogueClassType* THIS )
{
  return (RogueLogical)((THIS->attributes->flags & 7) == 0);
}

RogueLogical RogueType__is_compound( RogueClassType* THIS )
{
  return (RogueLogical)((THIS->attributes->flags & 7) == 3);
}

RogueLogical RogueType__is_functional( RogueClassType* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 16)));
}

RogueLogical RogueType__is_native( RogueClassType* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 32)));
}

RogueLogical RogueType__is_primitive( RogueClassType* THIS )
{
  return (RogueLogical)((THIS->attributes->flags & 7) == 1);
}

RogueLogical RogueType__is_reference( RogueClassType* THIS )
{
  switch ((THIS->attributes->flags & 7))
  {
    case 0:
    case 2:
    {
      return (RogueLogical)(true);
      break;
    }
    default:
    {
      return (RogueLogical)(false);
    }
  }
}

RogueLogical RogueType__is_requisite( RogueClassType* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 32768)));
}

RogueLogical RogueType__is_singleton( RogueClassType* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 1024)));
}

RogueClassType* RogueType__organize( RogueClassType* THIS )
{
  if (THIS->organized)
  {
    return (RogueClassType*)(THIS);
  }
  THIS->organized = true;
  THIS->index = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_list->count;
  RogueTypeList__add__Type( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_list, THIS );
  if (!(THIS->defined))
  {
    THIS->defined = true;
    RogueClassTemplate* template_0 = (((RogueProgram__find_template__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->name ))));
    if (!!(template_0))
    {
      RogueTemplate__instantiate__Type( template_0, THIS );
    }
    else
    {
      throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[309] ))), THIS->name ))), Rogue_program.literal_strings[13] ))) ))) )));
    }
  }
  {
    RogueTypeList* _auto_389_16 = (THIS->base_types);
    RogueInteger _auto_390_17 = (0);
    for (;_auto_390_17 < _auto_389_16->count;++_auto_390_17)
    {
      RogueClassType* base_type_18 = (((RogueClassType*)(_auto_389_16->data->objects[_auto_390_17])));
      RogueType__organize( base_type_18 );
      if (((RogueType__is_aspect( THIS ))))
      {
        if (!(((RogueType__is_aspect( base_type_18 )))))
        {
          throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[310] )));
        }
      }
      if (((RogueType__instance_of__Type( base_type_18, THIS ))))
      {
        throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[311] ))), ((RogueType__to_String( THIS ))) ))), Rogue_program.literal_strings[312] ))), ((RogueType__to_String( base_type_18 ))) ))), Rogue_program.literal_strings[313] ))), ((RogueType__to_String( base_type_18 ))) ))), Rogue_program.literal_strings[314] ))), ((RogueType__to_String( THIS ))) ))), Rogue_program.literal_strings[47] ))) ))) )));
      }
    }
  }
  if (((RogueType__is_class( THIS ))))
  {
    {
      RogueTypeList* _auto_391_19 = (THIS->base_types);
      RogueInteger _auto_392_20 = (0);
      for (;_auto_392_20 < _auto_391_19->count;++_auto_392_20)
      {
        RogueClassType* base_type_21 = (((RogueClassType*)(_auto_391_19->data->objects[_auto_392_20])));
        if (((RogueType__is_class( base_type_21 ))))
        {
          if ((!!(THIS->base_class) && THIS->base_class != base_type_21))
          {
            throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[315] ))), THIS->name ))), Rogue_program.literal_strings[316] ))), ((RogueType__to_String( THIS->base_class ))) ))), Rogue_program.literal_strings[317] ))), ((RogueType__to_String( base_type_21 ))) ))), Rogue_program.literal_strings[318] ))) ))) )));
          }
          else
          {
            THIS->base_class = base_type_21;
          }
        }
      }
    }
    if (((!(!!(THIS->base_class)) && !(((RogueType__is_functional( THIS ))))) && THIS != ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object))
    {
      RogueType__organize( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object );
      THIS->base_class = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object;
      RogueTypeList__insert__Type_Integer( THIS->base_types, THIS->base_class, 0 );
    }
  }
  RogueTypeList__clear( THIS->flat_base_types );
  if (!!(THIS->base_class))
  {
    RogueType__collect_base_types__TypeList( THIS->base_class, THIS->flat_base_types );
  }
  {
    RogueTypeList* _auto_393_22 = (THIS->base_types);
    RogueInteger _auto_394_23 = (0);
    for (;_auto_394_23 < _auto_393_22->count;++_auto_394_23)
    {
      RogueClassType* base_type_24 = (((RogueClassType*)(_auto_393_22->data->objects[_auto_394_23])));
      RogueType__collect_base_types__TypeList( base_type_24, THIS->flat_base_types );
    }
  }
  {
    RogueTypeList* _auto_395_25 = (THIS->base_types);
    RogueInteger _auto_396_26 = (0);
    for (;_auto_396_26 < _auto_395_25->count;++_auto_396_26)
    {
      RogueClassType* base_type_27 = (((RogueClassType*)(_auto_395_25->data->objects[_auto_396_26])));
      RogueType__inherit_definitions__Type( THIS, base_type_27 );
    }
  }
  RoguePropertyList* full_property_list_1 = (((RoguePropertyList__init( ((RoguePropertyList*)Rogue_program.type_PropertyList->create_and_init_object()) ))));
  RogueString_PropertyTable__clear( THIS->property_lookup );
  RogueType__inherit_properties__PropertyList_String_PropertyTable( THIS, full_property_list_1, THIS->property_lookup );
  THIS->property_list = full_property_list_1;
  RogueClassMethod* m_type_name_2 = (((RogueType__add_method__Token_String( THIS, THIS->t, Rogue_program.literal_strings[326] ))));
  m_type_name_2->_return_type = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String;
  RogueCmdList__add__Cmd( ((RogueCmdList*)m_type_name_2->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)Rogue_program.type_CmdReturn->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Integer( ((RogueClassCmdLiteralString*)Rogue_program.type_CmdLiteralString->create_and_init_object()), THIS->t, THIS->name, 0 ))))) ))))) );
  {
    RogueMethodList* _auto_400_28 = (THIS->routine_list);
    RogueInteger _auto_401_29 = (0);
    for (;_auto_401_29 < _auto_400_28->count;++_auto_401_29)
    {
      RogueClassMethod* r_30 = (((RogueClassMethod*)(_auto_400_28->data->objects[_auto_401_29])));
      RogueMethod__organize__Logical( r_30, true );
    }
  }
  {
    RogueMethodList* _auto_402_31 = (THIS->method_list);
    RogueInteger _auto_403_32 = (0);
    for (;_auto_403_32 < _auto_402_31->count;++_auto_403_32)
    {
      RogueClassMethod* m_33 = (((RogueClassMethod*)(_auto_402_31->data->objects[_auto_403_32])));
      RogueMethod__organize__Logical( m_33, true );
    }
  }
  RogueMethodList* full_routine_list_3 = (((RogueMethodList__init( ((RogueMethodList*)Rogue_program.type_MethodList->create_and_init_object()) ))));
  RogueString_MethodTable__clear( THIS->routine_lookup_by_signature );
  RogueType__inherit_routines__MethodList_String_MethodTable( THIS, full_routine_list_3, THIS->routine_lookup_by_signature );
  THIS->routine_list = full_routine_list_3;
  RogueString_MethodListTable__clear( THIS->routine_lookup_by_name );
  {
    RogueMethodList* _auto_404_34 = (THIS->routine_list);
    RogueInteger _auto_405_35 = (0);
    for (;_auto_405_35 < _auto_404_34->count;++_auto_405_35)
    {
      RogueClassMethod* r_36 = (((RogueClassMethod*)(_auto_404_34->data->objects[_auto_405_35])));
      RogueMethodList* list_4 = (((RogueString_MethodListTable__get__String( THIS->routine_lookup_by_name, r_36->name ))));
      if (!(!!(list_4)))
      {
        list_4 = ((RogueMethodList*)((RogueMethodList__init( ((RogueMethodList*)Rogue_program.type_MethodList->create_and_init_object()) ))));
        RogueString_MethodListTable__set__String_MethodList( THIS->routine_lookup_by_name, r_36->name, list_4 );
      }
      RogueMethodList__add__Method( list_4, r_36 );
    }
  }
  RogueMethodList* full_method_list_5 = (((RogueMethodList__init( ((RogueMethodList*)Rogue_program.type_MethodList->create_and_init_object()) ))));
  RogueString_MethodTable__clear( THIS->method_lookup_by_signature );
  RogueType__inherit_methods__MethodList_String_MethodTable( THIS, full_method_list_5, THIS->method_lookup_by_signature );
  THIS->method_list = full_method_list_5;
  RogueString_MethodListTable__clear( THIS->method_lookup_by_name );
  {
    RogueMethodList* _auto_406_37 = (THIS->method_list);
    RogueInteger _auto_407_38 = (0);
    for (;_auto_407_38 < _auto_406_37->count;++_auto_407_38)
    {
      RogueClassMethod* m_39 = (((RogueClassMethod*)(_auto_406_37->data->objects[_auto_407_38])));
      RogueMethodList* list_6 = (((RogueString_MethodListTable__get__String( THIS->method_lookup_by_name, m_39->name ))));
      if (!(!!(list_6)))
      {
        list_6 = ((RogueMethodList*)((RogueMethodList__init( ((RogueMethodList*)Rogue_program.type_MethodList->create_and_init_object()) ))));
        RogueString_MethodListTable__set__String_MethodList( THIS->method_lookup_by_name, m_39->name, list_6 );
      }
      RogueMethodList__add__Method( list_6, m_39 );
    }
  }
  if ((!!(THIS->settings_list->count) && !(((RogueType__is_native( THIS ))))))
  {
    RogueClassMethod* m_7 = (((RogueType__find_routine__String( THIS, Rogue_program.literal_strings[343] ))));
    if ((!(!!(m_7)) || m_7->type_context != THIS))
    {
      m_7 = ((RogueClassMethod*)((RogueMethod__organize__Logical( ((RogueType__add_routine__Token_String( THIS, THIS->t, Rogue_program.literal_strings[344] ))), true ))));
    }
    RogueAttributes__add__Integer( m_7->attributes, 32768 );
    RogueInteger i_8 = ((THIS->settings_list->count - 1));
    while (i_8 >= 0)
    {
      RogueClassProperty* s_9 = (((RogueClassProperty*)(THIS->settings_list->data->objects[i_8])));
      if (!!(s_9->initial_value))
      {
        RogueCmdList__insert__Cmd_Integer( ((RogueCmdList*)m_7->statements), ((RogueClassCmd*)(((RogueCmdWriteSetting__init__Token_Property_Cmd( ((RogueClassCmdWriteSetting*)Rogue_program.type_CmdWriteSetting->create_and_init_object()), s_9->t, s_9, (call_ROGUEM44( 5, (RogueClassCmd*)(s_9->initial_value), ((RogueClassCloneArgs*)(NULL)) )) ))))), 0 );
      }
      --i_8;
    }
  }
  if ((((RogueType__is_class( THIS ))) && !(((RogueType__is_native( THIS ))))))
  {
    RogueClassMethod* m_10 = (((RogueType__find_method__String( THIS, Rogue_program.literal_strings[345] ))));
    RogueClassMethod* prior_m_11 = (m_10);
    if ((!(!!(m_10)) || m_10->type_context != THIS))
    {
      m_10 = ((RogueClassMethod*)((RogueMethod__organize__Logical( ((RogueType__add_method__Token_String( THIS, THIS->t, Rogue_program.literal_strings[346] ))), true ))));
      RogueAttributes__add__Integer( m_10->attributes, 32768 );
      if (!!(prior_m_11))
      {
        RogueAttributes__add__Integer( prior_m_11->attributes, 2048 );
        RogueAttributes__add__Integer( prior_m_11->attributes, 4096 );
        RogueAttributes__add__Integer( m_10->attributes, 2048 );
        RogueMethodList__remove__Method( THIS->method_list, m_10 );
        THIS->method_list->data->objects[((RogueMethodList__locate__Method( THIS->method_list, prior_m_11 ))).value] = m_10;
      }
    }
    m_10->_return_type = THIS;
    RogueCmdList__add__Cmd( ((RogueCmdList*)m_10->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)Rogue_program.type_CmdReturn->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)((RogueClassCmdLiteralThis*)Rogue_program.type_CmdLiteralThis->create_and_init_object())), THIS->t, THIS ))))) ))))) );
    RogueInteger i_12 = ((THIS->property_list->count - 1));
    while (i_12 >= 0)
    {
      RogueClassProperty* p_13 = (((RogueClassProperty*)(THIS->property_list->data->objects[i_12])));
      if (!!(p_13->initial_value))
      {
        RogueCmdList__insert__Cmd_Integer( ((RogueCmdList*)m_10->statements), ((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)Rogue_program.type_CmdWriteProperty->create_and_init_object()), p_13->t, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)((RogueClassCmdLiteralThis*)Rogue_program.type_CmdLiteralThis->create_and_init_object())), p_13->t, p_13->type_context ))))), p_13, (call_ROGUEM44( 5, (RogueClassCmd*)(p_13->initial_value), ((RogueClassCloneArgs*)(NULL)) )) ))))), 0 );
      }
      --i_12;
    }
  }
  if (THIS != ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_NativeArray)
  {
    THIS->is_array = ((RogueType__instance_of__Type( THIS, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_NativeArray )));
    if (THIS->is_array)
    {
      RogueClassType* cur_type_14 = (THIS);
      while (!(((RogueString__begins_with__String( cur_type_14->name, Rogue_program.literal_strings[348] )))))
      {
        cur_type_14 = ((RogueClassType*)cur_type_14->base_class);
        if (cur_type_14 == NULL)
        {
          throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[347] )));
        }
      }
      RogueString* element_type_name_15 = (((RogueString__before_last__String( ((RogueString__after_first__String( cur_type_14->name, Rogue_program.literal_strings[177] ))), Rogue_program.literal_strings[103] ))));
      THIS->_element_type = ((RogueType__organize( ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, element_type_name_15 ))) )));
    }
  }
  RogueType__index_and_move_inline_to_end__MethodList( THIS, THIS->routine_list );
  RogueType__index_and_move_inline_to_end__MethodList( THIS, THIS->method_list );
  return (RogueClassType*)(THIS);
}

void RogueType__collect_base_types__TypeList( RogueClassType* THIS, RogueTypeList* list_0 )
{
  if (((RogueTypeList__locate__Type( list_0, THIS ))).exists)
  {
    return;
  }
  RogueTypeList__add__Type( list_0, THIS );
  {
    RogueTypeList* _auto_415_1 = (THIS->base_types);
    RogueInteger _auto_416_2 = (0);
    for (;_auto_416_2 < _auto_415_1->count;++_auto_416_2)
    {
      RogueClassType* base_type_3 = (((RogueClassType*)(_auto_415_1->data->objects[_auto_416_2])));
      RogueType__collect_base_types__TypeList( base_type_3, list_0 );
    }
  }
}

void RogueType__cull_unused_methods( RogueClassType* THIS )
{
  if (THIS->culled)
  {
    return;
  }
  THIS->culled = true;
  {
    RogueTypeList* _auto_417_3 = (THIS->base_types);
    RogueInteger _auto_418_4 = (0);
    for (;_auto_418_4 < _auto_417_3->count;++_auto_418_4)
    {
      RogueClassType* base_type_5 = (((RogueClassType*)(_auto_417_3->data->objects[_auto_418_4])));
      RogueType__cull_unused_methods( base_type_5 );
    }
  }
  RogueMethodList* list_0 = (THIS->method_list);
  RogueInteger i_1 = ((list_0->count - 1));
  while (i_1 >= 0)
  {
    RogueClassMethod* m_2 = (((RogueClassMethod*)(list_0->data->objects[i_1])));
    if ((((RogueMethod__is_macro( m_2 ))) || !(m_2->is_used)))
    {
      RogueMethodList__remove__Method( list_0, m_2 );
    }
    --i_1;
  }
  i_1 = ((RogueInteger)0);
  {
    RogueMethodList* _auto_419_6 = (list_0);
    RogueInteger _auto_420_7 = (0);
    for (;_auto_420_7 < _auto_419_6->count;++_auto_420_7)
    {
      RogueClassMethod* m_8 = (((RogueClassMethod*)(_auto_419_6->data->objects[_auto_420_7])));
      m_8->index = i_1;
      ++i_1;
    }
  }
}

RogueLogical RogueType__has_references( RogueClassType* THIS )
{
  {
    RoguePropertyList* _auto_421_0 = (THIS->property_list);
    RogueInteger _auto_422_1 = (0);
    for (;_auto_422_1 < _auto_421_0->count;++_auto_422_1)
    {
      RogueClassProperty* p_2 = (((RogueClassProperty*)(_auto_421_0->data->objects[_auto_422_1])));
      if (((RogueType__is_reference( p_2->_type ))))
      {
        return (RogueLogical)(true);
      }
      if ((((RogueType__is_compound( p_2->_type ))) && ((RogueType__has_references( p_2->_type )))))
      {
        return (RogueLogical)(true);
      }
    }
  }
  return (RogueLogical)(false);
}

void RogueType__inherit_definitions__Type( RogueClassType* THIS, RogueClassType* from_type_0 )
{
  {
    RogueStringList* _auto_423_1 = (from_type_0->definition_list);
    RogueInteger _auto_424_2 = (0);
    for (;_auto_424_2 < _auto_423_1->count;++_auto_424_2)
    {
      RogueString* def_name_3 = (((RogueString*)(_auto_423_1->data->objects[_auto_424_2])));
      if (!(((RogueString_CmdTable__contains__String( THIS->definition_lookup, def_name_3 )))))
      {
        RogueStringList__add__String( THIS->definition_list, def_name_3 );
        RogueString_CmdTable__set__String_Cmd( THIS->definition_lookup, def_name_3, ((RogueString_CmdTable__get__String( from_type_0->definition_lookup, def_name_3 ))) );
      }
    }
  }
  {
    RogueTypeList* _auto_425_4 = (from_type_0->base_types);
    RogueInteger _auto_426_5 = (0);
    for (;_auto_426_5 < _auto_425_4->count;++_auto_426_5)
    {
      RogueClassType* base_type_6 = (((RogueClassType*)(_auto_425_4->data->objects[_auto_426_5])));
      RogueType__inherit_definitions__Type( THIS, base_type_6 );
    }
  }
}

void RogueType__inherit_properties__PropertyList_String_PropertyTable( RogueClassType* THIS, RoguePropertyList* list_0, RogueClassString_PropertyTable* lookup_1 )
{
  {
    RogueTypeList* _auto_427_2 = (THIS->base_types);
    RogueInteger _auto_428_3 = (0);
    for (;_auto_428_3 < _auto_427_2->count;++_auto_428_3)
    {
      RogueClassType* base_type_4 = (((RogueClassType*)(_auto_427_2->data->objects[_auto_428_3])));
      {
        RoguePropertyList* _auto_429_5 = (base_type_4->property_list);
        RogueInteger _auto_430_6 = (0);
        for (;_auto_430_6 < _auto_429_5->count;++_auto_430_6)
        {
          RogueClassProperty* base_p_7 = (((RogueClassProperty*)(_auto_429_5->data->objects[_auto_430_6])));
          RogueType__inherit_property__Property_PropertyList_String_PropertyTable( THIS, base_p_7, list_0, lookup_1 );
        }
      }
    }
  }
  {
    RoguePropertyList* _auto_431_8 = (THIS->property_list);
    RogueInteger _auto_432_9 = (0);
    for (;_auto_432_9 < _auto_431_8->count;++_auto_432_9)
    {
      RogueClassProperty* p_10 = (((RogueClassProperty*)(_auto_431_8->data->objects[_auto_432_9])));
      RogueType__inherit_property__Property_PropertyList_String_PropertyTable( THIS, p_10, list_0, lookup_1 );
    }
  }
}

void RogueType__inherit_property__Property_PropertyList_String_PropertyTable( RogueClassType* THIS, RogueClassProperty* p_0, RoguePropertyList* list_1, RogueClassString_PropertyTable* lookup_2 )
{
  RogueClassProperty* existing_p_3 = (((RogueString_PropertyTable__get__String( lookup_2, p_0->name ))));
  if (!!(existing_p_3))
  {
    RogueInteger i_4 = (((RoguePropertyList__locate__Property( list_1, existing_p_3 ))).value);
    if (p_0->type_context == existing_p_3->type_context)
    {
      throw ((RogueToken__error__String( p_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[319] ))), p_0->name ))), Rogue_program.literal_strings[320] ))) ))) )));
    }
    else if (p_0->_type == existing_p_3->_type)
    {
      if (!!(p_0->initial_value))
      {
        if (!!(existing_p_3->initial_value))
        {
          if (((RogueType__instance_of__Type( p_0->_type, existing_p_3->_type ))))
          {
            if (((RogueType__is_aspect( p_0->type_context ))))
            {
              p_0 = ((RogueClassProperty*)((RogueProperty__set_type_context__Type( ((RogueProperty__clone( p_0 ))), THIS ))));
            }
            list_1->data->objects[i_4] = p_0;
            RogueString_PropertyTable__set__String_Property( lookup_2, p_0->name, p_0 );
          }
          else
          {
            throw ((RogueToken__error__String( p_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[321] ))), p_0->name ))), Rogue_program.literal_strings[322] ))), ((RogueType__to_String( p_0->type_context ))) ))), Rogue_program.literal_strings[317] ))), ((RogueType__to_String( existing_p_3->type_context ))) ))), Rogue_program.literal_strings[47] ))) ))) )));
          }
        }
        else
        {
          if (((RogueType__is_aspect( p_0->type_context ))))
          {
            p_0 = ((RogueClassProperty*)((RogueProperty__set_type_context__Type( ((RogueProperty__clone( p_0 ))), THIS ))));
          }
          list_1->data->objects[i_4] = p_0;
          RogueString_PropertyTable__set__String_Property( lookup_2, p_0->name, p_0 );
        }
      }
    }
    else
    {
      throw ((RogueToken__error__String( p_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[323] ))), p_0->name ))), Rogue_program.literal_strings[324] ))), p_0->name ))), Rogue_program.literal_strings[157] ))), ((RogueType__to_String( p_0->_type ))) ))), Rogue_program.literal_strings[325] ))), ((RogueType__to_String( p_0->type_context ))) ))), Rogue_program.literal_strings[317] ))), p_0->name ))), Rogue_program.literal_strings[157] ))), ((RogueType__to_String( existing_p_3->_type ))) ))), Rogue_program.literal_strings[325] ))), ((RogueType__to_String( existing_p_3->type_context ))) ))), Rogue_program.literal_strings[47] ))) ))) )));
    }
  }
  else
  {
    if (((RogueType__is_aspect( p_0->type_context ))))
    {
      p_0 = ((RogueClassProperty*)((RogueProperty__set_type_context__Type( ((RogueProperty__clone( p_0 ))), THIS ))));
    }
    RoguePropertyList__add__Property( list_1, p_0 );
    RogueString_PropertyTable__set__String_Property( lookup_2, p_0->name, p_0 );
  }
}

void RogueType__inherit_methods__MethodList_String_MethodTable( RogueClassType* THIS, RogueMethodList* list_0, RogueClassString_MethodTable* lookup_1 )
{
  {
    RogueTypeList* _auto_433_2 = (THIS->base_types);
    RogueInteger _auto_434_3 = (0);
    for (;_auto_434_3 < _auto_433_2->count;++_auto_434_3)
    {
      RogueClassType* base_type_4 = (((RogueClassType*)(_auto_433_2->data->objects[_auto_434_3])));
      {
        RogueMethodList* _auto_435_5 = (base_type_4->method_list);
        RogueInteger _auto_436_6 = (0);
        for (;_auto_436_6 < _auto_435_5->count;++_auto_436_6)
        {
          RogueClassMethod* base_m_7 = (((RogueClassMethod*)(_auto_435_5->data->objects[_auto_436_6])));
          RogueType__inherit_method__Method_MethodList_String_MethodTable( THIS, base_m_7, list_0, lookup_1 );
        }
      }
    }
  }
  {
    RogueMethodList* _auto_437_8 = (THIS->method_list);
    RogueInteger _auto_438_9 = (0);
    for (;_auto_438_9 < _auto_437_8->count;++_auto_438_9)
    {
      RogueClassMethod* m_10 = (((RogueClassMethod*)(_auto_437_8->data->objects[_auto_438_9])));
      RogueType__inherit_method__Method_MethodList_String_MethodTable( THIS, m_10, list_0, lookup_1 );
    }
  }
}

void RogueType__inherit_method__Method_MethodList_String_MethodTable( RogueClassType* THIS, RogueClassMethod* m_0, RogueMethodList* list_1, RogueClassString_MethodTable* lookup_2 )
{
  RogueClassMethod* existing_m_3 = (((RogueString_MethodTable__get__String( lookup_2, m_0->signature ))));
  if (!!(existing_m_3))
  {
    RogueInteger i_4 = (((RogueMethodList__locate__Method( list_1, existing_m_3 ))).value);
    if (!(((RogueMethod__is_incorporated( existing_m_3 )))))
    {
      if (m_0->type_context == existing_m_3->type_context)
      {
        if (((RogueMethod__is_augment( m_0 ))))
        {
          RogueType__apply_augment_labels__Method_Method( THIS, m_0, existing_m_3 );
          return;
        }
        else
        {
          throw ((RogueToken__error__String( m_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[336] ))), ((RogueType__to_String( m_0->type_context ))) ))), Rogue_program.literal_strings[338] ))), m_0->signature ))), Rogue_program.literal_strings[47] ))) ))) )));
        }
      }
      else if (m_0->_return_type != existing_m_3->_return_type)
      {
        if (((m_0->_return_type == NULL || existing_m_3->_return_type == NULL) || !(((RogueType__instance_of__Type( m_0->_return_type, existing_m_3->_return_type ))))))
        {
          throw ((RogueToken__error__String( m_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[339] ))), m_0->type_context->name ))), Rogue_program.literal_strings[158] ))), m_0->signature ))), Rogue_program.literal_strings[340] ))), ((RogueType__to_String( m_0->_return_type ))) ))), Rogue_program.literal_strings[341] ))), ((RogueType__to_String( existing_m_3->_return_type ))) ))), Rogue_program.literal_strings[342] ))) ))) )));
        }
      }
    }
    if (((RogueType__is_aspect( m_0->type_context ))))
    {
      RogueMethodList__add__Method( m_0->overriding_methods, existing_m_3 );
      return;
    }
    else if (((RogueMethod__is_augment( m_0 ))))
    {
      RogueMethod__convert_augment_to_standalone( m_0 );
    }
    if (!(((RogueType__is_aspect( existing_m_3->type_context )))))
    {
      RogueAttributes__add__Integer( existing_m_3->attributes, 2048 );
      RogueAttributes__add__Integer( existing_m_3->attributes, 4096 );
      RogueAttributes__add__Integer( m_0->attributes, 2048 );
    }
    m_0->overridden_method = existing_m_3;
    while ((!!(m_0->overridden_method) && m_0->type_context == m_0->overridden_method->type_context))
    {
      m_0->overridden_method = m_0->overridden_method->overridden_method;
    }
    if (!!(m_0->overridden_method))
    {
      RogueMethodList__add__Method( m_0->overridden_method->overriding_methods, m_0 );
    }
    list_1->data->objects[i_4] = m_0;
    RogueString_MethodTable__set__String_Method( lookup_2, m_0->signature, m_0 );
  }
  else
  {
    if (((RogueType__is_aspect( m_0->type_context ))))
    {
      m_0 = ((RogueClassMethod*)((RogueMethod__incorporate__Type( m_0, THIS ))));
    }
    else if (((RogueMethod__is_augment( m_0 ))))
    {
      RogueMethod__convert_augment_to_standalone( m_0 );
    }
    RogueMethodList__add__Method( list_1, m_0 );
    RogueString_MethodTable__set__String_Method( lookup_2, m_0->signature, m_0 );
  }
}

void RogueType__inherit_routines__MethodList_String_MethodTable( RogueClassType* THIS, RogueMethodList* list_0, RogueClassString_MethodTable* lookup_1 )
{
  {
    RogueTypeList* _auto_439_2 = (THIS->base_types);
    RogueInteger _auto_440_3 = (0);
    for (;_auto_440_3 < _auto_439_2->count;++_auto_440_3)
    {
      RogueClassType* base_type_4 = (((RogueClassType*)(_auto_439_2->data->objects[_auto_440_3])));
      {
        RogueMethodList* _auto_441_5 = (base_type_4->routine_list);
        RogueInteger _auto_442_6 = (0);
        for (;_auto_442_6 < _auto_441_5->count;++_auto_442_6)
        {
          RogueClassMethod* base_m_7 = (((RogueClassMethod*)(_auto_441_5->data->objects[_auto_442_6])));
          RogueType__inherit_routine__Method_MethodList_String_MethodTable( THIS, base_m_7, list_0, lookup_1 );
        }
      }
    }
  }
  {
    RogueMethodList* _auto_443_8 = (THIS->routine_list);
    RogueInteger _auto_444_9 = (0);
    for (;_auto_444_9 < _auto_443_8->count;++_auto_444_9)
    {
      RogueClassMethod* m_10 = (((RogueClassMethod*)(_auto_443_8->data->objects[_auto_444_9])));
      RogueType__inherit_routine__Method_MethodList_String_MethodTable( THIS, m_10, list_0, lookup_1 );
    }
  }
}

void RogueType__inherit_routine__Method_MethodList_String_MethodTable( RogueClassType* THIS, RogueClassMethod* m_0, RogueMethodList* list_1, RogueClassString_MethodTable* lookup_2 )
{
  RogueClassMethod* existing_m_3 = (((RogueString_MethodTable__get__String( lookup_2, m_0->signature ))));
  if (!!(existing_m_3))
  {
    if (m_0->type_context == existing_m_3->type_context)
    {
      if (((RogueMethod__is_augment( m_0 ))))
      {
        RogueType__apply_augment_labels__Method_Method( THIS, m_0, existing_m_3 );
        return;
      }
      else
      {
        throw ((RogueToken__error__String( m_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[336] ))), ((RogueType__to_String( m_0->type_context ))) ))), Rogue_program.literal_strings[337] ))), m_0->signature ))), Rogue_program.literal_strings[47] ))) ))) )));
      }
    }
    RogueInteger i_4 = (((RogueMethodList__locate__Method( list_1, existing_m_3 ))).value);
    if (((RogueType__is_aspect( m_0->type_context ))))
    {
      return;
    }
    if (((RogueMethod__is_augment( m_0 ))))
    {
      RogueMethod__convert_augment_to_standalone( m_0 );
    }
    list_1->data->objects[i_4] = m_0;
    RogueString_MethodTable__set__String_Method( lookup_2, m_0->signature, m_0 );
  }
  else
  {
    if (((RogueType__is_aspect( m_0->type_context ))))
    {
      return;
    }
    if (((RogueMethod__is_augment( m_0 ))))
    {
      RogueMethod__convert_augment_to_standalone( m_0 );
    }
    RogueMethodList__add__Method( list_1, m_0 );
    RogueString_MethodTable__set__String_Method( lookup_2, m_0->signature, m_0 );
  }
}

void RogueType__apply_augment_labels__Method_Method( RogueClassType* THIS, RogueClassMethod* aug_m_0, RogueClassMethod* existing_m_1 )
{
  {
    RogueCmdLabelList* _auto_445_3 = (existing_m_1->label_list);
    RogueInteger _auto_446_4 = (0);
    for (;_auto_446_4 < _auto_445_3->count;++_auto_446_4)
    {
      RogueClassCmdLabel* method_label_5 = (((RogueClassCmdLabel*)(_auto_445_3->data->objects[_auto_446_4])));
      RogueClassCmdLabel* aug_label_2 = (((RogueString_CmdLabelTable__get__String( aug_m_0->label_lookup, method_label_5->name ))));
      if (!!(aug_label_2))
      {
        RogueCmdList__add__CmdList( ((RogueCmdList*)method_label_5->statements), ((RogueCmdList*)(aug_label_2->statements)) );
        aug_label_2->is_referenced = true;
      }
    }
  }
  {
    RogueCmdLabelList* _auto_447_6 = (aug_m_0->label_list);
    RogueInteger _auto_448_7 = (0);
    for (;_auto_448_7 < _auto_447_6->count;++_auto_448_7)
    {
      RogueClassCmdLabel* label_8 = (((RogueClassCmdLabel*)(_auto_447_6->data->objects[_auto_448_7])));
      if (!(label_8->is_referenced))
      {
        throw ((RogueToken__error__String( label_8->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[334] ))), label_8->name ))), Rogue_program.literal_strings[335] ))) ))) )));
      }
    }
  }
}

void RogueType__index_and_move_inline_to_end__MethodList( RogueClassType* THIS, RogueMethodList* list_0 )
{
  RogueInteger i_1 = ((list_0->count - 1));
  while (i_1 >= 0)
  {
    RogueClassMethod* m_2 = (((RogueClassMethod*)(list_0->data->objects[i_1])));
    if (((RogueMethod__is_macro( m_2 ))))
    {
      RogueMethodList__remove__Method( list_0, m_2 );
      RogueMethodList__add__Method( list_0, m_2 );
    }
    --i_1;
  }
  i_1 = ((RogueInteger)0);
  {
    RogueMethodList* _auto_449_3 = (list_0);
    RogueInteger _auto_450_4 = (0);
    for (;_auto_450_4 < _auto_449_3->count;++_auto_450_4)
    {
      RogueClassMethod* m_5 = (((RogueClassMethod*)(_auto_449_3->data->objects[_auto_450_4])));
      m_5->index = i_1;
      ++i_1;
    }
  }
}

RogueLogical RogueType__omit_output( RogueClassType* THIS )
{
  return (RogueLogical)(((((RogueType__is_native( THIS ))) || !(THIS->is_used)) || (THIS->is_optional && ((RogueType__is_reference( THIS->_element_type ))))));
}

RogueClassType* RogueType__resolve( RogueClassType* THIS )
{
  if (THIS->resolved)
  {
    return (RogueClassType*)(THIS);
  }
  THIS->resolved = true;
  RogueType__organize( THIS );
  if (!!(THIS->_element_type))
  {
    RogueType__organize( THIS->_element_type );
  }
  {
    RoguePropertyList* _auto_451_0 = (THIS->settings_list);
    RogueInteger _auto_452_1 = (0);
    for (;_auto_452_1 < _auto_451_0->count;++_auto_452_1)
    {
      RogueClassProperty* s_2 = (((RogueClassProperty*)(_auto_451_0->data->objects[_auto_452_1])));
      RogueType__organize( s_2->_type );
    }
  }
  {
    RoguePropertyList* _auto_453_3 = (THIS->property_list);
    RogueInteger _auto_454_4 = (0);
    for (;_auto_454_4 < _auto_453_3->count;++_auto_454_4)
    {
      RogueClassProperty* p_5 = (((RogueClassProperty*)(_auto_453_3->data->objects[_auto_454_4])));
      RogueType__organize( p_5->_type );
    }
  }
  {
    RogueMethodList* _auto_455_6 = (THIS->routine_list);
    RogueInteger _auto_456_7 = (0);
    for (;_auto_456_7 < _auto_455_6->count;++_auto_456_7)
    {
      RogueClassMethod* r_8 = (((RogueClassMethod*)(_auto_455_6->data->objects[_auto_456_7])));
      RogueMethod__resolve( r_8 );
    }
  }
  {
    RogueMethodList* _auto_457_9 = (THIS->method_list);
    RogueInteger _auto_458_10 = (0);
    for (;_auto_458_10 < _auto_457_9->count;++_auto_458_10)
    {
      RogueClassMethod* m_11 = (((RogueClassMethod*)(_auto_457_9->data->objects[_auto_458_10])));
      RogueMethod__resolve( m_11 );
    }
  }
  return (RogueClassType*)(THIS);
}

void RogueType__trace_used_code( RogueClassType* THIS )
{
  if (THIS->is_used)
  {
    return;
  }
  THIS->is_used = true;
  if (((RogueType__is_singleton( THIS ))))
  {
    RogueClassMethod* m_0 = (((RogueType__find_method__String( THIS, Rogue_program.literal_strings[367] ))));
    if (!!(m_0))
    {
      RogueAttributes__add__Integer( m_0->attributes, 32768 );
    }
  }
  if (!!(THIS->_element_type))
  {
    RogueType__trace_used_code( THIS->_element_type );
  }
  {
    RogueTypeList* _auto_459_1 = (THIS->base_types);
    RogueInteger _auto_460_2 = (0);
    for (;_auto_460_2 < _auto_459_1->count;++_auto_460_2)
    {
      RogueClassType* base_type_3 = (((RogueClassType*)(_auto_459_1->data->objects[_auto_460_2])));
      RogueType__trace_used_code( base_type_3 );
    }
  }
  {
    RoguePropertyList* _auto_461_4 = (THIS->settings_list);
    RogueInteger _auto_462_5 = (0);
    for (;_auto_462_5 < _auto_461_4->count;++_auto_462_5)
    {
      RogueClassProperty* s_6 = (((RogueClassProperty*)(_auto_461_4->data->objects[_auto_462_5])));
      RogueType__trace_used_code( s_6->_type );
    }
  }
  {
    RoguePropertyList* _auto_463_7 = (THIS->property_list);
    RogueInteger _auto_464_8 = (0);
    for (;_auto_464_8 < _auto_463_7->count;++_auto_464_8)
    {
      RogueClassProperty* p_9 = (((RogueClassProperty*)(_auto_463_7->data->objects[_auto_464_8])));
      RogueType__trace_used_code( p_9->_type );
    }
  }
  {
    RogueMethodList* _auto_465_10 = (THIS->routine_list);
    RogueInteger _auto_466_11 = (0);
    for (;_auto_466_11 < _auto_465_10->count;++_auto_466_11)
    {
      RogueClassMethod* r_12 = (((RogueClassMethod*)(_auto_465_10->data->objects[_auto_466_11])));
      if (((RogueMethod__is_requisite( r_12 ))))
      {
        RogueMethod__trace_used_code( r_12 );
      }
    }
  }
  {
    RogueMethodList* _auto_467_13 = (THIS->method_list);
    RogueInteger _auto_468_14 = (0);
    for (;_auto_468_14 < _auto_467_13->count;++_auto_468_14)
    {
      RogueClassMethod* m_15 = (((RogueClassMethod*)(_auto_467_13->data->objects[_auto_468_14])));
      if (((RogueMethod__is_requisite( m_15 ))))
      {
        RogueMethod__trace_used_code( m_15 );
      }
    }
  }
}

void RogueType__assign_cpp_name( RogueClassType* THIS )
{
  THIS->cpp_name = ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->name )));
  if ((THIS->is_array || THIS == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_NativeArray))
  {
    THIS->cpp_class_name = Rogue_program.literal_strings[387];
    THIS->cpp_name = Rogue_program.literal_strings[388];
  }
  else if ((((RogueType__is_primitive( THIS ))) || THIS->simplify_name))
  {
    THIS->cpp_class_name = ((RogueString__operatorPLUS__String( Rogue_program.literal_strings[19], THIS->cpp_name )));
  }
  else if (THIS->is_list)
  {
    THIS->cpp_class_name = ((RogueString__operatorPLUS__String( Rogue_program.literal_strings[19], THIS->cpp_name )));
  }
  else if ((THIS->is_optional && ((RogueType__is_primitive( THIS->_element_type )))))
  {
    THIS->cpp_name = ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ((RogueString__operatorPLUS__String( Rogue_program.literal_strings[281], THIS->_element_type->name ))) )));
    THIS->cpp_class_name = ((RogueString__operatorPLUS__String( Rogue_program.literal_strings[19], THIS->cpp_name )));
  }
  else
  {
    THIS->cpp_class_name = ((RogueString__operatorPLUS__String( Rogue_program.literal_strings[389], THIS->cpp_name )));
  }
  THIS->cpp_type_name = ((RogueString__operatorPLUS__String( Rogue_program.literal_strings[390], THIS->cpp_name )));
  {
    RoguePropertyList* _auto_469_0 = (THIS->settings_list);
    RogueInteger _auto_470_1 = (0);
    for (;_auto_470_1 < _auto_469_0->count;++_auto_470_1)
    {
      RogueClassProperty* s_2 = (((RogueClassProperty*)(_auto_469_0->data->objects[_auto_470_1])));
      s_2->cpp_name = ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), s_2->name )));
    }
  }
  {
    RoguePropertyList* _auto_471_3 = (THIS->property_list);
    RogueInteger _auto_472_4 = (0);
    for (;_auto_472_4 < _auto_471_3->count;++_auto_472_4)
    {
      RogueClassProperty* p_5 = (((RogueClassProperty*)(_auto_471_3->data->objects[_auto_472_4])));
      p_5->cpp_name = ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), p_5->name )));
    }
  }
}

void RogueType__declare_settings__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  {
    RoguePropertyList* _auto_473_1 = (THIS->settings_list);
    RogueInteger _auto_474_2 = (0);
    for (;_auto_474_2 < _auto_473_1->count;++_auto_474_2)
    {
      RogueClassProperty* s_3 = (((RogueClassProperty*)(_auto_473_1->data->objects[_auto_474_2])));
      if (s_3->type_context == THIS)
      {
        RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print_type_name__Type( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, s_3->_type ))), Rogue_program.literal_strings[255] ))), s_3->type_context ))), Rogue_program.literal_strings[158] ))), s_3->cpp_name );
        if (((RogueType__is_reference( s_3->_type ))))
        {
          RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[517] );
        }
        else if (s_3->_type == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)
        {
          RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[518] );
        }
        else
        {
          RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[519] );
        }
      }
    }
  }
}

void RogueType__print_data_definition__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  if ((((RogueType__omit_output( THIS ))) || ((RogueType__is_primitive( THIS )))))
  {
    return;
  }
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[395] ))), THIS->cpp_class_name );
  RogueLogical is_error_1 = (false);
  if (((RogueType__is_class( THIS ))))
  {
    if (((RogueType__instance_of__Type( THIS, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Error ))))
    {
      is_error_1 = ((RogueLogical)true);
      RogueCPPWriter__print_type_name__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[396] ))), THIS->base_class );
    }
    else
    {
      RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[398] );
    }
  }
  RogueCPPWriter__println__String( ((RogueCPPWriter__println( writer_0 ))), Rogue_program.literal_strings[175] );
  writer_0->indent += 2;
  if (!!(THIS->settings_list->count))
  {
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[399] );
    {
      RoguePropertyList* _auto_475_3 = (THIS->settings_list);
      RogueInteger _auto_476_4 = (0);
      for (;_auto_476_4 < _auto_475_3->count;++_auto_476_4)
      {
        RogueClassProperty* s_5 = (((RogueClassProperty*)(_auto_475_3->data->objects[_auto_476_4])));
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[400] ))), s_5->_type ))), Rogue_program.literal_strings[255] ))), s_5->cpp_name ))), Rogue_program.literal_strings[184] );
      }
    }
    RogueCPPWriter__println( writer_0 );
  }
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[401] );
  if (!!(THIS->native_properties))
  {
    {
      RogueStringList* _auto_477_6 = (THIS->native_properties);
      RogueInteger _auto_478_7 = (0);
      for (;_auto_478_7 < _auto_477_6->count;++_auto_478_7)
      {
        RogueString* p_8 = (((RogueString*)(_auto_477_6->data->objects[_auto_478_7])));
        RogueCPPWriter__print_code__String( writer_0, p_8 );
      }
    }
  }
  {
    RoguePropertyList* _auto_479_9 = (THIS->property_list);
    RogueInteger _auto_480_10 = (0);
    for (;_auto_480_10 < _auto_479_9->count;++_auto_480_10)
    {
      RogueClassProperty* p_11 = (((RogueClassProperty*)(_auto_479_9->data->objects[_auto_480_10])));
      if ((!(is_error_1) || p_11->type_context == THIS))
      {
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, p_11->_type ))), Rogue_program.literal_strings[255] ))), p_11->cpp_name ))), Rogue_program.literal_strings[184] );
      }
    }
  }
  RogueCPPWriter__println( writer_0 );
  if (((RogueType__is_compound( THIS ))))
  {
    if (!!(THIS->property_list->count))
    {
      RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, THIS ))), Rogue_program.literal_strings[402] );
      RogueLogical first_2 = (true);
      {
        RoguePropertyList* _auto_481_12 = (THIS->property_list);
        RogueInteger _auto_482_13 = (0);
        for (;_auto_482_13 < _auto_481_12->count;++_auto_482_13)
        {
          RogueClassProperty* p_14 = (((RogueClassProperty*)(_auto_481_12->data->objects[_auto_482_13])));
          if (first_2)
          {
            first_2 = ((RogueLogical)false);
          }
          else
          {
            RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[403] );
          }
          RogueCPPWriter__print__String( ((RogueCPPWriter__print_default_value__Type( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, p_14->cpp_name ))), Rogue_program.literal_strings[176] ))), p_14->_type ))), Rogue_program.literal_strings[102] );
        }
      }
      RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[405] );
      RogueCPPWriter__println( writer_0 );
      if (THIS->is_optional)
      {
        RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, THIS ))), Rogue_program.literal_strings[406] ))), ((RogueClassProperty*)(THIS->property_list->data->objects[0]))->_type );
        RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[407] );
      }
      else
      {
        RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, THIS ))), Rogue_program.literal_strings[406] );
        first_2 = ((RogueLogical)true);
        {
          RoguePropertyList* _auto_483_15 = (THIS->property_list);
          RogueInteger _auto_484_16 = (0);
          for (;_auto_484_16 < _auto_483_15->count;++_auto_484_16)
          {
            RogueClassProperty* p_17 = (((RogueClassProperty*)(_auto_483_15->data->objects[_auto_484_16])));
            if (first_2)
            {
              first_2 = ((RogueLogical)false);
            }
            else
            {
              RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[403] );
            }
            RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, p_17->_type ))), Rogue_program.literal_strings[255] ))), p_17->cpp_name );
          }
        }
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[408] );
        first_2 = ((RogueLogical)true);
        {
          RoguePropertyList* _auto_485_18 = (THIS->property_list);
          RogueInteger _auto_486_19 = (0);
          for (;_auto_486_19 < _auto_485_18->count;++_auto_486_19)
          {
            RogueClassProperty* p_20 = (((RogueClassProperty*)(_auto_485_18->data->objects[_auto_486_19])));
            if (first_2)
            {
              first_2 = ((RogueLogical)false);
            }
            else
            {
              RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[403] );
            }
            RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, p_20->cpp_name ))), Rogue_program.literal_strings[176] ))), p_20->cpp_name ))), Rogue_program.literal_strings[102] );
          }
        }
        RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[405] );
        RogueCPPWriter__println( writer_0 );
      }
    }
    RogueCPPWriter__println__String( ((RogueCPPWriter__print_type_name__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[409] ))), THIS ))), Rogue_program.literal_strings[410] );
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
    if (THIS->is_optional)
    {
      writer_0->indent += 2;
      RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[411] );
      writer_0->indent -= 2;
    }
    else
    {
      {
        RoguePropertyList* _auto_487_21 = (THIS->property_list);
        RogueInteger _auto_488_22 = (0);
        for (;_auto_488_22 < _auto_487_21->count;++_auto_488_22)
        {
          RogueClassProperty* p_23 = (((RogueClassProperty*)(_auto_487_21->data->objects[_auto_488_22])));
          RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[412] ))), p_23->cpp_name ))), Rogue_program.literal_strings[413] ))), p_23->cpp_name ))), Rogue_program.literal_strings[414] );
        }
      }
      RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[415] );
    }
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
    RogueCPPWriter__println( writer_0 );
    RogueCPPWriter__println__String( ((RogueCPPWriter__print_type_name__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[416] ))), THIS ))), Rogue_program.literal_strings[410] );
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[417] );
    if (((RogueType__has_references( THIS ))))
    {
      RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[418] );
      RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
      writer_0->indent += 2;
      {
        RoguePropertyList* _auto_489_24 = (THIS->property_list);
        RogueInteger _auto_490_25 = (0);
        for (;_auto_490_25 < _auto_489_24->count;++_auto_490_25)
        {
          RogueClassProperty* p_26 = (((RogueClassProperty*)(_auto_489_24->data->objects[_auto_490_25])));
          if (((RogueType__is_reference( p_26->_type ))))
          {
            RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[419] ))), p_26->cpp_name ))), Rogue_program.literal_strings[420] );
          }
          else if (((RogueType__has_references( p_26->_type ))))
          {
            RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, p_26->cpp_name ))), Rogue_program.literal_strings[421] );
          }
        }
      }
      writer_0->indent -= 2;
      RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
    }
    if (THIS->is_optional)
    {
      RogueCPPWriter__println__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[422] ))), THIS->_element_type ))), Rogue_program.literal_strings[423] );
      RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[424] );
    }
  }
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[425] );
}

void RogueType__print_type_definition__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  if (((RogueType__omit_output( THIS ))))
  {
    return;
  }
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[395] ))), THIS->cpp_type_name ))), Rogue_program.literal_strings[460] );
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
  writer_0->indent += 2;
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[461] );
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
  writer_0->indent += 2;
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[462] ))), THIS->cpp_class_name ))), Rogue_program.literal_strings[420] );
  if (!!(THIS->base_types->count))
  {
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[463] ))), THIS->base_types->count ))), Rogue_program.literal_strings[184] );
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[464] );
    {
      RogueTypeList* _auto_491_4 = (THIS->base_types);
      RogueInteger i_5 = (0);
      for (;i_5 < _auto_491_4->count;++i_5)
      {
        RogueCPPWriter__print__String( ((RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[465] ))), i_5 ))), Rogue_program.literal_strings[466] );
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, ((Rogue_Type__compile_type( ((RogueClassType*)(THIS->base_types->data->objects[i_5])) )))->cpp_name ))), Rogue_program.literal_strings[184] );
      }
    }
  }
  if (!(((RogueType__is_primitive( THIS )))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[467] );
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__Integer( writer_0, THIS->dynamic_method_table_index ))), Rogue_program.literal_strings[184] );
  }
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
  RogueCPPWriter__println( writer_0 );
  if (!(((RogueType__is_primitive( THIS )))))
  {
    RogueClassMethod* m_init_object_1 = (((RogueType__find_method__String( THIS, Rogue_program.literal_strings[345] ))));
    if ((!!(m_init_object_1) && m_init_object_1->statements->count > 1))
    {
      RogueClassType* type_Object_2 = (((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object);
      RogueCPPWriter__println__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, type_Object_2 ))), Rogue_program.literal_strings[468] ))), type_Object_2 ))), Rogue_program.literal_strings[469] );
      RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
      RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[470] ))), type_Object_2 ))), Rogue_program.literal_strings[455] ))), m_init_object_1->cpp_name );
      RogueCPPWriter__println__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[471] ))), THIS ))), Rogue_program.literal_strings[472] );
      RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
      RogueCPPWriter__println( writer_0 );
    }
  }
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[473] ))), THIS->name ))), Rogue_program.literal_strings[474] );
  RogueCPPWriter__println( writer_0 );
  if (((RogueType__is_singleton( THIS ))))
  {
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__Type( writer_0, THIS ))), Rogue_program.literal_strings[475] );
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
    writer_0->indent += 2;
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[476] );
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[477] );
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[478] );
    RogueClassMethod* m_init_3 = (((RogueType__find_method__String( THIS, Rogue_program.literal_strings[367] ))));
    if (!!(m_init_3))
    {
      RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[427] ))), m_init_3->cpp_name );
      RogueCPPWriter__println__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[471] ))), THIS ))), Rogue_program.literal_strings[479] );
    }
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[480] ))), THIS ))), Rogue_program.literal_strings[481] );
    writer_0->indent -= 2;
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
    RogueCPPWriter__println( writer_0 );
  }
  if ((((RogueType__is_class( THIS ))) && ((RogueType__has_references( THIS )))))
  {
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[482] );
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
    {
      RoguePropertyList* _auto_492_6 = (THIS->property_list);
      RogueInteger _auto_493_7 = (0);
      for (;_auto_493_7 < _auto_492_6->count;++_auto_493_7)
      {
        RogueClassProperty* p_8 = (((RogueClassProperty*)(_auto_492_6->data->objects[_auto_493_7])));
        if (((RogueType__is_reference( p_8->_type ))))
        {
          RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[483] );
          RogueCPPWriter__print__Type( writer_0, THIS );
          RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[484] ))), p_8->cpp_name ))), Rogue_program.literal_strings[420] );
        }
        else if (((RogueType__has_references( p_8->_type ))))
        {
          RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[485] );
          RogueCPPWriter__print__Type( writer_0, THIS );
          RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[484] ))), p_8->cpp_name ))), Rogue_program.literal_strings[421] );
        }
      }
    }
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
  }
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[425] );
  RogueCPPWriter__println( writer_0 );
}

void RogueType__print_routine_prototypes__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  {
    RogueMethodList* _auto_494_1 = (THIS->routine_list);
    RogueInteger _auto_495_2 = (0);
    for (;_auto_495_2 < _auto_494_1->count;++_auto_495_2)
    {
      RogueClassMethod* m_3 = (((RogueClassMethod*)(_auto_494_1->data->objects[_auto_495_2])));
      if (m_3->type_context == THIS)
      {
        RogueMethod__print_prototype__CPPWriter( m_3, writer_0 );
      }
    }
  }
}

void RogueType__print_routine_definitions__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  {
    RogueMethodList* _auto_496_1 = (THIS->routine_list);
    RogueInteger _auto_497_2 = (0);
    for (;_auto_497_2 < _auto_496_1->count;++_auto_497_2)
    {
      RogueClassMethod* m_3 = (((RogueClassMethod*)(_auto_496_1->data->objects[_auto_497_2])));
      if (m_3->type_context == THIS)
      {
        RogueMethod__print_definition__CPPWriter( m_3, writer_0 );
      }
    }
  }
}

void RogueType__print_method_prototypes__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  {
    RogueMethodList* _auto_498_1 = (THIS->method_list);
    RogueInteger _auto_499_2 = (0);
    for (;_auto_499_2 < _auto_498_1->count;++_auto_499_2)
    {
      RogueClassMethod* m_3 = (((RogueClassMethod*)(_auto_498_1->data->objects[_auto_499_2])));
      if (m_3->type_context == THIS)
      {
        RogueMethod__print_prototype__CPPWriter( m_3, writer_0 );
      }
    }
  }
}

void RogueType__determine_cpp_method_typedefs__StringList_String_MethodTable( RogueClassType* THIS, RogueStringList* list_0, RogueClassString_MethodTable* lookup_1 )
{
  RogueStringBuilder* buffer_2 = (((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))));
  {
    RogueMethodList* _auto_500_6 = (THIS->method_list);
    RogueInteger _auto_501_7 = (0);
    for (;_auto_501_7 < _auto_500_6->count;++_auto_501_7)
    {
      RogueClassMethod* m_8 = (((RogueClassMethod*)(_auto_500_6->data->objects[_auto_501_7])));
      if (((!(((RogueMethod__is_macro( m_8 )))) && ((RogueMethod__is_dynamic( m_8 )))) && m_8->is_used))
      {
        RogueStringBuilder__clear( buffer_2 );
        if (!!(m_8->_return_type))
        {
          RogueStringBuilder__print__String( buffer_2, ((Rogue_Type__compile_type( m_8->_return_type )))->cpp_class_name );
          if (((RogueType__is_reference( m_8->_return_type ))))
          {
            RogueStringBuilder__print__Character( buffer_2, (RogueCharacter)'*' );
          }
        }
        else
        {
          RogueStringBuilder__print__String( buffer_2, Rogue_program.literal_strings[397] );
        }
        RogueStringBuilder__print__String( buffer_2, Rogue_program.literal_strings[440] );
        RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( buffer_2, ((Rogue_Type__compile_type( m_8->type_context )))->cpp_class_name ))), Rogue_program.literal_strings[191] );
        {
          RogueLocalList* _auto_502_9 = (m_8->parameters);
          RogueInteger i_10 = (0);
          for (;i_10 < _auto_502_9->count;++i_10)
          {
            RogueStringBuilder__print__Character( buffer_2, (RogueCharacter)',' );
            RogueClassType* param_type_3 = (((Rogue_Type__compile_type( ((RogueClassLocal*)(m_8->parameters->data->objects[i_10]))->_type ))));
            RogueStringBuilder__print__String( buffer_2, param_type_3->cpp_class_name );
            if (((RogueType__is_reference( param_type_3 ))))
            {
              RogueStringBuilder__print__Character( buffer_2, (RogueCharacter)'*' );
            }
          }
        }
        RogueStringBuilder__print__String( buffer_2, Rogue_program.literal_strings[102] );
        RogueString* sig_4 = (((RogueStringBuilder__to_String( buffer_2 ))));
        RogueClassMethod* mapping_5 = (((RogueString_MethodTable__get__String( lookup_1, sig_4 ))));
        if (!!(mapping_5))
        {
          m_8->cpp_typedef = mapping_5->cpp_typedef;
          if ((!(mapping_5->called_dynamically) && m_8->called_dynamically))
          {
            RogueString_MethodTable__set__String_Method( lookup_1, sig_4, m_8 );
          }
        }
        else
        {
          m_8->cpp_typedef = ((RogueString__operatorPLUS__Integer( Rogue_program.literal_strings[441], list_0->count )));
          RogueString_MethodTable__set__String_Method( lookup_1, sig_4, m_8 );
          RogueStringList__add__String( list_0, sig_4 );
        }
      }
    }
  }
}

RogueInteger RogueType__print_dynamic_method_table_entries__Integer_CPPWriter( RogueClassType* THIS, RogueInteger at_index_0, RogueClassCPPWriter* writer_1 )
{
  if (!(((RogueType__is_reference( THIS )))))
  {
    return (RogueInteger)(at_index_0);
  }
  THIS->dynamic_method_table_index = at_index_0;
  RogueInteger i2_2 = ((THIS->method_list->count - 1));
  while (i2_2 > 0)
  {
    RogueClassMethod* m_3 = (((RogueClassMethod*)(THIS->method_list->data->objects[i2_2])));
    if (((!(((RogueMethod__is_macro( m_3 )))) && ((RogueMethod__is_dynamic( m_3 )))) && m_3->is_used))
    {
      goto _auto_503;
    }
    --i2_2;
  }
  _auto_503:;
  RogueLogical print_type_name_4 = (true);
  {
    RogueInteger i_5 = (0);
    RogueInteger _auto_62_6 = (i2_2);
    for (;i_5 <= _auto_62_6;++i_5)
    {
      RogueClassMethod* m_7 = (((RogueClassMethod*)(THIS->method_list->data->objects[i_5])));
      if (!(((RogueMethod__is_macro( m_7 )))))
      {
        if ((((RogueMethod__is_dynamic( m_7 ))) && m_7->is_used))
        {
          RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_program.literal_strings[454] ))), m_7->cpp_typedef ))), Rogue_program.literal_strings[455] ))), m_7->cpp_name ))), Rogue_program.literal_strings[16] );
        }
        else
        {
          RogueCPPWriter__print__String( writer_1, Rogue_program.literal_strings[456] );
        }
        if (print_type_name_4)
        {
          print_type_name_4 = ((RogueLogical)false);
          RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_program.literal_strings[457] ))), THIS->name );
        }
        RogueCPPWriter__println( writer_1 );
        ++at_index_0;
      }
    }
  }
  return (RogueInteger)(at_index_0);
}

void RogueType__print_method_definitions__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  {
    RogueMethodList* _auto_504_1 = (THIS->method_list);
    RogueInteger _auto_505_2 = (0);
    for (;_auto_505_2 < _auto_504_1->count;++_auto_505_2)
    {
      RogueClassMethod* m_3 = (((RogueClassMethod*)(_auto_504_1->data->objects[_auto_505_2])));
      if (m_3->type_context == THIS)
      {
        RogueMethod__print_definition__CPPWriter( m_3, writer_0 );
      }
    }
  }
}

RogueClassType* RogueType__init_object( RogueClassType* THIS )
{
  THIS->attributes = ((RogueClassAttributes*)Rogue_program.type_Attributes->create_and_init_object());
  THIS->index = -1;
  THIS->base_types = ((RogueTypeList__init( ((RogueTypeList*)Rogue_program.type_TypeList->create_and_init_object()) )));
  THIS->flat_base_types = ((RogueTypeList__init( ((RogueTypeList*)Rogue_program.type_TypeList->create_and_init_object()) )));
  THIS->definition_list = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  THIS->definition_lookup = ((RogueString_CmdTable__init( ((RogueClassString_CmdTable*)Rogue_program.type_String_CmdTable->create_and_init_object()) )));
  THIS->next_enum_offset = 0;
  THIS->settings_list = ((RoguePropertyList__init( ((RoguePropertyList*)Rogue_program.type_PropertyList->create_and_init_object()) )));
  THIS->settings_lookup = ((RogueString_PropertyTable__init( ((RogueClassString_PropertyTable*)Rogue_program.type_String_PropertyTable->create_and_init_object()) )));
  THIS->property_list = ((RoguePropertyList__init( ((RoguePropertyList*)Rogue_program.type_PropertyList->create_and_init_object()) )));
  THIS->property_lookup = ((RogueString_PropertyTable__init( ((RogueClassString_PropertyTable*)Rogue_program.type_String_PropertyTable->create_and_init_object()) )));
  THIS->routine_list = ((RogueMethodList__init( ((RogueMethodList*)Rogue_program.type_MethodList->create_and_init_object()) )));
  THIS->routine_lookup_by_name = ((RogueString_MethodListTable__init( ((RogueClassString_MethodListTable*)Rogue_program.type_String_MethodListTable->create_and_init_object()) )));
  THIS->routine_lookup_by_signature = ((RogueString_MethodTable__init( ((RogueClassString_MethodTable*)Rogue_program.type_String_MethodTable->create_and_init_object()) )));
  THIS->method_list = ((RogueMethodList__init( ((RogueMethodList*)Rogue_program.type_MethodList->create_and_init_object()) )));
  THIS->method_lookup_by_name = ((RogueString_MethodListTable__init( ((RogueClassString_MethodListTable*)Rogue_program.type_String_MethodListTable->create_and_init_object()) )));
  THIS->method_lookup_by_signature = ((RogueString_MethodTable__init( ((RogueClassString_MethodTable*)Rogue_program.type_String_MethodTable->create_and_init_object()) )));
  return (RogueClassType*)(THIS);
}

RogueString* RogueString_TypeTable__to_String( RogueClassString_TypeTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_TypeTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))) ))) ))));
}

RogueString* RogueString_TypeTable__type_name( RogueClassString_TypeTable* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[537]);
}

RogueClassString_TypeTable* RogueString_TypeTable__init( RogueClassString_TypeTable* THIS )
{
  RogueString_TypeTable__init__Integer( THIS, 16 );
  return (RogueClassString_TypeTable*)(THIS);
}

RogueClassString_TypeTable* RogueString_TypeTable__init__Integer( RogueClassString_TypeTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_TypeTableEntryList__init__Integer_String_TypeTableEntry( ((RogueTableEntry_of_String_TypeList*)Rogue_program.type_TableEntry_of_String_TypeList->create_and_init_object()), bin_count_0, ((RogueClassString_TypeTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  return (RogueClassString_TypeTable*)(THIS);
}

RogueClassString_TypeTableEntry* RogueString_TypeTable__find__String( RogueClassString_TypeTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_TypeTableEntry* entry_2 = (((RogueClassString_TypeTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_TypeTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_TypeTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_TypeTableEntry*)(((RogueClassString_TypeTableEntry*)(NULL)));
}

RogueClassType* RogueString_TypeTable__get__String( RogueClassString_TypeTable* THIS, RogueString* key_0 )
{
  RogueClassString_TypeTableEntry* entry_1 = (((RogueString_TypeTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassType*)(entry_1->value);
  }
  else
  {
    RogueClassType* default_value_2 = 0;
    return (RogueClassType*)(default_value_2);
  }
}

void RogueString_TypeTable__set__String_Type( RogueClassString_TypeTable* THIS, RogueString* key_0, RogueClassType* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_TypeTableEntry* entry_4 = (((RogueClassString_TypeTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_TypeTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_TypeTableEntry*)((RogueString_TypeTableEntry__init__String_Type_Integer( ((RogueClassString_TypeTableEntry*)Rogue_program.type_String_TypeTableEntry->create_and_init_object()), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_TypeTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_TypeTable__print_to__StringBuilder( RogueClassString_TypeTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_TypeTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_TypeTable* RogueString_TypeTable__init_object( RogueClassString_TypeTable* THIS )
{
  return (RogueClassString_TypeTable*)(THIS);
}

RogueString* RogueString_IntegerTable__to_String( RogueClassString_IntegerTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_IntegerTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))) ))) ))));
}

RogueString* RogueString_IntegerTable__type_name( RogueClassString_IntegerTable* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[538]);
}

RogueClassString_IntegerTable* RogueString_IntegerTable__init( RogueClassString_IntegerTable* THIS )
{
  RogueString_IntegerTable__init__Integer( THIS, 16 );
  return (RogueClassString_IntegerTable*)(THIS);
}

RogueClassString_IntegerTable* RogueString_IntegerTable__init__Integer( RogueClassString_IntegerTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_IntegerTableEntryList__init__Integer_String_IntegerTableEntry( ((RogueTableEntry_of_String_IntegerList*)Rogue_program.type_TableEntry_of_String_IntegerList->create_and_init_object()), bin_count_0, ((RogueClassString_IntegerTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  return (RogueClassString_IntegerTable*)(THIS);
}

RogueLogical RogueString_IntegerTable__contains__String( RogueClassString_IntegerTable* THIS, RogueString* key_0 )
{
  return (RogueLogical)(!!(((RogueString_IntegerTable__find__String( THIS, key_0 )))));
}

RogueClassString_IntegerTableEntry* RogueString_IntegerTable__find__String( RogueClassString_IntegerTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_IntegerTableEntry* entry_2 = (((RogueClassString_IntegerTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_IntegerTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_IntegerTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_IntegerTableEntry*)(((RogueClassString_IntegerTableEntry*)(NULL)));
}

RogueInteger RogueString_IntegerTable__get__String( RogueClassString_IntegerTable* THIS, RogueString* key_0 )
{
  RogueClassString_IntegerTableEntry* entry_1 = (((RogueString_IntegerTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueInteger)(entry_1->value);
  }
  else
  {
    RogueInteger default_value_2 = 0;
    return (RogueInteger)(default_value_2);
  }
}

void RogueString_IntegerTable__set__String_Integer( RogueClassString_IntegerTable* THIS, RogueString* key_0, RogueInteger value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_IntegerTableEntry* entry_4 = (((RogueClassString_IntegerTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_IntegerTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_IntegerTableEntry*)((RogueString_IntegerTableEntry__init__String_Integer_Integer( ((RogueClassString_IntegerTableEntry*)Rogue_program.type_String_IntegerTableEntry->create_and_init_object()), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_IntegerTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_IntegerTable__print_to__StringBuilder( RogueClassString_IntegerTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Integer( buffer_0, ((RogueString_IntegerTable__get__String( THIS, key_2 ))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_IntegerTable* RogueString_IntegerTable__init_object( RogueClassString_IntegerTable* THIS )
{
  return (RogueClassString_IntegerTable*)(THIS);
}

RogueString* RogueToken__to_String( RogueClassToken* THIS )
{
  return (RogueString*)(((RogueTokenType__to_String__Token( THIS->_type, THIS ))));
}

RogueString* RogueToken__type_name( RogueClassToken* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[539]);
}

RogueClassToken* RogueToken__init__TokenType( RogueClassToken* THIS, RogueClassTokenType* _auto_66_0 )
{
  THIS->_type = _auto_66_0;
  return (RogueClassToken*)(THIS);
}

RogueClassRogueError* RogueToken__error__String( RogueClassToken* THIS, RogueString* message_0 )
{
  return (RogueClassRogueError*)(((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)Rogue_program.type_RogueError->create_and_init_object()), message_0, THIS->filepath, THIS->line, THIS->column ))));
}

RogueLogical RogueToken__is_directive( RogueClassToken* THIS )
{
  return (RogueLogical)((call_ROGUEM73( 11, (RogueClassTokenType*)(THIS->_type) )));
}

RogueLogical RogueToken__is_structure( RogueClassToken* THIS )
{
  return (RogueLogical)((call_ROGUEM73( 13, (RogueClassTokenType*)(THIS->_type) )));
}

RogueString* RogueToken__quoted_name( RogueClassToken* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[46] ))), (call_ROGUEM33( 1, (RogueClassToken*)(THIS) )) ))), Rogue_program.literal_strings[46] ))) ))));
}

RogueClassToken* RogueToken__set_location__String_Integer_Integer( RogueClassToken* THIS, RogueString* _auto_67_0, RogueInteger _auto_68_1, RogueInteger _auto_69_2 )
{
  THIS->column = _auto_69_2;
  THIS->line = _auto_68_1;
  THIS->filepath = _auto_67_0;
  return (RogueClassToken*)(THIS);
}

RogueCharacter RogueToken__to_Character( RogueClassToken* THIS )
{
  return (RogueCharacter)(((RogueCharacter)(0)));
}

RogueInteger RogueToken__to_Integer( RogueClassToken* THIS )
{
  return (RogueInteger)(0);
}

RogueLong RogueToken__to_Long( RogueClassToken* THIS )
{
  return (RogueLong)(((RogueLong)(call_ROGUEM35( 10, (RogueClassToken*)(THIS) ))));
}

RogueReal RogueToken__to_Real( RogueClassToken* THIS )
{
  return (RogueReal)(0.0);
}

RogueClassType* RogueToken__to_Type( RogueClassToken* THIS )
{
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

RogueClassToken* RogueToken__init_object( RogueClassToken* THIS )
{
  return (RogueClassToken*)(THIS);
}

RogueString* RogueTypeArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[588]);
}

RogueString* RogueAttributes__type_name( RogueClassAttributes* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[540]);
}

RogueClassAttributes* RogueAttributes__init__Integer( RogueClassAttributes* THIS, RogueInteger _auto_72_0 )
{
  THIS->flags = _auto_72_0;
  return (RogueClassAttributes*)(THIS);
}

RogueClassAttributes* RogueAttributes__clone( RogueClassAttributes* THIS )
{
  RogueClassAttributes* result_0 = (((RogueAttributes__init__Integer( ((RogueClassAttributes*)Rogue_program.type_Attributes->create_and_init_object()), THIS->flags ))));
  if (!!(THIS->tags))
  {
    {
      RogueStringList* _auto_514_1 = (THIS->tags);
      RogueInteger _auto_515_2 = (0);
      for (;_auto_515_2 < _auto_514_1->count;++_auto_515_2)
      {
        RogueString* tag_3 = (((RogueString*)(_auto_514_1->data->objects[_auto_515_2])));
        RogueAttributes__add__String( result_0, tag_3 );
      }
    }
  }
  return (RogueClassAttributes*)(result_0);
}

RogueClassAttributes* RogueAttributes__add__Integer( RogueClassAttributes* THIS, RogueInteger flag_0 )
{
  THIS->flags |= flag_0;
  return (RogueClassAttributes*)(THIS);
}

RogueClassAttributes* RogueAttributes__add__String( RogueClassAttributes* THIS, RogueString* tag_0 )
{
  if (THIS->tags == NULL)
  {
    THIS->tags = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  }
  RogueStringList__add__String( THIS->tags, tag_0 );
  return (RogueClassAttributes*)(THIS);
}

RogueClassAttributes* RogueAttributes__add__Attributes( RogueClassAttributes* THIS, RogueClassAttributes* other_0 )
{
  THIS->flags |= other_0->flags;
  if (!!(other_0->tags))
  {
    {
      RogueStringList* _auto_516_1 = (other_0->tags);
      RogueInteger _auto_517_2 = (0);
      for (;_auto_517_2 < _auto_516_1->count;++_auto_517_2)
      {
        RogueString* tag_3 = (((RogueString*)(_auto_516_1->data->objects[_auto_517_2])));
        RogueAttributes__add__String( THIS, tag_3 );
      }
    }
  }
  return (RogueClassAttributes*)(THIS);
}

RogueString* RogueAttributes__element_type_name( RogueClassAttributes* THIS )
{
  switch ((THIS->flags & 7))
  {
    case 1:
    {
      return (RogueString*)(Rogue_program.literal_strings[266]);
      break;
    }
    case 2:
    {
      return (RogueString*)(Rogue_program.literal_strings[263]);
      break;
    }
    case 3:
    {
      return (RogueString*)(Rogue_program.literal_strings[267]);
      break;
    }
    default:
    {
      return (RogueString*)(Rogue_program.literal_strings[72]);
    }
  }
}

RogueClassAttributes* RogueAttributes__init_object( RogueClassAttributes* THIS )
{
  return (RogueClassAttributes*)(THIS);
}

RogueString* RogueCmd__type_name( RogueClassCmd* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[288]);
}

RogueClassCmd* RogueCmd__call_prior__Scope( RogueClassCmd* THIS, RogueClassScope* scope_0 )
{
  throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[752] )));
}

RogueClassCmd* RogueCmd__cast_to__Type( RogueClassCmd* THIS, RogueClassType* target_type_0 )
{
  RogueClassType* this_type_1 = ((call_ROGUEM46( 28, (RogueClassCmd*)(THIS) )));
  if (this_type_1 == target_type_0)
  {
    return (RogueClassCmd*)(THIS);
  }
  if (((RogueType__instance_of__Type( this_type_1, target_type_0 ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdCastToType*)Rogue_program.type_CmdCastToType->create_and_init_object())), THIS->t, THIS, target_type_0 ))))));
  }
  else
  {
    RogueType__organize( this_type_1 );
    RogueString* m_name_2 = (((RogueString__operatorPLUS__String( Rogue_program.literal_strings[298], target_type_0->name ))));
    if (((RogueType__has_method_named__String( this_type_1, m_name_2 ))))
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS, m_name_2 ))))));
    }
    if ((((RogueType__is_primitive( this_type_1 ))) && ((RogueType__is_primitive( target_type_0 )))))
    {
      if (!((this_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical || target_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)))
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdCastToType*)Rogue_program.type_CmdCastToType->create_and_init_object())), THIS->t, THIS, target_type_0 ))))));
      }
    }
    if (target_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalize*)Rogue_program.type_CmdLogicalize->create_and_init_object())), THIS->t, THIS ))))));
    }
    if (target_type_0->is_optional)
    {
      if (this_type_1 == target_type_0->_element_type)
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateOptionalValue__init__Token_Type_Cmd( ((RogueClassCmdCreateOptionalValue*)Rogue_program.type_CmdCreateOptionalValue->create_and_init_object()), THIS->t, target_type_0, THIS ))))));
      }
      else if (this_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_null)
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateOptionalValue__init__Token_Type_Cmd( ((RogueClassCmdCreateOptionalValue*)Rogue_program.type_CmdCreateOptionalValue->create_and_init_object()), THIS->t, target_type_0, ((RogueClassCmd*)(NULL)) ))))));
      }
    }
    throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[336] ))), ((RogueType__to_String( this_type_1 ))) ))), Rogue_program.literal_strings[364] ))), ((RogueType__to_String( target_type_0 ))) ))), Rogue_program.literal_strings[47] ))) ))) )));
  }
}

RogueClassCmd* RogueCmd__clone__CloneArgs( RogueClassCmd* THIS, RogueClassCloneArgs* clone_args_0 )
{
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[287] ))), (call_ROGUEM41( 2, (RogueClassCmd*)(THIS) )) ))), Rogue_program.literal_strings[289] ))) ))) )));
}

RogueClassCmd* RogueCmd__clone__Cmd_CloneArgs( RogueClassCmd* THIS, RogueClassCmd* other_0, RogueClassCloneArgs* clone_args_1 )
{
  if (!!(other_0))
  {
    return (RogueClassCmd*)((call_ROGUEM44( 5, (RogueClassCmd*)(other_0), clone_args_1 )));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
}

RogueClassCmdArgs* RogueCmd__clone__CmdArgs_CloneArgs( RogueClassCmd* THIS, RogueClassCmdArgs* args_0, RogueClassCloneArgs* clone_args_1 )
{
  if (!!(args_0))
  {
    return (RogueClassCmdArgs*)(((RogueCmdArgs__clone__CloneArgs( args_0, clone_args_1 ))));
  }
  return (RogueClassCmdArgs*)(((RogueClassCmdArgs*)(NULL)));
}

RogueClassCmdStatementList* RogueCmd__clone__CmdStatementList_CloneArgs( RogueClassCmd* THIS, RogueClassCmdStatementList* statements_0, RogueClassCloneArgs* clone_args_1 )
{
  if (!!(statements_0))
  {
    return (RogueClassCmdStatementList*)(((RogueCmdStatementList__clone__CloneArgs( statements_0, clone_args_1 ))));
  }
  return (RogueClassCmdStatementList*)(((RogueClassCmdStatementList*)(NULL)));
}

RogueClassCmd* RogueCmd__combine_literal_operands__Type( RogueClassCmd* THIS, RogueClassType* common_type_0 )
{
  return (RogueClassCmd*)(THIS);
}

RogueClassType* Rogue_Cmd__compile_type( RogueClassCmd* THIS )
{
  return (RogueClassType*)(((Rogue_Type__compile_type( (call_ROGUEM46( 28, (RogueClassCmd*)(THIS) )) ))));
}

void RogueCmd__exit_scope__Scope( RogueClassCmd* THIS, RogueClassScope* scope_0 )
{
}

RogueClassType* RogueCmd__find_operation_result_type__Type_Type( RogueClassCmd* THIS, RogueClassType* left_type_0, RogueClassType* right_type_1 )
{
  RogueClassType* result_2 = (((RogueCmd__find_common_type__Type_Type( THIS, left_type_0, right_type_1 ))));
  if (!(!!(result_2)))
  {
    return (RogueClassType*)(left_type_0);
  }
  if ((result_2 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte || result_2 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character))
  {
    return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer);
  }
  return (RogueClassType*)(result_2);
}

RogueClassType* RogueCmd__find_common_type__Type_Type( RogueClassCmd* THIS, RogueClassType* left_type_0, RogueClassType* right_type_1 )
{
  if (left_type_0 == NULL)
  {
    return (RogueClassType*)(right_type_1);
  }
  if (right_type_1 == NULL)
  {
    return (RogueClassType*)(left_type_0);
  }
  if (left_type_0 == right_type_1)
  {
    return (RogueClassType*)(left_type_0);
  }
  if (((RogueType__is_primitive( left_type_0 ))))
  {
    if (((RogueType__is_primitive( right_type_1 ))))
    {
      if ((left_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real || right_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real))
      {
        return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real);
      }
      if ((left_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Float || right_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Float))
      {
        return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Float);
      }
      if ((left_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Long || right_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Long))
      {
        return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Long);
      }
      if ((left_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer || right_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer))
      {
        return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer);
      }
      if ((left_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character || right_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character))
      {
        return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character);
      }
    }
  }
  if (((RogueType__instance_of__Type( left_type_0, right_type_1 ))))
  {
    return (RogueClassType*)(right_type_1);
  }
  if (((RogueType__instance_of__Type( right_type_1, left_type_0 ))))
  {
    return (RogueClassType*)(left_type_0);
  }
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

RogueClassType* RogueCmd__must_find_common_type__Type_Type( RogueClassCmd* THIS, RogueClassType* left_type_0, RogueClassType* right_type_1 )
{
  RogueClassType* common_type_2 = (((RogueCmd__find_common_type__Type_Type( THIS, left_type_0, right_type_1 ))));
  if (!!(common_type_2))
  {
    return (RogueClassType*)(common_type_2);
  }
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[707] ))), ((RogueType__to_String( left_type_0 ))) ))), Rogue_program.literal_strings[317] ))), ((RogueType__to_String( right_type_1 ))) ))), Rogue_program.literal_strings[708] ))) ))) )));
}

RogueClassType* Rogue_Cmd__implicit_type( RogueClassCmd* THIS )
{
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

RogueLogical RogueCmd__is_literal( RogueClassCmd* THIS )
{
  return (RogueLogical)(false);
}

void RogueCmd__require_type_context( RogueClassCmd* THIS )
{
  if (!!((call_ROGUEM46( 28, (RogueClassCmd*)(THIS) ))))
  {
    throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[688] ))), ((RogueType__to_String( (call_ROGUEM46( 28, (RogueClassCmd*)(THIS) )) ))) ))), Rogue_program.literal_strings[689] ))) ))) )));
  }
  else
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[690] )));
  }
}

RogueClassCmd* RogueCmd__require_integer( RogueClassCmd* THIS )
{
  RogueClassType* _type_0 = ((call_ROGUEM46( 28, (RogueClassCmd*)(THIS) )));
  if ((_type_0 == NULL || _type_0 != ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[677] )));
  }
  return (RogueClassCmd*)(THIS);
}

RogueClassCmd* RogueCmd__require_logical__Scope( RogueClassCmd* THIS, RogueClassScope* scope_0 )
{
  if (((Rogue_Cmd__require_type( THIS ))) != ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)
  {
    return (RogueClassCmd*)((call_ROGUEM302( 23, (RogueClassCmdUnary*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalize*)Rogue_program.type_CmdLogicalize->create_and_init_object())), THIS->t, THIS )))), scope_0 )));
  }
  return (RogueClassCmd*)(THIS);
}

RogueClassType* Rogue_Cmd__require_type( RogueClassCmd* THIS )
{
  RogueClassType* result_0 = ((call_ROGUEM46( 28, (RogueClassCmd*)(THIS) )));
  if (result_0 == NULL)
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[675] )));
  }
  return (RogueClassType*)(result_0);
}

RogueClassCmd* RogueCmd__require_value( RogueClassCmd* THIS )
{
  Rogue_Cmd__require_type( THIS );
  return (RogueClassCmd*)(THIS);
}

RogueLogical RogueCmd__requires_semicolon( RogueClassCmd* THIS )
{
  return (RogueLogical)(true);
}

RogueClassCmd* RogueCmd__resolve__Scope( RogueClassCmd* THIS, RogueClassScope* scope_0 )
{
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[287] ))), (call_ROGUEM41( 2, (RogueClassCmd*)(THIS) )) ))), Rogue_program.literal_strings[359] ))) ))) )));
  return (RogueClassCmd*)(THIS);
}

RogueClassCmd* RogueCmd__resolve_assignment__Scope_Cmd( RogueClassCmd* THIS, RogueClassScope* scope_0, RogueClassCmd* new_value_1 )
{
  throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[705] )));
}

RogueClassCmd* RogueCmd__resolve_modify__Scope_Integer( RogueClassCmd* THIS, RogueClassScope* scope_0, RogueInteger delta_1 )
{
  throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[719] )));
}

RogueClassCmd* RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd( RogueClassCmd* THIS, RogueClassScope* scope_0, RogueClassTokenType* op_1, RogueClassCmd* new_value_2 )
{
  throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[705] )));
}

void RogueCmd__trace_used_code( RogueClassCmd* THIS )
{
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[287] ))), (call_ROGUEM41( 2, (RogueClassCmd*)(THIS) )) ))), Rogue_program.literal_strings[368] ))) ))) )));
}

RogueClassType* Rogue_Cmd__type( RogueClassCmd* THIS )
{
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[287] ))), (call_ROGUEM41( 2, (RogueClassCmd*)(THIS) )) ))), Rogue_program.literal_strings[363] ))) ))) )));
}

void RogueCmd__write_cpp__CPPWriter_Logical( RogueClassCmd* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[287] ))), (call_ROGUEM41( 2, (RogueClassCmd*)(THIS) )) ))), Rogue_program.literal_strings[491] ))) ))) )));
}

RogueClassCmd* RogueCmd__init_object( RogueClassCmd* THIS )
{
  return (RogueClassCmd*)(THIS);
}

RogueString* RogueCmdReturn__type_name( RogueClassCmdReturn* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[827]);
}

RogueClassCmd* RogueCmdReturn__clone__CloneArgs( RogueClassCmdReturn* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_TaskArgs))));
  if (!!(task_args_1))
  {
    return (RogueClassCmd*)(((RogueTaskArgs__create_return__Token_Cmd( task_args_1, THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->value, clone_args_0 ))) ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)Rogue_program.type_CmdReturn->create_and_init_object()), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->value, clone_args_0 ))) ))))));
  }
}

RogueClassCmd* RogueCmdReturn__resolve__Scope( RogueClassCmdReturn* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->value))
  {
    if (!(!!(scope_0->this_method->_return_type)))
    {
      throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), scope_0->this_method->signature ))), Rogue_program.literal_strings[362] ))) ))) )));
    }
    THIS->value = (call_ROGUEM42( 23, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)((call_ROGUEM42( 23, (RogueClassCmd*)(THIS->value), scope_0 ))), scope_0->this_method->_return_type ))), scope_0 ));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdReturn__trace_used_code( RogueClassCmdReturn* THIS )
{
  if (!!(THIS->value))
  {
    call_ROGUEM48( 27, (RogueClassCmd*)(THIS->value) );
  }
}

RogueClassType* Rogue_CmdReturn__type( RogueClassCmdReturn* THIS )
{
  return (RogueClassType*)((call_ROGUEM46( 28, (RogueClassCmd*)(THIS->value) )));
}

void RogueCmdReturn__write_cpp__CPPWriter_Logical( RogueClassCmdReturn* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!!(THIS->value))
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[480] ))), (call_ROGUEM46( 28, (RogueClassCmd*)(THIS->value) )) ))), Rogue_program.literal_strings[765] );
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->value), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[126] );
  }
}

RogueClassCmdReturn* RogueCmdReturn__init_object( RogueClassCmdReturn* THIS )
{
  return (RogueClassCmdReturn*)(THIS);
}

RogueClassCmdReturn* RogueCmdReturn__init__Token_Cmd( RogueClassCmdReturn* THIS, RogueClassToken* _auto_74_0, RogueClassCmd* _auto_75_1 )
{
  THIS->value = _auto_75_1;
  THIS->t = _auto_74_0;
  return (RogueClassCmdReturn*)(THIS);
}

RogueString* RogueCmdStatement__type_name( RogueClassCmdStatement* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[635]);
}

void RogueCmdStatement__trace_used_code( RogueClassCmdStatement* THIS )
{
}

RogueClassCmdStatement* RogueCmdStatement__init_object( RogueClassCmdStatement* THIS )
{
  return (RogueClassCmdStatement*)(THIS);
}

RogueString* RogueCmdStatementList__type_name( RogueClassCmdStatementList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[962]);
}

RogueClassCmdStatementList* RogueCmdStatementList__init_object( RogueClassCmdStatementList* THIS )
{
  return (RogueClassCmdStatementList*)(THIS);
}

RogueClassCmdStatementList* RogueCmdStatementList__init( RogueClassCmdStatementList* THIS )
{
  RogueCmdList__init( ((RogueCmdList*)THIS) );
  return (RogueClassCmdStatementList*)(THIS);
}

RogueClassCmdStatementList* RogueCmdStatementList__init__Integer( RogueClassCmdStatementList* THIS, RogueInteger initial_capacity_0 )
{
  RogueCmdList__init__Integer( ((RogueCmdList*)THIS), initial_capacity_0 );
  return (RogueClassCmdStatementList*)(THIS);
}

RogueClassCmdStatementList* RogueCmdStatementList__init__Cmd( RogueClassCmdStatementList* THIS, RogueClassCmd* statement_0 )
{
  RogueCmdStatementList__init( THIS );
  if (!!(statement_0))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS), statement_0 );
  }
  return (RogueClassCmdStatementList*)(THIS);
}

RogueClassCmdStatementList* RogueCmdStatementList__clone__CloneArgs( RogueClassCmdStatementList* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdStatementList* result_1 = (((RogueCmdStatementList__init__Integer( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()), THIS->count ))));
  {
    RogueClassCmdStatementList* _auto_536_2 = (THIS);
    RogueInteger _auto_537_3 = (0);
    for (;_auto_537_3 < _auto_536_2->count;++_auto_537_3)
    {
      RogueClassCmd* cmd_4 = (((RogueClassCmd*)(_auto_536_2->data->objects[_auto_537_3])));
      cmd_4 = ((RogueClassCmd*)(call_ROGUEM44( 5, (RogueClassCmd*)(cmd_4), clone_args_0 )));
      if (!!(cmd_4))
      {
        RogueCmdList__add__Cmd( ((RogueCmdList*)result_1), cmd_4 );
      }
    }
  }
  return (RogueClassCmdStatementList*)(result_1);
}

void RogueCmdStatementList__resolve__Scope( RogueClassCmdStatementList* THIS, RogueClassScope* scope_0 )
{
  {
    RogueClassCmdStatementList* _auto_538_1 = (THIS);
    RogueInteger i_2 = (0);
    for (;i_2 < _auto_538_1->count;++i_2)
    {
      THIS->data->objects[i_2] = (call_ROGUEM42( 23, (RogueClassCmd*)(((RogueClassCmd*)(THIS->data->objects[i_2]))), scope_0 ));
    }
  }
  {
    RogueClassCmdStatementList* _auto_539_3 = (THIS);
    RogueInteger _auto_540_4 = (0);
    for (;_auto_540_4 < _auto_539_3->count;++_auto_540_4)
    {
      RogueClassCmd* statement_5 = (((RogueClassCmd*)(_auto_539_3->data->objects[_auto_540_4])));
      call_ROGUEM45( 11, (RogueClassCmd*)(statement_5), scope_0 );
    }
  }
}

void RogueCmdStatementList__trace_used_code( RogueClassCmdStatementList* THIS )
{
  {
    RogueClassCmdStatementList* _auto_541_0 = (THIS);
    RogueInteger _auto_542_1 = (0);
    for (;_auto_542_1 < _auto_541_0->count;++_auto_542_1)
    {
      RogueClassCmd* statement_2 = (((RogueClassCmd*)(_auto_541_0->data->objects[_auto_542_1])));
      call_ROGUEM48( 27, (RogueClassCmd*)(statement_2) );
    }
  }
}

void RogueCmdStatementList__write_cpp__CPPWriter_Logical( RogueClassCmdStatementList* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  {
    RogueClassCmdStatementList* _auto_543_2 = (THIS);
    RogueInteger _auto_544_3 = (0);
    for (;_auto_544_3 < _auto_543_2->count;++_auto_544_3)
    {
      RogueClassCmd* statement_4 = (((RogueClassCmd*)(_auto_543_2->data->objects[_auto_544_3])));
      call_ROGUEM52( 29, (RogueClassCmd*)(statement_4), writer_0, true );
      if ((call_ROGUEM47( 22, (RogueClassCmd*)(statement_4) )))
      {
        RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[184] );
      }
    }
  }
}

RogueString* RogueCmdList__to_String( RogueCmdList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueCmdList* _auto_526_2 = (THIS);
    RogueInteger _auto_527_3 = (0);
    for (;_auto_527_3 < _auto_526_2->count;++_auto_527_3)
    {
      RogueClassCmd* value_4 = (((RogueClassCmd*)(_auto_526_2->data->objects[_auto_527_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueCmdList__type_name( RogueCmdList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[920]);
}

RogueCmdList* RogueCmdList__init_object( RogueCmdList* THIS )
{
  return (RogueCmdList*)(THIS);
}

RogueCmdList* RogueCmdList__init( RogueCmdList* THIS )
{
  call_ROGUEM69( 5, (RogueCmdList*)(THIS), 10 );
  return (RogueCmdList*)(THIS);
}

RogueCmdList* RogueCmdList__init__Integer( RogueCmdList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassCmd*), true );
  return (RogueCmdList*)(THIS);
}

RogueCmdList* RogueCmdList__add__Cmd( RogueCmdList* THIS, RogueClassCmd* value_0 )
{
  ((RogueCmdList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdList*)(THIS);
}

RogueCmdList* RogueCmdList__add__CmdList( RogueCmdList* THIS, RogueCmdList* other_0 )
{
  RogueCmdList__reserve__Integer( THIS, other_0->count );
  {
    RogueCmdList* _auto_530_1 = (other_0);
    RogueInteger _auto_531_2 = (0);
    for (;_auto_531_2 < _auto_530_1->count;++_auto_531_2)
    {
      RogueClassCmd* value_3 = (((RogueClassCmd*)(_auto_530_1->data->objects[_auto_531_2])));
      RogueCmdList__add__Cmd( THIS, value_3 );
    }
  }
  return (RogueCmdList*)(THIS);
}

RogueInteger RogueCmdList__capacity( RogueCmdList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueCmdList* RogueCmdList__insert__Cmd_Integer( RogueCmdList* THIS, RogueClassCmd* value_0, RogueInteger before_index_1 )
{
  if (before_index_1 < 0)
  {
    before_index_1 = ((RogueInteger)0);
  }
  if (before_index_1 >= THIS->count)
  {
    return (RogueCmdList*)(((RogueCmdList__add__Cmd( THIS, value_0 ))));
  }
  else
  {
    RogueCmdList__add__Cmd( THIS, ((RogueClassCmd*)(THIS->data->objects[0])) );
    THIS->data->set((before_index_1 + 1),((RogueArray*)(THIS->data)),before_index_1,(THIS->count - 2));
    THIS->data->objects[before_index_1] = value_0;
  }
  return (RogueCmdList*)(THIS);
}

RogueClassCmd* RogueCmdList__last( RogueCmdList* THIS )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS->data->objects[(THIS->count - 1)])));
}

RogueCmdList* RogueCmdList__reserve__Integer( RogueCmdList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassCmd*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueCmdList__capacity( THIS ))) + ((RogueCmdList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassCmd*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdList*)(THIS);
}

RogueString* RogueTokenType__to_String( RogueClassTokenType* THIS )
{
  return (RogueString*)(THIS->name);
}

RogueString* RogueTokenType__type_name( RogueClassTokenType* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[541]);
}

RogueClassTokenType* RogueTokenType__init__String( RogueClassTokenType* THIS, RogueString* _auto_77_0 )
{
  THIS->name = _auto_77_0;
  return (RogueClassTokenType*)(THIS);
}

RogueClassToken* RogueTokenType__create_token__String_Integer_Integer( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueToken__init__TokenType( ((RogueClassToken*)Rogue_program.type_Token->create_and_init_object()), THIS ))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__String_Integer_Integer_Character( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2, RogueCharacter value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueClassToken*)((RogueLiteralCharacterToken__init__TokenType_Character( ((RogueClassLiteralCharacterToken*)Rogue_program.type_LiteralCharacterToken->create_and_init_object()), THIS, value_3 )))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__String_Integer_Integer_Long( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2, RogueLong value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueClassToken*)((RogueLiteralLongToken__init__TokenType_Long( ((RogueClassLiteralLongToken*)Rogue_program.type_LiteralLongToken->create_and_init_object()), THIS, value_3 )))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__String_Integer_Integer_Integer( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2, RogueInteger value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueClassToken*)((RogueLiteralIntegerToken__init__TokenType_Integer( ((RogueClassLiteralIntegerToken*)Rogue_program.type_LiteralIntegerToken->create_and_init_object()), THIS, value_3 )))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__String_Integer_Integer_Real( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2, RogueReal value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueClassToken*)((RogueLiteralRealToken__init__TokenType_Real( ((RogueClassLiteralRealToken*)Rogue_program.type_LiteralRealToken->create_and_init_object()), THIS, value_3 )))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__String_Integer_Integer_String( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2, RogueString* value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueClassToken*)((RogueLiteralStringToken__init__TokenType_String( ((RogueClassLiteralStringToken*)Rogue_program.type_LiteralStringToken->create_and_init_object()), THIS, value_3 )))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__Token_String( RogueClassTokenType* THIS, RogueClassToken* existing_0, RogueString* value_1 )
{
  return (RogueClassToken*)((call_ROGUEM72( 9, (RogueClassTokenType*)(THIS), existing_0->filepath, existing_0->line, existing_0->column, value_1 )));
}

RogueLogical RogueTokenType__is_directive( RogueClassTokenType* THIS )
{
  return (RogueLogical)(false);
}

RogueLogical RogueTokenType__is_op_with_assign( RogueClassTokenType* THIS )
{
  return (RogueLogical)(false);
}

RogueLogical RogueTokenType__is_structure( RogueClassTokenType* THIS )
{
  return (RogueLogical)(false);
}

RogueString* RogueTokenType__quoted_name( RogueClassTokenType* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[46] ))), THIS->name ))), Rogue_program.literal_strings[46] ))) ))));
}

RogueString* RogueTokenType__to_String__Token( RogueClassTokenType* THIS, RogueClassToken* t_0 )
{
  return (RogueString*)(THIS->name);
}

RogueClassTokenType* RogueTokenType__init_object( RogueClassTokenType* THIS )
{
  return (RogueClassTokenType*)(THIS);
}

RogueString* RogueCmdLabel__type_name( RogueClassCmdLabel* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[636]);
}

RogueClassCmdLabel* RogueCmdLabel__clone__CloneArgs( RogueClassCmdLabel* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdLabel* result_1 = (((RogueCmdLabel__init__Token_String_CmdStatementList( ((RogueClassCmdLabel*)Rogue_program.type_CmdLabel->create_and_init_object()), THIS->t, THIS->name, ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 ))) ))));
  if (!!(clone_args_0))
  {
    call_ROGUEM144( 3, (RogueClassCloneArgs*)(clone_args_0), result_1 );
  }
  return (RogueClassCmdLabel*)(result_1);
}

RogueLogical RogueCmdLabel__requires_semicolon( RogueClassCmdLabel* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdLabel__resolve__Scope( RogueClassCmdLabel* THIS, RogueClassScope* scope_0 )
{
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdLabel__trace_used_code( RogueClassCmdLabel* THIS )
{
  RogueCmdStatementList__trace_used_code( THIS->statements );
}

void RogueCmdLabel__write_cpp__CPPWriter_Logical( RogueClassCmdLabel* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, is_statement_1 );
}

RogueClassCmdLabel* RogueCmdLabel__init_object( RogueClassCmdLabel* THIS )
{
  return (RogueClassCmdLabel*)(THIS);
}

RogueClassCmdLabel* RogueCmdLabel__init__Token_String_CmdStatementList( RogueClassCmdLabel* THIS, RogueClassToken* _auto_78_0, RogueString* _auto_79_1, RogueClassCmdStatementList* _auto_80_2 )
{
  THIS->statements = _auto_80_2;
  THIS->name = _auto_79_1;
  THIS->t = _auto_78_0;
  return (RogueClassCmdLabel*)(THIS);
}

RogueString* RogueRequisiteItemArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[589]);
}

RogueString* RogueRogueError__to_String( RogueClassRogueError* THIS )
{
  RogueStringBuilder* builder_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))));
  RogueString* m_1 = (((RogueStringList__joined__String( ((RogueString__word_wrapped__Integer( THIS->message, 79 ))), Rogue_program.literal_strings[18] ))));
  if (!!(THIS->filepath))
  {
    RogueStringBuilder__println__String( builder_0, Rogue_program.literal_strings[621] );
    RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( builder_0, Rogue_program.literal_strings[622] ))), (RogueFile__filename__String( THIS->filepath )) );
    RogueStringBuilder__println__Integer( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__Integer( ((RogueStringBuilder__print__String( builder_0, Rogue_program.literal_strings[623] ))), THIS->line ))), Rogue_program.literal_strings[624] ))), THIS->column );
    RogueStringBuilder__println( builder_0 );
    RogueStringBuilder__println__String( builder_0, m_1 );
    RogueStringBuilder__println__String( builder_0, Rogue_program.literal_strings[621] );
  }
  else
  {
    RogueStringBuilder__println__String( builder_0, Rogue_program.literal_strings[621] );
    RogueStringBuilder__print__String( builder_0, Rogue_program.literal_strings[625] );
    RogueStringBuilder__println( builder_0 );
    RogueStringBuilder__println__String( builder_0, m_1 );
    RogueStringBuilder__println__String( builder_0, Rogue_program.literal_strings[621] );
  }
  return (RogueString*)(((RogueStringBuilder__to_String( builder_0 ))));
}

RogueString* RogueRogueError__type_name( RogueClassRogueError* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[626]);
}

RogueClassRogueError* RogueRogueError__init_object( RogueClassRogueError* THIS )
{
  return (RogueClassRogueError*)(THIS);
}

RogueClassRogueError* RogueRogueError__init__String_String_Integer_Integer( RogueClassRogueError* THIS, RogueString* _auto_83_0, RogueString* _auto_84_1, RogueInteger _auto_85_2, RogueInteger _auto_86_3 )
{
  THIS->column = _auto_86_3;
  THIS->line = _auto_85_2;
  THIS->filepath = _auto_84_1;
  THIS->message = _auto_83_0;
  return (RogueClassRogueError*)(THIS);
}

RogueString* RogueTemplateArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[590]);
}

RogueString* RogueMethodList__to_String( RogueMethodList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueMethodList* _auto_545_2 = (THIS);
    RogueInteger _auto_546_3 = (0);
    for (;_auto_546_3 < _auto_545_2->count;++_auto_546_3)
    {
      RogueClassMethod* value_4 = (((RogueClassMethod*)(_auto_545_2->data->objects[_auto_546_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueMethodList__type_name( RogueMethodList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[921]);
}

RogueMethodList* RogueMethodList__init_object( RogueMethodList* THIS )
{
  return (RogueMethodList*)(THIS);
}

RogueMethodList* RogueMethodList__init( RogueMethodList* THIS )
{
  RogueMethodList__init__Integer( THIS, 10 );
  return (RogueMethodList*)(THIS);
}

RogueMethodList* RogueMethodList__init__Integer( RogueMethodList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassMethod*), true );
  return (RogueMethodList*)(THIS);
}

RogueMethodList* RogueMethodList__add__Method( RogueMethodList* THIS, RogueClassMethod* value_0 )
{
  ((RogueMethodList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueMethodList*)(THIS);
}

RogueMethodList* RogueMethodList__add__MethodList( RogueMethodList* THIS, RogueMethodList* other_0 )
{
  RogueMethodList__reserve__Integer( THIS, other_0->count );
  {
    RogueMethodList* _auto_549_1 = (other_0);
    RogueInteger _auto_550_2 = (0);
    for (;_auto_550_2 < _auto_549_1->count;++_auto_550_2)
    {
      RogueClassMethod* value_3 = (((RogueClassMethod*)(_auto_549_1->data->objects[_auto_550_2])));
      RogueMethodList__add__Method( THIS, value_3 );
    }
  }
  return (RogueMethodList*)(THIS);
}

RogueInteger RogueMethodList__capacity( RogueMethodList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueMethodList* RogueMethodList__clear( RogueMethodList* THIS )
{
  THIS->count = 0;
  return (RogueMethodList*)(THIS);
}

RogueOptionalInteger RogueMethodList__locate__Method( RogueMethodList* THIS, RogueClassMethod* value_0 )
{
  {
    RogueMethodList* _auto_553_1 = (THIS);
    RogueInteger i_2 = (0);
    for (;i_2 < _auto_553_1->count;++i_2)
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)value_0), ((RogueObject*)(((RogueClassMethod*)(THIS->data->objects[i_2])))) ))))
      {
        return (RogueOptionalInteger)(RogueOptionalInteger( i_2 ));
      }
    }
  }
  return (RogueOptionalInteger)(RogueOptionalInteger());
}

RogueMethodList* RogueMethodList__reserve__Integer( RogueMethodList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassMethod*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueMethodList__capacity( THIS ))) + ((RogueMethodList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassMethod*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueMethodList*)(THIS);
}

RogueClassMethod* RogueMethodList__remove__Method( RogueMethodList* THIS, RogueClassMethod* value_0 )
{
  RogueOptionalInteger index_1 = (((RogueMethodList__locate__Method( THIS, value_0 ))));
  if (index_1.exists)
  {
    return (RogueClassMethod*)(((RogueMethodList__remove_at__Integer( THIS, index_1.value ))));
  }
  else
  {
    RogueClassMethod* zero_value_2 = 0;
    return (RogueClassMethod*)(zero_value_2);
  }
}

RogueClassMethod* RogueMethodList__remove_at__Integer( RogueMethodList* THIS, RogueInteger index_0 )
{
  RogueClassMethod* result_1 = (((RogueClassMethod*)(THIS->data->objects[index_0])));
  THIS->data->set(index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  RogueClassMethod* zero_value_2 = 0;
  THIS->data->objects[THIS->count] = zero_value_2;
  --THIS->count;
  return (RogueClassMethod*)(result_1);
}

RogueString* RogueMethodArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[591]);
}

RogueString* RogueCPPWriter__type_name( RogueClassCPPWriter* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[542]);
}

RogueClassCPPWriter* RogueCPPWriter__init__String( RogueClassCPPWriter* THIS, RogueString* _auto_118_0 )
{
  THIS->filepath = _auto_118_0;
  return (RogueClassCPPWriter*)(THIS);
}

void RogueCPPWriter__close( RogueClassCPPWriter* THIS )
{
  RogueFile__save__String_String( ((RogueFile__init__String( ((RogueClassFile*)Rogue_program.type_File->create_and_init_object()), THIS->filepath )))->filepath, ((RogueStringBuilder__to_String( THIS->buffer ))) );
}

void RogueCPPWriter__print_indent( RogueClassCPPWriter* THIS )
{
  if (THIS->needs_indent)
  {
    THIS->needs_indent = false;
    {
      RogueInteger _auto_116_0 = (1);
      RogueInteger _auto_117_1 = (THIS->indent);
      for (;_auto_116_0 <= _auto_117_1;++_auto_116_0)
      {
        RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)' ' );
      }
    }
  }
}

RogueClassCPPWriter* RogueCPPWriter__print__Long( RogueClassCPPWriter* THIS, RogueLong value_0 )
{
  RogueCPPWriter__print_indent( THIS );
  RogueStringBuilder__print__Long( THIS->buffer, value_0 );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print__Integer( RogueClassCPPWriter* THIS, RogueInteger value_0 )
{
  RogueCPPWriter__print_indent( THIS );
  RogueStringBuilder__print__Integer( THIS->buffer, value_0 );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print__Real( RogueClassCPPWriter* THIS, RogueReal value_0 )
{
  RogueCPPWriter__print_indent( THIS );
  RogueStringBuilder__print__Real( THIS->buffer, value_0 );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print__String( RogueClassCPPWriter* THIS, RogueString* value_0 )
{
  RogueLogical needs_newline_1 = (false);
  if (((RogueString__contains__String( value_0, ((RogueCharacter__to_String( (RogueCharacter)10 ))) ))))
  {
    {
      RogueClassLineReader* _auto_555_2 = (((RogueLineReader__init__String( ((RogueClassLineReader*)Rogue_program.type_LineReader->create_and_init_object()), value_0 ))));
      while (((RogueLineReader__has_another( _auto_555_2 ))))
      {
        RogueString* line_3 = (((RogueLineReader__read( _auto_555_2 ))));
        if (needs_newline_1)
        {
          RogueCPPWriter__println( THIS );
        }
        RogueCPPWriter__print_indent( THIS );
        RogueStringBuilder__print__String( THIS->buffer, line_3 );
        needs_newline_1 = ((RogueLogical)true);
      }
    }
  }
  else
  {
    RogueCPPWriter__print_indent( THIS );
    RogueStringBuilder__print__String( THIS->buffer, value_0 );
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_code__String( RogueClassCPPWriter* THIS, RogueString* code_0 )
{
  {
    RogueClassLineReader* _auto_556_2 = (((RogueLineReader__init__String( ((RogueClassLineReader*)Rogue_program.type_LineReader->create_and_init_object()), code_0 ))));
    while (((RogueLineReader__has_another( _auto_556_2 ))))
    {
      RogueString* line_3 = (((RogueLineReader__read( _auto_556_2 ))));
      RogueInteger original_indent_1 = (THIS->indent);
      if (((RogueString__begins_with__Character( line_3, (RogueCharacter)'#' ))))
      {
        THIS->indent = 0;
      }
      RogueCPPWriter__println__String( THIS, line_3 );
      THIS->indent = original_indent_1;
    }
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__println( RogueClassCPPWriter* THIS )
{
  RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)10 );
  THIS->needs_indent = true;
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__println__String( RogueClassCPPWriter* THIS, RogueString* value_0 )
{
  RogueCPPWriter__print__String( THIS, value_0 );
  RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)10 );
  THIS->needs_indent = true;
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print__Type( RogueClassCPPWriter* THIS, RogueClassType* type_0 )
{
  if (((!!(type_0) && type_0->is_optional) && ((RogueType__is_reference( type_0->_element_type )))))
  {
    return (RogueClassCPPWriter*)(((RogueCPPWriter__print__Type( THIS, type_0->_element_type ))));
  }
  else
  {
    RogueCPPWriter__print_type_name__Type( THIS, type_0 );
    if ((!!(type_0) && ((RogueType__is_reference( ((Rogue_Type__compile_type( type_0 ))) )))))
    {
      RogueStringBuilder__print__String( THIS->buffer, Rogue_program.literal_strings[191] );
    }
    return (RogueClassCPPWriter*)(THIS);
  }
}

RogueClassCPPWriter* RogueCPPWriter__print_cast__Type_Type( RogueClassCPPWriter* THIS, RogueClassType* from_type_0, RogueClassType* to_type_1 )
{
  if (from_type_0 == to_type_1)
  {
    return (RogueClassCPPWriter*)(THIS);
  }
  return (RogueClassCPPWriter*)(((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( THIS, Rogue_program.literal_strings[176] ))), to_type_1 ))), Rogue_program.literal_strings[102] ))));
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_open_cast__Type_Type( RogueClassCPPWriter* THIS, RogueClassType* from_type_0, RogueClassType* to_type_1 )
{
  if (from_type_0 == to_type_1)
  {
    return (RogueClassCPPWriter*)(THIS);
  }
  RogueCPPWriter__print__String( THIS, Rogue_program.literal_strings[176] );
  return (RogueClassCPPWriter*)(((RogueCPPWriter__print_cast__Type_Type( THIS, from_type_0, to_type_1 ))));
}

RogueClassCPPWriter* RogueCPPWriter__print_close_cast__Type_Type( RogueClassCPPWriter* THIS, RogueClassType* from_type_0, RogueClassType* to_type_1 )
{
  if (from_type_0 == to_type_1)
  {
    return (RogueClassCPPWriter*)(THIS);
  }
  RogueCPPWriter__print__String( THIS, Rogue_program.literal_strings[102] );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_cast__Type_Type_Cmd( RogueClassCPPWriter* THIS, RogueClassType* from_type_0, RogueClassType* to_type_1, RogueClassCmd* cmd_2 )
{
  if (from_type_0 == to_type_1)
  {
    call_ROGUEM52( 29, (RogueClassCmd*)(cmd_2), THIS, false );
  }
  else
  {
    RogueCPPWriter__print__String( THIS, Rogue_program.literal_strings[176] );
    RogueCPPWriter__print_cast__Type_Type( THIS, from_type_0, to_type_1 );
    call_ROGUEM52( 29, (RogueClassCmd*)(cmd_2), THIS, false );
    RogueCPPWriter__print__String( THIS, Rogue_program.literal_strings[102] );
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_access_operator__Type( RogueClassCPPWriter* THIS, RogueClassType* type_0 )
{
  if (((RogueType__is_reference( type_0 ))))
  {
    return (RogueClassCPPWriter*)(((RogueCPPWriter__print__String( THIS, Rogue_program.literal_strings[152] ))));
  }
  else
  {
    return (RogueClassCPPWriter*)(((RogueCPPWriter__print__String( THIS, Rogue_program.literal_strings[47] ))));
  }
}

RogueClassCPPWriter* RogueCPPWriter__print_type_name__Type( RogueClassCPPWriter* THIS, RogueClassType* type_0 )
{
  RogueCPPWriter__print_indent( THIS );
  if (!!(type_0))
  {
    RogueStringBuilder__print__String( THIS->buffer, ((Rogue_Type__compile_type( type_0 )))->cpp_class_name );
  }
  else
  {
    RogueStringBuilder__print__String( THIS->buffer, Rogue_program.literal_strings[397] );
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_type_info__Type( RogueClassCPPWriter* THIS, RogueClassType* type_0 )
{
  type_0 = ((RogueClassType*)((Rogue_Type__compile_type( type_0 ))));
  RogueCPPWriter__print_indent( THIS );
  RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( THIS->buffer, Rogue_program.literal_strings[789] ))), type_0->cpp_name );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_default_value__Type( RogueClassCPPWriter* THIS, RogueClassType* type_0 )
{
  type_0 = ((RogueClassType*)((Rogue_Type__compile_type( type_0 ))));
  if (((type_0->is_optional && ((RogueType__is_reference( type_0->_element_type )))) || !(((RogueType__is_compound( type_0 ))))))
  {
    RogueStringBuilder__print__String( THIS->buffer, Rogue_program.literal_strings[404] );
  }
  else
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( THIS, type_0 ))), Rogue_program.literal_strings[254] );
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print__Character_Logical( RogueClassCPPWriter* THIS, RogueCharacter ch_0, RogueLogical in_string_1 )
{
  if (((RogueInteger)(ch_0)) < 128)
  {
    if ((((RogueInteger)(ch_0)) >= 32 && ((RogueInteger)(ch_0)) <= 126))
    {
      switch (((RogueInteger)(ch_0)))
      {
        case (RogueCharacter)'"':
        {
          if (in_string_1)
          {
            RogueCPPWriter__print__String( THIS, Rogue_program.literal_strings[505] );
          }
          else
          {
            RogueCPPWriter__print__String( THIS, Rogue_program.literal_strings[504] );
          }
          break;
        }
        case (RogueCharacter)'\'':
        {
          if (in_string_1)
          {
            RogueCPPWriter__print__String( THIS, Rogue_program.literal_strings[46] );
          }
          else
          {
            RogueCPPWriter__print__String( THIS, Rogue_program.literal_strings[506] );
          }
          break;
        }
        case (RogueCharacter)'\\':
        {
          RogueCPPWriter__print__String( THIS, Rogue_program.literal_strings[507] );
          break;
        }
        default:
        {
          RogueCPPWriter__print__String( THIS, ((RogueString__operatorPLUS__Character( Rogue_program.literal_strings[0], ch_0 ))) );
        }
      }
    }
    else
    {
      switch (((RogueInteger)(ch_0)))
      {
        case 10:
        {
          RogueCPPWriter__print__String( THIS, Rogue_program.literal_strings[508] );
          break;
        }
        default:
        {
          RogueCPPWriter__print__String( THIS, Rogue_program.literal_strings[154] );
          RogueCPPWriter__print__String( THIS, ((RogueString__operatorPLUS__Integer( Rogue_program.literal_strings[0], (((RogueInteger)(ch_0)) / 64) ))) );
          RogueCPPWriter__print__String( THIS, ((RogueString__operatorPLUS__Integer( Rogue_program.literal_strings[0], ((((RogueInteger)(ch_0)) & 63) / 8) ))) );
          RogueCPPWriter__print__String( THIS, ((RogueString__operatorPLUS__Integer( Rogue_program.literal_strings[0], (((RogueInteger)(ch_0)) & 7) ))) );
        }
      }
    }
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_string_utf8__String( RogueClassCPPWriter* THIS, RogueString* st_0 )
{
  if (st_0 == NULL)
  {
    RogueCPPWriter__print__String( THIS, Rogue_program.literal_strings[404] );
    return (RogueClassCPPWriter*)(THIS);
  }
  RogueCPPWriter__print__String( THIS, Rogue_program.literal_strings[504] );
  {
    RogueString* _auto_557_1 = (st_0);
    RogueInteger _auto_558_2 = (0);
    for (;_auto_558_2 < _auto_557_1->count;++_auto_558_2)
    {
      RogueCharacter ch_3 = (_auto_557_1->characters[_auto_558_2]);
      RogueCPPWriter__print__Character_Logical( THIS, ch_3, true );
    }
  }
  RogueCPPWriter__print__String( THIS, Rogue_program.literal_strings[504] );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__init_object( RogueClassCPPWriter* THIS )
{
  THIS->buffer = ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) )));
  THIS->indent = 0;
  THIS->needs_indent = true;
  THIS->temp_buffer = ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) )));
  return (RogueClassCPPWriter*)(THIS);
}

RogueString* RogueString_MethodTable__to_String( RogueClassString_MethodTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_MethodTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))) ))) ))));
}

RogueString* RogueString_MethodTable__type_name( RogueClassString_MethodTable* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[543]);
}

RogueClassString_MethodTable* RogueString_MethodTable__init( RogueClassString_MethodTable* THIS )
{
  RogueString_MethodTable__init__Integer( THIS, 16 );
  return (RogueClassString_MethodTable*)(THIS);
}

RogueClassString_MethodTable* RogueString_MethodTable__init__Integer( RogueClassString_MethodTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_MethodTableEntryList__init__Integer_String_MethodTableEntry( ((RogueTableEntry_of_String_MethodList*)Rogue_program.type_TableEntry_of_String_MethodList->create_and_init_object()), bin_count_0, ((RogueClassString_MethodTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  return (RogueClassString_MethodTable*)(THIS);
}

void RogueString_MethodTable__clear( RogueClassString_MethodTable* THIS )
{
  {
    RogueTableEntry_of_String_MethodList* _auto_562_0 = (THIS->bins);
    RogueInteger i_1 = (0);
    for (;i_1 < _auto_562_0->count;++i_1)
    {
      THIS->bins->data->objects[i_1] = ((RogueClassString_MethodTableEntry*)(NULL));
    }
  }
  RogueStringList__clear( THIS->keys );
}

RogueClassString_MethodTableEntry* RogueString_MethodTable__find__String( RogueClassString_MethodTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_MethodTableEntry* entry_2 = (((RogueClassString_MethodTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_MethodTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_MethodTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_MethodTableEntry*)(((RogueClassString_MethodTableEntry*)(NULL)));
}

RogueClassMethod* RogueString_MethodTable__get__String( RogueClassString_MethodTable* THIS, RogueString* key_0 )
{
  RogueClassString_MethodTableEntry* entry_1 = (((RogueString_MethodTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassMethod*)(entry_1->value);
  }
  else
  {
    RogueClassMethod* default_value_2 = 0;
    return (RogueClassMethod*)(default_value_2);
  }
}

void RogueString_MethodTable__set__String_Method( RogueClassString_MethodTable* THIS, RogueString* key_0, RogueClassMethod* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_MethodTableEntry* entry_4 = (((RogueClassString_MethodTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_MethodTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_MethodTableEntry*)((RogueString_MethodTableEntry__init__String_Method_Integer( ((RogueClassString_MethodTableEntry*)Rogue_program.type_String_MethodTableEntry->create_and_init_object()), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_MethodTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_MethodTable__print_to__StringBuilder( RogueClassString_MethodTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_MethodTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_MethodTable* RogueString_MethodTable__init_object( RogueClassString_MethodTable* THIS )
{
  return (RogueClassString_MethodTable*)(THIS);
}

RogueString* RogueLocalList__to_String( RogueLocalList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueLocalList* _auto_563_2 = (THIS);
    RogueInteger _auto_564_3 = (0);
    for (;_auto_564_3 < _auto_563_2->count;++_auto_564_3)
    {
      RogueClassLocal* value_4 = (((RogueClassLocal*)(_auto_563_2->data->objects[_auto_564_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueLocalList__type_name( RogueLocalList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[922]);
}

RogueLocalList* RogueLocalList__init_object( RogueLocalList* THIS )
{
  return (RogueLocalList*)(THIS);
}

RogueLocalList* RogueLocalList__init( RogueLocalList* THIS )
{
  RogueLocalList__init__Integer( THIS, 10 );
  return (RogueLocalList*)(THIS);
}

RogueLocalList* RogueLocalList__init__Integer( RogueLocalList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassLocal*), true );
  return (RogueLocalList*)(THIS);
}

RogueLocalList* RogueLocalList__add__Local( RogueLocalList* THIS, RogueClassLocal* value_0 )
{
  ((RogueLocalList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueLocalList*)(THIS);
}

RogueInteger RogueLocalList__capacity( RogueLocalList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueLocalList* RogueLocalList__clear( RogueLocalList* THIS )
{
  THIS->count = 0;
  return (RogueLocalList*)(THIS);
}

RogueLocalList* RogueLocalList__reserve__Integer( RogueLocalList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassLocal*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueLocalList__capacity( THIS ))) + ((RogueLocalList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassLocal*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueLocalList*)(THIS);
}

RogueClassLocal* RogueLocalList__remove_at__Integer( RogueLocalList* THIS, RogueInteger index_0 )
{
  RogueClassLocal* result_1 = (((RogueClassLocal*)(THIS->data->objects[index_0])));
  THIS->data->set(index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  RogueClassLocal* zero_value_2 = 0;
  THIS->data->objects[THIS->count] = zero_value_2;
  --THIS->count;
  return (RogueClassLocal*)(result_1);
}

RogueClassLocal* RogueLocalList__remove_last( RogueLocalList* THIS )
{
  return (RogueClassLocal*)(((RogueLocalList__remove_at__Integer( THIS, (THIS->count - 1) ))));
}

RogueString* RogueLocal__type_name( RogueClassLocal* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[544]);
}

RogueClassLocal* RogueLocal__init__Token_String( RogueClassLocal* THIS, RogueClassToken* _auto_141_0, RogueString* _auto_142_1 )
{
  THIS->name = _auto_142_1;
  THIS->t = _auto_141_0;
  return (RogueClassLocal*)(THIS);
}

RogueClassLocal* RogueLocal__clone__CloneArgs( RogueClassLocal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassLocal* result_1 = (((RogueLocal__init__Token_String( ((RogueClassLocal*)Rogue_program.type_Local->create_and_init_object()), THIS->t, THIS->name ))));
  result_1->_cpp_name = THIS->_cpp_name;
  result_1->_type = THIS->_type;
  result_1->index = THIS->index;
  if (!!(THIS->initial_value))
  {
    result_1->initial_value = (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->initial_value), clone_args_0 ));
  }
  return (RogueClassLocal*)(result_1);
}

RogueString* RogueLocal__cpp_name( RogueClassLocal* THIS )
{
  if (!(!!(THIS->_cpp_name)))
  {
    THIS->_cpp_name = ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ((RogueString__operatorPLUS__Integer( ((RogueString__operatorPLUS__String( THIS->name, Rogue_program.literal_strings[352] ))), THIS->index ))) )));
  }
  return (RogueString*)(THIS->_cpp_name);
}

RogueClassLocal* RogueLocal__init_object( RogueClassLocal* THIS )
{
  return (RogueClassLocal*)(THIS);
}

RogueString* RogueLocalArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[592]);
}

RogueString* RogueByteList__to_String( RogueByteList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueByteList* _auto_573_2 = (THIS);
    RogueInteger _auto_574_3 = (0);
    for (;_auto_574_3 < _auto_573_2->count;++_auto_574_3)
    {
      RogueByte value_4 = (_auto_573_2->data->bytes[_auto_574_3]);
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Integer( buffer_0, ((RogueInteger)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueByteList__type_name( RogueByteList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[923]);
}

RogueByteList* RogueByteList__init_object( RogueByteList* THIS )
{
  return (RogueByteList*)(THIS);
}

RogueByteList* RogueByteList__init( RogueByteList* THIS )
{
  RogueByteList__init__Integer( THIS, 10 );
  return (RogueByteList*)(THIS);
}

RogueByteList* RogueByteList__init__Integer( RogueByteList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueByte) );
  return (RogueByteList*)(THIS);
}

RogueByteList* RogueByteList__add__Byte( RogueByteList* THIS, RogueByte value_0 )
{
  ((RogueByteList__reserve__Integer( THIS, 1 )))->data->bytes[THIS->count] = value_0;
  ++THIS->count;
  return (RogueByteList*)(THIS);
}

RogueInteger RogueByteList__capacity( RogueByteList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueByteList* RogueByteList__clear( RogueByteList* THIS )
{
  THIS->count = 0;
  return (RogueByteList*)(THIS);
}

RogueByteList* RogueByteList__insert__Byte_Integer( RogueByteList* THIS, RogueByte value_0, RogueInteger before_index_1 )
{
  if (before_index_1 < 0)
  {
    before_index_1 = ((RogueInteger)0);
  }
  if (before_index_1 >= THIS->count)
  {
    return (RogueByteList*)(((RogueByteList__add__Byte( THIS, value_0 ))));
  }
  else
  {
    RogueByteList__add__Byte( THIS, THIS->data->bytes[0] );
    THIS->data->set((before_index_1 + 1),((RogueArray*)(THIS->data)),before_index_1,(THIS->count - 2));
    THIS->data->bytes[before_index_1] = value_0;
  }
  return (RogueByteList*)(THIS);
}

RogueByteList* RogueByteList__reserve__Integer( RogueByteList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueByte) );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueByteList__capacity( THIS ))) + ((RogueByteList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueByte) ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueByteList*)(THIS);
}

RogueByte RogueByteList__remove_at__Integer( RogueByteList* THIS, RogueInteger index_0 )
{
  RogueByte result_1 = (THIS->data->bytes[index_0]);
  THIS->data->set(index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  RogueByte zero_value_2 = 0;
  THIS->data->bytes[THIS->count] = zero_value_2;
  --THIS->count;
  return (RogueByte)(result_1);
}

RogueByte RogueByteList__remove_last( RogueByteList* THIS )
{
  return (RogueByte)(((RogueByteList__remove_at__Integer( THIS, (THIS->count - 1) ))));
}

RogueByteList* RogueByteList__reverse( RogueByteList* THIS )
{
  return (RogueByteList*)(((RogueByteList__reverse__Integer_Integer( THIS, 0, (THIS->count - 1) ))));
}

RogueByteList* RogueByteList__reverse__Integer_Integer( RogueByteList* THIS, RogueInteger i1_0, RogueInteger i2_1 )
{
  if (i1_0 < 0)
  {
    i1_0 = ((RogueInteger)0);
  }
  if (i2_1 >= THIS->count)
  {
    i2_1 = ((RogueInteger)(THIS->count - 1));
  }
  RogueArray* _data_2 = (THIS->data);
  while (i1_0 < i2_1)
  {
    RogueByte temp_3 = (_data_2->bytes[i1_0]);
    _data_2->bytes[i1_0] = _data_2->bytes[i2_1];
    _data_2->bytes[i2_1] = temp_3;
    ++i1_0;
    --i2_1;
  }
  return (RogueByteList*)(THIS);
}

RogueString* RogueMath__type_name( RogueClassMath* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[545]);
}

RogueClassMath* RogueMath__init_object( RogueClassMath* THIS )
{
  return (RogueClassMath*)(THIS);
}

RogueString* RogueByteArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[593]);
}

RogueString* RogueCharacterArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[594]);
}

RogueString* RogueSystem__type_name( RogueClassSystem* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[546]);
}

RogueClassSystem* RogueSystem__init_object( RogueClassSystem* THIS )
{
  return (RogueClassSystem*)(THIS);
}

RogueString* RogueTaskManager__type_name( RogueClassTaskManager* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[547]);
}

RogueClassTaskManager* RogueTaskManager__init_object( RogueClassTaskManager* THIS )
{
  THIS->active_list = ((RogueTaskList__init( ((RogueTaskList*)Rogue_program.type_TaskList->create_and_init_object()) )));
  THIS->update_list = ((RogueTaskList__init( ((RogueTaskList*)Rogue_program.type_TaskList->create_and_init_object()) )));
  return (RogueClassTaskManager*)(THIS);
}

RogueString* RogueTask__type_name( RogueClassTask* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[329]);
}

RogueClassTask* RogueTask__init_object( RogueClassTask* THIS )
{
  return (RogueClassTask*)(THIS);
}

RogueString* RogueTaskList__to_String( RogueTaskList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueTaskList* _auto_583_2 = (THIS);
    RogueInteger _auto_584_3 = (0);
    for (;_auto_584_3 < _auto_583_2->count;++_auto_584_3)
    {
      RogueClassTask* value_4 = (((RogueClassTask*)(_auto_583_2->data->objects[_auto_584_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueTaskList__type_name( RogueTaskList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[924]);
}

RogueTaskList* RogueTaskList__init_object( RogueTaskList* THIS )
{
  return (RogueTaskList*)(THIS);
}

RogueTaskList* RogueTaskList__init( RogueTaskList* THIS )
{
  RogueTaskList__init__Integer( THIS, 10 );
  return (RogueTaskList*)(THIS);
}

RogueTaskList* RogueTaskList__init__Integer( RogueTaskList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassTask*), true );
  return (RogueTaskList*)(THIS);
}

RogueString* RogueTaskArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[595]);
}

RogueString* RogueString_LogicalTable__to_String( RogueClassString_LogicalTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_LogicalTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))) ))) ))));
}

RogueString* RogueString_LogicalTable__type_name( RogueClassString_LogicalTable* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[548]);
}

RogueClassString_LogicalTable* RogueString_LogicalTable__init( RogueClassString_LogicalTable* THIS )
{
  RogueString_LogicalTable__init__Integer( THIS, 16 );
  return (RogueClassString_LogicalTable*)(THIS);
}

RogueClassString_LogicalTable* RogueString_LogicalTable__init__Integer( RogueClassString_LogicalTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_LogicalTableEntryList__init__Integer_String_LogicalTableEntry( ((RogueTableEntry_of_String_LogicalList*)Rogue_program.type_TableEntry_of_String_LogicalList->create_and_init_object()), bin_count_0, ((RogueClassString_LogicalTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  return (RogueClassString_LogicalTable*)(THIS);
}

RogueLogical RogueString_LogicalTable__contains__String( RogueClassString_LogicalTable* THIS, RogueString* key_0 )
{
  return (RogueLogical)(!!(((RogueString_LogicalTable__find__String( THIS, key_0 )))));
}

RogueClassString_LogicalTableEntry* RogueString_LogicalTable__find__String( RogueClassString_LogicalTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_LogicalTableEntry* entry_2 = (((RogueClassString_LogicalTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_LogicalTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_LogicalTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_LogicalTableEntry*)(((RogueClassString_LogicalTableEntry*)(NULL)));
}

RogueLogical RogueString_LogicalTable__get__String( RogueClassString_LogicalTable* THIS, RogueString* key_0 )
{
  RogueClassString_LogicalTableEntry* entry_1 = (((RogueString_LogicalTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueLogical)(entry_1->value);
  }
  else
  {
    RogueLogical default_value_2 = 0;
    return (RogueLogical)(default_value_2);
  }
}

void RogueString_LogicalTable__set__String_Logical( RogueClassString_LogicalTable* THIS, RogueString* key_0, RogueLogical value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_LogicalTableEntry* entry_4 = (((RogueClassString_LogicalTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_LogicalTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_LogicalTableEntry*)((RogueString_LogicalTableEntry__init__String_Logical_Integer( ((RogueClassString_LogicalTableEntry*)Rogue_program.type_String_LogicalTableEntry->create_and_init_object()), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_LogicalTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_LogicalTable__print_to__StringBuilder( RogueClassString_LogicalTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Logical( buffer_0, ((RogueString_LogicalTable__get__String( THIS, key_2 ))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_LogicalTable* RogueString_LogicalTable__init_object( RogueClassString_LogicalTable* THIS )
{
  return (RogueClassString_LogicalTable*)(THIS);
}

RogueString* RogueFile__to_String( RogueClassFile* THIS )
{
  return (RogueString*)(THIS->filepath);
}

RogueString* RogueFile__type_name( RogueClassFile* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[549]);
}

RogueClassFile* RogueFile__init__String( RogueClassFile* THIS, RogueString* _auto_202_0 )
{
  THIS->filepath = _auto_202_0;
  return (RogueClassFile*)(THIS);
}

RogueString* RogueFile__filename( RogueClassFile* THIS )
{
  return (RogueString*)((RogueFile__filename__String( THIS->filepath )));
}

RogueClassFile* RogueFile__init_object( RogueClassFile* THIS )
{
  return (RogueClassFile*)(THIS);
}

RogueString* RogueParser__type_name( RogueClassParser* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[550]);
}

RogueClassParser* RogueParser__init__String( RogueClassParser* THIS, RogueString* filepath_0 )
{
  RogueParser__init__TokenList( THIS, ((RoguePreprocessor__process__TokenList( ((RogueClassPreprocessor*)Rogue_program.type_Preprocessor->create_and_init_object()), ((RogueTokenizer__tokenize__String( ((RogueClassTokenizer*)Rogue_program.type_Tokenizer->create_and_init_object()), filepath_0 ))) ))) );
  return (RogueClassParser*)(THIS);
}

RogueClassParser* RogueParser__init__Token_String_String( RogueClassParser* THIS, RogueClassToken* t_0, RogueString* filepath_1, RogueString* data_2 )
{
  RogueParser__init__TokenList( THIS, ((RoguePreprocessor__process__TokenList( ((RogueClassPreprocessor*)Rogue_program.type_Preprocessor->create_and_init_object()), ((RogueTokenizer__tokenize__Token_String_String( ((RogueClassTokenizer*)Rogue_program.type_Tokenizer->create_and_init_object()), t_0, filepath_1, data_2 ))) ))) );
  return (RogueClassParser*)(THIS);
}

RogueClassParser* RogueParser__init__TokenList( RogueClassParser* THIS, RogueTokenList* tokens_0 )
{
  THIS->reader = ((RogueTokenReader__init__TokenList( ((RogueClassTokenReader*)Rogue_program.type_TokenReader->create_and_init_object()), tokens_0 )));
  return (RogueClassParser*)(THIS);
}

RogueLogical RogueParser__consume__TokenType( RogueClassParser* THIS, RogueClassTokenType* type_0 )
{
  if (!(((RogueTokenReader__next_is__TokenType( THIS->reader, type_0 )))))
  {
    return (RogueLogical)(false);
  }
  RogueTokenReader__read( THIS->reader );
  return (RogueLogical)(true);
}

RogueLogical RogueParser__consume__String( RogueClassParser* THIS, RogueString* identifier_0 )
{
  RogueClassToken* t_1 = (((RogueTokenReader__peek( THIS->reader ))));
  if (t_1->_type != RogueClassTokenType::identifier)
  {
    return (RogueLogical)(false);
  }
  if (((RogueString__operatorLESSTHANGREATERTHAN__String( (call_ROGUEM33( 1, (RogueClassToken*)(t_1) )), identifier_0 ))) != 0)
  {
    return (RogueLogical)(false);
  }
  RogueParser__read( THIS );
  return (RogueLogical)(true);
}

RogueLogical RogueParser__consume_end_commands( RogueClassParser* THIS )
{
  RogueLogical found_0 = (false);
  while ((((RogueParser__consume__TokenType( THIS, RogueClassTokenType::eol ))) || ((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_semicolon )))))
  {
    found_0 = ((RogueLogical)true);
  }
  return (RogueLogical)(found_0);
}

RogueLogical RogueParser__consume_eols( RogueClassParser* THIS )
{
  RogueLogical found_any_0 = (false);
  while (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::eol ))))
  {
    found_any_0 = ((RogueLogical)true);
  }
  return (RogueLogical)(found_any_0);
}

RogueClassRogueError* RogueParser__error__String( RogueClassParser* THIS, RogueString* message_0 )
{
  throw ((RogueToken__error__String( ((RogueTokenReader__peek( THIS->reader ))), message_0 )));
}

void RogueParser__must_consume__TokenType_String( RogueClassParser* THIS, RogueClassTokenType* type_0, RogueString* error_message_1 )
{
  if (((RogueParser__consume__TokenType( THIS, type_0 ))))
  {
    return;
  }
  RogueClassToken* t_2 = (((RogueParser__peek( THIS ))));
  if (!(!!(error_message_1)))
  {
    error_message_1 = ((RogueString*)((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), ((RogueTokenType__quoted_name( type_0 ))) ))), Rogue_program.literal_strings[233] ))), ((RogueToken__quoted_name( t_2 ))) ))), Rogue_program.literal_strings[47] ))) ))));
  }
  throw ((RogueToken__error__String( t_2, error_message_1 )));
}

void RogueParser__must_consume_eols( RogueClassParser* THIS )
{
  RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::eol, ((RogueString*)(NULL)) );
  RogueParser__consume_eols( THIS );
}

RogueClassToken* RogueParser__must_read__TokenType( RogueClassParser* THIS, RogueClassTokenType* type_0 )
{
  RogueClassToken* t_1 = (((RogueTokenReader__peek( THIS->reader ))));
  if (t_1->_type != type_0)
  {
    RogueParser__must_consume__TokenType_String( THIS, type_0, ((RogueString*)(NULL)) );
  }
  return (RogueClassToken*)(((RogueTokenReader__read( THIS->reader ))));
}

RogueLogical RogueParser__next_is__TokenType( RogueClassParser* THIS, RogueClassTokenType* type_0 )
{
  return (RogueLogical)(((RogueTokenReader__next_is__TokenType( THIS->reader, type_0 ))));
}

RogueLogical RogueParser__next_is_end_command( RogueClassParser* THIS )
{
  if (!(((RogueTokenReader__has_another( THIS->reader )))))
  {
    return (RogueLogical)(false);
  }
  RogueClassTokenType* type_0 = (((RogueTokenReader__peek( THIS->reader )))->_type);
  return (RogueLogical)((type_0 == RogueClassTokenType::eol || type_0 == RogueClassTokenType::symbol_semicolon));
}

RogueLogical RogueParser__next_is_statement( RogueClassParser* THIS )
{
  if (!(((RogueTokenReader__has_another( THIS->reader )))))
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(((RogueTokenReader__next_is_statement_token( THIS->reader ))));
}

void RogueParser__parse_elements( RogueClassParser* THIS )
{
  while (((RogueParser__parse_element( THIS ))))
  {
  }
  if (((RogueTokenReader__has_another( THIS->reader ))))
  {
    RogueClassToken* t_0 = (((RogueParser__peek( THIS ))));
    throw ((RogueToken__error__String( t_0, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[279] ))), ((RogueToken__quoted_name( t_0 ))) ))), Rogue_program.literal_strings[47] ))) ))) )));
  }
}

RogueLogical RogueParser__parse_element( RogueClassParser* THIS )
{
  RogueParser__consume_eols( THIS );
  if (!(((RogueTokenReader__has_another( THIS->reader )))))
  {
    return (RogueLogical)(false);
  }
  RogueClassToken* t_0 = (((RogueParser__peek( THIS ))));
  if (t_0->_type == RogueClassTokenType::keyword_class)
  {
    RogueParser__parse_class_template( THIS );
    return (RogueLogical)(true);
  }
  else if (t_0->_type == RogueClassTokenType::keyword_augment)
  {
    RogueParser__parse_augment( THIS );
    return (RogueLogical)(true);
  }
  else if (t_0->_type == RogueClassTokenType::directive_requisite)
  {
    RogueParser__read( THIS );
    RogueLogical first_1 = (true);
    while ((first_1 || ((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_comma )))))
    {
      first_1 = ((RogueLogical)false);
      RogueParser__consume_eols( THIS );
      RogueClassType* type_2 = (((Rogue_Parser__parse_type( THIS ))));
      RogueString* signature_3 = 0;
      if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_dot ))))
      {
        RogueStringBuilder* buffer_4 = (((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))));
        RogueStringBuilder__print__String( buffer_4, ((RogueParser__read_identifier__Logical( THIS, false ))) );
        if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_open_paren ))))
        {
          RogueStringBuilder__print__Character( buffer_4, (RogueCharacter)'(' );
          if (!(((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_close_paren )))))
          {
            RogueLogical first_param_5 = (true);
            while ((first_param_5 || ((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_comma )))))
            {
              if (first_param_5)
              {
                first_param_5 = ((RogueLogical)false);
              }
              else
              {
                RogueStringBuilder__print__Character( buffer_4, (RogueCharacter)',' );
              }
              RogueStringBuilder__print__String( buffer_4, ((Rogue_Parser__parse_possible_type( THIS ))) );
            }
            RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_paren, ((RogueString*)(NULL)) );
          }
          RogueStringBuilder__print__Character( buffer_4, (RogueCharacter)')' );
        }
        signature_3 = ((RogueString*)((RogueStringBuilder__to_String( buffer_4 ))));
      }
      RogueRequisiteItemList__add__RequisiteItem( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->requisite_list, ((RogueRequisiteItem__init__Token_Type_String( ((RogueClassRequisiteItem*)Rogue_program.type_RequisiteItem->create_and_init_object()), t_0, type_2, signature_3 ))) );
      RogueParser__consume_eols( THIS );
    }
    return (RogueLogical)(true);
  }
  else if (((RogueParser__next_is_statement( THIS ))))
  {
    THIS->_this_type = ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ((RogueParser__peek( THIS ))), Rogue_program.literal_strings[35] )));
    if (!(!!(((RogueClassProgram*)ROGUE_SINGLETON(Program))->m_on_launch)))
    {
      ((RogueClassProgram*)ROGUE_SINGLETON(Program))->m_on_launch = ((RogueMethod__init__Token_Type_String( ((RogueClassMethod*)Rogue_program.type_Method->create_and_init_object()), ((RogueParser__peek( THIS ))), THIS->_this_type, Rogue_program.literal_strings[278] )));
      RogueCmdList__add__Cmd( ((RogueCmdList*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->m_on_launch->statements), ((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->m_on_launch, ((RogueParser__peek( THIS ))), Rogue_program.literal_strings[257], false ))))) );
    }
    THIS->this_method = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->m_on_launch;
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, THIS->this_method->statements );
    return (RogueLogical)(true);
  }
  return (RogueLogical)(false);
}

void RogueParser__parse_class_template( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueString* name_1 = (((RogueParser__read_identifier__Logical( THIS, false ))));
  RogueClassTemplate* template_2 = (((RogueTemplate__init__Token_String_Integer( ((RogueClassTemplate*)Rogue_program.type_Template->create_and_init_object()), t_0, name_1, 0 ))));
  RogueParser__parse_template_tokens__Template_TokenType( THIS, template_2, RogueClassTokenType::keyword_endClass );
  switch (((Rogue_Template__element_type( template_2 ))))
  {
    case 3:
    {
      RogueAttributes__add__Integer( template_2->attributes, 16 );
      break;
    }
  }
}

void RogueParser__parse_template_tokens__Template_TokenType( RogueClassParser* THIS, RogueClassTemplate* template_0, RogueClassTokenType* end_type_1 )
{
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_open_specialize ))))
  {
    RogueLogical first_2 = (true);
    while ((first_2 || ((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_comma )))))
    {
      first_2 = ((RogueLogical)false);
      RogueClassToken* t_3 = (((RogueParser__must_read__TokenType( THIS, RogueClassTokenType::placeholder_id ))));
      RogueClassTypeParameter* param_4 = (((RogueTemplate__add_type_parameter__Token_String( template_0, t_3, (call_ROGUEM33( 1, (RogueClassToken*)(t_3) )) ))));
    }
    RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_specialize, ((RogueString*)(NULL)) );
  }
  RogueInteger starting_pos_5 = (THIS->reader->position);
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_open_paren ))))
  {
    RogueParser__consume_eols( THIS );
    if (!(((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_close_paren )))))
    {
      RogueLogical first_6 = (true);
      while ((first_6 || ((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_comma )))))
      {
        first_6 = ((RogueLogical)false);
        RogueParser__consume_eols( THIS );
        RogueParser__read_identifier__Logical( THIS, false );
        RogueParser__consume_eols( THIS );
        if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_equals ))))
        {
          RogueParser__parse_expression( THIS );
        }
        RogueParser__consume_eols( THIS );
        if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_colon ))))
        {
          if (!(((RogueParser__consume__TokenType( THIS, RogueClassTokenType::placeholder_id )))))
          {
            Rogue_Parser__parse_possible_type( THIS );
          }
        }
        RogueParser__consume_eols( THIS );
      }
      RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_paren, ((RogueString*)(NULL)) );
    }
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_colon ))))
  {
    Rogue_Parser__parse_possible_type( THIS );
    while (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_comma ))))
    {
      Rogue_Parser__parse_possible_type( THIS );
    }
  }
  RogueInteger final_pos_7 = (THIS->reader->position);
  THIS->reader->position = starting_pos_5;
  while (THIS->reader->position < final_pos_7)
  {
    RogueTokenList__add__Token( template_0->tokens, ((RogueParser__read( THIS ))) );
  }
  RogueParser__parse_attributes__Attributes( THIS, template_0->attributes );
  RogueTemplateList__add__Template( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->template_list, template_0 );
  RogueString_TemplateTable__set__String_Template( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->template_lookup, template_0->name, template_0 );
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_semicolon ))))
  {
    return;
  }
  while (((RogueTokenReader__has_another( THIS->reader ))))
  {
    RogueClassToken* t_8 = (((RogueTokenReader__read( THIS->reader ))));
    if (t_8->_type == end_type_1)
    {
      return;
    }
    RogueTokenList__add__Token( template_0->tokens, t_8 );
  }
  RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), Rogue_program.literal_strings[273] );
  throw ((RogueTokenReader__error__String( THIS->reader, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), ((RogueTokenType__quoted_name( end_type_1 ))) ))), Rogue_program.literal_strings[274] ))) ))) )));
}

void RogueParser__parse_augment( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueTokenReader__read( THIS->reader ))));
  RogueString* name_1 = (((Rogue_Parser__parse_possible_type( THIS ))));
  if (((RogueString__contains__String( name_1, ((RogueCharacter__to_String( (RogueCharacter)'$' ))) ))))
  {
    RogueString* base_name_2 = (((RogueString__before_first__Character( name_1, (RogueCharacter)'<' ))));
    throw ((RogueToken__error__String( t_0, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[275] ))), base_name_2 ))), Rogue_program.literal_strings[276] ))), base_name_2 ))), Rogue_program.literal_strings[277] ))) ))) )));
  }
  RogueClassAugment* aug_3 = (((RogueAugment__init__Token_String( ((RogueClassAugment*)Rogue_program.type_Augment->create_and_init_object()), t_0, name_1 ))));
  RogueAugmentList* augments_4 = (((RogueString_AugmentListTable__get__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->augment_lookup, name_1 ))));
  if (!(!!(augments_4)))
  {
    augments_4 = ((RogueAugmentList*)((RogueAugmentList__init( ((RogueAugmentList*)Rogue_program.type_AugmentList->create_and_init_object()) ))));
    RogueString_AugmentListTable__set__String_AugmentList( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->augment_lookup, name_1, augments_4 );
  }
  RogueAugmentList__add__Augment( augments_4, aug_3 );
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_semicolon ))))
  {
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_colon ))))
  {
    RogueTypeList__add__Type( aug_3->base_types, ((Rogue_Parser__parse_type( THIS ))) );
    RogueParser__consume_eols( THIS );
    while (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_comma ))))
    {
      RogueParser__consume_eols( THIS );
      RogueTypeList__add__Type( aug_3->base_types, ((Rogue_Parser__parse_type( THIS ))) );
      RogueParser__consume_eols( THIS );
    }
  }
  RogueParser__consume_eols( THIS );
  while ((((RogueTokenReader__has_another( THIS->reader ))) && !(((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::keyword_endAugment ))))))
  {
    RogueTokenList__add__Token( aug_3->tokens, ((RogueTokenReader__read( THIS->reader ))) );
  }
  RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::keyword_endAugment, ((RogueString*)(NULL)) );
}

void RogueParser__parse_attributes__Attributes( RogueClassParser* THIS, RogueClassAttributes* attributes_0 )
{
  if (!(((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_open_bracket )))))
  {
    return;
  }
  while ((((RogueTokenReader__has_another( THIS->reader ))) && !(((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::symbol_close_bracket ))))))
  {
    RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
    if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_native ))))
    {
      RogueAttributes__add__Integer( attributes_0, 32 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_program.literal_strings[263] ))))
    {
      RogueParser__ensure_unspecialized_element_type__Token_Attributes( THIS, t_1, attributes_0 );
      RogueAttributes__add__Integer( attributes_0, 2 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_program.literal_strings[267] ))))
    {
      RogueParser__ensure_unspecialized_element_type__Token_Attributes( THIS, t_1, attributes_0 );
      RogueAttributes__add__Integer( attributes_0, 3 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_program.literal_strings[268] ))))
    {
      RogueAttributes__add__Integer( attributes_0, 16 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_program.literal_strings[269] ))))
    {
      RogueAttributes__add__Integer( attributes_0, 256 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_program.literal_strings[266] ))))
    {
      RogueParser__ensure_unspecialized_element_type__Token_Attributes( THIS, t_1, attributes_0 );
      RogueAttributes__add__Integer( attributes_0, 1 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_program.literal_strings[221] ))))
    {
      RogueAttributes__add__Integer( attributes_0, 32768 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_program.literal_strings[270] ))))
    {
      RogueAttributes__add__Integer( attributes_0, 1024 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_program.literal_strings[271] ))))
    {
      RogueAttributes__add__Integer( attributes_0, 65536 );
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::identifier ))))
    {
      RogueAttributes__add__String( attributes_0, (call_ROGUEM33( 1, (RogueClassToken*)(((RogueParser__read( THIS )))) )) );
    }
    else
    {
      throw ((RogueToken__error__String( ((RogueParser__peek( THIS ))), ((RogueString__operatorPLUS__Object( Rogue_program.literal_strings[272], ((RogueObject*)(((RogueParser__peek( THIS ))))) ))) )));
    }
  }
  RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_bracket, ((RogueString*)(NULL)) );
}

void RogueParser__ensure_unspecialized_element_type__Token_Attributes( RogueClassParser* THIS, RogueClassToken* t_0, RogueClassAttributes* attributes_1 )
{
  if (!!((attributes_1->flags & 7)))
  {
    throw ((RogueToken__error__String( t_0, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[264] ))), (call_ROGUEM33( 1, (RogueClassToken*)(t_0) )) ))), Rogue_program.literal_strings[265] ))), ((RogueAttributes__element_type_name( attributes_1 ))) ))), Rogue_program.literal_strings[13] ))) ))) )));
  }
}

void RogueParser__parse_type_def__Type( RogueClassParser* THIS, RogueClassType* _auto_208_0 )
{
  THIS->_this_type = _auto_208_0;
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_open_paren ))))
  {
    RogueParser__consume_eols( THIS );
    if (!(((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_close_paren )))))
    {
      RogueClassMethod* m_2 = 0;
      if (((RogueType__is_compound( THIS->_this_type ))))
      {
        m_2 = ((RogueClassMethod*)((RogueType__add_routine__Token_String( THIS->_this_type, t_1, Rogue_program.literal_strings[284] ))));
        RogueAttributes__add__Integer( m_2->attributes, 16384 );
      }
      else
      {
        m_2 = ((RogueClassMethod*)((RogueType__add_method__Token_String( THIS->_this_type, t_1, Rogue_program.literal_strings[285] ))));
      }
      m_2->_return_type = THIS->_this_type;
      RogueLogical first_3 = (true);
      while ((first_3 || ((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_comma )))))
      {
        first_3 = ((RogueLogical)false);
        t_1 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
        RogueString* p_name_4 = (((RogueParser__read_identifier__Logical( THIS, false ))));
        RogueClassLocal* param_5 = (((RogueMethod__add_parameter__Token_String_Type( m_2, t_1, p_name_4, ((RogueClassType*)(NULL)) ))));
        RogueParser__consume_eols( THIS );
        if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_equals ))))
        {
          param_5->initial_value = ((RogueParser__parse_expression( THIS )));
        }
        RogueParser__consume_eols( THIS );
        if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_colon ))))
        {
          RogueParser__consume_eols( THIS );
          RogueClassType* p_type_6 = (((Rogue_Parser__parse_type( THIS ))));
          if (((RogueType__is_compound( THIS->_this_type ))))
          {
            param_5->_type = p_type_6;
          }
          RogueType__add_property__Token_String_Type_Cmd( THIS->_this_type, t_1, p_name_4, p_type_6, ((RogueClassCmd*)(NULL)) );
        }
        RogueParser__consume_eols( THIS );
      }
      RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_paren, ((RogueString*)(NULL)) );
    }
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_colon ))))
  {
    RogueLogical first_7 = (true);
    while ((first_7 || ((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_comma )))))
    {
      first_7 = ((RogueLogical)false);
      RogueParser__consume_eols( THIS );
      RogueTypeList__add__Type( THIS->_this_type->base_types, ((Rogue_Parser__parse_type( THIS ))) );
      RogueParser__consume_eols( THIS );
    }
  }
  while (((RogueParser__parse_section( THIS ))))
  {
  }
  if (((RogueTokenReader__has_another( THIS->reader ))))
  {
    throw ((RogueToken__error__String( ((RogueParser__peek( THIS ))), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[279] ))), ((RogueToken__quoted_name( ((RogueParser__peek( THIS ))) ))) ))), Rogue_program.literal_strings[47] ))) ))) )));
  }
}

RogueLogical RogueParser__parse_section( RogueClassParser* THIS )
{
  RogueParser__consume_eols( THIS );
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::begin_augment_tokens ))))
  {
    THIS->parsing_augment = true;
    RogueParser__consume_eols( THIS );
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_ENUMERATE ))))
  {
    while (((RogueParser__parse_definitions__Logical( THIS, true ))))
    {
    }
    return (RogueLogical)(true);
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_DEFINITIONS ))))
  {
    while (((RogueParser__parse_definitions__Logical( THIS, false ))))
    {
    }
    return (RogueLogical)(true);
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_SETTINGS ))))
  {
    while (((RogueParser__parse_properties__Logical( THIS, true ))))
    {
    }
    return (RogueLogical)(true);
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_ROUTINES ))))
  {
    while (((RogueParser__parse_method__Logical( THIS, true ))))
    {
    }
    return (RogueLogical)(true);
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_PROPERTIES ))))
  {
    while (((RogueParser__parse_properties__Logical( THIS, false ))))
    {
    }
    return (RogueLogical)(true);
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_METHODS ))))
  {
    while (((RogueParser__parse_method__Logical( THIS, false ))))
    {
    }
    return (RogueLogical)(true);
  }
  return (RogueLogical)(false);
}

RogueLogical RogueParser__parse_definitions__Logical( RogueClassParser* THIS, RogueLogical enumerate_0 )
{
  RogueParser__consume_eols( THIS );
  if (!(((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::identifier )))))
  {
    return (RogueLogical)(false);
  }
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  RogueString* name_2 = (((RogueParser__read_identifier__Logical( THIS, false ))));
  RogueClassCmd* value_3 = 0;
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_equals ))))
  {
    RogueParser__consume_eols( THIS );
    value_3 = ((RogueClassCmd*)((RogueParser__parse_expression( THIS ))));
  }
  else if (!(((RogueParser__consume_eols( THIS )))))
  {
    value_3 = ((RogueClassCmd*)((RogueParser__parse_expression( THIS ))));
  }
  if ((!(enumerate_0) && !(!!(value_3))))
  {
    throw ((RogueToken__error__String( ((RogueParser__peek( THIS ))), Rogue_program.literal_strings[286] )));
  }
  if (!!(value_3))
  {
    if (RogueObject::instance_of(value_3,Rogue_program.type_CmdLiteralInteger))
    {
      THIS->_this_type->prev_enum_cmd = ((RogueClassCmd*)(NULL));
      THIS->_this_type->next_enum_offset = (((RogueClassCmdLiteralInteger*)(RogueObject::as(value_3,Rogue_program.type_CmdLiteralInteger)))->value + 1);
    }
    else
    {
      THIS->_this_type->prev_enum_cmd = value_3;
      THIS->_this_type->next_enum_offset = 1;
    }
  }
  else
  {
    if (!!(THIS->_this_type->prev_enum_cmd))
    {
      value_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdAdd*)Rogue_program.type_CmdAdd->create_and_init_object())), t_1, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->_this_type->prev_enum_cmd), ((RogueClassCloneArgs*)(NULL)) )), ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), t_1, THIS->_this_type->next_enum_offset ))))) ))))));
    }
    else
    {
      value_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), t_1, THIS->_this_type->next_enum_offset ))))));
    }
    ++THIS->_this_type->next_enum_offset;
  }
  RogueString_CmdTable__set__String_Cmd( THIS->_this_type->definition_lookup, name_2, value_3 );
  RogueStringList__add__String( THIS->_this_type->definition_list, name_2 );
  return (RogueLogical)(true);
}

RogueLogical RogueParser__parse_properties__Logical( RogueClassParser* THIS, RogueLogical as_settings_0 )
{
  RogueParser__consume_eols( THIS );
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_native ))))
  {
    if (!(((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::literal_string )))))
    {
      throw ((RogueToken__error__String( ((RogueParser__peek( THIS ))), Rogue_program.literal_strings[261] )));
    }
    if (!(!!(THIS->_this_type->native_properties)))
    {
      THIS->_this_type->native_properties = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
    }
    RogueStringList__add__String( THIS->_this_type->native_properties, (call_ROGUEM33( 1, (RogueClassToken*)(((RogueParser__read( THIS )))) )) );
    RogueParser__must_consume_eols( THIS );
    return (RogueLogical)(true);
  }
  if (!(((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::identifier )))))
  {
    return (RogueLogical)(false);
  }
  RoguePropertyList__clear( THIS->property_list );
  RogueLogical first_1 = (true);
  while ((first_1 || ((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_comma )))))
  {
    first_1 = ((RogueLogical)false);
    RogueParser__consume_eols( THIS );
    RogueClassToken* t_2 = (((RogueParser__must_read__TokenType( THIS, RogueClassTokenType::identifier ))));
    RogueClassProperty* p_3 = 0;
    if (as_settings_0)
    {
      p_3 = ((RogueClassProperty*)((RogueType__add_setting__Token_String( THIS->_this_type, t_2, (call_ROGUEM33( 1, (RogueClassToken*)(t_2) )) ))));
    }
    else
    {
      p_3 = ((RogueClassProperty*)((RogueType__add_property__Token_String_Type_Cmd( THIS->_this_type, t_2, (call_ROGUEM33( 1, (RogueClassToken*)(t_2) )), ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
    }
    RoguePropertyList__add__Property( THIS->property_list, p_3 );
    if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_equals ))))
    {
      p_3->initial_value = ((RogueParser__parse_expression( THIS )));
    }
  }
  RogueParser__consume_eols( THIS );
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_colon ))))
  {
    RogueClassType* p_type_4 = (((Rogue_Parser__parse_type( THIS ))));
    {
      RoguePropertyList* _auto_609_6 = (THIS->property_list);
      RogueInteger _auto_610_7 = (0);
      for (;_auto_610_7 < _auto_609_6->count;++_auto_610_7)
      {
        RogueClassProperty* p_8 = (((RogueClassProperty*)(_auto_609_6->data->objects[_auto_610_7])));
        p_8->_type = p_type_4;
      }
    }
  }
  else
  {
    {
      RoguePropertyList* _auto_611_9 = (THIS->property_list);
      RogueInteger _auto_612_10 = (0);
      for (;_auto_612_10 < _auto_611_9->count;++_auto_612_10)
      {
        RogueClassProperty* p_11 = (((RogueClassProperty*)(_auto_611_9->data->objects[_auto_612_10])));
        RogueString* name_5 = (Rogue_program.literal_strings[290]);
        if (as_settings_0)
        {
          name_5 = ((RogueString*)Rogue_program.literal_strings[291]);
        }
        if (!!(p_11->initial_value))
        {
          p_11->_type = (call_ROGUEM46( 15, (RogueClassCmd*)(p_11->initial_value) ));
          if (p_11->_type == NULL)
          {
            RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), (call_ROGUEM41( 2, (RogueClassCmd*)(p_11->initial_value) )) );
            throw ((RogueToken__error__String( p_11->initial_value->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[292] ))), name_5 ))), Rogue_program.literal_strings[293] ))) ))) )));
          }
        }
        else
        {
          throw ((RogueToken__error__String( p_11->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[294] ))), name_5 ))), Rogue_program.literal_strings[295] ))) ))) )));
        }
      }
    }
  }
  return (RogueLogical)(true);
}

RogueLogical RogueParser__parse_method__Logical( RogueClassParser* THIS, RogueLogical as_routine_0 )
{
  RogueParser__consume_eols( THIS );
  if (as_routine_0)
  {
    if (!(((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::keyword_routine )))))
    {
      return (RogueLogical)(false);
    }
  }
  else if (!(((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::keyword_method )))))
  {
    return (RogueLogical)(false);
  }
  RogueClassToken* t_1 = (((RogueParser__read( THIS ))));
  RogueString* name_2 = (((RogueParser__read_identifier__Logical( THIS, false ))));
  RogueClassType* return_type_3 = 0;
  {
    if (((RogueString__operatorLESSTHANGREATERTHAN__String( name_2, Rogue_program.literal_strings[296] ))) == 0)
    {
      name_2 = ((RogueString*)((RogueString__operatorPLUS__String( name_2, (call_ROGUEM33( 1, (RogueClassToken*)(((RogueTokenReader__read( THIS->reader )))) )) ))));
    }
    else if (((RogueString__operatorLESSTHANGREATERTHAN__String( name_2, Rogue_program.literal_strings[297] ))) == 0)
    {
      RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_arrow, ((RogueString*)(NULL)) );
      return_type_3 = ((RogueClassType*)((Rogue_Parser__parse_type( THIS ))));
      name_2 = ((RogueString*)((RogueString__operatorPLUS__String( Rogue_program.literal_strings[298], return_type_3->name ))));
    }
  }
  if (as_routine_0)
  {
    THIS->this_method = ((RogueType__add_routine__Token_String( THIS->_this_type, t_1, name_2 )));
  }
  else
  {
    THIS->this_method = ((RogueType__add_method__Token_String( THIS->_this_type, t_1, name_2 )));
  }
  THIS->this_method->_return_type = return_type_3;
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_open_paren ))))
  {
    if (!(((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_close_paren )))))
    {
      RogueLogical first_4 = (true);
      while ((first_4 || ((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_comma )))))
      {
        first_4 = ((RogueLogical)false);
        t_1 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
        RogueClassLocal* param_5 = (((RogueMethod__add_parameter__Token_String_Type( THIS->this_method, t_1, ((RogueParser__read_identifier__Logical( THIS, true ))), ((RogueClassType*)(NULL)) ))));
        if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_equals ))))
        {
          param_5->initial_value = ((RogueParser__parse_expression( THIS )));
        }
        if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_colon ))))
        {
          param_5->_type = ((Rogue_Parser__parse_type( THIS )));
        }
      }
      RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_paren, ((RogueString*)(NULL)) );
    }
  }
  if (!(!!(return_type_3)))
  {
    if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_arrow ))))
    {
      if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_this ))))
      {
        THIS->this_method->_return_type = THIS->_this_type;
      }
      else
      {
        THIS->this_method->_return_type = ((Rogue_Parser__parse_type( THIS )));
      }
    }
  }
  RogueParser__parse_attributes__Attributes( THIS, THIS->this_method->attributes );
  if (THIS->parsing_augment)
  {
    RogueAttributes__add__Integer( THIS->this_method->attributes, 262144 );
  }
  RogueParser__consume_eols( THIS );
  if (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::keyword_macro ))))
  {
    if (((RogueTokenReader__peek__Integer( THIS->reader, 1 )))->_type == RogueClassTokenType::keyword_native)
    {
      RogueAttributes__add__Integer( THIS->this_method->attributes, 32 );
      RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_macro );
      RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_native );
      RogueLogical has_parens_6 = (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_open_paren ))));
      RogueParser__consume_eols( THIS );
      if (!(((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::literal_string )))))
      {
        throw ((RogueToken__error__String( ((RogueParser__peek( THIS ))), Rogue_program.literal_strings[261] )));
      }
      THIS->this_method->native_code = (call_ROGUEM33( 1, (RogueClassToken*)(((RogueParser__read( THIS )))) ));
      if (has_parens_6)
      {
        RogueParser__consume_eols( THIS );
        RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_paren, ((RogueString*)(NULL)) );
      }
      if (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::symbol_arrow ))))
      {
        RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_arrow );
        RogueClassType* type_7 = (((Rogue_Parser__parse_type( THIS ))));
        throw ((RogueToken__error__String( ((RogueParser__peek( THIS ))), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[299] ))), ((RogueType__to_String( type_7 ))) ))), Rogue_program.literal_strings[39] ))) ))) )));
      }
    }
    else
    {
      RogueAttributes__add__Integer( THIS->this_method->attributes, 64 );
      while (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_macro ))))
      {
        RogueParser__parse_single_line_statements__CmdStatementList( THIS, THIS->this_method->statements );
        RogueParser__consume_eols( THIS );
      }
    }
  }
  else if (THIS->parsing_augment)
  {
    RogueParser__parse_augment_statements( THIS );
  }
  else
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->this_method->statements), ((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( THIS->this_method, ((RogueParser__peek( THIS ))), Rogue_program.literal_strings[257], false ))))) );
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, THIS->this_method->statements );
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->this_method->statements), ((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( THIS->this_method, ((RogueParser__peek( THIS ))), Rogue_program.literal_strings[259], false ))))) );
  }
  return (RogueLogical)(true);
}

void RogueParser__parse_single_or_multi_line_statements__CmdStatementList_TokenType( RogueClassParser* THIS, RogueClassCmdStatementList* statements_0, RogueClassTokenType* end_type_1 )
{
  if (((RogueParser__consume_eols( THIS ))))
  {
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, statements_0 );
    RogueParser__must_consume__TokenType_String( THIS, end_type_1, ((RogueString*)(NULL)) );
  }
  else
  {
    RogueParser__parse_single_line_statements__CmdStatementList( THIS, statements_0 );
    RogueParser__consume_eols( THIS );
  }
}

void RogueParser__parse_multi_line_statements__CmdStatementList( RogueClassParser* THIS, RogueClassCmdStatementList* statements_0 )
{
  RogueClassCmdStatementList* prev_statement_list_1 = (THIS->cur_statement_list);
  THIS->cur_statement_list = statements_0;
  RogueParser__consume_end_commands( THIS );
  while (((RogueParser__next_is_statement( THIS ))))
  {
    RogueParser__parse_statement__CmdStatementList_Logical( THIS, statements_0, true );
    while ((((RogueParser__consume__TokenType( THIS, RogueClassTokenType::eol ))) || ((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_semicolon )))))
    {
    }
    RogueParser__consume_end_commands( THIS );
  }
  THIS->cur_statement_list = prev_statement_list_1;
}

void RogueParser__parse_augment_statements( RogueClassParser* THIS )
{
  RogueClassCmdStatementList* prev_statement_list_0 = (THIS->cur_statement_list);
  RogueMethod__begin_label__Token_String_Logical( THIS->this_method, ((RogueParser__peek( THIS ))), Rogue_program.literal_strings[257], true );
  RogueMethod__begin_label__Token_String_Logical( THIS->this_method, ((RogueParser__peek( THIS ))), Rogue_program.literal_strings[259], true );
  RogueClassCmdLabel* cur_label_1 = (((RogueMethod__begin_label__Token_String_Logical( THIS->this_method, ((RogueParser__peek( THIS ))), Rogue_program.literal_strings[257], true ))));
  THIS->cur_statement_list = cur_label_1->statements;
  RogueParser__consume_end_commands( THIS );
  while (((RogueParser__next_is_statement( THIS ))))
  {
    RogueClassToken* t_2 = (((RogueParser__peek( THIS ))));
    if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_open_specialize ))))
    {
      cur_label_1 = ((RogueClassCmdLabel*)((RogueMethod__begin_label__Token_String_Logical( THIS->this_method, t_2, ((RogueParser__read_identifier__Logical( THIS, false ))), true ))));
      THIS->cur_statement_list = cur_label_1->statements;
      RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_specialize, ((RogueString*)(NULL)) );
      RogueParser__consume_end_commands( THIS );
      continue;
    }
    RogueParser__parse_statement__CmdStatementList_Logical( THIS, cur_label_1->statements, true );
    while ((((RogueParser__consume__TokenType( THIS, RogueClassTokenType::eol ))) || ((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_semicolon )))))
    {
    }
    RogueParser__consume_end_commands( THIS );
  }
  THIS->cur_statement_list = prev_statement_list_0;
}

void RogueParser__parse_single_line_statements__CmdStatementList( RogueClassParser* THIS, RogueClassCmdStatementList* statements_0 )
{
  RogueClassCmdStatementList* prev_statement_list_1 = (THIS->cur_statement_list);
  THIS->cur_statement_list = statements_0;
  while (((RogueParser__next_is_statement( THIS ))))
  {
    RogueParser__parse_statement__CmdStatementList_Logical( THIS, statements_0, false );
    if (!(((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_semicolon )))))
    {
      THIS->cur_statement_list = prev_statement_list_1;
      return;
    }
    while (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_semicolon ))))
    {
    }
    if (((RogueParser__next_is_end_command( THIS ))))
    {
      goto _auto_614;
    }
  }
  _auto_614:;
  if (!(((RogueParser__consume__TokenType( THIS, RogueClassTokenType::eol )))))
  {
    if (!(((RogueToken__is_structure( ((RogueParser__peek( THIS ))) )))))
    {
      RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::eol, ((RogueString*)(NULL)) );
    }
  }
  THIS->cur_statement_list = prev_statement_list_1;
}

void RogueParser__parse_statement__CmdStatementList_Logical( RogueClassParser* THIS, RogueClassCmdStatementList* statements_0, RogueLogical allow_control_structures_1 )
{
  RogueClassToken* t_2 = (((RogueParser__peek( THIS ))));
  if (allow_control_structures_1)
  {
    if (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::keyword_if ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueParser__parse_if( THIS ))))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::keyword_which ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueParser__parse_which( THIS ))))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::keyword_forEach ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueParser__parse_for_each( THIS ))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::keyword_contingent ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueParser__parse_contingent( THIS ))))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::keyword_while ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueParser__parse_while( THIS ))))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::keyword_loop ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueParser__parse_loop( THIS ))))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::keyword_try ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueParser__parse_try( THIS ))))) );
      return;
    }
  }
  if (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::keyword_local ))))
  {
    RogueParser__parse_local_declaration__CmdStatementList( THIS, statements_0 );
    return;
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_return ))))
  {
    if (((RogueParser__next_is_end_command( THIS ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)Rogue_program.type_CmdReturn->create_and_init_object()), t_2, ((RogueClassCmd*)(NULL)) ))))) );
    }
    else
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)Rogue_program.type_CmdReturn->create_and_init_object()), t_2, ((RogueParser__parse_expression( THIS ))) ))))) );
    }
    return;
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_await ))))
  {
    RogueClassCmdStatementList* statement_list_3 = (((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) ))));
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdAwait__init__Token_Cmd_CmdStatementList_Local( ((RogueClassCmdAwait*)Rogue_program.type_CmdAwait->create_and_init_object()), t_2, ((RogueParser__parse_expression( THIS ))), statement_list_3, ((RogueClassLocal*)(NULL)) ))))) );
    return;
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_yield ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdYield__init__Token( ((RogueClassCmdYield*)Rogue_program.type_CmdYield->create_and_init_object()), t_2 ))))) );
    return;
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_throw ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdThrow__init__Token_Cmd( ((RogueClassCmdThrow*)Rogue_program.type_CmdThrow->create_and_init_object()), t_2, ((RogueParser__parse_expression( THIS ))) ))))) );
    return;
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_noAction ))))
  {
    return;
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_trace ))))
  {
    RogueStringBuilder* buffer_4 = (((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))));
    RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( buffer_4, THIS->_this_type->name ))), Rogue_program.literal_strings[158] ))), THIS->this_method->name ))), Rogue_program.literal_strings[254] );
    RogueStringBuilder__print__String( ((RogueStringBuilder__print__Integer( ((RogueStringBuilder__print__String( buffer_4, Rogue_program.literal_strings[157] ))), t_2->line ))), Rogue_program.literal_strings[255] );
    while ((((RogueTokenReader__has_another( THIS->reader ))) && !(((RogueParser__consume_eols( THIS ))))))
    {
      RogueStringBuilder__print__String( buffer_4, (call_ROGUEM33( 1, (RogueClassToken*)(((RogueParser__read( THIS )))) )) );
    }
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdTrace__init__Token_String( ((RogueClassCmdTrace*)Rogue_program.type_CmdTrace->create_and_init_object()), t_2, ((RogueStringBuilder__to_String( buffer_4 ))) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_open_specialize ))))
  {
    if (THIS->parsing_augment)
    {
      throw ((RogueToken__error__String( t_2, Rogue_program.literal_strings[256] )));
    }
    else
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( THIS->this_method, t_2, ((RogueParser__read_identifier__Logical( THIS, false ))), false ))))) );
    }
    RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_specialize, ((RogueString*)(NULL)) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_escapeWhile ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdEscape__init__Token_Integer_CmdControlStructure( ((RogueClassCmdEscape*)Rogue_program.type_CmdEscape->create_and_init_object()), t_2, 8, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_escapeForEach ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdEscape__init__Token_Integer_CmdControlStructure( ((RogueClassCmdEscape*)Rogue_program.type_CmdEscape->create_and_init_object()), t_2, 9, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_escapeContingent ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdEscape__init__Token_Integer_CmdControlStructure( ((RogueClassCmdEscape*)Rogue_program.type_CmdEscape->create_and_init_object()), t_2, 1, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_escapeLoop ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdEscape__init__Token_Integer_CmdControlStructure( ((RogueClassCmdEscape*)Rogue_program.type_CmdEscape->create_and_init_object()), t_2, 7, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_escapeIf ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdEscape__init__Token_Integer_CmdControlStructure( ((RogueClassCmdEscape*)Rogue_program.type_CmdEscape->create_and_init_object()), t_2, 2, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_escapeTry ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdEscape__init__Token_Integer_CmdControlStructure( ((RogueClassCmdEscape*)Rogue_program.type_CmdEscape->create_and_init_object()), t_2, 4, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_escapeWhich ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdEscape__init__Token_Integer_CmdControlStructure( ((RogueClassCmdEscape*)Rogue_program.type_CmdEscape->create_and_init_object()), t_2, 5, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_nextIteration ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdNextIteration__init__Token_CmdControlStructure( ((RogueClassCmdNextIteration*)Rogue_program.type_CmdNextIteration->create_and_init_object()), t_2, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_necessary ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdNecessary__init__Token_Cmd_CmdContingent( ((RogueClassCmdNecessary*)Rogue_program.type_CmdNecessary->create_and_init_object()), t_2, ((RogueParser__parse_expression( THIS ))), ((RogueClassCmdContingent*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_sufficient ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdSufficient__init__Token_Cmd_CmdContingent( ((RogueClassCmdSufficient*)Rogue_program.type_CmdSufficient->create_and_init_object()), t_2, ((RogueParser__parse_expression( THIS ))), ((RogueClassCmdContingent*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_plus_plus ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdAdjust__init__Token_Cmd_Integer( ((RogueClassCmdAdjust*)Rogue_program.type_CmdAdjust->create_and_init_object()), t_2, ((RogueParser__parse_expression( THIS ))), 1 ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_minus_minus ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdAdjust__init__Token_Cmd_Integer( ((RogueClassCmdAdjust*)Rogue_program.type_CmdAdjust->create_and_init_object()), t_2, ((RogueParser__parse_expression( THIS ))), -1 ))))) );
    return;
  }
  RogueClassCmd* expression_5 = (((RogueParser__parse_expression( THIS ))));
  t_2 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_equals ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)Rogue_program.type_CmdAssign->create_and_init_object()), t_2, expression_5, ((RogueParser__parse_expression( THIS ))) ))))) );
    return;
  }
  if ((call_ROGUEM73( 12, (RogueClassTokenType*)(t_2->_type) )))
  {
    RogueParser__read( THIS );
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdOpWithAssign__init__Token_Cmd_TokenType_Cmd( ((RogueClassCmdOpWithAssign*)Rogue_program.type_CmdOpWithAssign->create_and_init_object()), t_2, expression_5, t_2->_type, ((RogueParser__parse_expression( THIS ))) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_plus_plus ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdAdjust__init__Token_Cmd_Integer( ((RogueClassCmdAdjust*)Rogue_program.type_CmdAdjust->create_and_init_object()), t_2, expression_5, 1 ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_minus_minus ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdAdjust__init__Token_Cmd_Integer( ((RogueClassCmdAdjust*)Rogue_program.type_CmdAdjust->create_and_init_object()), t_2, expression_5, -1 ))))) );
    return;
  }
  RogueClassTokenType* t_type_6 = (t_2->_type);
  if ((call_ROGUEM73( 12, (RogueClassTokenType*)(t_type_6) )))
  {
    RogueParser__read( THIS );
    RogueClassCmd* target_7 = (expression_5);
    RogueClassCmd* new_value_8 = (((RogueParser__parse_expression( THIS ))));
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdOpWithAssign__init__Token_Cmd_TokenType_Cmd( ((RogueClassCmdOpWithAssign*)Rogue_program.type_CmdOpWithAssign->create_and_init_object()), t_2, target_7, t_type_6, new_value_8 ))))) );
    return;
  }
  if (!(((RogueParser__next_is_end_command( THIS )))))
  {
    RogueClassCmdAccess* access_9 = (((RogueClassCmdAccess*)(RogueObject::as(expression_5,Rogue_program.type_CmdAccess))));
    if ((!!(access_9) && access_9->args == NULL))
    {
      RogueClassCmdArgs* args_10 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()) ))));
      while ((!(((RogueParser__next_is_end_command( THIS )))) && !(((RogueToken__is_structure( ((RogueParser__peek( THIS ))) ))))))
      {
        RogueCmdList__add__Cmd( ((RogueCmdList*)args_10), ((RogueParser__parse_expression( THIS ))) );
      }
      access_9->args = args_10;
    }
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), expression_5 );
}

RogueClassCmdWhich* RogueParser__parse_which( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueClassCmdWhich* cmd_which_1 = (((RogueCmdWhich__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Integer( ((RogueClassCmdWhich*)Rogue_program.type_CmdWhich->create_and_init_object()), t_0, ((RogueParser__parse_expression( THIS ))), ((RogueCmdWhichCaseList__init( ((RogueCmdWhichCaseList*)Rogue_program.type_CmdWhichCaseList->create_and_init_object()) ))), ((RogueClassCmdWhichCase*)(NULL)), 5 ))));
  RogueParser__must_consume_eols( THIS );
  while (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::keyword_case ))))
  {
    t_0 = ((RogueClassToken*)((RogueParser__read( THIS ))));
    RogueParser__consume_eols( THIS );
    RogueClassCmdWhichCase* cmd_case_2 = (((RogueCmdWhich__add_case__Token( cmd_which_1, t_0 ))));
    RogueLogical first_3 = (true);
    while ((first_3 || ((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_comma )))))
    {
      first_3 = ((RogueLogical)false);
      RogueCmdList__add__Cmd( ((RogueCmdList*)cmd_case_2->conditions), ((RogueParser__parse_expression( THIS ))) );
      RogueParser__consume_eols( THIS );
    }
    if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_colon ))))
    {
      RogueParser__consume_eols( THIS );
    }
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_case_2->statements );
  }
  if (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::keyword_others ))))
  {
    t_0 = ((RogueClassToken*)((RogueParser__read( THIS ))));
    RogueParser__consume_eols( THIS );
    RogueClassCmdWhichCase* cmd_case_4 = (((RogueCmdWhich__add_case_others__Token( cmd_which_1, t_0 ))));
    if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_colon ))))
    {
      RogueParser__consume_eols( THIS );
    }
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_case_4->statements );
  }
  RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::keyword_endWhich, ((RogueString*)(NULL)) );
  return (RogueClassCmdWhich*)(cmd_which_1);
}

RogueClassCmdContingent* RogueParser__parse_contingent( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueClassCmdContingent* cmd_contingent_1 = (((RogueCmdContingent__init__Token_CmdStatementList( ((RogueClassCmdContingent*)Rogue_program.type_CmdContingent->create_and_init_object()), t_0, ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) ))) ))));
  RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_contingent_1->statements );
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_satisfied ))))
  {
    cmd_contingent_1->satisfied_statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) )));
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_contingent_1->satisfied_statements );
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_unsatisfied ))))
  {
    cmd_contingent_1->unsatisfied_statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) )));
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_contingent_1->unsatisfied_statements );
  }
  RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::keyword_endContingent, ((RogueString*)(NULL)) );
  return (RogueClassCmdContingent*)(cmd_contingent_1);
}

RogueClassCmdTry* RogueParser__parse_try( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueClassCmdTry* cmd_try_1 = (((RogueCmdTry__init__Token_CmdStatementList_CmdCatchList( ((RogueClassCmdTry*)Rogue_program.type_CmdTry->create_and_init_object()), t_0, ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) ))), ((RogueCmdCatchList__init( ((RogueCmdCatchList*)Rogue_program.type_CmdCatchList->create_and_init_object()) ))) ))));
  RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_try_1->statements );
  while (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::keyword_catch ))))
  {
    RogueClassCmdCatch* cmd_catch_2 = (((RogueCmdTry__add_catch__Token( cmd_try_1, ((RogueParser__read( THIS ))) ))));
    RogueParser__consume_eols( THIS );
    RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_open_paren, ((RogueString*)(NULL)) );
    RogueClassToken* error_t_3 = (((RogueParser__peek( THIS ))));
    RogueString* error_name_4 = (((RogueParser__read_identifier__Logical( THIS, false ))));
    RogueParser__consume_eols( THIS );
    RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_colon, ((RogueString*)(NULL)) );
    RogueParser__consume_eols( THIS );
    cmd_catch_2->error_var = ((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, error_t_3, error_name_4, ((Rogue_Parser__parse_type( THIS ))), ((RogueClassCmd*)(NULL)) )));
    RogueParser__consume_eols( THIS );
    RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_paren, ((RogueString*)(NULL)) );
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_catch_2->statements );
  }
  RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::keyword_endTry, ((RogueString*)(NULL)) );
  return (RogueClassCmdTry*)(cmd_try_1);
}

void RogueParser__parse_local_declaration__CmdStatementList( RogueClassParser* THIS, RogueClassCmdStatementList* statements_0 )
{
  RogueLocalList__clear( THIS->local_declarations );
  RogueClassToken* t_1 = (((RogueParser__read( THIS ))));
  RogueLogical first_2 = (true);
  while ((first_2 || ((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_comma )))))
  {
    first_2 = ((RogueLogical)false);
    t_1 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
    RogueString* name_3 = (((RogueParser__read_identifier__Logical( THIS, false ))));
    RogueClassLocal* v_4 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_1, name_3, ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
    RogueLocalList__add__Local( THIS->local_declarations, v_4 );
    if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_equals ))))
    {
      v_4->initial_value = ((RogueParser__parse_expression( THIS )));
    }
  }
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_colon ))))
  {
    RogueClassType* type_5 = (((Rogue_Parser__parse_type( THIS ))));
    {
      RogueLocalList* _auto_667_6 = (THIS->local_declarations);
      RogueInteger _auto_668_7 = (0);
      for (;_auto_668_7 < _auto_667_6->count;++_auto_668_7)
      {
        RogueClassLocal* v_8 = (((RogueClassLocal*)(_auto_667_6->data->objects[_auto_668_7])));
        v_8->_type = type_5;
      }
    }
  }
  else
  {
    {
      RogueLocalList* _auto_669_9 = (THIS->local_declarations);
      RogueInteger _auto_670_10 = (0);
      for (;_auto_670_10 < _auto_669_9->count;++_auto_670_10)
      {
        RogueClassLocal* v_11 = (((RogueClassLocal*)(_auto_669_9->data->objects[_auto_670_10])));
        if ((v_11->_type == NULL && !!(v_11->initial_value)))
        {
          v_11->_type = (call_ROGUEM46( 15, (RogueClassCmd*)(v_11->initial_value) ));
        }
      }
    }
  }
  {
    RogueLocalList* _auto_671_12 = (THIS->local_declarations);
    RogueInteger _auto_672_13 = (0);
    for (;_auto_672_13 < _auto_671_12->count;++_auto_672_13)
    {
      RogueClassLocal* v_14 = (((RogueClassLocal*)(_auto_671_12->data->objects[_auto_672_13])));
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local( ((RogueClassCmdLocalDeclaration*)Rogue_program.type_CmdLocalDeclaration->create_and_init_object()), v_14->t, v_14 ))))) );
    }
  }
}

RogueClassType* Rogue_Parser__parse_type( RogueClassParser* THIS )
{
  RogueString* name_0 = 0;
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (!!((call_ROGUEM38( 13, (RogueClassToken*)(t_1) ))))
  {
    RogueClassType* type_2 = ((call_ROGUEM38( 13, (RogueClassToken*)(((RogueParser__read( THIS )))) )));
    if ((((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::symbol_empty_brackets ))) || ((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::symbol_question_mark )))))
    {
      name_0 = ((RogueString*)type_2->name);
      for (;;)
      {
        if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_empty_brackets ))))
        {
          name_0 = ((RogueString*)((RogueString__operatorPLUS__String( name_0, Rogue_program.literal_strings[163] ))));
        }
        else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_question_mark ))))
        {
          name_0 = ((RogueString*)((RogueString__operatorPLUS__String( name_0, Rogue_program.literal_strings[183] ))));
        }
        else
        {
          goto _auto_675;
        }
      }
      _auto_675:;
    }
    else
    {
      return (RogueClassType*)(type_2);
    }
  }
  else
  {
    name_0 = ((RogueString*)((Rogue_Parser__parse_possible_type( THIS ))));
  }
  return (RogueClassType*)(((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), t_1, name_0 ))));
}

RogueString* Rogue_Parser__parse_possible_type( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__peek( THIS ))));
  RogueString* name_1 = (((RogueParser__read_identifier__Logical( THIS, false ))));
  if (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::symbol_open_specialize ))))
  {
    name_1 = ((RogueString*)((RogueString__operatorPLUS__String( name_1, ((RogueParser__parse_specialization_string( THIS ))) ))));
  }
  else if (((RogueString__operatorLESSTHANGREATERTHAN__String( name_1, Rogue_program.literal_strings[238] ))) == 0)
  {
    RogueTypeList* parameter_types_2 = 0;
    RogueClassType* return_type_3 = 0;
    if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_open_paren ))))
    {
      if (!(((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_close_paren )))))
      {
        parameter_types_2 = ((RogueTypeList*)((RogueTypeList__init( ((RogueTypeList*)Rogue_program.type_TypeList->create_and_init_object()) ))));
        RogueLogical first_4 = (true);
        while ((first_4 || ((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_comma )))))
        {
          first_4 = ((RogueLogical)false);
          RogueTypeList__add__Type( parameter_types_2, ((Rogue_Parser__parse_type( THIS ))) );
        }
        RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_paren, ((RogueString*)(NULL)) );
      }
    }
    if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_arrow ))))
    {
      return_type_3 = ((RogueClassType*)((Rogue_Parser__parse_type( THIS ))));
    }
    name_1 = ((RogueString*)((RogueProgram__get_callback_type_reference__Token_TypeList_Type( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), t_0, parameter_types_2, return_type_3 )))->name);
  }
  for (;;)
  {
    if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_empty_brackets ))))
    {
      name_1 = ((RogueString*)((RogueString__operatorPLUS__String( name_1, Rogue_program.literal_strings[163] ))));
    }
    else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_question_mark ))))
    {
      name_1 = ((RogueString*)((RogueString__operatorPLUS__String( name_1, Rogue_program.literal_strings[183] ))));
    }
    else
    {
      goto _auto_676;
    }
  }
  _auto_676:;
  return (RogueString*)(name_1);
}

RogueClassCmdIf* RogueParser__parse_if( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueClassCmdIf* cmd_if_1 = (((RogueCmdIf__init__Token_Cmd_Integer( ((RogueClassCmdIf*)Rogue_program.type_CmdIf->create_and_init_object()), t_0, ((RogueClassCmd*)(NULL)), 2 ))));
  cmd_if_1->condition = ((RogueParser__parse_expression( THIS )));
  if (((RogueParser__consume_eols( THIS ))))
  {
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_if_1->statements );
    t_0 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
    RogueClassCmdIf* cur_if_2 = (cmd_if_1);
    while (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::keyword_elseIf ))))
    {
      RogueInteger starting_position_3 = (THIS->reader->position);
      RogueParser__read( THIS );
      RogueClassCmd* elseIf_condition_4 = (((RogueParser__parse_expression( THIS ))));
      if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::eol ))))
      {
        RogueClassCmdIf* cmd_else_if_5 = (((RogueCmdIf__init__Token_Cmd_Integer( ((RogueClassCmdIf*)Rogue_program.type_CmdIf->create_and_init_object()), t_0, elseIf_condition_4, 3 ))));
        RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_else_if_5->statements );
        cur_if_2->else_statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) )));
        RogueCmdList__add__Cmd( ((RogueCmdList*)cur_if_2->else_statements), ((RogueClassCmd*)(cmd_else_if_5)) );
        cur_if_2 = ((RogueClassCmdIf*)cmd_else_if_5);
      }
      else
      {
        THIS->reader->position = starting_position_3;
        goto _auto_677;
      }
      t_0 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
    }
    _auto_677:;
    if ((((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::keyword_else ))) && ((RogueTokenReader__peek__Integer( THIS->reader, 1 )))->_type == RogueClassTokenType::eol))
    {
      RogueParser__read( THIS );
      cur_if_2->else_statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) )));
      RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cur_if_2->else_statements );
    }
    RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::keyword_endIf, ((RogueString*)(NULL)) );
  }
  else
  {
    RogueParser__parse_single_line_statements__CmdStatementList( THIS, cmd_if_1->statements );
    RogueParser__consume_eols( THIS );
    t_0 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
    RogueClassCmdIf* cur_if_6 = (cmd_if_1);
    while (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::keyword_elseIf ))))
    {
      RogueInteger starting_position_7 = (THIS->reader->position);
      RogueParser__read( THIS );
      RogueClassCmd* elseIf_condition_8 = (((RogueParser__parse_expression( THIS ))));
      if (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::eol ))))
      {
        THIS->reader->position = starting_position_7;
        goto _auto_678;
      }
      else
      {
        RogueClassCmdIf* cmd_else_if_9 = (((RogueCmdIf__init__Token_Cmd_Integer( ((RogueClassCmdIf*)Rogue_program.type_CmdIf->create_and_init_object()), t_0, elseIf_condition_8, 3 ))));
        RogueParser__parse_single_line_statements__CmdStatementList( THIS, cmd_else_if_9->statements );
        cur_if_6->else_statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) )));
        RogueCmdList__add__Cmd( ((RogueCmdList*)cur_if_6->else_statements), ((RogueClassCmd*)(cmd_else_if_9)) );
        cur_if_6 = ((RogueClassCmdIf*)cmd_else_if_9);
        RogueParser__must_consume_eols( THIS );
      }
      t_0 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
    }
    _auto_678:;
    if ((((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::keyword_else ))) && ((RogueTokenReader__peek__Integer( THIS->reader, 1 )))->_type != RogueClassTokenType::eol))
    {
      RogueParser__read( THIS );
      cur_if_6->else_statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) )));
      RogueParser__parse_single_line_statements__CmdStatementList( THIS, cur_if_6->else_statements );
    }
  }
  return (RogueClassCmdIf*)(cmd_if_1);
}

RogueClassCmdGenericLoop* RogueParser__parse_loop( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueClassCmdGenericLoop* cmd_loop_1 = (((RogueCmdGenericLoop__init__Token_Integer_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)Rogue_program.type_CmdGenericLoop->create_and_init_object()), t_0, 7, ((RogueClassCmd*)(NULL)), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) ))), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
  if (!(((RogueParser__consume_eols( THIS )))))
  {
    RogueClassLocal* control_var_2 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
    control_var_2->initial_value = ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), t_0, 1 )))));
    RogueClassLocal* last_var_3 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
    last_var_3->initial_value = ((RogueParser__parse_expression( THIS )));
    RogueParser__must_consume_eols( THIS );
    RogueClassCmdAdjustLocal* step_cmd_4 = (((RogueCmdAdjustLocal__init__Token_Local_Integer( ((RogueClassCmdAdjustLocal*)Rogue_program.type_CmdAdjustLocal->create_and_init_object()), t_0, control_var_2, 1 ))));
    cmd_loop_1->condition = ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLE*)Rogue_program.type_CmdCompareLE->create_and_init_object())), t_0, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), t_0, control_var_2 ))))), ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), t_0, last_var_3 ))))) )))));
    RogueCmdGenericLoop__add_control_var__Local( cmd_loop_1, control_var_2 );
    RogueCmdGenericLoop__add_control_var__Local( cmd_loop_1, last_var_3 );
    RogueCmdGenericLoop__add_upkeep__Cmd( cmd_loop_1, ((RogueClassCmd*)(step_cmd_4)) );
  }
  RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_loop_1->statements );
  RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::keyword_endLoop, ((RogueString*)(NULL)) );
  return (RogueClassCmdGenericLoop*)(cmd_loop_1);
}

RogueClassCmdGenericLoop* RogueParser__parse_while( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueClassCmdGenericLoop* cmd_while_1 = (((RogueCmdGenericLoop__init__Token_Integer_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)Rogue_program.type_CmdGenericLoop->create_and_init_object()), t_0, 8, ((RogueParser__parse_expression( THIS ))), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) ))), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
  if (((RogueParser__consume_eols( THIS ))))
  {
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_while_1->statements );
    RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::keyword_endWhile, ((RogueString*)(NULL)) );
  }
  else
  {
    RogueParser__parse_single_line_statements__CmdStatementList( THIS, cmd_while_1->statements );
    RogueParser__consume_eols( THIS );
  }
  return (RogueClassCmdGenericLoop*)(cmd_while_1);
}

RogueClassCmd* RogueParser__parse_for_each( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueLogical has_parens_1 = (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_open_paren ))));
  RogueClassCmd* expr_2 = (((RogueParser__parse_expression( THIS ))));
  RogueClassCmdAccess* access_3 = (((RogueClassCmdAccess*)(RogueObject::as(expr_2,Rogue_program.type_CmdAccess))));
  if (!!(access_3))
  {
    if ((!!(access_3->context) || !!(access_3->args)))
    {
      throw ((RogueToken__error__String( access_3->t, Rogue_program.literal_strings[244] )));
    }
    else
    {
      RogueString* index_var_name_4 = 0;
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( access_3->name, Rogue_program.literal_strings[245] ))) == 0)
      {
        throw ((RogueToken__error__String( access_3->t, Rogue_program.literal_strings[246] )));
      }
      else if (((RogueParser__consume__String( THIS, Rogue_program.literal_strings[245] ))))
      {
        index_var_name_4 = ((RogueString*)((RogueParser__read_identifier__Logical( THIS, false ))));
      }
      if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_in ))))
      {
        RogueClassCmd* collection_5 = (((RogueParser__parse_expression( THIS ))));
        RogueClassCmdRange* range_6 = (((RogueClassCmdRange*)(RogueObject::as(collection_5,Rogue_program.type_CmdRange))));
        if (!!(range_6))
        {
          if (!!(index_var_name_4))
          {
            throw ((RogueToken__error__String( range_6->t, Rogue_program.literal_strings[247] )));
          }
          RogueClassLocal* control_var_7 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, access_3->name, ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
          control_var_7->initial_value = range_6->first;
          RogueClassLocal* last_var_8 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
          last_var_8->initial_value = range_6->last;
          RogueClassCmd* step_cmd_9 = (((RogueClassCmd*)(NULL)));
          if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_step ))))
          {
            RogueClassCmd* step_value_10 = (((RogueParser__parse_expression( THIS ))));
            step_cmd_9 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdLocalOpWithAssign__init__Token_Local_TokenType_Cmd( ((RogueClassCmdLocalOpWithAssign*)Rogue_program.type_CmdLocalOpWithAssign->create_and_init_object()), range_6->t, control_var_7, RogueClassTokenType::symbol_plus_equals, step_value_10 ))))));
          }
          else
          {
            step_cmd_9 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Integer( ((RogueClassCmdAdjustLocal*)Rogue_program.type_CmdAdjustLocal->create_and_init_object()), range_6->t, control_var_7, 1 ))))));
          }
          RogueClassCmdGenericLoop* cmd_for_each_11 = (((RogueCmdGenericLoop__init__Token_Integer_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)Rogue_program.type_CmdGenericLoop->create_and_init_object()), t_0, 9, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLE*)Rogue_program.type_CmdCompareLE->create_and_init_object())), t_0, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), t_0, control_var_7 ))))), ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), t_0, last_var_8 ))))) ))))), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) ))), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
          RogueCmdGenericLoop__add_control_var__Local( cmd_for_each_11, control_var_7 );
          RogueCmdGenericLoop__add_control_var__Local( cmd_for_each_11, last_var_8 );
          RogueCmdGenericLoop__add_upkeep__Cmd( cmd_for_each_11, step_cmd_9 );
          if (has_parens_1)
          {
            RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_paren, ((RogueString*)(NULL)) );
          }
          RogueParser__parse_single_or_multi_line_statements__CmdStatementList_TokenType( THIS, cmd_for_each_11->statements, RogueClassTokenType::keyword_endForEach );
          return (RogueClassCmd*)(((RogueClassCmd*)(cmd_for_each_11)));
        }
        else
        {
          RogueClassCmd* step_cmd_12 = 0;
          if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_step ))))
          {
            step_cmd_12 = ((RogueClassCmd*)((RogueParser__parse_expression( THIS ))));
          }
          if (has_parens_1)
          {
            RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_paren, ((RogueString*)(NULL)) );
          }
          RogueClassCmdForEach* cmd_for_each_13 = (((RogueCmdForEach__init__Token_String_String_Cmd_Cmd_CmdStatementList( ((RogueClassCmdForEach*)Rogue_program.type_CmdForEach->create_and_init_object()), t_0, access_3->name, index_var_name_4, collection_5, step_cmd_12, ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) ))) ))));
          RogueParser__parse_single_or_multi_line_statements__CmdStatementList_TokenType( THIS, cmd_for_each_13->statements, RogueClassTokenType::keyword_endForEach );
          return (RogueClassCmd*)(((RogueClassCmd*)(cmd_for_each_13)));
        }
      }
      else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_of ))))
      {
        if (!!(index_var_name_4))
        {
          throw ((RogueToken__error__String( t_0, Rogue_program.literal_strings[248] )));
        }
        RogueClassCmd* collection_14 = (((RogueParser__parse_expression( THIS ))));
        RogueClassCmdRange* range_15 = (((RogueClassCmdRange*)(RogueObject::as(collection_14,Rogue_program.type_CmdRange))));
        if (!!(range_15))
        {
          throw ((RogueToken__error__String( t_0, Rogue_program.literal_strings[249] )));
        }
        else
        {
          RogueClassCmd* step_cmd_16 = 0;
          if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_step ))))
          {
            step_cmd_16 = ((RogueClassCmd*)((RogueParser__parse_expression( THIS ))));
          }
          if (has_parens_1)
          {
            RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_paren, ((RogueString*)(NULL)) );
          }
          RogueClassCmdForEach* cmd_for_each_17 = (((RogueCmdForEach__init__Token_String_String_Cmd_Cmd_CmdStatementList( ((RogueClassCmdForEach*)Rogue_program.type_CmdForEach->create_and_init_object()), t_0, ((RogueString*)(NULL)), access_3->name, collection_14, step_cmd_16, ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) ))) ))));
          RogueParser__parse_single_or_multi_line_statements__CmdStatementList_TokenType( THIS, cmd_for_each_17->statements, RogueClassTokenType::keyword_endForEach );
          return (RogueClassCmd*)(((RogueClassCmd*)(cmd_for_each_17)));
        }
      }
      else
      {
        throw ((RogueToken__error__String( t_0, Rogue_program.literal_strings[250] )));
      }
    }
  }
  else
  {
    RogueClassCmdRange* range_18 = (((RogueClassCmdRange*)(RogueObject::as(expr_2,Rogue_program.type_CmdRange))));
    if (!!(range_18))
    {
      RogueClassLocal* control_var_19 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
      control_var_19->initial_value = range_18->first;
      RogueClassLocal* last_var_20 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
      last_var_20->initial_value = range_18->last;
      RogueClassCmd* step_cmd_21 = 0;
      if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_step ))))
      {
        RogueClassCmd* step_value_22 = (((RogueParser__parse_expression( THIS ))));
        step_cmd_21 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdLocalOpWithAssign__init__Token_Local_TokenType_Cmd( ((RogueClassCmdLocalOpWithAssign*)Rogue_program.type_CmdLocalOpWithAssign->create_and_init_object()), range_18->t, control_var_19, RogueClassTokenType::symbol_plus_equals, step_value_22 ))))));
      }
      else
      {
        step_cmd_21 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Integer( ((RogueClassCmdAdjustLocal*)Rogue_program.type_CmdAdjustLocal->create_and_init_object()), range_18->t, control_var_19, 1 ))))));
      }
      RogueClassCmdGenericLoop* cmd_for_each_23 = (((RogueCmdGenericLoop__init__Token_Integer_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)Rogue_program.type_CmdGenericLoop->create_and_init_object()), t_0, 9, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLE*)Rogue_program.type_CmdCompareLE->create_and_init_object())), t_0, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), t_0, control_var_19 ))))), ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), t_0, last_var_20 ))))) ))))), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) ))), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
      RogueCmdGenericLoop__add_control_var__Local( cmd_for_each_23, control_var_19 );
      RogueCmdGenericLoop__add_control_var__Local( cmd_for_each_23, last_var_20 );
      RogueCmdGenericLoop__add_upkeep__Cmd( cmd_for_each_23, step_cmd_21 );
      if (has_parens_1)
      {
        RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_paren, ((RogueString*)(NULL)) );
      }
      RogueParser__parse_single_or_multi_line_statements__CmdStatementList_TokenType( THIS, cmd_for_each_23->statements, RogueClassTokenType::keyword_endForEach );
      return (RogueClassCmd*)(((RogueClassCmd*)(cmd_for_each_23)));
    }
    else
    {
      throw ((RogueToken__error__String( t_0, Rogue_program.literal_strings[251] )));
    }
  }
  RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), Rogue_program.literal_strings[252] );
  throw ((RogueToken__error__String( expr_2->t, Rogue_program.literal_strings[253] )));
}

RogueClassToken* RogueParser__peek( RogueClassParser* THIS )
{
  return (RogueClassToken*)(((RogueTokenReader__peek( THIS->reader ))));
}

RogueClassToken* RogueParser__read( RogueClassParser* THIS )
{
  return (RogueClassToken*)(((RogueTokenReader__read( THIS->reader ))));
}

RogueString* RogueParser__read_identifier__Logical( RogueClassParser* THIS, RogueLogical allow_at_sign_0 )
{
  RogueLogical direct_access_1 = (false);
  if (allow_at_sign_0)
  {
    direct_access_1 = ((RogueLogical)((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_at ))));
  }
  if (!(((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::identifier )))))
  {
    if (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::type_identifier ))))
    {
      RogueString* result_2 = ((call_ROGUEM38( 13, (RogueClassToken*)(((RogueParser__read( THIS )))) ))->name);
      if (direct_access_1)
      {
        result_2 = ((RogueString*)((RogueString__operatorPLUS__String( Rogue_program.literal_strings[153], result_2 ))));
      }
      return (RogueString*)(result_2);
    }
    throw ((RogueParser__error__String( THIS, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[45] ))), ((RogueToken__quoted_name( ((RogueParser__peek( THIS ))) ))) ))), Rogue_program.literal_strings[47] ))) ))) )));
  }
  RogueString* result_3 = ((call_ROGUEM33( 1, (RogueClassToken*)(((RogueParser__read( THIS )))) )));
  if (direct_access_1)
  {
    result_3 = ((RogueString*)((RogueString__operatorPLUS__String( Rogue_program.literal_strings[153], result_3 ))));
  }
  return (RogueString*)(result_3);
}

RogueClassCmd* RogueParser__parse_expression( RogueClassParser* THIS )
{
  RogueParser__consume_eols( THIS );
  return (RogueClassCmd*)(((RogueParser__parse_range( THIS ))));
}

RogueClassCmd* RogueParser__parse_range( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_range__Cmd( THIS, ((RogueParser__parse_logical_xor( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_range__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_upTo ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdRange__init__Token_Cmd_Cmd_Cmd( ((RogueClassCmdRange*)((RogueClassCmdRangeUpTo*)Rogue_program.type_CmdRangeUpTo->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_logical_xor( THIS ))), ((RogueClassCmd*)(NULL)) ))))));
  }
  else
  {
    return (RogueClassCmd*)(lhs_0);
  }
}

RogueClassCmd* RogueParser__parse_logical_xor( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_logical_xor__Cmd( THIS, ((RogueParser__parse_logical_or( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_logical_xor__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_xor ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_logical_xor__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdLogicalXor*)Rogue_program.type_CmdLogicalXor->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_logical_or( THIS ))) ))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_logical_or( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_logical_or__Cmd( THIS, ((RogueParser__parse_logical_and( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_logical_or__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_or ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_logical_or__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdLogicalOr*)Rogue_program.type_CmdLogicalOr->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_logical_and( THIS ))) ))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_logical_and( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_logical_and__Cmd( THIS, ((RogueParser__parse_comparison( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_logical_and__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_and ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_logical_and__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdLogicalAnd*)Rogue_program.type_CmdLogicalAnd->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_comparison( THIS ))) ))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_comparison( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueParser__parse_bitwise_xor( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_comparison__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_eq ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)Rogue_program.type_CmdCompareEQ->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_is ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareIs*)Rogue_program.type_CmdCompareIs->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_ne ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareNE*)Rogue_program.type_CmdCompareNE->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_isNot ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareIsNot*)Rogue_program.type_CmdCompareIsNot->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_lt ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLT*)Rogue_program.type_CmdCompareLT->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_gt ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareGT*)Rogue_program.type_CmdCompareGT->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_le ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLE*)Rogue_program.type_CmdCompareLE->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_ge ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareGE*)Rogue_program.type_CmdCompareGE->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_instanceOf ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdInstanceOf*)Rogue_program.type_CmdInstanceOf->create_and_init_object())), t_1, lhs_0, ((Rogue_Parser__parse_type( THIS ))) ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_notInstanceOf ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)Rogue_program.type_CmdLogicalNot->create_and_init_object())), t_1, ((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdInstanceOf*)Rogue_program.type_CmdInstanceOf->create_and_init_object())), t_1, lhs_0, ((Rogue_Parser__parse_type( THIS ))) ))))) ))))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_bitwise_xor( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_bitwise_xor__Cmd( THIS, ((RogueParser__parse_bitwise_or( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_bitwise_xor__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_tilde ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_bitwise_xor__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseXor*)Rogue_program.type_CmdBitwiseXor->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_bitwise_or( THIS ))) ))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_bitwise_or( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_bitwise_or__Cmd( THIS, ((RogueParser__parse_bitwise_and( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_bitwise_or__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  RogueInteger starting_pos_2 = (THIS->reader->position);
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_vertical_bar ))))
  {
    RogueParser__consume_eols( THIS );
    RogueClassCmd* rhs_3 = (((RogueParser__parse_bitwise_and( THIS ))));
    return (RogueClassCmd*)(((RogueParser__parse_bitwise_or__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseOr*)Rogue_program.type_CmdBitwiseOr->create_and_init_object())), t_1, lhs_0, rhs_3 ))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_bitwise_and( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_bitwise_and__Cmd( THIS, ((RogueParser__parse_bitwise_shift( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_bitwise_and__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_ampersand ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_bitwise_and__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseAnd*)Rogue_program.type_CmdBitwiseAnd->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_bitwise_shift( THIS ))) ))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_bitwise_shift( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_bitwise_shift__Cmd( THIS, ((RogueParser__parse_add_subtract( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_bitwise_shift__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_shift_left ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseShiftLeft*)Rogue_program.type_CmdBitwiseShiftLeft->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_add_subtract( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_shift_right ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseShiftRight*)Rogue_program.type_CmdBitwiseShiftRight->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_add_subtract( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_shift_right_x ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseShiftRightX*)Rogue_program.type_CmdBitwiseShiftRightX->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_add_subtract( THIS ))) ))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_add_subtract( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( THIS, ((RogueParser__parse_multiply_divide_mod( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_add_subtract__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_plus ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdAdd*)Rogue_program.type_CmdAdd->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_multiply_divide_mod( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_minus ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdSubtract*)Rogue_program.type_CmdSubtract->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_multiply_divide_mod( THIS ))) ))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_multiply_divide_mod( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_multiply_divide_mod__Cmd( THIS, ((RogueParser__parse_power( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_multiply_divide_mod__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_times ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_multiply_divide_mod__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMultiply*)Rogue_program.type_CmdMultiply->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_power( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_slash ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_multiply_divide_mod__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdDivide*)Rogue_program.type_CmdDivide->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_power( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_percent ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_multiply_divide_mod__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMod*)Rogue_program.type_CmdMod->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_power( THIS ))) ))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_power( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_power__Cmd( THIS, ((RogueParser__parse_pre_unary( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_power__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_caret ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_power__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdPower*)Rogue_program.type_CmdPower->create_and_init_object())), t_1, lhs_0, ((RogueParser__parse_pre_unary( THIS ))) ))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_pre_unary( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_minus ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdNegate*)Rogue_program.type_CmdNegate->create_and_init_object())), t_0, ((RogueParser__parse_pre_unary( THIS ))) ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_not ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)Rogue_program.type_CmdLogicalNot->create_and_init_object())), t_0, ((RogueParser__parse_pre_unary( THIS ))) ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_exclamation_point ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdBitwiseNot*)Rogue_program.type_CmdBitwiseNot->create_and_init_object())), t_0, ((RogueParser__parse_pre_unary( THIS ))) ))))));
  }
  return (RogueClassCmd*)(((RogueParser__parse_post_unary( THIS ))));
}

RogueClassCmd* RogueParser__parse_post_unary( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_post_unary__Cmd( THIS, ((RogueParser__parse_member_access( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_post_unary__Cmd( RogueClassParser* THIS, RogueClassCmd* operand_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_question_mark ))))
  {
    return (RogueClassCmd*)(((RogueParser__parse_post_unary__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalize*)Rogue_program.type_CmdLogicalize->create_and_init_object())), t_1, operand_0 ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_exclamation_point ))))
  {
    return (RogueClassCmd*)(((RogueParser__parse_post_unary__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdGetOptionalValue__init__Token_Cmd( ((RogueClassCmdGetOptionalValue*)Rogue_program.type_CmdGetOptionalValue->create_and_init_object()), t_1, operand_0 ))))) ))));
  }
  return (RogueClassCmd*)(operand_0);
}

RogueClassCmd* RogueParser__parse_member_access( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( THIS, ((RogueParser__parse_term( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_member_access__Cmd( RogueClassParser* THIS, RogueClassCmd* context_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_dot ))))
  {
    RogueClassCmd* access_2 = (((RogueParser__parse_access__Token_Cmd( THIS, t_1, context_0 ))));
    return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( THIS, access_2 ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_open_bracket ))))
  {
    RogueParser__consume_eols( THIS );
    RogueClassCmdElementAccess* access_3 = (((RogueCmdElementAccess__init__Token_Cmd_Cmd( ((RogueClassCmdElementAccess*)Rogue_program.type_CmdElementAccess->create_and_init_object()), t_1, context_0, ((RogueParser__parse_expression( THIS ))) ))));
    RogueParser__consume_eols( THIS );
    RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_bracket, ((RogueString*)(NULL)) );
    return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( THIS, ((RogueClassCmd*)(access_3)) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_arrow ))))
  {
    RogueParser__consume_eols( THIS );
    RogueClassType* to_type_4 = (((Rogue_Parser__parse_type( THIS ))));
    return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdConvertToType*)Rogue_program.type_CmdConvertToType->create_and_init_object())), t_1, context_0, to_type_4 ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_colon_colon ))))
  {
    RogueParser__consume_eols( THIS );
    RogueString* name_5 = (((RogueParser__read_identifier__Logical( THIS, false ))));
    RogueTypeList* arg_types_6 = 0;
    RogueParser__consume_eols( THIS );
    if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_open_paren ))))
    {
      arg_types_6 = ((RogueTypeList*)((RogueTypeList__init( ((RogueTypeList*)Rogue_program.type_TypeList->create_and_init_object()) ))));
      RogueLogical first_7 = (true);
      while ((first_7 || ((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_comma )))))
      {
        first_7 = ((RogueLogical)false);
        RogueParser__consume_eols( THIS );
        RogueTypeList__add__Type( arg_types_6, ((Rogue_Parser__parse_type( THIS ))) );
        RogueParser__consume_eols( THIS );
      }
      RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_paren, ((RogueString*)(NULL)) );
      RogueParser__consume_eols( THIS );
    }
    RogueClassType* return_type_8 = 0;
    if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_arrow ))))
    {
      return_type_8 = ((RogueClassType*)((Rogue_Parser__parse_type( THIS ))));
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateCallback__init__Token_Cmd_String_String_Type( ((RogueClassCmdCreateCallback*)Rogue_program.type_CmdCreateCallback->create_and_init_object()), t_1, context_0, name_5, ((RogueProgram__get_callback_type_signature__TypeList( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), arg_types_6 ))), return_type_8 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_as ))))
  {
    RogueParser__consume_eols( THIS );
    RogueClassType* as_type_9 = (((Rogue_Parser__parse_type( THIS ))));
    return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdAs*)Rogue_program.type_CmdAs->create_and_init_object())), t_1, context_0, as_type_9 ))))) ))));
  }
  return (RogueClassCmd*)(context_0);
}

RogueClassCmd* RogueParser__parse_access__Token_Cmd( RogueClassParser* THIS, RogueClassToken* t_0, RogueClassCmd* context_1 )
{
  RogueParser__consume_eols( THIS );
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_meta ))))
  {
    RogueClassType* context_type_2 = 0;
    if (!!(context_1))
    {
      context_type_2 = ((RogueClassType*)(call_ROGUEM46( 15, (RogueClassCmd*)(context_1) )));
    }
    else
    {
      context_type_2 = ((RogueClassType*)THIS->_this_type);
    }
    if (!(!!(context_type_2)))
    {
      throw ((RogueToken__error__String( t_0, Rogue_program.literal_strings[234] )));
    }
    RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_dot, ((RogueString*)(NULL)) );
    t_0 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
    RogueString* id_3 = (((RogueParser__read_identifier__Logical( THIS, false ))));
    {
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( id_3, Rogue_program.literal_strings[235] ))) == 0)
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdDefaultValue__init__Token_Type( ((RogueClassCmdDefaultValue*)Rogue_program.type_CmdDefaultValue->create_and_init_object()), t_0, context_type_2 ))))));
      }
      else
      {
        throw ((RogueToken__error__String( t_0, Rogue_program.literal_strings[236] )));
      }
    }
  }
  RogueString* name_4 = (((RogueParser__read_identifier__Logical( THIS, true ))));
  if (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::symbol_open_specialize ))))
  {
    name_4 = ((RogueString*)((RogueString__operatorPLUS__String( name_4, ((RogueParser__parse_specialization_string( THIS ))) ))));
  }
  for (;;)
  {
    if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_empty_brackets ))))
    {
      name_4 = ((RogueString*)((RogueString__operatorPLUS__String( name_4, Rogue_program.literal_strings[163] ))));
    }
    else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_question_mark ))))
    {
      name_4 = ((RogueString*)((RogueString__operatorPLUS__String( name_4, Rogue_program.literal_strings[183] ))));
    }
    else
    {
      goto _auto_710;
    }
  }
  _auto_710:;
  RogueClassCmdAccess* access_5 = (((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), t_0, name_4 ))));
  access_5->args = ((RogueParser__parse_args__TokenType_TokenType( THIS, RogueClassTokenType::symbol_open_paren, RogueClassTokenType::symbol_close_paren )));
  access_5->context = context_1;
  return (RogueClassCmd*)(((RogueClassCmd*)(access_5)));
}

RogueClassCmdArgs* RogueParser__parse_args__TokenType_TokenType( RogueClassParser* THIS, RogueClassTokenType* start_type_0, RogueClassTokenType* end_type_1 )
{
  if (!(((RogueParser__consume__TokenType( THIS, start_type_0 )))))
  {
    return (RogueClassCmdArgs*)(((RogueClassCmdArgs*)(NULL)));
  }
  RogueParser__consume_eols( THIS );
  RogueClassCmdArgs* args_2 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()) ))));
  if (!(((RogueParser__consume__TokenType( THIS, end_type_1 )))))
  {
    RogueLogical first_3 = (true);
    while ((first_3 || ((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_comma )))))
    {
      RogueParser__consume_eols( THIS );
      first_3 = ((RogueLogical)false);
      RogueCmdList__add__Cmd( ((RogueCmdList*)args_2), ((RogueParser__parse_expression( THIS ))) );
    }
    RogueParser__consume_eols( THIS );
    RogueParser__must_consume__TokenType_String( THIS, end_type_1, ((RogueString*)(NULL)) );
  }
  return (RogueClassCmdArgs*)(args_2);
}

RogueString* RogueParser__parse_specialization_string( RogueClassParser* THIS )
{
  RogueStringBuilder__clear( THIS->string_buffer );
  RogueParser__read( THIS );
  RogueStringBuilder__print__String( THIS->string_buffer, Rogue_program.literal_strings[177] );
  RogueLogical first_0 = (true);
  while ((first_0 || ((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_comma )))))
  {
    if (first_0)
    {
      first_0 = ((RogueLogical)false);
    }
    else
    {
      RogueStringBuilder__print__Character( THIS->string_buffer, (RogueCharacter)',' );
    }
    RogueParser__parse_specializer__StringBuilder_TokenList( THIS, THIS->string_buffer, ((RogueTokenList*)(NULL)) );
  }
  RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_specialize, ((RogueString*)(NULL)) );
  RogueStringBuilder__print__String( THIS->string_buffer, Rogue_program.literal_strings[103] );
  return (RogueString*)(((RogueStringBuilder__to_String( THIS->string_buffer ))));
}

void RogueParser__parse_specializer__StringBuilder_TokenList( RogueClassParser* THIS, RogueStringBuilder* buffer_0, RogueTokenList* tokens_1 )
{
  RogueInteger nesting_level_2 = (1);
  while (((RogueTokenReader__has_another( THIS->reader ))))
  {
    if (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::eol ))))
    {
      throw ((RogueToken__error__String( ((RogueParser__peek( THIS ))), Rogue_program.literal_strings[237] )));
    }
    RogueClassToken* t_3 = (((RogueParser__peek( THIS ))));
    if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_backslash ))))
    {
      if (!!(tokens_1))
      {
        RogueTokenList__add__Token( tokens_1, t_3 );
      }
      RogueStringBuilder__print__String( buffer_0, Rogue_program.literal_strings[154] );
      if (!(((RogueTokenReader__has_another( THIS->reader )))))
      {
        throw ((RogueToken__error__String( t_3, Rogue_program.literal_strings[44] )));
      }
      t_3 = ((RogueClassToken*)((RogueParser__read( THIS ))));
      RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(t_3)) );
      if (!!(tokens_1))
      {
        RogueTokenList__add__Token( tokens_1, t_3 );
      }
    }
    else if (t_3->_type == RogueClassTokenType::symbol_comma)
    {
      if (nesting_level_2 == 1)
      {
        return;
      }
      RogueParser__read( THIS );
      if (!!(tokens_1))
      {
        RogueTokenList__add__Token( tokens_1, t_3 );
      }
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_open_specialize ))))
    {
      if (!!(tokens_1))
      {
        RogueTokenList__add__Token( tokens_1, t_3 );
      }
      RogueStringBuilder__print__String( buffer_0, Rogue_program.literal_strings[177] );
      ++nesting_level_2;
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::symbol_close_specialize ))))
    {
      --nesting_level_2;
      if (nesting_level_2 == 0)
      {
        return;
      }
      else
      {
        RogueParser__read( THIS );
        if (!!(tokens_1))
        {
          RogueTokenList__add__Token( tokens_1, t_3 );
        }
        RogueStringBuilder__print__String( buffer_0, Rogue_program.literal_strings[103] );
      }
    }
    else
    {
      if (!!(tokens_1))
      {
        RogueTokenList__add__Token( tokens_1, t_3 );
      }
      RogueStringBuilder__print__String( buffer_0, (call_ROGUEM33( 1, (RogueClassToken*)(((RogueParser__read( THIS )))) )) );
    }
  }
}

RogueClassCmd* RogueParser__parse_term( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_open_paren ))))
  {
    RogueParser__consume_eols( THIS );
    if (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::symbol_close_paren ))))
    {
      throw ((RogueToken__error__String( t_0, Rogue_program.literal_strings[241] )));
    }
    RogueClassCmd* result_1 = (((RogueParser__parse_expression( THIS ))));
    RogueParser__consume_eols( THIS );
    RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_paren, ((RogueString*)(NULL)) );
    return (RogueClassCmd*)(result_1);
  }
  else if (((((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::identifier ))) || ((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::symbol_at )))) || ((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::keyword_meta )))))
  {
    RogueClassCmd* result_2 = (((RogueParser__parse_access__Token_Cmd( THIS, t_0, ((RogueClassCmd*)(NULL)) ))));
    return (RogueClassCmd*)(result_2);
  }
  else if (((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::type_identifier ))))
  {
    RogueClassCmd* result_3 = (((RogueParser__parse_access__Token_Cmd( THIS, t_0, ((RogueClassCmd*)(NULL)) ))));
    return (RogueClassCmd*)(result_3);
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::literal_string ))))
  {
    if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_open_paren ))))
    {
      RogueLogical first_4 = (true);
      RogueClassCmdArgs* args_5 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()) ))));
      while ((first_4 || ((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_comma )))))
      {
        first_4 = ((RogueLogical)false);
        RogueCmdList__add__Cmd( ((RogueCmdList*)args_5), ((RogueParser__parse_expression( THIS ))) );
      }
      RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_paren, ((RogueString*)(NULL)) );
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdFormattedString__init__Token_String_CmdArgs( ((RogueClassCmdFormattedString*)Rogue_program.type_CmdFormattedString->create_and_init_object()), t_0, (call_ROGUEM33( 1, (RogueClassToken*)(t_0) )), args_5 ))))));
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Integer( ((RogueClassCmdLiteralString*)Rogue_program.type_CmdLiteralString->create_and_init_object()), t_0, (call_ROGUEM33( 1, (RogueClassToken*)(t_0) )), 0 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_null ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralNull__init__Token( ((RogueClassCmdLiteralNull*)Rogue_program.type_CmdLiteralNull->create_and_init_object()), t_0 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::literal_real ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)Rogue_program.type_CmdLiteralReal->create_and_init_object()), t_0, (call_ROGUEM37( 12, (RogueClassToken*)(t_0) )) ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::literal_integer ))))
  {
    RogueInteger value_6 = ((call_ROGUEM35( 10, (RogueClassToken*)(t_0) )));
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), t_0, value_6 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::literal_long ))))
  {
    RogueLong value_7 = ((call_ROGUEM36( 11, (RogueClassToken*)(t_0) )));
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLong__init__Token_Long( ((RogueClassCmdLiteralLong*)Rogue_program.type_CmdLiteralLong->create_and_init_object()), t_0, value_7 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::literal_character ))))
  {
    RogueCharacter value_8 = ((call_ROGUEM34( 9, (RogueClassToken*)(t_0) )));
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralCharacter__init__Token_Character( ((RogueClassCmdLiteralCharacter*)Rogue_program.type_CmdLiteralCharacter->create_and_init_object()), t_0, value_8 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_this ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)((RogueClassCmdLiteralThis*)Rogue_program.type_CmdLiteralThis->create_and_init_object())), t_0, THIS->_this_type ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_true ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), t_0, true ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_false ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), t_0, false ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_pi ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)Rogue_program.type_CmdLiteralReal->create_and_init_object()), t_0, 3.141592653589793 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_open_bracket ))))
  {
    RogueClassCmdCreateList* list_9 = (((RogueCmdCreateList__init__Token_CmdArgs_Type( ((RogueClassCmdCreateList*)Rogue_program.type_CmdCreateList->create_and_init_object()), t_0, ((RogueCmdArgs__init( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()) ))), ((RogueClassType*)(NULL)) ))));
    RogueParser__consume_eols( THIS );
    if (!(((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_close_bracket )))))
    {
      RogueLogical first_10 = (true);
      while ((first_10 || ((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_comma )))))
      {
        first_10 = ((RogueLogical)false);
        RogueCmdList__add__Cmd( ((RogueCmdList*)list_9->args), ((RogueParser__parse_expression( THIS ))) );
        RogueParser__consume_eols( THIS );
      }
      RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_bracket, ((RogueString*)(NULL)) );
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(list_9)));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_empty_brackets ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), t_0, Rogue_program.literal_strings[242], ((RogueCmdArgs__init( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()) ))) ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_prior ))))
  {
    RogueParser__consume_eols( THIS );
    RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_dot, ((RogueString*)(NULL)) );
    RogueParser__consume_eols( THIS );
    RogueString* name_11 = (((RogueParser__read_identifier__Logical( THIS, false ))));
    RogueClassCmdArgs* args_12 = (((RogueParser__parse_args__TokenType_TokenType( THIS, RogueClassTokenType::symbol_open_paren, RogueClassTokenType::symbol_close_paren ))));
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCallPriorMethod__init__Token_String_CmdArgs( ((RogueClassCmdCallPriorMethod*)Rogue_program.type_CmdCallPriorMethod->create_and_init_object()), t_0, name_11, args_12 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_await ))))
  {
    RogueClassLocal* result_var_13 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object, ((RogueClassCmd*)(NULL)) ))));
    RogueClassCmdStatementList* statement_list_14 = (((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) ))));
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->cur_statement_list), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local( ((RogueClassCmdLocalDeclaration*)Rogue_program.type_CmdLocalDeclaration->create_and_init_object()), t_0, result_var_13 ))))) );
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->cur_statement_list), ((RogueClassCmd*)(((RogueCmdAwait__init__Token_Cmd_CmdStatementList_Local( ((RogueClassCmdAwait*)Rogue_program.type_CmdAwait->create_and_init_object()), t_0, ((RogueParser__parse_expression( THIS ))), statement_list_14, result_var_13 ))))) );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), t_0, result_var_13->name ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_function ))))
  {
    RogueFnParamList* parameters_15 = 0;
    RogueClassType* return_type_16 = 0;
    if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_open_paren ))))
    {
      if (!(((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_close_paren )))))
      {
        parameters_15 = ((RogueFnParamList*)((RogueFnParamList__init( ((RogueFnParamList*)Rogue_program.type_FnParamList->create_and_init_object()) ))));
        RogueLogical first_17 = (true);
        while ((first_17 || ((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_comma )))))
        {
          first_17 = ((RogueLogical)false);
          RogueClassFnParam* param_18 = (((RogueFnParam__init__String( ((RogueClassFnParam*)Rogue_program.type_FnParam->create_and_init_object()), ((RogueParser__read_identifier__Logical( THIS, false ))) ))));
          RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_colon, ((RogueString*)(NULL)) );
          param_18->_type = ((Rogue_Parser__parse_type( THIS )));
          RogueFnParamList__add__FnParam( parameters_15, param_18 );
        }
        RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_paren, ((RogueString*)(NULL)) );
      }
    }
    if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_arrow ))))
    {
      return_type_16 = ((RogueClassType*)((Rogue_Parser__parse_type( THIS ))));
    }
    RogueFnArgList* with_args_19 = 0;
    if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_with ))))
    {
      RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_open_paren, ((RogueString*)(NULL)) );
      if (!(((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_close_paren )))))
      {
        with_args_19 = ((RogueFnArgList*)((RogueFnArgList__init( ((RogueFnArgList*)Rogue_program.type_FnArgList->create_and_init_object()) ))));
        RogueLogical first_20 = (true);
        while ((first_20 || ((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_comma )))))
        {
          first_20 = ((RogueLogical)false);
          RogueClassToken* t2_21 = (((RogueParser__peek( THIS ))));
          RogueString* name_22 = (((RogueParser__read_identifier__Logical( THIS, false ))));
          RogueClassCmd* value_23 = 0;
          if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_equals ))))
          {
            value_23 = ((RogueClassCmd*)((RogueParser__parse_expression( THIS ))));
          }
          else
          {
            value_23 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), t2_21, name_22 ))))));
          }
          RogueClassFnArg* arg_24 = (((RogueFnArg__init__String_Cmd( ((RogueClassFnArg*)Rogue_program.type_FnArg->create_and_init_object()), name_22, value_23 ))));
          if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_colon ))))
          {
            RogueFnArg__set_type__Type( arg_24, ((Rogue_Parser__parse_type( THIS ))) );
          }
          RogueFnArgList__add__FnArg( with_args_19, arg_24 );
        }
        RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_paren, ((RogueString*)(NULL)) );
      }
    }
    RogueClassCmdStatementList* statements_25 = (((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) ))));
    if (((RogueParser__consume_eols( THIS ))))
    {
      RogueParser__parse_multi_line_statements__CmdStatementList( THIS, statements_25 );
      RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::keyword_endFunction, ((RogueString*)(NULL)) );
    }
    else
    {
      RogueParser__parse_single_line_statements__CmdStatementList( THIS, statements_25 );
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateFunction__init__Token_FnParamList_Type_FnArgList_CmdStatementList( ((RogueClassCmdCreateFunction*)Rogue_program.type_CmdCreateFunction->create_and_init_object()), t_0, parameters_15, return_type_16, with_args_19, statements_25 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::keyword_native ))))
  {
    RogueParser__consume_eols( THIS );
    RogueLogical has_parens_26 = (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_open_paren ))));
    if (has_parens_26)
    {
      RogueParser__consume_eols( THIS );
    }
    if (!(((RogueParser__next_is__TokenType( THIS, RogueClassTokenType::literal_string )))))
    {
      throw ((RogueToken__error__String( ((RogueParser__peek( THIS ))), Rogue_program.literal_strings[261] )));
    }
    RogueString* code_27 = ((call_ROGUEM33( 1, (RogueClassToken*)(((RogueParser__read( THIS )))) )));
    if (has_parens_26)
    {
      RogueParser__consume_eols( THIS );
      RogueParser__must_consume__TokenType_String( THIS, RogueClassTokenType::symbol_close_paren, ((RogueString*)(NULL)) );
    }
    RogueClassType* result_type_28 = 0;
    if (((RogueParser__consume__TokenType( THIS, RogueClassTokenType::symbol_arrow ))))
    {
      result_type_28 = ((RogueClassType*)((Rogue_Parser__parse_type( THIS ))));
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdNativeCode__init__Token_String_Type( ((RogueClassCmdNativeCode*)Rogue_program.type_CmdNativeCode->create_and_init_object()), t_0, code_27, result_type_28 ))))));
  }
  else
  {
    throw ((RogueToken__error__String( ((RogueParser__peek( THIS ))), ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__Object( Rogue_program.literal_strings[262], ((RogueObject*)(((RogueParser__peek( THIS ))))) ))), Rogue_program.literal_strings[13] ))) )));
  }
}

RogueClassParser* RogueParser__init_object( RogueClassParser* THIS )
{
  THIS->local_declarations = ((RogueLocalList__init( ((RogueLocalList*)Rogue_program.type_LocalList->create_and_init_object()) )));
  THIS->property_list = ((RoguePropertyList__init( ((RoguePropertyList*)Rogue_program.type_PropertyList->create_and_init_object()) )));
  THIS->string_buffer = ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) )));
  return (RogueClassParser*)(THIS);
}

RogueString* RogueTokenList__to_String( RogueTokenList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueTokenList* _auto_740_2 = (THIS);
    RogueInteger _auto_741_3 = (0);
    for (;_auto_741_3 < _auto_740_2->count;++_auto_741_3)
    {
      RogueClassToken* value_4 = (((RogueClassToken*)(_auto_740_2->data->objects[_auto_741_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueTokenList__type_name( RogueTokenList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[925]);
}

RogueTokenList* RogueTokenList__init_object( RogueTokenList* THIS )
{
  return (RogueTokenList*)(THIS);
}

RogueTokenList* RogueTokenList__init( RogueTokenList* THIS )
{
  RogueTokenList__init__Integer( THIS, 10 );
  return (RogueTokenList*)(THIS);
}

RogueTokenList* RogueTokenList__init__Integer( RogueTokenList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassToken*), true );
  return (RogueTokenList*)(THIS);
}

RogueTokenList* RogueTokenList__add__Token( RogueTokenList* THIS, RogueClassToken* value_0 )
{
  ((RogueTokenList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTokenList*)(THIS);
}

RogueTokenList* RogueTokenList__add__TokenList( RogueTokenList* THIS, RogueTokenList* other_0 )
{
  RogueTokenList__reserve__Integer( THIS, other_0->count );
  {
    RogueTokenList* _auto_744_1 = (other_0);
    RogueInteger _auto_745_2 = (0);
    for (;_auto_745_2 < _auto_744_1->count;++_auto_745_2)
    {
      RogueClassToken* value_3 = (((RogueClassToken*)(_auto_744_1->data->objects[_auto_745_2])));
      RogueTokenList__add__Token( THIS, value_3 );
    }
  }
  return (RogueTokenList*)(THIS);
}

RogueInteger RogueTokenList__capacity( RogueTokenList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueClassToken* RogueTokenList__last( RogueTokenList* THIS )
{
  return (RogueClassToken*)(((RogueClassToken*)(THIS->data->objects[(THIS->count - 1)])));
}

RogueTokenList* RogueTokenList__reserve__Integer( RogueTokenList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassToken*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueTokenList__capacity( THIS ))) + ((RogueTokenList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassToken*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTokenList*)(THIS);
}

RogueClassToken* RogueTokenList__remove_at__Integer( RogueTokenList* THIS, RogueInteger index_0 )
{
  RogueClassToken* result_1 = (((RogueClassToken*)(THIS->data->objects[index_0])));
  THIS->data->set(index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  RogueClassToken* zero_value_2 = 0;
  THIS->data->objects[THIS->count] = zero_value_2;
  --THIS->count;
  return (RogueClassToken*)(result_1);
}

RogueClassToken* RogueTokenList__remove_last( RogueTokenList* THIS )
{
  return (RogueClassToken*)(((RogueTokenList__remove_at__Integer( THIS, (THIS->count - 1) ))));
}

RogueString* RogueLineReader__type_name( RogueClassLineReader* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[551]);
}

RogueLogical RogueLineReader__has_another( RogueClassLineReader* THIS )
{
  return (RogueLogical)(!!(THIS->next));
}

RogueString* RogueLineReader__read( RogueClassLineReader* THIS )
{
  RogueString* result_0 = (THIS->next);
  THIS->next = ((RogueLineReader__prepare_next( THIS )));
  return (RogueString*)(result_0);
}

RogueClassLineReader* RogueLineReader__init__CharacterReader( RogueClassLineReader* THIS, RogueClassCharacterReader* _auto_213_0 )
{
  THIS->source = _auto_213_0;
  THIS->next = ((RogueLineReader__prepare_next( THIS )));
  return (RogueClassLineReader*)(THIS);
}

RogueClassLineReader* RogueLineReader__init__File( RogueClassLineReader* THIS, RogueClassFile* file_0 )
{
  RogueLineReader__init__CharacterReader( THIS, (((RogueClassCharacterReader*)((RogueFile__reader__String( file_0->filepath ))))) );
  return (RogueClassLineReader*)(THIS);
}

RogueClassLineReader* RogueLineReader__init__String( RogueClassLineReader* THIS, RogueString* string_0 )
{
  RogueLineReader__init__CharacterReader( THIS, (((RogueClassCharacterReader*)(((RogueString__reader( string_0 )))))) );
  return (RogueClassLineReader*)(THIS);
}

RogueString* RogueLineReader__prepare_next( RogueClassLineReader* THIS )
{
  if (!((RogueCharacterReader__has_another( (RogueObject*)THIS->source ))))
  {
    return (RogueString*)(((RogueString*)(NULL)));
  }
  RogueStringBuilder__clear( THIS->buffer );
  while ((RogueCharacterReader__has_another( (RogueObject*)THIS->source )))
  {
    RogueCharacter ch_0 = ((RogueCharacterReader__read( (RogueObject*)THIS->source )));
    if (ch_0 == (RogueCharacter)10)
    {
      return (RogueString*)(((RogueStringBuilder__to_String( THIS->buffer ))));
    }
    RogueStringBuilder__print__Character( THIS->buffer, ch_0 );
  }
  return (RogueString*)(((RogueStringBuilder__to_String( THIS->buffer ))));
}

RogueClassLineReader* RogueLineReader__init_object( RogueClassLineReader* THIS )
{
  THIS->buffer = ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) )));
  return (RogueClassLineReader*)(THIS);
}

RogueString* RogueTypeParameterList__to_String( RogueTypeParameterList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueTypeParameterList* _auto_750_2 = (THIS);
    RogueInteger _auto_751_3 = (0);
    for (;_auto_751_3 < _auto_750_2->count;++_auto_751_3)
    {
      RogueClassTypeParameter* value_4 = (((RogueClassTypeParameter*)(_auto_750_2->data->objects[_auto_751_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueTypeParameterList__type_name( RogueTypeParameterList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[926]);
}

RogueTypeParameterList* RogueTypeParameterList__init_object( RogueTypeParameterList* THIS )
{
  return (RogueTypeParameterList*)(THIS);
}

RogueTypeParameterList* RogueTypeParameterList__init( RogueTypeParameterList* THIS )
{
  RogueTypeParameterList__init__Integer( THIS, 10 );
  return (RogueTypeParameterList*)(THIS);
}

RogueTypeParameterList* RogueTypeParameterList__init__Integer( RogueTypeParameterList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassTypeParameter*), true );
  return (RogueTypeParameterList*)(THIS);
}

RogueTypeParameterList* RogueTypeParameterList__add__TypeParameter( RogueTypeParameterList* THIS, RogueClassTypeParameter* value_0 )
{
  ((RogueTypeParameterList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTypeParameterList*)(THIS);
}

RogueInteger RogueTypeParameterList__capacity( RogueTypeParameterList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTypeParameterList* RogueTypeParameterList__reserve__Integer( RogueTypeParameterList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassTypeParameter*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueTypeParameterList__capacity( THIS ))) + ((RogueTypeParameterList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassTypeParameter*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTypeParameterList*)(THIS);
}

RogueString* RogueTypeParameter__type_name( RogueClassTypeParameter* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[552]);
}

RogueClassTypeParameter* RogueTypeParameter__init__Token_String( RogueClassTypeParameter* THIS, RogueClassToken* _auto_228_0, RogueString* _auto_229_1 )
{
  THIS->name = _auto_229_1;
  THIS->t = _auto_228_0;
  return (RogueClassTypeParameter*)(THIS);
}

RogueClassTypeParameter* RogueTypeParameter__init_object( RogueClassTypeParameter* THIS )
{
  return (RogueClassTypeParameter*)(THIS);
}

RogueString* RogueAugmentList__to_String( RogueAugmentList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueAugmentList* _auto_760_2 = (THIS);
    RogueInteger _auto_761_3 = (0);
    for (;_auto_761_3 < _auto_760_2->count;++_auto_761_3)
    {
      RogueClassAugment* value_4 = (((RogueClassAugment*)(_auto_760_2->data->objects[_auto_761_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueAugmentList__type_name( RogueAugmentList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[927]);
}

RogueAugmentList* RogueAugmentList__init_object( RogueAugmentList* THIS )
{
  return (RogueAugmentList*)(THIS);
}

RogueAugmentList* RogueAugmentList__init( RogueAugmentList* THIS )
{
  RogueAugmentList__init__Integer( THIS, 10 );
  return (RogueAugmentList*)(THIS);
}

RogueAugmentList* RogueAugmentList__init__Integer( RogueAugmentList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassAugment*), true );
  return (RogueAugmentList*)(THIS);
}

RogueAugmentList* RogueAugmentList__add__Augment( RogueAugmentList* THIS, RogueClassAugment* value_0 )
{
  ((RogueAugmentList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueAugmentList*)(THIS);
}

RogueInteger RogueAugmentList__capacity( RogueAugmentList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueAugmentList* RogueAugmentList__reserve__Integer( RogueAugmentList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassAugment*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueAugmentList__capacity( THIS ))) + ((RogueAugmentList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassAugment*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueAugmentList*)(THIS);
}

RogueString* RogueAugment__type_name( RogueClassAugment* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[553]);
}

RogueClassAugment* RogueAugment__init__Token_String( RogueClassAugment* THIS, RogueClassToken* _auto_231_0, RogueString* _auto_232_1 )
{
  THIS->name = _auto_232_1;
  THIS->t = _auto_231_0;
  return (RogueClassAugment*)(THIS);
}

RogueClassAugment* RogueAugment__init_object( RogueClassAugment* THIS )
{
  THIS->base_types = ((RogueTypeList__init( ((RogueTypeList*)Rogue_program.type_TypeList->create_and_init_object()) )));
  THIS->tokens = ((RogueTokenList__init( ((RogueTokenList*)Rogue_program.type_TokenList->create_and_init_object()) )));
  return (RogueClassAugment*)(THIS);
}

RogueString* RogueAugmentArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[596]);
}

RogueString* RogueString_TokenTypeTable__to_String( RogueClassString_TokenTypeTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_TokenTypeTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))) ))) ))));
}

RogueString* RogueString_TokenTypeTable__type_name( RogueClassString_TokenTypeTable* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[554]);
}

RogueClassString_TokenTypeTable* RogueString_TokenTypeTable__init( RogueClassString_TokenTypeTable* THIS )
{
  RogueString_TokenTypeTable__init__Integer( THIS, 16 );
  return (RogueClassString_TokenTypeTable*)(THIS);
}

RogueClassString_TokenTypeTable* RogueString_TokenTypeTable__init__Integer( RogueClassString_TokenTypeTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_TokenTypeTableEntryList__init__Integer_String_TokenTypeTableEntry( ((RogueTableEntry_of_String_TokenTypeList*)Rogue_program.type_TableEntry_of_String_TokenTypeList->create_and_init_object()), bin_count_0, ((RogueClassString_TokenTypeTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  return (RogueClassString_TokenTypeTable*)(THIS);
}

RogueClassString_TokenTypeTableEntry* RogueString_TokenTypeTable__find__String( RogueClassString_TokenTypeTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_TokenTypeTableEntry* entry_2 = (((RogueClassString_TokenTypeTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_TokenTypeTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_TokenTypeTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_TokenTypeTableEntry*)(((RogueClassString_TokenTypeTableEntry*)(NULL)));
}

RogueClassTokenType* RogueString_TokenTypeTable__get__String( RogueClassString_TokenTypeTable* THIS, RogueString* key_0 )
{
  RogueClassString_TokenTypeTableEntry* entry_1 = (((RogueString_TokenTypeTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassTokenType*)(entry_1->value);
  }
  else
  {
    RogueClassTokenType* default_value_2 = 0;
    return (RogueClassTokenType*)(default_value_2);
  }
}

void RogueString_TokenTypeTable__set__String_TokenType( RogueClassString_TokenTypeTable* THIS, RogueString* key_0, RogueClassTokenType* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_TokenTypeTableEntry* entry_4 = (((RogueClassString_TokenTypeTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_TokenTypeTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_TokenTypeTableEntry*)((RogueString_TokenTypeTableEntry__init__String_TokenType_Integer( ((RogueClassString_TokenTypeTableEntry*)Rogue_program.type_String_TokenTypeTableEntry->create_and_init_object()), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_TokenTypeTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_TokenTypeTable__print_to__StringBuilder( RogueClassString_TokenTypeTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_TokenTypeTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_TokenTypeTable* RogueString_TokenTypeTable__init_object( RogueClassString_TokenTypeTable* THIS )
{
  return (RogueClassString_TokenTypeTable*)(THIS);
}

RogueString* RogueLiteralCharacterToken__to_String( RogueClassLiteralCharacterToken* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Character( Rogue_program.literal_strings[0], THIS->value ))));
}

RogueString* RogueLiteralCharacterToken__type_name( RogueClassLiteralCharacterToken* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[629]);
}

RogueCharacter RogueLiteralCharacterToken__to_Character( RogueClassLiteralCharacterToken* THIS )
{
  return (RogueCharacter)(THIS->value);
}

RogueClassLiteralCharacterToken* RogueLiteralCharacterToken__init_object( RogueClassLiteralCharacterToken* THIS )
{
  return (RogueClassLiteralCharacterToken*)(THIS);
}

RogueClassLiteralCharacterToken* RogueLiteralCharacterToken__init__TokenType_Character( RogueClassLiteralCharacterToken* THIS, RogueClassTokenType* _auto_236_0, RogueCharacter _auto_237_1 )
{
  THIS->value = _auto_237_1;
  THIS->_type = _auto_236_0;
  return (RogueClassLiteralCharacterToken*)(THIS);
}

RogueString* RogueLiteralLongToken__to_String( RogueClassLiteralLongToken* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Long( Rogue_program.literal_strings[0], THIS->value ))));
}

RogueString* RogueLiteralLongToken__type_name( RogueClassLiteralLongToken* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[630]);
}

RogueInteger RogueLiteralLongToken__to_Integer( RogueClassLiteralLongToken* THIS )
{
  return (RogueInteger)(((RogueInteger)(THIS->value)));
}

RogueLong RogueLiteralLongToken__to_Long( RogueClassLiteralLongToken* THIS )
{
  return (RogueLong)(THIS->value);
}

RogueReal RogueLiteralLongToken__to_Real( RogueClassLiteralLongToken* THIS )
{
  return (RogueReal)(((RogueReal)(THIS->value)));
}

RogueClassLiteralLongToken* RogueLiteralLongToken__init_object( RogueClassLiteralLongToken* THIS )
{
  return (RogueClassLiteralLongToken*)(THIS);
}

RogueClassLiteralLongToken* RogueLiteralLongToken__init__TokenType_Long( RogueClassLiteralLongToken* THIS, RogueClassTokenType* _auto_238_0, RogueLong _auto_239_1 )
{
  THIS->value = _auto_239_1;
  THIS->_type = _auto_238_0;
  return (RogueClassLiteralLongToken*)(THIS);
}

RogueString* RogueLiteralIntegerToken__to_String( RogueClassLiteralIntegerToken* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Integer( Rogue_program.literal_strings[0], THIS->value ))));
}

RogueString* RogueLiteralIntegerToken__type_name( RogueClassLiteralIntegerToken* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[631]);
}

RogueInteger RogueLiteralIntegerToken__to_Integer( RogueClassLiteralIntegerToken* THIS )
{
  return (RogueInteger)(THIS->value);
}

RogueReal RogueLiteralIntegerToken__to_Real( RogueClassLiteralIntegerToken* THIS )
{
  return (RogueReal)(((RogueReal)(THIS->value)));
}

RogueClassLiteralIntegerToken* RogueLiteralIntegerToken__init_object( RogueClassLiteralIntegerToken* THIS )
{
  return (RogueClassLiteralIntegerToken*)(THIS);
}

RogueClassLiteralIntegerToken* RogueLiteralIntegerToken__init__TokenType_Integer( RogueClassLiteralIntegerToken* THIS, RogueClassTokenType* _auto_240_0, RogueInteger _auto_241_1 )
{
  THIS->value = _auto_241_1;
  THIS->_type = _auto_240_0;
  return (RogueClassLiteralIntegerToken*)(THIS);
}

RogueString* RogueLiteralRealToken__to_String( RogueClassLiteralRealToken* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Real( Rogue_program.literal_strings[0], THIS->value ))));
}

RogueString* RogueLiteralRealToken__type_name( RogueClassLiteralRealToken* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[632]);
}

RogueInteger RogueLiteralRealToken__to_Integer( RogueClassLiteralRealToken* THIS )
{
  return (RogueInteger)(((RogueInteger)(THIS->value)));
}

RogueReal RogueLiteralRealToken__to_Real( RogueClassLiteralRealToken* THIS )
{
  return (RogueReal)(THIS->value);
}

RogueClassLiteralRealToken* RogueLiteralRealToken__init_object( RogueClassLiteralRealToken* THIS )
{
  return (RogueClassLiteralRealToken*)(THIS);
}

RogueClassLiteralRealToken* RogueLiteralRealToken__init__TokenType_Real( RogueClassLiteralRealToken* THIS, RogueClassTokenType* _auto_242_0, RogueReal _auto_243_1 )
{
  THIS->value = _auto_243_1;
  THIS->_type = _auto_242_0;
  return (RogueClassLiteralRealToken*)(THIS);
}

RogueString* RogueLiteralStringToken__to_String( RogueClassLiteralStringToken* THIS )
{
  return (RogueString*)(THIS->value);
}

RogueString* RogueLiteralStringToken__type_name( RogueClassLiteralStringToken* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[633]);
}

RogueClassLiteralStringToken* RogueLiteralStringToken__init_object( RogueClassLiteralStringToken* THIS )
{
  return (RogueClassLiteralStringToken*)(THIS);
}

RogueClassLiteralStringToken* RogueLiteralStringToken__init__TokenType_String( RogueClassLiteralStringToken* THIS, RogueClassTokenType* _auto_244_0, RogueString* _auto_245_1 )
{
  THIS->value = _auto_245_1;
  THIS->_type = _auto_244_0;
  return (RogueClassLiteralStringToken*)(THIS);
}

RogueString* RogueTokenArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[597]);
}

RogueString* RogueString_TypeSpecializerTable__to_String( RogueClassString_TypeSpecializerTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_TypeSpecializerTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))) ))) ))));
}

RogueString* RogueString_TypeSpecializerTable__type_name( RogueClassString_TypeSpecializerTable* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[555]);
}

RogueClassString_TypeSpecializerTable* RogueString_TypeSpecializerTable__init( RogueClassString_TypeSpecializerTable* THIS )
{
  RogueString_TypeSpecializerTable__init__Integer( THIS, 16 );
  return (RogueClassString_TypeSpecializerTable*)(THIS);
}

RogueClassString_TypeSpecializerTable* RogueString_TypeSpecializerTable__init__Integer( RogueClassString_TypeSpecializerTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_TypeSpecializerTableEntryList__init__Integer_String_TypeSpecializerTableEntry( ((RogueTableEntry_of_String_TypeSpecializerList*)Rogue_program.type_TableEntry_of_String_TypeSpecializerList->create_and_init_object()), bin_count_0, ((RogueClassString_TypeSpecializerTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  return (RogueClassString_TypeSpecializerTable*)(THIS);
}

RogueInteger RogueString_TypeSpecializerTable__count( RogueClassString_TypeSpecializerTable* THIS )
{
  return (RogueInteger)(THIS->keys->count);
}

RogueClassString_TypeSpecializerTableEntry* RogueString_TypeSpecializerTable__find__String( RogueClassString_TypeSpecializerTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_TypeSpecializerTableEntry* entry_2 = (((RogueClassString_TypeSpecializerTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_TypeSpecializerTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_TypeSpecializerTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_TypeSpecializerTableEntry*)(((RogueClassString_TypeSpecializerTableEntry*)(NULL)));
}

RogueClassTypeSpecializer* RogueString_TypeSpecializerTable__get__String( RogueClassString_TypeSpecializerTable* THIS, RogueString* key_0 )
{
  RogueClassString_TypeSpecializerTableEntry* entry_1 = (((RogueString_TypeSpecializerTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassTypeSpecializer*)(entry_1->value);
  }
  else
  {
    RogueClassTypeSpecializer* default_value_2 = 0;
    return (RogueClassTypeSpecializer*)(default_value_2);
  }
}

void RogueString_TypeSpecializerTable__set__String_TypeSpecializer( RogueClassString_TypeSpecializerTable* THIS, RogueString* key_0, RogueClassTypeSpecializer* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_TypeSpecializerTableEntry* entry_4 = (((RogueClassString_TypeSpecializerTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_TypeSpecializerTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_TypeSpecializerTableEntry*)((RogueString_TypeSpecializerTableEntry__init__String_TypeSpecializer_Integer( ((RogueClassString_TypeSpecializerTableEntry*)Rogue_program.type_String_TypeSpecializerTableEntry->create_and_init_object()), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_TypeSpecializerTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_TypeSpecializerTable__print_to__StringBuilder( RogueClassString_TypeSpecializerTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_TypeSpecializerTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_TypeSpecializerTable* RogueString_TypeSpecializerTable__init_object( RogueClassString_TypeSpecializerTable* THIS )
{
  return (RogueClassString_TypeSpecializerTable*)(THIS);
}

RogueString* RogueTypeParameterArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[598]);
}

RogueString* RogueTypeSpecializer__type_name( RogueClassTypeSpecializer* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[556]);
}

RogueClassTypeSpecializer* RogueTypeSpecializer__init__String_Integer( RogueClassTypeSpecializer* THIS, RogueString* _auto_257_0, RogueInteger _auto_258_1 )
{
  THIS->index = _auto_258_1;
  THIS->name = _auto_257_0;
  return (RogueClassTypeSpecializer*)(THIS);
}

RogueClassTypeSpecializer* RogueTypeSpecializer__init_object( RogueClassTypeSpecializer* THIS )
{
  return (RogueClassTypeSpecializer*)(THIS);
}

RogueString* RogueString_TemplateTableEntryList__to_String( RogueTableEntry_of_String_TemplateList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_TemplateList* _auto_778_2 = (THIS);
    RogueInteger _auto_779_3 = (0);
    for (;_auto_779_3 < _auto_778_2->count;++_auto_779_3)
    {
      RogueClassString_TemplateTableEntry* value_4 = (((RogueClassString_TemplateTableEntry*)(_auto_778_2->data->objects[_auto_779_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueString_TemplateTableEntryList__type_name( RogueTableEntry_of_String_TemplateList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[928]);
}

RogueTableEntry_of_String_TemplateList* RogueString_TemplateTableEntryList__init_object( RogueTableEntry_of_String_TemplateList* THIS )
{
  return (RogueTableEntry_of_String_TemplateList*)(THIS);
}

RogueTableEntry_of_String_TemplateList* RogueString_TemplateTableEntryList__init__Integer_String_TemplateTableEntry( RogueTableEntry_of_String_TemplateList* THIS, RogueInteger initial_capacity_0, RogueClassString_TemplateTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_TemplateTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_263_3 = (initial_capacity_0);
    for (;i_2 <= _auto_263_3;++i_2)
    {
      RogueString_TemplateTableEntryList__add__String_TemplateTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_TemplateList*)(THIS);
}

RogueTableEntry_of_String_TemplateList* RogueString_TemplateTableEntryList__add__String_TemplateTableEntry( RogueTableEntry_of_String_TemplateList* THIS, RogueClassString_TemplateTableEntry* value_0 )
{
  ((RogueString_TemplateTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_TemplateList*)(THIS);
}

RogueInteger RogueString_TemplateTableEntryList__capacity( RogueTableEntry_of_String_TemplateList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_TemplateList* RogueString_TemplateTableEntryList__reserve__Integer( RogueTableEntry_of_String_TemplateList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_TemplateTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_TemplateTableEntryList__capacity( THIS ))) + ((RogueString_TemplateTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_TemplateTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_TemplateList*)(THIS);
}

RogueString* RogueString_TemplateTableEntry__type_name( RogueClassString_TemplateTableEntry* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[557]);
}

RogueClassString_TemplateTableEntry* RogueString_TemplateTableEntry__init__String_Template_Integer( RogueClassString_TemplateTableEntry* THIS, RogueString* _key_0, RogueClassTemplate* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_TemplateTableEntry*)(THIS);
}

RogueClassString_TemplateTableEntry* RogueString_TemplateTableEntry__init_object( RogueClassString_TemplateTableEntry* THIS )
{
  return (RogueClassString_TemplateTableEntry*)(THIS);
}

RogueString* RogueString_TemplateTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[599]);
}

RogueString* RogueString_AugmentListTableEntryList__to_String( RogueTableEntry_of_String_AugmentListList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_AugmentListList* _auto_788_2 = (THIS);
    RogueInteger _auto_789_3 = (0);
    for (;_auto_789_3 < _auto_788_2->count;++_auto_789_3)
    {
      RogueClassString_AugmentListTableEntry* value_4 = (((RogueClassString_AugmentListTableEntry*)(_auto_788_2->data->objects[_auto_789_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueString_AugmentListTableEntryList__type_name( RogueTableEntry_of_String_AugmentListList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[929]);
}

RogueTableEntry_of_String_AugmentListList* RogueString_AugmentListTableEntryList__init_object( RogueTableEntry_of_String_AugmentListList* THIS )
{
  return (RogueTableEntry_of_String_AugmentListList*)(THIS);
}

RogueTableEntry_of_String_AugmentListList* RogueString_AugmentListTableEntryList__init__Integer_String_AugmentListTableEntry( RogueTableEntry_of_String_AugmentListList* THIS, RogueInteger initial_capacity_0, RogueClassString_AugmentListTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_AugmentListTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_267_3 = (initial_capacity_0);
    for (;i_2 <= _auto_267_3;++i_2)
    {
      RogueString_AugmentListTableEntryList__add__String_AugmentListTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_AugmentListList*)(THIS);
}

RogueTableEntry_of_String_AugmentListList* RogueString_AugmentListTableEntryList__add__String_AugmentListTableEntry( RogueTableEntry_of_String_AugmentListList* THIS, RogueClassString_AugmentListTableEntry* value_0 )
{
  ((RogueString_AugmentListTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_AugmentListList*)(THIS);
}

RogueInteger RogueString_AugmentListTableEntryList__capacity( RogueTableEntry_of_String_AugmentListList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_AugmentListList* RogueString_AugmentListTableEntryList__reserve__Integer( RogueTableEntry_of_String_AugmentListList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_AugmentListTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_AugmentListTableEntryList__capacity( THIS ))) + ((RogueString_AugmentListTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_AugmentListTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_AugmentListList*)(THIS);
}

RogueString* RogueString_AugmentListTableEntry__type_name( RogueClassString_AugmentListTableEntry* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[558]);
}

RogueClassString_AugmentListTableEntry* RogueString_AugmentListTableEntry__init__String_AugmentList_Integer( RogueClassString_AugmentListTableEntry* THIS, RogueString* _key_0, RogueAugmentList* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_AugmentListTableEntry*)(THIS);
}

RogueClassString_AugmentListTableEntry* RogueString_AugmentListTableEntry__init_object( RogueClassString_AugmentListTableEntry* THIS )
{
  return (RogueClassString_AugmentListTableEntry*)(THIS);
}

RogueString* RogueString_AugmentListTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[600]);
}

RogueString* RogueCmdLabelList__to_String( RogueCmdLabelList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueCmdLabelList* _auto_798_2 = (THIS);
    RogueInteger _auto_799_3 = (0);
    for (;_auto_799_3 < _auto_798_2->count;++_auto_799_3)
    {
      RogueClassCmdLabel* value_4 = (((RogueClassCmdLabel*)(_auto_798_2->data->objects[_auto_799_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueCmdLabelList__type_name( RogueCmdLabelList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[930]);
}

RogueCmdLabelList* RogueCmdLabelList__init_object( RogueCmdLabelList* THIS )
{
  return (RogueCmdLabelList*)(THIS);
}

RogueCmdLabelList* RogueCmdLabelList__init( RogueCmdLabelList* THIS )
{
  RogueCmdLabelList__init__Integer( THIS, 10 );
  return (RogueCmdLabelList*)(THIS);
}

RogueCmdLabelList* RogueCmdLabelList__init__Integer( RogueCmdLabelList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassCmdLabel*), true );
  return (RogueCmdLabelList*)(THIS);
}

RogueCmdLabelList* RogueCmdLabelList__add__CmdLabel( RogueCmdLabelList* THIS, RogueClassCmdLabel* value_0 )
{
  ((RogueCmdLabelList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdLabelList*)(THIS);
}

RogueInteger RogueCmdLabelList__capacity( RogueCmdLabelList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueCmdLabelList* RogueCmdLabelList__clear( RogueCmdLabelList* THIS )
{
  THIS->count = 0;
  return (RogueCmdLabelList*)(THIS);
}

RogueCmdLabelList* RogueCmdLabelList__reserve__Integer( RogueCmdLabelList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassCmdLabel*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueCmdLabelList__capacity( THIS ))) + ((RogueCmdLabelList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassCmdLabel*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdLabelList*)(THIS);
}

RogueString* RogueString_CmdLabelTable__to_String( RogueClassString_CmdLabelTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_CmdLabelTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))) ))) ))));
}

RogueString* RogueString_CmdLabelTable__type_name( RogueClassString_CmdLabelTable* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[559]);
}

RogueClassString_CmdLabelTable* RogueString_CmdLabelTable__init( RogueClassString_CmdLabelTable* THIS )
{
  RogueString_CmdLabelTable__init__Integer( THIS, 16 );
  return (RogueClassString_CmdLabelTable*)(THIS);
}

RogueClassString_CmdLabelTable* RogueString_CmdLabelTable__init__Integer( RogueClassString_CmdLabelTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_CmdLabelTableEntryList__init__Integer_String_CmdLabelTableEntry( ((RogueTableEntry_of_String_CmdLabelList*)Rogue_program.type_TableEntry_of_String_CmdLabelList->create_and_init_object()), bin_count_0, ((RogueClassString_CmdLabelTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  return (RogueClassString_CmdLabelTable*)(THIS);
}

void RogueString_CmdLabelTable__clear( RogueClassString_CmdLabelTable* THIS )
{
  {
    RogueTableEntry_of_String_CmdLabelList* _auto_811_0 = (THIS->bins);
    RogueInteger i_1 = (0);
    for (;i_1 < _auto_811_0->count;++i_1)
    {
      THIS->bins->data->objects[i_1] = ((RogueClassString_CmdLabelTableEntry*)(NULL));
    }
  }
  RogueStringList__clear( THIS->keys );
}

RogueLogical RogueString_CmdLabelTable__contains__String( RogueClassString_CmdLabelTable* THIS, RogueString* key_0 )
{
  return (RogueLogical)(!!(((RogueString_CmdLabelTable__find__String( THIS, key_0 )))));
}

RogueClassString_CmdLabelTableEntry* RogueString_CmdLabelTable__find__String( RogueClassString_CmdLabelTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_CmdLabelTableEntry* entry_2 = (((RogueClassString_CmdLabelTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_CmdLabelTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_CmdLabelTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_CmdLabelTableEntry*)(((RogueClassString_CmdLabelTableEntry*)(NULL)));
}

RogueClassCmdLabel* RogueString_CmdLabelTable__get__String( RogueClassString_CmdLabelTable* THIS, RogueString* key_0 )
{
  RogueClassString_CmdLabelTableEntry* entry_1 = (((RogueString_CmdLabelTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassCmdLabel*)(entry_1->value);
  }
  else
  {
    RogueClassCmdLabel* default_value_2 = 0;
    return (RogueClassCmdLabel*)(default_value_2);
  }
}

void RogueString_CmdLabelTable__set__String_CmdLabel( RogueClassString_CmdLabelTable* THIS, RogueString* key_0, RogueClassCmdLabel* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_CmdLabelTableEntry* entry_4 = (((RogueClassString_CmdLabelTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_CmdLabelTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_CmdLabelTableEntry*)((RogueString_CmdLabelTableEntry__init__String_CmdLabel_Integer( ((RogueClassString_CmdLabelTableEntry*)Rogue_program.type_String_CmdLabelTableEntry->create_and_init_object()), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_CmdLabelTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_CmdLabelTable__print_to__StringBuilder( RogueClassString_CmdLabelTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_CmdLabelTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_CmdLabelTable* RogueString_CmdLabelTable__init_object( RogueClassString_CmdLabelTable* THIS )
{
  return (RogueClassString_CmdLabelTable*)(THIS);
}

RogueString* RogueCloneArgs__type_name( RogueClassCloneArgs* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[560]);
}

RogueClassCmdLabel* RogueCloneArgs__register_label__CmdLabel( RogueClassCloneArgs* THIS, RogueClassCmdLabel* label_0 )
{
  return (RogueClassCmdLabel*)(label_0);
}

RogueClassCloneArgs* RogueCloneArgs__init_object( RogueClassCloneArgs* THIS )
{
  return (RogueClassCloneArgs*)(THIS);
}

RogueString* RogueCloneMethodArgs__type_name( RogueClassCloneMethodArgs* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[835]);
}

RogueClassCmdLabel* RogueCloneMethodArgs__register_label__CmdLabel( RogueClassCloneMethodArgs* THIS, RogueClassCmdLabel* label_0 )
{
  RogueCmdLabelList__add__CmdLabel( THIS->cloned_method->label_list, label_0 );
  RogueString_CmdLabelTable__set__String_CmdLabel( THIS->cloned_method->label_lookup, label_0->name, label_0 );
  return (RogueClassCmdLabel*)(label_0);
}

RogueClassCloneMethodArgs* RogueCloneMethodArgs__init_object( RogueClassCloneMethodArgs* THIS )
{
  return (RogueClassCloneMethodArgs*)(THIS);
}

RogueClassCloneMethodArgs* RogueCloneMethodArgs__init__Method( RogueClassCloneMethodArgs* THIS, RogueClassMethod* _auto_285_0 )
{
  THIS->cloned_method = _auto_285_0;
  return (RogueClassCloneMethodArgs*)(THIS);
}

RogueString* RogueProperty__to_String( RogueClassProperty* THIS )
{
  return (RogueString*)(THIS->name);
}

RogueString* RogueProperty__type_name( RogueClassProperty* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[561]);
}

RogueClassProperty* RogueProperty__init__Token_Type_String_Type_Cmd( RogueClassProperty* THIS, RogueClassToken* _auto_290_0, RogueClassType* _auto_291_1, RogueString* _auto_292_2, RogueClassType* _auto_293_3, RogueClassCmd* _auto_294_4 )
{
  THIS->initial_value = _auto_294_4;
  THIS->_type = _auto_293_3;
  THIS->name = _auto_292_2;
  RogueProperty__set_type_context__Type( THIS, _auto_291_1 );
  THIS->t = _auto_290_0;
  return (RogueClassProperty*)(THIS);
}

RogueClassProperty* RogueProperty__clone( RogueClassProperty* THIS )
{
  RogueClassProperty* result_0 = (((RogueProperty__init__Token_Type_String_Type_Cmd( ((RogueClassProperty*)Rogue_program.type_Property->create_and_init_object()), THIS->t, THIS->type_context, THIS->name, ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
  result_0->cpp_name = THIS->cpp_name;
  result_0->_type = THIS->_type;
  result_0->attributes = THIS->attributes;
  if (!!(THIS->initial_value))
  {
    result_0->initial_value = (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->initial_value), ((RogueClassCloneArgs*)(NULL)) ));
  }
  return (RogueClassProperty*)(result_0);
}

RogueClassProperty* RogueProperty__set_type_context__Type( RogueClassProperty* THIS, RogueClassType* _auto_295_0 )
{
  THIS->type_context = _auto_295_0;
  return (RogueClassProperty*)(THIS);
}

RogueClassProperty* RogueProperty__init_object( RogueClassProperty* THIS )
{
  return (RogueClassProperty*)(THIS);
}

RogueString* RogueCmdAccess__type_name( RogueClassCmdAccess* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[637]);
}

RogueClassCmd* RogueCmdAccess__clone__CloneArgs( RogueClassCmdAccess* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdAccess* result_1 = (((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, clone_args_0 ))), THIS->name, ((RogueCmd__clone__CmdArgs_CloneArgs( ((RogueClassCmd*)THIS), THIS->args, clone_args_0 ))) ))));
  RogueClassMacroArgs* macro_args_2 = (((RogueClassMacroArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_MacroArgs))));
  if (!!(macro_args_2))
  {
    return (RogueClassCmd*)(((RogueMacroArgs__inline_access__CmdAccess( macro_args_2, result_1 ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(result_1)));
}

RogueClassType* Rogue_CmdAccess__implicit_type( RogueClassCmdAccess* THIS )
{
  return (RogueClassType*)(((RogueProgram__find_type__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->name ))));
}

RogueClassCmd* RogueCmdAccess__resolve__Scope( RogueClassCmdAccess* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->args))
  {
    RogueCmdArgs__resolve__Scope( THIS->args, scope_0 );
  }
  if (THIS->context == NULL)
  {
    RogueClassLocal* v_1 = (((RogueScope__find_local__String( scope_0, THIS->name ))));
    if (!!(v_1))
    {
      if (!!(THIS->args))
      {
        return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->context, THIS->name ))))), Rogue_program.literal_strings[239], THIS->args ))), scope_0 ))));
      }
      return (RogueClassCmd*)(((RogueCmdReadLocal__resolve__Scope( ((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), THIS->t, v_1 ))), scope_0 ))));
    }
    RogueClassType* new_type_2 = (((RogueProgram__find_type__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->name ))));
    if (!!(new_type_2))
    {
      RogueType__organize( new_type_2 );
      if (THIS->args == NULL)
      {
        if (((RogueString__ends_with__String( THIS->name, ((RogueCharacter__to_String( (RogueCharacter)']' ))) ))))
        {
          THIS->args = ((RogueCmdArgs__init( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()) )));
        }
        else
        {
          return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadSingleton__init__Token_Type( ((RogueClassCmdReadSingleton*)Rogue_program.type_CmdReadSingleton->create_and_init_object()), THIS->t, new_type_2 ))))));
        }
      }
      if (new_type_2->is_array)
      {
        return (RogueClassCmd*)(((RogueCmdCreateArray__resolve__Scope( ((RogueCmdCreateArray__init__Token_Type_CmdArgs( ((RogueClassCmdCreateArray*)Rogue_program.type_CmdCreateArray->create_and_init_object()), THIS->t, new_type_2, THIS->args ))), scope_0 ))));
      }
      if (((RogueType__is_compound( new_type_2 ))))
      {
        RogueClassCmd* cmd_call_3 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, new_type_2, ((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, Rogue_program.literal_strings[284], THIS->args ))), true, false ))));
        if (!(RogueObject::instance_of(cmd_call_3,Rogue_program.type_CmdCallRoutine)))
        {
          RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), Rogue_program.literal_strings[695] );
        }
        RogueClassCmdCallRoutine* r_4 = (((RogueClassCmdCallRoutine*)(RogueObject::as(cmd_call_3,Rogue_program.type_CmdCallRoutine))));
        if (((RogueMethod__is_generated( r_4->method_info ))))
        {
          return (RogueClassCmd*)(((RogueCmdCreateCompound__resolve__Scope( ((RogueCmdCreateCompound__init__Token_Type_CmdArgs( ((RogueClassCmdCreateCompound*)Rogue_program.type_CmdCreateCompound->create_and_init_object()), THIS->t, new_type_2, r_4->args ))), scope_0 ))));
        }
        else
        {
          return (RogueClassCmd*)(cmd_call_3);
        }
      }
      RogueClassCmdCreateObject* cmd_create_5 = (((RogueCmdCreateObject__init__Token_Type( ((RogueClassCmdCreateObject*)Rogue_program.type_CmdCreateObject->create_and_init_object()), THIS->t, new_type_2 ))));
      RogueClassCmd* cmd_new_6 = (((RogueClassCmd*)(cmd_create_5)));
      RogueLogical must_find_7 = ((!!(THIS->args->count) || ((RogueType__is_native( new_type_2 )))));
      RogueClassCmd* cmd_call_8 = 0;
      if (!(((RogueType__is_native( new_type_2 )))))
      {
        cmd_call_8 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, new_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, cmd_new_6, Rogue_program.literal_strings[285], THIS->args ))), false, true ))));
      }
      if (!(!!(cmd_call_8)))
      {
        cmd_call_8 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, new_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, new_type_2->name ))))), Rogue_program.literal_strings[284], THIS->args ))), false, false ))));
        if ((!(!!(cmd_call_8)) && must_find_7))
        {
          if (!(((RogueType__is_native( new_type_2 )))))
          {
            cmd_call_8 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, new_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, cmd_new_6, Rogue_program.literal_strings[285], THIS->args ))), true, true ))));
          }
          cmd_call_8 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, new_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, new_type_2->name ))))), Rogue_program.literal_strings[284], THIS->args ))), true, false ))));
        }
      }
      if (!!(cmd_call_8))
      {
        cmd_new_6 = ((RogueClassCmd*)cmd_call_8);
      }
      return (RogueClassCmd*)((call_ROGUEM42( 23, (RogueClassCmd*)(cmd_new_6), scope_0 )));
    }
    else if (((RogueString__ends_with__String( THIS->name, ((RogueCharacter__to_String( (RogueCharacter)'?' ))) ))))
    {
      return (RogueClassCmd*)((call_ROGUEM302( 23, (RogueClassCmdUnary*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalize*)Rogue_program.type_CmdLogicalize->create_and_init_object())), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->context, ((RogueString__leftmost__Integer( THIS->name, -1 ))), THIS->args ))))) )))), scope_0 )));
    }
    RogueClassCmd* result_9 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, scope_0->_this_type, THIS, false, false ))));
    if (!!(result_9))
    {
      RogueCmdAccess__check_for_recursive_getter__Scope( THIS, scope_0 );
      return (RogueClassCmd*)(result_9);
    }
    RogueClassProperty* p_10 = (((RogueType__find_setting__String( scope_0->_this_type, THIS->name ))));
    if (!!(p_10))
    {
      if (!!(THIS->args))
      {
        return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->context, THIS->name ))))), Rogue_program.literal_strings[239], THIS->args ))), scope_0 ))));
      }
      else
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadSetting__init__Token_Property( ((RogueClassCmdReadSetting*)Rogue_program.type_CmdReadSetting->create_and_init_object()), THIS->t, p_10 ))))));
      }
    }
    p_10 = ((RogueClassProperty*)((RogueType__find_property__String( scope_0->_this_type, THIS->name ))));
    if (!!(p_10))
    {
      if (!!(THIS->args))
      {
        return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->context, THIS->name ))))), Rogue_program.literal_strings[239], THIS->args ))), scope_0 ))));
      }
      if (((RogueMethod__is_routine( scope_0->this_method ))))
      {
        throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[699] )));
      }
      THIS->context = ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)Rogue_program.type_CmdThisContext->create_and_init_object()), THIS->t, scope_0->_this_type )))));
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)Rogue_program.type_CmdReadProperty->create_and_init_object()), THIS->t, THIS->context, p_10 ))))));
    }
    if (!(!!(THIS->args)))
    {
      RogueClassCmd* def_11 = (((RogueString_CmdTable__get__String( scope_0->_this_type->definition_lookup, THIS->name ))));
      if (!!(def_11))
      {
        return (RogueClassCmd*)((call_ROGUEM44( 5, (RogueClassCmd*)(def_11), ((RogueClassCloneArgs*)(NULL)) )));
      }
    }
    return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, scope_0->_this_type, THIS, true, false ))));
  }
  else
  {
    THIS->context = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->context), scope_0 ));
  }
  RogueClassType* context_type_12 = (((Rogue_Cmd__require_type( THIS->context ))));
  RogueType__organize( context_type_12 );
  if (context_type_12->is_optional)
  {
    {
      RogueString* _auto_838_16 = (THIS->name);
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( _auto_838_16, Rogue_program.literal_strings[700] ))) == 0)
      {
        if ((!!(THIS->args) && !!(THIS->args->count)))
        {
          throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[701] )));
        }
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLogicalizeOptionalValue__init__Token_Cmd_Logical( ((RogueClassCmdLogicalizeOptionalValue*)Rogue_program.type_CmdLogicalizeOptionalValue->create_and_init_object()), THIS->t, THIS->context, true ))))));
      }
      else if (((RogueString__operatorLESSTHANGREATERTHAN__String( _auto_838_16, Rogue_program.literal_strings[702] ))) == 0)
      {
        if ((!!(THIS->args) && !!(THIS->args->count)))
        {
          throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[703] )));
        }
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdGetOptionalValue__init__Token_Cmd( ((RogueClassCmdGetOptionalValue*)Rogue_program.type_CmdGetOptionalValue->create_and_init_object()), THIS->t, THIS->context ))))));
      }
      else
      {
        throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[704] )));
      }
    }
  }
  RogueClassCmd* result_13 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_12, THIS, false, false ))));
  if (!!(result_13))
  {
    return (RogueClassCmd*)(result_13);
  }
  RogueClassProperty* p_14 = (((RogueType__find_setting__String( context_type_12, THIS->name ))));
  if (!!(p_14))
  {
    if (!!(THIS->args))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->context, THIS->name ))))), Rogue_program.literal_strings[239], THIS->args ))), scope_0 ))));
    }
    call_ROGUEM48( 17, (RogueClassCmd*)(THIS->context) );
    return (RogueClassCmd*)(((RogueCmdReadSetting__resolve__Scope( ((RogueCmdReadSetting__init__Token_Property( ((RogueClassCmdReadSetting*)Rogue_program.type_CmdReadSetting->create_and_init_object()), THIS->t, p_14 ))), scope_0 ))));
  }
  p_14 = ((RogueClassProperty*)((RogueType__find_property__String( context_type_12, THIS->name ))));
  if (!!(p_14))
  {
    if (!!(THIS->args))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->context, THIS->name ))))), Rogue_program.literal_strings[239], THIS->args ))), scope_0 ))));
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)Rogue_program.type_CmdReadProperty->create_and_init_object()), THIS->t, THIS->context, p_14 ))))));
  }
  if (!(!!(THIS->args)))
  {
    RogueClassCmd* def_15 = (((RogueString_CmdTable__get__String( context_type_12->definition_lookup, THIS->name ))));
    if (!!(def_15))
    {
      return (RogueClassCmd*)((call_ROGUEM44( 5, (RogueClassCmd*)(def_15), ((RogueClassCloneArgs*)(NULL)) )));
    }
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_12, THIS, true, false ))));
}

RogueClassCmd* RogueCmdAccess__resolve_assignment__Scope_Cmd( RogueClassCmdAccess* THIS, RogueClassScope* scope_0, RogueClassCmd* new_value_1 )
{
  if (!!(THIS->args))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[754] )));
  }
  if (THIS->context == NULL)
  {
    if (THIS->name->characters[0] != (RogueCharacter)'@')
    {
      RogueString* setter_name_2 = (((RogueString__operatorPLUS__String( Rogue_program.literal_strings[755], THIS->name ))));
      RogueClassCmd* setter_3 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, scope_0->_this_type, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(NULL)), setter_name_2, ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), new_value_1 ))) ))), false, false ))));
      if (!!(setter_3))
      {
        if (((RogueString__operatorLESSTHANGREATERTHAN__String( scope_0->this_method->name, setter_name_2 ))) == 0)
        {
          throw ((RogueToken__error__String( THIS->t, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( Rogue_program.literal_strings[756], THIS->name ))), Rogue_program.literal_strings[757] ))), THIS->name ))), Rogue_program.literal_strings[758] ))) )));
        }
        return (RogueClassCmd*)(setter_3);
      }
    }
    RogueClassLocal* v_4 = (((RogueScope__find_local__String( scope_0, THIS->name ))));
    if (!!(v_4))
    {
      return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ((RogueCmdWriteLocal__init__Token_Local_Cmd( ((RogueClassCmdWriteLocal*)Rogue_program.type_CmdWriteLocal->create_and_init_object()), THIS->t, v_4, new_value_1 ))), scope_0 ))));
    }
    RogueClassProperty* p_5 = (((RogueType__find_setting__String( scope_0->this_method->type_context, THIS->name ))));
    if (!!(p_5))
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdWriteSetting__init__Token_Property_Cmd( ((RogueClassCmdWriteSetting*)Rogue_program.type_CmdWriteSetting->create_and_init_object()), THIS->t, p_5, new_value_1 ))))));
    }
    if (((RogueMethod__is_routine( scope_0->this_method ))))
    {
      p_5 = ((RogueClassProperty*)((RogueType__find_property__String( scope_0->this_method->type_context, THIS->name ))));
      if (!!(p_5))
      {
        throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[699] )));
      }
    }
    THIS->context = ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)Rogue_program.type_CmdThisContext->create_and_init_object()), THIS->t, scope_0->_this_type )))));
  }
  else
  {
    THIS->context = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->context), scope_0 ));
  }
  RogueClassType* context_type_6 = (((Rogue_Cmd__require_type( THIS->context ))));
  RogueType__organize( context_type_6 );
  if (THIS->name->characters[0] != (RogueCharacter)'@')
  {
    RogueString* setter_name_7 = (((RogueString__operatorPLUS__String( Rogue_program.literal_strings[755], THIS->name ))));
    RogueClassCmd* setter_8 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_6, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->context, setter_name_7, ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), new_value_1 ))) ))), false, false ))));
    if (!!(setter_8))
    {
      return (RogueClassCmd*)(setter_8);
    }
  }
  RogueClassProperty* p_9 = (((RogueType__find_setting__String( context_type_6, THIS->name ))));
  if (!!(p_9))
  {
    call_ROGUEM48( 17, (RogueClassCmd*)(THIS->context) );
    return (RogueClassCmd*)(((RogueCmdWriteSetting__resolve__Scope( ((RogueCmdWriteSetting__init__Token_Property_Cmd( ((RogueClassCmdWriteSetting*)Rogue_program.type_CmdWriteSetting->create_and_init_object()), THIS->t, p_9, new_value_1 ))), scope_0 ))));
  }
  p_9 = ((RogueClassProperty*)((RogueType__find_property__String( context_type_6, THIS->name ))));
  if (!!(p_9))
  {
    if (((RogueMethod__is_routine( scope_0->this_method ))))
    {
      throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[699] )));
    }
    else
    {
      return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)Rogue_program.type_CmdWriteProperty->create_and_init_object()), THIS->t, THIS->context, p_9, new_value_1 ))), scope_0 ))));
    }
  }
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[678] ))), THIS->name ))), Rogue_program.literal_strings[759] ))) ))) )));
}

RogueClassCmd* RogueCmdAccess__resolve_modify_and_assign__Scope_TokenType_Cmd( RogueClassCmdAccess* THIS, RogueClassScope* scope_0, RogueClassTokenType* op_1, RogueClassCmd* new_value_2 )
{
  if (THIS->args == NULL)
  {
    RogueClassLocal* v_3 = (((RogueScope__find_local__String( scope_0, THIS->name ))));
    if (!!(v_3))
    {
      if (!!(THIS->args))
      {
        throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[761] ))), THIS->name ))), Rogue_program.literal_strings[762] ))) ))) )));
      }
      return (RogueClassCmd*)(((RogueCmdLocalOpWithAssign__resolve__Scope( ((RogueCmdLocalOpWithAssign__init__Token_Local_TokenType_Cmd( ((RogueClassCmdLocalOpWithAssign*)Rogue_program.type_CmdLocalOpWithAssign->create_and_init_object()), THIS->t, v_3, op_1, new_value_2 ))), scope_0 ))));
    }
  }
  RogueClassType* context_type_4 = 0;
  if (!!(THIS->context))
  {
    THIS->context = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->context), scope_0 ));
    context_type_4 = ((RogueClassType*)((Rogue_Cmd__require_type( THIS->context ))));
  }
  else
  {
    context_type_4 = ((RogueClassType*)scope_0->_this_type);
  }
  RogueClassProperty* p_5 = (((RogueType__find_setting__String( context_type_4, THIS->name ))));
  if (!!(p_5))
  {
    if (!!(THIS->context))
    {
      call_ROGUEM48( 17, (RogueClassCmd*)(THIS->context) );
    }
    return (RogueClassCmd*)(((RogueCmdOpAssignSetting__resolve__Scope( ((RogueCmdOpAssignSetting__init__Token_Property_TokenType_Cmd( ((RogueClassCmdOpAssignSetting*)Rogue_program.type_CmdOpAssignSetting->create_and_init_object()), THIS->t, p_5, op_1, new_value_2 ))), scope_0 ))));
  }
  p_5 = ((RogueClassProperty*)((RogueType__find_property__String( context_type_4, THIS->name ))));
  if (!!(p_5))
  {
    if (!(!!(THIS->context)))
    {
      THIS->context = ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)Rogue_program.type_CmdThisContext->create_and_init_object()), THIS->t, context_type_4 )))));
    }
    if (((RogueMethod__is_routine( scope_0->this_method ))))
    {
      throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[699] )));
    }
    return (RogueClassCmd*)(((RogueCmdOpAssignProperty__resolve__Scope( ((RogueCmdOpAssignProperty__init__Token_Cmd_Property_TokenType_Cmd( ((RogueClassCmdOpAssignProperty*)Rogue_program.type_CmdOpAssignProperty->create_and_init_object()), THIS->t, THIS->context, p_5, op_1, new_value_2 ))), scope_0 ))));
  }
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[678] ))), THIS->name ))), Rogue_program.literal_strings[759] ))) ))) )));
}

RogueClassType* Rogue_CmdAccess__type( RogueClassCmdAccess* THIS )
{
  RogueClassRogueError* err_0 = (((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[287] ))), ((RogueCmdAccess__type_name( THIS ))) ))), Rogue_program.literal_strings[763] ))), THIS->name ))), Rogue_program.literal_strings[764] ))) ))) ))));
  throw err_0;
}

void RogueCmdAccess__write_cpp__CPPWriter_Logical( RogueClassCmdAccess* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[287] ))), ((RogueCmdAccess__type_name( THIS ))) ))), Rogue_program.literal_strings[766] ))), THIS->name ))), Rogue_program.literal_strings[342] ))) ))) )));
}

RogueClassCmdAccess* RogueCmdAccess__init_object( RogueClassCmdAccess* THIS )
{
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_String( RogueClassCmdAccess* THIS, RogueClassToken* _auto_296_0, RogueString* _auto_297_1 )
{
  THIS->name = _auto_297_1;
  THIS->t = _auto_296_0;
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_String_CmdArgs( RogueClassCmdAccess* THIS, RogueClassToken* _auto_298_0, RogueString* _auto_299_1, RogueClassCmdArgs* _auto_300_2 )
{
  THIS->args = _auto_300_2;
  THIS->name = _auto_299_1;
  THIS->t = _auto_298_0;
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_Cmd_String( RogueClassCmdAccess* THIS, RogueClassToken* _auto_301_0, RogueClassCmd* _auto_302_1, RogueString* _auto_303_2 )
{
  THIS->name = _auto_303_2;
  THIS->context = _auto_302_1;
  THIS->t = _auto_301_0;
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_Cmd_String_CmdArgs( RogueClassCmdAccess* THIS, RogueClassToken* _auto_304_0, RogueClassCmd* _auto_305_1, RogueString* _auto_306_2, RogueClassCmdArgs* _auto_307_3 )
{
  THIS->args = _auto_307_3;
  THIS->name = _auto_306_2;
  THIS->context = _auto_305_1;
  THIS->t = _auto_304_0;
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_Cmd_String_Cmd( RogueClassCmdAccess* THIS, RogueClassToken* _auto_308_0, RogueClassCmd* _auto_309_1, RogueString* _auto_310_2, RogueClassCmd* arg_3 )
{
  THIS->name = _auto_310_2;
  THIS->context = _auto_309_1;
  THIS->t = _auto_308_0;
  THIS->args = ((RogueCmdArgs__init( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()) )));
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->args), arg_3 );
  return (RogueClassCmdAccess*)(THIS);
}

void RogueCmdAccess__check_for_recursive_getter__Scope( RogueClassCmdAccess* THIS, RogueClassScope* scope_0 )
{
  RogueClassType* this_type_1 = (scope_0->_this_type);
  if (((RogueString__operatorLESSTHANGREATERTHAN__String( THIS->name, scope_0->this_method->name ))) != 0)
  {
    return;
  }
  if ((!!(THIS->args) && THIS->args->count > 0))
  {
    return;
  }
  if (!((!!(((RogueType__find_property__String( this_type_1, THIS->name )))) || !!(((RogueType__find_setting__String( this_type_1, THIS->name )))))))
  {
    return;
  }
  throw ((RogueToken__error__String( THIS->t, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( Rogue_program.literal_strings[696], THIS->name ))), Rogue_program.literal_strings[697] ))), THIS->name ))), Rogue_program.literal_strings[698] ))) )));
}

RogueString* RogueCmdArgs__type_name( RogueClassCmdArgs* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[963]);
}

RogueClassCmdArgs* RogueCmdArgs__init_object( RogueClassCmdArgs* THIS )
{
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__init( RogueClassCmdArgs* THIS )
{
  RogueCmdList__init( ((RogueCmdList*)THIS) );
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__init__Integer( RogueClassCmdArgs* THIS, RogueInteger initial_capacity_0 )
{
  RogueCmdList__init__Integer( ((RogueCmdList*)THIS), initial_capacity_0 );
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__init__Cmd( RogueClassCmdArgs* THIS, RogueClassCmd* arg_0 )
{
  RogueCmdArgs__init( THIS );
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS), arg_0 );
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__init__Cmd_Cmd( RogueClassCmdArgs* THIS, RogueClassCmd* arg1_0, RogueClassCmd* arg2_1 )
{
  RogueCmdArgs__init( THIS );
  RogueCmdList__add__Cmd( ((RogueCmdList__add__Cmd( ((RogueCmdList*)THIS), arg1_0 ))), arg2_1 );
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__clone__CloneArgs( RogueClassCmdArgs* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdArgs* result_1 = (((RogueCmdArgs__init__Integer( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->count ))));
  {
    RogueClassCmdArgs* _auto_851_2 = (THIS);
    RogueInteger _auto_852_3 = (0);
    for (;_auto_852_3 < _auto_851_2->count;++_auto_852_3)
    {
      RogueClassCmd* cmd_4 = (((RogueClassCmd*)(_auto_851_2->data->objects[_auto_852_3])));
      RogueCmdList__add__Cmd( ((RogueCmdList*)result_1), (call_ROGUEM44( 5, (RogueClassCmd*)(cmd_4), clone_args_0 )) );
    }
  }
  return (RogueClassCmdArgs*)(result_1);
}

void RogueCmdArgs__resolve__Scope( RogueClassCmdArgs* THIS, RogueClassScope* scope_0 )
{
  {
    RogueClassCmdArgs* _auto_853_2 = (THIS);
    RogueInteger i_3 = (0);
    for (;i_3 < _auto_853_2->count;++i_3)
    {
      RogueClassCmd* arg_1 = ((call_ROGUEM42( 23, (RogueClassCmd*)(((RogueClassCmd*)(THIS->data->objects[i_3]))), scope_0 )));
      THIS->data->objects[i_3] = arg_1;
      RogueType__organize( ((Rogue_Cmd__require_type( arg_1 ))) );
    }
  }
}

RogueString* RogueCmdAssign__type_name( RogueClassCmdAssign* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[638]);
}

RogueClassCmd* RogueCmdAssign__clone__CloneArgs( RogueClassCmdAssign* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)Rogue_program.type_CmdAssign->create_and_init_object()), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->target), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdAssign__resolve__Scope( RogueClassCmdAssign* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)((call_ROGUEM49( 24, (RogueClassCmd*)(THIS->target), scope_0, THIS->new_value )));
}

RogueClassCmdAssign* RogueCmdAssign__init_object( RogueClassCmdAssign* THIS )
{
  return (RogueClassCmdAssign*)(THIS);
}

RogueClassCmdAssign* RogueCmdAssign__init__Token_Cmd_Cmd( RogueClassCmdAssign* THIS, RogueClassToken* _auto_311_0, RogueClassCmd* _auto_312_1, RogueClassCmd* _auto_313_2 )
{
  THIS->new_value = _auto_313_2;
  THIS->target = _auto_312_1;
  THIS->t = _auto_311_0;
  return (RogueClassCmdAssign*)(THIS);
}

RogueString* RogueScope__type_name( RogueClassScope* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[562]);
}

RogueClassScope* RogueScope__init__Type_Method( RogueClassScope* THIS, RogueClassType* _auto_316_0, RogueClassMethod* _auto_317_1 )
{
  THIS->this_method = _auto_317_1;
  THIS->_this_type = _auto_316_0;
  return (RogueClassScope*)(THIS);
}

RogueClassLocal* RogueScope__find_local__String( RogueClassScope* THIS, RogueString* name_0 )
{
  RogueInteger i_1 = ((THIS->local_list->count - 1));
  while (i_1 >= 0)
  {
    if (((RogueString__operatorLESSTHANGREATERTHAN__String( ((RogueClassLocal*)(THIS->local_list->data->objects[i_1]))->name, name_0 ))) == 0)
    {
      return (RogueClassLocal*)(((RogueClassLocal*)(THIS->local_list->data->objects[i_1])));
    }
    --i_1;
  }
  return (RogueClassLocal*)(((RogueClassLocal*)(NULL)));
}

void RogueScope__push_local__Local_Logical( RogueClassScope* THIS, RogueClassLocal* v_0, RogueLogical validate_name_1 )
{
  if (validate_name_1)
  {
    RogueClassLocal* existing_2 = (((RogueScope__find_local__String( THIS, v_0->name ))));
    if (!!(existing_2))
    {
      throw ((RogueToken__error__String( v_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[358] ))), v_0->name ))), Rogue_program.literal_strings[320] ))) ))) )));
    }
  }
  RogueLocalList__add__Local( THIS->local_list, v_0 );
}

void RogueScope__pop_local( RogueClassScope* THIS )
{
  RogueLocalList__remove_last( THIS->local_list );
}

RogueClassCmd* RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( RogueClassScope* THIS, RogueClassType* type_context_0, RogueClassCmdAccess* access_1, RogueLogical error_on_fail_2, RogueLogical suppress_inherited_3 )
{
  RogueClassMethod* m_4 = (((RogueScope__find_method__Type_CmdAccess_Logical_Logical( THIS, type_context_0, access_1, (error_on_fail_2 && !!(access_1->context)), suppress_inherited_3 ))));
  if ((!(!!(m_4)) && !(!!(access_1->context))))
  {
    m_4 = ((RogueClassMethod*)((RogueScope__find_method__Type_CmdAccess_Logical_Logical( THIS, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global, access_1, false, suppress_inherited_3 ))));
    if (!!(m_4))
    {
      type_context_0 = ((RogueClassType*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global);
      access_1->context = ((RogueClassCmd*)(((RogueCmdReadSingleton__init__Token_Type( ((RogueClassCmdReadSingleton*)Rogue_program.type_CmdReadSingleton->create_and_init_object()), access_1->t, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global )))));
    }
    else if (error_on_fail_2)
    {
      if (((RogueType__has_method_named__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global, access_1->name ))))
      {
        RogueScope__find_method__Type_CmdAccess_Logical_Logical( THIS, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global, access_1, true, suppress_inherited_3 );
      }
      else
      {
        RogueScope__find_method__Type_CmdAccess_Logical_Logical( THIS, type_context_0, access_1, true, suppress_inherited_3 );
      }
    }
  }
  if (!(!!(m_4)))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  RogueClassToken* t_5 = (access_1->t);
  RogueClassCmd* context_6 = (access_1->context);
  if (!!(context_6))
  {
    if ((((RogueMethod__is_routine( m_4 ))) && RogueObject::instance_of(context_6,Rogue_program.type_CmdLiteralThis)))
    {
      throw ((RogueToken__error__String( t_5, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[686] ))), m_4->name ))), Rogue_program.literal_strings[687] ))) ))) )));
    }
  }
  else
  {
    context_6 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)Rogue_program.type_CmdThisContext->create_and_init_object()), t_5, type_context_0 ))))));
  }
  RogueClassCmdArgs* args_7 = (access_1->args);
  if (!(!!(args_7)))
  {
    args_7 = ((RogueClassCmdArgs*)((RogueCmdArgs__init( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()) ))));
  }
  while (args_7->count < m_4->parameters->count)
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)args_7), (call_ROGUEM44( 5, (RogueClassCmd*)(((RogueClassLocal*)(m_4->parameters->data->objects[args_7->count]))->initial_value), ((RogueClassCloneArgs*)(NULL)) )) );
  }
  RogueCmdArgs__resolve__Scope( args_7, THIS );
  {
    RogueClassCmdArgs* _auto_858_15 = (args_7);
    RogueInteger i_16 = (0);
    for (;i_16 < _auto_858_15->count;++i_16)
    {
      args_7->data->objects[i_16] = (call_ROGUEM42( 23, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(((RogueClassCmd*)(args_7->data->objects[i_16]))), ((RogueClassLocal*)(m_4->parameters->data->objects[i_16]))->_type ))), THIS ));
    }
  }
  RogueClassCmd* cmd_8 = 0;
  if (((RogueMethod__is_routine( m_4 ))))
  {
    if (((RogueMethod__is_native( m_4 ))))
    {
      if (!!(m_4->native_code))
      {
        context_6 = ((RogueClassCmd*)(call_ROGUEM42( 23, (RogueClassCmd*)(context_6), THIS )));
        call_ROGUEM48( 17, (RogueClassCmd*)(context_6) );
        cmd_8 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdCallInlineNativeRoutine__init__Token_Method_CmdArgs( ((RogueClassCmdCallInlineNativeRoutine*)Rogue_program.type_CmdCallInlineNativeRoutine->create_and_init_object()), t_5, m_4, args_7 ))))));
      }
      else
      {
        cmd_8 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdCallNativeRoutine__init__Token_Method_CmdArgs( ((RogueClassCmdCallNativeRoutine*)Rogue_program.type_CmdCallNativeRoutine->create_and_init_object()), t_5, m_4, args_7 ))))));
      }
    }
    else if (((RogueMethod__is_macro( m_4 ))))
    {
      RogueClassMacroArgs* macro_args_9 = (((RogueMacroArgs__init__Cmd_Method_CmdArgs( ((RogueClassMacroArgs*)Rogue_program.type_MacroArgs->create_and_init_object()), context_6, m_4, args_7 ))));
      RogueClassCmdStatementList* inline_statements_10 = (((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) ))));
      {
        RogueClassCmdStatementList* _auto_865_17 = (m_4->statements);
        RogueInteger _auto_866_18 = (0);
        for (;_auto_866_18 < _auto_865_17->count;++_auto_866_18)
        {
          RogueClassCmd* statement_19 = (((RogueClassCmd*)(_auto_865_17->data->objects[_auto_866_18])));
          RogueClassCmd* inline_statement_11 = ((call_ROGUEM44( 5, (RogueClassCmd*)(statement_19), ((RogueClassCloneArgs*)(macro_args_9)) )));
          if (!!(inline_statement_11))
          {
            RogueCmdList__add__Cmd( ((RogueCmdList*)inline_statements_10), inline_statement_11 );
          }
        }
      }
      RogueCmdStatementList__resolve__Scope( inline_statements_10, THIS );
      if (inline_statements_10->count == 1)
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(inline_statements_10->data->objects[0])));
      }
      throw ((RogueToken__error__String( t_5, Rogue_program.literal_strings[691] )));
    }
    else
    {
      cmd_8 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdCallRoutine__init__Token_Method_CmdArgs( ((RogueClassCmdCallRoutine*)Rogue_program.type_CmdCallRoutine->create_and_init_object()), t_5, m_4, args_7 ))))));
    }
  }
  else if (((RogueMethod__is_native( m_4 ))))
  {
    if (type_context_0->is_array)
    {
      {
        RogueString* _auto_869_20 = (m_4->name);
        if (((RogueString__operatorLESSTHANGREATERTHAN__String( _auto_869_20, Rogue_program.literal_strings[692] ))) == 0)
        {
          if ((!!(args_7) && !!(args_7->count)))
          {
            throw ((RogueToken__error__String( t_5, Rogue_program.literal_strings[693] )));
          }
          return (RogueClassCmd*)(((RogueCmdReadArrayCount__resolve__Scope( ((RogueCmdReadArrayCount__init__Token_Cmd( ((RogueClassCmdReadArrayCount*)Rogue_program.type_CmdReadArrayCount->create_and_init_object()), t_5, context_6 ))), THIS ))));
        }
      }
    }
    if (!!(m_4->native_code))
    {
      cmd_8 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallInlineNativeMethod*)Rogue_program.type_CmdCallInlineNativeMethod->create_and_init_object())), t_5, context_6, m_4, args_7 ))))));
    }
    else
    {
      cmd_8 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallNativeMethod*)Rogue_program.type_CmdCallNativeMethod->create_and_init_object())), t_5, context_6, m_4, args_7 ))))));
    }
  }
  else if (((RogueMethod__is_macro( m_4 ))))
  {
    RogueClassMacroArgs* macro_args_12 = (((RogueMacroArgs__init__Cmd_Method_CmdArgs( ((RogueClassMacroArgs*)Rogue_program.type_MacroArgs->create_and_init_object()), context_6, m_4, args_7 ))));
    RogueClassCmdStatementList* inline_statements_13 = (((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) ))));
    {
      RogueClassCmdStatementList* _auto_870_21 = (m_4->statements);
      RogueInteger _auto_871_22 = (0);
      for (;_auto_871_22 < _auto_870_21->count;++_auto_871_22)
      {
        RogueClassCmd* statement_23 = (((RogueClassCmd*)(_auto_870_21->data->objects[_auto_871_22])));
        RogueClassCmd* inline_statement_14 = ((call_ROGUEM44( 5, (RogueClassCmd*)(statement_23), ((RogueClassCloneArgs*)(macro_args_12)) )));
        if (!!(inline_statement_14))
        {
          RogueCmdList__add__Cmd( ((RogueCmdList*)inline_statements_13), inline_statement_14 );
        }
      }
    }
    RogueCmdStatementList__resolve__Scope( inline_statements_13, THIS );
    if (inline_statements_13->count == 1)
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(inline_statements_13->data->objects[0])));
    }
    RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), Rogue_program.literal_strings[694] );
    throw ((RogueToken__error__String( t_5, Rogue_program.literal_strings[691] )));
  }
  else if (((RogueType__is_aspect( type_context_0 ))))
  {
    cmd_8 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallAspectMethod*)Rogue_program.type_CmdCallAspectMethod->create_and_init_object())), t_5, context_6, m_4, args_7 ))))));
  }
  else
  {
    cmd_8 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallDynamicMethod*)Rogue_program.type_CmdCallDynamicMethod->create_and_init_object())), t_5, context_6, m_4, args_7 ))))));
  }
  return (RogueClassCmd*)((call_ROGUEM42( 23, (RogueClassCmd*)(cmd_8), THIS )));
}

RogueClassMethod* RogueScope__find_method__Type_CmdAccess_Logical_Logical( RogueClassScope* THIS, RogueClassType* type_context_0, RogueClassCmdAccess* access_1, RogueLogical error_on_fail_2, RogueLogical suppress_inherited_3 )
{
  RogueClassCandidateMethods* candidates_4 = (((RogueCandidateMethods__init__Type_CmdAccess_Logical( ((RogueClassCandidateMethods*)Rogue_program.type_CandidateMethods->create_and_init_object()), type_context_0, access_1, error_on_fail_2 ))));
  RogueMethodList* list_5 = (((RogueString_MethodListTable__get__String( type_context_0->routine_lookup_by_name, access_1->name ))));
  if (!!(list_5))
  {
    {
      RogueMethodList* _auto_875_16 = (list_5);
      RogueInteger _auto_876_17 = (0);
      for (;_auto_876_17 < _auto_875_16->count;++_auto_876_17)
      {
        RogueClassMethod* m_18 = (((RogueClassMethod*)(_auto_875_16->data->objects[_auto_876_17])));
        RogueMethodList__add__Method( candidates_4->available, m_18 );
      }
    }
  }
  list_5 = ((RogueMethodList*)((RogueString_MethodListTable__get__String( type_context_0->method_lookup_by_name, access_1->name ))));
  if (!!(list_5))
  {
    {
      RogueMethodList* _auto_877_19 = (list_5);
      RogueInteger _auto_878_20 = (0);
      for (;_auto_878_20 < _auto_877_19->count;++_auto_878_20)
      {
        RogueClassMethod* m_21 = (((RogueClassMethod*)(_auto_877_19->data->objects[_auto_878_20])));
        RogueMethodList__add__Method( candidates_4->available, m_21 );
      }
    }
  }
  if (!(((RogueCandidateMethods__update_available( candidates_4 )))))
  {
    return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
  }
  if (suppress_inherited_3)
  {
    RogueClassType* most_specific_type_6 = 0;
    {
      RogueMethodList* _auto_879_22 = (candidates_4->available);
      RogueInteger _auto_880_23 = (0);
      for (;_auto_880_23 < _auto_879_22->count;++_auto_880_23)
      {
        RogueClassMethod* m_24 = (((RogueClassMethod*)(_auto_879_22->data->objects[_auto_880_23])));
        if (((RogueMethod__is_initializer( m_24 ))))
        {
          RogueClassType* m_type_context_7 = (m_24->type_context);
          if ((most_specific_type_6 == NULL || ((RogueType__instance_of__Type( m_type_context_7, most_specific_type_6 )))))
          {
            most_specific_type_6 = ((RogueClassType*)m_type_context_7);
          }
        }
      }
    }
    if (!!(most_specific_type_6))
    {
      {
        RogueMethodList* _auto_881_25 = (candidates_4->available);
        RogueInteger _auto_882_26 = (0);
        for (;_auto_882_26 < _auto_881_25->count;++_auto_882_26)
        {
          RogueClassMethod* m_27 = (((RogueClassMethod*)(_auto_881_25->data->objects[_auto_882_26])));
          if (m_27->type_context == most_specific_type_6)
          {
            RogueMethodList__add__Method( candidates_4->compatible, m_27 );
          }
        }
      }
      if (!(((RogueCandidateMethods__update_matches( candidates_4 )))))
      {
        return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
      }
    }
  }
  RogueClassCmdArgs* args_8 = (access_1->args);
  RogueInteger arg_count_9 = (0);
  if (!!(args_8))
  {
    RogueCmdArgs__resolve__Scope( args_8, THIS );
    arg_count_9 = ((RogueInteger)args_8->count);
    {
      RogueClassCmdArgs* _auto_883_28 = (args_8);
      RogueInteger _auto_884_29 = (0);
      for (;_auto_884_29 < _auto_883_28->count;++_auto_884_29)
      {
        RogueClassCmd* arg_30 = (((RogueClassCmd*)(_auto_883_28->data->objects[_auto_884_29])));
        RogueType__organize( (call_ROGUEM46( 28, (RogueClassCmd*)(arg_30) )) );
      }
    }
  }
  {
    RogueMethodList* _auto_885_31 = (candidates_4->available);
    RogueInteger _auto_886_32 = (0);
    for (;_auto_886_32 < _auto_885_31->count;++_auto_886_32)
    {
      RogueClassMethod* m_33 = (((RogueClassMethod*)(_auto_885_31->data->objects[_auto_886_32])));
      {
        RogueLocalList* _auto_887_34 = (m_33->parameters);
        RogueInteger _auto_888_35 = (0);
        for (;_auto_888_35 < _auto_887_34->count;++_auto_888_35)
        {
          RogueClassLocal* param_36 = (((RogueClassLocal*)(_auto_887_34->data->objects[_auto_888_35])));
          RogueType__organize( param_36->_type );
        }
      }
      if (((RogueMethod__accepts_arg_count__Integer( m_33, arg_count_9 ))))
      {
        RogueMethodList__add__Method( candidates_4->compatible, m_33 );
      }
    }
  }
  if (!(((RogueCandidateMethods__update_matches( candidates_4 )))))
  {
    return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
  }
  if (!!(arg_count_9))
  {
    {
      RogueMethodList* _auto_889_37 = (candidates_4->available);
      RogueInteger _auto_890_38 = (0);
      for (;_auto_890_38 < _auto_889_37->count;++_auto_890_38)
      {
        RogueClassMethod* m_39 = (((RogueClassMethod*)(_auto_889_37->data->objects[_auto_890_38])));
        {
          {
            {
              RogueClassCmdArgs* _auto_892_40 = (args_8);
              RogueInteger index_41 = (0);
              for (;index_41 < _auto_892_40->count;++index_41)
              {
                RogueClassType* arg_type_10 = ((call_ROGUEM46( 28, (RogueClassCmd*)(((RogueClassCmd*)(args_8->data->objects[index_41]))) )));
                RogueClassType* param_type_11 = (((RogueClassLocal*)(m_39->parameters->data->objects[index_41]))->_type);
                if ( !(arg_type_10 == param_type_11) ) goto _auto_893;
              }
            }
            RogueMethodList__add__Method( candidates_4->compatible, m_39 );
            goto _auto_891;
          }
          _auto_893:;
        }
        _auto_891:;
      }
    }
    if (!(((RogueCandidateMethods__refine_matches( candidates_4 )))))
    {
      return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
    }
  }
  if (!!(arg_count_9))
  {
    {
      RogueMethodList* _auto_894_42 = (candidates_4->available);
      RogueInteger _auto_895_43 = (0);
      for (;_auto_895_43 < _auto_894_42->count;++_auto_895_43)
      {
        RogueClassMethod* m_44 = (((RogueClassMethod*)(_auto_894_42->data->objects[_auto_895_43])));
        {
          {
            {
              RogueClassCmdArgs* _auto_897_45 = (args_8);
              RogueInteger index_46 = (0);
              for (;index_46 < _auto_897_45->count;++index_46)
              {
                RogueClassType* arg_type_12 = ((call_ROGUEM46( 28, (RogueClassCmd*)(((RogueClassCmd*)(args_8->data->objects[index_46]))) )));
                RogueClassType* param_type_13 = (((RogueClassLocal*)(m_44->parameters->data->objects[index_46]))->_type);
                if ( !(((RogueType__is_compatible_with__Type( arg_type_12, param_type_13 )))) ) goto _auto_898;
              }
            }
            RogueMethodList__add__Method( candidates_4->compatible, m_44 );
            goto _auto_896;
          }
          _auto_898:;
        }
        _auto_896:;
      }
    }
    if (!(((RogueCandidateMethods__refine_matches( candidates_4 )))))
    {
      return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
    }
  }
  if (((RogueCandidateMethods__has_match( candidates_4 ))))
  {
    return (RogueClassMethod*)(((RogueCandidateMethods__match( candidates_4 ))));
  }
  if (arg_count_9 == 1)
  {
    {
      RogueMethodList* _auto_899_47 = (candidates_4->available);
      RogueInteger _auto_900_48 = (0);
      for (;_auto_900_48 < _auto_899_47->count;++_auto_900_48)
      {
        RogueClassMethod* m_49 = (((RogueClassMethod*)(_auto_899_47->data->objects[_auto_900_48])));
        if (m_49->parameters->count == 1)
        {
          RogueClassType* arg_type_14 = ((call_ROGUEM46( 28, (RogueClassCmd*)(((RogueClassCmd*)(args_8->data->objects[0]))) )));
          RogueClassType* param_type_15 = (((RogueClassLocal*)(m_49->parameters->data->objects[0]))->_type);
          RogueType__organize( param_type_15 );
          if ((param_type_15 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object && ((RogueType__has_method_named__String( arg_type_14, Rogue_program.literal_strings[684] )))))
          {
            args_8->data->objects[0] = (call_ROGUEM43( 4, (RogueClassCmd*)(((RogueClassCmd*)(args_8->data->objects[0]))), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object ));
            return (RogueClassMethod*)(m_49);
          }
          else if ((param_type_15 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String && ((RogueType__has_method_named__String( arg_type_14, Rogue_program.literal_strings[685] )))))
          {
            args_8->data->objects[0] = (call_ROGUEM43( 4, (RogueClassCmd*)(((RogueClassCmd*)(args_8->data->objects[0]))), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String ));
            return (RogueClassMethod*)(m_49);
          }
          else if (((RogueType__has_method_named__String( arg_type_14, ((RogueString__operatorPLUS__String( Rogue_program.literal_strings[298], param_type_15->name ))) ))))
          {
            args_8->data->objects[0] = (call_ROGUEM43( 4, (RogueClassCmd*)(((RogueClassCmd*)(args_8->data->objects[0]))), param_type_15 ));
            return (RogueClassMethod*)(m_49);
          }
        }
      }
    }
  }
  RogueCandidateMethods__update_matches( candidates_4 );
  return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
}

RogueClassScope* RogueScope__init_object( RogueClassScope* THIS )
{
  THIS->local_list = ((RogueLocalList__init( ((RogueLocalList*)Rogue_program.type_LocalList->create_and_init_object()) )));
  THIS->control_stack = ((RogueCmdControlStructureList__init( ((RogueCmdControlStructureList*)Rogue_program.type_CmdControlStructureList->create_and_init_object()) )));
  return (RogueClassScope*)(THIS);
}

RogueString* RogueCmdControlStructureList__to_String( RogueCmdControlStructureList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueCmdControlStructureList* _auto_901_2 = (THIS);
    RogueInteger _auto_902_3 = (0);
    for (;_auto_902_3 < _auto_901_2->count;++_auto_902_3)
    {
      RogueClassCmdControlStructure* value_4 = (((RogueClassCmdControlStructure*)(_auto_901_2->data->objects[_auto_902_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueCmdControlStructureList__type_name( RogueCmdControlStructureList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[931]);
}

RogueCmdControlStructureList* RogueCmdControlStructureList__init_object( RogueCmdControlStructureList* THIS )
{
  return (RogueCmdControlStructureList*)(THIS);
}

RogueCmdControlStructureList* RogueCmdControlStructureList__init( RogueCmdControlStructureList* THIS )
{
  RogueCmdControlStructureList__init__Integer( THIS, 10 );
  return (RogueCmdControlStructureList*)(THIS);
}

RogueCmdControlStructureList* RogueCmdControlStructureList__init__Integer( RogueCmdControlStructureList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassCmdControlStructure*), true );
  return (RogueCmdControlStructureList*)(THIS);
}

RogueCmdControlStructureList* RogueCmdControlStructureList__add__CmdControlStructure( RogueCmdControlStructureList* THIS, RogueClassCmdControlStructure* value_0 )
{
  ((RogueCmdControlStructureList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdControlStructureList*)(THIS);
}

RogueInteger RogueCmdControlStructureList__capacity( RogueCmdControlStructureList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueCmdControlStructureList* RogueCmdControlStructureList__reserve__Integer( RogueCmdControlStructureList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassCmdControlStructure*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueCmdControlStructureList__capacity( THIS ))) + ((RogueCmdControlStructureList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassCmdControlStructure*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdControlStructureList*)(THIS);
}

RogueClassCmdControlStructure* RogueCmdControlStructureList__remove_at__Integer( RogueCmdControlStructureList* THIS, RogueInteger index_0 )
{
  RogueClassCmdControlStructure* result_1 = (((RogueClassCmdControlStructure*)(THIS->data->objects[index_0])));
  THIS->data->set(index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  RogueClassCmdControlStructure* zero_value_2 = 0;
  THIS->data->objects[THIS->count] = zero_value_2;
  --THIS->count;
  return (RogueClassCmdControlStructure*)(result_1);
}

RogueClassCmdControlStructure* RogueCmdControlStructureList__remove_last( RogueCmdControlStructureList* THIS )
{
  return (RogueClassCmdControlStructure*)(((RogueCmdControlStructureList__remove_at__Integer( THIS, (THIS->count - 1) ))));
}

RogueString* RogueCmdControlStructure__type_name( RogueClassCmdControlStructure* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[828]);
}

RogueLogical RogueCmdControlStructure__requires_semicolon( RogueClassCmdControlStructure* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmdControlStructure* RogueCmdControlStructure__init_object( RogueClassCmdControlStructure* THIS )
{
  return (RogueClassCmdControlStructure*)(THIS);
}

RogueClassCmd* RogueCmdControlStructure__set_control_logic__CmdControlStructure( RogueClassCmdControlStructure* THIS, RogueClassCmdControlStructure* control_structure_0 )
{
  THIS->_control_type = control_structure_0->_control_type;
  THIS->contains_yield = control_structure_0->contains_yield;
  THIS->escape_label = control_structure_0->escape_label;
  THIS->upkeep_label = control_structure_0->upkeep_label;
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdLiteralThis__type_name( RogueClassCmdLiteralThis* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[846]);
}

RogueClassCmd* RogueCmdLiteralThis__clone__CloneArgs( RogueClassCmdLiteralThis* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassMacroArgs* macro_args_1 = (((RogueClassMacroArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_MacroArgs))));
  if (!!(macro_args_1))
  {
    return (RogueClassCmd*)(((RogueMacroArgs__inline_this( macro_args_1 ))));
  }
  RogueClassTaskArgs* task_args_2 = (((RogueClassTaskArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_TaskArgs))));
  if (!!(task_args_2))
  {
    return (RogueClassCmd*)(((RogueTaskArgs__cmd_read_context__Token( task_args_2, THIS->t ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)((RogueClassCmdLiteralThis*)Rogue_program.type_CmdLiteralThis->create_and_init_object())), THIS->t, THIS->_this_type ))))));
  }
}

void RogueCmdLiteralThis__require_type_context( RogueClassCmdLiteralThis* THIS )
{
  throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[690] )));
}

RogueClassCmd* RogueCmdLiteralThis__resolve__Scope( RogueClassCmdLiteralThis* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->_this_type );
  if (((RogueMethod__is_routine( scope_0->this_method ))))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[847] )));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmdLiteralThis* RogueCmdLiteralThis__init_object( RogueClassCmdLiteralThis* THIS )
{
  return (RogueClassCmdLiteralThis*)(THIS);
}

RogueString* RogueCmdThisContext__type_name( RogueClassCmdThisContext* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[639]);
}

RogueClassCmd* RogueCmdThisContext__clone__CloneArgs( RogueClassCmdThisContext* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassMacroArgs* macro_args_1 = (((RogueClassMacroArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_MacroArgs))));
  if (!!(macro_args_1))
  {
    return (RogueClassCmd*)(((RogueMacroArgs__inline_this( macro_args_1 ))));
  }
  RogueClassTaskArgs* task_args_2 = (((RogueClassTaskArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_TaskArgs))));
  if (!!(task_args_2))
  {
    return (RogueClassCmd*)(((RogueTaskArgs__cmd_read_context__Token( task_args_2, THIS->t ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)Rogue_program.type_CmdThisContext->create_and_init_object()), THIS->t, THIS->_this_type ))))));
  }
}

RogueClassType* Rogue_CmdThisContext__implicit_type( RogueClassCmdThisContext* THIS )
{
  return (RogueClassType*)(THIS->_this_type);
}

void RogueCmdThisContext__require_type_context( RogueClassCmdThisContext* THIS )
{
}

RogueClassCmd* RogueCmdThisContext__resolve__Scope( RogueClassCmdThisContext* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->_this_type );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdThisContext__trace_used_code( RogueClassCmdThisContext* THIS )
{
}

RogueClassType* Rogue_CmdThisContext__type( RogueClassCmdThisContext* THIS )
{
  return (RogueClassType*)(THIS->_this_type);
}

void RogueCmdThisContext__write_cpp__CPPWriter_Logical( RogueClassCmdThisContext* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[767] );
}

RogueClassCmdThisContext* RogueCmdThisContext__init_object( RogueClassCmdThisContext* THIS )
{
  return (RogueClassCmdThisContext*)(THIS);
}

RogueClassCmdThisContext* RogueCmdThisContext__init__Token_Type( RogueClassCmdThisContext* THIS, RogueClassToken* _auto_322_0, RogueClassType* _auto_323_1 )
{
  THIS->_this_type = _auto_323_1;
  THIS->t = _auto_322_0;
  return (RogueClassCmdThisContext*)(THIS);
}

RogueString* RogueCmdLabelArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[601]);
}

RogueString* RogueCmdGenericLoop__type_name( RogueClassCmdGenericLoop* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[838]);
}

RogueClassCmd* RogueCmdGenericLoop__clone__CloneArgs( RogueClassCmdGenericLoop* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_TaskArgs))));
  if ((!!(task_args_1) && THIS->contains_yield))
  {
    if (!!(THIS->control_statements))
    {
      {
        RogueClassCmdStatementList* _auto_911_5 = (THIS->control_statements);
        RogueInteger _auto_912_6 = (0);
        for (;_auto_912_6 < _auto_911_5->count;++_auto_912_6)
        {
          RogueClassCmd* statement_7 = (((RogueClassCmd*)(_auto_911_5->data->objects[_auto_912_6])));
          RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM44( 5, (RogueClassCmd*)(statement_7), ((RogueClassCloneArgs*)(task_args_1)) )) );
        }
      }
    }
    RogueClassCmdTaskControlSection* condition_section_2 = (((RogueTaskArgs__jump_to_new_section__Token( task_args_1, THIS->t ))));
    RogueClassCmdTaskControlSection* after_section_3 = (((RogueTaskArgs__create_section( task_args_1 ))));
    THIS->task_escape_section = after_section_3;
    THIS->task_upkeep_section = ((RogueTaskArgs__create_section( task_args_1 )));
    if (!!(THIS->condition))
    {
      RogueTaskArgs__add_conditional_jump__Cmd_CmdTaskControlSection( task_args_1, ((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)Rogue_program.type_CmdLogicalNot->create_and_init_object())), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->condition, clone_args_0 ))) ))))), after_section_3 );
    }
    {
      RogueClassCmdStatementList* _auto_913_8 = (THIS->statements);
      RogueInteger _auto_914_9 = (0);
      for (;_auto_914_9 < _auto_913_8->count;++_auto_914_9)
      {
        RogueClassCmd* statement_10 = (((RogueClassCmd*)(_auto_913_8->data->objects[_auto_914_9])));
        RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM44( 5, (RogueClassCmd*)(statement_10), ((RogueClassCloneArgs*)(task_args_1)) )) );
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, THIS->t, THIS->task_upkeep_section );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, THIS->task_upkeep_section );
    if (!!(THIS->upkeep))
    {
      {
        RogueClassCmdStatementList* _auto_915_11 = (THIS->upkeep);
        RogueInteger _auto_916_12 = (0);
        for (;_auto_916_12 < _auto_915_11->count;++_auto_916_12)
        {
          RogueClassCmd* statement_13 = (((RogueClassCmd*)(_auto_915_11->data->objects[_auto_916_12])));
          RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM44( 5, (RogueClassCmd*)(statement_13), ((RogueClassCloneArgs*)(task_args_1)) )) );
        }
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, THIS->t, condition_section_2 );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, after_section_3 );
    if (after_section_3->ip < task_args_1->cmd_task_control->sections->count)
    {
      RogueTaskArgs__jump_to_new_section__Token( task_args_1, THIS->t );
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  else
  {
    RogueClassCmdGenericLoop* result_4 = (((RogueCmdGenericLoop__init__Token_Integer_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)Rogue_program.type_CmdGenericLoop->create_and_init_object()), THIS->t, THIS->_control_type, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->condition, clone_args_0 ))), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
    call_ROGUEM171( 31, (RogueClassCmdControlStructure*)(result_4), ((RogueClassCmdControlStructure*)(THIS)) );
    THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_4));
    result_4->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 )));
    result_4->upkeep = ((RogueCmd__clone__CmdStatementList_CloneArgs( ((RogueClassCmd*)THIS), THIS->upkeep, clone_args_0 )));
    result_4->control_statements = ((RogueCmd__clone__CmdStatementList_CloneArgs( ((RogueClassCmd*)THIS), THIS->control_statements, clone_args_0 )));
    return (RogueClassCmd*)(((RogueClassCmd*)(result_4)));
  }
}

RogueClassCmd* RogueCmdGenericLoop__resolve__Scope( RogueClassCmdGenericLoop* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  if (!!(THIS->control_statements))
  {
    {
      RogueClassCmdStatementList* _auto_918_1 = (THIS->control_statements);
      RogueInteger i_2 = (0);
      for (;i_2 < _auto_918_1->count;++i_2)
      {
        THIS->control_statements->data->objects[i_2] = (call_ROGUEM42( 23, (RogueClassCmd*)(((RogueClassCmd*)(THIS->control_statements->data->objects[i_2]))), scope_0 ));
      }
    }
  }
  if (!!(THIS->condition))
  {
    THIS->condition = ((RogueCmd__require_logical__Scope( (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->condition), scope_0 )), scope_0 )));
  }
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  if (!!(THIS->upkeep))
  {
    RogueCmdStatementList__resolve__Scope( THIS->upkeep, scope_0 );
  }
  if (!!(THIS->control_statements))
  {
    {
      RogueClassCmdStatementList* _auto_919_3 = (THIS->control_statements);
      RogueInteger _auto_920_4 = (0);
      for (;_auto_920_4 < _auto_919_3->count;++_auto_920_4)
      {
        RogueClassCmd* statement_5 = (((RogueClassCmd*)(_auto_919_3->data->objects[_auto_920_4])));
        call_ROGUEM45( 11, (RogueClassCmd*)(statement_5), scope_0 );
      }
    }
  }
  RogueCmdControlStructureList__remove_last( scope_0->control_stack );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdGenericLoop__trace_used_code( RogueClassCmdGenericLoop* THIS )
{
  RogueCmdStatementList__trace_used_code( THIS->statements );
  if (!!(THIS->control_statements))
  {
    RogueCmdStatementList__trace_used_code( THIS->control_statements );
  }
  if (!!(THIS->condition))
  {
    call_ROGUEM48( 27, (RogueClassCmd*)(THIS->condition) );
  }
  if (!!(THIS->upkeep))
  {
    RogueCmdStatementList__trace_used_code( THIS->upkeep );
  }
}

void RogueCmdGenericLoop__write_cpp__CPPWriter_Logical( RogueClassCmdGenericLoop* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!!(THIS->control_statements))
  {
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
    writer_0->indent += 2;
    if (!!(THIS->control_statements))
    {
      {
        RogueClassCmdStatementList* _auto_921_3 = (THIS->control_statements);
        RogueInteger _auto_922_4 = (0);
        for (;_auto_922_4 < _auto_921_3->count;++_auto_922_4)
        {
          RogueClassCmd* statement_5 = (((RogueClassCmd*)(_auto_921_3->data->objects[_auto_922_4])));
          call_ROGUEM52( 29, (RogueClassCmd*)(statement_5), writer_0, false );
          RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[184] );
        }
      }
    }
  }
  if ((!!(THIS->upkeep) || !(!!(THIS->condition))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[768] );
    if (!!(THIS->condition))
    {
      call_ROGUEM52( 29, (RogueClassCmd*)(THIS->condition), writer_0, false );
    }
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[184] );
    RogueLogical first_2 = (true);
    if (!!(THIS->upkeep))
    {
      {
        RogueClassCmdStatementList* _auto_923_6 = (THIS->upkeep);
        RogueInteger _auto_924_7 = (0);
        for (;_auto_924_7 < _auto_923_6->count;++_auto_924_7)
        {
          RogueClassCmd* statement_8 = (((RogueClassCmd*)(_auto_923_6->data->objects[_auto_924_7])));
          if (first_2)
          {
            first_2 = ((RogueLogical)false);
          }
          else
          {
            RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[16] );
          }
          call_ROGUEM52( 29, (RogueClassCmd*)(statement_8), writer_0, false );
        }
      }
    }
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[102] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[769] );
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->condition), writer_0, false );
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[102] );
  }
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, false );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
  if (!!(THIS->control_statements))
  {
    writer_0->indent -= 2;
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
  }
  if (!!(THIS->escape_label))
  {
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, THIS->escape_label ))), Rogue_program.literal_strings[770] );
  }
}

RogueClassCmdGenericLoop* RogueCmdGenericLoop__init_object( RogueClassCmdGenericLoop* THIS )
{
  return (RogueClassCmdGenericLoop*)(THIS);
}

RogueClassCmdGenericLoop* RogueCmdGenericLoop__init__Token_Integer_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( RogueClassCmdGenericLoop* THIS, RogueClassToken* _auto_326_0, RogueInteger _auto_327_1, RogueClassCmd* _auto_328_2, RogueClassCmdStatementList* _auto_329_3, RogueClassCmdStatementList* _auto_330_4, RogueClassCmdStatementList* _auto_331_5 )
{
  THIS->control_statements = _auto_331_5;
  THIS->upkeep = _auto_330_4;
  THIS->statements = _auto_329_3;
  THIS->condition = _auto_328_2;
  THIS->_control_type = _auto_327_1;
  THIS->t = _auto_326_0;
  return (RogueClassCmdGenericLoop*)(THIS);
}

void RogueCmdGenericLoop__add_control_var__Local( RogueClassCmdGenericLoop* THIS, RogueClassLocal* v_0 )
{
  if (!(!!(THIS->control_statements)))
  {
    THIS->control_statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) )));
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->control_statements), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local( ((RogueClassCmdLocalDeclaration*)Rogue_program.type_CmdLocalDeclaration->create_and_init_object()), v_0->t, v_0 ))))) );
}

void RogueCmdGenericLoop__add_upkeep__Cmd( RogueClassCmdGenericLoop* THIS, RogueClassCmd* cmd_0 )
{
  if (!(!!(THIS->upkeep)))
  {
    THIS->upkeep = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) )));
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->upkeep), cmd_0 );
}

RogueString* RogueCmdLiteralInteger__type_name( RogueClassCmdLiteralInteger* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[848]);
}

RogueClassCmd* RogueCmdLiteralInteger__cast_to__Type( RogueClassCmdLiteralInteger* THIS, RogueClassType* target_type_0 )
{
  if (target_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)Rogue_program.type_CmdLiteralReal->create_and_init_object()), THIS->t, ((RogueReal)(THIS->value)) ))))));
  }
  else
  {
    return (RogueClassCmd*)((RogueCmd__cast_to__Type( ((RogueClassCmd*)THIS), target_type_0 )));
  }
}

RogueClassCmd* RogueCmdLiteralInteger__clone__CloneArgs( RogueClassCmdLiteralInteger* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, THIS->value ))))));
}

RogueClassCmd* RogueCmdLiteralInteger__resolve__Scope( RogueClassCmdLiteralInteger* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralInteger__type( RogueClassCmdLiteralInteger* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer);
}

void RogueCmdLiteralInteger__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralInteger* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__Integer( writer_0, THIS->value );
}

RogueClassCmdLiteralInteger* RogueCmdLiteralInteger__init_object( RogueClassCmdLiteralInteger* THIS )
{
  return (RogueClassCmdLiteralInteger*)(THIS);
}

RogueClassCmdLiteralInteger* RogueCmdLiteralInteger__init__Token_Integer( RogueClassCmdLiteralInteger* THIS, RogueClassToken* _auto_337_0, RogueInteger _auto_338_1 )
{
  THIS->value = _auto_338_1;
  THIS->t = _auto_337_0;
  return (RogueClassCmdLiteralInteger*)(THIS);
}

RogueString* RogueCmdLiteral__type_name( RogueClassCmdLiteral* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[640]);
}

RogueClassType* Rogue_CmdLiteral__implicit_type( RogueClassCmdLiteral* THIS )
{
  return (RogueClassType*)((call_ROGUEM46( 28, (RogueClassCmd*)(THIS) )));
}

RogueLogical RogueCmdLiteral__is_literal( RogueClassCmdLiteral* THIS )
{
  return (RogueLogical)(true);
}

void RogueCmdLiteral__trace_used_code( RogueClassCmdLiteral* THIS )
{
}

RogueClassCmdLiteral* RogueCmdLiteral__init_object( RogueClassCmdLiteral* THIS )
{
  return (RogueClassCmdLiteral*)(THIS);
}

RogueString* RogueCmdCompareNE__type_name( RogueClassCmdCompareNE* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[964]);
}

RogueClassCmd* RogueCmdCompareNE__clone__CloneArgs( RogueClassCmdCompareNE* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareNE*)Rogue_program.type_CmdCompareNE->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdCompareNE__combine_literal_operands__Type( RogueClassCmdCompareNE* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), THIS->t, ((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralReal)))->value != ((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralReal)))->value ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), THIS->t, ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralInteger)))->value != ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralInteger)))->value ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareNE* RogueCmdCompareNE__init_object( RogueClassCmdCompareNE* THIS )
{
  return (RogueClassCmdCompareNE*)(THIS);
}

RogueString* RogueCmdCompareNE__symbol( RogueClassCmdCompareNE* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[174]);
}

RogueClassCmd* RogueCmdCompareNE__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareNE* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  RogueClassCmd* cmd_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[901], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[902], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM205( 23, (RogueClassCmdBinary*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareNE*)Rogue_program.type_CmdCompareNE->create_and_init_object())), THIS->t, cmd_4, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, 0 ))))) )))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[903], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)Rogue_program.type_CmdLogicalNot->create_and_init_object())), THIS->t, cmd_4 ))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->right, Rogue_program.literal_strings[901], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->right, Rogue_program.literal_strings[903], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)Rogue_program.type_CmdLogicalNot->create_and_init_object())), THIS->t, cmd_4 ))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[901], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), true, false ))));
}

RogueString* RogueCmdComparison__type_name( RogueClassCmdComparison* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[871]);
}

RogueClassType* Rogue_CmdComparison__type( RogueClassCmdComparison* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

RogueClassCmdComparison* RogueCmdComparison__init_object( RogueClassCmdComparison* THIS )
{
  return (RogueClassCmdComparison*)(THIS);
}

RogueLogical RogueCmdComparison__requires_parens( RogueClassCmdComparison* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdComparison__resolve_for_types__Scope_Type_Type( RogueClassCmdComparison* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  THIS->resolved = true;
  if ((((RogueType__is_compound( left_type_1 ))) || ((RogueType__is_compound( right_type_2 )))))
  {
    RogueClassCmd* result_3 = ((call_ROGUEM218( 39, (RogueClassCmdComparison*)(THIS), scope_0, left_type_1, right_type_2, false )));
    if (!!(result_3))
    {
      return (RogueClassCmd*)(result_3);
    }
    if (left_type_1 == right_type_2)
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
    }
    throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[880] ))), ((RogueType__to_String( left_type_1 ))) ))), Rogue_program.literal_strings[317] ))), ((RogueType__to_String( right_type_2 ))) ))), Rogue_program.literal_strings[47] ))) ))) )));
  }
  else if ((((RogueType__is_reference( left_type_1 ))) || ((RogueType__is_reference( right_type_2 )))))
  {
    return (RogueClassCmd*)((call_ROGUEM218( 39, (RogueClassCmdComparison*)(THIS), scope_0, left_type_1, right_type_2, true )));
  }
  RogueClassType* common_type_4 = (((RogueCmd__must_find_common_type__Type_Type( ((RogueClassCmd*)THIS), left_type_1, right_type_2 ))));
  THIS->left = (call_ROGUEM42( 23, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->left), common_type_4 ))), scope_0 ));
  THIS->right = (call_ROGUEM42( 23, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->right), common_type_4 ))), scope_0 ));
  if (((call_ROGUEM47( 16, (RogueClassCmd*)(THIS->left) )) && (call_ROGUEM47( 16, (RogueClassCmd*)(THIS->right) ))))
  {
    return (RogueClassCmd*)((call_ROGUEM43( 9, (RogueClassCmd*)(THIS), common_type_4 )));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdComparison__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdComparison* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[879] )));
}

RogueString* RogueCmdBinary__type_name( RogueClassCmdBinary* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[641]);
}

RogueClassCmd* RogueCmdBinary__resolve__Scope( RogueClassCmdBinary* THIS, RogueClassScope* scope_0 )
{
  THIS->left = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->left), scope_0 ));
  THIS->right = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->right), scope_0 ));
  RogueClassType* left_type_1 = (((Rogue_Cmd__require_type( THIS->left ))));
  RogueClassType* right_type_2 = (((Rogue_Cmd__require_type( THIS->right ))));
  RogueClassCmd* result_3 = ((call_ROGUEM214( 34, (RogueClassCmdBinary*)(THIS), scope_0, left_type_1, right_type_2 )));
  return (RogueClassCmd*)(result_3);
}

void RogueCmdBinary__trace_used_code( RogueClassCmdBinary* THIS )
{
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->left) );
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->right) );
}

RogueClassType* Rogue_CmdBinary__type( RogueClassCmdBinary* THIS )
{
  return (RogueClassType*)(((RogueCmd__find_operation_result_type__Type_Type( ((RogueClassCmd*)THIS), ((Rogue_Cmd__require_type( THIS->left ))), ((Rogue_Cmd__require_type( THIS->right ))) ))));
}

void RogueCmdBinary__write_cpp__CPPWriter_Logical( RogueClassCmdBinary* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if ((call_ROGUEM221( 33, (RogueClassCmdBinary*)(THIS) )))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[176] );
  }
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->left), writer_0, false );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[255] ))), (call_ROGUEM210( 38, (RogueClassCmdBinary*)(THIS) )) ))), Rogue_program.literal_strings[255] );
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->right), writer_0, false );
  if ((call_ROGUEM221( 33, (RogueClassCmdBinary*)(THIS) )))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] );
  }
}

RogueClassCmdBinary* RogueCmdBinary__init_object( RogueClassCmdBinary* THIS )
{
  return (RogueClassCmdBinary*)(THIS);
}

RogueClassCmdBinary* RogueCmdBinary__init__Token_Cmd_Cmd( RogueClassCmdBinary* THIS, RogueClassToken* _auto_339_0, RogueClassCmd* _auto_340_1, RogueClassCmd* _auto_341_2 )
{
  THIS->right = _auto_341_2;
  THIS->left = _auto_340_1;
  THIS->t = _auto_339_0;
  return (RogueClassCmdBinary*)(THIS);
}

RogueString* RogueCmdBinary__fn_name( RogueClassCmdBinary* THIS )
{
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[287] ))), (call_ROGUEM210( 2, (RogueClassCmdBinary*)(THIS) )) ))), Rogue_program.literal_strings[706] ))) ))) )));
}

RogueLogical RogueCmdBinary__requires_parens( RogueClassCmdBinary* THIS )
{
  return (RogueLogical)(true);
}

RogueClassCmd* RogueCmdBinary__resolve_for_types__Scope_Type_Type( RogueClassCmdBinary* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  RogueClassCmd* operator_method_call_3 = ((call_ROGUEM214( 36, (RogueClassCmdBinary*)(THIS), scope_0, left_type_1, right_type_2 )));
  if (!!(operator_method_call_3))
  {
    return (RogueClassCmd*)(operator_method_call_3);
  }
  RogueClassType* common_type_4 = (((RogueCmd__must_find_common_type__Type_Type( ((RogueClassCmd*)THIS), left_type_1, right_type_2 ))));
  THIS->left = (call_ROGUEM42( 23, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->left), common_type_4 ))), scope_0 ));
  THIS->right = (call_ROGUEM42( 23, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->right), common_type_4 ))), scope_0 ));
  if (((call_ROGUEM47( 16, (RogueClassCmd*)(THIS->left) )) && (call_ROGUEM47( 16, (RogueClassCmd*)(THIS->right) ))))
  {
    return (RogueClassCmd*)((call_ROGUEM43( 9, (RogueClassCmd*)(THIS), common_type_4 )));
  }
  return (RogueClassCmd*)((call_ROGUEM213( 35, (RogueClassCmdBinary*)(THIS), scope_0, common_type_4 )));
}

RogueClassCmd* RogueCmdBinary__resolve_for_common_type__Scope_Type( RogueClassCmdBinary* THIS, RogueClassScope* scope_0, RogueClassType* common_type_1 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdBinary__resolve_operator_method__Scope_Type_Type( RogueClassCmdBinary* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  if (((RogueType__has_method_named__String( left_type_1, (call_ROGUEM210( 32, (RogueClassCmdBinary*)(THIS) )) ))))
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, (call_ROGUEM210( 32, (RogueClassCmdBinary*)(THIS) )), ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), scope_0 ))));
  }
  else if (((RogueType__has_routine_named__String( left_type_1, (call_ROGUEM210( 32, (RogueClassCmdBinary*)(THIS) )) ))))
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, left_type_1->name ))))), (call_ROGUEM210( 32, (RogueClassCmdBinary*)(THIS) )), ((RogueCmdArgs__init__Cmd_Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->left, THIS->right ))) ))), scope_0 ))));
  }
  else if (((RogueType__has_routine_named__String( right_type_2, (call_ROGUEM210( 32, (RogueClassCmdBinary*)(THIS) )) ))))
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, right_type_2->name ))))), (call_ROGUEM210( 32, (RogueClassCmdBinary*)(THIS) )), ((RogueCmdArgs__init__Cmd_Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->left, THIS->right ))) ))), scope_0 ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
}

RogueString* RogueCmdBinary__symbol( RogueClassCmdBinary* THIS )
{
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[287] ))), (call_ROGUEM210( 2, (RogueClassCmdBinary*)(THIS) )) ))), Rogue_program.literal_strings[771] ))) ))) )));
}

RogueString* RogueCmdBinary__cpp_symbol( RogueClassCmdBinary* THIS )
{
  return (RogueString*)((call_ROGUEM210( 37, (RogueClassCmdBinary*)(THIS) )));
}

RogueString* RogueTaskArgs__type_name( RogueClassTaskArgs* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[836]);
}

RogueClassTaskArgs* RogueTaskArgs__init_object( RogueClassTaskArgs* THIS )
{
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassTaskArgs* RogueTaskArgs__init__Type_Method_Type_Method( RogueClassTaskArgs* THIS, RogueClassType* _auto_348_0, RogueClassMethod* _auto_349_1, RogueClassType* _auto_350_2, RogueClassMethod* _auto_351_3 )
{
  THIS->original_method = _auto_351_3;
  THIS->_original_type = _auto_350_2;
  THIS->task_method = _auto_349_1;
  THIS->_task_type = _auto_348_0;
  THIS->cmd_task_control = ((RogueCmdTaskControl__init__Token( ((RogueClassCmdTaskControl*)Rogue_program.type_CmdTaskControl->create_and_init_object()), THIS->task_method->t )));
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassTaskArgs* RogueTaskArgs__add__Cmd( RogueClassTaskArgs* THIS, RogueClassCmd* cmd_0 )
{
  if (!!(cmd_0))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->cmd_task_control->current_section->statements), cmd_0 );
  }
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassTaskArgs* RogueTaskArgs__add_jump__Token_CmdTaskControlSection( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassCmdTaskControlSection* to_section_1 )
{
  RogueTaskArgs__set_next_ip__Token_CmdTaskControlSection( THIS, t_0, to_section_1 );
  RogueTaskArgs__add__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)Rogue_program.type_CmdReturn->create_and_init_object()), t_0, ((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), t_0, true ))))) ))))) );
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassTaskArgs* RogueTaskArgs__add_conditional_jump__Cmd_CmdTaskControlSection( RogueClassTaskArgs* THIS, RogueClassCmd* condition_0, RogueClassCmdTaskControlSection* to_section_1 )
{
  RogueClassToken* t_2 = (condition_0->t);
  RogueClassCmdIf* cmd_if_3 = (((RogueCmdIf__init__Token_Cmd_Integer( ((RogueClassCmdIf*)Rogue_program.type_CmdIf->create_and_init_object()), t_2, condition_0, 2 ))));
  RogueInteger ip_4 = (to_section_1->ip);
  if ((THIS->cmd_task_control->current_section->ip + 1) != ip_4)
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)cmd_if_3->statements), ((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)Rogue_program.type_CmdWriteProperty->create_and_init_object()), t_2, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)Rogue_program.type_CmdThisContext->create_and_init_object()), t_2, THIS->_task_type ))))), THIS->ip_property, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), t_2, (ip_4 - 1) ))))) ))))) );
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)cmd_if_3->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)Rogue_program.type_CmdReturn->create_and_init_object()), t_2, ((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), t_2, true ))))) ))))) );
  RogueTaskArgs__add__Cmd( THIS, ((RogueClassCmd*)(cmd_if_3)) );
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassCmd* RogueTaskArgs__create_return__Token_Cmd( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassCmd* value_1 )
{
  RogueClassCmdBlock* result_2 = (((RogueCmdBlock__init__Token_Integer( ((RogueClassCmdBlock*)Rogue_program.type_CmdBlock->create_and_init_object()), t_0, 0 ))));
  if (!!(value_1))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)result_2->statements), ((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)Rogue_program.type_CmdAssign->create_and_init_object()), t_0, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), t_0, Rogue_program.literal_strings[357] ))))), value_1 ))))) );
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)result_2->statements), ((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)Rogue_program.type_CmdWriteProperty->create_and_init_object()), t_0, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)Rogue_program.type_CmdThisContext->create_and_init_object()), t_0, THIS->_task_type ))))), THIS->ip_property, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), t_0, -1 ))))) ))))) );
  RogueCmdList__add__Cmd( ((RogueCmdList*)result_2->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)Rogue_program.type_CmdReturn->create_and_init_object()), t_0, ((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), t_0, false ))))) ))))) );
  return (RogueClassCmd*)(((RogueClassCmd*)(result_2)));
}

RogueClassCmd* RogueTaskArgs__create_escape__Token_CmdTaskControlSection( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassCmdTaskControlSection* escape_section_1 )
{
  RogueClassCmdBlock* result_2 = (((RogueCmdBlock__init__Token_Integer( ((RogueClassCmdBlock*)Rogue_program.type_CmdBlock->create_and_init_object()), t_0, 0 ))));
  RogueCmdList__add__Cmd( ((RogueCmdList*)result_2->statements), ((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)Rogue_program.type_CmdWriteProperty->create_and_init_object()), t_0, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)Rogue_program.type_CmdThisContext->create_and_init_object()), t_0, THIS->_task_type ))))), THIS->ip_property, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), t_0, (escape_section_1->ip - 1) ))))) ))))) );
  RogueCmdList__add__Cmd( ((RogueCmdList*)result_2->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)Rogue_program.type_CmdReturn->create_and_init_object()), t_0, ((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), t_0, false ))))) ))))) );
  return (RogueClassCmd*)(((RogueClassCmd*)(result_2)));
}

RogueClassTaskArgs* RogueTaskArgs__add_yield__Token( RogueClassTaskArgs* THIS, RogueClassToken* t_0 )
{
  RogueClassCmdTaskControlSection* next_section_1 = (((RogueTaskArgs__create_section( THIS ))));
  RogueTaskArgs__set_next_ip__Token_CmdTaskControlSection( THIS, t_0, next_section_1 );
  RogueTaskArgs__add__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)Rogue_program.type_CmdReturn->create_and_init_object()), t_0, ((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), t_0, false ))))) ))))) );
  RogueTaskArgs__begin_section__CmdTaskControlSection( THIS, next_section_1 );
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassCmdTaskControlSection* RogueTaskArgs__jump_to_new_section__Token( RogueClassTaskArgs* THIS, RogueClassToken* t_0 )
{
  RogueClassCmdTaskControlSection* new_section_1 = (((RogueTaskArgs__create_section( THIS ))));
  RogueTaskArgs__add_jump__Token_CmdTaskControlSection( THIS, t_0, new_section_1 );
  RogueTaskArgs__begin_section__CmdTaskControlSection( THIS, new_section_1 );
  return (RogueClassCmdTaskControlSection*)(new_section_1);
}

RogueClassTaskArgs* RogueTaskArgs__begin_section__CmdTaskControlSection( RogueClassTaskArgs* THIS, RogueClassCmdTaskControlSection* section_0 )
{
  THIS->cmd_task_control->current_section = section_0;
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassCmdTaskControlSection* RogueTaskArgs__create_section( RogueClassTaskArgs* THIS )
{
  RogueClassCmdTaskControlSection* section_0 = (((RogueCmdTaskControlSection__init__Integer( ((RogueClassCmdTaskControlSection*)Rogue_program.type_CmdTaskControlSection->create_and_init_object()), (THIS->cmd_task_control->sections->count + 1) ))));
  RogueCmdTaskControlSectionList__add__CmdTaskControlSection( THIS->cmd_task_control->sections, section_0 );
  return (RogueClassCmdTaskControlSection*)(section_0);
}

RogueClassCmd* RogueTaskArgs__cmd_read_this__Token( RogueClassTaskArgs* THIS, RogueClassToken* t_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)Rogue_program.type_CmdThisContext->create_and_init_object()), t_0, THIS->_task_type ))))));
}

RogueClassCmd* RogueTaskArgs__cmd_read_context__Token( RogueClassTaskArgs* THIS, RogueClassToken* t_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)Rogue_program.type_CmdReadProperty->create_and_init_object()), t_0, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)Rogue_program.type_CmdThisContext->create_and_init_object()), t_0, THIS->_task_type ))))), THIS->context_property ))))));
}

RogueString* RogueTaskArgs__convert_local_name__Local( RogueClassTaskArgs* THIS, RogueClassLocal* local_info_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), local_info_0->name ))), Rogue_program.literal_strings[352] ))), ((RogueInteger__to_String( local_info_0->index ))) ))) ))));
}

RogueClassCmd* RogueTaskArgs__cmd_read__Token_Local( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassLocal* local_info_1 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), t_0, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)Rogue_program.type_CmdThisContext->create_and_init_object()), t_0, THIS->_task_type ))))), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), local_info_1->name ))), Rogue_program.literal_strings[352] ))), ((RogueInteger__to_String( local_info_1->index ))) ))) ))) ))))));
}

RogueClassCmd* RogueTaskArgs__cmd_write__Token_Local_Cmd( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassLocal* local_info_1, RogueClassCmd* new_value_2 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)Rogue_program.type_CmdAssign->create_and_init_object()), t_0, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), t_0, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)Rogue_program.type_CmdThisContext->create_and_init_object()), t_0, THIS->_task_type ))))), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), local_info_1->name ))), Rogue_program.literal_strings[352] ))), ((RogueInteger__to_String( local_info_1->index ))) ))) ))) ))))), new_value_2 ))))));
}

RogueClassCmd* RogueTaskArgs__replace_write_local__Token_Local_Cmd( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassLocal* local_info_1, RogueClassCmd* new_value_2 )
{
  if (new_value_2 == NULL)
  {
    new_value_2 = ((RogueClassCmd*)((RogueType__create_default_value__Token( local_info_1->_type, t_0 ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)Rogue_program.type_CmdAssign->create_and_init_object()), t_0, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), t_0, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)Rogue_program.type_CmdThisContext->create_and_init_object()), t_0, THIS->_task_type ))))), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), local_info_1->name ))), Rogue_program.literal_strings[352] ))), ((RogueInteger__to_String( local_info_1->index ))) ))) ))) ))))), new_value_2 ))))));
}

RogueClassTaskArgs* RogueTaskArgs__set_next_ip__Token_CmdTaskControlSection( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassCmdTaskControlSection* to_section_1 )
{
  RogueInteger ip_2 = (to_section_1->ip);
  if ((THIS->cmd_task_control->current_section->ip + 1) != ip_2)
  {
    RogueCmdTaskControl__add__Cmd( THIS->cmd_task_control, ((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)Rogue_program.type_CmdWriteProperty->create_and_init_object()), t_0, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)Rogue_program.type_CmdThisContext->create_and_init_object()), t_0, THIS->_task_type ))))), THIS->ip_property, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), t_0, (ip_2 - 1) ))))) ))))) );
  }
  return (RogueClassTaskArgs*)(THIS);
}

RogueString* RogueCmdArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[602]);
}

RogueString* RogueCmdTaskControl__type_name( RogueClassCmdTaskControl* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[642]);
}

RogueLogical RogueCmdTaskControl__requires_semicolon( RogueClassCmdTaskControl* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdTaskControl__resolve__Scope( RogueClassCmdTaskControl* THIS, RogueClassScope* scope_0 )
{
  {
    RogueCmdTaskControlSectionList* _auto_930_1 = (THIS->sections);
    RogueInteger _auto_931_2 = (0);
    for (;_auto_931_2 < _auto_930_1->count;++_auto_931_2)
    {
      RogueClassCmdTaskControlSection* section_3 = (((RogueClassCmdTaskControlSection*)(_auto_930_1->data->objects[_auto_931_2])));
      RogueCmdStatementList__resolve__Scope( section_3->statements, scope_0 );
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdTaskControl__trace_used_code( RogueClassCmdTaskControl* THIS )
{
  {
    RogueCmdTaskControlSectionList* _auto_932_0 = (THIS->sections);
    RogueInteger _auto_933_1 = (0);
    for (;_auto_933_1 < _auto_932_0->count;++_auto_933_1)
    {
      RogueClassCmdTaskControlSection* section_2 = (((RogueClassCmdTaskControlSection*)(_auto_932_0->data->objects[_auto_933_1])));
      RogueCmdStatementList__trace_used_code( section_2->statements );
    }
  }
}

void RogueCmdTaskControl__write_cpp__CPPWriter_Logical( RogueClassCmdTaskControl* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[772] );
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
  writer_0->indent += 2;
  {
    RogueCmdTaskControlSectionList* _auto_934_2 = (THIS->sections);
    RogueInteger _auto_935_3 = (0);
    for (;_auto_935_3 < _auto_934_2->count;++_auto_935_3)
    {
      RogueClassCmdTaskControlSection* section_4 = (((RogueClassCmdTaskControlSection*)(_auto_934_2->data->objects[_auto_935_3])));
      RogueCPPWriter__println__String( ((RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[487] ))), section_4->ip ))), Rogue_program.literal_strings[157] );
      RogueCmdStatementList__write_cpp__CPPWriter_Logical( section_4->statements, writer_0, false );
    }
  }
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[490] );
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[773] );
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[774] );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
}

RogueClassCmdTaskControl* RogueCmdTaskControl__init_object( RogueClassCmdTaskControl* THIS )
{
  THIS->sections = ((RogueCmdTaskControlSectionList__init( ((RogueCmdTaskControlSectionList*)Rogue_program.type_CmdTaskControlSectionList->create_and_init_object()) )));
  return (RogueClassCmdTaskControl*)(THIS);
}

RogueClassCmdTaskControl* RogueCmdTaskControl__init__Token( RogueClassCmdTaskControl* THIS, RogueClassToken* _auto_354_0 )
{
  THIS->t = _auto_354_0;
  THIS->current_section = ((RogueCmdTaskControlSection__init__Integer( ((RogueClassCmdTaskControlSection*)Rogue_program.type_CmdTaskControlSection->create_and_init_object()), 1 )));
  RogueCmdTaskControlSectionList__add__CmdTaskControlSection( THIS->sections, THIS->current_section );
  return (RogueClassCmdTaskControl*)(THIS);
}

RogueClassCmdTaskControl* RogueCmdTaskControl__add__Cmd( RogueClassCmdTaskControl* THIS, RogueClassCmd* cmd_0 )
{
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->current_section->statements), cmd_0 );
  return (RogueClassCmdTaskControl*)(THIS);
}

RogueString* RogueCmdTaskControlSection__type_name( RogueClassCmdTaskControlSection* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[563]);
}

RogueClassCmdTaskControlSection* RogueCmdTaskControlSection__init__Integer( RogueClassCmdTaskControlSection* THIS, RogueInteger _auto_355_0 )
{
  THIS->ip = _auto_355_0;
  return (RogueClassCmdTaskControlSection*)(THIS);
}

RogueClassCmdTaskControlSection* RogueCmdTaskControlSection__init_object( RogueClassCmdTaskControlSection* THIS )
{
  THIS->statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) )));
  return (RogueClassCmdTaskControlSection*)(THIS);
}

RogueString* RogueString_MethodListTableEntryList__to_String( RogueTableEntry_of_String_MethodListList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_MethodListList* _auto_936_2 = (THIS);
    RogueInteger _auto_937_3 = (0);
    for (;_auto_937_3 < _auto_936_2->count;++_auto_937_3)
    {
      RogueClassString_MethodListTableEntry* value_4 = (((RogueClassString_MethodListTableEntry*)(_auto_936_2->data->objects[_auto_937_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueString_MethodListTableEntryList__type_name( RogueTableEntry_of_String_MethodListList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[932]);
}

RogueTableEntry_of_String_MethodListList* RogueString_MethodListTableEntryList__init_object( RogueTableEntry_of_String_MethodListList* THIS )
{
  return (RogueTableEntry_of_String_MethodListList*)(THIS);
}

RogueTableEntry_of_String_MethodListList* RogueString_MethodListTableEntryList__init__Integer_String_MethodListTableEntry( RogueTableEntry_of_String_MethodListList* THIS, RogueInteger initial_capacity_0, RogueClassString_MethodListTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_MethodListTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_366_3 = (initial_capacity_0);
    for (;i_2 <= _auto_366_3;++i_2)
    {
      RogueString_MethodListTableEntryList__add__String_MethodListTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_MethodListList*)(THIS);
}

RogueTableEntry_of_String_MethodListList* RogueString_MethodListTableEntryList__add__String_MethodListTableEntry( RogueTableEntry_of_String_MethodListList* THIS, RogueClassString_MethodListTableEntry* value_0 )
{
  ((RogueString_MethodListTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_MethodListList*)(THIS);
}

RogueInteger RogueString_MethodListTableEntryList__capacity( RogueTableEntry_of_String_MethodListList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_MethodListList* RogueString_MethodListTableEntryList__reserve__Integer( RogueTableEntry_of_String_MethodListList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_MethodListTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_MethodListTableEntryList__capacity( THIS ))) + ((RogueString_MethodListTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_MethodListTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_MethodListList*)(THIS);
}

RogueString* RogueString_MethodListTableEntry__type_name( RogueClassString_MethodListTableEntry* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[564]);
}

RogueClassString_MethodListTableEntry* RogueString_MethodListTableEntry__init__String_MethodList_Integer( RogueClassString_MethodListTableEntry* THIS, RogueString* _key_0, RogueMethodList* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_MethodListTableEntry*)(THIS);
}

RogueClassString_MethodListTableEntry* RogueString_MethodListTableEntry__init_object( RogueClassString_MethodListTableEntry* THIS )
{
  return (RogueClassString_MethodListTableEntry*)(THIS);
}

RogueString* RogueString_MethodListTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[603]);
}

RogueString* RogueString_CmdTable__to_String( RogueClassString_CmdTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_CmdTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))) ))) ))));
}

RogueString* RogueString_CmdTable__type_name( RogueClassString_CmdTable* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[565]);
}

RogueClassString_CmdTable* RogueString_CmdTable__init( RogueClassString_CmdTable* THIS )
{
  RogueString_CmdTable__init__Integer( THIS, 16 );
  return (RogueClassString_CmdTable*)(THIS);
}

RogueClassString_CmdTable* RogueString_CmdTable__init__Integer( RogueClassString_CmdTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_CmdTableEntryList__init__Integer_String_CmdTableEntry( ((RogueTableEntry_of_String_CmdList*)Rogue_program.type_TableEntry_of_String_CmdList->create_and_init_object()), bin_count_0, ((RogueClassString_CmdTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  return (RogueClassString_CmdTable*)(THIS);
}

RogueLogical RogueString_CmdTable__contains__String( RogueClassString_CmdTable* THIS, RogueString* key_0 )
{
  return (RogueLogical)(!!(((RogueString_CmdTable__find__String( THIS, key_0 )))));
}

RogueClassString_CmdTableEntry* RogueString_CmdTable__find__String( RogueClassString_CmdTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_CmdTableEntry* entry_2 = (((RogueClassString_CmdTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_CmdTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_CmdTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_CmdTableEntry*)(((RogueClassString_CmdTableEntry*)(NULL)));
}

RogueClassCmd* RogueString_CmdTable__get__String( RogueClassString_CmdTable* THIS, RogueString* key_0 )
{
  RogueClassString_CmdTableEntry* entry_1 = (((RogueString_CmdTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassCmd*)(entry_1->value);
  }
  else
  {
    RogueClassCmd* default_value_2 = 0;
    return (RogueClassCmd*)(default_value_2);
  }
}

void RogueString_CmdTable__set__String_Cmd( RogueClassString_CmdTable* THIS, RogueString* key_0, RogueClassCmd* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_CmdTableEntry* entry_4 = (((RogueClassString_CmdTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_CmdTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_CmdTableEntry*)((RogueString_CmdTableEntry__init__String_Cmd_Integer( ((RogueClassString_CmdTableEntry*)Rogue_program.type_String_CmdTableEntry->create_and_init_object()), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_CmdTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_CmdTable__print_to__StringBuilder( RogueClassString_CmdTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_CmdTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_CmdTable* RogueString_CmdTable__init_object( RogueClassString_CmdTable* THIS )
{
  return (RogueClassString_CmdTable*)(THIS);
}

RogueString* RoguePropertyList__to_String( RoguePropertyList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RoguePropertyList* _auto_950_2 = (THIS);
    RogueInteger _auto_951_3 = (0);
    for (;_auto_951_3 < _auto_950_2->count;++_auto_951_3)
    {
      RogueClassProperty* value_4 = (((RogueClassProperty*)(_auto_950_2->data->objects[_auto_951_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RoguePropertyList__type_name( RoguePropertyList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[933]);
}

RoguePropertyList* RoguePropertyList__init_object( RoguePropertyList* THIS )
{
  return (RoguePropertyList*)(THIS);
}

RoguePropertyList* RoguePropertyList__init( RoguePropertyList* THIS )
{
  RoguePropertyList__init__Integer( THIS, 10 );
  return (RoguePropertyList*)(THIS);
}

RoguePropertyList* RoguePropertyList__init__Integer( RoguePropertyList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassProperty*), true );
  return (RoguePropertyList*)(THIS);
}

RoguePropertyList* RoguePropertyList__add__Property( RoguePropertyList* THIS, RogueClassProperty* value_0 )
{
  ((RoguePropertyList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RoguePropertyList*)(THIS);
}

RogueInteger RoguePropertyList__capacity( RoguePropertyList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RoguePropertyList* RoguePropertyList__clear( RoguePropertyList* THIS )
{
  THIS->count = 0;
  return (RoguePropertyList*)(THIS);
}

RogueOptionalInteger RoguePropertyList__locate__Property( RoguePropertyList* THIS, RogueClassProperty* value_0 )
{
  {
    RoguePropertyList* _auto_958_1 = (THIS);
    RogueInteger i_2 = (0);
    for (;i_2 < _auto_958_1->count;++i_2)
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)value_0), ((RogueObject*)(((RogueClassProperty*)(THIS->data->objects[i_2])))) ))))
      {
        return (RogueOptionalInteger)(RogueOptionalInteger( i_2 ));
      }
    }
  }
  return (RogueOptionalInteger)(RogueOptionalInteger());
}

RoguePropertyList* RoguePropertyList__reserve__Integer( RoguePropertyList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassProperty*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RoguePropertyList__capacity( THIS ))) + ((RoguePropertyList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassProperty*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RoguePropertyList*)(THIS);
}

RogueString* RogueString_PropertyTable__to_String( RogueClassString_PropertyTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_PropertyTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))) ))) ))));
}

RogueString* RogueString_PropertyTable__type_name( RogueClassString_PropertyTable* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[566]);
}

RogueClassString_PropertyTable* RogueString_PropertyTable__init( RogueClassString_PropertyTable* THIS )
{
  RogueString_PropertyTable__init__Integer( THIS, 16 );
  return (RogueClassString_PropertyTable*)(THIS);
}

RogueClassString_PropertyTable* RogueString_PropertyTable__init__Integer( RogueClassString_PropertyTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_PropertyTableEntryList__init__Integer_String_PropertyTableEntry( ((RogueTableEntry_of_String_PropertyList*)Rogue_program.type_TableEntry_of_String_PropertyList->create_and_init_object()), bin_count_0, ((RogueClassString_PropertyTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  return (RogueClassString_PropertyTable*)(THIS);
}

void RogueString_PropertyTable__clear( RogueClassString_PropertyTable* THIS )
{
  {
    RogueTableEntry_of_String_PropertyList* _auto_963_0 = (THIS->bins);
    RogueInteger i_1 = (0);
    for (;i_1 < _auto_963_0->count;++i_1)
    {
      THIS->bins->data->objects[i_1] = ((RogueClassString_PropertyTableEntry*)(NULL));
    }
  }
  RogueStringList__clear( THIS->keys );
}

RogueClassString_PropertyTableEntry* RogueString_PropertyTable__find__String( RogueClassString_PropertyTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_PropertyTableEntry* entry_2 = (((RogueClassString_PropertyTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_PropertyTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_PropertyTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_PropertyTableEntry*)(((RogueClassString_PropertyTableEntry*)(NULL)));
}

RogueClassProperty* RogueString_PropertyTable__get__String( RogueClassString_PropertyTable* THIS, RogueString* key_0 )
{
  RogueClassString_PropertyTableEntry* entry_1 = (((RogueString_PropertyTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassProperty*)(entry_1->value);
  }
  else
  {
    RogueClassProperty* default_value_2 = 0;
    return (RogueClassProperty*)(default_value_2);
  }
}

void RogueString_PropertyTable__set__String_Property( RogueClassString_PropertyTable* THIS, RogueString* key_0, RogueClassProperty* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_PropertyTableEntry* entry_4 = (((RogueClassString_PropertyTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_PropertyTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_PropertyTableEntry*)((RogueString_PropertyTableEntry__init__String_Property_Integer( ((RogueClassString_PropertyTableEntry*)Rogue_program.type_String_PropertyTableEntry->create_and_init_object()), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_PropertyTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_PropertyTable__print_to__StringBuilder( RogueClassString_PropertyTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_PropertyTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_PropertyTable* RogueString_PropertyTable__init_object( RogueClassString_PropertyTable* THIS )
{
  return (RogueClassString_PropertyTable*)(THIS);
}

RogueString* RogueCmdLiteralNull__type_name( RogueClassCmdLiteralNull* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[849]);
}

RogueClassCmd* RogueCmdLiteralNull__cast_to__Type( RogueClassCmdLiteralNull* THIS, RogueClassType* target_type_0 )
{
  if (target_type_0->is_optional)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateOptionalValue__init__Token_Type_Cmd( ((RogueClassCmdCreateOptionalValue*)Rogue_program.type_CmdCreateOptionalValue->create_and_init_object()), THIS->t, target_type_0, ((RogueClassCmd*)(NULL)) ))))));
  }
  else
  {
    return (RogueClassCmd*)((RogueCmd__cast_to__Type( ((RogueClassCmd*)THIS), target_type_0 )));
  }
}

RogueClassCmd* RogueCmdLiteralNull__clone__CloneArgs( RogueClassCmdLiteralNull* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralNull__init__Token( ((RogueClassCmdLiteralNull*)Rogue_program.type_CmdLiteralNull->create_and_init_object()), THIS->t ))))));
}

RogueClassCmdLiteralNull* RogueCmdLiteralNull__resolve__Scope( RogueClassCmdLiteralNull* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmdLiteralNull*)(THIS);
}

RogueClassType* Rogue_CmdLiteralNull__type( RogueClassCmdLiteralNull* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_null);
}

void RogueCmdLiteralNull__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralNull* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[775] );
}

RogueClassCmdLiteralNull* RogueCmdLiteralNull__init_object( RogueClassCmdLiteralNull* THIS )
{
  return (RogueClassCmdLiteralNull*)(THIS);
}

RogueClassCmdLiteralNull* RogueCmdLiteralNull__init__Token( RogueClassCmdLiteralNull* THIS, RogueClassToken* _auto_381_0 )
{
  THIS->t = _auto_381_0;
  return (RogueClassCmdLiteralNull*)(THIS);
}

RogueString* RogueCmdCreateCompound__type_name( RogueClassCmdCreateCompound* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[643]);
}

RogueClassCmd* RogueCmdCreateCompound__clone__CloneArgs( RogueClassCmdCreateCompound* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateCompound__init__Token_Type_CmdArgs( ((RogueClassCmdCreateCompound*)Rogue_program.type_CmdCreateCompound->create_and_init_object()), THIS->t, THIS->_of_type, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdCreateCompound__resolve__Scope( RogueClassCmdCreateCompound* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->_of_type );
  if (THIS->args == NULL)
  {
    THIS->args = ((RogueCmdArgs__init( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()) )));
  }
  while (THIS->args->count < THIS->_of_type->property_list->count)
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->args), ((RogueType__create_default_value__Token( ((RogueClassProperty*)(THIS->_of_type->property_list->data->objects[THIS->args->count]))->_type, THIS->t ))) );
  }
  RogueCmdArgs__resolve__Scope( THIS->args, scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdCreateCompound__trace_used_code( RogueClassCmdCreateCompound* THIS )
{
  RogueType__trace_used_code( THIS->_of_type );
  {
    RogueClassCmdArgs* _auto_964_0 = (THIS->args);
    RogueInteger _auto_965_1 = (0);
    for (;_auto_965_1 < _auto_964_0->count;++_auto_965_1)
    {
      RogueClassCmd* arg_2 = (((RogueClassCmd*)(_auto_964_0->data->objects[_auto_965_1])));
      call_ROGUEM48( 27, (RogueClassCmd*)(arg_2) );
    }
  }
}

RogueClassType* Rogue_CmdCreateCompound__type( RogueClassCmdCreateCompound* THIS )
{
  return (RogueClassType*)(THIS->_of_type);
}

void RogueCmdCreateCompound__write_cpp__CPPWriter_Logical( RogueClassCmdCreateCompound* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, THIS->_of_type ))), Rogue_program.literal_strings[176] );
  if (!!(THIS->args->count))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[255] );
    RogueLogical first_2 = (true);
    {
      RogueClassCmdArgs* _auto_966_3 = (THIS->args);
      RogueInteger _auto_967_4 = (0);
      for (;_auto_967_4 < _auto_966_3->count;++_auto_967_4)
      {
        RogueClassCmd* arg_5 = (((RogueClassCmd*)(_auto_966_3->data->objects[_auto_967_4])));
        if (first_2)
        {
          first_2 = ((RogueLogical)false);
        }
        else
        {
          RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[403] );
        }
        call_ROGUEM52( 29, (RogueClassCmd*)(arg_5), writer_0, false );
      }
    }
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[255] );
  }
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] );
}

RogueClassCmdCreateCompound* RogueCmdCreateCompound__init_object( RogueClassCmdCreateCompound* THIS )
{
  return (RogueClassCmdCreateCompound*)(THIS);
}

RogueClassCmdCreateCompound* RogueCmdCreateCompound__init__Token_Type_CmdArgs( RogueClassCmdCreateCompound* THIS, RogueClassToken* _auto_382_0, RogueClassType* _auto_383_1, RogueClassCmdArgs* _auto_384_2 )
{
  THIS->args = _auto_384_2;
  THIS->_of_type = _auto_383_1;
  THIS->t = _auto_382_0;
  return (RogueClassCmdCreateCompound*)(THIS);
}

RogueString* RogueCmdLiteralLogical__type_name( RogueClassCmdLiteralLogical* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[850]);
}

RogueClassCmd* RogueCmdLiteralLogical__clone__CloneArgs( RogueClassCmdLiteralLogical* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), THIS->t, THIS->value ))))));
}

RogueClassCmd* RogueCmdLiteralLogical__resolve__Scope( RogueClassCmdLiteralLogical* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralLogical__type( RogueClassCmdLiteralLogical* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

void RogueCmdLiteralLogical__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralLogical* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (THIS->value)
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[148] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[139] );
  }
}

RogueClassCmdLiteralLogical* RogueCmdLiteralLogical__init_object( RogueClassCmdLiteralLogical* THIS )
{
  return (RogueClassCmdLiteralLogical*)(THIS);
}

RogueClassCmdLiteralLogical* RogueCmdLiteralLogical__init__Token_Logical( RogueClassCmdLiteralLogical* THIS, RogueClassToken* _auto_385_0, RogueLogical _auto_386_1 )
{
  THIS->value = _auto_386_1;
  THIS->t = _auto_385_0;
  return (RogueClassCmdLiteralLogical*)(THIS);
}

RogueString* RogueCmdLiteralString__type_name( RogueClassCmdLiteralString* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[851]);
}

RogueClassCmd* RogueCmdLiteralString__clone__CloneArgs( RogueClassCmdLiteralString* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Integer( ((RogueClassCmdLiteralString*)Rogue_program.type_CmdLiteralString->create_and_init_object()), THIS->t, THIS->value, THIS->index ))))));
}

RogueClassCmd* RogueCmdLiteralString__resolve__Scope( RogueClassCmdLiteralString* THIS, RogueClassScope* scope_0 )
{
  RogueType__resolve( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdLiteralString__trace_used_code( RogueClassCmdLiteralString* THIS )
{
  if (!!(THIS->value))
  {
    if (!(((RogueString_IntegerTable__contains__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_lookup, THIS->value )))))
    {
      THIS->index = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_list->count;
      RogueString_IntegerTable__set__String_Integer( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_lookup, THIS->value, THIS->index );
      RogueStringList__add__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_list, THIS->value );
    }
    else
    {
      THIS->index = ((RogueString_IntegerTable__get__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_lookup, THIS->value )));
    }
  }
}

RogueClassType* Rogue_CmdLiteralString__type( RogueClassCmdLiteralString* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String);
}

void RogueCmdLiteralString__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralString* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!!(THIS->value))
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[776] ))), THIS->index ))), Rogue_program.literal_strings[17] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[404] );
  }
}

RogueClassCmdLiteralString* RogueCmdLiteralString__init_object( RogueClassCmdLiteralString* THIS )
{
  return (RogueClassCmdLiteralString*)(THIS);
}

RogueClassCmdLiteralString* RogueCmdLiteralString__init__Token_String_Integer( RogueClassCmdLiteralString* THIS, RogueClassToken* _auto_397_0, RogueString* _auto_398_1, RogueInteger _auto_399_2 )
{
  THIS->index = _auto_399_2;
  THIS->value = _auto_398_1;
  THIS->t = _auto_397_0;
  return (RogueClassCmdLiteralString*)(THIS);
}

RogueString* RoguePropertyArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[604]);
}

RogueString* RogueCmdWriteSetting__type_name( RogueClassCmdWriteSetting* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[644]);
}

RogueClassCmd* RogueCmdWriteSetting__clone__CloneArgs( RogueClassCmdWriteSetting* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdWriteSetting__init__Token_Property_Cmd( ((RogueClassCmdWriteSetting*)Rogue_program.type_CmdWriteSetting->create_and_init_object()), THIS->t, THIS->setting_info, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdWriteSetting__resolve__Scope( RogueClassCmdWriteSetting* THIS, RogueClassScope* scope_0 )
{
  THIS->new_value = (call_ROGUEM42( 23, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)((call_ROGUEM42( 23, (RogueClassCmd*)(THIS->new_value), scope_0 ))), THIS->setting_info->_type ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdWriteSetting__trace_used_code( RogueClassCmdWriteSetting* THIS )
{
  RogueType__trace_used_code( THIS->setting_info->type_context );
  RogueType__trace_used_code( THIS->setting_info->_type );
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->new_value) );
}

RogueClassType* Rogue_CmdWriteSetting__type( RogueClassCmdWriteSetting* THIS )
{
  return (RogueClassType*)(THIS->setting_info->_type);
}

void RogueCmdWriteSetting__write_cpp__CPPWriter_Logical( RogueClassCmdWriteSetting* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print_type_name__Type( writer_0, THIS->setting_info->type_context ))), Rogue_program.literal_strings[158] );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, THIS->setting_info->cpp_name ))), Rogue_program.literal_strings[777] );
  if (((Rogue_Type__compile_type( THIS->setting_info->_type ))) == ((Rogue_Cmd__compile_type( THIS->new_value ))))
  {
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->new_value), writer_0, false );
  }
  else
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[450] ))), THIS->setting_info->_type ))), Rogue_program.literal_strings[102] );
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->new_value), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] );
  }
}

RogueClassCmdWriteSetting* RogueCmdWriteSetting__init_object( RogueClassCmdWriteSetting* THIS )
{
  return (RogueClassCmdWriteSetting*)(THIS);
}

RogueClassCmdWriteSetting* RogueCmdWriteSetting__init__Token_Property_Cmd( RogueClassCmdWriteSetting* THIS, RogueClassToken* _auto_408_0, RogueClassProperty* _auto_409_1, RogueClassCmd* _auto_410_2 )
{
  THIS->new_value = _auto_410_2;
  THIS->setting_info = _auto_409_1;
  THIS->t = _auto_408_0;
  return (RogueClassCmdWriteSetting*)(THIS);
}

RogueString* RogueCmdWriteProperty__type_name( RogueClassCmdWriteProperty* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[645]);
}

RogueClassCmd* RogueCmdWriteProperty__clone__CloneArgs( RogueClassCmdWriteProperty* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)Rogue_program.type_CmdWriteProperty->create_and_init_object()), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->context), clone_args_0 )), THIS->property_info, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdWriteProperty__resolve__Scope( RogueClassCmdWriteProperty* THIS, RogueClassScope* scope_0 )
{
  THIS->context = ((RogueCmd__require_value( (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->context), scope_0 )) )));
  THIS->new_value = (call_ROGUEM42( 23, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(((RogueCmd__require_value( (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->new_value), scope_0 )) )))), THIS->property_info->_type ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdWriteProperty__trace_used_code( RogueClassCmdWriteProperty* THIS )
{
  if (!!(THIS->context))
  {
    call_ROGUEM48( 27, (RogueClassCmd*)(THIS->context) );
  }
  RogueType__trace_used_code( THIS->property_info->type_context );
  RogueType__trace_used_code( THIS->property_info->_type );
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->new_value) );
}

RogueClassType* Rogue_CmdWriteProperty__type( RogueClassCmdWriteProperty* THIS )
{
  return (RogueClassType*)(THIS->property_info->_type);
}

void RogueCmdWriteProperty__write_cpp__CPPWriter_Logical( RogueClassCmdWriteProperty* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->context), writer_0, false );
  RogueCPPWriter__print_access_operator__Type( writer_0, (call_ROGUEM46( 28, (RogueClassCmd*)(THIS->context) )) );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, THIS->property_info->cpp_name ))), Rogue_program.literal_strings[777] );
  if (((Rogue_Type__compile_type( THIS->property_info->_type ))) == ((Rogue_Cmd__compile_type( THIS->new_value ))))
  {
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->new_value), writer_0, false );
  }
  else
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[450] ))), THIS->property_info->_type ))), Rogue_program.literal_strings[102] );
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->new_value), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] );
  }
}

RogueClassCmdWriteProperty* RogueCmdWriteProperty__init_object( RogueClassCmdWriteProperty* THIS )
{
  return (RogueClassCmdWriteProperty*)(THIS);
}

RogueClassCmdWriteProperty* RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( RogueClassCmdWriteProperty* THIS, RogueClassToken* _auto_411_0, RogueClassCmd* _auto_412_1, RogueClassProperty* _auto_413_2, RogueClassCmd* _auto_414_3 )
{
  THIS->new_value = _auto_414_3;
  THIS->property_info = _auto_413_2;
  THIS->context = _auto_412_1;
  THIS->t = _auto_411_0;
  return (RogueClassCmdWriteProperty*)(THIS);
}

RogueString* RogueString_TypeTableEntryList__to_String( RogueTableEntry_of_String_TypeList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_TypeList* _auto_968_2 = (THIS);
    RogueInteger _auto_969_3 = (0);
    for (;_auto_969_3 < _auto_968_2->count;++_auto_969_3)
    {
      RogueClassString_TypeTableEntry* value_4 = (((RogueClassString_TypeTableEntry*)(_auto_968_2->data->objects[_auto_969_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueString_TypeTableEntryList__type_name( RogueTableEntry_of_String_TypeList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[934]);
}

RogueTableEntry_of_String_TypeList* RogueString_TypeTableEntryList__init_object( RogueTableEntry_of_String_TypeList* THIS )
{
  return (RogueTableEntry_of_String_TypeList*)(THIS);
}

RogueTableEntry_of_String_TypeList* RogueString_TypeTableEntryList__init__Integer_String_TypeTableEntry( RogueTableEntry_of_String_TypeList* THIS, RogueInteger initial_capacity_0, RogueClassString_TypeTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_TypeTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_506_3 = (initial_capacity_0);
    for (;i_2 <= _auto_506_3;++i_2)
    {
      RogueString_TypeTableEntryList__add__String_TypeTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_TypeList*)(THIS);
}

RogueTableEntry_of_String_TypeList* RogueString_TypeTableEntryList__add__String_TypeTableEntry( RogueTableEntry_of_String_TypeList* THIS, RogueClassString_TypeTableEntry* value_0 )
{
  ((RogueString_TypeTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_TypeList*)(THIS);
}

RogueInteger RogueString_TypeTableEntryList__capacity( RogueTableEntry_of_String_TypeList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_TypeList* RogueString_TypeTableEntryList__reserve__Integer( RogueTableEntry_of_String_TypeList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_TypeTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_TypeTableEntryList__capacity( THIS ))) + ((RogueString_TypeTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_TypeTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_TypeList*)(THIS);
}

RogueString* RogueString_TypeTableEntry__type_name( RogueClassString_TypeTableEntry* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[567]);
}

RogueClassString_TypeTableEntry* RogueString_TypeTableEntry__init__String_Type_Integer( RogueClassString_TypeTableEntry* THIS, RogueString* _key_0, RogueClassType* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_TypeTableEntry*)(THIS);
}

RogueClassString_TypeTableEntry* RogueString_TypeTableEntry__init_object( RogueClassString_TypeTableEntry* THIS )
{
  return (RogueClassString_TypeTableEntry*)(THIS);
}

RogueString* RogueString_TypeTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[605]);
}

RogueString* RogueString_IntegerTableEntryList__to_String( RogueTableEntry_of_String_IntegerList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_IntegerList* _auto_978_2 = (THIS);
    RogueInteger _auto_979_3 = (0);
    for (;_auto_979_3 < _auto_978_2->count;++_auto_979_3)
    {
      RogueClassString_IntegerTableEntry* value_4 = (((RogueClassString_IntegerTableEntry*)(_auto_978_2->data->objects[_auto_979_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueString_IntegerTableEntryList__type_name( RogueTableEntry_of_String_IntegerList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[935]);
}

RogueTableEntry_of_String_IntegerList* RogueString_IntegerTableEntryList__init_object( RogueTableEntry_of_String_IntegerList* THIS )
{
  return (RogueTableEntry_of_String_IntegerList*)(THIS);
}

RogueTableEntry_of_String_IntegerList* RogueString_IntegerTableEntryList__init__Integer_String_IntegerTableEntry( RogueTableEntry_of_String_IntegerList* THIS, RogueInteger initial_capacity_0, RogueClassString_IntegerTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_IntegerTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_510_3 = (initial_capacity_0);
    for (;i_2 <= _auto_510_3;++i_2)
    {
      RogueString_IntegerTableEntryList__add__String_IntegerTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_IntegerList*)(THIS);
}

RogueTableEntry_of_String_IntegerList* RogueString_IntegerTableEntryList__add__String_IntegerTableEntry( RogueTableEntry_of_String_IntegerList* THIS, RogueClassString_IntegerTableEntry* value_0 )
{
  ((RogueString_IntegerTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_IntegerList*)(THIS);
}

RogueInteger RogueString_IntegerTableEntryList__capacity( RogueTableEntry_of_String_IntegerList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_IntegerList* RogueString_IntegerTableEntryList__reserve__Integer( RogueTableEntry_of_String_IntegerList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_IntegerTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_IntegerTableEntryList__capacity( THIS ))) + ((RogueString_IntegerTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_IntegerTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_IntegerList*)(THIS);
}

RogueString* RogueString_IntegerTableEntry__type_name( RogueClassString_IntegerTableEntry* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[568]);
}

RogueClassString_IntegerTableEntry* RogueString_IntegerTableEntry__init__String_Integer_Integer( RogueClassString_IntegerTableEntry* THIS, RogueString* _key_0, RogueInteger _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_IntegerTableEntry*)(THIS);
}

RogueClassString_IntegerTableEntry* RogueString_IntegerTableEntry__init_object( RogueClassString_IntegerTableEntry* THIS )
{
  return (RogueClassString_IntegerTableEntry*)(THIS);
}

RogueString* RogueString_IntegerTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[606]);
}

RogueString* RogueCmdCastToType__type_name( RogueClassCmdCastToType* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[881]);
}

RogueClassCmd* RogueCmdCastToType__clone__CloneArgs( RogueClassCmdCastToType* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdCastToType*)Rogue_program.type_CmdCastToType->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->operand), clone_args_0 )), THIS->_target_type ))))));
}

RogueClassCmd* RogueCmdCastToType__resolve__Scope( RogueClassCmdCastToType* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->operand), scope_0 ));
  RogueType__organize( THIS->_target_type );
  if (((Rogue_Cmd__require_type( THIS->operand ))) == THIS->_target_type)
  {
    return (RogueClassCmd*)(THIS->operand);
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdCastToType__write_cpp__CPPWriter_Logical( RogueClassCmdCastToType* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[450] ))), THIS->_target_type ))), Rogue_program.literal_strings[765] );
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->operand), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[778] );
}

RogueClassCmdCastToType* RogueCmdCastToType__init_object( RogueClassCmdCastToType* THIS )
{
  return (RogueClassCmdCastToType*)(THIS);
}

RogueString* RogueCmdTypeOperator__type_name( RogueClassCmdTypeOperator* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[646]);
}

void RogueCmdTypeOperator__trace_used_code( RogueClassCmdTypeOperator* THIS )
{
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->operand) );
  RogueType__trace_used_code( THIS->_target_type );
}

RogueClassType* Rogue_CmdTypeOperator__type( RogueClassCmdTypeOperator* THIS )
{
  return (RogueClassType*)(THIS->_target_type);
}

RogueClassCmdTypeOperator* RogueCmdTypeOperator__init_object( RogueClassCmdTypeOperator* THIS )
{
  return (RogueClassCmdTypeOperator*)(THIS);
}

RogueClassCmdTypeOperator* RogueCmdTypeOperator__init__Token_Cmd_Type( RogueClassCmdTypeOperator* THIS, RogueClassToken* _auto_518_0, RogueClassCmd* _auto_519_1, RogueClassType* _auto_520_2 )
{
  THIS->_target_type = _auto_520_2;
  THIS->operand = _auto_519_1;
  THIS->t = _auto_518_0;
  return (RogueClassCmdTypeOperator*)(THIS);
}

RogueString* RogueCmdLogicalize__type_name( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[885]);
}

RogueClassCmd* RogueCmdLogicalize__clone__CloneArgs( RogueClassCmdLogicalize* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalize*)Rogue_program.type_CmdLogicalize->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->operand), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdLogicalize__resolve__Scope( RogueClassCmdLogicalize* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->operand), scope_0 ));
  if (((Rogue_Cmd__require_type( THIS->operand )))->is_optional)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLogicalizeOptionalValue__init__Token_Cmd_Logical( ((RogueClassCmdLogicalizeOptionalValue*)Rogue_program.type_CmdLogicalizeOptionalValue->create_and_init_object()), THIS->t, THIS->operand, true ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassType* Rogue_CmdLogicalize__type( RogueClassCmdLogicalize* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

RogueClassCmdLogicalize* RogueCmdLogicalize__init_object( RogueClassCmdLogicalize* THIS )
{
  return (RogueClassCmdLogicalize*)(THIS);
}

RogueString* RogueCmdLogicalize__prefix_symbol( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[0]);
}

RogueClassCmd* RogueCmdLogicalize__resolve_for_literal_operand__Scope( RogueClassCmdLogicalize* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = ((RogueCmd__require_value( (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->operand), scope_0 )) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdLogicalize__suffix_symbol( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[183]);
}

RogueString* RogueCmdLogicalize__cpp_prefix_symbol( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[805]);
}

RogueString* RogueCmdLogicalize__cpp_suffix_symbol( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[0]);
}

RogueString* RogueCmdUnary__type_name( RogueClassCmdUnary* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[647]);
}

RogueClassCmd* RogueCmdUnary__resolve__Scope( RogueClassCmdUnary* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = ((RogueCmd__require_value( (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->operand), scope_0 )) )));
  if ((call_ROGUEM47( 16, (RogueClassCmd*)(THIS->operand) )))
  {
    return (RogueClassCmd*)((call_ROGUEM302( 33, (RogueClassCmdUnary*)(THIS), scope_0 )));
  }
  else
  {
    return (RogueClassCmd*)(((RogueCmdUnary__resolve_for_operand_type__Scope_Type( THIS, scope_0, ((Rogue_Cmd__require_type( THIS->operand ))) ))));
  }
}

void RogueCmdUnary__trace_used_code( RogueClassCmdUnary* THIS )
{
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->operand) );
}

RogueClassType* Rogue_CmdUnary__type( RogueClassCmdUnary* THIS )
{
  return (RogueClassType*)((call_ROGUEM46( 28, (RogueClassCmd*)(THIS->operand) )));
}

void RogueCmdUnary__write_cpp__CPPWriter_Logical( RogueClassCmdUnary* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, (call_ROGUEM301( 36, (RogueClassCmdUnary*)(THIS) )) ))), Rogue_program.literal_strings[176] );
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->operand), writer_0, false );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] ))), (call_ROGUEM301( 37, (RogueClassCmdUnary*)(THIS) )) );
}

RogueClassCmdUnary* RogueCmdUnary__init_object( RogueClassCmdUnary* THIS )
{
  return (RogueClassCmdUnary*)(THIS);
}

RogueClassCmdUnary* RogueCmdUnary__init__Token_Cmd( RogueClassCmdUnary* THIS, RogueClassToken* _auto_521_0, RogueClassCmd* _auto_522_1 )
{
  THIS->operand = _auto_522_1;
  THIS->t = _auto_521_0;
  return (RogueClassCmdUnary*)(THIS);
}

RogueString* RogueCmdUnary__prefix_symbol( RogueClassCmdUnary* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[0]);
}

RogueClassCmd* RogueCmdUnary__resolve_for_literal_operand__Scope( RogueClassCmdUnary* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdUnary__resolve_for_operand_type__Scope_Type( RogueClassCmdUnary* THIS, RogueClassScope* scope_0, RogueClassType* operand_type_1 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdUnary__suffix_symbol( RogueClassCmdUnary* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[0]);
}

RogueString* RogueCmdUnary__cpp_prefix_symbol( RogueClassCmdUnary* THIS )
{
  return (RogueString*)((call_ROGUEM301( 32, (RogueClassCmdUnary*)(THIS) )));
}

RogueString* RogueCmdUnary__cpp_suffix_symbol( RogueClassCmdUnary* THIS )
{
  return (RogueString*)((call_ROGUEM301( 35, (RogueClassCmdUnary*)(THIS) )));
}

RogueString* RogueCmdCreateOptionalValue__type_name( RogueClassCmdCreateOptionalValue* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[648]);
}

RogueClassCmd* RogueCmdCreateOptionalValue__clone__CloneArgs( RogueClassCmdCreateOptionalValue* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateOptionalValue__init__Token_Type_Cmd( ((RogueClassCmdCreateOptionalValue*)Rogue_program.type_CmdCreateOptionalValue->create_and_init_object()), THIS->t, THIS->_of_type, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->value, clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdCreateOptionalValue__resolve__Scope( RogueClassCmdCreateOptionalValue* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->_of_type );
  if (!!(THIS->value))
  {
    THIS->value = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->value), scope_0 ));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdCreateOptionalValue__trace_used_code( RogueClassCmdCreateOptionalValue* THIS )
{
  RogueType__trace_used_code( THIS->_of_type );
  if (!!(THIS->value))
  {
    call_ROGUEM48( 27, (RogueClassCmd*)(THIS->value) );
  }
}

RogueClassType* Rogue_CmdCreateOptionalValue__type( RogueClassCmdCreateOptionalValue* THIS )
{
  return (RogueClassType*)(THIS->_of_type);
}

void RogueCmdCreateOptionalValue__write_cpp__CPPWriter_Logical( RogueClassCmdCreateOptionalValue* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (((RogueType__is_reference( THIS->_of_type->_element_type ))))
  {
    if (!!(THIS->value))
    {
      call_ROGUEM52( 29, (RogueClassCmd*)(THIS->value), writer_0, false );
    }
    else
    {
      RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[775] );
    }
  }
  else
  {
    RogueCPPWriter__print__Type( writer_0, THIS->_of_type );
    if (!!(THIS->value))
    {
      RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[406] );
      call_ROGUEM52( 29, (RogueClassCmd*)(THIS->value), writer_0, false );
      RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[448] );
    }
    else
    {
      RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[254] );
    }
  }
}

RogueClassCmdCreateOptionalValue* RogueCmdCreateOptionalValue__init_object( RogueClassCmdCreateOptionalValue* THIS )
{
  return (RogueClassCmdCreateOptionalValue*)(THIS);
}

RogueClassCmdCreateOptionalValue* RogueCmdCreateOptionalValue__init__Token_Type_Cmd( RogueClassCmdCreateOptionalValue* THIS, RogueClassToken* _auto_523_0, RogueClassType* _auto_524_1, RogueClassCmd* _auto_525_2 )
{
  THIS->value = _auto_525_2;
  THIS->_of_type = _auto_524_1;
  THIS->t = _auto_523_0;
  return (RogueClassCmdCreateOptionalValue*)(THIS);
}

RogueString* RogueString_MethodTableEntryList__to_String( RogueTableEntry_of_String_MethodList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_MethodList* _auto_988_2 = (THIS);
    RogueInteger _auto_989_3 = (0);
    for (;_auto_989_3 < _auto_988_2->count;++_auto_989_3)
    {
      RogueClassString_MethodTableEntry* value_4 = (((RogueClassString_MethodTableEntry*)(_auto_988_2->data->objects[_auto_989_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueString_MethodTableEntryList__type_name( RogueTableEntry_of_String_MethodList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[936]);
}

RogueTableEntry_of_String_MethodList* RogueString_MethodTableEntryList__init_object( RogueTableEntry_of_String_MethodList* THIS )
{
  return (RogueTableEntry_of_String_MethodList*)(THIS);
}

RogueTableEntry_of_String_MethodList* RogueString_MethodTableEntryList__init__Integer_String_MethodTableEntry( RogueTableEntry_of_String_MethodList* THIS, RogueInteger initial_capacity_0, RogueClassString_MethodTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_MethodTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_559_3 = (initial_capacity_0);
    for (;i_2 <= _auto_559_3;++i_2)
    {
      RogueString_MethodTableEntryList__add__String_MethodTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_MethodList*)(THIS);
}

RogueTableEntry_of_String_MethodList* RogueString_MethodTableEntryList__add__String_MethodTableEntry( RogueTableEntry_of_String_MethodList* THIS, RogueClassString_MethodTableEntry* value_0 )
{
  ((RogueString_MethodTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_MethodList*)(THIS);
}

RogueInteger RogueString_MethodTableEntryList__capacity( RogueTableEntry_of_String_MethodList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_MethodList* RogueString_MethodTableEntryList__reserve__Integer( RogueTableEntry_of_String_MethodList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_MethodTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_MethodTableEntryList__capacity( THIS ))) + ((RogueString_MethodTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_MethodTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_MethodList*)(THIS);
}

RogueString* RogueString_MethodTableEntry__type_name( RogueClassString_MethodTableEntry* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[569]);
}

RogueClassString_MethodTableEntry* RogueString_MethodTableEntry__init__String_Method_Integer( RogueClassString_MethodTableEntry* THIS, RogueString* _key_0, RogueClassMethod* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_MethodTableEntry*)(THIS);
}

RogueClassString_MethodTableEntry* RogueString_MethodTableEntry__init_object( RogueClassString_MethodTableEntry* THIS )
{
  return (RogueClassString_MethodTableEntry*)(THIS);
}

RogueString* RogueString_MethodTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[607]);
}

RogueString* RogueString_LogicalTableEntryList__to_String( RogueTableEntry_of_String_LogicalList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_LogicalList* _auto_998_2 = (THIS);
    RogueInteger _auto_999_3 = (0);
    for (;_auto_999_3 < _auto_998_2->count;++_auto_999_3)
    {
      RogueClassString_LogicalTableEntry* value_4 = (((RogueClassString_LogicalTableEntry*)(_auto_998_2->data->objects[_auto_999_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueString_LogicalTableEntryList__type_name( RogueTableEntry_of_String_LogicalList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[937]);
}

RogueTableEntry_of_String_LogicalList* RogueString_LogicalTableEntryList__init_object( RogueTableEntry_of_String_LogicalList* THIS )
{
  return (RogueTableEntry_of_String_LogicalList*)(THIS);
}

RogueTableEntry_of_String_LogicalList* RogueString_LogicalTableEntryList__init__Integer_String_LogicalTableEntry( RogueTableEntry_of_String_LogicalList* THIS, RogueInteger initial_capacity_0, RogueClassString_LogicalTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_LogicalTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_593_3 = (initial_capacity_0);
    for (;i_2 <= _auto_593_3;++i_2)
    {
      RogueString_LogicalTableEntryList__add__String_LogicalTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_LogicalList*)(THIS);
}

RogueTableEntry_of_String_LogicalList* RogueString_LogicalTableEntryList__add__String_LogicalTableEntry( RogueTableEntry_of_String_LogicalList* THIS, RogueClassString_LogicalTableEntry* value_0 )
{
  ((RogueString_LogicalTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_LogicalList*)(THIS);
}

RogueInteger RogueString_LogicalTableEntryList__capacity( RogueTableEntry_of_String_LogicalList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_LogicalList* RogueString_LogicalTableEntryList__reserve__Integer( RogueTableEntry_of_String_LogicalList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_LogicalTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_LogicalTableEntryList__capacity( THIS ))) + ((RogueString_LogicalTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_LogicalTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_LogicalList*)(THIS);
}

RogueString* RogueString_LogicalTableEntry__type_name( RogueClassString_LogicalTableEntry* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[570]);
}

RogueClassString_LogicalTableEntry* RogueString_LogicalTableEntry__init__String_Logical_Integer( RogueClassString_LogicalTableEntry* THIS, RogueString* _key_0, RogueLogical _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_LogicalTableEntry*)(THIS);
}

RogueClassString_LogicalTableEntry* RogueString_LogicalTableEntry__init_object( RogueClassString_LogicalTableEntry* THIS )
{
  return (RogueClassString_LogicalTableEntry*)(THIS);
}

RogueString* RogueString_LogicalTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[608]);
}

RogueString* RogueFileReader__type_name( RogueClassFileReader* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[571]);
}

RogueLogical RogueFileReader__has_another( RogueClassFileReader* THIS )
{
  return (RogueLogical)(THIS->position < THIS->count);
}

RogueCharacter RogueFileReader__peek( RogueClassFileReader* THIS )
{
  if (THIS->position == THIS->count)
  {
    return (RogueCharacter)(((RogueCharacter)(0)));
  }
  if (THIS->buffer_position == THIS->buffer->count)
  {
    THIS->buffer->count = (RogueInteger) fread( THIS->buffer->data->bytes, 1, 1024, THIS->fp );
    THIS->buffer_position = 0;
  }
  return (RogueCharacter)(((RogueCharacter)(THIS->buffer->data->bytes[THIS->buffer_position])));
}

RogueCharacter RogueFileReader__read( RogueClassFileReader* THIS )
{
  if (THIS->position == THIS->count)
  {
    return (RogueCharacter)(((RogueCharacter)(0)));
  }
  RogueCharacter result_0 = (((RogueFileReader__peek( THIS ))));
  ++THIS->position;
  ++THIS->buffer_position;
  if (THIS->position == THIS->count)
  {
    RogueFileReader__close( THIS );
  }
  return (RogueCharacter)(result_0);
}

RogueClassFileReader* RogueFileReader__init__String( RogueClassFileReader* THIS, RogueString* _filepath_0 )
{
  RogueFileReader__open__String( THIS, _filepath_0 );
  return (RogueClassFileReader*)(THIS);
}

RogueClassFileReader* RogueFileReader__close( RogueClassFileReader* THIS )
{
  if (!!(THIS->fp))
  {
    fclose( THIS->fp );
    THIS->fp = 0;
  }
  RogueFileReader__set_position__Integer( THIS, 0 );
  THIS->count = 0;
  return (RogueClassFileReader*)(THIS);
}

RogueLogical RogueFileReader__open__String( RogueClassFileReader* THIS, RogueString* _auto_597_0 )
{
  THIS->filepath = _auto_597_0;
  RogueFileReader__close( THIS );
  char path[ PATH_MAX ];
  THIS->filepath->to_c_string( path, PATH_MAX );

  THIS->fp = fopen( path, "rb" );
  if (THIS->fp)
  {
    fseek( THIS->fp, 0, SEEK_END );
    THIS->count = (RogueInteger) ftell( THIS->fp );
    fseek( THIS->fp, 0, SEEK_SET );
  }
  if (THIS->count == 0)
  {
    RogueFileReader__close( THIS );
  }
  return (RogueLogical)(THIS->position < THIS->count);
}

RogueClassFileReader* RogueFileReader__set_position__Integer( RogueClassFileReader* THIS, RogueInteger _auto_598_0 )
{
  THIS->position = _auto_598_0;
  if (!!(THIS->fp))
  {
    fseek( THIS->fp, THIS->position, SEEK_SET );
  }
  THIS->buffer_position = 0;
  RogueByteList__clear( THIS->buffer );
  return (RogueClassFileReader*)(THIS);
}

RogueClassFileReader* RogueFileReader__init_object( RogueClassFileReader* THIS )
{
  THIS->buffer = ((RogueByteList__init__Integer( ((RogueByteList*)Rogue_program.type_ByteList->create_and_init_object()), 1024 )));
  return (RogueClassFileReader*)(THIS);
}

RogueString* RogueFileWriter__type_name( RogueClassFileWriter* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[572]);
}

RogueClassFileWriter* RogueFileWriter__init__String( RogueClassFileWriter* THIS, RogueString* _filepath_0 )
{
  RogueFileWriter__open__String( THIS, _filepath_0 );
  return (RogueClassFileWriter*)(THIS);
}

RogueClassFileWriter* RogueFileWriter__close( RogueClassFileWriter* THIS )
{
  RogueFileWriter__flush( THIS );
  if (!!(THIS->fp))
  {
    fclose( THIS->fp ); THIS->fp = 0;
  }
  return (RogueClassFileWriter*)(THIS);
}

RogueClassFileWriter* RogueFileWriter__flush( RogueClassFileWriter* THIS )
{
  if ((THIS->buffer->count == 0 || !(!!(THIS->fp))))
  {
    return (RogueClassFileWriter*)(THIS);
  }
  fwrite( THIS->buffer->data->bytes, 1, THIS->buffer->count, THIS->fp );
  RogueByteList__clear( THIS->buffer );
  return (RogueClassFileWriter*)(THIS);
}

RogueLogical RogueFileWriter__open__String( RogueClassFileWriter* THIS, RogueString* _auto_599_0 )
{
  THIS->filepath = _auto_599_0;
  RogueFileWriter__close( THIS );
  char path[ PATH_MAX ];
  THIS->filepath->to_c_string( path, PATH_MAX );
  THIS->fp = fopen( path, "wb" );

  return !!THIS->fp;
}

RogueClassFileWriter* RogueFileWriter__write__Character( RogueClassFileWriter* THIS, RogueCharacter ch_0 )
{
  if (!(!!(THIS->fp)))
  {
    return (RogueClassFileWriter*)(THIS);
  }
  RogueByteList__add__Byte( THIS->buffer, ((RogueByte)(ch_0)) );
  if (THIS->buffer->count == 1024)
  {
    return (RogueClassFileWriter*)(((RogueFileWriter__flush( THIS ))));
  }
  return (RogueClassFileWriter*)(THIS);
}

RogueClassFileWriter* RogueFileWriter__init_object( RogueClassFileWriter* THIS )
{
  THIS->buffer = ((RogueByteList__init__Integer( ((RogueByteList*)Rogue_program.type_ByteList->create_and_init_object()), 1024 )));
  return (RogueClassFileWriter*)(THIS);
}

RogueString* RogueTokenReader__type_name( RogueClassTokenReader* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[573]);
}

RogueClassTokenReader* RogueTokenReader__init__TokenList( RogueClassTokenReader* THIS, RogueTokenList* _auto_602_0 )
{
  THIS->tokens = _auto_602_0;
  THIS->count = THIS->tokens->count;
  return (RogueClassTokenReader*)(THIS);
}

RogueClassError* RogueTokenReader__error__String( RogueClassTokenReader* THIS, RogueString* message_0 )
{
  if (((RogueTokenReader__has_another( THIS ))))
  {
    return (RogueClassError*)(((RogueClassError*)(((RogueToken__error__String( ((RogueTokenReader__peek( THIS ))), message_0 ))))));
  }
  if (!!(THIS->count))
  {
    return (RogueClassError*)(((RogueClassError*)(((RogueToken__error__String( ((RogueTokenList__last( THIS->tokens ))), message_0 ))))));
  }
  return (RogueClassError*)(((RogueClassError*)(((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)Rogue_program.type_RogueError->create_and_init_object()), message_0, ((RogueString*)(NULL)), 0, 0 ))))));
}

RogueLogical RogueTokenReader__has_another( RogueClassTokenReader* THIS )
{
  return (RogueLogical)(THIS->position < THIS->count);
}

RogueLogical RogueTokenReader__next_is__TokenType( RogueClassTokenReader* THIS, RogueClassTokenType* type_0 )
{
  if (THIS->position == THIS->count)
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(((RogueClassToken*)(THIS->tokens->data->objects[THIS->position]))->_type == type_0);
}

RogueLogical RogueTokenReader__next_is_statement_token( RogueClassTokenReader* THIS )
{
  if (THIS->position == THIS->count)
  {
    return (RogueLogical)(false);
  }
  if ((call_ROGUEM73( 13, (RogueClassTokenType*)(((RogueClassToken*)(THIS->tokens->data->objects[THIS->position]))->_type) )))
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(true);
}

RogueClassToken* RogueTokenReader__peek( RogueClassTokenReader* THIS )
{
  if (THIS->position == THIS->count)
  {
    return (RogueClassToken*)(((RogueTokenList__last( THIS->tokens ))));
  }
  return (RogueClassToken*)(((RogueClassToken*)(THIS->tokens->data->objects[THIS->position])));
}

RogueClassToken* RogueTokenReader__peek__Integer( RogueClassTokenReader* THIS, RogueInteger num_ahead_0 )
{
  if ((THIS->position + num_ahead_0) >= THIS->count)
  {
    return (RogueClassToken*)(((RogueTokenList__last( THIS->tokens ))));
  }
  return (RogueClassToken*)(((RogueClassToken*)(THIS->tokens->data->objects[(THIS->position + num_ahead_0)])));
}

RogueClassToken* RogueTokenReader__read( RogueClassTokenReader* THIS )
{
  ++THIS->position;
  return (RogueClassToken*)(((RogueClassToken*)(THIS->tokens->data->objects[(THIS->position - 1)])));
}

RogueClassTokenReader* RogueTokenReader__init_object( RogueClassTokenReader* THIS )
{
  return (RogueClassTokenReader*)(THIS);
}

RogueString* RogueTokenizer__type_name( RogueClassTokenizer* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[574]);
}

RogueTokenList* RogueTokenizer__tokenize__String( RogueClassTokenizer* THIS, RogueString* _auto_603_0 )
{
  THIS->filepath = _auto_603_0;
  return (RogueTokenList*)(((RogueTokenizer__tokenize__ParseReader( THIS, ((RogueParseReader__init__String( ((RogueClassParseReader*)Rogue_program.type_ParseReader->create_and_init_object()), THIS->filepath ))) ))));
}

RogueTokenList* RogueTokenizer__tokenize__Token_String_String( RogueClassTokenizer* THIS, RogueClassToken* reference_t_0, RogueString* _auto_604_1, RogueString* data_2 )
{
  THIS->filepath = _auto_604_1;
  RogueCharacterList* characters_3 = (((RogueCharacterList__init__Integer( ((RogueCharacterList*)Rogue_program.type_CharacterList->create_and_init_object()), data_2->count ))));
  {
    RogueString* _auto_1008_4 = (data_2);
    RogueInteger _auto_1009_5 = (0);
    for (;_auto_1009_5 < _auto_1008_4->count;++_auto_1009_5)
    {
      RogueCharacter ch_6 = (_auto_1008_4->characters[_auto_1009_5]);
      RogueCharacterList__add__Character( characters_3, ch_6 );
    }
  }
  return (RogueTokenList*)(((RogueTokenizer__tokenize__ParseReader( THIS, ((RogueParseReader__set_position__Integer_Integer( ((RogueParseReader__init__CharacterList( ((RogueClassParseReader*)Rogue_program.type_ParseReader->create_and_init_object()), characters_3 ))), reference_t_0->line, reference_t_0->column ))) ))));
}

RogueTokenList* RogueTokenizer__tokenize__ParseReader( RogueClassTokenizer* THIS, RogueClassParseReader* _auto_605_0 )
{
  THIS->reader = _auto_605_0;
  RogueTokenizer__configure_token_types( THIS );
  while (((RogueTokenizer__tokenize_another( THIS ))))
  {
  }
  if (THIS->tokens->count == 0)
  {
    if ((THIS->tokens->count == 0 || ((RogueTokenList__last( THIS->tokens )))->_type != RogueClassTokenType::eol))
    {
      RogueTokenizer__add_new_token__TokenType( THIS, RogueClassTokenType::eol );
    }
  }
  return (RogueTokenList*)(THIS->tokens);
}

RogueLogical RogueTokenizer__add_new_string_or_character_token_from_buffer__Character( RogueClassTokenizer* THIS, RogueCharacter terminator_0 )
{
  if ((THIS->buffer->characters->count == 1 && terminator_0 == (RogueCharacter)'\''))
  {
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Character( THIS, RogueClassTokenType::literal_character, THIS->buffer->characters->data->characters[0] ))));
  }
  else
  {
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_String( THIS, RogueClassTokenType::literal_string, ((RogueStringBuilder__to_String( THIS->buffer ))) ))));
  }
}

RogueLogical RogueTokenizer__add_new_token__TokenType( RogueClassTokenizer* THIS, RogueClassTokenType* type_0 )
{
  RogueTokenList__add__Token( THIS->tokens, (call_ROGUEM71( 4, (RogueClassTokenType*)(type_0), THIS->next_filepath, THIS->next_line, THIS->next_column )) );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__add_new_token__TokenType_Character( RogueClassTokenizer* THIS, RogueClassTokenType* type_0, RogueCharacter value_1 )
{
  RogueTokenList__add__Token( THIS->tokens, ((RogueTokenType__create_token__String_Integer_Integer_Character( type_0, THIS->next_filepath, THIS->next_line, THIS->next_column, value_1 ))) );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__add_new_token__TokenType_Long( RogueClassTokenizer* THIS, RogueClassTokenType* type_0, RogueLong value_1 )
{
  RogueTokenList__add__Token( THIS->tokens, ((RogueTokenType__create_token__String_Integer_Integer_Long( type_0, THIS->next_filepath, THIS->next_line, THIS->next_column, value_1 ))) );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__add_new_token__TokenType_Integer( RogueClassTokenizer* THIS, RogueClassTokenType* type_0, RogueInteger value_1 )
{
  RogueTokenList__add__Token( THIS->tokens, ((RogueTokenType__create_token__String_Integer_Integer_Integer( type_0, THIS->next_filepath, THIS->next_line, THIS->next_column, value_1 ))) );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__add_new_token__TokenType_Real( RogueClassTokenizer* THIS, RogueClassTokenType* type_0, RogueReal value_1 )
{
  RogueTokenList__add__Token( THIS->tokens, ((RogueTokenType__create_token__String_Integer_Integer_Real( type_0, THIS->next_filepath, THIS->next_line, THIS->next_column, value_1 ))) );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__add_new_token__TokenType_String( RogueClassTokenizer* THIS, RogueClassTokenType* type_0, RogueString* value_1 )
{
  RogueTokenList__add__Token( THIS->tokens, (call_ROGUEM72( 9, (RogueClassTokenType*)(type_0), THIS->next_filepath, THIS->next_line, THIS->next_column, value_1 )) );
  return (RogueLogical)(true);
}

void RogueTokenizer__configure_token_types( RogueClassTokenizer* THIS )
{
  if (!!(RogueClassTokenType::lookup))
  {
    return;
  }
  RogueClassTokenType::lookup = ((RogueString_TokenTypeTable__init( ((RogueClassString_TokenTypeTable*)Rogue_program.type_String_TokenTypeTable->create_and_init_object()) )));
  RogueClassTokenType::directive_define = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)Rogue_program.type_DirectiveTokenType->create_and_init_object())), Rogue_program.literal_strings[58] ))) )));
  RogueClassTokenType::directive_include = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)Rogue_program.type_DirectiveTokenType->create_and_init_object())), Rogue_program.literal_strings[59] ))) )));
  RogueClassTokenType::directive_includeNativeCode = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)Rogue_program.type_DirectiveTokenType->create_and_init_object())), Rogue_program.literal_strings[60] ))) )));
  RogueClassTokenType::directive_includeNativeHeader = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)Rogue_program.type_DirectiveTokenType->create_and_init_object())), Rogue_program.literal_strings[61] ))) )));
  RogueClassTokenType::directive_if = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)Rogue_program.type_DirectiveTokenType->create_and_init_object())), Rogue_program.literal_strings[62] ))) )));
  RogueClassTokenType::directive_elseIf = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)Rogue_program.type_DirectiveTokenType->create_and_init_object())), Rogue_program.literal_strings[63] ))) )));
  RogueClassTokenType::directive_else = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)Rogue_program.type_DirectiveTokenType->create_and_init_object())), Rogue_program.literal_strings[64] ))) )));
  RogueClassTokenType::directive_endIf = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)Rogue_program.type_DirectiveTokenType->create_and_init_object())), Rogue_program.literal_strings[65] ))) )));
  RogueClassTokenType::directive_requisite = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructuralDirectiveTokenType*)Rogue_program.type_StructuralDirectiveTokenType->create_and_init_object())), Rogue_program.literal_strings[66] ))) )));
  RogueClassTokenType::placeholder_id = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[67] ))) )));
  RogueClassTokenType::eol = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassEOLTokenType*)Rogue_program.type_EOLTokenType->create_and_init_object())), Rogue_program.literal_strings[68] ))) )));
  RogueClassTokenType::begin_augment_tokens = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[68] ))) )));
  RogueClassTokenType::keyword_augment = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[69] ))) )));
  RogueClassTokenType::keyword_case = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[70] ))) )));
  RogueClassTokenType::keyword_catch = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[71] ))) )));
  RogueClassTokenType::keyword_class = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[72] ))) )));
  RogueClassTokenType::keyword_DEFINITIONS = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[73] ))) )));
  RogueClassTokenType::keyword_else = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[74] ))) )));
  RogueClassTokenType::keyword_elseIf = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[75] ))) )));
  RogueClassTokenType::keyword_endAugment = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[76] ))) )));
  RogueClassTokenType::keyword_endClass = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[77] ))) )));
  RogueClassTokenType::keyword_endContingent = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[78] ))) )));
  RogueClassTokenType::keyword_endForEach = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[79] ))) )));
  RogueClassTokenType::keyword_endFunction = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[80] ))) )));
  RogueClassTokenType::keyword_endIf = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[81] ))) )));
  RogueClassTokenType::keyword_endLoop = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[82] ))) )));
  RogueClassTokenType::keyword_endTry = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[83] ))) )));
  RogueClassTokenType::keyword_endWhich = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[84] ))) )));
  RogueClassTokenType::keyword_endWhile = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[85] ))) )));
  RogueClassTokenType::keyword_ENUMERATE = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[86] ))) )));
  RogueClassTokenType::keyword_macro = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[87] ))) )));
  RogueClassTokenType::keyword_method = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[88] ))) )));
  RogueClassTokenType::keyword_METHODS = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[89] ))) )));
  RogueClassTokenType::keyword_nativeCode = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[90] ))) )));
  RogueClassTokenType::keyword_nativeHeader = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[91] ))) )));
  RogueClassTokenType::keyword_others = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[92] ))) )));
  RogueClassTokenType::keyword_PROPERTIES = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[93] ))) )));
  RogueClassTokenType::keyword_routine = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[94] ))) )));
  RogueClassTokenType::keyword_ROUTINES = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[95] ))) )));
  RogueClassTokenType::keyword_satisfied = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[96] ))) )));
  RogueClassTokenType::keyword_SETTINGS = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[97] ))) )));
  RogueClassTokenType::keyword_unsatisfied = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[98] ))) )));
  RogueClassTokenType::keyword_with = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[99] ))) )));
  RogueClassTokenType::symbol_close_brace = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[100] ))) )));
  RogueClassTokenType::symbol_close_bracket = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[17] ))) )));
  RogueClassTokenType::symbol_close_comment = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[101] ))) )));
  RogueClassTokenType::symbol_close_paren = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[102] ))) )));
  RogueClassTokenType::symbol_close_specialize = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)Rogue_program.type_StructureTokenType->create_and_init_object())), Rogue_program.literal_strings[103] ))) )));
  RogueClassTokenType::keyword_await = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[104] ))) )));
  RogueClassTokenType::keyword_contingent = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[105] ))) )));
  RogueClassTokenType::keyword_escapeContingent = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[106] ))) )));
  RogueClassTokenType::keyword_escapeForEach = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[107] ))) )));
  RogueClassTokenType::keyword_escapeIf = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[108] ))) )));
  RogueClassTokenType::keyword_escapeLoop = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[109] ))) )));
  RogueClassTokenType::keyword_escapeTry = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[110] ))) )));
  RogueClassTokenType::keyword_escapeWhich = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[111] ))) )));
  RogueClassTokenType::keyword_escapeWhile = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[112] ))) )));
  RogueClassTokenType::keyword_forEach = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[113] ))) )));
  RogueClassTokenType::keyword_function = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[114] ))) )));
  RogueClassTokenType::keyword_if = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[115] ))) )));
  RogueClassTokenType::keyword_in = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[116] ))) )));
  RogueClassTokenType::keyword_is = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[117] ))) )));
  RogueClassTokenType::keyword_isNot = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[118] ))) )));
  RogueClassTokenType::keyword_local = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[119] ))) )));
  RogueClassTokenType::keyword_loop = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[120] ))) )));
  RogueClassTokenType::keyword_native = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[121] ))) )));
  RogueClassTokenType::keyword_necessary = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[122] ))) )));
  RogueClassTokenType::keyword_nextIteration = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[123] ))) )));
  RogueClassTokenType::keyword_noAction = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[124] ))) )));
  RogueClassTokenType::keyword_null = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[2] ))) )));
  RogueClassTokenType::keyword_of = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[125] ))) )));
  RogueClassTokenType::keyword_return = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[126] ))) )));
  RogueClassTokenType::keyword_step = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[127] ))) )));
  RogueClassTokenType::keyword_sufficient = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[128] ))) )));
  RogueClassTokenType::keyword_throw = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[129] ))) )));
  RogueClassTokenType::keyword_trace = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[130] ))) )));
  RogueClassTokenType::keyword_try = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[131] ))) )));
  RogueClassTokenType::keyword_which = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[132] ))) )));
  RogueClassTokenType::keyword_while = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[133] ))) )));
  RogueClassTokenType::keyword_yield = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[134] ))) )));
  RogueClassTokenType::identifier = ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[135] )));
  RogueClassTokenType::type_identifier = ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[136] )));
  RogueClassTokenType::literal_character = ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[27] )));
  RogueClassTokenType::literal_integer = ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[26] )));
  RogueClassTokenType::literal_long = ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[25] )));
  RogueClassTokenType::literal_real = ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[23] )));
  RogueClassTokenType::literal_string = ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[31] )));
  RogueClassTokenType::keyword_and = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[137] ))) )));
  RogueClassTokenType::keyword_as = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[138] ))) )));
  RogueClassTokenType::keyword_false = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[139] ))) )));
  RogueClassTokenType::keyword_instanceOf = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[140] ))) )));
  RogueClassTokenType::keyword_meta = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[141] ))) )));
  RogueClassTokenType::keyword_not = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[142] ))) )));
  RogueClassTokenType::keyword_notInstanceOf = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[143] ))) )));
  RogueClassTokenType::keyword_or = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[144] ))) )));
  RogueClassTokenType::keyword_pi = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[145] ))) )));
  RogueClassTokenType::keyword_prior = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[146] ))) )));
  RogueClassTokenType::keyword_this = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[147] ))) )));
  RogueClassTokenType::keyword_true = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[148] ))) )));
  RogueClassTokenType::keyword_xor = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[149] ))) )));
  RogueClassTokenType::symbol_ampersand = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[150] ))) )));
  RogueClassTokenType::symbol_ampersand_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)Rogue_program.type_OpWithAssignTokenType->create_and_init_object())), Rogue_program.literal_strings[151] ))) )));
  RogueClassTokenType::symbol_arrow = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[152] ))) )));
  RogueClassTokenType::symbol_at = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[153] ))) )));
  RogueClassTokenType::symbol_backslash = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[154] ))) )));
  RogueClassTokenType::symbol_caret = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[155] ))) )));
  RogueClassTokenType::symbol_caret_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)Rogue_program.type_OpWithAssignTokenType->create_and_init_object())), Rogue_program.literal_strings[156] ))) )));
  RogueClassTokenType::symbol_colon = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[157] ))) )));
  RogueClassTokenType::symbol_colon_colon = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[158] ))) )));
  RogueClassTokenType::symbol_comma = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[16] ))) )));
  RogueClassTokenType::symbol_compare = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[159] ))) )));
  RogueClassTokenType::symbol_dot = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[47] ))) )));
  RogueClassTokenType::symbol_dot_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)Rogue_program.type_OpWithAssignTokenType->create_and_init_object())), Rogue_program.literal_strings[160] ))) )));
  RogueClassTokenType::symbol_downToGreaterThan = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[161] ))) )));
  RogueClassTokenType::symbol_empty_braces = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[162] ))) )));
  RogueClassTokenType::symbol_empty_brackets = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[163] ))) )));
  RogueClassTokenType::symbol_eq = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)Rogue_program.type_OpWithAssignTokenType->create_and_init_object())), Rogue_program.literal_strings[164] ))) )));
  RogueClassTokenType::symbol_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[165] ))) )));
  RogueClassTokenType::symbol_exclamation_point = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[166] ))) )));
  RogueClassTokenType::symbol_fat_arrow = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[167] ))) )));
  RogueClassTokenType::symbol_ge = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)Rogue_program.type_OpWithAssignTokenType->create_and_init_object())), Rogue_program.literal_strings[168] ))) )));
  RogueClassTokenType::symbol_gt = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[169] ))) )));
  RogueClassTokenType::symbol_le = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)Rogue_program.type_OpWithAssignTokenType->create_and_init_object())), Rogue_program.literal_strings[170] ))) )));
  RogueClassTokenType::symbol_lt = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[171] ))) )));
  RogueClassTokenType::symbol_minus = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[172] ))) )));
  RogueClassTokenType::symbol_minus_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)Rogue_program.type_OpWithAssignTokenType->create_and_init_object())), Rogue_program.literal_strings[173] ))) )));
  RogueClassTokenType::symbol_minus_minus = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[4] ))) )));
  RogueClassTokenType::symbol_ne = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)Rogue_program.type_OpWithAssignTokenType->create_and_init_object())), Rogue_program.literal_strings[174] ))) )));
  RogueClassTokenType::symbol_open_brace = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[175] ))) )));
  RogueClassTokenType::symbol_open_bracket = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[15] ))) )));
  RogueClassTokenType::symbol_open_paren = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[176] ))) )));
  RogueClassTokenType::symbol_open_specialize = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[177] ))) )));
  RogueClassTokenType::symbol_percent = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[178] ))) )));
  RogueClassTokenType::symbol_percent_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)Rogue_program.type_OpWithAssignTokenType->create_and_init_object())), Rogue_program.literal_strings[179] ))) )));
  RogueClassTokenType::symbol_plus = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[180] ))) )));
  RogueClassTokenType::symbol_plus_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)Rogue_program.type_OpWithAssignTokenType->create_and_init_object())), Rogue_program.literal_strings[181] ))) )));
  RogueClassTokenType::symbol_plus_plus = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[182] ))) )));
  RogueClassTokenType::symbol_question_mark = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[183] ))) )));
  RogueClassTokenType::symbol_semicolon = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[184] ))) )));
  RogueClassTokenType::symbol_shift_left = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[185] ))) )));
  RogueClassTokenType::symbol_shift_right = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[186] ))) )));
  RogueClassTokenType::symbol_shift_right_x = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[187] ))) )));
  RogueClassTokenType::symbol_slash = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[40] ))) )));
  RogueClassTokenType::symbol_slash_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)Rogue_program.type_OpWithAssignTokenType->create_and_init_object())), Rogue_program.literal_strings[188] ))) )));
  RogueClassTokenType::symbol_tilde = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[189] ))) )));
  RogueClassTokenType::symbol_tilde_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)Rogue_program.type_OpWithAssignTokenType->create_and_init_object())), Rogue_program.literal_strings[190] ))) )));
  RogueClassTokenType::symbol_times = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[191] ))) )));
  RogueClassTokenType::symbol_times_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)Rogue_program.type_OpWithAssignTokenType->create_and_init_object())), Rogue_program.literal_strings[192] ))) )));
  RogueClassTokenType::symbol_upTo = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[193] ))) )));
  RogueClassTokenType::symbol_upToLessThan = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[194] ))) )));
  RogueClassTokenType::symbol_vertical_bar = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[195] ))) )));
  RogueClassTokenType::symbol_vertical_bar_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)Rogue_program.type_OpWithAssignTokenType->create_and_init_object())), Rogue_program.literal_strings[196] ))) )));
  RogueClassTokenType::symbol_double_vertical_bar = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)Rogue_program.type_TokenType->create_and_init_object()), Rogue_program.literal_strings[197] ))) )));
}

RogueLogical RogueTokenizer__consume__Character( RogueClassTokenizer* THIS, RogueCharacter ch_0 )
{
  if (((RogueParseReader__peek( THIS->reader ))) != ch_0)
  {
    return (RogueLogical)(false);
  }
  RogueParseReader__read( THIS->reader );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__consume__String( RogueClassTokenizer* THIS, RogueString* st_0 )
{
  return (RogueLogical)(((RogueParseReader__consume__String( THIS->reader, st_0 ))));
}

RogueLogical RogueTokenizer__consume_spaces( RogueClassTokenizer* THIS )
{
  if (!(((RogueParseReader__consume__Character( THIS->reader, (RogueCharacter)' ' )))))
  {
    return (RogueLogical)(false);
  }
  while (((RogueParseReader__consume__Character( THIS->reader, (RogueCharacter)' ' ))))
  {
  }
  return (RogueLogical)(true);
}

RogueClassTokenType* RogueTokenizer__define__TokenType( RogueClassTokenizer* THIS, RogueClassTokenType* type_0 )
{
  RogueString_TokenTypeTable__set__String_TokenType( RogueClassTokenType::lookup, type_0->name, type_0 );
  return (RogueClassTokenType*)(type_0);
}

RogueClassRogueError* RogueTokenizer__error__String( RogueClassTokenizer* THIS, RogueString* message_0 )
{
  return (RogueClassRogueError*)(((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)Rogue_program.type_RogueError->create_and_init_object()), message_0, THIS->filepath, THIS->reader->line, THIS->reader->column ))));
}

RogueClassTokenType* Rogue_Tokenizer__get_symbol_token_type( RogueClassTokenizer* THIS )
{
  RogueCharacter ch_0 = (((RogueParseReader__read( THIS->reader ))));
  if (ch_0 == (RogueCharacter)'!')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_ne);
    }
    else
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_exclamation_point);
    }
  }
  else if (ch_0 == (RogueCharacter)'$')
  {
    RogueString* id_1 = (((RogueTokenizer__read_identifier( THIS ))));
    {
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( id_1, Rogue_program.literal_strings[217] ))) == 0)
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueClassTokenType::directive_define );
      }
      else if (((RogueString__operatorLESSTHANGREATERTHAN__String( id_1, Rogue_program.literal_strings[218] ))) == 0)
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueClassTokenType::directive_include );
      }
      else if (((RogueString__operatorLESSTHANGREATERTHAN__String( id_1, Rogue_program.literal_strings[219] ))) == 0)
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueClassTokenType::directive_includeNativeCode );
      }
      else if (((RogueString__operatorLESSTHANGREATERTHAN__String( id_1, Rogue_program.literal_strings[220] ))) == 0)
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueClassTokenType::directive_includeNativeHeader );
      }
      else if (((RogueString__operatorLESSTHANGREATERTHAN__String( id_1, Rogue_program.literal_strings[115] ))) == 0)
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueClassTokenType::directive_if );
      }
      else if (((RogueString__operatorLESSTHANGREATERTHAN__String( id_1, Rogue_program.literal_strings[75] ))) == 0)
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueClassTokenType::directive_elseIf );
      }
      else if (((RogueString__operatorLESSTHANGREATERTHAN__String( id_1, Rogue_program.literal_strings[74] ))) == 0)
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueClassTokenType::directive_else );
      }
      else if (((RogueString__operatorLESSTHANGREATERTHAN__String( id_1, Rogue_program.literal_strings[81] ))) == 0)
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueClassTokenType::directive_endIf );
      }
      else if (((RogueString__operatorLESSTHANGREATERTHAN__String( id_1, Rogue_program.literal_strings[221] ))) == 0)
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueClassTokenType::directive_requisite );
      }
      else
      {
        RogueTokenizer__add_new_token__TokenType_String( THIS, RogueClassTokenType::placeholder_id, ((RogueString__operatorPLUS__String( Rogue_program.literal_strings[222], id_1 ))) );
      }
    }
    return (RogueClassTokenType*)(((RogueClassTokenType*)(NULL)));
  }
  else if (ch_0 == (RogueCharacter)'%')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_percent_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_percent);
    }
  }
  else if (ch_0 == (RogueCharacter)'&')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'&' ))))
    {
      throw ((RogueTokenizer__error__String( THIS, Rogue_program.literal_strings[223] )));
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_ampersand_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_ampersand);
    }
  }
  else if (ch_0 == (RogueCharacter)'(')
  {
    return (RogueClassTokenType*)(RogueClassTokenType::symbol_open_paren);
  }
  else if (ch_0 == (RogueCharacter)')')
  {
    return (RogueClassTokenType*)(RogueClassTokenType::symbol_close_paren);
  }
  else if (ch_0 == (RogueCharacter)'*')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_times_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_times);
    }
  }
  else if (ch_0 == (RogueCharacter)'+')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_plus_equals);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'+' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_plus_plus);
    }
    else
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_plus);
    }
  }
  else if (ch_0 == (RogueCharacter)',')
  {
    return (RogueClassTokenType*)(RogueClassTokenType::symbol_comma);
  }
  else if (ch_0 == (RogueCharacter)'-')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_minus_equals);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'-' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_minus_minus);
    }
    else if ((((RogueParseReader__peek__Integer( THIS->reader, 0 ))) == (RogueCharacter)'>' && ((RogueParseReader__peek__Integer( THIS->reader, 1 ))) == (RogueCharacter)'>'))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_minus);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'>' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_arrow);
    }
    else
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_minus);
    }
  }
  else if (ch_0 == (RogueCharacter)'.')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'.' ))))
    {
      if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'.' ))))
      {
        while (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)' ' ))))
        {
        }
        if (!(((RogueTokenizer__consume__Character( THIS, (RogueCharacter)10 )))))
        {
          throw ((RogueTokenizer__error__String( THIS, Rogue_program.literal_strings[224] )));
        }
        return (RogueClassTokenType*)(((RogueClassTokenType*)(NULL)));
      }
      else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'<' ))))
      {
        return (RogueClassTokenType*)(RogueClassTokenType::symbol_upToLessThan);
      }
      else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'>' ))))
      {
        return (RogueClassTokenType*)(RogueClassTokenType::symbol_downToGreaterThan);
      }
      else
      {
        return (RogueClassTokenType*)(RogueClassTokenType::symbol_upTo);
      }
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_dot_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_dot);
    }
  }
  else if (ch_0 == (RogueCharacter)'/')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_slash_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_slash);
    }
  }
  else if (ch_0 == (RogueCharacter)':')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)':' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_colon_colon);
    }
    if (((RogueTokenizer__consume__String( THIS, Rogue_program.literal_strings[225] ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_shift_left);
    }
    else if (((RogueTokenizer__consume__String( THIS, Rogue_program.literal_strings[226] ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_shift_right);
    }
    else if (((RogueTokenizer__consume__String( THIS, Rogue_program.literal_strings[227] ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_shift_right_x);
    }
    return (RogueClassTokenType*)(RogueClassTokenType::symbol_colon);
  }
  else if (ch_0 == (RogueCharacter)';')
  {
    return (RogueClassTokenType*)(RogueClassTokenType::symbol_semicolon);
  }
  else if (ch_0 == (RogueCharacter)'<')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'<' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_open_specialize);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_le);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'>' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_compare);
    }
    else
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_lt);
    }
  }
  else if (ch_0 == (RogueCharacter)'=')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_eq);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'>' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_fat_arrow);
    }
    else
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_equals);
    }
  }
  else if (ch_0 == (RogueCharacter)'>')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_ge);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'>' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_close_specialize);
    }
    else
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_gt);
    }
  }
  else if (ch_0 == (RogueCharacter)'?')
  {
    return (RogueClassTokenType*)(RogueClassTokenType::symbol_question_mark);
  }
  else if (ch_0 == (RogueCharacter)'@')
  {
    return (RogueClassTokenType*)(RogueClassTokenType::symbol_at);
  }
  else if (ch_0 == (RogueCharacter)'[')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)']' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_empty_brackets);
    }
    return (RogueClassTokenType*)(RogueClassTokenType::symbol_open_bracket);
  }
  else if (ch_0 == (RogueCharacter)'\\')
  {
    return (RogueClassTokenType*)(RogueClassTokenType::symbol_backslash);
  }
  else if (ch_0 == (RogueCharacter)']')
  {
    return (RogueClassTokenType*)(RogueClassTokenType::symbol_close_bracket);
  }
  else if (ch_0 == (RogueCharacter)'^')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_caret_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_caret);
    }
  }
  else if (ch_0 == (RogueCharacter)'{')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'}' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_empty_braces);
    }
    return (RogueClassTokenType*)(RogueClassTokenType::symbol_open_brace);
  }
  else if (ch_0 == (RogueCharacter)'|')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'|' ))))
    {
      throw ((RogueTokenizer__error__String( THIS, Rogue_program.literal_strings[228] )));
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_vertical_bar_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_vertical_bar);
    }
  }
  else if (ch_0 == (RogueCharacter)'}')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'#' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_close_comment);
    }
    else
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_close_brace);
    }
  }
  else if (ch_0 == (RogueCharacter)'~')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_tilde_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueClassTokenType::symbol_tilde);
    }
  }
  else
  {
    throw ((RogueTokenizer__error__String( THIS, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__Character( Rogue_program.literal_strings[229], ch_0 ))), Rogue_program.literal_strings[13] ))) )));
  }
}

RogueLogical RogueTokenizer__next_is_hex_digit( RogueClassTokenizer* THIS )
{
  RogueCharacter ch_0 = (((RogueParseReader__peek( THIS->reader ))));
  return (RogueLogical)((((ch_0 >= (RogueCharacter)'0' && ch_0 <= (RogueCharacter)'9') || (ch_0 >= (RogueCharacter)'a' && ch_0 <= (RogueCharacter)'f')) || (ch_0 >= (RogueCharacter)'A' && ch_0 <= (RogueCharacter)'F')));
}

RogueCharacter RogueTokenizer__read_character( RogueClassTokenizer* THIS )
{
  if (!(((RogueParseReader__has_another( THIS->reader )))))
  {
    throw ((RogueTokenizer__error__String( THIS, Rogue_program.literal_strings[203] )));
  }
  RogueCharacter ch_0 = (((RogueParseReader__peek( THIS->reader ))));
  if (ch_0 == (RogueCharacter)10)
  {
    throw ((RogueTokenizer__error__String( THIS, Rogue_program.literal_strings[204] )));
  }
  if (ch_0 == (RogueCharacter)'\\')
  {
    RogueParseReader__read( THIS->reader );
    if (!(((RogueParseReader__has_another( THIS->reader )))))
    {
      throw ((RogueTokenizer__error__String( THIS, Rogue_program.literal_strings[205] )));
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'b' ))))
    {
      return (RogueCharacter)(((RogueCharacter)(8)));
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'f' ))))
    {
      return (RogueCharacter)(((RogueCharacter)(12)));
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'n' ))))
    {
      return (RogueCharacter)((RogueCharacter)10);
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'r' ))))
    {
      return (RogueCharacter)((RogueCharacter)13);
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'t' ))))
    {
      return (RogueCharacter)((RogueCharacter)9);
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'v' ))))
    {
      return (RogueCharacter)(((RogueCharacter)(11)));
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'0' ))))
    {
      return (RogueCharacter)((RogueCharacter)0);
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'/' ))))
    {
      return (RogueCharacter)((RogueCharacter)'/');
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'\'' ))))
    {
      return (RogueCharacter)((RogueCharacter)'\'');
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'\\' ))))
    {
      return (RogueCharacter)((RogueCharacter)'\\');
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'"' ))))
    {
      return (RogueCharacter)((RogueCharacter)'"');
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'x' ))))
    {
      return (RogueCharacter)(((RogueTokenizer__read_hex_value__Integer( THIS, 2 ))));
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'u' ))))
    {
      return (RogueCharacter)(((RogueTokenizer__read_hex_value__Integer( THIS, 4 ))));
    }
    throw ((RogueTokenizer__error__String( THIS, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( Rogue_program.literal_strings[209], Rogue_program.literal_strings[210] ))), Rogue_program.literal_strings[211] ))) )));
  }
  RogueInteger value_1 = (((RogueInteger)(((RogueParseReader__read( THIS->reader ))))));
  if ((value_1 & 128) != 0)
  {
    RogueInteger ch2_2 = (((RogueInteger)(((RogueParseReader__read( THIS->reader ))))));
    if ((value_1 & 32) == 0)
    {
      value_1 = ((RogueInteger)(value_1 & 31));
      ch2_2 = ((RogueInteger)(value_1 & 63));
      return (RogueCharacter)(((RogueCharacter)(((value_1 << 6) | ch2_2))));
    }
    else
    {
      RogueInteger ch3_3 = (((RogueInteger)(((RogueParseReader__read( THIS->reader ))))));
      value_1 = ((RogueInteger)(value_1 & 15));
      ch2_2 = ((RogueInteger)(ch2_2 & 63));
      ch3_3 = ((RogueInteger)(ch3_3 & 63));
      return (RogueCharacter)(((RogueCharacter)((((value_1 << 2) | (ch2_2 << 6)) | ch3_3))));
    }
  }
  return (RogueCharacter)(((RogueCharacter)(value_1)));
}

RogueCharacter RogueTokenizer__read_hex_value__Integer( RogueClassTokenizer* THIS, RogueInteger digits_0 )
{
  RogueInteger value_1 = (0);
  RogueInteger i_2 = (1);
  while (i_2 <= digits_0)
  {
    if (!(((RogueParseReader__has_another( THIS->reader )))))
    {
      throw ((RogueTokenizer__error__String( THIS, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__Integer( Rogue_program.literal_strings[0], digits_0 ))), Rogue_program.literal_strings[207] ))) )));
    }
    if (!(((RogueTokenizer__next_is_hex_digit( THIS )))))
    {
      RogueCharacter ch_3 = (((RogueParseReader__peek( THIS->reader ))));
      RogueStringBuilder* error_buffer_4 = (((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))));
      RogueStringBuilder__print__String( error_buffer_4, Rogue_program.literal_strings[208] );
      if ((ch_3 < (RogueCharacter)' ' || ((RogueInteger)(ch_3)) == 127))
      {
        RogueStringBuilder__print__Integer( error_buffer_4, ((RogueInteger)(ch_3)) );
      }
      else
      {
        RogueStringBuilder__print__String( error_buffer_4, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__Character( Rogue_program.literal_strings[46], ch_3 ))), Rogue_program.literal_strings[46] ))) );
      }
      RogueStringBuilder__print__Character( error_buffer_4, (RogueCharacter)'.' );
      throw ((RogueTokenizer__error__String( THIS, ((RogueStringBuilder__to_String( error_buffer_4 ))) )));
    }
    RogueInteger intval_5 = (((RogueInteger)(((RogueParseReader__read( THIS->reader ))))));
    value_1 = ((RogueInteger)((value_1 << 4) + intval_5));
    ++i_2;
  }
  return (RogueCharacter)(((RogueCharacter)(value_1)));
}

RogueString* RogueTokenizer__read_identifier( RogueClassTokenizer* THIS )
{
  RogueStringBuilder__clear( THIS->buffer );
  RogueCharacter ch_0 = (((RogueParseReader__peek( THIS->reader ))));
  while (((((ch_0 >= (RogueCharacter)'a' && ch_0 <= (RogueCharacter)'z') || (ch_0 >= (RogueCharacter)'A' && ch_0 <= (RogueCharacter)'Z')) || (ch_0 >= (RogueCharacter)'0' && ch_0 <= (RogueCharacter)'9')) || ch_0 == (RogueCharacter)'_'))
  {
    RogueStringBuilder__print__Character( THIS->buffer, ((RogueParseReader__read( THIS->reader ))) );
    ch_0 = ((RogueCharacter)((RogueParseReader__peek( THIS->reader ))));
  }
  if (THIS->buffer->characters->count == 0)
  {
    throw ((RogueTokenizer__error__String( THIS, Rogue_program.literal_strings[198] )));
  }
  return (RogueString*)(((RogueStringBuilder__to_String( THIS->buffer ))));
}

RogueLogical RogueTokenizer__tokenize_alternate_string__Character( RogueClassTokenizer* THIS, RogueCharacter terminator_0 )
{
  RogueStringBuilder__clear( THIS->buffer );
  while (((RogueParseReader__has_another( THIS->reader ))))
  {
    if (((RogueParseReader__has_another( THIS->reader ))))
    {
      RogueCharacter ch_1 = (((RogueParseReader__peek( THIS->reader ))));
      if (ch_1 == terminator_0)
      {
        RogueParseReader__read( THIS->reader );
        ch_1 = ((RogueCharacter)((RogueParseReader__peek( THIS->reader ))));
        if (ch_1 == terminator_0)
        {
          RogueParseReader__read( THIS->reader );
          return (RogueLogical)(((RogueTokenizer__add_new_string_or_character_token_from_buffer__Character( THIS, ((RogueCharacter)(0)) ))));
        }
        else
        {
          RogueStringBuilder__print__Character( THIS->buffer, terminator_0 );
        }
      }
      else
      {
        RogueStringBuilder__print__Character( THIS->buffer, ((RogueTokenizer__read_character( THIS ))) );
      }
    }
  }
  throw ((RogueTokenizer__error__String( THIS, Rogue_program.literal_strings[212] )));
}

RogueLogical RogueTokenizer__tokenize_another( RogueClassTokenizer* THIS )
{
  RogueParseReader__consume_spaces( THIS->reader );
  THIS->next_filepath = THIS->filepath;
  THIS->next_line = THIS->reader->line;
  THIS->next_column = THIS->reader->column;
  if (!(((RogueParseReader__has_another( THIS->reader )))))
  {
    return (RogueLogical)(false);
  }
  RogueCharacter ch_0 = (((RogueParseReader__peek( THIS->reader ))));
  if (ch_0 == (RogueCharacter)10)
  {
    RogueParseReader__read( THIS->reader );
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType( THIS, RogueClassTokenType::eol ))));
  }
  if ((((RogueCharacter__is_letter( ch_0 ))) || ch_0 == (RogueCharacter)'_'))
  {
    RogueString* id_1 = (((RogueTokenizer__read_identifier( THIS ))));
    RogueClassTokenType* keyword_type_2 = (((RogueString_TokenTypeTable__get__String( RogueClassTokenType::lookup, id_1 ))));
    if (!!(keyword_type_2))
    {
      if (keyword_type_2 == RogueClassTokenType::keyword_nativeCode)
      {
        return (RogueLogical)(((RogueTokenizer__scan_native_code( THIS ))));
      }
      else if (keyword_type_2 == RogueClassTokenType::keyword_nativeHeader)
      {
        return (RogueLogical)(((RogueTokenizer__scan_native_header( THIS ))));
      }
      else
      {
        return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType( THIS, keyword_type_2 ))));
      }
    }
    else
    {
      return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_String( THIS, RogueClassTokenType::identifier, id_1 ))));
    }
    return (RogueLogical)(true);
  }
  else if (ch_0 == (RogueCharacter)'\'')
  {
    if (((RogueParseReader__peek__Integer( THIS->reader, 1 ))) == (RogueCharacter)'\'')
    {
      RogueParseReader__read( THIS->reader );
      RogueParseReader__read( THIS->reader );
      return (RogueLogical)(((RogueTokenizer__tokenize_alternate_string__Character( THIS, (RogueCharacter)'\'' ))));
    }
    else
    {
      return (RogueLogical)(((RogueTokenizer__tokenize_string__Character( THIS, (RogueCharacter)'\'' ))));
    }
  }
  else if (ch_0 == (RogueCharacter)'"')
  {
    return (RogueLogical)(((RogueTokenizer__tokenize_string__Character( THIS, (RogueCharacter)'"' ))));
  }
  else if (ch_0 == (RogueCharacter)'#')
  {
    return (RogueLogical)(((RogueTokenizer__tokenize_comment( THIS ))));
  }
  else if ((ch_0 >= (RogueCharacter)'0' && ch_0 <= (RogueCharacter)'9'))
  {
    switch (((RogueInteger)(((RogueParseReader__peek__Integer( THIS->reader, 1 ))))))
    {
      case (RogueCharacter)'b':
      {
        return (RogueLogical)(((RogueTokenizer__tokenize_integer_in_base__Integer( THIS, 2 ))));
        break;
      }
      case (RogueCharacter)'c':
      {
        return (RogueLogical)(((RogueTokenizer__tokenize_integer_in_base__Integer( THIS, 8 ))));
        break;
      }
      case (RogueCharacter)'x':
      {
        return (RogueLogical)(((RogueTokenizer__tokenize_integer_in_base__Integer( THIS, 16 ))));
        break;
      }
      default:
      {
        return (RogueLogical)(((RogueTokenizer__tokenize_number( THIS ))));
      }
    }
  }
  else if ((ch_0 == (RogueCharacter)'@' && ((RogueParseReader__peek__Integer( THIS->reader, 1 ))) == (RogueCharacter)'|'))
  {
    return (RogueLogical)(((RogueTokenizer__tokenize_verbatim_string( THIS ))));
  }
  else
  {
    if (ch_0 == (RogueCharacter)'.')
    {
      RogueCharacter next_3 = (((RogueParseReader__peek__Integer( THIS->reader, 1 ))));
      if ((next_3 >= (RogueCharacter)'0' && next_3 <= (RogueCharacter)'9'))
      {
        return (RogueLogical)(((RogueTokenizer__tokenize_number( THIS ))));
      }
    }
    RogueClassTokenType* token_type_4 = (((Rogue_Tokenizer__get_symbol_token_type( THIS ))));
    if (token_type_4 == NULL)
    {
      return (RogueLogical)(true);
    }
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType( THIS, token_type_4 ))));
  }
  RogueString* name_5 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[46] ))), ((RogueCharacter__to_String( ch_0 ))) ))), Rogue_program.literal_strings[46] ))) ))));
  if (((RogueInteger)(ch_0)) == 10)
  {
    name_5 = ((RogueString*)Rogue_program.literal_strings[230]);
  }
  else if ((((RogueInteger)(ch_0)) < 32 || ((RogueInteger)(ch_0)) > 126))
  {
    name_5 = ((RogueString*)((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[231] ))), ((RogueInteger__to_String( ((RogueInteger)(ch_0)) ))) ))), Rogue_program.literal_strings[102] ))) ))));
  }
  throw ((RogueTokenizer__error__String( THIS, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[232] ))), name_5 ))), Rogue_program.literal_strings[47] ))) ))) )));
}

RogueLogical RogueTokenizer__tokenize_comment( RogueClassTokenizer* THIS )
{
  RogueStringBuilder__clear( THIS->buffer );
  RogueParseReader__read( THIS->reader );
  if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'{' ))))
  {
    RogueInteger nesting_count_0 = (1);
    while (((RogueParseReader__has_another( THIS->reader ))))
    {
      RogueCharacter ch_1 = (((RogueParseReader__read( THIS->reader ))));
      switch (((RogueInteger)(ch_1)))
      {
        case (RogueCharacter)'#':
        {
          RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)'#' );
          if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'{' ))))
          {
            RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)'{' );
            ++nesting_count_0;
          }
          break;
        }
        case (RogueCharacter)'}':
        {
          if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'#' ))))
          {
            --nesting_count_0;
            if (nesting_count_0 == 0)
            {
              goto _auto_1010;
            }
            else
            {
              RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)'}' );
              RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)'#' );
            }
          }
          else
          {
            RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)'}' );
          }
          break;
        }
        default:
        {
          RogueStringBuilder__print__Character( THIS->buffer, ch_1 );
        }
      }
    }
    _auto_1010:;
  }
  else
  {
    while ((((RogueParseReader__has_another( THIS->reader ))) && ((RogueParseReader__peek( THIS->reader ))) != (RogueCharacter)10))
    {
      RogueStringBuilder__print__Character( THIS->buffer, ((RogueParseReader__read( THIS->reader ))) );
    }
  }
  if ((!!(THIS->tokens->count) && ((RogueTokenList__last( THIS->tokens )))->_type == RogueClassTokenType::eol))
  {
    ((RogueClassEOLToken*)(RogueObject::as(((RogueTokenList__last( THIS->tokens ))),Rogue_program.type_EOLToken)))->comment = ((RogueString__operatorPLUS__String( ((RogueClassEOLToken*)(RogueObject::as(((RogueTokenList__last( THIS->tokens ))),Rogue_program.type_EOLToken)))->comment, ((RogueStringBuilder__to_String( THIS->buffer ))) )));
  }
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__tokenize_integer_in_base__Integer( RogueClassTokenizer* THIS, RogueInteger base_0 )
{
  RogueParseReader__read( THIS->reader );
  RogueParseReader__read( THIS->reader );
  RogueInteger count_1 = (0);
  RogueInteger n_2 = (0);
  RogueInteger digit_3 = (((RogueCharacter__to_number__Integer( ((RogueParseReader__peek( THIS->reader ))), base_0 ))));
  while ((((RogueParseReader__has_another( THIS->reader ))) && digit_3 != -1))
  {
    if (digit_3 >= base_0)
    {
      throw ((RogueTokenizer__error__String( THIS, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__Integer( Rogue_program.literal_strings[214], base_0 ))), Rogue_program.literal_strings[47] ))) )));
    }
    ++count_1;
    n_2 = ((RogueInteger)((n_2 * base_0) + digit_3));
    RogueParseReader__read( THIS->reader );
    digit_3 = ((RogueInteger)((RogueCharacter__to_number__Integer( ((RogueParseReader__peek( THIS->reader ))), base_0 ))));
  }
  if (count_1 == 0)
  {
    throw ((RogueTokenizer__error__String( THIS, Rogue_program.literal_strings[215] )));
  }
  return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Integer( THIS, RogueClassTokenType::literal_integer, n_2 ))));
}

RogueLogical RogueTokenizer__tokenize_number( RogueClassTokenizer* THIS )
{
  RogueLogical is_negative_0 = (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'-' ))));
  RogueInteger i_1 = (0);
  while ((((RogueParseReader__has_another__Integer( THIS->reader, (i_1 + 1) ))) && ((RogueCharacter__is_number__Integer( ((RogueParseReader__peek__Integer( THIS->reader, i_1 ))), 10 )))))
  {
    ++i_1;
  }
  RogueCharacter ch_2 = (((RogueParseReader__peek__Integer( THIS->reader, i_1 ))));
  RogueLogical is_real_3 = ((((ch_2 == (RogueCharacter)'.' && ((RogueCharacter__is_number__Integer( ((RogueParseReader__peek__Integer( THIS->reader, (i_1 + 1) ))), 10 )))) || ch_2 == (RogueCharacter)'e') || ch_2 == (RogueCharacter)'E'));
  if (is_real_3)
  {
    RogueReal n_4 = (((RogueTokenizer__scan_real( THIS ))));
    ch_2 = ((RogueCharacter)((RogueParseReader__peek( THIS->reader ))));
    if (ch_2 == (RogueCharacter)'.')
    {
      ch_2 = ((RogueCharacter)((RogueParseReader__peek__Integer( THIS->reader, 1 ))));
      if ((ch_2 >= (RogueCharacter)'0' && ch_2 <= (RogueCharacter)'9'))
      {
        RogueParseReader__read( THIS->reader );
        RogueInteger start_pos_5 = (THIS->reader->position);
        RogueReal fraction_6 = (((RogueTokenizer__scan_real( THIS ))));
        n_4 += (fraction_6 / ((RogueReal) pow((double)10.0, (double)((RogueReal)((THIS->reader->position - start_pos_5))))));
      }
      else if (ch_2 == (RogueCharacter)'.')
      {
        if (is_negative_0)
        {
          n_4 = ((RogueReal)(-(n_4)));
        }
        return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Integer( THIS, RogueClassTokenType::literal_integer, ((RogueInteger)(n_4)) ))));
      }
      else if ((((ch_2 >= (RogueCharacter)'a' && ch_2 <= (RogueCharacter)'z') || (ch_2 >= (RogueCharacter)'A' && ch_2 <= (RogueCharacter)'Z')) || ch_2 == (RogueCharacter)'_'))
      {
        return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Integer( THIS, RogueClassTokenType::literal_integer, ((RogueInteger)(n_4)) ))));
      }
      else
      {
        if (is_negative_0)
        {
          n_4 = ((RogueReal)(-(n_4)));
        }
        return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Real( THIS, RogueClassTokenType::literal_real, n_4 ))));
      }
    }
    if ((((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'E' ))) || ((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'e' )))))
    {
      RogueLogical negative_exponent_7 = (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'-' ))));
      if (!(negative_exponent_7))
      {
        RogueTokenizer__consume__Character( THIS, (RogueCharacter)'+' );
      }
      RogueReal power_8 = (((RogueTokenizer__scan_real( THIS ))));
      if (negative_exponent_7)
      {
        n_4 /= ((RogueReal) pow((double)10.0, (double)power_8));
      }
      else
      {
        n_4 *= ((RogueReal) pow((double)10.0, (double)power_8));
      }
    }
    if (is_negative_0)
    {
      n_4 = ((RogueReal)(-(n_4)));
    }
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Real( THIS, RogueClassTokenType::literal_real, n_4 ))));
  }
  else
  {
    RogueLong n_9 = (((RogueTokenizer__scan_long( THIS ))));
    if (is_negative_0)
    {
      n_9 = ((RogueLong)(-(n_9)));
    }
    if (n_9 == ((RogueLong)((RogueInteger)(n_9))))
    {
      return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Integer( THIS, RogueClassTokenType::literal_integer, ((RogueInteger)(n_9)) ))));
    }
    else
    {
      return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Long( THIS, RogueClassTokenType::literal_long, n_9 ))));
    }
  }
}

RogueReal RogueTokenizer__scan_real( RogueClassTokenizer* THIS )
{
  RogueReal n_0 = (0.0);
  RogueCharacter ch_1 = (((RogueParseReader__peek( THIS->reader ))));
  while ((ch_1 >= (RogueCharacter)'0' && ch_1 <= (RogueCharacter)'9'))
  {
    RogueInteger intval_2 = ((((RogueInteger)(((RogueParseReader__read( THIS->reader ))))) - ((RogueInteger)((RogueCharacter)'0'))));
    n_0 = ((RogueReal)((n_0 * 10.0) + ((RogueReal)(intval_2))));
    ch_1 = ((RogueCharacter)((RogueParseReader__peek( THIS->reader ))));
  }
  return (RogueReal)(n_0);
}

RogueLong RogueTokenizer__scan_long( RogueClassTokenizer* THIS )
{
  RogueLong n_0 = (((RogueLong)0));
  RogueCharacter ch_1 = (((RogueParseReader__peek( THIS->reader ))));
  while ((ch_1 >= (RogueCharacter)'0' && ch_1 <= (RogueCharacter)'9'))
  {
    RogueInteger intval_2 = ((((RogueInteger)(((RogueParseReader__read( THIS->reader ))))) - ((RogueInteger)((RogueCharacter)'0'))));
    n_0 = ((RogueLong)((n_0 * ((RogueLong)10)) + ((RogueLong)intval_2)));
    ch_1 = ((RogueCharacter)((RogueParseReader__peek( THIS->reader ))));
  }
  return (RogueLong)(n_0);
}

RogueLogical RogueTokenizer__scan_native_code( RogueClassTokenizer* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))));
  RogueParseReader__consume_spaces( THIS->reader );
  if (((RogueParseReader__consume__Character( THIS->reader, (RogueCharacter)10 ))))
  {
    RogueLogical found_end_1 = (false);
    while (((RogueParseReader__has_another( THIS->reader ))))
    {
      if ((THIS->reader->column == 1 && ((RogueParseReader__consume_id__String( THIS->reader, Rogue_program.literal_strings[199] )))))
      {
        found_end_1 = ((RogueLogical)true);
        goto _auto_1013;
      }
      RogueStringBuilder__print__Character( buffer_0, ((RogueParseReader__read( THIS->reader ))) );
    }
    _auto_1013:;
    if (!(found_end_1))
    {
      throw ((RogueTokenizer__error__String( THIS, Rogue_program.literal_strings[200] )));
    }
  }
  else
  {
    while (((RogueParseReader__has_another( THIS->reader ))))
    {
      if (((RogueParseReader__consume__Character( THIS->reader, (RogueCharacter)10 ))))
      {
        goto _auto_1014;
      }
      RogueStringBuilder__print__Character( buffer_0, ((RogueParseReader__read( THIS->reader ))) );
    }
    _auto_1014:;
  }
  {
    RogueClassLineReader* _auto_1015_2 = (((RogueLineReader__init__String( ((RogueClassLineReader*)Rogue_program.type_LineReader->create_and_init_object()), ((RogueStringBuilder__to_String( buffer_0 ))) ))));
    while (((RogueLineReader__has_another( _auto_1015_2 ))))
    {
      RogueString* line_3 = (((RogueLineReader__read( _auto_1015_2 ))));
      RogueStringList__add__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_code, line_3 );
    }
  }
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__scan_native_header( RogueClassTokenizer* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))));
  RogueParseReader__consume_spaces( THIS->reader );
  if (((RogueParseReader__consume__Character( THIS->reader, (RogueCharacter)10 ))))
  {
    RogueLogical found_end_1 = (false);
    while (((RogueParseReader__has_another( THIS->reader ))))
    {
      if ((THIS->reader->column == 1 && ((RogueParseReader__consume_id__String( THIS->reader, Rogue_program.literal_strings[201] )))))
      {
        found_end_1 = ((RogueLogical)true);
        goto _auto_1016;
      }
      RogueStringBuilder__print__Character( buffer_0, ((RogueParseReader__read( THIS->reader ))) );
    }
    _auto_1016:;
    if (!(found_end_1))
    {
      throw ((RogueTokenizer__error__String( THIS, Rogue_program.literal_strings[202] )));
    }
  }
  else
  {
    while (((RogueParseReader__has_another( THIS->reader ))))
    {
      if (((RogueParseReader__consume__Character( THIS->reader, (RogueCharacter)10 ))))
      {
        goto _auto_1017;
      }
      RogueStringBuilder__print__Character( buffer_0, ((RogueParseReader__read( THIS->reader ))) );
    }
    _auto_1017:;
  }
  {
    RogueClassLineReader* _auto_1018_2 = (((RogueLineReader__init__String( ((RogueClassLineReader*)Rogue_program.type_LineReader->create_and_init_object()), ((RogueStringBuilder__to_String( buffer_0 ))) ))));
    while (((RogueLineReader__has_another( _auto_1018_2 ))))
    {
      RogueString* line_3 = (((RogueLineReader__read( _auto_1018_2 ))));
      RogueStringList__add__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_header, line_3 );
    }
  }
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__tokenize_string__Character( RogueClassTokenizer* THIS, RogueCharacter terminator_0 )
{
  RogueStringBuilder__clear( THIS->buffer );
  RogueParseReader__read( THIS->reader );
  while (((RogueParseReader__has_another( THIS->reader ))))
  {
    RogueCharacter ch_1 = (((RogueParseReader__peek( THIS->reader ))));
    if (ch_1 == terminator_0)
    {
      RogueParseReader__read( THIS->reader );
      return (RogueLogical)(((RogueTokenizer__add_new_string_or_character_token_from_buffer__Character( THIS, terminator_0 ))));
    }
    else
    {
      RogueStringBuilder__print__Character( THIS->buffer, ((RogueTokenizer__read_character( THIS ))) );
    }
  }
  throw ((RogueTokenizer__error__String( THIS, Rogue_program.literal_strings[213] )));
}

RogueLogical RogueTokenizer__tokenize_verbatim_string( RogueClassTokenizer* THIS )
{
  RogueStringBuilder__clear( THIS->buffer );
  RogueParseReader__read( THIS->reader );
  RogueParseReader__read( THIS->reader );
  while (((RogueParseReader__has_another( THIS->reader ))))
  {
    RogueCharacter ch_0 = (((RogueParseReader__peek( THIS->reader ))));
    if (((RogueInteger)(ch_0)) == 10)
    {
      RogueParseReader__read( THIS->reader );
      RogueTokenizer__consume_spaces( THIS );
      if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'|' ))))
      {
        RogueStringBuilder__print__Character( THIS->buffer, ch_0 );
      }
      else
      {
        RogueTokenizer__add_new_token__TokenType_String( THIS, RogueClassTokenType::literal_string, ((RogueStringBuilder__to_String( THIS->buffer ))) );
        return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType( THIS, RogueClassTokenType::eol ))));
      }
    }
    else
    {
      RogueStringBuilder__print__Character( THIS->buffer, ((RogueParseReader__read( THIS->reader ))) );
    }
  }
  throw ((RogueTokenizer__error__String( THIS, Rogue_program.literal_strings[216] )));
}

RogueClassTokenizer* RogueTokenizer__init_object( RogueClassTokenizer* THIS )
{
  THIS->tokens = ((RogueTokenList__init( ((RogueTokenList*)Rogue_program.type_TokenList->create_and_init_object()) )));
  THIS->buffer = ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) )));
  return (RogueClassTokenizer*)(THIS);
}

RogueString* RogueParseReader__type_name( RogueClassParseReader* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[575]);
}

RogueLogical RogueParseReader__has_another( RogueClassParseReader* THIS )
{
  return (RogueLogical)(THIS->position < THIS->count);
}

RogueCharacter RogueParseReader__peek( RogueClassParseReader* THIS )
{
  if (THIS->position == THIS->count)
  {
    return (RogueCharacter)(((RogueCharacter)(0)));
  }
  return (RogueCharacter)(THIS->data->data->characters[THIS->position]);
}

RogueCharacter RogueParseReader__read( RogueClassParseReader* THIS )
{
  RogueCharacter result_0 = (THIS->data->data->characters[THIS->position]);
  ++THIS->position;
  if (((RogueInteger)(result_0)) == 10)
  {
    ++THIS->line;
    THIS->column = 1;
  }
  else
  {
    ++THIS->column;
  }
  return (RogueCharacter)(result_0);
}

RogueClassParseReader* RogueParseReader__init__String( RogueClassParseReader* THIS, RogueString* filepath_0 )
{
  RogueParseReader__init__File( THIS, ((RogueFile__init__String( ((RogueClassFile*)Rogue_program.type_File->create_and_init_object()), filepath_0 ))) );
  return (RogueClassParseReader*)(THIS);
}

RogueClassParseReader* RogueParseReader__init__File( RogueClassParseReader* THIS, RogueClassFile* file_0 )
{
  RogueParseReader__init__ByteList( THIS, (RogueFile__load_as_bytes__String( file_0->filepath )) );
  return (RogueClassParseReader*)(THIS);
}

RogueClassParseReader* RogueParseReader__init__ByteList( RogueClassParseReader* THIS, RogueByteList* original_data_0 )
{
  RogueInteger tab_count_1 = (0);
  {
    RogueByteList* _auto_1019_2 = (original_data_0);
    RogueInteger _auto_1020_3 = (0);
    for (;_auto_1020_3 < _auto_1019_2->count;++_auto_1020_3)
    {
      RogueByte b_4 = (_auto_1019_2->data->bytes[_auto_1020_3]);
      if (((RogueCharacter)(b_4)) == (RogueCharacter)9)
      {
        ++tab_count_1;
      }
    }
  }
  THIS->data = ((RogueCharacterList__init__Integer( ((RogueCharacterList*)Rogue_program.type_CharacterList->create_and_init_object()), (original_data_0->count + tab_count_1) )));
  {
    RogueByteList* _auto_1021_5 = (original_data_0);
    RogueInteger _auto_1022_6 = (0);
    for (;_auto_1022_6 < _auto_1021_5->count;++_auto_1022_6)
    {
      RogueByte b_7 = (_auto_1021_5->data->bytes[_auto_1022_6]);
      if (((RogueCharacter)(b_7)) == (RogueCharacter)9)
      {
        RogueCharacterList__add__Character( THIS->data, ((RogueCharacter)(32)) );
        RogueCharacterList__add__Character( THIS->data, ((RogueCharacter)(32)) );
      }
      else if ((((RogueCharacter)(b_7)) == (RogueCharacter)10 || (((RogueInteger)(b_7)) >= 32 && ((RogueInteger)(b_7)) <= 126)))
      {
        RogueCharacterList__add__Character( THIS->data, ((RogueCharacter)(b_7)) );
      }
    }
  }
  THIS->count = THIS->data->count;
  THIS->line = 1;
  THIS->column = 1;
  return (RogueClassParseReader*)(THIS);
}

RogueClassParseReader* RogueParseReader__init__CharacterList( RogueClassParseReader* THIS, RogueCharacterList* original_data_0 )
{
  RogueInteger tab_count_1 = (0);
  {
    RogueCharacterList* _auto_1023_2 = (original_data_0);
    RogueInteger _auto_1024_3 = (0);
    for (;_auto_1024_3 < _auto_1023_2->count;++_auto_1024_3)
    {
      RogueCharacter b_4 = (_auto_1023_2->data->characters[_auto_1024_3]);
      if (b_4 == (RogueCharacter)9)
      {
        ++tab_count_1;
      }
    }
  }
  THIS->data = ((RogueCharacterList__init__Integer( ((RogueCharacterList*)Rogue_program.type_CharacterList->create_and_init_object()), (original_data_0->count + tab_count_1) )));
  {
    RogueCharacterList* _auto_1025_5 = (original_data_0);
    RogueInteger _auto_1026_6 = (0);
    for (;_auto_1026_6 < _auto_1025_5->count;++_auto_1026_6)
    {
      RogueCharacter b_7 = (_auto_1025_5->data->characters[_auto_1026_6]);
      if (b_7 == (RogueCharacter)9)
      {
        RogueCharacterList__add__Character( THIS->data, ((RogueCharacter)(32)) );
        RogueCharacterList__add__Character( THIS->data, ((RogueCharacter)(32)) );
      }
      else if ((b_7 == (RogueCharacter)10 || (((RogueInteger)(b_7)) >= 32 && ((RogueInteger)(b_7)) <= 126)))
      {
        RogueCharacterList__add__Character( THIS->data, b_7 );
      }
    }
  }
  THIS->count = THIS->data->count;
  THIS->line = 1;
  THIS->column = 1;
  return (RogueClassParseReader*)(THIS);
}

RogueLogical RogueParseReader__consume__Character( RogueClassParseReader* THIS, RogueCharacter ch_0 )
{
  if (((RogueParseReader__peek( THIS ))) != ch_0)
  {
    return (RogueLogical)(false);
  }
  RogueParseReader__read( THIS );
  return (RogueLogical)(true);
}

RogueLogical RogueParseReader__consume__String( RogueClassParseReader* THIS, RogueString* text_0 )
{
  RogueInteger limit_1 = (text_0->count);
  RogueInteger i_2 = (0);
  while (i_2 < limit_1)
  {
    if (((RogueParseReader__peek__Integer( THIS, i_2 ))) != text_0->characters[i_2])
    {
      return (RogueLogical)(false);
    }
    ++i_2;
  }
  i_2 = ((RogueInteger)0);
  while (i_2 < limit_1)
  {
    RogueParseReader__read( THIS );
    ++i_2;
  }
  return (RogueLogical)(true);
}

RogueLogical RogueParseReader__consume_id__String( RogueClassParseReader* THIS, RogueString* text_0 )
{
  RogueCharacter ch_1 = (((RogueParseReader__peek__Integer( THIS, text_0->count ))));
  if ((((RogueCharacter__is_alphanumeric( ch_1 ))) || ch_1 == (RogueCharacter)'_'))
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(((RogueParseReader__consume__String( THIS, text_0 ))));
}

RogueLogical RogueParseReader__consume_spaces( RogueClassParseReader* THIS )
{
  RogueLogical found_0 = (false);
  while (((RogueParseReader__consume__Character( THIS, (RogueCharacter)' ' ))))
  {
    found_0 = ((RogueLogical)true);
  }
  return (RogueLogical)(found_0);
}

RogueLogical RogueParseReader__has_another__Integer( RogueClassParseReader* THIS, RogueInteger n_0 )
{
  return (RogueLogical)((THIS->position + n_0) <= THIS->count);
}

RogueCharacter RogueParseReader__peek__Integer( RogueClassParseReader* THIS, RogueInteger num_ahead_0 )
{
  RogueInteger peek_pos_1 = ((THIS->position + num_ahead_0));
  if (peek_pos_1 >= THIS->count)
  {
    return (RogueCharacter)(((RogueCharacter)(0)));
  }
  return (RogueCharacter)(THIS->data->data->characters[peek_pos_1]);
}

RogueClassParseReader* RogueParseReader__set_position__Integer_Integer( RogueClassParseReader* THIS, RogueInteger _auto_606_0, RogueInteger _auto_607_1 )
{
  THIS->column = _auto_607_1;
  THIS->line = _auto_606_0;
  return (RogueClassParseReader*)(THIS);
}

RogueClassParseReader* RogueParseReader__init_object( RogueClassParseReader* THIS )
{
  return (RogueClassParseReader*)(THIS);
}

RogueString* RoguePreprocessor__type_name( RogueClassPreprocessor* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[576]);
}

RogueTokenList* RoguePreprocessor__process__TokenList( RogueClassPreprocessor* THIS, RogueTokenList* _auto_608_0 )
{
  THIS->tokens = _auto_608_0;
  THIS->reader = ((RoguePreprocessorTokenReader__init__TokenList( ((RogueClassPreprocessorTokenReader*)Rogue_program.type_PreprocessorTokenReader->create_and_init_object()), THIS->tokens )));
  THIS->tokens = ((RogueTokenList__init__Integer( ((RogueTokenList*)Rogue_program.type_TokenList->create_and_init_object()), ((RogueInteger)((((RogueReal)(THIS->tokens->count)) * 1.1))) )));
  RoguePreprocessor__process__Logical_Integer_Logical( THIS, true, 0, false );
  return (RogueTokenList*)(THIS->tokens);
}

RogueLogical RoguePreprocessor__consume__TokenType( RogueClassPreprocessor* THIS, RogueClassTokenType* type_0 )
{
  if (((RoguePreprocessorTokenReader__peek( THIS->reader )))->_type != type_0)
  {
    return (RogueLogical)(false);
  }
  RoguePreprocessorTokenReader__read( THIS->reader );
  return (RogueLogical)(true);
}

void RoguePreprocessor__process__Logical_Integer_Logical( RogueClassPreprocessor* THIS, RogueLogical keep_tokens_0, RogueInteger depth_1, RogueLogical stop_on_eol_2 )
{
  ++depth_1;
  while (((RoguePreprocessorTokenReader__has_another( THIS->reader ))))
  {
    RogueClassToken* t_3 = (((RoguePreprocessorTokenReader__read( THIS->reader ))));
    if (((RogueToken__is_directive( t_3 ))))
    {
      if (t_3->_type == RogueClassTokenType::directive_define)
      {
        RogueString* defined_word_4 = (((RoguePreprocessorTokenReader__read_identifier( THIS->reader ))));
        RogueTokenList* defined_tokens_5 = (((RogueTokenList__init( ((RogueTokenList*)Rogue_program.type_TokenList->create_and_init_object()) ))));
        while (((RoguePreprocessorTokenReader__has_another( THIS->reader ))))
        {
          RogueClassToken* def_t_6 = (((RoguePreprocessorTokenReader__read( THIS->reader ))));
          if (def_t_6->_type == RogueClassTokenType::eol)
          {
            goto _auto_1028;
          }
          RogueTokenList__add__Token( defined_tokens_5, def_t_6 );
        }
        _auto_1028:;
        RogueString_TokenListTable__set__String_TokenList( RogueClassPreprocessor::definitions, defined_word_4, defined_tokens_5 );
        continue;
      }
      else if (t_3->_type == RogueClassTokenType::directive_include)
      {
        RogueClassToken* filepath_t_7 = (((RoguePreprocessorTokenReader__read( THIS->reader ))));
        if (filepath_t_7->_type != RogueClassTokenType::literal_string)
        {
          throw ((RoguePreprocessorTokenReader__error__String( THIS->reader, Rogue_program.literal_strings[48] )));
        }
        RogueRogueC__include__Token_String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC)), t_3, (call_ROGUEM33( 1, (RogueClassToken*)(filepath_t_7) )) );
        continue;
      }
      else if (t_3->_type == RogueClassTokenType::directive_includeNativeCode)
      {
        RogueClassToken* filepath_t_8 = (((RoguePreprocessorTokenReader__read( THIS->reader ))));
        if (filepath_t_8->_type != RogueClassTokenType::literal_string)
        {
          throw ((RoguePreprocessorTokenReader__error__String( THIS->reader, Rogue_program.literal_strings[48] )));
        }
        RogueRogueC__include_native__Token_String_String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC)), t_3, (call_ROGUEM33( 1, (RogueClassToken*)(filepath_t_8) )), Rogue_program.literal_strings[52] );
        continue;
      }
      else if (t_3->_type == RogueClassTokenType::directive_includeNativeHeader)
      {
        RogueClassToken* filepath_t_9 = (((RoguePreprocessorTokenReader__read( THIS->reader ))));
        if (filepath_t_9->_type != RogueClassTokenType::literal_string)
        {
          throw ((RoguePreprocessorTokenReader__error__String( THIS->reader, Rogue_program.literal_strings[48] )));
        }
        RogueRogueC__include_native__Token_String_String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC)), t_3, (call_ROGUEM33( 1, (RogueClassToken*)(filepath_t_9) )), Rogue_program.literal_strings[51] );
        continue;
      }
      else if (t_3->_type == RogueClassTokenType::directive_elseIf)
      {
        if (depth_1 == 1)
        {
          throw ((RogueToken__error__String( t_3, Rogue_program.literal_strings[53] )));
        }
        RoguePreprocessorTokenReader__push__Token( THIS->reader, t_3 );
        return;
      }
      else if (t_3->_type == RogueClassTokenType::directive_else)
      {
        if (depth_1 == 1)
        {
          throw ((RogueToken__error__String( t_3, Rogue_program.literal_strings[54] )));
        }
        RoguePreprocessorTokenReader__push__Token( THIS->reader, t_3 );
        return;
      }
      else if (t_3->_type == RogueClassTokenType::directive_endIf)
      {
        if (depth_1 == 1)
        {
          throw ((RogueToken__error__String( t_3, Rogue_program.literal_strings[55] )));
        }
        RoguePreprocessorTokenReader__push__Token( THIS->reader, t_3 );
        return;
      }
      else if (t_3->_type == RogueClassTokenType::directive_if)
      {
        RogueLogical found_true_10 = (((RoguePreprocessor__parse_logical_expression( THIS ))));
        RogueLogical single_line_11 = (!(((RoguePreprocessorTokenReader__next_is__TokenType( THIS->reader, RogueClassTokenType::eol )))));
        if (found_true_10)
        {
          RoguePreprocessor__process__Logical_Integer_Logical( THIS, keep_tokens_0, depth_1, single_line_11 );
        }
        else
        {
          RoguePreprocessor__process__Logical_Integer_Logical( THIS, false, depth_1, single_line_11 );
        }
        while (((RoguePreprocessorTokenReader__peek( THIS->reader )))->_type == RogueClassTokenType::directive_elseIf)
        {
          RoguePreprocessorTokenReader__read( THIS->reader );
          RogueLogical value_12 = (((RoguePreprocessor__parse_logical_expression( THIS ))));
          if (found_true_10)
          {
            RoguePreprocessor__process__Logical_Integer_Logical( THIS, false, depth_1, single_line_11 );
          }
          else
          {
            found_true_10 = ((RogueLogical)value_12);
            if (value_12)
            {
              RoguePreprocessor__process__Logical_Integer_Logical( THIS, keep_tokens_0, depth_1, single_line_11 );
            }
            else
            {
              RoguePreprocessor__process__Logical_Integer_Logical( THIS, false, depth_1, single_line_11 );
            }
          }
        }
        if (((RoguePreprocessorTokenReader__peek( THIS->reader )))->_type == RogueClassTokenType::directive_else)
        {
          RoguePreprocessorTokenReader__read( THIS->reader );
          if (found_true_10)
          {
            RoguePreprocessor__process__Logical_Integer_Logical( THIS, false, depth_1, single_line_11 );
          }
          else
          {
            RoguePreprocessor__process__Logical_Integer_Logical( THIS, keep_tokens_0, depth_1, single_line_11 );
          }
        }
        if (!(single_line_11))
        {
          RoguePreprocessor__must_consume__TokenType( THIS, RogueClassTokenType::directive_endIf );
        }
        continue;
      }
    }
    if (keep_tokens_0)
    {
      RogueTokenList__add__Token( THIS->tokens, t_3 );
    }
    if ((stop_on_eol_2 && t_3->_type == RogueClassTokenType::eol))
    {
      return;
    }
  }
}

void RoguePreprocessor__must_consume__TokenType( RogueClassPreprocessor* THIS, RogueClassTokenType* type_0 )
{
  RogueString* message_1 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[56] ))), type_0->name ))), Rogue_program.literal_strings[13] ))) ))));
  if (!(((RoguePreprocessorTokenReader__has_another( THIS->reader )))))
  {
    throw ((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)Rogue_program.type_RogueError->create_and_init_object()), message_1, ((RogueString*)(NULL)), 0, 0 )));
  }
  RogueClassToken* t_2 = (((RoguePreprocessorTokenReader__read( THIS->reader ))));
  if (t_2->_type != type_0)
  {
    throw ((RogueToken__error__String( t_2, message_1 )));
  }
}

RogueLogical RoguePreprocessor__parse_logical_expression( RogueClassPreprocessor* THIS )
{
  return (RogueLogical)(((RoguePreprocessor__parse_logical_or( THIS ))));
}

RogueLogical RoguePreprocessor__parse_logical_or( RogueClassPreprocessor* THIS )
{
  return (RogueLogical)(((RoguePreprocessor__parse_logical_or__Logical( THIS, ((RoguePreprocessor__parse_logical_and( THIS ))) ))));
}

RogueLogical RoguePreprocessor__parse_logical_or__Logical( RogueClassPreprocessor* THIS, RogueLogical lhs_0 )
{
  if (((RoguePreprocessor__consume__TokenType( THIS, RogueClassTokenType::keyword_or ))))
  {
    return (RogueLogical)(((RoguePreprocessor__parse_logical_or__Logical( THIS, (((RoguePreprocessor__parse_logical_and( THIS ))) || lhs_0) ))));
  }
  return (RogueLogical)(lhs_0);
}

RogueLogical RoguePreprocessor__parse_logical_and( RogueClassPreprocessor* THIS )
{
  return (RogueLogical)(((RoguePreprocessor__parse_logical_and__Logical( THIS, ((RoguePreprocessor__parse_logical_term( THIS ))) ))));
}

RogueLogical RoguePreprocessor__parse_logical_and__Logical( RogueClassPreprocessor* THIS, RogueLogical lhs_0 )
{
  if (((RoguePreprocessor__consume__TokenType( THIS, RogueClassTokenType::keyword_and ))))
  {
    return (RogueLogical)(((RoguePreprocessor__parse_logical_and__Logical( THIS, (((RoguePreprocessor__parse_logical_term( THIS ))) && lhs_0) ))));
  }
  return (RogueLogical)(lhs_0);
}

RogueLogical RoguePreprocessor__parse_logical_term( RogueClassPreprocessor* THIS )
{
  for (;;)
  {
    RogueClassToken* t_0 = (((RoguePreprocessorTokenReader__peek( THIS->reader ))));
    if (((RoguePreprocessor__consume__TokenType( THIS, RogueClassTokenType::keyword_not ))))
    {
      return (RogueLogical)(!(((RoguePreprocessor__parse_logical_term( THIS )))));
    }
    if (((RoguePreprocessor__consume__TokenType( THIS, RogueClassTokenType::symbol_open_paren ))))
    {
      RogueLogical result_1 = (((RoguePreprocessor__parse_logical_expression( THIS ))));
      RoguePreprocessor__must_consume__TokenType( THIS, RogueClassTokenType::symbol_close_paren );
      return (RogueLogical)(result_1);
    }
    if (t_0->_type == RogueClassTokenType::literal_string)
    {
      return (RogueLogical)(((RogueString_LogicalTable__get__String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->compile_targets, (call_ROGUEM33( 1, (RogueClassToken*)(((RoguePreprocessorTokenReader__read( THIS->reader )))) )) ))));
    }
    if (((RoguePreprocessor__consume__TokenType( THIS, RogueClassTokenType::keyword_true ))))
    {
      return (RogueLogical)(true);
    }
    if (((RoguePreprocessor__consume__TokenType( THIS, RogueClassTokenType::keyword_false ))))
    {
      return (RogueLogical)(false);
    }
    throw ((RogueToken__error__String( ((RoguePreprocessorTokenReader__peek( THIS->reader ))), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[57] ))), (call_ROGUEM33( 1, (RogueClassToken*)(((RoguePreprocessorTokenReader__peek( THIS->reader )))) )) ))), Rogue_program.literal_strings[13] ))) ))) )));
  }
}

RogueClassPreprocessor* RoguePreprocessor__init_object( RogueClassPreprocessor* THIS )
{
  return (RogueClassPreprocessor*)(THIS);
}

RogueString* RogueCmdAdd__type_name( RogueClassCmdAdd* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[872]);
}

RogueClassCmd* RogueCmdAdd__clone__CloneArgs( RogueClassCmdAdd* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdAdd*)Rogue_program.type_CmdAdd->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdAdd__combine_literal_operands__Type( RogueClassCmdAdd* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)Rogue_program.type_CmdLiteralReal->create_and_init_object()), THIS->t, (((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralReal)))->value + ((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralReal)))->value) ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, (((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralInteger)))->value + ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralInteger)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdAdd* RogueCmdAdd__init_object( RogueClassCmdAdd* THIS )
{
  return (RogueClassCmdAdd*)(THIS);
}

RogueString* RogueCmdAdd__fn_name( RogueClassCmdAdd* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[862]);
}

RogueClassCmd* RogueCmdAdd__resolve_operator_method__Scope_Type_Type( RogueClassCmdAdd* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  if ((left_type_1 != ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String && right_type_2 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String))
  {
    THIS->left = (call_ROGUEM205( 23, (RogueClassCmdBinary*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdAdd*)Rogue_program.type_CmdAdd->create_and_init_object())), THIS->t, ((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Integer( ((RogueClassCmdLiteralString*)Rogue_program.type_CmdLiteralString->create_and_init_object()), THIS->t, Rogue_program.literal_strings[0], 0 ))))), THIS->left )))), scope_0 ));
    left_type_1 = ((RogueClassType*)((Rogue_Cmd__require_type( THIS->left ))));
  }
  return (RogueClassCmd*)((RogueCmdBinary__resolve_operator_method__Scope_Type_Type( ((RogueClassCmdBinary*)THIS), scope_0, left_type_1, right_type_2 )));
}

RogueString* RogueCmdAdd__symbol( RogueClassCmdAdd* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[180]);
}

RogueString* RogueCmdIf__type_name( RogueClassCmdIf* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[839]);
}

RogueClassCmd* RogueCmdIf__clone__CloneArgs( RogueClassCmdIf* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_TaskArgs))));
  if ((!!(task_args_1) && THIS->contains_yield))
  {
    RogueClassCmdTaskControlSection* next_section_2 = (((RogueTaskArgs__create_section( task_args_1 ))));
    RogueClassCmdTaskControlSection* end_section_3 = (((RogueTaskArgs__create_section( task_args_1 ))));
    THIS->task_escape_section = end_section_3;
    RogueTaskArgs__add_conditional_jump__Cmd_CmdTaskControlSection( task_args_1, ((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)Rogue_program.type_CmdLogicalNot->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->condition), clone_args_0 )) ))))), next_section_2 );
    {
      RogueClassCmdStatementList* _auto_1030_5 = (THIS->statements);
      RogueInteger _auto_1031_6 = (0);
      for (;_auto_1031_6 < _auto_1030_5->count;++_auto_1031_6)
      {
        RogueClassCmd* statement_7 = (((RogueClassCmd*)(_auto_1030_5->data->objects[_auto_1031_6])));
        RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM44( 5, (RogueClassCmd*)(statement_7), ((RogueClassCloneArgs*)(task_args_1)) )) );
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, THIS->t, end_section_3 );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, next_section_2 );
    if (!!(THIS->else_statements))
    {
      {
        RogueClassCmdStatementList* _auto_1032_8 = (THIS->else_statements);
        RogueInteger _auto_1033_9 = (0);
        for (;_auto_1033_9 < _auto_1032_8->count;++_auto_1033_9)
        {
          RogueClassCmd* statement_10 = (((RogueClassCmd*)(_auto_1032_8->data->objects[_auto_1033_9])));
          RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM44( 5, (RogueClassCmd*)(statement_10), ((RogueClassCloneArgs*)(task_args_1)) )) );
        }
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, THIS->t, end_section_3 );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, end_section_3 );
    if (end_section_3->ip < task_args_1->cmd_task_control->sections->count)
    {
      RogueTaskArgs__jump_to_new_section__Token( task_args_1, THIS->t );
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  else
  {
    RogueClassCmdIf* result_4 = (((RogueCmdIf__init__Token_Cmd_Integer( ((RogueClassCmdIf*)Rogue_program.type_CmdIf->create_and_init_object()), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->condition), clone_args_0 )), THIS->_control_type ))));
    call_ROGUEM171( 31, (RogueClassCmdControlStructure*)(result_4), ((RogueClassCmdControlStructure*)(THIS)) );
    THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_4));
    result_4->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 )));
    result_4->else_statements = ((RogueCmd__clone__CmdStatementList_CloneArgs( ((RogueClassCmd*)THIS), THIS->else_statements, clone_args_0 )));
    return (RogueClassCmd*)(((RogueClassCmd*)(result_4)));
  }
}

RogueClassCmd* RogueCmdIf__resolve__Scope( RogueClassCmdIf* THIS, RogueClassScope* scope_0 )
{
  THIS->condition = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->condition), scope_0 ));
  THIS->condition = ((RogueCmd__require_logical__Scope( THIS->condition, scope_0 )));
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  if (!!(THIS->else_statements))
  {
    RogueCmdStatementList__resolve__Scope( THIS->else_statements, scope_0 );
  }
  RogueCmdControlStructureList__remove_last( scope_0->control_stack );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdIf__trace_used_code( RogueClassCmdIf* THIS )
{
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->condition) );
  RogueCmdStatementList__trace_used_code( THIS->statements );
  if (!!(THIS->else_statements))
  {
    RogueCmdStatementList__trace_used_code( THIS->else_statements );
  }
}

void RogueCmdIf__write_cpp__CPPWriter_Logical( RogueClassCmdIf* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[779] );
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->condition), writer_0, false );
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[102] );
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, false );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
  if (!!(THIS->else_statements))
  {
    if ((THIS->else_statements->count == 1 && RogueObject::instance_of(((RogueClassCmd*)(THIS->else_statements->data->objects[0])),Rogue_program.type_CmdIf)))
    {
      RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[780] );
      RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->else_statements, writer_0, false );
    }
    else
    {
      RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[74] );
      RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
      writer_0->indent += 2;
      RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->else_statements, writer_0, false );
      writer_0->indent -= 2;
      RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
    }
  }
  if (!!(THIS->escape_label))
  {
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, THIS->escape_label ))), Rogue_program.literal_strings[770] );
  }
}

RogueClassCmdIf* RogueCmdIf__init_object( RogueClassCmdIf* THIS )
{
  return (RogueClassCmdIf*)(THIS);
}

RogueClassCmdIf* RogueCmdIf__init__Token_Cmd_Integer( RogueClassCmdIf* THIS, RogueClassToken* _auto_615_0, RogueClassCmd* _auto_616_1, RogueInteger _auto_617_2 )
{
  THIS->_control_type = _auto_617_2;
  THIS->condition = _auto_616_1;
  THIS->t = _auto_615_0;
  THIS->statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) )));
  return (RogueClassCmdIf*)(THIS);
}

RogueClassCmdIf* RogueCmdIf__init__Token_Cmd_CmdStatementList_Integer( RogueClassCmdIf* THIS, RogueClassToken* _auto_618_0, RogueClassCmd* _auto_619_1, RogueClassCmdStatementList* _auto_620_2, RogueInteger _auto_621_3 )
{
  THIS->_control_type = _auto_621_3;
  THIS->statements = _auto_620_2;
  THIS->condition = _auto_619_1;
  THIS->t = _auto_618_0;
  return (RogueClassCmdIf*)(THIS);
}

RogueString* RogueCmdWhich__type_name( RogueClassCmdWhich* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[840]);
}

RogueClassCmdWhich* RogueCmdWhich__clone__CloneArgs( RogueClassCmdWhich* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdWhich* result_1 = (((RogueCmdWhich__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Integer( ((RogueClassCmdWhich*)Rogue_program.type_CmdWhich->create_and_init_object()), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->expression), clone_args_0 )), ((RogueCmdWhichCaseList*)(NULL)), ((RogueClassCmdWhichCase*)(NULL)), 5 ))));
  call_ROGUEM171( 31, (RogueClassCmdControlStructure*)(result_1), ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_1));
  RogueCmdWhichCaseList* cloned_cases_2 = (((RogueCmdWhichCaseList__init__Integer( ((RogueCmdWhichCaseList*)Rogue_program.type_CmdWhichCaseList->create_and_init_object()), THIS->cases->count ))));
  {
    RogueCmdWhichCaseList* _auto_1034_3 = (THIS->cases);
    RogueInteger _auto_1035_4 = (0);
    for (;_auto_1035_4 < _auto_1034_3->count;++_auto_1035_4)
    {
      RogueClassCmdWhichCase* c_5 = (((RogueClassCmdWhichCase*)(_auto_1034_3->data->objects[_auto_1035_4])));
      RogueCmdWhichCaseList__add__CmdWhichCase( cloned_cases_2, ((RogueCmdWhichCase__clone__CloneArgs( c_5, clone_args_0 ))) );
    }
  }
  result_1->cases = cloned_cases_2;
  if (!!(THIS->case_others))
  {
    result_1->case_others = ((RogueCmdWhichCase__clone__CloneArgs( THIS->case_others, clone_args_0 )));
  }
  return (RogueClassCmdWhich*)(result_1);
}

RogueClassCmd* RogueCmdWhich__resolve__Scope( RogueClassCmdWhich* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->expression = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->expression), scope_0 ));
  RogueLogical all_literal_cases_1 = (true);
  RogueClassType* expression_type_2 = (((Rogue_Cmd__require_type( THIS->expression ))));
  if (expression_type_2 != ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    if ((expression_type_2 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte || expression_type_2 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character))
    {
      THIS->expression = (call_ROGUEM42( 23, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->expression), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer ))), scope_0 ));
    }
    else
    {
      all_literal_cases_1 = ((RogueLogical)false);
    }
  }
  {
    RogueCmdWhichCaseList* _auto_1036_10 = (THIS->cases);
    RogueInteger _auto_1037_11 = (0);
    for (;_auto_1037_11 < _auto_1036_10->count;++_auto_1037_11)
    {
      RogueClassCmdWhichCase* c_12 = (((RogueClassCmdWhichCase*)(_auto_1036_10->data->objects[_auto_1037_11])));
      RogueCmdArgs__resolve__Scope( c_12->conditions, scope_0 );
      if (all_literal_cases_1)
      {
        {
          RogueClassCmdArgs* _auto_1038_13 = (c_12->conditions);
          RogueInteger _auto_1039_14 = (0);
          for (;_auto_1039_14 < _auto_1038_13->count;++_auto_1039_14)
          {
            RogueClassCmd* condition_15 = (((RogueClassCmd*)(_auto_1038_13->data->objects[_auto_1039_14])));
            if ((!((call_ROGUEM47( 16, (RogueClassCmd*)(condition_15) ))) || RogueObject::instance_of(condition_15,Rogue_program.type_CmdLiteralString)))
            {
              all_literal_cases_1 = ((RogueLogical)false);
              goto _auto_1040;
            }
          }
        }
        _auto_1040:;
      }
      RogueCmdStatementList__resolve__Scope( c_12->statements, scope_0 );
    }
  }
  if (!!(THIS->case_others))
  {
    RogueCmdArgs__resolve__Scope( THIS->case_others->conditions, scope_0 );
    RogueCmdStatementList__resolve__Scope( THIS->case_others->statements, scope_0 );
  }
  RogueCmdControlStructureList__remove_last( scope_0->control_stack );
  if ((all_literal_cases_1 && !(THIS->contains_yield)))
  {
    return (RogueClassCmd*)((call_ROGUEM171( 31, (RogueClassCmdControlStructure*)(((RogueCmdSwitch__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Integer( ((RogueClassCmdSwitch*)Rogue_program.type_CmdSwitch->create_and_init_object()), THIS->t, THIS->expression, THIS->cases, THIS->case_others, 5 )))), ((RogueClassCmdControlStructure*)(THIS)) )));
  }
  RogueClassCmdBlock* result_3 = (((RogueCmdBlock__init__Token_Integer( ((RogueClassCmdBlock*)Rogue_program.type_CmdBlock->create_and_init_object()), THIS->t, 5 ))));
  call_ROGUEM171( 31, (RogueClassCmdControlStructure*)(result_3), ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->expression = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->expression), scope_0 ));
  RogueString* var_name_4 = 0;
  RogueClassLocal* expression_var_5 = 0;
  if (RogueObject::instance_of(THIS->expression,Rogue_program.type_CmdReadLocal))
  {
    expression_var_5 = ((RogueClassLocal*)((RogueClassCmdReadLocal*)(RogueObject::as(THIS->expression,Rogue_program.type_CmdReadLocal)))->local_info);
    var_name_4 = ((RogueString*)expression_var_5->name);
  }
  else
  {
    var_name_4 = ((RogueString*)((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))));
    expression_var_5 = ((RogueClassLocal*)((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, var_name_4, ((Rogue_Cmd__require_type( THIS->expression ))), THIS->expression ))));
    RogueCmdList__add__Cmd( ((RogueCmdList*)result_3->statements), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local( ((RogueClassCmdLocalDeclaration*)Rogue_program.type_CmdLocalDeclaration->create_and_init_object()), THIS->t, expression_var_5 ))))) );
  }
  if (!!(THIS->cases->count))
  {
    RogueClassCmdIf* cmd_if_6 = (((RogueCmdIf__init__Token_Cmd_CmdStatementList_Integer( ((RogueClassCmdIf*)Rogue_program.type_CmdIf->create_and_init_object()), THIS->expression->t, ((RogueCmdWhichCase__as_conditional__String( ((RogueClassCmdWhichCase*)(THIS->cases->data->objects[0])), var_name_4 ))), ((RogueClassCmdWhichCase*)(THIS->cases->data->objects[0]))->statements, 2 ))));
    RogueClassCmdIf* cur_if_7 = (cmd_if_6);
    {
      RogueCmdWhichCaseList* _auto_1046_16 = (THIS->cases);
      RogueInteger i_17 = (0);
      for (;i_17 < _auto_1046_16->count;++i_17)
      {
        if (i_17 > 0)
        {
          RogueClassCmdWhichCase* c_8 = (((RogueClassCmdWhichCase*)(THIS->cases->data->objects[i_17])));
          RogueClassCmdIf* cmd_else_if_9 = (((RogueCmdIf__init__Token_Cmd_Integer( ((RogueClassCmdIf*)Rogue_program.type_CmdIf->create_and_init_object()), c_8->t, ((RogueCmdWhichCase__as_conditional__String( c_8, var_name_4 ))), 3 ))));
          cmd_else_if_9->statements = c_8->statements;
          cur_if_7->else_statements = ((RogueCmdStatementList__init__Cmd( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()), ((RogueClassCmd*)(cmd_else_if_9)) )));
          cur_if_7 = ((RogueClassCmdIf*)cmd_else_if_9);
        }
      }
    }
    if (!!(THIS->case_others))
    {
      cur_if_7->else_statements = THIS->case_others->statements;
    }
    RogueCmdList__add__Cmd( ((RogueCmdList*)result_3->statements), ((RogueClassCmd*)(cmd_if_6)) );
  }
  else if (!!(THIS->case_others))
  {
    {
      RogueClassCmdStatementList* _auto_1047_18 = (THIS->case_others->statements);
      RogueInteger _auto_1048_19 = (0);
      for (;_auto_1048_19 < _auto_1047_18->count;++_auto_1048_19)
      {
        RogueClassCmd* cmd_20 = (((RogueClassCmd*)(_auto_1047_18->data->objects[_auto_1048_19])));
        RogueCmdList__add__Cmd( ((RogueCmdList*)result_3->statements), cmd_20 );
      }
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBlock__resolve__Scope( result_3, scope_0 ))))));
}

RogueClassCmdWhich* RogueCmdWhich__init_object( RogueClassCmdWhich* THIS )
{
  return (RogueClassCmdWhich*)(THIS);
}

RogueClassCmdWhich* RogueCmdWhich__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Integer( RogueClassCmdWhich* THIS, RogueClassToken* _auto_622_0, RogueClassCmd* _auto_623_1, RogueCmdWhichCaseList* _auto_624_2, RogueClassCmdWhichCase* _auto_625_3, RogueInteger _auto_626_4 )
{
  THIS->_control_type = _auto_626_4;
  THIS->case_others = _auto_625_3;
  THIS->cases = _auto_624_2;
  THIS->expression = _auto_623_1;
  THIS->t = _auto_622_0;
  return (RogueClassCmdWhich*)(THIS);
}

RogueClassCmdWhichCase* RogueCmdWhich__add_case__Token( RogueClassCmdWhich* THIS, RogueClassToken* case_t_0 )
{
  RogueClassCmdWhichCase* result_1 = (((RogueCmdWhichCase__init__Token_CmdArgs_CmdStatementList( ((RogueClassCmdWhichCase*)Rogue_program.type_CmdWhichCase->create_and_init_object()), case_t_0, ((RogueCmdArgs__init( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()) ))), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) ))) ))));
  RogueCmdWhichCaseList__add__CmdWhichCase( THIS->cases, result_1 );
  return (RogueClassCmdWhichCase*)(result_1);
}

RogueClassCmdWhichCase* RogueCmdWhich__add_case_others__Token( RogueClassCmdWhich* THIS, RogueClassToken* case_t_0 )
{
  RogueClassCmdWhichCase* result_1 = (((RogueCmdWhichCase__init__Token_CmdArgs_CmdStatementList( ((RogueClassCmdWhichCase*)Rogue_program.type_CmdWhichCase->create_and_init_object()), case_t_0, ((RogueCmdArgs__init( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()) ))), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) ))) ))));
  THIS->case_others = result_1;
  return (RogueClassCmdWhichCase*)(result_1);
}

RogueString* RogueCmdContingent__type_name( RogueClassCmdContingent* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[841]);
}

RogueClassCmd* RogueCmdContingent__clone__CloneArgs( RogueClassCmdContingent* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_TaskArgs))));
  if ((!!(task_args_1) && THIS->contains_yield))
  {
    THIS->satisfied_section = ((RogueTaskArgs__create_section( task_args_1 )));
    THIS->unsatisfied_section = ((RogueTaskArgs__create_section( task_args_1 )));
    RogueClassCmdTaskControlSection* end_section_2 = (((RogueTaskArgs__create_section( task_args_1 ))));
    THIS->task_escape_section = end_section_2;
    {
      RogueClassCmdStatementList* _auto_1049_4 = (THIS->statements);
      RogueInteger _auto_1050_5 = (0);
      for (;_auto_1050_5 < _auto_1049_4->count;++_auto_1050_5)
      {
        RogueClassCmd* statement_6 = (((RogueClassCmd*)(_auto_1049_4->data->objects[_auto_1050_5])));
        RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM44( 5, (RogueClassCmd*)(statement_6), ((RogueClassCloneArgs*)(task_args_1)) )) );
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, THIS->t, THIS->satisfied_section );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, THIS->satisfied_section );
    if (!!(THIS->satisfied_statements))
    {
      {
        RogueClassCmdStatementList* _auto_1051_7 = (THIS->satisfied_statements);
        RogueInteger _auto_1052_8 = (0);
        for (;_auto_1052_8 < _auto_1051_7->count;++_auto_1052_8)
        {
          RogueClassCmd* statement_9 = (((RogueClassCmd*)(_auto_1051_7->data->objects[_auto_1052_8])));
          RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM44( 5, (RogueClassCmd*)(statement_9), ((RogueClassCloneArgs*)(task_args_1)) )) );
        }
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, THIS->t, end_section_2 );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, THIS->unsatisfied_section );
    if (!!(THIS->unsatisfied_statements))
    {
      {
        RogueClassCmdStatementList* _auto_1053_10 = (THIS->unsatisfied_statements);
        RogueInteger _auto_1054_11 = (0);
        for (;_auto_1054_11 < _auto_1053_10->count;++_auto_1054_11)
        {
          RogueClassCmd* statement_12 = (((RogueClassCmd*)(_auto_1053_10->data->objects[_auto_1054_11])));
          RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM44( 5, (RogueClassCmd*)(statement_12), ((RogueClassCloneArgs*)(task_args_1)) )) );
        }
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, THIS->t, end_section_2 );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, end_section_2 );
    if (end_section_2->ip < task_args_1->cmd_task_control->sections->count)
    {
      RogueTaskArgs__jump_to_new_section__Token( task_args_1, THIS->t );
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  else
  {
    RogueClassCmdContingent* result_3 = (((RogueCmdContingent__init__Token_CmdStatementList( ((RogueClassCmdContingent*)Rogue_program.type_CmdContingent->create_and_init_object()), THIS->t, ((RogueClassCmdStatementList*)(NULL)) ))));
    RogueCmdContingent__set_control_logic__CmdControlStructure( result_3, ((RogueClassCmdControlStructure*)(THIS)) );
    THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_3));
    result_3->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 )));
    result_3->satisfied_statements = ((RogueCmd__clone__CmdStatementList_CloneArgs( ((RogueClassCmd*)THIS), THIS->satisfied_statements, clone_args_0 )));
    result_3->unsatisfied_statements = ((RogueCmd__clone__CmdStatementList_CloneArgs( ((RogueClassCmd*)THIS), THIS->unsatisfied_statements, clone_args_0 )));
    return (RogueClassCmd*)(((RogueClassCmd*)(result_3)));
  }
}

RogueClassCmdContingent* RogueCmdContingent__resolve__Scope( RogueClassCmdContingent* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  if (!(!!(THIS->escape_label)))
  {
    THIS->escape_label = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
  }
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  if (!!(THIS->satisfied_statements))
  {
    RogueCmdStatementList__resolve__Scope( THIS->satisfied_statements, scope_0 );
  }
  if (!!(THIS->unsatisfied_statements))
  {
    RogueCmdStatementList__resolve__Scope( THIS->unsatisfied_statements, scope_0 );
  }
  RogueCmdControlStructureList__remove_last( scope_0->control_stack );
  return (RogueClassCmdContingent*)(THIS);
}

void RogueCmdContingent__trace_used_code( RogueClassCmdContingent* THIS )
{
  RogueCmdStatementList__trace_used_code( THIS->statements );
  if (!!(THIS->satisfied_statements))
  {
    RogueCmdStatementList__trace_used_code( THIS->satisfied_statements );
  }
  if (!!(THIS->unsatisfied_statements))
  {
    RogueCmdStatementList__trace_used_code( THIS->unsatisfied_statements );
  }
}

void RogueCmdContingent__write_cpp__CPPWriter_Logical( RogueClassCmdContingent* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
  writer_0->indent += 2;
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, false );
  if (!!(THIS->satisfied_label))
  {
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, THIS->satisfied_label ))), Rogue_program.literal_strings[770] );
  }
  if (!!(THIS->satisfied_statements))
  {
    RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->satisfied_statements, writer_0, false );
  }
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[781] ))), THIS->escape_label ))), Rogue_program.literal_strings[184] );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
  if (!!(THIS->unsatisfied_label))
  {
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, THIS->unsatisfied_label ))), Rogue_program.literal_strings[770] );
  }
  if (!!(THIS->unsatisfied_statements))
  {
    RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->unsatisfied_statements, writer_0, false );
  }
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, THIS->escape_label ))), Rogue_program.literal_strings[770] );
}

RogueClassCmdContingent* RogueCmdContingent__init_object( RogueClassCmdContingent* THIS )
{
  return (RogueClassCmdContingent*)(THIS);
}

RogueClassCmd* RogueCmdContingent__set_control_logic__CmdControlStructure( RogueClassCmdContingent* THIS, RogueClassCmdControlStructure* original_0 )
{
  RogueCmdControlStructure__set_control_logic__CmdControlStructure( ((RogueClassCmdControlStructure*)THIS), original_0 );
  THIS->satisfied_label = ((RogueClassCmdContingent*)(RogueObject::as(original_0,Rogue_program.type_CmdContingent)))->satisfied_label;
  THIS->unsatisfied_label = ((RogueClassCmdContingent*)(RogueObject::as(original_0,Rogue_program.type_CmdContingent)))->unsatisfied_label;
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmdContingent* RogueCmdContingent__init__Token_CmdStatementList( RogueClassCmdContingent* THIS, RogueClassToken* _auto_627_0, RogueClassCmdStatementList* _auto_628_1 )
{
  THIS->statements = _auto_628_1;
  THIS->t = _auto_627_0;
  THIS->_control_type = 1;
  return (RogueClassCmdContingent*)(THIS);
}

RogueString* RogueCmdTry__type_name( RogueClassCmdTry* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[842]);
}

RogueClassCmdTry* RogueCmdTry__clone__CloneArgs( RogueClassCmdTry* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdTry* result_1 = (((RogueCmdTry__init__Token_CmdStatementList_CmdCatchList( ((RogueClassCmdTry*)Rogue_program.type_CmdTry->create_and_init_object()), THIS->t, ((RogueClassCmdStatementList*)(NULL)), ((RogueCmdCatchList*)(NULL)) ))));
  call_ROGUEM171( 31, (RogueClassCmdControlStructure*)(result_1), ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_1));
  result_1->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 )));
  RogueCmdCatchList* new_catches_2 = (((RogueCmdCatchList__init( ((RogueCmdCatchList*)Rogue_program.type_CmdCatchList->create_and_init_object()) ))));
  {
    RogueCmdCatchList* _auto_1055_3 = (THIS->catches);
    RogueInteger _auto_1056_4 = (0);
    for (;_auto_1056_4 < _auto_1055_3->count;++_auto_1056_4)
    {
      RogueClassCmdCatch* c_5 = (((RogueClassCmdCatch*)(_auto_1055_3->data->objects[_auto_1056_4])));
      RogueCmdCatchList__add__CmdCatch( new_catches_2, ((RogueCmdCatch__clone__CloneArgs( c_5, clone_args_0 ))) );
    }
  }
  result_1->catches = new_catches_2;
  return (RogueClassCmdTry*)(result_1);
}

RogueClassCmd* RogueCmdTry__resolve__Scope( RogueClassCmdTry* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  {
    RogueCmdCatchList* _auto_1057_1 = (THIS->catches);
    RogueInteger _auto_1058_2 = (0);
    for (;_auto_1058_2 < _auto_1057_1->count;++_auto_1058_2)
    {
      RogueClassCmdCatch* c_3 = (((RogueClassCmdCatch*)(_auto_1057_1->data->objects[_auto_1058_2])));
      RogueCmdCatch__resolve__Scope( c_3, scope_0 );
    }
  }
  if (THIS->contains_yield)
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[710] )));
  }
  RogueCmdControlStructureList__remove_last( scope_0->control_stack );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdTry__trace_used_code( RogueClassCmdTry* THIS )
{
  RogueCmdStatementList__trace_used_code( THIS->statements );
  {
    RogueCmdCatchList* _auto_1059_0 = (THIS->catches);
    RogueInteger _auto_1060_1 = (0);
    for (;_auto_1060_1 < _auto_1059_0->count;++_auto_1060_1)
    {
      RogueClassCmdCatch* c_2 = (((RogueClassCmdCatch*)(_auto_1059_0->data->objects[_auto_1060_1])));
      RogueCmdCatch__trace_used_code( c_2 );
    }
  }
}

void RogueCmdTry__write_cpp__CPPWriter_Logical( RogueClassCmdTry* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[131] );
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, false );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
  {
    RogueCmdCatchList* _auto_1061_2 = (THIS->catches);
    RogueInteger _auto_1062_3 = (0);
    for (;_auto_1062_3 < _auto_1061_2->count;++_auto_1062_3)
    {
      RogueClassCmdCatch* c_4 = (((RogueClassCmdCatch*)(_auto_1061_2->data->objects[_auto_1062_3])));
      RogueCmdCatch__write_cpp__CPPWriter_Logical( c_4, writer_0, false );
    }
  }
  if (!!(THIS->escape_label))
  {
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, THIS->escape_label ))), Rogue_program.literal_strings[770] );
  }
}

RogueClassCmdTry* RogueCmdTry__init_object( RogueClassCmdTry* THIS )
{
  return (RogueClassCmdTry*)(THIS);
}

RogueClassCmdTry* RogueCmdTry__init__Token_CmdStatementList_CmdCatchList( RogueClassCmdTry* THIS, RogueClassToken* _auto_629_0, RogueClassCmdStatementList* _auto_630_1, RogueCmdCatchList* _auto_631_2 )
{
  THIS->catches = _auto_631_2;
  THIS->statements = _auto_630_1;
  THIS->t = _auto_629_0;
  THIS->_control_type = 4;
  return (RogueClassCmdTry*)(THIS);
}

RogueClassCmdCatch* RogueCmdTry__add_catch__Token( RogueClassCmdTry* THIS, RogueClassToken* catch_t_0 )
{
  RogueClassCmdCatch* c_1 = (((RogueCmdCatch__init__Token_Local_CmdStatementList( ((RogueClassCmdCatch*)Rogue_program.type_CmdCatch->create_and_init_object()), catch_t_0, ((RogueClassLocal*)(NULL)), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) ))) ))));
  RogueCmdCatchList__add__CmdCatch( THIS->catches, c_1 );
  return (RogueClassCmdCatch*)(c_1);
}

RogueString* RogueCmdAwait__type_name( RogueClassCmdAwait* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[649]);
}

RogueClassCmd* RogueCmdAwait__clone__CloneArgs( RogueClassCmdAwait* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_TaskArgs))));
  if (!!(task_args_1))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[674] )));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAwait__init__Token_Cmd_CmdStatementList_Local( ((RogueClassCmdAwait*)Rogue_program.type_CmdAwait->create_and_init_object()), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->expression), ((RogueClassCloneArgs*)(task_args_1)) )), ((RogueCmdStatementList__clone__CloneArgs( THIS->statement_list, ((RogueClassCloneArgs*)(task_args_1)) ))), THIS->result_var ))))));
  }
}

RogueClassCmd* RogueCmdAwait__resolve__Scope( RogueClassCmdAwait* THIS, RogueClassScope* scope_0 )
{
  if (!(((RogueMethod__is_task_conversion( scope_0->this_method )))))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[711] )));
  }
  THIS->expression = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->expression), scope_0 ));
  RogueClassType* task_type_1 = (((Rogue_Cmd__require_type( THIS->expression ))));
  RogueClassProperty* p_result_2 = (((RogueType__find_property__String( task_type_1, Rogue_program.literal_strings[357] ))));
  if (!!(THIS->result_var))
  {
    if (!!(p_result_2))
    {
      THIS->result_var->_type = p_result_2->_type;
    }
    else
    {
      throw ((RogueToken__error__String( THIS->expression->t, Rogue_program.literal_strings[712] )));
    }
  }
  RogueClassLocal* task_var_3 = (((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
  task_var_3->initial_value = THIS->expression;
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->statement_list), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local( ((RogueClassCmdLocalDeclaration*)Rogue_program.type_CmdLocalDeclaration->create_and_init_object()), THIS->t, task_var_3 ))))) );
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->statement_list), ((RogueClassCmd*)(((RogueCmdGenericLoop__init__Token_Integer_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)Rogue_program.type_CmdGenericLoop->create_and_init_object()), THIS->t, 8, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), THIS->t, task_var_3 ))))), Rogue_program.literal_strings[353] ))))), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) ))), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))))) );
  if (!!(THIS->result_var))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->statement_list), ((RogueClassCmd*)(((RogueCmdWriteLocal__init__Token_Local_Cmd( ((RogueClassCmdWriteLocal*)Rogue_program.type_CmdWriteLocal->create_and_init_object()), THIS->t, THIS->result_var, ((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)Rogue_program.type_CmdReadProperty->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), THIS->t, task_var_3 ))))), p_result_2 ))))) ))))) );
  }
  RogueCmdStatementList__resolve__Scope( THIS->statement_list, scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBlock__resolve__Scope( ((RogueCmdBlock__init__Token_CmdStatementList_Integer( ((RogueClassCmdBlock*)Rogue_program.type_CmdBlock->create_and_init_object()), THIS->t, THIS->statement_list, 0 ))), scope_0 ))))));
}

RogueClassCmdAwait* RogueCmdAwait__init_object( RogueClassCmdAwait* THIS )
{
  return (RogueClassCmdAwait*)(THIS);
}

RogueClassCmdAwait* RogueCmdAwait__init__Token_Cmd_CmdStatementList_Local( RogueClassCmdAwait* THIS, RogueClassToken* _auto_632_0, RogueClassCmd* _auto_633_1, RogueClassCmdStatementList* _auto_634_2, RogueClassLocal* _auto_635_3 )
{
  THIS->result_var = _auto_635_3;
  THIS->statement_list = _auto_634_2;
  THIS->expression = _auto_633_1;
  THIS->t = _auto_632_0;
  return (RogueClassCmdAwait*)(THIS);
}

RogueString* RogueCmdYield__type_name( RogueClassCmdYield* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[650]);
}

RogueClassCmd* RogueCmdYield__clone__CloneArgs( RogueClassCmdYield* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_TaskArgs))));
  if (!!(task_args_1))
  {
    RogueTaskArgs__add_yield__Token( task_args_1, THIS->t );
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdYield__init__Token( ((RogueClassCmdYield*)Rogue_program.type_CmdYield->create_and_init_object()), THIS->t ))))));
  }
}

RogueClassCmd* RogueCmdYield__resolve__Scope( RogueClassCmdYield* THIS, RogueClassScope* scope_0 )
{
  if (!(((RogueMethod__is_task_conversion( scope_0->this_method )))))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[713] )));
  }
  {
    RogueCmdControlStructureList* _auto_1063_1 = (scope_0->control_stack);
    RogueInteger _auto_1064_2 = (0);
    for (;_auto_1064_2 < _auto_1063_1->count;++_auto_1064_2)
    {
      RogueClassCmdControlStructure* control_structure_3 = (((RogueClassCmdControlStructure*)(_auto_1063_1->data->objects[_auto_1064_2])));
      control_structure_3->contains_yield = true;
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmdYield* RogueCmdYield__init_object( RogueClassCmdYield* THIS )
{
  return (RogueClassCmdYield*)(THIS);
}

RogueClassCmdYield* RogueCmdYield__init__Token( RogueClassCmdYield* THIS, RogueClassToken* _auto_636_0 )
{
  THIS->t = _auto_636_0;
  return (RogueClassCmdYield*)(THIS);
}

RogueString* RogueCmdThrow__type_name( RogueClassCmdThrow* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[651]);
}

RogueClassCmdThrow* RogueCmdThrow__clone__CloneArgs( RogueClassCmdThrow* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdThrow*)(((RogueCmdThrow__init__Token_Cmd( ((RogueClassCmdThrow*)Rogue_program.type_CmdThrow->create_and_init_object()), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->expression), clone_args_0 )) ))));
}

RogueClassCmd* RogueCmdThrow__resolve__Scope( RogueClassCmdThrow* THIS, RogueClassScope* scope_0 )
{
  THIS->expression = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->expression), scope_0 ));
  RogueClassType* expression_type_1 = (((Rogue_Cmd__require_type( THIS->expression ))));
  RogueType__organize( expression_type_1 );
  if (!(((RogueType__instance_of__Type( expression_type_1, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Error )))))
  {
    throw ((RogueToken__error__String( THIS->expression->t, Rogue_program.literal_strings[714] )));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdThrow__trace_used_code( RogueClassCmdThrow* THIS )
{
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->expression) );
}

void RogueCmdThrow__write_cpp__CPPWriter_Logical( RogueClassCmdThrow* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[783] );
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->expression), writer_0, false );
}

RogueClassCmdThrow* RogueCmdThrow__init_object( RogueClassCmdThrow* THIS )
{
  return (RogueClassCmdThrow*)(THIS);
}

RogueClassCmdThrow* RogueCmdThrow__init__Token_Cmd( RogueClassCmdThrow* THIS, RogueClassToken* _auto_637_0, RogueClassCmd* _auto_638_1 )
{
  THIS->expression = _auto_638_1;
  THIS->t = _auto_637_0;
  return (RogueClassCmdThrow*)(THIS);
}

RogueString* RogueCmdTrace__type_name( RogueClassCmdTrace* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[652]);
}

RogueClassCmdTrace* RogueCmdTrace__clone__CloneArgs( RogueClassCmdTrace* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdTrace*)(((RogueCmdTrace__init__Token_String( ((RogueClassCmdTrace*)Rogue_program.type_CmdTrace->create_and_init_object()), THIS->t, THIS->value ))));
}

RogueClassCmd* RogueCmdTrace__resolve__Scope( RogueClassCmdTrace* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, Rogue_program.literal_strings[35] ))))), Rogue_program.literal_strings[715], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), ((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Integer( ((RogueClassCmdLiteralString*)Rogue_program.type_CmdLiteralString->create_and_init_object()), THIS->t, THIS->value, 0 ))))) ))) ))), scope_0 ))));
}

void RogueCmdTrace__trace_used_code( RogueClassCmdTrace* THIS )
{
}

RogueClassCmdTrace* RogueCmdTrace__init_object( RogueClassCmdTrace* THIS )
{
  return (RogueClassCmdTrace*)(THIS);
}

RogueClassCmdTrace* RogueCmdTrace__init__Token_String( RogueClassCmdTrace* THIS, RogueClassToken* _auto_639_0, RogueString* _auto_640_1 )
{
  THIS->value = _auto_640_1;
  THIS->t = _auto_639_0;
  return (RogueClassCmdTrace*)(THIS);
}

RogueString* RogueCmdEscape__type_name( RogueClassCmdEscape* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[653]);
}

RogueClassCmd* RogueCmdEscape__clone__CloneArgs( RogueClassCmdEscape* THIS, RogueClassCloneArgs* clone_args_0 )
{
  if (!!(THIS->target_cmd->task_escape_section))
  {
    RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_TaskArgs))));
    return (RogueClassCmd*)(((RogueTaskArgs__create_escape__Token_CmdTaskControlSection( task_args_1, THIS->t, THIS->target_cmd->task_escape_section ))));
  }
  else
  {
    RogueClassCmdControlStructure* new_target_2 = (THIS->target_cmd);
    while (!!(new_target_2->cloned_command))
    {
      new_target_2 = ((RogueClassCmdControlStructure*)new_target_2->cloned_command);
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdEscape__init__Token_Integer_CmdControlStructure( ((RogueClassCmdEscape*)Rogue_program.type_CmdEscape->create_and_init_object()), THIS->t, THIS->_control_type, new_target_2 ))))));
  }
}

RogueClassCmd* RogueCmdEscape__resolve__Scope( RogueClassCmdEscape* THIS, RogueClassScope* scope_0 )
{
  RogueInteger i_1 = (scope_0->control_stack->count);
  while (i_1 > 0)
  {
    --i_1;
    RogueClassCmdControlStructure* cmd_2 = (((RogueClassCmdControlStructure*)(scope_0->control_stack->data->objects[i_1])));
    if (cmd_2->_control_type == THIS->_control_type)
    {
      while (!!(cmd_2->cloned_command))
      {
        cmd_2 = ((RogueClassCmdControlStructure*)cmd_2->cloned_command);
      }
      if (!(!!(cmd_2->escape_label)))
      {
        cmd_2->escape_label = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
      }
      THIS->target_cmd = cmd_2;
      return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
    }
  }
  throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[716] )));
}

void RogueCmdEscape__trace_used_code( RogueClassCmdEscape* THIS )
{
}

void RogueCmdEscape__write_cpp__CPPWriter_Logical( RogueClassCmdEscape* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, ((RogueString__operatorPLUS__String( Rogue_program.literal_strings[781], THIS->target_cmd->escape_label ))) );
}

RogueClassCmdEscape* RogueCmdEscape__init_object( RogueClassCmdEscape* THIS )
{
  return (RogueClassCmdEscape*)(THIS);
}

RogueClassCmdEscape* RogueCmdEscape__init__Token_Integer_CmdControlStructure( RogueClassCmdEscape* THIS, RogueClassToken* _auto_641_0, RogueInteger _auto_642_1, RogueClassCmdControlStructure* _auto_643_2 )
{
  THIS->target_cmd = _auto_643_2;
  THIS->_control_type = _auto_642_1;
  THIS->t = _auto_641_0;
  return (RogueClassCmdEscape*)(THIS);
}

RogueString* RogueCmdNextIteration__type_name( RogueClassCmdNextIteration* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[654]);
}

RogueClassCmd* RogueCmdNextIteration__clone__CloneArgs( RogueClassCmdNextIteration* THIS, RogueClassCloneArgs* clone_args_0 )
{
  if (!!(THIS->target_cmd->task_upkeep_section))
  {
    RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_TaskArgs))));
    return (RogueClassCmd*)(((RogueTaskArgs__create_escape__Token_CmdTaskControlSection( task_args_1, THIS->t, THIS->target_cmd->task_upkeep_section ))));
  }
  else
  {
    RogueClassCmdControlStructure* new_target_2 = (THIS->target_cmd);
    while (!!(new_target_2->cloned_command))
    {
      new_target_2 = ((RogueClassCmdControlStructure*)new_target_2->cloned_command);
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdNextIteration__init__Token_CmdControlStructure( ((RogueClassCmdNextIteration*)Rogue_program.type_CmdNextIteration->create_and_init_object()), THIS->t, new_target_2 ))))));
  }
}

RogueClassCmd* RogueCmdNextIteration__resolve__Scope( RogueClassCmdNextIteration* THIS, RogueClassScope* scope_0 )
{
  RogueInteger i_1 = (scope_0->control_stack->count);
  while (i_1 > 0)
  {
    --i_1;
    RogueClassCmdControlStructure* cmd_2 = (((RogueClassCmdControlStructure*)(scope_0->control_stack->data->objects[i_1])));
    if (cmd_2->_control_type >= 6)
    {
      while (!!(cmd_2->cloned_command))
      {
        cmd_2 = ((RogueClassCmdControlStructure*)cmd_2->cloned_command);
      }
      if (!(!!(cmd_2->upkeep_label)))
      {
        cmd_2->upkeep_label = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
      }
      THIS->target_cmd = cmd_2;
      return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
    }
  }
  throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[717] )));
}

void RogueCmdNextIteration__trace_used_code( RogueClassCmdNextIteration* THIS )
{
}

void RogueCmdNextIteration__write_cpp__CPPWriter_Logical( RogueClassCmdNextIteration* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[784] );
}

RogueClassCmdNextIteration* RogueCmdNextIteration__init_object( RogueClassCmdNextIteration* THIS )
{
  return (RogueClassCmdNextIteration*)(THIS);
}

RogueClassCmdNextIteration* RogueCmdNextIteration__init__Token_CmdControlStructure( RogueClassCmdNextIteration* THIS, RogueClassToken* _auto_644_0, RogueClassCmdControlStructure* _auto_645_1 )
{
  THIS->target_cmd = _auto_645_1;
  THIS->t = _auto_644_0;
  return (RogueClassCmdNextIteration*)(THIS);
}

RogueString* RogueCmdNecessary__type_name( RogueClassCmdNecessary* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[655]);
}

RogueClassCmd* RogueCmdNecessary__clone__CloneArgs( RogueClassCmdNecessary* THIS, RogueClassCloneArgs* clone_args_0 )
{
  if (!!(THIS->target_cmd->unsatisfied_section))
  {
    RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_TaskArgs))));
    RogueClassCmd* cmd_jump_2 = (((RogueTaskArgs__create_escape__Token_CmdTaskControlSection( task_args_1, THIS->t, THIS->target_cmd->unsatisfied_section ))));
    if (!!(THIS->condition))
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdIf__init__Token_Cmd_CmdStatementList_Integer( ((RogueClassCmdIf*)Rogue_program.type_CmdIf->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)Rogue_program.type_CmdLogicalNot->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->condition), ((RogueClassCloneArgs*)(task_args_1)) )) ))))), ((RogueCmdStatementList__init__Cmd( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()), cmd_jump_2 ))), 2 ))))));
    }
    else
    {
      return (RogueClassCmd*)(cmd_jump_2);
    }
  }
  else
  {
    RogueClassCmdControlStructure* new_target_3 = (((RogueClassCmdControlStructure*)(THIS->target_cmd)));
    while (!!(new_target_3->cloned_command))
    {
      new_target_3 = ((RogueClassCmdControlStructure*)new_target_3->cloned_command);
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdNecessary__init__Token_Cmd_CmdContingent( ((RogueClassCmdNecessary*)Rogue_program.type_CmdNecessary->create_and_init_object()), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->condition, clone_args_0 ))), ((RogueClassCmdContingent*)(RogueObject::as(new_target_3,Rogue_program.type_CmdContingent))) ))))));
  }
}

RogueClassCmd* RogueCmdNecessary__resolve__Scope( RogueClassCmdNecessary* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->condition))
  {
    THIS->condition = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->condition), scope_0 ));
  }
  RogueInteger i_1 = (scope_0->control_stack->count);
  while (i_1 > 0)
  {
    --i_1;
    RogueClassCmdControlStructure* cmd_2 = (((RogueClassCmdControlStructure*)(scope_0->control_stack->data->objects[i_1])));
    if (cmd_2->_control_type == 1)
    {
      while (!!(cmd_2->cloned_command))
      {
        cmd_2 = ((RogueClassCmdControlStructure*)cmd_2->cloned_command);
      }
      RogueClassCmdContingent* cmd_contingent_3 = (((RogueClassCmdContingent*)(RogueObject::as(cmd_2,Rogue_program.type_CmdContingent))));
      if (!(!!(cmd_contingent_3->unsatisfied_label)))
      {
        cmd_contingent_3->unsatisfied_label = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
      }
      THIS->target_cmd = cmd_contingent_3;
      return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
    }
  }
  throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[718] )));
}

void RogueCmdNecessary__trace_used_code( RogueClassCmdNecessary* THIS )
{
  if (!!(THIS->condition))
  {
    call_ROGUEM48( 27, (RogueClassCmd*)(THIS->condition) );
  }
}

void RogueCmdNecessary__write_cpp__CPPWriter_Logical( RogueClassCmdNecessary* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[785] );
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->condition), writer_0, false );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[786] ))), THIS->target_cmd->unsatisfied_label );
}

RogueClassCmdNecessary* RogueCmdNecessary__init_object( RogueClassCmdNecessary* THIS )
{
  return (RogueClassCmdNecessary*)(THIS);
}

RogueClassCmdNecessary* RogueCmdNecessary__init__Token_Cmd_CmdContingent( RogueClassCmdNecessary* THIS, RogueClassToken* _auto_646_0, RogueClassCmd* _auto_647_1, RogueClassCmdContingent* _auto_648_2 )
{
  THIS->target_cmd = _auto_648_2;
  THIS->condition = _auto_647_1;
  THIS->t = _auto_646_0;
  return (RogueClassCmdNecessary*)(THIS);
}

RogueString* RogueCmdSufficient__type_name( RogueClassCmdSufficient* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[656]);
}

RogueClassCmd* RogueCmdSufficient__clone__CloneArgs( RogueClassCmdSufficient* THIS, RogueClassCloneArgs* clone_args_0 )
{
  if (!!(THIS->target_cmd->satisfied_section))
  {
    RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_TaskArgs))));
    RogueClassCmd* cmd_jump_2 = (((RogueTaskArgs__create_escape__Token_CmdTaskControlSection( task_args_1, THIS->t, THIS->target_cmd->satisfied_section ))));
    if (!!(THIS->condition))
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdIf__init__Token_Cmd_CmdStatementList_Integer( ((RogueClassCmdIf*)Rogue_program.type_CmdIf->create_and_init_object()), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->condition), ((RogueClassCloneArgs*)(task_args_1)) )), ((RogueCmdStatementList__init__Cmd( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()), cmd_jump_2 ))), 2 ))))));
    }
    else
    {
      return (RogueClassCmd*)(cmd_jump_2);
    }
  }
  else
  {
    RogueClassCmdControlStructure* new_target_3 = (((RogueClassCmdControlStructure*)(THIS->target_cmd)));
    while (!!(new_target_3->cloned_command))
    {
      new_target_3 = ((RogueClassCmdControlStructure*)new_target_3->cloned_command);
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdSufficient__init__Token_Cmd_CmdContingent( ((RogueClassCmdSufficient*)Rogue_program.type_CmdSufficient->create_and_init_object()), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->condition, clone_args_0 ))), ((RogueClassCmdContingent*)(RogueObject::as(new_target_3,Rogue_program.type_CmdContingent))) ))))));
  }
}

RogueClassCmd* RogueCmdSufficient__resolve__Scope( RogueClassCmdSufficient* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->condition))
  {
    THIS->condition = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->condition), scope_0 ));
  }
  RogueInteger i_1 = (scope_0->control_stack->count);
  while (i_1 > 0)
  {
    --i_1;
    RogueClassCmdControlStructure* cmd_2 = (((RogueClassCmdControlStructure*)(scope_0->control_stack->data->objects[i_1])));
    if (cmd_2->_control_type == 1)
    {
      while (!!(cmd_2->cloned_command))
      {
        cmd_2 = ((RogueClassCmdControlStructure*)cmd_2->cloned_command);
      }
      RogueClassCmdContingent* cmd_contingent_3 = (((RogueClassCmdContingent*)(RogueObject::as(cmd_2,Rogue_program.type_CmdContingent))));
      if (!(!!(cmd_contingent_3->satisfied_label)))
      {
        cmd_contingent_3->satisfied_label = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
      }
      THIS->target_cmd = cmd_contingent_3;
      return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
    }
  }
  throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[718] )));
}

void RogueCmdSufficient__trace_used_code( RogueClassCmdSufficient* THIS )
{
  if (!!(THIS->condition))
  {
    call_ROGUEM48( 27, (RogueClassCmd*)(THIS->condition) );
  }
}

void RogueCmdSufficient__write_cpp__CPPWriter_Logical( RogueClassCmdSufficient* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[779] );
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->condition), writer_0, false );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[787] ))), THIS->target_cmd->satisfied_label );
}

RogueClassCmdSufficient* RogueCmdSufficient__init_object( RogueClassCmdSufficient* THIS )
{
  return (RogueClassCmdSufficient*)(THIS);
}

RogueClassCmdSufficient* RogueCmdSufficient__init__Token_Cmd_CmdContingent( RogueClassCmdSufficient* THIS, RogueClassToken* _auto_649_0, RogueClassCmd* _auto_650_1, RogueClassCmdContingent* _auto_651_2 )
{
  THIS->target_cmd = _auto_651_2;
  THIS->condition = _auto_650_1;
  THIS->t = _auto_649_0;
  return (RogueClassCmdSufficient*)(THIS);
}

RogueString* RogueCmdAdjust__type_name( RogueClassCmdAdjust* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[657]);
}

RogueClassCmd* RogueCmdAdjust__resolve__Scope( RogueClassCmdAdjust* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->operand), scope_0 ));
  return (RogueClassCmd*)((call_ROGUEM50( 25, (RogueClassCmd*)(THIS->operand), scope_0, THIS->delta )));
}

RogueClassCmdAdjust* RogueCmdAdjust__init_object( RogueClassCmdAdjust* THIS )
{
  return (RogueClassCmdAdjust*)(THIS);
}

RogueClassCmdAdjust* RogueCmdAdjust__init__Token_Cmd_Integer( RogueClassCmdAdjust* THIS, RogueClassToken* _auto_652_0, RogueClassCmd* _auto_653_1, RogueInteger _auto_654_2 )
{
  THIS->delta = _auto_654_2;
  THIS->operand = _auto_653_1;
  THIS->t = _auto_652_0;
  return (RogueClassCmdAdjust*)(THIS);
}

RogueString* RogueCmdOpWithAssign__type_name( RogueClassCmdOpWithAssign* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[658]);
}

RogueClassCmd* RogueCmdOpWithAssign__clone__CloneArgs( RogueClassCmdOpWithAssign* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdOpWithAssign__init__Token_Cmd_TokenType_Cmd( ((RogueClassCmdOpWithAssign*)Rogue_program.type_CmdOpWithAssign->create_and_init_object()), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->target), clone_args_0 )), THIS->op, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdOpWithAssign__resolve__Scope( RogueClassCmdOpWithAssign* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)((call_ROGUEM51( 26, (RogueClassCmd*)(THIS->target), scope_0, THIS->op, THIS->new_value )));
}

RogueClassCmdOpWithAssign* RogueCmdOpWithAssign__init_object( RogueClassCmdOpWithAssign* THIS )
{
  return (RogueClassCmdOpWithAssign*)(THIS);
}

RogueClassCmdOpWithAssign* RogueCmdOpWithAssign__init__Token_Cmd_TokenType_Cmd( RogueClassCmdOpWithAssign* THIS, RogueClassToken* _auto_655_0, RogueClassCmd* _auto_656_1, RogueClassTokenType* _auto_657_2, RogueClassCmd* _auto_658_3 )
{
  THIS->new_value = _auto_658_3;
  THIS->op = _auto_657_2;
  THIS->target = _auto_656_1;
  THIS->t = _auto_655_0;
  return (RogueClassCmdOpWithAssign*)(THIS);
}

RogueString* RogueCmdWhichCaseList__to_String( RogueCmdWhichCaseList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueCmdWhichCaseList* _auto_1065_2 = (THIS);
    RogueInteger _auto_1066_3 = (0);
    for (;_auto_1066_3 < _auto_1065_2->count;++_auto_1066_3)
    {
      RogueClassCmdWhichCase* value_4 = (((RogueClassCmdWhichCase*)(_auto_1065_2->data->objects[_auto_1066_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueCmdWhichCaseList__type_name( RogueCmdWhichCaseList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[938]);
}

RogueCmdWhichCaseList* RogueCmdWhichCaseList__init_object( RogueCmdWhichCaseList* THIS )
{
  return (RogueCmdWhichCaseList*)(THIS);
}

RogueCmdWhichCaseList* RogueCmdWhichCaseList__init( RogueCmdWhichCaseList* THIS )
{
  RogueCmdWhichCaseList__init__Integer( THIS, 10 );
  return (RogueCmdWhichCaseList*)(THIS);
}

RogueCmdWhichCaseList* RogueCmdWhichCaseList__init__Integer( RogueCmdWhichCaseList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassCmdWhichCase*), true );
  return (RogueCmdWhichCaseList*)(THIS);
}

RogueCmdWhichCaseList* RogueCmdWhichCaseList__add__CmdWhichCase( RogueCmdWhichCaseList* THIS, RogueClassCmdWhichCase* value_0 )
{
  ((RogueCmdWhichCaseList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdWhichCaseList*)(THIS);
}

RogueInteger RogueCmdWhichCaseList__capacity( RogueCmdWhichCaseList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueCmdWhichCaseList* RogueCmdWhichCaseList__reserve__Integer( RogueCmdWhichCaseList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassCmdWhichCase*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueCmdWhichCaseList__capacity( THIS ))) + ((RogueCmdWhichCaseList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassCmdWhichCase*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdWhichCaseList*)(THIS);
}

RogueString* RogueCmdWhichCase__type_name( RogueClassCmdWhichCase* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[659]);
}

RogueClassCmdWhichCase* RogueCmdWhichCase__clone__CloneArgs( RogueClassCmdWhichCase* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdWhichCase*)(((RogueCmdWhichCase__init__Token_CmdArgs_CmdStatementList( ((RogueClassCmdWhichCase*)Rogue_program.type_CmdWhichCase->create_and_init_object()), THIS->t, ((RogueCmdArgs__clone__CloneArgs( THIS->conditions, clone_args_0 ))), ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 ))) ))));
}

void RogueCmdWhichCase__trace_used_code( RogueClassCmdWhichCase* THIS )
{
  {
    RogueClassCmdArgs* _auto_1075_0 = (THIS->conditions);
    RogueInteger _auto_1076_1 = (0);
    for (;_auto_1076_1 < _auto_1075_0->count;++_auto_1076_1)
    {
      RogueClassCmd* condition_2 = (((RogueClassCmd*)(_auto_1075_0->data->objects[_auto_1076_1])));
      call_ROGUEM48( 27, (RogueClassCmd*)(condition_2) );
    }
  }
  RogueCmdStatementList__trace_used_code( THIS->statements );
}

RogueClassCmdWhichCase* RogueCmdWhichCase__init_object( RogueClassCmdWhichCase* THIS )
{
  return (RogueClassCmdWhichCase*)(THIS);
}

RogueClassCmdWhichCase* RogueCmdWhichCase__init__Token_CmdArgs_CmdStatementList( RogueClassCmdWhichCase* THIS, RogueClassToken* _auto_659_0, RogueClassCmdArgs* _auto_660_1, RogueClassCmdStatementList* _auto_661_2 )
{
  THIS->statements = _auto_661_2;
  THIS->conditions = _auto_660_1;
  THIS->t = _auto_659_0;
  return (RogueClassCmdWhichCase*)(THIS);
}

RogueClassCmd* RogueCmdWhichCase__as_conditional__String( RogueClassCmdWhichCase* THIS, RogueString* expression_var_name_0 )
{
  RogueClassCmd* cmd_1 = 0;
  {
    RogueClassCmdArgs* _auto_1077_2 = (THIS->conditions);
    RogueInteger _auto_1078_3 = (0);
    for (;_auto_1078_3 < _auto_1077_2->count;++_auto_1078_3)
    {
      RogueClassCmd* condition_4 = (((RogueClassCmd*)(_auto_1077_2->data->objects[_auto_1078_3])));
      if (!!(cmd_1))
      {
        cmd_1 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdLogicalOr*)Rogue_program.type_CmdLogicalOr->create_and_init_object())), THIS->t, cmd_1, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)Rogue_program.type_CmdCompareEQ->create_and_init_object())), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, expression_var_name_0 ))))), condition_4 ))))) ))))));
      }
      else
      {
        cmd_1 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)Rogue_program.type_CmdCompareEQ->create_and_init_object())), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, expression_var_name_0 ))))), condition_4 ))))));
      }
    }
  }
  return (RogueClassCmd*)(cmd_1);
}

RogueString* RogueCmdCatchList__to_String( RogueCmdCatchList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueCmdCatchList* _auto_1079_2 = (THIS);
    RogueInteger _auto_1080_3 = (0);
    for (;_auto_1080_3 < _auto_1079_2->count;++_auto_1080_3)
    {
      RogueClassCmdCatch* value_4 = (((RogueClassCmdCatch*)(_auto_1079_2->data->objects[_auto_1080_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueCmdCatchList__type_name( RogueCmdCatchList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[939]);
}

RogueCmdCatchList* RogueCmdCatchList__init_object( RogueCmdCatchList* THIS )
{
  return (RogueCmdCatchList*)(THIS);
}

RogueCmdCatchList* RogueCmdCatchList__init( RogueCmdCatchList* THIS )
{
  RogueCmdCatchList__init__Integer( THIS, 10 );
  return (RogueCmdCatchList*)(THIS);
}

RogueCmdCatchList* RogueCmdCatchList__init__Integer( RogueCmdCatchList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassCmdCatch*), true );
  return (RogueCmdCatchList*)(THIS);
}

RogueCmdCatchList* RogueCmdCatchList__add__CmdCatch( RogueCmdCatchList* THIS, RogueClassCmdCatch* value_0 )
{
  ((RogueCmdCatchList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdCatchList*)(THIS);
}

RogueInteger RogueCmdCatchList__capacity( RogueCmdCatchList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueCmdCatchList* RogueCmdCatchList__reserve__Integer( RogueCmdCatchList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassCmdCatch*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueCmdCatchList__capacity( THIS ))) + ((RogueCmdCatchList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassCmdCatch*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdCatchList*)(THIS);
}

RogueString* RogueCmdCatch__type_name( RogueClassCmdCatch* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[660]);
}

RogueClassCmdCatch* RogueCmdCatch__clone__CloneArgs( RogueClassCmdCatch* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdCatch*)(((RogueCmdCatch__init__Token_Local_CmdStatementList( ((RogueClassCmdCatch*)Rogue_program.type_CmdCatch->create_and_init_object()), THIS->t, THIS->error_var, ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 ))) ))));
}

RogueClassCmd* RogueCmdCatch__resolve__Scope( RogueClassCmdCatch* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->error_var->_type );
  if (!(((RogueType__instance_of__Type( THIS->error_var->_type, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Error )))))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[709] )));
  }
  RogueScope__push_local__Local_Logical( scope_0, THIS->error_var, true );
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  RogueScope__pop_local( scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdCatch__trace_used_code( RogueClassCmdCatch* THIS )
{
  RogueCmdStatementList__trace_used_code( THIS->statements );
}

void RogueCmdCatch__write_cpp__CPPWriter_Logical( RogueClassCmdCatch* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[782] ))), THIS->error_var->_type ))), Rogue_program.literal_strings[255] ))), ((RogueLocal__cpp_name( THIS->error_var ))) ))), Rogue_program.literal_strings[448] );
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, false );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
}

RogueClassCmdCatch* RogueCmdCatch__init_object( RogueClassCmdCatch* THIS )
{
  return (RogueClassCmdCatch*)(THIS);
}

RogueClassCmdCatch* RogueCmdCatch__init__Token_Local_CmdStatementList( RogueClassCmdCatch* THIS, RogueClassToken* _auto_663_0, RogueClassLocal* _auto_664_1, RogueClassCmdStatementList* _auto_665_2 )
{
  THIS->statements = _auto_665_2;
  THIS->error_var = _auto_664_1;
  THIS->t = _auto_663_0;
  return (RogueClassCmdCatch*)(THIS);
}

RogueString* RogueCmdLocalDeclaration__type_name( RogueClassCmdLocalDeclaration* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[829]);
}

RogueClassCmd* RogueCmdLocalDeclaration__clone__CloneArgs( RogueClassCmdLocalDeclaration* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_TaskArgs))));
  if (!!(task_args_1))
  {
    RogueClassCmd* new_value_2 = (THIS->local_info->initial_value);
    if (!!(new_value_2))
    {
      new_value_2 = ((RogueClassCmd*)(call_ROGUEM44( 5, (RogueClassCmd*)(new_value_2), clone_args_0 )));
    }
    return (RogueClassCmd*)(((RogueTaskArgs__replace_write_local__Token_Local_Cmd( task_args_1, THIS->t, THIS->local_info, new_value_2 ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local( ((RogueClassCmdLocalDeclaration*)Rogue_program.type_CmdLocalDeclaration->create_and_init_object()), THIS->t, THIS->local_info ))))));
  }
}

void RogueCmdLocalDeclaration__exit_scope__Scope( RogueClassCmdLocalDeclaration* THIS, RogueClassScope* scope_0 )
{
  RogueScope__pop_local( scope_0 );
}

RogueClassCmd* RogueCmdLocalDeclaration__resolve__Scope( RogueClassCmdLocalDeclaration* THIS, RogueClassScope* scope_0 )
{
  RogueScope__push_local__Local_Logical( scope_0, THIS->local_info, true );
  if (!!(THIS->local_info->initial_value))
  {
    THIS->local_info->initial_value = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->local_info->initial_value), scope_0 ));
    RogueClassType* initial_value_type_1 = (((Rogue_Cmd__require_type( THIS->local_info->initial_value ))));
    if (THIS->local_info->_type == NULL)
    {
      THIS->local_info->_type = initial_value_type_1;
    }
  }
  if (THIS->local_info->_type == NULL)
  {
    throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[720] ))), THIS->local_info->name ))), Rogue_program.literal_strings[721] ))), THIS->local_info->name ))), Rogue_program.literal_strings[722] ))) ))) )));
  }
  if (!!(THIS->local_info->initial_value))
  {
    THIS->local_info->initial_value = (call_ROGUEM42( 23, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->local_info->initial_value), THIS->local_info->_type ))), scope_0 ));
  }
  RogueType__organize( THIS->local_info->_type );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdLocalDeclaration__trace_used_code( RogueClassCmdLocalDeclaration* THIS )
{
  RogueType__trace_used_code( THIS->local_info->_type );
  if (!!(THIS->local_info->initial_value))
  {
    call_ROGUEM48( 27, (RogueClassCmd*)(THIS->local_info->initial_value) );
  }
}

void RogueCmdLocalDeclaration__write_cpp__CPPWriter_Logical( RogueClassCmdLocalDeclaration* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, THIS->local_info->_type ))), Rogue_program.literal_strings[255] ))), ((RogueLocal__cpp_name( THIS->local_info ))) ))), Rogue_program.literal_strings[777] );
  if (!!(THIS->local_info->initial_value))
  {
    RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[176] ))), (call_ROGUEM46( 28, (RogueClassCmd*)(THIS->local_info->initial_value) )), THIS->local_info->_type );
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->local_info->initial_value), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] );
  }
  else
  {
    RogueCPPWriter__print_default_value__Type( writer_0, THIS->local_info->_type );
  }
}

RogueClassCmdLocalDeclaration* RogueCmdLocalDeclaration__init_object( RogueClassCmdLocalDeclaration* THIS )
{
  return (RogueClassCmdLocalDeclaration*)(THIS);
}

RogueClassCmdLocalDeclaration* RogueCmdLocalDeclaration__init__Token_Local( RogueClassCmdLocalDeclaration* THIS, RogueClassToken* _auto_673_0, RogueClassLocal* _auto_674_1 )
{
  THIS->local_info = _auto_674_1;
  THIS->t = _auto_673_0;
  return (RogueClassCmdLocalDeclaration*)(THIS);
}

RogueString* RogueCmdAdjustLocal__type_name( RogueClassCmdAdjustLocal* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[661]);
}

RogueClassCmd* RogueCmdAdjustLocal__clone__CloneArgs( RogueClassCmdAdjustLocal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_TaskArgs))));
  if (!!(task_args_1))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAdjust__init__Token_Cmd_Integer( ((RogueClassCmdAdjust*)Rogue_program.type_CmdAdjust->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueTaskArgs__cmd_read_this__Token( task_args_1, THIS->t ))), ((RogueTaskArgs__convert_local_name__Local( task_args_1, THIS->local_info ))) ))))), THIS->delta ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Integer( ((RogueClassCmdAdjustLocal*)Rogue_program.type_CmdAdjustLocal->create_and_init_object()), THIS->t, THIS->local_info, THIS->delta ))))));
  }
}

RogueClassCmd* RogueCmdAdjustLocal__resolve__Scope( RogueClassCmdAdjustLocal* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdAdjustLocal__trace_used_code( RogueClassCmdAdjustLocal* THIS )
{
  RogueType__trace_used_code( THIS->local_info->_type );
}

RogueClassType* Rogue_CmdAdjustLocal__type( RogueClassCmdAdjustLocal* THIS )
{
  return (RogueClassType*)(THIS->local_info->_type);
}

void RogueCmdAdjustLocal__write_cpp__CPPWriter_Logical( RogueClassCmdAdjustLocal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (THIS->delta > 0)
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[182] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[4] );
  }
  RogueCPPWriter__print__String( writer_0, ((RogueLocal__cpp_name( THIS->local_info ))) );
}

RogueClassCmdAdjustLocal* RogueCmdAdjustLocal__init_object( RogueClassCmdAdjustLocal* THIS )
{
  return (RogueClassCmdAdjustLocal*)(THIS);
}

RogueClassCmdAdjustLocal* RogueCmdAdjustLocal__init__Token_Local_Integer( RogueClassCmdAdjustLocal* THIS, RogueClassToken* _auto_679_0, RogueClassLocal* _auto_680_1, RogueInteger _auto_681_2 )
{
  THIS->delta = _auto_681_2;
  THIS->local_info = _auto_680_1;
  THIS->t = _auto_679_0;
  return (RogueClassCmdAdjustLocal*)(THIS);
}

RogueString* RogueCmdReadLocal__type_name( RogueClassCmdReadLocal* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[662]);
}

RogueClassCmd* RogueCmdReadLocal__clone__CloneArgs( RogueClassCmdReadLocal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassMacroArgs* macro_args_1 = (((RogueClassMacroArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_MacroArgs))));
  if (!!(macro_args_1))
  {
    return (RogueClassCmd*)(((RogueMacroArgs__inline_read_local__CmdReadLocal( macro_args_1, THIS ))));
  }
  else
  {
    RogueClassTaskArgs* task_args_2 = (((RogueClassTaskArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_TaskArgs))));
    if (!!(task_args_2))
    {
      return (RogueClassCmd*)(((RogueTaskArgs__cmd_read__Token_Local( task_args_2, THIS->t, THIS->local_info ))));
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), THIS->t, THIS->local_info ))))));
}

RogueClassCmd* RogueCmdReadLocal__resolve__Scope( RogueClassCmdReadLocal* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->local_info->_type );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdReadLocal__resolve_modify__Scope_Integer( RogueClassCmdReadLocal* THIS, RogueClassScope* scope_0, RogueInteger delta_1 )
{
  return (RogueClassCmd*)(((RogueCmdAdjustLocal__resolve__Scope( ((RogueCmdAdjustLocal__init__Token_Local_Integer( ((RogueClassCmdAdjustLocal*)Rogue_program.type_CmdAdjustLocal->create_and_init_object()), THIS->t, THIS->local_info, delta_1 ))), scope_0 ))));
}

void RogueCmdReadLocal__trace_used_code( RogueClassCmdReadLocal* THIS )
{
  RogueType__trace_used_code( THIS->local_info->_type );
}

RogueClassType* Rogue_CmdReadLocal__type( RogueClassCmdReadLocal* THIS )
{
  return (RogueClassType*)(THIS->local_info->_type);
}

void RogueCmdReadLocal__write_cpp__CPPWriter_Logical( RogueClassCmdReadLocal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_open_cast__Type_Type( writer_0, ((Rogue_Type__compile_type( THIS->local_info->_type ))), THIS->local_info->_type );
  }
  RogueCPPWriter__print__String( writer_0, ((RogueLocal__cpp_name( THIS->local_info ))) );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_close_cast__Type_Type( writer_0, ((Rogue_Type__compile_type( THIS->local_info->_type ))), THIS->local_info->_type );
  }
}

RogueClassCmdReadLocal* RogueCmdReadLocal__init_object( RogueClassCmdReadLocal* THIS )
{
  return (RogueClassCmdReadLocal*)(THIS);
}

RogueClassCmdReadLocal* RogueCmdReadLocal__init__Token_Local( RogueClassCmdReadLocal* THIS, RogueClassToken* _auto_682_0, RogueClassLocal* _auto_683_1 )
{
  THIS->local_info = _auto_683_1;
  THIS->t = _auto_682_0;
  return (RogueClassCmdReadLocal*)(THIS);
}

RogueString* RogueCmdCompareLE__type_name( RogueClassCmdCompareLE* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[965]);
}

RogueClassCmd* RogueCmdCompareLE__clone__CloneArgs( RogueClassCmdCompareLE* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLE*)Rogue_program.type_CmdCompareLE->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdCompareLE__combine_literal_operands__Type( RogueClassCmdCompareLE* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), THIS->t, ((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralReal)))->value <= ((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralReal)))->value ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), THIS->t, ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralInteger)))->value <= ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralInteger)))->value ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareLE* RogueCmdCompareLE__init_object( RogueClassCmdCompareLE* THIS )
{
  return (RogueClassCmdCompareLE*)(THIS);
}

RogueString* RogueCmdCompareLE__symbol( RogueClassCmdCompareLE* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[170]);
}

RogueClassCmd* RogueCmdCompareLE__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareLE* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  RogueClassCmd* cmd_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[904], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[902], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM205( 23, (RogueClassCmdBinary*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareNE*)Rogue_program.type_CmdCompareNE->create_and_init_object())), THIS->t, cmd_4, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, 1 ))))) )))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[905], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)Rogue_program.type_CmdLogicalNot->create_and_init_object())), THIS->t, cmd_4 ))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->right, Rogue_program.literal_strings[906], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->right, Rogue_program.literal_strings[907], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)Rogue_program.type_CmdLogicalNot->create_and_init_object())), THIS->t, cmd_4 ))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[904], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), true, false ))));
}

RogueString* RogueCmdRange__type_name( RogueClassCmdRange* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[663]);
}

void RogueCmdRange__trace_used_code( RogueClassCmdRange* THIS )
{
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->first) );
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->last) );
  if (!!(THIS->step_size))
  {
    call_ROGUEM48( 27, (RogueClassCmd*)(THIS->step_size) );
  }
}

RogueClassCmdRange* RogueCmdRange__init_object( RogueClassCmdRange* THIS )
{
  return (RogueClassCmdRange*)(THIS);
}

RogueClassCmdRange* RogueCmdRange__init__Token_Cmd_Cmd_Cmd( RogueClassCmdRange* THIS, RogueClassToken* _auto_684_0, RogueClassCmd* _auto_685_1, RogueClassCmd* _auto_686_2, RogueClassCmd* _auto_687_3 )
{
  THIS->step_size = _auto_687_3;
  THIS->last = _auto_686_2;
  THIS->first = _auto_685_1;
  THIS->t = _auto_684_0;
  return (RogueClassCmdRange*)(THIS);
}

RogueString* RogueCmdLocalOpWithAssign__type_name( RogueClassCmdLocalOpWithAssign* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[895]);
}

RogueClassCmd* RogueCmdLocalOpWithAssign__clone__CloneArgs( RogueClassCmdLocalOpWithAssign* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_TaskArgs))));
  if (!!(task_args_1))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdOpWithAssign__init__Token_Cmd_TokenType_Cmd( ((RogueClassCmdOpWithAssign*)Rogue_program.type_CmdOpWithAssign->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)Rogue_program.type_CmdThisContext->create_and_init_object()), THIS->t, task_args_1->_task_type ))))), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), THIS->local_info->name ))), Rogue_program.literal_strings[352] ))), ((RogueInteger__to_String( THIS->local_info->index ))) ))) ))) ))))), THIS->op, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->new_value), ((RogueClassCloneArgs*)(task_args_1)) )) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLocalOpWithAssign__init__Token_Local_TokenType_Cmd( ((RogueClassCmdLocalOpWithAssign*)Rogue_program.type_CmdLocalOpWithAssign->create_and_init_object()), THIS->t, THIS->local_info, THIS->op, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
  }
}

RogueClassCmd* RogueCmdLocalOpWithAssign__resolve__Scope( RogueClassCmdLocalOpWithAssign* THIS, RogueClassScope* scope_0 )
{
  if (((RogueType__is_reference( THIS->local_info->_type ))))
  {
    RogueString* m_name_1 = (((RogueString__operatorPLUS__String( Rogue_program.literal_strings[296], ((RogueTokenType__to_String( THIS->op ))) ))));
    if (!!(((RogueString_MethodListTable__get__String( THIS->local_info->_type->method_lookup_by_name, m_name_1 )))))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_Cmd( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), THIS->t, THIS->local_info ))))), m_name_1, THIS->new_value ))), scope_0 ))));
    }
    else
    {
      m_name_1 = ((RogueString*)((RogueString__leftmost__Integer( m_name_1, -1 ))));
      if (!!(((RogueString_MethodListTable__get__String( THIS->local_info->_type->method_lookup_by_name, m_name_1 )))))
      {
        return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ((RogueCmdWriteLocal__init__Token_Local_Cmd( ((RogueClassCmdWriteLocal*)Rogue_program.type_CmdWriteLocal->create_and_init_object()), THIS->t, THIS->local_info, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), THIS->t, THIS->local_info ))))), m_name_1, THIS->new_value ))))) ))), scope_0 ))));
      }
      else
      {
        RogueString* arg_type_2 = ((call_ROGUEM46( 28, (RogueClassCmd*)(THIS->new_value) ))->name);
        throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[723] ))), ((RogueType__to_String( THIS->local_info->_type ))) ))), Rogue_program.literal_strings[724] ))), m_name_1 ))), Rogue_program.literal_strings[725] ))), arg_type_2 ))), Rogue_program.literal_strings[726] ))), m_name_1 ))), Rogue_program.literal_strings[727] ))), arg_type_2 ))), Rogue_program.literal_strings[342] ))) ))) )));
      }
    }
  }
  {
    RogueClassTokenType* _auto_1089_4 = (THIS->op);
    if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_1089_4), ((RogueObject*)(RogueClassTokenType::symbol_caret_equals)) ))))
    {
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->target, Rogue_program.literal_strings[1] ))) == 0)
      {
        return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ((RogueCmdWriteLocal__init__Token_Local_Cmd( ((RogueClassCmdWriteLocal*)Rogue_program.type_CmdWriteLocal->create_and_init_object()), THIS->t, THIS->local_info, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdPower*)Rogue_program.type_CmdPower->create_and_init_object())), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), THIS->t, THIS->local_info ))))), THIS->new_value ))))) ))), scope_0 ))));
      }
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_1089_4), ((RogueObject*)(RogueClassTokenType::symbol_percent_equals)) ))))
    {
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->target, Rogue_program.literal_strings[1] ))) == 0)
      {
        return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ((RogueCmdWriteLocal__init__Token_Local_Cmd( ((RogueClassCmdWriteLocal*)Rogue_program.type_CmdWriteLocal->create_and_init_object()), THIS->t, THIS->local_info, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMod*)Rogue_program.type_CmdMod->create_and_init_object())), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), THIS->t, THIS->local_info ))))), THIS->new_value ))))) ))), scope_0 ))));
      }
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_1089_4), ((RogueObject*)(RogueClassTokenType::symbol_dot_equals)) ))))
    {
      RogueClassCmdAccess* access_3 = (((RogueClassCmdAccess*)(RogueObject::as(THIS->new_value,Rogue_program.type_CmdAccess))));
      if (!(!!(access_3)))
      {
        throw ((RogueToken__error__String( THIS->new_value->t, Rogue_program.literal_strings[728] )));
      }
      if (!!(access_3->context))
      {
        throw ((RogueToken__error__String( access_3->t, Rogue_program.literal_strings[729] )));
      }
      access_3->context = ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), THIS->t, THIS->local_info )))));
      return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ((RogueCmdWriteLocal__init__Token_Local_Cmd( ((RogueClassCmdWriteLocal*)Rogue_program.type_CmdWriteLocal->create_and_init_object()), THIS->t, THIS->local_info, ((RogueClassCmd*)(access_3)) ))), scope_0 ))));
    }
  }
  THIS->new_value = (call_ROGUEM42( 23, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)((call_ROGUEM42( 23, (RogueClassCmd*)(THIS->new_value), scope_0 ))), THIS->local_info->_type ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdLocalOpWithAssign__trace_used_code( RogueClassCmdLocalOpWithAssign* THIS )
{
  RogueType__trace_used_code( THIS->local_info->_type );
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->new_value) );
}

RogueClassType* Rogue_CmdLocalOpWithAssign__type( RogueClassCmdLocalOpWithAssign* THIS )
{
  return (RogueClassType*)(THIS->local_info->_type);
}

void RogueCmdLocalOpWithAssign__write_cpp__CPPWriter_Logical( RogueClassCmdLocalOpWithAssign* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, ((RogueLocal__cpp_name( THIS->local_info ))) ))), Rogue_program.literal_strings[255] ))), ((RogueCmdResolvedOpWithAssign__cpp_symbol( ((RogueClassCmdResolvedOpWithAssign*)THIS) ))) ))), Rogue_program.literal_strings[255] );
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->new_value), writer_0, false );
}

RogueClassCmdLocalOpWithAssign* RogueCmdLocalOpWithAssign__init_object( RogueClassCmdLocalOpWithAssign* THIS )
{
  return (RogueClassCmdLocalOpWithAssign*)(THIS);
}

RogueClassCmdLocalOpWithAssign* RogueCmdLocalOpWithAssign__init__Token_Local_TokenType_Cmd( RogueClassCmdLocalOpWithAssign* THIS, RogueClassToken* _auto_688_0, RogueClassLocal* _auto_689_1, RogueClassTokenType* _auto_690_2, RogueClassCmd* _auto_691_3 )
{
  THIS->new_value = _auto_691_3;
  THIS->op = _auto_690_2;
  THIS->local_info = _auto_689_1;
  THIS->t = _auto_688_0;
  return (RogueClassCmdLocalOpWithAssign*)(THIS);
}

RogueString* RogueCmdResolvedOpWithAssign__type_name( RogueClassCmdResolvedOpWithAssign* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[664]);
}

RogueClassCmdResolvedOpWithAssign* RogueCmdResolvedOpWithAssign__init_object( RogueClassCmdResolvedOpWithAssign* THIS )
{
  return (RogueClassCmdResolvedOpWithAssign*)(THIS);
}

RogueString* RogueCmdResolvedOpWithAssign__symbol( RogueClassCmdResolvedOpWithAssign* THIS )
{
  if (THIS->op == RogueClassTokenType::symbol_tilde_equals)
  {
    return (RogueString*)(Rogue_program.literal_strings[156]);
  }
  return (RogueString*)(((RogueTokenType__to_String( THIS->op ))));
}

RogueString* RogueCmdResolvedOpWithAssign__cpp_symbol( RogueClassCmdResolvedOpWithAssign* THIS )
{
  return (RogueString*)(((RogueCmdResolvedOpWithAssign__symbol( THIS ))));
}

RogueString* RogueCmdForEach__type_name( RogueClassCmdForEach* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[843]);
}

RogueClassCmd* RogueCmdForEach__clone__CloneArgs( RogueClassCmdForEach* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdForEach* result_1 = (((RogueCmdForEach__init__Token_String_String_Cmd_Cmd_CmdStatementList( ((RogueClassCmdForEach*)Rogue_program.type_CmdForEach->create_and_init_object()), THIS->t, THIS->control_var_name, THIS->index_var_name, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->collection), clone_args_0 )), ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->step_cmd, clone_args_0 ))), ((RogueClassCmdStatementList*)(NULL)) ))));
  call_ROGUEM171( 31, (RogueClassCmdControlStructure*)(result_1), ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_1));
  result_1->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 )));
  return (RogueClassCmd*)(((RogueClassCmd*)(result_1)));
}

RogueClassCmd* RogueCmdForEach__resolve__Scope( RogueClassCmdForEach* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->collection = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->collection), scope_0 ));
  RogueClassType* collection_type_1 = (((RogueType__organize( ((Rogue_Cmd__require_type( THIS->collection ))) ))));
  RogueLogical has_count_2 = ((!!(((RogueType__find_property__String( collection_type_1, Rogue_program.literal_strings[692] )))) || !!(((RogueType__find_method__String( collection_type_1, Rogue_program.literal_strings[730] ))))));
  RogueClassMethod* m_at_3 = (((RogueType__find_method__String( collection_type_1, Rogue_program.literal_strings[731] ))));
  RogueClassMethod* m_get_4 = (((RogueType__find_method__String( collection_type_1, Rogue_program.literal_strings[732] ))));
  RogueLogical has_get_5 = ((!!(m_get_4) || !!(m_at_3)));
  RogueInteger step_size_6 = (1);
  if (!!(THIS->step_cmd))
  {
    THIS->step_cmd = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->step_cmd), scope_0 ));
    RogueClassCmdLiteralInteger* literal_integer_cmd_7 = (((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->step_cmd,Rogue_program.type_CmdLiteralInteger))));
    if (!!(literal_integer_cmd_7))
    {
      step_size_6 = ((RogueInteger)literal_integer_cmd_7->value);
    }
    else
    {
      throw ((RogueToken__error__String( THIS->step_cmd->t, Rogue_program.literal_strings[733] )));
    }
  }
  if ((has_count_2 && has_get_5))
  {
    if (!!(m_at_3))
    {
      m_get_4 = ((RogueClassMethod*)m_at_3);
    }
    THIS->collection = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->collection), scope_0 ));
    RogueClassLocal* collection_var_8 = (((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((Rogue_Cmd__require_type( THIS->collection ))), THIS->collection ))));
    if (!(!!(THIS->index_var_name)))
    {
      THIS->index_var_name = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
    }
    RogueClassLocal* index_var_9 = (((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, THIS->index_var_name, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer, ((RogueClassCmd*)(NULL)) ))));
    RogueClassCmd* last_cmd_10 = 0;
    if (step_size_6 >= 0)
    {
      index_var_9->initial_value = ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, 0 )))));
      last_cmd_10 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), THIS->t, collection_var_8 ))))), Rogue_program.literal_strings[692] ))))));
    }
    else
    {
      index_var_9->initial_value = ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdSubtract*)Rogue_program.type_CmdSubtract->create_and_init_object())), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), THIS->t, collection_var_8 ))))), Rogue_program.literal_strings[692] ))))), ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, 1 ))))) )))));
      last_cmd_10 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, 0 ))))));
    }
    RogueClassLocal* control_var_11 = 0;
    if (!!(THIS->control_var_name))
    {
      control_var_11 = ((RogueClassLocal*)((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, THIS->control_var_name, ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
      control_var_11->initial_value = ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), THIS->t, collection_var_8 ))))), m_get_4->name, ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), THIS->t, index_var_9 ))))) ))) )))));
      RogueCmdList__insert__Cmd_Integer( ((RogueCmdList*)THIS->statements), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local( ((RogueClassCmdLocalDeclaration*)Rogue_program.type_CmdLocalDeclaration->create_and_init_object()), control_var_11->t, control_var_11 ))))), 0 );
    }
    RogueClassCmd* modifier_12 = 0;
    if ((step_size_6 >= -1 && step_size_6 <= 1))
    {
      modifier_12 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Integer( ((RogueClassCmdAdjustLocal*)Rogue_program.type_CmdAdjustLocal->create_and_init_object()), THIS->t, index_var_9, step_size_6 ))))));
    }
    else if (step_size_6 >= 0)
    {
      modifier_12 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdOpWithAssign__init__Token_Cmd_TokenType_Cmd( ((RogueClassCmdOpWithAssign*)Rogue_program.type_CmdOpWithAssign->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, index_var_9->name ))))), RogueClassTokenType::symbol_plus_equals, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, step_size_6 ))))) ))))));
    }
    else
    {
      modifier_12 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdOpWithAssign__init__Token_Cmd_TokenType_Cmd( ((RogueClassCmdOpWithAssign*)Rogue_program.type_CmdOpWithAssign->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, index_var_9->name ))))), RogueClassTokenType::symbol_minus_equals, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, (-(step_size_6)) ))))) ))))));
    }
    RogueClassCmd* condition_13 = 0;
    if (step_size_6 >= 0)
    {
      condition_13 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLT*)Rogue_program.type_CmdCompareLT->create_and_init_object())), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), THIS->t, index_var_9 ))))), last_cmd_10 ))))));
    }
    else
    {
      condition_13 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareGE*)Rogue_program.type_CmdCompareGE->create_and_init_object())), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), THIS->t, index_var_9 ))))), last_cmd_10 ))))));
    }
    RogueClassCmdGenericLoop* result_14 = (((RogueCmdGenericLoop__init__Token_Integer_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)Rogue_program.type_CmdGenericLoop->create_and_init_object()), THIS->t, 9, condition_13, THIS->statements, ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
    call_ROGUEM171( 31, (RogueClassCmdControlStructure*)(result_14), ((RogueClassCmdControlStructure*)(THIS)) );
    RogueCmdGenericLoop__add_control_var__Local( result_14, collection_var_8 );
    RogueCmdGenericLoop__add_control_var__Local( result_14, index_var_9 );
    RogueCmdGenericLoop__add_upkeep__Cmd( result_14, modifier_12 );
    RogueCmdControlStructureList__remove_last( scope_0->control_stack );
    return (RogueClassCmd*)(((RogueCmdGenericLoop__resolve__Scope( result_14, scope_0 ))));
  }
  else
  {
    RogueLogical has_another_15 = ((!!(((RogueType__find_property__String( collection_type_1, Rogue_program.literal_strings[734] )))) || !!(((RogueType__find_method__String( collection_type_1, Rogue_program.literal_strings[735] ))))));
    RogueClassMethod* m_read_16 = (((RogueType__find_method__String( collection_type_1, Rogue_program.literal_strings[736] ))));
    if ((!(has_another_15) || !(!!(m_read_16))))
    {
      throw ((RogueToken__error__String( THIS->collection->t, Rogue_program.literal_strings[737] )));
    }
    if (!(!!(m_read_16->_return_type)))
    {
      throw ((RogueToken__error__String( THIS->collection->t, Rogue_program.literal_strings[738] )));
    }
    if (!!(THIS->step_cmd))
    {
      throw ((RogueToken__error__String( THIS->step_cmd->t, Rogue_program.literal_strings[739] )));
    }
    RogueClassLocal* reader_var_17 = (((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), collection_type_1, THIS->collection ))));
    RogueClassLocal* index_var_18 = 0;
    if (!!(THIS->index_var_name))
    {
      index_var_18 = ((RogueClassLocal*)((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, THIS->index_var_name, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, 0 ))))) ))));
    }
    if (!!(THIS->control_var_name))
    {
      RogueClassLocal* control_var_19 = (((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, THIS->control_var_name, m_read_16->_return_type, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->collection->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->collection->t, reader_var_17->name ))))), Rogue_program.literal_strings[740] ))))) ))));
      RogueCmdList__insert__Cmd_Integer( ((RogueCmdList*)THIS->statements), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local( ((RogueClassCmdLocalDeclaration*)Rogue_program.type_CmdLocalDeclaration->create_and_init_object()), THIS->collection->t, control_var_19 ))))), 0 );
    }
    else
    {
      RogueCmdList__insert__Cmd_Integer( ((RogueCmdList*)THIS->statements), ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->collection->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->collection->t, reader_var_17->name ))))), Rogue_program.literal_strings[740] ))))), 0 );
    }
    RogueClassToken* rt_20 = (reader_var_17->t);
    RogueClassCmdGenericLoop* cmd_loop_21 = (((RogueCmdGenericLoop__init__Token_Integer_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)Rogue_program.type_CmdGenericLoop->create_and_init_object()), THIS->t, 9, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), rt_20, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)Rogue_program.type_CmdReadLocal->create_and_init_object()), rt_20, reader_var_17 ))))), Rogue_program.literal_strings[734] ))))), THIS->statements, ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
    call_ROGUEM171( 31, (RogueClassCmdControlStructure*)(cmd_loop_21), ((RogueClassCmdControlStructure*)(THIS)) );
    RogueCmdGenericLoop__add_control_var__Local( cmd_loop_21, reader_var_17 );
    if (!!(index_var_18))
    {
      RogueCmdGenericLoop__add_control_var__Local( cmd_loop_21, index_var_18 );
      RogueCmdGenericLoop__add_upkeep__Cmd( cmd_loop_21, ((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Integer( ((RogueClassCmdAdjustLocal*)Rogue_program.type_CmdAdjustLocal->create_and_init_object()), THIS->t, index_var_18, 1 ))))) );
    }
    RogueCmdControlStructureList__remove_last( scope_0->control_stack );
    return (RogueClassCmd*)(((RogueCmdGenericLoop__resolve__Scope( cmd_loop_21, scope_0 ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdForEach__trace_used_code( RogueClassCmdForEach* THIS )
{
  RogueCmdStatementList__trace_used_code( THIS->statements );
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->collection) );
  if (!!(THIS->step_cmd))
  {
    call_ROGUEM48( 27, (RogueClassCmd*)(THIS->step_cmd) );
  }
}

RogueClassCmdForEach* RogueCmdForEach__init_object( RogueClassCmdForEach* THIS )
{
  return (RogueClassCmdForEach*)(THIS);
}

RogueClassCmdForEach* RogueCmdForEach__init__Token_String_String_Cmd_Cmd_CmdStatementList( RogueClassCmdForEach* THIS, RogueClassToken* _auto_692_0, RogueString* _auto_693_1, RogueString* _auto_694_2, RogueClassCmd* _auto_695_3, RogueClassCmd* _auto_696_4, RogueClassCmdStatementList* _auto_697_5 )
{
  THIS->statements = _auto_697_5;
  THIS->step_cmd = _auto_696_4;
  THIS->collection = _auto_695_3;
  THIS->index_var_name = _auto_694_2;
  THIS->control_var_name = _auto_693_1;
  THIS->t = _auto_692_0;
  THIS->_control_type = 9;
  return (RogueClassCmdForEach*)(THIS);
}

RogueString* RogueCmdRangeUpTo__type_name( RogueClassCmdRangeUpTo* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[894]);
}

RogueClassCmd* RogueCmdRangeUpTo__clone__CloneArgs( RogueClassCmdRangeUpTo* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdRange__init__Token_Cmd_Cmd_Cmd( ((RogueClassCmdRange*)((RogueClassCmdRangeUpTo*)Rogue_program.type_CmdRangeUpTo->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->first), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->last), clone_args_0 )), ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->step_size, clone_args_0 ))) ))))));
}

RogueClassCmdRangeUpTo* RogueCmdRangeUpTo__init_object( RogueClassCmdRangeUpTo* THIS )
{
  return (RogueClassCmdRangeUpTo*)(THIS);
}

RogueString* RogueCmdLogicalXor__type_name( RogueClassCmdLogicalXor* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[898]);
}

RogueClassCmd* RogueCmdLogicalXor__clone__CloneArgs( RogueClassCmdLogicalXor* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdLogicalXor*)Rogue_program.type_CmdLogicalXor->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmdLogicalXor* RogueCmdLogicalXor__init_object( RogueClassCmdLogicalXor* THIS )
{
  return (RogueClassCmdLogicalXor*)(THIS);
}

RogueString* RogueCmdLogicalXor__symbol( RogueClassCmdLogicalXor* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[149]);
}

RogueString* RogueCmdLogicalXor__cpp_symbol( RogueClassCmdLogicalXor* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[155]);
}

RogueLogical RogueCmdLogicalXor__combine_literal_operands__Logical_Logical( RogueClassCmdLogicalXor* THIS, RogueLogical a_0, RogueLogical b_1 )
{
  return (RogueLogical)((a_0 ^ b_1));
}

RogueString* RogueCmdBinaryLogical__type_name( RogueClassCmdBinaryLogical* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[856]);
}

RogueClassCmd* RogueCmdBinaryLogical__resolve__Scope( RogueClassCmdBinaryLogical* THIS, RogueClassScope* scope_0 )
{
  THIS->left = ((RogueCmd__require_logical__Scope( (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->left), scope_0 )), scope_0 )));
  THIS->right = ((RogueCmd__require_logical__Scope( (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->right), scope_0 )), scope_0 )));
  if (((call_ROGUEM47( 16, (RogueClassCmd*)(THIS->left) )) && (call_ROGUEM47( 16, (RogueClassCmd*)(THIS->right) ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), THIS->t, (call_ROGUEM476( 39, (RogueClassCmdBinaryLogical*)(THIS), ((RogueClassCmdLiteralLogical*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralLogical)))->value, ((RogueClassCmdLiteralLogical*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralLogical)))->value )) ))))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdBinaryLogical__type( RogueClassCmdBinaryLogical* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

RogueClassCmdBinaryLogical* RogueCmdBinaryLogical__init_object( RogueClassCmdBinaryLogical* THIS )
{
  return (RogueClassCmdBinaryLogical*)(THIS);
}

RogueClassCmd* RogueCmdBinaryLogical__resolve_operator_method__Scope_Type_Type( RogueClassCmdBinaryLogical* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
}

RogueLogical RogueCmdBinaryLogical__combine_literal_operands__Logical_Logical( RogueClassCmdBinaryLogical* THIS, RogueLogical a_0, RogueLogical b_1 )
{
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[287] ))), (call_ROGUEM474( 2, (RogueClassCmdBinaryLogical*)(THIS) )) ))), Rogue_program.literal_strings[857] ))) ))) )));
}

RogueString* RogueCmdLogicalOr__type_name( RogueClassCmdLogicalOr* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[899]);
}

RogueClassCmd* RogueCmdLogicalOr__clone__CloneArgs( RogueClassCmdLogicalOr* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdLogicalOr*)Rogue_program.type_CmdLogicalOr->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmdLogicalOr* RogueCmdLogicalOr__init_object( RogueClassCmdLogicalOr* THIS )
{
  return (RogueClassCmdLogicalOr*)(THIS);
}

RogueString* RogueCmdLogicalOr__symbol( RogueClassCmdLogicalOr* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[144]);
}

RogueString* RogueCmdLogicalOr__cpp_symbol( RogueClassCmdLogicalOr* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[197]);
}

RogueLogical RogueCmdLogicalOr__combine_literal_operands__Logical_Logical( RogueClassCmdLogicalOr* THIS, RogueLogical a_0, RogueLogical b_1 )
{
  return (RogueLogical)((a_0 || b_1));
}

RogueString* RogueCmdLogicalAnd__type_name( RogueClassCmdLogicalAnd* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[900]);
}

RogueClassCmd* RogueCmdLogicalAnd__clone__CloneArgs( RogueClassCmdLogicalAnd* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdLogicalAnd*)Rogue_program.type_CmdLogicalAnd->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmdLogicalAnd* RogueCmdLogicalAnd__init_object( RogueClassCmdLogicalAnd* THIS )
{
  return (RogueClassCmdLogicalAnd*)(THIS);
}

RogueString* RogueCmdLogicalAnd__symbol( RogueClassCmdLogicalAnd* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[137]);
}

RogueString* RogueCmdLogicalAnd__cpp_symbol( RogueClassCmdLogicalAnd* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[870]);
}

RogueLogical RogueCmdLogicalAnd__combine_literal_operands__Logical_Logical( RogueClassCmdLogicalAnd* THIS, RogueLogical a_0, RogueLogical b_1 )
{
  return (RogueLogical)((a_0 && b_1));
}

RogueString* RogueCmdCompareEQ__type_name( RogueClassCmdCompareEQ* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[966]);
}

RogueClassCmd* RogueCmdCompareEQ__clone__CloneArgs( RogueClassCmdCompareEQ* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)Rogue_program.type_CmdCompareEQ->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdCompareEQ__combine_literal_operands__Type( RogueClassCmdCompareEQ* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), THIS->t, ((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralReal)))->value == ((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralReal)))->value ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), THIS->t, ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralInteger)))->value == ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralInteger)))->value ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareEQ* RogueCmdCompareEQ__init_object( RogueClassCmdCompareEQ* THIS )
{
  return (RogueClassCmdCompareEQ*)(THIS);
}

RogueLogical RogueCmdCompareEQ__requires_parens( RogueClassCmdCompareEQ* THIS )
{
  return (RogueLogical)(false);
}

RogueString* RogueCmdCompareEQ__symbol( RogueClassCmdCompareEQ* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[164]);
}

RogueClassCmd* RogueCmdCompareEQ__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareEQ* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  RogueClassCmd* cmd_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[903], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[902], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM205( 23, (RogueClassCmdBinary*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)Rogue_program.type_CmdCompareEQ->create_and_init_object())), THIS->t, cmd_4, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, 0 ))))) )))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[901], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)Rogue_program.type_CmdLogicalNot->create_and_init_object())), THIS->t, cmd_4 ))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->right, Rogue_program.literal_strings[903], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->right, Rogue_program.literal_strings[901], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)Rogue_program.type_CmdLogicalNot->create_and_init_object())), THIS->t, cmd_4 ))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[903], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), true, false ))));
}

RogueString* RogueCmdCompareIs__type_name( RogueClassCmdCompareIs* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[967]);
}

RogueClassCmd* RogueCmdCompareIs__clone__CloneArgs( RogueClassCmdCompareIs* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareIs*)Rogue_program.type_CmdCompareIs->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmdCompareIs* RogueCmdCompareIs__init_object( RogueClassCmdCompareIs* THIS )
{
  return (RogueClassCmdCompareIs*)(THIS);
}

RogueClassCmd* RogueCmdCompareIs__resolve_for_types__Scope_Type_Type( RogueClassCmdCompareIs* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  if ((((RogueType__is_reference( left_type_1 ))) && ((RogueType__is_reference( right_type_2 )))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  else if ((((RogueType__is_primitive( left_type_1 ))) && ((RogueType__is_primitive( right_type_2 )))))
  {
    return (RogueClassCmd*)((call_ROGUEM205( 23, (RogueClassCmdBinary*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)Rogue_program.type_CmdCompareEQ->create_and_init_object())), THIS->t, THIS->left, THIS->right )))), scope_0 )));
  }
  else if ((((RogueType__is_compound( left_type_1 ))) && ((RogueType__is_compound( right_type_2 )))))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[891] )));
  }
  else
  {
    throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[892] ))), ((RogueType__to_String( left_type_1 ))) ))), Rogue_program.literal_strings[317] ))), ((RogueType__to_String( right_type_2 ))) ))), Rogue_program.literal_strings[47] ))) ))) )));
  }
}

RogueString* RogueCmdCompareIs__symbol( RogueClassCmdCompareIs* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[117]);
}

RogueString* RogueCmdCompareIs__cpp_symbol( RogueClassCmdCompareIs* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[164]);
}

RogueString* RogueCmdCompareIsNot__type_name( RogueClassCmdCompareIsNot* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[968]);
}

RogueClassCmd* RogueCmdCompareIsNot__clone__CloneArgs( RogueClassCmdCompareIsNot* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareIsNot*)Rogue_program.type_CmdCompareIsNot->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmdCompareIsNot* RogueCmdCompareIsNot__init_object( RogueClassCmdCompareIsNot* THIS )
{
  return (RogueClassCmdCompareIsNot*)(THIS);
}

RogueClassCmd* RogueCmdCompareIsNot__resolve_for_types__Scope_Type_Type( RogueClassCmdCompareIsNot* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  if ((((RogueType__is_reference( left_type_1 ))) && ((RogueType__is_reference( right_type_2 )))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  else if ((((RogueType__is_primitive( left_type_1 ))) && ((RogueType__is_primitive( right_type_2 )))))
  {
    return (RogueClassCmd*)((call_ROGUEM205( 23, (RogueClassCmdBinary*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)Rogue_program.type_CmdCompareEQ->create_and_init_object())), THIS->t, THIS->left, THIS->right )))), scope_0 )));
  }
  else if ((((RogueType__is_compound( left_type_1 ))) && ((RogueType__is_compound( right_type_2 )))))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[891] )));
  }
  else
  {
    throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[893] ))), ((RogueType__to_String( left_type_1 ))) ))), Rogue_program.literal_strings[317] ))), ((RogueType__to_String( right_type_2 ))) ))), Rogue_program.literal_strings[47] ))) ))) )));
  }
}

RogueString* RogueCmdCompareIsNot__symbol( RogueClassCmdCompareIsNot* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[118]);
}

RogueString* RogueCmdCompareIsNot__cpp_symbol( RogueClassCmdCompareIsNot* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[174]);
}

RogueString* RogueCmdCompareLT__type_name( RogueClassCmdCompareLT* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[969]);
}

RogueClassCmd* RogueCmdCompareLT__clone__CloneArgs( RogueClassCmdCompareLT* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLT*)Rogue_program.type_CmdCompareLT->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdCompareLT__combine_literal_operands__Type( RogueClassCmdCompareLT* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), THIS->t, ((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralReal)))->value < ((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralReal)))->value ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), THIS->t, ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralInteger)))->value < ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralInteger)))->value ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareLT* RogueCmdCompareLT__init_object( RogueClassCmdCompareLT* THIS )
{
  return (RogueClassCmdCompareLT*)(THIS);
}

RogueString* RogueCmdCompareLT__symbol( RogueClassCmdCompareLT* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[171]);
}

RogueClassCmd* RogueCmdCompareLT__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareLT* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  RogueClassCmd* cmd_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[907], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[902], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM205( 23, (RogueClassCmdBinary*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)Rogue_program.type_CmdCompareEQ->create_and_init_object())), THIS->t, cmd_4, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, -1 ))))) )))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[906], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)Rogue_program.type_CmdLogicalNot->create_and_init_object())), THIS->t, cmd_4 ))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->right, Rogue_program.literal_strings[905], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->right, Rogue_program.literal_strings[904], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)Rogue_program.type_CmdLogicalNot->create_and_init_object())), THIS->t, cmd_4 ))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[907], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), true, false ))));
}

RogueString* RogueCmdCompareGT__type_name( RogueClassCmdCompareGT* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[970]);
}

RogueClassCmd* RogueCmdCompareGT__clone__CloneArgs( RogueClassCmdCompareGT* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareGT*)Rogue_program.type_CmdCompareGT->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdCompareGT__combine_literal_operands__Type( RogueClassCmdCompareGT* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), THIS->t, ((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralReal)))->value > ((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralReal)))->value ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), THIS->t, ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralInteger)))->value > ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralInteger)))->value ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareGT* RogueCmdCompareGT__init_object( RogueClassCmdCompareGT* THIS )
{
  return (RogueClassCmdCompareGT*)(THIS);
}

RogueString* RogueCmdCompareGT__symbol( RogueClassCmdCompareGT* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[169]);
}

RogueClassCmd* RogueCmdCompareGT__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareGT* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  RogueClassCmd* cmd_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[905], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[902], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM205( 23, (RogueClassCmdBinary*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)Rogue_program.type_CmdCompareEQ->create_and_init_object())), THIS->t, cmd_4, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, 1 ))))) )))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[904], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)Rogue_program.type_CmdLogicalNot->create_and_init_object())), THIS->t, cmd_4 ))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->right, Rogue_program.literal_strings[907], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->right, Rogue_program.literal_strings[906], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)Rogue_program.type_CmdLogicalNot->create_and_init_object())), THIS->t, cmd_4 ))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[905], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), true, false ))));
}

RogueString* RogueCmdCompareGE__type_name( RogueClassCmdCompareGE* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[971]);
}

RogueClassCmd* RogueCmdCompareGE__clone__CloneArgs( RogueClassCmdCompareGE* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareGE*)Rogue_program.type_CmdCompareGE->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdCompareGE__combine_literal_operands__Type( RogueClassCmdCompareGE* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), THIS->t, ((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralReal)))->value >= ((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralReal)))->value ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), THIS->t, ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralInteger)))->value >= ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralInteger)))->value ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareGE* RogueCmdCompareGE__init_object( RogueClassCmdCompareGE* THIS )
{
  return (RogueClassCmdCompareGE*)(THIS);
}

RogueString* RogueCmdCompareGE__symbol( RogueClassCmdCompareGE* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[168]);
}

RogueClassCmd* RogueCmdCompareGE__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareGE* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  RogueClassCmd* cmd_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[906], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[902], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM205( 23, (RogueClassCmdBinary*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareNE*)Rogue_program.type_CmdCompareNE->create_and_init_object())), THIS->t, cmd_4, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, -1 ))))) )))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[907], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)Rogue_program.type_CmdLogicalNot->create_and_init_object())), THIS->t, cmd_4 ))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->right, Rogue_program.literal_strings[904], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->right, Rogue_program.literal_strings[905], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)Rogue_program.type_CmdLogicalNot->create_and_init_object())), THIS->t, cmd_4 ))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->left, Rogue_program.literal_strings[906], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->right ))) ))), true, false ))));
}

RogueString* RogueCmdInstanceOf__type_name( RogueClassCmdInstanceOf* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[882]);
}

RogueClassCmd* RogueCmdInstanceOf__clone__CloneArgs( RogueClassCmdInstanceOf* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdInstanceOf*)Rogue_program.type_CmdInstanceOf->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->operand), clone_args_0 )), THIS->_target_type ))))));
}

RogueClassCmd* RogueCmdInstanceOf__resolve__Scope( RogueClassCmdInstanceOf* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->operand), scope_0 ));
  RogueType__organize( THIS->_target_type );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdInstanceOf__type( RogueClassCmdInstanceOf* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

void RogueCmdInstanceOf__write_cpp__CPPWriter_Logical( RogueClassCmdInstanceOf* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[788] );
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->operand), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[16] );
  RogueCPPWriter__print_type_info__Type( writer_0, THIS->_target_type );
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] );
}

RogueClassCmdInstanceOf* RogueCmdInstanceOf__init_object( RogueClassCmdInstanceOf* THIS )
{
  return (RogueClassCmdInstanceOf*)(THIS);
}

RogueString* RogueCmdLogicalNot__type_name( RogueClassCmdLogicalNot* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[886]);
}

RogueClassCmd* RogueCmdLogicalNot__clone__CloneArgs( RogueClassCmdLogicalNot* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)Rogue_program.type_CmdLogicalNot->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->operand), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdLogicalNot__resolve__Scope( RogueClassCmdLogicalNot* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = ((RogueCmd__require_logical__Scope( (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->operand), scope_0 )), scope_0 )));
  if ((call_ROGUEM47( 16, (RogueClassCmd*)(THIS->operand) )))
  {
    return (RogueClassCmd*)(((RogueCmdLogicalNot__resolve_for_literal_operand__Scope( THIS, scope_0 ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueCmdUnary__resolve_for_operand_type__Scope_Type( ((RogueClassCmdUnary*)THIS), scope_0, ((Rogue_Cmd__require_type( THIS->operand ))) ))));
  }
}

RogueClassType* Rogue_CmdLogicalNot__type( RogueClassCmdLogicalNot* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

RogueClassCmdLogicalNot* RogueCmdLogicalNot__init_object( RogueClassCmdLogicalNot* THIS )
{
  return (RogueClassCmdLogicalNot*)(THIS);
}

RogueString* RogueCmdLogicalNot__prefix_symbol( RogueClassCmdLogicalNot* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[889]);
}

RogueClassCmd* RogueCmdLogicalNot__resolve_for_literal_operand__Scope( RogueClassCmdLogicalNot* THIS, RogueClassScope* scope_0 )
{
  if (RogueObject::instance_of(THIS->operand,Rogue_program.type_CmdLiteralReal))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), THIS->t, !(!!(((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->operand,Rogue_program.type_CmdLiteralReal)))->value)) ))))));
  }
  else if (RogueObject::instance_of(THIS->operand,Rogue_program.type_CmdLiteralInteger))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), THIS->t, !(!!(((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->operand,Rogue_program.type_CmdLiteralInteger)))->value)) ))))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdLogicalNot__cpp_prefix_symbol( RogueClassCmdLogicalNot* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[166]);
}

RogueString* RogueCmdBitwiseXor__type_name( RogueClassCmdBitwiseXor* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[908]);
}

RogueClassCmd* RogueCmdBitwiseXor__clone__CloneArgs( RogueClassCmdBitwiseXor* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseXor*)Rogue_program.type_CmdBitwiseXor->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdBitwiseXor__combine_literal_operands__Type( RogueClassCmdBitwiseXor* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, (((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralInteger)))->value ^ ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralInteger)))->value) ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), THIS->t, (((RogueClassCmdLiteralLogical*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralLogical)))->value ^ ((RogueClassCmdLiteralLogical*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralLogical)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdBitwiseXor* RogueCmdBitwiseXor__init_object( RogueClassCmdBitwiseXor* THIS )
{
  return (RogueClassCmdBitwiseXor*)(THIS);
}

RogueString* RogueCmdBitwiseXor__symbol( RogueClassCmdBitwiseXor* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[189]);
}

RogueString* RogueCmdBitwiseXor__cpp_symbol( RogueClassCmdBitwiseXor* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[155]);
}

RogueString* RogueCmdBitwiseOp__type_name( RogueClassCmdBitwiseOp* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[873]);
}

RogueClassCmdBitwiseOp* RogueCmdBitwiseOp__init_object( RogueClassCmdBitwiseOp* THIS )
{
  return (RogueClassCmdBitwiseOp*)(THIS);
}

RogueClassCmd* RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type( RogueClassCmdBitwiseOp* THIS, RogueClassScope* scope_0, RogueClassType* common_type_1 )
{
  if (((common_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte || common_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character) || common_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer))
  {
    THIS->left = (call_ROGUEM42( 23, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->left), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer ))), scope_0 ));
    THIS->right = (call_ROGUEM42( 23, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->right), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer ))), scope_0 ));
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  if (common_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Long)
  {
    THIS->left = (call_ROGUEM42( 23, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->left), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Long ))), scope_0 ));
    THIS->right = (call_ROGUEM42( 23, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->right), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Long ))), scope_0 ));
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[868] ))), (call_ROGUEM210( 37, (RogueClassCmdBinary*)(THIS) )) ))), Rogue_program.literal_strings[869] ))), ((RogueType__to_String( common_type_1 ))) ))), Rogue_program.literal_strings[47] ))) ))) )));
}

RogueClassCmd* RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type( RogueClassCmdBitwiseOp* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
}

RogueString* RogueCmdBitwiseOr__type_name( RogueClassCmdBitwiseOr* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[909]);
}

RogueClassCmd* RogueCmdBitwiseOr__clone__CloneArgs( RogueClassCmdBitwiseOr* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseOr*)Rogue_program.type_CmdBitwiseOr->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdBitwiseOr__combine_literal_operands__Type( RogueClassCmdBitwiseOr* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, (((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralInteger)))->value | ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralInteger)))->value) ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), THIS->t, (((RogueClassCmdLiteralLogical*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralLogical)))->value || ((RogueClassCmdLiteralLogical*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralLogical)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdBitwiseOr* RogueCmdBitwiseOr__init_object( RogueClassCmdBitwiseOr* THIS )
{
  return (RogueClassCmdBitwiseOr*)(THIS);
}

RogueString* RogueCmdBitwiseOr__symbol( RogueClassCmdBitwiseOr* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[195]);
}

RogueString* RogueCmdBitwiseAnd__type_name( RogueClassCmdBitwiseAnd* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[910]);
}

RogueClassCmd* RogueCmdBitwiseAnd__clone__CloneArgs( RogueClassCmdBitwiseAnd* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseAnd*)Rogue_program.type_CmdBitwiseAnd->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdBitwiseAnd__combine_literal_operands__Type( RogueClassCmdBitwiseAnd* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, (((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralInteger)))->value & ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralInteger)))->value) ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)Rogue_program.type_CmdLiteralLogical->create_and_init_object()), THIS->t, (((RogueClassCmdLiteralLogical*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralLogical)))->value && ((RogueClassCmdLiteralLogical*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralLogical)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdBitwiseAnd* RogueCmdBitwiseAnd__init_object( RogueClassCmdBitwiseAnd* THIS )
{
  return (RogueClassCmdBitwiseAnd*)(THIS);
}

RogueString* RogueCmdBitwiseAnd__symbol( RogueClassCmdBitwiseAnd* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[150]);
}

RogueString* RogueCmdBitwiseShiftLeft__type_name( RogueClassCmdBitwiseShiftLeft* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[911]);
}

RogueClassCmd* RogueCmdBitwiseShiftLeft__clone__CloneArgs( RogueClassCmdBitwiseShiftLeft* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseShiftLeft*)Rogue_program.type_CmdBitwiseShiftLeft->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdBitwiseShiftLeft__combine_literal_operands__Type( RogueClassCmdBitwiseShiftLeft* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, (((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralInteger)))->value << ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralInteger)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdBitwiseShiftLeft* RogueCmdBitwiseShiftLeft__init_object( RogueClassCmdBitwiseShiftLeft* THIS )
{
  return (RogueClassCmdBitwiseShiftLeft*)(THIS);
}

RogueString* RogueCmdBitwiseShiftLeft__symbol( RogueClassCmdBitwiseShiftLeft* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[185]);
}

RogueString* RogueCmdBitwiseShiftLeft__cpp_symbol( RogueClassCmdBitwiseShiftLeft* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[177]);
}

RogueString* RogueCmdBitwiseShiftRight__type_name( RogueClassCmdBitwiseShiftRight* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[912]);
}

RogueClassCmd* RogueCmdBitwiseShiftRight__clone__CloneArgs( RogueClassCmdBitwiseShiftRight* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseShiftRight*)Rogue_program.type_CmdBitwiseShiftRight->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdBitwiseShiftRight__combine_literal_operands__Type( RogueClassCmdBitwiseShiftRight* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, (((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralInteger)))->value << ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralInteger)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmd* RogueCmdBitwiseShiftRight__resolve__Scope( RogueClassCmdBitwiseShiftRight* THIS, RogueClassScope* scope_0 )
{
  RogueClassCmd* result_1 = ((RogueCmdBinary__resolve__Scope( ((RogueClassCmdBinary*)THIS), scope_0 )));
  RogueClassCmdBitwiseShiftRight* cmd_shift_2 = (((RogueClassCmdBitwiseShiftRight*)(RogueObject::as(result_1,Rogue_program.type_CmdBitwiseShiftRight))));
  if (!(!!(cmd_shift_2)))
  {
    return (RogueClassCmd*)(result_1);
  }
  return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, Rogue_program.literal_strings[545] ))))), Rogue_program.literal_strings[858], ((RogueCmdArgs__init__Cmd_Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), cmd_shift_2->left, cmd_shift_2->right ))) ))), scope_0 ))));
}

RogueClassCmdBitwiseShiftRight* RogueCmdBitwiseShiftRight__init_object( RogueClassCmdBitwiseShiftRight* THIS )
{
  return (RogueClassCmdBitwiseShiftRight*)(THIS);
}

RogueString* RogueCmdBitwiseShiftRight__symbol( RogueClassCmdBitwiseShiftRight* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[186]);
}

RogueString* RogueCmdBitwiseShiftRightX__type_name( RogueClassCmdBitwiseShiftRightX* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[913]);
}

RogueClassCmd* RogueCmdBitwiseShiftRightX__clone__CloneArgs( RogueClassCmdBitwiseShiftRightX* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseShiftRightX*)Rogue_program.type_CmdBitwiseShiftRightX->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdBitwiseShiftRightX__combine_literal_operands__Type( RogueClassCmdBitwiseShiftRightX* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, (((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralInteger)))->value << ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralInteger)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdBitwiseShiftRightX* RogueCmdBitwiseShiftRightX__init_object( RogueClassCmdBitwiseShiftRightX* THIS )
{
  return (RogueClassCmdBitwiseShiftRightX*)(THIS);
}

RogueString* RogueCmdBitwiseShiftRightX__symbol( RogueClassCmdBitwiseShiftRightX* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[187]);
}

RogueString* RogueCmdBitwiseShiftRightX__cpp_symbol( RogueClassCmdBitwiseShiftRightX* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[103]);
}

RogueString* RogueCmdSubtract__type_name( RogueClassCmdSubtract* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[874]);
}

RogueClassCmd* RogueCmdSubtract__clone__CloneArgs( RogueClassCmdSubtract* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdSubtract*)Rogue_program.type_CmdSubtract->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdSubtract__combine_literal_operands__Type( RogueClassCmdSubtract* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)Rogue_program.type_CmdLiteralReal->create_and_init_object()), THIS->t, (((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralReal)))->value - ((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralReal)))->value) ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, (((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralInteger)))->value - ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralInteger)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdSubtract* RogueCmdSubtract__init_object( RogueClassCmdSubtract* THIS )
{
  return (RogueClassCmdSubtract*)(THIS);
}

RogueString* RogueCmdSubtract__fn_name( RogueClassCmdSubtract* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[863]);
}

RogueString* RogueCmdSubtract__symbol( RogueClassCmdSubtract* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[172]);
}

RogueString* RogueCmdMultiply__type_name( RogueClassCmdMultiply* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[875]);
}

RogueClassCmd* RogueCmdMultiply__clone__CloneArgs( RogueClassCmdMultiply* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMultiply*)Rogue_program.type_CmdMultiply->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdMultiply__combine_literal_operands__Type( RogueClassCmdMultiply* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)Rogue_program.type_CmdLiteralReal->create_and_init_object()), THIS->t, (((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralReal)))->value * ((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralReal)))->value) ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, (((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralInteger)))->value * ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralInteger)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdMultiply* RogueCmdMultiply__init_object( RogueClassCmdMultiply* THIS )
{
  return (RogueClassCmdMultiply*)(THIS);
}

RogueString* RogueCmdMultiply__fn_name( RogueClassCmdMultiply* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[864]);
}

RogueString* RogueCmdMultiply__symbol( RogueClassCmdMultiply* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[191]);
}

RogueString* RogueCmdDivide__type_name( RogueClassCmdDivide* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[876]);
}

RogueClassCmd* RogueCmdDivide__clone__CloneArgs( RogueClassCmdDivide* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdDivide*)Rogue_program.type_CmdDivide->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdDivide__combine_literal_operands__Type( RogueClassCmdDivide* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)Rogue_program.type_CmdLiteralReal->create_and_init_object()), THIS->t, (((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralReal)))->value / ((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralReal)))->value) ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, (((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralInteger)))->value / ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralInteger)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdDivide* RogueCmdDivide__init_object( RogueClassCmdDivide* THIS )
{
  return (RogueClassCmdDivide*)(THIS);
}

RogueString* RogueCmdDivide__fn_name( RogueClassCmdDivide* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[865]);
}

RogueString* RogueCmdDivide__symbol( RogueClassCmdDivide* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[40]);
}

RogueString* RogueCmdMod__type_name( RogueClassCmdMod* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[877]);
}

RogueClassCmd* RogueCmdMod__clone__CloneArgs( RogueClassCmdMod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMod*)Rogue_program.type_CmdMod->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdMod__combine_literal_operands__Type( RogueClassCmdMod* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)Rogue_program.type_CmdLiteralReal->create_and_init_object()), THIS->t, (RogueMath__mod__Real_Real( ((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralReal)))->value, ((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralReal)))->value )) ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, (RogueMath__mod__Integer_Integer( ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralInteger)))->value, ((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralInteger)))->value )) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmd* RogueCmdMod__resolve__Scope( RogueClassCmdMod* THIS, RogueClassScope* scope_0 )
{
  RogueClassCmd* result_1 = ((RogueCmdBinary__resolve__Scope( ((RogueClassCmdBinary*)THIS), scope_0 )));
  if ((call_ROGUEM47( 16, (RogueClassCmd*)(result_1) )))
  {
    return (RogueClassCmd*)(result_1);
  }
  RogueClassCmdMod* cmd_mod_2 = (((RogueClassCmdMod*)(RogueObject::as(result_1,Rogue_program.type_CmdMod))));
  if (!(!!(cmd_mod_2)))
  {
    return (RogueClassCmd*)(result_1);
  }
  return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, Rogue_program.literal_strings[545] ))))), Rogue_program.literal_strings[859], ((RogueCmdArgs__init__Cmd_Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), cmd_mod_2->left, cmd_mod_2->right ))) ))), scope_0 ))));
}

RogueClassCmdMod* RogueCmdMod__init_object( RogueClassCmdMod* THIS )
{
  return (RogueClassCmdMod*)(THIS);
}

RogueString* RogueCmdMod__fn_name( RogueClassCmdMod* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[866]);
}

RogueString* RogueCmdMod__symbol( RogueClassCmdMod* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[178]);
}

RogueString* RogueCmdPower__type_name( RogueClassCmdPower* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[878]);
}

RogueClassCmd* RogueCmdPower__clone__CloneArgs( RogueClassCmdPower* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdPower*)Rogue_program.type_CmdPower->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdPower__combine_literal_operands__Type( RogueClassCmdPower* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)Rogue_program.type_CmdLiteralReal->create_and_init_object()), THIS->t, ((RogueReal) pow((double)((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralReal)))->value, (double)((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralReal)))->value)) ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, ((RogueInteger) pow((double)((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->left,Rogue_program.type_CmdLiteralInteger)))->value, (double)((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->right,Rogue_program.type_CmdLiteralInteger)))->value)) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

void RogueCmdPower__write_cpp__CPPWriter_Logical( RogueClassCmdPower* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[450] ))), (call_ROGUEM46( 28, (RogueClassCmd*)(THIS->left) )) ))), Rogue_program.literal_strings[860] );
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->left), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[861] );
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->right), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[778] );
}

RogueClassCmdPower* RogueCmdPower__init_object( RogueClassCmdPower* THIS )
{
  return (RogueClassCmdPower*)(THIS);
}

RogueString* RogueCmdPower__fn_name( RogueClassCmdPower* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[867]);
}

RogueString* RogueCmdPower__symbol( RogueClassCmdPower* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[155]);
}

RogueString* RogueCmdNegate__type_name( RogueClassCmdNegate* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[887]);
}

RogueClassCmd* RogueCmdNegate__clone__CloneArgs( RogueClassCmdNegate* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdNegate*)Rogue_program.type_CmdNegate->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->operand), clone_args_0 )) ))))));
}

RogueClassType* Rogue_CmdNegate__implicit_type( RogueClassCmdNegate* THIS )
{
  return (RogueClassType*)((call_ROGUEM46( 15, (RogueClassCmd*)(THIS->operand) )));
}

RogueClassCmdNegate* RogueCmdNegate__init_object( RogueClassCmdNegate* THIS )
{
  return (RogueClassCmdNegate*)(THIS);
}

RogueString* RogueCmdNegate__prefix_symbol( RogueClassCmdNegate* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[890]);
}

RogueClassCmd* RogueCmdNegate__resolve_for_literal_operand__Scope( RogueClassCmdNegate* THIS, RogueClassScope* scope_0 )
{
  if (RogueObject::instance_of(THIS->operand,Rogue_program.type_CmdLiteralReal))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)Rogue_program.type_CmdLiteralReal->create_and_init_object()), THIS->t, (-(((RogueClassCmdLiteralReal*)(RogueObject::as(THIS->operand,Rogue_program.type_CmdLiteralReal)))->value)) ))))));
  }
  else if (RogueObject::instance_of(THIS->operand,Rogue_program.type_CmdLiteralInteger))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, (-(((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->operand,Rogue_program.type_CmdLiteralInteger)))->value)) ))))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdNegate__suffix_symbol( RogueClassCmdNegate* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[102]);
}

RogueString* RogueCmdBitwiseNot__type_name( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[888]);
}

RogueClassCmd* RogueCmdBitwiseNot__clone__CloneArgs( RogueClassCmdBitwiseNot* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdBitwiseNot*)Rogue_program.type_CmdBitwiseNot->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->operand), clone_args_0 )) ))))));
}

RogueClassType* Rogue_CmdBitwiseNot__type( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueClassType*)((call_ROGUEM46( 28, (RogueClassCmd*)(THIS->operand) )));
}

RogueClassCmdBitwiseNot* RogueCmdBitwiseNot__init_object( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueClassCmdBitwiseNot*)(THIS);
}

RogueString* RogueCmdBitwiseNot__prefix_symbol( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[166]);
}

RogueClassCmd* RogueCmdBitwiseNot__resolve_for_literal_operand__Scope( RogueClassCmdBitwiseNot* THIS, RogueClassScope* scope_0 )
{
  if (RogueObject::instance_of(THIS->operand,Rogue_program.type_CmdLiteralInteger))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, ~(((RogueClassCmdLiteralInteger*)(RogueObject::as(THIS->operand,Rogue_program.type_CmdLiteralInteger)))->value) ))))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdBitwiseNot__cpp_prefix_symbol( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[189]);
}

RogueString* RogueCmdGetOptionalValue__type_name( RogueClassCmdGetOptionalValue* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[665]);
}

RogueClassCmd* RogueCmdGetOptionalValue__clone__CloneArgs( RogueClassCmdGetOptionalValue* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdGetOptionalValue__init__Token_Cmd( ((RogueClassCmdGetOptionalValue*)Rogue_program.type_CmdGetOptionalValue->create_and_init_object()), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->value), clone_args_0 )) ))))));
}

RogueClassCmdGetOptionalValue* RogueCmdGetOptionalValue__resolve__Scope( RogueClassCmdGetOptionalValue* THIS, RogueClassScope* scope_0 )
{
  THIS->value = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->value), scope_0 ));
  if (!(((Rogue_Cmd__require_type( THIS->value )))->is_optional))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[741] )));
  }
  return (RogueClassCmdGetOptionalValue*)(THIS);
}

void RogueCmdGetOptionalValue__trace_used_code( RogueClassCmdGetOptionalValue* THIS )
{
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->value) );
}

RogueClassType* Rogue_CmdGetOptionalValue__type( RogueClassCmdGetOptionalValue* THIS )
{
  return (RogueClassType*)((call_ROGUEM46( 28, (RogueClassCmd*)(THIS->value) ))->_element_type);
}

void RogueCmdGetOptionalValue__write_cpp__CPPWriter_Logical( RogueClassCmdGetOptionalValue* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->value), writer_0, false );
  if (!(((RogueType__is_reference( ((Rogue_Cmd__compile_type( THIS->value )))->_element_type )))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[790] );
  }
}

RogueClassCmdGetOptionalValue* RogueCmdGetOptionalValue__init_object( RogueClassCmdGetOptionalValue* THIS )
{
  return (RogueClassCmdGetOptionalValue*)(THIS);
}

RogueClassCmdGetOptionalValue* RogueCmdGetOptionalValue__init__Token_Cmd( RogueClassCmdGetOptionalValue* THIS, RogueClassToken* _auto_698_0, RogueClassCmd* _auto_699_1 )
{
  THIS->value = _auto_699_1;
  THIS->t = _auto_698_0;
  return (RogueClassCmdGetOptionalValue*)(THIS);
}

RogueString* RogueCmdElementAccess__type_name( RogueClassCmdElementAccess* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[666]);
}

RogueClassCmd* RogueCmdElementAccess__clone__CloneArgs( RogueClassCmdElementAccess* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdElementAccess__init__Token_Cmd_Cmd( ((RogueClassCmdElementAccess*)Rogue_program.type_CmdElementAccess->create_and_init_object()), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->context), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->index), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdElementAccess__resolve__Scope( RogueClassCmdElementAccess* THIS, RogueClassScope* scope_0 )
{
  THIS->context = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->context), scope_0 ));
  RogueClassType* context_type_1 = (((Rogue_Cmd__require_type( THIS->context ))));
  RogueType__organize( context_type_1 );
  if (context_type_1->is_array)
  {
    return (RogueClassCmd*)(((RogueCmdReadArrayElement__resolve__Scope( ((RogueCmdReadArrayElement__init__Token_Cmd_Cmd( ((RogueClassCmdReadArrayElement*)Rogue_program.type_CmdReadArrayElement->create_and_init_object()), THIS->t, THIS->context, THIS->index ))), scope_0 ))));
  }
  else
  {
    RogueClassCmdArgs* args_2 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()) ))));
    RogueCmdList__add__Cmd( ((RogueCmdList*)args_2), THIS->index );
    return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->context, Rogue_program.literal_strings[742], args_2 ))), true, false ))));
  }
}

RogueClassCmd* RogueCmdElementAccess__resolve_assignment__Scope_Cmd( RogueClassCmdElementAccess* THIS, RogueClassScope* scope_0, RogueClassCmd* new_value_1 )
{
  THIS->context = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->context), scope_0 ));
  RogueClassType* context_type_2 = (((Rogue_Cmd__require_type( THIS->context ))));
  RogueType__organize( context_type_2 );
  if (context_type_2->is_array)
  {
    return (RogueClassCmd*)(((RogueCmdWriteArrayElement__resolve__Scope( ((RogueCmdWriteArrayElement__init__Token_Cmd_Cmd_Cmd( ((RogueClassCmdWriteArrayElement*)Rogue_program.type_CmdWriteArrayElement->create_and_init_object()), THIS->t, THIS->context, THIS->index, new_value_1 ))), scope_0 ))));
  }
  else
  {
    RogueClassCmdArgs* args_3 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()) ))));
    RogueCmdList__add__Cmd( ((RogueCmdList__add__Cmd( ((RogueCmdList*)args_3), THIS->index ))), new_value_1 );
    RogueClassCmd* result_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->context, Rogue_program.literal_strings[760], args_3 ))), true, false ))));
    return (RogueClassCmd*)(result_4);
  }
}

RogueClassCmd* RogueCmdElementAccess__resolve_modify__Scope_Integer( RogueClassCmdElementAccess* THIS, RogueClassScope* scope_0, RogueInteger delta_1 )
{
  return (RogueClassCmd*)((call_ROGUEM49( 24, (RogueClassCmd*)(((RogueCmdElementAccess__clone__CloneArgs( THIS, ((RogueClassCloneArgs*)(NULL)) )))), scope_0, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdAdd*)Rogue_program.type_CmdAdd->create_and_init_object())), THIS->t, ((RogueClassCmd*)(THIS)), ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, delta_1 ))))) ))))) )));
}

RogueClassCmdElementAccess* RogueCmdElementAccess__init_object( RogueClassCmdElementAccess* THIS )
{
  return (RogueClassCmdElementAccess*)(THIS);
}

RogueClassCmdElementAccess* RogueCmdElementAccess__init__Token_Cmd_Cmd( RogueClassCmdElementAccess* THIS, RogueClassToken* _auto_700_0, RogueClassCmd* _auto_701_1, RogueClassCmd* _auto_702_2 )
{
  THIS->index = _auto_702_2;
  THIS->context = _auto_701_1;
  THIS->t = _auto_700_0;
  return (RogueClassCmdElementAccess*)(THIS);
}

RogueString* RogueCmdConvertToType__type_name( RogueClassCmdConvertToType* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[883]);
}

RogueClassCmd* RogueCmdConvertToType__clone__CloneArgs( RogueClassCmdConvertToType* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdConvertToType*)Rogue_program.type_CmdConvertToType->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->operand), clone_args_0 )), THIS->_target_type ))))));
}

RogueClassCmd* RogueCmdConvertToType__resolve__Scope( RogueClassCmdConvertToType* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->operand), scope_0 ));
  RogueClassType* operand_type_1 = (((Rogue_Cmd__require_type( THIS->operand ))));
  RogueType__organize( THIS->_target_type );
  if (operand_type_1 == THIS->_target_type)
  {
    return (RogueClassCmd*)(THIS->operand);
  }
  if ((((RogueType__is_primitive( operand_type_1 ))) && ((RogueType__is_primitive( THIS->_target_type )))))
  {
    return (RogueClassCmd*)((call_ROGUEM42( 23, (RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdConvertToPrimitiveType*)Rogue_program.type_CmdConvertToPrimitiveType->create_and_init_object())), THIS->t, THIS->operand, THIS->_target_type )))), scope_0 )));
  }
  else
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->operand, ((RogueString__operatorPLUS__String( Rogue_program.literal_strings[298], THIS->_target_type->name ))) ))), scope_0 ))));
  }
}

RogueClassCmdConvertToType* RogueCmdConvertToType__init_object( RogueClassCmdConvertToType* THIS )
{
  return (RogueClassCmdConvertToType*)(THIS);
}

RogueString* RogueCmdCreateCallback__type_name( RogueClassCmdCreateCallback* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[667]);
}

RogueClassCmdCreateCallback* RogueCmdCreateCallback__clone__CloneArgs( RogueClassCmdCreateCallback* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdCreateCallback*)(((RogueCmdCreateCallback__init__Token_Cmd_String_String_Type( ((RogueClassCmdCreateCallback*)Rogue_program.type_CmdCreateCallback->create_and_init_object()), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->context), clone_args_0 )), THIS->name, THIS->signature, THIS->_return_type ))));
}

RogueClassCmd* RogueCmdCreateCallback__resolve__Scope( RogueClassCmdCreateCallback* THIS, RogueClassScope* scope_0 )
{
  if ((((RogueString__operatorLESSTHANGREATERTHAN__String( THIS->name, Rogue_program.literal_strings[297] ))) == 0 && !!(THIS->_return_type)))
  {
    THIS->name = ((RogueString__operatorPLUS__String( Rogue_program.literal_strings[298], THIS->_return_type->name )));
  }
  THIS->context = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->context), scope_0 ));
  RogueClassType* context_type_1 = (((Rogue_Cmd__require_type( THIS->context ))));
  RogueType__organize( context_type_1 );
  RogueClassMethod* m_2 = (((RogueType__find_method__String( context_type_1, ((RogueString__operatorPLUS__String( THIS->name, THIS->signature ))) ))));
  if (!(!!(m_2)))
  {
    RogueMethodList* methods_3 = (((RogueString_MethodListTable__get__String( context_type_1->method_lookup_by_name, THIS->name ))));
    if (!(!!(methods_3)))
    {
      methods_3 = ((RogueMethodList*)((RogueString_MethodListTable__get__String( context_type_1->routine_lookup_by_name, THIS->name ))));
    }
    if (!(!!(methods_3)))
    {
      throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[743] ))), THIS->name ))), Rogue_program.literal_strings[744] ))), context_type_1->name ))), Rogue_program.literal_strings[47] ))) ))) )));
    }
    if (methods_3->count != 1)
    {
      throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[745] ))), THIS->name ))), Rogue_program.literal_strings[746] ))) ))) )));
    }
    m_2 = ((RogueClassMethod*)((RogueClassMethod*)(methods_3->data->objects[0])));
  }
  RogueTypeList* parameter_types_4 = 0;
  if (!!(m_2->parameters->count))
  {
    parameter_types_4 = ((RogueTypeList*)((RogueTypeList__init( ((RogueTypeList*)Rogue_program.type_TypeList->create_and_init_object()) ))));
    {
      RogueLocalList* _auto_1097_13 = (m_2->parameters);
      RogueInteger _auto_1098_14 = (0);
      for (;_auto_1098_14 < _auto_1097_13->count;++_auto_1098_14)
      {
        RogueClassLocal* p_15 = (((RogueClassLocal*)(_auto_1097_13->data->objects[_auto_1098_14])));
        RogueTypeList__add__Type( parameter_types_4, p_15->_type );
      }
    }
  }
  RogueString* callback_type_name_5 = (((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( context_type_1->name, Rogue_program.literal_strings[158] ))), THIS->name ))), ((RogueProgram__get_callback_type_signature__TypeList( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), parameter_types_4 ))) ))));
  RogueClassType* callback_type_6 = (((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, callback_type_name_5 ))));
  if (!(callback_type_6->defined))
  {
    callback_type_6->defined = true;
    RogueAttributes__add__Integer( callback_type_6->attributes, 0 );
    RogueClassType* base_type_7 = (((RogueProgram__get_callback_type_reference__Token_TypeList_Type( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, parameter_types_4, m_2->_return_type ))));
    RogueTypeList__add__Type( callback_type_6->base_types, base_type_7 );
    RogueClassMethod* m_call_8 = (((RogueType__add_method__Token_String( callback_type_6, THIS->t, Rogue_program.literal_strings[239] ))));
    RogueClassCmdArgs* args_9 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()) ))));
    if (!!(parameter_types_4))
    {
      {
        RogueTypeList* _auto_1099_16 = (parameter_types_4);
        RogueInteger i_17 = (0);
        for (;i_17 < _auto_1099_16->count;++i_17)
        {
          RogueString* param_name_10 = (((RogueString__operatorPLUS__Integer( Rogue_program.literal_strings[240], (i_17 + 1) ))));
          RogueMethod__add_parameter__Token_String_Type( m_call_8, THIS->t, param_name_10, ((RogueClassType*)(parameter_types_4->data->objects[i_17])) );
          RogueCmdList__add__Cmd( ((RogueCmdList*)args_9), ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, param_name_10 ))))) );
        }
      }
    }
    RogueClassCmd* cmd_11 = 0;
    if (((RogueMethod__is_routine( m_2 ))))
    {
      RogueAttributes__add__Integer( callback_type_6->attributes, 1024 );
      cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, context_type_1->name ))))), THIS->name, args_9 ))))));
    }
    else
    {
      RogueType__add_property__Token_String_Type_Cmd( callback_type_6, THIS->t, Rogue_program.literal_strings[351], context_type_1, ((RogueClassCmd*)(NULL)) );
      RogueClassMethod* m_init_12 = (((RogueType__add_method__Token_String( callback_type_6, THIS->t, Rogue_program.literal_strings[285] ))));
      RogueMethod__add_parameter__Token_String_Type( m_init_12, THIS->t, Rogue_program.literal_strings[351], ((RogueClassType*)(NULL)) );
      cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, Rogue_program.literal_strings[351] ))))), THIS->name, args_9 ))))));
    }
    if (!!(m_2->_return_type))
    {
      m_call_8->_return_type = m_2->_return_type;
      cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)Rogue_program.type_CmdReturn->create_and_init_object()), THIS->t, cmd_11 ))))));
    }
    RogueCmdList__add__Cmd( ((RogueCmdList*)m_call_8->statements), cmd_11 );
  }
  if (((RogueMethod__is_routine( m_2 ))))
  {
    return (RogueClassCmd*)(((RogueCmdReadSingleton__resolve__Scope( ((RogueCmdReadSingleton__init__Token_Type( ((RogueClassCmdReadSingleton*)Rogue_program.type_CmdReadSingleton->create_and_init_object()), THIS->t, callback_type_6 ))), scope_0 ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, callback_type_name_5, ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), THIS->context ))) ))), scope_0 ))));
  }
}

RogueClassCmdCreateCallback* RogueCmdCreateCallback__init_object( RogueClassCmdCreateCallback* THIS )
{
  return (RogueClassCmdCreateCallback*)(THIS);
}

RogueClassCmdCreateCallback* RogueCmdCreateCallback__init__Token_Cmd_String_String_Type( RogueClassCmdCreateCallback* THIS, RogueClassToken* _auto_703_0, RogueClassCmd* _auto_704_1, RogueString* _auto_705_2, RogueString* _auto_706_3, RogueClassType* _auto_707_4 )
{
  THIS->_return_type = _auto_707_4;
  THIS->signature = _auto_706_3;
  THIS->name = _auto_705_2;
  THIS->context = _auto_704_1;
  THIS->t = _auto_703_0;
  return (RogueClassCmdCreateCallback*)(THIS);
}

RogueString* RogueCmdAs__type_name( RogueClassCmdAs* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[884]);
}

RogueClassCmd* RogueCmdAs__clone__CloneArgs( RogueClassCmdAs* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdAs*)Rogue_program.type_CmdAs->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->operand), clone_args_0 )), THIS->_target_type ))))));
}

RogueClassCmd* RogueCmdAs__resolve__Scope( RogueClassCmdAs* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->operand), scope_0 ));
  RogueType__organize( THIS->_target_type );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdAs__write_cpp__CPPWriter_Logical( RogueClassCmdAs* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[450] ))), THIS->_target_type ))), Rogue_program.literal_strings[791] );
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->operand), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[16] );
  RogueCPPWriter__print_type_info__Type( writer_0, THIS->_target_type );
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[792] );
}

RogueClassCmdAs* RogueCmdAs__init_object( RogueClassCmdAs* THIS )
{
  return (RogueClassCmdAs*)(THIS);
}

RogueString* RogueCmdDefaultValue__type_name( RogueClassCmdDefaultValue* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[852]);
}

RogueClassCmd* RogueCmdDefaultValue__clone__CloneArgs( RogueClassCmdDefaultValue* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdDefaultValue__init__Token_Type( ((RogueClassCmdDefaultValue*)Rogue_program.type_CmdDefaultValue->create_and_init_object()), THIS->t, THIS->_of_type ))))));
}

RogueClassCmd* RogueCmdDefaultValue__resolve__Scope( RogueClassCmdDefaultValue* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->_of_type );
  RogueClassCmd* default_value_1 = (((RogueType__create_default_value__Token( THIS->_of_type, THIS->t ))));
  if (((RogueType__is_reference( THIS->_of_type ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdCastToType*)Rogue_program.type_CmdCastToType->create_and_init_object())), THIS->t, default_value_1, THIS->_of_type ))))));
  }
  else
  {
    return (RogueClassCmd*)(default_value_1);
  }
}

RogueClassType* Rogue_CmdDefaultValue__type( RogueClassCmdDefaultValue* THIS )
{
  return (RogueClassType*)(THIS->_of_type);
}

RogueClassCmdDefaultValue* RogueCmdDefaultValue__init_object( RogueClassCmdDefaultValue* THIS )
{
  return (RogueClassCmdDefaultValue*)(THIS);
}

RogueClassCmdDefaultValue* RogueCmdDefaultValue__init__Token_Type( RogueClassCmdDefaultValue* THIS, RogueClassToken* _auto_708_0, RogueClassType* _auto_709_1 )
{
  THIS->_of_type = _auto_709_1;
  THIS->t = _auto_708_0;
  return (RogueClassCmdDefaultValue*)(THIS);
}

RogueString* RogueCmdFormattedString__type_name( RogueClassCmdFormattedString* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[668]);
}

RogueClassCmd* RogueCmdFormattedString__clone__CloneArgs( RogueClassCmdFormattedString* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdFormattedString__init__Token_String_CmdArgs( ((RogueClassCmdFormattedString*)Rogue_program.type_CmdFormattedString->create_and_init_object()), THIS->t, THIS->format, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

RogueClassType* Rogue_CmdFormattedString__implicit_type( RogueClassCmdFormattedString* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String);
}

RogueClassCmd* RogueCmdFormattedString__resolve__Scope( RogueClassCmdFormattedString* THIS, RogueClassScope* scope_0 )
{
  RogueClassCmdAccess* cmd_1 = (((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, Rogue_program.literal_strings[32], ((RogueCmdArgs__init( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()) ))) ))));
  RogueString* fmt_2 = (THIS->format);
  {
    RogueClassCmdArgs* _auto_1100_4 = (THIS->args);
    RogueInteger _auto_1101_5 = (0);
    for (;_auto_1101_5 < _auto_1100_4->count;++_auto_1101_5)
    {
      RogueClassCmd* arg_6 = (((RogueClassCmd*)(_auto_1100_4->data->objects[_auto_1101_5])));
      arg_6 = ((RogueClassCmd*)((RogueCmd__require_value( (call_ROGUEM42( 23, (RogueClassCmd*)(arg_6), scope_0 )) ))));
      RogueOptionalInteger i_3 = (((RogueString__locate__Character_OptionalInteger( fmt_2, (RogueCharacter)'$', RogueOptionalInteger() ))));
      if (!(i_3.exists))
      {
        throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[747] )));
      }
      if (i_3.value > 0)
      {
        cmd_1 = ((RogueClassCmdAccess*)((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(cmd_1)), Rogue_program.literal_strings[748], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), ((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Integer( ((RogueClassCmdLiteralString*)Rogue_program.type_CmdLiteralString->create_and_init_object()), THIS->t, ((RogueString__leftmost__Integer( fmt_2, i_3.value ))), 0 ))))) ))) ))));
        fmt_2 = ((RogueString*)((RogueString__from__Integer( fmt_2, (i_3.value + 1) ))));
      }
      else
      {
        fmt_2 = ((RogueString*)((RogueString__from__Integer( fmt_2, 1 ))));
      }
      cmd_1 = ((RogueClassCmdAccess*)((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(cmd_1)), Rogue_program.literal_strings[748], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), (call_ROGUEM43( 4, (RogueClassCmd*)(arg_6), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String )) ))) ))));
    }
  }
  if (!!(fmt_2->count))
  {
    if (((RogueString__locate__Character_OptionalInteger( fmt_2, (RogueCharacter)'$', RogueOptionalInteger() ))).exists)
    {
      throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[749] )));
    }
    cmd_1 = ((RogueClassCmdAccess*)((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(cmd_1)), Rogue_program.literal_strings[748], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), ((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Integer( ((RogueClassCmdLiteralString*)Rogue_program.type_CmdLiteralString->create_and_init_object()), THIS->t, fmt_2, 0 ))))) ))) ))));
  }
  return (RogueClassCmd*)((call_ROGUEM42( 23, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( cmd_1, scope_0 )))), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String ))), scope_0 )));
}

RogueClassType* Rogue_CmdFormattedString__type( RogueClassCmdFormattedString* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String);
}

RogueClassCmdFormattedString* RogueCmdFormattedString__init_object( RogueClassCmdFormattedString* THIS )
{
  return (RogueClassCmdFormattedString*)(THIS);
}

RogueClassCmdFormattedString* RogueCmdFormattedString__init__Token_String_CmdArgs( RogueClassCmdFormattedString* THIS, RogueClassToken* _auto_711_0, RogueString* _auto_712_1, RogueClassCmdArgs* _auto_713_2 )
{
  THIS->args = _auto_713_2;
  THIS->format = _auto_712_1;
  THIS->t = _auto_711_0;
  return (RogueClassCmdFormattedString*)(THIS);
}

RogueString* RogueCmdLiteralReal__type_name( RogueClassCmdLiteralReal* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[853]);
}

RogueClassCmd* RogueCmdLiteralReal__clone__CloneArgs( RogueClassCmdLiteralReal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)Rogue_program.type_CmdLiteralReal->create_and_init_object()), THIS->t, THIS->value ))))));
}

RogueClassCmd* RogueCmdLiteralReal__resolve__Scope( RogueClassCmdLiteralReal* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralReal__type( RogueClassCmdLiteralReal* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real);
}

void RogueCmdLiteralReal__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralReal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__Real( writer_0, THIS->value );
}

RogueClassCmdLiteralReal* RogueCmdLiteralReal__init_object( RogueClassCmdLiteralReal* THIS )
{
  return (RogueClassCmdLiteralReal*)(THIS);
}

RogueClassCmdLiteralReal* RogueCmdLiteralReal__init__Token_Real( RogueClassCmdLiteralReal* THIS, RogueClassToken* _auto_714_0, RogueReal _auto_715_1 )
{
  THIS->value = _auto_715_1;
  THIS->t = _auto_714_0;
  return (RogueClassCmdLiteralReal*)(THIS);
}

RogueString* RogueCmdLiteralLong__type_name( RogueClassCmdLiteralLong* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[854]);
}

RogueClassCmd* RogueCmdLiteralLong__cast_to__Type( RogueClassCmdLiteralLong* THIS, RogueClassType* target_type_0 )
{
  if (target_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)Rogue_program.type_CmdLiteralReal->create_and_init_object()), THIS->t, ((RogueReal)(THIS->value)) ))))));
  }
  else if (target_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, ((RogueInteger)(THIS->value)) ))))));
  }
  else
  {
    return (RogueClassCmd*)((RogueCmd__cast_to__Type( ((RogueClassCmd*)THIS), target_type_0 )));
  }
}

RogueClassCmd* RogueCmdLiteralLong__clone__CloneArgs( RogueClassCmdLiteralLong* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLong__init__Token_Long( ((RogueClassCmdLiteralLong*)Rogue_program.type_CmdLiteralLong->create_and_init_object()), THIS->t, THIS->value ))))));
}

RogueClassCmd* RogueCmdLiteralLong__resolve__Scope( RogueClassCmdLiteralLong* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralLong__type( RogueClassCmdLiteralLong* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Long);
}

void RogueCmdLiteralLong__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralLong* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Long( writer_0, THIS->value ))), Rogue_program.literal_strings[793] );
}

RogueClassCmdLiteralLong* RogueCmdLiteralLong__init_object( RogueClassCmdLiteralLong* THIS )
{
  return (RogueClassCmdLiteralLong*)(THIS);
}

RogueClassCmdLiteralLong* RogueCmdLiteralLong__init__Token_Long( RogueClassCmdLiteralLong* THIS, RogueClassToken* _auto_716_0, RogueLong _auto_717_1 )
{
  THIS->value = _auto_717_1;
  THIS->t = _auto_716_0;
  return (RogueClassCmdLiteralLong*)(THIS);
}

RogueString* RogueCmdLiteralCharacter__type_name( RogueClassCmdLiteralCharacter* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[855]);
}

RogueClassCmd* RogueCmdLiteralCharacter__clone__CloneArgs( RogueClassCmdLiteralCharacter* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralCharacter__init__Token_Character( ((RogueClassCmdLiteralCharacter*)Rogue_program.type_CmdLiteralCharacter->create_and_init_object()), THIS->t, THIS->value ))))));
}

RogueClassCmd* RogueCmdLiteralCharacter__resolve__Scope( RogueClassCmdLiteralCharacter* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralCharacter__type( RogueClassCmdLiteralCharacter* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character);
}

void RogueCmdLiteralCharacter__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralCharacter* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[794] );
  if ((((RogueInteger)(THIS->value)) >= 32 && ((RogueInteger)(THIS->value)) <= 126))
  {
    switch (((RogueInteger)(THIS->value)))
    {
      case 10:
      {
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[795] );
        break;
      }
      case (RogueCharacter)'\\':
      {
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[796] );
        break;
      }
      case (RogueCharacter)'\'':
      {
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[797] );
        break;
      }
      default:
      {
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[46] );
        RogueCPPWriter__print__Character_Logical( writer_0, THIS->value, false );
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[46] );
      }
    }
  }
  else
  {
    RogueCPPWriter__print__Integer( writer_0, ((RogueInteger)(THIS->value)) );
  }
}

RogueClassCmdLiteralCharacter* RogueCmdLiteralCharacter__init_object( RogueClassCmdLiteralCharacter* THIS )
{
  return (RogueClassCmdLiteralCharacter*)(THIS);
}

RogueClassCmdLiteralCharacter* RogueCmdLiteralCharacter__init__Token_Character( RogueClassCmdLiteralCharacter* THIS, RogueClassToken* _auto_718_0, RogueCharacter _auto_719_1 )
{
  THIS->value = _auto_719_1;
  THIS->t = _auto_718_0;
  return (RogueClassCmdLiteralCharacter*)(THIS);
}

RogueString* RogueCmdCreateList__type_name( RogueClassCmdCreateList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[669]);
}

RogueClassCmd* RogueCmdCreateList__clone__CloneArgs( RogueClassCmdCreateList* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateList__init__Token_CmdArgs_Type( ((RogueClassCmdCreateList*)Rogue_program.type_CmdCreateList->create_and_init_object()), THIS->t, ((RogueCmd__clone__CmdArgs_CloneArgs( ((RogueClassCmd*)THIS), THIS->args, clone_args_0 ))), THIS->_list_type ))))));
}

RogueClassCmd* RogueCmdCreateList__resolve__Scope( RogueClassCmdCreateList* THIS, RogueClassScope* scope_0 )
{
  RogueCmdArgs__resolve__Scope( THIS->args, scope_0 );
  if ((!(!!(THIS->_list_type)) && !!(THIS->args->count)))
  {
    RogueClassType* common_type_1 = ((call_ROGUEM46( 28, (RogueClassCmd*)(((RogueClassCmd*)(THIS->args->data->objects[0]))) )));
    {
      RogueClassCmdArgs* _auto_1102_5 = (THIS->args);
      RogueInteger _auto_1103_6 = (0);
      for (;_auto_1103_6 < _auto_1102_5->count;++_auto_1103_6)
      {
        RogueClassCmd* arg_7 = (((RogueClassCmd*)(_auto_1102_5->data->objects[_auto_1103_6])));
        common_type_1 = ((RogueClassType*)((RogueCmd__find_common_type__Type_Type( ((RogueClassCmd*)THIS), common_type_1, (call_ROGUEM46( 28, (RogueClassCmd*)(arg_7) )) ))));
      }
    }
    THIS->_list_type = ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__Object( Rogue_program.literal_strings[0], ((RogueObject*)(common_type_1)) ))), Rogue_program.literal_strings[163] ))) )));
    RogueType__organize( THIS->_list_type );
  }
  if (!!(THIS->_list_type))
  {
    RogueClassType* element_type_2 = (THIS->_list_type->_element_type);
    {
      RogueClassCmdArgs* _auto_1104_8 = (THIS->args);
      RogueInteger index_9 = (0);
      for (;index_9 < _auto_1104_8->count;++index_9)
      {
        THIS->args->data->objects[index_9] = (call_ROGUEM42( 23, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)((call_ROGUEM42( 23, (RogueClassCmd*)(((RogueClassCmd*)(THIS->args->data->objects[index_9]))), scope_0 ))), element_type_2 ))), scope_0 ));
      }
    }
  }
  if (!(!!(THIS->_list_type)))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[750] )));
  }
  RogueInteger initial_capacity_3 = (10);
  if (!!(THIS->args->count))
  {
    initial_capacity_3 = ((RogueInteger)THIS->args->count);
  }
  RogueClassCmd* cmd_4 = 0;
  cmd_4 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->_list_type->name, ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, initial_capacity_3 ))))) ))) ))))));
  {
    RogueClassCmdArgs* _auto_1105_10 = (THIS->args);
    RogueInteger _auto_1106_11 = (0);
    for (;_auto_1106_11 < _auto_1105_10->count;++_auto_1106_11)
    {
      RogueClassCmd* arg_12 = (((RogueClassCmd*)(_auto_1105_10->data->objects[_auto_1106_11])));
      cmd_4 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, cmd_4, Rogue_program.literal_strings[751], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()), arg_12 ))) ))))));
    }
  }
  return (RogueClassCmd*)((call_ROGUEM42( 23, (RogueClassCmd*)(cmd_4), scope_0 )));
}

RogueClassCmdCreateList* RogueCmdCreateList__init_object( RogueClassCmdCreateList* THIS )
{
  return (RogueClassCmdCreateList*)(THIS);
}

RogueClassCmdCreateList* RogueCmdCreateList__init__Token_CmdArgs_Type( RogueClassCmdCreateList* THIS, RogueClassToken* _auto_720_0, RogueClassCmdArgs* _auto_721_1, RogueClassType* _auto_722_2 )
{
  THIS->_list_type = _auto_722_2;
  THIS->args = _auto_721_1;
  THIS->t = _auto_720_0;
  return (RogueClassCmdCreateList*)(THIS);
}

RogueString* RogueCmdCallPriorMethod__type_name( RogueClassCmdCallPriorMethod* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[670]);
}

RogueClassCmd* RogueCmdCallPriorMethod__clone__CloneArgs( RogueClassCmdCallPriorMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCallPriorMethod__init__Token_String_CmdArgs( ((RogueClassCmdCallPriorMethod*)Rogue_program.type_CmdCallPriorMethod->create_and_init_object()), THIS->t, THIS->name, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdCallPriorMethod__resolve__Scope( RogueClassCmdCallPriorMethod* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)((call_ROGUEM42( 3, (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, THIS->name, THIS->args ))), scope_0 )))), scope_0 )));
}

RogueClassCmdCallPriorMethod* RogueCmdCallPriorMethod__init_object( RogueClassCmdCallPriorMethod* THIS )
{
  return (RogueClassCmdCallPriorMethod*)(THIS);
}

RogueClassCmdCallPriorMethod* RogueCmdCallPriorMethod__init__Token_String_CmdArgs( RogueClassCmdCallPriorMethod* THIS, RogueClassToken* _auto_723_0, RogueString* _auto_724_1, RogueClassCmdArgs* _auto_725_2 )
{
  THIS->args = _auto_725_2;
  THIS->name = _auto_724_1;
  THIS->t = _auto_723_0;
  return (RogueClassCmdCallPriorMethod*)(THIS);
}

RogueString* RogueFnParamList__to_String( RogueFnParamList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueFnParamList* _auto_1107_2 = (THIS);
    RogueInteger _auto_1108_3 = (0);
    for (;_auto_1108_3 < _auto_1107_2->count;++_auto_1108_3)
    {
      RogueClassFnParam* value_4 = (((RogueClassFnParam*)(_auto_1107_2->data->objects[_auto_1108_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueFnParamList__type_name( RogueFnParamList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[940]);
}

RogueFnParamList* RogueFnParamList__init_object( RogueFnParamList* THIS )
{
  return (RogueFnParamList*)(THIS);
}

RogueFnParamList* RogueFnParamList__init( RogueFnParamList* THIS )
{
  RogueFnParamList__init__Integer( THIS, 10 );
  return (RogueFnParamList*)(THIS);
}

RogueFnParamList* RogueFnParamList__init__Integer( RogueFnParamList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassFnParam*), true );
  return (RogueFnParamList*)(THIS);
}

RogueFnParamList* RogueFnParamList__add__FnParam( RogueFnParamList* THIS, RogueClassFnParam* value_0 )
{
  ((RogueFnParamList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueFnParamList*)(THIS);
}

RogueInteger RogueFnParamList__capacity( RogueFnParamList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueFnParamList* RogueFnParamList__reserve__Integer( RogueFnParamList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassFnParam*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueFnParamList__capacity( THIS ))) + ((RogueFnParamList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassFnParam*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueFnParamList*)(THIS);
}

RogueString* RogueFnParam__type_name( RogueClassFnParam* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[577]);
}

RogueClassFnParam* RogueFnParam__init__String( RogueClassFnParam* THIS, RogueString* _auto_726_0 )
{
  THIS->name = _auto_726_0;
  return (RogueClassFnParam*)(THIS);
}

RogueClassFnParam* RogueFnParam__init_object( RogueClassFnParam* THIS )
{
  return (RogueClassFnParam*)(THIS);
}

RogueString* RogueFnArgList__to_String( RogueFnArgList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueFnArgList* _auto_1117_2 = (THIS);
    RogueInteger _auto_1118_3 = (0);
    for (;_auto_1118_3 < _auto_1117_2->count;++_auto_1118_3)
    {
      RogueClassFnArg* value_4 = (((RogueClassFnArg*)(_auto_1117_2->data->objects[_auto_1118_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueFnArgList__type_name( RogueFnArgList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[941]);
}

RogueFnArgList* RogueFnArgList__init_object( RogueFnArgList* THIS )
{
  return (RogueFnArgList*)(THIS);
}

RogueFnArgList* RogueFnArgList__init( RogueFnArgList* THIS )
{
  RogueFnArgList__init__Integer( THIS, 10 );
  return (RogueFnArgList*)(THIS);
}

RogueFnArgList* RogueFnArgList__init__Integer( RogueFnArgList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassFnArg*), true );
  return (RogueFnArgList*)(THIS);
}

RogueFnArgList* RogueFnArgList__add__FnArg( RogueFnArgList* THIS, RogueClassFnArg* value_0 )
{
  ((RogueFnArgList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueFnArgList*)(THIS);
}

RogueInteger RogueFnArgList__capacity( RogueFnArgList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueFnArgList* RogueFnArgList__reserve__Integer( RogueFnArgList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassFnArg*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueFnArgList__capacity( THIS ))) + ((RogueFnArgList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassFnArg*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueFnArgList*)(THIS);
}

RogueString* RogueFnArg__type_name( RogueClassFnArg* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[578]);
}

RogueClassFnArg* RogueFnArg__init__String_Cmd( RogueClassFnArg* THIS, RogueString* _auto_728_0, RogueClassCmd* _auto_729_1 )
{
  THIS->value = _auto_729_1;
  THIS->name = _auto_728_0;
  return (RogueClassFnArg*)(THIS);
}

RogueClassFnArg* RogueFnArg__set_type__Type( RogueClassFnArg* THIS, RogueClassType* _auto_730_0 )
{
  THIS->_type = _auto_730_0;
  return (RogueClassFnArg*)(THIS);
}

RogueClassFnArg* RogueFnArg__init_object( RogueClassFnArg* THIS )
{
  return (RogueClassFnArg*)(THIS);
}

RogueString* RogueCmdCreateFunction__type_name( RogueClassCmdCreateFunction* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[671]);
}

RogueClassCmdCreateFunction* RogueCmdCreateFunction__clone__CloneArgs( RogueClassCmdCreateFunction* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueFnArgList* args2_1 = 0;
  if (!!(THIS->with_args))
  {
    args2_1 = ((RogueFnArgList*)((RogueFnArgList__init( ((RogueFnArgList*)Rogue_program.type_FnArgList->create_and_init_object()) ))));
    {
      RogueFnArgList* _auto_1127_2 = (THIS->with_args);
      RogueInteger _auto_1128_3 = (0);
      for (;_auto_1128_3 < _auto_1127_2->count;++_auto_1128_3)
      {
        RogueClassFnArg* arg_4 = (((RogueClassFnArg*)(_auto_1127_2->data->objects[_auto_1128_3])));
        RogueFnArgList__add__FnArg( args2_1, ((RogueFnArg__set_type__Type( ((RogueFnArg__init__String_Cmd( ((RogueClassFnArg*)Rogue_program.type_FnArg->create_and_init_object()), arg_4->name, (call_ROGUEM44( 5, (RogueClassCmd*)(arg_4->value), clone_args_0 )) ))), arg_4->_type ))) );
      }
    }
  }
  return (RogueClassCmdCreateFunction*)(((RogueCmdCreateFunction__init__Token_FnParamList_Type_FnArgList_CmdStatementList( ((RogueClassCmdCreateFunction*)Rogue_program.type_CmdCreateFunction->create_and_init_object()), THIS->t, THIS->parameters, THIS->_return_type, args2_1, ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 ))) ))));
}

RogueClassCmd* RogueCmdCreateFunction__resolve__Scope( RogueClassCmdCreateFunction* THIS, RogueClassScope* scope_0 )
{
  RogueTypeList* parameter_types_1 = 0;
  if ((!!(THIS->parameters) && !!(THIS->parameters->count)))
  {
    parameter_types_1 = ((RogueTypeList*)((RogueTypeList__init( ((RogueTypeList*)Rogue_program.type_TypeList->create_and_init_object()) ))));
    {
      RogueFnParamList* _auto_1129_9 = (THIS->parameters);
      RogueInteger _auto_1130_10 = (0);
      for (;_auto_1130_10 < _auto_1129_9->count;++_auto_1130_10)
      {
        RogueClassFnParam* param_11 = (((RogueClassFnParam*)(_auto_1129_9->data->objects[_auto_1130_10])));
        RogueTypeList__add__Type( parameter_types_1, param_11->_type );
      }
    }
  }
  RogueString* fn_name_2 = (((RogueString__operatorPLUS__Integer( Rogue_program.literal_strings[753], ((RogueProgram__next_unique_integer( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))) ))));
  RogueClassType* fn_type_3 = (((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, fn_name_2 ))));
  fn_type_3->defined = true;
  RogueAttributes__add__Integer( fn_type_3->attributes, 0 );
  RogueClassType* base_type_4 = (((RogueProgram__get_callback_type_reference__Token_TypeList_Type( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, parameter_types_1, THIS->_return_type ))));
  RogueTypeList__add__Type( fn_type_3->base_types, base_type_4 );
  RogueClassMethod* m_call_5 = (((RogueType__add_method__Token_String( fn_type_3, THIS->t, Rogue_program.literal_strings[239] ))));
  if (!!(THIS->parameters))
  {
    {
      RogueFnParamList* _auto_1131_12 = (THIS->parameters);
      RogueInteger _auto_1132_13 = (0);
      for (;_auto_1132_13 < _auto_1131_12->count;++_auto_1132_13)
      {
        RogueClassFnParam* param_14 = (((RogueClassFnParam*)(_auto_1131_12->data->objects[_auto_1132_13])));
        RogueMethod__add_parameter__Token_String_Type( m_call_5, THIS->t, param_14->name, param_14->_type );
      }
    }
  }
  m_call_5->_return_type = THIS->_return_type;
  m_call_5->statements = THIS->statements;
  if (!!(THIS->with_args))
  {
    RogueClassMethod* m_init_6 = (((RogueType__add_method__Token_String( fn_type_3, THIS->t, Rogue_program.literal_strings[285] ))));
    RogueClassCmdArgs* create_args_7 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)Rogue_program.type_CmdArgs->create_and_init_object()) ))));
    {
      RogueFnArgList* _auto_1133_15 = (THIS->with_args);
      RogueInteger _auto_1134_16 = (0);
      for (;_auto_1134_16 < _auto_1133_15->count;++_auto_1134_16)
      {
        RogueClassFnArg* fn_arg_17 = (((RogueClassFnArg*)(_auto_1133_15->data->objects[_auto_1134_16])));
        RogueClassCmd* arg_8 = (((RogueCmd__require_value( (call_ROGUEM42( 23, (RogueClassCmd*)(fn_arg_17->value), scope_0 )) ))));
        RogueCmdList__add__Cmd( ((RogueCmdList*)create_args_7), arg_8 );
        RogueType__add_property__Token_String_Type_Cmd( fn_type_3, fn_arg_17->value->t, fn_arg_17->name, (call_ROGUEM46( 28, (RogueClassCmd*)(arg_8) )), ((RogueClassCmd*)(NULL)) );
        RogueMethod__add_parameter__Token_String_Type( m_init_6, fn_arg_17->value->t, fn_arg_17->name, ((RogueClassType*)(NULL)) );
      }
    }
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, fn_name_2, create_args_7 ))), scope_0 ))));
  }
  else
  {
    RogueAttributes__add__Integer( fn_type_3->attributes, 1024 );
    return (RogueClassCmd*)(((RogueCmdReadSingleton__resolve__Scope( ((RogueCmdReadSingleton__init__Token_Type( ((RogueClassCmdReadSingleton*)Rogue_program.type_CmdReadSingleton->create_and_init_object()), THIS->t, fn_type_3 ))), scope_0 ))));
  }
}

RogueClassCmdCreateFunction* RogueCmdCreateFunction__init_object( RogueClassCmdCreateFunction* THIS )
{
  return (RogueClassCmdCreateFunction*)(THIS);
}

RogueClassCmdCreateFunction* RogueCmdCreateFunction__init__Token_FnParamList_Type_FnArgList_CmdStatementList( RogueClassCmdCreateFunction* THIS, RogueClassToken* _auto_732_0, RogueFnParamList* _auto_733_1, RogueClassType* _auto_734_2, RogueFnArgList* _auto_735_3, RogueClassCmdStatementList* _auto_736_4 )
{
  THIS->statements = _auto_736_4;
  THIS->with_args = _auto_735_3;
  THIS->_return_type = _auto_734_2;
  THIS->parameters = _auto_733_1;
  THIS->t = _auto_732_0;
  return (RogueClassCmdCreateFunction*)(THIS);
}

RogueString* RogueCmdNativeCode__type_name( RogueClassCmdNativeCode* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[672]);
}

RogueClassCmdNativeCode* RogueCmdNativeCode__clone__CloneArgs( RogueClassCmdNativeCode* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdNativeCode*)(((RogueCmdNativeCode__init__Token_String_Type( ((RogueClassCmdNativeCode*)Rogue_program.type_CmdNativeCode->create_and_init_object()), THIS->t, THIS->code, THIS->_result_type ))));
}

RogueLogical RogueCmdNativeCode__requires_semicolon( RogueClassCmdNativeCode* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdNativeCode__resolve__Scope( RogueClassCmdNativeCode* THIS, RogueClassScope* scope_0 )
{
  THIS->this_method = scope_0->this_method;
  if (!!(THIS->_result_type))
  {
    RogueType__organize( THIS->_result_type );
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdNativeCode__trace_used_code( RogueClassCmdNativeCode* THIS )
{
}

RogueClassType* Rogue_CmdNativeCode__type( RogueClassCmdNativeCode* THIS )
{
  return (RogueClassType*)(THIS->_result_type);
}

void RogueCmdNativeCode__write_cpp__CPPWriter_Logical( RogueClassCmdNativeCode* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueLogical needs_newline_2 = ((((RogueString__contains__String( THIS->code, ((RogueCharacter__to_String( (RogueCharacter)10 ))) ))) || !(!!(THIS->_result_type))));
  {
    RogueClassLineReader* _auto_1135_10 = (((RogueLineReader__init__String( ((RogueClassLineReader*)Rogue_program.type_LineReader->create_and_init_object()), THIS->code ))));
    while (((RogueLineReader__has_another( _auto_1135_10 ))))
    {
      RogueString* line_11 = (((RogueLineReader__read( _auto_1135_10 ))));
      RogueInteger original_indent_3 = (writer_0->indent);
      if (((RogueString__begins_with__Character( line_11, (RogueCharacter)'#' ))))
      {
        writer_0->indent = 0;
      }
      RogueOptionalInteger marker_4 = (((RogueString__locate__Character_OptionalInteger( line_11, (RogueCharacter)'$', RogueOptionalInteger() ))));
      while (marker_4.exists)
      {
        RogueInteger i1_5 = (marker_4.value);
        if (i1_5 > 0)
        {
          RogueCPPWriter__print__String( writer_0, ((RogueString__leftmost__Integer( line_11, i1_5 ))) );
        }
        RogueInteger i2_6 = ((i1_5 + 2));
        while ((i2_6 < line_11->count && ((RogueCharacter__is_identifier( line_11->characters[i2_6] )))))
        {
          ++i2_6;
        }
        RogueString* name_7 = (((RogueString__from__Integer_Integer( line_11, (i1_5 + 1), (i2_6 - 1) ))));
        line_11 = ((RogueString*)((RogueString__from__Integer( line_11, i2_6 ))));
        if (((RogueString__operatorLESSTHANGREATERTHAN__String( name_7, Rogue_program.literal_strings[222] ))) == 0)
        {
          RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[222] );
        }
        else if (((RogueString__operatorLESSTHANGREATERTHAN__String( name_7, Rogue_program.literal_strings[147] ))) == 0)
        {
          RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[767] );
        }
        else
        {
          RogueLogical found_8 = (false);
          {
            RogueLocalList* _auto_1136_12 = (THIS->this_method->locals);
            RogueInteger _auto_1137_13 = (0);
            for (;_auto_1137_13 < _auto_1136_12->count;++_auto_1137_13)
            {
              RogueClassLocal* v_14 = (((RogueClassLocal*)(_auto_1136_12->data->objects[_auto_1137_13])));
              if (((RogueString__operatorLESSTHANGREATERTHAN__String( v_14->name, name_7 ))) == 0)
              {
                found_8 = ((RogueLogical)true);
                RogueCPPWriter__print__String( writer_0, ((RogueLocal__cpp_name( v_14 ))) );
                goto _auto_1138;
              }
            }
          }
          _auto_1138:;
          if (!(found_8))
          {
            RogueClassProperty* p_9 = (((RogueString_PropertyTable__get__String( THIS->this_method->type_context->property_lookup, name_7 ))));
            if (!!(p_9))
            {
              found_8 = ((RogueLogical)true);
              RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[798] ))), p_9->cpp_name );
            }
          }
          if (!(found_8))
          {
            RogueCPPWriter__print__String( ((RogueCPPWriter__print__Character_Logical( writer_0, (RogueCharacter)'$', false ))), name_7 );
          }
        }
        marker_4 = ((RogueOptionalInteger)((RogueString__locate__Character_OptionalInteger( line_11, (RogueCharacter)'$', RogueOptionalInteger() ))));
      }
      if (needs_newline_2)
      {
        if (!!(line_11->count))
        {
          RogueCPPWriter__println__String( writer_0, line_11 );
        }
        else
        {
          RogueCPPWriter__println( writer_0 );
        }
      }
      else if (!!(line_11->count))
      {
        RogueCPPWriter__print__String( writer_0, line_11 );
      }
      writer_0->indent = original_indent_3;
    }
  }
}

RogueClassCmdNativeCode* RogueCmdNativeCode__init_object( RogueClassCmdNativeCode* THIS )
{
  return (RogueClassCmdNativeCode*)(THIS);
}

RogueClassCmdNativeCode* RogueCmdNativeCode__init__Token_String_Type( RogueClassCmdNativeCode* THIS, RogueClassToken* _auto_737_0, RogueString* _auto_738_1, RogueClassType* _auto_739_2 )
{
  THIS->_result_type = _auto_739_2;
  THIS->code = _auto_738_1;
  THIS->t = _auto_737_0;
  return (RogueClassCmdNativeCode*)(THIS);
}

RogueString* RogueString_TokenTypeTableEntryList__to_String( RogueTableEntry_of_String_TokenTypeList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_TokenTypeList* _auto_1139_2 = (THIS);
    RogueInteger _auto_1140_3 = (0);
    for (;_auto_1140_3 < _auto_1139_2->count;++_auto_1140_3)
    {
      RogueClassString_TokenTypeTableEntry* value_4 = (((RogueClassString_TokenTypeTableEntry*)(_auto_1139_2->data->objects[_auto_1140_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueString_TokenTypeTableEntryList__type_name( RogueTableEntry_of_String_TokenTypeList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[942]);
}

RogueTableEntry_of_String_TokenTypeList* RogueString_TokenTypeTableEntryList__init_object( RogueTableEntry_of_String_TokenTypeList* THIS )
{
  return (RogueTableEntry_of_String_TokenTypeList*)(THIS);
}

RogueTableEntry_of_String_TokenTypeList* RogueString_TokenTypeTableEntryList__init__Integer_String_TokenTypeTableEntry( RogueTableEntry_of_String_TokenTypeList* THIS, RogueInteger initial_capacity_0, RogueClassString_TokenTypeTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_TokenTypeTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_770_3 = (initial_capacity_0);
    for (;i_2 <= _auto_770_3;++i_2)
    {
      RogueString_TokenTypeTableEntryList__add__String_TokenTypeTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_TokenTypeList*)(THIS);
}

RogueTableEntry_of_String_TokenTypeList* RogueString_TokenTypeTableEntryList__add__String_TokenTypeTableEntry( RogueTableEntry_of_String_TokenTypeList* THIS, RogueClassString_TokenTypeTableEntry* value_0 )
{
  ((RogueString_TokenTypeTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_TokenTypeList*)(THIS);
}

RogueInteger RogueString_TokenTypeTableEntryList__capacity( RogueTableEntry_of_String_TokenTypeList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_TokenTypeList* RogueString_TokenTypeTableEntryList__reserve__Integer( RogueTableEntry_of_String_TokenTypeList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_TokenTypeTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_TokenTypeTableEntryList__capacity( THIS ))) + ((RogueString_TokenTypeTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_TokenTypeTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_TokenTypeList*)(THIS);
}

RogueString* RogueString_TokenTypeTableEntry__type_name( RogueClassString_TokenTypeTableEntry* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[579]);
}

RogueClassString_TokenTypeTableEntry* RogueString_TokenTypeTableEntry__init__String_TokenType_Integer( RogueClassString_TokenTypeTableEntry* THIS, RogueString* _key_0, RogueClassTokenType* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_TokenTypeTableEntry*)(THIS);
}

RogueClassString_TokenTypeTableEntry* RogueString_TokenTypeTableEntry__init_object( RogueClassString_TokenTypeTableEntry* THIS )
{
  return (RogueClassString_TokenTypeTableEntry*)(THIS);
}

RogueString* RogueString_TokenTypeTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[609]);
}

RogueString* RogueString_TypeSpecializerTableEntryList__to_String( RogueTableEntry_of_String_TypeSpecializerList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_TypeSpecializerList* _auto_1149_2 = (THIS);
    RogueInteger _auto_1150_3 = (0);
    for (;_auto_1150_3 < _auto_1149_2->count;++_auto_1150_3)
    {
      RogueClassString_TypeSpecializerTableEntry* value_4 = (((RogueClassString_TypeSpecializerTableEntry*)(_auto_1149_2->data->objects[_auto_1150_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueString_TypeSpecializerTableEntryList__type_name( RogueTableEntry_of_String_TypeSpecializerList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[943]);
}

RogueTableEntry_of_String_TypeSpecializerList* RogueString_TypeSpecializerTableEntryList__init_object( RogueTableEntry_of_String_TypeSpecializerList* THIS )
{
  return (RogueTableEntry_of_String_TypeSpecializerList*)(THIS);
}

RogueTableEntry_of_String_TypeSpecializerList* RogueString_TypeSpecializerTableEntryList__init__Integer_String_TypeSpecializerTableEntry( RogueTableEntry_of_String_TypeSpecializerList* THIS, RogueInteger initial_capacity_0, RogueClassString_TypeSpecializerTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_TypeSpecializerTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_774_3 = (initial_capacity_0);
    for (;i_2 <= _auto_774_3;++i_2)
    {
      RogueString_TypeSpecializerTableEntryList__add__String_TypeSpecializerTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_TypeSpecializerList*)(THIS);
}

RogueTableEntry_of_String_TypeSpecializerList* RogueString_TypeSpecializerTableEntryList__add__String_TypeSpecializerTableEntry( RogueTableEntry_of_String_TypeSpecializerList* THIS, RogueClassString_TypeSpecializerTableEntry* value_0 )
{
  ((RogueString_TypeSpecializerTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_TypeSpecializerList*)(THIS);
}

RogueInteger RogueString_TypeSpecializerTableEntryList__capacity( RogueTableEntry_of_String_TypeSpecializerList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_TypeSpecializerList* RogueString_TypeSpecializerTableEntryList__reserve__Integer( RogueTableEntry_of_String_TypeSpecializerList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_TypeSpecializerTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_TypeSpecializerTableEntryList__capacity( THIS ))) + ((RogueString_TypeSpecializerTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_TypeSpecializerTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_TypeSpecializerList*)(THIS);
}

RogueString* RogueString_TypeSpecializerTableEntry__type_name( RogueClassString_TypeSpecializerTableEntry* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[580]);
}

RogueClassString_TypeSpecializerTableEntry* RogueString_TypeSpecializerTableEntry__init__String_TypeSpecializer_Integer( RogueClassString_TypeSpecializerTableEntry* THIS, RogueString* _key_0, RogueClassTypeSpecializer* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_TypeSpecializerTableEntry*)(THIS);
}

RogueClassString_TypeSpecializerTableEntry* RogueString_TypeSpecializerTableEntry__init_object( RogueClassString_TypeSpecializerTableEntry* THIS )
{
  return (RogueClassString_TypeSpecializerTableEntry*)(THIS);
}

RogueString* RogueString_TypeSpecializerTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[610]);
}

RogueString* RogueString_CmdLabelTableEntryList__to_String( RogueTableEntry_of_String_CmdLabelList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_CmdLabelList* _auto_1159_2 = (THIS);
    RogueInteger _auto_1160_3 = (0);
    for (;_auto_1160_3 < _auto_1159_2->count;++_auto_1160_3)
    {
      RogueClassString_CmdLabelTableEntry* value_4 = (((RogueClassString_CmdLabelTableEntry*)(_auto_1159_2->data->objects[_auto_1160_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueString_CmdLabelTableEntryList__type_name( RogueTableEntry_of_String_CmdLabelList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[944]);
}

RogueTableEntry_of_String_CmdLabelList* RogueString_CmdLabelTableEntryList__init_object( RogueTableEntry_of_String_CmdLabelList* THIS )
{
  return (RogueTableEntry_of_String_CmdLabelList*)(THIS);
}

RogueTableEntry_of_String_CmdLabelList* RogueString_CmdLabelTableEntryList__init__Integer_String_CmdLabelTableEntry( RogueTableEntry_of_String_CmdLabelList* THIS, RogueInteger initial_capacity_0, RogueClassString_CmdLabelTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_CmdLabelTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_808_3 = (initial_capacity_0);
    for (;i_2 <= _auto_808_3;++i_2)
    {
      RogueString_CmdLabelTableEntryList__add__String_CmdLabelTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_CmdLabelList*)(THIS);
}

RogueTableEntry_of_String_CmdLabelList* RogueString_CmdLabelTableEntryList__add__String_CmdLabelTableEntry( RogueTableEntry_of_String_CmdLabelList* THIS, RogueClassString_CmdLabelTableEntry* value_0 )
{
  ((RogueString_CmdLabelTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_CmdLabelList*)(THIS);
}

RogueInteger RogueString_CmdLabelTableEntryList__capacity( RogueTableEntry_of_String_CmdLabelList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_CmdLabelList* RogueString_CmdLabelTableEntryList__reserve__Integer( RogueTableEntry_of_String_CmdLabelList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_CmdLabelTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_CmdLabelTableEntryList__capacity( THIS ))) + ((RogueString_CmdLabelTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_CmdLabelTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_CmdLabelList*)(THIS);
}

RogueString* RogueString_CmdLabelTableEntry__type_name( RogueClassString_CmdLabelTableEntry* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[581]);
}

RogueClassString_CmdLabelTableEntry* RogueString_CmdLabelTableEntry__init__String_CmdLabel_Integer( RogueClassString_CmdLabelTableEntry* THIS, RogueString* _key_0, RogueClassCmdLabel* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_CmdLabelTableEntry*)(THIS);
}

RogueClassString_CmdLabelTableEntry* RogueString_CmdLabelTableEntry__init_object( RogueClassString_CmdLabelTableEntry* THIS )
{
  return (RogueClassString_CmdLabelTableEntry*)(THIS);
}

RogueString* RogueString_CmdLabelTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[611]);
}

RogueString* RogueMacroArgs__type_name( RogueClassMacroArgs* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[837]);
}

RogueClassMacroArgs* RogueMacroArgs__init_object( RogueClassMacroArgs* THIS )
{
  return (RogueClassMacroArgs*)(THIS);
}

RogueClassMacroArgs* RogueMacroArgs__init__Cmd_Method_CmdArgs( RogueClassMacroArgs* THIS, RogueClassCmd* _auto_812_0, RogueClassMethod* _auto_813_1, RogueClassCmdArgs* args_2 )
{
  THIS->method_info = _auto_813_1;
  THIS->this_context = _auto_812_0;
  if (!!(args_2))
  {
    THIS->arg_lookup = ((RogueString_CmdTable__init( ((RogueClassString_CmdTable*)Rogue_program.type_String_CmdTable->create_and_init_object()) )));
    {
      RogueClassCmdArgs* _auto_1169_3 = (args_2);
      RogueInteger index_4 = (0);
      for (;index_4 < _auto_1169_3->count;++index_4)
      {
        RogueString_CmdTable__set__String_Cmd( THIS->arg_lookup, ((RogueClassLocal*)(THIS->method_info->parameters->data->objects[index_4]))->name, ((RogueClassCmd*)(args_2->data->objects[index_4])) );
      }
    }
  }
  return (RogueClassMacroArgs*)(THIS);
}

RogueClassCmd* RogueMacroArgs__inline_this( RogueClassMacroArgs* THIS )
{
  return (RogueClassCmd*)((call_ROGUEM44( 5, (RogueClassCmd*)(THIS->this_context), ((RogueClassCloneArgs*)(NULL)) )));
}

RogueClassCmd* RogueMacroArgs__inline_access__CmdAccess( RogueClassMacroArgs* THIS, RogueClassCmdAccess* access_0 )
{
  if (!!(access_0->context))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(access_0)));
  }
  RogueClassCmd* arg_1 = (((RogueString_CmdTable__get__String( THIS->arg_lookup, access_0->name ))));
  if (!(!!(arg_1)))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(access_0)));
  }
  RogueClassCmd* dup_2 = ((call_ROGUEM44( 5, (RogueClassCmd*)(arg_1), ((RogueClassCloneArgs*)(NULL)) )));
  if (!!(access_0->args))
  {
    RogueClassCmdAccess* new_access_3 = (((RogueClassCmdAccess*)(RogueObject::as(dup_2,Rogue_program.type_CmdAccess))));
    if (!!(new_access_3))
    {
      if (!!(new_access_3->args))
      {
        throw ((RogueToken__error__String( access_0->t, Rogue_program.literal_strings[673] )));
      }
      else
      {
        new_access_3->args = access_0->args;
      }
    }
    else
    {
      throw ((RogueToken__error__String( access_0->t, Rogue_program.literal_strings[673] )));
    }
  }
  return (RogueClassCmd*)(dup_2);
}

RogueClassCmd* RogueMacroArgs__inline_read_local__CmdReadLocal( RogueClassMacroArgs* THIS, RogueClassCmdReadLocal* read_cmd_0 )
{
  RogueClassCmd* arg_1 = (((RogueString_CmdTable__get__String( THIS->arg_lookup, read_cmd_0->local_info->name ))));
  if (!(!!(arg_1)))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(read_cmd_0)));
  }
  return (RogueClassCmd*)((call_ROGUEM44( 5, (RogueClassCmd*)(arg_1), ((RogueClassCloneArgs*)(NULL)) )));
}

RogueClassCmd* RogueMacroArgs__inline_write_local__CmdWriteLocal( RogueClassMacroArgs* THIS, RogueClassCmdWriteLocal* write_cmd_0 )
{
  RogueClassCmd* arg_1 = (((RogueString_CmdTable__get__String( THIS->arg_lookup, write_cmd_0->local_info->name ))));
  if (!(!!(arg_1)))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(write_cmd_0)));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)Rogue_program.type_CmdAssign->create_and_init_object()), write_cmd_0->t, (call_ROGUEM44( 5, (RogueClassCmd*)(arg_1), ((RogueClassCloneArgs*)(NULL)) )), write_cmd_0->new_value ))))));
}

RogueString* RogueCmdReadSingleton__type_name( RogueClassCmdReadSingleton* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[950]);
}

RogueClassCmd* RogueCmdReadSingleton__clone__CloneArgs( RogueClassCmdReadSingleton* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadSingleton__init__Token_Type( ((RogueClassCmdReadSingleton*)Rogue_program.type_CmdReadSingleton->create_and_init_object()), THIS->t, THIS->_of_type ))))));
}

void RogueCmdReadSingleton__require_type_context( RogueClassCmdReadSingleton* THIS )
{
}

RogueClassCmd* RogueCmdReadSingleton__resolve__Scope( RogueClassCmdReadSingleton* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->_of_type );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdReadSingleton__trace_used_code( RogueClassCmdReadSingleton* THIS )
{
  RogueType__trace_used_code( THIS->_of_type );
}

RogueClassType* Rogue_CmdReadSingleton__type( RogueClassCmdReadSingleton* THIS )
{
  return (RogueClassType*)(THIS->_of_type);
}

void RogueCmdReadSingleton__write_cpp__CPPWriter_Logical( RogueClassCmdReadSingleton* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(((RogueType__is_singleton( THIS->_of_type )))))
  {
    throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), THIS->_of_type->name ))), Rogue_program.literal_strings[799] ))) ))) )));
  }
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[450] ))), THIS->_of_type->cpp_class_name );
  if (((RogueType__is_reference( THIS->_of_type ))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[191] );
  }
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[800] ))), THIS->_of_type->cpp_name ))), Rogue_program.literal_strings[778] );
}

RogueClassCmdReadSingleton* RogueCmdReadSingleton__init_object( RogueClassCmdReadSingleton* THIS )
{
  return (RogueClassCmdReadSingleton*)(THIS);
}

RogueClassCmdReadSingleton* RogueCmdReadSingleton__init__Token_Type( RogueClassCmdReadSingleton* THIS, RogueClassToken* _auto_814_0, RogueClassType* _auto_815_1 )
{
  THIS->_of_type = _auto_815_1;
  THIS->t = _auto_814_0;
  return (RogueClassCmdReadSingleton*)(THIS);
}

RogueString* RogueCmdCreateArray__type_name( RogueClassCmdCreateArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[951]);
}

RogueClassCmd* RogueCmdCreateArray__clone__CloneArgs( RogueClassCmdCreateArray* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateArray__init__Token_Type_Cmd( ((RogueClassCmdCreateArray*)Rogue_program.type_CmdCreateArray->create_and_init_object()), THIS->t, THIS->_array_type, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->count_cmd), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdCreateArray__resolve__Scope( RogueClassCmdCreateArray* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->_array_type );
  THIS->count_cmd = ((RogueCmd__require_integer( (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->count_cmd), scope_0 )) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdCreateArray__trace_used_code( RogueClassCmdCreateArray* THIS )
{
  RogueType__trace_used_code( THIS->_array_type );
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->count_cmd) );
}

RogueClassType* Rogue_CmdCreateArray__type( RogueClassCmdCreateArray* THIS )
{
  return (RogueClassType*)(THIS->_array_type);
}

void RogueCmdCreateArray__write_cpp__CPPWriter_Logical( RogueClassCmdCreateArray* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[801] );
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->count_cmd), writer_0, false );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[802] ))), THIS->_array_type->_element_type ))), Rogue_program.literal_strings[102] );
  if (((RogueType__is_reference( THIS->_array_type->_element_type ))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[803] );
  }
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[448] );
}

RogueClassCmdCreateArray* RogueCmdCreateArray__init_object( RogueClassCmdCreateArray* THIS )
{
  return (RogueClassCmdCreateArray*)(THIS);
}

RogueClassCmdCreateArray* RogueCmdCreateArray__init__Token_Type_CmdArgs( RogueClassCmdCreateArray* THIS, RogueClassToken* _auto_816_0, RogueClassType* _auto_817_1, RogueClassCmdArgs* args_2 )
{
  THIS->_array_type = _auto_817_1;
  THIS->t = _auto_816_0;
  if ((args_2 == NULL || args_2->count != 1))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[676] )));
  }
  THIS->count_cmd = ((RogueClassCmd*)(args_2->data->objects[0]));
  return (RogueClassCmdCreateArray*)(THIS);
}

RogueClassCmdCreateArray* RogueCmdCreateArray__init__Token_Type_Cmd( RogueClassCmdCreateArray* THIS, RogueClassToken* _auto_818_0, RogueClassType* _auto_819_1, RogueClassCmd* _auto_820_2 )
{
  THIS->count_cmd = _auto_820_2;
  THIS->_array_type = _auto_819_1;
  THIS->t = _auto_818_0;
  return (RogueClassCmdCreateArray*)(THIS);
}

RogueString* RogueCmdCallRoutine__type_name( RogueClassCmdCallRoutine* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[972]);
}

RogueClassCmd* RogueCmdCallRoutine__clone__CloneArgs( RogueClassCmdCallRoutine* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCallRoutine__init__Token_Method_CmdArgs( ((RogueClassCmdCallRoutine*)Rogue_program.type_CmdCallRoutine->create_and_init_object()), THIS->t, THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

void RogueCmdCallRoutine__write_cpp__CPPWriter_Logical( RogueClassCmdCallRoutine* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[176] ))), THIS->method_info->_return_type, THIS->method_info->_return_type );
  }
  RogueCPPWriter__print__String( writer_0, THIS->method_info->cpp_name );
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[176] );
  if (!!(THIS->args->count))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[255] );
    RogueInteger i_2 = (0);
    {
      RogueClassCmdArgs* _auto_1172_4 = (THIS->args);
      RogueInteger _auto_1173_5 = (0);
      for (;_auto_1173_5 < _auto_1172_4->count;++_auto_1173_5)
      {
        RogueClassCmd* arg_6 = (((RogueClassCmd*)(_auto_1172_4->data->objects[_auto_1173_5])));
        if (i_2 > 0)
        {
          RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[403] );
        }
        RogueClassType* param_type_3 = (((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type);
        if (((RogueType__is_aspect( param_type_3 ))))
        {
          RogueCPPWriter__print__String( ((RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[176] ))), (call_ROGUEM46( 28, (RogueClassCmd*)(arg_6) )), ((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type ))), Rogue_program.literal_strings[176] );
          call_ROGUEM52( 29, (RogueClassCmd*)(arg_6), writer_0, false );
          RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[778] );
        }
        else
        {
          call_ROGUEM52( 29, (RogueClassCmd*)(arg_6), writer_0, false );
        }
        ++i_2;
      }
    }
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[255] );
  }
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] );
  }
}

RogueClassCmdCallRoutine* RogueCmdCallRoutine__init_object( RogueClassCmdCallRoutine* THIS )
{
  return (RogueClassCmdCallRoutine*)(THIS);
}

RogueClassCmdCallRoutine* RogueCmdCallRoutine__init__Token_Method_CmdArgs( RogueClassCmdCallRoutine* THIS, RogueClassToken* _auto_825_0, RogueClassMethod* _auto_826_1, RogueClassCmdArgs* _auto_827_2 )
{
  THIS->args = _auto_827_2;
  THIS->method_info = _auto_826_1;
  THIS->t = _auto_825_0;
  return (RogueClassCmdCallRoutine*)(THIS);
}

RogueString* RogueCmdCall__type_name( RogueClassCmdCall* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[952]);
}

RogueClassCmd* RogueCmdCall__resolve__Scope( RogueClassCmdCall* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->context))
  {
    THIS->context = ((RogueCmd__require_value( (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->context), scope_0 )) )));
  }
  RogueCmdArgs__resolve__Scope( THIS->args, scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdCall__trace_used_code( RogueClassCmdCall* THIS )
{
  if (!!(THIS->context))
  {
    call_ROGUEM48( 27, (RogueClassCmd*)(THIS->context) );
  }
  RogueMethod__trace_used_code( THIS->method_info );
  {
    RogueClassCmdArgs* _auto_1170_0 = (THIS->args);
    RogueInteger _auto_1171_1 = (0);
    for (;_auto_1171_1 < _auto_1170_0->count;++_auto_1171_1)
    {
      RogueClassCmd* arg_2 = (((RogueClassCmd*)(_auto_1170_0->data->objects[_auto_1171_1])));
      call_ROGUEM48( 27, (RogueClassCmd*)(arg_2) );
    }
  }
}

RogueClassType* Rogue_CmdCall__type( RogueClassCmdCall* THIS )
{
  return (RogueClassType*)(THIS->method_info->_return_type);
}

RogueClassCmdCall* RogueCmdCall__init_object( RogueClassCmdCall* THIS )
{
  return (RogueClassCmdCall*)(THIS);
}

RogueClassCmdCall* RogueCmdCall__init__Token_Cmd_Method_CmdArgs( RogueClassCmdCall* THIS, RogueClassToken* _auto_821_0, RogueClassCmd* _auto_822_1, RogueClassMethod* _auto_823_2, RogueClassCmdArgs* _auto_824_3 )
{
  THIS->args = _auto_824_3;
  THIS->method_info = _auto_823_2;
  THIS->context = _auto_822_1;
  THIS->t = _auto_821_0;
  return (RogueClassCmdCall*)(THIS);
}

RogueString* RogueCmdCreateObject__type_name( RogueClassCmdCreateObject* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[953]);
}

RogueClassCmd* RogueCmdCreateObject__clone__CloneArgs( RogueClassCmdCreateObject* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateObject__init__Token_Type( ((RogueClassCmdCreateObject*)Rogue_program.type_CmdCreateObject->create_and_init_object()), THIS->t, THIS->_of_type ))))));
}

RogueClassCmd* RogueCmdCreateObject__resolve__Scope( RogueClassCmdCreateObject* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->_of_type );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdCreateObject__trace_used_code( RogueClassCmdCreateObject* THIS )
{
  RogueType__trace_used_code( THIS->_of_type );
}

RogueClassType* Rogue_CmdCreateObject__type( RogueClassCmdCreateObject* THIS )
{
  return (RogueClassType*)(THIS->_of_type);
}

void RogueCmdCreateObject__write_cpp__CPPWriter_Logical( RogueClassCmdCreateObject* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[450] ))), THIS->_of_type ))), Rogue_program.literal_strings[102] );
  }
  if (((RogueType__is_compound( THIS->_of_type ))))
  {
    RogueCPPWriter__print_type_name__Type( writer_0, THIS->_of_type );
  }
  else
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print_type_info__Type( writer_0, THIS->_of_type ))), Rogue_program.literal_strings[804] );
  }
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] );
  }
}

RogueClassCmdCreateObject* RogueCmdCreateObject__init_object( RogueClassCmdCreateObject* THIS )
{
  return (RogueClassCmdCreateObject*)(THIS);
}

RogueClassCmdCreateObject* RogueCmdCreateObject__init__Token_Type( RogueClassCmdCreateObject* THIS, RogueClassToken* _auto_828_0, RogueClassType* _auto_829_1 )
{
  THIS->_of_type = _auto_829_1;
  THIS->t = _auto_828_0;
  return (RogueClassCmdCreateObject*)(THIS);
}

RogueString* RogueCmdReadSetting__type_name( RogueClassCmdReadSetting* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[954]);
}

RogueClassCmd* RogueCmdReadSetting__clone__CloneArgs( RogueClassCmdReadSetting* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadSetting__init__Token_Property( ((RogueClassCmdReadSetting*)Rogue_program.type_CmdReadSetting->create_and_init_object()), THIS->t, THIS->setting_info ))))));
}

RogueClassCmd* RogueCmdReadSetting__resolve__Scope( RogueClassCmdReadSetting* THIS, RogueClassScope* scope_0 )
{
  RogueType__resolve( THIS->setting_info->type_context );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdReadSetting__trace_used_code( RogueClassCmdReadSetting* THIS )
{
  RogueType__trace_used_code( THIS->setting_info->type_context );
  RogueType__trace_used_code( THIS->setting_info->_type );
}

RogueClassType* Rogue_CmdReadSetting__type( RogueClassCmdReadSetting* THIS )
{
  return (RogueClassType*)(THIS->setting_info->_type);
}

void RogueCmdReadSetting__write_cpp__CPPWriter_Logical( RogueClassCmdReadSetting* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_open_cast__Type_Type( writer_0, ((Rogue_Type__compile_type( THIS->setting_info->_type ))), THIS->setting_info->_type );
  }
  RogueCPPWriter__print__String( ((RogueCPPWriter__print_type_name__Type( writer_0, THIS->setting_info->type_context ))), Rogue_program.literal_strings[158] );
  RogueCPPWriter__print__String( writer_0, THIS->setting_info->cpp_name );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_close_cast__Type_Type( writer_0, ((Rogue_Type__compile_type( THIS->setting_info->_type ))), THIS->setting_info->_type );
  }
}

RogueClassCmdReadSetting* RogueCmdReadSetting__init_object( RogueClassCmdReadSetting* THIS )
{
  return (RogueClassCmdReadSetting*)(THIS);
}

RogueClassCmdReadSetting* RogueCmdReadSetting__init__Token_Property( RogueClassCmdReadSetting* THIS, RogueClassToken* _auto_830_0, RogueClassProperty* _auto_831_1 )
{
  THIS->setting_info = _auto_831_1;
  THIS->t = _auto_830_0;
  return (RogueClassCmdReadSetting*)(THIS);
}

RogueString* RogueCmdReadProperty__type_name( RogueClassCmdReadProperty* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[955]);
}

RogueClassCmd* RogueCmdReadProperty__clone__CloneArgs( RogueClassCmdReadProperty* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)Rogue_program.type_CmdReadProperty->create_and_init_object()), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->context), clone_args_0 )), THIS->property_info ))))));
}

RogueClassCmd* RogueCmdReadProperty__resolve__Scope( RogueClassCmdReadProperty* THIS, RogueClassScope* scope_0 )
{
  THIS->context = ((RogueCmd__require_value( (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->context), scope_0 )) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdReadProperty__resolve_modify__Scope_Integer( RogueClassCmdReadProperty* THIS, RogueClassScope* scope_0, RogueInteger delta_1 )
{
  return (RogueClassCmd*)(((RogueCmdAdjustProperty__resolve__Scope( ((RogueCmdAdjustProperty__init__Token_Cmd_Property_Integer( ((RogueClassCmdAdjustProperty*)Rogue_program.type_CmdAdjustProperty->create_and_init_object()), THIS->t, THIS->context, THIS->property_info, delta_1 ))), scope_0 ))));
}

void RogueCmdReadProperty__trace_used_code( RogueClassCmdReadProperty* THIS )
{
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->context) );
  RogueType__trace_used_code( THIS->property_info->type_context );
  RogueType__trace_used_code( THIS->property_info->_type );
}

RogueClassType* Rogue_CmdReadProperty__type( RogueClassCmdReadProperty* THIS )
{
  return (RogueClassType*)(THIS->property_info->_type);
}

void RogueCmdReadProperty__write_cpp__CPPWriter_Logical( RogueClassCmdReadProperty* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_open_cast__Type_Type( writer_0, ((Rogue_Type__compile_type( THIS->property_info->_type ))), THIS->property_info->_type );
  }
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->context), writer_0, false );
  RogueCPPWriter__print_access_operator__Type( writer_0, (call_ROGUEM46( 28, (RogueClassCmd*)(THIS->context) )) );
  RogueCPPWriter__print__String( writer_0, THIS->property_info->cpp_name );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_close_cast__Type_Type( writer_0, ((Rogue_Type__compile_type( THIS->property_info->_type ))), THIS->property_info->_type );
  }
}

RogueClassCmdReadProperty* RogueCmdReadProperty__init_object( RogueClassCmdReadProperty* THIS )
{
  return (RogueClassCmdReadProperty*)(THIS);
}

RogueClassCmdReadProperty* RogueCmdReadProperty__init__Token_Cmd_Property( RogueClassCmdReadProperty* THIS, RogueClassToken* _auto_832_0, RogueClassCmd* _auto_833_1, RogueClassProperty* _auto_834_2 )
{
  THIS->property_info = _auto_834_2;
  THIS->context = _auto_833_1;
  THIS->t = _auto_832_0;
  return (RogueClassCmdReadProperty*)(THIS);
}

RogueString* RogueCmdLogicalizeOptionalValue__type_name( RogueClassCmdLogicalizeOptionalValue* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[956]);
}

RogueClassCmd* RogueCmdLogicalizeOptionalValue__clone__CloneArgs( RogueClassCmdLogicalizeOptionalValue* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLogicalizeOptionalValue__init__Token_Cmd_Logical( ((RogueClassCmdLogicalizeOptionalValue*)Rogue_program.type_CmdLogicalizeOptionalValue->create_and_init_object()), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->value), clone_args_0 )), true ))))));
}

RogueClassCmdLogicalizeOptionalValue* RogueCmdLogicalizeOptionalValue__resolve__Scope( RogueClassCmdLogicalizeOptionalValue* THIS, RogueClassScope* scope_0 )
{
  THIS->value = ((RogueCmd__require_value( (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->value), scope_0 )) )));
  return (RogueClassCmdLogicalizeOptionalValue*)(THIS);
}

void RogueCmdLogicalizeOptionalValue__trace_used_code( RogueClassCmdLogicalizeOptionalValue* THIS )
{
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->value) );
}

RogueClassType* Rogue_CmdLogicalizeOptionalValue__type( RogueClassCmdLogicalizeOptionalValue* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

void RogueCmdLogicalizeOptionalValue__write_cpp__CPPWriter_Logical( RogueClassCmdLogicalizeOptionalValue* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (((RogueType__is_reference( ((Rogue_Cmd__compile_type( THIS->value )))->_element_type ))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[805] );
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->value), writer_0, false );
  }
  else
  {
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->value), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[806] );
  }
}

RogueClassCmdLogicalizeOptionalValue* RogueCmdLogicalizeOptionalValue__init_object( RogueClassCmdLogicalizeOptionalValue* THIS )
{
  return (RogueClassCmdLogicalizeOptionalValue*)(THIS);
}

RogueClassCmdLogicalizeOptionalValue* RogueCmdLogicalizeOptionalValue__init__Token_Cmd_Logical( RogueClassCmdLogicalizeOptionalValue* THIS, RogueClassToken* _auto_835_0, RogueClassCmd* _auto_836_1, RogueLogical _auto_837_2 )
{
  THIS->positive = _auto_837_2;
  THIS->value = _auto_836_1;
  THIS->t = _auto_835_0;
  return (RogueClassCmdLogicalizeOptionalValue*)(THIS);
}

RogueString* RogueCmdWriteLocal__type_name( RogueClassCmdWriteLocal* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[957]);
}

RogueClassCmd* RogueCmdWriteLocal__clone__CloneArgs( RogueClassCmdWriteLocal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassMacroArgs* macro_args_1 = (((RogueClassMacroArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_MacroArgs))));
  if (!!(macro_args_1))
  {
    return (RogueClassCmd*)(((RogueMacroArgs__inline_write_local__CmdWriteLocal( macro_args_1, THIS ))));
  }
  else
  {
    RogueClassTaskArgs* task_args_2 = (((RogueClassTaskArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_TaskArgs))));
    if (!!(task_args_2))
    {
      return (RogueClassCmd*)(((RogueTaskArgs__cmd_write__Token_Local_Cmd( task_args_2, THIS->t, THIS->local_info, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))));
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdWriteLocal__init__Token_Local_Cmd( ((RogueClassCmdWriteLocal*)Rogue_program.type_CmdWriteLocal->create_and_init_object()), THIS->t, THIS->local_info, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->new_value, clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdWriteLocal__resolve__Scope( RogueClassCmdWriteLocal* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->local_info->_type );
  THIS->new_value = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->new_value), scope_0 ));
  THIS->new_value = (call_ROGUEM42( 23, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->new_value), THIS->local_info->_type ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdWriteLocal__trace_used_code( RogueClassCmdWriteLocal* THIS )
{
  RogueType__trace_used_code( THIS->local_info->_type );
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->new_value) );
}

RogueClassType* Rogue_CmdWriteLocal__type( RogueClassCmdWriteLocal* THIS )
{
  return (RogueClassType*)(THIS->local_info->_type);
}

void RogueCmdWriteLocal__write_cpp__CPPWriter_Logical( RogueClassCmdWriteLocal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, ((RogueLocal__cpp_name( THIS->local_info ))) ))), Rogue_program.literal_strings[777] );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[450] ))), THIS->local_info->_type ))), Rogue_program.literal_strings[102] );
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->new_value), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] );
}

RogueClassCmdWriteLocal* RogueCmdWriteLocal__init_object( RogueClassCmdWriteLocal* THIS )
{
  return (RogueClassCmdWriteLocal*)(THIS);
}

RogueClassCmdWriteLocal* RogueCmdWriteLocal__init__Token_Local_Cmd( RogueClassCmdWriteLocal* THIS, RogueClassToken* _auto_839_0, RogueClassLocal* _auto_840_1, RogueClassCmd* _auto_841_2 )
{
  THIS->new_value = _auto_841_2;
  THIS->local_info = _auto_840_1;
  THIS->t = _auto_839_0;
  return (RogueClassCmdWriteLocal*)(THIS);
}

RogueString* RogueCmdOpAssignSetting__type_name( RogueClassCmdOpAssignSetting* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[896]);
}

RogueClassCmd* RogueCmdOpAssignSetting__clone__CloneArgs( RogueClassCmdOpAssignSetting* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdOpAssignSetting__init__Token_Property_TokenType_Cmd( ((RogueClassCmdOpAssignSetting*)Rogue_program.type_CmdOpAssignSetting->create_and_init_object()), THIS->t, THIS->setting_info, THIS->op, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdOpAssignSetting__resolve__Scope( RogueClassCmdOpAssignSetting* THIS, RogueClassScope* scope_0 )
{
  if (((RogueType__is_reference( THIS->setting_info->_type ))))
  {
    RogueString* m_name_1 = (((RogueString__operatorPLUS__String( Rogue_program.literal_strings[296], ((RogueTokenType__to_String( THIS->op ))) ))));
    if (!!(((RogueString_MethodListTable__get__String( THIS->setting_info->_type->method_lookup_by_name, m_name_1 )))))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_Cmd( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdReadSetting__init__Token_Property( ((RogueClassCmdReadSetting*)Rogue_program.type_CmdReadSetting->create_and_init_object()), THIS->t, THIS->setting_info ))))), m_name_1, THIS->new_value ))), scope_0 ))));
    }
    else
    {
      m_name_1 = ((RogueString*)((RogueString__leftmost__Integer( m_name_1, -1 ))));
      if (!!(((RogueString_MethodListTable__get__String( THIS->setting_info->_type->method_lookup_by_name, m_name_1 )))))
      {
        return (RogueClassCmd*)(((RogueCmdWriteSetting__resolve__Scope( ((RogueCmdWriteSetting__init__Token_Property_Cmd( ((RogueClassCmdWriteSetting*)Rogue_program.type_CmdWriteSetting->create_and_init_object()), THIS->t, THIS->setting_info, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdReadSetting__init__Token_Property( ((RogueClassCmdReadSetting*)Rogue_program.type_CmdReadSetting->create_and_init_object()), THIS->t, THIS->setting_info ))))), m_name_1, THIS->new_value ))))) ))), scope_0 ))));
      }
      else
      {
        RogueString* arg_type_2 = ((call_ROGUEM46( 28, (RogueClassCmd*)(THIS->new_value) ))->name);
        throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[723] ))), ((RogueType__to_String( THIS->setting_info->_type ))) ))), Rogue_program.literal_strings[724] ))), m_name_1 ))), Rogue_program.literal_strings[725] ))), arg_type_2 ))), Rogue_program.literal_strings[726] ))), m_name_1 ))), Rogue_program.literal_strings[727] ))), arg_type_2 ))), Rogue_program.literal_strings[342] ))) ))) )));
      }
    }
  }
  {
    RogueClassTokenType* _auto_1178_4 = (THIS->op);
    if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_1178_4), ((RogueObject*)(RogueClassTokenType::symbol_caret_equals)) ))))
    {
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->target, Rogue_program.literal_strings[1] ))) == 0)
      {
        return (RogueClassCmd*)(((RogueCmdWriteSetting__resolve__Scope( ((RogueCmdWriteSetting__init__Token_Property_Cmd( ((RogueClassCmdWriteSetting*)Rogue_program.type_CmdWriteSetting->create_and_init_object()), THIS->t, THIS->setting_info, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdPower*)Rogue_program.type_CmdPower->create_and_init_object())), THIS->t, ((RogueClassCmd*)(((RogueCmdReadSetting__init__Token_Property( ((RogueClassCmdReadSetting*)Rogue_program.type_CmdReadSetting->create_and_init_object()), THIS->t, THIS->setting_info ))))), THIS->new_value ))))) ))), scope_0 ))));
      }
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_1178_4), ((RogueObject*)(RogueClassTokenType::symbol_percent_equals)) ))))
    {
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->target, Rogue_program.literal_strings[1] ))) == 0)
      {
        return (RogueClassCmd*)(((RogueCmdWriteSetting__resolve__Scope( ((RogueCmdWriteSetting__init__Token_Property_Cmd( ((RogueClassCmdWriteSetting*)Rogue_program.type_CmdWriteSetting->create_and_init_object()), THIS->t, THIS->setting_info, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMod*)Rogue_program.type_CmdMod->create_and_init_object())), THIS->t, ((RogueClassCmd*)(((RogueCmdReadSetting__init__Token_Property( ((RogueClassCmdReadSetting*)Rogue_program.type_CmdReadSetting->create_and_init_object()), THIS->t, THIS->setting_info ))))), THIS->new_value ))))) ))), scope_0 ))));
      }
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_1178_4), ((RogueObject*)(RogueClassTokenType::symbol_dot_equals)) ))))
    {
      RogueClassCmdAccess* access_3 = (((RogueClassCmdAccess*)(RogueObject::as(THIS->new_value,Rogue_program.type_CmdAccess))));
      if (!(!!(access_3)))
      {
        throw ((RogueToken__error__String( THIS->new_value->t, Rogue_program.literal_strings[728] )));
      }
      if (!!(access_3->context))
      {
        throw ((RogueToken__error__String( access_3->t, Rogue_program.literal_strings[729] )));
      }
      access_3->context = ((RogueClassCmd*)(((RogueCmdReadSetting__init__Token_Property( ((RogueClassCmdReadSetting*)Rogue_program.type_CmdReadSetting->create_and_init_object()), THIS->t, THIS->setting_info )))));
      return (RogueClassCmd*)(((RogueCmdWriteSetting__resolve__Scope( ((RogueCmdWriteSetting__init__Token_Property_Cmd( ((RogueClassCmdWriteSetting*)Rogue_program.type_CmdWriteSetting->create_and_init_object()), THIS->t, THIS->setting_info, ((RogueClassCmd*)(access_3)) ))), scope_0 ))));
    }
  }
  THIS->new_value = (call_ROGUEM42( 23, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)((call_ROGUEM42( 23, (RogueClassCmd*)(THIS->new_value), scope_0 ))), THIS->setting_info->_type ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdOpAssignSetting__trace_used_code( RogueClassCmdOpAssignSetting* THIS )
{
  RogueType__trace_used_code( THIS->setting_info->type_context );
  RogueType__trace_used_code( THIS->setting_info->_type );
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->new_value) );
}

RogueClassType* Rogue_CmdOpAssignSetting__type( RogueClassCmdOpAssignSetting* THIS )
{
  return (RogueClassType*)(THIS->setting_info->_type);
}

void RogueCmdOpAssignSetting__write_cpp__CPPWriter_Logical( RogueClassCmdOpAssignSetting* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print_type_name__Type( writer_0, THIS->setting_info->type_context ))), Rogue_program.literal_strings[158] );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, THIS->setting_info->cpp_name ))), Rogue_program.literal_strings[255] ))), ((RogueCmdResolvedOpWithAssign__cpp_symbol( ((RogueClassCmdResolvedOpWithAssign*)THIS) ))) ))), Rogue_program.literal_strings[255] );
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->new_value), writer_0, false );
}

RogueClassCmdOpAssignSetting* RogueCmdOpAssignSetting__init_object( RogueClassCmdOpAssignSetting* THIS )
{
  return (RogueClassCmdOpAssignSetting*)(THIS);
}

RogueClassCmdOpAssignSetting* RogueCmdOpAssignSetting__init__Token_Property_TokenType_Cmd( RogueClassCmdOpAssignSetting* THIS, RogueClassToken* _auto_842_0, RogueClassProperty* _auto_843_1, RogueClassTokenType* _auto_844_2, RogueClassCmd* _auto_845_3 )
{
  THIS->new_value = _auto_845_3;
  THIS->op = _auto_844_2;
  THIS->setting_info = _auto_843_1;
  THIS->t = _auto_842_0;
  return (RogueClassCmdOpAssignSetting*)(THIS);
}

RogueString* RogueCmdOpAssignProperty__type_name( RogueClassCmdOpAssignProperty* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[897]);
}

RogueClassCmd* RogueCmdOpAssignProperty__clone__CloneArgs( RogueClassCmdOpAssignProperty* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdOpAssignProperty__init__Token_Cmd_Property_TokenType_Cmd( ((RogueClassCmdOpAssignProperty*)Rogue_program.type_CmdOpAssignProperty->create_and_init_object()), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->context), clone_args_0 )), THIS->property_info, THIS->op, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdOpAssignProperty__resolve__Scope( RogueClassCmdOpAssignProperty* THIS, RogueClassScope* scope_0 )
{
  if (((RogueType__is_reference( THIS->property_info->_type ))))
  {
    RogueString* m_name_1 = (((RogueString__operatorPLUS__String( Rogue_program.literal_strings[296], ((RogueTokenType__to_String( THIS->op ))) ))));
    if (!!(((RogueString_MethodListTable__get__String( THIS->property_info->_type->method_lookup_by_name, m_name_1 )))))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_Cmd( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)Rogue_program.type_CmdReadProperty->create_and_init_object()), THIS->t, THIS->context, THIS->property_info ))))), m_name_1, THIS->new_value ))), scope_0 ))));
    }
    else
    {
      m_name_1 = ((RogueString*)((RogueString__leftmost__Integer( m_name_1, -1 ))));
      if (!!(((RogueString_MethodListTable__get__String( THIS->property_info->_type->method_lookup_by_name, m_name_1 )))))
      {
        return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)Rogue_program.type_CmdWriteProperty->create_and_init_object()), THIS->t, THIS->context, THIS->property_info, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ((RogueClassCmdAccess*)Rogue_program.type_CmdAccess->create_and_init_object()), THIS->t, ((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)Rogue_program.type_CmdReadProperty->create_and_init_object()), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, ((RogueClassCloneArgs*)(NULL)) ))), THIS->property_info ))))), m_name_1, THIS->new_value ))))) ))), scope_0 ))));
      }
      else
      {
        RogueString* arg_type_2 = ((call_ROGUEM46( 28, (RogueClassCmd*)(THIS->new_value) ))->name);
        throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[723] ))), ((RogueType__to_String( THIS->property_info->_type ))) ))), Rogue_program.literal_strings[724] ))), m_name_1 ))), Rogue_program.literal_strings[725] ))), arg_type_2 ))), Rogue_program.literal_strings[726] ))), m_name_1 ))), Rogue_program.literal_strings[727] ))), arg_type_2 ))), Rogue_program.literal_strings[342] ))) ))) )));
      }
    }
  }
  {
    RogueClassTokenType* _auto_1179_4 = (THIS->op);
    if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_1179_4), ((RogueObject*)(RogueClassTokenType::symbol_caret_equals)) ))))
    {
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->target, Rogue_program.literal_strings[1] ))) == 0)
      {
        return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)Rogue_program.type_CmdWriteProperty->create_and_init_object()), THIS->t, THIS->context, THIS->property_info, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdPower*)Rogue_program.type_CmdPower->create_and_init_object())), THIS->t, ((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)Rogue_program.type_CmdReadProperty->create_and_init_object()), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, ((RogueClassCloneArgs*)(NULL)) ))), THIS->property_info ))))), THIS->new_value ))))) ))), scope_0 ))));
      }
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_1179_4), ((RogueObject*)(RogueClassTokenType::symbol_percent_equals)) ))))
    {
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->target, Rogue_program.literal_strings[1] ))) == 0)
      {
        return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)Rogue_program.type_CmdWriteProperty->create_and_init_object()), THIS->t, THIS->context, THIS->property_info, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMod*)Rogue_program.type_CmdMod->create_and_init_object())), THIS->t, ((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)Rogue_program.type_CmdReadProperty->create_and_init_object()), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, ((RogueClassCloneArgs*)(NULL)) ))), THIS->property_info ))))), THIS->new_value ))))) ))), scope_0 ))));
      }
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_1179_4), ((RogueObject*)(RogueClassTokenType::symbol_dot_equals)) ))))
    {
      RogueClassCmdAccess* access_3 = (((RogueClassCmdAccess*)(RogueObject::as(THIS->new_value,Rogue_program.type_CmdAccess))));
      if (!(!!(access_3)))
      {
        throw ((RogueToken__error__String( THIS->new_value->t, Rogue_program.literal_strings[728] )));
      }
      if (!!(access_3->context))
      {
        throw ((RogueToken__error__String( access_3->t, Rogue_program.literal_strings[729] )));
      }
      access_3->context = ((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)Rogue_program.type_CmdReadProperty->create_and_init_object()), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, ((RogueClassCloneArgs*)(NULL)) ))), THIS->property_info )))));
      return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)Rogue_program.type_CmdWriteProperty->create_and_init_object()), THIS->t, THIS->context, THIS->property_info, ((RogueClassCmd*)(access_3)) ))), scope_0 ))));
    }
  }
  THIS->context = ((RogueCmd__require_value( (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->context), scope_0 )) )));
  THIS->new_value = (call_ROGUEM42( 23, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)((call_ROGUEM42( 23, (RogueClassCmd*)(THIS->new_value), scope_0 ))), THIS->property_info->_type ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdOpAssignProperty__trace_used_code( RogueClassCmdOpAssignProperty* THIS )
{
  RogueType__trace_used_code( THIS->property_info->type_context );
  RogueType__trace_used_code( THIS->property_info->_type );
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->new_value) );
}

RogueClassType* Rogue_CmdOpAssignProperty__type( RogueClassCmdOpAssignProperty* THIS )
{
  return (RogueClassType*)(THIS->property_info->_type);
}

void RogueCmdOpAssignProperty__write_cpp__CPPWriter_Logical( RogueClassCmdOpAssignProperty* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->context), writer_0, false );
  RogueCPPWriter__print_access_operator__Type( writer_0, (call_ROGUEM46( 28, (RogueClassCmd*)(THIS->context) )) );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, THIS->property_info->cpp_name ))), Rogue_program.literal_strings[255] ))), ((RogueCmdResolvedOpWithAssign__cpp_symbol( ((RogueClassCmdResolvedOpWithAssign*)THIS) ))) ))), Rogue_program.literal_strings[255] );
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->new_value), writer_0, false );
}

RogueClassCmdOpAssignProperty* RogueCmdOpAssignProperty__init_object( RogueClassCmdOpAssignProperty* THIS )
{
  return (RogueClassCmdOpAssignProperty*)(THIS);
}

RogueClassCmdOpAssignProperty* RogueCmdOpAssignProperty__init__Token_Cmd_Property_TokenType_Cmd( RogueClassCmdOpAssignProperty* THIS, RogueClassToken* _auto_846_0, RogueClassCmd* _auto_847_1, RogueClassProperty* _auto_848_2, RogueClassTokenType* _auto_849_3, RogueClassCmd* _auto_850_4 )
{
  THIS->new_value = _auto_850_4;
  THIS->op = _auto_849_3;
  THIS->property_info = _auto_848_2;
  THIS->context = _auto_847_1;
  THIS->t = _auto_846_0;
  return (RogueClassCmdOpAssignProperty*)(THIS);
}

RogueString* RogueCmdCallInlineNativeRoutine__type_name( RogueClassCmdCallInlineNativeRoutine* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[978]);
}

RogueClassCmd* RogueCmdCallInlineNativeRoutine__clone__CloneArgs( RogueClassCmdCallInlineNativeRoutine* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCallInlineNativeRoutine__init__Token_Method_CmdArgs( ((RogueClassCmdCallInlineNativeRoutine*)Rogue_program.type_CmdCallInlineNativeRoutine->create_and_init_object()), THIS->t, THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

RogueClassType* Rogue_CmdCallInlineNativeRoutine__type( RogueClassCmdCallInlineNativeRoutine* THIS )
{
  return (RogueClassType*)(THIS->method_info->_return_type);
}

RogueClassCmdCallInlineNativeRoutine* RogueCmdCallInlineNativeRoutine__init_object( RogueClassCmdCallInlineNativeRoutine* THIS )
{
  return (RogueClassCmdCallInlineNativeRoutine*)(THIS);
}

RogueClassCmdCallInlineNativeRoutine* RogueCmdCallInlineNativeRoutine__init__Token_Method_CmdArgs( RogueClassCmdCallInlineNativeRoutine* THIS, RogueClassToken* _auto_859_0, RogueClassMethod* _auto_860_1, RogueClassCmdArgs* _auto_861_2 )
{
  THIS->args = _auto_861_2;
  THIS->method_info = _auto_860_1;
  THIS->t = _auto_859_0;
  return (RogueClassCmdCallInlineNativeRoutine*)(THIS);
}

RogueString* RogueCmdCallInlineNative__to_String( RogueClassCmdCallInlineNative* THIS )
{
  return (RogueString*)(THIS->method_info->signature);
}

RogueString* RogueCmdCallInlineNative__type_name( RogueClassCmdCallInlineNative* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[973]);
}

void RogueCmdCallInlineNative__write_cpp__CPPWriter_Logical( RogueClassCmdCallInlineNative* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueString* st_2 = (THIS->method_info->native_code);
  RogueOptionalInteger dollar_3 = (((RogueString__locate__Character_OptionalInteger( st_2, (RogueCharacter)'$', RogueOptionalInteger() ))));
  while (dollar_3.exists)
  {
    RogueCPPWriter__print__String( writer_0, ((RogueString__from__Integer_Integer( st_2, 0, (dollar_3.value - 1) ))) );
    st_2 = ((RogueString*)((RogueString__from__Integer( st_2, (dollar_3.value + 1) ))));
    RogueClassLocal* best_match_4 = 0;
    {
      RogueLocalList* _auto_1180_5 = (THIS->method_info->parameters);
      RogueInteger _auto_1181_6 = (0);
      for (;_auto_1181_6 < _auto_1180_5->count;++_auto_1181_6)
      {
        RogueClassLocal* p_7 = (((RogueClassLocal*)(_auto_1180_5->data->objects[_auto_1181_6])));
        if (((RogueString__begins_with__String( st_2, p_7->name ))))
        {
          if ((best_match_4 == NULL || p_7->name->count > best_match_4->name->count))
          {
            best_match_4 = ((RogueClassLocal*)p_7);
          }
        }
      }
    }
    if (!!(best_match_4))
    {
      call_ROGUEM52( 29, (RogueClassCmd*)(((RogueClassCmd*)(THIS->args->data->objects[best_match_4->index]))), writer_0, false );
      st_2 = ((RogueString*)((RogueString__from__Integer( st_2, best_match_4->name->count ))));
    }
    else if (((RogueString__begins_with__String( st_2, Rogue_program.literal_strings[147] ))))
    {
      call_ROGUEM757( 32, (RogueClassCmdCallInlineNative*)(THIS), writer_0 );
      st_2 = ((RogueString*)((RogueString__from__Integer( st_2, 4 ))));
    }
    dollar_3 = ((RogueOptionalInteger)((RogueString__locate__Character_OptionalInteger( st_2, (RogueCharacter)'$', RogueOptionalInteger() ))));
  }
  RogueCPPWriter__print__String( writer_0, st_2 );
}

RogueClassCmdCallInlineNative* RogueCmdCallInlineNative__init_object( RogueClassCmdCallInlineNative* THIS )
{
  return (RogueClassCmdCallInlineNative*)(THIS);
}

void RogueCmdCallInlineNative__print_this__CPPWriter( RogueClassCmdCallInlineNative* THIS, RogueClassCPPWriter* writer_0 )
{
  throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[807] )));
}

RogueString* RogueCmdCallNativeRoutine__type_name( RogueClassCmdCallNativeRoutine* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[974]);
}

RogueClassCmd* RogueCmdCallNativeRoutine__clone__CloneArgs( RogueClassCmdCallNativeRoutine* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCallNativeRoutine__init__Token_Method_CmdArgs( ((RogueClassCmdCallNativeRoutine*)Rogue_program.type_CmdCallNativeRoutine->create_and_init_object()), THIS->t, THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

void RogueCmdCallNativeRoutine__write_cpp__CPPWriter_Logical( RogueClassCmdCallNativeRoutine* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[176] ))), THIS->method_info->_return_type, THIS->method_info->_return_type );
  }
  RogueCPPWriter__print__String( writer_0, THIS->method_info->cpp_name );
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[406] );
  RogueInteger i_2 = (0);
  {
    RogueClassCmdArgs* _auto_1182_4 = (THIS->args);
    RogueInteger _auto_1183_5 = (0);
    for (;_auto_1183_5 < _auto_1182_4->count;++_auto_1183_5)
    {
      RogueClassCmd* arg_6 = (((RogueClassCmd*)(_auto_1182_4->data->objects[_auto_1183_5])));
      if (i_2 > 0)
      {
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[403] );
      }
      RogueClassType* param_type_3 = (((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type);
      if (((RogueType__is_aspect( param_type_3 ))))
      {
        RogueCPPWriter__print__String( ((RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[176] ))), (call_ROGUEM46( 28, (RogueClassCmd*)(arg_6) )), ((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type ))), Rogue_program.literal_strings[176] );
        call_ROGUEM52( 29, (RogueClassCmd*)(arg_6), writer_0, false );
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[778] );
      }
      else
      {
        call_ROGUEM52( 29, (RogueClassCmd*)(arg_6), writer_0, false );
      }
      ++i_2;
    }
  }
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[448] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] );
  }
}

RogueClassCmdCallNativeRoutine* RogueCmdCallNativeRoutine__init_object( RogueClassCmdCallNativeRoutine* THIS )
{
  return (RogueClassCmdCallNativeRoutine*)(THIS);
}

RogueClassCmdCallNativeRoutine* RogueCmdCallNativeRoutine__init__Token_Method_CmdArgs( RogueClassCmdCallNativeRoutine* THIS, RogueClassToken* _auto_862_0, RogueClassMethod* _auto_863_1, RogueClassCmdArgs* _auto_864_2 )
{
  THIS->args = _auto_864_2;
  THIS->method_info = _auto_863_1;
  THIS->t = _auto_862_0;
  return (RogueClassCmdCallNativeRoutine*)(THIS);
}

RogueString* RogueCmdReadArrayCount__type_name( RogueClassCmdReadArrayCount* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[958]);
}

RogueClassCmd* RogueCmdReadArrayCount__clone__CloneArgs( RogueClassCmdReadArrayCount* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadArrayCount__init__Token_Cmd( ((RogueClassCmdReadArrayCount*)Rogue_program.type_CmdReadArrayCount->create_and_init_object()), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->context), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdReadArrayCount__resolve__Scope( RogueClassCmdReadArrayCount* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->_array_type))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  THIS->context = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->context), scope_0 ));
  THIS->_array_type = ((Rogue_Cmd__require_type( THIS->context )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdReadArrayCount__trace_used_code( RogueClassCmdReadArrayCount* THIS )
{
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->context) );
  RogueType__trace_used_code( THIS->_array_type );
}

RogueClassType* Rogue_CmdReadArrayCount__type( RogueClassCmdReadArrayCount* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer);
}

void RogueCmdReadArrayCount__write_cpp__CPPWriter_Logical( RogueClassCmdReadArrayCount* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->context), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[808] );
}

RogueClassCmdReadArrayCount* RogueCmdReadArrayCount__init_object( RogueClassCmdReadArrayCount* THIS )
{
  return (RogueClassCmdReadArrayCount*)(THIS);
}

RogueClassCmdReadArrayCount* RogueCmdReadArrayCount__init__Token_Cmd( RogueClassCmdReadArrayCount* THIS, RogueClassToken* _auto_867_0, RogueClassCmd* _auto_868_1 )
{
  THIS->context = _auto_868_1;
  THIS->t = _auto_867_0;
  return (RogueClassCmdReadArrayCount*)(THIS);
}

RogueString* RogueCmdCallInlineNativeMethod__type_name( RogueClassCmdCallInlineNativeMethod* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[979]);
}

RogueClassCmd* RogueCmdCallInlineNativeMethod__clone__CloneArgs( RogueClassCmdCallInlineNativeMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallInlineNativeMethod*)Rogue_program.type_CmdCallInlineNativeMethod->create_and_init_object())), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, clone_args_0 ))), THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

RogueClassType* Rogue_CmdCallInlineNativeMethod__type( RogueClassCmdCallInlineNativeMethod* THIS )
{
  return (RogueClassType*)(THIS->method_info->_return_type);
}

RogueClassCmdCallInlineNativeMethod* RogueCmdCallInlineNativeMethod__init_object( RogueClassCmdCallInlineNativeMethod* THIS )
{
  return (RogueClassCmdCallInlineNativeMethod*)(THIS);
}

void RogueCmdCallInlineNativeMethod__print_this__CPPWriter( RogueClassCmdCallInlineNativeMethod* THIS, RogueClassCPPWriter* writer_0 )
{
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->context), writer_0, false );
}

RogueString* RogueCmdCallNativeMethod__type_name( RogueClassCmdCallNativeMethod* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[975]);
}

RogueClassCmd* RogueCmdCallNativeMethod__clone__CloneArgs( RogueClassCmdCallNativeMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallNativeMethod*)Rogue_program.type_CmdCallNativeMethod->create_and_init_object())), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, clone_args_0 ))), THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

void RogueCmdCallNativeMethod__write_cpp__CPPWriter_Logical( RogueClassCmdCallNativeMethod* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[176] ))), THIS->method_info->_return_type, THIS->method_info->_return_type );
  }
  RogueCPPWriter__print__String( writer_0, THIS->method_info->cpp_name );
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[406] );
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->context), writer_0, false );
  RogueInteger i_2 = (0);
  {
    RogueClassCmdArgs* _auto_1184_4 = (THIS->args);
    RogueInteger _auto_1185_5 = (0);
    for (;_auto_1185_5 < _auto_1184_4->count;++_auto_1185_5)
    {
      RogueClassCmd* arg_6 = (((RogueClassCmd*)(_auto_1184_4->data->objects[_auto_1185_5])));
      RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[403] );
      RogueClassType* param_type_3 = (((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type);
      if (((RogueType__is_aspect( param_type_3 ))))
      {
        RogueCPPWriter__print__String( ((RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[176] ))), (call_ROGUEM46( 28, (RogueClassCmd*)(arg_6) )), ((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type ))), Rogue_program.literal_strings[176] );
        call_ROGUEM52( 29, (RogueClassCmd*)(arg_6), writer_0, false );
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[778] );
      }
      else
      {
        call_ROGUEM52( 29, (RogueClassCmd*)(arg_6), writer_0, false );
      }
      ++i_2;
    }
  }
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[448] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] );
  }
}

RogueClassCmdCallNativeMethod* RogueCmdCallNativeMethod__init_object( RogueClassCmdCallNativeMethod* THIS )
{
  return (RogueClassCmdCallNativeMethod*)(THIS);
}

RogueString* RogueCmdCallAspectMethod__type_name( RogueClassCmdCallAspectMethod* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[976]);
}

RogueClassCmd* RogueCmdCallAspectMethod__clone__CloneArgs( RogueClassCmdCallAspectMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallAspectMethod*)Rogue_program.type_CmdCallAspectMethod->create_and_init_object())), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, clone_args_0 ))), THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

void RogueCmdCallAspectMethod__write_cpp__CPPWriter_Logical( RogueClassCmdCallAspectMethod* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[176] ))), THIS->method_info->_return_type, THIS->method_info->_return_type );
  }
  RogueCPPWriter__print__String( writer_0, THIS->method_info->cpp_name );
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[406] );
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[176] );
  RogueCPPWriter__print__Type( writer_0, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object );
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] );
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->context), writer_0, false );
  RogueInteger i_2 = (0);
  {
    RogueClassCmdArgs* _auto_1186_4 = (THIS->args);
    RogueInteger _auto_1187_5 = (0);
    for (;_auto_1187_5 < _auto_1186_4->count;++_auto_1187_5)
    {
      RogueClassCmd* arg_6 = (((RogueClassCmd*)(_auto_1186_4->data->objects[_auto_1187_5])));
      RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[403] );
      RogueClassType* param_type_3 = (((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type);
      if (((RogueType__is_aspect( param_type_3 ))))
      {
        RogueCPPWriter__print__String( ((RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[176] ))), (call_ROGUEM46( 28, (RogueClassCmd*)(arg_6) )), ((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type ))), Rogue_program.literal_strings[176] );
        call_ROGUEM52( 29, (RogueClassCmd*)(arg_6), writer_0, false );
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[778] );
      }
      else
      {
        call_ROGUEM52( 29, (RogueClassCmd*)(arg_6), writer_0, false );
      }
      ++i_2;
    }
  }
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[448] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] );
  }
}

RogueClassCmdCallAspectMethod* RogueCmdCallAspectMethod__init_object( RogueClassCmdCallAspectMethod* THIS )
{
  return (RogueClassCmdCallAspectMethod*)(THIS);
}

RogueString* RogueCmdCallDynamicMethod__type_name( RogueClassCmdCallDynamicMethod* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[980]);
}

RogueClassCmd* RogueCmdCallDynamicMethod__clone__CloneArgs( RogueClassCmdCallDynamicMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallDynamicMethod*)Rogue_program.type_CmdCallDynamicMethod->create_and_init_object())), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, clone_args_0 ))), THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

void RogueCmdCallDynamicMethod__trace_used_code( RogueClassCmdCallDynamicMethod* THIS )
{
  RogueCmdCall__trace_used_code( ((RogueClassCmdCall*)THIS) );
  if (((RogueMethod__is_overridden( THIS->method_info ))))
  {
    THIS->method_info->called_dynamically = true;
  }
}

void RogueCmdCallDynamicMethod__write_cpp__CPPWriter_Logical( RogueClassCmdCallDynamicMethod* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[176] ))), THIS->method_info->_return_type, THIS->method_info->_return_type );
  }
  if (((RogueMethod__is_overridden( THIS->method_info ))))
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[809] ))), THIS->method_info->cpp_typedef );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[406] );
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Integer( writer_0, THIS->method_info->index ))), Rogue_program.literal_strings[403] );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[176] );
    RogueCPPWriter__print__Type( writer_0, THIS->method_info->type_context );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[765] );
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] );
    RogueInteger i_2 = (0);
    {
      RogueClassCmdArgs* _auto_1188_4 = (THIS->args);
      RogueInteger _auto_1189_5 = (0);
      for (;_auto_1189_5 < _auto_1188_4->count;++_auto_1189_5)
      {
        RogueClassCmd* arg_6 = (((RogueClassCmd*)(_auto_1188_4->data->objects[_auto_1189_5])));
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[403] );
        RogueClassType* param_type_3 = (((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type);
        if (((RogueType__is_aspect( param_type_3 ))))
        {
          RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[176] ))), (call_ROGUEM46( 28, (RogueClassCmd*)(arg_6) )), ((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type );
          call_ROGUEM52( 29, (RogueClassCmd*)(arg_6), writer_0, false );
          RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] );
        }
        else
        {
          call_ROGUEM52( 29, (RogueClassCmd*)(arg_6), writer_0, false );
        }
        ++i_2;
      }
    }
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[448] );
  }
  else
  {
    call_ROGUEM52( 29, (RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallStaticMethod*)Rogue_program.type_CmdCallStaticMethod->create_and_init_object())), THIS->t, THIS->context, THIS->method_info, THIS->args )))), writer_0, is_statement_1 );
  }
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] );
  }
}

RogueClassCmdCallDynamicMethod* RogueCmdCallDynamicMethod__init_object( RogueClassCmdCallDynamicMethod* THIS )
{
  return (RogueClassCmdCallDynamicMethod*)(THIS);
}

RogueString* RogueCmdCallMethod__type_name( RogueClassCmdCallMethod* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[977]);
}

RogueClassCmd* RogueCmdCallMethod__call_prior__Scope( RogueClassCmdCallMethod* THIS, RogueClassScope* scope_0 )
{
  if ((((RogueMethod__is_initializer( THIS->method_info ))) && THIS->method_info->type_context != scope_0->_this_type))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallStaticMethod*)Rogue_program.type_CmdCallStaticMethod->create_and_init_object())), THIS->t, THIS->context, THIS->method_info, THIS->args ))))));
  }
  if (!(!!(THIS->method_info->overridden_method)))
  {
    throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), THIS->method_info->signature ))), Rogue_program.literal_strings[826] ))) ))) )));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallStaticMethod*)Rogue_program.type_CmdCallStaticMethod->create_and_init_object())), THIS->t, THIS->context, THIS->method_info->overridden_method, THIS->args ))))));
}

RogueClassCmdCallMethod* RogueCmdCallMethod__init_object( RogueClassCmdCallMethod* THIS )
{
  return (RogueClassCmdCallMethod*)(THIS);
}

RogueString* RogueCandidateMethods__type_name( RogueClassCandidateMethods* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[949]);
}

RogueClassCandidateMethods* RogueCandidateMethods__init__Type_CmdAccess_Logical( RogueClassCandidateMethods* THIS, RogueClassType* _auto_872_0, RogueClassCmdAccess* _auto_873_1, RogueLogical _auto_874_2 )
{
  THIS->error_on_fail = _auto_874_2;
  THIS->access = _auto_873_1;
  THIS->type_context = _auto_872_0;
  return (RogueClassCandidateMethods*)(THIS);
}

RogueLogical RogueCandidateMethods__has_match( RogueClassCandidateMethods* THIS )
{
  return (RogueLogical)(THIS->available->count == 1);
}

RogueClassMethod* RogueCandidateMethods__match( RogueClassCandidateMethods* THIS )
{
  if (THIS->available->count != 1)
  {
    return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
  }
  return (RogueClassMethod*)(((RogueClassMethod*)(THIS->available->data->objects[0])));
}

RogueLogical RogueCandidateMethods__refine_matches( RogueClassCandidateMethods* THIS )
{
  return (RogueLogical)(((RogueCandidateMethods__update__Logical( THIS, false ))));
}

RogueLogical RogueCandidateMethods__update_available( RogueClassCandidateMethods* THIS )
{
  return (RogueLogical)(((RogueCandidateMethods__update__Logical( THIS, false ))));
}

RogueLogical RogueCandidateMethods__update_matches( RogueClassCandidateMethods* THIS )
{
  return (RogueLogical)(((RogueCandidateMethods__update__Logical( THIS, true ))));
}

RogueLogical RogueCandidateMethods__update__Logical( RogueClassCandidateMethods* THIS, RogueLogical require_compatible_0 )
{
  if (THIS->compatible->count == 0)
  {
    if (THIS->available->count == 0)
    {
      if (!(THIS->error_on_fail))
      {
        return (RogueLogical)(false);
      }
      throw ((RogueToken__error__String( THIS->access->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[678] ))), THIS->access->name ))), Rogue_program.literal_strings[679] ))), ((RogueType__to_String( THIS->type_context ))) ))), Rogue_program.literal_strings[47] ))) ))) )));
    }
    else if (require_compatible_0)
    {
      if (!(THIS->error_on_fail))
      {
        return (RogueLogical)(false);
      }
      RogueStringBuilder* call_sig_buffer_1 = (((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))));
      RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( call_sig_buffer_1, THIS->type_context->name ))), Rogue_program.literal_strings[158] );
      RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( call_sig_buffer_1, THIS->access->name ))), Rogue_program.literal_strings[176] );
      if (!!(THIS->access->args))
      {
        {
          RogueClassCmdArgs* _auto_1190_4 = (THIS->access->args);
          RogueInteger index_5 = (0);
          for (;index_5 < _auto_1190_4->count;++index_5)
          {
            if (index_5 > 0)
            {
              RogueStringBuilder__print__Character( call_sig_buffer_1, (RogueCharacter)',' );
            }
            RogueStringBuilder__print__String( call_sig_buffer_1, ((Rogue_Cmd__require_type( ((RogueClassCmd*)(THIS->access->args->data->objects[index_5])) )))->name );
          }
        }
      }
      RogueStringBuilder__print__String( call_sig_buffer_1, Rogue_program.literal_strings[102] );
      RogueString* call_sig_2 = (((RogueStringBuilder__to_String( call_sig_buffer_1 ))));
      RogueStringBuilder* buffer_3 = (((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))));
      if (THIS->available->count > 1)
      {
        RogueStringBuilder__print__String( buffer_3, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[680] ))), call_sig_2 ))), Rogue_program.literal_strings[681] ))) ))) );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_3, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[682] ))), call_sig_2 ))), Rogue_program.literal_strings[683] ))) ))) );
      }
      {
        RogueMethodList* _auto_1191_6 = (THIS->available);
        RogueInteger _auto_1192_7 = (0);
        for (;_auto_1192_7 < _auto_1191_6->count;++_auto_1192_7)
        {
          RogueClassMethod* m_8 = (((RogueClassMethod*)(_auto_1191_6->data->objects[_auto_1192_7])));
          RogueStringBuilder__println__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( buffer_3, Rogue_program.literal_strings[427] ))), m_8->type_context->name ))), Rogue_program.literal_strings[158] ))), m_8->signature );
        }
      }
      throw ((RogueToken__error__String( THIS->access->t, ((RogueStringBuilder__to_String( buffer_3 ))) )));
    }
    return (RogueLogical)(true);
  }
  RogueMethodList__clear( THIS->available );
  RogueMethodList__add__MethodList( THIS->available, THIS->compatible );
  RogueMethodList__clear( THIS->compatible );
  return (RogueLogical)(true);
}

RogueClassCandidateMethods* RogueCandidateMethods__init_object( RogueClassCandidateMethods* THIS )
{
  THIS->available = ((RogueMethodList__init( ((RogueMethodList*)Rogue_program.type_MethodList->create_and_init_object()) )));
  THIS->compatible = ((RogueMethodList__init( ((RogueMethodList*)Rogue_program.type_MethodList->create_and_init_object()) )));
  return (RogueClassCandidateMethods*)(THIS);
}

RogueString* RogueCmdControlStructureArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[612]);
}

RogueString* RogueCmdTaskControlSectionList__to_String( RogueCmdTaskControlSectionList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueCmdTaskControlSectionList* _auto_1193_2 = (THIS);
    RogueInteger _auto_1194_3 = (0);
    for (;_auto_1194_3 < _auto_1193_2->count;++_auto_1194_3)
    {
      RogueClassCmdTaskControlSection* value_4 = (((RogueClassCmdTaskControlSection*)(_auto_1193_2->data->objects[_auto_1194_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueCmdTaskControlSectionList__type_name( RogueCmdTaskControlSectionList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[945]);
}

RogueCmdTaskControlSectionList* RogueCmdTaskControlSectionList__init_object( RogueCmdTaskControlSectionList* THIS )
{
  return (RogueCmdTaskControlSectionList*)(THIS);
}

RogueCmdTaskControlSectionList* RogueCmdTaskControlSectionList__init( RogueCmdTaskControlSectionList* THIS )
{
  RogueCmdTaskControlSectionList__init__Integer( THIS, 10 );
  return (RogueCmdTaskControlSectionList*)(THIS);
}

RogueCmdTaskControlSectionList* RogueCmdTaskControlSectionList__init__Integer( RogueCmdTaskControlSectionList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassCmdTaskControlSection*), true );
  return (RogueCmdTaskControlSectionList*)(THIS);
}

RogueCmdTaskControlSectionList* RogueCmdTaskControlSectionList__add__CmdTaskControlSection( RogueCmdTaskControlSectionList* THIS, RogueClassCmdTaskControlSection* value_0 )
{
  ((RogueCmdTaskControlSectionList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdTaskControlSectionList*)(THIS);
}

RogueInteger RogueCmdTaskControlSectionList__capacity( RogueCmdTaskControlSectionList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueCmdTaskControlSectionList* RogueCmdTaskControlSectionList__reserve__Integer( RogueCmdTaskControlSectionList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassCmdTaskControlSection*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueCmdTaskControlSectionList__capacity( THIS ))) + ((RogueCmdTaskControlSectionList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassCmdTaskControlSection*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdTaskControlSectionList*)(THIS);
}

RogueString* RogueCmdBlock__type_name( RogueClassCmdBlock* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[844]);
}

RogueClassCmd* RogueCmdBlock__clone__CloneArgs( RogueClassCmdBlock* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject::as(clone_args_0,Rogue_program.type_TaskArgs))));
  if ((!!(task_args_1) && THIS->contains_yield))
  {
    {
      RogueClassCmdStatementList* _auto_1203_3 = (THIS->statements);
      RogueInteger _auto_1204_4 = (0);
      for (;_auto_1204_4 < _auto_1203_3->count;++_auto_1204_4)
      {
        RogueClassCmd* statement_5 = (((RogueClassCmd*)(_auto_1203_3->data->objects[_auto_1204_4])));
        RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM44( 5, (RogueClassCmd*)(statement_5), ((RogueClassCloneArgs*)(task_args_1)) )) );
      }
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  else
  {
    RogueClassCmdBlock* result_2 = (((RogueCmdBlock__init__Token_CmdStatementList_Integer( ((RogueClassCmdBlock*)Rogue_program.type_CmdBlock->create_and_init_object()), THIS->t, ((RogueClassCmdStatementList*)(NULL)), 0 ))));
    call_ROGUEM171( 31, (RogueClassCmdControlStructure*)(result_2), ((RogueClassCmdControlStructure*)(THIS)) );
    THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_2));
    result_2->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 )));
    return (RogueClassCmd*)(((RogueClassCmd*)(result_2)));
  }
}

RogueLogical RogueCmdBlock__requires_semicolon( RogueClassCmdBlock* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmdBlock* RogueCmdBlock__resolve__Scope( RogueClassCmdBlock* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  RogueCmdControlStructureList__remove_last( scope_0->control_stack );
  return (RogueClassCmdBlock*)(THIS);
}

void RogueCmdBlock__trace_used_code( RogueClassCmdBlock* THIS )
{
  RogueCmdStatementList__trace_used_code( THIS->statements );
}

void RogueCmdBlock__write_cpp__CPPWriter_Logical( RogueClassCmdBlock* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, false );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
  if (!!(THIS->escape_label))
  {
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, THIS->escape_label ))), Rogue_program.literal_strings[770] );
  }
}

RogueClassCmdBlock* RogueCmdBlock__init_object( RogueClassCmdBlock* THIS )
{
  return (RogueClassCmdBlock*)(THIS);
}

RogueClassCmdBlock* RogueCmdBlock__init__Token_Integer( RogueClassCmdBlock* THIS, RogueClassToken* _auto_925_0, RogueInteger _auto_926_1 )
{
  THIS->_control_type = _auto_926_1;
  THIS->t = _auto_925_0;
  THIS->statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)Rogue_program.type_CmdStatementList->create_and_init_object()) )));
  return (RogueClassCmdBlock*)(THIS);
}

RogueClassCmdBlock* RogueCmdBlock__init__Token_CmdStatementList_Integer( RogueClassCmdBlock* THIS, RogueClassToken* _auto_927_0, RogueClassCmdStatementList* _auto_928_1, RogueInteger _auto_929_2 )
{
  THIS->_control_type = _auto_929_2;
  THIS->statements = _auto_928_1;
  THIS->t = _auto_927_0;
  return (RogueClassCmdBlock*)(THIS);
}

RogueString* RogueCmdTaskControlSectionArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[613]);
}

RogueString* RogueString_CmdTableEntryList__to_String( RogueTableEntry_of_String_CmdList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_CmdList* _auto_1205_2 = (THIS);
    RogueInteger _auto_1206_3 = (0);
    for (;_auto_1206_3 < _auto_1205_2->count;++_auto_1206_3)
    {
      RogueClassString_CmdTableEntry* value_4 = (((RogueClassString_CmdTableEntry*)(_auto_1205_2->data->objects[_auto_1206_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueString_CmdTableEntryList__type_name( RogueTableEntry_of_String_CmdList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[946]);
}

RogueTableEntry_of_String_CmdList* RogueString_CmdTableEntryList__init_object( RogueTableEntry_of_String_CmdList* THIS )
{
  return (RogueTableEntry_of_String_CmdList*)(THIS);
}

RogueTableEntry_of_String_CmdList* RogueString_CmdTableEntryList__init__Integer_String_CmdTableEntry( RogueTableEntry_of_String_CmdList* THIS, RogueInteger initial_capacity_0, RogueClassString_CmdTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_CmdTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_946_3 = (initial_capacity_0);
    for (;i_2 <= _auto_946_3;++i_2)
    {
      RogueString_CmdTableEntryList__add__String_CmdTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_CmdList*)(THIS);
}

RogueTableEntry_of_String_CmdList* RogueString_CmdTableEntryList__add__String_CmdTableEntry( RogueTableEntry_of_String_CmdList* THIS, RogueClassString_CmdTableEntry* value_0 )
{
  ((RogueString_CmdTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_CmdList*)(THIS);
}

RogueInteger RogueString_CmdTableEntryList__capacity( RogueTableEntry_of_String_CmdList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_CmdList* RogueString_CmdTableEntryList__reserve__Integer( RogueTableEntry_of_String_CmdList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_CmdTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_CmdTableEntryList__capacity( THIS ))) + ((RogueString_CmdTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_CmdTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_CmdList*)(THIS);
}

RogueString* RogueString_CmdTableEntry__type_name( RogueClassString_CmdTableEntry* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[582]);
}

RogueClassString_CmdTableEntry* RogueString_CmdTableEntry__init__String_Cmd_Integer( RogueClassString_CmdTableEntry* THIS, RogueString* _key_0, RogueClassCmd* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_CmdTableEntry*)(THIS);
}

RogueClassString_CmdTableEntry* RogueString_CmdTableEntry__init_object( RogueClassString_CmdTableEntry* THIS )
{
  return (RogueClassString_CmdTableEntry*)(THIS);
}

RogueString* RogueString_CmdTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[614]);
}

RogueString* RogueString_PropertyTableEntryList__to_String( RogueTableEntry_of_String_PropertyList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_PropertyList* _auto_1215_2 = (THIS);
    RogueInteger _auto_1216_3 = (0);
    for (;_auto_1216_3 < _auto_1215_2->count;++_auto_1216_3)
    {
      RogueClassString_PropertyTableEntry* value_4 = (((RogueClassString_PropertyTableEntry*)(_auto_1215_2->data->objects[_auto_1216_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueString_PropertyTableEntryList__type_name( RogueTableEntry_of_String_PropertyList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[947]);
}

RogueTableEntry_of_String_PropertyList* RogueString_PropertyTableEntryList__init_object( RogueTableEntry_of_String_PropertyList* THIS )
{
  return (RogueTableEntry_of_String_PropertyList*)(THIS);
}

RogueTableEntry_of_String_PropertyList* RogueString_PropertyTableEntryList__init__Integer_String_PropertyTableEntry( RogueTableEntry_of_String_PropertyList* THIS, RogueInteger initial_capacity_0, RogueClassString_PropertyTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_PropertyTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_960_3 = (initial_capacity_0);
    for (;i_2 <= _auto_960_3;++i_2)
    {
      RogueString_PropertyTableEntryList__add__String_PropertyTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_PropertyList*)(THIS);
}

RogueTableEntry_of_String_PropertyList* RogueString_PropertyTableEntryList__add__String_PropertyTableEntry( RogueTableEntry_of_String_PropertyList* THIS, RogueClassString_PropertyTableEntry* value_0 )
{
  ((RogueString_PropertyTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_PropertyList*)(THIS);
}

RogueInteger RogueString_PropertyTableEntryList__capacity( RogueTableEntry_of_String_PropertyList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_PropertyList* RogueString_PropertyTableEntryList__reserve__Integer( RogueTableEntry_of_String_PropertyList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_PropertyTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_PropertyTableEntryList__capacity( THIS ))) + ((RogueString_PropertyTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_PropertyTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_PropertyList*)(THIS);
}

RogueString* RogueString_PropertyTableEntry__type_name( RogueClassString_PropertyTableEntry* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[583]);
}

RogueClassString_PropertyTableEntry* RogueString_PropertyTableEntry__init__String_Property_Integer( RogueClassString_PropertyTableEntry* THIS, RogueString* _key_0, RogueClassProperty* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_PropertyTableEntry*)(THIS);
}

RogueClassString_PropertyTableEntry* RogueString_PropertyTableEntry__init_object( RogueClassString_PropertyTableEntry* THIS )
{
  return (RogueClassString_PropertyTableEntry*)(THIS);
}

RogueString* RogueString_PropertyTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[615]);
}

RogueString* RogueDirectiveTokenType__type_name( RogueClassDirectiveTokenType* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[830]);
}

RogueClassToken* RogueDirectiveTokenType__create_token__String_Integer_Integer( RogueClassDirectiveTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueToken__init__TokenType( ((RogueClassToken*)Rogue_program.type_Token->create_and_init_object()), ((RogueClassTokenType*)(THIS)) ))), filepath_0, line_1, column_2 ))));
}

RogueLogical RogueDirectiveTokenType__is_directive( RogueClassDirectiveTokenType* THIS )
{
  return (RogueLogical)(true);
}

RogueClassDirectiveTokenType* RogueDirectiveTokenType__init_object( RogueClassDirectiveTokenType* THIS )
{
  return (RogueClassDirectiveTokenType*)(THIS);
}

RogueString* RogueStructuralDirectiveTokenType__type_name( RogueClassStructuralDirectiveTokenType* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[831]);
}

RogueClassToken* RogueStructuralDirectiveTokenType__create_token__String_Integer_Integer( RogueClassStructuralDirectiveTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueToken__init__TokenType( ((RogueClassToken*)Rogue_program.type_Token->create_and_init_object()), ((RogueClassTokenType*)(THIS)) ))), filepath_0, line_1, column_2 ))));
}

RogueLogical RogueStructuralDirectiveTokenType__is_directive( RogueClassStructuralDirectiveTokenType* THIS )
{
  return (RogueLogical)(true);
}

RogueLogical RogueStructuralDirectiveTokenType__is_structure( RogueClassStructuralDirectiveTokenType* THIS )
{
  return (RogueLogical)(true);
}

RogueClassStructuralDirectiveTokenType* RogueStructuralDirectiveTokenType__init_object( RogueClassStructuralDirectiveTokenType* THIS )
{
  return (RogueClassStructuralDirectiveTokenType*)(THIS);
}

RogueString* RogueEOLTokenType__type_name( RogueClassEOLTokenType* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[832]);
}

RogueClassToken* RogueEOLTokenType__create_token__String_Integer_Integer( RogueClassEOLTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueClassToken*)((RogueEOLToken__init__TokenType_String( ((RogueClassEOLToken*)Rogue_program.type_EOLToken->create_and_init_object()), ((RogueClassTokenType*)(THIS)), Rogue_program.literal_strings[0] )))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueEOLTokenType__create_token__String_Integer_Integer_String( RogueClassEOLTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2, RogueString* value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueClassToken*)((RogueEOLToken__init__TokenType_String( ((RogueClassEOLToken*)Rogue_program.type_EOLToken->create_and_init_object()), ((RogueClassTokenType*)(THIS)), value_3 )))), filepath_0, line_1, column_2 ))));
}

RogueLogical RogueEOLTokenType__is_structure( RogueClassEOLTokenType* THIS )
{
  return (RogueLogical)(false);
}

RogueClassEOLTokenType* RogueEOLTokenType__init_object( RogueClassEOLTokenType* THIS )
{
  return (RogueClassEOLTokenType*)(THIS);
}

RogueString* RogueStructureTokenType__type_name( RogueClassStructureTokenType* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[833]);
}

RogueClassToken* RogueStructureTokenType__create_token__String_Integer_Integer( RogueClassStructureTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueToken__init__TokenType( ((RogueClassToken*)Rogue_program.type_Token->create_and_init_object()), ((RogueClassTokenType*)(THIS)) ))), filepath_0, line_1, column_2 ))));
}

RogueLogical RogueStructureTokenType__is_structure( RogueClassStructureTokenType* THIS )
{
  return (RogueLogical)(true);
}

RogueClassStructureTokenType* RogueStructureTokenType__init_object( RogueClassStructureTokenType* THIS )
{
  return (RogueClassStructureTokenType*)(THIS);
}

RogueString* RogueOpWithAssignTokenType__type_name( RogueClassOpWithAssignTokenType* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[834]);
}

RogueLogical RogueOpWithAssignTokenType__is_op_with_assign( RogueClassOpWithAssignTokenType* THIS )
{
  return (RogueLogical)(true);
}

RogueClassOpWithAssignTokenType* RogueOpWithAssignTokenType__init_object( RogueClassOpWithAssignTokenType* THIS )
{
  return (RogueClassOpWithAssignTokenType*)(THIS);
}

RogueString* RogueEOLToken__to_String( RogueClassEOLToken* THIS )
{
  if (!!(THIS->comment->count))
  {
    return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[628] ))), THIS->comment ))) ))));
  }
  return (RogueString*)(Rogue_program.literal_strings[230]);
}

RogueString* RogueEOLToken__type_name( RogueClassEOLToken* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[634]);
}

RogueClassEOLToken* RogueEOLToken__init_object( RogueClassEOLToken* THIS )
{
  return (RogueClassEOLToken*)(THIS);
}

RogueClassEOLToken* RogueEOLToken__init__TokenType_String( RogueClassEOLToken* THIS, RogueClassTokenType* _auto_1011_0, RogueString* _auto_1012_1 )
{
  THIS->comment = _auto_1012_1;
  THIS->_type = _auto_1011_0;
  return (RogueClassEOLToken*)(THIS);
}

RogueString* RogueString_TokenListTable__to_String( RogueClassString_TokenListTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_TokenListTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))) ))) ))));
}

RogueString* RogueString_TokenListTable__type_name( RogueClassString_TokenListTable* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[584]);
}

RogueClassString_TokenListTable* RogueString_TokenListTable__init( RogueClassString_TokenListTable* THIS )
{
  RogueString_TokenListTable__init__Integer( THIS, 16 );
  return (RogueClassString_TokenListTable*)(THIS);
}

RogueClassString_TokenListTable* RogueString_TokenListTable__init__Integer( RogueClassString_TokenListTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_TokenListTableEntryList__init__Integer_String_TokenListTableEntry( ((RogueTableEntry_of_String_TokenListList*)Rogue_program.type_TableEntry_of_String_TokenListList->create_and_init_object()), bin_count_0, ((RogueClassString_TokenListTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)Rogue_program.type_StringList->create_and_init_object()) )));
  return (RogueClassString_TokenListTable*)(THIS);
}

RogueClassString_TokenListTableEntry* RogueString_TokenListTable__find__String( RogueClassString_TokenListTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_TokenListTableEntry* entry_2 = (((RogueClassString_TokenListTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_TokenListTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_TokenListTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_TokenListTableEntry*)(((RogueClassString_TokenListTableEntry*)(NULL)));
}

RogueTokenList* RogueString_TokenListTable__get__String( RogueClassString_TokenListTable* THIS, RogueString* key_0 )
{
  RogueClassString_TokenListTableEntry* entry_1 = (((RogueString_TokenListTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueTokenList*)(entry_1->value);
  }
  else
  {
    RogueTokenList* default_value_2 = 0;
    return (RogueTokenList*)(default_value_2);
  }
}

void RogueString_TokenListTable__set__String_TokenList( RogueClassString_TokenListTable* THIS, RogueString* key_0, RogueTokenList* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_TokenListTableEntry* entry_4 = (((RogueClassString_TokenListTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_TokenListTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_TokenListTableEntry*)((RogueString_TokenListTableEntry__init__String_TokenList_Integer( ((RogueClassString_TokenListTableEntry*)Rogue_program.type_String_TokenListTableEntry->create_and_init_object()), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_TokenListTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_TokenListTable__print_to__StringBuilder( RogueClassString_TokenListTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_TokenListTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_TokenListTable* RogueString_TokenListTable__init_object( RogueClassString_TokenListTable* THIS )
{
  return (RogueClassString_TokenListTable*)(THIS);
}

RogueString* RoguePreprocessorTokenReader__type_name( RogueClassPreprocessorTokenReader* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[585]);
}

RogueClassPreprocessorTokenReader* RoguePreprocessorTokenReader__init__TokenList( RogueClassPreprocessorTokenReader* THIS, RogueTokenList* _auto_1027_0 )
{
  THIS->tokens = _auto_1027_0;
  THIS->count = THIS->tokens->count;
  return (RogueClassPreprocessorTokenReader*)(THIS);
}

RogueClassError* RoguePreprocessorTokenReader__error__String( RogueClassPreprocessorTokenReader* THIS, RogueString* message_0 )
{
  if (((RoguePreprocessorTokenReader__has_another( THIS ))))
  {
    return (RogueClassError*)(((RogueClassError*)(((RogueToken__error__String( ((RoguePreprocessorTokenReader__peek( THIS ))), message_0 ))))));
  }
  if (!!(THIS->count))
  {
    return (RogueClassError*)(((RogueClassError*)(((RogueToken__error__String( ((RogueTokenList__last( THIS->tokens ))), message_0 ))))));
  }
  return (RogueClassError*)(((RogueClassError*)(((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)Rogue_program.type_RogueError->create_and_init_object()), message_0, ((RogueString*)(NULL)), 0, 0 ))))));
}

void RoguePreprocessorTokenReader__expand_definition__Token( RogueClassPreprocessorTokenReader* THIS, RogueClassToken* t_0 )
{
  RogueClassString_TokenListTableEntry* entry_1 = (((RogueString_TokenListTable__find__String( RogueClassPreprocessor::definitions, (call_ROGUEM33( 1, (RogueClassToken*)(t_0) )) ))));
  if (!!(entry_1))
  {
    if (!!(entry_1->value))
    {
      RogueTokenList* def_tokens_2 = (entry_1->value);
      entry_1->value = ((RogueTokenList*)(NULL));
      {
        RogueTokenList* _auto_1229_3 = (def_tokens_2);
        RogueInteger _auto_1230_4 = (0);
        for (;_auto_1230_4 < _auto_1229_3->count;++_auto_1230_4)
        {
          RogueClassToken* def_t_5 = (((RogueClassToken*)(_auto_1229_3->data->objects[_auto_1230_4])));
          if (t_0->_type == RogueClassTokenType::identifier)
          {
            RoguePreprocessorTokenReader__expand_definition__Token( THIS, def_t_5 );
          }
          else
          {
            RogueTokenList__add__Token( THIS->queue, t_0 );
          }
        }
      }
      entry_1->value = def_tokens_2;
      return;
    }
    else
    {
      throw ((RogueToken__error__String( t_0, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[43] ))), (call_ROGUEM33( 1, (RogueClassToken*)(t_0) )) ))), Rogue_program.literal_strings[39] ))) ))) )));
    }
  }
  else
  {
    RogueTokenList__add__Token( THIS->queue, t_0 );
  }
}

RogueLogical RoguePreprocessorTokenReader__has_another( RogueClassPreprocessorTokenReader* THIS )
{
  RoguePreprocessorTokenReader__peek( THIS );
  return (RogueLogical)(!!(THIS->queue->count));
}

RogueLogical RoguePreprocessorTokenReader__next_is__TokenType( RogueClassPreprocessorTokenReader* THIS, RogueClassTokenType* type_0 )
{
  if ((THIS->position == THIS->count && THIS->queue->count == 0))
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(((RoguePreprocessorTokenReader__peek( THIS )))->_type == type_0);
}

RogueClassToken* RoguePreprocessorTokenReader__peek( RogueClassPreprocessorTokenReader* THIS )
{
  if (!!(THIS->queue->count))
  {
    return (RogueClassToken*)(((RogueTokenList__last( THIS->queue ))));
  }
  return (RogueClassToken*)(((RoguePreprocessorTokenReader__peek__Integer( THIS, 0 ))));
}

RogueClassToken* RoguePreprocessorTokenReader__peek__Integer( RogueClassPreprocessorTokenReader* THIS, RogueInteger num_ahead_0 )
{
  if ((THIS->position + num_ahead_0) >= (THIS->count + THIS->queue->count))
  {
    return (RogueClassToken*)(((RogueTokenList__last( THIS->tokens ))));
  }
  while (THIS->queue->count <= num_ahead_0)
  {
    RogueClassToken* t_1 = (((RogueClassToken*)(THIS->tokens->data->objects[THIS->position])));
    ++THIS->position;
    if (t_1->_type == RogueClassTokenType::identifier)
    {
      RoguePreprocessorTokenReader__expand_definition__Token( THIS, t_1 );
    }
    else
    {
      RogueTokenList__add__Token( THIS->queue, t_1 );
    }
  }
  return (RogueClassToken*)(((RogueClassToken*)(THIS->queue->data->objects[((THIS->queue->count - num_ahead_0) - 1)])));
}

void RoguePreprocessorTokenReader__push__Token( RogueClassPreprocessorTokenReader* THIS, RogueClassToken* t_0 )
{
  RogueTokenList__add__Token( THIS->queue, t_0 );
}

RogueClassToken* RoguePreprocessorTokenReader__read( RogueClassPreprocessorTokenReader* THIS )
{
  RoguePreprocessorTokenReader__peek( THIS );
  if (THIS->queue->count == 0)
  {
    throw ((RoguePreprocessorTokenReader__error__String( THIS, Rogue_program.literal_strings[44] )));
  }
  return (RogueClassToken*)(((RogueTokenList__remove_last( THIS->queue ))));
}

RogueString* RoguePreprocessorTokenReader__read_identifier( RogueClassPreprocessorTokenReader* THIS )
{
  if (!(((RoguePreprocessorTokenReader__next_is__TokenType( THIS, RogueClassTokenType::identifier )))))
  {
    throw ((RoguePreprocessorTokenReader__error__String( THIS, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)Rogue_program.type_StringBuilder->create_and_init_object()) ))), Rogue_program.literal_strings[45] ))), ((RogueToken__quoted_name( ((RoguePreprocessorTokenReader__peek( THIS ))) ))) ))), Rogue_program.literal_strings[47] ))) ))) )));
  }
  return (RogueString*)((call_ROGUEM33( 1, (RogueClassToken*)(((RoguePreprocessorTokenReader__read( THIS )))) )));
}

RogueClassPreprocessorTokenReader* RoguePreprocessorTokenReader__init_object( RogueClassPreprocessorTokenReader* THIS )
{
  THIS->queue = ((RogueTokenList__init( ((RogueTokenList*)Rogue_program.type_TokenList->create_and_init_object()) )));
  return (RogueClassPreprocessorTokenReader*)(THIS);
}

RogueString* RogueCmdWhichCaseArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[616]);
}

RogueString* RogueCmdSwitch__type_name( RogueClassCmdSwitch* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[845]);
}

RogueClassCmdSwitch* RogueCmdSwitch__clone__CloneArgs( RogueClassCmdSwitch* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdSwitch* result_1 = (((RogueCmdSwitch__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Integer( ((RogueClassCmdSwitch*)Rogue_program.type_CmdSwitch->create_and_init_object()), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->expression), clone_args_0 )), ((RogueCmdWhichCaseList*)(NULL)), ((RogueClassCmdWhichCase*)(NULL)), 5 ))));
  call_ROGUEM171( 31, (RogueClassCmdControlStructure*)(result_1), ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_1));
  RogueCmdWhichCaseList* cloned_cases_2 = (((RogueCmdWhichCaseList__init__Integer( ((RogueCmdWhichCaseList*)Rogue_program.type_CmdWhichCaseList->create_and_init_object()), THIS->cases->count ))));
  {
    RogueCmdWhichCaseList* _auto_1231_3 = (THIS->cases);
    RogueInteger _auto_1232_4 = (0);
    for (;_auto_1232_4 < _auto_1231_3->count;++_auto_1232_4)
    {
      RogueClassCmdWhichCase* c_5 = (((RogueClassCmdWhichCase*)(_auto_1231_3->data->objects[_auto_1232_4])));
      RogueCmdWhichCaseList__add__CmdWhichCase( cloned_cases_2, ((RogueCmdWhichCase__clone__CloneArgs( c_5, clone_args_0 ))) );
    }
  }
  result_1->cases = cloned_cases_2;
  if (!!(THIS->case_others))
  {
    result_1->case_others = ((RogueCmdWhichCase__clone__CloneArgs( THIS->case_others, clone_args_0 )));
  }
  return (RogueClassCmdSwitch*)(result_1);
}

RogueClassCmd* RogueCmdSwitch__resolve__Scope( RogueClassCmdSwitch* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->expression = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->expression), scope_0 ));
  {
    RogueCmdWhichCaseList* _auto_1233_1 = (THIS->cases);
    RogueInteger _auto_1234_2 = (0);
    for (;_auto_1234_2 < _auto_1233_1->count;++_auto_1234_2)
    {
      RogueClassCmdWhichCase* c_3 = (((RogueClassCmdWhichCase*)(_auto_1233_1->data->objects[_auto_1234_2])));
      RogueCmdArgs__resolve__Scope( c_3->conditions, scope_0 );
      RogueCmdStatementList__resolve__Scope( c_3->statements, scope_0 );
    }
  }
  if (!!(THIS->case_others))
  {
    RogueCmdArgs__resolve__Scope( THIS->case_others->conditions, scope_0 );
    RogueCmdStatementList__resolve__Scope( THIS->case_others->statements, scope_0 );
  }
  RogueCmdControlStructureList__remove_last( scope_0->control_stack );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdSwitch__trace_used_code( RogueClassCmdSwitch* THIS )
{
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->expression) );
  {
    RogueCmdWhichCaseList* _auto_1235_0 = (THIS->cases);
    RogueInteger _auto_1236_1 = (0);
    for (;_auto_1236_1 < _auto_1235_0->count;++_auto_1236_1)
    {
      RogueClassCmdWhichCase* c_2 = (((RogueClassCmdWhichCase*)(_auto_1235_0->data->objects[_auto_1236_1])));
      RogueCmdWhichCase__trace_used_code( c_2 );
    }
  }
  if (!!(THIS->case_others))
  {
    RogueCmdWhichCase__trace_used_code( THIS->case_others );
  }
}

void RogueCmdSwitch__write_cpp__CPPWriter_Logical( RogueClassCmdSwitch* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[810] );
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->expression), writer_0, false );
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[102] );
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
  writer_0->indent += 2;
  {
    RogueCmdWhichCaseList* _auto_1237_2 = (THIS->cases);
    RogueInteger _auto_1238_3 = (0);
    for (;_auto_1238_3 < _auto_1237_2->count;++_auto_1238_3)
    {
      RogueClassCmdWhichCase* c_4 = (((RogueClassCmdWhichCase*)(_auto_1237_2->data->objects[_auto_1238_3])));
      {
        RogueClassCmdArgs* _auto_1239_5 = (c_4->conditions);
        RogueInteger _auto_1240_6 = (0);
        for (;_auto_1240_6 < _auto_1239_5->count;++_auto_1240_6)
        {
          RogueClassCmd* condition_7 = (((RogueClassCmd*)(_auto_1239_5->data->objects[_auto_1240_6])));
          RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[487] );
          call_ROGUEM52( 29, (RogueClassCmd*)(condition_7), writer_0, false );
          RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[157] );
        }
      }
      RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
      writer_0->indent += 2;
      RogueCmdStatementList__write_cpp__CPPWriter_Logical( c_4->statements, writer_0, false );
      RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[811] );
      writer_0->indent -= 2;
      RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
    }
  }
  if (!!(THIS->case_others))
  {
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[490] );
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[175] );
    writer_0->indent += 2;
    RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->case_others->statements, writer_0, false );
    writer_0->indent -= 2;
    RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
  }
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_program.literal_strings[100] );
}

RogueClassCmdSwitch* RogueCmdSwitch__init_object( RogueClassCmdSwitch* THIS )
{
  return (RogueClassCmdSwitch*)(THIS);
}

RogueClassCmdSwitch* RogueCmdSwitch__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Integer( RogueClassCmdSwitch* THIS, RogueClassToken* _auto_1041_0, RogueClassCmd* _auto_1042_1, RogueCmdWhichCaseList* _auto_1043_2, RogueClassCmdWhichCase* _auto_1044_3, RogueInteger _auto_1045_4 )
{
  THIS->_control_type = _auto_1045_4;
  THIS->case_others = _auto_1044_3;
  THIS->cases = _auto_1043_2;
  THIS->expression = _auto_1042_1;
  THIS->t = _auto_1041_0;
  return (RogueClassCmdSwitch*)(THIS);
}

RogueString* RogueCmdCatchArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[617]);
}

RogueString* RogueCmdReadArrayElement__type_name( RogueClassCmdReadArrayElement* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[959]);
}

RogueClassCmd* RogueCmdReadArrayElement__clone__CloneArgs( RogueClassCmdReadArrayElement* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadArrayElement__init__Token_Cmd_Cmd( ((RogueClassCmdReadArrayElement*)Rogue_program.type_CmdReadArrayElement->create_and_init_object()), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->context), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->index), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdReadArrayElement__resolve__Scope( RogueClassCmdReadArrayElement* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->_array_type))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  THIS->context = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->context), scope_0 ));
  THIS->_array_type = ((Rogue_Cmd__require_type( THIS->context )));
  THIS->index = ((RogueCmd__require_integer( (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->index), scope_0 )) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdReadArrayElement__resolve_modify__Scope_Integer( RogueClassCmdReadArrayElement* THIS, RogueClassScope* scope_0, RogueInteger delta_1 )
{
  return (RogueClassCmd*)(((RogueCmdWriteArrayElement__resolve__Scope( ((RogueCmdWriteArrayElement__init__Token_Cmd_Cmd_Cmd( ((RogueClassCmdWriteArrayElement*)Rogue_program.type_CmdWriteArrayElement->create_and_init_object()), THIS->t, THIS->context, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->index), ((RogueClassCloneArgs*)(NULL)) )), ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdAdd*)Rogue_program.type_CmdAdd->create_and_init_object())), THIS->t, ((RogueClassCmd*)(THIS)), ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)Rogue_program.type_CmdLiteralInteger->create_and_init_object()), THIS->t, delta_1 ))))) ))))) ))), scope_0 ))));
}

void RogueCmdReadArrayElement__trace_used_code( RogueClassCmdReadArrayElement* THIS )
{
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->context) );
  RogueType__trace_used_code( THIS->_array_type );
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->index) );
}

RogueClassType* Rogue_CmdReadArrayElement__type( RogueClassCmdReadArrayElement* THIS )
{
  return (RogueClassType*)(THIS->_array_type->_element_type);
}

void RogueCmdReadArrayElement__write_cpp__CPPWriter_Logical( RogueClassCmdReadArrayElement* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueClassType* element_type_2 = (THIS->_array_type->_element_type);
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_open_cast__Type_Type( writer_0, ((Rogue_Type__compile_type( element_type_2 ))), element_type_2 );
  }
  if (((RogueType__is_reference( element_type_2 ))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[450] );
    RogueCPPWriter__print__Type( writer_0, element_type_2 );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[765] );
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[812] );
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[813] );
  }
  else if (((RogueType__is_primitive( element_type_2 ))))
  {
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[152] );
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[814] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Float)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[815] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Long)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[816] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[817] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[818] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[819] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[820] );
      }
      else
      {
        throw ((RogueToken__error__String( THIS->t, Rogue_program.literal_strings[821] )));
      }
    }
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[17] );
  }
  else
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[450] ))), element_type_2 ))), Rogue_program.literal_strings[822] );
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[823] );
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[17] );
  }
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_close_cast__Type_Type( writer_0, ((Rogue_Type__compile_type( element_type_2 ))), element_type_2 );
  }
}

RogueClassCmdReadArrayElement* RogueCmdReadArrayElement__init_object( RogueClassCmdReadArrayElement* THIS )
{
  return (RogueClassCmdReadArrayElement*)(THIS);
}

RogueClassCmdReadArrayElement* RogueCmdReadArrayElement__init__Token_Cmd_Cmd( RogueClassCmdReadArrayElement* THIS, RogueClassToken* _auto_1090_0, RogueClassCmd* _auto_1091_1, RogueClassCmd* _auto_1092_2 )
{
  THIS->index = _auto_1092_2;
  THIS->context = _auto_1091_1;
  THIS->t = _auto_1090_0;
  return (RogueClassCmdReadArrayElement*)(THIS);
}

RogueString* RogueCmdWriteArrayElement__type_name( RogueClassCmdWriteArrayElement* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[960]);
}

RogueClassCmd* RogueCmdWriteArrayElement__clone__CloneArgs( RogueClassCmdWriteArrayElement* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdWriteArrayElement__init__Token_Cmd_Cmd_Cmd( ((RogueClassCmdWriteArrayElement*)Rogue_program.type_CmdWriteArrayElement->create_and_init_object()), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->context), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->index), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdWriteArrayElement__resolve__Scope( RogueClassCmdWriteArrayElement* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->_array_type))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  THIS->context = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->context), scope_0 ));
  THIS->_array_type = ((Rogue_Cmd__require_type( THIS->context )));
  THIS->index = ((RogueCmd__require_integer( (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->index), scope_0 )) )));
  THIS->new_value = (call_ROGUEM42( 23, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(((RogueCmd__require_value( (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->new_value), scope_0 )) )))), THIS->_array_type->_element_type ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdWriteArrayElement__trace_used_code( RogueClassCmdWriteArrayElement* THIS )
{
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->context) );
  RogueType__trace_used_code( THIS->_array_type );
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->new_value) );
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->index) );
}

RogueClassType* Rogue_CmdWriteArrayElement__type( RogueClassCmdWriteArrayElement* THIS )
{
  return (RogueClassType*)(THIS->_array_type->_element_type);
}

void RogueCmdWriteArrayElement__write_cpp__CPPWriter_Logical( RogueClassCmdWriteArrayElement* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueClassType* element_type_2 = (THIS->_array_type->_element_type);
  if (((RogueType__is_primitive( element_type_2 ))))
  {
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[152] );
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[814] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Float)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[815] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Long)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[816] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[817] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[818] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[819] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[820] );
      }
    }
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[824] );
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->new_value), writer_0, false );
  }
  else if (((RogueType__is_reference( element_type_2 ))))
  {
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[152] );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[825] );
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[824] );
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->new_value), writer_0, false );
  }
  else
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[450] ))), element_type_2 ))), Rogue_program.literal_strings[822] );
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[823] );
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[824] );
    call_ROGUEM52( 29, (RogueClassCmd*)(THIS->new_value), writer_0, false );
  }
}

RogueClassCmdWriteArrayElement* RogueCmdWriteArrayElement__init_object( RogueClassCmdWriteArrayElement* THIS )
{
  return (RogueClassCmdWriteArrayElement*)(THIS);
}

RogueClassCmdWriteArrayElement* RogueCmdWriteArrayElement__init__Token_Cmd_Cmd_Cmd( RogueClassCmdWriteArrayElement* THIS, RogueClassToken* _auto_1093_0, RogueClassCmd* _auto_1094_1, RogueClassCmd* _auto_1095_2, RogueClassCmd* _auto_1096_3 )
{
  THIS->new_value = _auto_1096_3;
  THIS->index = _auto_1095_2;
  THIS->context = _auto_1094_1;
  THIS->t = _auto_1093_0;
  return (RogueClassCmdWriteArrayElement*)(THIS);
}

RogueString* RogueCmdConvertToPrimitiveType__type_name( RogueClassCmdConvertToPrimitiveType* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[914]);
}

RogueClassCmd* RogueCmdConvertToPrimitiveType__clone__CloneArgs( RogueClassCmdConvertToPrimitiveType* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdConvertToPrimitiveType*)Rogue_program.type_CmdConvertToPrimitiveType->create_and_init_object())), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->operand), clone_args_0 )), THIS->_target_type ))))));
}

RogueClassCmd* RogueCmdConvertToPrimitiveType__resolve__Scope( RogueClassCmdConvertToPrimitiveType* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = ((RogueCmd__require_value( (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->operand), scope_0 )) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdConvertToPrimitiveType__write_cpp__CPPWriter_Logical( RogueClassCmdConvertToPrimitiveType* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[450] ))), THIS->_target_type->cpp_class_name ))), Rogue_program.literal_strings[765] );
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->operand), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[778] );
}

RogueClassCmdConvertToPrimitiveType* RogueCmdConvertToPrimitiveType__init_object( RogueClassCmdConvertToPrimitiveType* THIS )
{
  return (RogueClassCmdConvertToPrimitiveType*)(THIS);
}

RogueString* RogueFnParamArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[618]);
}

RogueString* RogueFnArgArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[619]);
}

RogueString* RogueCmdAdjustProperty__type_name( RogueClassCmdAdjustProperty* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[961]);
}

RogueClassCmd* RogueCmdAdjustProperty__clone__CloneArgs( RogueClassCmdAdjustProperty* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAdjustProperty__init__Token_Cmd_Property_Integer( ((RogueClassCmdAdjustProperty*)Rogue_program.type_CmdAdjustProperty->create_and_init_object()), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->context), clone_args_0 )), THIS->property_info, THIS->delta ))))));
}

RogueClassCmd* RogueCmdAdjustProperty__resolve__Scope( RogueClassCmdAdjustProperty* THIS, RogueClassScope* scope_0 )
{
  THIS->context = (call_ROGUEM42( 23, (RogueClassCmd*)(THIS->context), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdAdjustProperty__trace_used_code( RogueClassCmdAdjustProperty* THIS )
{
  call_ROGUEM48( 27, (RogueClassCmd*)(THIS->context) );
  RogueType__trace_used_code( THIS->property_info->type_context );
  RogueType__trace_used_code( THIS->property_info->_type );
}

RogueClassType* Rogue_CmdAdjustProperty__type( RogueClassCmdAdjustProperty* THIS )
{
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

void RogueCmdAdjustProperty__write_cpp__CPPWriter_Logical( RogueClassCmdAdjustProperty* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (THIS->delta > 0)
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[182] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[4] );
  }
  call_ROGUEM52( 29, (RogueClassCmd*)(THIS->context), writer_0, false );
  RogueCPPWriter__print_access_operator__Type( writer_0, (call_ROGUEM46( 28, (RogueClassCmd*)(THIS->context) )) );
  RogueCPPWriter__print__String( writer_0, THIS->property_info->cpp_name );
}

RogueClassCmdAdjustProperty* RogueCmdAdjustProperty__init_object( RogueClassCmdAdjustProperty* THIS )
{
  return (RogueClassCmdAdjustProperty*)(THIS);
}

RogueClassCmdAdjustProperty* RogueCmdAdjustProperty__init__Token_Cmd_Property_Integer( RogueClassCmdAdjustProperty* THIS, RogueClassToken* _auto_1174_0, RogueClassCmd* _auto_1175_1, RogueClassProperty* _auto_1176_2, RogueInteger _auto_1177_3 )
{
  THIS->delta = _auto_1177_3;
  THIS->property_info = _auto_1176_2;
  THIS->context = _auto_1175_1;
  THIS->t = _auto_1174_0;
  return (RogueClassCmdAdjustProperty*)(THIS);
}

RogueString* RogueCmdCallStaticMethod__type_name( RogueClassCmdCallStaticMethod* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[981]);
}

RogueClassCmd* RogueCmdCallStaticMethod__clone__CloneArgs( RogueClassCmdCallStaticMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallStaticMethod*)Rogue_program.type_CmdCallStaticMethod->create_and_init_object())), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, clone_args_0 ))), THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdCallStaticMethod__resolve__Scope( RogueClassCmdCallStaticMethod* THIS, RogueClassScope* scope_0 )
{
  if (!(!!(THIS->context)))
  {
    THIS->context = ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)Rogue_program.type_CmdThisContext->create_and_init_object()), THIS->t, THIS->method_info->type_context )))));
  }
  return (RogueClassCmd*)((RogueCmdCall__resolve__Scope( ((RogueClassCmdCall*)THIS), scope_0 )));
}

void RogueCmdCallStaticMethod__write_cpp__CPPWriter_Logical( RogueClassCmdCallStaticMethod* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[176] ))), THIS->method_info->_return_type, THIS->method_info->_return_type );
  }
  RogueCPPWriter__print__String( writer_0, THIS->method_info->cpp_name );
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[406] );
  RogueCPPWriter__print_cast__Type_Type_Cmd( writer_0, (call_ROGUEM46( 28, (RogueClassCmd*)(THIS->context) )), THIS->method_info->type_context, THIS->context );
  RogueInteger i_2 = (0);
  {
    RogueClassCmdArgs* _auto_1241_4 = (THIS->args);
    RogueInteger _auto_1242_5 = (0);
    for (;_auto_1242_5 < _auto_1241_4->count;++_auto_1242_5)
    {
      RogueClassCmd* arg_6 = (((RogueClassCmd*)(_auto_1241_4->data->objects[_auto_1242_5])));
      RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[403] );
      RogueClassType* param_type_3 = (((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type);
      if (((RogueType__is_aspect( param_type_3 ))))
      {
        RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[176] ))), (call_ROGUEM46( 28, (RogueClassCmd*)(arg_6) )), ((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type );
        call_ROGUEM52( 29, (RogueClassCmd*)(arg_6), writer_0, false );
        RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] );
      }
      else
      {
        call_ROGUEM52( 29, (RogueClassCmd*)(arg_6), writer_0, false );
      }
      ++i_2;
    }
  }
  RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[448] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_program.literal_strings[102] );
  }
}

RogueClassCmdCallStaticMethod* RogueCmdCallStaticMethod__init_object( RogueClassCmdCallStaticMethod* THIS )
{
  return (RogueClassCmdCallStaticMethod*)(THIS);
}

RogueString* RogueString_TokenListTableEntryList__to_String( RogueTableEntry_of_String_TokenListList* THIS )
{
  RogueString* buffer_0 = (Rogue_program.literal_strings[15]);
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_TokenListList* _auto_1243_2 = (THIS);
    RogueInteger _auto_1244_3 = (0);
    for (;_auto_1244_3 < _auto_1243_2->count;++_auto_1244_3)
    {
      RogueClassString_TokenListTableEntry* value_4 = (((RogueClassString_TokenListTableEntry*)(_auto_1243_2->data->objects[_auto_1244_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[16] ))));
      }
      buffer_0 = ((RogueString*)((RogueString__operatorPLUS__Object( buffer_0, ((RogueObject*)(value_4)) ))));
    }
  }
  buffer_0 = ((RogueString*)((RogueString__operatorPLUS__String( buffer_0, Rogue_program.literal_strings[17] ))));
  return (RogueString*)(buffer_0);
}

RogueString* RogueString_TokenListTableEntryList__type_name( RogueTableEntry_of_String_TokenListList* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[948]);
}

RogueTableEntry_of_String_TokenListList* RogueString_TokenListTableEntryList__init_object( RogueTableEntry_of_String_TokenListList* THIS )
{
  return (RogueTableEntry_of_String_TokenListList*)(THIS);
}

RogueTableEntry_of_String_TokenListList* RogueString_TokenListTableEntryList__init__Integer_String_TokenListTableEntry( RogueTableEntry_of_String_TokenListList* THIS, RogueInteger initial_capacity_0, RogueClassString_TokenListTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_TokenListTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_1225_3 = (initial_capacity_0);
    for (;i_2 <= _auto_1225_3;++i_2)
    {
      RogueString_TokenListTableEntryList__add__String_TokenListTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_TokenListList*)(THIS);
}

RogueTableEntry_of_String_TokenListList* RogueString_TokenListTableEntryList__add__String_TokenListTableEntry( RogueTableEntry_of_String_TokenListList* THIS, RogueClassString_TokenListTableEntry* value_0 )
{
  ((RogueString_TokenListTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_TokenListList*)(THIS);
}

RogueInteger RogueString_TokenListTableEntryList__capacity( RogueTableEntry_of_String_TokenListList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_TokenListList* RogueString_TokenListTableEntryList__reserve__Integer( RogueTableEntry_of_String_TokenListList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_TokenListTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_TokenListTableEntryList__capacity( THIS ))) + ((RogueString_TokenListTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_TokenListTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_TokenListList*)(THIS);
}

RogueString* RogueString_TokenListTableEntry__type_name( RogueClassString_TokenListTableEntry* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[586]);
}

RogueClassString_TokenListTableEntry* RogueString_TokenListTableEntry__init__String_TokenList_Integer( RogueClassString_TokenListTableEntry* THIS, RogueString* _key_0, RogueTokenList* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_TokenListTableEntry*)(THIS);
}

RogueClassString_TokenListTableEntry* RogueString_TokenListTableEntry__init_object( RogueClassString_TokenListTableEntry* THIS )
{
  return (RogueClassString_TokenListTableEntry*)(THIS);
}

RogueString* RogueString_TokenListTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_program.literal_strings[620]);
}


RogueProgram::RogueProgram() : RogueProgramCore(257)
{
}

RogueProgram::~RogueProgram()
{
}

void RogueProgram::configure()
{
  type_Real = new RogueTypeReal();
  type_Long = new RogueTypeLong();
  type_Integer = new RogueTypeInteger();
  type_CharacterList = new RogueTypeCharacterList();
  type_Character = new RogueTypeCharacter();
  type_GenericList = new RogueTypeGenericList();
  type_StringBuilder = new RogueTypeStringBuilder();
  type_OptionalInteger = new RogueTypeOptionalInteger();
  type_Logical = new RogueTypeLogical();
  type_StringList = new RogueTypeStringList();
  type_Byte = new RogueTypeByte();
  type_StringReader = new RogueTypeStringReader();
  type_CharacterReader = new RogueTypeCharacterReader();
  type_Global = new RogueTypeGlobal();
  type_Console = new RogueTypeConsole();
  type_RogueC = new RogueTypeRogueC();
  type_Error = new RogueTypeError();
  type_Program = new RogueTypeProgram();
  type_TemplateList = new RogueTypeTemplateList();
  type_Template = new RogueTypeTemplate();
  type_String_TemplateTable = new RogueTypeString_TemplateTable();
  type_String_AugmentListTable = new RogueTypeString_AugmentListTable();
  type_RequisiteItemList = new RogueTypeRequisiteItemList();
  type_RequisiteItem = new RogueTypeRequisiteItem();
  type_Method = new RogueTypeMethod();
  type_String_MethodListTable = new RogueTypeString_MethodListTable();
  type_TypeList = new RogueTypeTypeList();
  type_Type = new RogueTypeType();
  type_String_TypeTable = new RogueTypeString_TypeTable();
  type_String_IntegerTable = new RogueTypeString_IntegerTable();
  type_Token = new RogueTypeToken();
  type_Attributes = new RogueTypeAttributes();
  type_Cmd = new RogueTypeCmd();
  type_CmdReturn = new RogueTypeCmdReturn();
  type_CmdStatement = new RogueTypeCmdStatement();
  type_CmdStatementList = new RogueTypeCmdStatementList();
  type_CmdList = new RogueTypeCmdList();
  type_TokenType = new RogueTypeTokenType();
  type_CmdLabel = new RogueTypeCmdLabel();
  type_RogueError = new RogueTypeRogueError();
  type_MethodList = new RogueTypeMethodList();
  type_CPPWriter = new RogueTypeCPPWriter();
  type_String_MethodTable = new RogueTypeString_MethodTable();
  type_LocalList = new RogueTypeLocalList();
  type_Local = new RogueTypeLocal();
  type_ByteList = new RogueTypeByteList();
  type_Math = new RogueTypeMath();
  type_System = new RogueTypeSystem();
  type_TaskManager = new RogueTypeTaskManager();
  type_Task = new RogueTypeTask();
  type_TaskList = new RogueTypeTaskList();
  type_String_LogicalTable = new RogueTypeString_LogicalTable();
  type_File = new RogueTypeFile();
  type_Parser = new RogueTypeParser();
  type_TokenList = new RogueTypeTokenList();
  type_LineReader = new RogueTypeLineReader();
  type_Reader_of_String = new RogueTypeReader_of_String();
  type_TypeParameterList = new RogueTypeTypeParameterList();
  type_TypeParameter = new RogueTypeTypeParameter();
  type_AugmentList = new RogueTypeAugmentList();
  type_Augment = new RogueTypeAugment();
  type_String_TokenTypeTable = new RogueTypeString_TokenTypeTable();
  type_LiteralCharacterToken = new RogueTypeLiteralCharacterToken();
  type_LiteralLongToken = new RogueTypeLiteralLongToken();
  type_LiteralIntegerToken = new RogueTypeLiteralIntegerToken();
  type_LiteralRealToken = new RogueTypeLiteralRealToken();
  type_LiteralStringToken = new RogueTypeLiteralStringToken();
  type_String_TypeSpecializerTable = new RogueTypeString_TypeSpecializerTable();
  type_TypeSpecializer = new RogueTypeTypeSpecializer();
  type_TableEntry_of_String_TemplateList = new RogueTypeTableEntry_of_String_TemplateList();
  type_String_TemplateTableEntry = new RogueTypeString_TemplateTableEntry();
  type_TableEntry_of_String_AugmentListList = new RogueTypeTableEntry_of_String_AugmentListList();
  type_String_AugmentListTableEntry = new RogueTypeString_AugmentListTableEntry();
  type_CmdLabelList = new RogueTypeCmdLabelList();
  type_String_CmdLabelTable = new RogueTypeString_CmdLabelTable();
  type_CloneArgs = new RogueTypeCloneArgs();
  type_CloneMethodArgs = new RogueTypeCloneMethodArgs();
  type_Property = new RogueTypeProperty();
  type_CmdAccess = new RogueTypeCmdAccess();
  type_CmdArgs = new RogueTypeCmdArgs();
  type_CmdAssign = new RogueTypeCmdAssign();
  type_Scope = new RogueTypeScope();
  type_CmdControlStructureList = new RogueTypeCmdControlStructureList();
  type_CmdControlStructure = new RogueTypeCmdControlStructure();
  type_CmdLiteralThis = new RogueTypeCmdLiteralThis();
  type_CmdThisContext = new RogueTypeCmdThisContext();
  type_CmdGenericLoop = new RogueTypeCmdGenericLoop();
  type_CmdLiteralInteger = new RogueTypeCmdLiteralInteger();
  type_CmdLiteral = new RogueTypeCmdLiteral();
  type_CmdCompareNE = new RogueTypeCmdCompareNE();
  type_CmdComparison = new RogueTypeCmdComparison();
  type_CmdBinary = new RogueTypeCmdBinary();
  type_TaskArgs = new RogueTypeTaskArgs();
  type_CmdTaskControl = new RogueTypeCmdTaskControl();
  type_CmdTaskControlSection = new RogueTypeCmdTaskControlSection();
  type_TableEntry_of_String_MethodListList = new RogueTypeTableEntry_of_String_MethodListList();
  type_String_MethodListTableEntry = new RogueTypeString_MethodListTableEntry();
  type_String_CmdTable = new RogueTypeString_CmdTable();
  type_PropertyList = new RogueTypePropertyList();
  type_String_PropertyTable = new RogueTypeString_PropertyTable();
  type_CmdLiteralNull = new RogueTypeCmdLiteralNull();
  type_CmdCreateCompound = new RogueTypeCmdCreateCompound();
  type_CmdLiteralLogical = new RogueTypeCmdLiteralLogical();
  type_CmdLiteralString = new RogueTypeCmdLiteralString();
  type_CmdWriteSetting = new RogueTypeCmdWriteSetting();
  type_CmdWriteProperty = new RogueTypeCmdWriteProperty();
  type_TableEntry_of_String_TypeList = new RogueTypeTableEntry_of_String_TypeList();
  type_String_TypeTableEntry = new RogueTypeString_TypeTableEntry();
  type_TableEntry_of_String_IntegerList = new RogueTypeTableEntry_of_String_IntegerList();
  type_String_IntegerTableEntry = new RogueTypeString_IntegerTableEntry();
  type_CmdCastToType = new RogueTypeCmdCastToType();
  type_CmdTypeOperator = new RogueTypeCmdTypeOperator();
  type_CmdLogicalize = new RogueTypeCmdLogicalize();
  type_CmdUnary = new RogueTypeCmdUnary();
  type_CmdCreateOptionalValue = new RogueTypeCmdCreateOptionalValue();
  type_TableEntry_of_String_MethodList = new RogueTypeTableEntry_of_String_MethodList();
  type_String_MethodTableEntry = new RogueTypeString_MethodTableEntry();
  type_TableEntry_of_String_LogicalList = new RogueTypeTableEntry_of_String_LogicalList();
  type_String_LogicalTableEntry = new RogueTypeString_LogicalTableEntry();
  type_FileReader = new RogueTypeFileReader();
  type_FileWriter = new RogueTypeFileWriter();
  type_TokenReader = new RogueTypeTokenReader();
  type_Tokenizer = new RogueTypeTokenizer();
  type_ParseReader = new RogueTypeParseReader();
  type_Preprocessor = new RogueTypePreprocessor();
  type_CmdAdd = new RogueTypeCmdAdd();
  type_CmdIf = new RogueTypeCmdIf();
  type_CmdWhich = new RogueTypeCmdWhich();
  type_CmdContingent = new RogueTypeCmdContingent();
  type_CmdTry = new RogueTypeCmdTry();
  type_CmdAwait = new RogueTypeCmdAwait();
  type_CmdYield = new RogueTypeCmdYield();
  type_CmdThrow = new RogueTypeCmdThrow();
  type_CmdTrace = new RogueTypeCmdTrace();
  type_CmdEscape = new RogueTypeCmdEscape();
  type_CmdNextIteration = new RogueTypeCmdNextIteration();
  type_CmdNecessary = new RogueTypeCmdNecessary();
  type_CmdSufficient = new RogueTypeCmdSufficient();
  type_CmdAdjust = new RogueTypeCmdAdjust();
  type_CmdOpWithAssign = new RogueTypeCmdOpWithAssign();
  type_CmdWhichCaseList = new RogueTypeCmdWhichCaseList();
  type_CmdWhichCase = new RogueTypeCmdWhichCase();
  type_CmdCatchList = new RogueTypeCmdCatchList();
  type_CmdCatch = new RogueTypeCmdCatch();
  type_CmdLocalDeclaration = new RogueTypeCmdLocalDeclaration();
  type_CmdAdjustLocal = new RogueTypeCmdAdjustLocal();
  type_CmdReadLocal = new RogueTypeCmdReadLocal();
  type_CmdCompareLE = new RogueTypeCmdCompareLE();
  type_CmdRange = new RogueTypeCmdRange();
  type_CmdLocalOpWithAssign = new RogueTypeCmdLocalOpWithAssign();
  type_CmdResolvedOpWithAssign = new RogueTypeCmdResolvedOpWithAssign();
  type_CmdForEach = new RogueTypeCmdForEach();
  type_CmdRangeUpTo = new RogueTypeCmdRangeUpTo();
  type_CmdLogicalXor = new RogueTypeCmdLogicalXor();
  type_CmdBinaryLogical = new RogueTypeCmdBinaryLogical();
  type_CmdLogicalOr = new RogueTypeCmdLogicalOr();
  type_CmdLogicalAnd = new RogueTypeCmdLogicalAnd();
  type_CmdCompareEQ = new RogueTypeCmdCompareEQ();
  type_CmdCompareIs = new RogueTypeCmdCompareIs();
  type_CmdCompareIsNot = new RogueTypeCmdCompareIsNot();
  type_CmdCompareLT = new RogueTypeCmdCompareLT();
  type_CmdCompareGT = new RogueTypeCmdCompareGT();
  type_CmdCompareGE = new RogueTypeCmdCompareGE();
  type_CmdInstanceOf = new RogueTypeCmdInstanceOf();
  type_CmdLogicalNot = new RogueTypeCmdLogicalNot();
  type_CmdBitwiseXor = new RogueTypeCmdBitwiseXor();
  type_CmdBitwiseOp = new RogueTypeCmdBitwiseOp();
  type_CmdBitwiseOr = new RogueTypeCmdBitwiseOr();
  type_CmdBitwiseAnd = new RogueTypeCmdBitwiseAnd();
  type_CmdBitwiseShiftLeft = new RogueTypeCmdBitwiseShiftLeft();
  type_CmdBitwiseShiftRight = new RogueTypeCmdBitwiseShiftRight();
  type_CmdBitwiseShiftRightX = new RogueTypeCmdBitwiseShiftRightX();
  type_CmdSubtract = new RogueTypeCmdSubtract();
  type_CmdMultiply = new RogueTypeCmdMultiply();
  type_CmdDivide = new RogueTypeCmdDivide();
  type_CmdMod = new RogueTypeCmdMod();
  type_CmdPower = new RogueTypeCmdPower();
  type_CmdNegate = new RogueTypeCmdNegate();
  type_CmdBitwiseNot = new RogueTypeCmdBitwiseNot();
  type_CmdGetOptionalValue = new RogueTypeCmdGetOptionalValue();
  type_CmdElementAccess = new RogueTypeCmdElementAccess();
  type_CmdConvertToType = new RogueTypeCmdConvertToType();
  type_CmdCreateCallback = new RogueTypeCmdCreateCallback();
  type_CmdAs = new RogueTypeCmdAs();
  type_CmdDefaultValue = new RogueTypeCmdDefaultValue();
  type_CmdFormattedString = new RogueTypeCmdFormattedString();
  type_CmdLiteralReal = new RogueTypeCmdLiteralReal();
  type_CmdLiteralLong = new RogueTypeCmdLiteralLong();
  type_CmdLiteralCharacter = new RogueTypeCmdLiteralCharacter();
  type_CmdCreateList = new RogueTypeCmdCreateList();
  type_CmdCallPriorMethod = new RogueTypeCmdCallPriorMethod();
  type_FnParamList = new RogueTypeFnParamList();
  type_FnParam = new RogueTypeFnParam();
  type_FnArgList = new RogueTypeFnArgList();
  type_FnArg = new RogueTypeFnArg();
  type_CmdCreateFunction = new RogueTypeCmdCreateFunction();
  type_CmdNativeCode = new RogueTypeCmdNativeCode();
  type_TableEntry_of_String_TokenTypeList = new RogueTypeTableEntry_of_String_TokenTypeList();
  type_String_TokenTypeTableEntry = new RogueTypeString_TokenTypeTableEntry();
  type_TableEntry_of_String_TypeSpecializerList = new RogueTypeTableEntry_of_String_TypeSpecializerList();
  type_String_TypeSpecializerTableEntry = new RogueTypeString_TypeSpecializerTableEntry();
  type_TableEntry_of_String_CmdLabelList = new RogueTypeTableEntry_of_String_CmdLabelList();
  type_String_CmdLabelTableEntry = new RogueTypeString_CmdLabelTableEntry();
  type_MacroArgs = new RogueTypeMacroArgs();
  type_CmdReadSingleton = new RogueTypeCmdReadSingleton();
  type_CmdCreateArray = new RogueTypeCmdCreateArray();
  type_CmdCallRoutine = new RogueTypeCmdCallRoutine();
  type_CmdCall = new RogueTypeCmdCall();
  type_CmdCreateObject = new RogueTypeCmdCreateObject();
  type_CmdReadSetting = new RogueTypeCmdReadSetting();
  type_CmdReadProperty = new RogueTypeCmdReadProperty();
  type_CmdLogicalizeOptionalValue = new RogueTypeCmdLogicalizeOptionalValue();
  type_CmdWriteLocal = new RogueTypeCmdWriteLocal();
  type_CmdOpAssignSetting = new RogueTypeCmdOpAssignSetting();
  type_CmdOpAssignProperty = new RogueTypeCmdOpAssignProperty();
  type_CmdCallInlineNativeRoutine = new RogueTypeCmdCallInlineNativeRoutine();
  type_CmdCallInlineNative = new RogueTypeCmdCallInlineNative();
  type_CmdCallNativeRoutine = new RogueTypeCmdCallNativeRoutine();
  type_CmdReadArrayCount = new RogueTypeCmdReadArrayCount();
  type_CmdCallInlineNativeMethod = new RogueTypeCmdCallInlineNativeMethod();
  type_CmdCallNativeMethod = new RogueTypeCmdCallNativeMethod();
  type_CmdCallAspectMethod = new RogueTypeCmdCallAspectMethod();
  type_CmdCallDynamicMethod = new RogueTypeCmdCallDynamicMethod();
  type_CmdCallMethod = new RogueTypeCmdCallMethod();
  type_CandidateMethods = new RogueTypeCandidateMethods();
  type_CmdTaskControlSectionList = new RogueTypeCmdTaskControlSectionList();
  type_CmdBlock = new RogueTypeCmdBlock();
  type_TableEntry_of_String_CmdList = new RogueTypeTableEntry_of_String_CmdList();
  type_String_CmdTableEntry = new RogueTypeString_CmdTableEntry();
  type_TableEntry_of_String_PropertyList = new RogueTypeTableEntry_of_String_PropertyList();
  type_String_PropertyTableEntry = new RogueTypeString_PropertyTableEntry();
  type_DirectiveTokenType = new RogueTypeDirectiveTokenType();
  type_StructuralDirectiveTokenType = new RogueTypeStructuralDirectiveTokenType();
  type_EOLTokenType = new RogueTypeEOLTokenType();
  type_StructureTokenType = new RogueTypeStructureTokenType();
  type_OpWithAssignTokenType = new RogueTypeOpWithAssignTokenType();
  type_EOLToken = new RogueTypeEOLToken();
  type_String_TokenListTable = new RogueTypeString_TokenListTable();
  type_PreprocessorTokenReader = new RogueTypePreprocessorTokenReader();
  type_CmdSwitch = new RogueTypeCmdSwitch();
  type_CmdReadArrayElement = new RogueTypeCmdReadArrayElement();
  type_CmdWriteArrayElement = new RogueTypeCmdWriteArrayElement();
  type_CmdConvertToPrimitiveType = new RogueTypeCmdConvertToPrimitiveType();
  type_CmdAdjustProperty = new RogueTypeCmdAdjustProperty();
  type_CmdCallStaticMethod = new RogueTypeCmdCallStaticMethod();
  type_TableEntry_of_String_TokenListList = new RogueTypeTableEntry_of_String_TokenListList();
  type_String_TokenListTableEntry = new RogueTypeString_TokenListTableEntry();

  type_Real->index = 0;
  type_Long->index = 1;
  type_Integer->index = 2;
  type_String->index = 3;
  type_CharacterList->index = 4;
  type_Character->index = 5;
  type_GenericList->index = 6;
  type_Object->index = 7;
  type_StringBuilder->index = 8;
  type_OptionalInteger->index = 9;
  type_Logical->index = 10;
  type_StringList->index = 11;
  type_Array->index = 12;
  type_Array->index = 13;
  type_Byte->index = 14;
  type_StringReader->index = 16;
  type_CharacterReader->index = 17;
  type_Global->index = 18;
  type_Console->index = 19;
  type_RogueC->index = 20;
  type_Error->index = 21;
  type_Program->index = 23;
  type_TemplateList->index = 24;
  type_Template->index = 25;
  type_String_TemplateTable->index = 26;
  type_String_AugmentListTable->index = 27;
  type_RequisiteItemList->index = 28;
  type_RequisiteItem->index = 29;
  type_Method->index = 30;
  type_String_MethodListTable->index = 31;
  type_TypeList->index = 32;
  type_Type->index = 33;
  type_String_TypeTable->index = 34;
  type_String_IntegerTable->index = 35;
  type_Token->index = 37;
  type_Array->index = 38;
  type_Attributes->index = 39;
  type_Cmd->index = 40;
  type_CmdReturn->index = 41;
  type_CmdStatement->index = 42;
  type_CmdStatementList->index = 43;
  type_CmdList->index = 44;
  type_TokenType->index = 45;
  type_CmdLabel->index = 46;
  type_Array->index = 47;
  type_RogueError->index = 48;
  type_Array->index = 49;
  type_MethodList->index = 50;
  type_Array->index = 51;
  type_CPPWriter->index = 52;
  type_String_MethodTable->index = 53;
  type_LocalList->index = 54;
  type_Local->index = 55;
  type_Array->index = 56;
  type_ByteList->index = 57;
  type_Math->index = 58;
  type_Array->index = 59;
  type_Array->index = 60;
  type_System->index = 61;
  type_TaskManager->index = 62;
  type_Task->index = 63;
  type_TaskList->index = 64;
  type_Array->index = 65;
  type_String_LogicalTable->index = 68;
  type_File->index = 69;
  type_Parser->index = 70;
  type_TokenList->index = 71;
  type_LineReader->index = 72;
  type_Reader_of_String->index = 73;
  type_TypeParameterList->index = 75;
  type_TypeParameter->index = 76;
  type_AugmentList->index = 77;
  type_Augment->index = 78;
  type_Array->index = 79;
  type_String_TokenTypeTable->index = 80;
  type_LiteralCharacterToken->index = 81;
  type_LiteralLongToken->index = 82;
  type_LiteralIntegerToken->index = 83;
  type_LiteralRealToken->index = 84;
  type_LiteralStringToken->index = 85;
  type_Array->index = 87;
  type_String_TypeSpecializerTable->index = 88;
  type_Array->index = 89;
  type_TypeSpecializer->index = 90;
  type_TableEntry_of_String_TemplateList->index = 91;
  type_String_TemplateTableEntry->index = 92;
  type_Array->index = 93;
  type_TableEntry_of_String_AugmentListList->index = 94;
  type_String_AugmentListTableEntry->index = 95;
  type_Array->index = 96;
  type_CmdLabelList->index = 97;
  type_String_CmdLabelTable->index = 98;
  type_CloneArgs->index = 99;
  type_CloneMethodArgs->index = 100;
  type_Property->index = 101;
  type_CmdAccess->index = 102;
  type_CmdArgs->index = 103;
  type_CmdAssign->index = 104;
  type_Scope->index = 105;
  type_CmdControlStructureList->index = 106;
  type_CmdControlStructure->index = 107;
  type_CmdLiteralThis->index = 108;
  type_CmdThisContext->index = 109;
  type_Array->index = 110;
  type_CmdGenericLoop->index = 111;
  type_CmdLiteralInteger->index = 112;
  type_CmdLiteral->index = 113;
  type_CmdCompareNE->index = 114;
  type_CmdComparison->index = 115;
  type_CmdBinary->index = 116;
  type_TaskArgs->index = 117;
  type_Array->index = 118;
  type_CmdTaskControl->index = 119;
  type_CmdTaskControlSection->index = 120;
  type_TableEntry_of_String_MethodListList->index = 121;
  type_String_MethodListTableEntry->index = 122;
  type_Array->index = 123;
  type_String_CmdTable->index = 124;
  type_PropertyList->index = 125;
  type_String_PropertyTable->index = 126;
  type_CmdLiteralNull->index = 127;
  type_CmdCreateCompound->index = 128;
  type_CmdLiteralLogical->index = 129;
  type_CmdLiteralString->index = 130;
  type_Array->index = 131;
  type_CmdWriteSetting->index = 132;
  type_CmdWriteProperty->index = 133;
  type_TableEntry_of_String_TypeList->index = 134;
  type_String_TypeTableEntry->index = 135;
  type_Array->index = 136;
  type_TableEntry_of_String_IntegerList->index = 137;
  type_String_IntegerTableEntry->index = 138;
  type_Array->index = 139;
  type_CmdCastToType->index = 140;
  type_CmdTypeOperator->index = 141;
  type_CmdLogicalize->index = 142;
  type_CmdUnary->index = 143;
  type_CmdCreateOptionalValue->index = 144;
  type_TableEntry_of_String_MethodList->index = 145;
  type_String_MethodTableEntry->index = 146;
  type_Array->index = 147;
  type_TableEntry_of_String_LogicalList->index = 148;
  type_String_LogicalTableEntry->index = 149;
  type_Array->index = 150;
  type_FileReader->index = 151;
  type_FileWriter->index = 152;
  type_TokenReader->index = 153;
  type_Tokenizer->index = 154;
  type_ParseReader->index = 155;
  type_Preprocessor->index = 156;
  type_CmdAdd->index = 157;
  type_CmdIf->index = 158;
  type_CmdWhich->index = 159;
  type_CmdContingent->index = 160;
  type_CmdTry->index = 161;
  type_CmdAwait->index = 162;
  type_CmdYield->index = 163;
  type_CmdThrow->index = 164;
  type_CmdTrace->index = 165;
  type_CmdEscape->index = 166;
  type_CmdNextIteration->index = 167;
  type_CmdNecessary->index = 168;
  type_CmdSufficient->index = 169;
  type_CmdAdjust->index = 170;
  type_CmdOpWithAssign->index = 171;
  type_CmdWhichCaseList->index = 172;
  type_CmdWhichCase->index = 173;
  type_CmdCatchList->index = 174;
  type_CmdCatch->index = 175;
  type_CmdLocalDeclaration->index = 176;
  type_CmdAdjustLocal->index = 177;
  type_CmdReadLocal->index = 178;
  type_CmdCompareLE->index = 179;
  type_CmdRange->index = 180;
  type_CmdLocalOpWithAssign->index = 181;
  type_CmdResolvedOpWithAssign->index = 182;
  type_CmdForEach->index = 183;
  type_CmdRangeUpTo->index = 184;
  type_CmdLogicalXor->index = 185;
  type_CmdBinaryLogical->index = 186;
  type_CmdLogicalOr->index = 187;
  type_CmdLogicalAnd->index = 188;
  type_CmdCompareEQ->index = 189;
  type_CmdCompareIs->index = 190;
  type_CmdCompareIsNot->index = 191;
  type_CmdCompareLT->index = 192;
  type_CmdCompareGT->index = 193;
  type_CmdCompareGE->index = 194;
  type_CmdInstanceOf->index = 195;
  type_CmdLogicalNot->index = 196;
  type_CmdBitwiseXor->index = 197;
  type_CmdBitwiseOp->index = 198;
  type_CmdBitwiseOr->index = 199;
  type_CmdBitwiseAnd->index = 200;
  type_CmdBitwiseShiftLeft->index = 201;
  type_CmdBitwiseShiftRight->index = 202;
  type_CmdBitwiseShiftRightX->index = 203;
  type_CmdSubtract->index = 204;
  type_CmdMultiply->index = 205;
  type_CmdDivide->index = 206;
  type_CmdMod->index = 207;
  type_CmdPower->index = 208;
  type_CmdNegate->index = 209;
  type_CmdBitwiseNot->index = 210;
  type_CmdGetOptionalValue->index = 211;
  type_CmdElementAccess->index = 212;
  type_CmdConvertToType->index = 213;
  type_CmdCreateCallback->index = 214;
  type_CmdAs->index = 215;
  type_CmdDefaultValue->index = 216;
  type_CmdFormattedString->index = 217;
  type_CmdLiteralReal->index = 218;
  type_CmdLiteralLong->index = 219;
  type_CmdLiteralCharacter->index = 220;
  type_CmdCreateList->index = 221;
  type_CmdCallPriorMethod->index = 222;
  type_FnParamList->index = 223;
  type_FnParam->index = 224;
  type_FnArgList->index = 225;
  type_FnArg->index = 226;
  type_CmdCreateFunction->index = 227;
  type_CmdNativeCode->index = 228;
  type_TableEntry_of_String_TokenTypeList->index = 229;
  type_String_TokenTypeTableEntry->index = 230;
  type_Array->index = 231;
  type_TableEntry_of_String_TypeSpecializerList->index = 232;
  type_String_TypeSpecializerTableEntry->index = 233;
  type_Array->index = 234;
  type_TableEntry_of_String_CmdLabelList->index = 235;
  type_String_CmdLabelTableEntry->index = 236;
  type_Array->index = 237;
  type_MacroArgs->index = 238;
  type_CmdReadSingleton->index = 239;
  type_CmdCreateArray->index = 240;
  type_CmdCallRoutine->index = 241;
  type_CmdCall->index = 242;
  type_CmdCreateObject->index = 243;
  type_CmdReadSetting->index = 244;
  type_CmdReadProperty->index = 245;
  type_CmdLogicalizeOptionalValue->index = 246;
  type_CmdWriteLocal->index = 247;
  type_CmdOpAssignSetting->index = 248;
  type_CmdOpAssignProperty->index = 249;
  type_CmdCallInlineNativeRoutine->index = 250;
  type_CmdCallInlineNative->index = 251;
  type_CmdCallNativeRoutine->index = 252;
  type_CmdReadArrayCount->index = 253;
  type_CmdCallInlineNativeMethod->index = 254;
  type_CmdCallNativeMethod->index = 255;
  type_CmdCallAspectMethod->index = 256;
  type_CmdCallDynamicMethod->index = 257;
  type_CmdCallMethod->index = 258;
  type_CandidateMethods->index = 259;
  type_Array->index = 260;
  type_CmdTaskControlSectionList->index = 261;
  type_CmdBlock->index = 262;
  type_Array->index = 263;
  type_TableEntry_of_String_CmdList->index = 264;
  type_String_CmdTableEntry->index = 265;
  type_Array->index = 266;
  type_TableEntry_of_String_PropertyList->index = 267;
  type_String_PropertyTableEntry->index = 268;
  type_Array->index = 269;
  type_DirectiveTokenType->index = 270;
  type_StructuralDirectiveTokenType->index = 271;
  type_EOLTokenType->index = 272;
  type_StructureTokenType->index = 273;
  type_OpWithAssignTokenType->index = 274;
  type_EOLToken->index = 275;
  type_String_TokenListTable->index = 276;
  type_PreprocessorTokenReader->index = 277;
  type_Array->index = 278;
  type_CmdSwitch->index = 279;
  type_Array->index = 280;
  type_CmdReadArrayElement->index = 281;
  type_CmdWriteArrayElement->index = 282;
  type_CmdConvertToPrimitiveType->index = 283;
  type_Array->index = 284;
  type_Array->index = 285;
  type_CmdAdjustProperty->index = 286;
  type_CmdCallStaticMethod->index = 287;
  type_TableEntry_of_String_TokenListList->index = 288;
  type_String_TokenListTableEntry->index = 289;
  type_Array->index = 290;

  type_Real->configure();
  type_Long->configure();
  type_Integer->configure();
  type_CharacterList->configure();
  type_Character->configure();
  type_GenericList->configure();
  type_StringBuilder->configure();
  type_OptionalInteger->configure();
  type_Logical->configure();
  type_StringList->configure();
  type_Byte->configure();
  type_StringReader->configure();
  type_CharacterReader->configure();
  type_Global->configure();
  type_Console->configure();
  type_RogueC->configure();
  type_Error->configure();
  type_Program->configure();
  type_TemplateList->configure();
  type_Template->configure();
  type_String_TemplateTable->configure();
  type_String_AugmentListTable->configure();
  type_RequisiteItemList->configure();
  type_RequisiteItem->configure();
  type_Method->configure();
  type_String_MethodListTable->configure();
  type_TypeList->configure();
  type_Type->configure();
  type_String_TypeTable->configure();
  type_String_IntegerTable->configure();
  type_Token->configure();
  type_Attributes->configure();
  type_Cmd->configure();
  type_CmdReturn->configure();
  type_CmdStatement->configure();
  type_CmdStatementList->configure();
  type_CmdList->configure();
  type_TokenType->configure();
  type_CmdLabel->configure();
  type_RogueError->configure();
  type_MethodList->configure();
  type_CPPWriter->configure();
  type_String_MethodTable->configure();
  type_LocalList->configure();
  type_Local->configure();
  type_ByteList->configure();
  type_Math->configure();
  type_System->configure();
  type_TaskManager->configure();
  type_Task->configure();
  type_TaskList->configure();
  type_String_LogicalTable->configure();
  type_File->configure();
  type_Parser->configure();
  type_TokenList->configure();
  type_LineReader->configure();
  type_Reader_of_String->configure();
  type_TypeParameterList->configure();
  type_TypeParameter->configure();
  type_AugmentList->configure();
  type_Augment->configure();
  type_String_TokenTypeTable->configure();
  type_LiteralCharacterToken->configure();
  type_LiteralLongToken->configure();
  type_LiteralIntegerToken->configure();
  type_LiteralRealToken->configure();
  type_LiteralStringToken->configure();
  type_String_TypeSpecializerTable->configure();
  type_TypeSpecializer->configure();
  type_TableEntry_of_String_TemplateList->configure();
  type_String_TemplateTableEntry->configure();
  type_TableEntry_of_String_AugmentListList->configure();
  type_String_AugmentListTableEntry->configure();
  type_CmdLabelList->configure();
  type_String_CmdLabelTable->configure();
  type_CloneArgs->configure();
  type_CloneMethodArgs->configure();
  type_Property->configure();
  type_CmdAccess->configure();
  type_CmdArgs->configure();
  type_CmdAssign->configure();
  type_Scope->configure();
  type_CmdControlStructureList->configure();
  type_CmdControlStructure->configure();
  type_CmdLiteralThis->configure();
  type_CmdThisContext->configure();
  type_CmdGenericLoop->configure();
  type_CmdLiteralInteger->configure();
  type_CmdLiteral->configure();
  type_CmdCompareNE->configure();
  type_CmdComparison->configure();
  type_CmdBinary->configure();
  type_TaskArgs->configure();
  type_CmdTaskControl->configure();
  type_CmdTaskControlSection->configure();
  type_TableEntry_of_String_MethodListList->configure();
  type_String_MethodListTableEntry->configure();
  type_String_CmdTable->configure();
  type_PropertyList->configure();
  type_String_PropertyTable->configure();
  type_CmdLiteralNull->configure();
  type_CmdCreateCompound->configure();
  type_CmdLiteralLogical->configure();
  type_CmdLiteralString->configure();
  type_CmdWriteSetting->configure();
  type_CmdWriteProperty->configure();
  type_TableEntry_of_String_TypeList->configure();
  type_String_TypeTableEntry->configure();
  type_TableEntry_of_String_IntegerList->configure();
  type_String_IntegerTableEntry->configure();
  type_CmdCastToType->configure();
  type_CmdTypeOperator->configure();
  type_CmdLogicalize->configure();
  type_CmdUnary->configure();
  type_CmdCreateOptionalValue->configure();
  type_TableEntry_of_String_MethodList->configure();
  type_String_MethodTableEntry->configure();
  type_TableEntry_of_String_LogicalList->configure();
  type_String_LogicalTableEntry->configure();
  type_FileReader->configure();
  type_FileWriter->configure();
  type_TokenReader->configure();
  type_Tokenizer->configure();
  type_ParseReader->configure();
  type_Preprocessor->configure();
  type_CmdAdd->configure();
  type_CmdIf->configure();
  type_CmdWhich->configure();
  type_CmdContingent->configure();
  type_CmdTry->configure();
  type_CmdAwait->configure();
  type_CmdYield->configure();
  type_CmdThrow->configure();
  type_CmdTrace->configure();
  type_CmdEscape->configure();
  type_CmdNextIteration->configure();
  type_CmdNecessary->configure();
  type_CmdSufficient->configure();
  type_CmdAdjust->configure();
  type_CmdOpWithAssign->configure();
  type_CmdWhichCaseList->configure();
  type_CmdWhichCase->configure();
  type_CmdCatchList->configure();
  type_CmdCatch->configure();
  type_CmdLocalDeclaration->configure();
  type_CmdAdjustLocal->configure();
  type_CmdReadLocal->configure();
  type_CmdCompareLE->configure();
  type_CmdRange->configure();
  type_CmdLocalOpWithAssign->configure();
  type_CmdResolvedOpWithAssign->configure();
  type_CmdForEach->configure();
  type_CmdRangeUpTo->configure();
  type_CmdLogicalXor->configure();
  type_CmdBinaryLogical->configure();
  type_CmdLogicalOr->configure();
  type_CmdLogicalAnd->configure();
  type_CmdCompareEQ->configure();
  type_CmdCompareIs->configure();
  type_CmdCompareIsNot->configure();
  type_CmdCompareLT->configure();
  type_CmdCompareGT->configure();
  type_CmdCompareGE->configure();
  type_CmdInstanceOf->configure();
  type_CmdLogicalNot->configure();
  type_CmdBitwiseXor->configure();
  type_CmdBitwiseOp->configure();
  type_CmdBitwiseOr->configure();
  type_CmdBitwiseAnd->configure();
  type_CmdBitwiseShiftLeft->configure();
  type_CmdBitwiseShiftRight->configure();
  type_CmdBitwiseShiftRightX->configure();
  type_CmdSubtract->configure();
  type_CmdMultiply->configure();
  type_CmdDivide->configure();
  type_CmdMod->configure();
  type_CmdPower->configure();
  type_CmdNegate->configure();
  type_CmdBitwiseNot->configure();
  type_CmdGetOptionalValue->configure();
  type_CmdElementAccess->configure();
  type_CmdConvertToType->configure();
  type_CmdCreateCallback->configure();
  type_CmdAs->configure();
  type_CmdDefaultValue->configure();
  type_CmdFormattedString->configure();
  type_CmdLiteralReal->configure();
  type_CmdLiteralLong->configure();
  type_CmdLiteralCharacter->configure();
  type_CmdCreateList->configure();
  type_CmdCallPriorMethod->configure();
  type_FnParamList->configure();
  type_FnParam->configure();
  type_FnArgList->configure();
  type_FnArg->configure();
  type_CmdCreateFunction->configure();
  type_CmdNativeCode->configure();
  type_TableEntry_of_String_TokenTypeList->configure();
  type_String_TokenTypeTableEntry->configure();
  type_TableEntry_of_String_TypeSpecializerList->configure();
  type_String_TypeSpecializerTableEntry->configure();
  type_TableEntry_of_String_CmdLabelList->configure();
  type_String_CmdLabelTableEntry->configure();
  type_MacroArgs->configure();
  type_CmdReadSingleton->configure();
  type_CmdCreateArray->configure();
  type_CmdCallRoutine->configure();
  type_CmdCall->configure();
  type_CmdCreateObject->configure();
  type_CmdReadSetting->configure();
  type_CmdReadProperty->configure();
  type_CmdLogicalizeOptionalValue->configure();
  type_CmdWriteLocal->configure();
  type_CmdOpAssignSetting->configure();
  type_CmdOpAssignProperty->configure();
  type_CmdCallInlineNativeRoutine->configure();
  type_CmdCallInlineNative->configure();
  type_CmdCallNativeRoutine->configure();
  type_CmdReadArrayCount->configure();
  type_CmdCallInlineNativeMethod->configure();
  type_CmdCallNativeMethod->configure();
  type_CmdCallAspectMethod->configure();
  type_CmdCallDynamicMethod->configure();
  type_CmdCallMethod->configure();
  type_CandidateMethods->configure();
  type_CmdTaskControlSectionList->configure();
  type_CmdBlock->configure();
  type_TableEntry_of_String_CmdList->configure();
  type_String_CmdTableEntry->configure();
  type_TableEntry_of_String_PropertyList->configure();
  type_String_PropertyTableEntry->configure();
  type_DirectiveTokenType->configure();
  type_StructuralDirectiveTokenType->configure();
  type_EOLTokenType->configure();
  type_StructureTokenType->configure();
  type_OpWithAssignTokenType->configure();
  type_EOLToken->configure();
  type_String_TokenListTable->configure();
  type_PreprocessorTokenReader->configure();
  type_CmdSwitch->configure();
  type_CmdReadArrayElement->configure();
  type_CmdWriteArrayElement->configure();
  type_CmdConvertToPrimitiveType->configure();
  type_CmdAdjustProperty->configure();
  type_CmdCallStaticMethod->configure();
  type_TableEntry_of_String_TokenListList->configure();
  type_String_TokenListTableEntry->configure();

  literal_string_count = 982;
  literal_strings = new RogueString*[literal_string_count];
  literal_strings[0] = (RogueString*) RogueString::create( "" )->retain(); 
  literal_strings[1] = (RogueString*) RogueString::create( "C++" )->retain(); 
  literal_strings[2] = (RogueString*) RogueString::create( "null" )->retain(); 
  literal_strings[3] = (RogueString*) RogueString::create( "/Libraries/" )->retain(); 
  literal_strings[4] = (RogueString*) RogueString::create( "--" )->retain(); 
  literal_strings[5] = (RogueString*) RogueString::create( "--output" )->retain(); 
  literal_strings[6] = (RogueString*) RogueString::create( "Output filepath expected after \"--output=\"" )->retain(); 
  literal_strings[7] = (RogueString*) RogueString::create( "--execute" )->retain(); 
  literal_strings[8] = (RogueString*) RogueString::create( "--main" )->retain(); 
  literal_strings[9] = (RogueString*) RogueString::create( "Unexpected value for '--main' option." )->retain(); 
  literal_strings[10] = (RogueString*) RogueString::create( "--target" )->retain(); 
  literal_strings[11] = (RogueString*) RogueString::create( "Target name expected after \"--target=\" (e.g. \"C++\")." )->retain(); 
  literal_strings[12] = (RogueString*) RogueString::create( "Unknown option '" )->retain(); 
  literal_strings[13] = (RogueString*) RogueString::create( "'." )->retain(); 
  literal_strings[14] = (RogueString*) RogueString::create( "\nRogue Compiler v0.0.1\nMay 12, 2015\n\nUSAGE\n  roguec [options] file1.rogue [file2.rogue ...]\n\nOPTIONS\n  --main\n    Include a main() function in the .cpp output file.\n\n  --execute[=\"args\"]\n    Use g++ to compile and run the .cpp output of the compiled .rogue program.\n    Automatically enables the --main option.\n\n  --output=destpath/[file]\n    Specify the destination folder and optionally the base filename for the\n    output.\n\n  --target=" )->retain(); 
  literal_strings[15] = (RogueString*) RogueString::create( "[" )->retain(); 
  literal_strings[16] = (RogueString*) RogueString::create( "," )->retain(); 
  literal_strings[17] = (RogueString*) RogueString::create( "]" )->retain(); 
  literal_strings[18] = (RogueString*) RogueString::create( "\n" )->retain(); 
  literal_strings[19] = (RogueString*) RogueString::create( "Rogue" )->retain(); 
  literal_strings[20] = (RogueString*) RogueString::create( "Rogue_program" )->retain(); 
  literal_strings[21] = (RogueString*) RogueString::create( "Internal" )->retain(); 
  literal_strings[22] = (RogueString*) RogueString::create( "[Built-in Type]" )->retain(); 
  literal_strings[23] = (RogueString*) RogueString::create( "Real" )->retain(); 
  literal_strings[24] = (RogueString*) RogueString::create( "Float" )->retain(); 
  literal_strings[25] = (RogueString*) RogueString::create( "Long" )->retain(); 
  literal_strings[26] = (RogueString*) RogueString::create( "Integer" )->retain(); 
  literal_strings[27] = (RogueString*) RogueString::create( "Character" )->retain(); 
  literal_strings[28] = (RogueString*) RogueString::create( "Byte" )->retain(); 
  literal_strings[29] = (RogueString*) RogueString::create( "Logical" )->retain(); 
  literal_strings[30] = (RogueString*) RogueString::create( "Object" )->retain(); 
  literal_strings[31] = (RogueString*) RogueString::create( "String" )->retain(); 
  literal_strings[32] = (RogueString*) RogueString::create( "StringBuilder" )->retain(); 
  literal_strings[33] = (RogueString*) RogueString::create( "NativeArray" )->retain(); 
  literal_strings[34] = (RogueString*) RogueString::create( "GenericList" )->retain(); 
  literal_strings[35] = (RogueString*) RogueString::create( "Global" )->retain(); 
  literal_strings[36] = (RogueString*) RogueString::create( "Error" )->retain(); 
  literal_strings[37] = (RogueString*) RogueString::create( ".rogue" )->retain(); 
  literal_strings[38] = (RogueString*) RogueString::create( "No such file \"" )->retain(); 
  literal_strings[39] = (RogueString*) RogueString::create( "\"." )->retain(); 
  literal_strings[40] = (RogueString*) RogueString::create( "/" )->retain(); 
  literal_strings[41] = (RogueString*) RogueString::create( "Can not find \"" )->retain(); 
  literal_strings[42] = (RogueString*) RogueString::create( "\" to include." )->retain(); 
  literal_strings[43] = (RogueString*) RogueString::create( "Recursive definition for \"" )->retain(); 
  literal_strings[44] = (RogueString*) RogueString::create( "Unexpected end of input." )->retain(); 
  literal_strings[45] = (RogueString*) RogueString::create( "Identifier expected, found " )->retain(); 
  literal_strings[46] = (RogueString*) RogueString::create( "'" )->retain(); 
  literal_strings[47] = (RogueString*) RogueString::create( "." )->retain(); 
  literal_strings[48] = (RogueString*) RogueString::create( "Filepath expected." )->retain(); 
  literal_strings[49] = (RogueString*) RogueString::create( "Cannot target folder \"" )->retain(); 
  literal_strings[50] = (RogueString*) RogueString::create( "\" for a native include." )->retain(); 
  literal_strings[51] = (RogueString*) RogueString::create( "header" )->retain(); 
  literal_strings[52] = (RogueString*) RogueString::create( "code" )->retain(); 
  literal_strings[53] = (RogueString*) RogueString::create( "Syntax error - $elseIf does not match any previous $if." )->retain(); 
  literal_strings[54] = (RogueString*) RogueString::create( "Syntax error - $else does not match any previous $if." )->retain(); 
  literal_strings[55] = (RogueString*) RogueString::create( "Syntax error - $endIf does not match any previous $if." )->retain(); 
  literal_strings[56] = (RogueString*) RogueString::create( "Expected '" )->retain(); 
  literal_strings[57] = (RogueString*) RogueString::create( "Syntax error in directive: '" )->retain(); 
  literal_strings[58] = (RogueString*) RogueString::create( "$define" )->retain(); 
  literal_strings[59] = (RogueString*) RogueString::create( "$include" )->retain(); 
  literal_strings[60] = (RogueString*) RogueString::create( "$includeNativeCode" )->retain(); 
  literal_strings[61] = (RogueString*) RogueString::create( "$includeNativeHeader" )->retain(); 
  literal_strings[62] = (RogueString*) RogueString::create( "$if" )->retain(); 
  literal_strings[63] = (RogueString*) RogueString::create( "$elseIf" )->retain(); 
  literal_strings[64] = (RogueString*) RogueString::create( "$else" )->retain(); 
  literal_strings[65] = (RogueString*) RogueString::create( "$endIf" )->retain(); 
  literal_strings[66] = (RogueString*) RogueString::create( "$requisite" )->retain(); 
  literal_strings[67] = (RogueString*) RogueString::create( "$id" )->retain(); 
  literal_strings[68] = (RogueString*) RogueString::create( "end of line" )->retain(); 
  literal_strings[69] = (RogueString*) RogueString::create( "augment" )->retain(); 
  literal_strings[70] = (RogueString*) RogueString::create( "case" )->retain(); 
  literal_strings[71] = (RogueString*) RogueString::create( "catch" )->retain(); 
  literal_strings[72] = (RogueString*) RogueString::create( "class" )->retain(); 
  literal_strings[73] = (RogueString*) RogueString::create( "DEFINITIONS" )->retain(); 
  literal_strings[74] = (RogueString*) RogueString::create( "else" )->retain(); 
  literal_strings[75] = (RogueString*) RogueString::create( "elseIf" )->retain(); 
  literal_strings[76] = (RogueString*) RogueString::create( "endAugment" )->retain(); 
  literal_strings[77] = (RogueString*) RogueString::create( "endClass" )->retain(); 
  literal_strings[78] = (RogueString*) RogueString::create( "endContingent" )->retain(); 
  literal_strings[79] = (RogueString*) RogueString::create( "endForEach" )->retain(); 
  literal_strings[80] = (RogueString*) RogueString::create( "endFunction" )->retain(); 
  literal_strings[81] = (RogueString*) RogueString::create( "endIf" )->retain(); 
  literal_strings[82] = (RogueString*) RogueString::create( "endLoop" )->retain(); 
  literal_strings[83] = (RogueString*) RogueString::create( "endTry" )->retain(); 
  literal_strings[84] = (RogueString*) RogueString::create( "endWhich" )->retain(); 
  literal_strings[85] = (RogueString*) RogueString::create( "endWhile" )->retain(); 
  literal_strings[86] = (RogueString*) RogueString::create( "ENUMERATE" )->retain(); 
  literal_strings[87] = (RogueString*) RogueString::create( "macro" )->retain(); 
  literal_strings[88] = (RogueString*) RogueString::create( "method" )->retain(); 
  literal_strings[89] = (RogueString*) RogueString::create( "METHODS" )->retain(); 
  literal_strings[90] = (RogueString*) RogueString::create( "nativeCode" )->retain(); 
  literal_strings[91] = (RogueString*) RogueString::create( "nativeHeader" )->retain(); 
  literal_strings[92] = (RogueString*) RogueString::create( "others" )->retain(); 
  literal_strings[93] = (RogueString*) RogueString::create( "PROPERTIES" )->retain(); 
  literal_strings[94] = (RogueString*) RogueString::create( "routine" )->retain(); 
  literal_strings[95] = (RogueString*) RogueString::create( "ROUTINES" )->retain(); 
  literal_strings[96] = (RogueString*) RogueString::create( "satisfied" )->retain(); 
  literal_strings[97] = (RogueString*) RogueString::create( "SETTINGS" )->retain(); 
  literal_strings[98] = (RogueString*) RogueString::create( "unsatisfied" )->retain(); 
  literal_strings[99] = (RogueString*) RogueString::create( "with" )->retain(); 
  literal_strings[100] = (RogueString*) RogueString::create( "}" )->retain(); 
  literal_strings[101] = (RogueString*) RogueString::create( "}#" )->retain(); 
  literal_strings[102] = (RogueString*) RogueString::create( ")" )->retain(); 
  literal_strings[103] = (RogueString*) RogueString::create( ">>" )->retain(); 
  literal_strings[104] = (RogueString*) RogueString::create( "await" )->retain(); 
  literal_strings[105] = (RogueString*) RogueString::create( "contingent" )->retain(); 
  literal_strings[106] = (RogueString*) RogueString::create( "escapeContingent" )->retain(); 
  literal_strings[107] = (RogueString*) RogueString::create( "escapeForEach" )->retain(); 
  literal_strings[108] = (RogueString*) RogueString::create( "escapeIf" )->retain(); 
  literal_strings[109] = (RogueString*) RogueString::create( "escapeLoop" )->retain(); 
  literal_strings[110] = (RogueString*) RogueString::create( "escapeTry" )->retain(); 
  literal_strings[111] = (RogueString*) RogueString::create( "escapeWhich" )->retain(); 
  literal_strings[112] = (RogueString*) RogueString::create( "escapeWhile" )->retain(); 
  literal_strings[113] = (RogueString*) RogueString::create( "forEach" )->retain(); 
  literal_strings[114] = (RogueString*) RogueString::create( "function" )->retain(); 
  literal_strings[115] = (RogueString*) RogueString::create( "if" )->retain(); 
  literal_strings[116] = (RogueString*) RogueString::create( "in" )->retain(); 
  literal_strings[117] = (RogueString*) RogueString::create( "is" )->retain(); 
  literal_strings[118] = (RogueString*) RogueString::create( "isNot" )->retain(); 
  literal_strings[119] = (RogueString*) RogueString::create( "local" )->retain(); 
  literal_strings[120] = (RogueString*) RogueString::create( "loop" )->retain(); 
  literal_strings[121] = (RogueString*) RogueString::create( "native" )->retain(); 
  literal_strings[122] = (RogueString*) RogueString::create( "necessary" )->retain(); 
  literal_strings[123] = (RogueString*) RogueString::create( "nextIteration" )->retain(); 
  literal_strings[124] = (RogueString*) RogueString::create( "noAction" )->retain(); 
  literal_strings[125] = (RogueString*) RogueString::create( "of" )->retain(); 
  literal_strings[126] = (RogueString*) RogueString::create( "return" )->retain(); 
  literal_strings[127] = (RogueString*) RogueString::create( "step" )->retain(); 
  literal_strings[128] = (RogueString*) RogueString::create( "sufficient" )->retain(); 
  literal_strings[129] = (RogueString*) RogueString::create( "throw" )->retain(); 
  literal_strings[130] = (RogueString*) RogueString::create( "trace" )->retain(); 
  literal_strings[131] = (RogueString*) RogueString::create( "try" )->retain(); 
  literal_strings[132] = (RogueString*) RogueString::create( "which" )->retain(); 
  literal_strings[133] = (RogueString*) RogueString::create( "while" )->retain(); 
  literal_strings[134] = (RogueString*) RogueString::create( "yield" )->retain(); 
  literal_strings[135] = (RogueString*) RogueString::create( "identifier" )->retain(); 
  literal_strings[136] = (RogueString*) RogueString::create( "type identifier" )->retain(); 
  literal_strings[137] = (RogueString*) RogueString::create( "and" )->retain(); 
  literal_strings[138] = (RogueString*) RogueString::create( "as" )->retain(); 
  literal_strings[139] = (RogueString*) RogueString::create( "false" )->retain(); 
  literal_strings[140] = (RogueString*) RogueString::create( "instanceOf" )->retain(); 
  literal_strings[141] = (RogueString*) RogueString::create( "meta" )->retain(); 
  literal_strings[142] = (RogueString*) RogueString::create( "not" )->retain(); 
  literal_strings[143] = (RogueString*) RogueString::create( "notInstanceOf" )->retain(); 
  literal_strings[144] = (RogueString*) RogueString::create( "or" )->retain(); 
  literal_strings[145] = (RogueString*) RogueString::create( "pi" )->retain(); 
  literal_strings[146] = (RogueString*) RogueString::create( "prior" )->retain(); 
  literal_strings[147] = (RogueString*) RogueString::create( "this" )->retain(); 
  literal_strings[148] = (RogueString*) RogueString::create( "true" )->retain(); 
  literal_strings[149] = (RogueString*) RogueString::create( "xor" )->retain(); 
  literal_strings[150] = (RogueString*) RogueString::create( "&" )->retain(); 
  literal_strings[151] = (RogueString*) RogueString::create( "&=" )->retain(); 
  literal_strings[152] = (RogueString*) RogueString::create( "->" )->retain(); 
  literal_strings[153] = (RogueString*) RogueString::create( "@" )->retain(); 
  literal_strings[154] = (RogueString*) RogueString::create( "\\" )->retain(); 
  literal_strings[155] = (RogueString*) RogueString::create( "^" )->retain(); 
  literal_strings[156] = (RogueString*) RogueString::create( "^=" )->retain(); 
  literal_strings[157] = (RogueString*) RogueString::create( ":" )->retain(); 
  literal_strings[158] = (RogueString*) RogueString::create( "::" )->retain(); 
  literal_strings[159] = (RogueString*) RogueString::create( "<>" )->retain(); 
  literal_strings[160] = (RogueString*) RogueString::create( ".=" )->retain(); 
  literal_strings[161] = (RogueString*) RogueString::create( "..>" )->retain(); 
  literal_strings[162] = (RogueString*) RogueString::create( "{}" )->retain(); 
  literal_strings[163] = (RogueString*) RogueString::create( "[]" )->retain(); 
  literal_strings[164] = (RogueString*) RogueString::create( "==" )->retain(); 
  literal_strings[165] = (RogueString*) RogueString::create( "=" )->retain(); 
  literal_strings[166] = (RogueString*) RogueString::create( "!" )->retain(); 
  literal_strings[167] = (RogueString*) RogueString::create( "=>" )->retain(); 
  literal_strings[168] = (RogueString*) RogueString::create( ">=" )->retain(); 
  literal_strings[169] = (RogueString*) RogueString::create( ">" )->retain(); 
  literal_strings[170] = (RogueString*) RogueString::create( "<=" )->retain(); 
  literal_strings[171] = (RogueString*) RogueString::create( "<" )->retain(); 
  literal_strings[172] = (RogueString*) RogueString::create( "-" )->retain(); 
  literal_strings[173] = (RogueString*) RogueString::create( "-=" )->retain(); 
  literal_strings[174] = (RogueString*) RogueString::create( "!=" )->retain(); 
  literal_strings[175] = (RogueString*) RogueString::create( "{" )->retain(); 
  literal_strings[176] = (RogueString*) RogueString::create( "(" )->retain(); 
  literal_strings[177] = (RogueString*) RogueString::create( "<<" )->retain(); 
  literal_strings[178] = (RogueString*) RogueString::create( "%" )->retain(); 
  literal_strings[179] = (RogueString*) RogueString::create( "%=" )->retain(); 
  literal_strings[180] = (RogueString*) RogueString::create( "+" )->retain(); 
  literal_strings[181] = (RogueString*) RogueString::create( "+=" )->retain(); 
  literal_strings[182] = (RogueString*) RogueString::create( "++" )->retain(); 
  literal_strings[183] = (RogueString*) RogueString::create( "?" )->retain(); 
  literal_strings[184] = (RogueString*) RogueString::create( ";" )->retain(); 
  literal_strings[185] = (RogueString*) RogueString::create( ":<<:" )->retain(); 
  literal_strings[186] = (RogueString*) RogueString::create( ":>>:" )->retain(); 
  literal_strings[187] = (RogueString*) RogueString::create( ":>>>:" )->retain(); 
  literal_strings[188] = (RogueString*) RogueString::create( "/=" )->retain(); 
  literal_strings[189] = (RogueString*) RogueString::create( "~" )->retain(); 
  literal_strings[190] = (RogueString*) RogueString::create( "~=" )->retain(); 
  literal_strings[191] = (RogueString*) RogueString::create( "*" )->retain(); 
  literal_strings[192] = (RogueString*) RogueString::create( "*=" )->retain(); 
  literal_strings[193] = (RogueString*) RogueString::create( ".." )->retain(); 
  literal_strings[194] = (RogueString*) RogueString::create( "..<" )->retain(); 
  literal_strings[195] = (RogueString*) RogueString::create( "|" )->retain(); 
  literal_strings[196] = (RogueString*) RogueString::create( "|=" )->retain(); 
  literal_strings[197] = (RogueString*) RogueString::create( "||" )->retain(); 
  literal_strings[198] = (RogueString*) RogueString::create( "Identifier expected." )->retain(); 
  literal_strings[199] = (RogueString*) RogueString::create( "endNativeCode" )->retain(); 
  literal_strings[200] = (RogueString*) RogueString::create( "'endNativeCode' expected before EOF." )->retain(); 
  literal_strings[201] = (RogueString*) RogueString::create( "endNativeHeader" )->retain(); 
  literal_strings[202] = (RogueString*) RogueString::create( "'endNativeHeader' expected before EOF." )->retain(); 
  literal_strings[203] = (RogueString*) RogueString::create( "Character expected." )->retain(); 
  literal_strings[204] = (RogueString*) RogueString::create( "Character expected; found end of line." )->retain(); 
  literal_strings[205] = (RogueString*) RogueString::create( "Escaped character expected; found end of input." )->retain(); 
  literal_strings[206] = (RogueString*) RogueString::create( "-9223372036854775808" )->retain(); 
  literal_strings[207] = (RogueString*) RogueString::create( "-digit hex value expected; found end of file." )->retain(); 
  literal_strings[208] = (RogueString*) RogueString::create( "Invalid hex digit " )->retain(); 
  literal_strings[209] = (RogueString*) RogueString::create( "Invalid escape sequence.  Supported: \\n \\r \\t \\0 \\/ \\' \\\\ \\\" \\" )->retain(); 
  literal_strings[210] = (RogueString*) RogueString::create( "uXXXX \\" )->retain(); 
  literal_strings[211] = (RogueString*) RogueString::create( "xXX." )->retain(); 
  literal_strings[212] = (RogueString*) RogueString::create( "End of file reached while looking for end of string." )->retain(); 
  literal_strings[213] = (RogueString*) RogueString::create( "End of input reached while looking for end of string." )->retain(); 
  literal_strings[214] = (RogueString*) RogueString::create( "Digit out of range for base " )->retain(); 
  literal_strings[215] = (RogueString*) RogueString::create( "One or more digits expected." )->retain(); 
  literal_strings[216] = (RogueString*) RogueString::create( "End of File reached while looking for end of verbatim string." )->retain(); 
  literal_strings[217] = (RogueString*) RogueString::create( "define" )->retain(); 
  literal_strings[218] = (RogueString*) RogueString::create( "include" )->retain(); 
  literal_strings[219] = (RogueString*) RogueString::create( "includeNativeCode" )->retain(); 
  literal_strings[220] = (RogueString*) RogueString::create( "includeNativeHeader" )->retain(); 
  literal_strings[221] = (RogueString*) RogueString::create( "requisite" )->retain(); 
  literal_strings[222] = (RogueString*) RogueString::create( "$" )->retain(); 
  literal_strings[223] = (RogueString*) RogueString::create( "Use 'and' instead of '&&'." )->retain(); 
  literal_strings[224] = (RogueString*) RogueString::create( "End of line expected after '...'." )->retain(); 
  literal_strings[225] = (RogueString*) RogueString::create( "<<:" )->retain(); 
  literal_strings[226] = (RogueString*) RogueString::create( ">>:" )->retain(); 
  literal_strings[227] = (RogueString*) RogueString::create( ">>>:" )->retain(); 
  literal_strings[228] = (RogueString*) RogueString::create( "Use 'or' instead of '||'." )->retain(); 
  literal_strings[229] = (RogueString*) RogueString::create( "Unexpected input '" )->retain(); 
  literal_strings[230] = (RogueString*) RogueString::create( "EOL" )->retain(); 
  literal_strings[231] = (RogueString*) RogueString::create( "(Unicode " )->retain(); 
  literal_strings[232] = (RogueString*) RogueString::create( "Syntax error - unexpected input " )->retain(); 
  literal_strings[233] = (RogueString*) RogueString::create( " expected, found " )->retain(); 
  literal_strings[234] = (RogueString*) RogueString::create( "Unable to determine type for metadata access." )->retain(); 
  literal_strings[235] = (RogueString*) RogueString::create( "default_value" )->retain(); 
  literal_strings[236] = (RogueString*) RogueString::create( "'default_value' expected after 'meta.'." )->retain(); 
  literal_strings[237] = (RogueString*) RogueString::create( "Closing '>>' expected before end of line." )->retain(); 
  literal_strings[238] = (RogueString*) RogueString::create( "Callback" )->retain(); 
  literal_strings[239] = (RogueString*) RogueString::create( "call" )->retain(); 
  literal_strings[240] = (RogueString*) RogueString::create( "param" )->retain(); 
  literal_strings[241] = (RogueString*) RogueString::create( "Value expected, found empty parentheses ()." )->retain(); 
  literal_strings[242] = (RogueString*) RogueString::create( "PropertyList" )->retain(); 
  literal_strings[243] = (RogueString*) RogueString::create( "_auto_" )->retain(); 
  literal_strings[244] = (RogueString*) RogueString::create( "Single identifier expected for control variable name." )->retain(); 
  literal_strings[245] = (RogueString*) RogueString::create( "at" )->retain(); 
  literal_strings[246] = (RogueString*) RogueString::create( "Missing element name before 'at'." )->retain(); 
  literal_strings[247] = (RogueString*) RogueString::create( "Cannot use 'at' with a range." )->retain(); 
  literal_strings[248] = (RogueString*) RogueString::create( "Cannot use 'at' with forEach-of." )->retain(); 
  literal_strings[249] = (RogueString*) RogueString::create( "Use forEach-in with a literal range instead of forEach-of." )->retain(); 
  literal_strings[250] = (RogueString*) RogueString::create( "Syntax error in forEach - keyword 'in' or 'of' expected." )->retain(); 
  literal_strings[251] = (RogueString*) RogueString::create( "Invalid syntax in forEach." )->retain(); 
  literal_strings[252] = (RogueString*) RogueString::create( "Parser::parse_for_each():1383 " )->retain(); 
  literal_strings[253] = (RogueString*) RogueString::create( "[INTERNAL ERROR]" )->retain(); 
  literal_strings[254] = (RogueString*) RogueString::create( "()" )->retain(); 
  literal_strings[255] = (RogueString*) RogueString::create( " " )->retain(); 
  literal_strings[256] = (RogueString*) RogueString::create( "Augment section labels should be defined in the outer scope of the method and cannot be nested inside a control structure." )->retain(); 
  literal_strings[257] = (RogueString*) RogueString::create( "insert" )->retain(); 
  literal_strings[258] = (RogueString*) RogueString::create( "All methods implicitly define the label <<insert>> at the beginning of the method.  No duplicates are allowed." )->retain(); 
  literal_strings[259] = (RogueString*) RogueString::create( "append" )->retain(); 
  literal_strings[260] = (RogueString*) RogueString::create( "All methods implicitly define the label <<append>> at the end of the method.  No duplicates are allowed." )->retain(); 
  literal_strings[261] = (RogueString*) RogueString::create( "Literal string expected." )->retain(); 
  literal_strings[262] = (RogueString*) RogueString::create( "Syntax error: unexpected '" )->retain(); 
  literal_strings[263] = (RogueString*) RogueString::create( "aspect" )->retain(); 
  literal_strings[264] = (RogueString*) RogueString::create( "A class cannot be both '" )->retain(); 
  literal_strings[265] = (RogueString*) RogueString::create( "' and '" )->retain(); 
  literal_strings[266] = (RogueString*) RogueString::create( "primitive" )->retain(); 
  literal_strings[267] = (RogueString*) RogueString::create( "compound" )->retain(); 
  literal_strings[268] = (RogueString*) RogueString::create( "functional" )->retain(); 
  literal_strings[269] = (RogueString*) RogueString::create( "immutable" )->retain(); 
  literal_strings[270] = (RogueString*) RogueString::create( "singleton" )->retain(); 
  literal_strings[271] = (RogueString*) RogueString::create( "task" )->retain(); 
  literal_strings[272] = (RogueString*) RogueString::create( "Invalid attribute: " )->retain(); 
  literal_strings[273] = (RogueString*) RogueString::create( "Parser::parse_template_tokens():221 end_type" )->retain(); 
  literal_strings[274] = (RogueString*) RogueString::create( " expected, found end of file." )->retain(); 
  literal_strings[275] = (RogueString*) RogueString::create( "Illegal placeholder type in augment.  Write '" )->retain(); 
  literal_strings[276] = (RogueString*) RogueString::create( "' without the specializers (<<...>>) to apply the augment to all template instances or write specific types such as " )->retain(); 
  literal_strings[277] = (RogueString*) RogueString::create( "<<String>> to restrict the augment to that type." )->retain(); 
  literal_strings[278] = (RogueString*) RogueString::create( "on_launch" )->retain(); 
  literal_strings[279] = (RogueString*) RogueString::create( "Syntax error - unexpected " )->retain(); 
  literal_strings[280] = (RogueString*) RogueString::create( "Standard" )->retain(); 
  literal_strings[281] = (RogueString*) RogueString::create( "Optional" )->retain(); 
  literal_strings[282] = (RogueString*) RogueString::create( "List" )->retain(); 
  literal_strings[283] = (RogueString*) RogueString::create( "$DataType" )->retain(); 
  literal_strings[284] = (RogueString*) RogueString::create( "create" )->retain(); 
  literal_strings[285] = (RogueString*) RogueString::create( "init" )->retain(); 
  literal_strings[286] = (RogueString*) RogueString::create( "Definition expected." )->retain(); 
  literal_strings[287] = (RogueString*) RogueString::create( "[INTERNAL] " )->retain(); 
  literal_strings[288] = (RogueString*) RogueString::create( "Cmd" )->retain(); 
  literal_strings[289] = (RogueString*) RogueString::create( "::clone() is not implemented." )->retain(); 
  literal_strings[290] = (RogueString*) RogueString::create( "property" )->retain(); 
  literal_strings[291] = (RogueString*) RogueString::create( "setting" )->retain(); 
  literal_strings[292] = (RogueString*) RogueString::create( "Cannot determine " )->retain(); 
  literal_strings[293] = (RogueString*) RogueString::create( " type from initial value; append an explicit type declaration such as \": Object\" " )->retain(); 
  literal_strings[294] = (RogueString*) RogueString::create( "An initial value or " )->retain(); 
  literal_strings[295] = (RogueString*) RogueString::create( " type (for example, \": Object\") must be specified." )->retain(); 
  literal_strings[296] = (RogueString*) RogueString::create( "operator" )->retain(); 
  literal_strings[297] = (RogueString*) RogueString::create( "to" )->retain(); 
  literal_strings[298] = (RogueString*) RogueString::create( "to_" )->retain(); 
  literal_strings[299] = (RogueString*) RogueString::create( "Native expression types cannot be specified in macro methods - remove the \"->" )->retain(); 
  literal_strings[300] = (RogueString*) RogueString::create( "Reference to " )->retain(); 
  literal_strings[301] = (RogueString*) RogueString::create( " is missing required type parameters (" )->retain(); 
  literal_strings[302] = (RogueString*) RogueString::create( "<<...>>)." )->retain(); 
  literal_strings[303] = (RogueString*) RogueString::create( "Too many type specializers given." )->retain(); 
  literal_strings[304] = (RogueString*) RogueString::create( "Insufficient number of type parameters in " )->retain(); 
  literal_strings[305] = (RogueString*) RogueString::create( "; " )->retain(); 
  literal_strings[306] = (RogueString*) RogueString::create( " given, " )->retain(); 
  literal_strings[307] = (RogueString*) RogueString::create( " expected." )->retain(); 
  literal_strings[308] = (RogueString*) RogueString::create( "Type parameters given for non-template type." )->retain(); 
  literal_strings[309] = (RogueString*) RogueString::create( "Reference to undefined type '" )->retain(); 
  literal_strings[310] = (RogueString*) RogueString::create( "Aspects can only extend other aspects." )->retain(); 
  literal_strings[311] = (RogueString*) RogueString::create( "Cyclic inheritance attempted - " )->retain(); 
  literal_strings[312] = (RogueString*) RogueString::create( " cannot extend " )->retain(); 
  literal_strings[313] = (RogueString*) RogueString::create( " because " )->retain(); 
  literal_strings[314] = (RogueString*) RogueString::create( " already extends " )->retain(); 
  literal_strings[315] = (RogueString*) RogueString::create( "Class " )->retain(); 
  literal_strings[316] = (RogueString*) RogueString::create( " can only have one base class (" )->retain(); 
  literal_strings[317] = (RogueString*) RogueString::create( " and " )->retain(); 
  literal_strings[318] = (RogueString*) RogueString::create( " are both specified as base classes)." )->retain(); 
  literal_strings[319] = (RogueString*) RogueString::create( "A property named \"" )->retain(); 
  literal_strings[320] = (RogueString*) RogueString::create( "\" already exists." )->retain(); 
  literal_strings[321] = (RogueString*) RogueString::create( "Conflicting initial values are given for property \"" )->retain(); 
  literal_strings[322] = (RogueString*) RogueString::create( "\" in unrelated types " )->retain(); 
  literal_strings[323] = (RogueString*) RogueString::create( "Conflicting types given for property \"" )->retain(); 
  literal_strings[324] = (RogueString*) RogueString::create( "\" - " )->retain(); 
  literal_strings[325] = (RogueString*) RogueString::create( " in " )->retain(); 
  literal_strings[326] = (RogueString*) RogueString::create( "type_name" )->retain(); 
  literal_strings[327] = (RogueString*) RogueString::create( "Compounds cannot have initializers.  Use create(...) routines instead." )->retain(); 
  literal_strings[328] = (RogueString*) RogueString::create( "TaskWithResult<<" )->retain(); 
  literal_strings[329] = (RogueString*) RogueString::create( "Task" )->retain(); 
  literal_strings[330] = (RogueString*) RogueString::create( "No type declared for parameter \"" )->retain(); 
  literal_strings[331] = (RogueString*) RogueString::create( "A routine with the signature " )->retain(); 
  literal_strings[332] = (RogueString*) RogueString::create( " is already defined." )->retain(); 
  literal_strings[333] = (RogueString*) RogueString::create( "A method with the signature " )->retain(); 
  literal_strings[334] = (RogueString*) RogueString::create( "No corresponding label <<" )->retain(); 
  literal_strings[335] = (RogueString*) RogueString::create( ">> in augmented code." )->retain(); 
  literal_strings[336] = (RogueString*) RogueString::create( "Type " )->retain(); 
  literal_strings[337] = (RogueString*) RogueString::create( " already defines routine " )->retain(); 
  literal_strings[338] = (RogueString*) RogueString::create( " already defines method " )->retain(); 
  literal_strings[339] = (RogueString*) RogueString::create( "In " )->retain(); 
  literal_strings[340] = (RogueString*) RogueString::create( " the overridden return type (" )->retain(); 
  literal_strings[341] = (RogueString*) RogueString::create( ") is not compatible with the prior definition return type (" )->retain(); 
  literal_strings[342] = (RogueString*) RogueString::create( ")." )->retain(); 
  literal_strings[343] = (RogueString*) RogueString::create( "init_class()" )->retain(); 
  literal_strings[344] = (RogueString*) RogueString::create( "init_class" )->retain(); 
  literal_strings[345] = (RogueString*) RogueString::create( "init_object()" )->retain(); 
  literal_strings[346] = (RogueString*) RogueString::create( "init_object" )->retain(); 
  literal_strings[347] = (RogueString*) RogueString::create( "A class that is instanceOf NativeArray must also be instanceOf Array<<DataType>>." )->retain(); 
  literal_strings[348] = (RogueString*) RogueString::create( "Array<<" )->retain(); 
  literal_strings[349] = (RogueString*) RogueString::create( "__" )->retain(); 
  literal_strings[350] = (RogueString*) RogueString::create( "__task" )->retain(); 
  literal_strings[351] = (RogueString*) RogueString::create( "context" )->retain(); 
  literal_strings[352] = (RogueString*) RogueString::create( "_" )->retain(); 
  literal_strings[353] = (RogueString*) RogueString::create( "update" )->retain(); 
  literal_strings[354] = (RogueString*) RogueString::create( "execute" )->retain(); 
  literal_strings[355] = (RogueString*) RogueString::create( "ip" )->retain(); 
  literal_strings[356] = (RogueString*) RogueString::create( "__task_resolver" )->retain(); 
  literal_strings[357] = (RogueString*) RogueString::create( "result" )->retain(); 
  literal_strings[358] = (RogueString*) RogueString::create( "A local variable named \"" )->retain(); 
  literal_strings[359] = (RogueString*) RogueString::create( "::resolve() is not defined." )->retain(); 
  literal_strings[360] = (RogueString*) RogueString::create( "locals left on scope stack" )->retain(); 
  literal_strings[361] = (RogueString*) RogueString::create( "control stucture left on scope stack" )->retain(); 
  literal_strings[362] = (RogueString*) RogueString::create( " is not declared as returning a value." )->retain(); 
  literal_strings[363] = (RogueString*) RogueString::create( "::type() is not defined." )->retain(); 
  literal_strings[364] = (RogueString*) RogueString::create( " cannot be cast to required type " )->retain(); 
  literal_strings[365] = (RogueString*) RogueString::create( "No such method or routine " )->retain(); 
  literal_strings[366] = (RogueString*) RogueString::create( " in type " )->retain(); 
  literal_strings[367] = (RogueString*) RogueString::create( "init()" )->retain(); 
  literal_strings[368] = (RogueString*) RogueString::create( "::trace_used_code() is not defined." )->retain(); 
  literal_strings[369] = (RogueString*) RogueString::create( "/RogueProgram" )->retain(); 
  literal_strings[370] = (RogueString*) RogueString::create( ".cpp" )->retain(); 
  literal_strings[371] = (RogueString*) RogueString::create( "type" )->retain(); 
  literal_strings[372] = (RogueString*) RogueString::create( "_of_" )->retain(); 
  literal_strings[373] = (RogueString*) RogueString::create( "NOT" )->retain(); 
  literal_strings[374] = (RogueString*) RogueString::create( "MOD" )->retain(); 
  literal_strings[375] = (RogueString*) RogueString::create( "AND" )->retain(); 
  literal_strings[376] = (RogueString*) RogueString::create( "TIMES" )->retain(); 
  literal_strings[377] = (RogueString*) RogueString::create( "PLUS" )->retain(); 
  literal_strings[378] = (RogueString*) RogueString::create( "MINUS" )->retain(); 
  literal_strings[379] = (RogueString*) RogueString::create( "DOT" )->retain(); 
  literal_strings[380] = (RogueString*) RogueString::create( "SLASH" )->retain(); 
  literal_strings[381] = (RogueString*) RogueString::create( "LESSTHAN" )->retain(); 
  literal_strings[382] = (RogueString*) RogueString::create( "EQUALS" )->retain(); 
  literal_strings[383] = (RogueString*) RogueString::create( "GREATERTHAN" )->retain(); 
  literal_strings[384] = (RogueString*) RogueString::create( "POWER" )->retain(); 
  literal_strings[385] = (RogueString*) RogueString::create( "OR" )->retain(); 
  literal_strings[386] = (RogueString*) RogueString::create( "XOR" )->retain(); 
  literal_strings[387] = (RogueString*) RogueString::create( "RogueArray" )->retain(); 
  literal_strings[388] = (RogueString*) RogueString::create( "Array" )->retain(); 
  literal_strings[389] = (RogueString*) RogueString::create( "RogueClass" )->retain(); 
  literal_strings[390] = (RogueString*) RogueString::create( "RogueType" )->retain(); 
  literal_strings[391] = (RogueString*) RogueString::create( "Writing " )->retain(); 
  literal_strings[392] = (RogueString*) RogueString::create( ".h..." )->retain(); 
  literal_strings[393] = (RogueString*) RogueString::create( ".h" )->retain(); 
  literal_strings[394] = (RogueString*) RogueString::create( "#include <cmath>" )->retain(); 
  literal_strings[395] = (RogueString*) RogueString::create( "struct " )->retain(); 
  literal_strings[396] = (RogueString*) RogueString::create( " : " )->retain(); 
  literal_strings[397] = (RogueString*) RogueString::create( "void" )->retain(); 
  literal_strings[398] = (RogueString*) RogueString::create( " : RogueObject" )->retain(); 
  literal_strings[399] = (RogueString*) RogueString::create( "// SETTINGS" )->retain(); 
  literal_strings[400] = (RogueString*) RogueString::create( "static " )->retain(); 
  literal_strings[401] = (RogueString*) RogueString::create( "// PROPERTIES" )->retain(); 
  literal_strings[402] = (RogueString*) RogueString::create( "() : " )->retain(); 
  literal_strings[403] = (RogueString*) RogueString::create( ", " )->retain(); 
  literal_strings[404] = (RogueString*) RogueString::create( "0" )->retain(); 
  literal_strings[405] = (RogueString*) RogueString::create( " {}" )->retain(); 
  literal_strings[406] = (RogueString*) RogueString::create( "( " )->retain(); 
  literal_strings[407] = (RogueString*) RogueString::create( " value ) : value(value), exists(true) {}" )->retain(); 
  literal_strings[408] = (RogueString*) RogueString::create( " ) : " )->retain(); 
  literal_strings[409] = (RogueString*) RogueString::create( "bool operator==( const " )->retain(); 
  literal_strings[410] = (RogueString*) RogueString::create( " &other ) const" )->retain(); 
  literal_strings[411] = (RogueString*) RogueString::create( "if (exists)\n{\n  if (other.exists) return value == other.value;\n  else              return false;\n}\nelse\n{\n  if (other.exists) return false;\n  else              return true;\n}" )->retain(); 
  literal_strings[412] = (RogueString*) RogueString::create( "  if (" )->retain(); 
  literal_strings[413] = (RogueString*) RogueString::create( " != other." )->retain(); 
  literal_strings[414] = (RogueString*) RogueString::create( ") return false;" )->retain(); 
  literal_strings[415] = (RogueString*) RogueString::create( "  return true;" )->retain(); 
  literal_strings[416] = (RogueString*) RogueString::create( "bool operator!=( const " )->retain(); 
  literal_strings[417] = (RogueString*) RogueString::create( "{\n  return !(*this == other);\n}\n" )->retain(); 
  literal_strings[418] = (RogueString*) RogueString::create( "void trace()" )->retain(); 
  literal_strings[419] = (RogueString*) RogueString::create( "ROGUE_TRACE( " )->retain(); 
  literal_strings[420] = (RogueString*) RogueString::create( " );" )->retain(); 
  literal_strings[421] = (RogueString*) RogueString::create( ".trace();" )->retain(); 
  literal_strings[422] = (RogueString*) RogueString::create( "bool check( " )->retain(); 
  literal_strings[423] = (RogueString*) RogueString::create( "* checked )" )->retain(); 
  literal_strings[424] = (RogueString*) RogueString::create( "{\n  if ( !exists ) return false;\n  *checked = value;\n  return true;\n}\n" )->retain(); 
  literal_strings[425] = (RogueString*) RogueString::create( "};" )->retain(); 
  literal_strings[426] = (RogueString*) RogueString::create( "struct RogueProgram : RogueProgramCore" )->retain(); 
  literal_strings[427] = (RogueString*) RogueString::create( "  " )->retain(); 
  literal_strings[428] = (RogueString*) RogueString::create( "* type_" )->retain(); 
  literal_strings[429] = (RogueString*) RogueString::create( "  RogueProgram();" )->retain(); 
  literal_strings[430] = (RogueString*) RogueString::create( "  ~RogueProgram();" )->retain(); 
  literal_strings[431] = (RogueString*) RogueString::create( "  void configure();" )->retain(); 
  literal_strings[432] = (RogueString*) RogueString::create( "  void launch( int argc, char* argv[] );" )->retain(); 
  literal_strings[433] = (RogueString*) RogueString::create( "  //void finish_tasks();" )->retain(); 
  literal_strings[434] = (RogueString*) RogueString::create( " THIS" )->retain(); 
  literal_strings[435] = (RogueString*) RogueString::create( "extern RogueProgram Rogue_program;" )->retain(); 
  literal_strings[436] = (RogueString*) RogueString::create( ".cpp..." )->retain(); 
  literal_strings[437] = (RogueString*) RogueString::create( "#include <stdio.h>" )->retain(); 
  literal_strings[438] = (RogueString*) RogueString::create( "#include \"" )->retain(); 
  literal_strings[439] = (RogueString*) RogueString::create( ".h\"" )->retain(); 
  literal_strings[440] = (RogueString*) RogueString::create( "(*)(" )->retain(); 
  literal_strings[441] = (RogueString*) RogueString::create( "ROGUEM" )->retain(); 
  literal_strings[442] = (RogueString*) RogueString::create( "typedef " )->retain(); 
  literal_strings[443] = (RogueString*) RogueString::create( "(*)" )->retain(); 
  literal_strings[444] = (RogueString*) RogueString::create( "(*" )->retain(); 
  literal_strings[445] = (RogueString*) RogueString::create( " call_" )->retain(); 
  literal_strings[446] = (RogueString*) RogueString::create( "( int i, " )->retain(); 
  literal_strings[447] = (RogueString*) RogueString::create( " p" )->retain(); 
  literal_strings[448] = (RogueString*) RogueString::create( " )" )->retain(); 
  literal_strings[449] = (RogueString*) RogueString::create( "return " )->retain(); 
  literal_strings[450] = (RogueString*) RogueString::create( "((" )->retain(); 
  literal_strings[451] = (RogueString*) RogueString::create( ")(THIS->type->methods[i]))( THIS" )->retain(); 
  literal_strings[452] = (RogueString*) RogueString::create( ", p" )->retain(); 
  literal_strings[453] = (RogueString*) RogueString::create( "void* Rogue_dynamic_method_table[] =" )->retain(); 
  literal_strings[454] = (RogueString*) RogueString::create( "(void*) (" )->retain(); 
  literal_strings[455] = (RogueString*) RogueString::create( ") " )->retain(); 
  literal_strings[456] = (RogueString*) RogueString::create( "NULL," )->retain(); 
  literal_strings[457] = (RogueString*) RogueString::create( " // " )->retain(); 
  literal_strings[458] = (RogueString*) RogueString::create( "int Rogue_base_class_count_lookup[" )->retain(); 
  literal_strings[459] = (RogueString*) RogueString::create( "] =" )->retain(); 
  literal_strings[460] = (RogueString*) RogueString::create( " : RogueType" )->retain(); 
  literal_strings[461] = (RogueString*) RogueString::create( "void configure()" )->retain(); 
  literal_strings[462] = (RogueString*) RogueString::create( "object_size = (int) sizeof( " )->retain(); 
  literal_strings[463] = (RogueString*) RogueString::create( "base_type_count = " )->retain(); 
  literal_strings[464] = (RogueString*) RogueString::create( "base_types = new RogueType*[ base_type_count ];" )->retain(); 
  literal_strings[465] = (RogueString*) RogueString::create( "base_types[" )->retain(); 
  literal_strings[466] = (RogueString*) RogueString::create( "] = (RogueType*) Rogue_program.type_" )->retain(); 
  literal_strings[467] = (RogueString*) RogueString::create( "methods = Rogue_dynamic_method_table + " )->retain(); 
  literal_strings[468] = (RogueString*) RogueString::create( " init_object( " )->retain(); 
  literal_strings[469] = (RogueString*) RogueString::create( " THIS )" )->retain(); 
  literal_strings[470] = (RogueString*) RogueString::create( "  return (" )->retain(); 
  literal_strings[471] = (RogueString*) RogueString::create( "( (" )->retain(); 
  literal_strings[472] = (RogueString*) RogueString::create( ") THIS );" )->retain(); 
  literal_strings[473] = (RogueString*) RogueString::create( "const char* name() { return \"" )->retain(); 
  literal_strings[474] = (RogueString*) RogueString::create( "\"; }" )->retain(); 
  literal_strings[475] = (RogueString*) RogueString::create( " singleton()" )->retain(); 
  literal_strings[476] = (RogueString*) RogueString::create( "if ( !_singleton )" )->retain(); 
  literal_strings[477] = (RogueString*) RogueString::create( "  _singleton = create_object();" )->retain(); 
  literal_strings[478] = (RogueString*) RogueString::create( "  init_object( _singleton );" )->retain(); 
  literal_strings[479] = (RogueString*) RogueString::create( ") _singleton );" )->retain(); 
  literal_strings[480] = (RogueString*) RogueString::create( "return (" )->retain(); 
  literal_strings[481] = (RogueString*) RogueString::create( ") _singleton;" )->retain(); 
  literal_strings[482] = (RogueString*) RogueString::create( "void trace( RogueObject* THIS )" )->retain(); 
  literal_strings[483] = (RogueString*) RogueString::create( "  ROGUE_TRACE( ((" )->retain(); 
  literal_strings[484] = (RogueString*) RogueString::create( ")THIS)->" )->retain(); 
  literal_strings[485] = (RogueString*) RogueString::create( "  ((" )->retain(); 
  literal_strings[486] = (RogueString*) RogueString::create( "switch (THIS->type->index)" )->retain(); 
  literal_strings[487] = (RogueString*) RogueString::create( "case " )->retain(); 
  literal_strings[488] = (RogueString*) RogueString::create( "  return " )->retain(); 
  literal_strings[489] = (RogueString*) RogueString::create( ")THIS" )->retain(); 
  literal_strings[490] = (RogueString*) RogueString::create( "default:" )->retain(); 
  literal_strings[491] = (RogueString*) RogueString::create( "::write_cpp() is not defined." )->retain(); 
  literal_strings[492] = (RogueString*) RogueString::create( "RogueProgram::RogueProgram() : RogueProgramCore(" )->retain(); 
  literal_strings[493] = (RogueString*) RogueString::create( "RogueProgram::~RogueProgram()" )->retain(); 
  literal_strings[494] = (RogueString*) RogueString::create( "void RogueProgram::configure()" )->retain(); 
  literal_strings[495] = (RogueString*) RogueString::create( "type_" )->retain(); 
  literal_strings[496] = (RogueString*) RogueString::create( " = new " )->retain(); 
  literal_strings[497] = (RogueString*) RogueString::create( "();" )->retain(); 
  literal_strings[498] = (RogueString*) RogueString::create( "->index = " )->retain(); 
  literal_strings[499] = (RogueString*) RogueString::create( "->configure();" )->retain(); 
  literal_strings[500] = (RogueString*) RogueString::create( "literal_string_count = " )->retain(); 
  literal_strings[501] = (RogueString*) RogueString::create( "literal_strings = new RogueString*[literal_string_count];" )->retain(); 
  literal_strings[502] = (RogueString*) RogueString::create( "literal_strings[" )->retain(); 
  literal_strings[503] = (RogueString*) RogueString::create( "] = (RogueString*) RogueString::create( " )->retain(); 
  literal_strings[504] = (RogueString*) RogueString::create( "\"" )->retain(); 
  literal_strings[505] = (RogueString*) RogueString::create( "\\\"" )->retain(); 
  literal_strings[506] = (RogueString*) RogueString::create( "\\'" )->retain(); 
  literal_strings[507] = (RogueString*) RogueString::create( "\\\\" )->retain(); 
  literal_strings[508] = (RogueString*) RogueString::create( "\\n" )->retain(); 
  literal_strings[509] = (RogueString*) RogueString::create( " )->retain(); " )->retain(); 
  literal_strings[510] = (RogueString*) RogueString::create( "void RogueProgram::launch( int argc, char* argv[] )" )->retain(); 
  literal_strings[511] = (RogueString*) RogueString::create( "RogueClassSystem::executable_filepath = RogueString::create( argv[0] );" )->retain(); 
  literal_strings[512] = (RogueString*) RogueString::create( "for (int i=1; i<argc; ++i)" )->retain(); 
  literal_strings[513] = (RogueString*) RogueString::create( "  RogueStringList__add__String( RogueClassSystem::command_line_arguments, RogueString::create( argv[i] ) );" )->retain(); 
  literal_strings[514] = (RogueString*) RogueString::create( "RogueGlobal__on_launch( Rogue_program.type_Global->singleton() );" )->retain(); 
  literal_strings[515] = (RogueString*) RogueString::create( "Rogue_program.collect_garbage();" )->retain(); 
  literal_strings[516] = (RogueString*) RogueString::create( "RogueProgram Rogue_program;" )->retain(); 
  literal_strings[517] = (RogueString*) RogueString::create( " = nullptr;" )->retain(); 
  literal_strings[518] = (RogueString*) RogueString::create( " = false;" )->retain(); 
  literal_strings[519] = (RogueString*) RogueString::create( " = 0;" )->retain(); 
  literal_strings[520] = (RogueString*) RogueString::create( "int main( int argc, char* argv[] )\n{\n  Rogue_program.configure();\n  Rogue_program.launch( argc, argv );\n  //Rogue_program.finish_tasks();\n  return 0;\n}" )->retain(); 
  literal_strings[521] = (RogueString*) RogueString::create( "g++ " )->retain(); 
  literal_strings[522] = (RogueString*) RogueString::create( ".cpp -o " )->retain(); 
  literal_strings[523] = (RogueString*) RogueString::create( " && ./" )->retain(); 
  literal_strings[524] = (RogueString*) RogueString::create( "Compile target \"" )->retain(); 
  literal_strings[525] = (RogueString*) RogueString::create( "\" is not supported." )->retain(); 
  literal_strings[526] = (RogueString*) RogueString::create( "StringReader" )->retain(); 
  literal_strings[527] = (RogueString*) RogueString::create( "Console" )->retain(); 
  literal_strings[528] = (RogueString*) RogueString::create( "RogueC" )->retain(); 
  literal_strings[529] = (RogueString*) RogueString::create( "Program" )->retain(); 
  literal_strings[530] = (RogueString*) RogueString::create( "Template" )->retain(); 
  literal_strings[531] = (RogueString*) RogueString::create( "Table<<String,Template>>" )->retain(); 
  literal_strings[532] = (RogueString*) RogueString::create( "Table<<String,Augment[]>>" )->retain(); 
  literal_strings[533] = (RogueString*) RogueString::create( "RequisiteItem" )->retain(); 
  literal_strings[534] = (RogueString*) RogueString::create( "Method" )->retain(); 
  literal_strings[535] = (RogueString*) RogueString::create( "Table<<String,Method[]>>" )->retain(); 
  literal_strings[536] = (RogueString*) RogueString::create( "Type" )->retain(); 
  literal_strings[537] = (RogueString*) RogueString::create( "Table<<String,Type>>" )->retain(); 
  literal_strings[538] = (RogueString*) RogueString::create( "Table<<String,Integer>>" )->retain(); 
  literal_strings[539] = (RogueString*) RogueString::create( "Token" )->retain(); 
  literal_strings[540] = (RogueString*) RogueString::create( "Attributes" )->retain(); 
  literal_strings[541] = (RogueString*) RogueString::create( "TokenType" )->retain(); 
  literal_strings[542] = (RogueString*) RogueString::create( "CPPWriter" )->retain(); 
  literal_strings[543] = (RogueString*) RogueString::create( "Table<<String,Method>>" )->retain(); 
  literal_strings[544] = (RogueString*) RogueString::create( "Local" )->retain(); 
  literal_strings[545] = (RogueString*) RogueString::create( "Math" )->retain(); 
  literal_strings[546] = (RogueString*) RogueString::create( "System" )->retain(); 
  literal_strings[547] = (RogueString*) RogueString::create( "TaskManager" )->retain(); 
  literal_strings[548] = (RogueString*) RogueString::create( "Table<<String,Logical>>" )->retain(); 
  literal_strings[549] = (RogueString*) RogueString::create( "File" )->retain(); 
  literal_strings[550] = (RogueString*) RogueString::create( "Parser" )->retain(); 
  literal_strings[551] = (RogueString*) RogueString::create( "LineReader" )->retain(); 
  literal_strings[552] = (RogueString*) RogueString::create( "TypeParameter" )->retain(); 
  literal_strings[553] = (RogueString*) RogueString::create( "Augment" )->retain(); 
  literal_strings[554] = (RogueString*) RogueString::create( "Table<<String,TokenType>>" )->retain(); 
  literal_strings[555] = (RogueString*) RogueString::create( "Table<<String,TypeSpecializer>>" )->retain(); 
  literal_strings[556] = (RogueString*) RogueString::create( "TypeSpecializer" )->retain(); 
  literal_strings[557] = (RogueString*) RogueString::create( "TableEntry<<String,Template>>" )->retain(); 
  literal_strings[558] = (RogueString*) RogueString::create( "TableEntry<<String,Augment[]>>" )->retain(); 
  literal_strings[559] = (RogueString*) RogueString::create( "Table<<String,CmdLabel>>" )->retain(); 
  literal_strings[560] = (RogueString*) RogueString::create( "CloneArgs" )->retain(); 
  literal_strings[561] = (RogueString*) RogueString::create( "Property" )->retain(); 
  literal_strings[562] = (RogueString*) RogueString::create( "Scope" )->retain(); 
  literal_strings[563] = (RogueString*) RogueString::create( "CmdTaskControlSection" )->retain(); 
  literal_strings[564] = (RogueString*) RogueString::create( "TableEntry<<String,Method[]>>" )->retain(); 
  literal_strings[565] = (RogueString*) RogueString::create( "Table<<String,Cmd>>" )->retain(); 
  literal_strings[566] = (RogueString*) RogueString::create( "Table<<String,Property>>" )->retain(); 
  literal_strings[567] = (RogueString*) RogueString::create( "TableEntry<<String,Type>>" )->retain(); 
  literal_strings[568] = (RogueString*) RogueString::create( "TableEntry<<String,Integer>>" )->retain(); 
  literal_strings[569] = (RogueString*) RogueString::create( "TableEntry<<String,Method>>" )->retain(); 
  literal_strings[570] = (RogueString*) RogueString::create( "TableEntry<<String,Logical>>" )->retain(); 
  literal_strings[571] = (RogueString*) RogueString::create( "FileReader" )->retain(); 
  literal_strings[572] = (RogueString*) RogueString::create( "FileWriter" )->retain(); 
  literal_strings[573] = (RogueString*) RogueString::create( "TokenReader" )->retain(); 
  literal_strings[574] = (RogueString*) RogueString::create( "Tokenizer" )->retain(); 
  literal_strings[575] = (RogueString*) RogueString::create( "ParseReader" )->retain(); 
  literal_strings[576] = (RogueString*) RogueString::create( "Preprocessor" )->retain(); 
  literal_strings[577] = (RogueString*) RogueString::create( "FnParam" )->retain(); 
  literal_strings[578] = (RogueString*) RogueString::create( "FnArg" )->retain(); 
  literal_strings[579] = (RogueString*) RogueString::create( "TableEntry<<String,TokenType>>" )->retain(); 
  literal_strings[580] = (RogueString*) RogueString::create( "TableEntry<<String,TypeSpecializer>>" )->retain(); 
  literal_strings[581] = (RogueString*) RogueString::create( "TableEntry<<String,CmdLabel>>" )->retain(); 
  literal_strings[582] = (RogueString*) RogueString::create( "TableEntry<<String,Cmd>>" )->retain(); 
  literal_strings[583] = (RogueString*) RogueString::create( "TableEntry<<String,Property>>" )->retain(); 
  literal_strings[584] = (RogueString*) RogueString::create( "Table<<String,Token[]>>" )->retain(); 
  literal_strings[585] = (RogueString*) RogueString::create( "PreprocessorTokenReader" )->retain(); 
  literal_strings[586] = (RogueString*) RogueString::create( "TableEntry<<String,Token[]>>" )->retain(); 
  literal_strings[587] = (RogueString*) RogueString::create( "Array<<String>>" )->retain(); 
  literal_strings[588] = (RogueString*) RogueString::create( "Array<<Type>>" )->retain(); 
  literal_strings[589] = (RogueString*) RogueString::create( "Array<<RequisiteItem>>" )->retain(); 
  literal_strings[590] = (RogueString*) RogueString::create( "Array<<Template>>" )->retain(); 
  literal_strings[591] = (RogueString*) RogueString::create( "Array<<Method>>" )->retain(); 
  literal_strings[592] = (RogueString*) RogueString::create( "Array<<Local>>" )->retain(); 
  literal_strings[593] = (RogueString*) RogueString::create( "Array<<Byte>>" )->retain(); 
  literal_strings[594] = (RogueString*) RogueString::create( "Array<<Character>>" )->retain(); 
  literal_strings[595] = (RogueString*) RogueString::create( "Array<<Task>>" )->retain(); 
  literal_strings[596] = (RogueString*) RogueString::create( "Array<<Augment>>" )->retain(); 
  literal_strings[597] = (RogueString*) RogueString::create( "Array<<Token>>" )->retain(); 
  literal_strings[598] = (RogueString*) RogueString::create( "Array<<TypeParameter>>" )->retain(); 
  literal_strings[599] = (RogueString*) RogueString::create( "Array<<TableEntry<<String,Template>>>>" )->retain(); 
  literal_strings[600] = (RogueString*) RogueString::create( "Array<<TableEntry<<String,Augment[]>>>>" )->retain(); 
  literal_strings[601] = (RogueString*) RogueString::create( "Array<<CmdLabel>>" )->retain(); 
  literal_strings[602] = (RogueString*) RogueString::create( "Array<<Cmd>>" )->retain(); 
  literal_strings[603] = (RogueString*) RogueString::create( "Array<<TableEntry<<String,Method[]>>>>" )->retain(); 
  literal_strings[604] = (RogueString*) RogueString::create( "Array<<Property>>" )->retain(); 
  literal_strings[605] = (RogueString*) RogueString::create( "Array<<TableEntry<<String,Type>>>>" )->retain(); 
  literal_strings[606] = (RogueString*) RogueString::create( "Array<<TableEntry<<String,Integer>>>>" )->retain(); 
  literal_strings[607] = (RogueString*) RogueString::create( "Array<<TableEntry<<String,Method>>>>" )->retain(); 
  literal_strings[608] = (RogueString*) RogueString::create( "Array<<TableEntry<<String,Logical>>>>" )->retain(); 
  literal_strings[609] = (RogueString*) RogueString::create( "Array<<TableEntry<<String,TokenType>>>>" )->retain(); 
  literal_strings[610] = (RogueString*) RogueString::create( "Array<<TableEntry<<String,TypeSpecializer>>>>" )->retain(); 
  literal_strings[611] = (RogueString*) RogueString::create( "Array<<TableEntry<<String,CmdLabel>>>>" )->retain(); 
  literal_strings[612] = (RogueString*) RogueString::create( "Array<<CmdControlStructure>>" )->retain(); 
  literal_strings[613] = (RogueString*) RogueString::create( "Array<<CmdTaskControlSection>>" )->retain(); 
  literal_strings[614] = (RogueString*) RogueString::create( "Array<<TableEntry<<String,Cmd>>>>" )->retain(); 
  literal_strings[615] = (RogueString*) RogueString::create( "Array<<TableEntry<<String,Property>>>>" )->retain(); 
  literal_strings[616] = (RogueString*) RogueString::create( "Array<<CmdWhichCase>>" )->retain(); 
  literal_strings[617] = (RogueString*) RogueString::create( "Array<<CmdCatch>>" )->retain(); 
  literal_strings[618] = (RogueString*) RogueString::create( "Array<<FnParam>>" )->retain(); 
  literal_strings[619] = (RogueString*) RogueString::create( "Array<<FnArg>>" )->retain(); 
  literal_strings[620] = (RogueString*) RogueString::create( "Array<<TableEntry<<String,Token[]>>>>" )->retain(); 
  literal_strings[621] = (RogueString*) RogueString::create( "===============================================================================" )->retain(); 
  literal_strings[622] = (RogueString*) RogueString::create( "ERROR in \"" )->retain(); 
  literal_strings[623] = (RogueString*) RogueString::create( "  line " )->retain(); 
  literal_strings[624] = (RogueString*) RogueString::create( ", column " )->retain(); 
  literal_strings[625] = (RogueString*) RogueString::create( "ERROR" )->retain(); 
  literal_strings[626] = (RogueString*) RogueString::create( "RogueError" )->retain(); 
  literal_strings[627] = (RogueString*) RogueString::create( "0.0" )->retain(); 
  literal_strings[628] = (RogueString*) RogueString::create( "EOL  # " )->retain(); 
  literal_strings[629] = (RogueString*) RogueString::create( "LiteralCharacterToken" )->retain(); 
  literal_strings[630] = (RogueString*) RogueString::create( "LiteralLongToken" )->retain(); 
  literal_strings[631] = (RogueString*) RogueString::create( "LiteralIntegerToken" )->retain(); 
  literal_strings[632] = (RogueString*) RogueString::create( "LiteralRealToken" )->retain(); 
  literal_strings[633] = (RogueString*) RogueString::create( "LiteralStringToken" )->retain(); 
  literal_strings[634] = (RogueString*) RogueString::create( "EOLToken" )->retain(); 
  literal_strings[635] = (RogueString*) RogueString::create( "CmdStatement" )->retain(); 
  literal_strings[636] = (RogueString*) RogueString::create( "CmdLabel" )->retain(); 
  literal_strings[637] = (RogueString*) RogueString::create( "CmdAccess" )->retain(); 
  literal_strings[638] = (RogueString*) RogueString::create( "CmdAssign" )->retain(); 
  literal_strings[639] = (RogueString*) RogueString::create( "CmdThisContext" )->retain(); 
  literal_strings[640] = (RogueString*) RogueString::create( "CmdLiteral" )->retain(); 
  literal_strings[641] = (RogueString*) RogueString::create( "CmdBinary" )->retain(); 
  literal_strings[642] = (RogueString*) RogueString::create( "CmdTaskControl" )->retain(); 
  literal_strings[643] = (RogueString*) RogueString::create( "CmdCreateCompound" )->retain(); 
  literal_strings[644] = (RogueString*) RogueString::create( "CmdWriteSetting" )->retain(); 
  literal_strings[645] = (RogueString*) RogueString::create( "CmdWriteProperty" )->retain(); 
  literal_strings[646] = (RogueString*) RogueString::create( "CmdTypeOperator" )->retain(); 
  literal_strings[647] = (RogueString*) RogueString::create( "CmdUnary" )->retain(); 
  literal_strings[648] = (RogueString*) RogueString::create( "CmdCreateOptionalValue" )->retain(); 
  literal_strings[649] = (RogueString*) RogueString::create( "CmdAwait" )->retain(); 
  literal_strings[650] = (RogueString*) RogueString::create( "CmdYield" )->retain(); 
  literal_strings[651] = (RogueString*) RogueString::create( "CmdThrow" )->retain(); 
  literal_strings[652] = (RogueString*) RogueString::create( "CmdTrace" )->retain(); 
  literal_strings[653] = (RogueString*) RogueString::create( "CmdEscape" )->retain(); 
  literal_strings[654] = (RogueString*) RogueString::create( "CmdNextIteration" )->retain(); 
  literal_strings[655] = (RogueString*) RogueString::create( "CmdNecessary" )->retain(); 
  literal_strings[656] = (RogueString*) RogueString::create( "CmdSufficient" )->retain(); 
  literal_strings[657] = (RogueString*) RogueString::create( "CmdAdjust" )->retain(); 
  literal_strings[658] = (RogueString*) RogueString::create( "CmdOpWithAssign" )->retain(); 
  literal_strings[659] = (RogueString*) RogueString::create( "CmdWhichCase" )->retain(); 
  literal_strings[660] = (RogueString*) RogueString::create( "CmdCatch" )->retain(); 
  literal_strings[661] = (RogueString*) RogueString::create( "CmdAdjustLocal" )->retain(); 
  literal_strings[662] = (RogueString*) RogueString::create( "CmdReadLocal" )->retain(); 
  literal_strings[663] = (RogueString*) RogueString::create( "CmdRange" )->retain(); 
  literal_strings[664] = (RogueString*) RogueString::create( "CmdResolvedOpWithAssign" )->retain(); 
  literal_strings[665] = (RogueString*) RogueString::create( "CmdGetOptionalValue" )->retain(); 
  literal_strings[666] = (RogueString*) RogueString::create( "CmdElementAccess" )->retain(); 
  literal_strings[667] = (RogueString*) RogueString::create( "CmdCreateCallback" )->retain(); 
  literal_strings[668] = (RogueString*) RogueString::create( "CmdFormattedString" )->retain(); 
  literal_strings[669] = (RogueString*) RogueString::create( "CmdCreateList" )->retain(); 
  literal_strings[670] = (RogueString*) RogueString::create( "CmdCallPriorMethod" )->retain(); 
  literal_strings[671] = (RogueString*) RogueString::create( "CmdCreateFunction" )->retain(); 
  literal_strings[672] = (RogueString*) RogueString::create( "CmdNativeCode" )->retain(); 
  literal_strings[673] = (RogueString*) RogueString::create( "Illegal arguments on inline code." )->retain(); 
  literal_strings[674] = (RogueString*) RogueString::create( "[INTERNAL] CmdAwait should have been converted to other commands before being adapted to a task." )->retain(); 
  literal_strings[675] = (RogueString*) RogueString::create( "Value expected; this statement or expression does not result in a value." )->retain(); 
  literal_strings[676] = (RogueString*) RogueString::create( "Array count expected." )->retain(); 
  literal_strings[677] = (RogueString*) RogueString::create( "Integer value expected." )->retain(); 
  literal_strings[678] = (RogueString*) RogueString::create( "No such method or variable \"" )->retain(); 
  literal_strings[679] = (RogueString*) RogueString::create( "\" exists in current scope of type " )->retain(); 
  literal_strings[680] = (RogueString*) RogueString::create( "Multiple methods match ambiguous call to " )->retain(); 
  literal_strings[681] = (RogueString*) RogueString::create( ":\n\n" )->retain(); 
  literal_strings[682] = (RogueString*) RogueString::create( "Call to " )->retain(); 
  literal_strings[683] = (RogueString*) RogueString::create( " has arguments that are incompatible with the best candidate:\n\n" )->retain(); 
  literal_strings[684] = (RogueString*) RogueString::create( "to_Object" )->retain(); 
  literal_strings[685] = (RogueString*) RogueString::create( "to_String" )->retain(); 
  literal_strings[686] = (RogueString*) RogueString::create( "Cannot call a method from a routine without an object context (obj." )->retain(); 
  literal_strings[687] = (RogueString*) RogueString::create( "()(...))." )->retain(); 
  literal_strings[688] = (RogueString*) RogueString::create( "Type name expected, e.g. \"" )->retain(); 
  literal_strings[689] = (RogueString*) RogueString::create( ".\"." )->retain(); 
  literal_strings[690] = (RogueString*) RogueString::create( "Type name expected." )->retain(); 
  literal_strings[691] = (RogueString*) RogueString::create( "TODO: multi-line inline statements" )->retain(); 
  literal_strings[692] = (RogueString*) RogueString::create( "count" )->retain(); 
  literal_strings[693] = (RogueString*) RogueString::create( "Invalid arguments to array count." )->retain(); 
  literal_strings[694] = (RogueString*) RogueString::create( "Scope::resolve_call():136 " )->retain(); 
  literal_strings[695] = (RogueString*) RogueString::create( "CmdAccess::resolve():1607 ;throwt.error([INTERNAL])" )->retain(); 
  literal_strings[696] = (RogueString*) RogueString::create( "Recursive call to getter " )->retain(); 
  literal_strings[697] = (RogueString*) RogueString::create( "() - write @" )->retain(); 
  literal_strings[698] = (RogueString*) RogueString::create( " instead." )->retain(); 
  literal_strings[699] = (RogueString*) RogueString::create( "Cannot access object properties from routines - routines have no 'this' object context." )->retain(); 
  literal_strings[700] = (RogueString*) RogueString::create( "exists" )->retain(); 
  literal_strings[701] = (RogueString*) RogueString::create( "Optional value existence check takes no arguments." )->retain(); 
  literal_strings[702] = (RogueString*) RogueString::create( "value" )->retain(); 
  literal_strings[703] = (RogueString*) RogueString::create( "Optional value retrieval takes no arguments." )->retain(); 
  literal_strings[704] = (RogueString*) RogueString::create( "'exists' and 'value' are the only valid properties of an optional type." )->retain(); 
  literal_strings[705] = (RogueString*) RogueString::create( "Invalid assignment." )->retain(); 
  literal_strings[706] = (RogueString*) RogueString::create( "::fn_name() is not defined." )->retain(); 
  literal_strings[707] = (RogueString*) RogueString::create( "Types " )->retain(); 
  literal_strings[708] = (RogueString*) RogueString::create( " are incompatible." )->retain(); 
  literal_strings[709] = (RogueString*) RogueString::create( "Caught value must be instanceOf class Error." )->retain(); 
  literal_strings[710] = (RogueString*) RogueString::create( "try/catch blocks cannot contain 'yield' statements." )->retain(); 
  literal_strings[711] = (RogueString*) RogueString::create( "The 'await' command can only be used in [task] methods." )->retain(); 
  literal_strings[712] = (RogueString*) RogueString::create( "Task method does not return a result.  Ensure you are not awaiting a task method that calls start() - remove the call to start()." )->retain(); 
  literal_strings[713] = (RogueString*) RogueString::create( "The 'yield' statement can only be used in [task] methods." )->retain(); 
  literal_strings[714] = (RogueString*) RogueString::create( "Thrown value must be instanceOf class Error." )->retain(); 
  literal_strings[715] = (RogueString*) RogueString::create( "println" )->retain(); 
  literal_strings[716] = (RogueString*) RogueString::create( "No enclosing structure to escape." )->retain(); 
  literal_strings[717] = (RogueString*) RogueString::create( "No enclosing loop for 'nextIteration' to affect." )->retain(); 
  literal_strings[718] = (RogueString*) RogueString::create( "No enclosing contingent." )->retain(); 
  literal_strings[719] = (RogueString*) RogueString::create( "Invalid target for increment/decrement." )->retain(); 
  literal_strings[720] = (RogueString*) RogueString::create( "Cannot determine type of local variable - either assign an initial value (local " )->retain(); 
  literal_strings[721] = (RogueString*) RogueString::create( " = ...) or assign a type (local " )->retain(); 
  literal_strings[722] = (RogueString*) RogueString::create( " : Integer)." )->retain(); 
  literal_strings[723] = (RogueString*) RogueString::create( "No suitable operator method found; type " )->retain(); 
  literal_strings[724] = (RogueString*) RogueString::create( " implements neither " )->retain(); 
  literal_strings[725] = (RogueString*) RogueString::create( "()(" )->retain(); 
  literal_strings[726] = (RogueString*) RogueString::create( ") nor " )->retain(); 
  literal_strings[727] = (RogueString*) RogueString::create( "=(" )->retain(); 
  literal_strings[728] = (RogueString*) RogueString::create( "Property or method name expected." )->retain(); 
  literal_strings[729] = (RogueString*) RogueString::create( "Property or method name expected - '.=' cannot be used with a chain of references." )->retain(); 
  literal_strings[730] = (RogueString*) RogueString::create( "count()" )->retain(); 
  literal_strings[731] = (RogueString*) RogueString::create( "at(Integer)" )->retain(); 
  literal_strings[732] = (RogueString*) RogueString::create( "get(Integer)" )->retain(); 
  literal_strings[733] = (RogueString*) RogueString::create( "Literal integer value expected." )->retain(); 
  literal_strings[734] = (RogueString*) RogueString::create( "has_another" )->retain(); 
  literal_strings[735] = (RogueString*) RogueString::create( "has_another()" )->retain(); 
  literal_strings[736] = (RogueString*) RogueString::create( "read()" )->retain(); 
  literal_strings[737] = (RogueString*) RogueString::create( "Illegal iteration target - forEach requires either an indexed collection (.count, .get/.at) or a reader (.has_another, .read)." )->retain(); 
  literal_strings[738] = (RogueString*) RogueString::create( "Object's read() method does not return a value." )->retain(); 
  literal_strings[739] = (RogueString*) RogueString::create( "Cannot specify a step size for a reader - only for an indexed collection." )->retain(); 
  literal_strings[740] = (RogueString*) RogueString::create( "read" )->retain(); 
  literal_strings[741] = (RogueString*) RogueString::create( "The optional value retriever ('!') can only be used on optional values." )->retain(); 
  literal_strings[742] = (RogueString*) RogueString::create( "get" )->retain(); 
  literal_strings[743] = (RogueString*) RogueString::create( "No such method or routine '" )->retain(); 
  literal_strings[744] = (RogueString*) RogueString::create( "' exists in type " )->retain(); 
  literal_strings[745] = (RogueString*) RogueString::create( "Multiple candidates match ambiguous reference to '" )->retain(); 
  literal_strings[746] = (RogueString*) RogueString::create( "'; add qualifiying parameter types." )->retain(); 
  literal_strings[747] = (RogueString*) RogueString::create( "More arguments than format markers ('$') in formatted string." )->retain(); 
  literal_strings[748] = (RogueString*) RogueString::create( "print" )->retain(); 
  literal_strings[749] = (RogueString*) RogueString::create( "More format markers ('$') than arguments in formatted string." )->retain(); 
  literal_strings[750] = (RogueString*) RogueString::create( "TODO: [] -> Property[]" )->retain(); 
  literal_strings[751] = (RogueString*) RogueString::create( "add" )->retain(); 
  literal_strings[752] = (RogueString*) RogueString::create( "Illegal target - 'prior' can only be used to call overridden methods." )->retain(); 
  literal_strings[753] = (RogueString*) RogueString::create( "Function_" )->retain(); 
  literal_strings[754] = (RogueString*) RogueString::create( "The result of a call cannot assigned to." )->retain(); 
  literal_strings[755] = (RogueString*) RogueString::create( "set_" )->retain(); 
  literal_strings[756] = (RogueString*) RogueString::create( "Recursive call to setter set_" )->retain(); 
  literal_strings[757] = (RogueString*) RogueString::create( "() - write \"@" )->retain(); 
  literal_strings[758] = (RogueString*) RogueString::create( " = ...\" instead." )->retain(); 
  literal_strings[759] = (RogueString*) RogueString::create( "\" exists in the current scope." )->retain(); 
  literal_strings[760] = (RogueString*) RogueString::create( "set" )->retain(); 
  literal_strings[761] = (RogueString*) RogueString::create( "Local variable '" )->retain(); 
  literal_strings[762] = (RogueString*) RogueString::create( "' cannot be called like a method." )->retain(); 
  literal_strings[763] = (RogueString*) RogueString::create( "::type() is not defined (access name '" )->retain(); 
  literal_strings[764] = (RogueString*) RogueString::create( "')." )->retain(); 
  literal_strings[765] = (RogueString*) RogueString::create( ")(" )->retain(); 
  literal_strings[766] = (RogueString*) RogueString::create( "::write_cpp() is not defined (access name " )->retain(); 
  literal_strings[767] = (RogueString*) RogueString::create( "THIS" )->retain(); 
  literal_strings[768] = (RogueString*) RogueString::create( "for (;" )->retain(); 
  literal_strings[769] = (RogueString*) RogueString::create( "while (" )->retain(); 
  literal_strings[770] = (RogueString*) RogueString::create( ":;" )->retain(); 
  literal_strings[771] = (RogueString*) RogueString::create( "::symbol() is not defined." )->retain(); 
  literal_strings[772] = (RogueString*) RogueString::create( "switch (++THIS->ip)" )->retain(); 
  literal_strings[773] = (RogueString*) RogueString::create( "  THIS->ip = -1;" )->retain(); 
  literal_strings[774] = (RogueString*) RogueString::create( "  return false;" )->retain(); 
  literal_strings[775] = (RogueString*) RogueString::create( "NULL" )->retain(); 
  literal_strings[776] = (RogueString*) RogueString::create( "Rogue_program.literal_strings[" )->retain(); 
  literal_strings[777] = (RogueString*) RogueString::create( " = " )->retain(); 
  literal_strings[778] = (RogueString*) RogueString::create( "))" )->retain(); 
  literal_strings[779] = (RogueString*) RogueString::create( "if (" )->retain(); 
  literal_strings[780] = (RogueString*) RogueString::create( "else " )->retain(); 
  literal_strings[781] = (RogueString*) RogueString::create( "goto " )->retain(); 
  literal_strings[782] = (RogueString*) RogueString::create( "catch ( " )->retain(); 
  literal_strings[783] = (RogueString*) RogueString::create( "throw " )->retain(); 
  literal_strings[784] = (RogueString*) RogueString::create( "continue" )->retain(); 
  literal_strings[785] = (RogueString*) RogueString::create( "if ( !(" )->retain(); 
  literal_strings[786] = (RogueString*) RogueString::create( ") ) goto " )->retain(); 
  literal_strings[787] = (RogueString*) RogueString::create( ") goto " )->retain(); 
  literal_strings[788] = (RogueString*) RogueString::create( "RogueObject::instance_of(" )->retain(); 
  literal_strings[789] = (RogueString*) RogueString::create( "Rogue_program.type_" )->retain(); 
  literal_strings[790] = (RogueString*) RogueString::create( ".value" )->retain(); 
  literal_strings[791] = (RogueString*) RogueString::create( ")(RogueObject::as(" )->retain(); 
  literal_strings[792] = (RogueString*) RogueString::create( ")))" )->retain(); 
  literal_strings[793] = (RogueString*) RogueString::create( "LL" )->retain(); 
  literal_strings[794] = (RogueString*) RogueString::create( "(RogueCharacter)" )->retain(); 
  literal_strings[795] = (RogueString*) RogueString::create( "'\\n'" )->retain(); 
  literal_strings[796] = (RogueString*) RogueString::create( "'\\\\'" )->retain(); 
  literal_strings[797] = (RogueString*) RogueString::create( "'\\''" )->retain(); 
  literal_strings[798] = (RogueString*) RogueString::create( "THIS->" )->retain(); 
  literal_strings[799] = (RogueString*) RogueString::create( " is not a singleton." )->retain(); 
  literal_strings[800] = (RogueString*) RogueString::create( ")ROGUE_SINGLETON(" )->retain(); 
  literal_strings[801] = (RogueString*) RogueString::create( "RogueArray::create( " )->retain(); 
  literal_strings[802] = (RogueString*) RogueString::create( ", sizeof(" )->retain(); 
  literal_strings[803] = (RogueString*) RogueString::create( ", true" )->retain(); 
  literal_strings[804] = (RogueString*) RogueString::create( "->create_and_init_object()" )->retain(); 
  literal_strings[805] = (RogueString*) RogueString::create( "!!" )->retain(); 
  literal_strings[806] = (RogueString*) RogueString::create( ".exists" )->retain(); 
  literal_strings[807] = (RogueString*) RogueString::create( "Illegal use of '$this' in routine." )->retain(); 
  literal_strings[808] = (RogueString*) RogueString::create( "->count" )->retain(); 
  literal_strings[809] = (RogueString*) RogueString::create( "call_" )->retain(); 
  literal_strings[810] = (RogueString*) RogueString::create( "switch (" )->retain(); 
  literal_strings[811] = (RogueString*) RogueString::create( "break;" )->retain(); 
  literal_strings[812] = (RogueString*) RogueString::create( "->objects[" )->retain(); 
  literal_strings[813] = (RogueString*) RogueString::create( "]))" )->retain(); 
  literal_strings[814] = (RogueString*) RogueString::create( "reals[" )->retain(); 
  literal_strings[815] = (RogueString*) RogueString::create( "floats[" )->retain(); 
  literal_strings[816] = (RogueString*) RogueString::create( "longs[" )->retain(); 
  literal_strings[817] = (RogueString*) RogueString::create( "integers[" )->retain(); 
  literal_strings[818] = (RogueString*) RogueString::create( "characters[" )->retain(); 
  literal_strings[819] = (RogueString*) RogueString::create( "bytes[" )->retain(); 
  literal_strings[820] = (RogueString*) RogueString::create( "logical[" )->retain(); 
  literal_strings[821] = (RogueString*) RogueString::create( "[INTERNAL] Unhandled type in CmdReadArrayElement." )->retain(); 
  literal_strings[822] = (RogueString*) RogueString::create( "*)(" )->retain(); 
  literal_strings[823] = (RogueString*) RogueString::create( "->bytes))[" )->retain(); 
  literal_strings[824] = (RogueString*) RogueString::create( "] = " )->retain(); 
  literal_strings[825] = (RogueString*) RogueString::create( "objects[" )->retain(); 
  literal_strings[826] = (RogueString*) RogueString::create( " is not an override - no prior version of it exists." )->retain(); 
  literal_strings[827] = (RogueString*) RogueString::create( "CmdReturn" )->retain(); 
  literal_strings[828] = (RogueString*) RogueString::create( "CmdControlStructure" )->retain(); 
  literal_strings[829] = (RogueString*) RogueString::create( "CmdLocalDeclaration" )->retain(); 
  literal_strings[830] = (RogueString*) RogueString::create( "DirectiveTokenType" )->retain(); 
  literal_strings[831] = (RogueString*) RogueString::create( "StructuralDirectiveTokenType" )->retain(); 
  literal_strings[832] = (RogueString*) RogueString::create( "EOLTokenType" )->retain(); 
  literal_strings[833] = (RogueString*) RogueString::create( "StructureTokenType" )->retain(); 
  literal_strings[834] = (RogueString*) RogueString::create( "OpWithAssignTokenType" )->retain(); 
  literal_strings[835] = (RogueString*) RogueString::create( "CloneMethodArgs" )->retain(); 
  literal_strings[836] = (RogueString*) RogueString::create( "TaskArgs" )->retain(); 
  literal_strings[837] = (RogueString*) RogueString::create( "MacroArgs" )->retain(); 
  literal_strings[838] = (RogueString*) RogueString::create( "CmdGenericLoop" )->retain(); 
  literal_strings[839] = (RogueString*) RogueString::create( "CmdIf" )->retain(); 
  literal_strings[840] = (RogueString*) RogueString::create( "CmdWhich" )->retain(); 
  literal_strings[841] = (RogueString*) RogueString::create( "CmdContingent" )->retain(); 
  literal_strings[842] = (RogueString*) RogueString::create( "CmdTry" )->retain(); 
  literal_strings[843] = (RogueString*) RogueString::create( "CmdForEach" )->retain(); 
  literal_strings[844] = (RogueString*) RogueString::create( "CmdBlock" )->retain(); 
  literal_strings[845] = (RogueString*) RogueString::create( "CmdSwitch" )->retain(); 
  literal_strings[846] = (RogueString*) RogueString::create( "CmdLiteralThis" )->retain(); 
  literal_strings[847] = (RogueString*) RogueString::create( "Invalid reference to 'this' object - routines have no object context." )->retain(); 
  literal_strings[848] = (RogueString*) RogueString::create( "CmdLiteralInteger" )->retain(); 
  literal_strings[849] = (RogueString*) RogueString::create( "CmdLiteralNull" )->retain(); 
  literal_strings[850] = (RogueString*) RogueString::create( "CmdLiteralLogical" )->retain(); 
  literal_strings[851] = (RogueString*) RogueString::create( "CmdLiteralString" )->retain(); 
  literal_strings[852] = (RogueString*) RogueString::create( "CmdDefaultValue" )->retain(); 
  literal_strings[853] = (RogueString*) RogueString::create( "CmdLiteralReal" )->retain(); 
  literal_strings[854] = (RogueString*) RogueString::create( "CmdLiteralLong" )->retain(); 
  literal_strings[855] = (RogueString*) RogueString::create( "CmdLiteralCharacter" )->retain(); 
  literal_strings[856] = (RogueString*) RogueString::create( "CmdBinaryLogical" )->retain(); 
  literal_strings[857] = (RogueString*) RogueString::create( "::combine_literal_operands(Logical,Logical) is not defined." )->retain(); 
  literal_strings[858] = (RogueString*) RogueString::create( "shift_right" )->retain(); 
  literal_strings[859] = (RogueString*) RogueString::create( "mod" )->retain(); 
  literal_strings[860] = (RogueString*) RogueString::create( ") pow((double)" )->retain(); 
  literal_strings[861] = (RogueString*) RogueString::create( ", (double)" )->retain(); 
  literal_strings[862] = (RogueString*) RogueString::create( "operator+" )->retain(); 
  literal_strings[863] = (RogueString*) RogueString::create( "operator-" )->retain(); 
  literal_strings[864] = (RogueString*) RogueString::create( "operator*" )->retain(); 
  literal_strings[865] = (RogueString*) RogueString::create( "operator/" )->retain(); 
  literal_strings[866] = (RogueString*) RogueString::create( "operator%" )->retain(); 
  literal_strings[867] = (RogueString*) RogueString::create( "operator^" )->retain(); 
  literal_strings[868] = (RogueString*) RogueString::create( "The '" )->retain(); 
  literal_strings[869] = (RogueString*) RogueString::create( "' operator cannot be applied to type " )->retain(); 
  literal_strings[870] = (RogueString*) RogueString::create( "&&" )->retain(); 
  literal_strings[871] = (RogueString*) RogueString::create( "CmdComparison" )->retain(); 
  literal_strings[872] = (RogueString*) RogueString::create( "CmdAdd" )->retain(); 
  literal_strings[873] = (RogueString*) RogueString::create( "CmdBitwiseOp" )->retain(); 
  literal_strings[874] = (RogueString*) RogueString::create( "CmdSubtract" )->retain(); 
  literal_strings[875] = (RogueString*) RogueString::create( "CmdMultiply" )->retain(); 
  literal_strings[876] = (RogueString*) RogueString::create( "CmdDivide" )->retain(); 
  literal_strings[877] = (RogueString*) RogueString::create( "CmdMod" )->retain(); 
  literal_strings[878] = (RogueString*) RogueString::create( "CmdPower" )->retain(); 
  literal_strings[879] = (RogueString*) RogueString::create( "[INTERNAL] $::resolve_for_reference() is undefined." )->retain(); 
  literal_strings[880] = (RogueString*) RogueString::create( "Incompatible types for comparison: " )->retain(); 
  literal_strings[881] = (RogueString*) RogueString::create( "CmdCastToType" )->retain(); 
  literal_strings[882] = (RogueString*) RogueString::create( "CmdInstanceOf" )->retain(); 
  literal_strings[883] = (RogueString*) RogueString::create( "CmdConvertToType" )->retain(); 
  literal_strings[884] = (RogueString*) RogueString::create( "CmdAs" )->retain(); 
  literal_strings[885] = (RogueString*) RogueString::create( "CmdLogicalize" )->retain(); 
  literal_strings[886] = (RogueString*) RogueString::create( "CmdLogicalNot" )->retain(); 
  literal_strings[887] = (RogueString*) RogueString::create( "CmdNegate" )->retain(); 
  literal_strings[888] = (RogueString*) RogueString::create( "CmdBitwiseNot" )->retain(); 
  literal_strings[889] = (RogueString*) RogueString::create( "not " )->retain(); 
  literal_strings[890] = (RogueString*) RogueString::create( "(-" )->retain(); 
  literal_strings[891] = (RogueString*) RogueString::create( "[INTERNAL] TODO: 'is' for compounds." )->retain(); 
  literal_strings[892] = (RogueString*) RogueString::create( "Cannot use 'is' between mixed type categories " )->retain(); 
  literal_strings[893] = (RogueString*) RogueString::create( "Cannot use 'isNot' between mixed type categories " )->retain(); 
  literal_strings[894] = (RogueString*) RogueString::create( "CmdRangeUpTo" )->retain(); 
  literal_strings[895] = (RogueString*) RogueString::create( "CmdLocalOpWithAssign" )->retain(); 
  literal_strings[896] = (RogueString*) RogueString::create( "CmdOpAssignSetting" )->retain(); 
  literal_strings[897] = (RogueString*) RogueString::create( "CmdOpAssignProperty" )->retain(); 
  literal_strings[898] = (RogueString*) RogueString::create( "CmdLogicalXor" )->retain(); 
  literal_strings[899] = (RogueString*) RogueString::create( "CmdLogicalOr" )->retain(); 
  literal_strings[900] = (RogueString*) RogueString::create( "CmdLogicalAnd" )->retain(); 
  literal_strings[901] = (RogueString*) RogueString::create( "operator!=" )->retain(); 
  literal_strings[902] = (RogueString*) RogueString::create( "operator<>" )->retain(); 
  literal_strings[903] = (RogueString*) RogueString::create( "operator==" )->retain(); 
  literal_strings[904] = (RogueString*) RogueString::create( "operator<=" )->retain(); 
  literal_strings[905] = (RogueString*) RogueString::create( "operator>" )->retain(); 
  literal_strings[906] = (RogueString*) RogueString::create( "operator>=" )->retain(); 
  literal_strings[907] = (RogueString*) RogueString::create( "operator<" )->retain(); 
  literal_strings[908] = (RogueString*) RogueString::create( "CmdBitwiseXor" )->retain(); 
  literal_strings[909] = (RogueString*) RogueString::create( "CmdBitwiseOr" )->retain(); 
  literal_strings[910] = (RogueString*) RogueString::create( "CmdBitwiseAnd" )->retain(); 
  literal_strings[911] = (RogueString*) RogueString::create( "CmdBitwiseShiftLeft" )->retain(); 
  literal_strings[912] = (RogueString*) RogueString::create( "CmdBitwiseShiftRight" )->retain(); 
  literal_strings[913] = (RogueString*) RogueString::create( "CmdBitwiseShiftRightX" )->retain(); 
  literal_strings[914] = (RogueString*) RogueString::create( "CmdConvertToPrimitiveType" )->retain(); 
  literal_strings[915] = (RogueString*) RogueString::create( "Character[]" )->retain(); 
  literal_strings[916] = (RogueString*) RogueString::create( "String[]" )->retain(); 
  literal_strings[917] = (RogueString*) RogueString::create( "Template[]" )->retain(); 
  literal_strings[918] = (RogueString*) RogueString::create( "RequisiteItem[]" )->retain(); 
  literal_strings[919] = (RogueString*) RogueString::create( "Type[]" )->retain(); 
  literal_strings[920] = (RogueString*) RogueString::create( "Cmd[]" )->retain(); 
  literal_strings[921] = (RogueString*) RogueString::create( "Method[]" )->retain(); 
  literal_strings[922] = (RogueString*) RogueString::create( "Local[]" )->retain(); 
  literal_strings[923] = (RogueString*) RogueString::create( "Byte[]" )->retain(); 
  literal_strings[924] = (RogueString*) RogueString::create( "Task[]" )->retain(); 
  literal_strings[925] = (RogueString*) RogueString::create( "Token[]" )->retain(); 
  literal_strings[926] = (RogueString*) RogueString::create( "TypeParameter[]" )->retain(); 
  literal_strings[927] = (RogueString*) RogueString::create( "Augment[]" )->retain(); 
  literal_strings[928] = (RogueString*) RogueString::create( "TableEntry<<String,Template>>[]" )->retain(); 
  literal_strings[929] = (RogueString*) RogueString::create( "TableEntry<<String,Augment[]>>[]" )->retain(); 
  literal_strings[930] = (RogueString*) RogueString::create( "CmdLabel[]" )->retain(); 
  literal_strings[931] = (RogueString*) RogueString::create( "CmdControlStructure[]" )->retain(); 
  literal_strings[932] = (RogueString*) RogueString::create( "TableEntry<<String,Method[]>>[]" )->retain(); 
  literal_strings[933] = (RogueString*) RogueString::create( "Property[]" )->retain(); 
  literal_strings[934] = (RogueString*) RogueString::create( "TableEntry<<String,Type>>[]" )->retain(); 
  literal_strings[935] = (RogueString*) RogueString::create( "TableEntry<<String,Integer>>[]" )->retain(); 
  literal_strings[936] = (RogueString*) RogueString::create( "TableEntry<<String,Method>>[]" )->retain(); 
  literal_strings[937] = (RogueString*) RogueString::create( "TableEntry<<String,Logical>>[]" )->retain(); 
  literal_strings[938] = (RogueString*) RogueString::create( "CmdWhichCase[]" )->retain(); 
  literal_strings[939] = (RogueString*) RogueString::create( "CmdCatch[]" )->retain(); 
  literal_strings[940] = (RogueString*) RogueString::create( "FnParam[]" )->retain(); 
  literal_strings[941] = (RogueString*) RogueString::create( "FnArg[]" )->retain(); 
  literal_strings[942] = (RogueString*) RogueString::create( "TableEntry<<String,TokenType>>[]" )->retain(); 
  literal_strings[943] = (RogueString*) RogueString::create( "TableEntry<<String,TypeSpecializer>>[]" )->retain(); 
  literal_strings[944] = (RogueString*) RogueString::create( "TableEntry<<String,CmdLabel>>[]" )->retain(); 
  literal_strings[945] = (RogueString*) RogueString::create( "CmdTaskControlSection[]" )->retain(); 
  literal_strings[946] = (RogueString*) RogueString::create( "TableEntry<<String,Cmd>>[]" )->retain(); 
  literal_strings[947] = (RogueString*) RogueString::create( "TableEntry<<String,Property>>[]" )->retain(); 
  literal_strings[948] = (RogueString*) RogueString::create( "TableEntry<<String,Token[]>>[]" )->retain(); 
  literal_strings[949] = (RogueString*) RogueString::create( "CandidateMethods" )->retain(); 
  literal_strings[950] = (RogueString*) RogueString::create( "CmdReadSingleton" )->retain(); 
  literal_strings[951] = (RogueString*) RogueString::create( "CmdCreateArray" )->retain(); 
  literal_strings[952] = (RogueString*) RogueString::create( "CmdCall" )->retain(); 
  literal_strings[953] = (RogueString*) RogueString::create( "CmdCreateObject" )->retain(); 
  literal_strings[954] = (RogueString*) RogueString::create( "CmdReadSetting" )->retain(); 
  literal_strings[955] = (RogueString*) RogueString::create( "CmdReadProperty" )->retain(); 
  literal_strings[956] = (RogueString*) RogueString::create( "CmdLogicalizeOptionalValue" )->retain(); 
  literal_strings[957] = (RogueString*) RogueString::create( "CmdWriteLocal" )->retain(); 
  literal_strings[958] = (RogueString*) RogueString::create( "CmdReadArrayCount" )->retain(); 
  literal_strings[959] = (RogueString*) RogueString::create( "CmdReadArrayElement" )->retain(); 
  literal_strings[960] = (RogueString*) RogueString::create( "CmdWriteArrayElement" )->retain(); 
  literal_strings[961] = (RogueString*) RogueString::create( "CmdAdjustProperty" )->retain(); 
  literal_strings[962] = (RogueString*) RogueString::create( "CmdStatementList" )->retain(); 
  literal_strings[963] = (RogueString*) RogueString::create( "CmdArgs" )->retain(); 
  literal_strings[964] = (RogueString*) RogueString::create( "CmdCompareNE" )->retain(); 
  literal_strings[965] = (RogueString*) RogueString::create( "CmdCompareLE" )->retain(); 
  literal_strings[966] = (RogueString*) RogueString::create( "CmdCompareEQ" )->retain(); 
  literal_strings[967] = (RogueString*) RogueString::create( "CmdCompareIs" )->retain(); 
  literal_strings[968] = (RogueString*) RogueString::create( "CmdCompareIsNot" )->retain(); 
  literal_strings[969] = (RogueString*) RogueString::create( "CmdCompareLT" )->retain(); 
  literal_strings[970] = (RogueString*) RogueString::create( "CmdCompareGT" )->retain(); 
  literal_strings[971] = (RogueString*) RogueString::create( "CmdCompareGE" )->retain(); 
  literal_strings[972] = (RogueString*) RogueString::create( "CmdCallRoutine" )->retain(); 
  literal_strings[973] = (RogueString*) RogueString::create( "CmdCallInlineNative" )->retain(); 
  literal_strings[974] = (RogueString*) RogueString::create( "CmdCallNativeRoutine" )->retain(); 
  literal_strings[975] = (RogueString*) RogueString::create( "CmdCallNativeMethod" )->retain(); 
  literal_strings[976] = (RogueString*) RogueString::create( "CmdCallAspectMethod" )->retain(); 
  literal_strings[977] = (RogueString*) RogueString::create( "CmdCallMethod" )->retain(); 
  literal_strings[978] = (RogueString*) RogueString::create( "CmdCallInlineNativeRoutine" )->retain(); 
  literal_strings[979] = (RogueString*) RogueString::create( "CmdCallInlineNativeMethod" )->retain(); 
  literal_strings[980] = (RogueString*) RogueString::create( "CmdCallDynamicMethod" )->retain(); 
  literal_strings[981] = (RogueString*) RogueString::create( "CmdCallStaticMethod" )->retain(); 

}

void RogueProgram::launch( int argc, char* argv[] )
{
  RogueStringBuilder__init_class();
  RogueTokenType__init_class();
  RogueSystem__init_class();
  RoguePreprocessor__init_class();

  RogueClassSystem::executable_filepath = RogueString::create( argv[0] );
  for (int i=1; i<argc; ++i)
  {
    RogueStringList__add__String( RogueClassSystem::command_line_arguments, RogueString::create( argv[i] ) );
  }

  RogueGlobal__on_launch( Rogue_program.type_Global->singleton() );
  Rogue_program.collect_garbage();
}

RogueProgram Rogue_program;

RogueByteList* RogueStringBuilder::work_bytes = nullptr;
RogueClassString_TokenTypeTable* RogueClassTokenType::lookup = nullptr;
RogueClassTokenType* RogueClassTokenType::directive_define = nullptr;
RogueClassTokenType* RogueClassTokenType::directive_include = nullptr;
RogueClassTokenType* RogueClassTokenType::directive_includeNativeCode = nullptr;
RogueClassTokenType* RogueClassTokenType::directive_includeNativeHeader = nullptr;
RogueClassTokenType* RogueClassTokenType::directive_if = nullptr;
RogueClassTokenType* RogueClassTokenType::directive_elseIf = nullptr;
RogueClassTokenType* RogueClassTokenType::directive_else = nullptr;
RogueClassTokenType* RogueClassTokenType::directive_endIf = nullptr;
RogueClassTokenType* RogueClassTokenType::directive_requisite = nullptr;
RogueClassTokenType* RogueClassTokenType::placeholder_id = nullptr;
RogueClassTokenType* RogueClassTokenType::begin_augment_tokens = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_augment = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_case = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_catch = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_class = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_DEFINITIONS = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_else = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_elseIf = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_endAugment = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_endClass = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_endContingent = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_endForEach = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_endFunction = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_endIf = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_endLoop = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_endTry = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_endWhich = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_endWhile = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_ENUMERATE = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_macro = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_method = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_METHODS = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_nativeCode = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_nativeHeader = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_others = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_PROPERTIES = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_routine = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_ROUTINES = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_satisfied = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_SETTINGS = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_unsatisfied = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_with = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_close_brace = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_close_bracket = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_close_comment = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_close_paren = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_close_specialize = nullptr;
RogueClassTokenType* RogueClassTokenType::eol = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_await = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_contingent = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_escapeContingent = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_escapeForEach = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_escapeIf = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_escapeLoop = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_escapeTry = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_escapeWhich = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_escapeWhile = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_forEach = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_function = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_if = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_in = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_is = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_isNot = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_local = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_loop = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_native = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_necessary = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_nextIteration = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_noAction = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_null = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_of = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_return = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_step = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_sufficient = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_throw = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_trace = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_try = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_which = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_while = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_yield = nullptr;
RogueClassTokenType* RogueClassTokenType::identifier = nullptr;
RogueClassTokenType* RogueClassTokenType::type_identifier = nullptr;
RogueClassTokenType* RogueClassTokenType::literal_character = nullptr;
RogueClassTokenType* RogueClassTokenType::literal_integer = nullptr;
RogueClassTokenType* RogueClassTokenType::literal_long = nullptr;
RogueClassTokenType* RogueClassTokenType::literal_real = nullptr;
RogueClassTokenType* RogueClassTokenType::literal_string = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_and = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_as = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_false = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_instanceOf = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_meta = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_not = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_notInstanceOf = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_or = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_pi = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_prior = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_this = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_true = nullptr;
RogueClassTokenType* RogueClassTokenType::keyword_xor = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_ampersand = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_ampersand_equals = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_arrow = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_at = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_backslash = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_caret = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_caret_equals = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_colon = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_colon_colon = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_comma = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_compare = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_dot = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_dot_equals = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_downToGreaterThan = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_empty_braces = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_empty_brackets = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_eq = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_equals = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_exclamation_point = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_fat_arrow = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_ge = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_gt = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_le = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_lt = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_minus = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_minus_equals = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_minus_minus = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_ne = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_open_brace = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_open_bracket = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_open_paren = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_open_specialize = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_percent = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_percent_equals = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_plus = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_plus_equals = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_plus_plus = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_question_mark = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_semicolon = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_shift_left = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_shift_right = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_shift_right_x = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_slash = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_slash_equals = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_tilde = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_tilde_equals = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_times = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_times_equals = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_upTo = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_upToLessThan = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_vertical_bar = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_vertical_bar_equals = nullptr;
RogueClassTokenType* RogueClassTokenType::symbol_double_vertical_bar = nullptr;
RogueStringList* RogueClassSystem::command_line_arguments = nullptr;
RogueString* RogueClassSystem::executable_filepath = nullptr;
RogueClassString_TokenListTable* RogueClassPreprocessor::definitions = nullptr;

int main( int argc, char* argv[] )
{
  Rogue_program.configure();
  Rogue_program.launch( argc, argv );
  //Rogue_program.finish_tasks();
  return 0;
}
