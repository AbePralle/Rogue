#include <stdio.h>
#include "RogueC.h"

//=============================================================================
//  Rogue.cpp
//
//  Rogue runtime.
//
//  ---------------------------------------------------------------------------
//
//  Created 2015.01.19 by Abe Pralle
//
//  This is free and unencumbered software released into the public domain
//  under the terms of the UNLICENSE ( http://unlicense.org ).
//=============================================================================

#include <fcntl.h>
#include <math.h>
#include <string.h>
#include <sys/timeb.h>
#include <sys/types.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <inttypes.h>

#if !defined(_WIN32)
#  include <sys/time.h>
#  include <unistd.h>
#  include <signal.h>
#  include <dirent.h>
#  include <sys/socket.h>
#  include <sys/uio.h>
#  include <sys/stat.h>
#  include <netdb.h>
#  include <errno.h>
#  include <pthread.h>
#endif

#if defined(ANDROID)
#  include <netinet/in.h>
#endif

#if defined(_WIN32)
#  include <direct.h>
#  define chdir _chdir
#endif

#if TARGET_OS_IPHONE 
#  include <sys/types.h>
#  include <sys/sysctl.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#ifndef PATH_MAX
#  define PATH_MAX 4096
#endif

//-----------------------------------------------------------------------------
//  GLOBALS
//-----------------------------------------------------------------------------
RogueAllocator Rogue_allocator;

//-----------------------------------------------------------------------------
//  RogueType
//-----------------------------------------------------------------------------
RogueType::RogueType() : base_type_count(0), base_types(0), index(-1), object_size(0), _singleton(0)
{
}

RogueType::~RogueType()
{
  if (base_types)
  {
    delete base_types;
    base_types = 0;
    base_type_count = 0;
  }
}

RogueObject* RogueType_create_object( RogueType* THIS, RogueInteger size )
{
  RogueObject* obj;
  RogueInitFn  fn;

  if ( !size ) size = THIS->object_size;
  obj = Rogue_program.allocate_object( THIS, size );

  if ((fn = THIS->init_object_fn)) return fn( obj );
  else                             return obj;
}

RogueObject* RogueType_singleton( RogueType* THIS )
{
  RogueInitFn fn;

  if (THIS->_singleton) return THIS->_singleton;

  // NOTE: _singleton must be assigned before calling init_object()
  // so we can't just call RogueType_create_object().
  THIS->_singleton = Rogue_program.allocate_object( THIS, THIS->object_size );

  if ((fn = THIS->init_object_fn)) THIS->_singleton = fn( THIS->_singleton );

  if ((fn = THIS->init_fn)) return fn( THIS->_singleton );
  else                      return THIS->_singleton;

  return THIS->_singleton;
}

//-----------------------------------------------------------------------------
//  RogueObject
//-----------------------------------------------------------------------------
RogueObject* RogueObject_as( RogueObject* THIS, RogueType* specialized_type )
{
  if (RogueObject_instance_of(THIS,specialized_type)) return THIS;
  return 0;
}

RogueLogical RogueObject_instance_of( RogueObject* THIS, RogueType* ancestor_type )
{
  RogueType* this_type;

  if ( !THIS ) return true;

  this_type = THIS->type;
  if (this_type == ancestor_type) return true;

  int count = this_type->base_type_count;
  RogueType** base_type_ptr = this_type->base_types - 1;
  while (--count >= 0)
  {
    if (ancestor_type == *(++base_type_ptr)) return true;
  }

  return false;
}

void* RogueObject_retain( RogueObject* THIS )
{
  ++THIS->reference_count;
  return THIS;
}

void* RogueObject_release( RogueObject* THIS )
{
  --THIS->reference_count;
  return THIS;
}

void RogueObject_trace( void* obj )
{
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
}

void RogueString_trace( void* obj )
{
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
}

void RogueArray_trace( void* obj )
{
  int count;
  RogueObject** src;
  RogueArray* array = (RogueArray*) obj;

  if ( !array || array->object_size < 0 ) return;
  array->object_size = ~array->object_size;

  if ( !array->is_reference_array ) return;

  count = array->count;
  src = array->objects + count;
  while (--count >= 0)
  {
    RogueObject* cur = *(--src);
    if (cur && cur->object_size >= 0)
    {
      cur->object_size = ~cur->object_size;
      //cur->type->trace_fn( cur );
    }
  }
}

//-----------------------------------------------------------------------------
//  RogueString
//-----------------------------------------------------------------------------
RogueString* RogueString::create( int count )
{
  if (count < 0) count = 0;

  int total_size = sizeof(RogueString) + (count * sizeof(RogueCharacter));

  RogueString* st = (RogueString*) Rogue_program.allocate_object( RogueTypeString, total_size );
  st->count = count;
  st->hash_code = 0;

  return st;
}

RogueString* RogueString::create( const char* c_string, int count )
{
  if (count == -1) count = strlen( c_string );

  RogueString* st = RogueString::create( count );

  // Copy 8-bit chars to 16-bit data while computing hash code.
  RogueCharacter* dest = st->characters - 1;
  const unsigned char* src = (const unsigned char*) (c_string - 1);
  int hash_code = 0;
  while (--count >= 0)
  {
    int ch = *(++src);
    *(++dest) = (RogueCharacter) ch;
    hash_code = ((hash_code << 3) - hash_code) + ch;  // hash * 7 + ch
  }

  st->hash_code = hash_code;

  return st;
}

RogueString* RogueString::create( RogueCharacterList* characters )
{
  if ( !characters ) return RogueString::create(0);

  int count = characters->count;
  RogueString* result = RogueString::create( characters->count );
  memcpy( result->characters, characters->data->characters, count*sizeof(RogueCharacter) );
  result->update_hash_code();
  return result;
}

bool RogueString::to_c_string( char* buffer, int buffer_size )
{
  if (count + 1 > buffer_size) return false;

  RogueCharacter* src = characters - 1;
  char* dest = buffer - 1;
  int n = count;

  while (--n >= 0)
  {
    *(++dest) = (char) (*(++src));
  }
  *(++dest) = 0;

  return true;
}

RogueString* RogueString::update_hash_code()
{
  int code = hash_code;
  int len = count;
  RogueCharacter* src = characters - 1;
  while (--len >= 0)
  {
    code = ((code<<3) - code) + *(++src);
  }
  hash_code = code;
  return this;
}

void RogueString::print( RogueString* st )
{
  if (st)
  {
    RogueString::print( st->characters, st->count );
  }
  else
  {
    printf( "null" );
  }
}

void RogueString::print( RogueCharacter* characters, int count )
{
  if (characters)
  {
    RogueCharacter* src = characters - 1;
    while (--count >= 0)
    {
      int ch = *(++src);
      putchar( ch );
    }
  }
  else
  {
    printf( "null" );
  }
}

//-----------------------------------------------------------------------------
//  RogueArray
//-----------------------------------------------------------------------------
RogueArray* RogueArray::create( int count, int element_size, bool is_reference_array )
{
  if (count < 0) count = 0;
  int data_size  = count * element_size;
  int total_size = sizeof(RogueArray) + data_size;

  RogueArray* array = (RogueArray*) Rogue_program.allocate_object( RogueTypeArray, total_size );

  memset( array->bytes, 0, data_size );
  array->count = count;
  array->element_size = element_size;
  array->is_reference_array = is_reference_array;

  return array;
}

RogueArray* RogueArray::set( RogueInteger i1, RogueArray* other, RogueInteger other_i1, RogueInteger other_i2 )
{
  if ( !other || i1 >= count ) return this;
  if (this->is_reference_array ^ other->is_reference_array) return this;

  if (other_i2 == -1) other_i2 = other->count - 1;

  if (i1 < 0)
  {
    other_i1 -= i1;
    i1 = 0;
  }

  if (other_i1 < 0) other_i1 = 0;
  if (other_i2 >= other->count) other_i2 = other->count - 1;
  if (other_i1 > other_i2) return this;

  RogueByte* src = other->bytes + other_i1 * element_size;
  int other_bytes = ((other_i2 - other_i1) + 1) * element_size;

  RogueByte* dest = bytes + (i1 * element_size);
  int allowable_bytes = (count - i1) * element_size;

  if (other_bytes > allowable_bytes) other_bytes = allowable_bytes;

  if (src >= dest + other_bytes || (src + other_bytes) < dest)
  {
    // Copy region does not overlap
    memcpy( dest, src, other_bytes );
  }
  else
  {
    // Copy region overlaps
    memmove( dest, src, other_bytes );
  }

  return this;
}

//-----------------------------------------------------------------------------
//  RogueProgramCore
//-----------------------------------------------------------------------------
RogueProgramCore::RogueProgramCore()
{
}

RogueProgramCore::~RogueProgramCore()
{
  RogueAllocator_free_objects( &Rogue_allocator );
}

RogueObject* RogueProgramCore::allocate_object( RogueType* type, int size )
{
  return RogueAllocator_allocate_object( &Rogue_allocator, type, size );
}


//-----------------------------------------------------------------------------
//  RogueAllocationPage
//-----------------------------------------------------------------------------
RogueAllocationPage::RogueAllocationPage( RogueAllocationPage* next_page )
  : next_page(next_page)
{
  cursor = data;
  remaining = ROGUEMM_PAGE_SIZE;
  //printf( "New page\n");
}

void* RogueAllocationPage::allocate( int size )
{
  // Round size up to multiple of 8.
  if (size > 0) size = (size + 7) & ~7;
  else          size = 8;

  if (size > remaining) return 0;

  //printf( "Allocating %d bytes from page.\n", size );
  void* result = cursor;
  cursor += size;
  remaining -= size;

  //printf( "%d / %d\n", ROGUEMM_PAGE_SIZE - remaining, ROGUEMM_PAGE_SIZE );
  return result;
}


//-----------------------------------------------------------------------------
//  RogueAllocator
//-----------------------------------------------------------------------------
RogueAllocator::RogueAllocator() : pages(0), objects(0)
{
  for (int i=0; i<ROGUEMM_SLOT_COUNT; ++i)
  {
    available_objects[i] = 0;
  }
}

RogueAllocator::~RogueAllocator()
{
  while (pages)
  {
    RogueAllocationPage* next_page = pages->next_page;
    delete pages;
    pages = next_page;
  }
}

void* RogueAllocator::allocate( int size )
{
  if (size > ROGUEMM_SMALL_ALLOCATION_SIZE_LIMIT) return malloc( size );

  if (size <= 0) size = ROGUEMM_GRANULARITY_SIZE;
  else           size = (size + ROGUEMM_GRANULARITY_MASK) & ~ROGUEMM_GRANULARITY_MASK;

  int slot = (size >> ROGUEMM_GRANULARITY_BITS);
  RogueObject* obj = available_objects[slot];
  
  if (obj)
  {
    //printf( "found free object\n");
    available_objects[slot] = obj->next_object;
    return obj;
  }

  // No free objects for requested size.

  // Try allocating a new object from the current page.
  if ( !pages )
  {
    pages = new RogueAllocationPage(0);
  }

  obj = (RogueObject*) pages->allocate( size );
  if (obj) return obj;


  // Not enough room on allocation page.  Allocate any smaller blocks
  // we're able to and then move on to a new page.
  int s = slot - 1;
  while (s >= 1)
  {
    obj = (RogueObject*) pages->allocate( s << ROGUEMM_GRANULARITY_BITS );
    if (obj)
    {
      //printf( "free obj size %d\n", (s << ROGUEMM_GRANULARITY_BITS) );
      obj->next_object = available_objects[s];
      available_objects[s] = obj;
    }
    else
    {
      --s;
    }
  }

  // New page; this will work for sure.
  pages = new RogueAllocationPage( pages );
  return pages->allocate( size );
}

void* RogueAllocator::free( void* data, int size )
{
  if (data)
  {
    if (size > ROGUEMM_SMALL_ALLOCATION_SIZE_LIMIT)
    {
      ::free( data );
    }
    else
    {
      // Return object to small allocation pool
      RogueObject* obj = (RogueObject*) data;
      int slot = (size + ROGUEMM_GRANULARITY_MASK) >> ROGUEMM_GRANULARITY_BITS;
      if (slot <= 0) slot = 1;
      obj->next_object = available_objects[slot];
      available_objects[slot] = obj;
    }
  }

  // Always returns null, allowing a pointer to be freed and assigned null in
  // a single step.
  return 0;
}

RogueObject* RogueAllocator_allocate_object( RogueAllocator* THIS, RogueType* of_type, int size )
{
  RogueObject* obj = (RogueObject*) THIS->allocate( size );
  memset( obj, 0, size );

  obj->next_object = THIS->objects;
  THIS->objects = obj;
  obj->type = of_type;
  obj->object_size = size;

  return obj;
}

void RogueAllocator_free_objects( RogueAllocator* THIS )
{
  RogueObject* objects = THIS->objects;
  while (objects)
  {
    RogueObject* next_object = objects->next_object;
    THIS->free( objects, objects->object_size );
    objects = next_object;
  }

  THIS->objects = 0;
}

void RogueAllocator_collect_garbage( RogueAllocator* THIS )
{
  // Global program objects have already been traced through.

  // Trace through all as-yet unreferenced objects that are manually retained.
  RogueObject* cur = THIS->objects;
  while (cur)
  {
    if (cur->object_size >= 0 && cur->reference_count > 0)
    {
      cur->object_size = ~cur->object_size;
      cur->type->trace_fn( cur );
    }
    cur = cur->next_object;
  }

  cur = THIS->objects;
  THIS->objects = 0;
  RogueObject* survivors = 0;  // local var for speed

  while (cur)
  {
    RogueObject* next_object = cur->next_object;
    if (cur->object_size < 0)
    {
      // Discovered automatically during tracing.
      //printf( "Referenced %s\n", cur->type->name() );
      cur->object_size = ~cur->object_size;
      cur->next_object = survivors;
      survivors = cur;
    }
    else
    {
      //printf( "Unreferenced %s\n", cur->type->name() );
      THIS->free( cur, cur->object_size );
    }
    cur = next_object;
  }

  THIS->objects = survivors;
}

void Rogue_configure_types()
{
  int i;
  int* type_info = Rogue_type_info_table - 1;

  for (i=0; i<Rogue_type_count; ++i)
  {
    int j;
    RogueType* type = &Rogue_types[i];

    type->allocator  = &Rogue_allocator;
    type->_singleton = 0;

    type->index = i;
    type->object_size = Rogue_object_size_table[i];
    type->methods = Rogue_dynamic_method_table + *(++type_info);
    type->base_type_count = *(++type_info);
    if (type->base_type_count)
    {
      type->base_types = new RogueType*[ type->base_type_count ];
      for (j=0; j<type->base_type_count; ++j)
      {
        type->base_types[j] = &Rogue_types[ *(++type_info) ];
      } 
    }
    else
    {
      type->base_types = 0;
    }
    type->trace_fn = Rogue_trace_fn_table[i];
    type->init_object_fn = Rogue_init_object_fn_table[i];
  }
}

void Rogue_collect_garbage()
{
  Rogue_trace();
  RogueAllocator_collect_garbage( &Rogue_allocator );
}


typedef RogueString*(*ROGUEM0)(RogueCharacterList*);
typedef RogueCharacterList*(*ROGUEM1)(RogueCharacterList*);
typedef RogueString*(*ROGUEM2)(RogueObject*);
typedef RogueString*(*ROGUEM3)(RogueClassGenericList*);
typedef RogueClassGenericList*(*ROGUEM4)(RogueClassGenericList*);
typedef RogueString*(*ROGUEM5)(RogueStringBuilder*);
typedef RogueString*(*ROGUEM6)(RogueStringList*);
typedef RogueStringList*(*ROGUEM7)(RogueStringList*);
typedef RogueString*(*ROGUEM8)(RogueArray*);
typedef RogueString*(*ROGUEM9)(RogueClassStringReader*);
typedef RogueLogical(*ROGUEM10)(RogueClassStringReader*);
typedef RogueCharacter(*ROGUEM11)(RogueClassStringReader*);
typedef RogueString*(*ROGUEM12)(RogueClassGlobal*);
typedef RogueString*(*ROGUEM13)(RogueClassConsole*);
typedef RogueString*(*ROGUEM14)(RogueClassRogueC*);
typedef RogueString*(*ROGUEM15)(RogueClassError*);
typedef RogueClassError*(*ROGUEM16)(RogueClassError*);
typedef RogueString*(*ROGUEM17)(RogueClassProgram*);
typedef RogueString*(*ROGUEM18)(RogueTemplateList*);
typedef RogueTemplateList*(*ROGUEM19)(RogueTemplateList*);
typedef RogueString*(*ROGUEM20)(RogueClassTemplate*);
typedef RogueString*(*ROGUEM21)(RogueClassString_TemplateTable*);
typedef RogueString*(*ROGUEM22)(RogueClassString_AugmentListTable*);
typedef RogueString*(*ROGUEM23)(RogueRequisiteItemList*);
typedef RogueRequisiteItemList*(*ROGUEM24)(RogueRequisiteItemList*);
typedef RogueString*(*ROGUEM25)(RogueClassRequisiteItem*);
typedef RogueString*(*ROGUEM26)(RogueClassMethod*);
typedef RogueString*(*ROGUEM27)(RogueClassString_MethodListTable*);
typedef RogueString*(*ROGUEM28)(RogueTypeList*);
typedef RogueTypeList*(*ROGUEM29)(RogueTypeList*);
typedef RogueString*(*ROGUEM30)(RogueClassType*);
typedef RogueString*(*ROGUEM31)(RogueClassString_TypeTable*);
typedef RogueString*(*ROGUEM32)(RogueClassString_IntegerTable*);
typedef RogueString*(*ROGUEM33)(RogueClassToken*);
typedef RogueCharacter(*ROGUEM34)(RogueClassToken*);
typedef RogueInteger(*ROGUEM35)(RogueClassToken*);
typedef RogueLong(*ROGUEM36)(RogueClassToken*);
typedef RogueReal(*ROGUEM37)(RogueClassToken*);
typedef RogueClassType*(*ROGUEM38)(RogueClassToken*);
typedef RogueClassToken*(*ROGUEM39)(RogueClassToken*);
typedef RogueString*(*ROGUEM40)(RogueClassAttributes*);
typedef RogueString*(*ROGUEM41)(RogueClassCmd*);
typedef RogueClassCmd*(*ROGUEM42)(RogueClassCmd*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM43)(RogueClassCmd*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM44)(RogueClassCmd*,RogueClassCloneArgs*);
typedef void(*ROGUEM45)(RogueClassCmd*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM46)(RogueClassCmd*);
typedef RogueLogical(*ROGUEM47)(RogueClassCmd*);
typedef void(*ROGUEM48)(RogueClassCmd*);
typedef RogueClassCmd*(*ROGUEM49)(RogueClassCmd*,RogueClassScope*,RogueClassCmd*);
typedef RogueClassCmd*(*ROGUEM50)(RogueClassCmd*,RogueClassScope*,RogueInteger);
typedef RogueClassCmd*(*ROGUEM51)(RogueClassCmd*,RogueClassScope*,RogueClassTokenType*,RogueClassCmd*);
typedef void(*ROGUEM52)(RogueClassCmd*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmd*(*ROGUEM53)(RogueClassCmd*);
typedef RogueString*(*ROGUEM54)(RogueClassCmdReturn*);
typedef RogueClassCmd*(*ROGUEM55)(RogueClassCmdReturn*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM56)(RogueClassCmdReturn*,RogueClassScope*);
typedef void(*ROGUEM57)(RogueClassCmdReturn*);
typedef RogueClassType*(*ROGUEM58)(RogueClassCmdReturn*);
typedef void(*ROGUEM59)(RogueClassCmdReturn*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdReturn*(*ROGUEM60)(RogueClassCmdReturn*);
typedef RogueString*(*ROGUEM61)(RogueClassCmdStatement*);
typedef void(*ROGUEM62)(RogueClassCmdStatement*);
typedef RogueClassCmdStatement*(*ROGUEM63)(RogueClassCmdStatement*);
typedef RogueString*(*ROGUEM64)(RogueCmdList*);
typedef RogueString*(*ROGUEM65)(RogueClassCmdStatementList*);
typedef RogueClassCmdStatementList*(*ROGUEM66)(RogueClassCmdStatementList*);
typedef RogueClassCmdStatementList*(*ROGUEM67)(RogueClassCmdStatementList*,RogueInteger);
typedef RogueCmdList*(*ROGUEM68)(RogueCmdList*);
typedef RogueCmdList*(*ROGUEM69)(RogueCmdList*,RogueInteger);
typedef RogueString*(*ROGUEM70)(RogueClassTokenType*);
typedef RogueClassToken*(*ROGUEM71)(RogueClassTokenType*,RogueString*,RogueInteger,RogueInteger);
typedef RogueClassToken*(*ROGUEM72)(RogueClassTokenType*,RogueString*,RogueInteger,RogueInteger,RogueString*);
typedef RogueLogical(*ROGUEM73)(RogueClassTokenType*);
typedef RogueClassTokenType*(*ROGUEM74)(RogueClassTokenType*);
typedef RogueString*(*ROGUEM75)(RogueClassCmdLabel*);
typedef RogueClassCmdLabel*(*ROGUEM76)(RogueClassCmdLabel*,RogueClassCloneArgs*);
typedef RogueLogical(*ROGUEM77)(RogueClassCmdLabel*);
typedef RogueClassCmd*(*ROGUEM78)(RogueClassCmdLabel*,RogueClassScope*);
typedef void(*ROGUEM79)(RogueClassCmdLabel*);
typedef void(*ROGUEM80)(RogueClassCmdLabel*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLabel*(*ROGUEM81)(RogueClassCmdLabel*);
typedef RogueString*(*ROGUEM82)(RogueClassRogueError*);
typedef RogueClassRogueError*(*ROGUEM83)(RogueClassRogueError*);
typedef RogueString*(*ROGUEM84)(RogueMethodList*);
typedef RogueMethodList*(*ROGUEM85)(RogueMethodList*);
typedef RogueString*(*ROGUEM86)(RogueClassCPPWriter*);
typedef RogueString*(*ROGUEM87)(RoguePropertyList*);
typedef RoguePropertyList*(*ROGUEM88)(RoguePropertyList*);
typedef RogueString*(*ROGUEM89)(RogueClassProperty*);
typedef RogueString*(*ROGUEM90)(RogueClassString_MethodTable*);
typedef RogueString*(*ROGUEM91)(RogueLocalList*);
typedef RogueLocalList*(*ROGUEM92)(RogueLocalList*);
typedef RogueString*(*ROGUEM93)(RogueClassLocal*);
typedef RogueString*(*ROGUEM94)(RogueIntegerList*);
typedef RogueIntegerList*(*ROGUEM95)(RogueIntegerList*);
typedef RogueString*(*ROGUEM96)(RogueByteList*);
typedef RogueByteList*(*ROGUEM97)(RogueByteList*);
typedef RogueString*(*ROGUEM98)(RogueClassMath*);
typedef RogueString*(*ROGUEM99)(RogueClassSystem*);
typedef RogueString*(*ROGUEM100)(RogueClassString_LogicalTable*);
typedef RogueString*(*ROGUEM101)(RogueClassFile*);
typedef RogueString*(*ROGUEM102)(RogueClassParser*);
typedef RogueString*(*ROGUEM103)(RogueTokenList*);
typedef RogueTokenList*(*ROGUEM104)(RogueTokenList*);
typedef RogueString*(*ROGUEM105)(RogueClassLineReader*);
typedef RogueLogical(*ROGUEM106)(RogueClassLineReader*);
typedef RogueString*(*ROGUEM107)(RogueTypeParameterList*);
typedef RogueTypeParameterList*(*ROGUEM108)(RogueTypeParameterList*);
typedef RogueString*(*ROGUEM109)(RogueClassTypeParameter*);
typedef RogueString*(*ROGUEM110)(RogueAugmentList*);
typedef RogueAugmentList*(*ROGUEM111)(RogueAugmentList*);
typedef RogueString*(*ROGUEM112)(RogueClassAugment*);
typedef RogueString*(*ROGUEM113)(RogueClassString_TokenTypeTable*);
typedef RogueString*(*ROGUEM114)(RogueClassLiteralCharacterToken*);
typedef RogueCharacter(*ROGUEM115)(RogueClassLiteralCharacterToken*);
typedef RogueClassLiteralCharacterToken*(*ROGUEM116)(RogueClassLiteralCharacterToken*);
typedef RogueString*(*ROGUEM117)(RogueClassLiteralLongToken*);
typedef RogueInteger(*ROGUEM118)(RogueClassLiteralLongToken*);
typedef RogueLong(*ROGUEM119)(RogueClassLiteralLongToken*);
typedef RogueReal(*ROGUEM120)(RogueClassLiteralLongToken*);
typedef RogueClassLiteralLongToken*(*ROGUEM121)(RogueClassLiteralLongToken*);
typedef RogueString*(*ROGUEM122)(RogueClassLiteralIntegerToken*);
typedef RogueInteger(*ROGUEM123)(RogueClassLiteralIntegerToken*);
typedef RogueReal(*ROGUEM124)(RogueClassLiteralIntegerToken*);
typedef RogueClassLiteralIntegerToken*(*ROGUEM125)(RogueClassLiteralIntegerToken*);
typedef RogueString*(*ROGUEM126)(RogueClassLiteralRealToken*);
typedef RogueInteger(*ROGUEM127)(RogueClassLiteralRealToken*);
typedef RogueReal(*ROGUEM128)(RogueClassLiteralRealToken*);
typedef RogueClassLiteralRealToken*(*ROGUEM129)(RogueClassLiteralRealToken*);
typedef RogueString*(*ROGUEM130)(RogueClassLiteralStringToken*);
typedef RogueClassLiteralStringToken*(*ROGUEM131)(RogueClassLiteralStringToken*);
typedef RogueString*(*ROGUEM132)(RogueClassString_TypeSpecializerTable*);
typedef RogueString*(*ROGUEM133)(RogueClassTypeSpecializer*);
typedef RogueString*(*ROGUEM134)(RogueTableEntry_of_String_TemplateList*);
typedef RogueTableEntry_of_String_TemplateList*(*ROGUEM135)(RogueTableEntry_of_String_TemplateList*);
typedef RogueString*(*ROGUEM136)(RogueClassString_TemplateTableEntry*);
typedef RogueString*(*ROGUEM137)(RogueTableEntry_of_String_AugmentListList*);
typedef RogueTableEntry_of_String_AugmentListList*(*ROGUEM138)(RogueTableEntry_of_String_AugmentListList*);
typedef RogueString*(*ROGUEM139)(RogueClassString_AugmentListTableEntry*);
typedef RogueString*(*ROGUEM140)(RogueCmdLabelList*);
typedef RogueCmdLabelList*(*ROGUEM141)(RogueCmdLabelList*);
typedef RogueString*(*ROGUEM142)(RogueClassString_CmdLabelTable*);
typedef RogueString*(*ROGUEM143)(RogueClassCloneArgs*);
typedef RogueClassCmdLabel*(*ROGUEM144)(RogueClassCloneArgs*,RogueClassCmdLabel*);
typedef RogueClassCloneArgs*(*ROGUEM145)(RogueClassCloneArgs*);
typedef RogueString*(*ROGUEM146)(RogueClassCloneMethodArgs*);
typedef RogueClassCmdLabel*(*ROGUEM147)(RogueClassCloneMethodArgs*,RogueClassCmdLabel*);
typedef RogueClassCloneMethodArgs*(*ROGUEM148)(RogueClassCloneMethodArgs*);
typedef RogueString*(*ROGUEM149)(RogueClassCmdAccess*);
typedef RogueClassCmd*(*ROGUEM150)(RogueClassCmdAccess*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM151)(RogueClassCmdAccess*);
typedef RogueClassCmd*(*ROGUEM152)(RogueClassCmdAccess*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM153)(RogueClassCmdAccess*,RogueClassScope*,RogueClassCmd*);
typedef RogueClassCmd*(*ROGUEM154)(RogueClassCmdAccess*,RogueClassScope*,RogueClassTokenType*,RogueClassCmd*);
typedef void(*ROGUEM155)(RogueClassCmdAccess*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdAccess*(*ROGUEM156)(RogueClassCmdAccess*);
typedef RogueString*(*ROGUEM157)(RogueClassCmdArgs*);
typedef RogueClassCmdArgs*(*ROGUEM158)(RogueClassCmdArgs*);
typedef RogueClassCmdArgs*(*ROGUEM159)(RogueClassCmdArgs*,RogueInteger);
typedef RogueString*(*ROGUEM160)(RogueClassCmdAssign*);
typedef RogueClassCmd*(*ROGUEM161)(RogueClassCmdAssign*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM162)(RogueClassCmdAssign*,RogueClassScope*);
typedef RogueClassCmdAssign*(*ROGUEM163)(RogueClassCmdAssign*);
typedef RogueString*(*ROGUEM164)(RogueClassScope*);
typedef RogueString*(*ROGUEM165)(RogueCmdControlStructureList*);
typedef RogueCmdControlStructureList*(*ROGUEM166)(RogueCmdControlStructureList*);
typedef RogueString*(*ROGUEM167)(RogueClassCmdControlStructure*);
typedef RogueLogical(*ROGUEM168)(RogueClassCmdControlStructure*);
typedef RogueClassCmdControlStructure*(*ROGUEM169)(RogueClassCmdControlStructure*);
typedef RogueClassCmd*(*ROGUEM170)(RogueClassCmdControlStructure*,RogueClassCmdControlStructure*);
typedef RogueString*(*ROGUEM171)(RogueClassCmdLiteralThis*);
typedef RogueClassCmd*(*ROGUEM172)(RogueClassCmdLiteralThis*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM173)(RogueClassCmdThisContext*);
typedef void(*ROGUEM174)(RogueClassCmdLiteralThis*);
typedef RogueClassCmd*(*ROGUEM175)(RogueClassCmdLiteralThis*,RogueClassScope*);
typedef void(*ROGUEM176)(RogueClassCmdThisContext*);
typedef void(*ROGUEM177)(RogueClassCmdThisContext*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralThis*(*ROGUEM178)(RogueClassCmdLiteralThis*);
typedef RogueString*(*ROGUEM179)(RogueClassCmdThisContext*);
typedef RogueClassCmd*(*ROGUEM180)(RogueClassCmdThisContext*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM181)(RogueClassCmdThisContext*,RogueClassScope*);
typedef RogueClassCmdThisContext*(*ROGUEM182)(RogueClassCmdThisContext*);
typedef RogueString*(*ROGUEM183)(RogueClassCmdGenericLoop*);
typedef RogueClassCmd*(*ROGUEM184)(RogueClassCmdGenericLoop*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM185)(RogueClassCmdGenericLoop*,RogueClassScope*);
typedef void(*ROGUEM186)(RogueClassCmdGenericLoop*);
typedef void(*ROGUEM187)(RogueClassCmdGenericLoop*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdGenericLoop*(*ROGUEM188)(RogueClassCmdGenericLoop*);
typedef RogueString*(*ROGUEM189)(RogueClassCmdLiteralInteger*);
typedef RogueClassCmd*(*ROGUEM190)(RogueClassCmdLiteralInteger*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM191)(RogueClassCmdLiteralInteger*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM192)(RogueClassCmdLiteral*);
typedef RogueLogical(*ROGUEM193)(RogueClassCmdLiteral*);
typedef RogueClassCmd*(*ROGUEM194)(RogueClassCmdLiteralInteger*,RogueClassScope*);
typedef void(*ROGUEM195)(RogueClassCmdLiteral*);
typedef RogueClassType*(*ROGUEM196)(RogueClassCmdLiteralInteger*);
typedef void(*ROGUEM197)(RogueClassCmdLiteralInteger*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralInteger*(*ROGUEM198)(RogueClassCmdLiteralInteger*);
typedef RogueString*(*ROGUEM199)(RogueClassCmdLiteral*);
typedef RogueClassCmdLiteral*(*ROGUEM200)(RogueClassCmdLiteral*);
typedef RogueString*(*ROGUEM201)(RogueClassCmdCompareNE*);
typedef RogueClassCmd*(*ROGUEM202)(RogueClassCmdCompareNE*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM203)(RogueClassCmdCompareNE*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM204)(RogueClassCmdBinary*,RogueClassScope*);
typedef void(*ROGUEM205)(RogueClassCmdBinary*);
typedef RogueClassType*(*ROGUEM206)(RogueClassCmdComparison*);
typedef void(*ROGUEM207)(RogueClassCmdBinary*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCompareNE*(*ROGUEM208)(RogueClassCmdCompareNE*);
typedef RogueString*(*ROGUEM209)(RogueClassCmdBinary*);
typedef RogueLogical(*ROGUEM210)(RogueClassCmdComparison*);
typedef RogueClassCmd*(*ROGUEM211)(RogueClassCmdComparison*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM212)(RogueClassCmdBinary*,RogueClassScope*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM213)(RogueClassCmdBinary*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM214)(RogueClassCmdCompareNE*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM215)(RogueClassCmdComparison*);
typedef RogueClassCmdComparison*(*ROGUEM216)(RogueClassCmdComparison*);
typedef RogueClassCmd*(*ROGUEM217)(RogueClassCmdComparison*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueClassType*(*ROGUEM218)(RogueClassCmdBinary*);
typedef RogueClassCmdBinary*(*ROGUEM219)(RogueClassCmdBinary*);
typedef RogueLogical(*ROGUEM220)(RogueClassCmdBinary*);
typedef RogueString*(*ROGUEM221)(RogueClassTaskArgs*);
typedef RogueClassTaskArgs*(*ROGUEM222)(RogueClassTaskArgs*);
typedef RogueString*(*ROGUEM223)(RogueClassCmdTaskControl*);
typedef RogueLogical(*ROGUEM224)(RogueClassCmdTaskControl*);
typedef RogueClassCmd*(*ROGUEM225)(RogueClassCmdTaskControl*,RogueClassScope*);
typedef void(*ROGUEM226)(RogueClassCmdTaskControl*);
typedef void(*ROGUEM227)(RogueClassCmdTaskControl*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdTaskControl*(*ROGUEM228)(RogueClassCmdTaskControl*);
typedef RogueString*(*ROGUEM229)(RogueClassCmdTaskControlSection*);
typedef RogueString*(*ROGUEM230)(RogueTableEntry_of_String_MethodListList*);
typedef RogueTableEntry_of_String_MethodListList*(*ROGUEM231)(RogueTableEntry_of_String_MethodListList*);
typedef RogueString*(*ROGUEM232)(RogueClassString_MethodListTableEntry*);
typedef RogueString*(*ROGUEM233)(RogueClassString_CmdTable*);
typedef RogueString*(*ROGUEM234)(RogueClassString_PropertyTable*);
typedef RogueString*(*ROGUEM235)(RogueClassCmdLiteralNull*);
typedef RogueClassCmd*(*ROGUEM236)(RogueClassCmdLiteralNull*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM237)(RogueClassCmdLiteralNull*,RogueClassCloneArgs*);
typedef RogueClassCmdLiteralNull*(*ROGUEM238)(RogueClassCmdLiteralNull*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM239)(RogueClassCmdLiteralNull*);
typedef void(*ROGUEM240)(RogueClassCmdLiteralNull*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralNull*(*ROGUEM241)(RogueClassCmdLiteralNull*);
typedef RogueString*(*ROGUEM242)(RogueClassCmdCreateCompound*);
typedef RogueClassCmd*(*ROGUEM243)(RogueClassCmdCreateCompound*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM244)(RogueClassCmdCreateCompound*,RogueClassScope*);
typedef void(*ROGUEM245)(RogueClassCmdCreateCompound*);
typedef RogueClassType*(*ROGUEM246)(RogueClassCmdCreateCompound*);
typedef void(*ROGUEM247)(RogueClassCmdCreateCompound*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCreateCompound*(*ROGUEM248)(RogueClassCmdCreateCompound*);
typedef RogueString*(*ROGUEM249)(RogueClassCmdLiteralLogical*);
typedef RogueClassCmd*(*ROGUEM250)(RogueClassCmdLiteralLogical*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM251)(RogueClassCmdLiteralLogical*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM252)(RogueClassCmdLiteralLogical*);
typedef void(*ROGUEM253)(RogueClassCmdLiteralLogical*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralLogical*(*ROGUEM254)(RogueClassCmdLiteralLogical*);
typedef RogueString*(*ROGUEM255)(RogueClassCmdLiteralString*);
typedef RogueClassCmd*(*ROGUEM256)(RogueClassCmdLiteralString*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM257)(RogueClassCmdLiteralString*,RogueClassScope*);
typedef void(*ROGUEM258)(RogueClassCmdLiteralString*);
typedef RogueClassType*(*ROGUEM259)(RogueClassCmdLiteralString*);
typedef void(*ROGUEM260)(RogueClassCmdLiteralString*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralString*(*ROGUEM261)(RogueClassCmdLiteralString*);
typedef RogueString*(*ROGUEM262)(RogueClassCmdWriteGlobal*);
typedef RogueClassCmd*(*ROGUEM263)(RogueClassCmdWriteGlobal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM264)(RogueClassCmdWriteGlobal*,RogueClassScope*);
typedef void(*ROGUEM265)(RogueClassCmdWriteGlobal*);
typedef RogueClassType*(*ROGUEM266)(RogueClassCmdWriteGlobal*);
typedef void(*ROGUEM267)(RogueClassCmdWriteGlobal*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdWriteGlobal*(*ROGUEM268)(RogueClassCmdWriteGlobal*);
typedef RogueString*(*ROGUEM269)(RogueClassCmdWriteProperty*);
typedef RogueClassCmd*(*ROGUEM270)(RogueClassCmdWriteProperty*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM271)(RogueClassCmdWriteProperty*,RogueClassScope*);
typedef void(*ROGUEM272)(RogueClassCmdWriteProperty*);
typedef RogueClassType*(*ROGUEM273)(RogueClassCmdWriteProperty*);
typedef void(*ROGUEM274)(RogueClassCmdWriteProperty*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdWriteProperty*(*ROGUEM275)(RogueClassCmdWriteProperty*);
typedef RogueString*(*ROGUEM276)(RogueTableEntry_of_String_TypeList*);
typedef RogueTableEntry_of_String_TypeList*(*ROGUEM277)(RogueTableEntry_of_String_TypeList*);
typedef RogueString*(*ROGUEM278)(RogueClassString_TypeTableEntry*);
typedef RogueString*(*ROGUEM279)(RogueTableEntry_of_String_IntegerList*);
typedef RogueTableEntry_of_String_IntegerList*(*ROGUEM280)(RogueTableEntry_of_String_IntegerList*);
typedef RogueString*(*ROGUEM281)(RogueClassString_IntegerTableEntry*);
typedef RogueString*(*ROGUEM282)(RogueClassCmdCastToType*);
typedef RogueClassCmd*(*ROGUEM283)(RogueClassCmdCastToType*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM284)(RogueClassCmdCastToType*,RogueClassScope*);
typedef void(*ROGUEM285)(RogueClassCmdTypeOperator*);
typedef RogueClassType*(*ROGUEM286)(RogueClassCmdTypeOperator*);
typedef void(*ROGUEM287)(RogueClassCmdCastToType*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCastToType*(*ROGUEM288)(RogueClassCmdCastToType*);
typedef RogueString*(*ROGUEM289)(RogueClassCmdTypeOperator*);
typedef RogueClassCmdTypeOperator*(*ROGUEM290)(RogueClassCmdTypeOperator*);
typedef RogueString*(*ROGUEM291)(RogueClassCmdLogicalize*);
typedef RogueClassCmd*(*ROGUEM292)(RogueClassCmdLogicalize*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM293)(RogueClassCmdLogicalize*,RogueClassScope*);
typedef void(*ROGUEM294)(RogueClassCmdUnary*);
typedef RogueClassType*(*ROGUEM295)(RogueClassCmdLogicalize*);
typedef void(*ROGUEM296)(RogueClassCmdUnary*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLogicalize*(*ROGUEM297)(RogueClassCmdLogicalize*);
typedef RogueString*(*ROGUEM298)(RogueClassCmdUnary*);
typedef RogueClassCmd*(*ROGUEM299)(RogueClassCmdUnary*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM300)(RogueClassCmdUnary*);
typedef RogueClassCmdUnary*(*ROGUEM301)(RogueClassCmdUnary*);
typedef RogueString*(*ROGUEM302)(RogueClassCmdCreateOptionalValue*);
typedef RogueClassCmd*(*ROGUEM303)(RogueClassCmdCreateOptionalValue*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM304)(RogueClassCmdCreateOptionalValue*,RogueClassScope*);
typedef void(*ROGUEM305)(RogueClassCmdCreateOptionalValue*);
typedef RogueClassType*(*ROGUEM306)(RogueClassCmdCreateOptionalValue*);
typedef void(*ROGUEM307)(RogueClassCmdCreateOptionalValue*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCreateOptionalValue*(*ROGUEM308)(RogueClassCmdCreateOptionalValue*);
typedef RogueString*(*ROGUEM309)(RogueTableEntry_of_String_MethodList*);
typedef RogueTableEntry_of_String_MethodList*(*ROGUEM310)(RogueTableEntry_of_String_MethodList*);
typedef RogueString*(*ROGUEM311)(RogueClassString_MethodTableEntry*);
typedef RogueString*(*ROGUEM312)(RogueTableEntry_of_String_LogicalList*);
typedef RogueTableEntry_of_String_LogicalList*(*ROGUEM313)(RogueTableEntry_of_String_LogicalList*);
typedef RogueString*(*ROGUEM314)(RogueClassString_LogicalTableEntry*);
typedef RogueString*(*ROGUEM315)(RogueClassFileReader*);
typedef RogueLogical(*ROGUEM316)(RogueClassFileReader*);
typedef RogueCharacter(*ROGUEM317)(RogueClassFileReader*);
typedef RogueString*(*ROGUEM318)(RogueClassFileWriter*);
typedef RogueString*(*ROGUEM319)(RogueClassTokenReader*);
typedef RogueString*(*ROGUEM320)(RogueClassTokenizer*);
typedef RogueString*(*ROGUEM321)(RogueClassParseReader*);
typedef RogueLogical(*ROGUEM322)(RogueClassParseReader*);
typedef RogueCharacter(*ROGUEM323)(RogueClassParseReader*);
typedef RogueString*(*ROGUEM324)(RogueClassPreprocessor*);
typedef RogueString*(*ROGUEM325)(RogueClassCmdAdd*);
typedef RogueClassCmd*(*ROGUEM326)(RogueClassCmdAdd*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM327)(RogueClassCmdAdd*,RogueClassType*);
typedef RogueClassCmdAdd*(*ROGUEM328)(RogueClassCmdAdd*);
typedef RogueClassCmd*(*ROGUEM329)(RogueClassCmdAdd*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueString*(*ROGUEM330)(RogueClassCmdIf*);
typedef RogueClassCmd*(*ROGUEM331)(RogueClassCmdIf*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM332)(RogueClassCmdIf*,RogueClassScope*);
typedef void(*ROGUEM333)(RogueClassCmdIf*);
typedef void(*ROGUEM334)(RogueClassCmdIf*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdIf*(*ROGUEM335)(RogueClassCmdIf*);
typedef RogueString*(*ROGUEM336)(RogueClassCmdWhich*);
typedef RogueClassCmdWhich*(*ROGUEM337)(RogueClassCmdWhich*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM338)(RogueClassCmdWhich*,RogueClassScope*);
typedef RogueClassCmdWhich*(*ROGUEM339)(RogueClassCmdWhich*);
typedef RogueString*(*ROGUEM340)(RogueClassCmdContingent*);
typedef RogueClassCmd*(*ROGUEM341)(RogueClassCmdContingent*,RogueClassCloneArgs*);
typedef RogueClassCmdContingent*(*ROGUEM342)(RogueClassCmdContingent*,RogueClassScope*);
typedef void(*ROGUEM343)(RogueClassCmdContingent*);
typedef void(*ROGUEM344)(RogueClassCmdContingent*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdContingent*(*ROGUEM345)(RogueClassCmdContingent*);
typedef RogueClassCmd*(*ROGUEM346)(RogueClassCmdContingent*,RogueClassCmdControlStructure*);
typedef RogueString*(*ROGUEM347)(RogueClassCmdTry*);
typedef RogueClassCmdTry*(*ROGUEM348)(RogueClassCmdTry*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM349)(RogueClassCmdTry*,RogueClassScope*);
typedef void(*ROGUEM350)(RogueClassCmdTry*);
typedef void(*ROGUEM351)(RogueClassCmdTry*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdTry*(*ROGUEM352)(RogueClassCmdTry*);
typedef RogueString*(*ROGUEM353)(RogueClassCmdAwait*);
typedef RogueClassCmd*(*ROGUEM354)(RogueClassCmdAwait*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM355)(RogueClassCmdAwait*,RogueClassScope*);
typedef RogueClassCmdAwait*(*ROGUEM356)(RogueClassCmdAwait*);
typedef RogueString*(*ROGUEM357)(RogueClassCmdYield*);
typedef RogueClassCmd*(*ROGUEM358)(RogueClassCmdYield*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM359)(RogueClassCmdYield*,RogueClassScope*);
typedef RogueClassCmdYield*(*ROGUEM360)(RogueClassCmdYield*);
typedef RogueString*(*ROGUEM361)(RogueClassCmdThrow*);
typedef RogueClassCmdThrow*(*ROGUEM362)(RogueClassCmdThrow*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM363)(RogueClassCmdThrow*,RogueClassScope*);
typedef void(*ROGUEM364)(RogueClassCmdThrow*);
typedef void(*ROGUEM365)(RogueClassCmdThrow*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdThrow*(*ROGUEM366)(RogueClassCmdThrow*);
typedef RogueString*(*ROGUEM367)(RogueClassCmdTrace*);
typedef RogueClassCmdTrace*(*ROGUEM368)(RogueClassCmdTrace*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM369)(RogueClassCmdTrace*,RogueClassScope*);
typedef void(*ROGUEM370)(RogueClassCmdTrace*);
typedef RogueClassCmdTrace*(*ROGUEM371)(RogueClassCmdTrace*);
typedef RogueString*(*ROGUEM372)(RogueClassCmdEscape*);
typedef RogueClassCmd*(*ROGUEM373)(RogueClassCmdEscape*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM374)(RogueClassCmdEscape*,RogueClassScope*);
typedef void(*ROGUEM375)(RogueClassCmdEscape*);
typedef void(*ROGUEM376)(RogueClassCmdEscape*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdEscape*(*ROGUEM377)(RogueClassCmdEscape*);
typedef RogueString*(*ROGUEM378)(RogueClassCmdNextIteration*);
typedef RogueClassCmd*(*ROGUEM379)(RogueClassCmdNextIteration*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM380)(RogueClassCmdNextIteration*,RogueClassScope*);
typedef void(*ROGUEM381)(RogueClassCmdNextIteration*);
typedef void(*ROGUEM382)(RogueClassCmdNextIteration*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdNextIteration*(*ROGUEM383)(RogueClassCmdNextIteration*);
typedef RogueString*(*ROGUEM384)(RogueClassCmdNecessary*);
typedef RogueClassCmd*(*ROGUEM385)(RogueClassCmdNecessary*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM386)(RogueClassCmdNecessary*,RogueClassScope*);
typedef void(*ROGUEM387)(RogueClassCmdNecessary*);
typedef void(*ROGUEM388)(RogueClassCmdNecessary*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdNecessary*(*ROGUEM389)(RogueClassCmdNecessary*);
typedef RogueString*(*ROGUEM390)(RogueClassCmdSufficient*);
typedef RogueClassCmd*(*ROGUEM391)(RogueClassCmdSufficient*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM392)(RogueClassCmdSufficient*,RogueClassScope*);
typedef void(*ROGUEM393)(RogueClassCmdSufficient*);
typedef void(*ROGUEM394)(RogueClassCmdSufficient*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdSufficient*(*ROGUEM395)(RogueClassCmdSufficient*);
typedef RogueString*(*ROGUEM396)(RogueClassCmdAdjust*);
typedef RogueClassCmd*(*ROGUEM397)(RogueClassCmdAdjust*,RogueClassScope*);
typedef RogueClassCmdAdjust*(*ROGUEM398)(RogueClassCmdAdjust*);
typedef RogueString*(*ROGUEM399)(RogueClassCmdOpWithAssign*);
typedef RogueClassCmd*(*ROGUEM400)(RogueClassCmdOpWithAssign*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM401)(RogueClassCmdOpWithAssign*,RogueClassScope*);
typedef RogueClassCmdOpWithAssign*(*ROGUEM402)(RogueClassCmdOpWithAssign*);
typedef RogueString*(*ROGUEM403)(RogueCmdWhichCaseList*);
typedef RogueCmdWhichCaseList*(*ROGUEM404)(RogueCmdWhichCaseList*);
typedef RogueString*(*ROGUEM405)(RogueClassCmdWhichCase*);
typedef RogueClassCmdWhichCase*(*ROGUEM406)(RogueClassCmdWhichCase*,RogueClassCloneArgs*);
typedef void(*ROGUEM407)(RogueClassCmdWhichCase*);
typedef RogueClassCmdWhichCase*(*ROGUEM408)(RogueClassCmdWhichCase*);
typedef RogueString*(*ROGUEM409)(RogueCmdCatchList*);
typedef RogueCmdCatchList*(*ROGUEM410)(RogueCmdCatchList*);
typedef RogueString*(*ROGUEM411)(RogueClassCmdCatch*);
typedef RogueClassCmdCatch*(*ROGUEM412)(RogueClassCmdCatch*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM413)(RogueClassCmdCatch*,RogueClassScope*);
typedef void(*ROGUEM414)(RogueClassCmdCatch*);
typedef void(*ROGUEM415)(RogueClassCmdCatch*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCatch*(*ROGUEM416)(RogueClassCmdCatch*);
typedef RogueString*(*ROGUEM417)(RogueClassCmdLocalDeclaration*);
typedef RogueClassCmd*(*ROGUEM418)(RogueClassCmdLocalDeclaration*,RogueClassCloneArgs*);
typedef void(*ROGUEM419)(RogueClassCmdLocalDeclaration*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM420)(RogueClassCmdLocalDeclaration*,RogueClassScope*);
typedef void(*ROGUEM421)(RogueClassCmdLocalDeclaration*);
typedef void(*ROGUEM422)(RogueClassCmdLocalDeclaration*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLocalDeclaration*(*ROGUEM423)(RogueClassCmdLocalDeclaration*);
typedef RogueString*(*ROGUEM424)(RogueClassCmdAdjustLocal*);
typedef RogueClassCmd*(*ROGUEM425)(RogueClassCmdAdjustLocal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM426)(RogueClassCmdAdjustLocal*,RogueClassScope*);
typedef void(*ROGUEM427)(RogueClassCmdAdjustLocal*);
typedef RogueClassType*(*ROGUEM428)(RogueClassCmdAdjustLocal*);
typedef void(*ROGUEM429)(RogueClassCmdAdjustLocal*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdAdjustLocal*(*ROGUEM430)(RogueClassCmdAdjustLocal*);
typedef RogueString*(*ROGUEM431)(RogueClassCmdReadLocal*);
typedef RogueClassCmd*(*ROGUEM432)(RogueClassCmdReadLocal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM433)(RogueClassCmdReadLocal*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM434)(RogueClassCmdReadLocal*,RogueClassScope*,RogueInteger);
typedef void(*ROGUEM435)(RogueClassCmdReadLocal*);
typedef RogueClassType*(*ROGUEM436)(RogueClassCmdReadLocal*);
typedef void(*ROGUEM437)(RogueClassCmdReadLocal*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdReadLocal*(*ROGUEM438)(RogueClassCmdReadLocal*);
typedef RogueString*(*ROGUEM439)(RogueClassCmdCompareLE*);
typedef RogueClassCmd*(*ROGUEM440)(RogueClassCmdCompareLE*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM441)(RogueClassCmdCompareLE*,RogueClassType*);
typedef RogueClassCmdCompareLE*(*ROGUEM442)(RogueClassCmdCompareLE*);
typedef RogueClassCmd*(*ROGUEM443)(RogueClassCmdCompareLE*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM444)(RogueClassCmdRange*);
typedef void(*ROGUEM445)(RogueClassCmdRange*);
typedef RogueClassCmdRange*(*ROGUEM446)(RogueClassCmdRange*);
typedef RogueString*(*ROGUEM447)(RogueClassCmdLocalOpWithAssign*);
typedef RogueClassCmd*(*ROGUEM448)(RogueClassCmdLocalOpWithAssign*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM449)(RogueClassCmdLocalOpWithAssign*,RogueClassScope*);
typedef void(*ROGUEM450)(RogueClassCmdLocalOpWithAssign*);
typedef RogueClassType*(*ROGUEM451)(RogueClassCmdLocalOpWithAssign*);
typedef void(*ROGUEM452)(RogueClassCmdLocalOpWithAssign*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLocalOpWithAssign*(*ROGUEM453)(RogueClassCmdLocalOpWithAssign*);
typedef RogueString*(*ROGUEM454)(RogueClassCmdResolvedOpWithAssign*);
typedef RogueClassCmdResolvedOpWithAssign*(*ROGUEM455)(RogueClassCmdResolvedOpWithAssign*);
typedef RogueString*(*ROGUEM456)(RogueClassCmdForEach*);
typedef RogueClassCmd*(*ROGUEM457)(RogueClassCmdForEach*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM458)(RogueClassCmdForEach*,RogueClassScope*);
typedef void(*ROGUEM459)(RogueClassCmdForEach*);
typedef RogueClassCmdForEach*(*ROGUEM460)(RogueClassCmdForEach*);
typedef RogueString*(*ROGUEM461)(RogueClassCmdRangeUpTo*);
typedef RogueClassCmd*(*ROGUEM462)(RogueClassCmdRangeUpTo*,RogueClassCloneArgs*);
typedef RogueClassCmdRangeUpTo*(*ROGUEM463)(RogueClassCmdRangeUpTo*);
typedef RogueString*(*ROGUEM464)(RogueClassCmdLogicalXor*);
typedef RogueClassCmd*(*ROGUEM465)(RogueClassCmdLogicalXor*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM466)(RogueClassCmdBinaryLogical*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM467)(RogueClassCmdBinaryLogical*);
typedef RogueClassCmdLogicalXor*(*ROGUEM468)(RogueClassCmdLogicalXor*);
typedef RogueClassCmd*(*ROGUEM469)(RogueClassCmdBinaryLogical*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueLogical(*ROGUEM470)(RogueClassCmdLogicalXor*,RogueLogical,RogueLogical);
typedef RogueString*(*ROGUEM471)(RogueClassCmdBinaryLogical*);
typedef RogueClassCmdBinaryLogical*(*ROGUEM472)(RogueClassCmdBinaryLogical*);
typedef RogueLogical(*ROGUEM473)(RogueClassCmdBinaryLogical*,RogueLogical,RogueLogical);
typedef RogueString*(*ROGUEM474)(RogueClassCmdLogicalOr*);
typedef RogueClassCmd*(*ROGUEM475)(RogueClassCmdLogicalOr*,RogueClassCloneArgs*);
typedef RogueClassCmdLogicalOr*(*ROGUEM476)(RogueClassCmdLogicalOr*);
typedef RogueLogical(*ROGUEM477)(RogueClassCmdLogicalOr*,RogueLogical,RogueLogical);
typedef RogueString*(*ROGUEM478)(RogueClassCmdLogicalAnd*);
typedef RogueClassCmd*(*ROGUEM479)(RogueClassCmdLogicalAnd*,RogueClassCloneArgs*);
typedef RogueClassCmdLogicalAnd*(*ROGUEM480)(RogueClassCmdLogicalAnd*);
typedef RogueLogical(*ROGUEM481)(RogueClassCmdLogicalAnd*,RogueLogical,RogueLogical);
typedef RogueString*(*ROGUEM482)(RogueClassCmdCompareEQ*);
typedef RogueClassCmd*(*ROGUEM483)(RogueClassCmdCompareEQ*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM484)(RogueClassCmdCompareEQ*,RogueClassType*);
typedef RogueClassCmdCompareEQ*(*ROGUEM485)(RogueClassCmdCompareEQ*);
typedef RogueLogical(*ROGUEM486)(RogueClassCmdCompareEQ*);
typedef RogueClassCmd*(*ROGUEM487)(RogueClassCmdCompareEQ*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM488)(RogueClassCmdCompareIs*);
typedef RogueClassCmd*(*ROGUEM489)(RogueClassCmdCompareIs*,RogueClassCloneArgs*);
typedef RogueClassCmdCompareIs*(*ROGUEM490)(RogueClassCmdCompareIs*);
typedef RogueClassCmd*(*ROGUEM491)(RogueClassCmdCompareIs*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueString*(*ROGUEM492)(RogueClassCmdCompareIsNot*);
typedef RogueClassCmd*(*ROGUEM493)(RogueClassCmdCompareIsNot*,RogueClassCloneArgs*);
typedef RogueClassCmdCompareIsNot*(*ROGUEM494)(RogueClassCmdCompareIsNot*);
typedef RogueClassCmd*(*ROGUEM495)(RogueClassCmdCompareIsNot*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueString*(*ROGUEM496)(RogueClassCmdCompareLT*);
typedef RogueClassCmd*(*ROGUEM497)(RogueClassCmdCompareLT*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM498)(RogueClassCmdCompareLT*,RogueClassType*);
typedef RogueClassCmdCompareLT*(*ROGUEM499)(RogueClassCmdCompareLT*);
typedef RogueClassCmd*(*ROGUEM500)(RogueClassCmdCompareLT*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM501)(RogueClassCmdCompareGT*);
typedef RogueClassCmd*(*ROGUEM502)(RogueClassCmdCompareGT*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM503)(RogueClassCmdCompareGT*,RogueClassType*);
typedef RogueClassCmdCompareGT*(*ROGUEM504)(RogueClassCmdCompareGT*);
typedef RogueClassCmd*(*ROGUEM505)(RogueClassCmdCompareGT*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM506)(RogueClassCmdCompareGE*);
typedef RogueClassCmd*(*ROGUEM507)(RogueClassCmdCompareGE*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM508)(RogueClassCmdCompareGE*,RogueClassType*);
typedef RogueClassCmdCompareGE*(*ROGUEM509)(RogueClassCmdCompareGE*);
typedef RogueClassCmd*(*ROGUEM510)(RogueClassCmdCompareGE*,RogueClassScope*,RogueClassType*,RogueClassType*,RogueLogical);
typedef RogueString*(*ROGUEM511)(RogueClassCmdInstanceOf*);
typedef RogueClassCmd*(*ROGUEM512)(RogueClassCmdInstanceOf*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM513)(RogueClassCmdInstanceOf*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM514)(RogueClassCmdInstanceOf*);
typedef void(*ROGUEM515)(RogueClassCmdInstanceOf*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdInstanceOf*(*ROGUEM516)(RogueClassCmdInstanceOf*);
typedef RogueString*(*ROGUEM517)(RogueClassCmdLogicalNot*);
typedef RogueClassCmd*(*ROGUEM518)(RogueClassCmdLogicalNot*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM519)(RogueClassCmdLogicalNot*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM520)(RogueClassCmdLogicalNot*);
typedef RogueClassCmdLogicalNot*(*ROGUEM521)(RogueClassCmdLogicalNot*);
typedef RogueString*(*ROGUEM522)(RogueClassCmdBitwiseXor*);
typedef RogueClassCmd*(*ROGUEM523)(RogueClassCmdBitwiseXor*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM524)(RogueClassCmdBitwiseXor*,RogueClassType*);
typedef RogueClassCmdBitwiseXor*(*ROGUEM525)(RogueClassCmdBitwiseXor*);
typedef RogueClassCmd*(*ROGUEM526)(RogueClassCmdBitwiseOp*,RogueClassScope*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM527)(RogueClassCmdBitwiseOp*,RogueClassScope*,RogueClassType*,RogueClassType*);
typedef RogueString*(*ROGUEM528)(RogueClassCmdBitwiseOp*);
typedef RogueClassCmdBitwiseOp*(*ROGUEM529)(RogueClassCmdBitwiseOp*);
typedef RogueString*(*ROGUEM530)(RogueClassCmdBitwiseOr*);
typedef RogueClassCmd*(*ROGUEM531)(RogueClassCmdBitwiseOr*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM532)(RogueClassCmdBitwiseOr*,RogueClassType*);
typedef RogueClassCmdBitwiseOr*(*ROGUEM533)(RogueClassCmdBitwiseOr*);
typedef RogueString*(*ROGUEM534)(RogueClassCmdBitwiseAnd*);
typedef RogueClassCmd*(*ROGUEM535)(RogueClassCmdBitwiseAnd*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM536)(RogueClassCmdBitwiseAnd*,RogueClassType*);
typedef RogueClassCmdBitwiseAnd*(*ROGUEM537)(RogueClassCmdBitwiseAnd*);
typedef RogueString*(*ROGUEM538)(RogueClassCmdBitwiseShiftLeft*);
typedef RogueClassCmd*(*ROGUEM539)(RogueClassCmdBitwiseShiftLeft*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM540)(RogueClassCmdBitwiseShiftLeft*,RogueClassType*);
typedef RogueClassCmdBitwiseShiftLeft*(*ROGUEM541)(RogueClassCmdBitwiseShiftLeft*);
typedef RogueString*(*ROGUEM542)(RogueClassCmdBitwiseShiftRight*);
typedef RogueClassCmd*(*ROGUEM543)(RogueClassCmdBitwiseShiftRight*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM544)(RogueClassCmdBitwiseShiftRight*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM545)(RogueClassCmdBitwiseShiftRight*,RogueClassScope*);
typedef RogueClassCmdBitwiseShiftRight*(*ROGUEM546)(RogueClassCmdBitwiseShiftRight*);
typedef RogueString*(*ROGUEM547)(RogueClassCmdBitwiseShiftRightX*);
typedef RogueClassCmd*(*ROGUEM548)(RogueClassCmdBitwiseShiftRightX*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM549)(RogueClassCmdBitwiseShiftRightX*,RogueClassType*);
typedef RogueClassCmdBitwiseShiftRightX*(*ROGUEM550)(RogueClassCmdBitwiseShiftRightX*);
typedef RogueString*(*ROGUEM551)(RogueClassCmdSubtract*);
typedef RogueClassCmd*(*ROGUEM552)(RogueClassCmdSubtract*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM553)(RogueClassCmdSubtract*,RogueClassType*);
typedef RogueClassCmdSubtract*(*ROGUEM554)(RogueClassCmdSubtract*);
typedef RogueString*(*ROGUEM555)(RogueClassCmdMultiply*);
typedef RogueClassCmd*(*ROGUEM556)(RogueClassCmdMultiply*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM557)(RogueClassCmdMultiply*,RogueClassType*);
typedef RogueClassCmdMultiply*(*ROGUEM558)(RogueClassCmdMultiply*);
typedef RogueString*(*ROGUEM559)(RogueClassCmdDivide*);
typedef RogueClassCmd*(*ROGUEM560)(RogueClassCmdDivide*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM561)(RogueClassCmdDivide*,RogueClassType*);
typedef RogueClassCmdDivide*(*ROGUEM562)(RogueClassCmdDivide*);
typedef RogueString*(*ROGUEM563)(RogueClassCmdMod*);
typedef RogueClassCmd*(*ROGUEM564)(RogueClassCmdMod*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM565)(RogueClassCmdMod*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM566)(RogueClassCmdMod*,RogueClassScope*);
typedef RogueClassCmdMod*(*ROGUEM567)(RogueClassCmdMod*);
typedef RogueString*(*ROGUEM568)(RogueClassCmdPower*);
typedef RogueClassCmd*(*ROGUEM569)(RogueClassCmdPower*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM570)(RogueClassCmdPower*,RogueClassType*);
typedef void(*ROGUEM571)(RogueClassCmdPower*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdPower*(*ROGUEM572)(RogueClassCmdPower*);
typedef RogueString*(*ROGUEM573)(RogueClassCmdNegate*);
typedef RogueClassCmd*(*ROGUEM574)(RogueClassCmdNegate*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM575)(RogueClassCmdNegate*);
typedef RogueClassCmdNegate*(*ROGUEM576)(RogueClassCmdNegate*);
typedef RogueClassCmd*(*ROGUEM577)(RogueClassCmdNegate*,RogueClassScope*);
typedef RogueString*(*ROGUEM578)(RogueClassCmdBitwiseNot*);
typedef RogueClassCmd*(*ROGUEM579)(RogueClassCmdBitwiseNot*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM580)(RogueClassCmdBitwiseNot*);
typedef RogueClassCmdBitwiseNot*(*ROGUEM581)(RogueClassCmdBitwiseNot*);
typedef RogueClassCmd*(*ROGUEM582)(RogueClassCmdBitwiseNot*,RogueClassScope*);
typedef RogueString*(*ROGUEM583)(RogueClassCmdGetOptionalValue*);
typedef RogueClassCmd*(*ROGUEM584)(RogueClassCmdGetOptionalValue*,RogueClassCloneArgs*);
typedef RogueClassCmdGetOptionalValue*(*ROGUEM585)(RogueClassCmdGetOptionalValue*,RogueClassScope*);
typedef void(*ROGUEM586)(RogueClassCmdGetOptionalValue*);
typedef RogueClassType*(*ROGUEM587)(RogueClassCmdGetOptionalValue*);
typedef void(*ROGUEM588)(RogueClassCmdGetOptionalValue*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdGetOptionalValue*(*ROGUEM589)(RogueClassCmdGetOptionalValue*);
typedef RogueString*(*ROGUEM590)(RogueClassCmdElementAccess*);
typedef RogueClassCmd*(*ROGUEM591)(RogueClassCmdElementAccess*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM592)(RogueClassCmdElementAccess*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM593)(RogueClassCmdElementAccess*,RogueClassScope*,RogueClassCmd*);
typedef RogueClassCmd*(*ROGUEM594)(RogueClassCmdElementAccess*,RogueClassScope*,RogueInteger);
typedef RogueClassCmdElementAccess*(*ROGUEM595)(RogueClassCmdElementAccess*);
typedef RogueString*(*ROGUEM596)(RogueClassCmdConvertToType*);
typedef RogueClassCmd*(*ROGUEM597)(RogueClassCmdConvertToType*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM598)(RogueClassCmdConvertToType*,RogueClassScope*);
typedef RogueClassCmdConvertToType*(*ROGUEM599)(RogueClassCmdConvertToType*);
typedef RogueString*(*ROGUEM600)(RogueClassCmdCreateCallback*);
typedef RogueClassCmdCreateCallback*(*ROGUEM601)(RogueClassCmdCreateCallback*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM602)(RogueClassCmdCreateCallback*,RogueClassScope*);
typedef RogueClassCmdCreateCallback*(*ROGUEM603)(RogueClassCmdCreateCallback*);
typedef RogueString*(*ROGUEM604)(RogueClassCmdAs*);
typedef RogueClassCmd*(*ROGUEM605)(RogueClassCmdAs*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM606)(RogueClassCmdAs*,RogueClassScope*);
typedef void(*ROGUEM607)(RogueClassCmdAs*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdAs*(*ROGUEM608)(RogueClassCmdAs*);
typedef RogueString*(*ROGUEM609)(RogueClassCmdDefaultValue*);
typedef RogueClassCmd*(*ROGUEM610)(RogueClassCmdDefaultValue*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM611)(RogueClassCmdDefaultValue*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM612)(RogueClassCmdDefaultValue*);
typedef RogueClassCmdDefaultValue*(*ROGUEM613)(RogueClassCmdDefaultValue*);
typedef RogueString*(*ROGUEM614)(RogueClassCmdFormattedString*);
typedef RogueClassCmd*(*ROGUEM615)(RogueClassCmdFormattedString*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM616)(RogueClassCmdFormattedString*);
typedef RogueClassCmd*(*ROGUEM617)(RogueClassCmdFormattedString*,RogueClassScope*);
typedef RogueClassCmdFormattedString*(*ROGUEM618)(RogueClassCmdFormattedString*);
typedef RogueString*(*ROGUEM619)(RogueClassCmdLiteralReal*);
typedef RogueClassCmd*(*ROGUEM620)(RogueClassCmdLiteralReal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM621)(RogueClassCmdLiteralReal*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM622)(RogueClassCmdLiteralReal*);
typedef void(*ROGUEM623)(RogueClassCmdLiteralReal*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralReal*(*ROGUEM624)(RogueClassCmdLiteralReal*);
typedef RogueString*(*ROGUEM625)(RogueClassCmdLiteralLong*);
typedef RogueClassCmd*(*ROGUEM626)(RogueClassCmdLiteralLong*,RogueClassType*);
typedef RogueClassCmd*(*ROGUEM627)(RogueClassCmdLiteralLong*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM628)(RogueClassCmdLiteralLong*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM629)(RogueClassCmdLiteralLong*);
typedef void(*ROGUEM630)(RogueClassCmdLiteralLong*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralLong*(*ROGUEM631)(RogueClassCmdLiteralLong*);
typedef RogueString*(*ROGUEM632)(RogueClassCmdLiteralCharacter*);
typedef RogueClassCmd*(*ROGUEM633)(RogueClassCmdLiteralCharacter*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM634)(RogueClassCmdLiteralCharacter*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM635)(RogueClassCmdLiteralCharacter*);
typedef void(*ROGUEM636)(RogueClassCmdLiteralCharacter*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLiteralCharacter*(*ROGUEM637)(RogueClassCmdLiteralCharacter*);
typedef RogueString*(*ROGUEM638)(RogueClassCmdCreateList*);
typedef RogueClassCmd*(*ROGUEM639)(RogueClassCmdCreateList*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM640)(RogueClassCmdCreateList*,RogueClassScope*);
typedef RogueClassCmdCreateList*(*ROGUEM641)(RogueClassCmdCreateList*);
typedef RogueString*(*ROGUEM642)(RogueClassCmdCallPriorMethod*);
typedef RogueClassCmd*(*ROGUEM643)(RogueClassCmdCallPriorMethod*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM644)(RogueClassCmdCallPriorMethod*,RogueClassScope*);
typedef RogueClassCmdCallPriorMethod*(*ROGUEM645)(RogueClassCmdCallPriorMethod*);
typedef RogueString*(*ROGUEM646)(RogueFnParamList*);
typedef RogueFnParamList*(*ROGUEM647)(RogueFnParamList*);
typedef RogueString*(*ROGUEM648)(RogueClassFnParam*);
typedef RogueString*(*ROGUEM649)(RogueFnArgList*);
typedef RogueFnArgList*(*ROGUEM650)(RogueFnArgList*);
typedef RogueString*(*ROGUEM651)(RogueClassFnArg*);
typedef RogueString*(*ROGUEM652)(RogueClassCmdCreateFunction*);
typedef RogueClassCmdCreateFunction*(*ROGUEM653)(RogueClassCmdCreateFunction*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM654)(RogueClassCmdCreateFunction*,RogueClassScope*);
typedef RogueClassCmdCreateFunction*(*ROGUEM655)(RogueClassCmdCreateFunction*);
typedef RogueString*(*ROGUEM656)(RogueClassCmdNativeCode*);
typedef RogueClassCmdNativeCode*(*ROGUEM657)(RogueClassCmdNativeCode*,RogueClassCloneArgs*);
typedef RogueLogical(*ROGUEM658)(RogueClassCmdNativeCode*);
typedef RogueClassCmd*(*ROGUEM659)(RogueClassCmdNativeCode*,RogueClassScope*);
typedef void(*ROGUEM660)(RogueClassCmdNativeCode*);
typedef RogueClassType*(*ROGUEM661)(RogueClassCmdNativeCode*);
typedef void(*ROGUEM662)(RogueClassCmdNativeCode*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdNativeCode*(*ROGUEM663)(RogueClassCmdNativeCode*);
typedef RogueString*(*ROGUEM664)(RogueTableEntry_of_String_TokenTypeList*);
typedef RogueTableEntry_of_String_TokenTypeList*(*ROGUEM665)(RogueTableEntry_of_String_TokenTypeList*);
typedef RogueString*(*ROGUEM666)(RogueClassString_TokenTypeTableEntry*);
typedef RogueString*(*ROGUEM667)(RogueTableEntry_of_String_TypeSpecializerList*);
typedef RogueTableEntry_of_String_TypeSpecializerList*(*ROGUEM668)(RogueTableEntry_of_String_TypeSpecializerList*);
typedef RogueString*(*ROGUEM669)(RogueClassString_TypeSpecializerTableEntry*);
typedef RogueString*(*ROGUEM670)(RogueTableEntry_of_String_CmdLabelList*);
typedef RogueTableEntry_of_String_CmdLabelList*(*ROGUEM671)(RogueTableEntry_of_String_CmdLabelList*);
typedef RogueString*(*ROGUEM672)(RogueClassString_CmdLabelTableEntry*);
typedef RogueString*(*ROGUEM673)(RogueClassMacroArgs*);
typedef RogueClassMacroArgs*(*ROGUEM674)(RogueClassMacroArgs*);
typedef RogueString*(*ROGUEM675)(RogueClassCmdReadSingleton*);
typedef RogueClassCmd*(*ROGUEM676)(RogueClassCmdReadSingleton*,RogueClassCloneArgs*);
typedef void(*ROGUEM677)(RogueClassCmdReadSingleton*);
typedef RogueClassCmd*(*ROGUEM678)(RogueClassCmdReadSingleton*,RogueClassScope*);
typedef RogueClassType*(*ROGUEM679)(RogueClassCmdReadSingleton*);
typedef void(*ROGUEM680)(RogueClassCmdReadSingleton*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdReadSingleton*(*ROGUEM681)(RogueClassCmdReadSingleton*);
typedef RogueString*(*ROGUEM682)(RogueClassCmdCreateArray*);
typedef RogueClassCmd*(*ROGUEM683)(RogueClassCmdCreateArray*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM684)(RogueClassCmdCreateArray*,RogueClassScope*);
typedef void(*ROGUEM685)(RogueClassCmdCreateArray*);
typedef RogueClassType*(*ROGUEM686)(RogueClassCmdCreateArray*);
typedef void(*ROGUEM687)(RogueClassCmdCreateArray*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCreateArray*(*ROGUEM688)(RogueClassCmdCreateArray*);
typedef RogueString*(*ROGUEM689)(RogueClassCmdCallRoutine*);
typedef RogueClassCmd*(*ROGUEM690)(RogueClassCmdCallRoutine*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM691)(RogueClassCmdCall*,RogueClassScope*);
typedef void(*ROGUEM692)(RogueClassCmdCall*);
typedef RogueClassType*(*ROGUEM693)(RogueClassCmdCall*);
typedef void(*ROGUEM694)(RogueClassCmdCallRoutine*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallRoutine*(*ROGUEM695)(RogueClassCmdCallRoutine*);
typedef RogueString*(*ROGUEM696)(RogueClassCmdCall*);
typedef RogueClassCmdCall*(*ROGUEM697)(RogueClassCmdCall*);
typedef RogueString*(*ROGUEM698)(RogueClassCmdCreateObject*);
typedef RogueClassCmd*(*ROGUEM699)(RogueClassCmdCreateObject*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM700)(RogueClassCmdCreateObject*,RogueClassScope*);
typedef void(*ROGUEM701)(RogueClassCmdCreateObject*);
typedef RogueClassType*(*ROGUEM702)(RogueClassCmdCreateObject*);
typedef void(*ROGUEM703)(RogueClassCmdCreateObject*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCreateObject*(*ROGUEM704)(RogueClassCmdCreateObject*);
typedef RogueString*(*ROGUEM705)(RogueClassCmdReadGlobal*);
typedef RogueClassCmd*(*ROGUEM706)(RogueClassCmdReadGlobal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM707)(RogueClassCmdReadGlobal*,RogueClassScope*);
typedef void(*ROGUEM708)(RogueClassCmdReadGlobal*);
typedef RogueClassType*(*ROGUEM709)(RogueClassCmdReadGlobal*);
typedef void(*ROGUEM710)(RogueClassCmdReadGlobal*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdReadGlobal*(*ROGUEM711)(RogueClassCmdReadGlobal*);
typedef RogueString*(*ROGUEM712)(RogueClassCmdReadProperty*);
typedef RogueClassCmd*(*ROGUEM713)(RogueClassCmdReadProperty*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM714)(RogueClassCmdReadProperty*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM715)(RogueClassCmdReadProperty*,RogueClassScope*,RogueInteger);
typedef void(*ROGUEM716)(RogueClassCmdReadProperty*);
typedef RogueClassType*(*ROGUEM717)(RogueClassCmdReadProperty*);
typedef void(*ROGUEM718)(RogueClassCmdReadProperty*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdReadProperty*(*ROGUEM719)(RogueClassCmdReadProperty*);
typedef RogueString*(*ROGUEM720)(RogueClassCmdLogicalizeOptionalValue*);
typedef RogueClassCmd*(*ROGUEM721)(RogueClassCmdLogicalizeOptionalValue*,RogueClassCloneArgs*);
typedef RogueClassCmdLogicalizeOptionalValue*(*ROGUEM722)(RogueClassCmdLogicalizeOptionalValue*,RogueClassScope*);
typedef void(*ROGUEM723)(RogueClassCmdLogicalizeOptionalValue*);
typedef RogueClassType*(*ROGUEM724)(RogueClassCmdLogicalizeOptionalValue*);
typedef void(*ROGUEM725)(RogueClassCmdLogicalizeOptionalValue*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdLogicalizeOptionalValue*(*ROGUEM726)(RogueClassCmdLogicalizeOptionalValue*);
typedef RogueString*(*ROGUEM727)(RogueClassCmdWriteLocal*);
typedef RogueClassCmd*(*ROGUEM728)(RogueClassCmdWriteLocal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM729)(RogueClassCmdWriteLocal*,RogueClassScope*);
typedef void(*ROGUEM730)(RogueClassCmdWriteLocal*);
typedef RogueClassType*(*ROGUEM731)(RogueClassCmdWriteLocal*);
typedef void(*ROGUEM732)(RogueClassCmdWriteLocal*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdWriteLocal*(*ROGUEM733)(RogueClassCmdWriteLocal*);
typedef RogueString*(*ROGUEM734)(RogueClassCmdOpAssignGlobal*);
typedef RogueClassCmd*(*ROGUEM735)(RogueClassCmdOpAssignGlobal*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM736)(RogueClassCmdOpAssignGlobal*,RogueClassScope*);
typedef void(*ROGUEM737)(RogueClassCmdOpAssignGlobal*);
typedef RogueClassType*(*ROGUEM738)(RogueClassCmdOpAssignGlobal*);
typedef void(*ROGUEM739)(RogueClassCmdOpAssignGlobal*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdOpAssignGlobal*(*ROGUEM740)(RogueClassCmdOpAssignGlobal*);
typedef RogueString*(*ROGUEM741)(RogueClassCmdOpAssignProperty*);
typedef RogueClassCmd*(*ROGUEM742)(RogueClassCmdOpAssignProperty*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM743)(RogueClassCmdOpAssignProperty*,RogueClassScope*);
typedef void(*ROGUEM744)(RogueClassCmdOpAssignProperty*);
typedef RogueClassType*(*ROGUEM745)(RogueClassCmdOpAssignProperty*);
typedef void(*ROGUEM746)(RogueClassCmdOpAssignProperty*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdOpAssignProperty*(*ROGUEM747)(RogueClassCmdOpAssignProperty*);
typedef RogueString*(*ROGUEM748)(RogueClassCmdCallInlineNative*);
typedef RogueString*(*ROGUEM749)(RogueClassCmdCallInlineNativeRoutine*);
typedef RogueClassCmd*(*ROGUEM750)(RogueClassCmdCallInlineNativeRoutine*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM751)(RogueClassCmdCallInlineNativeRoutine*);
typedef void(*ROGUEM752)(RogueClassCmdCallInlineNative*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallInlineNativeRoutine*(*ROGUEM753)(RogueClassCmdCallInlineNativeRoutine*);
typedef void(*ROGUEM754)(RogueClassCmdCallInlineNative*,RogueClassCPPWriter*);
typedef RogueClassCmdCallInlineNative*(*ROGUEM755)(RogueClassCmdCallInlineNative*);
typedef RogueString*(*ROGUEM756)(RogueClassCmdCallNativeRoutine*);
typedef RogueClassCmd*(*ROGUEM757)(RogueClassCmdCallNativeRoutine*,RogueClassCloneArgs*);
typedef void(*ROGUEM758)(RogueClassCmdCallNativeRoutine*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallNativeRoutine*(*ROGUEM759)(RogueClassCmdCallNativeRoutine*);
typedef RogueString*(*ROGUEM760)(RogueClassCmdReadArrayCount*);
typedef RogueClassCmd*(*ROGUEM761)(RogueClassCmdReadArrayCount*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM762)(RogueClassCmdReadArrayCount*,RogueClassScope*);
typedef void(*ROGUEM763)(RogueClassCmdReadArrayCount*);
typedef RogueClassType*(*ROGUEM764)(RogueClassCmdReadArrayCount*);
typedef void(*ROGUEM765)(RogueClassCmdReadArrayCount*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdReadArrayCount*(*ROGUEM766)(RogueClassCmdReadArrayCount*);
typedef RogueString*(*ROGUEM767)(RogueClassCmdCallInlineNativeMethod*);
typedef RogueClassCmd*(*ROGUEM768)(RogueClassCmdCallInlineNativeMethod*,RogueClassCloneArgs*);
typedef RogueClassType*(*ROGUEM769)(RogueClassCmdCallInlineNativeMethod*);
typedef RogueClassCmdCallInlineNativeMethod*(*ROGUEM770)(RogueClassCmdCallInlineNativeMethod*);
typedef void(*ROGUEM771)(RogueClassCmdCallInlineNativeMethod*,RogueClassCPPWriter*);
typedef RogueString*(*ROGUEM772)(RogueClassCmdCallNativeMethod*);
typedef RogueClassCmd*(*ROGUEM773)(RogueClassCmdCallNativeMethod*,RogueClassCloneArgs*);
typedef void(*ROGUEM774)(RogueClassCmdCallNativeMethod*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallNativeMethod*(*ROGUEM775)(RogueClassCmdCallNativeMethod*);
typedef RogueString*(*ROGUEM776)(RogueClassCmdCallAspectMethod*);
typedef RogueClassCmd*(*ROGUEM777)(RogueClassCmdCallAspectMethod*,RogueClassCloneArgs*);
typedef void(*ROGUEM778)(RogueClassCmdCallAspectMethod*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallAspectMethod*(*ROGUEM779)(RogueClassCmdCallAspectMethod*);
typedef RogueString*(*ROGUEM780)(RogueClassCmdCallDynamicMethod*);
typedef RogueClassCmd*(*ROGUEM781)(RogueClassCmdCallMethod*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM782)(RogueClassCmdCallDynamicMethod*,RogueClassCloneArgs*);
typedef void(*ROGUEM783)(RogueClassCmdCallDynamicMethod*);
typedef void(*ROGUEM784)(RogueClassCmdCallDynamicMethod*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallDynamicMethod*(*ROGUEM785)(RogueClassCmdCallDynamicMethod*);
typedef RogueString*(*ROGUEM786)(RogueClassCmdCallMethod*);
typedef RogueClassCmdCallMethod*(*ROGUEM787)(RogueClassCmdCallMethod*);
typedef RogueString*(*ROGUEM788)(RogueClassCandidateMethods*);
typedef RogueString*(*ROGUEM789)(RogueCmdTaskControlSectionList*);
typedef RogueCmdTaskControlSectionList*(*ROGUEM790)(RogueCmdTaskControlSectionList*);
typedef RogueString*(*ROGUEM791)(RogueClassCmdBlock*);
typedef RogueClassCmd*(*ROGUEM792)(RogueClassCmdBlock*,RogueClassCloneArgs*);
typedef RogueLogical(*ROGUEM793)(RogueClassCmdBlock*);
typedef RogueClassCmdBlock*(*ROGUEM794)(RogueClassCmdBlock*,RogueClassScope*);
typedef void(*ROGUEM795)(RogueClassCmdBlock*);
typedef void(*ROGUEM796)(RogueClassCmdBlock*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdBlock*(*ROGUEM797)(RogueClassCmdBlock*);
typedef RogueString*(*ROGUEM798)(RogueTableEntry_of_String_CmdList*);
typedef RogueTableEntry_of_String_CmdList*(*ROGUEM799)(RogueTableEntry_of_String_CmdList*);
typedef RogueString*(*ROGUEM800)(RogueClassString_CmdTableEntry*);
typedef RogueString*(*ROGUEM801)(RogueTableEntry_of_String_PropertyList*);
typedef RogueTableEntry_of_String_PropertyList*(*ROGUEM802)(RogueTableEntry_of_String_PropertyList*);
typedef RogueString*(*ROGUEM803)(RogueClassString_PropertyTableEntry*);
typedef RogueString*(*ROGUEM804)(RogueClassDirectiveTokenType*);
typedef RogueClassToken*(*ROGUEM805)(RogueClassDirectiveTokenType*,RogueString*,RogueInteger,RogueInteger);
typedef RogueLogical(*ROGUEM806)(RogueClassDirectiveTokenType*);
typedef RogueClassDirectiveTokenType*(*ROGUEM807)(RogueClassDirectiveTokenType*);
typedef RogueString*(*ROGUEM808)(RogueClassStructuralDirectiveTokenType*);
typedef RogueClassToken*(*ROGUEM809)(RogueClassStructuralDirectiveTokenType*,RogueString*,RogueInteger,RogueInteger);
typedef RogueLogical(*ROGUEM810)(RogueClassStructuralDirectiveTokenType*);
typedef RogueClassStructuralDirectiveTokenType*(*ROGUEM811)(RogueClassStructuralDirectiveTokenType*);
typedef RogueString*(*ROGUEM812)(RogueClassEOLTokenType*);
typedef RogueClassToken*(*ROGUEM813)(RogueClassEOLTokenType*,RogueString*,RogueInteger,RogueInteger);
typedef RogueClassToken*(*ROGUEM814)(RogueClassEOLTokenType*,RogueString*,RogueInteger,RogueInteger,RogueString*);
typedef RogueLogical(*ROGUEM815)(RogueClassEOLTokenType*);
typedef RogueClassEOLTokenType*(*ROGUEM816)(RogueClassEOLTokenType*);
typedef RogueString*(*ROGUEM817)(RogueClassStructureTokenType*);
typedef RogueClassToken*(*ROGUEM818)(RogueClassStructureTokenType*,RogueString*,RogueInteger,RogueInteger);
typedef RogueLogical(*ROGUEM819)(RogueClassStructureTokenType*);
typedef RogueClassStructureTokenType*(*ROGUEM820)(RogueClassStructureTokenType*);
typedef RogueString*(*ROGUEM821)(RogueClassOpWithAssignTokenType*);
typedef RogueLogical(*ROGUEM822)(RogueClassOpWithAssignTokenType*);
typedef RogueClassOpWithAssignTokenType*(*ROGUEM823)(RogueClassOpWithAssignTokenType*);
typedef RogueString*(*ROGUEM824)(RogueClassEOLToken*);
typedef RogueClassEOLToken*(*ROGUEM825)(RogueClassEOLToken*);
typedef RogueString*(*ROGUEM826)(RogueClassString_TokenListTable*);
typedef RogueString*(*ROGUEM827)(RogueClassPreprocessorTokenReader*);
typedef RogueString*(*ROGUEM828)(RogueClassCmdSwitch*);
typedef RogueClassCmdSwitch*(*ROGUEM829)(RogueClassCmdSwitch*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM830)(RogueClassCmdSwitch*,RogueClassScope*);
typedef void(*ROGUEM831)(RogueClassCmdSwitch*);
typedef void(*ROGUEM832)(RogueClassCmdSwitch*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdSwitch*(*ROGUEM833)(RogueClassCmdSwitch*);
typedef RogueString*(*ROGUEM834)(RogueClassCmdReadArrayElement*);
typedef RogueClassCmd*(*ROGUEM835)(RogueClassCmdReadArrayElement*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM836)(RogueClassCmdReadArrayElement*,RogueClassScope*);
typedef RogueClassCmd*(*ROGUEM837)(RogueClassCmdReadArrayElement*,RogueClassScope*,RogueInteger);
typedef void(*ROGUEM838)(RogueClassCmdReadArrayElement*);
typedef RogueClassType*(*ROGUEM839)(RogueClassCmdReadArrayElement*);
typedef void(*ROGUEM840)(RogueClassCmdReadArrayElement*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdReadArrayElement*(*ROGUEM841)(RogueClassCmdReadArrayElement*);
typedef RogueString*(*ROGUEM842)(RogueClassCmdWriteArrayElement*);
typedef RogueClassCmd*(*ROGUEM843)(RogueClassCmdWriteArrayElement*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM844)(RogueClassCmdWriteArrayElement*,RogueClassScope*);
typedef void(*ROGUEM845)(RogueClassCmdWriteArrayElement*);
typedef RogueClassType*(*ROGUEM846)(RogueClassCmdWriteArrayElement*);
typedef void(*ROGUEM847)(RogueClassCmdWriteArrayElement*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdWriteArrayElement*(*ROGUEM848)(RogueClassCmdWriteArrayElement*);
typedef RogueString*(*ROGUEM849)(RogueClassCmdConvertToPrimitiveType*);
typedef RogueClassCmd*(*ROGUEM850)(RogueClassCmdConvertToPrimitiveType*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM851)(RogueClassCmdConvertToPrimitiveType*,RogueClassScope*);
typedef void(*ROGUEM852)(RogueClassCmdConvertToPrimitiveType*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdConvertToPrimitiveType*(*ROGUEM853)(RogueClassCmdConvertToPrimitiveType*);
typedef RogueString*(*ROGUEM854)(RogueClassCmdAdjustProperty*);
typedef RogueClassCmd*(*ROGUEM855)(RogueClassCmdAdjustProperty*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM856)(RogueClassCmdAdjustProperty*,RogueClassScope*);
typedef void(*ROGUEM857)(RogueClassCmdAdjustProperty*);
typedef RogueClassType*(*ROGUEM858)(RogueClassCmdAdjustProperty*);
typedef void(*ROGUEM859)(RogueClassCmdAdjustProperty*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdAdjustProperty*(*ROGUEM860)(RogueClassCmdAdjustProperty*);
typedef RogueString*(*ROGUEM861)(RogueClassCmdCallStaticMethod*);
typedef RogueClassCmd*(*ROGUEM862)(RogueClassCmdCallStaticMethod*,RogueClassCloneArgs*);
typedef RogueClassCmd*(*ROGUEM863)(RogueClassCmdCallStaticMethod*,RogueClassScope*);
typedef void(*ROGUEM864)(RogueClassCmdCallStaticMethod*,RogueClassCPPWriter*,RogueLogical);
typedef RogueClassCmdCallStaticMethod*(*ROGUEM865)(RogueClassCmdCallStaticMethod*);
typedef RogueString*(*ROGUEM866)(RogueTableEntry_of_String_TokenListList*);
typedef RogueTableEntry_of_String_TokenListList*(*ROGUEM867)(RogueTableEntry_of_String_TokenListList*);
typedef RogueString*(*ROGUEM868)(RogueClassString_TokenListTableEntry*);

RogueString* call_ROGUEM2( int i, RogueObject* THIS )
{
  return ((ROGUEM2)(THIS->type->methods[i]))( THIS );
}

RogueString* call_ROGUEM33( int i, RogueClassToken* THIS )
{
  return ((ROGUEM33)(THIS->type->methods[i]))( THIS );
}

RogueCharacter call_ROGUEM34( int i, RogueClassToken* THIS )
{
  return ((ROGUEM34)(THIS->type->methods[i]))( THIS );
}

RogueInteger call_ROGUEM35( int i, RogueClassToken* THIS )
{
  return ((ROGUEM35)(THIS->type->methods[i]))( THIS );
}

RogueLong call_ROGUEM36( int i, RogueClassToken* THIS )
{
  return ((ROGUEM36)(THIS->type->methods[i]))( THIS );
}

RogueReal call_ROGUEM37( int i, RogueClassToken* THIS )
{
  return ((ROGUEM37)(THIS->type->methods[i]))( THIS );
}

RogueClassType* call_ROGUEM38( int i, RogueClassToken* THIS )
{
  return ((ROGUEM38)(THIS->type->methods[i]))( THIS );
}

RogueString* call_ROGUEM41( int i, RogueClassCmd* THIS )
{
  return ((ROGUEM41)(THIS->type->methods[i]))( THIS );
}

RogueClassCmd* call_ROGUEM42( int i, RogueClassCmd* THIS, RogueClassScope* p0 )
{
  return ((ROGUEM42)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassCmd* call_ROGUEM43( int i, RogueClassCmd* THIS, RogueClassType* p0 )
{
  return ((ROGUEM43)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassCmd* call_ROGUEM44( int i, RogueClassCmd* THIS, RogueClassCloneArgs* p0 )
{
  return ((ROGUEM44)(THIS->type->methods[i]))( THIS, p0 );
}

void call_ROGUEM45( int i, RogueClassCmd* THIS, RogueClassScope* p0 )
{
  ((ROGUEM45)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassType* call_ROGUEM46( int i, RogueClassCmd* THIS )
{
  return ((ROGUEM46)(THIS->type->methods[i]))( THIS );
}

RogueLogical call_ROGUEM47( int i, RogueClassCmd* THIS )
{
  return ((ROGUEM47)(THIS->type->methods[i]))( THIS );
}

void call_ROGUEM48( int i, RogueClassCmd* THIS )
{
  ((ROGUEM48)(THIS->type->methods[i]))( THIS );
}

RogueClassCmd* call_ROGUEM49( int i, RogueClassCmd* THIS, RogueClassScope* p0, RogueClassCmd* p1 )
{
  return ((ROGUEM49)(THIS->type->methods[i]))( THIS, p0, p1 );
}

RogueClassCmd* call_ROGUEM50( int i, RogueClassCmd* THIS, RogueClassScope* p0, RogueInteger p1 )
{
  return ((ROGUEM50)(THIS->type->methods[i]))( THIS, p0, p1 );
}

RogueClassCmd* call_ROGUEM51( int i, RogueClassCmd* THIS, RogueClassScope* p0, RogueClassTokenType* p1, RogueClassCmd* p2 )
{
  return ((ROGUEM51)(THIS->type->methods[i]))( THIS, p0, p1, p2 );
}

void call_ROGUEM52( int i, RogueClassCmd* THIS, RogueClassCPPWriter* p0, RogueLogical p1 )
{
  ((ROGUEM52)(THIS->type->methods[i]))( THIS, p0, p1 );
}

RogueCmdList* call_ROGUEM69( int i, RogueCmdList* THIS, RogueInteger p0 )
{
  return ((ROGUEM69)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassToken* call_ROGUEM71( int i, RogueClassTokenType* THIS, RogueString* p0, RogueInteger p1, RogueInteger p2 )
{
  return ((ROGUEM71)(THIS->type->methods[i]))( THIS, p0, p1, p2 );
}

RogueClassToken* call_ROGUEM72( int i, RogueClassTokenType* THIS, RogueString* p0, RogueInteger p1, RogueInteger p2, RogueString* p3 )
{
  return ((ROGUEM72)(THIS->type->methods[i]))( THIS, p0, p1, p2, p3 );
}

RogueLogical call_ROGUEM73( int i, RogueClassTokenType* THIS )
{
  return ((ROGUEM73)(THIS->type->methods[i]))( THIS );
}

RogueClassCmdLabel* call_ROGUEM144( int i, RogueClassCloneArgs* THIS, RogueClassCmdLabel* p0 )
{
  return ((ROGUEM144)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassCmd* call_ROGUEM170( int i, RogueClassCmdControlStructure* THIS, RogueClassCmdControlStructure* p0 )
{
  return ((ROGUEM170)(THIS->type->methods[i]))( THIS, p0 );
}

RogueClassCmd* call_ROGUEM204( int i, RogueClassCmdBinary* THIS, RogueClassScope* p0 )
{
  return ((ROGUEM204)(THIS->type->methods[i]))( THIS, p0 );
}

RogueString* call_ROGUEM209( int i, RogueClassCmdBinary* THIS )
{
  return ((ROGUEM209)(THIS->type->methods[i]))( THIS );
}

RogueClassCmd* call_ROGUEM212( int i, RogueClassCmdBinary* THIS, RogueClassScope* p0, RogueClassType* p1 )
{
  return ((ROGUEM212)(THIS->type->methods[i]))( THIS, p0, p1 );
}

RogueClassCmd* call_ROGUEM213( int i, RogueClassCmdBinary* THIS, RogueClassScope* p0, RogueClassType* p1, RogueClassType* p2 )
{
  return ((ROGUEM213)(THIS->type->methods[i]))( THIS, p0, p1, p2 );
}

RogueClassCmd* call_ROGUEM217( int i, RogueClassCmdComparison* THIS, RogueClassScope* p0, RogueClassType* p1, RogueClassType* p2, RogueLogical p3 )
{
  return ((ROGUEM217)(THIS->type->methods[i]))( THIS, p0, p1, p2, p3 );
}

RogueLogical call_ROGUEM220( int i, RogueClassCmdBinary* THIS )
{
  return ((ROGUEM220)(THIS->type->methods[i]))( THIS );
}

RogueString* call_ROGUEM298( int i, RogueClassCmdUnary* THIS )
{
  return ((ROGUEM298)(THIS->type->methods[i]))( THIS );
}

RogueClassCmd* call_ROGUEM299( int i, RogueClassCmdUnary* THIS, RogueClassScope* p0 )
{
  return ((ROGUEM299)(THIS->type->methods[i]))( THIS, p0 );
}

RogueString* call_ROGUEM471( int i, RogueClassCmdBinaryLogical* THIS )
{
  return ((ROGUEM471)(THIS->type->methods[i]))( THIS );
}

RogueLogical call_ROGUEM473( int i, RogueClassCmdBinaryLogical* THIS, RogueLogical p0, RogueLogical p1 )
{
  return ((ROGUEM473)(THIS->type->methods[i]))( THIS, p0, p1 );
}

void call_ROGUEM754( int i, RogueClassCmdCallInlineNative* THIS, RogueClassCPPWriter* p0 )
{
  ((ROGUEM754)(THIS->type->methods[i]))( THIS, p0 );
}


// GLOBALS
RogueByteList* RogueStringBuilder_work_bytes = 0;
RogueClassString_TokenTypeTable* RogueTokenType_lookup = 0;
RogueClassTokenType* RogueTokenType_directive_define = 0;
RogueClassTokenType* RogueTokenType_directive_include = 0;
RogueClassTokenType* RogueTokenType_directive_includeNativeCode = 0;
RogueClassTokenType* RogueTokenType_directive_includeNativeHeader = 0;
RogueClassTokenType* RogueTokenType_directive_if = 0;
RogueClassTokenType* RogueTokenType_directive_elseIf = 0;
RogueClassTokenType* RogueTokenType_directive_else = 0;
RogueClassTokenType* RogueTokenType_directive_endIf = 0;
RogueClassTokenType* RogueTokenType_directive_requisite = 0;
RogueClassTokenType* RogueTokenType_placeholder_id = 0;
RogueClassTokenType* RogueTokenType_begin_augment_tokens = 0;
RogueClassTokenType* RogueTokenType_keyword_augment = 0;
RogueClassTokenType* RogueTokenType_keyword_case = 0;
RogueClassTokenType* RogueTokenType_keyword_catch = 0;
RogueClassTokenType* RogueTokenType_keyword_class = 0;
RogueClassTokenType* RogueTokenType_keyword_DEFINITIONS = 0;
RogueClassTokenType* RogueTokenType_keyword_else = 0;
RogueClassTokenType* RogueTokenType_keyword_elseIf = 0;
RogueClassTokenType* RogueTokenType_keyword_endAugment = 0;
RogueClassTokenType* RogueTokenType_keyword_endClass = 0;
RogueClassTokenType* RogueTokenType_keyword_endContingent = 0;
RogueClassTokenType* RogueTokenType_keyword_endForEach = 0;
RogueClassTokenType* RogueTokenType_keyword_endFunction = 0;
RogueClassTokenType* RogueTokenType_keyword_endIf = 0;
RogueClassTokenType* RogueTokenType_keyword_endLoop = 0;
RogueClassTokenType* RogueTokenType_keyword_endTry = 0;
RogueClassTokenType* RogueTokenType_keyword_endWhich = 0;
RogueClassTokenType* RogueTokenType_keyword_endWhile = 0;
RogueClassTokenType* RogueTokenType_keyword_ENUMERATE = 0;
RogueClassTokenType* RogueTokenType_keyword_GLOBALS = 0;
RogueClassTokenType* RogueTokenType_keyword_macro = 0;
RogueClassTokenType* RogueTokenType_keyword_method = 0;
RogueClassTokenType* RogueTokenType_keyword_METHODS = 0;
RogueClassTokenType* RogueTokenType_keyword_nativeCode = 0;
RogueClassTokenType* RogueTokenType_keyword_nativeHeader = 0;
RogueClassTokenType* RogueTokenType_keyword_others = 0;
RogueClassTokenType* RogueTokenType_keyword_PROPERTIES = 0;
RogueClassTokenType* RogueTokenType_keyword_routine = 0;
RogueClassTokenType* RogueTokenType_keyword_ROUTINES = 0;
RogueClassTokenType* RogueTokenType_keyword_satisfied = 0;
RogueClassTokenType* RogueTokenType_keyword_unsatisfied = 0;
RogueClassTokenType* RogueTokenType_keyword_with = 0;
RogueClassTokenType* RogueTokenType_symbol_close_brace = 0;
RogueClassTokenType* RogueTokenType_symbol_close_bracket = 0;
RogueClassTokenType* RogueTokenType_symbol_close_comment = 0;
RogueClassTokenType* RogueTokenType_symbol_close_paren = 0;
RogueClassTokenType* RogueTokenType_symbol_close_specialize = 0;
RogueClassTokenType* RogueTokenType_eol = 0;
RogueClassTokenType* RogueTokenType_keyword_await = 0;
RogueClassTokenType* RogueTokenType_keyword_contingent = 0;
RogueClassTokenType* RogueTokenType_keyword_escapeContingent = 0;
RogueClassTokenType* RogueTokenType_keyword_escapeForEach = 0;
RogueClassTokenType* RogueTokenType_keyword_escapeIf = 0;
RogueClassTokenType* RogueTokenType_keyword_escapeLoop = 0;
RogueClassTokenType* RogueTokenType_keyword_escapeTry = 0;
RogueClassTokenType* RogueTokenType_keyword_escapeWhich = 0;
RogueClassTokenType* RogueTokenType_keyword_escapeWhile = 0;
RogueClassTokenType* RogueTokenType_keyword_forEach = 0;
RogueClassTokenType* RogueTokenType_keyword_function = 0;
RogueClassTokenType* RogueTokenType_keyword_if = 0;
RogueClassTokenType* RogueTokenType_keyword_in = 0;
RogueClassTokenType* RogueTokenType_keyword_is = 0;
RogueClassTokenType* RogueTokenType_keyword_isNot = 0;
RogueClassTokenType* RogueTokenType_keyword_local = 0;
RogueClassTokenType* RogueTokenType_keyword_loop = 0;
RogueClassTokenType* RogueTokenType_keyword_native = 0;
RogueClassTokenType* RogueTokenType_keyword_necessary = 0;
RogueClassTokenType* RogueTokenType_keyword_nextIteration = 0;
RogueClassTokenType* RogueTokenType_keyword_noAction = 0;
RogueClassTokenType* RogueTokenType_keyword_null = 0;
RogueClassTokenType* RogueTokenType_keyword_of = 0;
RogueClassTokenType* RogueTokenType_keyword_return = 0;
RogueClassTokenType* RogueTokenType_keyword_step = 0;
RogueClassTokenType* RogueTokenType_keyword_sufficient = 0;
RogueClassTokenType* RogueTokenType_keyword_throw = 0;
RogueClassTokenType* RogueTokenType_keyword_trace = 0;
RogueClassTokenType* RogueTokenType_keyword_try = 0;
RogueClassTokenType* RogueTokenType_keyword_which = 0;
RogueClassTokenType* RogueTokenType_keyword_while = 0;
RogueClassTokenType* RogueTokenType_keyword_yield = 0;
RogueClassTokenType* RogueTokenType_identifier = 0;
RogueClassTokenType* RogueTokenType_type_identifier = 0;
RogueClassTokenType* RogueTokenType_literal_character = 0;
RogueClassTokenType* RogueTokenType_literal_integer = 0;
RogueClassTokenType* RogueTokenType_literal_long = 0;
RogueClassTokenType* RogueTokenType_literal_real = 0;
RogueClassTokenType* RogueTokenType_literal_string = 0;
RogueClassTokenType* RogueTokenType_keyword_and = 0;
RogueClassTokenType* RogueTokenType_keyword_as = 0;
RogueClassTokenType* RogueTokenType_keyword_false = 0;
RogueClassTokenType* RogueTokenType_keyword_instanceOf = 0;
RogueClassTokenType* RogueTokenType_keyword_meta = 0;
RogueClassTokenType* RogueTokenType_keyword_not = 0;
RogueClassTokenType* RogueTokenType_keyword_notInstanceOf = 0;
RogueClassTokenType* RogueTokenType_keyword_or = 0;
RogueClassTokenType* RogueTokenType_keyword_pi = 0;
RogueClassTokenType* RogueTokenType_keyword_prior = 0;
RogueClassTokenType* RogueTokenType_keyword_this = 0;
RogueClassTokenType* RogueTokenType_keyword_true = 0;
RogueClassTokenType* RogueTokenType_keyword_xor = 0;
RogueClassTokenType* RogueTokenType_symbol_ampersand = 0;
RogueClassTokenType* RogueTokenType_symbol_ampersand_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_arrow = 0;
RogueClassTokenType* RogueTokenType_symbol_at = 0;
RogueClassTokenType* RogueTokenType_symbol_backslash = 0;
RogueClassTokenType* RogueTokenType_symbol_caret = 0;
RogueClassTokenType* RogueTokenType_symbol_caret_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_colon = 0;
RogueClassTokenType* RogueTokenType_symbol_colon_colon = 0;
RogueClassTokenType* RogueTokenType_symbol_comma = 0;
RogueClassTokenType* RogueTokenType_symbol_compare = 0;
RogueClassTokenType* RogueTokenType_symbol_dot = 0;
RogueClassTokenType* RogueTokenType_symbol_dot_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_downToGreaterThan = 0;
RogueClassTokenType* RogueTokenType_symbol_empty_braces = 0;
RogueClassTokenType* RogueTokenType_symbol_empty_brackets = 0;
RogueClassTokenType* RogueTokenType_symbol_eq = 0;
RogueClassTokenType* RogueTokenType_symbol_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_exclamation_point = 0;
RogueClassTokenType* RogueTokenType_symbol_fat_arrow = 0;
RogueClassTokenType* RogueTokenType_symbol_ge = 0;
RogueClassTokenType* RogueTokenType_symbol_gt = 0;
RogueClassTokenType* RogueTokenType_symbol_le = 0;
RogueClassTokenType* RogueTokenType_symbol_lt = 0;
RogueClassTokenType* RogueTokenType_symbol_minus = 0;
RogueClassTokenType* RogueTokenType_symbol_minus_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_minus_minus = 0;
RogueClassTokenType* RogueTokenType_symbol_ne = 0;
RogueClassTokenType* RogueTokenType_symbol_open_brace = 0;
RogueClassTokenType* RogueTokenType_symbol_open_bracket = 0;
RogueClassTokenType* RogueTokenType_symbol_open_paren = 0;
RogueClassTokenType* RogueTokenType_symbol_open_specialize = 0;
RogueClassTokenType* RogueTokenType_symbol_percent = 0;
RogueClassTokenType* RogueTokenType_symbol_percent_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_plus = 0;
RogueClassTokenType* RogueTokenType_symbol_plus_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_plus_plus = 0;
RogueClassTokenType* RogueTokenType_symbol_question_mark = 0;
RogueClassTokenType* RogueTokenType_symbol_semicolon = 0;
RogueClassTokenType* RogueTokenType_symbol_shift_left = 0;
RogueClassTokenType* RogueTokenType_symbol_shift_right = 0;
RogueClassTokenType* RogueTokenType_symbol_shift_right_x = 0;
RogueClassTokenType* RogueTokenType_symbol_slash = 0;
RogueClassTokenType* RogueTokenType_symbol_slash_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_tilde = 0;
RogueClassTokenType* RogueTokenType_symbol_tilde_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_times = 0;
RogueClassTokenType* RogueTokenType_symbol_times_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_upTo = 0;
RogueClassTokenType* RogueTokenType_symbol_upToLessThan = 0;
RogueClassTokenType* RogueTokenType_symbol_vertical_bar = 0;
RogueClassTokenType* RogueTokenType_symbol_vertical_bar_equals = 0;
RogueClassTokenType* RogueTokenType_symbol_double_vertical_bar = 0;
RogueStringList* RogueSystem_command_line_arguments = 0;
RogueString* RogueSystem_executable_filepath = 0;
RogueClassString_TokenListTable* RoguePreprocessor_definitions = 0;

void RogueCharacterList_trace( void* obj );
void RogueStringBuilder_trace( void* obj );
void RogueStringList_trace( void* obj );
void RogueStringReader_trace( void* obj );
void RogueGlobal_trace( void* obj );
void RogueRogueC_trace( void* obj );
void RogueError_trace( void* obj );
void RogueProgram_trace( void* obj );
void RogueTemplateList_trace( void* obj );
void RogueTemplate_trace( void* obj );
void RogueString_TemplateTable_trace( void* obj );
void RogueString_AugmentListTable_trace( void* obj );
void RogueRequisiteItemList_trace( void* obj );
void RogueRequisiteItem_trace( void* obj );
void RogueMethod_trace( void* obj );
void RogueString_MethodListTable_trace( void* obj );
void RogueTypeList_trace( void* obj );
void RogueType_trace( void* obj );
void RogueString_TypeTable_trace( void* obj );
void RogueString_IntegerTable_trace( void* obj );
void RogueToken_trace( void* obj );
void RogueAttributes_trace( void* obj );
void RogueCmd_trace( void* obj );
void RogueCmdReturn_trace( void* obj );
void RogueCmdStatement_trace( void* obj );
void RogueCmdStatementList_trace( void* obj );
void RogueCmdList_trace( void* obj );
void RogueTokenType_trace( void* obj );
void RogueCmdLabel_trace( void* obj );
void RogueRogueError_trace( void* obj );
void RogueMethodList_trace( void* obj );
void RogueCPPWriter_trace( void* obj );
void RoguePropertyList_trace( void* obj );
void RogueProperty_trace( void* obj );
void RogueString_MethodTable_trace( void* obj );
void RogueLocalList_trace( void* obj );
void RogueLocal_trace( void* obj );
void RogueIntegerList_trace( void* obj );
void RogueByteList_trace( void* obj );
void RogueString_LogicalTable_trace( void* obj );
void RogueFile_trace( void* obj );
void RogueParser_trace( void* obj );
void RogueTokenList_trace( void* obj );
void RogueLineReader_trace( void* obj );
void RogueTypeParameterList_trace( void* obj );
void RogueTypeParameter_trace( void* obj );
void RogueAugmentList_trace( void* obj );
void RogueAugment_trace( void* obj );
void RogueString_TokenTypeTable_trace( void* obj );
void RogueLiteralCharacterToken_trace( void* obj );
void RogueLiteralLongToken_trace( void* obj );
void RogueLiteralIntegerToken_trace( void* obj );
void RogueLiteralRealToken_trace( void* obj );
void RogueLiteralStringToken_trace( void* obj );
void RogueString_TypeSpecializerTable_trace( void* obj );
void RogueTypeSpecializer_trace( void* obj );
void RogueTableEntry_of_String_TemplateList_trace( void* obj );
void RogueString_TemplateTableEntry_trace( void* obj );
void RogueTableEntry_of_String_AugmentListList_trace( void* obj );
void RogueString_AugmentListTableEntry_trace( void* obj );
void RogueCmdLabelList_trace( void* obj );
void RogueString_CmdLabelTable_trace( void* obj );
void RogueCloneMethodArgs_trace( void* obj );
void RogueCmdAccess_trace( void* obj );
void RogueCmdArgs_trace( void* obj );
void RogueCmdAssign_trace( void* obj );
void RogueScope_trace( void* obj );
void RogueCmdControlStructureList_trace( void* obj );
void RogueCmdControlStructure_trace( void* obj );
void RogueCmdLiteralThis_trace( void* obj );
void RogueCmdThisContext_trace( void* obj );
void RogueCmdGenericLoop_trace( void* obj );
void RogueCmdLiteralInteger_trace( void* obj );
void RogueCmdLiteral_trace( void* obj );
void RogueCmdCompareNE_trace( void* obj );
void RogueCmdComparison_trace( void* obj );
void RogueCmdBinary_trace( void* obj );
void RogueTaskArgs_trace( void* obj );
void RogueCmdTaskControl_trace( void* obj );
void RogueCmdTaskControlSection_trace( void* obj );
void RogueTableEntry_of_String_MethodListList_trace( void* obj );
void RogueString_MethodListTableEntry_trace( void* obj );
void RogueString_CmdTable_trace( void* obj );
void RogueString_PropertyTable_trace( void* obj );
void RogueCmdLiteralNull_trace( void* obj );
void RogueCmdCreateCompound_trace( void* obj );
void RogueCmdLiteralLogical_trace( void* obj );
void RogueCmdLiteralString_trace( void* obj );
void RogueCmdWriteGlobal_trace( void* obj );
void RogueCmdWriteProperty_trace( void* obj );
void RogueTableEntry_of_String_TypeList_trace( void* obj );
void RogueString_TypeTableEntry_trace( void* obj );
void RogueTableEntry_of_String_IntegerList_trace( void* obj );
void RogueString_IntegerTableEntry_trace( void* obj );
void RogueCmdCastToType_trace( void* obj );
void RogueCmdTypeOperator_trace( void* obj );
void RogueCmdLogicalize_trace( void* obj );
void RogueCmdUnary_trace( void* obj );
void RogueCmdCreateOptionalValue_trace( void* obj );
void RogueTableEntry_of_String_MethodList_trace( void* obj );
void RogueString_MethodTableEntry_trace( void* obj );
void RogueTableEntry_of_String_LogicalList_trace( void* obj );
void RogueString_LogicalTableEntry_trace( void* obj );
void RogueFileReader_trace( void* obj );
void RogueFileWriter_trace( void* obj );
void RogueTokenReader_trace( void* obj );
void RogueTokenizer_trace( void* obj );
void RogueParseReader_trace( void* obj );
void RoguePreprocessor_trace( void* obj );
void RogueCmdAdd_trace( void* obj );
void RogueCmdIf_trace( void* obj );
void RogueCmdWhich_trace( void* obj );
void RogueCmdContingent_trace( void* obj );
void RogueCmdTry_trace( void* obj );
void RogueCmdAwait_trace( void* obj );
void RogueCmdYield_trace( void* obj );
void RogueCmdThrow_trace( void* obj );
void RogueCmdTrace_trace( void* obj );
void RogueCmdEscape_trace( void* obj );
void RogueCmdNextIteration_trace( void* obj );
void RogueCmdNecessary_trace( void* obj );
void RogueCmdSufficient_trace( void* obj );
void RogueCmdAdjust_trace( void* obj );
void RogueCmdOpWithAssign_trace( void* obj );
void RogueCmdWhichCaseList_trace( void* obj );
void RogueCmdWhichCase_trace( void* obj );
void RogueCmdCatchList_trace( void* obj );
void RogueCmdCatch_trace( void* obj );
void RogueCmdLocalDeclaration_trace( void* obj );
void RogueCmdAdjustLocal_trace( void* obj );
void RogueCmdReadLocal_trace( void* obj );
void RogueCmdCompareLE_trace( void* obj );
void RogueCmdRange_trace( void* obj );
void RogueCmdLocalOpWithAssign_trace( void* obj );
void RogueCmdResolvedOpWithAssign_trace( void* obj );
void RogueCmdForEach_trace( void* obj );
void RogueCmdRangeUpTo_trace( void* obj );
void RogueCmdLogicalXor_trace( void* obj );
void RogueCmdBinaryLogical_trace( void* obj );
void RogueCmdLogicalOr_trace( void* obj );
void RogueCmdLogicalAnd_trace( void* obj );
void RogueCmdCompareEQ_trace( void* obj );
void RogueCmdCompareIs_trace( void* obj );
void RogueCmdCompareIsNot_trace( void* obj );
void RogueCmdCompareLT_trace( void* obj );
void RogueCmdCompareGT_trace( void* obj );
void RogueCmdCompareGE_trace( void* obj );
void RogueCmdInstanceOf_trace( void* obj );
void RogueCmdLogicalNot_trace( void* obj );
void RogueCmdBitwiseXor_trace( void* obj );
void RogueCmdBitwiseOp_trace( void* obj );
void RogueCmdBitwiseOr_trace( void* obj );
void RogueCmdBitwiseAnd_trace( void* obj );
void RogueCmdBitwiseShiftLeft_trace( void* obj );
void RogueCmdBitwiseShiftRight_trace( void* obj );
void RogueCmdBitwiseShiftRightX_trace( void* obj );
void RogueCmdSubtract_trace( void* obj );
void RogueCmdMultiply_trace( void* obj );
void RogueCmdDivide_trace( void* obj );
void RogueCmdMod_trace( void* obj );
void RogueCmdPower_trace( void* obj );
void RogueCmdNegate_trace( void* obj );
void RogueCmdBitwiseNot_trace( void* obj );
void RogueCmdGetOptionalValue_trace( void* obj );
void RogueCmdElementAccess_trace( void* obj );
void RogueCmdConvertToType_trace( void* obj );
void RogueCmdCreateCallback_trace( void* obj );
void RogueCmdAs_trace( void* obj );
void RogueCmdDefaultValue_trace( void* obj );
void RogueCmdFormattedString_trace( void* obj );
void RogueCmdLiteralReal_trace( void* obj );
void RogueCmdLiteralLong_trace( void* obj );
void RogueCmdLiteralCharacter_trace( void* obj );
void RogueCmdCreateList_trace( void* obj );
void RogueCmdCallPriorMethod_trace( void* obj );
void RogueFnParamList_trace( void* obj );
void RogueFnParam_trace( void* obj );
void RogueFnArgList_trace( void* obj );
void RogueFnArg_trace( void* obj );
void RogueCmdCreateFunction_trace( void* obj );
void RogueCmdNativeCode_trace( void* obj );
void RogueTableEntry_of_String_TokenTypeList_trace( void* obj );
void RogueString_TokenTypeTableEntry_trace( void* obj );
void RogueTableEntry_of_String_TypeSpecializerList_trace( void* obj );
void RogueString_TypeSpecializerTableEntry_trace( void* obj );
void RogueTableEntry_of_String_CmdLabelList_trace( void* obj );
void RogueString_CmdLabelTableEntry_trace( void* obj );
void RogueMacroArgs_trace( void* obj );
void RogueCmdReadSingleton_trace( void* obj );
void RogueCmdCreateArray_trace( void* obj );
void RogueCmdCallRoutine_trace( void* obj );
void RogueCmdCall_trace( void* obj );
void RogueCmdCreateObject_trace( void* obj );
void RogueCmdReadGlobal_trace( void* obj );
void RogueCmdReadProperty_trace( void* obj );
void RogueCmdLogicalizeOptionalValue_trace( void* obj );
void RogueCmdWriteLocal_trace( void* obj );
void RogueCmdOpAssignGlobal_trace( void* obj );
void RogueCmdOpAssignProperty_trace( void* obj );
void RogueCmdCallInlineNativeRoutine_trace( void* obj );
void RogueCmdCallInlineNative_trace( void* obj );
void RogueCmdCallNativeRoutine_trace( void* obj );
void RogueCmdReadArrayCount_trace( void* obj );
void RogueCmdCallInlineNativeMethod_trace( void* obj );
void RogueCmdCallNativeMethod_trace( void* obj );
void RogueCmdCallAspectMethod_trace( void* obj );
void RogueCmdCallDynamicMethod_trace( void* obj );
void RogueCmdCallMethod_trace( void* obj );
void RogueCandidateMethods_trace( void* obj );
void RogueCmdTaskControlSectionList_trace( void* obj );
void RogueCmdBlock_trace( void* obj );
void RogueTableEntry_of_String_CmdList_trace( void* obj );
void RogueString_CmdTableEntry_trace( void* obj );
void RogueTableEntry_of_String_PropertyList_trace( void* obj );
void RogueString_PropertyTableEntry_trace( void* obj );
void RogueDirectiveTokenType_trace( void* obj );
void RogueStructuralDirectiveTokenType_trace( void* obj );
void RogueEOLTokenType_trace( void* obj );
void RogueStructureTokenType_trace( void* obj );
void RogueOpWithAssignTokenType_trace( void* obj );
void RogueEOLToken_trace( void* obj );
void RogueString_TokenListTable_trace( void* obj );
void RoguePreprocessorTokenReader_trace( void* obj );
void RogueCmdSwitch_trace( void* obj );
void RogueCmdReadArrayElement_trace( void* obj );
void RogueCmdWriteArrayElement_trace( void* obj );
void RogueCmdConvertToPrimitiveType_trace( void* obj );
void RogueCmdAdjustProperty_trace( void* obj );
void RogueCmdCallStaticMethod_trace( void* obj );
void RogueTableEntry_of_String_TokenListList_trace( void* obj );
void RogueString_TokenListTableEntry_trace( void* obj );

void RogueCharacterList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCharacterList*)obj)->data)) RogueObject_trace( link );
}

void RogueStringBuilder_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueStringBuilder*)obj)->characters)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueStringList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueStringList*)obj)->data)) RogueArray_trace( link );
}

void RogueStringReader_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassStringReader*)obj)->string)) RogueString_trace( link );
}

void RogueGlobal_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassGlobal*)obj)->global_output_buffer)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassGlobal*)obj)->standard_output)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueRogueC_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassRogueC*)obj)->included_files)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->prefix_path_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->prefix_path_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->compile_targets)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->libraries_folder)) RogueString_trace( link );
  if ((link=((RogueClassRogueC*)obj)->source_files)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->first_filepath)) RogueString_trace( link );
  if ((link=((RogueClassRogueC*)obj)->output_filepath)) RogueString_trace( link );
  if ((link=((RogueClassRogueC*)obj)->supported_targets)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRogueC*)obj)->target)) RogueString_trace( link );
  if ((link=((RogueClassRogueC*)obj)->execute_args)) RogueString_trace( link );
}

void RogueError_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassError*)obj)->message)) RogueString_trace( link );
}

void RogueProgram_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassProgram*)obj)->code_prefix)) RogueString_trace( link );
  if ((link=((RogueClassProgram*)obj)->program_name)) RogueString_trace( link );
  if ((link=((RogueClassProgram*)obj)->template_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->template_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->augment_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->requisite_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->first_filepath)) RogueString_trace( link );
  if ((link=((RogueClassProgram*)obj)->m_on_launch)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->native_header)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->native_code)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->methods_by_signature)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_null)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Real)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Float)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Long)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Integer)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Character)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Byte)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Logical)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Object)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_String)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_NativeArray)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_GenericList)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Global)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_Error)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->type_StringBuilder)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->literal_string_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->literal_string_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProgram*)obj)->string_buffer)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTemplateList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTemplateList*)obj)->data)) RogueArray_trace( link );
}

void RogueTemplate_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTemplate*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTemplate*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassTemplate*)obj)->tokens)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTemplate*)obj)->attributes)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTemplate*)obj)->type_parameters)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_TemplateTable_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TemplateTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TemplateTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_AugmentListTable_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_AugmentListTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_AugmentListTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueRequisiteItemList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueRequisiteItemList*)obj)->data)) RogueArray_trace( link );
}

void RogueRequisiteItem_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassRequisiteItem*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRequisiteItem*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassRequisiteItem*)obj)->signature)) RogueString_trace( link );
}

void RogueMethod_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->type_context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassMethod*)obj)->signature)) RogueString_trace( link );
  if ((link=((RogueClassMethod*)obj)->attributes)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->_return_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->_task_result_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->parameters)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->locals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->aspect_statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->incorporating_classes)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->overridden_method)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->overriding_methods)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->native_code)) RogueString_trace( link );
  if ((link=((RogueClassMethod*)obj)->label_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->label_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->cur_label)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMethod*)obj)->cpp_name)) RogueString_trace( link );
  if ((link=((RogueClassMethod*)obj)->cpp_typedef)) RogueString_trace( link );
}

void RogueString_MethodListTable_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_MethodListTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_MethodListTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTypeList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTypeList*)obj)->data)) RogueArray_trace( link );
}

void RogueType_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassType*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassType*)obj)->attributes)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->base_class)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->base_types)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->flat_base_types)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->_element_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->definition_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->definition_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->prev_enum_cmd)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->native_properties)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->global_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->global_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->property_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->property_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->routine_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->routine_lookup_by_name)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->routine_lookup_by_signature)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->method_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->method_lookup_by_name)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->method_lookup_by_signature)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassType*)obj)->cpp_name)) RogueString_trace( link );
  if ((link=((RogueClassType*)obj)->cpp_class_name)) RogueString_trace( link );
  if ((link=((RogueClassType*)obj)->cpp_type_name)) RogueString_trace( link );
}

void RogueString_TypeTable_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TypeTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TypeTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_IntegerTable_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_IntegerTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_IntegerTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueToken_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassToken*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassToken*)obj)->filepath)) RogueString_trace( link );
}

void RogueAttributes_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassAttributes*)obj)->tags)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmd_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmd*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdReturn_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdReturn*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReturn*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdStatement_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdStatement*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdStatementList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdStatementList*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdList*)obj)->data)) RogueArray_trace( link );
}

void RogueTokenType_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTokenType*)obj)->name)) RogueString_trace( link );
}

void RogueCmdLabel_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLabel*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLabel*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassCmdLabel*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueRogueError_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassRogueError*)obj)->message)) RogueString_trace( link );
  if ((link=((RogueClassRogueError*)obj)->filepath)) RogueString_trace( link );
}

void RogueMethodList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueMethodList*)obj)->data)) RogueArray_trace( link );
}

void RogueCPPWriter_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCPPWriter*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassCPPWriter*)obj)->buffer)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCPPWriter*)obj)->temp_buffer)) ((RogueObject*)link)->type->trace_fn( link );
}

void RoguePropertyList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RoguePropertyList*)obj)->data)) RogueArray_trace( link );
}

void RogueProperty_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassProperty*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProperty*)obj)->type_context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProperty*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassProperty*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProperty*)obj)->initial_value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassProperty*)obj)->cpp_name)) RogueString_trace( link );
}

void RogueString_MethodTable_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_MethodTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_MethodTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueLocalList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueLocalList*)obj)->data)) RogueArray_trace( link );
}

void RogueLocal_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassLocal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLocal*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassLocal*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLocal*)obj)->initial_value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLocal*)obj)->_cpp_name)) RogueString_trace( link );
}

void RogueIntegerList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueIntegerList*)obj)->data)) RogueObject_trace( link );
}

void RogueByteList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueByteList*)obj)->data)) RogueObject_trace( link );
}

void RogueString_LogicalTable_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_LogicalTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_LogicalTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueFile_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassFile*)obj)->filepath)) RogueString_trace( link );
}

void RogueParser_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassParser*)obj)->reader)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->_this_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->this_method)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->local_declarations)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->property_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->string_buffer)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassParser*)obj)->cur_statement_list)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTokenList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTokenList*)obj)->data)) RogueArray_trace( link );
}

void RogueLineReader_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassLineReader*)obj)->source)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLineReader*)obj)->next)) RogueString_trace( link );
  if ((link=((RogueClassLineReader*)obj)->buffer)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTypeParameterList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTypeParameterList*)obj)->data)) RogueArray_trace( link );
}

void RogueTypeParameter_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTypeParameter*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTypeParameter*)obj)->name)) RogueString_trace( link );
}

void RogueAugmentList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueAugmentList*)obj)->data)) RogueArray_trace( link );
}

void RogueAugment_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassAugment*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassAugment*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassAugment*)obj)->base_types)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassAugment*)obj)->tokens)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_TokenTypeTable_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TokenTypeTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TokenTypeTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueLiteralCharacterToken_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassLiteralCharacterToken*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLiteralCharacterToken*)obj)->filepath)) RogueString_trace( link );
}

void RogueLiteralLongToken_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassLiteralLongToken*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLiteralLongToken*)obj)->filepath)) RogueString_trace( link );
}

void RogueLiteralIntegerToken_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassLiteralIntegerToken*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLiteralIntegerToken*)obj)->filepath)) RogueString_trace( link );
}

void RogueLiteralRealToken_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassLiteralRealToken*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLiteralRealToken*)obj)->filepath)) RogueString_trace( link );
}

void RogueLiteralStringToken_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassLiteralStringToken*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassLiteralStringToken*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassLiteralStringToken*)obj)->value)) RogueString_trace( link );
}

void RogueString_TypeSpecializerTable_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TypeSpecializerTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TypeSpecializerTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTypeSpecializer_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTypeSpecializer*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassTypeSpecializer*)obj)->tokens)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_TemplateList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_TemplateList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_TemplateTableEntry_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TemplateTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_TemplateTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TemplateTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_AugmentListList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_AugmentListList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_AugmentListTableEntry_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_AugmentListTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_AugmentListTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_AugmentListTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLabelList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdLabelList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_CmdLabelTable_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_CmdLabelTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_CmdLabelTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCloneMethodArgs_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCloneMethodArgs*)obj)->cloned_method)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAccess_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAccess*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAccess*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAccess*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassCmdAccess*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdArgs_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdArgs*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdAssign_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAssign*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAssign*)obj)->target)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAssign*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueScope_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassScope*)obj)->_this_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassScope*)obj)->this_method)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassScope*)obj)->local_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassScope*)obj)->control_stack)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdControlStructureList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdControlStructureList*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdControlStructure_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdControlStructure*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdControlStructure*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdControlStructure*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdControlStructure*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdControlStructure*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdControlStructure*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdControlStructure*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralThis_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralThis*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLiteralThis*)obj)->_this_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdThisContext_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdThisContext*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdThisContext*)obj)->_this_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdGenericLoop_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdGenericLoop*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->control_statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->condition)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGenericLoop*)obj)->upkeep)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralInteger_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralInteger*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteral_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteral*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareNE_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareNE*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareNE*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareNE*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdComparison_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdComparison*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdComparison*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdComparison*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBinary_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBinary*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBinary*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBinary*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTaskArgs_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTaskArgs*)obj)->_task_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTaskArgs*)obj)->task_method)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTaskArgs*)obj)->_original_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTaskArgs*)obj)->original_method)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTaskArgs*)obj)->cmd_task_control)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTaskArgs*)obj)->context_property)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTaskArgs*)obj)->ip_property)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdTaskControl_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdTaskControl*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTaskControl*)obj)->sections)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTaskControl*)obj)->current_section)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdTaskControlSection_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdTaskControlSection*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_MethodListList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_MethodListList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_MethodListTableEntry_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_MethodListTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_MethodListTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_MethodListTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_CmdTable_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_CmdTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_CmdTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueString_PropertyTable_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_PropertyTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_PropertyTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralNull_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralNull*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCreateCompound_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCreateCompound*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateCompound*)obj)->_of_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateCompound*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralLogical_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralLogical*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralString_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralString*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLiteralString*)obj)->value)) RogueString_trace( link );
}

void RogueCmdWriteGlobal_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdWriteGlobal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteGlobal*)obj)->global_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteGlobal*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdWriteProperty_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdWriteProperty*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteProperty*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteProperty*)obj)->property_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteProperty*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_TypeList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_TypeList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_TypeTableEntry_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TypeTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_TypeTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TypeTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_IntegerList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_IntegerList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_IntegerTableEntry_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_IntegerTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_IntegerTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCastToType_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCastToType*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCastToType*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCastToType*)obj)->_target_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdTypeOperator_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdTypeOperator*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTypeOperator*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTypeOperator*)obj)->_target_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLogicalize_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLogicalize*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalize*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdUnary_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdUnary*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdUnary*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCreateOptionalValue_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCreateOptionalValue*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateOptionalValue*)obj)->_of_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateOptionalValue*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_MethodList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_MethodList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_MethodTableEntry_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_MethodTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_MethodTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_MethodTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_LogicalList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_LogicalList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_LogicalTableEntry_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_LogicalTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_LogicalTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueFileReader_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassFileReader*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassFileReader*)obj)->buffer)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueFileWriter_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassFileWriter*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassFileWriter*)obj)->buffer)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTokenReader_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTokenReader*)obj)->tokens)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTokenizer_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassTokenizer*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassTokenizer*)obj)->reader)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTokenizer*)obj)->tokens)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTokenizer*)obj)->buffer)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassTokenizer*)obj)->next_filepath)) RogueString_trace( link );
}

void RogueParseReader_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassParseReader*)obj)->data)) ((RogueObject*)link)->type->trace_fn( link );
}

void RoguePreprocessor_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassPreprocessor*)obj)->reader)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassPreprocessor*)obj)->tokens)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAdd_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAdd*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAdd*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAdd*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdIf_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdIf*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdIf*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdIf*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdIf*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdIf*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdIf*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdIf*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdIf*)obj)->condition)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdIf*)obj)->else_statements)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdWhich_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdWhich*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhich*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhich*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdWhich*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdWhich*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhich*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhich*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhich*)obj)->expression)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhich*)obj)->cases)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhich*)obj)->case_others)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdContingent_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdContingent*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdContingent*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdContingent*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->satisfied_statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->unsatisfied_statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->satisfied_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdContingent*)obj)->unsatisfied_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdContingent*)obj)->satisfied_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdContingent*)obj)->unsatisfied_section)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdTry_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdTry*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTry*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTry*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdTry*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdTry*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTry*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTry*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTry*)obj)->catches)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAwait_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAwait*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAwait*)obj)->expression)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAwait*)obj)->statement_list)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAwait*)obj)->result_var)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdYield_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdYield*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdThrow_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdThrow*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdThrow*)obj)->expression)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdTrace_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdTrace*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdTrace*)obj)->value)) RogueString_trace( link );
}

void RogueCmdEscape_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdEscape*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdEscape*)obj)->target_cmd)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdNextIteration_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdNextIteration*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdNextIteration*)obj)->target_cmd)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdNecessary_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdNecessary*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdNecessary*)obj)->target_cmd)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdNecessary*)obj)->condition)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdSufficient_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdSufficient*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSufficient*)obj)->target_cmd)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSufficient*)obj)->condition)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAdjust_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAdjust*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAdjust*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdOpWithAssign_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdOpWithAssign*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdOpWithAssign*)obj)->target)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdOpWithAssign*)obj)->op)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdOpWithAssign*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdWhichCaseList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdWhichCaseList*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdWhichCase_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdWhichCase*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhichCase*)obj)->conditions)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWhichCase*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCatchList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdCatchList*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdCatch_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCatch*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCatch*)obj)->error_var)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCatch*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLocalDeclaration_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLocalDeclaration*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLocalDeclaration*)obj)->local_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAdjustLocal_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAdjustLocal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAdjustLocal*)obj)->local_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdReadLocal_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdReadLocal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadLocal*)obj)->local_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareLE_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareLE*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareLE*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareLE*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdRange_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdRange*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRange*)obj)->first)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRange*)obj)->last)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRange*)obj)->step_size)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLocalOpWithAssign_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLocalOpWithAssign*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLocalOpWithAssign*)obj)->op)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLocalOpWithAssign*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLocalOpWithAssign*)obj)->local_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdResolvedOpWithAssign_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdResolvedOpWithAssign*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdResolvedOpWithAssign*)obj)->op)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdResolvedOpWithAssign*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdForEach_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdForEach*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdForEach*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdForEach*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdForEach*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdForEach*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdForEach*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdForEach*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdForEach*)obj)->control_var_name)) RogueString_trace( link );
  if ((link=((RogueClassCmdForEach*)obj)->index_var_name)) RogueString_trace( link );
  if ((link=((RogueClassCmdForEach*)obj)->collection)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdForEach*)obj)->step_cmd)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdRangeUpTo_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdRangeUpTo*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRangeUpTo*)obj)->first)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRangeUpTo*)obj)->last)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdRangeUpTo*)obj)->step_size)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLogicalXor_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLogicalXor*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalXor*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalXor*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBinaryLogical_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBinaryLogical*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBinaryLogical*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBinaryLogical*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLogicalOr_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLogicalOr*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalOr*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalOr*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLogicalAnd_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLogicalAnd*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalAnd*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalAnd*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareEQ_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareEQ*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareEQ*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareEQ*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareIs_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareIs*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareIs*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareIs*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareIsNot_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareIsNot*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareIsNot*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareIsNot*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareLT_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareLT*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareLT*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareLT*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareGT_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareGT*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareGT*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareGT*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCompareGE_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCompareGE*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareGE*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCompareGE*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdInstanceOf_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdInstanceOf*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdInstanceOf*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdInstanceOf*)obj)->_target_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLogicalNot_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLogicalNot*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalNot*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseXor_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseXor*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseXor*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseXor*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseOp_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseOp*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseOp*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseOp*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseOr_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseOr*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseOr*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseOr*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseAnd_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseAnd*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseAnd*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseAnd*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseShiftLeft_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseShiftLeft*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseShiftLeft*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseShiftLeft*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseShiftRight_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseShiftRight*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseShiftRight*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseShiftRight*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseShiftRightX_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseShiftRightX*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseShiftRightX*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseShiftRightX*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdSubtract_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdSubtract*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSubtract*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSubtract*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdMultiply_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdMultiply*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdMultiply*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdMultiply*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdDivide_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdDivide*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdDivide*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdDivide*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdMod_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdMod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdMod*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdMod*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdPower_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdPower*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdPower*)obj)->left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdPower*)obj)->right)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdNegate_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdNegate*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdNegate*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdBitwiseNot_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBitwiseNot*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBitwiseNot*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdGetOptionalValue_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdGetOptionalValue*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdGetOptionalValue*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdElementAccess_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdElementAccess*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdElementAccess*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdElementAccess*)obj)->index)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdConvertToType_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdConvertToType*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdConvertToType*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdConvertToType*)obj)->_target_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCreateCallback_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCreateCallback*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateCallback*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateCallback*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassCmdCreateCallback*)obj)->signature)) RogueString_trace( link );
  if ((link=((RogueClassCmdCreateCallback*)obj)->_return_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAs_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAs*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAs*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAs*)obj)->_target_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdDefaultValue_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdDefaultValue*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdDefaultValue*)obj)->_of_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdFormattedString_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdFormattedString*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdFormattedString*)obj)->format)) RogueString_trace( link );
  if ((link=((RogueClassCmdFormattedString*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralReal_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralReal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralLong_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralLong*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLiteralCharacter_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLiteralCharacter*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCreateList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCreateList*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateList*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateList*)obj)->_list_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallPriorMethod_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallPriorMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallPriorMethod*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassCmdCallPriorMethod*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueFnParamList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueFnParamList*)obj)->data)) RogueArray_trace( link );
}

void RogueFnParam_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassFnParam*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassFnParam*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueFnArgList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueFnArgList*)obj)->data)) RogueArray_trace( link );
}

void RogueFnArg_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassFnArg*)obj)->name)) RogueString_trace( link );
  if ((link=((RogueClassFnArg*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassFnArg*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCreateFunction_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCreateFunction*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateFunction*)obj)->parameters)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateFunction*)obj)->_return_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateFunction*)obj)->with_args)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateFunction*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdNativeCode_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdNativeCode*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdNativeCode*)obj)->code)) RogueString_trace( link );
  if ((link=((RogueClassCmdNativeCode*)obj)->this_method)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdNativeCode*)obj)->_result_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_TokenTypeList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_TokenTypeList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_TokenTypeTableEntry_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TokenTypeTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_TokenTypeTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TokenTypeTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_TypeSpecializerList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_TypeSpecializerList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_TypeSpecializerTableEntry_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TypeSpecializerTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_TypeSpecializerTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TypeSpecializerTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_CmdLabelList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_CmdLabelList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_CmdLabelTableEntry_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_CmdLabelTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_CmdLabelTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_CmdLabelTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueMacroArgs_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassMacroArgs*)obj)->this_context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMacroArgs*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassMacroArgs*)obj)->arg_lookup)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdReadSingleton_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdReadSingleton*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadSingleton*)obj)->_of_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCreateArray_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCreateArray*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateArray*)obj)->_array_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateArray*)obj)->count_cmd)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallRoutine_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallRoutine*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallRoutine*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallRoutine*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallRoutine*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCall_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCall*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCall*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCall*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCall*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCreateObject_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCreateObject*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCreateObject*)obj)->_of_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdReadGlobal_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdReadGlobal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadGlobal*)obj)->global_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdReadProperty_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdReadProperty*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadProperty*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadProperty*)obj)->property_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdLogicalizeOptionalValue_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdLogicalizeOptionalValue*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdLogicalizeOptionalValue*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdWriteLocal_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdWriteLocal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteLocal*)obj)->local_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteLocal*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdOpAssignGlobal_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdOpAssignGlobal*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdOpAssignGlobal*)obj)->op)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdOpAssignGlobal*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdOpAssignGlobal*)obj)->global_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdOpAssignProperty_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdOpAssignProperty*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdOpAssignProperty*)obj)->op)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdOpAssignProperty*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdOpAssignProperty*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdOpAssignProperty*)obj)->property_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallInlineNativeRoutine_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallInlineNativeRoutine*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNativeRoutine*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNativeRoutine*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNativeRoutine*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallInlineNative_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallInlineNative*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNative*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNative*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNative*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallNativeRoutine_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallNativeRoutine*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallNativeRoutine*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallNativeRoutine*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallNativeRoutine*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdReadArrayCount_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdReadArrayCount*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadArrayCount*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadArrayCount*)obj)->_array_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallInlineNativeMethod_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallInlineNativeMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNativeMethod*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNativeMethod*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallInlineNativeMethod*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallNativeMethod_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallNativeMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallNativeMethod*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallNativeMethod*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallNativeMethod*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallAspectMethod_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallAspectMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallAspectMethod*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallAspectMethod*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallAspectMethod*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallDynamicMethod_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallDynamicMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallDynamicMethod*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallDynamicMethod*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallDynamicMethod*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallMethod_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallMethod*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallMethod*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallMethod*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCandidateMethods_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCandidateMethods*)obj)->type_context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCandidateMethods*)obj)->access)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCandidateMethods*)obj)->available)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCandidateMethods*)obj)->compatible)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdTaskControlSectionList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueCmdTaskControlSectionList*)obj)->data)) RogueArray_trace( link );
}

void RogueCmdBlock_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdBlock*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBlock*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBlock*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdBlock*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdBlock*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBlock*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdBlock*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_CmdList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_CmdList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_CmdTableEntry_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_CmdTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_CmdTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_CmdTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_PropertyList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_PropertyList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_PropertyTableEntry_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_PropertyTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_PropertyTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_PropertyTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueDirectiveTokenType_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassDirectiveTokenType*)obj)->name)) RogueString_trace( link );
}

void RogueStructuralDirectiveTokenType_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassStructuralDirectiveTokenType*)obj)->name)) RogueString_trace( link );
}

void RogueEOLTokenType_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassEOLTokenType*)obj)->name)) RogueString_trace( link );
}

void RogueStructureTokenType_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassStructureTokenType*)obj)->name)) RogueString_trace( link );
}

void RogueOpWithAssignTokenType_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassOpWithAssignTokenType*)obj)->name)) RogueString_trace( link );
}

void RogueEOLToken_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassEOLToken*)obj)->_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassEOLToken*)obj)->filepath)) RogueString_trace( link );
  if ((link=((RogueClassEOLToken*)obj)->comment)) RogueString_trace( link );
}

void RogueString_TokenListTable_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TokenListTable*)obj)->bins)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TokenListTable*)obj)->keys)) ((RogueObject*)link)->type->trace_fn( link );
}

void RoguePreprocessorTokenReader_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassPreprocessorTokenReader*)obj)->tokens)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassPreprocessorTokenReader*)obj)->queue)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdSwitch_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdSwitch*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSwitch*)obj)->statements)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSwitch*)obj)->escape_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdSwitch*)obj)->upkeep_label)) RogueString_trace( link );
  if ((link=((RogueClassCmdSwitch*)obj)->task_escape_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSwitch*)obj)->task_upkeep_section)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSwitch*)obj)->cloned_command)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSwitch*)obj)->expression)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSwitch*)obj)->cases)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdSwitch*)obj)->case_others)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdReadArrayElement_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdReadArrayElement*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadArrayElement*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadArrayElement*)obj)->_array_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdReadArrayElement*)obj)->index)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdWriteArrayElement_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdWriteArrayElement*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteArrayElement*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteArrayElement*)obj)->_array_type)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteArrayElement*)obj)->index)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdWriteArrayElement*)obj)->new_value)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdConvertToPrimitiveType_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdConvertToPrimitiveType*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdConvertToPrimitiveType*)obj)->operand)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdConvertToPrimitiveType*)obj)->_target_type)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdAdjustProperty_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdAdjustProperty*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAdjustProperty*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdAdjustProperty*)obj)->property_info)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueCmdCallStaticMethod_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassCmdCallStaticMethod*)obj)->t)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallStaticMethod*)obj)->context)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallStaticMethod*)obj)->method_info)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassCmdCallStaticMethod*)obj)->args)) ((RogueObject*)link)->type->trace_fn( link );
}

void RogueTableEntry_of_String_TokenListList_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueTableEntry_of_String_TokenListList*)obj)->data)) RogueArray_trace( link );
}

void RogueString_TokenListTableEntry_trace( void* obj )
{
  void* link;
  
  if ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;
  ((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;
  
  if ((link=((RogueClassString_TokenListTableEntry*)obj)->key)) RogueString_trace( link );
  if ((link=((RogueClassString_TokenListTableEntry*)obj)->value)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=((RogueClassString_TokenListTableEntry*)obj)->next_entry)) ((RogueObject*)link)->type->trace_fn( link );
}


RogueInitFn Rogue_init_object_fn_table[] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueStringBuilder__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueGlobal__init_object,
  0,
  (RogueInitFn) RogueRogueC__init_object,
  0,
  (RogueInitFn) RogueProgram__init_object,
  0,
  (RogueInitFn) RogueTemplate__init_object,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueMethod__init_object,
  0,
  0,
  (RogueInitFn) RogueType__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueCPPWriter__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueParser__init_object,
  0,
  (RogueInitFn) RogueLineReader__init_object,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueAugment__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueScope__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueCmdTaskControl__init_object,
  (RogueInitFn) RogueCmdTaskControlSection__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueFileReader__init_object,
  (RogueInitFn) RogueFileWriter__init_object,
  0,
  (RogueInitFn) RogueTokenizer__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueCandidateMethods__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RoguePreprocessorTokenReader__init_object,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
};

RogueInitFn Rogue_init_fn_table[] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueStringBuilder__init,
  0,
  0,
  (RogueInitFn) RogueStringList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueTemplateList__init,
  0,
  (RogueInitFn) RogueString_TemplateTable__init,
  (RogueInitFn) RogueString_AugmentListTable__init,
  (RogueInitFn) RogueRequisiteItemList__init,
  0,
  0,
  (RogueInitFn) RogueString_MethodListTable__init,
  (RogueInitFn) RogueTypeList__init,
  0,
  (RogueInitFn) RogueString_TypeTable__init,
  (RogueInitFn) RogueString_IntegerTable__init,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueCmdStatementList__init,
  (RogueInitFn) RogueCmdList__init,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueMethodList__init,
  0,
  0,
  (RogueInitFn) RoguePropertyList__init,
  0,
  0,
  (RogueInitFn) RogueString_MethodTable__init,
  (RogueInitFn) RogueLocalList__init,
  0,
  0,
  (RogueInitFn) RogueIntegerList__init,
  0,
  (RogueInitFn) RogueByteList__init,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueString_LogicalTable__init,
  0,
  0,
  (RogueInitFn) RogueTokenList__init,
  0,
  0,
  (RogueInitFn) RogueTypeParameterList__init,
  0,
  (RogueInitFn) RogueAugmentList__init,
  0,
  0,
  (RogueInitFn) RogueString_TokenTypeTable__init,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueString_TypeSpecializerTable__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueCmdLabelList__init,
  (RogueInitFn) RogueString_CmdLabelTable__init,
  0,
  0,
  0,
  (RogueInitFn) RogueCmdArgs__init,
  0,
  0,
  (RogueInitFn) RogueCmdControlStructureList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueString_CmdTable__init,
  (RogueInitFn) RogueString_PropertyTable__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueCmdWhichCaseList__init,
  0,
  (RogueInitFn) RogueCmdCatchList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueFnParamList__init,
  0,
  (RogueInitFn) RogueFnArgList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueCmdTaskControlSectionList__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  (RogueInitFn) RogueString_TokenListTable__init,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
};

RogueTraceFn Rogue_trace_fn_table[] =
{
  RogueObject_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueCharacterList_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueStringBuilder_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueStringList_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueStringReader_trace,
  RogueObject_trace,
  RogueGlobal_trace,
  RogueObject_trace,
  RogueRogueC_trace,
  RogueError_trace,
  RogueProgram_trace,
  RogueTemplateList_trace,
  RogueTemplate_trace,
  RogueString_TemplateTable_trace,
  RogueString_AugmentListTable_trace,
  RogueRequisiteItemList_trace,
  RogueRequisiteItem_trace,
  RogueMethod_trace,
  RogueString_MethodListTable_trace,
  RogueTypeList_trace,
  RogueType_trace,
  RogueString_TypeTable_trace,
  RogueString_IntegerTable_trace,
  RogueToken_trace,
  RogueArray_trace,
  RogueAttributes_trace,
  RogueCmd_trace,
  RogueCmdReturn_trace,
  RogueCmdStatement_trace,
  RogueCmdStatementList_trace,
  RogueCmdList_trace,
  RogueTokenType_trace,
  RogueCmdLabel_trace,
  RogueArray_trace,
  RogueRogueError_trace,
  RogueArray_trace,
  RogueMethodList_trace,
  RogueArray_trace,
  RogueCPPWriter_trace,
  RoguePropertyList_trace,
  RogueProperty_trace,
  RogueArray_trace,
  RogueString_MethodTable_trace,
  RogueLocalList_trace,
  RogueLocal_trace,
  RogueArray_trace,
  RogueIntegerList_trace,
  RogueObject_trace,
  RogueByteList_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueObject_trace,
  RogueString_LogicalTable_trace,
  RogueFile_trace,
  RogueParser_trace,
  RogueTokenList_trace,
  RogueLineReader_trace,
  RogueObject_trace,
  RogueTypeParameterList_trace,
  RogueTypeParameter_trace,
  RogueAugmentList_trace,
  RogueAugment_trace,
  RogueArray_trace,
  RogueString_TokenTypeTable_trace,
  RogueLiteralCharacterToken_trace,
  RogueLiteralLongToken_trace,
  RogueLiteralIntegerToken_trace,
  RogueLiteralRealToken_trace,
  RogueLiteralStringToken_trace,
  RogueArray_trace,
  RogueString_TypeSpecializerTable_trace,
  RogueArray_trace,
  RogueTypeSpecializer_trace,
  RogueTableEntry_of_String_TemplateList_trace,
  RogueString_TemplateTableEntry_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_AugmentListList_trace,
  RogueString_AugmentListTableEntry_trace,
  RogueArray_trace,
  RogueCmdLabelList_trace,
  RogueString_CmdLabelTable_trace,
  RogueObject_trace,
  RogueCloneMethodArgs_trace,
  RogueCmdAccess_trace,
  RogueCmdArgs_trace,
  RogueCmdAssign_trace,
  RogueScope_trace,
  RogueCmdControlStructureList_trace,
  RogueCmdControlStructure_trace,
  RogueCmdLiteralThis_trace,
  RogueCmdThisContext_trace,
  RogueArray_trace,
  RogueCmdGenericLoop_trace,
  RogueCmdLiteralInteger_trace,
  RogueCmdLiteral_trace,
  RogueCmdCompareNE_trace,
  RogueCmdComparison_trace,
  RogueCmdBinary_trace,
  RogueTaskArgs_trace,
  RogueArray_trace,
  RogueCmdTaskControl_trace,
  RogueCmdTaskControlSection_trace,
  RogueTableEntry_of_String_MethodListList_trace,
  RogueString_MethodListTableEntry_trace,
  RogueArray_trace,
  RogueString_CmdTable_trace,
  RogueString_PropertyTable_trace,
  RogueCmdLiteralNull_trace,
  RogueCmdCreateCompound_trace,
  RogueCmdLiteralLogical_trace,
  RogueCmdLiteralString_trace,
  RogueCmdWriteGlobal_trace,
  RogueCmdWriteProperty_trace,
  RogueTableEntry_of_String_TypeList_trace,
  RogueString_TypeTableEntry_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_IntegerList_trace,
  RogueString_IntegerTableEntry_trace,
  RogueArray_trace,
  RogueCmdCastToType_trace,
  RogueCmdTypeOperator_trace,
  RogueCmdLogicalize_trace,
  RogueCmdUnary_trace,
  RogueCmdCreateOptionalValue_trace,
  RogueTableEntry_of_String_MethodList_trace,
  RogueString_MethodTableEntry_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_LogicalList_trace,
  RogueString_LogicalTableEntry_trace,
  RogueArray_trace,
  RogueFileReader_trace,
  RogueFileWriter_trace,
  RogueTokenReader_trace,
  RogueTokenizer_trace,
  RogueParseReader_trace,
  RoguePreprocessor_trace,
  RogueCmdAdd_trace,
  RogueCmdIf_trace,
  RogueCmdWhich_trace,
  RogueCmdContingent_trace,
  RogueCmdTry_trace,
  RogueCmdAwait_trace,
  RogueCmdYield_trace,
  RogueCmdThrow_trace,
  RogueCmdTrace_trace,
  RogueCmdEscape_trace,
  RogueCmdNextIteration_trace,
  RogueCmdNecessary_trace,
  RogueCmdSufficient_trace,
  RogueCmdAdjust_trace,
  RogueCmdOpWithAssign_trace,
  RogueCmdWhichCaseList_trace,
  RogueCmdWhichCase_trace,
  RogueCmdCatchList_trace,
  RogueCmdCatch_trace,
  RogueCmdLocalDeclaration_trace,
  RogueCmdAdjustLocal_trace,
  RogueCmdReadLocal_trace,
  RogueCmdCompareLE_trace,
  RogueCmdRange_trace,
  RogueCmdLocalOpWithAssign_trace,
  RogueCmdResolvedOpWithAssign_trace,
  RogueCmdForEach_trace,
  RogueCmdRangeUpTo_trace,
  RogueCmdLogicalXor_trace,
  RogueCmdBinaryLogical_trace,
  RogueCmdLogicalOr_trace,
  RogueCmdLogicalAnd_trace,
  RogueCmdCompareEQ_trace,
  RogueCmdCompareIs_trace,
  RogueCmdCompareIsNot_trace,
  RogueCmdCompareLT_trace,
  RogueCmdCompareGT_trace,
  RogueCmdCompareGE_trace,
  RogueCmdInstanceOf_trace,
  RogueCmdLogicalNot_trace,
  RogueCmdBitwiseXor_trace,
  RogueCmdBitwiseOp_trace,
  RogueCmdBitwiseOr_trace,
  RogueCmdBitwiseAnd_trace,
  RogueCmdBitwiseShiftLeft_trace,
  RogueCmdBitwiseShiftRight_trace,
  RogueCmdBitwiseShiftRightX_trace,
  RogueCmdSubtract_trace,
  RogueCmdMultiply_trace,
  RogueCmdDivide_trace,
  RogueCmdMod_trace,
  RogueCmdPower_trace,
  RogueCmdNegate_trace,
  RogueCmdBitwiseNot_trace,
  RogueCmdGetOptionalValue_trace,
  RogueCmdElementAccess_trace,
  RogueCmdConvertToType_trace,
  RogueCmdCreateCallback_trace,
  RogueCmdAs_trace,
  RogueCmdDefaultValue_trace,
  RogueCmdFormattedString_trace,
  RogueCmdLiteralReal_trace,
  RogueCmdLiteralLong_trace,
  RogueCmdLiteralCharacter_trace,
  RogueCmdCreateList_trace,
  RogueCmdCallPriorMethod_trace,
  RogueFnParamList_trace,
  RogueFnParam_trace,
  RogueFnArgList_trace,
  RogueFnArg_trace,
  RogueCmdCreateFunction_trace,
  RogueCmdNativeCode_trace,
  RogueTableEntry_of_String_TokenTypeList_trace,
  RogueString_TokenTypeTableEntry_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_TypeSpecializerList_trace,
  RogueString_TypeSpecializerTableEntry_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_CmdLabelList_trace,
  RogueString_CmdLabelTableEntry_trace,
  RogueArray_trace,
  RogueMacroArgs_trace,
  RogueCmdReadSingleton_trace,
  RogueCmdCreateArray_trace,
  RogueCmdCallRoutine_trace,
  RogueCmdCall_trace,
  RogueCmdCreateObject_trace,
  RogueCmdReadGlobal_trace,
  RogueCmdReadProperty_trace,
  RogueCmdLogicalizeOptionalValue_trace,
  RogueCmdWriteLocal_trace,
  RogueCmdOpAssignGlobal_trace,
  RogueCmdOpAssignProperty_trace,
  RogueCmdCallInlineNativeRoutine_trace,
  RogueCmdCallInlineNative_trace,
  RogueCmdCallNativeRoutine_trace,
  RogueCmdReadArrayCount_trace,
  RogueCmdCallInlineNativeMethod_trace,
  RogueCmdCallNativeMethod_trace,
  RogueCmdCallAspectMethod_trace,
  RogueCmdCallDynamicMethod_trace,
  RogueCmdCallMethod_trace,
  RogueCandidateMethods_trace,
  RogueArray_trace,
  RogueCmdTaskControlSectionList_trace,
  RogueCmdBlock_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_CmdList_trace,
  RogueString_CmdTableEntry_trace,
  RogueArray_trace,
  RogueTableEntry_of_String_PropertyList_trace,
  RogueString_PropertyTableEntry_trace,
  RogueArray_trace,
  RogueDirectiveTokenType_trace,
  RogueStructuralDirectiveTokenType_trace,
  RogueEOLTokenType_trace,
  RogueStructureTokenType_trace,
  RogueOpWithAssignTokenType_trace,
  RogueEOLToken_trace,
  RogueString_TokenListTable_trace,
  RoguePreprocessorTokenReader_trace,
  RogueArray_trace,
  RogueCmdSwitch_trace,
  RogueArray_trace,
  RogueCmdReadArrayElement_trace,
  RogueCmdWriteArrayElement_trace,
  RogueCmdConvertToPrimitiveType_trace,
  RogueArray_trace,
  RogueArray_trace,
  RogueCmdAdjustProperty_trace,
  RogueCmdCallStaticMethod_trace,
  RogueTableEntry_of_String_TokenListList_trace,
  RogueString_TokenListTableEntry_trace,
  RogueArray_trace
};

void Rogue_trace()
{
  void* link;
  int i;

  // Trace GLOBALS
  if ((link=RogueStringBuilder_work_bytes)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_lookup)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_define)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_include)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_includeNativeCode)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_includeNativeHeader)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_if)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_elseIf)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_else)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_endIf)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_directive_requisite)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_placeholder_id)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_begin_augment_tokens)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_augment)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_case)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_catch)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_class)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_DEFINITIONS)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_else)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_elseIf)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endAugment)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endClass)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endContingent)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endForEach)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endFunction)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endIf)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endLoop)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endTry)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endWhich)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_endWhile)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_ENUMERATE)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_GLOBALS)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_macro)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_method)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_METHODS)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_nativeCode)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_nativeHeader)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_others)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_PROPERTIES)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_routine)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_ROUTINES)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_satisfied)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_unsatisfied)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_with)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_close_brace)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_close_bracket)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_close_comment)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_close_paren)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_close_specialize)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_eol)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_await)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_contingent)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_escapeContingent)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_escapeForEach)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_escapeIf)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_escapeLoop)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_escapeTry)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_escapeWhich)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_escapeWhile)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_forEach)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_function)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_if)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_in)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_is)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_isNot)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_local)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_loop)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_native)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_necessary)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_nextIteration)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_noAction)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_null)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_of)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_return)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_step)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_sufficient)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_throw)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_trace)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_try)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_which)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_while)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_yield)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_identifier)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_type_identifier)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_literal_character)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_literal_integer)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_literal_long)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_literal_real)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_literal_string)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_and)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_as)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_false)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_instanceOf)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_meta)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_not)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_notInstanceOf)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_or)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_pi)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_prior)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_this)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_true)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_keyword_xor)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_ampersand)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_ampersand_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_arrow)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_at)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_backslash)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_caret)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_caret_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_colon)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_colon_colon)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_comma)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_compare)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_dot)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_dot_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_downToGreaterThan)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_empty_braces)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_empty_brackets)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_eq)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_exclamation_point)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_fat_arrow)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_ge)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_gt)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_le)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_lt)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_minus)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_minus_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_minus_minus)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_ne)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_open_brace)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_open_bracket)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_open_paren)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_open_specialize)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_percent)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_percent_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_plus)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_plus_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_plus_plus)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_question_mark)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_semicolon)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_shift_left)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_shift_right)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_shift_right_x)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_slash)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_slash_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_tilde)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_tilde_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_times)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_times_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_upTo)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_upToLessThan)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_vertical_bar)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_vertical_bar_equals)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueTokenType_symbol_double_vertical_bar)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueSystem_command_line_arguments)) ((RogueObject*)link)->type->trace_fn( link );
  if ((link=RogueSystem_executable_filepath)) RogueString_trace( link );
  if ((link=RoguePreprocessor_definitions)) ((RogueObject*)link)->type->trace_fn( link );

  // Trace singletons
  for (i=Rogue_type_count; --i>=0; )
  {
    RogueType* type = &Rogue_types[i];
    if (type->_singleton)
    {
      type->trace_fn( type->_singleton );
    }
  }
}

void* Rogue_dynamic_method_table[] =
{
  NULL, // Character[]
  (void*) (ROGUEM0) RogueCharacterList__to_String,
  (void*) (ROGUEM0) RogueCharacterList__type_name,
  (void*) (ROGUEM1) RogueCharacterList__init_object,
  NULL, // GenericList
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM3) RogueGenericList__type_name,
  (void*) (ROGUEM4) RogueGenericList__init_object,
  NULL, // StringBuilder
  (void*) (ROGUEM5) RogueStringBuilder__to_String,
  (void*) (ROGUEM5) RogueStringBuilder__type_name,
  NULL, // String[]
  (void*) (ROGUEM6) RogueStringList__to_String,
  (void*) (ROGUEM6) RogueStringList__type_name,
  (void*) (ROGUEM7) RogueStringList__init_object,
  NULL, // StringReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM9) RogueStringReader__type_name,
  (void*) (ROGUEM10) RogueStringReader__has_another,
  (void*) (ROGUEM11) RogueStringReader__read,
  NULL, // Reader<<Character>>
  NULL, // Global
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM12) RogueGlobal__type_name,
  NULL, // Console
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM13) RogueConsole__type_name,
  NULL, // RogueC
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM14) RogueRogueC__type_name,
  NULL, // Error
  (void*) (ROGUEM15) RogueError__to_String,
  (void*) (ROGUEM15) RogueError__type_name,
  (void*) (ROGUEM16) RogueError__init_object,
  NULL, // Program
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM17) RogueProgram__type_name,
  NULL, // Template[]
  (void*) (ROGUEM18) RogueTemplateList__to_String,
  (void*) (ROGUEM18) RogueTemplateList__type_name,
  (void*) (ROGUEM19) RogueTemplateList__init_object,
  NULL, // Template
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM20) RogueTemplate__type_name,
  NULL, // Table<<String,Template>>
  (void*) (ROGUEM21) RogueString_TemplateTable__to_String,
  (void*) (ROGUEM21) RogueString_TemplateTable__type_name,
  NULL, // Table<<String,Augment[]>>
  (void*) (ROGUEM22) RogueString_AugmentListTable__to_String,
  (void*) (ROGUEM22) RogueString_AugmentListTable__type_name,
  NULL, // RequisiteItem[]
  (void*) (ROGUEM23) RogueRequisiteItemList__to_String,
  (void*) (ROGUEM23) RogueRequisiteItemList__type_name,
  (void*) (ROGUEM24) RogueRequisiteItemList__init_object,
  NULL, // RequisiteItem
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM25) RogueRequisiteItem__type_name,
  NULL, // Method
  (void*) (ROGUEM26) RogueMethod__to_String,
  (void*) (ROGUEM26) RogueMethod__type_name,
  NULL, // Table<<String,Method[]>>
  (void*) (ROGUEM27) RogueString_MethodListTable__to_String,
  (void*) (ROGUEM27) RogueString_MethodListTable__type_name,
  NULL, // Type[]
  (void*) (ROGUEM28) RogueTypeList__to_String,
  (void*) (ROGUEM28) RogueTypeList__type_name,
  (void*) (ROGUEM29) RogueTypeList__init_object,
  NULL, // Type
  (void*) (ROGUEM30) RogueType__to_String,
  (void*) (ROGUEM30) RogueType__type_name,
  NULL, // Table<<String,Type>>
  (void*) (ROGUEM31) RogueString_TypeTable__to_String,
  (void*) (ROGUEM31) RogueString_TypeTable__type_name,
  NULL, // Table<<String,Integer>>
  (void*) (ROGUEM32) RogueString_IntegerTable__to_String,
  (void*) (ROGUEM32) RogueString_IntegerTable__type_name,
  NULL, // Token
  (void*) (ROGUEM33) RogueToken__to_String,
  (void*) (ROGUEM33) RogueToken__type_name,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM34) RogueToken__to_Character,
  (void*) (ROGUEM35) RogueToken__to_Integer,
  (void*) (ROGUEM36) RogueToken__to_Long,
  (void*) (ROGUEM37) RogueToken__to_Real,
  (void*) (ROGUEM38) RogueToken__to_Type,
  (void*) (ROGUEM39) RogueToken__init_object,
  NULL, // Attributes
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM40) RogueAttributes__type_name,
  NULL, // Cmd
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM41) RogueCmd__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM42) RogueCmd__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM53) RogueCmd__init_object,
  NULL, // CmdReturn
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM54) RogueCmdReturn__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM55) RogueCmdReturn__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM56) RogueCmdReturn__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM57) RogueCmdReturn__trace_used_code,
  (void*) (ROGUEM58) Rogue_CmdReturn__type,
  (void*) (ROGUEM59) RogueCmdReturn__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM60) RogueCmdReturn__init_object,
  NULL, // CmdStatement
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM61) RogueCmdStatement__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM42) RogueCmd__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM62) RogueCmdStatement__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM63) RogueCmdStatement__init_object,
  NULL, // CmdStatementList
  (void*) (ROGUEM64) RogueCmdList__to_String,
  (void*) (ROGUEM65) RogueCmdStatementList__type_name,
  (void*) (ROGUEM66) RogueCmdStatementList__init_object,
  (void*) (ROGUEM66) RogueCmdStatementList__init,
  (void*) (ROGUEM67) RogueCmdStatementList__init__Integer,
  NULL, // Cmd[]
  (void*) (ROGUEM64) RogueCmdList__to_String,
  (void*) (ROGUEM64) RogueCmdList__type_name,
  (void*) (ROGUEM68) RogueCmdList__init_object,
  (void*) (ROGUEM68) RogueCmdList__init,
  (void*) (ROGUEM69) RogueCmdList__init__Integer,
  NULL, // TokenType
  (void*) (ROGUEM70) RogueTokenType__to_String,
  (void*) (ROGUEM70) RogueTokenType__type_name,
  NULL,
  (void*) (ROGUEM71) RogueTokenType__create_token__String_Integer_Integer,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM72) RogueTokenType__create_token__String_Integer_Integer_String,
  NULL,
  (void*) (ROGUEM73) RogueTokenType__is_directive,
  (void*) (ROGUEM73) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM73) RogueTokenType__is_structure,
  NULL,
  NULL,
  (void*) (ROGUEM74) RogueTokenType__init_object,
  NULL, // CmdLabel
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM75) RogueCmdLabel__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM76) RogueCmdLabel__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM77) RogueCmdLabel__requires_semicolon,
  (void*) (ROGUEM78) RogueCmdLabel__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM79) RogueCmdLabel__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM80) RogueCmdLabel__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM81) RogueCmdLabel__init_object,
  NULL, // RogueError
  (void*) (ROGUEM82) RogueRogueError__to_String,
  (void*) (ROGUEM82) RogueRogueError__type_name,
  (void*) (ROGUEM83) RogueRogueError__init_object,
  NULL, // Method[]
  (void*) (ROGUEM84) RogueMethodList__to_String,
  (void*) (ROGUEM84) RogueMethodList__type_name,
  (void*) (ROGUEM85) RogueMethodList__init_object,
  NULL, // CPPWriter
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM86) RogueCPPWriter__type_name,
  NULL, // Property[]
  (void*) (ROGUEM87) RoguePropertyList__to_String,
  (void*) (ROGUEM87) RoguePropertyList__type_name,
  (void*) (ROGUEM88) RoguePropertyList__init_object,
  NULL, // Property
  (void*) (ROGUEM89) RogueProperty__to_String,
  (void*) (ROGUEM89) RogueProperty__type_name,
  NULL, // Table<<String,Method>>
  (void*) (ROGUEM90) RogueString_MethodTable__to_String,
  (void*) (ROGUEM90) RogueString_MethodTable__type_name,
  NULL, // Local[]
  (void*) (ROGUEM91) RogueLocalList__to_String,
  (void*) (ROGUEM91) RogueLocalList__type_name,
  (void*) (ROGUEM92) RogueLocalList__init_object,
  NULL, // Local
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM93) RogueLocal__type_name,
  NULL, // Integer[]
  (void*) (ROGUEM94) RogueIntegerList__to_String,
  (void*) (ROGUEM94) RogueIntegerList__type_name,
  (void*) (ROGUEM95) RogueIntegerList__init_object,
  NULL, // Byte[]
  (void*) (ROGUEM96) RogueByteList__to_String,
  (void*) (ROGUEM96) RogueByteList__type_name,
  (void*) (ROGUEM97) RogueByteList__init_object,
  NULL, // Math
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM98) RogueMath__type_name,
  NULL, // System
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM99) RogueSystem__type_name,
  NULL, // Table<<String,Logical>>
  (void*) (ROGUEM100) RogueString_LogicalTable__to_String,
  (void*) (ROGUEM100) RogueString_LogicalTable__type_name,
  NULL, // File
  (void*) (ROGUEM101) RogueFile__to_String,
  (void*) (ROGUEM101) RogueFile__type_name,
  NULL, // Parser
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM102) RogueParser__type_name,
  NULL, // Token[]
  (void*) (ROGUEM103) RogueTokenList__to_String,
  (void*) (ROGUEM103) RogueTokenList__type_name,
  (void*) (ROGUEM104) RogueTokenList__init_object,
  NULL, // LineReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM105) RogueLineReader__type_name,
  (void*) (ROGUEM106) RogueLineReader__has_another,
  (void*) (ROGUEM105) RogueLineReader__read,
  NULL, // TypeParameter[]
  (void*) (ROGUEM107) RogueTypeParameterList__to_String,
  (void*) (ROGUEM107) RogueTypeParameterList__type_name,
  (void*) (ROGUEM108) RogueTypeParameterList__init_object,
  NULL, // TypeParameter
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM109) RogueTypeParameter__type_name,
  NULL, // Augment[]
  (void*) (ROGUEM110) RogueAugmentList__to_String,
  (void*) (ROGUEM110) RogueAugmentList__type_name,
  (void*) (ROGUEM111) RogueAugmentList__init_object,
  NULL, // Augment
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM112) RogueAugment__type_name,
  NULL, // Table<<String,TokenType>>
  (void*) (ROGUEM113) RogueString_TokenTypeTable__to_String,
  (void*) (ROGUEM113) RogueString_TokenTypeTable__type_name,
  NULL, // LiteralCharacterToken
  (void*) (ROGUEM114) RogueLiteralCharacterToken__to_String,
  (void*) (ROGUEM114) RogueLiteralCharacterToken__type_name,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM115) RogueLiteralCharacterToken__to_Character,
  (void*) (ROGUEM35) RogueToken__to_Integer,
  (void*) (ROGUEM36) RogueToken__to_Long,
  (void*) (ROGUEM37) RogueToken__to_Real,
  (void*) (ROGUEM38) RogueToken__to_Type,
  (void*) (ROGUEM116) RogueLiteralCharacterToken__init_object,
  NULL, // LiteralLongToken
  (void*) (ROGUEM117) RogueLiteralLongToken__to_String,
  (void*) (ROGUEM117) RogueLiteralLongToken__type_name,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM34) RogueToken__to_Character,
  (void*) (ROGUEM118) RogueLiteralLongToken__to_Integer,
  (void*) (ROGUEM119) RogueLiteralLongToken__to_Long,
  (void*) (ROGUEM120) RogueLiteralLongToken__to_Real,
  (void*) (ROGUEM38) RogueToken__to_Type,
  (void*) (ROGUEM121) RogueLiteralLongToken__init_object,
  NULL, // LiteralIntegerToken
  (void*) (ROGUEM122) RogueLiteralIntegerToken__to_String,
  (void*) (ROGUEM122) RogueLiteralIntegerToken__type_name,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM34) RogueToken__to_Character,
  (void*) (ROGUEM123) RogueLiteralIntegerToken__to_Integer,
  (void*) (ROGUEM36) RogueToken__to_Long,
  (void*) (ROGUEM124) RogueLiteralIntegerToken__to_Real,
  (void*) (ROGUEM38) RogueToken__to_Type,
  (void*) (ROGUEM125) RogueLiteralIntegerToken__init_object,
  NULL, // LiteralRealToken
  (void*) (ROGUEM126) RogueLiteralRealToken__to_String,
  (void*) (ROGUEM126) RogueLiteralRealToken__type_name,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM34) RogueToken__to_Character,
  (void*) (ROGUEM127) RogueLiteralRealToken__to_Integer,
  (void*) (ROGUEM36) RogueToken__to_Long,
  (void*) (ROGUEM128) RogueLiteralRealToken__to_Real,
  (void*) (ROGUEM38) RogueToken__to_Type,
  (void*) (ROGUEM129) RogueLiteralRealToken__init_object,
  NULL, // LiteralStringToken
  (void*) (ROGUEM130) RogueLiteralStringToken__to_String,
  (void*) (ROGUEM130) RogueLiteralStringToken__type_name,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM34) RogueToken__to_Character,
  (void*) (ROGUEM35) RogueToken__to_Integer,
  (void*) (ROGUEM36) RogueToken__to_Long,
  (void*) (ROGUEM37) RogueToken__to_Real,
  (void*) (ROGUEM38) RogueToken__to_Type,
  (void*) (ROGUEM131) RogueLiteralStringToken__init_object,
  NULL, // Table<<String,TypeSpecializer>>
  (void*) (ROGUEM132) RogueString_TypeSpecializerTable__to_String,
  (void*) (ROGUEM132) RogueString_TypeSpecializerTable__type_name,
  NULL, // TypeSpecializer
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM133) RogueTypeSpecializer__type_name,
  NULL, // TableEntry<<String,Template>>[]
  (void*) (ROGUEM134) RogueString_TemplateTableEntryList__to_String,
  (void*) (ROGUEM134) RogueString_TemplateTableEntryList__type_name,
  (void*) (ROGUEM135) RogueString_TemplateTableEntryList__init_object,
  NULL, // TableEntry<<String,Template>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM136) RogueString_TemplateTableEntry__type_name,
  NULL, // TableEntry<<String,Augment[]>>[]
  (void*) (ROGUEM137) RogueString_AugmentListTableEntryList__to_String,
  (void*) (ROGUEM137) RogueString_AugmentListTableEntryList__type_name,
  (void*) (ROGUEM138) RogueString_AugmentListTableEntryList__init_object,
  NULL, // TableEntry<<String,Augment[]>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM139) RogueString_AugmentListTableEntry__type_name,
  NULL, // CmdLabel[]
  (void*) (ROGUEM140) RogueCmdLabelList__to_String,
  (void*) (ROGUEM140) RogueCmdLabelList__type_name,
  (void*) (ROGUEM141) RogueCmdLabelList__init_object,
  NULL, // Table<<String,CmdLabel>>
  (void*) (ROGUEM142) RogueString_CmdLabelTable__to_String,
  (void*) (ROGUEM142) RogueString_CmdLabelTable__type_name,
  NULL, // CloneArgs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM143) RogueCloneArgs__type_name,
  (void*) (ROGUEM144) RogueCloneArgs__register_label__CmdLabel,
  (void*) (ROGUEM145) RogueCloneArgs__init_object,
  NULL, // CloneMethodArgs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM146) RogueCloneMethodArgs__type_name,
  (void*) (ROGUEM147) RogueCloneMethodArgs__register_label__CmdLabel,
  (void*) (ROGUEM148) RogueCloneMethodArgs__init_object,
  NULL, // CmdAccess
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM149) RogueCmdAccess__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM150) RogueCmdAccess__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM151) Rogue_CmdAccess__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM152) RogueCmdAccess__resolve__Scope,
  (void*) (ROGUEM153) RogueCmdAccess__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM154) RogueCmdAccess__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM151) Rogue_CmdAccess__type,
  (void*) (ROGUEM155) RogueCmdAccess__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM156) RogueCmdAccess__init_object,
  NULL, // CmdArgs
  (void*) (ROGUEM64) RogueCmdList__to_String,
  (void*) (ROGUEM157) RogueCmdArgs__type_name,
  (void*) (ROGUEM158) RogueCmdArgs__init_object,
  (void*) (ROGUEM158) RogueCmdArgs__init,
  (void*) (ROGUEM159) RogueCmdArgs__init__Integer,
  NULL, // CmdAssign
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM160) RogueCmdAssign__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM161) RogueCmdAssign__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM162) RogueCmdAssign__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM163) RogueCmdAssign__init_object,
  NULL, // Scope
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM164) RogueScope__type_name,
  NULL, // CmdControlStructure[]
  (void*) (ROGUEM165) RogueCmdControlStructureList__to_String,
  (void*) (ROGUEM165) RogueCmdControlStructureList__type_name,
  (void*) (ROGUEM166) RogueCmdControlStructureList__init_object,
  NULL, // CmdControlStructure
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM167) RogueCmdControlStructure__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM168) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM42) RogueCmd__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM62) RogueCmdStatement__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM169) RogueCmdControlStructure__init_object,
  (void*) (ROGUEM170) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  NULL, // CmdLiteralThis
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM171) RogueCmdLiteralThis__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM172) RogueCmdLiteralThis__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM173) Rogue_CmdThisContext__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM174) RogueCmdLiteralThis__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM175) RogueCmdLiteralThis__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM176) RogueCmdThisContext__trace_used_code,
  (void*) (ROGUEM173) Rogue_CmdThisContext__type,
  (void*) (ROGUEM177) RogueCmdThisContext__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM178) RogueCmdLiteralThis__init_object,
  NULL, // CmdThisContext
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM179) RogueCmdThisContext__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM180) RogueCmdThisContext__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM173) Rogue_CmdThisContext__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM176) RogueCmdThisContext__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM181) RogueCmdThisContext__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM176) RogueCmdThisContext__trace_used_code,
  (void*) (ROGUEM173) Rogue_CmdThisContext__type,
  (void*) (ROGUEM177) RogueCmdThisContext__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM182) RogueCmdThisContext__init_object,
  NULL, // CmdGenericLoop
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM183) RogueCmdGenericLoop__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM184) RogueCmdGenericLoop__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM168) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM185) RogueCmdGenericLoop__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM186) RogueCmdGenericLoop__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM187) RogueCmdGenericLoop__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM188) RogueCmdGenericLoop__init_object,
  (void*) (ROGUEM170) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  NULL, // CmdLiteralInteger
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM189) RogueCmdLiteralInteger__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM190) RogueCmdLiteralInteger__cast_to__Type,
  (void*) (ROGUEM191) RogueCmdLiteralInteger__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM192) Rogue_CmdLiteral__implicit_type,
  (void*) (ROGUEM193) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM194) RogueCmdLiteralInteger__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM195) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM196) Rogue_CmdLiteralInteger__type,
  (void*) (ROGUEM197) RogueCmdLiteralInteger__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM198) RogueCmdLiteralInteger__init_object,
  NULL, // CmdLiteral
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM199) RogueCmdLiteral__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM192) Rogue_CmdLiteral__implicit_type,
  (void*) (ROGUEM193) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM42) RogueCmd__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM195) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM200) RogueCmdLiteral__init_object,
  NULL, // CmdCompareNE
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM201) RogueCmdCompareNE__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM202) RogueCmdCompareNE__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM203) RogueCmdCompareNE__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM204) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM206) Rogue_CmdComparison__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM208) RogueCmdCompareNE__init_object,
  NULL,
  (void*) (ROGUEM209) RogueCmdBinary__fn_name,
  (void*) (ROGUEM210) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM211) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM212) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM201) RogueCmdCompareNE__symbol,
  (void*) (ROGUEM209) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM214) RogueCmdCompareNE__resolve_for_reference__Scope_Type_Type_Logical,
  NULL, // CmdComparison
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM215) RogueCmdComparison__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM204) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM206) Rogue_CmdComparison__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM216) RogueCmdComparison__init_object,
  NULL,
  (void*) (ROGUEM209) RogueCmdBinary__fn_name,
  (void*) (ROGUEM210) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM211) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM212) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM209) RogueCmdBinary__symbol,
  (void*) (ROGUEM209) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM217) RogueCmdComparison__resolve_for_reference__Scope_Type_Type_Logical,
  NULL, // CmdBinary
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM209) RogueCmdBinary__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM204) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM218) Rogue_CmdBinary__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM219) RogueCmdBinary__init_object,
  NULL,
  (void*) (ROGUEM209) RogueCmdBinary__fn_name,
  (void*) (ROGUEM220) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM212) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM209) RogueCmdBinary__symbol,
  (void*) (ROGUEM209) RogueCmdBinary__cpp_symbol,
  NULL, // TaskArgs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM221) RogueTaskArgs__type_name,
  (void*) (ROGUEM144) RogueCloneArgs__register_label__CmdLabel,
  (void*) (ROGUEM222) RogueTaskArgs__init_object,
  NULL, // CmdTaskControl
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM223) RogueCmdTaskControl__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM224) RogueCmdTaskControl__requires_semicolon,
  (void*) (ROGUEM225) RogueCmdTaskControl__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM226) RogueCmdTaskControl__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM227) RogueCmdTaskControl__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM228) RogueCmdTaskControl__init_object,
  NULL, // CmdTaskControlSection
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM229) RogueCmdTaskControlSection__type_name,
  NULL, // TableEntry<<String,Method[]>>[]
  (void*) (ROGUEM230) RogueString_MethodListTableEntryList__to_String,
  (void*) (ROGUEM230) RogueString_MethodListTableEntryList__type_name,
  (void*) (ROGUEM231) RogueString_MethodListTableEntryList__init_object,
  NULL, // TableEntry<<String,Method[]>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM232) RogueString_MethodListTableEntry__type_name,
  NULL, // Table<<String,Cmd>>
  (void*) (ROGUEM233) RogueString_CmdTable__to_String,
  (void*) (ROGUEM233) RogueString_CmdTable__type_name,
  NULL, // Table<<String,Property>>
  (void*) (ROGUEM234) RogueString_PropertyTable__to_String,
  (void*) (ROGUEM234) RogueString_PropertyTable__type_name,
  NULL, // CmdLiteralNull
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM235) RogueCmdLiteralNull__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM236) RogueCmdLiteralNull__cast_to__Type,
  (void*) (ROGUEM237) RogueCmdLiteralNull__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM192) Rogue_CmdLiteral__implicit_type,
  (void*) (ROGUEM193) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM238) RogueCmdLiteralNull__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM195) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM239) Rogue_CmdLiteralNull__type,
  (void*) (ROGUEM240) RogueCmdLiteralNull__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM241) RogueCmdLiteralNull__init_object,
  NULL, // CmdCreateCompound
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM242) RogueCmdCreateCompound__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM243) RogueCmdCreateCompound__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM244) RogueCmdCreateCompound__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM245) RogueCmdCreateCompound__trace_used_code,
  (void*) (ROGUEM246) Rogue_CmdCreateCompound__type,
  (void*) (ROGUEM247) RogueCmdCreateCompound__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM248) RogueCmdCreateCompound__init_object,
  NULL, // CmdLiteralLogical
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM249) RogueCmdLiteralLogical__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM250) RogueCmdLiteralLogical__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM192) Rogue_CmdLiteral__implicit_type,
  (void*) (ROGUEM193) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM251) RogueCmdLiteralLogical__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM195) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM252) Rogue_CmdLiteralLogical__type,
  (void*) (ROGUEM253) RogueCmdLiteralLogical__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM254) RogueCmdLiteralLogical__init_object,
  NULL, // CmdLiteralString
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM255) RogueCmdLiteralString__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM256) RogueCmdLiteralString__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM192) Rogue_CmdLiteral__implicit_type,
  (void*) (ROGUEM193) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM257) RogueCmdLiteralString__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM258) RogueCmdLiteralString__trace_used_code,
  (void*) (ROGUEM259) Rogue_CmdLiteralString__type,
  (void*) (ROGUEM260) RogueCmdLiteralString__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM261) RogueCmdLiteralString__init_object,
  NULL, // CmdWriteGlobal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM262) RogueCmdWriteGlobal__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM263) RogueCmdWriteGlobal__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM264) RogueCmdWriteGlobal__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM265) RogueCmdWriteGlobal__trace_used_code,
  (void*) (ROGUEM266) Rogue_CmdWriteGlobal__type,
  (void*) (ROGUEM267) RogueCmdWriteGlobal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM268) RogueCmdWriteGlobal__init_object,
  NULL, // CmdWriteProperty
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM269) RogueCmdWriteProperty__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM270) RogueCmdWriteProperty__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM271) RogueCmdWriteProperty__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM272) RogueCmdWriteProperty__trace_used_code,
  (void*) (ROGUEM273) Rogue_CmdWriteProperty__type,
  (void*) (ROGUEM274) RogueCmdWriteProperty__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM275) RogueCmdWriteProperty__init_object,
  NULL, // TableEntry<<String,Type>>[]
  (void*) (ROGUEM276) RogueString_TypeTableEntryList__to_String,
  (void*) (ROGUEM276) RogueString_TypeTableEntryList__type_name,
  (void*) (ROGUEM277) RogueString_TypeTableEntryList__init_object,
  NULL, // TableEntry<<String,Type>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM278) RogueString_TypeTableEntry__type_name,
  NULL, // TableEntry<<String,Integer>>[]
  (void*) (ROGUEM279) RogueString_IntegerTableEntryList__to_String,
  (void*) (ROGUEM279) RogueString_IntegerTableEntryList__type_name,
  (void*) (ROGUEM280) RogueString_IntegerTableEntryList__init_object,
  NULL, // TableEntry<<String,Integer>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM281) RogueString_IntegerTableEntry__type_name,
  NULL, // CmdCastToType
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM282) RogueCmdCastToType__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM283) RogueCmdCastToType__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM284) RogueCmdCastToType__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM285) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM286) Rogue_CmdTypeOperator__type,
  (void*) (ROGUEM287) RogueCmdCastToType__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM288) RogueCmdCastToType__init_object,
  NULL, // CmdTypeOperator
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM289) RogueCmdTypeOperator__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM42) RogueCmd__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM285) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM286) Rogue_CmdTypeOperator__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM290) RogueCmdTypeOperator__init_object,
  NULL, // CmdLogicalize
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM291) RogueCmdLogicalize__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM292) RogueCmdLogicalize__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM293) RogueCmdLogicalize__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM294) RogueCmdUnary__trace_used_code,
  (void*) (ROGUEM295) Rogue_CmdLogicalize__type,
  (void*) (ROGUEM296) RogueCmdUnary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM297) RogueCmdLogicalize__init_object,
  NULL,
  (void*) (ROGUEM291) RogueCmdLogicalize__prefix_symbol,
  (void*) (ROGUEM293) RogueCmdLogicalize__resolve_for_literal_operand__Scope,
  NULL,
  (void*) (ROGUEM291) RogueCmdLogicalize__suffix_symbol,
  (void*) (ROGUEM291) RogueCmdLogicalize__cpp_prefix_symbol,
  (void*) (ROGUEM291) RogueCmdLogicalize__cpp_suffix_symbol,
  NULL, // CmdUnary
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM298) RogueCmdUnary__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM299) RogueCmdUnary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM294) RogueCmdUnary__trace_used_code,
  (void*) (ROGUEM300) Rogue_CmdUnary__type,
  (void*) (ROGUEM296) RogueCmdUnary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM301) RogueCmdUnary__init_object,
  NULL,
  (void*) (ROGUEM298) RogueCmdUnary__prefix_symbol,
  (void*) (ROGUEM299) RogueCmdUnary__resolve_for_literal_operand__Scope,
  NULL,
  (void*) (ROGUEM298) RogueCmdUnary__suffix_symbol,
  (void*) (ROGUEM298) RogueCmdUnary__cpp_prefix_symbol,
  (void*) (ROGUEM298) RogueCmdUnary__cpp_suffix_symbol,
  NULL, // CmdCreateOptionalValue
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM302) RogueCmdCreateOptionalValue__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM303) RogueCmdCreateOptionalValue__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM304) RogueCmdCreateOptionalValue__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM305) RogueCmdCreateOptionalValue__trace_used_code,
  (void*) (ROGUEM306) Rogue_CmdCreateOptionalValue__type,
  (void*) (ROGUEM307) RogueCmdCreateOptionalValue__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM308) RogueCmdCreateOptionalValue__init_object,
  NULL, // TableEntry<<String,Method>>[]
  (void*) (ROGUEM309) RogueString_MethodTableEntryList__to_String,
  (void*) (ROGUEM309) RogueString_MethodTableEntryList__type_name,
  (void*) (ROGUEM310) RogueString_MethodTableEntryList__init_object,
  NULL, // TableEntry<<String,Method>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM311) RogueString_MethodTableEntry__type_name,
  NULL, // TableEntry<<String,Logical>>[]
  (void*) (ROGUEM312) RogueString_LogicalTableEntryList__to_String,
  (void*) (ROGUEM312) RogueString_LogicalTableEntryList__type_name,
  (void*) (ROGUEM313) RogueString_LogicalTableEntryList__init_object,
  NULL, // TableEntry<<String,Logical>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM314) RogueString_LogicalTableEntry__type_name,
  NULL, // FileReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM315) RogueFileReader__type_name,
  (void*) (ROGUEM316) RogueFileReader__has_another,
  (void*) (ROGUEM317) RogueFileReader__peek,
  (void*) (ROGUEM317) RogueFileReader__read,
  NULL, // FileWriter
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM318) RogueFileWriter__type_name,
  NULL, // TokenReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM319) RogueTokenReader__type_name,
  NULL, // Tokenizer
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM320) RogueTokenizer__type_name,
  NULL, // ParseReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM321) RogueParseReader__type_name,
  (void*) (ROGUEM322) RogueParseReader__has_another,
  (void*) (ROGUEM323) RogueParseReader__peek,
  (void*) (ROGUEM323) RogueParseReader__read,
  NULL, // Preprocessor
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM324) RoguePreprocessor__type_name,
  NULL, // CmdAdd
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM325) RogueCmdAdd__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM326) RogueCmdAdd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM327) RogueCmdAdd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM204) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM218) Rogue_CmdBinary__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM328) RogueCmdAdd__init_object,
  NULL,
  (void*) (ROGUEM325) RogueCmdAdd__fn_name,
  (void*) (ROGUEM220) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM212) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM329) RogueCmdAdd__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM325) RogueCmdAdd__symbol,
  (void*) (ROGUEM209) RogueCmdBinary__cpp_symbol,
  NULL, // CmdIf
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM330) RogueCmdIf__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM331) RogueCmdIf__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM168) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM332) RogueCmdIf__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM333) RogueCmdIf__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM334) RogueCmdIf__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM335) RogueCmdIf__init_object,
  (void*) (ROGUEM170) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  NULL, // CmdWhich
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM336) RogueCmdWhich__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM337) RogueCmdWhich__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM168) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM338) RogueCmdWhich__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM62) RogueCmdStatement__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM339) RogueCmdWhich__init_object,
  (void*) (ROGUEM170) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  NULL, // CmdContingent
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM340) RogueCmdContingent__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM341) RogueCmdContingent__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM168) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM342) RogueCmdContingent__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM343) RogueCmdContingent__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM344) RogueCmdContingent__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM345) RogueCmdContingent__init_object,
  (void*) (ROGUEM346) RogueCmdContingent__set_control_logic__CmdControlStructure,
  NULL, // CmdTry
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM347) RogueCmdTry__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM348) RogueCmdTry__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM168) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM349) RogueCmdTry__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM350) RogueCmdTry__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM351) RogueCmdTry__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM352) RogueCmdTry__init_object,
  (void*) (ROGUEM170) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  NULL, // CmdAwait
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM353) RogueCmdAwait__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM354) RogueCmdAwait__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM355) RogueCmdAwait__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM356) RogueCmdAwait__init_object,
  NULL, // CmdYield
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM357) RogueCmdYield__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM358) RogueCmdYield__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM359) RogueCmdYield__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM360) RogueCmdYield__init_object,
  NULL, // CmdThrow
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM361) RogueCmdThrow__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM362) RogueCmdThrow__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM363) RogueCmdThrow__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM364) RogueCmdThrow__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM365) RogueCmdThrow__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM366) RogueCmdThrow__init_object,
  NULL, // CmdTrace
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM367) RogueCmdTrace__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM368) RogueCmdTrace__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM369) RogueCmdTrace__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM370) RogueCmdTrace__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM371) RogueCmdTrace__init_object,
  NULL, // CmdEscape
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM372) RogueCmdEscape__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM373) RogueCmdEscape__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM374) RogueCmdEscape__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM375) RogueCmdEscape__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM376) RogueCmdEscape__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM377) RogueCmdEscape__init_object,
  NULL, // CmdNextIteration
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM378) RogueCmdNextIteration__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM379) RogueCmdNextIteration__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM380) RogueCmdNextIteration__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM381) RogueCmdNextIteration__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM382) RogueCmdNextIteration__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM383) RogueCmdNextIteration__init_object,
  NULL, // CmdNecessary
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM384) RogueCmdNecessary__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM385) RogueCmdNecessary__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM386) RogueCmdNecessary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM387) RogueCmdNecessary__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM388) RogueCmdNecessary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM389) RogueCmdNecessary__init_object,
  NULL, // CmdSufficient
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM390) RogueCmdSufficient__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM391) RogueCmdSufficient__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM392) RogueCmdSufficient__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM393) RogueCmdSufficient__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM394) RogueCmdSufficient__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM395) RogueCmdSufficient__init_object,
  NULL, // CmdAdjust
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM396) RogueCmdAdjust__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM397) RogueCmdAdjust__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM398) RogueCmdAdjust__init_object,
  NULL, // CmdOpWithAssign
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM399) RogueCmdOpWithAssign__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM400) RogueCmdOpWithAssign__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM401) RogueCmdOpWithAssign__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM402) RogueCmdOpWithAssign__init_object,
  NULL, // CmdWhichCase[]
  (void*) (ROGUEM403) RogueCmdWhichCaseList__to_String,
  (void*) (ROGUEM403) RogueCmdWhichCaseList__type_name,
  (void*) (ROGUEM404) RogueCmdWhichCaseList__init_object,
  NULL, // CmdWhichCase
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM405) RogueCmdWhichCase__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM406) RogueCmdWhichCase__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM42) RogueCmd__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM407) RogueCmdWhichCase__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM408) RogueCmdWhichCase__init_object,
  NULL, // CmdCatch[]
  (void*) (ROGUEM409) RogueCmdCatchList__to_String,
  (void*) (ROGUEM409) RogueCmdCatchList__type_name,
  (void*) (ROGUEM410) RogueCmdCatchList__init_object,
  NULL, // CmdCatch
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM411) RogueCmdCatch__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM412) RogueCmdCatch__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM413) RogueCmdCatch__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM414) RogueCmdCatch__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM415) RogueCmdCatch__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM416) RogueCmdCatch__init_object,
  NULL, // CmdLocalDeclaration
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM417) RogueCmdLocalDeclaration__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM418) RogueCmdLocalDeclaration__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM419) RogueCmdLocalDeclaration__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM420) RogueCmdLocalDeclaration__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM421) RogueCmdLocalDeclaration__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM422) RogueCmdLocalDeclaration__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM423) RogueCmdLocalDeclaration__init_object,
  NULL, // CmdAdjustLocal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM424) RogueCmdAdjustLocal__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM425) RogueCmdAdjustLocal__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM426) RogueCmdAdjustLocal__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM427) RogueCmdAdjustLocal__trace_used_code,
  (void*) (ROGUEM428) Rogue_CmdAdjustLocal__type,
  (void*) (ROGUEM429) RogueCmdAdjustLocal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM430) RogueCmdAdjustLocal__init_object,
  NULL, // CmdReadLocal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM431) RogueCmdReadLocal__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM432) RogueCmdReadLocal__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM433) RogueCmdReadLocal__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM434) RogueCmdReadLocal__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM435) RogueCmdReadLocal__trace_used_code,
  (void*) (ROGUEM436) Rogue_CmdReadLocal__type,
  (void*) (ROGUEM437) RogueCmdReadLocal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM438) RogueCmdReadLocal__init_object,
  NULL, // CmdCompareLE
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM439) RogueCmdCompareLE__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM440) RogueCmdCompareLE__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM441) RogueCmdCompareLE__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM204) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM206) Rogue_CmdComparison__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM442) RogueCmdCompareLE__init_object,
  NULL,
  (void*) (ROGUEM209) RogueCmdBinary__fn_name,
  (void*) (ROGUEM210) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM211) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM212) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM439) RogueCmdCompareLE__symbol,
  (void*) (ROGUEM209) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM443) RogueCmdCompareLE__resolve_for_reference__Scope_Type_Type_Logical,
  NULL, // CmdRange
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM444) RogueCmdRange__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM42) RogueCmd__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM445) RogueCmdRange__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM446) RogueCmdRange__init_object,
  NULL, // CmdLocalOpWithAssign
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM447) RogueCmdLocalOpWithAssign__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM448) RogueCmdLocalOpWithAssign__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM449) RogueCmdLocalOpWithAssign__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM450) RogueCmdLocalOpWithAssign__trace_used_code,
  (void*) (ROGUEM451) Rogue_CmdLocalOpWithAssign__type,
  (void*) (ROGUEM452) RogueCmdLocalOpWithAssign__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM453) RogueCmdLocalOpWithAssign__init_object,
  NULL, // CmdResolvedOpWithAssign
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM454) RogueCmdResolvedOpWithAssign__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM42) RogueCmd__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM455) RogueCmdResolvedOpWithAssign__init_object,
  NULL, // CmdForEach
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM456) RogueCmdForEach__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM457) RogueCmdForEach__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM168) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM458) RogueCmdForEach__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM459) RogueCmdForEach__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM460) RogueCmdForEach__init_object,
  (void*) (ROGUEM170) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  NULL, // CmdRangeUpTo
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM461) RogueCmdRangeUpTo__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM462) RogueCmdRangeUpTo__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM42) RogueCmd__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM445) RogueCmdRange__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM463) RogueCmdRangeUpTo__init_object,
  NULL, // CmdLogicalXor
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM464) RogueCmdLogicalXor__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM465) RogueCmdLogicalXor__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM466) RogueCmdBinaryLogical__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM467) Rogue_CmdBinaryLogical__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM468) RogueCmdLogicalXor__init_object,
  NULL,
  (void*) (ROGUEM209) RogueCmdBinary__fn_name,
  (void*) (ROGUEM220) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM212) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM469) RogueCmdBinaryLogical__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM464) RogueCmdLogicalXor__symbol,
  (void*) (ROGUEM464) RogueCmdLogicalXor__cpp_symbol,
  (void*) (ROGUEM470) RogueCmdLogicalXor__combine_literal_operands__Logical_Logical,
  NULL, // CmdBinaryLogical
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM471) RogueCmdBinaryLogical__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM466) RogueCmdBinaryLogical__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM467) Rogue_CmdBinaryLogical__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM472) RogueCmdBinaryLogical__init_object,
  NULL,
  (void*) (ROGUEM209) RogueCmdBinary__fn_name,
  (void*) (ROGUEM220) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM212) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM469) RogueCmdBinaryLogical__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM209) RogueCmdBinary__symbol,
  (void*) (ROGUEM209) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM473) RogueCmdBinaryLogical__combine_literal_operands__Logical_Logical,
  NULL, // CmdLogicalOr
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM474) RogueCmdLogicalOr__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM475) RogueCmdLogicalOr__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM466) RogueCmdBinaryLogical__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM467) Rogue_CmdBinaryLogical__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM476) RogueCmdLogicalOr__init_object,
  NULL,
  (void*) (ROGUEM209) RogueCmdBinary__fn_name,
  (void*) (ROGUEM220) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM212) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM469) RogueCmdBinaryLogical__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM474) RogueCmdLogicalOr__symbol,
  (void*) (ROGUEM474) RogueCmdLogicalOr__cpp_symbol,
  (void*) (ROGUEM477) RogueCmdLogicalOr__combine_literal_operands__Logical_Logical,
  NULL, // CmdLogicalAnd
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM478) RogueCmdLogicalAnd__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM479) RogueCmdLogicalAnd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM466) RogueCmdBinaryLogical__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM467) Rogue_CmdBinaryLogical__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM480) RogueCmdLogicalAnd__init_object,
  NULL,
  (void*) (ROGUEM209) RogueCmdBinary__fn_name,
  (void*) (ROGUEM220) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM212) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM469) RogueCmdBinaryLogical__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM478) RogueCmdLogicalAnd__symbol,
  (void*) (ROGUEM478) RogueCmdLogicalAnd__cpp_symbol,
  (void*) (ROGUEM481) RogueCmdLogicalAnd__combine_literal_operands__Logical_Logical,
  NULL, // CmdCompareEQ
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM482) RogueCmdCompareEQ__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM483) RogueCmdCompareEQ__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM484) RogueCmdCompareEQ__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM204) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM206) Rogue_CmdComparison__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM485) RogueCmdCompareEQ__init_object,
  NULL,
  (void*) (ROGUEM209) RogueCmdBinary__fn_name,
  (void*) (ROGUEM486) RogueCmdCompareEQ__requires_parens,
  (void*) (ROGUEM211) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM212) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM482) RogueCmdCompareEQ__symbol,
  (void*) (ROGUEM209) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM487) RogueCmdCompareEQ__resolve_for_reference__Scope_Type_Type_Logical,
  NULL, // CmdCompareIs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM488) RogueCmdCompareIs__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM489) RogueCmdCompareIs__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM204) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM206) Rogue_CmdComparison__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM490) RogueCmdCompareIs__init_object,
  NULL,
  (void*) (ROGUEM209) RogueCmdBinary__fn_name,
  (void*) (ROGUEM210) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM491) RogueCmdCompareIs__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM212) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM488) RogueCmdCompareIs__symbol,
  (void*) (ROGUEM488) RogueCmdCompareIs__cpp_symbol,
  (void*) (ROGUEM217) RogueCmdComparison__resolve_for_reference__Scope_Type_Type_Logical,
  NULL, // CmdCompareIsNot
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM492) RogueCmdCompareIsNot__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM493) RogueCmdCompareIsNot__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM204) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM206) Rogue_CmdComparison__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM494) RogueCmdCompareIsNot__init_object,
  NULL,
  (void*) (ROGUEM209) RogueCmdBinary__fn_name,
  (void*) (ROGUEM210) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM495) RogueCmdCompareIsNot__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM212) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM492) RogueCmdCompareIsNot__symbol,
  (void*) (ROGUEM492) RogueCmdCompareIsNot__cpp_symbol,
  (void*) (ROGUEM217) RogueCmdComparison__resolve_for_reference__Scope_Type_Type_Logical,
  NULL, // CmdCompareLT
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM496) RogueCmdCompareLT__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM497) RogueCmdCompareLT__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM498) RogueCmdCompareLT__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM204) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM206) Rogue_CmdComparison__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM499) RogueCmdCompareLT__init_object,
  NULL,
  (void*) (ROGUEM209) RogueCmdBinary__fn_name,
  (void*) (ROGUEM210) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM211) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM212) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM496) RogueCmdCompareLT__symbol,
  (void*) (ROGUEM209) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM500) RogueCmdCompareLT__resolve_for_reference__Scope_Type_Type_Logical,
  NULL, // CmdCompareGT
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM501) RogueCmdCompareGT__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM502) RogueCmdCompareGT__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM503) RogueCmdCompareGT__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM204) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM206) Rogue_CmdComparison__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM504) RogueCmdCompareGT__init_object,
  NULL,
  (void*) (ROGUEM209) RogueCmdBinary__fn_name,
  (void*) (ROGUEM210) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM211) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM212) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM501) RogueCmdCompareGT__symbol,
  (void*) (ROGUEM209) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM505) RogueCmdCompareGT__resolve_for_reference__Scope_Type_Type_Logical,
  NULL, // CmdCompareGE
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM506) RogueCmdCompareGE__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM507) RogueCmdCompareGE__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM508) RogueCmdCompareGE__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM204) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM206) Rogue_CmdComparison__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM509) RogueCmdCompareGE__init_object,
  NULL,
  (void*) (ROGUEM209) RogueCmdBinary__fn_name,
  (void*) (ROGUEM210) RogueCmdComparison__requires_parens,
  (void*) (ROGUEM211) RogueCmdComparison__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM212) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM506) RogueCmdCompareGE__symbol,
  (void*) (ROGUEM209) RogueCmdBinary__cpp_symbol,
  (void*) (ROGUEM510) RogueCmdCompareGE__resolve_for_reference__Scope_Type_Type_Logical,
  NULL, // CmdInstanceOf
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM511) RogueCmdInstanceOf__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM512) RogueCmdInstanceOf__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM513) RogueCmdInstanceOf__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM285) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM514) Rogue_CmdInstanceOf__type,
  (void*) (ROGUEM515) RogueCmdInstanceOf__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM516) RogueCmdInstanceOf__init_object,
  NULL, // CmdLogicalNot
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM517) RogueCmdLogicalNot__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM518) RogueCmdLogicalNot__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM519) RogueCmdLogicalNot__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM294) RogueCmdUnary__trace_used_code,
  (void*) (ROGUEM520) Rogue_CmdLogicalNot__type,
  (void*) (ROGUEM296) RogueCmdUnary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM521) RogueCmdLogicalNot__init_object,
  NULL,
  (void*) (ROGUEM517) RogueCmdLogicalNot__prefix_symbol,
  (void*) (ROGUEM519) RogueCmdLogicalNot__resolve_for_literal_operand__Scope,
  NULL,
  (void*) (ROGUEM298) RogueCmdUnary__suffix_symbol,
  (void*) (ROGUEM517) RogueCmdLogicalNot__cpp_prefix_symbol,
  (void*) (ROGUEM298) RogueCmdUnary__cpp_suffix_symbol,
  NULL, // CmdBitwiseXor
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM522) RogueCmdBitwiseXor__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM523) RogueCmdBitwiseXor__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM524) RogueCmdBitwiseXor__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM204) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM218) Rogue_CmdBinary__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM525) RogueCmdBitwiseXor__init_object,
  NULL,
  (void*) (ROGUEM209) RogueCmdBinary__fn_name,
  (void*) (ROGUEM220) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM526) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM527) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM522) RogueCmdBitwiseXor__symbol,
  (void*) (ROGUEM522) RogueCmdBitwiseXor__cpp_symbol,
  NULL, // CmdBitwiseOp
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM528) RogueCmdBitwiseOp__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM204) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM218) Rogue_CmdBinary__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM529) RogueCmdBitwiseOp__init_object,
  NULL,
  (void*) (ROGUEM209) RogueCmdBinary__fn_name,
  (void*) (ROGUEM220) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM526) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM527) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM209) RogueCmdBinary__symbol,
  (void*) (ROGUEM209) RogueCmdBinary__cpp_symbol,
  NULL, // CmdBitwiseOr
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM530) RogueCmdBitwiseOr__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM531) RogueCmdBitwiseOr__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM532) RogueCmdBitwiseOr__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM204) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM218) Rogue_CmdBinary__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM533) RogueCmdBitwiseOr__init_object,
  NULL,
  (void*) (ROGUEM209) RogueCmdBinary__fn_name,
  (void*) (ROGUEM220) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM526) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM527) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM530) RogueCmdBitwiseOr__symbol,
  (void*) (ROGUEM209) RogueCmdBinary__cpp_symbol,
  NULL, // CmdBitwiseAnd
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM534) RogueCmdBitwiseAnd__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM535) RogueCmdBitwiseAnd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM536) RogueCmdBitwiseAnd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM204) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM218) Rogue_CmdBinary__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM537) RogueCmdBitwiseAnd__init_object,
  NULL,
  (void*) (ROGUEM209) RogueCmdBinary__fn_name,
  (void*) (ROGUEM220) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM526) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM527) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM534) RogueCmdBitwiseAnd__symbol,
  (void*) (ROGUEM209) RogueCmdBinary__cpp_symbol,
  NULL, // CmdBitwiseShiftLeft
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM538) RogueCmdBitwiseShiftLeft__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM539) RogueCmdBitwiseShiftLeft__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM540) RogueCmdBitwiseShiftLeft__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM204) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM218) Rogue_CmdBinary__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM541) RogueCmdBitwiseShiftLeft__init_object,
  NULL,
  (void*) (ROGUEM209) RogueCmdBinary__fn_name,
  (void*) (ROGUEM220) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM526) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM527) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM538) RogueCmdBitwiseShiftLeft__symbol,
  (void*) (ROGUEM538) RogueCmdBitwiseShiftLeft__cpp_symbol,
  NULL, // CmdBitwiseShiftRight
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM542) RogueCmdBitwiseShiftRight__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM543) RogueCmdBitwiseShiftRight__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM544) RogueCmdBitwiseShiftRight__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM545) RogueCmdBitwiseShiftRight__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM218) Rogue_CmdBinary__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM546) RogueCmdBitwiseShiftRight__init_object,
  NULL,
  (void*) (ROGUEM209) RogueCmdBinary__fn_name,
  (void*) (ROGUEM220) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM526) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM527) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM542) RogueCmdBitwiseShiftRight__symbol,
  (void*) (ROGUEM209) RogueCmdBinary__cpp_symbol,
  NULL, // CmdBitwiseShiftRightX
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM547) RogueCmdBitwiseShiftRightX__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM548) RogueCmdBitwiseShiftRightX__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM549) RogueCmdBitwiseShiftRightX__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM204) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM218) Rogue_CmdBinary__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM550) RogueCmdBitwiseShiftRightX__init_object,
  NULL,
  (void*) (ROGUEM209) RogueCmdBinary__fn_name,
  (void*) (ROGUEM220) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM526) RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM527) RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM547) RogueCmdBitwiseShiftRightX__symbol,
  (void*) (ROGUEM547) RogueCmdBitwiseShiftRightX__cpp_symbol,
  NULL, // CmdSubtract
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM551) RogueCmdSubtract__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM552) RogueCmdSubtract__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM553) RogueCmdSubtract__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM204) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM218) Rogue_CmdBinary__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM554) RogueCmdSubtract__init_object,
  NULL,
  (void*) (ROGUEM551) RogueCmdSubtract__fn_name,
  (void*) (ROGUEM220) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM212) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM551) RogueCmdSubtract__symbol,
  (void*) (ROGUEM209) RogueCmdBinary__cpp_symbol,
  NULL, // CmdMultiply
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM555) RogueCmdMultiply__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM556) RogueCmdMultiply__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM557) RogueCmdMultiply__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM204) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM218) Rogue_CmdBinary__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM558) RogueCmdMultiply__init_object,
  NULL,
  (void*) (ROGUEM555) RogueCmdMultiply__fn_name,
  (void*) (ROGUEM220) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM212) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM555) RogueCmdMultiply__symbol,
  (void*) (ROGUEM209) RogueCmdBinary__cpp_symbol,
  NULL, // CmdDivide
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM559) RogueCmdDivide__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM560) RogueCmdDivide__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM561) RogueCmdDivide__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM204) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM218) Rogue_CmdBinary__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM562) RogueCmdDivide__init_object,
  NULL,
  (void*) (ROGUEM559) RogueCmdDivide__fn_name,
  (void*) (ROGUEM220) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM212) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM559) RogueCmdDivide__symbol,
  (void*) (ROGUEM209) RogueCmdBinary__cpp_symbol,
  NULL, // CmdMod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM563) RogueCmdMod__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM564) RogueCmdMod__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM565) RogueCmdMod__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM566) RogueCmdMod__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM218) Rogue_CmdBinary__type,
  (void*) (ROGUEM207) RogueCmdBinary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM567) RogueCmdMod__init_object,
  NULL,
  (void*) (ROGUEM563) RogueCmdMod__fn_name,
  (void*) (ROGUEM220) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM212) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM563) RogueCmdMod__symbol,
  (void*) (ROGUEM209) RogueCmdBinary__cpp_symbol,
  NULL, // CmdPower
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM568) RogueCmdPower__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM569) RogueCmdPower__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM570) RogueCmdPower__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM204) RogueCmdBinary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM205) RogueCmdBinary__trace_used_code,
  (void*) (ROGUEM218) Rogue_CmdBinary__type,
  (void*) (ROGUEM571) RogueCmdPower__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM572) RogueCmdPower__init_object,
  NULL,
  (void*) (ROGUEM568) RogueCmdPower__fn_name,
  (void*) (ROGUEM220) RogueCmdBinary__requires_parens,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_for_types__Scope_Type_Type,
  (void*) (ROGUEM212) RogueCmdBinary__resolve_for_common_type__Scope_Type,
  (void*) (ROGUEM213) RogueCmdBinary__resolve_operator_method__Scope_Type_Type,
  (void*) (ROGUEM568) RogueCmdPower__symbol,
  (void*) (ROGUEM209) RogueCmdBinary__cpp_symbol,
  NULL, // CmdNegate
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM573) RogueCmdNegate__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM574) RogueCmdNegate__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM575) Rogue_CmdNegate__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM299) RogueCmdUnary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM294) RogueCmdUnary__trace_used_code,
  (void*) (ROGUEM300) Rogue_CmdUnary__type,
  (void*) (ROGUEM296) RogueCmdUnary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM576) RogueCmdNegate__init_object,
  NULL,
  (void*) (ROGUEM573) RogueCmdNegate__prefix_symbol,
  (void*) (ROGUEM577) RogueCmdNegate__resolve_for_literal_operand__Scope,
  NULL,
  (void*) (ROGUEM573) RogueCmdNegate__suffix_symbol,
  (void*) (ROGUEM298) RogueCmdUnary__cpp_prefix_symbol,
  (void*) (ROGUEM298) RogueCmdUnary__cpp_suffix_symbol,
  NULL, // CmdBitwiseNot
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM578) RogueCmdBitwiseNot__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM579) RogueCmdBitwiseNot__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM299) RogueCmdUnary__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM294) RogueCmdUnary__trace_used_code,
  (void*) (ROGUEM580) Rogue_CmdBitwiseNot__type,
  (void*) (ROGUEM296) RogueCmdUnary__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM581) RogueCmdBitwiseNot__init_object,
  NULL,
  (void*) (ROGUEM578) RogueCmdBitwiseNot__prefix_symbol,
  (void*) (ROGUEM582) RogueCmdBitwiseNot__resolve_for_literal_operand__Scope,
  NULL,
  (void*) (ROGUEM298) RogueCmdUnary__suffix_symbol,
  (void*) (ROGUEM578) RogueCmdBitwiseNot__cpp_prefix_symbol,
  (void*) (ROGUEM298) RogueCmdUnary__cpp_suffix_symbol,
  NULL, // CmdGetOptionalValue
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM583) RogueCmdGetOptionalValue__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM584) RogueCmdGetOptionalValue__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM585) RogueCmdGetOptionalValue__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM586) RogueCmdGetOptionalValue__trace_used_code,
  (void*) (ROGUEM587) Rogue_CmdGetOptionalValue__type,
  (void*) (ROGUEM588) RogueCmdGetOptionalValue__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM589) RogueCmdGetOptionalValue__init_object,
  NULL, // CmdElementAccess
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM590) RogueCmdElementAccess__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM591) RogueCmdElementAccess__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM592) RogueCmdElementAccess__resolve__Scope,
  (void*) (ROGUEM593) RogueCmdElementAccess__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM594) RogueCmdElementAccess__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM595) RogueCmdElementAccess__init_object,
  NULL, // CmdConvertToType
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM596) RogueCmdConvertToType__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM597) RogueCmdConvertToType__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM598) RogueCmdConvertToType__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM285) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM286) Rogue_CmdTypeOperator__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM599) RogueCmdConvertToType__init_object,
  NULL, // CmdCreateCallback
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM600) RogueCmdCreateCallback__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM601) RogueCmdCreateCallback__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM602) RogueCmdCreateCallback__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM603) RogueCmdCreateCallback__init_object,
  NULL, // CmdAs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM604) RogueCmdAs__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM605) RogueCmdAs__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM606) RogueCmdAs__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM285) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM286) Rogue_CmdTypeOperator__type,
  (void*) (ROGUEM607) RogueCmdAs__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM608) RogueCmdAs__init_object,
  NULL, // CmdDefaultValue
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM609) RogueCmdDefaultValue__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM610) RogueCmdDefaultValue__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM192) Rogue_CmdLiteral__implicit_type,
  (void*) (ROGUEM193) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM611) RogueCmdDefaultValue__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM195) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM612) Rogue_CmdDefaultValue__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM613) RogueCmdDefaultValue__init_object,
  NULL, // CmdFormattedString
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM614) RogueCmdFormattedString__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM615) RogueCmdFormattedString__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM616) Rogue_CmdFormattedString__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM617) RogueCmdFormattedString__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM616) Rogue_CmdFormattedString__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM618) RogueCmdFormattedString__init_object,
  NULL, // CmdLiteralReal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM619) RogueCmdLiteralReal__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM620) RogueCmdLiteralReal__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM192) Rogue_CmdLiteral__implicit_type,
  (void*) (ROGUEM193) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM621) RogueCmdLiteralReal__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM195) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM622) Rogue_CmdLiteralReal__type,
  (void*) (ROGUEM623) RogueCmdLiteralReal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM624) RogueCmdLiteralReal__init_object,
  NULL, // CmdLiteralLong
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM625) RogueCmdLiteralLong__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM626) RogueCmdLiteralLong__cast_to__Type,
  (void*) (ROGUEM627) RogueCmdLiteralLong__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM192) Rogue_CmdLiteral__implicit_type,
  (void*) (ROGUEM193) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM628) RogueCmdLiteralLong__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM195) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM629) Rogue_CmdLiteralLong__type,
  (void*) (ROGUEM630) RogueCmdLiteralLong__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM631) RogueCmdLiteralLong__init_object,
  NULL, // CmdLiteralCharacter
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM632) RogueCmdLiteralCharacter__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM633) RogueCmdLiteralCharacter__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM192) Rogue_CmdLiteral__implicit_type,
  (void*) (ROGUEM193) RogueCmdLiteral__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM634) RogueCmdLiteralCharacter__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM195) RogueCmdLiteral__trace_used_code,
  (void*) (ROGUEM635) Rogue_CmdLiteralCharacter__type,
  (void*) (ROGUEM636) RogueCmdLiteralCharacter__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM637) RogueCmdLiteralCharacter__init_object,
  NULL, // CmdCreateList
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM638) RogueCmdCreateList__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM639) RogueCmdCreateList__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM640) RogueCmdCreateList__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM641) RogueCmdCreateList__init_object,
  NULL, // CmdCallPriorMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM642) RogueCmdCallPriorMethod__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM643) RogueCmdCallPriorMethod__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM644) RogueCmdCallPriorMethod__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM645) RogueCmdCallPriorMethod__init_object,
  NULL, // FnParam[]
  (void*) (ROGUEM646) RogueFnParamList__to_String,
  (void*) (ROGUEM646) RogueFnParamList__type_name,
  (void*) (ROGUEM647) RogueFnParamList__init_object,
  NULL, // FnParam
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM648) RogueFnParam__type_name,
  NULL, // FnArg[]
  (void*) (ROGUEM649) RogueFnArgList__to_String,
  (void*) (ROGUEM649) RogueFnArgList__type_name,
  (void*) (ROGUEM650) RogueFnArgList__init_object,
  NULL, // FnArg
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM651) RogueFnArg__type_name,
  NULL, // CmdCreateFunction
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM652) RogueCmdCreateFunction__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM653) RogueCmdCreateFunction__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM654) RogueCmdCreateFunction__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM48) RogueCmd__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM655) RogueCmdCreateFunction__init_object,
  NULL, // CmdNativeCode
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM656) RogueCmdNativeCode__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM657) RogueCmdNativeCode__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM658) RogueCmdNativeCode__requires_semicolon,
  (void*) (ROGUEM659) RogueCmdNativeCode__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM660) RogueCmdNativeCode__trace_used_code,
  (void*) (ROGUEM661) Rogue_CmdNativeCode__type,
  (void*) (ROGUEM662) RogueCmdNativeCode__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM663) RogueCmdNativeCode__init_object,
  NULL, // TableEntry<<String,TokenType>>[]
  (void*) (ROGUEM664) RogueString_TokenTypeTableEntryList__to_String,
  (void*) (ROGUEM664) RogueString_TokenTypeTableEntryList__type_name,
  (void*) (ROGUEM665) RogueString_TokenTypeTableEntryList__init_object,
  NULL, // TableEntry<<String,TokenType>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM666) RogueString_TokenTypeTableEntry__type_name,
  NULL, // TableEntry<<String,TypeSpecializer>>[]
  (void*) (ROGUEM667) RogueString_TypeSpecializerTableEntryList__to_String,
  (void*) (ROGUEM667) RogueString_TypeSpecializerTableEntryList__type_name,
  (void*) (ROGUEM668) RogueString_TypeSpecializerTableEntryList__init_object,
  NULL, // TableEntry<<String,TypeSpecializer>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM669) RogueString_TypeSpecializerTableEntry__type_name,
  NULL, // TableEntry<<String,CmdLabel>>[]
  (void*) (ROGUEM670) RogueString_CmdLabelTableEntryList__to_String,
  (void*) (ROGUEM670) RogueString_CmdLabelTableEntryList__type_name,
  (void*) (ROGUEM671) RogueString_CmdLabelTableEntryList__init_object,
  NULL, // TableEntry<<String,CmdLabel>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM672) RogueString_CmdLabelTableEntry__type_name,
  NULL, // MacroArgs
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM673) RogueMacroArgs__type_name,
  (void*) (ROGUEM144) RogueCloneArgs__register_label__CmdLabel,
  (void*) (ROGUEM674) RogueMacroArgs__init_object,
  NULL, // CmdReadSingleton
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM675) RogueCmdReadSingleton__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM676) RogueCmdReadSingleton__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM677) RogueCmdReadSingleton__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM678) RogueCmdReadSingleton__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM677) RogueCmdReadSingleton__trace_used_code,
  (void*) (ROGUEM679) Rogue_CmdReadSingleton__type,
  (void*) (ROGUEM680) RogueCmdReadSingleton__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM681) RogueCmdReadSingleton__init_object,
  NULL, // CmdCreateArray
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM682) RogueCmdCreateArray__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM683) RogueCmdCreateArray__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM684) RogueCmdCreateArray__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM685) RogueCmdCreateArray__trace_used_code,
  (void*) (ROGUEM686) Rogue_CmdCreateArray__type,
  (void*) (ROGUEM687) RogueCmdCreateArray__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM688) RogueCmdCreateArray__init_object,
  NULL, // CmdCallRoutine
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM689) RogueCmdCallRoutine__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM690) RogueCmdCallRoutine__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM691) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM692) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM693) Rogue_CmdCall__type,
  (void*) (ROGUEM694) RogueCmdCallRoutine__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM695) RogueCmdCallRoutine__init_object,
  NULL, // CmdCall
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM696) RogueCmdCall__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM691) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM692) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM693) Rogue_CmdCall__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM697) RogueCmdCall__init_object,
  NULL, // CmdCreateObject
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM698) RogueCmdCreateObject__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM699) RogueCmdCreateObject__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM700) RogueCmdCreateObject__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM701) RogueCmdCreateObject__trace_used_code,
  (void*) (ROGUEM702) Rogue_CmdCreateObject__type,
  (void*) (ROGUEM703) RogueCmdCreateObject__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM704) RogueCmdCreateObject__init_object,
  NULL, // CmdReadGlobal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM705) RogueCmdReadGlobal__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM706) RogueCmdReadGlobal__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM707) RogueCmdReadGlobal__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM708) RogueCmdReadGlobal__trace_used_code,
  (void*) (ROGUEM709) Rogue_CmdReadGlobal__type,
  (void*) (ROGUEM710) RogueCmdReadGlobal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM711) RogueCmdReadGlobal__init_object,
  NULL, // CmdReadProperty
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM712) RogueCmdReadProperty__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM713) RogueCmdReadProperty__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM714) RogueCmdReadProperty__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM715) RogueCmdReadProperty__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM716) RogueCmdReadProperty__trace_used_code,
  (void*) (ROGUEM717) Rogue_CmdReadProperty__type,
  (void*) (ROGUEM718) RogueCmdReadProperty__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM719) RogueCmdReadProperty__init_object,
  NULL, // CmdLogicalizeOptionalValue
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM720) RogueCmdLogicalizeOptionalValue__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM721) RogueCmdLogicalizeOptionalValue__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM722) RogueCmdLogicalizeOptionalValue__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM723) RogueCmdLogicalizeOptionalValue__trace_used_code,
  (void*) (ROGUEM724) Rogue_CmdLogicalizeOptionalValue__type,
  (void*) (ROGUEM725) RogueCmdLogicalizeOptionalValue__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM726) RogueCmdLogicalizeOptionalValue__init_object,
  NULL, // CmdWriteLocal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM727) RogueCmdWriteLocal__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM728) RogueCmdWriteLocal__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM729) RogueCmdWriteLocal__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM730) RogueCmdWriteLocal__trace_used_code,
  (void*) (ROGUEM731) Rogue_CmdWriteLocal__type,
  (void*) (ROGUEM732) RogueCmdWriteLocal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM733) RogueCmdWriteLocal__init_object,
  NULL, // CmdOpAssignGlobal
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM734) RogueCmdOpAssignGlobal__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM735) RogueCmdOpAssignGlobal__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM736) RogueCmdOpAssignGlobal__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM737) RogueCmdOpAssignGlobal__trace_used_code,
  (void*) (ROGUEM738) Rogue_CmdOpAssignGlobal__type,
  (void*) (ROGUEM739) RogueCmdOpAssignGlobal__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM740) RogueCmdOpAssignGlobal__init_object,
  NULL, // CmdOpAssignProperty
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM741) RogueCmdOpAssignProperty__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM742) RogueCmdOpAssignProperty__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM743) RogueCmdOpAssignProperty__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM744) RogueCmdOpAssignProperty__trace_used_code,
  (void*) (ROGUEM745) Rogue_CmdOpAssignProperty__type,
  (void*) (ROGUEM746) RogueCmdOpAssignProperty__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM747) RogueCmdOpAssignProperty__init_object,
  NULL, // CmdCallInlineNativeRoutine
  (void*) (ROGUEM748) RogueCmdCallInlineNative__to_String,
  (void*) (ROGUEM749) RogueCmdCallInlineNativeRoutine__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM750) RogueCmdCallInlineNativeRoutine__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM691) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM692) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM751) Rogue_CmdCallInlineNativeRoutine__type,
  (void*) (ROGUEM752) RogueCmdCallInlineNative__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM753) RogueCmdCallInlineNativeRoutine__init_object,
  NULL,
  (void*) (ROGUEM754) RogueCmdCallInlineNative__print_this__CPPWriter,
  NULL, // CmdCallInlineNative
  (void*) (ROGUEM748) RogueCmdCallInlineNative__to_String,
  (void*) (ROGUEM748) RogueCmdCallInlineNative__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM691) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM692) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM693) Rogue_CmdCall__type,
  (void*) (ROGUEM752) RogueCmdCallInlineNative__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM755) RogueCmdCallInlineNative__init_object,
  NULL,
  (void*) (ROGUEM754) RogueCmdCallInlineNative__print_this__CPPWriter,
  NULL, // CmdCallNativeRoutine
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM756) RogueCmdCallNativeRoutine__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM757) RogueCmdCallNativeRoutine__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM691) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM692) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM693) Rogue_CmdCall__type,
  (void*) (ROGUEM758) RogueCmdCallNativeRoutine__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM759) RogueCmdCallNativeRoutine__init_object,
  NULL, // CmdReadArrayCount
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM760) RogueCmdReadArrayCount__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM761) RogueCmdReadArrayCount__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM762) RogueCmdReadArrayCount__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM763) RogueCmdReadArrayCount__trace_used_code,
  (void*) (ROGUEM764) Rogue_CmdReadArrayCount__type,
  (void*) (ROGUEM765) RogueCmdReadArrayCount__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM766) RogueCmdReadArrayCount__init_object,
  NULL, // CmdCallInlineNativeMethod
  (void*) (ROGUEM748) RogueCmdCallInlineNative__to_String,
  (void*) (ROGUEM767) RogueCmdCallInlineNativeMethod__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM768) RogueCmdCallInlineNativeMethod__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM691) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM692) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM769) Rogue_CmdCallInlineNativeMethod__type,
  (void*) (ROGUEM752) RogueCmdCallInlineNative__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM770) RogueCmdCallInlineNativeMethod__init_object,
  NULL,
  (void*) (ROGUEM771) RogueCmdCallInlineNativeMethod__print_this__CPPWriter,
  NULL, // CmdCallNativeMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM772) RogueCmdCallNativeMethod__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM773) RogueCmdCallNativeMethod__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM691) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM692) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM693) Rogue_CmdCall__type,
  (void*) (ROGUEM774) RogueCmdCallNativeMethod__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM775) RogueCmdCallNativeMethod__init_object,
  NULL, // CmdCallAspectMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM776) RogueCmdCallAspectMethod__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM777) RogueCmdCallAspectMethod__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM691) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM692) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM693) Rogue_CmdCall__type,
  (void*) (ROGUEM778) RogueCmdCallAspectMethod__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM779) RogueCmdCallAspectMethod__init_object,
  NULL, // CmdCallDynamicMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM780) RogueCmdCallDynamicMethod__type_name,
  (void*) (ROGUEM781) RogueCmdCallMethod__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM782) RogueCmdCallDynamicMethod__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM691) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM783) RogueCmdCallDynamicMethod__trace_used_code,
  (void*) (ROGUEM693) Rogue_CmdCall__type,
  (void*) (ROGUEM784) RogueCmdCallDynamicMethod__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM785) RogueCmdCallDynamicMethod__init_object,
  NULL, // CmdCallMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM786) RogueCmdCallMethod__type_name,
  (void*) (ROGUEM781) RogueCmdCallMethod__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM44) RogueCmd__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM691) RogueCmdCall__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM692) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM693) Rogue_CmdCall__type,
  (void*) (ROGUEM52) RogueCmd__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM787) RogueCmdCallMethod__init_object,
  NULL, // CandidateMethods
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM788) RogueCandidateMethods__type_name,
  NULL, // CmdTaskControlSection[]
  (void*) (ROGUEM789) RogueCmdTaskControlSectionList__to_String,
  (void*) (ROGUEM789) RogueCmdTaskControlSectionList__type_name,
  (void*) (ROGUEM790) RogueCmdTaskControlSectionList__init_object,
  NULL, // CmdBlock
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM791) RogueCmdBlock__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM792) RogueCmdBlock__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM793) RogueCmdBlock__requires_semicolon,
  (void*) (ROGUEM794) RogueCmdBlock__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM795) RogueCmdBlock__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM796) RogueCmdBlock__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM797) RogueCmdBlock__init_object,
  (void*) (ROGUEM170) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  NULL, // TableEntry<<String,Cmd>>[]
  (void*) (ROGUEM798) RogueString_CmdTableEntryList__to_String,
  (void*) (ROGUEM798) RogueString_CmdTableEntryList__type_name,
  (void*) (ROGUEM799) RogueString_CmdTableEntryList__init_object,
  NULL, // TableEntry<<String,Cmd>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM800) RogueString_CmdTableEntry__type_name,
  NULL, // TableEntry<<String,Property>>[]
  (void*) (ROGUEM801) RogueString_PropertyTableEntryList__to_String,
  (void*) (ROGUEM801) RogueString_PropertyTableEntryList__type_name,
  (void*) (ROGUEM802) RogueString_PropertyTableEntryList__init_object,
  NULL, // TableEntry<<String,Property>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM803) RogueString_PropertyTableEntry__type_name,
  NULL, // DirectiveTokenType
  (void*) (ROGUEM70) RogueTokenType__to_String,
  (void*) (ROGUEM804) RogueDirectiveTokenType__type_name,
  NULL,
  (void*) (ROGUEM805) RogueDirectiveTokenType__create_token__String_Integer_Integer,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM72) RogueTokenType__create_token__String_Integer_Integer_String,
  NULL,
  (void*) (ROGUEM806) RogueDirectiveTokenType__is_directive,
  (void*) (ROGUEM73) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM73) RogueTokenType__is_structure,
  NULL,
  NULL,
  (void*) (ROGUEM807) RogueDirectiveTokenType__init_object,
  NULL, // StructuralDirectiveTokenType
  (void*) (ROGUEM70) RogueTokenType__to_String,
  (void*) (ROGUEM808) RogueStructuralDirectiveTokenType__type_name,
  NULL,
  (void*) (ROGUEM809) RogueStructuralDirectiveTokenType__create_token__String_Integer_Integer,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM72) RogueTokenType__create_token__String_Integer_Integer_String,
  NULL,
  (void*) (ROGUEM810) RogueStructuralDirectiveTokenType__is_directive,
  (void*) (ROGUEM73) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM810) RogueStructuralDirectiveTokenType__is_structure,
  NULL,
  NULL,
  (void*) (ROGUEM811) RogueStructuralDirectiveTokenType__init_object,
  NULL, // EOLTokenType
  (void*) (ROGUEM70) RogueTokenType__to_String,
  (void*) (ROGUEM812) RogueEOLTokenType__type_name,
  NULL,
  (void*) (ROGUEM813) RogueEOLTokenType__create_token__String_Integer_Integer,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM814) RogueEOLTokenType__create_token__String_Integer_Integer_String,
  NULL,
  (void*) (ROGUEM73) RogueTokenType__is_directive,
  (void*) (ROGUEM73) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM815) RogueEOLTokenType__is_structure,
  NULL,
  NULL,
  (void*) (ROGUEM816) RogueEOLTokenType__init_object,
  NULL, // StructureTokenType
  (void*) (ROGUEM70) RogueTokenType__to_String,
  (void*) (ROGUEM817) RogueStructureTokenType__type_name,
  NULL,
  (void*) (ROGUEM818) RogueStructureTokenType__create_token__String_Integer_Integer,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM72) RogueTokenType__create_token__String_Integer_Integer_String,
  NULL,
  (void*) (ROGUEM73) RogueTokenType__is_directive,
  (void*) (ROGUEM73) RogueTokenType__is_op_with_assign,
  (void*) (ROGUEM819) RogueStructureTokenType__is_structure,
  NULL,
  NULL,
  (void*) (ROGUEM820) RogueStructureTokenType__init_object,
  NULL, // OpWithAssignTokenType
  (void*) (ROGUEM70) RogueTokenType__to_String,
  (void*) (ROGUEM821) RogueOpWithAssignTokenType__type_name,
  NULL,
  (void*) (ROGUEM71) RogueTokenType__create_token__String_Integer_Integer,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM72) RogueTokenType__create_token__String_Integer_Integer_String,
  NULL,
  (void*) (ROGUEM73) RogueTokenType__is_directive,
  (void*) (ROGUEM822) RogueOpWithAssignTokenType__is_op_with_assign,
  (void*) (ROGUEM73) RogueTokenType__is_structure,
  NULL,
  NULL,
  (void*) (ROGUEM823) RogueOpWithAssignTokenType__init_object,
  NULL, // EOLToken
  (void*) (ROGUEM824) RogueEOLToken__to_String,
  (void*) (ROGUEM824) RogueEOLToken__type_name,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM34) RogueToken__to_Character,
  (void*) (ROGUEM35) RogueToken__to_Integer,
  (void*) (ROGUEM36) RogueToken__to_Long,
  (void*) (ROGUEM37) RogueToken__to_Real,
  (void*) (ROGUEM38) RogueToken__to_Type,
  (void*) (ROGUEM825) RogueEOLToken__init_object,
  NULL, // Table<<String,Token[]>>
  (void*) (ROGUEM826) RogueString_TokenListTable__to_String,
  (void*) (ROGUEM826) RogueString_TokenListTable__type_name,
  NULL, // PreprocessorTokenReader
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM827) RoguePreprocessorTokenReader__type_name,
  NULL, // CmdSwitch
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM828) RogueCmdSwitch__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM829) RogueCmdSwitch__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM168) RogueCmdControlStructure__requires_semicolon,
  (void*) (ROGUEM830) RogueCmdSwitch__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM831) RogueCmdSwitch__trace_used_code,
  (void*) (ROGUEM46) Rogue_Cmd__type,
  (void*) (ROGUEM832) RogueCmdSwitch__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM833) RogueCmdSwitch__init_object,
  (void*) (ROGUEM170) RogueCmdControlStructure__set_control_logic__CmdControlStructure,
  NULL, // CmdReadArrayElement
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM834) RogueCmdReadArrayElement__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM835) RogueCmdReadArrayElement__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM836) RogueCmdReadArrayElement__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM837) RogueCmdReadArrayElement__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM838) RogueCmdReadArrayElement__trace_used_code,
  (void*) (ROGUEM839) Rogue_CmdReadArrayElement__type,
  (void*) (ROGUEM840) RogueCmdReadArrayElement__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM841) RogueCmdReadArrayElement__init_object,
  NULL, // CmdWriteArrayElement
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM842) RogueCmdWriteArrayElement__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM843) RogueCmdWriteArrayElement__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM844) RogueCmdWriteArrayElement__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM845) RogueCmdWriteArrayElement__trace_used_code,
  (void*) (ROGUEM846) Rogue_CmdWriteArrayElement__type,
  (void*) (ROGUEM847) RogueCmdWriteArrayElement__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM848) RogueCmdWriteArrayElement__init_object,
  NULL, // CmdConvertToPrimitiveType
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM849) RogueCmdConvertToPrimitiveType__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM850) RogueCmdConvertToPrimitiveType__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM851) RogueCmdConvertToPrimitiveType__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM285) RogueCmdTypeOperator__trace_used_code,
  (void*) (ROGUEM286) Rogue_CmdTypeOperator__type,
  (void*) (ROGUEM852) RogueCmdConvertToPrimitiveType__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM853) RogueCmdConvertToPrimitiveType__init_object,
  NULL, // CmdAdjustProperty
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM854) RogueCmdAdjustProperty__type_name,
  (void*) (ROGUEM42) RogueCmd__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM855) RogueCmdAdjustProperty__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM856) RogueCmdAdjustProperty__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM857) RogueCmdAdjustProperty__trace_used_code,
  (void*) (ROGUEM858) Rogue_CmdAdjustProperty__type,
  (void*) (ROGUEM859) RogueCmdAdjustProperty__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM860) RogueCmdAdjustProperty__init_object,
  NULL, // CmdCallStaticMethod
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM861) RogueCmdCallStaticMethod__type_name,
  (void*) (ROGUEM781) RogueCmdCallMethod__call_prior__Scope,
  (void*) (ROGUEM43) RogueCmd__cast_to__Type,
  (void*) (ROGUEM862) RogueCmdCallStaticMethod__clone__CloneArgs,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM43) RogueCmd__combine_literal_operands__Type,
  (void*) (ROGUEM45) RogueCmd__exit_scope__Scope,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM46) Rogue_Cmd__implicit_type,
  (void*) (ROGUEM47) RogueCmd__is_literal,
  (void*) (ROGUEM48) RogueCmd__require_type_context,
  NULL,
  NULL,
  NULL,
  NULL,
  (void*) (ROGUEM47) RogueCmd__requires_semicolon,
  (void*) (ROGUEM863) RogueCmdCallStaticMethod__resolve__Scope,
  (void*) (ROGUEM49) RogueCmd__resolve_assignment__Scope_Cmd,
  (void*) (ROGUEM50) RogueCmd__resolve_modify__Scope_Integer,
  (void*) (ROGUEM51) RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd,
  (void*) (ROGUEM692) RogueCmdCall__trace_used_code,
  (void*) (ROGUEM693) Rogue_CmdCall__type,
  (void*) (ROGUEM864) RogueCmdCallStaticMethod__write_cpp__CPPWriter_Logical,
  (void*) (ROGUEM865) RogueCmdCallStaticMethod__init_object,
  NULL, // TableEntry<<String,Token[]>>[]
  (void*) (ROGUEM866) RogueString_TokenListTableEntryList__to_String,
  (void*) (ROGUEM866) RogueString_TokenListTableEntryList__type_name,
  (void*) (ROGUEM867) RogueString_TokenListTableEntryList__init_object,
  NULL, // TableEntry<<String,Token[]>>
  (void*) (ROGUEM2) RogueObject__to_String,
  (void*) (ROGUEM868) RogueString_TokenListTableEntry__type_name,

};

int Rogue_type_info_table[839] =
{
  // dynamic_method_table_index, base_class_count, base_class_index[base_class_count], ...
  0,0,0,0,0,0,0,0,0,1,6,0,0,4,1,7,0,0,8,1,7,0,0,0,
  0,11,1,6,0,1,13,0,1,7,0,0,15,2,7,16,20,0,21,1,7,24,1,7,27,
  1,7,30,1,7,34,1,7,37,1,6,41,1,7,44,1,7,47,1,7,50,1,6,54,1,
  7,57,1,7,60,1,7,63,1,6,67,1,7,70,1,7,73,1,7,76,1,7,0,1,13,
  91,1,7,94,1,7,124,1,39,154,1,37,184,1,41,190,1,6,196,1,7,213,1,37,0,
  1,13,243,1,20,0,1,13,247,1,6,0,1,13,251,1,7,254,1,6,258,1,7,0,1,
  13,261,1,7,264,1,6,268,1,7,0,1,13,271,1,6,0,1,13,275,1,6,279,1,7,
  0,1,13,0,1,13,282,1,7,285,1,7,288,1,7,291,1,7,294,1,6,298,2,7,69,
  303,0,303,1,6,307,1,7,310,1,6,314,1,7,0,1,13,317,1,7,320,1,34,335,1,
  34,350,1,34,365,1,34,380,1,34,0,1,13,395,1,7,0,1,13,398,1,7,401,1,6,
  405,1,7,0,1,13,408,1,6,412,1,7,0,1,13,415,1,6,419,1,7,422,1,7,427,
  1,93,432,1,37,462,1,41,468,1,37,498,1,7,501,1,6,505,1,39,536,1,102,566,1,
  37,0,1,13,596,1,100,627,1,106,657,1,37,687,1,108,726,1,109,765,1,37,803,1,93,
  0,1,13,808,1,37,838,1,7,841,1,6,845,1,7,0,1,13,848,1,7,851,1,7,854,
  1,106,884,1,37,914,1,106,944,1,106,974,1,37,1004,1,37,1034,1,6,1038,1,7,0,1,
  13,1041,1,6,1045,1,7,0,1,13,1048,1,132,1078,1,37,1108,1,134,1145,1,37,1182,1,37,
  1212,1,6,1216,1,7,0,1,13,1219,1,6,1223,1,7,0,1,13,1226,2,7,16,1232,1,7,
  1235,1,7,1238,1,7,1241,2,7,16,1247,1,7,1250,1,109,1288,1,100,1319,1,100,1350,1,100,
  1381,1,100,1412,1,37,1442,1,37,1472,1,37,1502,1,37,1532,1,37,1562,1,37,1592,1,37,1622,
  1,37,1652,1,37,1682,1,37,1712,1,6,1716,1,37,1746,1,6,1750,1,37,1780,1,39,1810,1,
  37,1840,1,37,1870,1,108,1909,1,37,1939,1,173,1969,1,37,1999,1,100,2030,1,171,2060,1,177,
  2099,1,109,2138,1,177,2177,1,177,2216,1,108,2255,1,108,2294,1,108,2333,1,108,2372,1,108,2411,
  1,108,2450,1,132,2480,1,134,2517,1,189,2555,1,109,2593,1,189,2631,1,189,2669,1,189,2707,1,
  189,2745,1,189,2783,1,109,2821,1,109,2859,1,109,2897,1,109,2935,1,109,2973,1,134,3010,1,134,
  3047,1,37,3077,1,37,3107,1,132,3137,1,37,3167,1,132,3197,1,106,3227,1,37,3257,1,106,3287,
  1,106,3317,1,106,3347,1,37,3377,1,37,3407,1,6,3411,1,7,3414,1,6,3418,1,7,3421,1,
  37,3451,1,37,3481,1,6,3485,1,7,0,1,13,3488,1,6,3492,1,7,0,1,13,3495,1,6,
  3499,1,7,0,1,13,3502,1,93,3507,1,37,3537,1,37,3567,1,233,3597,1,37,3627,1,37,3657,
  1,37,3687,1,37,3717,1,37,3747,1,37,3777,1,173,3807,1,173,3837,1,242,3869,1,233,3901,1,
  233,3931,1,37,3961,1,242,3993,1,233,4023,1,233,4053,1,249,4083,1,233,4113,1,7,0,1,13,
  4116,1,6,4120,1,100,0,1,13,4151,1,6,4155,1,7,0,1,13,4158,1,6,4162,1,7,0,
  1,13,4165,1,42,4182,1,42,4199,1,42,4216,1,42,4233,1,42,4250,1,34,4265,1,7,4268,1,
  7,0,1,13,4271,1,100,0,1,13,4302,1,37,4332,1,37,4362,1,204,0,1,13,0,1,13,
  4392,1,37,4422,1,249,4452,1,6,4456,1,7,0,1,13
};

int Rogue_object_size_table[282] =
{
  (int) sizeof(RogueReal),
  (int) sizeof(RogueLong),
  (int) sizeof(RogueInteger),
  (int) sizeof(RogueString),
  (int) sizeof(RogueCharacterList),
  (int) sizeof(RogueCharacter),
  (int) sizeof(RogueClassGenericList),
  (int) sizeof(RogueObject),
  (int) sizeof(RogueStringBuilder),
  (int) sizeof(RogueOptionalInteger),
  (int) sizeof(RogueLogical),
  (int) sizeof(RogueStringList),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueByte),
  (int) sizeof(RogueClassStringReader),
  (int) sizeof(RogueClassCharacterReader),
  (int) sizeof(RogueClassGlobal),
  (int) sizeof(RogueClassConsole),
  (int) sizeof(RogueClassRogueC),
  (int) sizeof(RogueClassError),
  (int) sizeof(RogueClassProgram),
  (int) sizeof(RogueTemplateList),
  (int) sizeof(RogueClassTemplate),
  (int) sizeof(RogueClassString_TemplateTable),
  (int) sizeof(RogueClassString_AugmentListTable),
  (int) sizeof(RogueRequisiteItemList),
  (int) sizeof(RogueClassRequisiteItem),
  (int) sizeof(RogueClassMethod),
  (int) sizeof(RogueClassString_MethodListTable),
  (int) sizeof(RogueTypeList),
  (int) sizeof(RogueClassType),
  (int) sizeof(RogueClassString_TypeTable),
  (int) sizeof(RogueClassString_IntegerTable),
  (int) sizeof(RogueClassToken),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassAttributes),
  (int) sizeof(RogueClassCmd),
  (int) sizeof(RogueClassCmdReturn),
  (int) sizeof(RogueClassCmdStatement),
  (int) sizeof(RogueClassCmdStatementList),
  (int) sizeof(RogueCmdList),
  (int) sizeof(RogueClassTokenType),
  (int) sizeof(RogueClassCmdLabel),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassRogueError),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueMethodList),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCPPWriter),
  (int) sizeof(RoguePropertyList),
  (int) sizeof(RogueClassProperty),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassString_MethodTable),
  (int) sizeof(RogueLocalList),
  (int) sizeof(RogueClassLocal),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueIntegerList),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueByteList),
  (int) sizeof(RogueClassMath),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassSystem),
  (int) sizeof(RogueClassString_LogicalTable),
  (int) sizeof(RogueClassFile),
  (int) sizeof(RogueClassParser),
  (int) sizeof(RogueTokenList),
  (int) sizeof(RogueClassLineReader),
  (int) sizeof(RogueClassReader_of_String),
  (int) sizeof(RogueTypeParameterList),
  (int) sizeof(RogueClassTypeParameter),
  (int) sizeof(RogueAugmentList),
  (int) sizeof(RogueClassAugment),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassString_TokenTypeTable),
  (int) sizeof(RogueClassLiteralCharacterToken),
  (int) sizeof(RogueClassLiteralLongToken),
  (int) sizeof(RogueClassLiteralIntegerToken),
  (int) sizeof(RogueClassLiteralRealToken),
  (int) sizeof(RogueClassLiteralStringToken),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassString_TypeSpecializerTable),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassTypeSpecializer),
  (int) sizeof(RogueTableEntry_of_String_TemplateList),
  (int) sizeof(RogueClassString_TemplateTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_AugmentListList),
  (int) sizeof(RogueClassString_AugmentListTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueCmdLabelList),
  (int) sizeof(RogueClassString_CmdLabelTable),
  (int) sizeof(RogueClassCloneArgs),
  (int) sizeof(RogueClassCloneMethodArgs),
  (int) sizeof(RogueClassCmdAccess),
  (int) sizeof(RogueClassCmdArgs),
  (int) sizeof(RogueClassCmdAssign),
  (int) sizeof(RogueClassScope),
  (int) sizeof(RogueCmdControlStructureList),
  (int) sizeof(RogueClassCmdControlStructure),
  (int) sizeof(RogueClassCmdLiteralThis),
  (int) sizeof(RogueClassCmdThisContext),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdGenericLoop),
  (int) sizeof(RogueClassCmdLiteralInteger),
  (int) sizeof(RogueClassCmdLiteral),
  (int) sizeof(RogueClassCmdCompareNE),
  (int) sizeof(RogueClassCmdComparison),
  (int) sizeof(RogueClassCmdBinary),
  (int) sizeof(RogueClassTaskArgs),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdTaskControl),
  (int) sizeof(RogueClassCmdTaskControlSection),
  (int) sizeof(RogueTableEntry_of_String_MethodListList),
  (int) sizeof(RogueClassString_MethodListTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassString_CmdTable),
  (int) sizeof(RogueClassString_PropertyTable),
  (int) sizeof(RogueClassCmdLiteralNull),
  (int) sizeof(RogueClassCmdCreateCompound),
  (int) sizeof(RogueClassCmdLiteralLogical),
  (int) sizeof(RogueClassCmdLiteralString),
  (int) sizeof(RogueClassCmdWriteGlobal),
  (int) sizeof(RogueClassCmdWriteProperty),
  (int) sizeof(RogueTableEntry_of_String_TypeList),
  (int) sizeof(RogueClassString_TypeTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_IntegerList),
  (int) sizeof(RogueClassString_IntegerTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdCastToType),
  (int) sizeof(RogueClassCmdTypeOperator),
  (int) sizeof(RogueClassCmdLogicalize),
  (int) sizeof(RogueClassCmdUnary),
  (int) sizeof(RogueClassCmdCreateOptionalValue),
  (int) sizeof(RogueTableEntry_of_String_MethodList),
  (int) sizeof(RogueClassString_MethodTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_LogicalList),
  (int) sizeof(RogueClassString_LogicalTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassFileReader),
  (int) sizeof(RogueClassFileWriter),
  (int) sizeof(RogueClassTokenReader),
  (int) sizeof(RogueClassTokenizer),
  (int) sizeof(RogueClassParseReader),
  (int) sizeof(RogueClassPreprocessor),
  (int) sizeof(RogueClassCmdAdd),
  (int) sizeof(RogueClassCmdIf),
  (int) sizeof(RogueClassCmdWhich),
  (int) sizeof(RogueClassCmdContingent),
  (int) sizeof(RogueClassCmdTry),
  (int) sizeof(RogueClassCmdAwait),
  (int) sizeof(RogueClassCmdYield),
  (int) sizeof(RogueClassCmdThrow),
  (int) sizeof(RogueClassCmdTrace),
  (int) sizeof(RogueClassCmdEscape),
  (int) sizeof(RogueClassCmdNextIteration),
  (int) sizeof(RogueClassCmdNecessary),
  (int) sizeof(RogueClassCmdSufficient),
  (int) sizeof(RogueClassCmdAdjust),
  (int) sizeof(RogueClassCmdOpWithAssign),
  (int) sizeof(RogueCmdWhichCaseList),
  (int) sizeof(RogueClassCmdWhichCase),
  (int) sizeof(RogueCmdCatchList),
  (int) sizeof(RogueClassCmdCatch),
  (int) sizeof(RogueClassCmdLocalDeclaration),
  (int) sizeof(RogueClassCmdAdjustLocal),
  (int) sizeof(RogueClassCmdReadLocal),
  (int) sizeof(RogueClassCmdCompareLE),
  (int) sizeof(RogueClassCmdRange),
  (int) sizeof(RogueClassCmdLocalOpWithAssign),
  (int) sizeof(RogueClassCmdResolvedOpWithAssign),
  (int) sizeof(RogueClassCmdForEach),
  (int) sizeof(RogueClassCmdRangeUpTo),
  (int) sizeof(RogueClassCmdLogicalXor),
  (int) sizeof(RogueClassCmdBinaryLogical),
  (int) sizeof(RogueClassCmdLogicalOr),
  (int) sizeof(RogueClassCmdLogicalAnd),
  (int) sizeof(RogueClassCmdCompareEQ),
  (int) sizeof(RogueClassCmdCompareIs),
  (int) sizeof(RogueClassCmdCompareIsNot),
  (int) sizeof(RogueClassCmdCompareLT),
  (int) sizeof(RogueClassCmdCompareGT),
  (int) sizeof(RogueClassCmdCompareGE),
  (int) sizeof(RogueClassCmdInstanceOf),
  (int) sizeof(RogueClassCmdLogicalNot),
  (int) sizeof(RogueClassCmdBitwiseXor),
  (int) sizeof(RogueClassCmdBitwiseOp),
  (int) sizeof(RogueClassCmdBitwiseOr),
  (int) sizeof(RogueClassCmdBitwiseAnd),
  (int) sizeof(RogueClassCmdBitwiseShiftLeft),
  (int) sizeof(RogueClassCmdBitwiseShiftRight),
  (int) sizeof(RogueClassCmdBitwiseShiftRightX),
  (int) sizeof(RogueClassCmdSubtract),
  (int) sizeof(RogueClassCmdMultiply),
  (int) sizeof(RogueClassCmdDivide),
  (int) sizeof(RogueClassCmdMod),
  (int) sizeof(RogueClassCmdPower),
  (int) sizeof(RogueClassCmdNegate),
  (int) sizeof(RogueClassCmdBitwiseNot),
  (int) sizeof(RogueClassCmdGetOptionalValue),
  (int) sizeof(RogueClassCmdElementAccess),
  (int) sizeof(RogueClassCmdConvertToType),
  (int) sizeof(RogueClassCmdCreateCallback),
  (int) sizeof(RogueClassCmdAs),
  (int) sizeof(RogueClassCmdDefaultValue),
  (int) sizeof(RogueClassCmdFormattedString),
  (int) sizeof(RogueClassCmdLiteralReal),
  (int) sizeof(RogueClassCmdLiteralLong),
  (int) sizeof(RogueClassCmdLiteralCharacter),
  (int) sizeof(RogueClassCmdCreateList),
  (int) sizeof(RogueClassCmdCallPriorMethod),
  (int) sizeof(RogueFnParamList),
  (int) sizeof(RogueClassFnParam),
  (int) sizeof(RogueFnArgList),
  (int) sizeof(RogueClassFnArg),
  (int) sizeof(RogueClassCmdCreateFunction),
  (int) sizeof(RogueClassCmdNativeCode),
  (int) sizeof(RogueTableEntry_of_String_TokenTypeList),
  (int) sizeof(RogueClassString_TokenTypeTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_TypeSpecializerList),
  (int) sizeof(RogueClassString_TypeSpecializerTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_CmdLabelList),
  (int) sizeof(RogueClassString_CmdLabelTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassMacroArgs),
  (int) sizeof(RogueClassCmdReadSingleton),
  (int) sizeof(RogueClassCmdCreateArray),
  (int) sizeof(RogueClassCmdCallRoutine),
  (int) sizeof(RogueClassCmdCall),
  (int) sizeof(RogueClassCmdCreateObject),
  (int) sizeof(RogueClassCmdReadGlobal),
  (int) sizeof(RogueClassCmdReadProperty),
  (int) sizeof(RogueClassCmdLogicalizeOptionalValue),
  (int) sizeof(RogueClassCmdWriteLocal),
  (int) sizeof(RogueClassCmdOpAssignGlobal),
  (int) sizeof(RogueClassCmdOpAssignProperty),
  (int) sizeof(RogueClassCmdCallInlineNativeRoutine),
  (int) sizeof(RogueClassCmdCallInlineNative),
  (int) sizeof(RogueClassCmdCallNativeRoutine),
  (int) sizeof(RogueClassCmdReadArrayCount),
  (int) sizeof(RogueClassCmdCallInlineNativeMethod),
  (int) sizeof(RogueClassCmdCallNativeMethod),
  (int) sizeof(RogueClassCmdCallAspectMethod),
  (int) sizeof(RogueClassCmdCallDynamicMethod),
  (int) sizeof(RogueClassCmdCallMethod),
  (int) sizeof(RogueClassCandidateMethods),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueCmdTaskControlSectionList),
  (int) sizeof(RogueClassCmdBlock),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_CmdList),
  (int) sizeof(RogueClassString_CmdTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueTableEntry_of_String_PropertyList),
  (int) sizeof(RogueClassString_PropertyTableEntry),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassDirectiveTokenType),
  (int) sizeof(RogueClassStructuralDirectiveTokenType),
  (int) sizeof(RogueClassEOLTokenType),
  (int) sizeof(RogueClassStructureTokenType),
  (int) sizeof(RogueClassOpWithAssignTokenType),
  (int) sizeof(RogueClassEOLToken),
  (int) sizeof(RogueClassString_TokenListTable),
  (int) sizeof(RogueClassPreprocessorTokenReader),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdSwitch),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdReadArrayElement),
  (int) sizeof(RogueClassCmdWriteArrayElement),
  (int) sizeof(RogueClassCmdConvertToPrimitiveType),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueArray),
  (int) sizeof(RogueClassCmdAdjustProperty),
  (int) sizeof(RogueClassCmdCallStaticMethod),
  (int) sizeof(RogueTableEntry_of_String_TokenListList),
  (int) sizeof(RogueClassString_TokenListTableEntry),
  (int) sizeof(RogueArray)
};

int Rogue_type_count = 282;
RogueType Rogue_types[282];

RogueType* RogueTypeReal;
RogueType* RogueTypeLong;
RogueType* RogueTypeInteger;
RogueType* RogueTypeString;
RogueType* RogueTypeCharacterList;
RogueType* RogueTypeCharacter;
RogueType* RogueTypeGenericList;
RogueType* RogueTypeObject;
RogueType* RogueTypeStringBuilder;
RogueType* RogueTypeOptionalInteger;
RogueType* RogueTypeLogical;
RogueType* RogueTypeStringList;
RogueType* RogueTypeArray;
RogueType* RogueTypeByte;
RogueType* RogueTypeStringReader;
RogueType* RogueTypeCharacterReader;
RogueType* RogueTypeGlobal;
RogueType* RogueTypeConsole;
RogueType* RogueTypeRogueC;
RogueType* RogueTypeError;
RogueType* RogueTypeProgram;
RogueType* RogueTypeTemplateList;
RogueType* RogueTypeTemplate;
RogueType* RogueTypeString_TemplateTable;
RogueType* RogueTypeString_AugmentListTable;
RogueType* RogueTypeRequisiteItemList;
RogueType* RogueTypeRequisiteItem;
RogueType* RogueTypeMethod;
RogueType* RogueTypeString_MethodListTable;
RogueType* RogueTypeTypeList;
RogueType* RogueTypeType;
RogueType* RogueTypeString_TypeTable;
RogueType* RogueTypeString_IntegerTable;
RogueType* RogueTypeToken;
RogueType* RogueTypeAttributes;
RogueType* RogueTypeCmd;
RogueType* RogueTypeCmdReturn;
RogueType* RogueTypeCmdStatement;
RogueType* RogueTypeCmdStatementList;
RogueType* RogueTypeCmdList;
RogueType* RogueTypeTokenType;
RogueType* RogueTypeCmdLabel;
RogueType* RogueTypeRogueError;
RogueType* RogueTypeMethodList;
RogueType* RogueTypeCPPWriter;
RogueType* RogueTypePropertyList;
RogueType* RogueTypeProperty;
RogueType* RogueTypeString_MethodTable;
RogueType* RogueTypeLocalList;
RogueType* RogueTypeLocal;
RogueType* RogueTypeIntegerList;
RogueType* RogueTypeByteList;
RogueType* RogueTypeMath;
RogueType* RogueTypeSystem;
RogueType* RogueTypeString_LogicalTable;
RogueType* RogueTypeFile;
RogueType* RogueTypeParser;
RogueType* RogueTypeTokenList;
RogueType* RogueTypeLineReader;
RogueType* RogueTypeReader_of_String;
RogueType* RogueTypeTypeParameterList;
RogueType* RogueTypeTypeParameter;
RogueType* RogueTypeAugmentList;
RogueType* RogueTypeAugment;
RogueType* RogueTypeString_TokenTypeTable;
RogueType* RogueTypeLiteralCharacterToken;
RogueType* RogueTypeLiteralLongToken;
RogueType* RogueTypeLiteralIntegerToken;
RogueType* RogueTypeLiteralRealToken;
RogueType* RogueTypeLiteralStringToken;
RogueType* RogueTypeString_TypeSpecializerTable;
RogueType* RogueTypeTypeSpecializer;
RogueType* RogueTypeTableEntry_of_String_TemplateList;
RogueType* RogueTypeString_TemplateTableEntry;
RogueType* RogueTypeTableEntry_of_String_AugmentListList;
RogueType* RogueTypeString_AugmentListTableEntry;
RogueType* RogueTypeCmdLabelList;
RogueType* RogueTypeString_CmdLabelTable;
RogueType* RogueTypeCloneArgs;
RogueType* RogueTypeCloneMethodArgs;
RogueType* RogueTypeCmdAccess;
RogueType* RogueTypeCmdArgs;
RogueType* RogueTypeCmdAssign;
RogueType* RogueTypeScope;
RogueType* RogueTypeCmdControlStructureList;
RogueType* RogueTypeCmdControlStructure;
RogueType* RogueTypeCmdLiteralThis;
RogueType* RogueTypeCmdThisContext;
RogueType* RogueTypeCmdGenericLoop;
RogueType* RogueTypeCmdLiteralInteger;
RogueType* RogueTypeCmdLiteral;
RogueType* RogueTypeCmdCompareNE;
RogueType* RogueTypeCmdComparison;
RogueType* RogueTypeCmdBinary;
RogueType* RogueTypeTaskArgs;
RogueType* RogueTypeCmdTaskControl;
RogueType* RogueTypeCmdTaskControlSection;
RogueType* RogueTypeTableEntry_of_String_MethodListList;
RogueType* RogueTypeString_MethodListTableEntry;
RogueType* RogueTypeString_CmdTable;
RogueType* RogueTypeString_PropertyTable;
RogueType* RogueTypeCmdLiteralNull;
RogueType* RogueTypeCmdCreateCompound;
RogueType* RogueTypeCmdLiteralLogical;
RogueType* RogueTypeCmdLiteralString;
RogueType* RogueTypeCmdWriteGlobal;
RogueType* RogueTypeCmdWriteProperty;
RogueType* RogueTypeTableEntry_of_String_TypeList;
RogueType* RogueTypeString_TypeTableEntry;
RogueType* RogueTypeTableEntry_of_String_IntegerList;
RogueType* RogueTypeString_IntegerTableEntry;
RogueType* RogueTypeCmdCastToType;
RogueType* RogueTypeCmdTypeOperator;
RogueType* RogueTypeCmdLogicalize;
RogueType* RogueTypeCmdUnary;
RogueType* RogueTypeCmdCreateOptionalValue;
RogueType* RogueTypeTableEntry_of_String_MethodList;
RogueType* RogueTypeString_MethodTableEntry;
RogueType* RogueTypeTableEntry_of_String_LogicalList;
RogueType* RogueTypeString_LogicalTableEntry;
RogueType* RogueTypeFileReader;
RogueType* RogueTypeFileWriter;
RogueType* RogueTypeTokenReader;
RogueType* RogueTypeTokenizer;
RogueType* RogueTypeParseReader;
RogueType* RogueTypePreprocessor;
RogueType* RogueTypeCmdAdd;
RogueType* RogueTypeCmdIf;
RogueType* RogueTypeCmdWhich;
RogueType* RogueTypeCmdContingent;
RogueType* RogueTypeCmdTry;
RogueType* RogueTypeCmdAwait;
RogueType* RogueTypeCmdYield;
RogueType* RogueTypeCmdThrow;
RogueType* RogueTypeCmdTrace;
RogueType* RogueTypeCmdEscape;
RogueType* RogueTypeCmdNextIteration;
RogueType* RogueTypeCmdNecessary;
RogueType* RogueTypeCmdSufficient;
RogueType* RogueTypeCmdAdjust;
RogueType* RogueTypeCmdOpWithAssign;
RogueType* RogueTypeCmdWhichCaseList;
RogueType* RogueTypeCmdWhichCase;
RogueType* RogueTypeCmdCatchList;
RogueType* RogueTypeCmdCatch;
RogueType* RogueTypeCmdLocalDeclaration;
RogueType* RogueTypeCmdAdjustLocal;
RogueType* RogueTypeCmdReadLocal;
RogueType* RogueTypeCmdCompareLE;
RogueType* RogueTypeCmdRange;
RogueType* RogueTypeCmdLocalOpWithAssign;
RogueType* RogueTypeCmdResolvedOpWithAssign;
RogueType* RogueTypeCmdForEach;
RogueType* RogueTypeCmdRangeUpTo;
RogueType* RogueTypeCmdLogicalXor;
RogueType* RogueTypeCmdBinaryLogical;
RogueType* RogueTypeCmdLogicalOr;
RogueType* RogueTypeCmdLogicalAnd;
RogueType* RogueTypeCmdCompareEQ;
RogueType* RogueTypeCmdCompareIs;
RogueType* RogueTypeCmdCompareIsNot;
RogueType* RogueTypeCmdCompareLT;
RogueType* RogueTypeCmdCompareGT;
RogueType* RogueTypeCmdCompareGE;
RogueType* RogueTypeCmdInstanceOf;
RogueType* RogueTypeCmdLogicalNot;
RogueType* RogueTypeCmdBitwiseXor;
RogueType* RogueTypeCmdBitwiseOp;
RogueType* RogueTypeCmdBitwiseOr;
RogueType* RogueTypeCmdBitwiseAnd;
RogueType* RogueTypeCmdBitwiseShiftLeft;
RogueType* RogueTypeCmdBitwiseShiftRight;
RogueType* RogueTypeCmdBitwiseShiftRightX;
RogueType* RogueTypeCmdSubtract;
RogueType* RogueTypeCmdMultiply;
RogueType* RogueTypeCmdDivide;
RogueType* RogueTypeCmdMod;
RogueType* RogueTypeCmdPower;
RogueType* RogueTypeCmdNegate;
RogueType* RogueTypeCmdBitwiseNot;
RogueType* RogueTypeCmdGetOptionalValue;
RogueType* RogueTypeCmdElementAccess;
RogueType* RogueTypeCmdConvertToType;
RogueType* RogueTypeCmdCreateCallback;
RogueType* RogueTypeCmdAs;
RogueType* RogueTypeCmdDefaultValue;
RogueType* RogueTypeCmdFormattedString;
RogueType* RogueTypeCmdLiteralReal;
RogueType* RogueTypeCmdLiteralLong;
RogueType* RogueTypeCmdLiteralCharacter;
RogueType* RogueTypeCmdCreateList;
RogueType* RogueTypeCmdCallPriorMethod;
RogueType* RogueTypeFnParamList;
RogueType* RogueTypeFnParam;
RogueType* RogueTypeFnArgList;
RogueType* RogueTypeFnArg;
RogueType* RogueTypeCmdCreateFunction;
RogueType* RogueTypeCmdNativeCode;
RogueType* RogueTypeTableEntry_of_String_TokenTypeList;
RogueType* RogueTypeString_TokenTypeTableEntry;
RogueType* RogueTypeTableEntry_of_String_TypeSpecializerList;
RogueType* RogueTypeString_TypeSpecializerTableEntry;
RogueType* RogueTypeTableEntry_of_String_CmdLabelList;
RogueType* RogueTypeString_CmdLabelTableEntry;
RogueType* RogueTypeMacroArgs;
RogueType* RogueTypeCmdReadSingleton;
RogueType* RogueTypeCmdCreateArray;
RogueType* RogueTypeCmdCallRoutine;
RogueType* RogueTypeCmdCall;
RogueType* RogueTypeCmdCreateObject;
RogueType* RogueTypeCmdReadGlobal;
RogueType* RogueTypeCmdReadProperty;
RogueType* RogueTypeCmdLogicalizeOptionalValue;
RogueType* RogueTypeCmdWriteLocal;
RogueType* RogueTypeCmdOpAssignGlobal;
RogueType* RogueTypeCmdOpAssignProperty;
RogueType* RogueTypeCmdCallInlineNativeRoutine;
RogueType* RogueTypeCmdCallInlineNative;
RogueType* RogueTypeCmdCallNativeRoutine;
RogueType* RogueTypeCmdReadArrayCount;
RogueType* RogueTypeCmdCallInlineNativeMethod;
RogueType* RogueTypeCmdCallNativeMethod;
RogueType* RogueTypeCmdCallAspectMethod;
RogueType* RogueTypeCmdCallDynamicMethod;
RogueType* RogueTypeCmdCallMethod;
RogueType* RogueTypeCandidateMethods;
RogueType* RogueTypeCmdTaskControlSectionList;
RogueType* RogueTypeCmdBlock;
RogueType* RogueTypeTableEntry_of_String_CmdList;
RogueType* RogueTypeString_CmdTableEntry;
RogueType* RogueTypeTableEntry_of_String_PropertyList;
RogueType* RogueTypeString_PropertyTableEntry;
RogueType* RogueTypeDirectiveTokenType;
RogueType* RogueTypeStructuralDirectiveTokenType;
RogueType* RogueTypeEOLTokenType;
RogueType* RogueTypeStructureTokenType;
RogueType* RogueTypeOpWithAssignTokenType;
RogueType* RogueTypeEOLToken;
RogueType* RogueTypeString_TokenListTable;
RogueType* RogueTypePreprocessorTokenReader;
RogueType* RogueTypeCmdSwitch;
RogueType* RogueTypeCmdReadArrayElement;
RogueType* RogueTypeCmdWriteArrayElement;
RogueType* RogueTypeCmdConvertToPrimitiveType;
RogueType* RogueTypeCmdAdjustProperty;
RogueType* RogueTypeCmdCallStaticMethod;
RogueType* RogueTypeTableEntry_of_String_TokenListList;
RogueType* RogueTypeString_TokenListTableEntry;

int Rogue_literal_string_count = 988;
RogueString* Rogue_literal_strings[988];
void RogueStringBuilder__init_class();
void RogueTokenType__init_class();
RogueInteger RogueMath__mod__Integer_Integer( RogueInteger a_0, RogueInteger b_1 );
RogueLong RogueMath__mod__Long_Long( RogueLong a_0, RogueLong b_1 );
RogueReal RogueMath__mod__Real_Real( RogueReal a_0, RogueReal b_1 );
void RogueSystem__exit__Integer( RogueInteger result_code_0 );
void RogueSystem__init_class();
RogueString* RogueFile__absolute_filepath__String( RogueString* filepath_0 );
RogueLogical RogueFile__exists__String( RogueString* filepath_0 );
RogueString* RogueFile__filename__String( RogueString* filepath_0 );
RogueLogical RogueFile__is_folder__String( RogueString* filepath_0 );
RogueByteList* RogueFile__load_as_bytes__String( RogueString* filepath_0 );
RogueString* RogueFile__path__String( RogueString* filepath_0 );
RogueClassFileReader* RogueFile__reader__String( RogueString* filepath_0 );
RogueLogical RogueFile__save__String_String( RogueString* filepath_0, RogueString* data_1 );
RogueInteger RogueFile__size__String( RogueString* filepath_0 );
RogueClassFileWriter* RogueFile__writer__String( RogueString* filepath_0 );
void RoguePreprocessor__init_class();

void RogueStringBuilder__init_class()
{
  RogueStringBuilder_work_bytes = ((RogueByteList__init( ((RogueByteList*)ROGUE_CREATE_OBJECT(ByteList)) )));
}

void RogueTokenType__init_class()
{
}

RogueInteger RogueMath__mod__Integer_Integer( RogueInteger a_0, RogueInteger b_1 )
{
  if (((!(!!(a_0)) && !(!!(b_1))) || b_1 == 1))
  {
    return (RogueInteger)(0);
  }
  RogueInteger r_2 = (a_0 % b_1);
  if ((a_0 ^ b_1) < 0)
  {
    if (!!(r_2))
    {
      return (RogueInteger)((r_2 + b_1));
    }
    else
    {
      return (RogueInteger)(0);
    }
  }
  else
  {
    return (RogueInteger)(r_2);
  }
}

RogueLong RogueMath__mod__Long_Long( RogueLong a_0, RogueLong b_1 )
{
  if (((!(!!(a_0)) && !(!!(b_1))) || b_1 == ((RogueLong)1)))
  {
    return (RogueLong)(((RogueLong)0));
  }
  RogueInteger r_2 = (a_0 % b_1);
  if ((a_0 ^ b_1) < ((RogueLong)0))
  {
    if (!!(r_2))
    {
      return (RogueLong)((((RogueLong)r_2) + b_1));
    }
    else
    {
      return (RogueLong)(((RogueLong)0));
    }
  }
  else
  {
    return (RogueLong)(((RogueLong)r_2));
  }
}

RogueReal RogueMath__mod__Real_Real( RogueReal a_0, RogueReal b_1 )
{
  RogueReal q_2 = ((a_0 / b_1));
  return (RogueReal)((a_0 - (floor((double)q_2) * b_1)));
}

void RogueSystem__exit__Integer( RogueInteger result_code_0 )
{
  exit( result_code_0 );
}

void RogueSystem__init_class()
{
  RogueSystem_command_line_arguments = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
}

RogueString* RogueFile__absolute_filepath__String( RogueString* filepath_0 )
{
  if ( !filepath_0 ) return 0;

  char c_filepath[ PATH_MAX ];
  filepath_0->to_c_string( c_filepath, PATH_MAX );

#if defined(_WIN32)
  {
    char long_name[PATH_MAX+4];
    char full_name[PATH_MAX+4];

    if (GetLongPathName(c_filepath, long_name, PATH_MAX+4) == 0)
    {
      strcpy_s( long_name, PATH_MAX+4, c_filepath );
    }

    if (GetFullPathName(long_name, PATH_MAX+4, full_name, 0) == 0)
    {
      // bail with name unchanged 
      return filepath_0;
    }

    return RogueString::create( full_name );
  }
#else

  bool is_folder = RogueFile__is_folder__String( filepath_0 );

  {
    int original_dir_fd;
    int new_dir_fd;
    char filename[PATH_MAX];

    // A way to get back to the starting folder when finished.
    original_dir_fd = open( ".", O_RDONLY );  

    if (is_folder)
    {
      filename[0] = 0;
    }
    else
    {
      // fchdir only works with a path, not a path+filename (c_filepath).
      // Copy out the filename and null terminate the filepath to be just a path.
      int i = (int) strlen( c_filepath ) - 1;
      while (i >= 0 && c_filepath[i] != '/') --i;
      strcpy( filename, c_filepath+i+1 );
      c_filepath[i] = 0;
    }
    new_dir_fd = open( c_filepath, O_RDONLY );

    if (original_dir_fd >= 0 && new_dir_fd >= 0)
    {
      fchdir( new_dir_fd );
      getcwd( c_filepath, PATH_MAX );
      if ( !is_folder ) 
      {
        strcat( c_filepath, "/" );
        strcat( c_filepath, filename );
      }
      fchdir( original_dir_fd );
    }
    if (original_dir_fd >= 0) close( original_dir_fd );
    if (new_dir_fd >= 0) close( new_dir_fd );

    return RogueString::create( c_filepath );
  }
#endif
}

RogueLogical RogueFile__exists__String( RogueString* filepath_0 )
{
  if ( !filepath_0 ) return false;

  char c_filepath[ PATH_MAX ];
  filepath_0->to_c_string( c_filepath, PATH_MAX );

  FILE* fp = fopen( c_filepath, "rb" );
  if ( !fp ) return false;

  fclose( fp );
  return true;
}

RogueString* RogueFile__filename__String( RogueString* filepath_0 )
{
  RogueOptionalInteger i_1 = (((RogueString__locate_last__Character_OptionalInteger( filepath_0, (RogueCharacter)'/', RogueOptionalInteger() ))));
  if (!(i_1.exists))
  {
    i_1 = ((RogueOptionalInteger)((RogueString__locate_last__Character_OptionalInteger( filepath_0, (RogueCharacter)'\\', RogueOptionalInteger() ))));
  }
  if (!(i_1.exists))
  {
    return (RogueString*)(filepath_0);
  }
  return (RogueString*)(((RogueString__from__Integer( filepath_0, (i_1.value + 1) ))));
}

RogueLogical RogueFile__is_folder__String( RogueString* filepath_0 )
{
  if ( !filepath_0 ) return false;

  char c_filepath[ PATH_MAX ];
  filepath_0->to_c_string( c_filepath, PATH_MAX );

#if defined(_WIN32)
    char filepath_copy[PATH_MAX];
    strcpy( filepath_copy, c_filepath );

    int path_len = strlen( c_filepath );
    int i = strlen(filepath_copy)-1;
    while (i > 0 && (filepath_copy[i] == '/' || filepath_copy[i] == '\\')) filepath_copy[i--] = 0;

    // Windows allows dir\* to count as a directory; guard against.
    for (i=0; filepath_copy[i]; ++i)
    {
      if (filepath_copy[i] == '*' || filepath_copy[i] == '?') return 0;
    }

    WIN32_FIND_DATA entry;
    HANDLE dir = FindFirstFile( filepath_copy, &entry );
    if (dir != INVALID_HANDLE_VALUE)
    {
      if (entry.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
      {
        FindClose( dir );
        return 1;
      }
    }
    FindClose( dir );
    return 0;

#else
    DIR* dir = opendir( c_filepath );
    if ( !dir ) return 0;

    closedir( dir );
    return 1;
#endif
}

RogueByteList* RogueFile__load_as_bytes__String( RogueString* filepath_0 )
{
  RogueInteger count_1 = ((RogueFile__size__String( filepath_0 )));
  RogueByteList* bytes_2 = (((RogueByteList__init__Integer( ((RogueByteList*)ROGUE_CREATE_OBJECT(ByteList)), count_1 ))));
  RogueClassFileReader* infile_3 = ((RogueFile__reader__String( filepath_0 )));
  {
    RogueInteger _auto_220_4 = (1);
    RogueInteger _auto_221_5 = (count_1);
    for (;_auto_220_4 <= _auto_221_5;++_auto_220_4)
    {
      RogueByteList__add__Byte( bytes_2, ((RogueByte)(((RogueFileReader__read( infile_3 ))))) );
    }
  }
  RogueFileReader__close( infile_3 );
  return (RogueByteList*)(bytes_2);
}

RogueString* RogueFile__path__String( RogueString* filepath_0 )
{
  RogueOptionalInteger i_1 = (((RogueString__locate_last__Character_OptionalInteger( filepath_0, (RogueCharacter)'/', RogueOptionalInteger() ))));
  if (!(i_1.exists))
  {
    i_1 = ((RogueOptionalInteger)((RogueString__locate_last__Character_OptionalInteger( filepath_0, (RogueCharacter)'\\', RogueOptionalInteger() ))));
  }
  if (!(i_1.exists))
  {
    return (RogueString*)(Rogue_literal_strings[0]);
  }
  return (RogueString*)(((RogueString__from__Integer_Integer( filepath_0, 0, (i_1.value - 1) ))));
}

RogueClassFileReader* RogueFile__reader__String( RogueString* filepath_0 )
{
  return (RogueClassFileReader*)(((RogueFileReader__init__String( ((RogueClassFileReader*)ROGUE_CREATE_OBJECT(FileReader)), filepath_0 ))));
}

RogueLogical RogueFile__save__String_String( RogueString* filepath_0, RogueString* data_1 )
{
  RogueClassFileWriter* outfile_2 = ((RogueFile__writer__String( filepath_0 )));
  {
    RogueString* _auto_622_3 = (data_1);
    RogueInteger _auto_623_4 = (0);
    for (;_auto_623_4 < _auto_622_3->count;++_auto_623_4)
    {
      RogueCharacter ch_5 = (_auto_622_3->characters[_auto_623_4]);
      RogueFileWriter__write__Character( outfile_2, ch_5 );
    }
  }
  RogueFileWriter__close( outfile_2 );
  return (RogueLogical)(true);
}

RogueInteger RogueFile__size__String( RogueString* filepath_0 )
{
  if ( !filepath_0 ) return 0;

  char c_filepath[ PATH_MAX ];
  filepath_0->to_c_string( c_filepath, sizeof(c_filepath) );

  FILE* fp = fopen( c_filepath, "rb" );
  if ( !fp ) return 0;

  fseek( fp, 0, SEEK_END );
  RogueInteger size = (RogueInteger) ftell( fp );
  fclose( fp );

  return size;
}

RogueClassFileWriter* RogueFile__writer__String( RogueString* filepath_0 )
{
  return (RogueClassFileWriter*)(((RogueFileWriter__init__String( ((RogueClassFileWriter*)ROGUE_CREATE_OBJECT(FileWriter)), filepath_0 ))));
}

void RoguePreprocessor__init_class()
{
  RoguePreprocessor_definitions = ((RogueString_TokenListTable__init( ((RogueClassString_TokenListTable*)ROGUE_CREATE_OBJECT(String_TokenListTable)) )));
}


RogueString* RogueInteger__to_String( RogueInteger THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Integer( Rogue_literal_strings[0], THIS ))));
  return (RogueString*)(Rogue_literal_strings[23]);
}

RogueString* RogueString__after_first__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInteger i_1 = (((RogueString__locate__Character_OptionalInteger( THIS, ch_0, RogueOptionalInteger() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Integer( THIS, (i_1.value + 1) ))));
  }
  else
  {
    return (RogueString*)(Rogue_literal_strings[0]);
  }
}

RogueString* RogueString__after_first__String( RogueString* THIS, RogueString* st_0 )
{
  RogueOptionalInteger i_1 = (((RogueString__locate__String_OptionalInteger( THIS, st_0, RogueOptionalInteger() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Integer( THIS, (i_1.value + st_0->count) ))));
  }
  else
  {
    return (RogueString*)(Rogue_literal_strings[0]);
  }
}

RogueString* RogueString__after_last__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInteger i_1 = (((RogueString__locate_last__Character_OptionalInteger( THIS, ch_0, RogueOptionalInteger() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Integer( THIS, (i_1.value + 1) ))));
  }
  else
  {
    return (RogueString*)(Rogue_literal_strings[0]);
  }
}

RogueString* RogueString__before_first__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInteger i_1 = (((RogueString__locate__Character_OptionalInteger( THIS, ch_0, RogueOptionalInteger() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Integer_Integer( THIS, 0, (i_1.value - 1) ))));
  }
  else
  {
    return (RogueString*)(THIS);
  }
}

RogueString* RogueString__before_first__String( RogueString* THIS, RogueString* st_0 )
{
  RogueOptionalInteger i_1 = (((RogueString__locate__String_OptionalInteger( THIS, st_0, RogueOptionalInteger() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Integer_Integer( THIS, 0, (i_1.value - 1) ))));
  }
  else
  {
    return (RogueString*)(THIS);
  }
}

RogueString* RogueString__before_last__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInteger i_1 = (((RogueString__locate_last__Character_OptionalInteger( THIS, ch_0, RogueOptionalInteger() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Integer_Integer( THIS, 0, (i_1.value - 1) ))));
  }
  else
  {
    return (RogueString*)(THIS);
  }
}

RogueString* RogueString__before_last__String( RogueString* THIS, RogueString* st_0 )
{
  RogueOptionalInteger i_1 = (((RogueString__locate_last__String_OptionalInteger( THIS, st_0, RogueOptionalInteger() ))));
  if (i_1.exists)
  {
    return (RogueString*)(((RogueString__from__Integer_Integer( THIS, 0, (i_1.value - 1) ))));
  }
  else
  {
    return (RogueString*)(THIS);
  }
}

RogueLogical RogueString__begins_with__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  return (RogueLogical)((!!(THIS->count) && THIS->characters[0] == ch_0));
}

RogueLogical RogueString__begins_with__String( RogueString* THIS, RogueString* other_0 )
{
  RogueInteger other_count_1 = (other_0->count);
  return (RogueLogical)((THIS->count >= other_count_1 && ((RogueString__contains_at__String_Integer( THIS, other_0, 0 )))));
}

RogueLogical RogueString__contains__String( RogueString* THIS, RogueString* substring_0 )
{
  return (RogueLogical)(((RogueString__locate__String_OptionalInteger( THIS, substring_0, RogueOptionalInteger() ))).exists);
}

RogueLogical RogueString__contains_at__String_Integer( RogueString* THIS, RogueString* substring_0, RogueInteger at_index_1 )
{
  RogueInteger other_count = substring_0->count;
  if (at_index_1 < 0 || at_index_1 + other_count > THIS->count) return false;

  RogueCharacter* this_data  = THIS->characters;
  RogueCharacter* other_data = substring_0->characters;

  int i = -1;
  int i2 = other_count - 1;
  while (++i <= i2)
  {
    if (this_data[at_index_1+i] != other_data[i]) return false;
  }

  return true;
}

RogueLogical RogueString__ends_with__String( RogueString* THIS, RogueString* other_0 )
{
  RogueInteger other_count_1 = (other_0->count);
  return (RogueLogical)(((THIS->count >= other_count_1 && other_count_1 > 0) && ((RogueString__contains_at__String_Integer( THIS, other_0, (THIS->count - other_count_1) )))));
}

RogueString* RogueString__from__Integer( RogueString* THIS, RogueInteger i1_0 )
{
  return (RogueString*)(((RogueString__from__Integer_Integer( THIS, i1_0, (THIS->count - 1) ))));
}

RogueString* RogueString__from__Integer_Integer( RogueString* THIS, RogueInteger i1_0, RogueInteger i2_1 )
{
  // Clamp i1 and i2
  if (i1_0 < 0) i1_0 = 0;
  if (i2_1 >= THIS->count) i2_1 = THIS->count - 1;

  // Return empty quotes if zero-length
  if (i1_0 > i2_1) return Rogue_literal_strings[0]; // empty string

  int new_count = (i2_1 - i1_0) + 1;

  RogueString* result = RogueString::create( new_count );

  // Copy character substring while computing hash code.
  RogueCharacter* dest = result->characters - 1;
  RogueCharacter* src  = (THIS->characters + i1_0) - 1;
  RogueInteger hash_code = 0;
  while (--new_count >= 0)
  {
    RogueCharacter ch = *(++src);
    *(++dest) = ch;
    hash_code = ((hash_code << 3) - hash_code) + ch;  // hash * 7 + ch
  }

  result->hash_code = hash_code;
  return result;
}

RogueString* RogueString__from_first__Character( RogueString* THIS, RogueCharacter ch_0 )
{
  RogueOptionalInteger i_1 = (((RogueString__locate__Character_OptionalInteger( THIS, ch_0, RogueOptionalInteger() ))));
  if (!(i_1.exists))
  {
    return (RogueString*)(Rogue_literal_strings[0]);
  }
  return (RogueString*)(((RogueString__from__Integer( THIS, i_1.value ))));
}

RogueCharacter RogueString__last( RogueString* THIS )
{
  return (RogueCharacter)(THIS->characters[(THIS->count - 1)]);
}

RogueString* RogueString__leftmost__Integer( RogueString* THIS, RogueInteger n_0 )
{
  if (n_0 >= 0)
  {
    return (RogueString*)(((RogueString__from__Integer_Integer( THIS, 0, (n_0 - 1) ))));
  }
  else
  {
    return (RogueString*)(((RogueString__from__Integer_Integer( THIS, 0, ((THIS->count + n_0) - 1) ))));
  }
}

RogueOptionalInteger RogueString__locate__Character_OptionalInteger( RogueString* THIS, RogueCharacter ch_0, RogueOptionalInteger optional_i1_1 )
{
  RogueInteger    limit = THIS->count;
  RogueCharacter* data  = THIS->characters;
  RogueInteger    i1 = optional_i1_1.exists ? (optional_i1_1.value-1) : -1;

  while (++i1 < limit)
  {
    if (data[i1] == ch_0)
    {
      return RogueOptionalInteger(i1);
    }
  }
  return RogueOptionalInteger();
}

RogueOptionalInteger RogueString__locate__String_OptionalInteger( RogueString* THIS, RogueString* other_0, RogueOptionalInteger optional_i1_1 )
{
  RogueInteger other_count_2 = (other_0->count);
  if (other_count_2 == 1)
  {
    return (RogueOptionalInteger)(((RogueString__locate__Character_OptionalInteger( THIS, other_0->characters[0], optional_i1_1 ))));
  }
  RogueInteger this_limit_3 = (((THIS->count - other_count_2) + 1));
  if ((other_count_2 == 0 || this_limit_3 <= 0))
  {
    return (RogueOptionalInteger)(RogueOptionalInteger());
  }
  RogueInteger i1_4 = 0;
  if (optional_i1_1.exists)
  {
    i1_4 = ((RogueInteger)(optional_i1_1.value - 1));
    if (i1_4 < -1)
    {
      i1_4 = ((RogueInteger)-1);
    }
  }
  else
  {
    i1_4 = ((RogueInteger)-1);
  }
  while (++i1_4 < this_limit_3)
  {
    if (((RogueString__contains_at__String_Integer( THIS, other_0, i1_4 ))))
    {
      return (RogueOptionalInteger)(RogueOptionalInteger( i1_4 ));
    }
  }
  return (RogueOptionalInteger)(RogueOptionalInteger());
}

RogueOptionalInteger RogueString__locate_last__Character_OptionalInteger( RogueString* THIS, RogueCharacter ch_0, RogueOptionalInteger starting_index_1 )
{
  RogueInteger    limit = THIS->count;
  RogueCharacter* data  = THIS->characters;

  int i;
  if (starting_index_1.exists)
  {
    i = starting_index_1.value + 1;
    if (i > limit) i = limit;
  }
  else
  {
    i = limit;
  }

  while (--i >= 0)
  {
    if (data[i] == ch_0) return RogueOptionalInteger(i);
  }

  return RogueOptionalInteger();
}

RogueOptionalInteger RogueString__locate_last__String_OptionalInteger( RogueString* THIS, RogueString* other_0, RogueOptionalInteger starting_index_1 )
{
  RogueInteger other_count_2 = (other_0->count);
  if (other_count_2 == 1)
  {
    return (RogueOptionalInteger)(((RogueString__locate_last__Character_OptionalInteger( THIS, other_0->characters[0], starting_index_1 ))));
  }
  RogueInteger this_limit_3 = (((THIS->count - other_count_2) + 1));
  if ((other_count_2 == 0 || this_limit_3 <= 0))
  {
    return (RogueOptionalInteger)(RogueOptionalInteger());
  }
  RogueInteger i_4 = 0;
  if (starting_index_1.exists)
  {
    i_4 = ((RogueInteger)(starting_index_1.value + 1));
    if (i_4 > this_limit_3)
    {
      i_4 = ((RogueInteger)this_limit_3);
    }
  }
  else
  {
    i_4 = ((RogueInteger)this_limit_3);
  }
  while (--i_4 >= 0)
  {
    if (((RogueString__contains_at__String_Integer( THIS, other_0, i_4 ))))
    {
      return (RogueOptionalInteger)(RogueOptionalInteger( i_4 ));
    }
  }
  return (RogueOptionalInteger)(RogueOptionalInteger());
}

RogueString* RogueString__operatorPLUS__Character( RogueString* THIS, RogueCharacter value_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__Character( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), THIS ))), value_0 ))) ))));
}

RogueString* RogueString__operatorPLUS__Integer( RogueString* THIS, RogueInteger value_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__Integer( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), THIS ))), value_0 ))) ))));
}

RogueInteger RogueString__operatorLESSTHANGREATERTHAN__String( RogueString* THIS, RogueString* other_0 )
{
  if (THIS == other_0) return 0;

  RogueInteger other_count = other_0->count;
  RogueInteger limit = THIS->count;

  int result;
  if (limit == other_count)
  {
    // Strings are same length
    result = memcmp( THIS->characters, other_0->characters, limit * sizeof(RogueCharacter) );
    if (result == 0) return 0;
  }
  else
  {
    // Strings differ in length.  Compare the part that matches first.
    if (limit > other_count) limit = other_count;
    result = memcmp( THIS->characters, other_0->characters, limit * sizeof(RogueCharacter) );
    if (result == 0)
    {
      // Equal so far - the shorter string comes before the longer one.
      if (limit == other_count) return 1;
      return -1;
    }
  }
  if (result < 0) return -1;
  else            return 1;
}

RogueString* RogueString__operatorPLUS__Long( RogueString* THIS, RogueLong value_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__Long( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), THIS ))), value_0 ))) ))));
}

RogueString* RogueString__operatorPLUS__Object( RogueString* THIS, RogueObject* value_0 )
{
  if (!!(value_0))
  {
    return (RogueString*)(((RogueString__operatorPLUS__String( THIS, (call_ROGUEM2( 1, (RogueObject*)(value_0) )) ))));
  }
  else
  {
    return (RogueString*)(((RogueString__operatorPLUS__String( THIS, Rogue_literal_strings[2] ))));
  }
}

RogueString* RogueString__operatorPLUS__Real( RogueString* THIS, RogueReal value_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__Real( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), THIS ))), value_0 ))) ))));
}

RogueString* RogueString__operatorPLUS__String( RogueString* THIS, RogueString* value_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), THIS ))), value_0 ))) ))));
}

RogueClassStringReader* RogueString__reader( RogueString* THIS )
{
  return (RogueClassStringReader*)(((RogueStringReader__init__String( ((RogueClassStringReader*)ROGUE_CREATE_OBJECT(StringReader)), THIS ))));
}

RogueString* RogueString__replace__Character_Character( RogueString* THIS, RogueCharacter existing_ch_0, RogueCharacter replacement_ch_1 )
{
  {
    {
      {
        RogueString* _auto_17_3 = (THIS);
        RogueInteger _auto_18_4 = (0);
        for (;_auto_18_4 < _auto_17_3->count;++_auto_18_4)
        {
          RogueCharacter ch_5 = (_auto_17_3->characters[_auto_18_4]);
          if ( !(ch_5 != existing_ch_0) ) goto _auto_19;
        }
      }
      return (RogueString*)(THIS);
      goto _auto_16;
    }
    _auto_19:;
    RogueStringBuilder* result_2 = (((RogueStringBuilder__init__Integer( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)), THIS->count ))));
    {
      RogueString* _auto_20_6 = (THIS);
      RogueInteger _auto_21_7 = (0);
      for (;_auto_21_7 < _auto_20_6->count;++_auto_21_7)
      {
        RogueCharacter ch_8 = (_auto_20_6->characters[_auto_21_7]);
        if (ch_8 == existing_ch_0)
        {
          RogueStringBuilder__print__Character( result_2, replacement_ch_1 );
        }
        else
        {
          RogueStringBuilder__print__Character( result_2, ch_8 );
        }
      }
    }
    return (RogueString*)(((RogueStringBuilder__to_String( result_2 ))));
  }
  _auto_16:;
}

RogueString* RogueString__rightmost__Integer( RogueString* THIS, RogueInteger n_0 )
{
  RogueInteger this_count_1 = (THIS->count);
  if (n_0 < 0)
  {
    return (RogueString*)(((RogueString__from__Integer_Integer( THIS, (-(n_0)), (this_count_1 - 1) ))));
  }
  else
  {
    return (RogueString*)(((RogueString__from__Integer_Integer( THIS, (this_count_1 - n_0), (this_count_1 - 1) ))));
  }
}

RogueStringList* RogueString__split__Character( RogueString* THIS, RogueCharacter separator_0 )
{
  RogueStringList* result_1 = (((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) ))));
  RogueInteger i1_2 = (0);
  RogueOptionalInteger i2_3 = (((RogueString__locate__Character_OptionalInteger( THIS, separator_0, RogueOptionalInteger( i1_2 ) ))));
  while (i2_3.exists)
  {
    RogueStringList__add__String( result_1, ((RogueString__from__Integer_Integer( THIS, i1_2, (i2_3.value - 1) ))) );
    i1_2 = ((RogueInteger)(i2_3.value + 1));
    i2_3 = ((RogueOptionalInteger)((RogueString__locate__Character_OptionalInteger( THIS, separator_0, RogueOptionalInteger( i1_2 ) ))));
  }
  RogueStringList__add__String( result_1, ((RogueString__from__Integer( THIS, i1_2 ))) );
  return (RogueStringList*)(result_1);
}

RogueString* RogueString__to_lowercase( RogueString* THIS )
{
  RogueLogical has_uc_0 = (false);
  {
    RogueString* _auto_24_2 = (THIS);
    RogueInteger _auto_25_3 = (0);
    for (;_auto_25_3 < _auto_24_2->count;++_auto_25_3)
    {
      RogueCharacter ch_4 = (_auto_24_2->characters[_auto_25_3]);
      if ((ch_4 >= (RogueCharacter)'A' && ch_4 <= (RogueCharacter)'Z'))
      {
        has_uc_0 = ((RogueLogical)true);
        goto _auto_26;
      }
    }
  }
  _auto_26:;
  if (!(has_uc_0))
  {
    return (RogueString*)(THIS);
  }
  RogueStringBuilder* result_1 = (((RogueStringBuilder__init__Integer( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)), THIS->count ))));
  {
    RogueString* _auto_27_5 = (THIS);
    RogueInteger _auto_28_6 = (0);
    for (;_auto_28_6 < _auto_27_5->count;++_auto_28_6)
    {
      RogueCharacter ch_7 = (_auto_27_5->characters[_auto_28_6]);
      if ((ch_7 >= (RogueCharacter)'A' && ch_7 <= (RogueCharacter)'Z'))
      {
        RogueStringBuilder__print__Character( result_1, ((RogueCharacter)(((ch_7 - (RogueCharacter)'A') + ((RogueInteger)((RogueCharacter)'a'))))) );
      }
      else
      {
        RogueStringBuilder__print__Character( result_1, ch_7 );
      }
    }
  }
  return (RogueString*)(((RogueStringBuilder__to_String( result_1 ))));
}

RogueStringList* RogueString__word_wrapped__Integer( RogueString* THIS, RogueInteger width_0 )
{
  return (RogueStringList*)(((RogueString__split__Character( ((RogueStringBuilder__to_String( ((RogueString__word_wrapped__Integer_StringBuilder( THIS, width_0, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))), (RogueCharacter)10 ))));
}

RogueStringBuilder* RogueString__word_wrapped__Integer_StringBuilder( RogueString* THIS, RogueInteger width_0, RogueStringBuilder* buffer_1 )
{
  RogueInteger i1_2 = 0;
  RogueInteger i2_3 = 0;
  RogueInteger len_4 = (THIS->count);
  if (len_4 == 0)
  {
    return (RogueStringBuilder*)(buffer_1);
  }
  RogueLogical needs_newline_5 = (false);
  while (i2_3 < len_4)
  {
    while ((((i2_3 - i1_2) < width_0 && i2_3 < len_4) && THIS->characters[i2_3] != (RogueCharacter)10))
    {
      ++i2_3;
    }
    if ((i2_3 - i1_2) == width_0)
    {
      if (i2_3 >= len_4)
      {
        i2_3 = ((RogueInteger)len_4);
      }
      else
      {
        while (((THIS->characters[i2_3] != (RogueCharacter)' ' && THIS->characters[i2_3] != (RogueCharacter)10) && i2_3 > i1_2))
        {
          --i2_3;
        }
        if (i2_3 == i1_2)
        {
          i2_3 = ((RogueInteger)(i1_2 + width_0));
        }
      }
    }
    if (needs_newline_5)
    {
      RogueStringBuilder__println( buffer_1 );
    }
    {
      RogueInteger i_6 = (i1_2);
      RogueInteger _auto_6_7 = ((i2_3 - 1));
      for (;i_6 <= _auto_6_7;++i_6)
      {
        RogueStringBuilder__print__Character( buffer_1, THIS->characters[i_6] );
      }
    }
    needs_newline_5 = ((RogueLogical)true);
    if (i2_3 == len_4)
    {
      return (RogueStringBuilder*)(buffer_1);
    }
    else
    {
      switch (((RogueInteger)(THIS->characters[i2_3])))
      {
        case (RogueCharacter)' ':
        {
          while ((i2_3 < len_4 && THIS->characters[i2_3] == (RogueCharacter)' '))
          {
            ++i2_3;
          }
          if ((i2_3 < len_4 && THIS->characters[i2_3] == (RogueCharacter)10))
          {
            ++i2_3;
          }
          break;
        }
        case (RogueCharacter)10:
        {
          ++i2_3;
          break;
        }
      }
      i1_2 = ((RogueInteger)i2_3);
    }
  }
  return (RogueStringBuilder*)(buffer_1);
}

RogueString* RogueCharacterList__to_String( RogueCharacterList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueCharacterList* _auto_210_2 = (THIS);
    RogueInteger _auto_211_3 = (0);
    for (;_auto_211_3 < _auto_210_2->count;++_auto_211_3)
    {
      RogueCharacter value_4 = (_auto_210_2->data->characters[_auto_211_3]);
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (false)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ((RogueCharacter__to_String( value_4 ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCharacterList__type_name( RogueCharacterList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[921]);
}

RogueCharacterList* RogueCharacterList__init_object( RogueCharacterList* THIS )
{
  return (RogueCharacterList*)(THIS);
}

RogueCharacterList* RogueCharacterList__init__Integer( RogueCharacterList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueCharacter) );
  return (RogueCharacterList*)(THIS);
}

RogueCharacterList* RogueCharacterList__add__Character( RogueCharacterList* THIS, RogueCharacter value_0 )
{
  ((RogueCharacterList__reserve__Integer( THIS, 1 )))->data->characters[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCharacterList*)(THIS);
}

RogueInteger RogueCharacterList__capacity( RogueCharacterList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueCharacterList* RogueCharacterList__clear( RogueCharacterList* THIS )
{
  THIS->count = 0;
  return (RogueCharacterList*)(THIS);
}

RogueCharacterList* RogueCharacterList__reserve__Integer( RogueCharacterList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueCharacter) );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueCharacterList__capacity( THIS ))) + ((RogueCharacterList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueCharacter) ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCharacterList*)(THIS);
}

RogueLogical RogueCharacter__is_alphanumeric( RogueCharacter THIS )
{
  return (RogueLogical)((((THIS >= (RogueCharacter)'0' && THIS <= (RogueCharacter)'9') || (THIS >= (RogueCharacter)'a' && THIS <= (RogueCharacter)'z')) || (THIS >= (RogueCharacter)'A' && THIS <= (RogueCharacter)'Z')));
}

RogueLogical RogueCharacter__is_identifier( RogueCharacter THIS )
{
  return (RogueLogical)(((((THIS >= (RogueCharacter)'0' && THIS <= (RogueCharacter)'9') || (THIS >= (RogueCharacter)'a' && THIS <= (RogueCharacter)'z')) || (THIS >= (RogueCharacter)'A' && THIS <= (RogueCharacter)'Z')) || THIS == (RogueCharacter)'_'));
}

RogueLogical RogueCharacter__is_letter( RogueCharacter THIS )
{
  return (RogueLogical)(((THIS >= (RogueCharacter)'a' && THIS <= (RogueCharacter)'z') || (THIS >= (RogueCharacter)'A' && THIS <= (RogueCharacter)'Z')));
}

RogueLogical RogueCharacter__is_number__Integer( RogueCharacter THIS, RogueInteger base_0 )
{
  return (RogueLogical)(((RogueCharacter__to_number__Integer( THIS, base_0 ))) != -1);
}

RogueString* RogueCharacter__to_String( RogueCharacter THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Character( Rogue_literal_strings[0], THIS ))));
  return (RogueString*)(Rogue_literal_strings[24]);
}

RogueInteger RogueCharacter__to_number__Integer( RogueCharacter THIS, RogueInteger base_0 )
{
  if ((THIS >= (RogueCharacter)'0' && ((RogueInteger)(THIS)) < (((RogueInteger)((RogueCharacter)'0')) + base_0)))
  {
    return (RogueInteger)((THIS - (RogueCharacter)'0'));
  }
  if ((THIS >= (RogueCharacter)'a' && ((RogueInteger)(THIS)) < ((((RogueInteger)((RogueCharacter)'a')) - 10) + base_0)))
  {
    return (RogueInteger)(((THIS - (RogueCharacter)'a') + 10));
  }
  if ((THIS >= (RogueCharacter)'A' && ((RogueInteger)(THIS)) < ((((RogueInteger)((RogueCharacter)'A')) - 10) + base_0)))
  {
    return (RogueInteger)(((THIS - (RogueCharacter)'A') + 10));
  }
  return (RogueInteger)(-1);
}

RogueString* RogueGenericList__type_name( RogueClassGenericList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[31]);
}

RogueClassGenericList* RogueGenericList__init_object( RogueClassGenericList* THIS )
{
  return (RogueClassGenericList*)(THIS);
}

RogueLogical RogueObject__operatorEQUALSEQUALS__Object( RogueObject* THIS, RogueObject* other_0 )
{
  return (RogueLogical)(THIS == other_0);
}

RogueString* RogueObject__to_String( RogueObject* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( Rogue_literal_strings[176], (call_ROGUEM2( 2, (RogueObject*)(THIS) )) ))), Rogue_literal_strings[100] ))));
}

RogueString* RogueObject__type_name( RogueObject* THIS )
{
  return (RogueString*)(Rogue_literal_strings[27]);
}

RogueString* RogueStringBuilder__to_String( RogueStringBuilder* THIS )
{
  return (RogueString*)(RogueString::create( THIS->characters ));
}

RogueString* RogueStringBuilder__type_name( RogueStringBuilder* THIS )
{
  return (RogueString*)(Rogue_literal_strings[29]);
}

RogueStringBuilder* RogueStringBuilder__init( RogueStringBuilder* THIS )
{
  RogueStringBuilder__init__Integer( THIS, 40 );
  return (RogueStringBuilder*)(THIS);
}

RogueStringBuilder* RogueStringBuilder__init__Integer( RogueStringBuilder* THIS, RogueInteger initial_capacity_0 )
{
  THIS->characters = ((RogueCharacterList__init__Integer( ((RogueCharacterList*)ROGUE_CREATE_OBJECT(CharacterList)), initial_capacity_0 )));
  return (RogueStringBuilder*)(THIS);
}

RogueStringBuilder* RogueStringBuilder__clear( RogueStringBuilder* THIS )
{
  RogueCharacterList__clear( THIS->characters );
  THIS->at_newline = true;
  return (RogueStringBuilder*)(THIS);
}

RogueLogical RogueStringBuilder__needs_indent( RogueStringBuilder* THIS )
{
  return (RogueLogical)((THIS->at_newline && THIS->indent > 0));
}

RogueStringBuilder* RogueStringBuilder__print__Character( RogueStringBuilder* THIS, RogueCharacter value_0 )
{
  if (value_0 == (RogueCharacter)10)
  {
    THIS->at_newline = true;
  }
  else if (((RogueStringBuilder__needs_indent( THIS ))))
  {
    RogueStringBuilder__print_indent( THIS );
  }
  RogueCharacterList__add__Character( THIS->characters, value_0 );
  return (RogueStringBuilder*)(THIS);
}

RogueStringBuilder* RogueStringBuilder__print__Integer( RogueStringBuilder* THIS, RogueInteger value_0 )
{
  return (RogueStringBuilder*)(((RogueStringBuilder__print__Long( THIS, ((RogueLong)(value_0)) ))));
}

RogueStringBuilder* RogueStringBuilder__print__Logical( RogueStringBuilder* THIS, RogueLogical value_0 )
{
  if (value_0)
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__String( THIS, Rogue_literal_strings[146] ))));
  }
  else
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__String( THIS, Rogue_literal_strings[137] ))));
  }
}

RogueStringBuilder* RogueStringBuilder__print__Long( RogueStringBuilder* THIS, RogueLong value_0 )
{
  if (value_0 == (((RogueLong)(1)) << ((RogueLong)63)))
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__String( THIS, Rogue_literal_strings[206] ))));
  }
  else if (value_0 < ((RogueLong)0))
  {
    RogueStringBuilder__print__Character( THIS, (RogueCharacter)'-' );
    return (RogueStringBuilder*)(((RogueStringBuilder__print__Long( THIS, (-(value_0)) ))));
  }
  else if (value_0 >= ((RogueLong)10))
  {
    RogueStringBuilder__print__Long( THIS, (value_0 / ((RogueLong)10)) );
    return (RogueStringBuilder*)(((RogueStringBuilder__print__Character( THIS, ((RogueCharacter)((((RogueLong)((RogueCharacter)'0')) + (RogueMath__mod__Long_Long( value_0, ((RogueLong)10) ))))) ))));
  }
  else
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__Character( THIS, ((RogueCharacter)((((RogueLong)((RogueCharacter)'0')) + value_0))) ))));
  }
}

RogueStringBuilder* RogueStringBuilder__print__Object( RogueStringBuilder* THIS, RogueObject* value_0 )
{
  if (!!(value_0))
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__String( THIS, (call_ROGUEM2( 1, (RogueObject*)(value_0) )) ))));
  }
  return (RogueStringBuilder*)(((RogueStringBuilder__print__String( THIS, Rogue_literal_strings[2] ))));
}

RogueStringBuilder* RogueStringBuilder__print__Real( RogueStringBuilder* THIS, RogueReal value_0 )
{
  RogueReal original_value_1 = (value_0);
  if (value_0 < 0.0)
  {
    RogueStringBuilder__print__Character( THIS, (RogueCharacter)'-' );
    value_0 = ((RogueReal)(-(value_0)));
  }
  if (value_0 == 0.0)
  {
    RogueStringBuilder__print__String( THIS, Rogue_literal_strings[637] );
    return (RogueStringBuilder*)(THIS);
  }
  if (value_0 >= 1.0e15)
  {
    RogueInteger pow10_2 = (0);
    while (value_0 >= 10.0)
    {
      value_0 /= 10.0;
      ++pow10_2;
    }
    return (RogueStringBuilder*)(((RogueStringBuilder__print__Integer( ((RogueStringBuilder__print__Character( ((RogueStringBuilder__print__Real( THIS, value_0 ))), (RogueCharacter)'e' ))), pow10_2 ))));
  }
  if (value_0 < 0.00001)
  {
    RogueInteger pow10_3 = (0);
    while (value_0 < 0.1)
    {
      value_0 *= 10.0;
      --pow10_3;
    }
    return (RogueStringBuilder*)(((RogueStringBuilder__print__Integer( ((RogueStringBuilder__print__Character( ((RogueStringBuilder__print__Real( THIS, value_0 ))), (RogueCharacter)'e' ))), pow10_3 ))));
  }
  {
    RogueInteger decimal_count_4 = (1);
    RogueInteger _auto_8_5 = (18);
    for (;decimal_count_4 <= _auto_8_5;++decimal_count_4)
    {
      RogueStringBuilder__print_to_work_bytes__Real_Integer( THIS, value_0, decimal_count_4 );
      if (((RogueStringBuilder__scan_work_bytes( THIS ))) == value_0)
      {
        goto _auto_201;
      }
    }
  }
  _auto_201:;
  RogueStringBuilder__print_work_bytes( THIS );
  return (RogueStringBuilder*)(THIS);
}

RogueStringBuilder* RogueStringBuilder__print__String( RogueStringBuilder* THIS, RogueString* value_0 )
{
  if (!!(value_0))
  {
    if (!!(THIS->indent))
    {
      {
        RogueString* _auto_202_1 = (value_0);
        RogueInteger _auto_203_2 = (0);
        for (;_auto_203_2 < _auto_202_1->count;++_auto_203_2)
        {
          RogueCharacter ch_3 = (_auto_202_1->characters[_auto_203_2]);
          RogueStringBuilder__print__Character( THIS, ch_3 );
        }
      }
    }
    else
    {
      {
        RogueString* _auto_204_4 = (value_0);
        RogueInteger _auto_205_5 = (0);
        for (;_auto_205_5 < _auto_204_4->count;++_auto_205_5)
        {
          RogueCharacter ch_6 = (_auto_204_4->characters[_auto_205_5]);
          RogueCharacterList__add__Character( THIS->characters, ch_6 );
        }
      }
      if ((!!(value_0->count) && ((RogueString__last( value_0 ))) == (RogueCharacter)10))
      {
        THIS->at_newline = true;
      }
    }
    return (RogueStringBuilder*)(THIS);
  }
  else
  {
    return (RogueStringBuilder*)(((RogueStringBuilder__print__String( THIS, Rogue_literal_strings[2] ))));
  }
}

void RogueStringBuilder__print_indent( RogueStringBuilder* THIS )
{
  if ((!(((RogueStringBuilder__needs_indent( THIS )))) || THIS->indent == 0))
  {
    return;
  }
  {
    RogueInteger i_0 = (1);
    RogueInteger _auto_9_1 = (THIS->indent);
    for (;i_0 <= _auto_9_1;++i_0)
    {
      RogueCharacterList__add__Character( THIS->characters, (RogueCharacter)' ' );
    }
  }
  THIS->at_newline = false;
}

RogueStringBuilder* RogueStringBuilder__print_to_work_bytes__Real_Integer( RogueStringBuilder* THIS, RogueReal value_0, RogueInteger decimal_places_1 )
{
  RogueByteList__clear( RogueStringBuilder_work_bytes );
  RogueReal whole_2 = (floor((double)value_0));
  value_0 -= whole_2;
  while (whole_2 >= 10.0)
  {
    RogueByteList__add__Byte( RogueStringBuilder_work_bytes, ((RogueByte)(((RogueCharacter)((((RogueInteger)((RogueCharacter)'0')) + ((RogueInteger)((RogueMath__mod__Real_Real( whole_2, 10.0 ))))))))) );
    whole_2 /= 10.0;
  }
  RogueByteList__add__Byte( RogueStringBuilder_work_bytes, ((RogueByte)(((RogueCharacter)((((RogueInteger)((RogueCharacter)'0')) + ((RogueInteger)((RogueMath__mod__Real_Real( whole_2, 10.0 ))))))))) );
  RogueByteList__reverse( RogueStringBuilder_work_bytes );
  if (decimal_places_1 != 0)
  {
    RogueByteList__add__Byte( RogueStringBuilder_work_bytes, ((RogueByte)((RogueCharacter)'.')) );
    {
      RogueInteger _auto_10_3 = (1);
      RogueInteger _auto_11_4 = (decimal_places_1);
      for (;_auto_10_3 <= _auto_11_4;++_auto_10_3)
      {
        value_0 *= 10.0;
        RogueInteger digit_5 = (((RogueInteger)(floor((double)value_0))));
        value_0 -= ((RogueReal)(digit_5));
        RogueByteList__add__Byte( RogueStringBuilder_work_bytes, ((RogueByte)(((RogueCharacter)((((RogueInteger)((RogueCharacter)'0')) + digit_5))))) );
      }
    }
  }
  if (value_0 >= 0.5)
  {
    RogueByteList__add__Byte( RogueStringBuilder_work_bytes, ((RogueByte)((RogueCharacter)'5')) );
    RogueStringBuilder__round_off_work_bytes( THIS );
  }
  return (RogueStringBuilder*)(THIS);
}

void RogueStringBuilder__print_work_bytes( RogueStringBuilder* THIS )
{
  {
    RogueByteList* _auto_206_0 = (RogueStringBuilder_work_bytes);
    RogueInteger _auto_207_1 = (0);
    for (;_auto_207_1 < _auto_206_0->count;++_auto_207_1)
    {
      RogueByte digit_2 = (_auto_206_0->data->bytes[_auto_207_1]);
      RogueStringBuilder__print__Character( THIS, ((RogueCharacter)(digit_2)) );
    }
  }
}

RogueStringBuilder* RogueStringBuilder__println( RogueStringBuilder* THIS )
{
  return (RogueStringBuilder*)(((RogueStringBuilder__print__Character( THIS, (RogueCharacter)10 ))));
}

RogueStringBuilder* RogueStringBuilder__println__Integer( RogueStringBuilder* THIS, RogueInteger value_0 )
{
  return (RogueStringBuilder*)(((RogueStringBuilder__print__Character( ((RogueStringBuilder__print__Integer( THIS, value_0 ))), (RogueCharacter)10 ))));
}

RogueStringBuilder* RogueStringBuilder__println__String( RogueStringBuilder* THIS, RogueString* value_0 )
{
  return (RogueStringBuilder*)(((RogueStringBuilder__print__Character( ((RogueStringBuilder__print__String( THIS, value_0 ))), (RogueCharacter)10 ))));
}

RogueStringBuilder* RogueStringBuilder__reserve__Integer( RogueStringBuilder* THIS, RogueInteger additional_count_0 )
{
  RogueCharacterList__reserve__Integer( THIS->characters, additional_count_0 );
  return (RogueStringBuilder*)(THIS);
}

void RogueStringBuilder__round_off_work_bytes( RogueStringBuilder* THIS )
{
  if (((RogueCharacter)(((RogueByteList__remove_last( RogueStringBuilder_work_bytes ))))) >= (RogueCharacter)'5')
  {
    RogueInteger i_0 = ((RogueStringBuilder_work_bytes->count - 1));
    while (i_0 >= 0)
    {
      if (((RogueCharacter)(RogueStringBuilder_work_bytes->data->bytes[i_0])) != (RogueCharacter)'.')
      {
        RogueStringBuilder_work_bytes->data->bytes[i_0] = ((RogueByte)((((RogueInteger)(RogueStringBuilder_work_bytes->data->bytes[i_0])) + 1)));
        if (((RogueInteger)(RogueStringBuilder_work_bytes->data->bytes[i_0])) == (((RogueInteger)((RogueCharacter)'9')) + 1))
        {
          RogueStringBuilder_work_bytes->data->bytes[i_0] = ((RogueByte)((RogueCharacter)'0'));
        }
        else
        {
          return;
        }
      }
      --i_0;
    }
    RogueByteList__insert__Byte_Integer( RogueStringBuilder_work_bytes, ((RogueByte)((RogueCharacter)'1')), 0 );
  }
}

RogueReal RogueStringBuilder__scan_work_bytes( RogueStringBuilder* THIS )
{
  RogueReal whole_0 = (0.0);
  RogueReal decimal_1 = (0.0);
  RogueInteger decimal_count_2 = (0);
  RogueLogical scanning_whole_3 = (true);
  {
    RogueByteList* _auto_208_4 = (RogueStringBuilder_work_bytes);
    RogueInteger _auto_209_5 = (0);
    for (;_auto_209_5 < _auto_208_4->count;++_auto_209_5)
    {
      RogueByte digit_6 = (_auto_208_4->data->bytes[_auto_209_5]);
      if (scanning_whole_3)
      {
        if (((RogueCharacter)(digit_6)) == (RogueCharacter)'.')
        {
          scanning_whole_3 = ((RogueLogical)false);
        }
        else
        {
          whole_0 = ((RogueReal)((whole_0 * 10.0) + ((RogueReal)((((RogueCharacter)(digit_6)) - (RogueCharacter)'0')))));
        }
      }
      else
      {
        decimal_1 = ((RogueReal)((decimal_1 * 10.0) + ((RogueReal)((((RogueCharacter)(digit_6)) - (RogueCharacter)'0')))));
        ++decimal_count_2;
      }
    }
  }
  return (RogueReal)((whole_0 + (decimal_1 / ((RogueReal) pow((double)10.0, (double)((RogueReal)(decimal_count_2)))))));
}

RogueStringBuilder* RogueStringBuilder__init_object( RogueStringBuilder* THIS )
{
  THIS->at_newline = true;
  return (RogueStringBuilder*)(THIS);
}

RogueString* RogueStringList__to_String( RogueStringList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueStringList* _auto_35_2 = (THIS);
    RogueInteger _auto_36_3 = (0);
    for (;_auto_36_3 < _auto_35_2->count;++_auto_36_3)
    {
      RogueString* value_4 = (((RogueString*)(_auto_35_2->data->objects[_auto_36_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, value_4 );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueStringList__type_name( RogueStringList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[922]);
}

RogueStringList* RogueStringList__init_object( RogueStringList* THIS )
{
  return (RogueStringList*)(THIS);
}

RogueStringList* RogueStringList__init( RogueStringList* THIS )
{
  RogueStringList__init__Integer( THIS, 10 );
  return (RogueStringList*)(THIS);
}

RogueStringList* RogueStringList__init__Integer( RogueStringList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueString*), true );
  return (RogueStringList*)(THIS);
}

RogueStringList* RogueStringList__add__String( RogueStringList* THIS, RogueString* value_0 )
{
  ((RogueStringList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueStringList*)(THIS);
}

RogueInteger RogueStringList__capacity( RogueStringList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueStringList* RogueStringList__clear( RogueStringList* THIS )
{
  THIS->count = 0;
  return (RogueStringList*)(THIS);
}

RogueOptionalInteger RogueStringList__locate__String( RogueStringList* THIS, RogueString* value_0 )
{
  {
    RogueStringList* _auto_43_1 = (THIS);
    RogueInteger i_2 = (0);
    for (;i_2 < _auto_43_1->count;++i_2)
    {
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( value_0, ((RogueString*)(THIS->data->objects[i_2])) ))) == 0)
      {
        return (RogueOptionalInteger)(RogueOptionalInteger( i_2 ));
      }
    }
  }
  return (RogueOptionalInteger)(RogueOptionalInteger());
}

RogueStringList* RogueStringList__reserve__Integer( RogueStringList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueString*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueStringList__capacity( THIS ))) + ((RogueStringList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueString*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueStringList*)(THIS);
}

RogueString* RogueStringList__joined__String( RogueStringList* THIS, RogueString* separator_0 )
{
  RogueInteger total_count_1 = (0);
  {
    RogueStringList* _auto_46_3 = (THIS);
    RogueInteger _auto_47_4 = (0);
    for (;_auto_47_4 < _auto_46_3->count;++_auto_47_4)
    {
      RogueString* line_5 = (((RogueString*)(_auto_46_3->data->objects[_auto_47_4])));
      total_count_1 += line_5->count;
    }
  }
  RogueStringBuilder* builder_2 = (((RogueStringBuilder__init__Integer( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)), total_count_1 ))));
  {
    RogueStringList* _auto_48_6 = (THIS);
    RogueInteger _auto_49_7 = (0);
    for (;_auto_49_7 < _auto_48_6->count;++_auto_49_7)
    {
      RogueString* line_8 = (((RogueString*)(_auto_48_6->data->objects[_auto_49_7])));
      if (!!(builder_2->characters->count))
      {
        RogueStringBuilder__print__String( builder_2, separator_0 );
      }
      RogueStringBuilder__print__String( builder_2, line_8 );
    }
  }
  return (RogueString*)(((RogueStringBuilder__to_String( builder_2 ))));
}

RogueString* RogueStringArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[597]);
}

RogueString* RogueNativeArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[30]);
}

RogueString* RogueByte__to_String( RogueByte THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Integer( Rogue_literal_strings[0], ((RogueInteger)(THIS)) ))));
  return (RogueString*)(Rogue_literal_strings[25]);
}

RogueString* RogueStringReader__type_name( RogueClassStringReader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[537]);
}

RogueLogical RogueStringReader__has_another( RogueClassStringReader* THIS )
{
  return (RogueLogical)(THIS->position < THIS->count);
}

RogueCharacter RogueStringReader__read( RogueClassStringReader* THIS )
{
  ++THIS->position;
  return (RogueCharacter)(THIS->string->characters[(THIS->position - 1)]);
}

RogueClassStringReader* RogueStringReader__init__String( RogueClassStringReader* THIS, RogueString* _auto_15_0 )
{
  THIS->string = _auto_15_0;
  if (!!(THIS->string))
  {
    THIS->count = THIS->string->count;
  }
  return (RogueClassStringReader*)(THIS);
}

RogueClassStringReader* RogueStringReader__init_object( RogueClassStringReader* THIS )
{
  return (RogueClassStringReader*)(THIS);
}

RogueLogical RogueCharacterReader__has_another( RogueObject* THIS )
{
  switch (THIS->type->index)
  {
    case 15:
      return RogueStringReader__has_another( (RogueClassStringReader*)THIS );
    case 142:
      return RogueFileReader__has_another( (RogueClassFileReader*)THIS );
    case 146:
      return RogueParseReader__has_another( (RogueClassParseReader*)THIS );
    default:
      return 0;
  }
}

RogueCharacter RogueCharacterReader__read( RogueObject* THIS )
{
  switch (THIS->type->index)
  {
    case 15:
      return RogueStringReader__read( (RogueClassStringReader*)THIS );
    case 142:
      return RogueFileReader__read( (RogueClassFileReader*)THIS );
    case 146:
      return RogueParseReader__read( (RogueClassParseReader*)THIS );
    default:
      return 0;
  }
}

RogueString* RogueGlobal__type_name( RogueClassGlobal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[32]);
}

void RogueGlobal__on_launch( RogueClassGlobal* THIS )
{
  RogueRogueC__launch( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC)) );
}

RogueClassGlobal* RogueGlobal__flush( RogueClassGlobal* THIS )
{
  if (!!(THIS->global_output_buffer->characters->count))
  {
    RogueConsole__print__StringBuilder( THIS->standard_output, THIS->global_output_buffer );
    RogueStringBuilder__clear( THIS->global_output_buffer );
  }
  return (RogueClassGlobal*)(THIS);
}

RogueClassGlobal* RogueGlobal__print__Object( RogueClassGlobal* THIS, RogueObject* value_0 )
{
  RogueStringBuilder__print__Object( THIS->global_output_buffer, value_0 );
  return (RogueClassGlobal*)(THIS);
}

RogueClassGlobal* RogueGlobal__print__String( RogueClassGlobal* THIS, RogueString* value_0 )
{
  RogueStringBuilder__print__String( THIS->global_output_buffer, value_0 );
  return (RogueClassGlobal*)(THIS);
}

RogueClassGlobal* RogueGlobal__println( RogueClassGlobal* THIS )
{
  RogueStringBuilder__print__Character( THIS->global_output_buffer, (RogueCharacter)10 );
  return (RogueClassGlobal*)(((RogueGlobal__flush( THIS ))));
}

RogueClassGlobal* RogueGlobal__println__Object( RogueClassGlobal* THIS, RogueObject* value_0 )
{
  return (RogueClassGlobal*)(((RogueGlobal__println( ((RogueGlobal__print__Object( THIS, value_0 ))) ))));
}

RogueClassGlobal* RogueGlobal__println__String( RogueClassGlobal* THIS, RogueString* value_0 )
{
  return (RogueClassGlobal*)(((RogueGlobal__println( ((RogueGlobal__print__String( THIS, value_0 ))) ))));
}

RogueClassGlobal* RogueGlobal__init_object( RogueClassGlobal* THIS )
{
  THIS->global_output_buffer = ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) )));
  THIS->standard_output = ((RogueClassConsole*)ROGUE_SINGLETON(Console));
  return (RogueClassGlobal*)(THIS);
}

RogueString* RogueConsole__type_name( RogueClassConsole* THIS )
{
  return (RogueString*)(Rogue_literal_strings[538]);
}

void RogueConsole__print__StringBuilder( RogueClassConsole* THIS, RogueStringBuilder* value_0 )
{
  RogueString::print( value_0->characters->data->characters, value_0->characters->count );
}

RogueClassConsole* RogueConsole__init_object( RogueClassConsole* THIS )
{
  return (RogueClassConsole*)(THIS);
}

RogueString* RogueRogueC__type_name( RogueClassRogueC* THIS )
{
  return (RogueString*)(Rogue_literal_strings[539]);
}

void RogueRogueC__launch( RogueClassRogueC* THIS )
{
  RogueString* libs_0 = (((RogueString__operatorPLUS__String( (RogueFile__path__String( RogueSystem_executable_filepath )), Rogue_literal_strings[3] ))));
  if ((RogueFile__exists__String( libs_0 )))
  {
    THIS->libraries_folder = libs_0;
    RogueStringList__add__String( THIS->prefix_path_list, libs_0 );
  }
  RogueStringList__add__String( THIS->supported_targets, Rogue_literal_strings[1] );
  try
  {
    RogueRogueC__process_command_line_arguments( THIS );
    if (THIS->source_files->count == 0)
    {
      RogueString* usage_1 = (Rogue_literal_strings[14]);
      usage_1 = ((RogueString*)((RogueString__operatorPLUS__String( usage_1, ((RogueString__operatorPLUS__String( ((RogueString__replace__Character_Character( ((RogueStringList__to_String( THIS->supported_targets ))), (RogueCharacter)',', (RogueCharacter)'|' ))), Rogue_literal_strings[15] ))) ))));
      RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), usage_1 );
      RogueSystem__exit__Integer( 1 );
    }
    RogueString_LogicalTable__set__String_Logical( THIS->compile_targets, Rogue_literal_strings[1], true );
    RogueProgram__configure( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) );
    {
      RogueStringList* _auto_225_3 = (THIS->source_files);
      RogueInteger _auto_226_4 = (0);
      for (;_auto_226_4 < _auto_225_3->count;++_auto_226_4)
      {
        RogueString* filepath_5 = (((RogueString*)(_auto_225_3->data->objects[_auto_226_4])));
        RogueRogueC__include__String( THIS, filepath_5 );
      }
    }
    RogueRogueC__include__String( THIS, Rogue_literal_strings[280] );
    RogueProgram__resolve( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) );
    RogueRogueC__write_output( THIS );
  }
  catch ( RogueClassError* err_2 )
  {
    RogueGlobal__println__Object( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ((RogueObject*)(err_2)) );
    RogueSystem__exit__Integer( 1 );
  }
}

void RogueRogueC__write_output( RogueClassRogueC* THIS )
{
  if (((RogueString__operatorLESSTHANGREATERTHAN__String( THIS->target, Rogue_literal_strings[1] ))) == 0)
  {
    RogueRogueC__write_cpp( THIS );
    return;
  }
  throw ((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[535] ))), THIS->target ))), Rogue_literal_strings[536] ))) ))), ((RogueString*)(NULL)), 0, 0 )));
}

void RogueRogueC__include__String( RogueClassRogueC* THIS, RogueString* filepath_0 )
{
  if (!(!!(THIS->first_filepath)))
  {
    THIS->first_filepath = filepath_0;
  }
  RogueRogueC__include__Token_String( THIS, ((RogueClassToken*)(NULL)), filepath_0 );
}

void RogueRogueC__include__Token_String( RogueClassRogueC* THIS, RogueClassToken* t_0, RogueString* filepath_1 )
{
  RogueClassFile* file_2 = (((RogueFile__init__String( ((RogueClassFile*)ROGUE_CREATE_OBJECT(File)), filepath_1 ))));
  if ((RogueFile__exists__String( ((RogueString__operatorPLUS__String( filepath_1, Rogue_literal_strings[34] ))) )))
  {
    filepath_1 = ((RogueString*)((RogueString__operatorPLUS__String( filepath_1, Rogue_literal_strings[34] ))));
    file_2 = ((RogueClassFile*)((RogueFile__init__String( ((RogueClassFile*)ROGUE_CREATE_OBJECT(File)), filepath_1 ))));
  }
  if (!((RogueFile__exists__String( file_2->filepath ))))
  {
    {
      RogueStringList* _auto_227_10 = (THIS->prefix_path_list);
      RogueInteger _auto_228_11 = (0);
      for (;_auto_228_11 < _auto_227_10->count;++_auto_228_11)
      {
        RogueString* prefix_12 = (((RogueString*)(_auto_227_10->data->objects[_auto_228_11])));
        RogueString* prefixed_filepath_3 = (((RogueString__operatorPLUS__String( prefix_12, filepath_1 ))));
        RogueClassFile* prefixed_file_4 = (((RogueFile__init__String( ((RogueClassFile*)ROGUE_CREATE_OBJECT(File)), prefixed_filepath_3 ))));
        if ((RogueFile__exists__String( ((RogueString__operatorPLUS__String( prefixed_filepath_3, Rogue_literal_strings[34] ))) )))
        {
          filepath_1 = ((RogueString*)((RogueString__operatorPLUS__String( prefixed_filepath_3, Rogue_literal_strings[34] ))));
          file_2 = ((RogueClassFile*)((RogueFile__init__String( ((RogueClassFile*)ROGUE_CREATE_OBJECT(File)), filepath_1 ))));
          goto _auto_229;
        }
        else if ((RogueFile__exists__String( prefixed_file_4->filepath )))
        {
          filepath_1 = ((RogueString*)prefixed_filepath_3);
          file_2 = ((RogueClassFile*)prefixed_file_4);
          goto _auto_229;
        }
      }
    }
    _auto_229:;
  }
  if (!((RogueFile__exists__String( file_2->filepath ))))
  {
    RogueString* mesg_5 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[35] ))), filepath_1 ))), Rogue_literal_strings[36] ))) ))));
    if (!!(t_0))
    {
      throw ((RogueToken__error__String( t_0, mesg_5 )));
    }
    else
    {
      throw ((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), mesg_5, ((RogueString*)(NULL)), 0, 0 )));
    }
  }
  if ((RogueFile__is_folder__String( file_2->filepath )))
  {
    RogueString* path2_6 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), filepath_1 ))), Rogue_literal_strings[37] ))), ((RogueFile__filename( file_2 ))) ))), Rogue_literal_strings[34] ))) ))));
    RogueClassFile* file2_7 = (((RogueFile__init__String( ((RogueClassFile*)ROGUE_CREATE_OBJECT(File)), path2_6 ))));
    if ((!((RogueFile__exists__String( file2_7->filepath ))) || (RogueFile__is_folder__String( file2_7->filepath ))))
    {
      RogueString* mesg_8 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[38] ))), path2_6 ))), Rogue_literal_strings[39] ))) ))));
      if (!!(t_0))
      {
        throw ((RogueToken__error__String( t_0, mesg_8 )));
      }
      else
      {
        throw ((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), mesg_8, ((RogueString*)(NULL)), 0, 0 )));
      }
    }
    else
    {
      filepath_1 = ((RogueString*)path2_6);
      file_2 = ((RogueClassFile*)file2_7);
    }
  }
  filepath_1 = ((RogueString*)(RogueFile__absolute_filepath__String( file_2->filepath )));
  if (((RogueStringList__locate__String( THIS->included_files, filepath_1 ))).exists)
  {
    return;
  }
  if (THIS->included_files->count == 0)
  {
    ((RogueClassProgram*)ROGUE_SINGLETON(Program))->first_filepath = filepath_1;
  }
  RogueStringList__add__String( THIS->included_files, filepath_1 );
  RogueString* prefix_9 = (((RogueString__operatorPLUS__String( ((RogueString__before_last__Character( filepath_1, (RogueCharacter)'/' ))), Rogue_literal_strings[37] ))));
  if (!(((RogueString_LogicalTable__contains__String( THIS->prefix_path_lookup, prefix_9 )))))
  {
    RogueString_LogicalTable__set__String_Logical( THIS->prefix_path_lookup, prefix_9, true );
    RogueStringList__add__String( THIS->prefix_path_list, prefix_9 );
  }
  RogueParser__parse_elements( ((RogueParser__init__String( ((RogueClassParser*)ROGUE_CREATE_OBJECT(Parser)), filepath_1 ))) );
}

void RogueRogueC__include_native__Token_String_String( RogueClassRogueC* THIS, RogueClassToken* t_0, RogueString* filepath_1, RogueString* native_type_2 )
{
  RogueClassFile* file_3 = (((RogueFile__init__String( ((RogueClassFile*)ROGUE_CREATE_OBJECT(File)), filepath_1 ))));
  if (!((RogueFile__exists__String( file_3->filepath ))))
  {
    {
      RogueStringList* _auto_232_9 = (THIS->prefix_path_list);
      RogueInteger _auto_233_10 = (0);
      for (;_auto_233_10 < _auto_232_9->count;++_auto_233_10)
      {
        RogueString* prefix_11 = (((RogueString*)(_auto_232_9->data->objects[_auto_233_10])));
        RogueString* prefixed_filepath_4 = (((RogueString__operatorPLUS__String( prefix_11, filepath_1 ))));
        RogueClassFile* prefixed_file_5 = (((RogueFile__init__String( ((RogueClassFile*)ROGUE_CREATE_OBJECT(File)), prefixed_filepath_4 ))));
        if ((RogueFile__exists__String( prefixed_file_5->filepath )))
        {
          filepath_1 = ((RogueString*)prefixed_filepath_4);
          file_3 = ((RogueClassFile*)prefixed_file_5);
          goto _auto_234;
        }
      }
    }
    _auto_234:;
  }
  if (!((RogueFile__exists__String( file_3->filepath ))))
  {
    RogueString* mesg_6 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[35] ))), filepath_1 ))), Rogue_literal_strings[36] ))) ))));
    if (!!(t_0))
    {
      throw ((RogueToken__error__String( t_0, mesg_6 )));
    }
    else
    {
      throw ((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), mesg_6, ((RogueString*)(NULL)), 0, 0 )));
    }
  }
  if ((RogueFile__is_folder__String( file_3->filepath )))
  {
    RogueString* mesg_7 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[46] ))), file_3->filepath ))), Rogue_literal_strings[47] ))) ))));
    if (!!(t_0))
    {
      throw ((RogueToken__error__String( t_0, mesg_7 )));
    }
    else
    {
      throw ((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), mesg_7, ((RogueString*)(NULL)), 0, 0 )));
    }
  }
  filepath_1 = ((RogueString*)(RogueFile__absolute_filepath__String( file_3->filepath )));
  if (((RogueStringList__locate__String( THIS->included_files, filepath_1 ))).exists)
  {
    return;
  }
  RogueStringList__add__String( THIS->included_files, filepath_1 );
  RogueString* prefix_8 = (((RogueString__operatorPLUS__String( ((RogueString__before_last__Character( filepath_1, (RogueCharacter)'/' ))), Rogue_literal_strings[37] ))));
  if (!(((RogueString_LogicalTable__contains__String( THIS->prefix_path_lookup, prefix_8 )))))
  {
    RogueString_LogicalTable__set__String_Logical( THIS->prefix_path_lookup, prefix_8, true );
    RogueStringList__add__String( THIS->prefix_path_list, prefix_8 );
  }
  if (((RogueString__operatorLESSTHANGREATERTHAN__String( native_type_2, Rogue_literal_strings[48] ))) == 0)
  {
    {
      RogueClassLineReader* _auto_236_12 = (((RogueLineReader__init__File( ((RogueClassLineReader*)ROGUE_CREATE_OBJECT(LineReader)), file_3 ))));
      while (((RogueLineReader__has_another( _auto_236_12 ))))
      {
        RogueString* line_13 = (((RogueLineReader__read( _auto_236_12 ))));
        RogueStringList__add__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_header, line_13 );
      }
    }
  }
  else
  {
    {
      RogueClassLineReader* _auto_237_14 = (((RogueLineReader__init__File( ((RogueClassLineReader*)ROGUE_CREATE_OBJECT(LineReader)), file_3 ))));
      while (((RogueLineReader__has_another( _auto_237_14 ))))
      {
        RogueString* line_15 = (((RogueLineReader__read( _auto_237_14 ))));
        RogueStringList__add__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_code, line_15 );
      }
    }
  }
}

void RogueRogueC__process_command_line_arguments( RogueClassRogueC* THIS )
{
  {
    RogueStringList* _auto_238_1 = (RogueSystem_command_line_arguments);
    RogueInteger _auto_239_2 = (0);
    for (;_auto_239_2 < _auto_238_1->count;++_auto_239_2)
    {
      RogueString* arg_3 = (((RogueString*)(_auto_238_1->data->objects[_auto_239_2])));
      RogueString* value_0 = (((RogueString__after_first__Character( arg_3, (RogueCharacter)'=' ))));
      arg_3 = ((RogueString*)((RogueString__before_first__Character( arg_3, (RogueCharacter)'=' ))));
      if (((RogueString__begins_with__String( arg_3, Rogue_literal_strings[4] ))))
      {
        if (((RogueString__operatorLESSTHANGREATERTHAN__String( arg_3, Rogue_literal_strings[5] ))) == 0)
        {
          if (value_0->count == 0)
          {
            throw ((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), Rogue_literal_strings[6], ((RogueString*)(NULL)), 0, 0 )));
          }
          THIS->output_filepath = value_0;
        }
        else if (((RogueString__operatorLESSTHANGREATERTHAN__String( arg_3, Rogue_literal_strings[7] ))) == 0)
        {
          THIS->generate_main = true;
          THIS->execute_args = value_0;
        }
        else if (((RogueString__operatorLESSTHANGREATERTHAN__String( arg_3, Rogue_literal_strings[8] ))) == 0)
        {
          if (!!(value_0->count))
          {
            throw ((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), Rogue_literal_strings[9], ((RogueString*)(NULL)), 0, 0 )));
          }
          THIS->generate_main = true;
        }
        else if (((RogueString__operatorLESSTHANGREATERTHAN__String( arg_3, Rogue_literal_strings[10] ))) == 0)
        {
          if (!(!!(value_0->count)))
          {
            throw ((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), Rogue_literal_strings[11], ((RogueString*)(NULL)), 0, 0 )));
          }
          THIS->target = value_0;
        }
        else
        {
          throw ((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[12] ))), arg_3 ))), Rogue_literal_strings[13] ))) ))), ((RogueString*)(NULL)), 0, 0 )));
        }
      }
      else
      {
        RogueStringList__add__String( THIS->source_files, arg_3 );
      }
    }
  }
}

void RogueRogueC__write_cpp( RogueClassRogueC* THIS )
{
  if (THIS->output_filepath == NULL)
  {
    THIS->output_filepath = (RogueFile__filename__String( THIS->first_filepath ));
    if (((RogueString__ends_with__String( ((RogueString__to_lowercase( THIS->output_filepath ))), Rogue_literal_strings[34] ))))
    {
      THIS->output_filepath = ((RogueString__leftmost__Integer( THIS->output_filepath, -6 )));
    }
  }
  else if ((RogueFile__is_folder__String( THIS->output_filepath )))
  {
    THIS->output_filepath = ((RogueString__operatorPLUS__String( (RogueFile__path__String( THIS->output_filepath )), Rogue_literal_strings[371] )));
  }
  else if (((RogueString__ends_with__String( ((RogueString__to_lowercase( THIS->output_filepath ))), Rogue_literal_strings[372] ))))
  {
    THIS->output_filepath = ((RogueString__leftmost__Integer( THIS->output_filepath, -4 )));
  }
  RogueProgram__write_cpp__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->output_filepath );
  if (!!(THIS->execute_args))
  {
    RogueString* exe_0 = (((RogueString__to_lowercase( THIS->output_filepath ))));
    RogueString* cmd_1 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[532] ))), THIS->output_filepath ))), Rogue_literal_strings[533] ))), exe_0 ))), Rogue_literal_strings[534] ))), exe_0 ))), Rogue_literal_strings[255] ))), THIS->execute_args ))) ))));
    RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), cmd_1 );
    RogueGlobal__println( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)) );
    {
      char cmd_buffer[4096];
      cmd_1->to_c_string( cmd_buffer, 4096 );
      system( cmd_buffer );
    };
  }
}

RogueClassRogueC* RogueRogueC__init_object( RogueClassRogueC* THIS )
{
  THIS->included_files = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  THIS->prefix_path_list = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  THIS->prefix_path_lookup = ((RogueString_LogicalTable__init( ((RogueClassString_LogicalTable*)ROGUE_CREATE_OBJECT(String_LogicalTable)) )));
  THIS->compile_targets = ((RogueString_LogicalTable__init( ((RogueClassString_LogicalTable*)ROGUE_CREATE_OBJECT(String_LogicalTable)) )));
  THIS->libraries_folder = Rogue_literal_strings[0];
  THIS->source_files = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  THIS->supported_targets = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  THIS->target = Rogue_literal_strings[1];
  return (RogueClassRogueC*)(THIS);
}

RogueString* RogueError__to_String( RogueClassError* THIS )
{
  return (RogueString*)(THIS->message);
}

RogueString* RogueError__type_name( RogueClassError* THIS )
{
  return (RogueString*)(Rogue_literal_strings[33]);
}

RogueClassError* RogueError__init_object( RogueClassError* THIS )
{
  return (RogueClassError*)(THIS);
}

RogueString* RogueProgram__type_name( RogueClassProgram* THIS )
{
  return (RogueString*)(Rogue_literal_strings[540]);
}

void RogueProgram__configure( RogueClassProgram* THIS )
{
  THIS->type_null = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_literal_strings[2], 32 )));
  THIS->type_Real = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_literal_strings[20], 1 )));
  THIS->type_Float = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_literal_strings[21], 1 )));
  THIS->type_Long = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_literal_strings[22], 1 )));
  THIS->type_Integer = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_literal_strings[23], 1 )));
  THIS->type_Character = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_literal_strings[24], 1 )));
  THIS->type_Byte = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_literal_strings[25], 1 )));
  THIS->type_Logical = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_literal_strings[26], 1 )));
  THIS->type_Object = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_literal_strings[27], 32 )));
  THIS->type_String = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_literal_strings[28], 48 )));
  THIS->type_StringBuilder = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_literal_strings[29], 0 )));
  THIS->type_NativeArray = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_literal_strings[30], 32 )));
  THIS->type_GenericList = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_literal_strings[31], 0 )));
  THIS->type_Global = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_literal_strings[32], 0 )));
  THIS->type_Error = ((RogueProgram__create_built_in_type__String_Integer( THIS, Rogue_literal_strings[33], 0 )));
  THIS->type_Object->simplify_name = true;
  THIS->type_String->simplify_name = true;
  THIS->type_StringBuilder->simplify_name = true;
  THIS->type_null->organized = true;
  THIS->type_null->defined = true;
  RogueStringList__add__String( THIS->literal_string_list, Rogue_literal_strings[0] );
  RogueString_IntegerTable__set__String_Integer( THIS->literal_string_lookup, Rogue_literal_strings[0], 0 );
}

RogueString* RogueProgram__create_unique_id( RogueClassProgram* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Integer( Rogue_literal_strings[243], ((RogueProgram__next_unique_integer( THIS ))) ))));
}

RogueInteger RogueProgram__next_unique_integer( RogueClassProgram* THIS )
{
  ++THIS->unique_integer;
  return (RogueInteger)((THIS->unique_integer - 1));
}

RogueClassTemplate* RogueProgram__find_template__String( RogueClassProgram* THIS, RogueString* name_0 )
{
  switch (((RogueInteger)(((RogueString__last( name_0 ))))))
  {
    case (RogueCharacter)'?':
    {
      if (!!(((RogueProgram__find_type__String( THIS, ((RogueString__leftmost__Integer( name_0, -1 ))) )))))
      {
        return (RogueClassTemplate*)(((RogueString_TemplateTable__get__String( THIS->template_lookup, Rogue_literal_strings[281] ))));
      }
      else
      {
        return (RogueClassTemplate*)(((RogueClassTemplate*)(NULL)));
      }
      break;
    }
    case (RogueCharacter)']':
    {
      return (RogueClassTemplate*)(((RogueString_TemplateTable__get__String( THIS->template_lookup, Rogue_literal_strings[282] ))));
      break;
    }
    default:
    {
      return (RogueClassTemplate*)(((RogueString_TemplateTable__get__String( THIS->template_lookup, ((RogueString__before_first__Character( name_0, (RogueCharacter)'<' ))) ))));
    }
  }
}

RogueClassType* RogueProgram__find_type__String( RogueClassProgram* THIS, RogueString* name_0 )
{
  RogueClassType* type_1 = (((RogueString_TypeTable__get__String( THIS->type_lookup, name_0 ))));
  if (!!(type_1))
  {
    return (RogueClassType*)(type_1);
  }
  RogueClassTemplate* template_2 = (((RogueProgram__find_template__String( THIS, name_0 ))));
  if (!!(template_2))
  {
    type_1 = ((RogueClassType*)((RogueType__init__Token_String( ((RogueClassType*)ROGUE_CREATE_OBJECT(Type)), template_2->t, name_0 ))));
    RogueString_TypeTable__set__String_Type( THIS->type_lookup, name_0, type_1 );
    return (RogueClassType*)(type_1);
  }
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

RogueClassType* RogueProgram__get_type_reference__Token_String( RogueClassProgram* THIS, RogueClassToken* t_0, RogueString* name_1 )
{
  RogueClassType* type_2 = (((RogueString_TypeTable__get__String( THIS->type_lookup, name_1 ))));
  if (!!(type_2))
  {
    return (RogueClassType*)(type_2);
  }
  type_2 = ((RogueClassType*)((RogueType__init__Token_String( ((RogueClassType*)ROGUE_CREATE_OBJECT(Type)), t_0, name_1 ))));
  RogueString_TypeTable__set__String_Type( THIS->type_lookup, name_1, type_2 );
  return (RogueClassType*)(type_2);
}

RogueString* RogueProgram__get_callback_type_signature__TypeList( RogueClassProgram* THIS, RogueTypeList* parameter_types_0 )
{
  RogueStringBuilder__print__String( ((RogueStringBuilder__clear( THIS->string_buffer ))), Rogue_literal_strings[176] );
  if (!!(parameter_types_0))
  {
    RogueLogical first_1 = (true);
    {
      RogueTypeList* _auto_71_2 = (parameter_types_0);
      RogueInteger _auto_72_3 = (0);
      for (;_auto_72_3 < _auto_71_2->count;++_auto_72_3)
      {
        RogueClassType* type_4 = (((RogueClassType*)(_auto_71_2->data->objects[_auto_72_3])));
        if (first_1)
        {
          first_1 = ((RogueLogical)false);
        }
        else
        {
          RogueStringBuilder__print__Character( THIS->string_buffer, (RogueCharacter)',' );
        }
        RogueStringBuilder__print__String( THIS->string_buffer, type_4->name );
      }
    }
  }
  RogueStringBuilder__print__Character( THIS->string_buffer, (RogueCharacter)')' );
  return (RogueString*)(((RogueStringBuilder__to_String( THIS->string_buffer ))));
}

RogueClassType* RogueProgram__get_callback_type_reference__Token_TypeList_Type( RogueClassProgram* THIS, RogueClassToken* t_0, RogueTypeList* parameter_types_1, RogueClassType* return_type_2 )
{
  RogueString* name_3 = (((RogueString__operatorPLUS__String( Rogue_literal_strings[238], ((RogueProgram__get_callback_type_signature__TypeList( THIS, parameter_types_1 ))) ))));
  if (!!(return_type_2))
  {
    name_3 = ((RogueString*)((RogueString__operatorPLUS__String( name_3, ((RogueString__operatorPLUS__String( Rogue_literal_strings[150], return_type_2->name ))) ))));
  }
  RogueClassType* type_4 = (((RogueProgram__get_type_reference__Token_String( THIS, t_0, name_3 ))));
  if (type_4->defined)
  {
    return (RogueClassType*)(type_4);
  }
  type_4->defined = true;
  RogueAttributes__add__Integer( type_4->attributes, 0 );
  RogueClassMethod* m_call_5 = (((RogueType__add_method__Token_String( type_4, t_0, Rogue_literal_strings[239] ))));
  if (!!(parameter_types_1))
  {
    {
      RogueTypeList* _auto_74_6 = (parameter_types_1);
      RogueInteger i_7 = (0);
      for (;i_7 < _auto_74_6->count;++i_7)
      {
        RogueMethod__add_parameter__Token_String_Type( m_call_5, t_0, ((RogueString__operatorPLUS__Integer( Rogue_literal_strings[240], (i_7 + 1) ))), ((RogueClassType*)(parameter_types_1->data->objects[i_7])) );
      }
    }
  }
  if (!!(return_type_2))
  {
    m_call_5->_return_type = return_type_2;
    RogueCmdList__add__Cmd( ((RogueCmdList*)m_call_5->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), t_0, ((RogueType__create_default_value__Token( return_type_2, t_0 ))) ))))) );
  }
  return (RogueClassType*)(type_4);
}

RogueClassType* RogueProgram__create_built_in_type__String_Integer( RogueClassProgram* THIS, RogueString* name_0, RogueInteger attributes_1 )
{
  RogueClassToken* t_2 = ((call_ROGUEM71( 4, (RogueClassTokenType*)(((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[18] )))), Rogue_literal_strings[19], 0, 0 )));
  RogueClassType* type_3 = (((RogueProgram__get_type_reference__Token_String( THIS, t_2, name_0 ))));
  RogueAttributes__add__Integer( type_3->attributes, attributes_1 );
  return (RogueClassType*)(type_3);
}

void RogueProgram__resolve( RogueClassProgram* THIS )
{
  if (!!(THIS->m_on_launch))
  {
    RogueType__add_method__Method( THIS->type_Global, THIS->m_on_launch );
  }
  else
  {
    THIS->m_on_launch = ((RogueType__add_method__Token_String( THIS->type_Global, THIS->type_Global->t, Rogue_literal_strings[278] )));
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->m_on_launch->statements), ((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( THIS->m_on_launch, THIS->m_on_launch->t, Rogue_literal_strings[259], false ))))) );
  RogueAttributes__add__Integer( THIS->m_on_launch->attributes, 32768 );
  RogueType__resolve( THIS->type_null );
  RogueType__resolve( THIS->type_Real );
  RogueType__resolve( THIS->type_Float );
  RogueType__resolve( THIS->type_Long );
  RogueType__resolve( THIS->type_Integer );
  RogueType__resolve( THIS->type_Character );
  RogueType__resolve( THIS->type_Byte );
  RogueType__resolve( THIS->type_Logical );
  RogueType__resolve( THIS->type_Global );
  RogueType__resolve( THIS->type_Error );
  RogueType__resolve( THIS->type_Object );
  RogueType__resolve( THIS->type_NativeArray );
  RogueType__resolve( THIS->type_GenericList );
  RogueType__resolve( THIS->type_String );
  {
    RogueRequisiteItemList* _auto_82_2 = (THIS->requisite_list);
    RogueInteger _auto_83_3 = (0);
    for (;_auto_83_3 < _auto_82_2->count;++_auto_83_3)
    {
      RogueClassRequisiteItem* req_4 = (((RogueClassRequisiteItem*)(_auto_82_2->data->objects[_auto_83_3])));
      RogueType__resolve( req_4->_type );
      RogueAttributes__add__Integer( req_4->_type->attributes, 32768 );
      if (!!(req_4->signature))
      {
        RogueClassMethod* m_0 = (((RogueType__find_method__String( req_4->_type, req_4->signature ))));
        if (!!(m_0))
        {
          RogueAttributes__add__Integer( m_0->attributes, 32768 );
        }
        else
        {
          throw ((RogueToken__error__String( req_4->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[367] ))), req_4->signature ))), Rogue_literal_strings[368] ))), req_4->_type->name ))), Rogue_literal_strings[44] ))) ))) )));
        }
      }
    }
  }
  {
    RogueTemplateList* _auto_88_5 = (THIS->template_list);
    RogueInteger _auto_89_6 = (0);
    for (;_auto_89_6 < _auto_88_5->count;++_auto_89_6)
    {
      RogueClassTemplate* templ_7 = (((RogueClassTemplate*)(_auto_88_5->data->objects[_auto_89_6])));
      if ((!!((templ_7->attributes->flags & 32768)) && !(!!(templ_7->type_parameters))))
      {
        RogueType__resolve( ((RogueProgram__get_type_reference__Token_String( THIS, templ_7->t, templ_7->name ))) );
      }
    }
  }
  RogueInteger i_1 = (0);
  while (i_1 < THIS->type_list->count)
  {
    RogueType__resolve( ((RogueClassType*)(THIS->type_list->data->objects[i_1])) );
    ++i_1;
  }
  RogueProgram__cull_unused_code( THIS );
}

void RogueProgram__cull_unused_code( RogueClassProgram* THIS )
{
  {
    RogueTypeList* _auto_90_4 = (THIS->type_list);
    RogueInteger _auto_91_5 = (0);
    for (;_auto_91_5 < _auto_90_4->count;++_auto_91_5)
    {
      RogueClassType* type_6 = (((RogueClassType*)(_auto_90_4->data->objects[_auto_91_5])));
      if (((RogueType__is_requisite( type_6 ))))
      {
        RogueType__trace_used_code( type_6 );
      }
    }
  }
  RogueProgram__trace_overridden_methods( THIS );
  {
    RogueTypeList* _auto_92_7 = (THIS->type_list);
    RogueInteger _auto_93_8 = (0);
    for (;_auto_93_8 < _auto_92_7->count;++_auto_93_8)
    {
      RogueClassType* type_9 = (((RogueClassType*)(_auto_92_7->data->objects[_auto_93_8])));
      RogueType__cull_unused_methods( type_9 );
    }
  }
  RogueInteger write_i_0 = (0);
  {
    RogueInteger read_i_1 = (0);
    RogueInteger _auto_50_2 = ((THIS->type_list->count - 1));
    for (;read_i_1 <= _auto_50_2;++read_i_1)
    {
      RogueClassType* type_3 = (((RogueClassType*)(THIS->type_list->data->objects[read_i_1])));
      if (!(((RogueType__should_cull( type_3 )))))
      {
        THIS->type_list->data->objects[write_i_0] = type_3;
        type_3->index = write_i_0;
        ++write_i_0;
      }
    }
  }
  RogueTypeList__discard_from__Integer( THIS->type_list, write_i_0 );
}

void RogueProgram__trace_overridden_methods( RogueClassProgram* THIS )
{
  RogueLogical traced_new_methods_0 = (true);
  while (traced_new_methods_0)
  {
    traced_new_methods_0 = ((RogueLogical)false);
    {
      RogueTypeList* _auto_94_2 = (THIS->type_list);
      RogueInteger _auto_95_3 = (0);
      for (;_auto_95_3 < _auto_94_2->count;++_auto_95_3)
      {
        RogueClassType* type_4 = (((RogueClassType*)(_auto_94_2->data->objects[_auto_95_3])));
        if (type_4->is_used)
        {
          if (((RogueType__is_aspect( type_4 ))))
          {
            {
              RogueMethodList* _auto_97_5 = (type_4->method_list);
              RogueInteger _auto_98_6 = (0);
              for (;_auto_98_6 < _auto_97_5->count;++_auto_98_6)
              {
                RogueClassMethod* m_7 = (((RogueClassMethod*)(_auto_97_5->data->objects[_auto_98_6])));
                if (m_7->is_used)
                {
                  {
                    RogueTypeList* _auto_99_8 = (m_7->incorporating_classes);
                    RogueInteger _auto_100_9 = (0);
                    for (;_auto_100_9 < _auto_99_8->count;++_auto_100_9)
                    {
                      RogueClassType* ic_10 = (((RogueClassType*)(_auto_99_8->data->objects[_auto_100_9])));
                      if (ic_10->is_used)
                      {
                        RogueClassMethod* im_1 = (((RogueType__find_method__String( ic_10, m_7->signature ))));
                        if (!(im_1->is_used))
                        {
                          traced_new_methods_0 = ((RogueLogical)true);
                          RogueMethod__trace_used_code( im_1 );
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            {
              RogueMethodList* _auto_101_11 = (type_4->method_list);
              RogueInteger _auto_102_12 = (0);
              for (;_auto_102_12 < _auto_101_11->count;++_auto_102_12)
              {
                RogueClassMethod* m_13 = (((RogueClassMethod*)(_auto_101_11->data->objects[_auto_102_12])));
                if (m_13->is_used)
                {
                  {
                    RogueMethodList* _auto_103_14 = (m_13->overriding_methods);
                    RogueInteger _auto_104_15 = (0);
                    for (;_auto_104_15 < _auto_103_14->count;++_auto_104_15)
                    {
                      RogueClassMethod* overriding_m_16 = (((RogueClassMethod*)(_auto_103_14->data->objects[_auto_104_15])));
                      if ((!(overriding_m_16->is_used) && overriding_m_16->type_context->is_used))
                      {
                        traced_new_methods_0 = ((RogueLogical)true);
                        RogueMethod__trace_used_code( overriding_m_16 );
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

RogueString* RogueProgram__validate_cpp_name__String( RogueClassProgram* THIS, RogueString* name_0 )
{
  RogueLogical begins_with_code_prefix_1 = (false);
  if (((RogueString__begins_with__String( name_0, THIS->code_prefix ))))
  {
    begins_with_code_prefix_1 = ((RogueLogical)true);
    name_0 = ((RogueString*)((RogueString__from__Integer( name_0, THIS->code_prefix->count ))));
  }
  RogueLogical all_underscores_2 = (true);
  if (((RogueString__ends_with__String( name_0, Rogue_literal_strings[373] ))))
  {
    {
      RogueInteger i_3 = (0);
      RogueInteger _auto_51_4 = ((name_0->count - 5));
      for (;i_3 <= _auto_51_4;++i_3)
      {
        if (name_0->characters[i_3] != (RogueCharacter)'_')
        {
          all_underscores_2 = ((RogueLogical)false);
          goto _auto_105;
        }
      }
    }
    _auto_105:;
    name_0 = ((RogueString*)((RogueString__operatorPLUS__String( Rogue_literal_strings[354], name_0 ))));
  }
  RogueOptionalInteger i1_5 = (((RogueString__locate__Character_OptionalInteger( name_0, (RogueCharacter)'?', RogueOptionalInteger() ))));
  while (i1_5.exists)
  {
    name_0 = ((RogueString*)((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( Rogue_literal_strings[281], ((RogueString__leftmost__Integer( name_0, i1_5.value ))) ))), ((RogueString__from__Integer( name_0, (i1_5.value + 1) ))) ))));
    i1_5 = ((RogueOptionalInteger)((RogueString__locate__Character_OptionalInteger( name_0, (RogueCharacter)'?', RogueOptionalInteger() ))));
  }
  i1_5 = ((RogueOptionalInteger)((RogueString__locate__String_OptionalInteger( name_0, Rogue_literal_strings[177], RogueOptionalInteger() ))));
  while (i1_5.exists)
  {
    RogueOptionalInteger i2_6 = (((RogueString__locate_last__String_OptionalInteger( name_0, Rogue_literal_strings[101], RogueOptionalInteger() ))));
    if (!(i2_6.exists))
    {
      goto _auto_106;
    }
    RogueString* before_7 = (((RogueString__from__Integer_Integer( name_0, 0, (i1_5.value - 1) ))));
    RogueString* after_8 = (((RogueString__from__Integer( name_0, (i2_6.value + 2) ))));
    RogueString* middle_9 = (((RogueString__from__Integer_Integer( name_0, (i1_5.value + 2), (i2_6.value - 1) ))));
    name_0 = ((RogueString*)((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueProgram__validate_cpp_name__String( THIS, middle_9 ))) ))), before_7 ))), after_8 ))) ))));
    if (!!(((RogueProgram__find_type__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), name_0 )))))
    {
      name_0 = ((RogueString*)((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), before_7 ))), Rogue_literal_strings[374] ))), middle_9 ))), after_8 ))) ))));
    }
    i1_5 = ((RogueOptionalInteger)((RogueString__locate__String_OptionalInteger( name_0, Rogue_literal_strings[177], RogueOptionalInteger() ))));
  }
  _auto_106:;
  i1_5 = ((RogueOptionalInteger)((RogueString__locate__String_OptionalInteger( name_0, Rogue_literal_strings[162], RogueOptionalInteger() ))));
  while (i1_5.exists)
  {
    name_0 = ((RogueString*)((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( ((RogueString__from__Integer_Integer( name_0, 0, (i1_5.value - 1) ))), Rogue_literal_strings[282] ))), ((RogueString__from__Integer( name_0, (i1_5.value + 2) ))) ))));
    i1_5 = ((RogueOptionalInteger)((RogueString__locate__String_OptionalInteger( name_0, Rogue_literal_strings[162], RogueOptionalInteger() ))));
  }
  RogueStringBuilder__clear( THIS->string_buffer );
  if (begins_with_code_prefix_1)
  {
    RogueStringBuilder__print__String( THIS->string_buffer, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->code_prefix );
  }
  {
    RogueString* _auto_107_10 = (name_0);
    RogueInteger _auto_108_11 = (0);
    for (;_auto_108_11 < _auto_107_10->count;++_auto_108_11)
    {
      RogueCharacter ch_12 = (_auto_107_10->characters[_auto_108_11]);
      if (((RogueCharacter__is_alphanumeric( ch_12 ))))
      {
        RogueStringBuilder__print__Character( THIS->string_buffer, ch_12 );
      }
      else
      {
        switch (((RogueInteger)(ch_12)))
        {
          case (RogueCharacter)'!':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[375] );
            break;
          }
          case (RogueCharacter)'%':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[376] );
            break;
          }
          case (RogueCharacter)'&':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[377] );
            break;
          }
          case (RogueCharacter)'*':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[378] );
            break;
          }
          case (RogueCharacter)'+':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[379] );
            break;
          }
          case (RogueCharacter)'-':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[380] );
            break;
          }
          case (RogueCharacter)'.':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[381] );
            break;
          }
          case (RogueCharacter)'/':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[382] );
            break;
          }
          case (RogueCharacter)'<':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[383] );
            break;
          }
          case (RogueCharacter)'=':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[384] );
            break;
          }
          case (RogueCharacter)'>':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[385] );
            break;
          }
          case (RogueCharacter)'^':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[386] );
            break;
          }
          case (RogueCharacter)'|':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[387] );
            break;
          }
          case (RogueCharacter)'~':
          {
            RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[388] );
            break;
          }
          default:
          {
            RogueStringBuilder__print__Character( THIS->string_buffer, (RogueCharacter)'_' );
          }
        }
      }
    }
  }
  return (RogueString*)(((RogueStringBuilder__to_String( THIS->string_buffer ))));
}

void RogueProgram__write_cpp__String( RogueClassProgram* THIS, RogueString* filepath_0 )
{
  {
    RogueTypeList* _auto_109_19 = (THIS->type_list);
    RogueInteger _auto_110_20 = (0);
    for (;_auto_110_20 < _auto_109_19->count;++_auto_110_20)
    {
      RogueClassType* type_21 = (((RogueClassType*)(_auto_109_19->data->objects[_auto_110_20])));
      RogueType__assign_cpp_name( type_21 );
    }
  }
  THIS->type_NativeArray->cpp_class_name = Rogue_literal_strings[389];
  {
    RogueTypeList* _auto_111_22 = (THIS->type_list);
    RogueInteger _auto_112_23 = (0);
    for (;_auto_112_23 < _auto_111_22->count;++_auto_112_23)
    {
      RogueClassType* type_24 = (((RogueClassType*)(_auto_111_22->data->objects[_auto_112_23])));
      {
        RogueMethodList* _auto_113_25 = (type_24->routine_list);
        RogueInteger _auto_114_26 = (0);
        for (;_auto_114_26 < _auto_113_25->count;++_auto_114_26)
        {
          RogueClassMethod* r_27 = (((RogueClassMethod*)(_auto_113_25->data->objects[_auto_114_26])));
          RogueMethod__assign_cpp_name( r_27 );
        }
      }
      {
        RogueMethodList* _auto_115_28 = (type_24->method_list);
        RogueInteger _auto_116_29 = (0);
        for (;_auto_116_29 < _auto_115_28->count;++_auto_116_29)
        {
          RogueClassMethod* m_30 = (((RogueClassMethod*)(_auto_115_28->data->objects[_auto_116_29])));
          RogueMethod__assign_cpp_name( m_30 );
        }
      }
    }
  }
  RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[393] ))), filepath_0 ))), Rogue_literal_strings[394] ))) ))) );
  RogueClassCPPWriter* writer_1 = (((RogueCPPWriter__init__String( ((RogueClassCPPWriter*)ROGUE_CREATE_OBJECT(CPPWriter)), ((RogueString__operatorPLUS__String( filepath_0, Rogue_literal_strings[395] ))) ))));
  {
    RogueStringList* _auto_120_31 = (THIS->native_header);
    RogueInteger _auto_121_32 = (0);
    for (;_auto_121_32 < _auto_120_31->count;++_auto_121_32)
    {
      RogueString* line_33 = (((RogueString*)(_auto_120_31->data->objects[_auto_121_32])));
      RogueCPPWriter__println__String( writer_1, line_33 );
    }
  }
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[396] );
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_122_34 = (THIS->type_list);
    RogueInteger _auto_123_35 = (0);
    for (;_auto_123_35 < _auto_122_34->count;++_auto_123_35)
    {
      RogueClassType* type_36 = (((RogueClassType*)(_auto_122_34->data->objects[_auto_123_35])));
      if ((!(((RogueType__omit_output( type_36 )))) && !(((RogueType__is_primitive( type_36 ))))))
      {
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[397] ))), type_36->cpp_class_name ))), Rogue_literal_strings[184] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_124_37 = (THIS->type_list);
    RogueInteger _auto_125_38 = (0);
    for (;_auto_125_38 < _auto_124_37->count;++_auto_125_38)
    {
      RogueClassType* type_39 = (((RogueClassType*)(_auto_124_37->data->objects[_auto_125_38])));
      if ((((RogueType__is_compound( type_39 ))) && !(((RogueType__omit_output( type_39 ))))))
      {
        RogueType__print_data_definition__CPPWriter( type_39, writer_1 );
        RogueCPPWriter__println( writer_1 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[401] );
  {
    RogueTypeList* _auto_126_40 = (THIS->type_list);
    RogueInteger _auto_127_41 = (0);
    for (;_auto_127_41 < _auto_126_40->count;++_auto_127_41)
    {
      RogueClassType* type_42 = (((RogueClassType*)(_auto_126_40->data->objects[_auto_127_41])));
      {
        RoguePropertyList* _auto_135_43 = (type_42->global_list);
        RogueInteger _auto_136_44 = (0);
        for (;_auto_136_44 < _auto_135_43->count;++_auto_136_44)
        {
          RogueClassProperty* g_45 = (((RogueClassProperty*)(_auto_135_43->data->objects[_auto_136_44])));
          RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[424] ))), g_45->_type ))), Rogue_literal_strings[425] );
          RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, type_42->cpp_name ))), Rogue_literal_strings[354] ))), g_45->cpp_name ))), Rogue_literal_strings[184] );
        }
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_137_46 = (THIS->type_list);
    RogueInteger _auto_138_47 = (0);
    for (;_auto_138_47 < _auto_137_46->count;++_auto_138_47)
    {
      RogueClassType* type_48 = (((RogueClassType*)(_auto_137_46->data->objects[_auto_138_47])));
      if ((!(((RogueType__is_compound( type_48 )))) && !(((RogueType__omit_output( type_48 ))))))
      {
        RogueType__print_data_definition__CPPWriter( type_48, writer_1 );
        RogueCPPWriter__println( writer_1 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[426] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[174] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[427] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[428] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[429] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[430] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[431] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[423] );
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_139_49 = (THIS->type_list);
    RogueInteger _auto_140_50 = (0);
    for (;_auto_140_50 < _auto_139_49->count;++_auto_140_50)
    {
      RogueClassType* type_51 = (((RogueClassType*)(_auto_139_49->data->objects[_auto_140_50])));
      if ((!(((RogueType__omit_output( type_51 )))) || (((RogueType__is_native( type_51 ))) && !(type_51->is_array))))
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[432] );
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_1, type_51->cpp_name ))), Rogue_literal_strings[184] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_141_52 = (THIS->type_list);
    RogueInteger _auto_142_53 = (0);
    for (;_auto_142_53 < _auto_141_52->count;++_auto_142_53)
    {
      RogueClassType* type_54 = (((RogueClassType*)(_auto_141_52->data->objects[_auto_142_53])));
      RogueType__print_method_prototypes__CPPWriter( type_54, writer_1 );
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[434] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[435] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__close( writer_1 );
  RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[393] ))), filepath_0 ))), Rogue_literal_strings[436] ))) ))) );
  writer_1 = ((RogueClassCPPWriter*)((RogueCPPWriter__init__String( ((RogueClassCPPWriter*)ROGUE_CREATE_OBJECT(CPPWriter)), ((RogueString__operatorPLUS__String( filepath_0, Rogue_literal_strings[372] ))) ))));
  RogueString* base_filename_2 = (filepath_0);
  if (((RogueString__contains__String( base_filename_2, ((RogueCharacter__to_String( (RogueCharacter)'/' ))) ))))
  {
    base_filename_2 = ((RogueString*)((RogueString__after_last__Character( base_filename_2, (RogueCharacter)'/' ))));
  }
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[437] );
  RogueCPPWriter__println__String( writer_1, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[438] ))), base_filename_2 ))), Rogue_literal_strings[439] ))) ))) );
  RogueCPPWriter__println( writer_1 );
  {
    RogueStringList* _auto_143_55 = (THIS->native_code);
    RogueInteger _auto_144_56 = (0);
    for (;_auto_144_56 < _auto_143_55->count;++_auto_144_56)
    {
      RogueString* line_57 = (((RogueString*)(_auto_143_55->data->objects[_auto_144_56])));
      RogueCPPWriter__println__String( writer_1, line_57 );
    }
  }
  RogueStringList* native_method_signature_list_3 = (((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) ))));
  RogueClassString_MethodTable* native_method_signature_lookup_4 = (((RogueString_MethodTable__init( ((RogueClassString_MethodTable*)ROGUE_CREATE_OBJECT(String_MethodTable)) ))));
  {
    RogueTypeList* _auto_145_58 = (THIS->type_list);
    RogueInteger _auto_146_59 = (0);
    for (;_auto_146_59 < _auto_145_58->count;++_auto_146_59)
    {
      RogueClassType* type_60 = (((RogueClassType*)(_auto_145_58->data->objects[_auto_146_59])));
      if (type_60->is_used)
      {
        RogueType__determine_cpp_method_typedefs__StringList_String_MethodTable( type_60, native_method_signature_list_3, native_method_signature_lookup_4 );
      }
    }
  }
  {
    RogueStringList* _auto_147_61 = (native_method_signature_list_3);
    RogueInteger _auto_148_62 = (0);
    for (;_auto_148_62 < _auto_147_61->count;++_auto_148_62)
    {
      RogueString* sig_63 = (((RogueString*)(_auto_147_61->data->objects[_auto_148_62])));
      RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[442] ))), ((RogueString__before_first__String( sig_63, Rogue_literal_strings[443] ))) ))), Rogue_literal_strings[444] );
      RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, ((RogueString_MethodTable__get__String( native_method_signature_lookup_4, sig_63 )))->cpp_typedef ))), Rogue_literal_strings[100] );
      RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_1, ((RogueString__after_first__String( sig_63, Rogue_literal_strings[443] ))) ))), Rogue_literal_strings[184] );
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueStringList* _auto_149_64 = (native_method_signature_list_3);
    RogueInteger _auto_150_65 = (0);
    for (;_auto_150_65 < _auto_149_64->count;++_auto_150_65)
    {
      RogueString* sig_66 = (((RogueString*)(_auto_149_64->data->objects[_auto_150_65])));
      RogueClassMethod* m_5 = (((RogueString_MethodTable__get__String( native_method_signature_lookup_4, sig_66 ))));
      if (m_5->called_dynamically)
      {
        RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_1, m_5->_return_type ))), Rogue_literal_strings[445] ))), m_5->cpp_typedef );
        RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[446] ))), m_5->type_context ))), Rogue_literal_strings[433] );
        {
          RogueLocalList* _auto_154_67 = (m_5->parameters);
          RogueInteger i_68 = (0);
          for (;i_68 < _auto_154_67->count;++i_68)
          {
            RogueClassLocal* p_6 = (((RogueClassLocal*)(m_5->parameters->data->objects[i_68])));
            RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[405] ))), p_6->_type ))), Rogue_literal_strings[447] ))), i_68 );
          }
        }
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[448] );
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[174] );
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[449] );
        if (!!(m_5->_return_type))
        {
          RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[450] );
        }
        RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[451] ))), m_5->cpp_typedef );
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[452] );
        {
          RogueLocalList* _auto_155_69 = (m_5->parameters);
          RogueInteger i_70 = (0);
          for (;i_70 < _auto_155_69->count;++i_70)
          {
            RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[453] ))), i_70 );
          }
        }
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[454] );
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[97] );
        RogueCPPWriter__println( writer_1 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[401] );
  {
    RogueTypeList* _auto_156_71 = (THIS->type_list);
    RogueInteger _auto_157_72 = (0);
    for (;_auto_157_72 < _auto_156_71->count;++_auto_157_72)
    {
      RogueClassType* type_73 = (((RogueClassType*)(_auto_156_71->data->objects[_auto_157_72])));
      {
        RoguePropertyList* _auto_158_74 = (type_73->global_list);
        RogueInteger _auto_159_75 = (0);
        for (;_auto_159_75 < _auto_158_74->count;++_auto_159_75)
        {
          RogueClassProperty* g_76 = (((RogueClassProperty*)(_auto_158_74->data->objects[_auto_159_75])));
          RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_1, g_76->_type ))), Rogue_literal_strings[425] );
          RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, type_73->cpp_name ))), Rogue_literal_strings[354] ))), g_76->cpp_name );
          RogueCPPWriter__print_default_value__Type( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[455] ))), g_76->_type );
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[184] );
        }
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_160_77 = (THIS->type_list);
    RogueInteger _auto_161_78 = (0);
    for (;_auto_161_78 < _auto_160_77->count;++_auto_161_78)
    {
      RogueClassType* type_79 = (((RogueClassType*)(_auto_160_77->data->objects[_auto_161_78])));
      if ((((RogueType__has_object_references( type_79 ))) && !(((RogueType__is_reference_array( type_79 ))))))
      {
        RogueString* trace_name_7 = (type_79->cpp_name);
        if ((type_79->is_array && ((RogueType__is_compound( type_79->_element_type )))))
        {
          trace_name_7 = ((RogueString*)((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), type_79->name ))));
        }
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[456] ))), trace_name_7 ))), Rogue_literal_strings[457] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_162_80 = (THIS->type_list);
    RogueInteger _auto_163_81 = (0);
    for (;_auto_163_81 < _auto_162_80->count;++_auto_163_81)
    {
      RogueClassType* type_82 = (((RogueClassType*)(_auto_162_80->data->objects[_auto_163_81])));
      if ((((RogueType__has_object_references( type_82 ))) && !(((RogueType__is_reference_array( type_82 ))))))
      {
        RogueString* trace_name_8 = (type_82->cpp_name);
        if ((type_82->is_array && ((RogueType__is_compound( type_82->_element_type )))))
        {
          trace_name_8 = ((RogueString*)((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), type_82->name ))));
        }
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[456] ))), trace_name_8 ))), Rogue_literal_strings[458] );
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[174] );
        writer_1->indent += 2;
        if (((RogueType__is_compound( type_82 ))))
        {
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[459] );
          RogueProgram__print_property_trace_code__Type_CPPWriter( THIS, type_82, writer_1 );
        }
        else if (type_82->is_array)
        {
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[465] );
          RogueCPPWriter__println__String( ((RogueCPPWriter__print__Type( writer_1, type_82->_element_type ))), Rogue_literal_strings[466] );
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[467] );
          RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[468] ))), type_82->_element_type->cpp_class_name ))), Rogue_literal_strings[469] );
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[470] );
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[174] );
          RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[471] ))), type_82->_element_type->cpp_name ))), Rogue_literal_strings[472] );
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[97] );
        }
        else
        {
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[473] );
          RogueProgram__print_property_trace_code__Type_CPPWriter( THIS, type_82, writer_1 );
        }
        writer_1->indent -= 2;
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[97] );
        RogueCPPWriter__println( writer_1 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[474] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[174] );
  writer_1->indent += 2;
  RogueLogical first_9 = (true);
  {
    RogueTypeList* _auto_164_83 = (THIS->type_list);
    RogueInteger _auto_165_84 = (0);
    for (;_auto_165_84 < _auto_164_83->count;++_auto_165_84)
    {
      RogueClassType* type_85 = (((RogueClassType*)(_auto_164_83->data->objects[_auto_165_84])));
      if (first_9)
      {
        first_9 = ((RogueLogical)false);
      }
      else
      {
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[157] );
      }
      RogueClassMethod* m_10 = (((RogueType__find_method__String( type_85, Rogue_literal_strings[345] ))));
      if ((((!!(m_10) && !(((RogueType__omit_output( type_85 ))))) && m_10->is_used) && m_10->statements->count > 1))
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[475] );
        RogueCPPWriter__print__String( writer_1, m_10->cpp_name );
      }
      else
      {
        RogueCPPWriter__print__Integer( writer_1, 0 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[423] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[476] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[174] );
  writer_1->indent += 2;
  first_9 = ((RogueLogical)true);
  {
    RogueTypeList* _auto_166_86 = (THIS->type_list);
    RogueInteger _auto_167_87 = (0);
    for (;_auto_167_87 < _auto_166_86->count;++_auto_167_87)
    {
      RogueClassType* type_88 = (((RogueClassType*)(_auto_166_86->data->objects[_auto_167_87])));
      if (first_9)
      {
        first_9 = ((RogueLogical)false);
      }
      else
      {
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[157] );
      }
      RogueClassMethod* m_11 = (((RogueType__find_method__String( type_88, Rogue_literal_strings[369] ))));
      if ((((!!(m_11) && !(((RogueType__omit_output( type_88 ))))) && m_11->is_used) && m_11->statements->count > 1))
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[475] );
        RogueCPPWriter__print__String( writer_1, m_11->cpp_name );
      }
      else
      {
        RogueCPPWriter__print__Integer( writer_1, 0 );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[423] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[477] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[174] );
  writer_1->indent += 2;
  first_9 = ((RogueLogical)true);
  {
    RogueTypeList* _auto_168_89 = (THIS->type_list);
    RogueInteger _auto_169_90 = (0);
    for (;_auto_169_90 < _auto_168_89->count;++_auto_169_90)
    {
      RogueClassType* type_91 = (((RogueClassType*)(_auto_168_89->data->objects[_auto_169_90])));
      if (first_9)
      {
        first_9 = ((RogueLogical)false);
      }
      else
      {
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[157] );
      }
      if (((RogueType__has_object_references( type_91 ))))
      {
        if (((RogueType__is_reference_array( type_91 ))))
        {
          RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[478] );
        }
        else
        {
          RogueString* trace_name_12 = (type_91->cpp_name);
          if ((type_91->is_array && ((RogueType__is_compound( type_91->_element_type )))))
          {
            trace_name_12 = ((RogueString*)((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), type_91->name ))));
          }
          RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[16] ))), trace_name_12 ))), Rogue_literal_strings[479] );
        }
      }
      else
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[480] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[423] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[481] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[174] );
  writer_1->indent += 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[459] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[482] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[483] );
  {
    RogueTypeList* _auto_170_92 = (THIS->type_list);
    RogueInteger _auto_171_93 = (0);
    for (;_auto_171_93 < _auto_170_92->count;++_auto_171_93)
    {
      RogueClassType* type_94 = (((RogueClassType*)(_auto_170_92->data->objects[_auto_171_93])));
      if (((RogueType__has_global_references( type_94 ))))
      {
        {
          RoguePropertyList* _auto_172_95 = (type_94->global_list);
          RogueInteger _auto_173_96 = (0);
          for (;_auto_173_96 < _auto_172_95->count;++_auto_173_96)
          {
            RogueClassProperty* g_97 = (((RogueClassProperty*)(_auto_172_95->data->objects[_auto_173_96])));
            if ((((RogueType__is_reference( g_97->_type ))) || ((RogueType__has_object_references( g_97->_type )))))
            {
              if (((((RogueType__is_reference( g_97->_type ))) && !(((RogueType__is_functional( g_97->_type ))))) && !(g_97->_type->is_array)))
              {
                RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[484] ))), type_94->cpp_name ))), Rogue_literal_strings[354] ))), g_97->cpp_name );
                RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[462] );
              }
              else
              {
                RogueString* trace_class_name_13 = (Rogue_literal_strings[27]);
                if (g_97->_type->is_array)
                {
                  if (((RogueType__is_compound( g_97->_type->_element_type ))))
                  {
                    trace_class_name_13 = ((RogueString*)((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), g_97->_type->name ))));
                  }
                  else if (((RogueType__is_reference( g_97->_type->_element_type ))))
                  {
                    trace_class_name_13 = ((RogueString*)Rogue_literal_strings[390]);
                  }
                }
                else
                {
                  trace_class_name_13 = ((RogueString*)((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), g_97->_type->cpp_name ))));
                }
                RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[484] ))), type_94->cpp_name ))), Rogue_literal_strings[354] ))), g_97->cpp_name );
                RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[463] ))), trace_class_name_13 ))), Rogue_literal_strings[464] );
              }
            }
          }
        }
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[485] );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[97] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[486] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[174] );
  writer_1->indent += 2;
  RogueInteger table_index_14 = (0);
  {
    RogueTypeList* _auto_174_98 = (THIS->type_list);
    RogueInteger _auto_175_99 = (0);
    for (;_auto_175_99 < _auto_174_98->count;++_auto_175_99)
    {
      RogueClassType* type_100 = (((RogueClassType*)(_auto_174_98->data->objects[_auto_175_99])));
      if (!(((RogueType__omit_output( type_100 )))))
      {
        table_index_14 = ((RogueInteger)((RogueType__print_dynamic_method_table_entries__Integer_CPPWriter( type_100, table_index_14, writer_1 ))));
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[423] );
  RogueCPPWriter__println( writer_1 );
  RogueIntegerList* info_15 = (((RogueIntegerList__init( ((RogueIntegerList*)ROGUE_CREATE_OBJECT(IntegerList)) ))));
  {
    RogueTypeList* _auto_177_101 = (THIS->type_list);
    RogueInteger _auto_178_102 = (0);
    for (;_auto_178_102 < _auto_177_101->count;++_auto_178_102)
    {
      RogueClassType* type_103 = (((RogueClassType*)(_auto_177_101->data->objects[_auto_178_102])));
      RogueType__collect_type_info__IntegerList( type_103, info_15 );
    }
  }
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[491] ))), info_15->count ))), Rogue_literal_strings[492] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[174] );
  writer_1->indent += 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[493] );
  first_9 = ((RogueLogical)true);
  RogueInteger items_16 = (0);
  {
    RogueIntegerList* _auto_179_104 = (info_15);
    RogueInteger _auto_180_105 = (0);
    for (;_auto_180_105 < _auto_179_104->count;++_auto_180_105)
    {
      RogueInteger n_106 = (_auto_179_104->data->integers[_auto_180_105]);
      if (first_9)
      {
        first_9 = ((RogueLogical)false);
      }
      else
      {
        RogueCPPWriter__print__Character_Logical( writer_1, (RogueCharacter)',', false );
      }
      ++items_16;
      if (items_16 == 25)
      {
        RogueCPPWriter__println( writer_1 );
        items_16 = ((RogueInteger)0);
      }
      RogueCPPWriter__print__Integer( writer_1, n_106 );
    }
  }
  if (items_16 > 0)
  {
    RogueCPPWriter__println( writer_1 );
  }
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[423] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[499] ))), THIS->type_list->count ))), Rogue_literal_strings[492] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[174] );
  writer_1->indent += 2;
  first_9 = ((RogueLogical)true);
  {
    RogueTypeList* _auto_181_107 = (THIS->type_list);
    RogueInteger _auto_182_108 = (0);
    for (;_auto_182_108 < _auto_181_107->count;++_auto_182_108)
    {
      RogueClassType* type_109 = (((RogueClassType*)(_auto_181_107->data->objects[_auto_182_108])));
      if (first_9)
      {
        first_9 = ((RogueLogical)false);
      }
      else
      {
        RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[157] );
      }
      RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[500] ))), type_109->cpp_class_name ))), Rogue_literal_strings[100] );
    }
  }
  if (items_16 > 0)
  {
    RogueCPPWriter__println( writer_1 );
  }
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[423] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[501] ))), THIS->type_list->count ))), Rogue_literal_strings[184] );
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[502] ))), THIS->type_list->count ))), Rogue_literal_strings[503] );
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_183_110 = (THIS->type_list);
    RogueInteger _auto_184_111 = (0);
    for (;_auto_184_111 < _auto_183_110->count;++_auto_184_111)
    {
      RogueClassType* type_112 = (((RogueClassType*)(_auto_183_110->data->objects[_auto_184_111])));
      if ((!(((RogueType__omit_output( type_112 )))) || (((RogueType__is_native( type_112 ))) && !(type_112->is_array))))
      {
        RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[504] );
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_1, type_112->cpp_name ))), Rogue_literal_strings[184] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[505] ))), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_list->count ))), Rogue_literal_strings[184] );
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[506] ))), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_list->count ))), Rogue_literal_strings[503] );
  {
    RogueTypeList* _auto_185_113 = (THIS->type_list);
    RogueInteger _auto_186_114 = (0);
    for (;_auto_186_114 < _auto_185_113->count;++_auto_186_114)
    {
      RogueClassType* type_115 = (((RogueClassType*)(_auto_185_113->data->objects[_auto_186_114])));
      RogueType__print_routine_prototypes__CPPWriter( type_115, writer_1 );
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_187_116 = (THIS->type_list);
    RogueInteger _auto_188_117 = (0);
    for (;_auto_188_117 < _auto_187_116->count;++_auto_188_117)
    {
      RogueClassType* type_118 = (((RogueClassType*)(_auto_187_116->data->objects[_auto_188_117])));
      RogueType__print_routine_definitions__CPPWriter( type_118, writer_1 );
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_189_119 = (THIS->type_list);
    RogueInteger _auto_190_120 = (0);
    for (;_auto_190_120 < _auto_189_119->count;++_auto_190_120)
    {
      RogueClassType* type_121 = (((RogueClassType*)(_auto_189_119->data->objects[_auto_190_120])));
      RogueType__print_method_definitions__CPPWriter( type_121, writer_1 );
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueInteger type_count_17 = (0);
  {
    RogueTypeList* _auto_191_122 = (THIS->type_list);
    RogueInteger _auto_192_123 = (0);
    for (;_auto_192_123 < _auto_191_122->count;++_auto_192_123)
    {
      RogueClassType* type_124 = (((RogueClassType*)(_auto_191_122->data->objects[_auto_192_123])));
      if (!(type_124->is_array))
      {
        ++type_count_17;
      }
    }
  }
  RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[514] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[174] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[97] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[515] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[174] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[97] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[516] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[174] );
  writer_1->indent += 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[517] );
  RogueCPPWriter__println( writer_1 );
  {
    RogueTypeList* _auto_193_125 = (THIS->type_list);
    RogueInteger _auto_194_126 = (0);
    for (;_auto_194_126 < _auto_193_125->count;++_auto_194_126)
    {
      RogueClassType* type_127 = (((RogueClassType*)(_auto_193_125->data->objects[_auto_194_126])));
      if ((!(((RogueType__omit_output( type_127 )))) || (((RogueType__is_native( type_127 ))) && !(type_127->is_array))))
      {
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[392] ))), type_127->cpp_name ))), Rogue_literal_strings[518] ))), type_127->index ))), Rogue_literal_strings[519] );
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  {
    RogueStringList* _auto_195_128 = (((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_list);
    RogueInteger i_129 = (0);
    for (;i_129 < _auto_195_128->count;++i_129)
    {
      RogueCPPWriter__print__String( ((RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[520] ))), i_129 ))), Rogue_literal_strings[521] );
      RogueCPPWriter__print_string_utf8__String( writer_1, ((RogueString*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_list->data->objects[i_129])) );
      RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[522] );
    }
  }
  RogueCPPWriter__println( writer_1 );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[97] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[523] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[174] );
  writer_1->indent += 2;
  {
    RogueTypeList* _auto_196_130 = (THIS->type_list);
    RogueInteger _auto_197_131 = (0);
    for (;_auto_197_131 < _auto_196_130->count;++_auto_197_131)
    {
      RogueClassType* type_132 = (((RogueClassType*)(_auto_196_130->data->objects[_auto_197_131])));
      if (!(((RogueType__omit_output( type_132 )))))
      {
        RogueClassMethod* m_18 = (((RogueType__find_routine__String( type_132, Rogue_literal_strings[343] ))));
        if ((!!(m_18) && m_18->type_context == type_132))
        {
          RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_1, m_18->cpp_name ))), Rogue_literal_strings[524] );
        }
      }
    }
  }
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[525] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[526] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[174] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[527] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[97] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[528] );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[529] );
  writer_1->indent -= 2;
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[97] );
  RogueCPPWriter__println( writer_1 );
  RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[530] );
  RogueCPPWriter__println( writer_1 );
  if (((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->generate_main)
  {
    RogueCPPWriter__println( writer_1 );
    RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[531] );
  }
  RogueCPPWriter__close( writer_1 );
}

void RogueProgram__print_property_trace_code__Type_CPPWriter( RogueClassProgram* THIS, RogueClassType* type_0, RogueClassCPPWriter* writer_1 )
{
  {
    RoguePropertyList* _auto_198_3 = (type_0->property_list);
    RogueInteger _auto_199_4 = (0);
    for (;_auto_199_4 < _auto_198_3->count;++_auto_199_4)
    {
      RogueClassProperty* p_5 = (((RogueClassProperty*)(_auto_198_3->data->objects[_auto_199_4])));
      if ((((RogueType__is_reference( p_5->_type ))) || ((RogueType__has_object_references( p_5->_type )))))
      {
        if (((((RogueType__is_reference( p_5->_type ))) && !(((RogueType__is_functional( p_5->_type ))))) && !(p_5->_type->is_array)))
        {
          RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[460] ))), type_0->cpp_class_name ))), Rogue_literal_strings[461] ))), p_5->cpp_name );
          RogueCPPWriter__println__String( writer_1, Rogue_literal_strings[462] );
        }
        else
        {
          RogueString* trace_class_name_2 = (Rogue_literal_strings[27]);
          if (p_5->_type->is_array)
          {
            if (((RogueType__is_compound( p_5->_type->_element_type ))))
            {
              trace_class_name_2 = ((RogueString*)((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), p_5->_type->name ))));
            }
            else if (((RogueType__is_reference( p_5->_type->_element_type ))))
            {
              trace_class_name_2 = ((RogueString*)Rogue_literal_strings[390]);
            }
          }
          else
          {
            trace_class_name_2 = ((RogueString*)((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), p_5->_type->cpp_name ))));
          }
          RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[460] ))), type_0->cpp_class_name ))), Rogue_literal_strings[461] ))), p_5->cpp_name );
          RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[463] ))), trace_class_name_2 ))), Rogue_literal_strings[464] );
        }
      }
    }
  }
}

RogueClassProgram* RogueProgram__init_object( RogueClassProgram* THIS )
{
  THIS->code_prefix = Rogue_literal_strings[16];
  THIS->program_name = Rogue_literal_strings[17];
  THIS->template_list = ((RogueTemplateList__init( ((RogueTemplateList*)ROGUE_CREATE_OBJECT(TemplateList)) )));
  THIS->template_lookup = ((RogueString_TemplateTable__init( ((RogueClassString_TemplateTable*)ROGUE_CREATE_OBJECT(String_TemplateTable)) )));
  THIS->augment_lookup = ((RogueString_AugmentListTable__init( ((RogueClassString_AugmentListTable*)ROGUE_CREATE_OBJECT(String_AugmentListTable)) )));
  THIS->requisite_list = ((RogueRequisiteItemList__init( ((RogueRequisiteItemList*)ROGUE_CREATE_OBJECT(RequisiteItemList)) )));
  THIS->first_filepath = Rogue_literal_strings[0];
  THIS->native_header = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  THIS->native_code = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  THIS->methods_by_signature = ((RogueString_MethodListTable__init( ((RogueClassString_MethodListTable*)ROGUE_CREATE_OBJECT(String_MethodListTable)) )));
  THIS->type_list = ((RogueTypeList__init( ((RogueTypeList*)ROGUE_CREATE_OBJECT(TypeList)) )));
  THIS->type_lookup = ((RogueString_TypeTable__init( ((RogueClassString_TypeTable*)ROGUE_CREATE_OBJECT(String_TypeTable)) )));
  THIS->literal_string_lookup = ((RogueString_IntegerTable__init( ((RogueClassString_IntegerTable*)ROGUE_CREATE_OBJECT(String_IntegerTable)) )));
  THIS->literal_string_list = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  THIS->string_buffer = ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) )));
  return (RogueClassProgram*)(THIS);
}

RogueString* RogueTemplateList__to_String( RogueTemplateList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTemplateList* _auto_240_2 = (THIS);
    RogueInteger _auto_241_3 = (0);
    for (;_auto_241_3 < _auto_240_2->count;++_auto_241_3)
    {
      RogueClassTemplate* value_4 = (((RogueClassTemplate*)(_auto_240_2->data->objects[_auto_241_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueTemplateList__type_name( RogueTemplateList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[923]);
}

RogueTemplateList* RogueTemplateList__init_object( RogueTemplateList* THIS )
{
  return (RogueTemplateList*)(THIS);
}

RogueTemplateList* RogueTemplateList__init( RogueTemplateList* THIS )
{
  RogueTemplateList__init__Integer( THIS, 10 );
  return (RogueTemplateList*)(THIS);
}

RogueTemplateList* RogueTemplateList__init__Integer( RogueTemplateList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassTemplate*), true );
  return (RogueTemplateList*)(THIS);
}

RogueTemplateList* RogueTemplateList__add__Template( RogueTemplateList* THIS, RogueClassTemplate* value_0 )
{
  ((RogueTemplateList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTemplateList*)(THIS);
}

RogueInteger RogueTemplateList__capacity( RogueTemplateList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTemplateList* RogueTemplateList__reserve__Integer( RogueTemplateList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassTemplate*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueTemplateList__capacity( THIS ))) + ((RogueTemplateList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassTemplate*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTemplateList*)(THIS);
}

RogueString* RogueTemplate__type_name( RogueClassTemplate* THIS )
{
  return (RogueString*)(Rogue_literal_strings[541]);
}

RogueClassTemplate* RogueTemplate__init__Token_String_Integer( RogueClassTemplate* THIS, RogueClassToken* _auto_52_0, RogueString* _auto_53_1, RogueInteger attribute_flags_2 )
{
  THIS->name = _auto_53_1;
  THIS->t = _auto_52_0;
  RogueAttributes__add__Integer( THIS->attributes, attribute_flags_2 );
  return (RogueClassTemplate*)(THIS);
}

RogueClassTypeParameter* RogueTemplate__add_type_parameter__Token_String( RogueClassTemplate* THIS, RogueClassToken* p_t_0, RogueString* p_name_1 )
{
  if (THIS->type_parameters == NULL)
  {
    THIS->type_parameters = ((RogueTypeParameterList__init( ((RogueTypeParameterList*)ROGUE_CREATE_OBJECT(TypeParameterList)) )));
  }
  RogueClassTypeParameter* param_2 = (((RogueTypeParameter__init__Token_String( ((RogueClassTypeParameter*)ROGUE_CREATE_OBJECT(TypeParameter)), p_t_0, p_name_1 ))));
  RogueTypeParameterList__add__TypeParameter( THIS->type_parameters, param_2 );
  return (RogueClassTypeParameter*)(param_2);
}

RogueInteger Rogue_Template__element_type( RogueClassTemplate* THIS )
{
  return (RogueInteger)((THIS->attributes->flags & 7));
}

void RogueTemplate__instantiate__Type( RogueClassTemplate* THIS, RogueClassType* type_0 )
{
  type_0->t = THIS->t;
  RogueAttributes__add__Attributes( type_0->attributes, THIS->attributes );
  RogueTokenList* augmented_tokens_1 = (THIS->tokens);
  RogueAugmentList* augments_2 = (((RogueString_AugmentListTable__get__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->augment_lookup, type_0->name ))));
  if (!!(augments_2))
  {
    RogueInteger t_count_3 = (THIS->tokens->count);
    {
      RogueAugmentList* _auto_256_4 = (augments_2);
      RogueInteger _auto_257_5 = (0);
      for (;_auto_257_5 < _auto_256_4->count;++_auto_257_5)
      {
        RogueClassAugment* aug_6 = (((RogueClassAugment*)(_auto_256_4->data->objects[_auto_257_5])));
        t_count_3 += aug_6->tokens->count;
      }
    }
    augmented_tokens_1 = ((RogueTokenList*)((RogueTokenList__init__Integer( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)), t_count_3 ))));
    RogueTokenList__add__TokenList( augmented_tokens_1, THIS->tokens );
    RogueTokenList__remove_last( augmented_tokens_1 );
    RogueTokenList__add__Token( augmented_tokens_1, ((RogueToken__init__TokenType( ((RogueClassToken*)ROGUE_CREATE_OBJECT(Token)), RogueTokenType_begin_augment_tokens ))) );
    {
      RogueAugmentList* _auto_271_7 = (augments_2);
      RogueInteger _auto_272_8 = (0);
      for (;_auto_272_8 < _auto_271_7->count;++_auto_272_8)
      {
        RogueClassAugment* aug_9 = (((RogueClassAugment*)(_auto_271_7->data->objects[_auto_272_8])));
        {
          RogueTypeList* _auto_273_10 = (aug_9->base_types);
          RogueInteger _auto_274_11 = (0);
          for (;_auto_274_11 < _auto_273_10->count;++_auto_274_11)
          {
            RogueClassType* base_type_12 = (((RogueClassType*)(_auto_273_10->data->objects[_auto_274_11])));
            RogueTypeList__add__Type( type_0->base_types, base_type_12 );
          }
        }
        RogueTokenList__add__TokenList( augmented_tokens_1, aug_9->tokens );
      }
    }
    RogueTokenList__add__Token( augmented_tokens_1, ((RogueTokenList__last( THIS->tokens ))) );
  }
  if (((RogueString__ends_with__String( type_0->name, ((RogueCharacter__to_String( (RogueCharacter)']' ))) ))))
  {
    RogueTemplate__instantiate_list__Type_TokenList( THIS, type_0, augmented_tokens_1 );
  }
  else if (((RogueString__ends_with__String( type_0->name, ((RogueCharacter__to_String( (RogueCharacter)'?' ))) ))))
  {
    RogueTemplate__instantiate_optional__Type_TokenList( THIS, type_0, augmented_tokens_1 );
  }
  else if (!!(THIS->type_parameters))
  {
    RogueTemplate__instantiate_parameterized_type__Type_TokenList( THIS, type_0, augmented_tokens_1 );
  }
  else
  {
    RogueTemplate__instantiate_standard_type__Type_TokenList( THIS, type_0, augmented_tokens_1 );
  }
}

void RogueTemplate__instantiate_list__Type_TokenList( RogueClassTemplate* THIS, RogueClassType* type_0, RogueTokenList* augmented_tokens_1 )
{
  type_0->is_list = true;
  type_0->_element_type = ((RogueType__organize( ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, ((RogueString__leftmost__Integer( type_0->name, -2 ))) ))) )));
  RogueTokenList* instance_tokens_2 = (((RogueTokenList__init__Integer( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)), augmented_tokens_1->count ))));
  {
    RogueTokenList* _auto_275_3 = (augmented_tokens_1);
    RogueInteger _auto_276_4 = (0);
    for (;_auto_276_4 < _auto_275_3->count;++_auto_276_4)
    {
      RogueClassToken* template_t_5 = (((RogueClassToken*)(_auto_275_3->data->objects[_auto_276_4])));
      if (template_t_5->_type == RogueTokenType_placeholder_id)
      {
        if (((RogueString__operatorLESSTHANGREATERTHAN__String( (call_ROGUEM33( 1, (RogueClassToken*)(template_t_5) )), Rogue_literal_strings[283] ))) == 0)
        {
          RogueTokenList__add__Token( instance_tokens_2, ((RogueTokenType__create_token__Token_String( RogueTokenType_identifier, template_t_5, type_0->_element_type->name ))) );
        }
        else
        {
          RogueTokenList__add__Token( instance_tokens_2, template_t_5 );
        }
      }
      else
      {
        RogueTokenList__add__Token( instance_tokens_2, template_t_5 );
      }
    }
  }
  RogueParser__parse_type_def__Type( ((RogueParser__init__TokenList( ((RogueClassParser*)ROGUE_CREATE_OBJECT(Parser)), instance_tokens_2 ))), type_0 );
}

void RogueTemplate__instantiate_optional__Type_TokenList( RogueClassTemplate* THIS, RogueClassType* type_0, RogueTokenList* augmented_tokens_1 )
{
  type_0->is_optional = true;
  type_0->_element_type = ((RogueType__organize( ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, ((RogueString__leftmost__Integer( type_0->name, -1 ))) ))) )));
  RogueTokenList* instance_tokens_2 = (((RogueTokenList__init__Integer( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)), augmented_tokens_1->count ))));
  {
    RogueTokenList* _auto_277_3 = (augmented_tokens_1);
    RogueInteger _auto_278_4 = (0);
    for (;_auto_278_4 < _auto_277_3->count;++_auto_278_4)
    {
      RogueClassToken* template_t_5 = (((RogueClassToken*)(_auto_277_3->data->objects[_auto_278_4])));
      if (template_t_5->_type == RogueTokenType_placeholder_id)
      {
        if (((RogueString__operatorLESSTHANGREATERTHAN__String( (call_ROGUEM33( 1, (RogueClassToken*)(template_t_5) )), Rogue_literal_strings[283] ))) == 0)
        {
          RogueTokenList__add__Token( instance_tokens_2, ((RogueTokenType__create_token__Token_String( RogueTokenType_identifier, template_t_5, type_0->_element_type->name ))) );
        }
        else
        {
          RogueTokenList__add__Token( instance_tokens_2, template_t_5 );
        }
      }
      else
      {
        RogueTokenList__add__Token( instance_tokens_2, template_t_5 );
      }
    }
  }
  RogueParser__parse_type_def__Type( ((RogueParser__init__TokenList( ((RogueClassParser*)ROGUE_CREATE_OBJECT(Parser)), instance_tokens_2 ))), type_0 );
}

void RogueTemplate__instantiate_parameterized_type__Type_TokenList( RogueClassTemplate* THIS, RogueClassType* type_0, RogueTokenList* augmented_tokens_1 )
{
  RogueTokenList* instance_tokens_2 = (augmented_tokens_1);
  RogueClassString_TypeSpecializerTable* type_specializers_3 = (((RogueString_TypeSpecializerTable__init( ((RogueClassString_TypeSpecializerTable*)ROGUE_CREATE_OBJECT(String_TypeSpecializerTable)) ))));
  RogueString* specialization_string_4 = (((RogueString__from_first__Character( type_0->name, (RogueCharacter)'<' ))));
  if (specialization_string_4->count == 0)
  {
    throw ((RogueToken__error__String( type_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[300] ))), type_0->name ))), Rogue_literal_strings[301] ))), type_0->name ))), Rogue_literal_strings[302] ))) ))) )));
  }
  RogueClassParser* parser_5 = (((RogueParser__init__Token_String_String( ((RogueClassParser*)ROGUE_CREATE_OBJECT(Parser)), THIS->t, type_0->name, ((RogueString__from_first__Character( type_0->name, (RogueCharacter)'<' ))) ))));
  RogueParser__read( parser_5 );
  RogueStringBuilder* buffer_6 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueLogical first_7 = (true);
  while ((first_7 || ((RogueParser__consume__TokenType( parser_5, RogueTokenType_symbol_comma )))))
  {
    first_7 = ((RogueLogical)false);
    RogueTokenList* specializer_tokens_8 = (((RogueTokenList__init( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)) ))));
    RogueParser__parse_specializer__StringBuilder_TokenList( parser_5, ((RogueStringBuilder__clear( buffer_6 ))), specializer_tokens_8 );
    RogueInteger index_9 = (((RogueString_TypeSpecializerTable__count( type_specializers_3 ))));
    if (index_9 >= THIS->type_parameters->count)
    {
      throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[303] )));
    }
    RogueClassTypeParameter* param_10 = (((RogueClassTypeParameter*)(THIS->type_parameters->data->objects[index_9])));
    RogueClassTypeSpecializer* specializer_11 = (((RogueTypeSpecializer__init__String_Integer( ((RogueClassTypeSpecializer*)ROGUE_CREATE_OBJECT(TypeSpecializer)), param_10->name, index_9 ))));
    specializer_11->tokens = specializer_tokens_8;
    RogueString_TypeSpecializerTable__set__String_TypeSpecializer( type_specializers_3, specializer_11->name, specializer_11 );
  }
  if (((RogueString_TypeSpecializerTable__count( type_specializers_3 ))) < THIS->type_parameters->count)
  {
    throw ((RogueToken__error__String( type_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[304] ))), type_0->name ))), Rogue_literal_strings[305] ))), ((RogueInteger__to_String( ((RogueString_TypeSpecializerTable__count( type_specializers_3 ))) ))) ))), Rogue_literal_strings[306] ))), ((RogueInteger__to_String( THIS->type_parameters->count ))) ))), Rogue_literal_strings[307] ))) ))) )));
  }
  instance_tokens_2 = ((RogueTokenList*)((RogueTokenList__init__Integer( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)), (augmented_tokens_1->count * 2) ))));
  {
    RogueTokenList* _auto_281_13 = (augmented_tokens_1);
    RogueInteger _auto_282_14 = (0);
    for (;_auto_282_14 < _auto_281_13->count;++_auto_282_14)
    {
      RogueClassToken* template_t_15 = (((RogueClassToken*)(_auto_281_13->data->objects[_auto_282_14])));
      if (template_t_15->_type == RogueTokenType_placeholder_id)
      {
        RogueClassTypeSpecializer* specializer_12 = (((RogueString_TypeSpecializerTable__get__String( type_specializers_3, (call_ROGUEM33( 1, (RogueClassToken*)(template_t_15) )) ))));
        if (!!(specializer_12))
        {
          {
            RogueTokenList* _auto_283_16 = (specializer_12->tokens);
            RogueInteger _auto_284_17 = (0);
            for (;_auto_284_17 < _auto_283_16->count;++_auto_284_17)
            {
              RogueClassToken* specializer_t_18 = (((RogueClassToken*)(_auto_283_16->data->objects[_auto_284_17])));
              RogueTokenList__add__Token( instance_tokens_2, specializer_t_18 );
            }
          }
        }
        else
        {
          RogueTokenList__add__Token( instance_tokens_2, template_t_15 );
        }
      }
      else
      {
        RogueTokenList__add__Token( instance_tokens_2, template_t_15 );
      }
    }
  }
  RogueParser__parse_type_def__Type( ((RogueParser__init__TokenList( ((RogueClassParser*)ROGUE_CREATE_OBJECT(Parser)), instance_tokens_2 ))), type_0 );
}

void RogueTemplate__instantiate_standard_type__Type_TokenList( RogueClassTemplate* THIS, RogueClassType* type_0, RogueTokenList* augmented_tokens_1 )
{
  if (((RogueString__contains__String( type_0->name, ((RogueCharacter__to_String( (RogueCharacter)'<' ))) ))))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[308] )));
  }
  RogueParser__parse_type_def__Type( ((RogueParser__init__TokenList( ((RogueClassParser*)ROGUE_CREATE_OBJECT(Parser)), augmented_tokens_1 ))), type_0 );
}

RogueClassTemplate* RogueTemplate__init_object( RogueClassTemplate* THIS )
{
  THIS->tokens = ((RogueTokenList__init( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)) )));
  THIS->attributes = ((RogueClassAttributes*)ROGUE_CREATE_OBJECT(Attributes));
  return (RogueClassTemplate*)(THIS);
}

RogueString* RogueString_TemplateTable__to_String( RogueClassString_TemplateTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_TemplateTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_TemplateTable__type_name( RogueClassString_TemplateTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[542]);
}

RogueClassString_TemplateTable* RogueString_TemplateTable__init( RogueClassString_TemplateTable* THIS )
{
  RogueString_TemplateTable__init__Integer( THIS, 16 );
  return (RogueClassString_TemplateTable*)(THIS);
}

RogueClassString_TemplateTable* RogueString_TemplateTable__init__Integer( RogueClassString_TemplateTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_TemplateTableEntryList__init__Integer_String_TemplateTableEntry( ((RogueTableEntry_of_String_TemplateList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_TemplateList)), bin_count_0, ((RogueClassString_TemplateTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_TemplateTable*)(THIS);
}

RogueClassString_TemplateTableEntry* RogueString_TemplateTable__find__String( RogueClassString_TemplateTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_TemplateTableEntry* entry_2 = (((RogueClassString_TemplateTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_TemplateTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_TemplateTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_TemplateTableEntry*)(((RogueClassString_TemplateTableEntry*)(NULL)));
}

RogueClassTemplate* RogueString_TemplateTable__get__String( RogueClassString_TemplateTable* THIS, RogueString* key_0 )
{
  RogueClassString_TemplateTableEntry* entry_1 = (((RogueString_TemplateTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassTemplate*)(entry_1->value);
  }
  else
  {
    RogueClassTemplate* default_value_2 = 0;
    return (RogueClassTemplate*)(default_value_2);
  }
}

void RogueString_TemplateTable__set__String_Template( RogueClassString_TemplateTable* THIS, RogueString* key_0, RogueClassTemplate* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_TemplateTableEntry* entry_4 = (((RogueClassString_TemplateTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_TemplateTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_TemplateTableEntry*)((RogueString_TemplateTableEntry__init__String_Template_Integer( ((RogueClassString_TemplateTableEntry*)ROGUE_CREATE_OBJECT(String_TemplateTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_TemplateTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_TemplateTable__print_to__StringBuilder( RogueClassString_TemplateTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_TemplateTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_TemplateTable* RogueString_TemplateTable__init_object( RogueClassString_TemplateTable* THIS )
{
  return (RogueClassString_TemplateTable*)(THIS);
}

RogueString* RogueString_AugmentListTable__to_String( RogueClassString_AugmentListTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_AugmentListTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_AugmentListTable__type_name( RogueClassString_AugmentListTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[543]);
}

RogueClassString_AugmentListTable* RogueString_AugmentListTable__init( RogueClassString_AugmentListTable* THIS )
{
  RogueString_AugmentListTable__init__Integer( THIS, 16 );
  return (RogueClassString_AugmentListTable*)(THIS);
}

RogueClassString_AugmentListTable* RogueString_AugmentListTable__init__Integer( RogueClassString_AugmentListTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_AugmentListTableEntryList__init__Integer_String_AugmentListTableEntry( ((RogueTableEntry_of_String_AugmentListList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_AugmentListList)), bin_count_0, ((RogueClassString_AugmentListTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_AugmentListTable*)(THIS);
}

RogueClassString_AugmentListTableEntry* RogueString_AugmentListTable__find__String( RogueClassString_AugmentListTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_AugmentListTableEntry* entry_2 = (((RogueClassString_AugmentListTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_AugmentListTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_AugmentListTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_AugmentListTableEntry*)(((RogueClassString_AugmentListTableEntry*)(NULL)));
}

RogueAugmentList* RogueString_AugmentListTable__get__String( RogueClassString_AugmentListTable* THIS, RogueString* key_0 )
{
  RogueClassString_AugmentListTableEntry* entry_1 = (((RogueString_AugmentListTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueAugmentList*)(entry_1->value);
  }
  else
  {
    RogueAugmentList* default_value_2 = 0;
    return (RogueAugmentList*)(default_value_2);
  }
}

void RogueString_AugmentListTable__set__String_AugmentList( RogueClassString_AugmentListTable* THIS, RogueString* key_0, RogueAugmentList* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_AugmentListTableEntry* entry_4 = (((RogueClassString_AugmentListTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_AugmentListTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_AugmentListTableEntry*)((RogueString_AugmentListTableEntry__init__String_AugmentList_Integer( ((RogueClassString_AugmentListTableEntry*)ROGUE_CREATE_OBJECT(String_AugmentListTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_AugmentListTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_AugmentListTable__print_to__StringBuilder( RogueClassString_AugmentListTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_AugmentListTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_AugmentListTable* RogueString_AugmentListTable__init_object( RogueClassString_AugmentListTable* THIS )
{
  return (RogueClassString_AugmentListTable*)(THIS);
}

RogueString* RogueRequisiteItemList__to_String( RogueRequisiteItemList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueRequisiteItemList* _auto_293_2 = (THIS);
    RogueInteger _auto_294_3 = (0);
    for (;_auto_294_3 < _auto_293_2->count;++_auto_294_3)
    {
      RogueClassRequisiteItem* value_4 = (((RogueClassRequisiteItem*)(_auto_293_2->data->objects[_auto_294_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueRequisiteItemList__type_name( RogueRequisiteItemList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[924]);
}

RogueRequisiteItemList* RogueRequisiteItemList__init_object( RogueRequisiteItemList* THIS )
{
  return (RogueRequisiteItemList*)(THIS);
}

RogueRequisiteItemList* RogueRequisiteItemList__init( RogueRequisiteItemList* THIS )
{
  RogueRequisiteItemList__init__Integer( THIS, 10 );
  return (RogueRequisiteItemList*)(THIS);
}

RogueRequisiteItemList* RogueRequisiteItemList__init__Integer( RogueRequisiteItemList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassRequisiteItem*), true );
  return (RogueRequisiteItemList*)(THIS);
}

RogueRequisiteItemList* RogueRequisiteItemList__add__RequisiteItem( RogueRequisiteItemList* THIS, RogueClassRequisiteItem* value_0 )
{
  ((RogueRequisiteItemList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueRequisiteItemList*)(THIS);
}

RogueInteger RogueRequisiteItemList__capacity( RogueRequisiteItemList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueRequisiteItemList* RogueRequisiteItemList__reserve__Integer( RogueRequisiteItemList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassRequisiteItem*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueRequisiteItemList__capacity( THIS ))) + ((RogueRequisiteItemList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassRequisiteItem*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueRequisiteItemList*)(THIS);
}

RogueString* RogueRequisiteItem__type_name( RogueClassRequisiteItem* THIS )
{
  return (RogueString*)(Rogue_literal_strings[544]);
}

RogueClassRequisiteItem* RogueRequisiteItem__init__Token_Type_String( RogueClassRequisiteItem* THIS, RogueClassToken* _auto_55_0, RogueClassType* _auto_56_1, RogueString* _auto_57_2 )
{
  THIS->signature = _auto_57_2;
  THIS->_type = _auto_56_1;
  THIS->t = _auto_55_0;
  return (RogueClassRequisiteItem*)(THIS);
}

RogueClassRequisiteItem* RogueRequisiteItem__init_object( RogueClassRequisiteItem* THIS )
{
  return (RogueClassRequisiteItem*)(THIS);
}

RogueString* RogueMethod__to_String( RogueClassMethod* THIS )
{
  return (RogueString*)(THIS->signature);
}

RogueString* RogueMethod__type_name( RogueClassMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[545]);
}

RogueClassMethod* RogueMethod__init__Token_Type_String( RogueClassMethod* THIS, RogueClassToken* _auto_59_0, RogueClassType* _auto_60_1, RogueString* _auto_61_2 )
{
  THIS->name = _auto_61_2;
  RogueMethod__set_type_context__Type( THIS, _auto_60_1 );
  THIS->t = _auto_59_0;
  return (RogueClassMethod*)(THIS);
}

RogueClassMethod* RogueMethod__clone( RogueClassMethod* THIS )
{
  RogueClassMethod* result_0 = (((RogueMethod__init__Token_Type_String( ((RogueClassMethod*)ROGUE_CREATE_OBJECT(Method)), THIS->t, THIS->type_context, THIS->name ))));
  result_0->cpp_name = THIS->cpp_name;
  result_0->cpp_typedef = THIS->cpp_typedef;
  result_0->signature = THIS->signature;
  result_0->attributes = ((RogueAttributes__clone( THIS->attributes )));
  result_0->_return_type = THIS->_return_type;
  result_0->_task_result_type = THIS->_task_result_type;
  result_0->locals = ((RogueLocalList__init( ((RogueLocalList*)ROGUE_CREATE_OBJECT(LocalList)) )));
  {
    RogueLocalList* _auto_304_1 = (THIS->locals);
    RogueInteger _auto_305_2 = (0);
    for (;_auto_305_2 < _auto_304_1->count;++_auto_305_2)
    {
      RogueClassLocal* v_3 = (((RogueClassLocal*)(_auto_304_1->data->objects[_auto_305_2])));
      RogueLocalList__add__Local( result_0->locals, ((RogueLocal__clone__CloneArgs( v_3, ((RogueClassCloneArgs*)(NULL)) ))) );
    }
  }
  result_0->parameters = ((RogueLocalList__init( ((RogueLocalList*)ROGUE_CREATE_OBJECT(LocalList)) )));
  {
    RogueLocalList* _auto_306_4 = (THIS->parameters);
    RogueInteger i_5 = (0);
    for (;i_5 < _auto_306_4->count;++i_5)
    {
      RogueLocalList__add__Local( result_0->parameters, ((RogueClassLocal*)(THIS->locals->data->objects[i_5])) );
    }
  }
  result_0->label_list = ((RogueCmdLabelList__init__Integer( ((RogueCmdLabelList*)ROGUE_CREATE_OBJECT(CmdLabelList)), THIS->label_list->count )));
  result_0->label_lookup = ((RogueString_CmdLabelTable__init( ((RogueClassString_CmdLabelTable*)ROGUE_CREATE_OBJECT(String_CmdLabelTable)) )));
  result_0->min_args = THIS->min_args;
  result_0->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, ((RogueClassCloneArgs*)(((RogueCloneMethodArgs__init__Method( ((RogueClassCloneMethodArgs*)ROGUE_CREATE_OBJECT(CloneMethodArgs)), result_0 ))))) )));
  result_0->native_code = THIS->native_code;
  result_0->index = THIS->index;
  return (RogueClassMethod*)(result_0);
}

RogueClassMethod* RogueMethod__incorporate__Type( RogueClassMethod* THIS, RogueClassType* into_type_0 )
{
  RogueClassMethod* m_1 = (((RogueMethod__set_incorporated( ((RogueMethod__set_type_context__Type( ((RogueMethod__clone( THIS ))), into_type_0 ))) ))));
  m_1->cpp_name = ((RogueString*)(NULL));
  if (!!(THIS->aspect_statements))
  {
    m_1->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->aspect_statements, ((RogueClassCloneArgs*)(RogueObject_as(NULL,RogueTypeCloneArgs))) )));
  }
  if (THIS->incorporating_classes == NULL)
  {
    THIS->incorporating_classes = ((RogueTypeList__init( ((RogueTypeList*)ROGUE_CREATE_OBJECT(TypeList)) )));
  }
  RogueTypeList__add__Type( THIS->incorporating_classes, into_type_0 );
  m_1->signature = ((RogueString*)(NULL));
  RogueMethod__assign_signature( m_1 );
  return (RogueClassMethod*)(m_1);
}

RogueLogical RogueMethod__accepts_arg_count__Integer( RogueClassMethod* THIS, RogueInteger n_0 )
{
  return (RogueLogical)((n_0 >= THIS->min_args && n_0 <= THIS->parameters->count));
}

RogueClassLocal* RogueMethod__add_local__Token_String_Type_Cmd( RogueClassMethod* THIS, RogueClassToken* v_t_0, RogueString* v_name_1, RogueClassType* v_type_2, RogueClassCmd* v_initial_value_3 )
{
  RogueClassLocal* v_4 = (((RogueLocal__init__Token_String( ((RogueClassLocal*)ROGUE_CREATE_OBJECT(Local)), v_t_0, v_name_1 ))));
  v_4->index = THIS->locals->count;
  v_4->_type = v_type_2;
  v_4->initial_value = v_initial_value_3;
  RogueLocalList__add__Local( THIS->locals, v_4 );
  return (RogueClassLocal*)(v_4);
}

RogueClassLocal* RogueMethod__add_parameter__Token_String_Type( RogueClassMethod* THIS, RogueClassToken* p_t_0, RogueString* p_name_1, RogueClassType* p_type_2 )
{
  RogueClassLocal* p_3 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS, p_t_0, p_name_1, p_type_2, ((RogueClassCmd*)(NULL)) ))));
  RogueLocalList__add__Local( THIS->parameters, p_3 );
  return (RogueClassLocal*)(p_3);
}

void RogueMethod__assign_signature( RogueClassMethod* THIS )
{
  if (!!(THIS->signature))
  {
    return;
  }
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__String( buffer_0, THIS->name );
  RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[176] );
  RogueLogical first_1 = (true);
  {
    RogueLocalList* _auto_308_2 = (THIS->parameters);
    RogueInteger _auto_309_3 = (0);
    for (;_auto_309_3 < _auto_308_2->count;++_auto_309_3)
    {
      RogueClassLocal* param_4 = (((RogueClassLocal*)(_auto_308_2->data->objects[_auto_309_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[157] );
      }
      RogueStringBuilder__print__String( buffer_0, param_4->_type->name );
    }
  }
  RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[100] );
  THIS->signature = ((RogueStringBuilder__to_String( buffer_0 )));
}

RogueClassCmdLabel* RogueMethod__begin_label__Token_String_Logical( RogueClassMethod* THIS, RogueClassToken* label_t_0, RogueString* label_name_1, RogueLogical consolidate_duplicates_2 )
{
  if (consolidate_duplicates_2)
  {
    THIS->cur_label = ((RogueString_CmdLabelTable__get__String( THIS->label_lookup, label_name_1 )));
    if (!!(THIS->cur_label))
    {
      return (RogueClassCmdLabel*)(THIS->cur_label);
    }
  }
  else if ((((RogueString__operatorLESSTHANGREATERTHAN__String( label_name_1, Rogue_literal_strings[257] ))) == 0 && ((RogueString_CmdLabelTable__contains__String( THIS->label_lookup, label_name_1 )))))
  {
    throw ((RogueToken__error__String( label_t_0, Rogue_literal_strings[258] )));
  }
  else if ((((RogueString__operatorLESSTHANGREATERTHAN__String( label_name_1, Rogue_literal_strings[259] ))) == 0 && ((RogueString_CmdLabelTable__contains__String( THIS->label_lookup, label_name_1 )))))
  {
    throw ((RogueToken__error__String( ((RogueString_CmdLabelTable__get__String( THIS->label_lookup, label_name_1 )))->t, Rogue_literal_strings[260] )));
  }
  THIS->cur_label = ((RogueCmdLabel__init__Token_String_CmdStatementList( ((RogueClassCmdLabel*)ROGUE_CREATE_OBJECT(CmdLabel)), label_t_0, label_name_1, ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))) )));
  RogueString_CmdLabelTable__set__String_CmdLabel( THIS->label_lookup, label_name_1, THIS->cur_label );
  RogueCmdLabelList__add__CmdLabel( THIS->label_list, THIS->cur_label );
  return (RogueClassCmdLabel*)(THIS->cur_label);
}

RogueLogical RogueMethod__is_augment( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 262144)));
}

RogueLogical RogueMethod__is_dynamic( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 2048)));
}

RogueLogical RogueMethod__is_generated( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 16384)));
}

RogueLogical RogueMethod__is_incorporated( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 8192)));
}

RogueLogical RogueMethod__is_initializer( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 128)));
}

RogueLogical RogueMethod__is_macro( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 64)));
}

RogueLogical RogueMethod__is_native( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 32)));
}

RogueLogical RogueMethod__is_overridden( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 4096)));
}

RogueLogical RogueMethod__is_requisite( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 32768)));
}

RogueLogical RogueMethod__is_routine( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 512)));
}

RogueLogical RogueMethod__is_task( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 65536)));
}

RogueLogical RogueMethod__is_task_conversion( RogueClassMethod* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 131072)));
}

RogueLogical RogueMethod__omit_output( RogueClassMethod* THIS )
{
  return (RogueLogical)((((((RogueMethod__is_native( THIS ))) || ((RogueMethod__is_macro( THIS )))) || !(THIS->is_used)) || ((((RogueMethod__is_generated( THIS ))) && ((RogueString__operatorLESSTHANGREATERTHAN__String( THIS->name, Rogue_literal_strings[284] ))) == 0) && ((RogueType__is_compound( THIS->type_context ))))));
}

RogueClassMethod* RogueMethod__organize__Logical( RogueClassMethod* THIS, RogueLogical add_to_lookup_0 )
{
  if (THIS->organized)
  {
    return (RogueClassMethod*)(THIS);
  }
  THIS->organized = true;
  if (((RogueString__operatorLESSTHANGREATERTHAN__String( THIS->name, Rogue_literal_strings[285] ))) == 0)
  {
    if (((RogueType__is_compound( THIS->type_context ))))
    {
      throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[327] )));
    }
    THIS->attributes->flags |= 128;
    THIS->_return_type = THIS->type_context;
  }
  if (((RogueMethod__is_task( THIS ))))
  {
    THIS->_task_result_type = THIS->_return_type;
    if (!!(THIS->_return_type))
    {
      RogueType__organize( THIS->_return_type );
      THIS->_return_type = ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[328] ))), THIS->_return_type->name ))), Rogue_literal_strings[101] ))) ))) )));
    }
    else
    {
      THIS->_return_type = ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, Rogue_literal_strings[329] )));
    }
    RogueType__organize( THIS->_return_type );
  }
  {
    RogueLocalList* _auto_310_7 = (THIS->parameters);
    RogueInteger _auto_311_8 = (0);
    for (;_auto_311_8 < _auto_310_7->count;++_auto_311_8)
    {
      RogueClassLocal* param_9 = (((RogueClassLocal*)(_auto_310_7->data->objects[_auto_311_8])));
      if (!(((RogueMethod__is_routine( THIS )))))
      {
        RogueClassProperty* property_1 = (((RogueType__find_property__String( THIS->type_context, param_9->name ))));
        if (!!(property_1))
        {
          if (param_9->_type == NULL)
          {
            RogueString* new_name_2 = (((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))));
            RogueClassToken* pt_3 = (param_9->t);
            RogueCmdList__insert__Cmd_Integer( ((RogueCmdList*)THIS->statements), ((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)ROGUE_CREATE_OBJECT(CmdAssign)), pt_3, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), pt_3, param_9->name ))))), ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), pt_3, new_name_2 ))))) ))))), 0 );
            param_9->name = new_name_2;
            param_9->_type = property_1->_type;
          }
          else
          {
            throw ((RogueToken__error__String( param_9->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[319] ))), param_9->name ))), Rogue_literal_strings[320] ))) ))) )));
          }
        }
      }
      if (!(!!(param_9->_type)))
      {
        throw ((RogueToken__error__String( param_9->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[330] ))), param_9->name ))), Rogue_literal_strings[36] ))) ))) )));
      }
    }
  }
  RogueMethod__assign_signature( THIS );
  if ((add_to_lookup_0 && !(((RogueMethod__is_augment( THIS ))))))
  {
    RogueMethodList* list_4 = (((RogueString_MethodListTable__get__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->methods_by_signature, THIS->signature ))));
    if (!(!!(list_4)))
    {
      list_4 = ((RogueMethodList*)((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) ))));
      RogueString_MethodListTable__set__String_MethodList( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->methods_by_signature, THIS->signature, list_4 );
    }
    RogueMethodList__add__Method( list_4, THIS );
    if (((RogueMethod__is_routine( THIS ))))
    {
      RogueClassMethod* existing_m_5 = (((RogueString_MethodTable__get__String( THIS->type_context->routine_lookup_by_signature, THIS->signature ))));
      if ((!!(existing_m_5) && existing_m_5->type_context == THIS->type_context))
      {
        throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[331] ))), THIS->signature ))), Rogue_literal_strings[332] ))) ))) )));
      }
      RogueString_MethodTable__set__String_Method( THIS->type_context->routine_lookup_by_signature, THIS->signature, THIS );
    }
    else
    {
      RogueClassMethod* existing_m_6 = (((RogueString_MethodTable__get__String( THIS->type_context->method_lookup_by_signature, THIS->signature ))));
      if ((!!(existing_m_6) && existing_m_6->type_context == THIS->type_context))
      {
        throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[333] ))), THIS->signature ))), Rogue_literal_strings[332] ))) ))) )));
      }
      RogueString_MethodTable__set__String_Method( THIS->type_context->method_lookup_by_signature, THIS->signature, THIS );
    }
  }
  THIS->min_args = THIS->parameters->count;
  while ((THIS->min_args >= 1 && !!(((RogueClassLocal*)(THIS->parameters->data->objects[(THIS->min_args - 1)]))->initial_value)))
  {
    --THIS->min_args;
  }
  return (RogueClassMethod*)(THIS);
}

void RogueMethod__resolve( RogueClassMethod* THIS )
{
  if (THIS->resolved)
  {
    return;
  }
  THIS->resolved = true;
  {
    RogueLocalList* _auto_330_2 = (THIS->parameters);
    RogueInteger _auto_331_3 = (0);
    for (;_auto_331_3 < _auto_330_2->count;++_auto_331_3)
    {
      RogueClassLocal* param_4 = (((RogueClassLocal*)(_auto_330_2->data->objects[_auto_331_3])));
      RogueType__organize( param_4->_type );
    }
  }
  if (!!(THIS->_return_type))
  {
    RogueType__organize( THIS->_return_type );
  }
  if (((RogueType__is_aspect( THIS->type_context ))))
  {
    THIS->aspect_statements = THIS->statements;
    THIS->statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
  }
  if (((RogueMethod__is_task( THIS ))))
  {
    RogueMethod__convert_to_task( THIS );
  }
  RogueClassScope* scope_0 = (((RogueScope__init__Type_Method( ((RogueClassScope*)ROGUE_CREATE_OBJECT(Scope)), THIS->type_context, THIS ))));
  {
    RogueLocalList* _auto_334_5 = (THIS->parameters);
    RogueInteger _auto_335_6 = (0);
    for (;_auto_335_6 < _auto_334_5->count;++_auto_335_6)
    {
      RogueClassLocal* p_7 = (((RogueClassLocal*)(_auto_334_5->data->objects[_auto_335_6])));
      RogueScope__push_local__Local_Logical( scope_0, p_7, true );
    }
  }
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  if (scope_0->local_list->count > THIS->parameters->count)
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[362] )));
  }
  if (!!(scope_0->control_stack->count))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[363] )));
  }
  if (((RogueMethod__is_initializer( THIS ))))
  {
    RogueClassToken* return_t_1 = (THIS->t);
    if (!!(THIS->statements->count))
    {
      return_t_1 = ((RogueClassToken*)((RogueCmdList__last( ((RogueCmdList*)THIS->statements) )))->t);
    }
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->statements), ((RogueCmdReturn__resolve__Scope( ((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), return_t_1, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)((RogueClassCmdLiteralThis*)ROGUE_CREATE_OBJECT(CmdLiteralThis))), return_t_1, THIS->type_context ))))) ))), scope_0 ))) );
  }
}

void RogueMethod__convert_augment_to_standalone( RogueClassMethod* THIS )
{
  THIS->attributes->flags &= -262145;
  if (!(!!(THIS->native_code)))
  {
    if (THIS->label_list->count > 2)
    {
      RogueClassCmdLabel* label_0 = (((RogueClassCmdLabel*)(THIS->label_list->data->objects[2])));
      throw ((RogueToken__error__String( label_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[334] ))), label_0->name ))), Rogue_literal_strings[335] ))) ))) )));
    }
    RogueClassCmdLabel* insert_label_1 = (((RogueString_CmdLabelTable__get__String( THIS->label_lookup, Rogue_literal_strings[257] ))));
    RogueClassCmdLabel* append_label_2 = (((RogueString_CmdLabelTable__get__String( THIS->label_lookup, Rogue_literal_strings[259] ))));
    RogueString_CmdLabelTable__clear( THIS->label_lookup );
    RogueCmdLabelList__clear( THIS->label_list );
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->statements), ((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( THIS, THIS->t, Rogue_literal_strings[257], false ))))) );
    RogueCmdList__add__CmdList( ((RogueCmdList*)THIS->statements), ((RogueCmdList*)(insert_label_1->statements)) );
    RogueCmdList__add__CmdList( ((RogueCmdList*)THIS->statements), ((RogueCmdList*)(append_label_2->statements)) );
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->statements), ((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( THIS, THIS->t, Rogue_literal_strings[259], false ))))) );
  }
}

void RogueMethod__convert_to_task( RogueClassMethod* THIS )
{
  RogueClassType* task_type_0 = (((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), THIS->type_context->name ))), Rogue_literal_strings[351] ))), THIS->name ))), Rogue_literal_strings[352] ))), ((RogueInteger__to_String( ((RogueProgram__next_unique_integer( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))) ))) ))) ))) ))));
  RogueAttributes__add__Integer( task_type_0->attributes, 0 );
  RogueTypeList__add__Type( task_type_0->base_types, THIS->_return_type );
  RogueClassMethod* m_init_1 = (((RogueType__add_method__Token_String( task_type_0, THIS->t, Rogue_literal_strings[285] ))));
  RogueMethod__add_parameter__Token_String_Type( m_init_1, THIS->t, Rogue_literal_strings[353], ((RogueClassType*)(NULL)) );
  {
    RogueLocalList* _auto_340_9 = (THIS->parameters);
    RogueInteger _auto_341_10 = (0);
    for (;_auto_341_10 < _auto_340_9->count;++_auto_341_10)
    {
      RogueClassLocal* p_11 = (((RogueClassLocal*)(_auto_340_9->data->objects[_auto_341_10])));
      RogueMethod__add_parameter__Token_String_Type( m_init_1, THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), p_11->name ))), Rogue_literal_strings[354] ))), ((RogueInteger__to_String( p_11->index ))) ))) ))), ((RogueClassType*)(NULL)) );
    }
  }
  RogueClassMethod* m_update_2 = (((RogueType__add_method__Token_String( task_type_0, THIS->t, Rogue_literal_strings[355] ))));
  m_update_2->_return_type = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical;
  RogueCmdList__add__Cmd( ((RogueCmdList*)m_update_2->statements), ((RogueClassCmd*)(((RogueCmdGenericLoop__init__Token_Integer_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)ROGUE_CREATE_OBJECT(CmdGenericLoop)), THIS->t, 8, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, Rogue_literal_strings[356], ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))) ))))), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))))) );
  RogueCmdList__add__Cmd( ((RogueCmdList*)m_update_2->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), THIS->t, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareNE*)ROGUE_CREATE_OBJECT(CmdCompareNE))), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, Rogue_literal_strings[357] ))))), ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, -1 ))))) ))))) ))))) );
  RogueClassMethod* m_execute_3 = (((RogueType__add_method__Token_String( task_type_0, THIS->t, Rogue_literal_strings[356] ))));
  m_execute_3->_return_type = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical;
  task_type_0->defined = true;
  RogueString* m_name_4 = (((RogueString__operatorPLUS__String( Rogue_literal_strings[358], ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))) ))));
  RogueClassMethod* m_temp_5 = (((RogueMethod__init__Token_Type_String( ((RogueClassMethod*)ROGUE_CREATE_OBJECT(Method)), THIS->t, THIS->type_context, m_name_4 ))));
  m_temp_5->_return_type = THIS->_task_result_type;
  RogueAttributes__add__Integer( m_temp_5->attributes, 131072 );
  m_temp_5->parameters = THIS->parameters;
  m_temp_5->locals = THIS->locals;
  m_temp_5->statements = THIS->statements;
  RogueMethod__organize__Logical( m_temp_5, false );
  RogueMethod__resolve( m_temp_5 );
  THIS->locals = ((RogueLocalList__init( ((RogueLocalList*)ROGUE_CREATE_OBJECT(LocalList)) )));
  THIS->parameters = ((RogueLocalList__init( ((RogueLocalList*)ROGUE_CREATE_OBJECT(LocalList)) )));
  {
    RogueLocalList* _auto_358_12 = (m_temp_5->locals);
    RogueInteger _auto_359_13 = (0);
    for (;_auto_359_13 < _auto_358_12->count;++_auto_359_13)
    {
      RogueClassLocal* v_14 = (((RogueClassLocal*)(_auto_358_12->data->objects[_auto_359_13])));
      if (v_14->index < m_temp_5->parameters->count)
      {
        RogueMethod__add_parameter__Token_String_Type( THIS, v_14->t, v_14->name, v_14->_type );
      }
    }
  }
  THIS->statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
  RogueClassCmdArgs* args_6 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))));
  RogueCmdList__add__Cmd( ((RogueCmdList*)args_6), ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)((RogueClassCmdLiteralThis*)ROGUE_CREATE_OBJECT(CmdLiteralThis))), THIS->t, THIS->type_context ))))) );
  {
    RogueLocalList* _auto_360_15 = (m_temp_5->parameters);
    RogueInteger _auto_361_16 = (0);
    for (;_auto_361_16 < _auto_360_15->count;++_auto_361_16)
    {
      RogueClassLocal* p_17 = (((RogueClassLocal*)(_auto_360_15->data->objects[_auto_361_16])));
      RogueCmdList__add__Cmd( ((RogueCmdList*)args_6), ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, p_17->name ))))) );
    }
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, task_type_0->name, args_6 ))))) ))))) );
  {
    RogueLocalList* _auto_362_18 = (m_temp_5->locals);
    RogueInteger _auto_363_19 = (0);
    for (;_auto_363_19 < _auto_362_18->count;++_auto_363_19)
    {
      RogueClassLocal* v_20 = (((RogueClassLocal*)(_auto_362_18->data->objects[_auto_363_19])));
      RogueString* p_name_7 = (((RogueString__operatorPLUS__Integer( ((RogueString__operatorPLUS__String( v_20->name, Rogue_literal_strings[354] ))), v_20->index ))));
      RogueType__add_property__Token_String_Type_Cmd( task_type_0, v_20->t, p_name_7, v_20->_type, ((RogueClassCmd*)(NULL)) );
    }
  }
  RogueClassTaskArgs* task_args_8 = (((RogueTaskArgs__init__Type_Method_Type_Method( ((RogueClassTaskArgs*)ROGUE_CREATE_OBJECT(TaskArgs)), task_type_0, m_execute_3, THIS->type_context, THIS ))));
  task_args_8->context_property = ((RogueType__add_property__Token_String_Type_Cmd( task_type_0, THIS->t, Rogue_literal_strings[353], THIS->type_context, ((RogueClassCmd*)(NULL)) )));
  task_args_8->ip_property = ((RogueType__add_property__Token_String_Type_Cmd( task_type_0, THIS->t, Rogue_literal_strings[357], ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer, ((RogueClassCmd*)(NULL)) )));
  {
    RogueClassCmdStatementList* _auto_368_21 = (m_temp_5->statements);
    RogueInteger _auto_369_22 = (0);
    for (;_auto_369_22 < _auto_368_21->count;++_auto_369_22)
    {
      RogueClassCmd* statement_23 = (((RogueClassCmd*)(_auto_368_21->data->objects[_auto_369_22])));
      statement_23 = ((RogueClassCmd*)(call_ROGUEM44( 5, (RogueClassCmd*)(statement_23), ((RogueClassCloneArgs*)(task_args_8)) )));
      if (!!(statement_23))
      {
        RogueTaskArgs__add__Cmd( task_args_8, statement_23 );
      }
    }
  }
  if (task_args_8->cmd_task_control->current_section->statements->count == 0)
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)task_args_8->cmd_task_control->current_section->statements), ((RogueTaskArgs__create_return__Token_Cmd( task_args_8, THIS->t, ((RogueClassCmd*)(NULL)) ))) );
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)m_execute_3->statements), ((RogueClassCmd*)(task_args_8->cmd_task_control)) );
  RogueType__organize( task_type_0 );
}

RogueClassMethod* RogueMethod__set_incorporated( RogueClassMethod* THIS )
{
  RogueAttributes__add__Integer( THIS->attributes, 8192 );
  return (RogueClassMethod*)(THIS);
}

RogueClassMethod* RogueMethod__set_type_context__Type( RogueClassMethod* THIS, RogueClassType* _auto_62_0 )
{
  THIS->type_context = _auto_62_0;
  return (RogueClassMethod*)(THIS);
}

void RogueMethod__trace_used_code( RogueClassMethod* THIS )
{
  if (THIS->is_used)
  {
    return;
  }
  THIS->is_used = true;
  RogueType__trace_used_code( THIS->type_context );
  {
    RogueLocalList* _auto_372_0 = (THIS->parameters);
    RogueInteger _auto_373_1 = (0);
    for (;_auto_373_1 < _auto_372_0->count;++_auto_373_1)
    {
      RogueClassLocal* param_2 = (((RogueClassLocal*)(_auto_372_0->data->objects[_auto_373_1])));
      RogueType__trace_used_code( param_2->_type );
    }
  }
  if (!!(THIS->_return_type))
  {
    RogueType__trace_used_code( THIS->_return_type );
  }
  RogueCmdStatementList__trace_used_code( THIS->statements );
}

void RogueMethod__assign_cpp_name( RogueClassMethod* THIS )
{
  if (!!(THIS->cpp_name))
  {
    return;
  }
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( buffer_0, THIS->type_context->name ))), Rogue_literal_strings[351] );
  RogueStringBuilder__print__String( buffer_0, THIS->name );
  if (!!(THIS->parameters->count))
  {
    RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[354] );
    {
      RogueLocalList* _auto_374_1 = (THIS->parameters);
      RogueInteger _auto_375_2 = (0);
      for (;_auto_375_2 < _auto_374_1->count;++_auto_375_2)
      {
        RogueClassLocal* param_3 = (((RogueClassLocal*)(_auto_374_1->data->objects[_auto_375_2])));
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[354] );
        RogueStringBuilder__print__String( buffer_0, param_3->_type->cpp_name );
      }
    }
  }
  THIS->cpp_name = ((RogueString__operatorPLUS__String( Rogue_literal_strings[16], ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ((RogueStringBuilder__to_String( buffer_0 ))) ))) )));
}

void RogueMethod__print_prototype__CPPWriter( RogueClassMethod* THIS, RogueClassCPPWriter* writer_0 )
{
  if (((RogueMethod__omit_output( THIS ))))
  {
    return;
  }
  RogueMethod__print_signature__CPPWriter( THIS, writer_0 );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[184] );
}

void RogueMethod__print_signature__CPPWriter( RogueClassMethod* THIS, RogueClassCPPWriter* writer_0 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, THIS->_return_type ))), Rogue_literal_strings[255] ))), THIS->cpp_name );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[176] );
  RogueLogical first_1 = (true);
  if (!(((RogueMethod__is_routine( THIS )))))
  {
    first_1 = ((RogueLogical)false);
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[255] );
    if (((RogueType__is_aspect( THIS->type_context ))))
    {
      RogueCPPWriter__print__Type( writer_0, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object );
    }
    else
    {
      RogueCPPWriter__print__Type( writer_0, THIS->type_context );
    }
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[433] );
  }
  if (!!(THIS->parameters->count))
  {
    {
      RogueLocalList* _auto_376_2 = (THIS->parameters);
      RogueInteger _auto_377_3 = (0);
      for (;_auto_377_3 < _auto_376_2->count;++_auto_377_3)
      {
        RogueClassLocal* param_4 = (((RogueClassLocal*)(_auto_376_2->data->objects[_auto_377_3])));
        if (first_1)
        {
          RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[255] );
          first_1 = ((RogueLogical)false);
        }
        else
        {
          RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[405] );
        }
        RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, param_4->_type ))), Rogue_literal_strings[255] ))), ((RogueLocal__cpp_name( param_4 ))) );
      }
    }
  }
  if (!(first_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[255] );
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] );
}

void RogueMethod__print_definition__CPPWriter( RogueClassMethod* THIS, RogueClassCPPWriter* writer_0 )
{
  if (((RogueMethod__omit_output( THIS ))))
  {
    return;
  }
  RogueMethod__print_signature__CPPWriter( THIS, writer_0 );
  RogueCPPWriter__println( writer_0 );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[174] );
  writer_0->indent += 2;
  if (((RogueType__is_aspect( THIS->type_context ))))
  {
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[507] );
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[174] );
    writer_0->indent += 2;
    if (!!(THIS->incorporating_classes))
    {
      {
        RogueTypeList* _auto_378_2 = (THIS->incorporating_classes);
        RogueInteger _auto_379_3 = (0);
        for (;_auto_379_3 < _auto_378_2->count;++_auto_379_3)
        {
          RogueClassType* ic_4 = (((RogueClassType*)(_auto_378_2->data->objects[_auto_379_3])));
          if (ic_4->is_used)
          {
            RogueClassMethod* m_1 = (((RogueType__find_method__String( ic_4, THIS->signature ))));
            if (m_1->is_used)
            {
              RogueCPPWriter__println__String( ((RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[508] ))), ic_4->index ))), Rogue_literal_strings[155] );
              if (!!(THIS->_return_type))
              {
                RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[509] );
              }
              else
              {
                RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[449] );
              }
              RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, m_1->cpp_name ))), Rogue_literal_strings[510] ))), m_1->type_context ))), Rogue_literal_strings[511] );
              {
                RogueLocalList* _auto_380_5 = (THIS->parameters);
                RogueInteger _auto_381_6 = (0);
                for (;_auto_381_6 < _auto_380_5->count;++_auto_381_6)
                {
                  RogueClassLocal* param_7 = (((RogueClassLocal*)(_auto_380_5->data->objects[_auto_381_6])));
                  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[405] ))), ((RogueLocal__cpp_name( param_7 ))) );
                }
              }
              RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[454] );
            }
          }
        }
      }
    }
    if (!!(THIS->_return_type))
    {
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[512] );
      RogueCPPWriter__println__String( ((RogueCPPWriter__print_default_value__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[509] ))), THIS->_return_type ))), Rogue_literal_strings[184] );
    }
    writer_0->indent -= 2;
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[97] );
  }
  else
  {
    RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, false );
  }
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[97] );
  RogueCPPWriter__println( writer_0 );
}

RogueClassMethod* RogueMethod__init_object( RogueClassMethod* THIS )
{
  THIS->attributes = ((RogueClassAttributes*)ROGUE_CREATE_OBJECT(Attributes));
  THIS->parameters = ((RogueLocalList__init( ((RogueLocalList*)ROGUE_CREATE_OBJECT(LocalList)) )));
  THIS->locals = ((RogueLocalList__init( ((RogueLocalList*)ROGUE_CREATE_OBJECT(LocalList)) )));
  THIS->statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
  THIS->overriding_methods = ((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) )));
  THIS->label_list = ((RogueCmdLabelList__init( ((RogueCmdLabelList*)ROGUE_CREATE_OBJECT(CmdLabelList)) )));
  THIS->label_lookup = ((RogueString_CmdLabelTable__init( ((RogueClassString_CmdLabelTable*)ROGUE_CREATE_OBJECT(String_CmdLabelTable)) )));
  return (RogueClassMethod*)(THIS);
}

RogueString* RogueString_MethodListTable__to_String( RogueClassString_MethodListTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_MethodListTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_MethodListTable__type_name( RogueClassString_MethodListTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[546]);
}

RogueClassString_MethodListTable* RogueString_MethodListTable__init( RogueClassString_MethodListTable* THIS )
{
  RogueString_MethodListTable__init__Integer( THIS, 16 );
  return (RogueClassString_MethodListTable*)(THIS);
}

RogueClassString_MethodListTable* RogueString_MethodListTable__init__Integer( RogueClassString_MethodListTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_MethodListTableEntryList__init__Integer_String_MethodListTableEntry( ((RogueTableEntry_of_String_MethodListList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_MethodListList)), bin_count_0, ((RogueClassString_MethodListTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_MethodListTable*)(THIS);
}

void RogueString_MethodListTable__clear( RogueClassString_MethodListTable* THIS )
{
  {
    RogueTableEntry_of_String_MethodListList* _auto_385_0 = (THIS->bins);
    RogueInteger i_1 = (0);
    for (;i_1 < _auto_385_0->count;++i_1)
    {
      THIS->bins->data->objects[i_1] = ((RogueClassString_MethodListTableEntry*)(NULL));
    }
  }
  RogueStringList__clear( THIS->keys );
}

RogueClassString_MethodListTableEntry* RogueString_MethodListTable__find__String( RogueClassString_MethodListTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_MethodListTableEntry* entry_2 = (((RogueClassString_MethodListTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_MethodListTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_MethodListTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_MethodListTableEntry*)(((RogueClassString_MethodListTableEntry*)(NULL)));
}

RogueMethodList* RogueString_MethodListTable__get__String( RogueClassString_MethodListTable* THIS, RogueString* key_0 )
{
  RogueClassString_MethodListTableEntry* entry_1 = (((RogueString_MethodListTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueMethodList*)(entry_1->value);
  }
  else
  {
    RogueMethodList* default_value_2 = 0;
    return (RogueMethodList*)(default_value_2);
  }
}

void RogueString_MethodListTable__set__String_MethodList( RogueClassString_MethodListTable* THIS, RogueString* key_0, RogueMethodList* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_MethodListTableEntry* entry_4 = (((RogueClassString_MethodListTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_MethodListTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_MethodListTableEntry*)((RogueString_MethodListTableEntry__init__String_MethodList_Integer( ((RogueClassString_MethodListTableEntry*)ROGUE_CREATE_OBJECT(String_MethodListTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_MethodListTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_MethodListTable__print_to__StringBuilder( RogueClassString_MethodListTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_MethodListTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_MethodListTable* RogueString_MethodListTable__init_object( RogueClassString_MethodListTable* THIS )
{
  return (RogueClassString_MethodListTable*)(THIS);
}

RogueString* RogueTypeList__to_String( RogueTypeList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTypeList* _auto_386_2 = (THIS);
    RogueInteger _auto_387_3 = (0);
    for (;_auto_387_3 < _auto_386_2->count;++_auto_387_3)
    {
      RogueClassType* value_4 = (((RogueClassType*)(_auto_386_2->data->objects[_auto_387_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ((RogueType__to_String( value_4 ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueTypeList__type_name( RogueTypeList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[925]);
}

RogueTypeList* RogueTypeList__init_object( RogueTypeList* THIS )
{
  return (RogueTypeList*)(THIS);
}

RogueTypeList* RogueTypeList__init( RogueTypeList* THIS )
{
  RogueTypeList__init__Integer( THIS, 10 );
  return (RogueTypeList*)(THIS);
}

RogueTypeList* RogueTypeList__init__Integer( RogueTypeList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassType*), true );
  return (RogueTypeList*)(THIS);
}

RogueTypeList* RogueTypeList__add__Type( RogueTypeList* THIS, RogueClassType* value_0 )
{
  ((RogueTypeList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTypeList*)(THIS);
}

RogueInteger RogueTypeList__capacity( RogueTypeList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTypeList* RogueTypeList__clear( RogueTypeList* THIS )
{
  THIS->count = 0;
  return (RogueTypeList*)(THIS);
}

void RogueTypeList__discard_from__Integer( RogueTypeList* THIS, RogueInteger index_0 )
{
  RogueClassType* zero_value_1 = 0;
  RogueInteger c_2 = (THIS->count);
  while (c_2 > index_0)
  {
    --c_2;
    THIS->data->objects[c_2] = zero_value_1;
  }
  THIS->count = c_2;
}

RogueTypeList* RogueTypeList__insert__Type_Integer( RogueTypeList* THIS, RogueClassType* value_0, RogueInteger before_index_1 )
{
  if (before_index_1 < 0)
  {
    before_index_1 = ((RogueInteger)0);
  }
  if (before_index_1 >= THIS->count)
  {
    return (RogueTypeList*)(((RogueTypeList__add__Type( THIS, value_0 ))));
  }
  else
  {
    RogueTypeList__add__Type( THIS, ((RogueClassType*)(THIS->data->objects[0])) );
    THIS->data->set((before_index_1 + 1),((RogueArray*)(THIS->data)),before_index_1,(THIS->count - 2));
    THIS->data->objects[before_index_1] = value_0;
  }
  return (RogueTypeList*)(THIS);
}

RogueOptionalInteger RogueTypeList__locate__Type( RogueTypeList* THIS, RogueClassType* value_0 )
{
  {
    RogueTypeList* _auto_394_1 = (THIS);
    RogueInteger i_2 = (0);
    for (;i_2 < _auto_394_1->count;++i_2)
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)value_0), ((RogueObject*)(((RogueClassType*)(THIS->data->objects[i_2])))) ))))
      {
        return (RogueOptionalInteger)(RogueOptionalInteger( i_2 ));
      }
    }
  }
  return (RogueOptionalInteger)(RogueOptionalInteger());
}

RogueTypeList* RogueTypeList__reserve__Integer( RogueTypeList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassType*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueTypeList__capacity( THIS ))) + ((RogueTypeList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassType*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTypeList*)(THIS);
}

RogueString* RogueType__to_String( RogueClassType* THIS )
{
  return (RogueString*)(THIS->name);
}

RogueString* RogueType__type_name( RogueClassType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[547]);
}

RogueClassType* RogueType__init__Token_String( RogueClassType* THIS, RogueClassToken* _auto_64_0, RogueString* _auto_65_1 )
{
  THIS->name = _auto_65_1;
  THIS->t = _auto_64_0;
  return (RogueClassType*)(THIS);
}

RogueClassMethod* RogueType__add_method__Token_String( RogueClassType* THIS, RogueClassToken* m_t_0, RogueString* m_name_1 )
{
  return (RogueClassMethod*)(((RogueType__add_method__Method( THIS, ((RogueMethod__init__Token_Type_String( ((RogueClassMethod*)ROGUE_CREATE_OBJECT(Method)), m_t_0, THIS, m_name_1 ))) ))));
}

RogueClassMethod* RogueType__add_method__Method( RogueClassType* THIS, RogueClassMethod* m_0 )
{
  RogueMethodList__add__Method( THIS->method_list, m_0 );
  RogueMethodList* list_1 = (((RogueString_MethodListTable__get__String( THIS->method_lookup_by_name, m_0->name ))));
  if (!(!!(list_1)))
  {
    list_1 = ((RogueMethodList*)((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) ))));
    RogueString_MethodListTable__set__String_MethodList( THIS->method_lookup_by_name, m_0->name, list_1 );
  }
  RogueMethodList__add__Method( list_1, m_0 );
  return (RogueClassMethod*)(m_0);
}

RogueClassMethod* RogueType__add_routine__Token_String( RogueClassType* THIS, RogueClassToken* r_t_0, RogueString* r_name_1 )
{
  RogueClassMethod* r_2 = (((RogueMethod__init__Token_Type_String( ((RogueClassMethod*)ROGUE_CREATE_OBJECT(Method)), r_t_0, THIS, r_name_1 ))));
  RogueAttributes__add__Integer( r_2->attributes, 512 );
  RogueMethodList__add__Method( THIS->routine_list, r_2 );
  RogueMethodList* list_3 = (((RogueString_MethodListTable__get__String( THIS->routine_lookup_by_name, r_name_1 ))));
  if (!(!!(list_3)))
  {
    list_3 = ((RogueMethodList*)((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) ))));
    RogueString_MethodListTable__set__String_MethodList( THIS->routine_lookup_by_name, r_name_1, list_3 );
  }
  RogueMethodList__add__Method( list_3, r_2 );
  return (RogueClassMethod*)(r_2);
}

RogueClassProperty* RogueType__add_global__Token_String( RogueClassType* THIS, RogueClassToken* s_t_0, RogueString* s_name_1 )
{
  RogueClassProperty* s_2 = (((RogueProperty__init__Token_Type_String_Type_Cmd( ((RogueClassProperty*)ROGUE_CREATE_OBJECT(Property)), s_t_0, THIS, s_name_1, ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
  RoguePropertyList__add__Property( THIS->global_list, s_2 );
  RogueString_PropertyTable__set__String_Property( THIS->global_lookup, s_name_1, s_2 );
  return (RogueClassProperty*)(s_2);
}

RogueClassProperty* RogueType__add_property__Token_String_Type_Cmd( RogueClassType* THIS, RogueClassToken* p_t_0, RogueString* p_name_1, RogueClassType* p_type_2, RogueClassCmd* initial_value_3 )
{
  return (RogueClassProperty*)(((RogueType__add_property__Property( THIS, ((RogueProperty__init__Token_Type_String_Type_Cmd( ((RogueClassProperty*)ROGUE_CREATE_OBJECT(Property)), p_t_0, THIS, p_name_1, p_type_2, initial_value_3 ))) ))));
}

RogueClassProperty* RogueType__add_property__Property( RogueClassType* THIS, RogueClassProperty* p_0 )
{
  RoguePropertyList__add__Property( THIS->property_list, p_0 );
  RogueString_PropertyTable__set__String_Property( THIS->property_lookup, p_0->name, p_0 );
  return (RogueClassProperty*)(p_0);
}

RogueClassCmd* RogueType__create_default_value__Token( RogueClassType* THIS, RogueClassToken* _t_0 )
{
  if (((RogueType__is_reference( THIS ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralNull__init__Token( ((RogueClassCmdLiteralNull*)ROGUE_CREATE_OBJECT(CmdLiteralNull)), _t_0 ))))));
  }
  if (((RogueType__is_compound( THIS ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateCompound__init__Token_Type_CmdArgs( ((RogueClassCmdCreateCompound*)ROGUE_CREATE_OBJECT(CmdCreateCompound)), _t_0, THIS, ((RogueClassCmdArgs*)(NULL)) ))))));
  }
  if (THIS == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), _t_0, false ))))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), _t_0, 0 ))))));
}

RogueClassMethod* RogueType__find_method__String( RogueClassType* THIS, RogueString* signature_0 )
{
  RogueClassMethod* m_1 = (((RogueString_MethodTable__get__String( THIS->method_lookup_by_signature, signature_0 ))));
  if (!!(m_1))
  {
    return (RogueClassMethod*)(m_1);
  }
  return (RogueClassMethod*)(((RogueType__find_routine__String( THIS, signature_0 ))));
}

RogueClassMethod* RogueType__find_routine__String( RogueClassType* THIS, RogueString* signature_0 )
{
  RogueClassMethod* m_1 = (((RogueString_MethodTable__get__String( THIS->routine_lookup_by_signature, signature_0 ))));
  if (!!(m_1))
  {
    return (RogueClassMethod*)(m_1);
  }
  return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
}

RogueClassProperty* RogueType__find_property__String( RogueClassType* THIS, RogueString* p_name_0 )
{
  if (p_name_0->characters[0] == (RogueCharacter)'@')
  {
    p_name_0 = ((RogueString*)((RogueString__rightmost__Integer( p_name_0, -1 ))));
  }
  return (RogueClassProperty*)(((RogueString_PropertyTable__get__String( THIS->property_lookup, p_name_0 ))));
}

RogueClassProperty* RogueType__find_global__String( RogueClassType* THIS, RogueString* s_name_0 )
{
  if (s_name_0->characters[0] == (RogueCharacter)'@')
  {
    s_name_0 = ((RogueString*)((RogueString__rightmost__Integer( s_name_0, -1 ))));
  }
  return (RogueClassProperty*)(((RogueString_PropertyTable__get__String( THIS->global_lookup, s_name_0 ))));
}

RogueLogical RogueType__has_method_named__String( RogueClassType* THIS, RogueString* m_name_0 )
{
  RogueMethodList* list_1 = (((RogueString_MethodListTable__get__String( THIS->method_lookup_by_name, m_name_0 ))));
  return (RogueLogical)((!!(list_1) && !!(list_1->count)));
}

RogueLogical RogueType__has_routine_named__String( RogueClassType* THIS, RogueString* r_name_0 )
{
  RogueMethodList* list_1 = (((RogueString_MethodListTable__get__String( THIS->routine_lookup_by_name, r_name_0 ))));
  return (RogueLogical)((!!(list_1) && !!(list_1->count)));
}

RogueLogical RogueType__instance_of__Type( RogueClassType* THIS, RogueClassType* ancestor_type_0 )
{
  if (THIS == ancestor_type_0)
  {
    return (RogueLogical)(true);
  }
  if ((THIS == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_null && ((RogueType__is_reference( ancestor_type_0 )))))
  {
    return (RogueLogical)(true);
  }
  {
    RogueTypeList* _auto_402_1 = (THIS->base_types);
    RogueInteger _auto_403_2 = (0);
    for (;_auto_403_2 < _auto_402_1->count;++_auto_403_2)
    {
      RogueClassType* base_type_3 = (((RogueClassType*)(_auto_402_1->data->objects[_auto_403_2])));
      if (((RogueType__instance_of__Type( base_type_3, ancestor_type_0 ))))
      {
        return (RogueLogical)(true);
      }
    }
  }
  return (RogueLogical)(false);
}

RogueLogical RogueType__is_compatible_with__Type( RogueClassType* THIS, RogueClassType* other_0 )
{
  if (THIS == other_0)
  {
    return (RogueLogical)(true);
  }
  if ((((RogueType__is_primitive( THIS ))) && ((RogueType__is_primitive( other_0 )))))
  {
    if ((THIS == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical ^ other_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical))
    {
      return (RogueLogical)(false);
    }
    return (RogueLogical)(true);
  }
  if ((other_0->is_optional && other_0->_element_type == THIS))
  {
    return (RogueLogical)(true);
  }
  return (RogueLogical)(((RogueType__instance_of__Type( THIS, other_0 ))));
}

RogueLogical RogueType__is_aspect( RogueClassType* THIS )
{
  return (RogueLogical)((THIS->attributes->flags & 7) == 2);
}

RogueLogical RogueType__is_class( RogueClassType* THIS )
{
  return (RogueLogical)((THIS->attributes->flags & 7) == 0);
}

RogueLogical RogueType__is_compound( RogueClassType* THIS )
{
  return (RogueLogical)((THIS->attributes->flags & 7) == 3);
}

RogueLogical RogueType__is_functional( RogueClassType* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 16)));
}

RogueLogical RogueType__is_native( RogueClassType* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 32)));
}

RogueLogical RogueType__is_primitive( RogueClassType* THIS )
{
  return (RogueLogical)((THIS->attributes->flags & 7) == 1);
}

RogueLogical RogueType__is_reference( RogueClassType* THIS )
{
  switch ((THIS->attributes->flags & 7))
  {
    case 0:
    case 2:
    {
      return (RogueLogical)(true);
      break;
    }
    default:
    {
      return (RogueLogical)(false);
    }
  }
}

RogueLogical RogueType__is_requisite( RogueClassType* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 32768)));
}

RogueLogical RogueType__is_singleton( RogueClassType* THIS )
{
  return (RogueLogical)(!!((THIS->attributes->flags & 1024)));
}

RogueClassType* RogueType__organize( RogueClassType* THIS )
{
  if (THIS->organized)
  {
    return (RogueClassType*)(THIS);
  }
  THIS->organized = true;
  THIS->index = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_list->count;
  RogueTypeList__add__Type( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_list, THIS );
  if (!(THIS->defined))
  {
    THIS->defined = true;
    RogueClassTemplate* template_0 = (((RogueProgram__find_template__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->name ))));
    if (!!(template_0))
    {
      RogueTemplate__instantiate__Type( template_0, THIS );
    }
    else
    {
      throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[309] ))), THIS->name ))), Rogue_literal_strings[13] ))) ))) )));
    }
  }
  {
    RogueTypeList* _auto_404_17 = (THIS->base_types);
    RogueInteger _auto_405_18 = (0);
    for (;_auto_405_18 < _auto_404_17->count;++_auto_405_18)
    {
      RogueClassType* base_type_19 = (((RogueClassType*)(_auto_404_17->data->objects[_auto_405_18])));
      RogueType__organize( base_type_19 );
      if (((RogueType__is_aspect( THIS ))))
      {
        if (!(((RogueType__is_aspect( base_type_19 )))))
        {
          throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[310] )));
        }
      }
      if (((RogueType__instance_of__Type( base_type_19, THIS ))))
      {
        throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[311] ))), ((RogueType__to_String( THIS ))) ))), Rogue_literal_strings[312] ))), ((RogueType__to_String( base_type_19 ))) ))), Rogue_literal_strings[313] ))), ((RogueType__to_String( base_type_19 ))) ))), Rogue_literal_strings[314] ))), ((RogueType__to_String( THIS ))) ))), Rogue_literal_strings[44] ))) ))) )));
      }
    }
  }
  if (((RogueType__is_class( THIS ))))
  {
    {
      RogueTypeList* _auto_406_20 = (THIS->base_types);
      RogueInteger _auto_407_21 = (0);
      for (;_auto_407_21 < _auto_406_20->count;++_auto_407_21)
      {
        RogueClassType* base_type_22 = (((RogueClassType*)(_auto_406_20->data->objects[_auto_407_21])));
        if (((RogueType__is_class( base_type_22 ))))
        {
          if ((!!(THIS->base_class) && THIS->base_class != base_type_22))
          {
            throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[315] ))), THIS->name ))), Rogue_literal_strings[316] ))), ((RogueType__to_String( THIS->base_class ))) ))), Rogue_literal_strings[317] ))), ((RogueType__to_String( base_type_22 ))) ))), Rogue_literal_strings[318] ))) ))) )));
          }
          else
          {
            THIS->base_class = base_type_22;
          }
        }
      }
    }
    if (((!(!!(THIS->base_class)) && !(((RogueType__is_functional( THIS ))))) && THIS != ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object))
    {
      RogueType__organize( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object );
      THIS->base_class = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object;
      RogueTypeList__insert__Type_Integer( THIS->base_types, THIS->base_class, 0 );
    }
  }
  RogueTypeList__clear( THIS->flat_base_types );
  if (!!(THIS->base_class))
  {
    RogueType__collect_base_types__TypeList( THIS->base_class, THIS->flat_base_types );
  }
  {
    RogueTypeList* _auto_408_23 = (THIS->base_types);
    RogueInteger _auto_409_24 = (0);
    for (;_auto_409_24 < _auto_408_23->count;++_auto_409_24)
    {
      RogueClassType* base_type_25 = (((RogueClassType*)(_auto_408_23->data->objects[_auto_409_24])));
      RogueType__collect_base_types__TypeList( base_type_25, THIS->flat_base_types );
    }
  }
  {
    RogueTypeList* _auto_410_26 = (THIS->base_types);
    RogueInteger _auto_411_27 = (0);
    for (;_auto_411_27 < _auto_410_26->count;++_auto_411_27)
    {
      RogueClassType* base_type_28 = (((RogueClassType*)(_auto_410_26->data->objects[_auto_411_27])));
      RogueType__inherit_definitions__Type( THIS, base_type_28 );
    }
  }
  RoguePropertyList* full_property_list_1 = (((RoguePropertyList__init( ((RoguePropertyList*)ROGUE_CREATE_OBJECT(PropertyList)) ))));
  RogueString_PropertyTable__clear( THIS->property_lookup );
  RogueType__inherit_properties__PropertyList_String_PropertyTable( THIS, full_property_list_1, THIS->property_lookup );
  THIS->property_list = full_property_list_1;
  RogueClassMethod* m_type_name_2 = (((RogueType__add_method__Token_String( THIS, THIS->t, Rogue_literal_strings[326] ))));
  m_type_name_2->_return_type = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String;
  RogueCmdList__add__Cmd( ((RogueCmdList*)m_type_name_2->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), THIS->t, ((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Integer( ((RogueClassCmdLiteralString*)ROGUE_CREATE_OBJECT(CmdLiteralString)), THIS->t, THIS->name, 0 ))))) ))))) );
  {
    RogueMethodList* _auto_415_29 = (THIS->routine_list);
    RogueInteger _auto_416_30 = (0);
    for (;_auto_416_30 < _auto_415_29->count;++_auto_416_30)
    {
      RogueClassMethod* r_31 = (((RogueClassMethod*)(_auto_415_29->data->objects[_auto_416_30])));
      RogueMethod__organize__Logical( r_31, true );
    }
  }
  {
    RogueMethodList* _auto_417_32 = (THIS->method_list);
    RogueInteger _auto_418_33 = (0);
    for (;_auto_418_33 < _auto_417_32->count;++_auto_418_33)
    {
      RogueClassMethod* m_34 = (((RogueClassMethod*)(_auto_417_32->data->objects[_auto_418_33])));
      RogueMethod__organize__Logical( m_34, true );
    }
  }
  RogueMethodList* full_routine_list_3 = (((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) ))));
  RogueString_MethodTable__clear( THIS->routine_lookup_by_signature );
  RogueType__inherit_routines__MethodList_String_MethodTable( THIS, full_routine_list_3, THIS->routine_lookup_by_signature );
  THIS->routine_list = full_routine_list_3;
  RogueString_MethodListTable__clear( THIS->routine_lookup_by_name );
  {
    RogueMethodList* _auto_419_35 = (THIS->routine_list);
    RogueInteger _auto_420_36 = (0);
    for (;_auto_420_36 < _auto_419_35->count;++_auto_420_36)
    {
      RogueClassMethod* r_37 = (((RogueClassMethod*)(_auto_419_35->data->objects[_auto_420_36])));
      RogueMethodList* list_4 = (((RogueString_MethodListTable__get__String( THIS->routine_lookup_by_name, r_37->name ))));
      if (!(!!(list_4)))
      {
        list_4 = ((RogueMethodList*)((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) ))));
        RogueString_MethodListTable__set__String_MethodList( THIS->routine_lookup_by_name, r_37->name, list_4 );
      }
      RogueMethodList__add__Method( list_4, r_37 );
    }
  }
  RogueMethodList* full_method_list_5 = (((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) ))));
  RogueString_MethodTable__clear( THIS->method_lookup_by_signature );
  RogueType__inherit_methods__MethodList_String_MethodTable( THIS, full_method_list_5, THIS->method_lookup_by_signature );
  THIS->method_list = full_method_list_5;
  RogueString_MethodListTable__clear( THIS->method_lookup_by_name );
  {
    RogueMethodList* _auto_421_38 = (THIS->method_list);
    RogueInteger _auto_422_39 = (0);
    for (;_auto_422_39 < _auto_421_38->count;++_auto_422_39)
    {
      RogueClassMethod* m_40 = (((RogueClassMethod*)(_auto_421_38->data->objects[_auto_422_39])));
      RogueMethodList* list_6 = (((RogueString_MethodListTable__get__String( THIS->method_lookup_by_name, m_40->name ))));
      if (!(!!(list_6)))
      {
        list_6 = ((RogueMethodList*)((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) ))));
        RogueString_MethodListTable__set__String_MethodList( THIS->method_lookup_by_name, m_40->name, list_6 );
      }
      RogueMethodList__add__Method( list_6, m_40 );
    }
  }
  if ((!!(THIS->global_list->count) && !(((RogueType__is_native( THIS ))))))
  {
    RogueClassMethod* m_7 = (((RogueType__find_routine__String( THIS, Rogue_literal_strings[343] ))));
    if ((!(!!(m_7)) || m_7->type_context != THIS))
    {
      m_7 = ((RogueClassMethod*)((RogueMethod__organize__Logical( ((RogueType__add_routine__Token_String( THIS, THIS->t, Rogue_literal_strings[344] ))), true ))));
    }
    RogueAttributes__add__Integer( m_7->attributes, 32768 );
    RogueInteger i_8 = ((THIS->global_list->count - 1));
    while (i_8 >= 0)
    {
      RogueClassProperty* s_9 = (((RogueClassProperty*)(THIS->global_list->data->objects[i_8])));
      if (!!(s_9->initial_value))
      {
        RogueCmdList__insert__Cmd_Integer( ((RogueCmdList*)m_7->statements), ((RogueClassCmd*)(((RogueCmdWriteGlobal__init__Token_Property_Cmd( ((RogueClassCmdWriteGlobal*)ROGUE_CREATE_OBJECT(CmdWriteGlobal)), s_9->t, s_9, (call_ROGUEM44( 5, (RogueClassCmd*)(s_9->initial_value), ((RogueClassCloneArgs*)(NULL)) )) ))))), 0 );
      }
      --i_8;
    }
  }
  if ((((RogueType__is_class( THIS ))) && !(((RogueType__is_native( THIS ))))))
  {
    RogueClassMethod* m_10 = (((RogueType__find_method__String( THIS, Rogue_literal_strings[345] ))));
    RogueClassMethod* prior_m_11 = (m_10);
    if ((!(!!(m_10)) || m_10->type_context != THIS))
    {
      m_10 = ((RogueClassMethod*)((RogueMethod__organize__Logical( ((RogueType__add_method__Token_String( THIS, THIS->t, Rogue_literal_strings[346] ))), true ))));
      RogueAttributes__add__Integer( m_10->attributes, 32768 );
      if (!!(prior_m_11))
      {
        RogueAttributes__add__Integer( prior_m_11->attributes, 2048 );
        RogueAttributes__add__Integer( prior_m_11->attributes, 4096 );
        RogueAttributes__add__Integer( m_10->attributes, 2048 );
        RogueMethodList__remove__Method( THIS->method_list, m_10 );
        THIS->method_list->data->objects[((RogueMethodList__locate__Method( THIS->method_list, prior_m_11 ))).value] = m_10;
      }
    }
    m_10->_return_type = THIS;
    RogueCmdList__add__Cmd( ((RogueCmdList*)m_10->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), THIS->t, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)((RogueClassCmdLiteralThis*)ROGUE_CREATE_OBJECT(CmdLiteralThis))), THIS->t, THIS ))))) ))))) );
    RogueInteger i_12 = ((THIS->property_list->count - 1));
    while (i_12 >= 0)
    {
      RogueClassProperty* p_13 = (((RogueClassProperty*)(THIS->property_list->data->objects[i_12])));
      if (!!(p_13->initial_value))
      {
        RogueCmdList__insert__Cmd_Integer( ((RogueCmdList*)m_10->statements), ((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), p_13->t, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)((RogueClassCmdLiteralThis*)ROGUE_CREATE_OBJECT(CmdLiteralThis))), p_13->t, p_13->type_context ))))), p_13, (call_ROGUEM44( 5, (RogueClassCmd*)(p_13->initial_value), ((RogueClassCloneArgs*)(NULL)) )) ))))), 0 );
      }
      --i_12;
    }
  }
  if ((((RogueType__is_compound( THIS ))) || ((RogueType__is_primitive( THIS )))))
  {
    RogueClassMethod* m_14 = (((RogueType__find_method__String( THIS, Rogue_literal_strings[347] ))));
    if (!(!!(m_14)))
    {
      m_14 = ((RogueClassMethod*)((RogueMethod__organize__Logical( ((RogueType__add_method__Token_String( THIS, THIS->t, Rogue_literal_strings[348] ))), true ))));
    }
    m_14->_return_type = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String;
    RogueCmdList__add__Cmd( ((RogueCmdList*)m_14->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), THIS->t, ((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Integer( ((RogueClassCmdLiteralString*)ROGUE_CREATE_OBJECT(CmdLiteralString)), THIS->t, THIS->name, 0 ))))) ))))) );
  }
  if (THIS != ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_NativeArray)
  {
    THIS->is_array = ((RogueType__instance_of__Type( THIS, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_NativeArray )));
    if (THIS->is_array)
    {
      RogueClassType* cur_type_15 = (THIS);
      while (!(((RogueString__begins_with__String( cur_type_15->name, Rogue_literal_strings[350] )))))
      {
        cur_type_15 = ((RogueClassType*)cur_type_15->base_class);
        if (cur_type_15 == NULL)
        {
          throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[349] )));
        }
      }
      RogueString* element_type_name_16 = (((RogueString__before_last__String( ((RogueString__after_first__String( cur_type_15->name, Rogue_literal_strings[177] ))), Rogue_literal_strings[101] ))));
      THIS->_element_type = ((RogueType__organize( ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, element_type_name_16 ))) )));
    }
  }
  RogueType__index_and_move_inline_to_end__MethodList( THIS, THIS->routine_list );
  RogueType__index_and_move_inline_to_end__MethodList( THIS, THIS->method_list );
  return (RogueClassType*)(THIS);
}

void RogueType__collect_base_types__TypeList( RogueClassType* THIS, RogueTypeList* list_0 )
{
  if (((RogueTypeList__locate__Type( list_0, THIS ))).exists)
  {
    return;
  }
  RogueTypeList__add__Type( list_0, THIS );
  {
    RogueTypeList* _auto_430_1 = (THIS->base_types);
    RogueInteger _auto_431_2 = (0);
    for (;_auto_431_2 < _auto_430_1->count;++_auto_431_2)
    {
      RogueClassType* base_type_3 = (((RogueClassType*)(_auto_430_1->data->objects[_auto_431_2])));
      RogueType__collect_base_types__TypeList( base_type_3, list_0 );
    }
  }
}

void RogueType__cull_unused_methods( RogueClassType* THIS )
{
  if (THIS->culled)
  {
    return;
  }
  THIS->culled = true;
  {
    RogueTypeList* _auto_432_3 = (THIS->base_types);
    RogueInteger _auto_433_4 = (0);
    for (;_auto_433_4 < _auto_432_3->count;++_auto_433_4)
    {
      RogueClassType* base_type_5 = (((RogueClassType*)(_auto_432_3->data->objects[_auto_433_4])));
      RogueType__cull_unused_methods( base_type_5 );
    }
  }
  RogueMethodList* list_0 = (THIS->method_list);
  RogueInteger i_1 = ((list_0->count - 1));
  while (i_1 >= 0)
  {
    RogueClassMethod* m_2 = (((RogueClassMethod*)(list_0->data->objects[i_1])));
    if ((((RogueMethod__is_macro( m_2 ))) || !(m_2->is_used)))
    {
      RogueMethodList__remove__Method( list_0, m_2 );
    }
    --i_1;
  }
  i_1 = ((RogueInteger)0);
  {
    RogueMethodList* _auto_434_6 = (list_0);
    RogueInteger _auto_435_7 = (0);
    for (;_auto_435_7 < _auto_434_6->count;++_auto_435_7)
    {
      RogueClassMethod* m_8 = (((RogueClassMethod*)(_auto_434_6->data->objects[_auto_435_7])));
      m_8->index = i_1;
      ++i_1;
    }
  }
}

RogueLogical RogueType__has_global_references( RogueClassType* THIS )
{
  {
    RoguePropertyList* _auto_436_0 = (THIS->global_list);
    RogueInteger _auto_437_1 = (0);
    for (;_auto_437_1 < _auto_436_0->count;++_auto_437_1)
    {
      RogueClassProperty* g_2 = (((RogueClassProperty*)(_auto_436_0->data->objects[_auto_437_1])));
      if (((RogueType__is_reference( g_2->_type ))))
      {
        return (RogueLogical)(true);
      }
      if ((((RogueType__is_compound( g_2->_type ))) && ((RogueType__has_object_references( g_2->_type )))))
      {
        return (RogueLogical)(true);
      }
    }
  }
  return (RogueLogical)(false);
}

RogueLogical RogueType__has_object_references( RogueClassType* THIS )
{
  {
    RoguePropertyList* _auto_438_0 = (THIS->property_list);
    RogueInteger _auto_439_1 = (0);
    for (;_auto_439_1 < _auto_438_0->count;++_auto_439_1)
    {
      RogueClassProperty* p_2 = (((RogueClassProperty*)(_auto_438_0->data->objects[_auto_439_1])));
      if (((RogueType__is_reference( p_2->_type ))))
      {
        return (RogueLogical)(true);
      }
      if ((((RogueType__is_compound( p_2->_type ))) && ((RogueType__has_object_references( p_2->_type )))))
      {
        return (RogueLogical)(true);
      }
    }
  }
  return (RogueLogical)((THIS->is_array && ((RogueType__has_object_references( THIS->_element_type )))));
}

RogueLogical RogueType__is_reference_array( RogueClassType* THIS )
{
  return (RogueLogical)((THIS->is_array && ((RogueType__is_reference( THIS->_element_type )))));
}

void RogueType__inherit_definitions__Type( RogueClassType* THIS, RogueClassType* from_type_0 )
{
  {
    RogueStringList* _auto_440_1 = (from_type_0->definition_list);
    RogueInteger _auto_441_2 = (0);
    for (;_auto_441_2 < _auto_440_1->count;++_auto_441_2)
    {
      RogueString* def_name_3 = (((RogueString*)(_auto_440_1->data->objects[_auto_441_2])));
      if (!(((RogueString_CmdTable__contains__String( THIS->definition_lookup, def_name_3 )))))
      {
        RogueStringList__add__String( THIS->definition_list, def_name_3 );
        RogueString_CmdTable__set__String_Cmd( THIS->definition_lookup, def_name_3, ((RogueString_CmdTable__get__String( from_type_0->definition_lookup, def_name_3 ))) );
      }
    }
  }
  {
    RogueTypeList* _auto_442_4 = (from_type_0->base_types);
    RogueInteger _auto_443_5 = (0);
    for (;_auto_443_5 < _auto_442_4->count;++_auto_443_5)
    {
      RogueClassType* base_type_6 = (((RogueClassType*)(_auto_442_4->data->objects[_auto_443_5])));
      RogueType__inherit_definitions__Type( THIS, base_type_6 );
    }
  }
}

void RogueType__inherit_properties__PropertyList_String_PropertyTable( RogueClassType* THIS, RoguePropertyList* list_0, RogueClassString_PropertyTable* lookup_1 )
{
  {
    RogueTypeList* _auto_444_2 = (THIS->base_types);
    RogueInteger _auto_445_3 = (0);
    for (;_auto_445_3 < _auto_444_2->count;++_auto_445_3)
    {
      RogueClassType* base_type_4 = (((RogueClassType*)(_auto_444_2->data->objects[_auto_445_3])));
      {
        RoguePropertyList* _auto_446_5 = (base_type_4->property_list);
        RogueInteger _auto_447_6 = (0);
        for (;_auto_447_6 < _auto_446_5->count;++_auto_447_6)
        {
          RogueClassProperty* base_p_7 = (((RogueClassProperty*)(_auto_446_5->data->objects[_auto_447_6])));
          RogueType__inherit_property__Property_PropertyList_String_PropertyTable( THIS, base_p_7, list_0, lookup_1 );
        }
      }
    }
  }
  {
    RoguePropertyList* _auto_448_8 = (THIS->property_list);
    RogueInteger _auto_449_9 = (0);
    for (;_auto_449_9 < _auto_448_8->count;++_auto_449_9)
    {
      RogueClassProperty* p_10 = (((RogueClassProperty*)(_auto_448_8->data->objects[_auto_449_9])));
      RogueType__inherit_property__Property_PropertyList_String_PropertyTable( THIS, p_10, list_0, lookup_1 );
    }
  }
}

void RogueType__inherit_property__Property_PropertyList_String_PropertyTable( RogueClassType* THIS, RogueClassProperty* p_0, RoguePropertyList* list_1, RogueClassString_PropertyTable* lookup_2 )
{
  RogueClassProperty* existing_p_3 = (((RogueString_PropertyTable__get__String( lookup_2, p_0->name ))));
  if (!!(existing_p_3))
  {
    RogueInteger i_4 = (((RoguePropertyList__locate__Property( list_1, existing_p_3 ))).value);
    if (p_0->type_context == existing_p_3->type_context)
    {
      throw ((RogueToken__error__String( p_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[319] ))), p_0->name ))), Rogue_literal_strings[320] ))) ))) )));
    }
    else if (p_0->_type == existing_p_3->_type)
    {
      if (!!(p_0->initial_value))
      {
        if (!!(existing_p_3->initial_value))
        {
          if (((RogueType__instance_of__Type( p_0->_type, existing_p_3->_type ))))
          {
            if (((RogueType__is_aspect( p_0->type_context ))))
            {
              p_0 = ((RogueClassProperty*)((RogueProperty__set_type_context__Type( ((RogueProperty__clone( p_0 ))), THIS ))));
            }
            list_1->data->objects[i_4] = p_0;
            RogueString_PropertyTable__set__String_Property( lookup_2, p_0->name, p_0 );
          }
          else
          {
            throw ((RogueToken__error__String( p_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[321] ))), p_0->name ))), Rogue_literal_strings[322] ))), ((RogueType__to_String( p_0->type_context ))) ))), Rogue_literal_strings[317] ))), ((RogueType__to_String( existing_p_3->type_context ))) ))), Rogue_literal_strings[44] ))) ))) )));
          }
        }
        else
        {
          if (((RogueType__is_aspect( p_0->type_context ))))
          {
            p_0 = ((RogueClassProperty*)((RogueProperty__set_type_context__Type( ((RogueProperty__clone( p_0 ))), THIS ))));
          }
          list_1->data->objects[i_4] = p_0;
          RogueString_PropertyTable__set__String_Property( lookup_2, p_0->name, p_0 );
        }
      }
    }
    else
    {
      throw ((RogueToken__error__String( p_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[323] ))), p_0->name ))), Rogue_literal_strings[324] ))), p_0->name ))), Rogue_literal_strings[155] ))), ((RogueType__to_String( p_0->_type ))) ))), Rogue_literal_strings[325] ))), ((RogueType__to_String( p_0->type_context ))) ))), Rogue_literal_strings[317] ))), p_0->name ))), Rogue_literal_strings[155] ))), ((RogueType__to_String( existing_p_3->_type ))) ))), Rogue_literal_strings[325] ))), ((RogueType__to_String( existing_p_3->type_context ))) ))), Rogue_literal_strings[44] ))) ))) )));
    }
  }
  else
  {
    if (((RogueType__is_aspect( p_0->type_context ))))
    {
      p_0 = ((RogueClassProperty*)((RogueProperty__set_type_context__Type( ((RogueProperty__clone( p_0 ))), THIS ))));
    }
    RoguePropertyList__add__Property( list_1, p_0 );
    RogueString_PropertyTable__set__String_Property( lookup_2, p_0->name, p_0 );
  }
}

void RogueType__inherit_methods__MethodList_String_MethodTable( RogueClassType* THIS, RogueMethodList* list_0, RogueClassString_MethodTable* lookup_1 )
{
  {
    RogueTypeList* _auto_450_2 = (THIS->base_types);
    RogueInteger _auto_451_3 = (0);
    for (;_auto_451_3 < _auto_450_2->count;++_auto_451_3)
    {
      RogueClassType* base_type_4 = (((RogueClassType*)(_auto_450_2->data->objects[_auto_451_3])));
      {
        RogueMethodList* _auto_452_5 = (base_type_4->method_list);
        RogueInteger _auto_453_6 = (0);
        for (;_auto_453_6 < _auto_452_5->count;++_auto_453_6)
        {
          RogueClassMethod* base_m_7 = (((RogueClassMethod*)(_auto_452_5->data->objects[_auto_453_6])));
          RogueType__inherit_method__Method_MethodList_String_MethodTable( THIS, base_m_7, list_0, lookup_1 );
        }
      }
    }
  }
  {
    RogueMethodList* _auto_454_8 = (THIS->method_list);
    RogueInteger _auto_455_9 = (0);
    for (;_auto_455_9 < _auto_454_8->count;++_auto_455_9)
    {
      RogueClassMethod* m_10 = (((RogueClassMethod*)(_auto_454_8->data->objects[_auto_455_9])));
      RogueType__inherit_method__Method_MethodList_String_MethodTable( THIS, m_10, list_0, lookup_1 );
    }
  }
}

void RogueType__inherit_method__Method_MethodList_String_MethodTable( RogueClassType* THIS, RogueClassMethod* m_0, RogueMethodList* list_1, RogueClassString_MethodTable* lookup_2 )
{
  RogueClassMethod* existing_m_3 = (((RogueString_MethodTable__get__String( lookup_2, m_0->signature ))));
  if (!!(existing_m_3))
  {
    RogueInteger i_4 = (((RogueMethodList__locate__Method( list_1, existing_m_3 ))).value);
    if (!(((RogueMethod__is_incorporated( existing_m_3 )))))
    {
      if (m_0->type_context == existing_m_3->type_context)
      {
        if (((RogueMethod__is_augment( m_0 ))))
        {
          RogueType__apply_augment_labels__Method_Method( THIS, m_0, existing_m_3 );
          return;
        }
        else
        {
          throw ((RogueToken__error__String( m_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[336] ))), ((RogueType__to_String( m_0->type_context ))) ))), Rogue_literal_strings[338] ))), m_0->signature ))), Rogue_literal_strings[44] ))) ))) )));
        }
      }
      else if (m_0->_return_type != existing_m_3->_return_type)
      {
        if (((m_0->_return_type == NULL || existing_m_3->_return_type == NULL) || !(((RogueType__instance_of__Type( m_0->_return_type, existing_m_3->_return_type ))))))
        {
          throw ((RogueToken__error__String( m_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[339] ))), m_0->type_context->name ))), Rogue_literal_strings[156] ))), m_0->signature ))), Rogue_literal_strings[340] ))), ((RogueType__to_String( m_0->_return_type ))) ))), Rogue_literal_strings[341] ))), ((RogueType__to_String( existing_m_3->_return_type ))) ))), Rogue_literal_strings[342] ))) ))) )));
        }
      }
    }
    if (((RogueType__is_aspect( m_0->type_context ))))
    {
      RogueMethodList__add__Method( m_0->overriding_methods, existing_m_3 );
      return;
    }
    else if (((RogueMethod__is_augment( m_0 ))))
    {
      RogueMethod__convert_augment_to_standalone( m_0 );
    }
    if (!(((RogueType__is_aspect( existing_m_3->type_context )))))
    {
      RogueAttributes__add__Integer( existing_m_3->attributes, 2048 );
      RogueAttributes__add__Integer( existing_m_3->attributes, 4096 );
      RogueAttributes__add__Integer( m_0->attributes, 2048 );
    }
    m_0->overridden_method = existing_m_3;
    while ((!!(m_0->overridden_method) && m_0->type_context == m_0->overridden_method->type_context))
    {
      m_0->overridden_method = m_0->overridden_method->overridden_method;
    }
    if (!!(m_0->overridden_method))
    {
      RogueMethodList__add__Method( m_0->overridden_method->overriding_methods, m_0 );
    }
    list_1->data->objects[i_4] = m_0;
    RogueString_MethodTable__set__String_Method( lookup_2, m_0->signature, m_0 );
  }
  else
  {
    if (((RogueType__is_aspect( m_0->type_context ))))
    {
      m_0 = ((RogueClassMethod*)((RogueMethod__incorporate__Type( m_0, THIS ))));
    }
    else if (((RogueMethod__is_augment( m_0 ))))
    {
      RogueMethod__convert_augment_to_standalone( m_0 );
    }
    RogueMethodList__add__Method( list_1, m_0 );
    RogueString_MethodTable__set__String_Method( lookup_2, m_0->signature, m_0 );
  }
}

void RogueType__inherit_routines__MethodList_String_MethodTable( RogueClassType* THIS, RogueMethodList* list_0, RogueClassString_MethodTable* lookup_1 )
{
  {
    RogueTypeList* _auto_456_2 = (THIS->base_types);
    RogueInteger _auto_457_3 = (0);
    for (;_auto_457_3 < _auto_456_2->count;++_auto_457_3)
    {
      RogueClassType* base_type_4 = (((RogueClassType*)(_auto_456_2->data->objects[_auto_457_3])));
      {
        RogueMethodList* _auto_458_5 = (base_type_4->routine_list);
        RogueInteger _auto_459_6 = (0);
        for (;_auto_459_6 < _auto_458_5->count;++_auto_459_6)
        {
          RogueClassMethod* base_m_7 = (((RogueClassMethod*)(_auto_458_5->data->objects[_auto_459_6])));
          RogueType__inherit_routine__Method_MethodList_String_MethodTable( THIS, base_m_7, list_0, lookup_1 );
        }
      }
    }
  }
  {
    RogueMethodList* _auto_460_8 = (THIS->routine_list);
    RogueInteger _auto_461_9 = (0);
    for (;_auto_461_9 < _auto_460_8->count;++_auto_461_9)
    {
      RogueClassMethod* m_10 = (((RogueClassMethod*)(_auto_460_8->data->objects[_auto_461_9])));
      RogueType__inherit_routine__Method_MethodList_String_MethodTable( THIS, m_10, list_0, lookup_1 );
    }
  }
}

void RogueType__inherit_routine__Method_MethodList_String_MethodTable( RogueClassType* THIS, RogueClassMethod* m_0, RogueMethodList* list_1, RogueClassString_MethodTable* lookup_2 )
{
  RogueClassMethod* existing_m_3 = (((RogueString_MethodTable__get__String( lookup_2, m_0->signature ))));
  if (!!(existing_m_3))
  {
    if (m_0->type_context == existing_m_3->type_context)
    {
      if (((RogueMethod__is_augment( m_0 ))))
      {
        RogueType__apply_augment_labels__Method_Method( THIS, m_0, existing_m_3 );
        return;
      }
      else
      {
        throw ((RogueToken__error__String( m_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[336] ))), ((RogueType__to_String( m_0->type_context ))) ))), Rogue_literal_strings[337] ))), m_0->signature ))), Rogue_literal_strings[44] ))) ))) )));
      }
    }
    RogueInteger i_4 = (((RogueMethodList__locate__Method( list_1, existing_m_3 ))).value);
    if (((RogueType__is_aspect( m_0->type_context ))))
    {
      return;
    }
    if (((RogueMethod__is_augment( m_0 ))))
    {
      RogueMethod__convert_augment_to_standalone( m_0 );
    }
    list_1->data->objects[i_4] = m_0;
    RogueString_MethodTable__set__String_Method( lookup_2, m_0->signature, m_0 );
  }
  else
  {
    if (((RogueType__is_aspect( m_0->type_context ))))
    {
      return;
    }
    if (((RogueMethod__is_augment( m_0 ))))
    {
      RogueMethod__convert_augment_to_standalone( m_0 );
    }
    RogueMethodList__add__Method( list_1, m_0 );
    RogueString_MethodTable__set__String_Method( lookup_2, m_0->signature, m_0 );
  }
}

void RogueType__apply_augment_labels__Method_Method( RogueClassType* THIS, RogueClassMethod* aug_m_0, RogueClassMethod* existing_m_1 )
{
  {
    RogueCmdLabelList* _auto_462_3 = (existing_m_1->label_list);
    RogueInteger _auto_463_4 = (0);
    for (;_auto_463_4 < _auto_462_3->count;++_auto_463_4)
    {
      RogueClassCmdLabel* method_label_5 = (((RogueClassCmdLabel*)(_auto_462_3->data->objects[_auto_463_4])));
      RogueClassCmdLabel* aug_label_2 = (((RogueString_CmdLabelTable__get__String( aug_m_0->label_lookup, method_label_5->name ))));
      if (!!(aug_label_2))
      {
        RogueCmdList__add__CmdList( ((RogueCmdList*)method_label_5->statements), ((RogueCmdList*)(aug_label_2->statements)) );
        aug_label_2->is_referenced = true;
      }
    }
  }
  {
    RogueCmdLabelList* _auto_464_6 = (aug_m_0->label_list);
    RogueInteger _auto_465_7 = (0);
    for (;_auto_465_7 < _auto_464_6->count;++_auto_465_7)
    {
      RogueClassCmdLabel* label_8 = (((RogueClassCmdLabel*)(_auto_464_6->data->objects[_auto_465_7])));
      if (!(label_8->is_referenced))
      {
        throw ((RogueToken__error__String( label_8->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[334] ))), label_8->name ))), Rogue_literal_strings[335] ))) ))) )));
      }
    }
  }
}

void RogueType__index_and_move_inline_to_end__MethodList( RogueClassType* THIS, RogueMethodList* list_0 )
{
  RogueInteger i_1 = ((list_0->count - 1));
  while (i_1 >= 0)
  {
    RogueClassMethod* m_2 = (((RogueClassMethod*)(list_0->data->objects[i_1])));
    if (((RogueMethod__is_macro( m_2 ))))
    {
      RogueMethodList__remove__Method( list_0, m_2 );
      RogueMethodList__add__Method( list_0, m_2 );
    }
    --i_1;
  }
  i_1 = ((RogueInteger)0);
  {
    RogueMethodList* _auto_466_3 = (list_0);
    RogueInteger _auto_467_4 = (0);
    for (;_auto_467_4 < _auto_466_3->count;++_auto_467_4)
    {
      RogueClassMethod* m_5 = (((RogueClassMethod*)(_auto_466_3->data->objects[_auto_467_4])));
      m_5->index = i_1;
      ++i_1;
    }
  }
}

RogueLogical RogueType__omit_output( RogueClassType* THIS )
{
  return (RogueLogical)(((((RogueType__is_native( THIS ))) || !(THIS->is_used)) || (THIS->is_optional && ((RogueType__is_reference( THIS->_element_type ))))));
}

RogueClassType* RogueType__resolve( RogueClassType* THIS )
{
  if (THIS->resolved)
  {
    return (RogueClassType*)(THIS);
  }
  THIS->resolved = true;
  RogueType__organize( THIS );
  if (!!(THIS->_element_type))
  {
    RogueType__organize( THIS->_element_type );
  }
  {
    RoguePropertyList* _auto_468_0 = (THIS->global_list);
    RogueInteger _auto_469_1 = (0);
    for (;_auto_469_1 < _auto_468_0->count;++_auto_469_1)
    {
      RogueClassProperty* s_2 = (((RogueClassProperty*)(_auto_468_0->data->objects[_auto_469_1])));
      RogueType__organize( s_2->_type );
    }
  }
  {
    RoguePropertyList* _auto_470_3 = (THIS->property_list);
    RogueInteger _auto_471_4 = (0);
    for (;_auto_471_4 < _auto_470_3->count;++_auto_471_4)
    {
      RogueClassProperty* p_5 = (((RogueClassProperty*)(_auto_470_3->data->objects[_auto_471_4])));
      RogueType__organize( p_5->_type );
    }
  }
  {
    RogueMethodList* _auto_472_6 = (THIS->routine_list);
    RogueInteger _auto_473_7 = (0);
    for (;_auto_473_7 < _auto_472_6->count;++_auto_473_7)
    {
      RogueClassMethod* r_8 = (((RogueClassMethod*)(_auto_472_6->data->objects[_auto_473_7])));
      RogueMethod__resolve( r_8 );
    }
  }
  {
    RogueMethodList* _auto_474_9 = (THIS->method_list);
    RogueInteger _auto_475_10 = (0);
    for (;_auto_475_10 < _auto_474_9->count;++_auto_475_10)
    {
      RogueClassMethod* m_11 = (((RogueClassMethod*)(_auto_474_9->data->objects[_auto_475_10])));
      RogueMethod__resolve( m_11 );
    }
  }
  return (RogueClassType*)(THIS);
}

RogueLogical RogueType__should_cull( RogueClassType* THIS )
{
  return (RogueLogical)((!(THIS->is_used) || (THIS->is_optional && ((RogueType__is_reference( THIS->_element_type ))))));
}

void RogueType__trace_used_code( RogueClassType* THIS )
{
  if (THIS->is_used)
  {
    return;
  }
  THIS->is_used = true;
  if (((RogueType__is_singleton( THIS ))))
  {
    RogueClassMethod* m_0 = (((RogueType__find_method__String( THIS, Rogue_literal_strings[369] ))));
    if (!!(m_0))
    {
      RogueAttributes__add__Integer( m_0->attributes, 32768 );
    }
  }
  if (!!(THIS->_element_type))
  {
    RogueType__trace_used_code( THIS->_element_type );
  }
  {
    RogueTypeList* _auto_476_1 = (THIS->base_types);
    RogueInteger _auto_477_2 = (0);
    for (;_auto_477_2 < _auto_476_1->count;++_auto_477_2)
    {
      RogueClassType* base_type_3 = (((RogueClassType*)(_auto_476_1->data->objects[_auto_477_2])));
      RogueType__trace_used_code( base_type_3 );
    }
  }
  {
    RoguePropertyList* _auto_478_4 = (THIS->global_list);
    RogueInteger _auto_479_5 = (0);
    for (;_auto_479_5 < _auto_478_4->count;++_auto_479_5)
    {
      RogueClassProperty* s_6 = (((RogueClassProperty*)(_auto_478_4->data->objects[_auto_479_5])));
      RogueType__trace_used_code( s_6->_type );
    }
  }
  {
    RoguePropertyList* _auto_480_7 = (THIS->property_list);
    RogueInteger _auto_481_8 = (0);
    for (;_auto_481_8 < _auto_480_7->count;++_auto_481_8)
    {
      RogueClassProperty* p_9 = (((RogueClassProperty*)(_auto_480_7->data->objects[_auto_481_8])));
      RogueType__trace_used_code( p_9->_type );
    }
  }
  {
    RogueMethodList* _auto_482_10 = (THIS->routine_list);
    RogueInteger _auto_483_11 = (0);
    for (;_auto_483_11 < _auto_482_10->count;++_auto_483_11)
    {
      RogueClassMethod* r_12 = (((RogueClassMethod*)(_auto_482_10->data->objects[_auto_483_11])));
      if (((RogueMethod__is_requisite( r_12 ))))
      {
        RogueMethod__trace_used_code( r_12 );
      }
    }
  }
  {
    RogueMethodList* _auto_484_13 = (THIS->method_list);
    RogueInteger _auto_485_14 = (0);
    for (;_auto_485_14 < _auto_484_13->count;++_auto_485_14)
    {
      RogueClassMethod* m_15 = (((RogueClassMethod*)(_auto_484_13->data->objects[_auto_485_14])));
      if (((RogueMethod__is_requisite( m_15 ))))
      {
        RogueMethod__trace_used_code( m_15 );
      }
    }
  }
}

void RogueType__assign_cpp_name( RogueClassType* THIS )
{
  THIS->cpp_name = ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->name )));
  if ((THIS->is_array || THIS == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_NativeArray))
  {
    THIS->cpp_class_name = Rogue_literal_strings[389];
    THIS->cpp_name = Rogue_literal_strings[390];
  }
  else if ((((RogueType__is_primitive( THIS ))) || THIS->simplify_name))
  {
    THIS->cpp_class_name = ((RogueString__operatorPLUS__String( Rogue_literal_strings[16], THIS->cpp_name )));
  }
  else if (THIS->is_list)
  {
    THIS->cpp_class_name = ((RogueString__operatorPLUS__String( Rogue_literal_strings[16], THIS->cpp_name )));
  }
  else if ((THIS->is_optional && ((RogueType__is_primitive( THIS->_element_type )))))
  {
    THIS->cpp_name = ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ((RogueString__operatorPLUS__String( Rogue_literal_strings[281], THIS->_element_type->name ))) )));
    THIS->cpp_class_name = ((RogueString__operatorPLUS__String( Rogue_literal_strings[16], THIS->cpp_name )));
  }
  else
  {
    THIS->cpp_class_name = ((RogueString__operatorPLUS__String( Rogue_literal_strings[391], THIS->cpp_name )));
  }
  THIS->cpp_type_name = ((RogueString__operatorPLUS__String( Rogue_literal_strings[392], THIS->cpp_name )));
  {
    RoguePropertyList* _auto_486_0 = (THIS->global_list);
    RogueInteger _auto_487_1 = (0);
    for (;_auto_487_1 < _auto_486_0->count;++_auto_487_1)
    {
      RogueClassProperty* s_2 = (((RogueClassProperty*)(_auto_486_0->data->objects[_auto_487_1])));
      s_2->cpp_name = ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), s_2->name )));
    }
  }
  {
    RoguePropertyList* _auto_488_3 = (THIS->property_list);
    RogueInteger _auto_489_4 = (0);
    for (;_auto_489_4 < _auto_488_3->count;++_auto_489_4)
    {
      RogueClassProperty* p_5 = (((RogueClassProperty*)(_auto_488_3->data->objects[_auto_489_4])));
      p_5->cpp_name = ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), p_5->name )));
    }
  }
}

void RogueType__print_data_definition__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  if ((((RogueType__omit_output( THIS ))) || ((RogueType__is_primitive( THIS )))))
  {
    return;
  }
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[397] ))), THIS->cpp_class_name );
  RogueLogical is_error_1 = (false);
  if (((RogueType__is_class( THIS ))))
  {
    if (((RogueType__instance_of__Type( THIS, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Error ))))
    {
      is_error_1 = ((RogueLogical)true);
      RogueCPPWriter__print_type_name__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[398] ))), THIS->base_class );
    }
    else
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[400] );
    }
  }
  RogueCPPWriter__println__String( ((RogueCPPWriter__println( writer_0 ))), Rogue_literal_strings[174] );
  writer_0->indent += 2;
  if (!!(THIS->global_list->count))
  {
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[401] );
    {
      RoguePropertyList* _auto_490_3 = (THIS->global_list);
      RogueInteger _auto_491_4 = (0);
      for (;_auto_491_4 < _auto_490_3->count;++_auto_491_4)
      {
        RogueClassProperty* s_5 = (((RogueClassProperty*)(_auto_490_3->data->objects[_auto_491_4])));
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[402] ))), s_5->_type ))), Rogue_literal_strings[255] ))), s_5->cpp_name ))), Rogue_literal_strings[184] );
      }
    }
    RogueCPPWriter__println( writer_0 );
  }
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[403] );
  if (!!(THIS->native_properties))
  {
    {
      RogueStringList* _auto_492_6 = (THIS->native_properties);
      RogueInteger _auto_493_7 = (0);
      for (;_auto_493_7 < _auto_492_6->count;++_auto_493_7)
      {
        RogueString* p_8 = (((RogueString*)(_auto_492_6->data->objects[_auto_493_7])));
        RogueCPPWriter__print_code__String( writer_0, p_8 );
      }
    }
  }
  {
    RoguePropertyList* _auto_494_9 = (THIS->property_list);
    RogueInteger _auto_495_10 = (0);
    for (;_auto_495_10 < _auto_494_9->count;++_auto_495_10)
    {
      RogueClassProperty* p_11 = (((RogueClassProperty*)(_auto_494_9->data->objects[_auto_495_10])));
      if ((!(is_error_1) || p_11->type_context == THIS))
      {
        RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, p_11->_type ))), Rogue_literal_strings[255] ))), p_11->cpp_name ))), Rogue_literal_strings[184] );
      }
    }
  }
  RogueCPPWriter__println( writer_0 );
  if (((RogueType__is_compound( THIS ))))
  {
    if (!!(THIS->property_list->count))
    {
      RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, THIS ))), Rogue_literal_strings[404] );
      RogueLogical first_2 = (true);
      {
        RoguePropertyList* _auto_496_12 = (THIS->property_list);
        RogueInteger _auto_497_13 = (0);
        for (;_auto_497_13 < _auto_496_12->count;++_auto_497_13)
        {
          RogueClassProperty* p_14 = (((RogueClassProperty*)(_auto_496_12->data->objects[_auto_497_13])));
          if (first_2)
          {
            first_2 = ((RogueLogical)false);
          }
          else
          {
            RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[405] );
          }
          RogueCPPWriter__print__String( ((RogueCPPWriter__print_default_value__Type( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, p_14->cpp_name ))), Rogue_literal_strings[176] ))), p_14->_type ))), Rogue_literal_strings[100] );
        }
      }
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[407] );
      RogueCPPWriter__println( writer_0 );
      if (THIS->is_optional)
      {
        RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, THIS ))), Rogue_literal_strings[408] ))), ((RogueClassProperty*)(THIS->property_list->data->objects[0]))->_type );
        RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[409] );
      }
      else
      {
        RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, THIS ))), Rogue_literal_strings[408] );
        first_2 = ((RogueLogical)true);
        {
          RoguePropertyList* _auto_498_15 = (THIS->property_list);
          RogueInteger _auto_499_16 = (0);
          for (;_auto_499_16 < _auto_498_15->count;++_auto_499_16)
          {
            RogueClassProperty* p_17 = (((RogueClassProperty*)(_auto_498_15->data->objects[_auto_499_16])));
            if (first_2)
            {
              first_2 = ((RogueLogical)false);
            }
            else
            {
              RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[405] );
            }
            RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, p_17->_type ))), Rogue_literal_strings[255] ))), p_17->cpp_name );
          }
        }
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[410] );
        first_2 = ((RogueLogical)true);
        {
          RoguePropertyList* _auto_500_18 = (THIS->property_list);
          RogueInteger _auto_501_19 = (0);
          for (;_auto_501_19 < _auto_500_18->count;++_auto_501_19)
          {
            RogueClassProperty* p_20 = (((RogueClassProperty*)(_auto_500_18->data->objects[_auto_501_19])));
            if (first_2)
            {
              first_2 = ((RogueLogical)false);
            }
            else
            {
              RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[405] );
            }
            RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, p_20->cpp_name ))), Rogue_literal_strings[176] ))), p_20->cpp_name ))), Rogue_literal_strings[100] );
          }
        }
        RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[407] );
        RogueCPPWriter__println( writer_0 );
      }
    }
    RogueCPPWriter__println__String( ((RogueCPPWriter__print_type_name__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[411] ))), THIS ))), Rogue_literal_strings[412] );
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[174] );
    if (THIS->is_optional)
    {
      writer_0->indent += 2;
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[413] );
      writer_0->indent -= 2;
    }
    else
    {
      {
        RoguePropertyList* _auto_502_21 = (THIS->property_list);
        RogueInteger _auto_503_22 = (0);
        for (;_auto_503_22 < _auto_502_21->count;++_auto_503_22)
        {
          RogueClassProperty* p_23 = (((RogueClassProperty*)(_auto_502_21->data->objects[_auto_503_22])));
          RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[414] ))), p_23->cpp_name ))), Rogue_literal_strings[415] ))), p_23->cpp_name ))), Rogue_literal_strings[416] );
        }
      }
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[417] );
    }
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[97] );
    RogueCPPWriter__println( writer_0 );
    RogueCPPWriter__println__String( ((RogueCPPWriter__print_type_name__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[418] ))), THIS ))), Rogue_literal_strings[412] );
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[419] );
    if (THIS->is_optional)
    {
      RogueCPPWriter__println__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[420] ))), THIS->_element_type ))), Rogue_literal_strings[421] );
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[422] );
    }
  }
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[423] );
}

void RogueType__collect_type_info__IntegerList( RogueClassType* THIS, RogueIntegerList* info_0 )
{
  if (((RogueType__is_primitive( THIS ))))
  {
    RogueIntegerList__add__Integer( info_0, 0 );
  }
  else
  {
    RogueIntegerList__add__Integer( info_0, THIS->dynamic_method_table_index );
  }
  RogueIntegerList__add__Integer( info_0, THIS->base_types->count );
  {
    RogueTypeList* _auto_504_1 = (THIS->base_types);
    RogueInteger _auto_505_2 = (0);
    for (;_auto_505_2 < _auto_504_1->count;++_auto_505_2)
    {
      RogueClassType* base_type_3 = (((RogueClassType*)(_auto_504_1->data->objects[_auto_505_2])));
      RogueIntegerList__add__Integer( info_0, base_type_3->index );
    }
  }
}

void RogueType__print_routine_prototypes__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  {
    RogueMethodList* _auto_506_1 = (THIS->routine_list);
    RogueInteger _auto_507_2 = (0);
    for (;_auto_507_2 < _auto_506_1->count;++_auto_507_2)
    {
      RogueClassMethod* m_3 = (((RogueClassMethod*)(_auto_506_1->data->objects[_auto_507_2])));
      if (m_3->type_context == THIS)
      {
        RogueMethod__print_prototype__CPPWriter( m_3, writer_0 );
      }
    }
  }
}

void RogueType__print_routine_definitions__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  {
    RogueMethodList* _auto_508_1 = (THIS->routine_list);
    RogueInteger _auto_509_2 = (0);
    for (;_auto_509_2 < _auto_508_1->count;++_auto_509_2)
    {
      RogueClassMethod* m_3 = (((RogueClassMethod*)(_auto_508_1->data->objects[_auto_509_2])));
      if (m_3->type_context == THIS)
      {
        RogueMethod__print_definition__CPPWriter( m_3, writer_0 );
      }
    }
  }
}

void RogueType__print_method_prototypes__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  {
    RogueMethodList* _auto_510_1 = (THIS->method_list);
    RogueInteger _auto_511_2 = (0);
    for (;_auto_511_2 < _auto_510_1->count;++_auto_511_2)
    {
      RogueClassMethod* m_3 = (((RogueClassMethod*)(_auto_510_1->data->objects[_auto_511_2])));
      if (m_3->type_context == THIS)
      {
        RogueMethod__print_prototype__CPPWriter( m_3, writer_0 );
      }
    }
  }
}

void RogueType__determine_cpp_method_typedefs__StringList_String_MethodTable( RogueClassType* THIS, RogueStringList* list_0, RogueClassString_MethodTable* lookup_1 )
{
  RogueStringBuilder* buffer_2 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  {
    RogueMethodList* _auto_512_6 = (THIS->method_list);
    RogueInteger _auto_513_7 = (0);
    for (;_auto_513_7 < _auto_512_6->count;++_auto_513_7)
    {
      RogueClassMethod* m_8 = (((RogueClassMethod*)(_auto_512_6->data->objects[_auto_513_7])));
      if (((!(((RogueMethod__is_macro( m_8 )))) && ((RogueMethod__is_dynamic( m_8 )))) && m_8->is_used))
      {
        RogueStringBuilder__clear( buffer_2 );
        if (!!(m_8->_return_type))
        {
          RogueStringBuilder__print__String( buffer_2, m_8->_return_type->cpp_class_name );
          if (((RogueType__is_reference( m_8->_return_type ))))
          {
            RogueStringBuilder__print__Character( buffer_2, (RogueCharacter)'*' );
          }
        }
        else
        {
          RogueStringBuilder__print__String( buffer_2, Rogue_literal_strings[399] );
        }
        RogueStringBuilder__print__String( buffer_2, Rogue_literal_strings[440] );
        RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( buffer_2, m_8->type_context->cpp_class_name ))), Rogue_literal_strings[191] );
        {
          RogueLocalList* _auto_514_9 = (m_8->parameters);
          RogueInteger i_10 = (0);
          for (;i_10 < _auto_514_9->count;++i_10)
          {
            RogueStringBuilder__print__Character( buffer_2, (RogueCharacter)',' );
            RogueClassType* param_type_3 = (((RogueClassLocal*)(m_8->parameters->data->objects[i_10]))->_type);
            RogueStringBuilder__print__String( buffer_2, param_type_3->cpp_class_name );
            if (((RogueType__is_reference( param_type_3 ))))
            {
              RogueStringBuilder__print__Character( buffer_2, (RogueCharacter)'*' );
            }
          }
        }
        RogueStringBuilder__print__String( buffer_2, Rogue_literal_strings[100] );
        RogueString* sig_4 = (((RogueStringBuilder__to_String( buffer_2 ))));
        RogueClassMethod* mapping_5 = (((RogueString_MethodTable__get__String( lookup_1, sig_4 ))));
        if (!!(mapping_5))
        {
          m_8->cpp_typedef = mapping_5->cpp_typedef;
          if ((!(mapping_5->called_dynamically) && m_8->called_dynamically))
          {
            RogueString_MethodTable__set__String_Method( lookup_1, sig_4, m_8 );
          }
        }
        else
        {
          m_8->cpp_typedef = ((RogueString__operatorPLUS__Integer( Rogue_literal_strings[441], list_0->count )));
          RogueString_MethodTable__set__String_Method( lookup_1, sig_4, m_8 );
          RogueStringList__add__String( list_0, sig_4 );
        }
      }
    }
  }
}

RogueInteger RogueType__print_dynamic_method_table_entries__Integer_CPPWriter( RogueClassType* THIS, RogueInteger at_index_0, RogueClassCPPWriter* writer_1 )
{
  if (!(((RogueType__is_reference( THIS )))))
  {
    return (RogueInteger)(at_index_0);
  }
  THIS->dynamic_method_table_index = at_index_0;
  RogueInteger i2_2 = ((THIS->method_list->count - 1));
  while (i2_2 > 0)
  {
    RogueClassMethod* m_3 = (((RogueClassMethod*)(THIS->method_list->data->objects[i2_2])));
    if (((!(((RogueMethod__is_macro( m_3 )))) && ((RogueMethod__is_dynamic( m_3 )))) && m_3->is_used))
    {
      goto _auto_515;
    }
    --i2_2;
  }
  _auto_515:;
  RogueLogical print_type_name_4 = (true);
  {
    RogueInteger i_5 = (0);
    RogueInteger _auto_63_6 = (i2_2);
    for (;i_5 <= _auto_63_6;++i_5)
    {
      RogueClassMethod* m_7 = (((RogueClassMethod*)(THIS->method_list->data->objects[i_5])));
      if (!(((RogueMethod__is_macro( m_7 )))))
      {
        if ((((RogueMethod__is_dynamic( m_7 ))) && m_7->is_used))
        {
          RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[487] ))), m_7->cpp_typedef ))), Rogue_literal_strings[488] ))), m_7->cpp_name ))), Rogue_literal_strings[157] );
        }
        else
        {
          RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[489] );
        }
        if (print_type_name_4)
        {
          print_type_name_4 = ((RogueLogical)false);
          RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_1, Rogue_literal_strings[490] ))), THIS->name );
        }
        RogueCPPWriter__println( writer_1 );
        ++at_index_0;
      }
    }
  }
  return (RogueInteger)(at_index_0);
}

void RogueType__print_method_definitions__CPPWriter( RogueClassType* THIS, RogueClassCPPWriter* writer_0 )
{
  {
    RogueMethodList* _auto_516_1 = (THIS->method_list);
    RogueInteger _auto_517_2 = (0);
    for (;_auto_517_2 < _auto_516_1->count;++_auto_517_2)
    {
      RogueClassMethod* m_3 = (((RogueClassMethod*)(_auto_516_1->data->objects[_auto_517_2])));
      if (m_3->type_context == THIS)
      {
        RogueMethod__print_definition__CPPWriter( m_3, writer_0 );
      }
    }
  }
}

RogueClassType* RogueType__init_object( RogueClassType* THIS )
{
  THIS->attributes = ((RogueClassAttributes*)ROGUE_CREATE_OBJECT(Attributes));
  THIS->index = -1;
  THIS->base_types = ((RogueTypeList__init( ((RogueTypeList*)ROGUE_CREATE_OBJECT(TypeList)) )));
  THIS->flat_base_types = ((RogueTypeList__init( ((RogueTypeList*)ROGUE_CREATE_OBJECT(TypeList)) )));
  THIS->definition_list = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  THIS->definition_lookup = ((RogueString_CmdTable__init( ((RogueClassString_CmdTable*)ROGUE_CREATE_OBJECT(String_CmdTable)) )));
  THIS->next_enum_offset = 0;
  THIS->global_list = ((RoguePropertyList__init( ((RoguePropertyList*)ROGUE_CREATE_OBJECT(PropertyList)) )));
  THIS->global_lookup = ((RogueString_PropertyTable__init( ((RogueClassString_PropertyTable*)ROGUE_CREATE_OBJECT(String_PropertyTable)) )));
  THIS->property_list = ((RoguePropertyList__init( ((RoguePropertyList*)ROGUE_CREATE_OBJECT(PropertyList)) )));
  THIS->property_lookup = ((RogueString_PropertyTable__init( ((RogueClassString_PropertyTable*)ROGUE_CREATE_OBJECT(String_PropertyTable)) )));
  THIS->routine_list = ((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) )));
  THIS->routine_lookup_by_name = ((RogueString_MethodListTable__init( ((RogueClassString_MethodListTable*)ROGUE_CREATE_OBJECT(String_MethodListTable)) )));
  THIS->routine_lookup_by_signature = ((RogueString_MethodTable__init( ((RogueClassString_MethodTable*)ROGUE_CREATE_OBJECT(String_MethodTable)) )));
  THIS->method_list = ((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) )));
  THIS->method_lookup_by_name = ((RogueString_MethodListTable__init( ((RogueClassString_MethodListTable*)ROGUE_CREATE_OBJECT(String_MethodListTable)) )));
  THIS->method_lookup_by_signature = ((RogueString_MethodTable__init( ((RogueClassString_MethodTable*)ROGUE_CREATE_OBJECT(String_MethodTable)) )));
  return (RogueClassType*)(THIS);
}

RogueString* RogueString_TypeTable__to_String( RogueClassString_TypeTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_TypeTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_TypeTable__type_name( RogueClassString_TypeTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[548]);
}

RogueClassString_TypeTable* RogueString_TypeTable__init( RogueClassString_TypeTable* THIS )
{
  RogueString_TypeTable__init__Integer( THIS, 16 );
  return (RogueClassString_TypeTable*)(THIS);
}

RogueClassString_TypeTable* RogueString_TypeTable__init__Integer( RogueClassString_TypeTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_TypeTableEntryList__init__Integer_String_TypeTableEntry( ((RogueTableEntry_of_String_TypeList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_TypeList)), bin_count_0, ((RogueClassString_TypeTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_TypeTable*)(THIS);
}

RogueClassString_TypeTableEntry* RogueString_TypeTable__find__String( RogueClassString_TypeTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_TypeTableEntry* entry_2 = (((RogueClassString_TypeTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_TypeTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_TypeTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_TypeTableEntry*)(((RogueClassString_TypeTableEntry*)(NULL)));
}

RogueClassType* RogueString_TypeTable__get__String( RogueClassString_TypeTable* THIS, RogueString* key_0 )
{
  RogueClassString_TypeTableEntry* entry_1 = (((RogueString_TypeTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassType*)(entry_1->value);
  }
  else
  {
    RogueClassType* default_value_2 = 0;
    return (RogueClassType*)(default_value_2);
  }
}

void RogueString_TypeTable__set__String_Type( RogueClassString_TypeTable* THIS, RogueString* key_0, RogueClassType* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_TypeTableEntry* entry_4 = (((RogueClassString_TypeTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_TypeTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_TypeTableEntry*)((RogueString_TypeTableEntry__init__String_Type_Integer( ((RogueClassString_TypeTableEntry*)ROGUE_CREATE_OBJECT(String_TypeTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_TypeTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_TypeTable__print_to__StringBuilder( RogueClassString_TypeTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_TypeTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_TypeTable* RogueString_TypeTable__init_object( RogueClassString_TypeTable* THIS )
{
  return (RogueClassString_TypeTable*)(THIS);
}

RogueString* RogueString_IntegerTable__to_String( RogueClassString_IntegerTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_IntegerTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_IntegerTable__type_name( RogueClassString_IntegerTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[549]);
}

RogueClassString_IntegerTable* RogueString_IntegerTable__init( RogueClassString_IntegerTable* THIS )
{
  RogueString_IntegerTable__init__Integer( THIS, 16 );
  return (RogueClassString_IntegerTable*)(THIS);
}

RogueClassString_IntegerTable* RogueString_IntegerTable__init__Integer( RogueClassString_IntegerTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_IntegerTableEntryList__init__Integer_String_IntegerTableEntry( ((RogueTableEntry_of_String_IntegerList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_IntegerList)), bin_count_0, ((RogueClassString_IntegerTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_IntegerTable*)(THIS);
}

RogueLogical RogueString_IntegerTable__contains__String( RogueClassString_IntegerTable* THIS, RogueString* key_0 )
{
  return (RogueLogical)(!!(((RogueString_IntegerTable__find__String( THIS, key_0 )))));
}

RogueClassString_IntegerTableEntry* RogueString_IntegerTable__find__String( RogueClassString_IntegerTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_IntegerTableEntry* entry_2 = (((RogueClassString_IntegerTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_IntegerTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_IntegerTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_IntegerTableEntry*)(((RogueClassString_IntegerTableEntry*)(NULL)));
}

RogueInteger RogueString_IntegerTable__get__String( RogueClassString_IntegerTable* THIS, RogueString* key_0 )
{
  RogueClassString_IntegerTableEntry* entry_1 = (((RogueString_IntegerTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueInteger)(entry_1->value);
  }
  else
  {
    RogueInteger default_value_2 = 0;
    return (RogueInteger)(default_value_2);
  }
}

void RogueString_IntegerTable__set__String_Integer( RogueClassString_IntegerTable* THIS, RogueString* key_0, RogueInteger value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_IntegerTableEntry* entry_4 = (((RogueClassString_IntegerTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_IntegerTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_IntegerTableEntry*)((RogueString_IntegerTableEntry__init__String_Integer_Integer( ((RogueClassString_IntegerTableEntry*)ROGUE_CREATE_OBJECT(String_IntegerTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_IntegerTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_IntegerTable__print_to__StringBuilder( RogueClassString_IntegerTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Integer( buffer_0, ((RogueString_IntegerTable__get__String( THIS, key_2 ))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_IntegerTable* RogueString_IntegerTable__init_object( RogueClassString_IntegerTable* THIS )
{
  return (RogueClassString_IntegerTable*)(THIS);
}

RogueString* RogueToken__to_String( RogueClassToken* THIS )
{
  return (RogueString*)(((RogueTokenType__to_String__Token( THIS->_type, THIS ))));
}

RogueString* RogueToken__type_name( RogueClassToken* THIS )
{
  return (RogueString*)(Rogue_literal_strings[550]);
}

RogueClassToken* RogueToken__init__TokenType( RogueClassToken* THIS, RogueClassTokenType* _auto_67_0 )
{
  THIS->_type = _auto_67_0;
  return (RogueClassToken*)(THIS);
}

RogueClassRogueError* RogueToken__error__String( RogueClassToken* THIS, RogueString* message_0 )
{
  return (RogueClassRogueError*)(((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), message_0, THIS->filepath, THIS->line, THIS->column ))));
}

RogueLogical RogueToken__is_directive( RogueClassToken* THIS )
{
  return (RogueLogical)((call_ROGUEM73( 11, (RogueClassTokenType*)(THIS->_type) )));
}

RogueLogical RogueToken__is_structure( RogueClassToken* THIS )
{
  return (RogueLogical)((call_ROGUEM73( 13, (RogueClassTokenType*)(THIS->_type) )));
}

RogueString* RogueToken__quoted_name( RogueClassToken* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[43] ))), (call_ROGUEM33( 1, (RogueClassToken*)(THIS) )) ))), Rogue_literal_strings[43] ))) ))));
}

RogueClassToken* RogueToken__set_location__String_Integer_Integer( RogueClassToken* THIS, RogueString* _auto_68_0, RogueInteger _auto_69_1, RogueInteger _auto_70_2 )
{
  THIS->column = _auto_70_2;
  THIS->line = _auto_69_1;
  THIS->filepath = _auto_68_0;
  return (RogueClassToken*)(THIS);
}

RogueCharacter RogueToken__to_Character( RogueClassToken* THIS )
{
  return (RogueCharacter)(((RogueCharacter)(0)));
}

RogueInteger RogueToken__to_Integer( RogueClassToken* THIS )
{
  return (RogueInteger)(0);
}

RogueLong RogueToken__to_Long( RogueClassToken* THIS )
{
  return (RogueLong)(((RogueLong)(call_ROGUEM35( 10, (RogueClassToken*)(THIS) ))));
}

RogueReal RogueToken__to_Real( RogueClassToken* THIS )
{
  return (RogueReal)(0.0);
}

RogueClassType* RogueToken__to_Type( RogueClassToken* THIS )
{
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

RogueClassToken* RogueToken__init_object( RogueClassToken* THIS )
{
  return (RogueClassToken*)(THIS);
}

RogueString* RogueTypeArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[598]);
}

RogueString* RogueAttributes__type_name( RogueClassAttributes* THIS )
{
  return (RogueString*)(Rogue_literal_strings[551]);
}

RogueClassAttributes* RogueAttributes__init__Integer( RogueClassAttributes* THIS, RogueInteger _auto_73_0 )
{
  THIS->flags = _auto_73_0;
  return (RogueClassAttributes*)(THIS);
}

RogueClassAttributes* RogueAttributes__clone( RogueClassAttributes* THIS )
{
  RogueClassAttributes* result_0 = (((RogueAttributes__init__Integer( ((RogueClassAttributes*)ROGUE_CREATE_OBJECT(Attributes)), THIS->flags ))));
  if (!!(THIS->tags))
  {
    {
      RogueStringList* _auto_526_1 = (THIS->tags);
      RogueInteger _auto_527_2 = (0);
      for (;_auto_527_2 < _auto_526_1->count;++_auto_527_2)
      {
        RogueString* tag_3 = (((RogueString*)(_auto_526_1->data->objects[_auto_527_2])));
        RogueAttributes__add__String( result_0, tag_3 );
      }
    }
  }
  return (RogueClassAttributes*)(result_0);
}

RogueClassAttributes* RogueAttributes__add__Integer( RogueClassAttributes* THIS, RogueInteger flag_0 )
{
  THIS->flags |= flag_0;
  return (RogueClassAttributes*)(THIS);
}

RogueClassAttributes* RogueAttributes__add__String( RogueClassAttributes* THIS, RogueString* tag_0 )
{
  if (THIS->tags == NULL)
  {
    THIS->tags = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  }
  RogueStringList__add__String( THIS->tags, tag_0 );
  return (RogueClassAttributes*)(THIS);
}

RogueClassAttributes* RogueAttributes__add__Attributes( RogueClassAttributes* THIS, RogueClassAttributes* other_0 )
{
  THIS->flags |= other_0->flags;
  if (!!(other_0->tags))
  {
    {
      RogueStringList* _auto_528_1 = (other_0->tags);
      RogueInteger _auto_529_2 = (0);
      for (;_auto_529_2 < _auto_528_1->count;++_auto_529_2)
      {
        RogueString* tag_3 = (((RogueString*)(_auto_528_1->data->objects[_auto_529_2])));
        RogueAttributes__add__String( THIS, tag_3 );
      }
    }
  }
  return (RogueClassAttributes*)(THIS);
}

RogueString* RogueAttributes__element_type_name( RogueClassAttributes* THIS )
{
  switch ((THIS->flags & 7))
  {
    case 1:
    {
      return (RogueString*)(Rogue_literal_strings[266]);
      break;
    }
    case 2:
    {
      return (RogueString*)(Rogue_literal_strings[263]);
      break;
    }
    case 3:
    {
      return (RogueString*)(Rogue_literal_strings[267]);
      break;
    }
    default:
    {
      return (RogueString*)(Rogue_literal_strings[69]);
    }
  }
}

RogueClassAttributes* RogueAttributes__init_object( RogueClassAttributes* THIS )
{
  return (RogueClassAttributes*)(THIS);
}

RogueString* RogueCmd__type_name( RogueClassCmd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[288]);
}

RogueClassCmd* RogueCmd__call_prior__Scope( RogueClassCmd* THIS, RogueClassScope* scope_0 )
{
  throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[761] )));
}

RogueClassCmd* RogueCmd__cast_to__Type( RogueClassCmd* THIS, RogueClassType* target_type_0 )
{
  RogueClassType* this_type_1 = ((call_ROGUEM46( 27, (RogueClassCmd*)(THIS) )));
  if (this_type_1 == target_type_0)
  {
    return (RogueClassCmd*)(THIS);
  }
  if (((RogueType__instance_of__Type( this_type_1, target_type_0 ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdCastToType*)ROGUE_CREATE_OBJECT(CmdCastToType))), THIS->t, THIS, target_type_0 ))))));
  }
  else
  {
    RogueType__organize( this_type_1 );
    RogueString* m_name_2 = (((RogueString__operatorPLUS__String( Rogue_literal_strings[298], target_type_0->name ))));
    if (((RogueType__has_method_named__String( this_type_1, m_name_2 ))))
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS, m_name_2 ))))));
    }
    if ((((RogueType__is_primitive( this_type_1 ))) && ((RogueType__is_primitive( target_type_0 )))))
    {
      if (!((this_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical || target_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)))
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdCastToType*)ROGUE_CREATE_OBJECT(CmdCastToType))), THIS->t, THIS, target_type_0 ))))));
      }
    }
    if (target_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalize*)ROGUE_CREATE_OBJECT(CmdLogicalize))), THIS->t, THIS ))))));
    }
    if (target_type_0->is_optional)
    {
      if (this_type_1 == target_type_0->_element_type)
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateOptionalValue__init__Token_Type_Cmd( ((RogueClassCmdCreateOptionalValue*)ROGUE_CREATE_OBJECT(CmdCreateOptionalValue)), THIS->t, target_type_0, THIS ))))));
      }
      else if (this_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_null)
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateOptionalValue__init__Token_Type_Cmd( ((RogueClassCmdCreateOptionalValue*)ROGUE_CREATE_OBJECT(CmdCreateOptionalValue)), THIS->t, target_type_0, ((RogueClassCmd*)(NULL)) ))))));
      }
    }
    throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[336] ))), ((RogueType__to_String( this_type_1 ))) ))), Rogue_literal_strings[366] ))), ((RogueType__to_String( target_type_0 ))) ))), Rogue_literal_strings[44] ))) ))) )));
  }
}

RogueClassCmd* RogueCmd__clone__CloneArgs( RogueClassCmd* THIS, RogueClassCloneArgs* clone_args_0 )
{
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[287] ))), (call_ROGUEM41( 2, (RogueClassCmd*)(THIS) )) ))), Rogue_literal_strings[289] ))) ))) )));
}

RogueClassCmd* RogueCmd__clone__Cmd_CloneArgs( RogueClassCmd* THIS, RogueClassCmd* other_0, RogueClassCloneArgs* clone_args_1 )
{
  if (!!(other_0))
  {
    return (RogueClassCmd*)((call_ROGUEM44( 5, (RogueClassCmd*)(other_0), clone_args_1 )));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
}

RogueClassCmdArgs* RogueCmd__clone__CmdArgs_CloneArgs( RogueClassCmd* THIS, RogueClassCmdArgs* args_0, RogueClassCloneArgs* clone_args_1 )
{
  if (!!(args_0))
  {
    return (RogueClassCmdArgs*)(((RogueCmdArgs__clone__CloneArgs( args_0, clone_args_1 ))));
  }
  return (RogueClassCmdArgs*)(((RogueClassCmdArgs*)(NULL)));
}

RogueClassCmdStatementList* RogueCmd__clone__CmdStatementList_CloneArgs( RogueClassCmd* THIS, RogueClassCmdStatementList* statements_0, RogueClassCloneArgs* clone_args_1 )
{
  if (!!(statements_0))
  {
    return (RogueClassCmdStatementList*)(((RogueCmdStatementList__clone__CloneArgs( statements_0, clone_args_1 ))));
  }
  return (RogueClassCmdStatementList*)(((RogueClassCmdStatementList*)(NULL)));
}

RogueClassCmd* RogueCmd__combine_literal_operands__Type( RogueClassCmd* THIS, RogueClassType* common_type_0 )
{
  return (RogueClassCmd*)(THIS);
}

void RogueCmd__exit_scope__Scope( RogueClassCmd* THIS, RogueClassScope* scope_0 )
{
}

RogueClassType* RogueCmd__find_operation_result_type__Type_Type( RogueClassCmd* THIS, RogueClassType* left_type_0, RogueClassType* right_type_1 )
{
  RogueClassType* result_2 = (((RogueCmd__find_common_type__Type_Type( THIS, left_type_0, right_type_1 ))));
  if (!(!!(result_2)))
  {
    return (RogueClassType*)(left_type_0);
  }
  if ((result_2 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte || result_2 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character))
  {
    return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer);
  }
  return (RogueClassType*)(result_2);
}

RogueClassType* RogueCmd__find_common_type__Type_Type( RogueClassCmd* THIS, RogueClassType* left_type_0, RogueClassType* right_type_1 )
{
  if (left_type_0 == NULL)
  {
    return (RogueClassType*)(right_type_1);
  }
  if (right_type_1 == NULL)
  {
    return (RogueClassType*)(left_type_0);
  }
  if (left_type_0 == right_type_1)
  {
    return (RogueClassType*)(left_type_0);
  }
  if (((RogueType__is_primitive( left_type_0 ))))
  {
    if (((RogueType__is_primitive( right_type_1 ))))
    {
      if ((left_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real || right_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real))
      {
        return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real);
      }
      if ((left_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Float || right_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Float))
      {
        return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Float);
      }
      if ((left_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Long || right_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Long))
      {
        return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Long);
      }
      if ((left_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer || right_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer))
      {
        return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer);
      }
      if ((left_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character || right_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character))
      {
        return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character);
      }
    }
  }
  if (((RogueType__instance_of__Type( left_type_0, right_type_1 ))))
  {
    return (RogueClassType*)(right_type_1);
  }
  if (((RogueType__instance_of__Type( right_type_1, left_type_0 ))))
  {
    return (RogueClassType*)(left_type_0);
  }
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

RogueClassType* RogueCmd__must_find_common_type__Type_Type( RogueClassCmd* THIS, RogueClassType* left_type_0, RogueClassType* right_type_1 )
{
  RogueClassType* common_type_2 = (((RogueCmd__find_common_type__Type_Type( THIS, left_type_0, right_type_1 ))));
  if (!!(common_type_2))
  {
    return (RogueClassType*)(common_type_2);
  }
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[716] ))), ((RogueType__to_String( left_type_0 ))) ))), Rogue_literal_strings[317] ))), ((RogueType__to_String( right_type_1 ))) ))), Rogue_literal_strings[717] ))) ))) )));
}

RogueClassType* Rogue_Cmd__implicit_type( RogueClassCmd* THIS )
{
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

RogueLogical RogueCmd__is_literal( RogueClassCmd* THIS )
{
  return (RogueLogical)(false);
}

void RogueCmd__require_type_context( RogueClassCmd* THIS )
{
  if (!!((call_ROGUEM46( 27, (RogueClassCmd*)(THIS) ))))
  {
    throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[697] ))), ((RogueType__to_String( (call_ROGUEM46( 27, (RogueClassCmd*)(THIS) )) ))) ))), Rogue_literal_strings[698] ))) ))) )));
  }
  else
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[699] )));
  }
}

RogueClassCmd* RogueCmd__require_integer( RogueClassCmd* THIS )
{
  RogueClassType* _type_0 = ((call_ROGUEM46( 27, (RogueClassCmd*)(THIS) )));
  if ((_type_0 == NULL || _type_0 != ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[687] )));
  }
  return (RogueClassCmd*)(THIS);
}

RogueClassCmd* RogueCmd__require_logical__Scope( RogueClassCmd* THIS, RogueClassScope* scope_0 )
{
  if (((Rogue_Cmd__require_type( THIS ))) != ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)
  {
    return (RogueClassCmd*)((call_ROGUEM299( 22, (RogueClassCmdUnary*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalize*)ROGUE_CREATE_OBJECT(CmdLogicalize))), THIS->t, THIS )))), scope_0 )));
  }
  return (RogueClassCmd*)(THIS);
}

RogueClassType* Rogue_Cmd__require_type( RogueClassCmd* THIS )
{
  RogueClassType* result_0 = ((call_ROGUEM46( 27, (RogueClassCmd*)(THIS) )));
  if (result_0 == NULL)
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[685] )));
  }
  return (RogueClassType*)(result_0);
}

RogueClassCmd* RogueCmd__require_value( RogueClassCmd* THIS )
{
  Rogue_Cmd__require_type( THIS );
  return (RogueClassCmd*)(THIS);
}

RogueLogical RogueCmd__requires_semicolon( RogueClassCmd* THIS )
{
  return (RogueLogical)(true);
}

RogueClassCmd* RogueCmd__resolve__Scope( RogueClassCmd* THIS, RogueClassScope* scope_0 )
{
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[287] ))), (call_ROGUEM41( 2, (RogueClassCmd*)(THIS) )) ))), Rogue_literal_strings[361] ))) ))) )));
  return (RogueClassCmd*)(THIS);
}

RogueClassCmd* RogueCmd__resolve_assignment__Scope_Cmd( RogueClassCmd* THIS, RogueClassScope* scope_0, RogueClassCmd* new_value_1 )
{
  throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[714] )));
}

RogueClassCmd* RogueCmd__resolve_modify__Scope_Integer( RogueClassCmd* THIS, RogueClassScope* scope_0, RogueInteger delta_1 )
{
  throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[728] )));
}

RogueClassCmd* RogueCmd__resolve_modify_and_assign__Scope_TokenType_Cmd( RogueClassCmd* THIS, RogueClassScope* scope_0, RogueClassTokenType* op_1, RogueClassCmd* new_value_2 )
{
  throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[714] )));
}

void RogueCmd__trace_used_code( RogueClassCmd* THIS )
{
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[287] ))), (call_ROGUEM41( 2, (RogueClassCmd*)(THIS) )) ))), Rogue_literal_strings[370] ))) ))) )));
}

RogueClassType* Rogue_Cmd__type( RogueClassCmd* THIS )
{
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[287] ))), (call_ROGUEM41( 2, (RogueClassCmd*)(THIS) )) ))), Rogue_literal_strings[365] ))) ))) )));
}

void RogueCmd__write_cpp__CPPWriter_Logical( RogueClassCmd* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[287] ))), (call_ROGUEM41( 2, (RogueClassCmd*)(THIS) )) ))), Rogue_literal_strings[513] ))) ))) )));
}

RogueClassCmd* RogueCmd__init_object( RogueClassCmd* THIS )
{
  return (RogueClassCmd*)(THIS);
}

RogueString* RogueCmdReturn__type_name( RogueClassCmdReturn* THIS )
{
  return (RogueString*)(Rogue_literal_strings[834]);
}

RogueClassCmd* RogueCmdReturn__clone__CloneArgs( RogueClassCmdReturn* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if (!!(task_args_1))
  {
    return (RogueClassCmd*)(((RogueTaskArgs__create_return__Token_Cmd( task_args_1, THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->value, clone_args_0 ))) ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->value, clone_args_0 ))) ))))));
  }
}

RogueClassCmd* RogueCmdReturn__resolve__Scope( RogueClassCmdReturn* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->value))
  {
    if (!(!!(scope_0->this_method->_return_type)))
    {
      throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), scope_0->this_method->signature ))), Rogue_literal_strings[364] ))) ))) )));
    }
    THIS->value = (call_ROGUEM42( 22, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)((call_ROGUEM42( 22, (RogueClassCmd*)(THIS->value), scope_0 ))), scope_0->this_method->_return_type ))), scope_0 ));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdReturn__trace_used_code( RogueClassCmdReturn* THIS )
{
  if (!!(THIS->value))
  {
    call_ROGUEM48( 26, (RogueClassCmd*)(THIS->value) );
  }
}

RogueClassType* Rogue_CmdReturn__type( RogueClassCmdReturn* THIS )
{
  return (RogueClassType*)((call_ROGUEM46( 27, (RogueClassCmd*)(THIS->value) )));
}

void RogueCmdReturn__write_cpp__CPPWriter_Logical( RogueClassCmdReturn* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!!(THIS->value))
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[774] ))), (call_ROGUEM46( 27, (RogueClassCmd*)(THIS->value) )) ))), Rogue_literal_strings[775] );
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->value), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[124] );
  }
}

RogueClassCmdReturn* RogueCmdReturn__init_object( RogueClassCmdReturn* THIS )
{
  return (RogueClassCmdReturn*)(THIS);
}

RogueClassCmdReturn* RogueCmdReturn__init__Token_Cmd( RogueClassCmdReturn* THIS, RogueClassToken* _auto_75_0, RogueClassCmd* _auto_76_1 )
{
  THIS->value = _auto_76_1;
  THIS->t = _auto_75_0;
  return (RogueClassCmdReturn*)(THIS);
}

RogueString* RogueCmdStatement__type_name( RogueClassCmdStatement* THIS )
{
  return (RogueString*)(Rogue_literal_strings[645]);
}

void RogueCmdStatement__trace_used_code( RogueClassCmdStatement* THIS )
{
}

RogueClassCmdStatement* RogueCmdStatement__init_object( RogueClassCmdStatement* THIS )
{
  return (RogueClassCmdStatement*)(THIS);
}

RogueString* RogueCmdStatementList__type_name( RogueClassCmdStatementList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[968]);
}

RogueClassCmdStatementList* RogueCmdStatementList__init_object( RogueClassCmdStatementList* THIS )
{
  return (RogueClassCmdStatementList*)(THIS);
}

RogueClassCmdStatementList* RogueCmdStatementList__init( RogueClassCmdStatementList* THIS )
{
  RogueCmdList__init( ((RogueCmdList*)THIS) );
  return (RogueClassCmdStatementList*)(THIS);
}

RogueClassCmdStatementList* RogueCmdStatementList__init__Integer( RogueClassCmdStatementList* THIS, RogueInteger initial_capacity_0 )
{
  RogueCmdList__init__Integer( ((RogueCmdList*)THIS), initial_capacity_0 );
  return (RogueClassCmdStatementList*)(THIS);
}

RogueClassCmdStatementList* RogueCmdStatementList__init__Cmd( RogueClassCmdStatementList* THIS, RogueClassCmd* statement_0 )
{
  RogueCmdStatementList__init( THIS );
  if (!!(statement_0))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS), statement_0 );
  }
  return (RogueClassCmdStatementList*)(THIS);
}

RogueClassCmdStatementList* RogueCmdStatementList__clone__CloneArgs( RogueClassCmdStatementList* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdStatementList* result_1 = (((RogueCmdStatementList__init__Integer( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)), THIS->count ))));
  {
    RogueClassCmdStatementList* _auto_548_2 = (THIS);
    RogueInteger _auto_549_3 = (0);
    for (;_auto_549_3 < _auto_548_2->count;++_auto_549_3)
    {
      RogueClassCmd* cmd_4 = (((RogueClassCmd*)(_auto_548_2->data->objects[_auto_549_3])));
      cmd_4 = ((RogueClassCmd*)(call_ROGUEM44( 5, (RogueClassCmd*)(cmd_4), clone_args_0 )));
      if (!!(cmd_4))
      {
        RogueCmdList__add__Cmd( ((RogueCmdList*)result_1), cmd_4 );
      }
    }
  }
  return (RogueClassCmdStatementList*)(result_1);
}

void RogueCmdStatementList__resolve__Scope( RogueClassCmdStatementList* THIS, RogueClassScope* scope_0 )
{
  {
    RogueClassCmdStatementList* _auto_550_1 = (THIS);
    RogueInteger i_2 = (0);
    for (;i_2 < _auto_550_1->count;++i_2)
    {
      THIS->data->objects[i_2] = (call_ROGUEM42( 22, (RogueClassCmd*)(((RogueClassCmd*)(THIS->data->objects[i_2]))), scope_0 ));
    }
  }
  {
    RogueClassCmdStatementList* _auto_551_3 = (THIS);
    RogueInteger _auto_552_4 = (0);
    for (;_auto_552_4 < _auto_551_3->count;++_auto_552_4)
    {
      RogueClassCmd* statement_5 = (((RogueClassCmd*)(_auto_551_3->data->objects[_auto_552_4])));
      call_ROGUEM45( 10, (RogueClassCmd*)(statement_5), scope_0 );
    }
  }
}

void RogueCmdStatementList__trace_used_code( RogueClassCmdStatementList* THIS )
{
  {
    RogueClassCmdStatementList* _auto_553_0 = (THIS);
    RogueInteger _auto_554_1 = (0);
    for (;_auto_554_1 < _auto_553_0->count;++_auto_554_1)
    {
      RogueClassCmd* statement_2 = (((RogueClassCmd*)(_auto_553_0->data->objects[_auto_554_1])));
      call_ROGUEM48( 26, (RogueClassCmd*)(statement_2) );
    }
  }
}

void RogueCmdStatementList__write_cpp__CPPWriter_Logical( RogueClassCmdStatementList* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  {
    RogueClassCmdStatementList* _auto_555_2 = (THIS);
    RogueInteger _auto_556_3 = (0);
    for (;_auto_556_3 < _auto_555_2->count;++_auto_556_3)
    {
      RogueClassCmd* statement_4 = (((RogueClassCmd*)(_auto_555_2->data->objects[_auto_556_3])));
      call_ROGUEM52( 28, (RogueClassCmd*)(statement_4), writer_0, true );
      if ((call_ROGUEM47( 21, (RogueClassCmd*)(statement_4) )))
      {
        RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[184] );
      }
    }
  }
}

RogueString* RogueCmdList__to_String( RogueCmdList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueCmdList* _auto_538_2 = (THIS);
    RogueInteger _auto_539_3 = (0);
    for (;_auto_539_3 < _auto_538_2->count;++_auto_539_3)
    {
      RogueClassCmd* value_4 = (((RogueClassCmd*)(_auto_538_2->data->objects[_auto_539_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdList__type_name( RogueCmdList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[926]);
}

RogueCmdList* RogueCmdList__init_object( RogueCmdList* THIS )
{
  return (RogueCmdList*)(THIS);
}

RogueCmdList* RogueCmdList__init( RogueCmdList* THIS )
{
  call_ROGUEM69( 5, (RogueCmdList*)(THIS), 10 );
  return (RogueCmdList*)(THIS);
}

RogueCmdList* RogueCmdList__init__Integer( RogueCmdList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassCmd*), true );
  return (RogueCmdList*)(THIS);
}

RogueCmdList* RogueCmdList__add__Cmd( RogueCmdList* THIS, RogueClassCmd* value_0 )
{
  ((RogueCmdList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdList*)(THIS);
}

RogueCmdList* RogueCmdList__add__CmdList( RogueCmdList* THIS, RogueCmdList* other_0 )
{
  RogueCmdList__reserve__Integer( THIS, other_0->count );
  {
    RogueCmdList* _auto_542_1 = (other_0);
    RogueInteger _auto_543_2 = (0);
    for (;_auto_543_2 < _auto_542_1->count;++_auto_543_2)
    {
      RogueClassCmd* value_3 = (((RogueClassCmd*)(_auto_542_1->data->objects[_auto_543_2])));
      RogueCmdList__add__Cmd( THIS, value_3 );
    }
  }
  return (RogueCmdList*)(THIS);
}

RogueInteger RogueCmdList__capacity( RogueCmdList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueCmdList* RogueCmdList__insert__Cmd_Integer( RogueCmdList* THIS, RogueClassCmd* value_0, RogueInteger before_index_1 )
{
  if (before_index_1 < 0)
  {
    before_index_1 = ((RogueInteger)0);
  }
  if (before_index_1 >= THIS->count)
  {
    return (RogueCmdList*)(((RogueCmdList__add__Cmd( THIS, value_0 ))));
  }
  else
  {
    RogueCmdList__add__Cmd( THIS, ((RogueClassCmd*)(THIS->data->objects[0])) );
    THIS->data->set((before_index_1 + 1),((RogueArray*)(THIS->data)),before_index_1,(THIS->count - 2));
    THIS->data->objects[before_index_1] = value_0;
  }
  return (RogueCmdList*)(THIS);
}

RogueClassCmd* RogueCmdList__last( RogueCmdList* THIS )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS->data->objects[(THIS->count - 1)])));
}

RogueCmdList* RogueCmdList__reserve__Integer( RogueCmdList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassCmd*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueCmdList__capacity( THIS ))) + ((RogueCmdList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassCmd*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdList*)(THIS);
}

RogueString* RogueTokenType__to_String( RogueClassTokenType* THIS )
{
  return (RogueString*)(THIS->name);
}

RogueString* RogueTokenType__type_name( RogueClassTokenType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[552]);
}

RogueClassTokenType* RogueTokenType__init__String( RogueClassTokenType* THIS, RogueString* _auto_78_0 )
{
  THIS->name = _auto_78_0;
  return (RogueClassTokenType*)(THIS);
}

RogueClassToken* RogueTokenType__create_token__String_Integer_Integer( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueToken__init__TokenType( ((RogueClassToken*)ROGUE_CREATE_OBJECT(Token)), THIS ))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__String_Integer_Integer_Character( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2, RogueCharacter value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueClassToken*)((RogueLiteralCharacterToken__init__TokenType_Character( ((RogueClassLiteralCharacterToken*)ROGUE_CREATE_OBJECT(LiteralCharacterToken)), THIS, value_3 )))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__String_Integer_Integer_Long( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2, RogueLong value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueClassToken*)((RogueLiteralLongToken__init__TokenType_Long( ((RogueClassLiteralLongToken*)ROGUE_CREATE_OBJECT(LiteralLongToken)), THIS, value_3 )))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__String_Integer_Integer_Integer( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2, RogueInteger value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueClassToken*)((RogueLiteralIntegerToken__init__TokenType_Integer( ((RogueClassLiteralIntegerToken*)ROGUE_CREATE_OBJECT(LiteralIntegerToken)), THIS, value_3 )))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__String_Integer_Integer_Real( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2, RogueReal value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueClassToken*)((RogueLiteralRealToken__init__TokenType_Real( ((RogueClassLiteralRealToken*)ROGUE_CREATE_OBJECT(LiteralRealToken)), THIS, value_3 )))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__String_Integer_Integer_String( RogueClassTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2, RogueString* value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueClassToken*)((RogueLiteralStringToken__init__TokenType_String( ((RogueClassLiteralStringToken*)ROGUE_CREATE_OBJECT(LiteralStringToken)), THIS, value_3 )))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueTokenType__create_token__Token_String( RogueClassTokenType* THIS, RogueClassToken* existing_0, RogueString* value_1 )
{
  return (RogueClassToken*)((call_ROGUEM72( 9, (RogueClassTokenType*)(THIS), existing_0->filepath, existing_0->line, existing_0->column, value_1 )));
}

RogueLogical RogueTokenType__is_directive( RogueClassTokenType* THIS )
{
  return (RogueLogical)(false);
}

RogueLogical RogueTokenType__is_op_with_assign( RogueClassTokenType* THIS )
{
  return (RogueLogical)(false);
}

RogueLogical RogueTokenType__is_structure( RogueClassTokenType* THIS )
{
  return (RogueLogical)(false);
}

RogueString* RogueTokenType__quoted_name( RogueClassTokenType* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[43] ))), THIS->name ))), Rogue_literal_strings[43] ))) ))));
}

RogueString* RogueTokenType__to_String__Token( RogueClassTokenType* THIS, RogueClassToken* t_0 )
{
  return (RogueString*)(THIS->name);
}

RogueClassTokenType* RogueTokenType__init_object( RogueClassTokenType* THIS )
{
  return (RogueClassTokenType*)(THIS);
}

RogueString* RogueCmdLabel__type_name( RogueClassCmdLabel* THIS )
{
  return (RogueString*)(Rogue_literal_strings[646]);
}

RogueClassCmdLabel* RogueCmdLabel__clone__CloneArgs( RogueClassCmdLabel* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdLabel* result_1 = (((RogueCmdLabel__init__Token_String_CmdStatementList( ((RogueClassCmdLabel*)ROGUE_CREATE_OBJECT(CmdLabel)), THIS->t, THIS->name, ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 ))) ))));
  if (!!(clone_args_0))
  {
    call_ROGUEM144( 3, (RogueClassCloneArgs*)(clone_args_0), result_1 );
  }
  return (RogueClassCmdLabel*)(result_1);
}

RogueLogical RogueCmdLabel__requires_semicolon( RogueClassCmdLabel* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdLabel__resolve__Scope( RogueClassCmdLabel* THIS, RogueClassScope* scope_0 )
{
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdLabel__trace_used_code( RogueClassCmdLabel* THIS )
{
  RogueCmdStatementList__trace_used_code( THIS->statements );
}

void RogueCmdLabel__write_cpp__CPPWriter_Logical( RogueClassCmdLabel* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, is_statement_1 );
}

RogueClassCmdLabel* RogueCmdLabel__init_object( RogueClassCmdLabel* THIS )
{
  return (RogueClassCmdLabel*)(THIS);
}

RogueClassCmdLabel* RogueCmdLabel__init__Token_String_CmdStatementList( RogueClassCmdLabel* THIS, RogueClassToken* _auto_79_0, RogueString* _auto_80_1, RogueClassCmdStatementList* _auto_81_2 )
{
  THIS->statements = _auto_81_2;
  THIS->name = _auto_80_1;
  THIS->t = _auto_79_0;
  return (RogueClassCmdLabel*)(THIS);
}

RogueString* RogueRequisiteItemArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[599]);
}

RogueString* RogueRogueError__to_String( RogueClassRogueError* THIS )
{
  RogueStringBuilder* builder_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueString* m_1 = (((RogueStringList__joined__String( ((RogueString__word_wrapped__Integer( THIS->message, 79 ))), Rogue_literal_strings[15] ))));
  if (!!(THIS->filepath))
  {
    RogueStringBuilder__println__String( builder_0, Rogue_literal_strings[631] );
    RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( builder_0, Rogue_literal_strings[632] ))), (RogueFile__filename__String( THIS->filepath )) );
    RogueStringBuilder__println__Integer( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__Integer( ((RogueStringBuilder__print__String( builder_0, Rogue_literal_strings[633] ))), THIS->line ))), Rogue_literal_strings[634] ))), THIS->column );
    RogueStringBuilder__println( builder_0 );
    RogueStringBuilder__println__String( builder_0, m_1 );
    RogueStringBuilder__println__String( builder_0, Rogue_literal_strings[631] );
  }
  else
  {
    RogueStringBuilder__println__String( builder_0, Rogue_literal_strings[631] );
    RogueStringBuilder__print__String( builder_0, Rogue_literal_strings[635] );
    RogueStringBuilder__println( builder_0 );
    RogueStringBuilder__println__String( builder_0, m_1 );
    RogueStringBuilder__println__String( builder_0, Rogue_literal_strings[631] );
  }
  return (RogueString*)(((RogueStringBuilder__to_String( builder_0 ))));
}

RogueString* RogueRogueError__type_name( RogueClassRogueError* THIS )
{
  return (RogueString*)(Rogue_literal_strings[636]);
}

RogueClassRogueError* RogueRogueError__init_object( RogueClassRogueError* THIS )
{
  return (RogueClassRogueError*)(THIS);
}

RogueClassRogueError* RogueRogueError__init__String_String_Integer_Integer( RogueClassRogueError* THIS, RogueString* _auto_84_0, RogueString* _auto_85_1, RogueInteger _auto_86_2, RogueInteger _auto_87_3 )
{
  THIS->column = _auto_87_3;
  THIS->line = _auto_86_2;
  THIS->filepath = _auto_85_1;
  THIS->message = _auto_84_0;
  return (RogueClassRogueError*)(THIS);
}

RogueString* RogueTemplateArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[600]);
}

RogueString* RogueMethodList__to_String( RogueMethodList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueMethodList* _auto_557_2 = (THIS);
    RogueInteger _auto_558_3 = (0);
    for (;_auto_558_3 < _auto_557_2->count;++_auto_558_3)
    {
      RogueClassMethod* value_4 = (((RogueClassMethod*)(_auto_557_2->data->objects[_auto_558_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ((RogueMethod__to_String( value_4 ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueMethodList__type_name( RogueMethodList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[927]);
}

RogueMethodList* RogueMethodList__init_object( RogueMethodList* THIS )
{
  return (RogueMethodList*)(THIS);
}

RogueMethodList* RogueMethodList__init( RogueMethodList* THIS )
{
  RogueMethodList__init__Integer( THIS, 10 );
  return (RogueMethodList*)(THIS);
}

RogueMethodList* RogueMethodList__init__Integer( RogueMethodList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassMethod*), true );
  return (RogueMethodList*)(THIS);
}

RogueMethodList* RogueMethodList__add__Method( RogueMethodList* THIS, RogueClassMethod* value_0 )
{
  ((RogueMethodList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueMethodList*)(THIS);
}

RogueMethodList* RogueMethodList__add__MethodList( RogueMethodList* THIS, RogueMethodList* other_0 )
{
  RogueMethodList__reserve__Integer( THIS, other_0->count );
  {
    RogueMethodList* _auto_561_1 = (other_0);
    RogueInteger _auto_562_2 = (0);
    for (;_auto_562_2 < _auto_561_1->count;++_auto_562_2)
    {
      RogueClassMethod* value_3 = (((RogueClassMethod*)(_auto_561_1->data->objects[_auto_562_2])));
      RogueMethodList__add__Method( THIS, value_3 );
    }
  }
  return (RogueMethodList*)(THIS);
}

RogueInteger RogueMethodList__capacity( RogueMethodList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueMethodList* RogueMethodList__clear( RogueMethodList* THIS )
{
  THIS->count = 0;
  return (RogueMethodList*)(THIS);
}

RogueOptionalInteger RogueMethodList__locate__Method( RogueMethodList* THIS, RogueClassMethod* value_0 )
{
  {
    RogueMethodList* _auto_565_1 = (THIS);
    RogueInteger i_2 = (0);
    for (;i_2 < _auto_565_1->count;++i_2)
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)value_0), ((RogueObject*)(((RogueClassMethod*)(THIS->data->objects[i_2])))) ))))
      {
        return (RogueOptionalInteger)(RogueOptionalInteger( i_2 ));
      }
    }
  }
  return (RogueOptionalInteger)(RogueOptionalInteger());
}

RogueMethodList* RogueMethodList__reserve__Integer( RogueMethodList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassMethod*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueMethodList__capacity( THIS ))) + ((RogueMethodList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassMethod*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueMethodList*)(THIS);
}

RogueClassMethod* RogueMethodList__remove__Method( RogueMethodList* THIS, RogueClassMethod* value_0 )
{
  RogueOptionalInteger index_1 = (((RogueMethodList__locate__Method( THIS, value_0 ))));
  if (index_1.exists)
  {
    return (RogueClassMethod*)(((RogueMethodList__remove_at__Integer( THIS, index_1.value ))));
  }
  else
  {
    RogueClassMethod* zero_value_2 = 0;
    return (RogueClassMethod*)(zero_value_2);
  }
}

RogueClassMethod* RogueMethodList__remove_at__Integer( RogueMethodList* THIS, RogueInteger index_0 )
{
  RogueClassMethod* result_1 = (((RogueClassMethod*)(THIS->data->objects[index_0])));
  THIS->data->set(index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  RogueClassMethod* zero_value_2 = 0;
  THIS->data->objects[THIS->count] = zero_value_2;
  --THIS->count;
  return (RogueClassMethod*)(result_1);
}

RogueString* RogueMethodArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[601]);
}

RogueString* RogueCPPWriter__type_name( RogueClassCPPWriter* THIS )
{
  return (RogueString*)(Rogue_literal_strings[553]);
}

RogueClassCPPWriter* RogueCPPWriter__init__String( RogueClassCPPWriter* THIS, RogueString* _auto_119_0 )
{
  THIS->filepath = _auto_119_0;
  return (RogueClassCPPWriter*)(THIS);
}

void RogueCPPWriter__close( RogueClassCPPWriter* THIS )
{
  RogueFile__save__String_String( ((RogueFile__init__String( ((RogueClassFile*)ROGUE_CREATE_OBJECT(File)), THIS->filepath )))->filepath, ((RogueStringBuilder__to_String( THIS->buffer ))) );
}

void RogueCPPWriter__print_indent( RogueClassCPPWriter* THIS )
{
  if (THIS->needs_indent)
  {
    THIS->needs_indent = false;
    {
      RogueInteger _auto_117_0 = (1);
      RogueInteger _auto_118_1 = (THIS->indent);
      for (;_auto_117_0 <= _auto_118_1;++_auto_117_0)
      {
        RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)' ' );
      }
    }
  }
}

RogueClassCPPWriter* RogueCPPWriter__print__Long( RogueClassCPPWriter* THIS, RogueLong value_0 )
{
  RogueCPPWriter__print_indent( THIS );
  RogueStringBuilder__print__Long( THIS->buffer, value_0 );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print__Integer( RogueClassCPPWriter* THIS, RogueInteger value_0 )
{
  RogueCPPWriter__print_indent( THIS );
  RogueStringBuilder__print__Integer( THIS->buffer, value_0 );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print__Real( RogueClassCPPWriter* THIS, RogueReal value_0 )
{
  RogueCPPWriter__print_indent( THIS );
  RogueStringBuilder__print__Real( THIS->buffer, value_0 );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print__String( RogueClassCPPWriter* THIS, RogueString* value_0 )
{
  RogueLogical needs_newline_1 = (false);
  if (((RogueString__contains__String( value_0, ((RogueCharacter__to_String( (RogueCharacter)10 ))) ))))
  {
    {
      RogueClassLineReader* _auto_567_2 = (((RogueLineReader__init__String( ((RogueClassLineReader*)ROGUE_CREATE_OBJECT(LineReader)), value_0 ))));
      while (((RogueLineReader__has_another( _auto_567_2 ))))
      {
        RogueString* line_3 = (((RogueLineReader__read( _auto_567_2 ))));
        if (needs_newline_1)
        {
          RogueCPPWriter__println( THIS );
        }
        RogueCPPWriter__print_indent( THIS );
        RogueStringBuilder__print__String( THIS->buffer, line_3 );
        needs_newline_1 = ((RogueLogical)true);
      }
    }
  }
  else
  {
    RogueCPPWriter__print_indent( THIS );
    RogueStringBuilder__print__String( THIS->buffer, value_0 );
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_code__String( RogueClassCPPWriter* THIS, RogueString* code_0 )
{
  {
    RogueClassLineReader* _auto_568_2 = (((RogueLineReader__init__String( ((RogueClassLineReader*)ROGUE_CREATE_OBJECT(LineReader)), code_0 ))));
    while (((RogueLineReader__has_another( _auto_568_2 ))))
    {
      RogueString* line_3 = (((RogueLineReader__read( _auto_568_2 ))));
      RogueInteger original_indent_1 = (THIS->indent);
      if (((RogueString__begins_with__Character( line_3, (RogueCharacter)'#' ))))
      {
        THIS->indent = 0;
      }
      RogueCPPWriter__println__String( THIS, line_3 );
      THIS->indent = original_indent_1;
    }
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__println( RogueClassCPPWriter* THIS )
{
  RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)10 );
  THIS->needs_indent = true;
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__println__String( RogueClassCPPWriter* THIS, RogueString* value_0 )
{
  RogueCPPWriter__print__String( THIS, value_0 );
  RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)10 );
  THIS->needs_indent = true;
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print__Type( RogueClassCPPWriter* THIS, RogueClassType* type_0 )
{
  if (((!!(type_0) && type_0->is_optional) && ((RogueType__is_reference( type_0->_element_type )))))
  {
    return (RogueClassCPPWriter*)(((RogueCPPWriter__print__Type( THIS, type_0->_element_type ))));
  }
  else
  {
    RogueCPPWriter__print_type_name__Type( THIS, type_0 );
    if ((!!(type_0) && ((RogueType__is_reference( type_0 )))))
    {
      RogueStringBuilder__print__String( THIS->buffer, Rogue_literal_strings[191] );
    }
    return (RogueClassCPPWriter*)(THIS);
  }
}

RogueClassCPPWriter* RogueCPPWriter__print_cast__Type_Type( RogueClassCPPWriter* THIS, RogueClassType* from_type_0, RogueClassType* to_type_1 )
{
  if (from_type_0 == to_type_1)
  {
    return (RogueClassCPPWriter*)(THIS);
  }
  return (RogueClassCPPWriter*)(((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( THIS, Rogue_literal_strings[176] ))), to_type_1 ))), Rogue_literal_strings[100] ))));
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_open_cast__Type_Type( RogueClassCPPWriter* THIS, RogueClassType* from_type_0, RogueClassType* to_type_1 )
{
  if (from_type_0 == to_type_1)
  {
    return (RogueClassCPPWriter*)(THIS);
  }
  RogueCPPWriter__print__String( THIS, Rogue_literal_strings[176] );
  return (RogueClassCPPWriter*)(((RogueCPPWriter__print_cast__Type_Type( THIS, from_type_0, to_type_1 ))));
}

RogueClassCPPWriter* RogueCPPWriter__print_close_cast__Type_Type( RogueClassCPPWriter* THIS, RogueClassType* from_type_0, RogueClassType* to_type_1 )
{
  if (from_type_0 == to_type_1)
  {
    return (RogueClassCPPWriter*)(THIS);
  }
  RogueCPPWriter__print__String( THIS, Rogue_literal_strings[100] );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_cast__Type_Type_Cmd( RogueClassCPPWriter* THIS, RogueClassType* from_type_0, RogueClassType* to_type_1, RogueClassCmd* cmd_2 )
{
  if (from_type_0 == to_type_1)
  {
    call_ROGUEM52( 28, (RogueClassCmd*)(cmd_2), THIS, false );
  }
  else
  {
    RogueCPPWriter__print__String( THIS, Rogue_literal_strings[176] );
    RogueCPPWriter__print_cast__Type_Type( THIS, from_type_0, to_type_1 );
    call_ROGUEM52( 28, (RogueClassCmd*)(cmd_2), THIS, false );
    RogueCPPWriter__print__String( THIS, Rogue_literal_strings[100] );
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_access_operator__Type( RogueClassCPPWriter* THIS, RogueClassType* type_0 )
{
  if (((RogueType__is_reference( type_0 ))))
  {
    return (RogueClassCPPWriter*)(((RogueCPPWriter__print__String( THIS, Rogue_literal_strings[150] ))));
  }
  else
  {
    return (RogueClassCPPWriter*)(((RogueCPPWriter__print__String( THIS, Rogue_literal_strings[44] ))));
  }
}

RogueClassCPPWriter* RogueCPPWriter__print_type_name__Type( RogueClassCPPWriter* THIS, RogueClassType* type_0 )
{
  RogueCPPWriter__print_indent( THIS );
  if (!!(type_0))
  {
    RogueStringBuilder__print__String( THIS->buffer, type_0->cpp_class_name );
  }
  else
  {
    RogueStringBuilder__print__String( THIS->buffer, Rogue_literal_strings[399] );
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_type_info__Type( RogueClassCPPWriter* THIS, RogueClassType* type_0 )
{
  RogueCPPWriter__print_indent( THIS );
  RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( THIS->buffer, Rogue_literal_strings[392] ))), type_0->cpp_name );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_default_value__Type( RogueClassCPPWriter* THIS, RogueClassType* type_0 )
{
  if (((type_0->is_optional && ((RogueType__is_reference( type_0->_element_type )))) || !(((RogueType__is_compound( type_0 ))))))
  {
    RogueStringBuilder__print__String( THIS->buffer, Rogue_literal_strings[406] );
  }
  else
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( THIS, type_0 ))), Rogue_literal_strings[254] );
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print__Character_Logical( RogueClassCPPWriter* THIS, RogueCharacter ch_0, RogueLogical in_string_1 )
{
  if (((RogueInteger)(ch_0)) < 128)
  {
    if ((((RogueInteger)(ch_0)) >= 32 && ((RogueInteger)(ch_0)) <= 126))
    {
      switch (((RogueInteger)(ch_0)))
      {
        case (RogueCharacter)'"':
        {
          if (in_string_1)
          {
            RogueCPPWriter__print__String( THIS, Rogue_literal_strings[494] );
          }
          else
          {
            RogueCPPWriter__print__String( THIS, Rogue_literal_strings[495] );
          }
          break;
        }
        case (RogueCharacter)'\'':
        {
          if (in_string_1)
          {
            RogueCPPWriter__print__String( THIS, Rogue_literal_strings[43] );
          }
          else
          {
            RogueCPPWriter__print__String( THIS, Rogue_literal_strings[496] );
          }
          break;
        }
        case (RogueCharacter)'\\':
        {
          RogueCPPWriter__print__String( THIS, Rogue_literal_strings[497] );
          break;
        }
        default:
        {
          RogueCPPWriter__print__String( THIS, ((RogueString__operatorPLUS__Character( Rogue_literal_strings[0], ch_0 ))) );
        }
      }
    }
    else
    {
      switch (((RogueInteger)(ch_0)))
      {
        case 10:
        {
          RogueCPPWriter__print__String( THIS, Rogue_literal_strings[498] );
          break;
        }
        default:
        {
          RogueCPPWriter__print__String( THIS, Rogue_literal_strings[152] );
          RogueCPPWriter__print__String( THIS, ((RogueString__operatorPLUS__Integer( Rogue_literal_strings[0], (((RogueInteger)(ch_0)) / 64) ))) );
          RogueCPPWriter__print__String( THIS, ((RogueString__operatorPLUS__Integer( Rogue_literal_strings[0], ((((RogueInteger)(ch_0)) & 63) / 8) ))) );
          RogueCPPWriter__print__String( THIS, ((RogueString__operatorPLUS__Integer( Rogue_literal_strings[0], (((RogueInteger)(ch_0)) & 7) ))) );
        }
      }
    }
  }
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__print_string_utf8__String( RogueClassCPPWriter* THIS, RogueString* st_0 )
{
  if (st_0 == NULL)
  {
    RogueCPPWriter__print__String( THIS, Rogue_literal_strings[406] );
    return (RogueClassCPPWriter*)(THIS);
  }
  RogueCPPWriter__print__String( THIS, Rogue_literal_strings[495] );
  {
    RogueString* _auto_569_1 = (st_0);
    RogueInteger _auto_570_2 = (0);
    for (;_auto_570_2 < _auto_569_1->count;++_auto_570_2)
    {
      RogueCharacter ch_3 = (_auto_569_1->characters[_auto_570_2]);
      RogueCPPWriter__print__Character_Logical( THIS, ch_3, true );
    }
  }
  RogueCPPWriter__print__String( THIS, Rogue_literal_strings[495] );
  return (RogueClassCPPWriter*)(THIS);
}

RogueClassCPPWriter* RogueCPPWriter__init_object( RogueClassCPPWriter* THIS )
{
  THIS->buffer = ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) )));
  THIS->indent = 0;
  THIS->needs_indent = true;
  THIS->temp_buffer = ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) )));
  return (RogueClassCPPWriter*)(THIS);
}

RogueString* RoguePropertyList__to_String( RoguePropertyList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RoguePropertyList* _auto_571_2 = (THIS);
    RogueInteger _auto_572_3 = (0);
    for (;_auto_572_3 < _auto_571_2->count;++_auto_572_3)
    {
      RogueClassProperty* value_4 = (((RogueClassProperty*)(_auto_571_2->data->objects[_auto_572_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ((RogueProperty__to_String( value_4 ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RoguePropertyList__type_name( RoguePropertyList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[928]);
}

RoguePropertyList* RoguePropertyList__init_object( RoguePropertyList* THIS )
{
  return (RoguePropertyList*)(THIS);
}

RoguePropertyList* RoguePropertyList__init( RoguePropertyList* THIS )
{
  RoguePropertyList__init__Integer( THIS, 10 );
  return (RoguePropertyList*)(THIS);
}

RoguePropertyList* RoguePropertyList__init__Integer( RoguePropertyList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassProperty*), true );
  return (RoguePropertyList*)(THIS);
}

RoguePropertyList* RoguePropertyList__add__Property( RoguePropertyList* THIS, RogueClassProperty* value_0 )
{
  ((RoguePropertyList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RoguePropertyList*)(THIS);
}

RogueInteger RoguePropertyList__capacity( RoguePropertyList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RoguePropertyList* RoguePropertyList__clear( RoguePropertyList* THIS )
{
  THIS->count = 0;
  return (RoguePropertyList*)(THIS);
}

RogueOptionalInteger RoguePropertyList__locate__Property( RoguePropertyList* THIS, RogueClassProperty* value_0 )
{
  {
    RoguePropertyList* _auto_579_1 = (THIS);
    RogueInteger i_2 = (0);
    for (;i_2 < _auto_579_1->count;++i_2)
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)value_0), ((RogueObject*)(((RogueClassProperty*)(THIS->data->objects[i_2])))) ))))
      {
        return (RogueOptionalInteger)(RogueOptionalInteger( i_2 ));
      }
    }
  }
  return (RogueOptionalInteger)(RogueOptionalInteger());
}

RoguePropertyList* RoguePropertyList__reserve__Integer( RoguePropertyList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassProperty*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RoguePropertyList__capacity( THIS ))) + ((RoguePropertyList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassProperty*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RoguePropertyList*)(THIS);
}

RogueString* RogueProperty__to_String( RogueClassProperty* THIS )
{
  return (RogueString*)(THIS->name);
}

RogueString* RogueProperty__type_name( RogueClassProperty* THIS )
{
  return (RogueString*)(Rogue_literal_strings[554]);
}

RogueClassProperty* RogueProperty__init__Token_Type_String_Type_Cmd( RogueClassProperty* THIS, RogueClassToken* _auto_128_0, RogueClassType* _auto_129_1, RogueString* _auto_130_2, RogueClassType* _auto_131_3, RogueClassCmd* _auto_132_4 )
{
  THIS->initial_value = _auto_132_4;
  THIS->_type = _auto_131_3;
  THIS->name = _auto_130_2;
  RogueProperty__set_type_context__Type( THIS, _auto_129_1 );
  THIS->t = _auto_128_0;
  return (RogueClassProperty*)(THIS);
}

RogueClassProperty* RogueProperty__clone( RogueClassProperty* THIS )
{
  RogueClassProperty* result_0 = (((RogueProperty__init__Token_Type_String_Type_Cmd( ((RogueClassProperty*)ROGUE_CREATE_OBJECT(Property)), THIS->t, THIS->type_context, THIS->name, ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
  result_0->cpp_name = THIS->cpp_name;
  result_0->_type = THIS->_type;
  result_0->attributes = THIS->attributes;
  if (!!(THIS->initial_value))
  {
    result_0->initial_value = (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->initial_value), ((RogueClassCloneArgs*)(NULL)) ));
  }
  return (RogueClassProperty*)(result_0);
}

RogueClassProperty* RogueProperty__set_type_context__Type( RogueClassProperty* THIS, RogueClassType* _auto_133_0 )
{
  THIS->type_context = _auto_133_0;
  return (RogueClassProperty*)(THIS);
}

RogueClassProperty* RogueProperty__init_object( RogueClassProperty* THIS )
{
  return (RogueClassProperty*)(THIS);
}

RogueString* RoguePropertyArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[602]);
}

RogueString* RogueString_MethodTable__to_String( RogueClassString_MethodTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_MethodTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_MethodTable__type_name( RogueClassString_MethodTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[555]);
}

RogueClassString_MethodTable* RogueString_MethodTable__init( RogueClassString_MethodTable* THIS )
{
  RogueString_MethodTable__init__Integer( THIS, 16 );
  return (RogueClassString_MethodTable*)(THIS);
}

RogueClassString_MethodTable* RogueString_MethodTable__init__Integer( RogueClassString_MethodTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_MethodTableEntryList__init__Integer_String_MethodTableEntry( ((RogueTableEntry_of_String_MethodList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_MethodList)), bin_count_0, ((RogueClassString_MethodTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_MethodTable*)(THIS);
}

void RogueString_MethodTable__clear( RogueClassString_MethodTable* THIS )
{
  {
    RogueTableEntry_of_String_MethodList* _auto_584_0 = (THIS->bins);
    RogueInteger i_1 = (0);
    for (;i_1 < _auto_584_0->count;++i_1)
    {
      THIS->bins->data->objects[i_1] = ((RogueClassString_MethodTableEntry*)(NULL));
    }
  }
  RogueStringList__clear( THIS->keys );
}

RogueClassString_MethodTableEntry* RogueString_MethodTable__find__String( RogueClassString_MethodTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_MethodTableEntry* entry_2 = (((RogueClassString_MethodTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_MethodTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_MethodTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_MethodTableEntry*)(((RogueClassString_MethodTableEntry*)(NULL)));
}

RogueClassMethod* RogueString_MethodTable__get__String( RogueClassString_MethodTable* THIS, RogueString* key_0 )
{
  RogueClassString_MethodTableEntry* entry_1 = (((RogueString_MethodTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassMethod*)(entry_1->value);
  }
  else
  {
    RogueClassMethod* default_value_2 = 0;
    return (RogueClassMethod*)(default_value_2);
  }
}

void RogueString_MethodTable__set__String_Method( RogueClassString_MethodTable* THIS, RogueString* key_0, RogueClassMethod* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_MethodTableEntry* entry_4 = (((RogueClassString_MethodTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_MethodTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_MethodTableEntry*)((RogueString_MethodTableEntry__init__String_Method_Integer( ((RogueClassString_MethodTableEntry*)ROGUE_CREATE_OBJECT(String_MethodTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_MethodTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_MethodTable__print_to__StringBuilder( RogueClassString_MethodTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_MethodTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_MethodTable* RogueString_MethodTable__init_object( RogueClassString_MethodTable* THIS )
{
  return (RogueClassString_MethodTable*)(THIS);
}

RogueString* RogueLocalList__to_String( RogueLocalList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueLocalList* _auto_585_2 = (THIS);
    RogueInteger _auto_586_3 = (0);
    for (;_auto_586_3 < _auto_585_2->count;++_auto_586_3)
    {
      RogueClassLocal* value_4 = (((RogueClassLocal*)(_auto_585_2->data->objects[_auto_586_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueLocalList__type_name( RogueLocalList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[929]);
}

RogueLocalList* RogueLocalList__init_object( RogueLocalList* THIS )
{
  return (RogueLocalList*)(THIS);
}

RogueLocalList* RogueLocalList__init( RogueLocalList* THIS )
{
  RogueLocalList__init__Integer( THIS, 10 );
  return (RogueLocalList*)(THIS);
}

RogueLocalList* RogueLocalList__init__Integer( RogueLocalList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassLocal*), true );
  return (RogueLocalList*)(THIS);
}

RogueLocalList* RogueLocalList__add__Local( RogueLocalList* THIS, RogueClassLocal* value_0 )
{
  ((RogueLocalList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueLocalList*)(THIS);
}

RogueInteger RogueLocalList__capacity( RogueLocalList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueLocalList* RogueLocalList__clear( RogueLocalList* THIS )
{
  THIS->count = 0;
  return (RogueLocalList*)(THIS);
}

RogueLocalList* RogueLocalList__reserve__Integer( RogueLocalList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassLocal*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueLocalList__capacity( THIS ))) + ((RogueLocalList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassLocal*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueLocalList*)(THIS);
}

RogueClassLocal* RogueLocalList__remove_at__Integer( RogueLocalList* THIS, RogueInteger index_0 )
{
  RogueClassLocal* result_1 = (((RogueClassLocal*)(THIS->data->objects[index_0])));
  THIS->data->set(index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  RogueClassLocal* zero_value_2 = 0;
  THIS->data->objects[THIS->count] = zero_value_2;
  --THIS->count;
  return (RogueClassLocal*)(result_1);
}

RogueClassLocal* RogueLocalList__remove_last( RogueLocalList* THIS )
{
  return (RogueClassLocal*)(((RogueLocalList__remove_at__Integer( THIS, (THIS->count - 1) ))));
}

RogueString* RogueLocal__type_name( RogueClassLocal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[556]);
}

RogueClassLocal* RogueLocal__init__Token_String( RogueClassLocal* THIS, RogueClassToken* _auto_151_0, RogueString* _auto_152_1 )
{
  THIS->name = _auto_152_1;
  THIS->t = _auto_151_0;
  return (RogueClassLocal*)(THIS);
}

RogueClassLocal* RogueLocal__clone__CloneArgs( RogueClassLocal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassLocal* result_1 = (((RogueLocal__init__Token_String( ((RogueClassLocal*)ROGUE_CREATE_OBJECT(Local)), THIS->t, THIS->name ))));
  result_1->_cpp_name = THIS->_cpp_name;
  result_1->_type = THIS->_type;
  result_1->index = THIS->index;
  if (!!(THIS->initial_value))
  {
    result_1->initial_value = (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->initial_value), clone_args_0 ));
  }
  return (RogueClassLocal*)(result_1);
}

RogueString* RogueLocal__cpp_name( RogueClassLocal* THIS )
{
  if (!(!!(THIS->_cpp_name)))
  {
    THIS->_cpp_name = ((RogueProgram__validate_cpp_name__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ((RogueString__operatorPLUS__Integer( ((RogueString__operatorPLUS__String( THIS->name, Rogue_literal_strings[354] ))), THIS->index ))) )));
  }
  return (RogueString*)(THIS->_cpp_name);
}

RogueClassLocal* RogueLocal__init_object( RogueClassLocal* THIS )
{
  return (RogueClassLocal*)(THIS);
}

RogueString* RogueLocalArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[603]);
}

RogueString* RogueIntegerList__to_String( RogueIntegerList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueIntegerList* _auto_595_2 = (THIS);
    RogueInteger _auto_596_3 = (0);
    for (;_auto_596_3 < _auto_595_2->count;++_auto_596_3)
    {
      RogueInteger value_4 = (_auto_595_2->data->integers[_auto_596_3]);
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (false)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ((RogueInteger__to_String( value_4 ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueIntegerList__type_name( RogueIntegerList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[930]);
}

RogueIntegerList* RogueIntegerList__init_object( RogueIntegerList* THIS )
{
  return (RogueIntegerList*)(THIS);
}

RogueIntegerList* RogueIntegerList__init( RogueIntegerList* THIS )
{
  RogueIntegerList__init__Integer( THIS, 10 );
  return (RogueIntegerList*)(THIS);
}

RogueIntegerList* RogueIntegerList__init__Integer( RogueIntegerList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueInteger) );
  return (RogueIntegerList*)(THIS);
}

RogueIntegerList* RogueIntegerList__add__Integer( RogueIntegerList* THIS, RogueInteger value_0 )
{
  ((RogueIntegerList__reserve__Integer( THIS, 1 )))->data->integers[THIS->count] = value_0;
  ++THIS->count;
  return (RogueIntegerList*)(THIS);
}

RogueInteger RogueIntegerList__capacity( RogueIntegerList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueIntegerList* RogueIntegerList__reserve__Integer( RogueIntegerList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueInteger) );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueIntegerList__capacity( THIS ))) + ((RogueIntegerList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueInteger) ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueIntegerList*)(THIS);
}

RogueString* RogueIntegerArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[604]);
}

RogueString* RogueByteList__to_String( RogueByteList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueByteList* _auto_605_2 = (THIS);
    RogueInteger _auto_606_3 = (0);
    for (;_auto_606_3 < _auto_605_2->count;++_auto_606_3)
    {
      RogueByte value_4 = (_auto_605_2->data->bytes[_auto_606_3]);
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (false)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, ((RogueByte__to_String( value_4 ))) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueByteList__type_name( RogueByteList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[931]);
}

RogueByteList* RogueByteList__init_object( RogueByteList* THIS )
{
  return (RogueByteList*)(THIS);
}

RogueByteList* RogueByteList__init( RogueByteList* THIS )
{
  RogueByteList__init__Integer( THIS, 10 );
  return (RogueByteList*)(THIS);
}

RogueByteList* RogueByteList__init__Integer( RogueByteList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueByte) );
  return (RogueByteList*)(THIS);
}

RogueByteList* RogueByteList__add__Byte( RogueByteList* THIS, RogueByte value_0 )
{
  ((RogueByteList__reserve__Integer( THIS, 1 )))->data->bytes[THIS->count] = value_0;
  ++THIS->count;
  return (RogueByteList*)(THIS);
}

RogueInteger RogueByteList__capacity( RogueByteList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueByteList* RogueByteList__clear( RogueByteList* THIS )
{
  THIS->count = 0;
  return (RogueByteList*)(THIS);
}

RogueByteList* RogueByteList__insert__Byte_Integer( RogueByteList* THIS, RogueByte value_0, RogueInteger before_index_1 )
{
  if (before_index_1 < 0)
  {
    before_index_1 = ((RogueInteger)0);
  }
  if (before_index_1 >= THIS->count)
  {
    return (RogueByteList*)(((RogueByteList__add__Byte( THIS, value_0 ))));
  }
  else
  {
    RogueByteList__add__Byte( THIS, THIS->data->bytes[0] );
    THIS->data->set((before_index_1 + 1),((RogueArray*)(THIS->data)),before_index_1,(THIS->count - 2));
    THIS->data->bytes[before_index_1] = value_0;
  }
  return (RogueByteList*)(THIS);
}

RogueByteList* RogueByteList__reserve__Integer( RogueByteList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueByte) );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueByteList__capacity( THIS ))) + ((RogueByteList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueByte) ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueByteList*)(THIS);
}

RogueByte RogueByteList__remove_at__Integer( RogueByteList* THIS, RogueInteger index_0 )
{
  RogueByte result_1 = (THIS->data->bytes[index_0]);
  THIS->data->set(index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  RogueByte zero_value_2 = 0;
  THIS->data->bytes[THIS->count] = zero_value_2;
  --THIS->count;
  return (RogueByte)(result_1);
}

RogueByte RogueByteList__remove_last( RogueByteList* THIS )
{
  return (RogueByte)(((RogueByteList__remove_at__Integer( THIS, (THIS->count - 1) ))));
}

RogueByteList* RogueByteList__reverse( RogueByteList* THIS )
{
  return (RogueByteList*)(((RogueByteList__reverse__Integer_Integer( THIS, 0, (THIS->count - 1) ))));
}

RogueByteList* RogueByteList__reverse__Integer_Integer( RogueByteList* THIS, RogueInteger i1_0, RogueInteger i2_1 )
{
  if (i1_0 < 0)
  {
    i1_0 = ((RogueInteger)0);
  }
  if (i2_1 >= THIS->count)
  {
    i2_1 = ((RogueInteger)(THIS->count - 1));
  }
  RogueArray* _data_2 = (THIS->data);
  while (i1_0 < i2_1)
  {
    RogueByte temp_3 = (_data_2->bytes[i1_0]);
    _data_2->bytes[i1_0] = _data_2->bytes[i2_1];
    _data_2->bytes[i2_1] = temp_3;
    ++i1_0;
    --i2_1;
  }
  return (RogueByteList*)(THIS);
}

RogueString* RogueMath__type_name( RogueClassMath* THIS )
{
  return (RogueString*)(Rogue_literal_strings[557]);
}

RogueClassMath* RogueMath__init_object( RogueClassMath* THIS )
{
  return (RogueClassMath*)(THIS);
}

RogueString* RogueByteArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[605]);
}

RogueString* RogueCharacterArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[606]);
}

RogueString* RogueSystem__type_name( RogueClassSystem* THIS )
{
  return (RogueString*)(Rogue_literal_strings[558]);
}

RogueClassSystem* RogueSystem__init_object( RogueClassSystem* THIS )
{
  return (RogueClassSystem*)(THIS);
}

RogueString* RogueString_LogicalTable__to_String( RogueClassString_LogicalTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_LogicalTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_LogicalTable__type_name( RogueClassString_LogicalTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[559]);
}

RogueClassString_LogicalTable* RogueString_LogicalTable__init( RogueClassString_LogicalTable* THIS )
{
  RogueString_LogicalTable__init__Integer( THIS, 16 );
  return (RogueClassString_LogicalTable*)(THIS);
}

RogueClassString_LogicalTable* RogueString_LogicalTable__init__Integer( RogueClassString_LogicalTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_LogicalTableEntryList__init__Integer_String_LogicalTableEntry( ((RogueTableEntry_of_String_LogicalList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_LogicalList)), bin_count_0, ((RogueClassString_LogicalTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_LogicalTable*)(THIS);
}

RogueLogical RogueString_LogicalTable__contains__String( RogueClassString_LogicalTable* THIS, RogueString* key_0 )
{
  return (RogueLogical)(!!(((RogueString_LogicalTable__find__String( THIS, key_0 )))));
}

RogueClassString_LogicalTableEntry* RogueString_LogicalTable__find__String( RogueClassString_LogicalTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_LogicalTableEntry* entry_2 = (((RogueClassString_LogicalTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_LogicalTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_LogicalTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_LogicalTableEntry*)(((RogueClassString_LogicalTableEntry*)(NULL)));
}

RogueLogical RogueString_LogicalTable__get__String( RogueClassString_LogicalTable* THIS, RogueString* key_0 )
{
  RogueClassString_LogicalTableEntry* entry_1 = (((RogueString_LogicalTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueLogical)(entry_1->value);
  }
  else
  {
    RogueLogical default_value_2 = 0;
    return (RogueLogical)(default_value_2);
  }
}

void RogueString_LogicalTable__set__String_Logical( RogueClassString_LogicalTable* THIS, RogueString* key_0, RogueLogical value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_LogicalTableEntry* entry_4 = (((RogueClassString_LogicalTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_LogicalTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_LogicalTableEntry*)((RogueString_LogicalTableEntry__init__String_Logical_Integer( ((RogueClassString_LogicalTableEntry*)ROGUE_CREATE_OBJECT(String_LogicalTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_LogicalTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_LogicalTable__print_to__StringBuilder( RogueClassString_LogicalTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Logical( buffer_0, ((RogueString_LogicalTable__get__String( THIS, key_2 ))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_LogicalTable* RogueString_LogicalTable__init_object( RogueClassString_LogicalTable* THIS )
{
  return (RogueClassString_LogicalTable*)(THIS);
}

RogueString* RogueFile__to_String( RogueClassFile* THIS )
{
  return (RogueString*)(THIS->filepath);
}

RogueString* RogueFile__type_name( RogueClassFile* THIS )
{
  return (RogueString*)(Rogue_literal_strings[560]);
}

RogueClassFile* RogueFile__init__String( RogueClassFile* THIS, RogueString* _auto_224_0 )
{
  THIS->filepath = _auto_224_0;
  return (RogueClassFile*)(THIS);
}

RogueString* RogueFile__filename( RogueClassFile* THIS )
{
  return (RogueString*)((RogueFile__filename__String( THIS->filepath )));
}

RogueClassFile* RogueFile__init_object( RogueClassFile* THIS )
{
  return (RogueClassFile*)(THIS);
}

RogueString* RogueParser__type_name( RogueClassParser* THIS )
{
  return (RogueString*)(Rogue_literal_strings[561]);
}

RogueClassParser* RogueParser__init__String( RogueClassParser* THIS, RogueString* filepath_0 )
{
  RogueParser__init__TokenList( THIS, ((RoguePreprocessor__process__TokenList( ((RogueClassPreprocessor*)ROGUE_CREATE_OBJECT(Preprocessor)), ((RogueTokenizer__tokenize__String( ((RogueClassTokenizer*)ROGUE_CREATE_OBJECT(Tokenizer)), filepath_0 ))) ))) );
  return (RogueClassParser*)(THIS);
}

RogueClassParser* RogueParser__init__Token_String_String( RogueClassParser* THIS, RogueClassToken* t_0, RogueString* filepath_1, RogueString* data_2 )
{
  RogueParser__init__TokenList( THIS, ((RoguePreprocessor__process__TokenList( ((RogueClassPreprocessor*)ROGUE_CREATE_OBJECT(Preprocessor)), ((RogueTokenizer__tokenize__Token_String_String( ((RogueClassTokenizer*)ROGUE_CREATE_OBJECT(Tokenizer)), t_0, filepath_1, data_2 ))) ))) );
  return (RogueClassParser*)(THIS);
}

RogueClassParser* RogueParser__init__TokenList( RogueClassParser* THIS, RogueTokenList* tokens_0 )
{
  THIS->reader = ((RogueTokenReader__init__TokenList( ((RogueClassTokenReader*)ROGUE_CREATE_OBJECT(TokenReader)), tokens_0 )));
  return (RogueClassParser*)(THIS);
}

RogueLogical RogueParser__consume__TokenType( RogueClassParser* THIS, RogueClassTokenType* type_0 )
{
  if (!(((RogueTokenReader__next_is__TokenType( THIS->reader, type_0 )))))
  {
    return (RogueLogical)(false);
  }
  RogueTokenReader__read( THIS->reader );
  return (RogueLogical)(true);
}

RogueLogical RogueParser__consume__String( RogueClassParser* THIS, RogueString* identifier_0 )
{
  RogueClassToken* t_1 = (((RogueTokenReader__peek( THIS->reader ))));
  if (t_1->_type != RogueTokenType_identifier)
  {
    return (RogueLogical)(false);
  }
  if (((RogueString__operatorLESSTHANGREATERTHAN__String( (call_ROGUEM33( 1, (RogueClassToken*)(t_1) )), identifier_0 ))) != 0)
  {
    return (RogueLogical)(false);
  }
  RogueParser__read( THIS );
  return (RogueLogical)(true);
}

RogueLogical RogueParser__consume_end_commands( RogueClassParser* THIS )
{
  RogueLogical found_0 = (false);
  while ((((RogueParser__consume__TokenType( THIS, RogueTokenType_eol ))) || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_semicolon )))))
  {
    found_0 = ((RogueLogical)true);
  }
  return (RogueLogical)(found_0);
}

RogueLogical RogueParser__consume_eols( RogueClassParser* THIS )
{
  RogueLogical found_any_0 = (false);
  while (((RogueParser__consume__TokenType( THIS, RogueTokenType_eol ))))
  {
    found_any_0 = ((RogueLogical)true);
  }
  return (RogueLogical)(found_any_0);
}

RogueClassRogueError* RogueParser__error__String( RogueClassParser* THIS, RogueString* message_0 )
{
  throw ((RogueToken__error__String( ((RogueTokenReader__peek( THIS->reader ))), message_0 )));
}

void RogueParser__must_consume__TokenType_String( RogueClassParser* THIS, RogueClassTokenType* type_0, RogueString* error_message_1 )
{
  if (((RogueParser__consume__TokenType( THIS, type_0 ))))
  {
    return;
  }
  RogueClassToken* t_2 = (((RogueParser__peek( THIS ))));
  if (!(!!(error_message_1)))
  {
    error_message_1 = ((RogueString*)((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueTokenType__quoted_name( type_0 ))) ))), Rogue_literal_strings[233] ))), ((RogueToken__quoted_name( t_2 ))) ))), Rogue_literal_strings[44] ))) ))));
  }
  throw ((RogueToken__error__String( t_2, error_message_1 )));
}

void RogueParser__must_consume_eols( RogueClassParser* THIS )
{
  RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_eol, ((RogueString*)(NULL)) );
  RogueParser__consume_eols( THIS );
}

RogueClassToken* RogueParser__must_read__TokenType( RogueClassParser* THIS, RogueClassTokenType* type_0 )
{
  RogueClassToken* t_1 = (((RogueTokenReader__peek( THIS->reader ))));
  if (t_1->_type != type_0)
  {
    RogueParser__must_consume__TokenType_String( THIS, type_0, ((RogueString*)(NULL)) );
  }
  return (RogueClassToken*)(((RogueTokenReader__read( THIS->reader ))));
}

RogueLogical RogueParser__next_is__TokenType( RogueClassParser* THIS, RogueClassTokenType* type_0 )
{
  return (RogueLogical)(((RogueTokenReader__next_is__TokenType( THIS->reader, type_0 ))));
}

RogueLogical RogueParser__next_is_end_command( RogueClassParser* THIS )
{
  if (!(((RogueTokenReader__has_another( THIS->reader )))))
  {
    return (RogueLogical)(false);
  }
  RogueClassTokenType* type_0 = (((RogueTokenReader__peek( THIS->reader )))->_type);
  return (RogueLogical)((type_0 == RogueTokenType_eol || type_0 == RogueTokenType_symbol_semicolon));
}

RogueLogical RogueParser__next_is_statement( RogueClassParser* THIS )
{
  if (!(((RogueTokenReader__has_another( THIS->reader )))))
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(((RogueTokenReader__next_is_statement_token( THIS->reader ))));
}

void RogueParser__parse_elements( RogueClassParser* THIS )
{
  while (((RogueParser__parse_element( THIS ))))
  {
  }
  if (((RogueTokenReader__has_another( THIS->reader ))))
  {
    RogueClassToken* t_0 = (((RogueParser__peek( THIS ))));
    throw ((RogueToken__error__String( t_0, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[279] ))), ((RogueToken__quoted_name( t_0 ))) ))), Rogue_literal_strings[44] ))) ))) )));
  }
}

RogueLogical RogueParser__parse_element( RogueClassParser* THIS )
{
  RogueParser__consume_eols( THIS );
  if (!(((RogueTokenReader__has_another( THIS->reader )))))
  {
    return (RogueLogical)(false);
  }
  RogueClassToken* t_0 = (((RogueParser__peek( THIS ))));
  if (t_0->_type == RogueTokenType_keyword_class)
  {
    RogueParser__parse_class_template( THIS );
    return (RogueLogical)(true);
  }
  else if (t_0->_type == RogueTokenType_keyword_augment)
  {
    RogueParser__parse_augment( THIS );
    return (RogueLogical)(true);
  }
  else if (t_0->_type == RogueTokenType_directive_requisite)
  {
    RogueParser__read( THIS );
    RogueLogical first_1 = (true);
    while ((first_1 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
    {
      first_1 = ((RogueLogical)false);
      RogueParser__consume_eols( THIS );
      RogueClassType* type_2 = (((Rogue_Parser__parse_type( THIS ))));
      RogueString* signature_3 = 0;
      if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_dot ))))
      {
        RogueStringBuilder* buffer_4 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
        RogueStringBuilder__print__String( buffer_4, ((RogueParser__read_identifier__Logical( THIS, false ))) );
        if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
        {
          RogueStringBuilder__print__Character( buffer_4, (RogueCharacter)'(' );
          if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_close_paren )))))
          {
            RogueLogical first_param_5 = (true);
            while ((first_param_5 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
            {
              if (first_param_5)
              {
                first_param_5 = ((RogueLogical)false);
              }
              else
              {
                RogueStringBuilder__print__Character( buffer_4, (RogueCharacter)',' );
              }
              RogueStringBuilder__print__String( buffer_4, ((Rogue_Parser__parse_possible_type( THIS ))) );
            }
            RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
          }
          RogueStringBuilder__print__Character( buffer_4, (RogueCharacter)')' );
        }
        signature_3 = ((RogueString*)((RogueStringBuilder__to_String( buffer_4 ))));
      }
      RogueRequisiteItemList__add__RequisiteItem( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->requisite_list, ((RogueRequisiteItem__init__Token_Type_String( ((RogueClassRequisiteItem*)ROGUE_CREATE_OBJECT(RequisiteItem)), t_0, type_2, signature_3 ))) );
      RogueParser__consume_eols( THIS );
    }
    return (RogueLogical)(true);
  }
  else if (((RogueParser__next_is_statement( THIS ))))
  {
    THIS->_this_type = ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), ((RogueParser__peek( THIS ))), Rogue_literal_strings[32] )));
    if (!(!!(((RogueClassProgram*)ROGUE_SINGLETON(Program))->m_on_launch)))
    {
      ((RogueClassProgram*)ROGUE_SINGLETON(Program))->m_on_launch = ((RogueMethod__init__Token_Type_String( ((RogueClassMethod*)ROGUE_CREATE_OBJECT(Method)), ((RogueParser__peek( THIS ))), THIS->_this_type, Rogue_literal_strings[278] )));
      RogueCmdList__add__Cmd( ((RogueCmdList*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->m_on_launch->statements), ((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->m_on_launch, ((RogueParser__peek( THIS ))), Rogue_literal_strings[257], false ))))) );
    }
    THIS->this_method = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->m_on_launch;
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, THIS->this_method->statements );
    return (RogueLogical)(true);
  }
  return (RogueLogical)(false);
}

void RogueParser__parse_class_template( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueString* name_1 = (((RogueParser__read_identifier__Logical( THIS, false ))));
  RogueClassTemplate* template_2 = (((RogueTemplate__init__Token_String_Integer( ((RogueClassTemplate*)ROGUE_CREATE_OBJECT(Template)), t_0, name_1, 0 ))));
  RogueParser__parse_template_tokens__Template_TokenType( THIS, template_2, RogueTokenType_keyword_endClass );
  switch (((Rogue_Template__element_type( template_2 ))))
  {
    case 3:
    {
      RogueAttributes__add__Integer( template_2->attributes, 16 );
      break;
    }
  }
}

void RogueParser__parse_template_tokens__Template_TokenType( RogueClassParser* THIS, RogueClassTemplate* template_0, RogueClassTokenType* end_type_1 )
{
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_specialize ))))
  {
    RogueLogical first_2 = (true);
    while ((first_2 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
    {
      first_2 = ((RogueLogical)false);
      RogueClassToken* t_3 = (((RogueParser__must_read__TokenType( THIS, RogueTokenType_placeholder_id ))));
      RogueClassTypeParameter* param_4 = (((RogueTemplate__add_type_parameter__Token_String( template_0, t_3, (call_ROGUEM33( 1, (RogueClassToken*)(t_3) )) ))));
    }
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_specialize, ((RogueString*)(NULL)) );
  }
  RogueInteger starting_pos_5 = (THIS->reader->position);
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
  {
    RogueParser__consume_eols( THIS );
    if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_close_paren )))))
    {
      RogueLogical first_6 = (true);
      while ((first_6 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
      {
        first_6 = ((RogueLogical)false);
        RogueParser__consume_eols( THIS );
        RogueParser__read_identifier__Logical( THIS, false );
        RogueParser__consume_eols( THIS );
        if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_equals ))))
        {
          RogueParser__parse_expression( THIS );
        }
        RogueParser__consume_eols( THIS );
        if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
        {
          if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_placeholder_id )))))
          {
            Rogue_Parser__parse_possible_type( THIS );
          }
        }
        RogueParser__consume_eols( THIS );
      }
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
    }
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
  {
    Rogue_Parser__parse_possible_type( THIS );
    while (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma ))))
    {
      Rogue_Parser__parse_possible_type( THIS );
    }
  }
  RogueInteger final_pos_7 = (THIS->reader->position);
  THIS->reader->position = starting_pos_5;
  while (THIS->reader->position < final_pos_7)
  {
    RogueTokenList__add__Token( template_0->tokens, ((RogueParser__read( THIS ))) );
  }
  RogueParser__parse_attributes__Attributes( THIS, template_0->attributes );
  RogueTemplateList__add__Template( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->template_list, template_0 );
  RogueString_TemplateTable__set__String_Template( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->template_lookup, template_0->name, template_0 );
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_semicolon ))))
  {
    return;
  }
  while (((RogueTokenReader__has_another( THIS->reader ))))
  {
    RogueClassToken* t_8 = (((RogueTokenReader__read( THIS->reader ))));
    if (t_8->_type == end_type_1)
    {
      return;
    }
    RogueTokenList__add__Token( template_0->tokens, t_8 );
  }
  RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), Rogue_literal_strings[273] );
  throw ((RogueTokenReader__error__String( THIS->reader, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), ((RogueTokenType__quoted_name( end_type_1 ))) ))), Rogue_literal_strings[274] ))) ))) )));
}

void RogueParser__parse_augment( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueTokenReader__read( THIS->reader ))));
  RogueString* name_1 = (((Rogue_Parser__parse_possible_type( THIS ))));
  if (((RogueString__contains__String( name_1, ((RogueCharacter__to_String( (RogueCharacter)'$' ))) ))))
  {
    RogueString* base_name_2 = (((RogueString__before_first__Character( name_1, (RogueCharacter)'<' ))));
    throw ((RogueToken__error__String( t_0, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[275] ))), base_name_2 ))), Rogue_literal_strings[276] ))), base_name_2 ))), Rogue_literal_strings[277] ))) ))) )));
  }
  RogueClassAugment* aug_3 = (((RogueAugment__init__Token_String( ((RogueClassAugment*)ROGUE_CREATE_OBJECT(Augment)), t_0, name_1 ))));
  RogueAugmentList* augments_4 = (((RogueString_AugmentListTable__get__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->augment_lookup, name_1 ))));
  if (!(!!(augments_4)))
  {
    augments_4 = ((RogueAugmentList*)((RogueAugmentList__init( ((RogueAugmentList*)ROGUE_CREATE_OBJECT(AugmentList)) ))));
    RogueString_AugmentListTable__set__String_AugmentList( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->augment_lookup, name_1, augments_4 );
  }
  RogueAugmentList__add__Augment( augments_4, aug_3 );
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_semicolon ))))
  {
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
  {
    RogueTypeList__add__Type( aug_3->base_types, ((Rogue_Parser__parse_type( THIS ))) );
    RogueParser__consume_eols( THIS );
    while (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma ))))
    {
      RogueParser__consume_eols( THIS );
      RogueTypeList__add__Type( aug_3->base_types, ((Rogue_Parser__parse_type( THIS ))) );
      RogueParser__consume_eols( THIS );
    }
  }
  RogueParser__consume_eols( THIS );
  while ((((RogueTokenReader__has_another( THIS->reader ))) && !(((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_endAugment ))))))
  {
    RogueTokenList__add__Token( aug_3->tokens, ((RogueTokenReader__read( THIS->reader ))) );
  }
  RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_keyword_endAugment, ((RogueString*)(NULL)) );
}

void RogueParser__parse_attributes__Attributes( RogueClassParser* THIS, RogueClassAttributes* attributes_0 )
{
  if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_bracket )))))
  {
    return;
  }
  while ((((RogueTokenReader__has_another( THIS->reader ))) && !(((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_close_bracket ))))))
  {
    RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_native ))))
    {
      RogueAttributes__add__Integer( attributes_0, 32 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_literal_strings[263] ))))
    {
      RogueParser__ensure_unspecialized_element_type__Token_Attributes( THIS, t_1, attributes_0 );
      RogueAttributes__add__Integer( attributes_0, 2 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_literal_strings[267] ))))
    {
      RogueParser__ensure_unspecialized_element_type__Token_Attributes( THIS, t_1, attributes_0 );
      RogueAttributes__add__Integer( attributes_0, 3 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_literal_strings[268] ))))
    {
      RogueAttributes__add__Integer( attributes_0, 16 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_literal_strings[269] ))))
    {
      RogueAttributes__add__Integer( attributes_0, 256 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_literal_strings[266] ))))
    {
      RogueParser__ensure_unspecialized_element_type__Token_Attributes( THIS, t_1, attributes_0 );
      RogueAttributes__add__Integer( attributes_0, 1 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_literal_strings[221] ))))
    {
      RogueAttributes__add__Integer( attributes_0, 32768 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_literal_strings[270] ))))
    {
      RogueAttributes__add__Integer( attributes_0, 1024 );
    }
    else if (((RogueParser__consume__String( THIS, Rogue_literal_strings[271] ))))
    {
      RogueAttributes__add__Integer( attributes_0, 65536 );
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_identifier ))))
    {
      RogueAttributes__add__String( attributes_0, (call_ROGUEM33( 1, (RogueClassToken*)(((RogueParser__read( THIS )))) )) );
    }
    else
    {
      throw ((RogueToken__error__String( ((RogueParser__peek( THIS ))), ((RogueString__operatorPLUS__Object( Rogue_literal_strings[272], ((RogueObject*)(((RogueParser__peek( THIS ))))) ))) )));
    }
  }
  RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_bracket, ((RogueString*)(NULL)) );
}

void RogueParser__ensure_unspecialized_element_type__Token_Attributes( RogueClassParser* THIS, RogueClassToken* t_0, RogueClassAttributes* attributes_1 )
{
  if (!!((attributes_1->flags & 7)))
  {
    throw ((RogueToken__error__String( t_0, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[264] ))), (call_ROGUEM33( 1, (RogueClassToken*)(t_0) )) ))), Rogue_literal_strings[265] ))), ((RogueAttributes__element_type_name( attributes_1 ))) ))), Rogue_literal_strings[13] ))) ))) )));
  }
}

void RogueParser__parse_type_def__Type( RogueClassParser* THIS, RogueClassType* _auto_230_0 )
{
  THIS->_this_type = _auto_230_0;
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
  {
    RogueParser__consume_eols( THIS );
    if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_close_paren )))))
    {
      RogueClassMethod* m_2 = 0;
      if (((RogueType__is_compound( THIS->_this_type ))))
      {
        m_2 = ((RogueClassMethod*)((RogueType__add_routine__Token_String( THIS->_this_type, t_1, Rogue_literal_strings[284] ))));
        RogueAttributes__add__Integer( m_2->attributes, 16384 );
      }
      else
      {
        m_2 = ((RogueClassMethod*)((RogueType__add_method__Token_String( THIS->_this_type, t_1, Rogue_literal_strings[285] ))));
      }
      m_2->_return_type = THIS->_this_type;
      RogueLogical first_3 = (true);
      while ((first_3 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
      {
        first_3 = ((RogueLogical)false);
        t_1 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
        RogueString* p_name_4 = (((RogueParser__read_identifier__Logical( THIS, false ))));
        RogueClassLocal* param_5 = (((RogueMethod__add_parameter__Token_String_Type( m_2, t_1, p_name_4, ((RogueClassType*)(NULL)) ))));
        RogueParser__consume_eols( THIS );
        if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_equals ))))
        {
          param_5->initial_value = ((RogueParser__parse_expression( THIS )));
        }
        RogueParser__consume_eols( THIS );
        if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
        {
          RogueParser__consume_eols( THIS );
          RogueClassType* p_type_6 = (((Rogue_Parser__parse_type( THIS ))));
          if (((RogueType__is_compound( THIS->_this_type ))))
          {
            param_5->_type = p_type_6;
          }
          RogueType__add_property__Token_String_Type_Cmd( THIS->_this_type, t_1, p_name_4, p_type_6, ((RogueClassCmd*)(NULL)) );
        }
        RogueParser__consume_eols( THIS );
      }
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
    }
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
  {
    RogueLogical first_7 = (true);
    while ((first_7 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
    {
      first_7 = ((RogueLogical)false);
      RogueParser__consume_eols( THIS );
      RogueTypeList__add__Type( THIS->_this_type->base_types, ((Rogue_Parser__parse_type( THIS ))) );
      RogueParser__consume_eols( THIS );
    }
  }
  while (((RogueParser__parse_section( THIS ))))
  {
  }
  if (((RogueTokenReader__has_another( THIS->reader ))))
  {
    throw ((RogueToken__error__String( ((RogueParser__peek( THIS ))), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[279] ))), ((RogueToken__quoted_name( ((RogueParser__peek( THIS ))) ))) ))), Rogue_literal_strings[44] ))) ))) )));
  }
}

RogueLogical RogueParser__parse_section( RogueClassParser* THIS )
{
  RogueParser__consume_eols( THIS );
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_begin_augment_tokens ))))
  {
    THIS->parsing_augment = true;
    RogueParser__consume_eols( THIS );
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_ENUMERATE ))))
  {
    while (((RogueParser__parse_definitions__Logical( THIS, true ))))
    {
    }
    return (RogueLogical)(true);
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_DEFINITIONS ))))
  {
    while (((RogueParser__parse_definitions__Logical( THIS, false ))))
    {
    }
    return (RogueLogical)(true);
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_GLOBALS ))))
  {
    while (((RogueParser__parse_properties__Logical( THIS, true ))))
    {
    }
    return (RogueLogical)(true);
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_ROUTINES ))))
  {
    while (((RogueParser__parse_method__Logical( THIS, true ))))
    {
    }
    return (RogueLogical)(true);
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_PROPERTIES ))))
  {
    while (((RogueParser__parse_properties__Logical( THIS, false ))))
    {
    }
    return (RogueLogical)(true);
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_METHODS ))))
  {
    while (((RogueParser__parse_method__Logical( THIS, false ))))
    {
    }
    return (RogueLogical)(true);
  }
  return (RogueLogical)(false);
}

RogueLogical RogueParser__parse_definitions__Logical( RogueClassParser* THIS, RogueLogical enumerate_0 )
{
  RogueParser__consume_eols( THIS );
  if (!(((RogueParser__next_is__TokenType( THIS, RogueTokenType_identifier )))))
  {
    return (RogueLogical)(false);
  }
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  RogueString* name_2 = (((RogueParser__read_identifier__Logical( THIS, false ))));
  RogueClassCmd* value_3 = 0;
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_equals ))))
  {
    RogueParser__consume_eols( THIS );
    value_3 = ((RogueClassCmd*)((RogueParser__parse_expression( THIS ))));
  }
  else if (!(((RogueParser__consume_eols( THIS )))))
  {
    value_3 = ((RogueClassCmd*)((RogueParser__parse_expression( THIS ))));
  }
  if ((!(enumerate_0) && !(!!(value_3))))
  {
    throw ((RogueToken__error__String( ((RogueParser__peek( THIS ))), Rogue_literal_strings[286] )));
  }
  if (!!(value_3))
  {
    if (RogueObject_instance_of(value_3,RogueTypeCmdLiteralInteger))
    {
      THIS->_this_type->prev_enum_cmd = ((RogueClassCmd*)(NULL));
      THIS->_this_type->next_enum_offset = (((RogueClassCmdLiteralInteger*)(RogueObject_as(value_3,RogueTypeCmdLiteralInteger)))->value + 1);
    }
    else
    {
      THIS->_this_type->prev_enum_cmd = value_3;
      THIS->_this_type->next_enum_offset = 1;
    }
  }
  else
  {
    if (!!(THIS->_this_type->prev_enum_cmd))
    {
      value_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdAdd*)ROGUE_CREATE_OBJECT(CmdAdd))), t_1, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->_this_type->prev_enum_cmd), ((RogueClassCloneArgs*)(NULL)) )), ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), t_1, THIS->_this_type->next_enum_offset ))))) ))))));
    }
    else
    {
      value_3 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), t_1, THIS->_this_type->next_enum_offset ))))));
    }
    ++THIS->_this_type->next_enum_offset;
  }
  RogueString_CmdTable__set__String_Cmd( THIS->_this_type->definition_lookup, name_2, value_3 );
  RogueStringList__add__String( THIS->_this_type->definition_list, name_2 );
  return (RogueLogical)(true);
}

RogueLogical RogueParser__parse_properties__Logical( RogueClassParser* THIS, RogueLogical as_globals_0 )
{
  RogueParser__consume_eols( THIS );
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_native ))))
  {
    if (!(((RogueParser__next_is__TokenType( THIS, RogueTokenType_literal_string )))))
    {
      throw ((RogueToken__error__String( ((RogueParser__peek( THIS ))), Rogue_literal_strings[261] )));
    }
    if (!(!!(THIS->_this_type->native_properties)))
    {
      THIS->_this_type->native_properties = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
    }
    RogueStringList__add__String( THIS->_this_type->native_properties, (call_ROGUEM33( 1, (RogueClassToken*)(((RogueParser__read( THIS )))) )) );
    RogueParser__must_consume_eols( THIS );
    return (RogueLogical)(true);
  }
  if (!(((RogueParser__next_is__TokenType( THIS, RogueTokenType_identifier )))))
  {
    return (RogueLogical)(false);
  }
  RoguePropertyList__clear( THIS->property_list );
  RogueLogical first_1 = (true);
  while ((first_1 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
  {
    first_1 = ((RogueLogical)false);
    RogueParser__consume_eols( THIS );
    RogueClassToken* t_2 = (((RogueParser__must_read__TokenType( THIS, RogueTokenType_identifier ))));
    RogueClassProperty* p_3 = 0;
    if (as_globals_0)
    {
      p_3 = ((RogueClassProperty*)((RogueType__add_global__Token_String( THIS->_this_type, t_2, (call_ROGUEM33( 1, (RogueClassToken*)(t_2) )) ))));
    }
    else
    {
      p_3 = ((RogueClassProperty*)((RogueType__add_property__Token_String_Type_Cmd( THIS->_this_type, t_2, (call_ROGUEM33( 1, (RogueClassToken*)(t_2) )), ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
    }
    RoguePropertyList__add__Property( THIS->property_list, p_3 );
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_equals ))))
    {
      p_3->initial_value = ((RogueParser__parse_expression( THIS )));
    }
  }
  RogueParser__consume_eols( THIS );
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
  {
    RogueClassType* p_type_4 = (((Rogue_Parser__parse_type( THIS ))));
    {
      RoguePropertyList* _auto_631_6 = (THIS->property_list);
      RogueInteger _auto_632_7 = (0);
      for (;_auto_632_7 < _auto_631_6->count;++_auto_632_7)
      {
        RogueClassProperty* p_8 = (((RogueClassProperty*)(_auto_631_6->data->objects[_auto_632_7])));
        p_8->_type = p_type_4;
      }
    }
  }
  else
  {
    {
      RoguePropertyList* _auto_633_9 = (THIS->property_list);
      RogueInteger _auto_634_10 = (0);
      for (;_auto_634_10 < _auto_633_9->count;++_auto_634_10)
      {
        RogueClassProperty* p_11 = (((RogueClassProperty*)(_auto_633_9->data->objects[_auto_634_10])));
        RogueString* name_5 = (Rogue_literal_strings[290]);
        if (as_globals_0)
        {
          name_5 = ((RogueString*)Rogue_literal_strings[291]);
        }
        if (!!(p_11->initial_value))
        {
          p_11->_type = (call_ROGUEM46( 14, (RogueClassCmd*)(p_11->initial_value) ));
          if (p_11->_type == NULL)
          {
            RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), (call_ROGUEM41( 2, (RogueClassCmd*)(p_11->initial_value) )) );
            throw ((RogueToken__error__String( p_11->initial_value->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[292] ))), name_5 ))), Rogue_literal_strings[293] ))) ))) )));
          }
        }
        else
        {
          throw ((RogueToken__error__String( p_11->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[294] ))), name_5 ))), Rogue_literal_strings[295] ))) ))) )));
        }
      }
    }
  }
  return (RogueLogical)(true);
}

RogueLogical RogueParser__parse_method__Logical( RogueClassParser* THIS, RogueLogical as_routine_0 )
{
  RogueParser__consume_eols( THIS );
  if (as_routine_0)
  {
    if (!(((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_routine )))))
    {
      return (RogueLogical)(false);
    }
  }
  else if (!(((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_method )))))
  {
    return (RogueLogical)(false);
  }
  RogueClassToken* t_1 = (((RogueParser__read( THIS ))));
  RogueString* name_2 = (((RogueParser__read_identifier__Logical( THIS, false ))));
  RogueClassType* return_type_3 = 0;
  {
    if (((RogueString__operatorLESSTHANGREATERTHAN__String( name_2, Rogue_literal_strings[296] ))) == 0)
    {
      name_2 = ((RogueString*)((RogueString__operatorPLUS__String( name_2, (call_ROGUEM33( 1, (RogueClassToken*)(((RogueTokenReader__read( THIS->reader )))) )) ))));
    }
    else if (((RogueString__operatorLESSTHANGREATERTHAN__String( name_2, Rogue_literal_strings[297] ))) == 0)
    {
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_arrow, ((RogueString*)(NULL)) );
      return_type_3 = ((RogueClassType*)((Rogue_Parser__parse_type( THIS ))));
      name_2 = ((RogueString*)((RogueString__operatorPLUS__String( Rogue_literal_strings[298], return_type_3->name ))));
    }
  }
  if (as_routine_0)
  {
    THIS->this_method = ((RogueType__add_routine__Token_String( THIS->_this_type, t_1, name_2 )));
  }
  else
  {
    THIS->this_method = ((RogueType__add_method__Token_String( THIS->_this_type, t_1, name_2 )));
  }
  THIS->this_method->_return_type = return_type_3;
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
  {
    if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_close_paren )))))
    {
      RogueLogical first_4 = (true);
      while ((first_4 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
      {
        first_4 = ((RogueLogical)false);
        t_1 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
        RogueClassLocal* param_5 = (((RogueMethod__add_parameter__Token_String_Type( THIS->this_method, t_1, ((RogueParser__read_identifier__Logical( THIS, true ))), ((RogueClassType*)(NULL)) ))));
        if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_equals ))))
        {
          param_5->initial_value = ((RogueParser__parse_expression( THIS )));
        }
        if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
        {
          param_5->_type = ((Rogue_Parser__parse_type( THIS )));
        }
      }
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
    }
  }
  if (!(!!(return_type_3)))
  {
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_arrow ))))
    {
      if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_this ))))
      {
        THIS->this_method->_return_type = THIS->_this_type;
      }
      else
      {
        THIS->this_method->_return_type = ((Rogue_Parser__parse_type( THIS )));
      }
    }
  }
  RogueParser__parse_attributes__Attributes( THIS, THIS->this_method->attributes );
  if (THIS->parsing_augment)
  {
    RogueAttributes__add__Integer( THIS->this_method->attributes, 262144 );
  }
  RogueParser__consume_eols( THIS );
  if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_macro ))))
  {
    if (((RogueTokenReader__peek__Integer( THIS->reader, 1 )))->_type == RogueTokenType_keyword_native)
    {
      RogueAttributes__add__Integer( THIS->this_method->attributes, 32 );
      RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_macro );
      RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_native );
      RogueLogical has_parens_6 = (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))));
      RogueParser__consume_eols( THIS );
      if (!(((RogueParser__next_is__TokenType( THIS, RogueTokenType_literal_string )))))
      {
        throw ((RogueToken__error__String( ((RogueParser__peek( THIS ))), Rogue_literal_strings[261] )));
      }
      THIS->this_method->native_code = (call_ROGUEM33( 1, (RogueClassToken*)(((RogueParser__read( THIS )))) ));
      if (has_parens_6)
      {
        RogueParser__consume_eols( THIS );
        RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
      }
      if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_arrow ))))
      {
        RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_arrow );
        RogueClassType* type_7 = (((Rogue_Parser__parse_type( THIS ))));
        throw ((RogueToken__error__String( ((RogueParser__peek( THIS ))), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[299] ))), ((RogueType__to_String( type_7 ))) ))), Rogue_literal_strings[36] ))) ))) )));
      }
    }
    else
    {
      RogueAttributes__add__Integer( THIS->this_method->attributes, 64 );
      while (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_macro ))))
      {
        RogueParser__parse_single_line_statements__CmdStatementList( THIS, THIS->this_method->statements );
        RogueParser__consume_eols( THIS );
      }
    }
  }
  else if (THIS->parsing_augment)
  {
    RogueParser__parse_augment_statements( THIS );
  }
  else
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->this_method->statements), ((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( THIS->this_method, ((RogueParser__peek( THIS ))), Rogue_literal_strings[257], false ))))) );
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, THIS->this_method->statements );
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->this_method->statements), ((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( THIS->this_method, ((RogueParser__peek( THIS ))), Rogue_literal_strings[259], false ))))) );
  }
  return (RogueLogical)(true);
}

void RogueParser__parse_single_or_multi_line_statements__CmdStatementList_TokenType( RogueClassParser* THIS, RogueClassCmdStatementList* statements_0, RogueClassTokenType* end_type_1 )
{
  if (((RogueParser__consume_eols( THIS ))))
  {
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, statements_0 );
    RogueParser__must_consume__TokenType_String( THIS, end_type_1, ((RogueString*)(NULL)) );
  }
  else
  {
    RogueParser__parse_single_line_statements__CmdStatementList( THIS, statements_0 );
    RogueParser__consume_eols( THIS );
  }
}

void RogueParser__parse_multi_line_statements__CmdStatementList( RogueClassParser* THIS, RogueClassCmdStatementList* statements_0 )
{
  RogueClassCmdStatementList* prev_statement_list_1 = (THIS->cur_statement_list);
  THIS->cur_statement_list = statements_0;
  RogueParser__consume_end_commands( THIS );
  while (((RogueParser__next_is_statement( THIS ))))
  {
    RogueParser__parse_statement__CmdStatementList_Logical( THIS, statements_0, true );
    while ((((RogueParser__consume__TokenType( THIS, RogueTokenType_eol ))) || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_semicolon )))))
    {
    }
    RogueParser__consume_end_commands( THIS );
  }
  THIS->cur_statement_list = prev_statement_list_1;
}

void RogueParser__parse_augment_statements( RogueClassParser* THIS )
{
  RogueClassCmdStatementList* prev_statement_list_0 = (THIS->cur_statement_list);
  RogueMethod__begin_label__Token_String_Logical( THIS->this_method, ((RogueParser__peek( THIS ))), Rogue_literal_strings[257], true );
  RogueMethod__begin_label__Token_String_Logical( THIS->this_method, ((RogueParser__peek( THIS ))), Rogue_literal_strings[259], true );
  RogueClassCmdLabel* cur_label_1 = (((RogueMethod__begin_label__Token_String_Logical( THIS->this_method, ((RogueParser__peek( THIS ))), Rogue_literal_strings[257], true ))));
  THIS->cur_statement_list = cur_label_1->statements;
  RogueParser__consume_end_commands( THIS );
  while (((RogueParser__next_is_statement( THIS ))))
  {
    RogueClassToken* t_2 = (((RogueParser__peek( THIS ))));
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_specialize ))))
    {
      cur_label_1 = ((RogueClassCmdLabel*)((RogueMethod__begin_label__Token_String_Logical( THIS->this_method, t_2, ((RogueParser__read_identifier__Logical( THIS, false ))), true ))));
      THIS->cur_statement_list = cur_label_1->statements;
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_specialize, ((RogueString*)(NULL)) );
      RogueParser__consume_end_commands( THIS );
      continue;
    }
    RogueParser__parse_statement__CmdStatementList_Logical( THIS, cur_label_1->statements, true );
    while ((((RogueParser__consume__TokenType( THIS, RogueTokenType_eol ))) || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_semicolon )))))
    {
    }
    RogueParser__consume_end_commands( THIS );
  }
  THIS->cur_statement_list = prev_statement_list_0;
}

void RogueParser__parse_single_line_statements__CmdStatementList( RogueClassParser* THIS, RogueClassCmdStatementList* statements_0 )
{
  RogueClassCmdStatementList* prev_statement_list_1 = (THIS->cur_statement_list);
  THIS->cur_statement_list = statements_0;
  while (((RogueParser__next_is_statement( THIS ))))
  {
    RogueParser__parse_statement__CmdStatementList_Logical( THIS, statements_0, false );
    if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_semicolon )))))
    {
      THIS->cur_statement_list = prev_statement_list_1;
      return;
    }
    while (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_semicolon ))))
    {
    }
    if (((RogueParser__next_is_end_command( THIS ))))
    {
      goto _auto_636;
    }
  }
  _auto_636:;
  if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_eol )))))
  {
    if (!(((RogueToken__is_structure( ((RogueParser__peek( THIS ))) )))))
    {
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_eol, ((RogueString*)(NULL)) );
    }
  }
  THIS->cur_statement_list = prev_statement_list_1;
}

void RogueParser__parse_statement__CmdStatementList_Logical( RogueClassParser* THIS, RogueClassCmdStatementList* statements_0, RogueLogical allow_control_structures_1 )
{
  RogueClassToken* t_2 = (((RogueParser__peek( THIS ))));
  if (allow_control_structures_1)
  {
    if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_if ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueParser__parse_if( THIS ))))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_which ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueParser__parse_which( THIS ))))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_forEach ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueParser__parse_for_each( THIS ))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_contingent ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueParser__parse_contingent( THIS ))))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_while ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueParser__parse_while( THIS ))))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_loop ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueParser__parse_loop( THIS ))))) );
      return;
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_try ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueParser__parse_try( THIS ))))) );
      return;
    }
  }
  if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_local ))))
  {
    RogueParser__parse_local_declaration__CmdStatementList( THIS, statements_0 );
    return;
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_return ))))
  {
    if (((RogueParser__next_is_end_command( THIS ))))
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), t_2, ((RogueClassCmd*)(NULL)) ))))) );
    }
    else
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), t_2, ((RogueParser__parse_expression( THIS ))) ))))) );
    }
    return;
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_await ))))
  {
    RogueClassCmdStatementList* statement_list_3 = (((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))));
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdAwait__init__Token_Cmd_CmdStatementList_Local( ((RogueClassCmdAwait*)ROGUE_CREATE_OBJECT(CmdAwait)), t_2, ((RogueParser__parse_expression( THIS ))), statement_list_3, ((RogueClassLocal*)(NULL)) ))))) );
    return;
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_yield ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdYield__init__Token( ((RogueClassCmdYield*)ROGUE_CREATE_OBJECT(CmdYield)), t_2 ))))) );
    return;
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_throw ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdThrow__init__Token_Cmd( ((RogueClassCmdThrow*)ROGUE_CREATE_OBJECT(CmdThrow)), t_2, ((RogueParser__parse_expression( THIS ))) ))))) );
    return;
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_noAction ))))
  {
    return;
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_trace ))))
  {
    RogueStringBuilder* buffer_4 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
    RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( buffer_4, THIS->_this_type->name ))), Rogue_literal_strings[156] ))), THIS->this_method->name ))), Rogue_literal_strings[254] );
    RogueStringBuilder__print__String( ((RogueStringBuilder__print__Integer( ((RogueStringBuilder__print__String( buffer_4, Rogue_literal_strings[155] ))), t_2->line ))), Rogue_literal_strings[255] );
    while ((((RogueTokenReader__has_another( THIS->reader ))) && !(((RogueParser__consume_eols( THIS ))))))
    {
      RogueStringBuilder__print__String( buffer_4, (call_ROGUEM33( 1, (RogueClassToken*)(((RogueParser__read( THIS )))) )) );
    }
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdTrace__init__Token_String( ((RogueClassCmdTrace*)ROGUE_CREATE_OBJECT(CmdTrace)), t_2, ((RogueStringBuilder__to_String( buffer_4 ))) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_specialize ))))
  {
    if (THIS->parsing_augment)
    {
      throw ((RogueToken__error__String( t_2, Rogue_literal_strings[256] )));
    }
    else
    {
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueMethod__begin_label__Token_String_Logical( THIS->this_method, t_2, ((RogueParser__read_identifier__Logical( THIS, false ))), false ))))) );
    }
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_specialize, ((RogueString*)(NULL)) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_escapeWhile ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdEscape__init__Token_Integer_CmdControlStructure( ((RogueClassCmdEscape*)ROGUE_CREATE_OBJECT(CmdEscape)), t_2, 8, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_escapeForEach ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdEscape__init__Token_Integer_CmdControlStructure( ((RogueClassCmdEscape*)ROGUE_CREATE_OBJECT(CmdEscape)), t_2, 9, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_escapeContingent ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdEscape__init__Token_Integer_CmdControlStructure( ((RogueClassCmdEscape*)ROGUE_CREATE_OBJECT(CmdEscape)), t_2, 1, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_escapeLoop ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdEscape__init__Token_Integer_CmdControlStructure( ((RogueClassCmdEscape*)ROGUE_CREATE_OBJECT(CmdEscape)), t_2, 7, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_escapeIf ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdEscape__init__Token_Integer_CmdControlStructure( ((RogueClassCmdEscape*)ROGUE_CREATE_OBJECT(CmdEscape)), t_2, 2, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_escapeTry ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdEscape__init__Token_Integer_CmdControlStructure( ((RogueClassCmdEscape*)ROGUE_CREATE_OBJECT(CmdEscape)), t_2, 4, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_escapeWhich ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdEscape__init__Token_Integer_CmdControlStructure( ((RogueClassCmdEscape*)ROGUE_CREATE_OBJECT(CmdEscape)), t_2, 5, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_nextIteration ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdNextIteration__init__Token_CmdControlStructure( ((RogueClassCmdNextIteration*)ROGUE_CREATE_OBJECT(CmdNextIteration)), t_2, ((RogueClassCmdControlStructure*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_necessary ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdNecessary__init__Token_Cmd_CmdContingent( ((RogueClassCmdNecessary*)ROGUE_CREATE_OBJECT(CmdNecessary)), t_2, ((RogueParser__parse_expression( THIS ))), ((RogueClassCmdContingent*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_sufficient ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdSufficient__init__Token_Cmd_CmdContingent( ((RogueClassCmdSufficient*)ROGUE_CREATE_OBJECT(CmdSufficient)), t_2, ((RogueParser__parse_expression( THIS ))), ((RogueClassCmdContingent*)(NULL)) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_plus_plus ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdAdjust__init__Token_Cmd_Integer( ((RogueClassCmdAdjust*)ROGUE_CREATE_OBJECT(CmdAdjust)), t_2, ((RogueParser__parse_expression( THIS ))), 1 ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_minus_minus ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdAdjust__init__Token_Cmd_Integer( ((RogueClassCmdAdjust*)ROGUE_CREATE_OBJECT(CmdAdjust)), t_2, ((RogueParser__parse_expression( THIS ))), -1 ))))) );
    return;
  }
  RogueClassCmd* expression_5 = (((RogueParser__parse_expression( THIS ))));
  t_2 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_equals ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)ROGUE_CREATE_OBJECT(CmdAssign)), t_2, expression_5, ((RogueParser__parse_expression( THIS ))) ))))) );
    return;
  }
  if ((call_ROGUEM73( 12, (RogueClassTokenType*)(t_2->_type) )))
  {
    RogueParser__read( THIS );
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdOpWithAssign__init__Token_Cmd_TokenType_Cmd( ((RogueClassCmdOpWithAssign*)ROGUE_CREATE_OBJECT(CmdOpWithAssign)), t_2, expression_5, t_2->_type, ((RogueParser__parse_expression( THIS ))) ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_plus_plus ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdAdjust__init__Token_Cmd_Integer( ((RogueClassCmdAdjust*)ROGUE_CREATE_OBJECT(CmdAdjust)), t_2, expression_5, 1 ))))) );
    return;
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_minus_minus ))))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdAdjust__init__Token_Cmd_Integer( ((RogueClassCmdAdjust*)ROGUE_CREATE_OBJECT(CmdAdjust)), t_2, expression_5, -1 ))))) );
    return;
  }
  RogueClassTokenType* t_type_6 = (t_2->_type);
  if ((call_ROGUEM73( 12, (RogueClassTokenType*)(t_type_6) )))
  {
    RogueParser__read( THIS );
    RogueClassCmd* target_7 = (expression_5);
    RogueClassCmd* new_value_8 = (((RogueParser__parse_expression( THIS ))));
    RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdOpWithAssign__init__Token_Cmd_TokenType_Cmd( ((RogueClassCmdOpWithAssign*)ROGUE_CREATE_OBJECT(CmdOpWithAssign)), t_2, target_7, t_type_6, new_value_8 ))))) );
    return;
  }
  if (!(((RogueParser__next_is_end_command( THIS )))))
  {
    RogueClassCmdAccess* access_9 = (((RogueClassCmdAccess*)(RogueObject_as(expression_5,RogueTypeCmdAccess))));
    if ((!!(access_9) && access_9->args == NULL))
    {
      RogueClassCmdArgs* args_10 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))));
      while ((!(((RogueParser__next_is_end_command( THIS )))) && !(((RogueToken__is_structure( ((RogueParser__peek( THIS ))) ))))))
      {
        RogueCmdList__add__Cmd( ((RogueCmdList*)args_10), ((RogueParser__parse_expression( THIS ))) );
      }
      access_9->args = args_10;
    }
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), expression_5 );
}

RogueClassCmdWhich* RogueParser__parse_which( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueClassCmdWhich* cmd_which_1 = (((RogueCmdWhich__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Integer( ((RogueClassCmdWhich*)ROGUE_CREATE_OBJECT(CmdWhich)), t_0, ((RogueParser__parse_expression( THIS ))), ((RogueCmdWhichCaseList__init( ((RogueCmdWhichCaseList*)ROGUE_CREATE_OBJECT(CmdWhichCaseList)) ))), ((RogueClassCmdWhichCase*)(NULL)), 5 ))));
  RogueParser__must_consume_eols( THIS );
  while (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_case ))))
  {
    t_0 = ((RogueClassToken*)((RogueParser__read( THIS ))));
    RogueParser__consume_eols( THIS );
    RogueClassCmdWhichCase* cmd_case_2 = (((RogueCmdWhich__add_case__Token( cmd_which_1, t_0 ))));
    RogueLogical first_3 = (true);
    while ((first_3 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
    {
      first_3 = ((RogueLogical)false);
      RogueCmdList__add__Cmd( ((RogueCmdList*)cmd_case_2->conditions), ((RogueParser__parse_expression( THIS ))) );
      RogueParser__consume_eols( THIS );
    }
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
    {
      RogueParser__consume_eols( THIS );
    }
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_case_2->statements );
  }
  if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_others ))))
  {
    t_0 = ((RogueClassToken*)((RogueParser__read( THIS ))));
    RogueParser__consume_eols( THIS );
    RogueClassCmdWhichCase* cmd_case_4 = (((RogueCmdWhich__add_case_others__Token( cmd_which_1, t_0 ))));
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
    {
      RogueParser__consume_eols( THIS );
    }
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_case_4->statements );
  }
  RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_keyword_endWhich, ((RogueString*)(NULL)) );
  return (RogueClassCmdWhich*)(cmd_which_1);
}

RogueClassCmdContingent* RogueParser__parse_contingent( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueClassCmdContingent* cmd_contingent_1 = (((RogueCmdContingent__init__Token_CmdStatementList( ((RogueClassCmdContingent*)ROGUE_CREATE_OBJECT(CmdContingent)), t_0, ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))) ))));
  RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_contingent_1->statements );
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_satisfied ))))
  {
    cmd_contingent_1->satisfied_statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_contingent_1->satisfied_statements );
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_unsatisfied ))))
  {
    cmd_contingent_1->unsatisfied_statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_contingent_1->unsatisfied_statements );
  }
  RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_keyword_endContingent, ((RogueString*)(NULL)) );
  return (RogueClassCmdContingent*)(cmd_contingent_1);
}

RogueClassCmdTry* RogueParser__parse_try( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueClassCmdTry* cmd_try_1 = (((RogueCmdTry__init__Token_CmdStatementList_CmdCatchList( ((RogueClassCmdTry*)ROGUE_CREATE_OBJECT(CmdTry)), t_0, ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))), ((RogueCmdCatchList__init( ((RogueCmdCatchList*)ROGUE_CREATE_OBJECT(CmdCatchList)) ))) ))));
  RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_try_1->statements );
  while (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_catch ))))
  {
    RogueClassCmdCatch* cmd_catch_2 = (((RogueCmdTry__add_catch__Token( cmd_try_1, ((RogueParser__read( THIS ))) ))));
    RogueParser__consume_eols( THIS );
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_open_paren, ((RogueString*)(NULL)) );
    RogueClassToken* error_t_3 = (((RogueParser__peek( THIS ))));
    RogueString* error_name_4 = (((RogueParser__read_identifier__Logical( THIS, false ))));
    RogueParser__consume_eols( THIS );
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_colon, ((RogueString*)(NULL)) );
    RogueParser__consume_eols( THIS );
    cmd_catch_2->error_var = ((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, error_t_3, error_name_4, ((Rogue_Parser__parse_type( THIS ))), ((RogueClassCmd*)(NULL)) )));
    RogueParser__consume_eols( THIS );
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_catch_2->statements );
  }
  RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_keyword_endTry, ((RogueString*)(NULL)) );
  return (RogueClassCmdTry*)(cmd_try_1);
}

void RogueParser__parse_local_declaration__CmdStatementList( RogueClassParser* THIS, RogueClassCmdStatementList* statements_0 )
{
  RogueLocalList__clear( THIS->local_declarations );
  RogueClassToken* t_1 = (((RogueParser__read( THIS ))));
  RogueLogical first_2 = (true);
  while ((first_2 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
  {
    first_2 = ((RogueLogical)false);
    t_1 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
    RogueString* name_3 = (((RogueParser__read_identifier__Logical( THIS, false ))));
    RogueClassLocal* v_4 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_1, name_3, ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
    RogueLocalList__add__Local( THIS->local_declarations, v_4 );
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_equals ))))
    {
      v_4->initial_value = ((RogueParser__parse_expression( THIS )));
    }
  }
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
  {
    RogueClassType* type_5 = (((Rogue_Parser__parse_type( THIS ))));
    {
      RogueLocalList* _auto_689_6 = (THIS->local_declarations);
      RogueInteger _auto_690_7 = (0);
      for (;_auto_690_7 < _auto_689_6->count;++_auto_690_7)
      {
        RogueClassLocal* v_8 = (((RogueClassLocal*)(_auto_689_6->data->objects[_auto_690_7])));
        v_8->_type = type_5;
      }
    }
  }
  else
  {
    {
      RogueLocalList* _auto_691_9 = (THIS->local_declarations);
      RogueInteger _auto_692_10 = (0);
      for (;_auto_692_10 < _auto_691_9->count;++_auto_692_10)
      {
        RogueClassLocal* v_11 = (((RogueClassLocal*)(_auto_691_9->data->objects[_auto_692_10])));
        if ((v_11->_type == NULL && !!(v_11->initial_value)))
        {
          v_11->_type = (call_ROGUEM46( 14, (RogueClassCmd*)(v_11->initial_value) ));
        }
      }
    }
  }
  {
    RogueLocalList* _auto_693_12 = (THIS->local_declarations);
    RogueInteger _auto_694_13 = (0);
    for (;_auto_694_13 < _auto_693_12->count;++_auto_694_13)
    {
      RogueClassLocal* v_14 = (((RogueClassLocal*)(_auto_693_12->data->objects[_auto_694_13])));
      RogueCmdList__add__Cmd( ((RogueCmdList*)statements_0), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local( ((RogueClassCmdLocalDeclaration*)ROGUE_CREATE_OBJECT(CmdLocalDeclaration)), v_14->t, v_14 ))))) );
    }
  }
}

RogueClassType* Rogue_Parser__parse_type( RogueClassParser* THIS )
{
  RogueString* name_0 = 0;
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (!!((call_ROGUEM38( 13, (RogueClassToken*)(t_1) ))))
  {
    RogueClassType* type_2 = ((call_ROGUEM38( 13, (RogueClassToken*)(((RogueParser__read( THIS )))) )));
    if ((((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_empty_brackets ))) || ((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_question_mark )))))
    {
      name_0 = ((RogueString*)type_2->name);
      for (;;)
      {
        if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_empty_brackets ))))
        {
          name_0 = ((RogueString*)((RogueString__operatorPLUS__String( name_0, Rogue_literal_strings[162] ))));
        }
        else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_question_mark ))))
        {
          name_0 = ((RogueString*)((RogueString__operatorPLUS__String( name_0, Rogue_literal_strings[183] ))));
        }
        else
        {
          goto _auto_697;
        }
      }
      _auto_697:;
    }
    else
    {
      return (RogueClassType*)(type_2);
    }
  }
  else
  {
    name_0 = ((RogueString*)((Rogue_Parser__parse_possible_type( THIS ))));
  }
  return (RogueClassType*)(((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), t_1, name_0 ))));
}

RogueString* Rogue_Parser__parse_possible_type( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__peek( THIS ))));
  RogueString* name_1 = (((RogueParser__read_identifier__Logical( THIS, false ))));
  if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_open_specialize ))))
  {
    name_1 = ((RogueString*)((RogueString__operatorPLUS__String( name_1, ((RogueParser__parse_specialization_string( THIS ))) ))));
  }
  else if (((RogueString__operatorLESSTHANGREATERTHAN__String( name_1, Rogue_literal_strings[238] ))) == 0)
  {
    RogueTypeList* parameter_types_2 = 0;
    RogueClassType* return_type_3 = 0;
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
    {
      if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_close_paren )))))
      {
        parameter_types_2 = ((RogueTypeList*)((RogueTypeList__init( ((RogueTypeList*)ROGUE_CREATE_OBJECT(TypeList)) ))));
        RogueLogical first_4 = (true);
        while ((first_4 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
        {
          first_4 = ((RogueLogical)false);
          RogueTypeList__add__Type( parameter_types_2, ((Rogue_Parser__parse_type( THIS ))) );
        }
        RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
      }
    }
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_arrow ))))
    {
      return_type_3 = ((RogueClassType*)((Rogue_Parser__parse_type( THIS ))));
    }
    name_1 = ((RogueString*)((RogueProgram__get_callback_type_reference__Token_TypeList_Type( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), t_0, parameter_types_2, return_type_3 )))->name);
  }
  for (;;)
  {
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_empty_brackets ))))
    {
      name_1 = ((RogueString*)((RogueString__operatorPLUS__String( name_1, Rogue_literal_strings[162] ))));
    }
    else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_question_mark ))))
    {
      name_1 = ((RogueString*)((RogueString__operatorPLUS__String( name_1, Rogue_literal_strings[183] ))));
    }
    else
    {
      goto _auto_698;
    }
  }
  _auto_698:;
  return (RogueString*)(name_1);
}

RogueClassCmdIf* RogueParser__parse_if( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueClassCmdIf* cmd_if_1 = (((RogueCmdIf__init__Token_Cmd_Integer( ((RogueClassCmdIf*)ROGUE_CREATE_OBJECT(CmdIf)), t_0, ((RogueClassCmd*)(NULL)), 2 ))));
  cmd_if_1->condition = ((RogueParser__parse_expression( THIS )));
  if (((RogueParser__consume_eols( THIS ))))
  {
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_if_1->statements );
    t_0 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
    RogueClassCmdIf* cur_if_2 = (cmd_if_1);
    while (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_elseIf ))))
    {
      RogueInteger starting_position_3 = (THIS->reader->position);
      RogueParser__read( THIS );
      RogueClassCmd* elseIf_condition_4 = (((RogueParser__parse_expression( THIS ))));
      if (((RogueParser__consume__TokenType( THIS, RogueTokenType_eol ))))
      {
        RogueClassCmdIf* cmd_else_if_5 = (((RogueCmdIf__init__Token_Cmd_Integer( ((RogueClassCmdIf*)ROGUE_CREATE_OBJECT(CmdIf)), t_0, elseIf_condition_4, 3 ))));
        RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_else_if_5->statements );
        cur_if_2->else_statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
        RogueCmdList__add__Cmd( ((RogueCmdList*)cur_if_2->else_statements), ((RogueClassCmd*)(cmd_else_if_5)) );
        cur_if_2 = ((RogueClassCmdIf*)cmd_else_if_5);
      }
      else
      {
        THIS->reader->position = starting_position_3;
        goto _auto_699;
      }
      t_0 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
    }
    _auto_699:;
    if ((((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_else ))) && ((RogueTokenReader__peek__Integer( THIS->reader, 1 )))->_type == RogueTokenType_eol))
    {
      RogueParser__read( THIS );
      cur_if_2->else_statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
      RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cur_if_2->else_statements );
    }
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_keyword_endIf, ((RogueString*)(NULL)) );
  }
  else
  {
    RogueParser__parse_single_line_statements__CmdStatementList( THIS, cmd_if_1->statements );
    RogueParser__consume_eols( THIS );
    t_0 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
    RogueClassCmdIf* cur_if_6 = (cmd_if_1);
    while (((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_elseIf ))))
    {
      RogueInteger starting_position_7 = (THIS->reader->position);
      RogueParser__read( THIS );
      RogueClassCmd* elseIf_condition_8 = (((RogueParser__parse_expression( THIS ))));
      if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_eol ))))
      {
        THIS->reader->position = starting_position_7;
        goto _auto_700;
      }
      else
      {
        RogueClassCmdIf* cmd_else_if_9 = (((RogueCmdIf__init__Token_Cmd_Integer( ((RogueClassCmdIf*)ROGUE_CREATE_OBJECT(CmdIf)), t_0, elseIf_condition_8, 3 ))));
        RogueParser__parse_single_line_statements__CmdStatementList( THIS, cmd_else_if_9->statements );
        cur_if_6->else_statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
        RogueCmdList__add__Cmd( ((RogueCmdList*)cur_if_6->else_statements), ((RogueClassCmd*)(cmd_else_if_9)) );
        cur_if_6 = ((RogueClassCmdIf*)cmd_else_if_9);
        RogueParser__must_consume_eols( THIS );
      }
      t_0 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
    }
    _auto_700:;
    if ((((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_else ))) && ((RogueTokenReader__peek__Integer( THIS->reader, 1 )))->_type != RogueTokenType_eol))
    {
      RogueParser__read( THIS );
      cur_if_6->else_statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
      RogueParser__parse_single_line_statements__CmdStatementList( THIS, cur_if_6->else_statements );
    }
  }
  return (RogueClassCmdIf*)(cmd_if_1);
}

RogueClassCmdGenericLoop* RogueParser__parse_loop( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueClassCmdGenericLoop* cmd_loop_1 = (((RogueCmdGenericLoop__init__Token_Integer_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)ROGUE_CREATE_OBJECT(CmdGenericLoop)), t_0, 7, ((RogueClassCmd*)(NULL)), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
  if (!(((RogueParser__consume_eols( THIS )))))
  {
    RogueClassLocal* control_var_2 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
    control_var_2->initial_value = ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), t_0, 1 )))));
    RogueClassLocal* last_var_3 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
    last_var_3->initial_value = ((RogueParser__parse_expression( THIS )));
    RogueParser__must_consume_eols( THIS );
    RogueClassCmdAdjustLocal* step_cmd_4 = (((RogueCmdAdjustLocal__init__Token_Local_Integer( ((RogueClassCmdAdjustLocal*)ROGUE_CREATE_OBJECT(CmdAdjustLocal)), t_0, control_var_2, 1 ))));
    cmd_loop_1->condition = ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLE*)ROGUE_CREATE_OBJECT(CmdCompareLE))), t_0, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), t_0, control_var_2 ))))), ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), t_0, last_var_3 ))))) )))));
    RogueCmdGenericLoop__add_control_var__Local( cmd_loop_1, control_var_2 );
    RogueCmdGenericLoop__add_control_var__Local( cmd_loop_1, last_var_3 );
    RogueCmdGenericLoop__add_upkeep__Cmd( cmd_loop_1, ((RogueClassCmd*)(step_cmd_4)) );
  }
  RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_loop_1->statements );
  RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_keyword_endLoop, ((RogueString*)(NULL)) );
  return (RogueClassCmdGenericLoop*)(cmd_loop_1);
}

RogueClassCmdGenericLoop* RogueParser__parse_while( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueClassCmdGenericLoop* cmd_while_1 = (((RogueCmdGenericLoop__init__Token_Integer_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)ROGUE_CREATE_OBJECT(CmdGenericLoop)), t_0, 8, ((RogueParser__parse_expression( THIS ))), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
  if (((RogueParser__consume_eols( THIS ))))
  {
    RogueParser__parse_multi_line_statements__CmdStatementList( THIS, cmd_while_1->statements );
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_keyword_endWhile, ((RogueString*)(NULL)) );
  }
  else
  {
    RogueParser__parse_single_line_statements__CmdStatementList( THIS, cmd_while_1->statements );
    RogueParser__consume_eols( THIS );
  }
  return (RogueClassCmdGenericLoop*)(cmd_while_1);
}

RogueClassCmd* RogueParser__parse_for_each( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__read( THIS ))));
  RogueLogical has_parens_1 = (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))));
  RogueClassCmd* expr_2 = (((RogueParser__parse_expression( THIS ))));
  RogueClassCmdAccess* access_3 = (((RogueClassCmdAccess*)(RogueObject_as(expr_2,RogueTypeCmdAccess))));
  if (!!(access_3))
  {
    if ((!!(access_3->context) || !!(access_3->args)))
    {
      throw ((RogueToken__error__String( access_3->t, Rogue_literal_strings[244] )));
    }
    else
    {
      RogueString* index_var_name_4 = 0;
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( access_3->name, Rogue_literal_strings[245] ))) == 0)
      {
        throw ((RogueToken__error__String( access_3->t, Rogue_literal_strings[246] )));
      }
      else if (((RogueParser__consume__String( THIS, Rogue_literal_strings[245] ))))
      {
        index_var_name_4 = ((RogueString*)((RogueParser__read_identifier__Logical( THIS, false ))));
      }
      if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_in ))))
      {
        RogueClassCmd* collection_5 = (((RogueParser__parse_expression( THIS ))));
        RogueClassCmdRange* range_6 = (((RogueClassCmdRange*)(RogueObject_as(collection_5,RogueTypeCmdRange))));
        if (!!(range_6))
        {
          if (!!(index_var_name_4))
          {
            throw ((RogueToken__error__String( range_6->t, Rogue_literal_strings[247] )));
          }
          RogueClassLocal* control_var_7 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, access_3->name, ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
          control_var_7->initial_value = range_6->first;
          RogueClassLocal* last_var_8 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
          last_var_8->initial_value = range_6->last;
          RogueClassCmd* step_cmd_9 = (((RogueClassCmd*)(NULL)));
          if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_step ))))
          {
            RogueClassCmd* step_value_10 = (((RogueParser__parse_expression( THIS ))));
            step_cmd_9 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdLocalOpWithAssign__init__Token_Local_TokenType_Cmd( ((RogueClassCmdLocalOpWithAssign*)ROGUE_CREATE_OBJECT(CmdLocalOpWithAssign)), range_6->t, control_var_7, RogueTokenType_symbol_plus_equals, step_value_10 ))))));
          }
          else
          {
            step_cmd_9 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Integer( ((RogueClassCmdAdjustLocal*)ROGUE_CREATE_OBJECT(CmdAdjustLocal)), range_6->t, control_var_7, 1 ))))));
          }
          RogueClassCmdGenericLoop* cmd_for_each_11 = (((RogueCmdGenericLoop__init__Token_Integer_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)ROGUE_CREATE_OBJECT(CmdGenericLoop)), t_0, 9, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLE*)ROGUE_CREATE_OBJECT(CmdCompareLE))), t_0, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), t_0, control_var_7 ))))), ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), t_0, last_var_8 ))))) ))))), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
          RogueCmdGenericLoop__add_control_var__Local( cmd_for_each_11, control_var_7 );
          RogueCmdGenericLoop__add_control_var__Local( cmd_for_each_11, last_var_8 );
          RogueCmdGenericLoop__add_upkeep__Cmd( cmd_for_each_11, step_cmd_9 );
          if (has_parens_1)
          {
            RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
          }
          RogueParser__parse_single_or_multi_line_statements__CmdStatementList_TokenType( THIS, cmd_for_each_11->statements, RogueTokenType_keyword_endForEach );
          return (RogueClassCmd*)(((RogueClassCmd*)(cmd_for_each_11)));
        }
        else
        {
          RogueClassCmd* step_cmd_12 = 0;
          if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_step ))))
          {
            step_cmd_12 = ((RogueClassCmd*)((RogueParser__parse_expression( THIS ))));
          }
          if (has_parens_1)
          {
            RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
          }
          RogueClassCmdForEach* cmd_for_each_13 = (((RogueCmdForEach__init__Token_String_String_Cmd_Cmd_CmdStatementList( ((RogueClassCmdForEach*)ROGUE_CREATE_OBJECT(CmdForEach)), t_0, access_3->name, index_var_name_4, collection_5, step_cmd_12, ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))) ))));
          RogueParser__parse_single_or_multi_line_statements__CmdStatementList_TokenType( THIS, cmd_for_each_13->statements, RogueTokenType_keyword_endForEach );
          return (RogueClassCmd*)(((RogueClassCmd*)(cmd_for_each_13)));
        }
      }
      else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_of ))))
      {
        if (!!(index_var_name_4))
        {
          throw ((RogueToken__error__String( t_0, Rogue_literal_strings[248] )));
        }
        RogueClassCmd* collection_14 = (((RogueParser__parse_expression( THIS ))));
        RogueClassCmdRange* range_15 = (((RogueClassCmdRange*)(RogueObject_as(collection_14,RogueTypeCmdRange))));
        if (!!(range_15))
        {
          throw ((RogueToken__error__String( t_0, Rogue_literal_strings[249] )));
        }
        else
        {
          RogueClassCmd* step_cmd_16 = 0;
          if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_step ))))
          {
            step_cmd_16 = ((RogueClassCmd*)((RogueParser__parse_expression( THIS ))));
          }
          if (has_parens_1)
          {
            RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
          }
          RogueClassCmdForEach* cmd_for_each_17 = (((RogueCmdForEach__init__Token_String_String_Cmd_Cmd_CmdStatementList( ((RogueClassCmdForEach*)ROGUE_CREATE_OBJECT(CmdForEach)), t_0, ((RogueString*)(NULL)), access_3->name, collection_14, step_cmd_16, ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))) ))));
          RogueParser__parse_single_or_multi_line_statements__CmdStatementList_TokenType( THIS, cmd_for_each_17->statements, RogueTokenType_keyword_endForEach );
          return (RogueClassCmd*)(((RogueClassCmd*)(cmd_for_each_17)));
        }
      }
      else
      {
        throw ((RogueToken__error__String( t_0, Rogue_literal_strings[250] )));
      }
    }
  }
  else
  {
    RogueClassCmdRange* range_18 = (((RogueClassCmdRange*)(RogueObject_as(expr_2,RogueTypeCmdRange))));
    if (!!(range_18))
    {
      RogueClassLocal* control_var_19 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
      control_var_19->initial_value = range_18->first;
      RogueClassLocal* last_var_20 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
      last_var_20->initial_value = range_18->last;
      RogueClassCmd* step_cmd_21 = 0;
      if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_step ))))
      {
        RogueClassCmd* step_value_22 = (((RogueParser__parse_expression( THIS ))));
        step_cmd_21 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdLocalOpWithAssign__init__Token_Local_TokenType_Cmd( ((RogueClassCmdLocalOpWithAssign*)ROGUE_CREATE_OBJECT(CmdLocalOpWithAssign)), range_18->t, control_var_19, RogueTokenType_symbol_plus_equals, step_value_22 ))))));
      }
      else
      {
        step_cmd_21 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Integer( ((RogueClassCmdAdjustLocal*)ROGUE_CREATE_OBJECT(CmdAdjustLocal)), range_18->t, control_var_19, 1 ))))));
      }
      RogueClassCmdGenericLoop* cmd_for_each_23 = (((RogueCmdGenericLoop__init__Token_Integer_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)ROGUE_CREATE_OBJECT(CmdGenericLoop)), t_0, 9, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLE*)ROGUE_CREATE_OBJECT(CmdCompareLE))), t_0, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), t_0, control_var_19 ))))), ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), t_0, last_var_20 ))))) ))))), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
      RogueCmdGenericLoop__add_control_var__Local( cmd_for_each_23, control_var_19 );
      RogueCmdGenericLoop__add_control_var__Local( cmd_for_each_23, last_var_20 );
      RogueCmdGenericLoop__add_upkeep__Cmd( cmd_for_each_23, step_cmd_21 );
      if (has_parens_1)
      {
        RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
      }
      RogueParser__parse_single_or_multi_line_statements__CmdStatementList_TokenType( THIS, cmd_for_each_23->statements, RogueTokenType_keyword_endForEach );
      return (RogueClassCmd*)(((RogueClassCmd*)(cmd_for_each_23)));
    }
    else
    {
      throw ((RogueToken__error__String( t_0, Rogue_literal_strings[251] )));
    }
  }
  RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), Rogue_literal_strings[252] );
  throw ((RogueToken__error__String( expr_2->t, Rogue_literal_strings[253] )));
}

RogueClassToken* RogueParser__peek( RogueClassParser* THIS )
{
  return (RogueClassToken*)(((RogueTokenReader__peek( THIS->reader ))));
}

RogueClassToken* RogueParser__read( RogueClassParser* THIS )
{
  return (RogueClassToken*)(((RogueTokenReader__read( THIS->reader ))));
}

RogueString* RogueParser__read_identifier__Logical( RogueClassParser* THIS, RogueLogical allow_at_sign_0 )
{
  RogueLogical direct_access_1 = (false);
  if (allow_at_sign_0)
  {
    direct_access_1 = ((RogueLogical)((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_at ))));
  }
  if (!(((RogueParser__next_is__TokenType( THIS, RogueTokenType_identifier )))))
  {
    if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_type_identifier ))))
    {
      RogueString* result_2 = ((call_ROGUEM38( 13, (RogueClassToken*)(((RogueParser__read( THIS )))) ))->name);
      if (direct_access_1)
      {
        result_2 = ((RogueString*)((RogueString__operatorPLUS__String( Rogue_literal_strings[151], result_2 ))));
      }
      return (RogueString*)(result_2);
    }
    throw ((RogueParser__error__String( THIS, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[42] ))), ((RogueToken__quoted_name( ((RogueParser__peek( THIS ))) ))) ))), Rogue_literal_strings[44] ))) ))) )));
  }
  RogueString* result_3 = ((call_ROGUEM33( 1, (RogueClassToken*)(((RogueParser__read( THIS )))) )));
  if (direct_access_1)
  {
    result_3 = ((RogueString*)((RogueString__operatorPLUS__String( Rogue_literal_strings[151], result_3 ))));
  }
  return (RogueString*)(result_3);
}

RogueClassCmd* RogueParser__parse_expression( RogueClassParser* THIS )
{
  RogueParser__consume_eols( THIS );
  return (RogueClassCmd*)(((RogueParser__parse_range( THIS ))));
}

RogueClassCmd* RogueParser__parse_range( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_range__Cmd( THIS, ((RogueParser__parse_logical_xor( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_range__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_upTo ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdRange__init__Token_Cmd_Cmd_Cmd( ((RogueClassCmdRange*)((RogueClassCmdRangeUpTo*)ROGUE_CREATE_OBJECT(CmdRangeUpTo))), t_1, lhs_0, ((RogueParser__parse_logical_xor( THIS ))), ((RogueClassCmd*)(NULL)) ))))));
  }
  else
  {
    return (RogueClassCmd*)(lhs_0);
  }
}

RogueClassCmd* RogueParser__parse_logical_xor( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_logical_xor__Cmd( THIS, ((RogueParser__parse_logical_or( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_logical_xor__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_xor ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_logical_xor__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdLogicalXor*)ROGUE_CREATE_OBJECT(CmdLogicalXor))), t_1, lhs_0, ((RogueParser__parse_logical_or( THIS ))) ))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_logical_or( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_logical_or__Cmd( THIS, ((RogueParser__parse_logical_and( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_logical_or__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_or ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_logical_or__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdLogicalOr*)ROGUE_CREATE_OBJECT(CmdLogicalOr))), t_1, lhs_0, ((RogueParser__parse_logical_and( THIS ))) ))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_logical_and( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_logical_and__Cmd( THIS, ((RogueParser__parse_comparison( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_logical_and__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_and ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_logical_and__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdLogicalAnd*)ROGUE_CREATE_OBJECT(CmdLogicalAnd))), t_1, lhs_0, ((RogueParser__parse_comparison( THIS ))) ))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_comparison( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueParser__parse_bitwise_xor( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_comparison__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_eq ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)ROGUE_CREATE_OBJECT(CmdCompareEQ))), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_is ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareIs*)ROGUE_CREATE_OBJECT(CmdCompareIs))), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_ne ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareNE*)ROGUE_CREATE_OBJECT(CmdCompareNE))), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_isNot ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareIsNot*)ROGUE_CREATE_OBJECT(CmdCompareIsNot))), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_lt ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLT*)ROGUE_CREATE_OBJECT(CmdCompareLT))), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_gt ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareGT*)ROGUE_CREATE_OBJECT(CmdCompareGT))), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_le ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLE*)ROGUE_CREATE_OBJECT(CmdCompareLE))), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_ge ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_comparison__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareGE*)ROGUE_CREATE_OBJECT(CmdCompareGE))), t_1, lhs_0, ((RogueParser__parse_bitwise_xor( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_instanceOf ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdInstanceOf*)ROGUE_CREATE_OBJECT(CmdInstanceOf))), t_1, lhs_0, ((Rogue_Parser__parse_type( THIS ))) ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_notInstanceOf ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), t_1, ((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdInstanceOf*)ROGUE_CREATE_OBJECT(CmdInstanceOf))), t_1, lhs_0, ((Rogue_Parser__parse_type( THIS ))) ))))) ))))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_bitwise_xor( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_bitwise_xor__Cmd( THIS, ((RogueParser__parse_bitwise_or( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_bitwise_xor__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_tilde ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_bitwise_xor__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseXor*)ROGUE_CREATE_OBJECT(CmdBitwiseXor))), t_1, lhs_0, ((RogueParser__parse_bitwise_or( THIS ))) ))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_bitwise_or( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_bitwise_or__Cmd( THIS, ((RogueParser__parse_bitwise_and( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_bitwise_or__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  RogueInteger starting_pos_2 = (THIS->reader->position);
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_vertical_bar ))))
  {
    RogueParser__consume_eols( THIS );
    RogueClassCmd* rhs_3 = (((RogueParser__parse_bitwise_and( THIS ))));
    return (RogueClassCmd*)(((RogueParser__parse_bitwise_or__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseOr*)ROGUE_CREATE_OBJECT(CmdBitwiseOr))), t_1, lhs_0, rhs_3 ))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_bitwise_and( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_bitwise_and__Cmd( THIS, ((RogueParser__parse_bitwise_shift( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_bitwise_and__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_ampersand ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_bitwise_and__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseAnd*)ROGUE_CREATE_OBJECT(CmdBitwiseAnd))), t_1, lhs_0, ((RogueParser__parse_bitwise_shift( THIS ))) ))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_bitwise_shift( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_bitwise_shift__Cmd( THIS, ((RogueParser__parse_add_subtract( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_bitwise_shift__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_shift_left ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseShiftLeft*)ROGUE_CREATE_OBJECT(CmdBitwiseShiftLeft))), t_1, lhs_0, ((RogueParser__parse_add_subtract( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_shift_right ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseShiftRight*)ROGUE_CREATE_OBJECT(CmdBitwiseShiftRight))), t_1, lhs_0, ((RogueParser__parse_add_subtract( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_shift_right_x ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseShiftRightX*)ROGUE_CREATE_OBJECT(CmdBitwiseShiftRightX))), t_1, lhs_0, ((RogueParser__parse_add_subtract( THIS ))) ))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_add_subtract( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( THIS, ((RogueParser__parse_multiply_divide_mod( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_add_subtract__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_plus ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdAdd*)ROGUE_CREATE_OBJECT(CmdAdd))), t_1, lhs_0, ((RogueParser__parse_multiply_divide_mod( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_minus ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_add_subtract__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdSubtract*)ROGUE_CREATE_OBJECT(CmdSubtract))), t_1, lhs_0, ((RogueParser__parse_multiply_divide_mod( THIS ))) ))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_multiply_divide_mod( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_multiply_divide_mod__Cmd( THIS, ((RogueParser__parse_power( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_multiply_divide_mod__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_times ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_multiply_divide_mod__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMultiply*)ROGUE_CREATE_OBJECT(CmdMultiply))), t_1, lhs_0, ((RogueParser__parse_power( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_slash ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_multiply_divide_mod__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdDivide*)ROGUE_CREATE_OBJECT(CmdDivide))), t_1, lhs_0, ((RogueParser__parse_power( THIS ))) ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_percent ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_multiply_divide_mod__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMod*)ROGUE_CREATE_OBJECT(CmdMod))), t_1, lhs_0, ((RogueParser__parse_power( THIS ))) ))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_power( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_power__Cmd( THIS, ((RogueParser__parse_pre_unary( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_power__Cmd( RogueClassParser* THIS, RogueClassCmd* lhs_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_caret ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueParser__parse_power__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdPower*)ROGUE_CREATE_OBJECT(CmdPower))), t_1, lhs_0, ((RogueParser__parse_pre_unary( THIS ))) ))))) ))));
  }
  return (RogueClassCmd*)(lhs_0);
}

RogueClassCmd* RogueParser__parse_pre_unary( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_minus ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdNegate*)ROGUE_CREATE_OBJECT(CmdNegate))), t_0, ((RogueParser__parse_pre_unary( THIS ))) ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_not ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), t_0, ((RogueParser__parse_pre_unary( THIS ))) ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_exclamation_point ))))
  {
    RogueParser__consume_eols( THIS );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdBitwiseNot*)ROGUE_CREATE_OBJECT(CmdBitwiseNot))), t_0, ((RogueParser__parse_pre_unary( THIS ))) ))))));
  }
  return (RogueClassCmd*)(((RogueParser__parse_post_unary( THIS ))));
}

RogueClassCmd* RogueParser__parse_post_unary( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_post_unary__Cmd( THIS, ((RogueParser__parse_member_access( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_post_unary__Cmd( RogueClassParser* THIS, RogueClassCmd* operand_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_question_mark ))))
  {
    return (RogueClassCmd*)(((RogueParser__parse_post_unary__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalize*)ROGUE_CREATE_OBJECT(CmdLogicalize))), t_1, operand_0 ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_exclamation_point ))))
  {
    return (RogueClassCmd*)(((RogueParser__parse_post_unary__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdGetOptionalValue__init__Token_Cmd( ((RogueClassCmdGetOptionalValue*)ROGUE_CREATE_OBJECT(CmdGetOptionalValue)), t_1, operand_0 ))))) ))));
  }
  return (RogueClassCmd*)(operand_0);
}

RogueClassCmd* RogueParser__parse_member_access( RogueClassParser* THIS )
{
  return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( THIS, ((RogueParser__parse_term( THIS ))) ))));
}

RogueClassCmd* RogueParser__parse_member_access__Cmd( RogueClassParser* THIS, RogueClassCmd* context_0 )
{
  RogueClassToken* t_1 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_dot ))))
  {
    RogueClassCmd* access_2 = (((RogueParser__parse_access__Token_Cmd( THIS, t_1, context_0 ))));
    return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( THIS, access_2 ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_bracket ))))
  {
    RogueParser__consume_eols( THIS );
    RogueClassCmdElementAccess* access_3 = (((RogueCmdElementAccess__init__Token_Cmd_Cmd( ((RogueClassCmdElementAccess*)ROGUE_CREATE_OBJECT(CmdElementAccess)), t_1, context_0, ((RogueParser__parse_expression( THIS ))) ))));
    RogueParser__consume_eols( THIS );
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_bracket, ((RogueString*)(NULL)) );
    return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( THIS, ((RogueClassCmd*)(access_3)) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_arrow ))))
  {
    RogueParser__consume_eols( THIS );
    RogueClassType* to_type_4 = (((Rogue_Parser__parse_type( THIS ))));
    return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdConvertToType*)ROGUE_CREATE_OBJECT(CmdConvertToType))), t_1, context_0, to_type_4 ))))) ))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon_colon ))))
  {
    RogueParser__consume_eols( THIS );
    RogueString* name_5 = (((RogueParser__read_identifier__Logical( THIS, false ))));
    RogueTypeList* arg_types_6 = 0;
    RogueParser__consume_eols( THIS );
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
    {
      arg_types_6 = ((RogueTypeList*)((RogueTypeList__init( ((RogueTypeList*)ROGUE_CREATE_OBJECT(TypeList)) ))));
      RogueLogical first_7 = (true);
      while ((first_7 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
      {
        first_7 = ((RogueLogical)false);
        RogueParser__consume_eols( THIS );
        RogueTypeList__add__Type( arg_types_6, ((Rogue_Parser__parse_type( THIS ))) );
        RogueParser__consume_eols( THIS );
      }
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
      RogueParser__consume_eols( THIS );
    }
    RogueClassType* return_type_8 = 0;
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_arrow ))))
    {
      return_type_8 = ((RogueClassType*)((Rogue_Parser__parse_type( THIS ))));
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateCallback__init__Token_Cmd_String_String_Type( ((RogueClassCmdCreateCallback*)ROGUE_CREATE_OBJECT(CmdCreateCallback)), t_1, context_0, name_5, ((RogueProgram__get_callback_type_signature__TypeList( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), arg_types_6 ))), return_type_8 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_as ))))
  {
    RogueParser__consume_eols( THIS );
    RogueClassType* as_type_9 = (((Rogue_Parser__parse_type( THIS ))));
    return (RogueClassCmd*)(((RogueParser__parse_member_access__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdAs*)ROGUE_CREATE_OBJECT(CmdAs))), t_1, context_0, as_type_9 ))))) ))));
  }
  return (RogueClassCmd*)(context_0);
}

RogueClassCmd* RogueParser__parse_access__Token_Cmd( RogueClassParser* THIS, RogueClassToken* t_0, RogueClassCmd* context_1 )
{
  RogueParser__consume_eols( THIS );
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_meta ))))
  {
    RogueClassType* context_type_2 = 0;
    if (!!(context_1))
    {
      context_type_2 = ((RogueClassType*)(call_ROGUEM46( 14, (RogueClassCmd*)(context_1) )));
    }
    else
    {
      context_type_2 = ((RogueClassType*)THIS->_this_type);
    }
    if (!(!!(context_type_2)))
    {
      throw ((RogueToken__error__String( t_0, Rogue_literal_strings[234] )));
    }
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_dot, ((RogueString*)(NULL)) );
    t_0 = ((RogueClassToken*)((RogueParser__peek( THIS ))));
    RogueString* id_3 = (((RogueParser__read_identifier__Logical( THIS, false ))));
    {
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( id_3, Rogue_literal_strings[235] ))) == 0)
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdDefaultValue__init__Token_Type( ((RogueClassCmdDefaultValue*)ROGUE_CREATE_OBJECT(CmdDefaultValue)), t_0, context_type_2 ))))));
      }
      else
      {
        throw ((RogueToken__error__String( t_0, Rogue_literal_strings[236] )));
      }
    }
  }
  RogueString* name_4 = (((RogueParser__read_identifier__Logical( THIS, true ))));
  if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_open_specialize ))))
  {
    name_4 = ((RogueString*)((RogueString__operatorPLUS__String( name_4, ((RogueParser__parse_specialization_string( THIS ))) ))));
  }
  for (;;)
  {
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_empty_brackets ))))
    {
      name_4 = ((RogueString*)((RogueString__operatorPLUS__String( name_4, Rogue_literal_strings[162] ))));
    }
    else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_question_mark ))))
    {
      name_4 = ((RogueString*)((RogueString__operatorPLUS__String( name_4, Rogue_literal_strings[183] ))));
    }
    else
    {
      goto _auto_732;
    }
  }
  _auto_732:;
  RogueClassCmdAccess* access_5 = (((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), t_0, name_4 ))));
  access_5->args = ((RogueParser__parse_args__TokenType_TokenType( THIS, RogueTokenType_symbol_open_paren, RogueTokenType_symbol_close_paren )));
  access_5->context = context_1;
  return (RogueClassCmd*)(((RogueClassCmd*)(access_5)));
}

RogueClassCmdArgs* RogueParser__parse_args__TokenType_TokenType( RogueClassParser* THIS, RogueClassTokenType* start_type_0, RogueClassTokenType* end_type_1 )
{
  if (!(((RogueParser__consume__TokenType( THIS, start_type_0 )))))
  {
    return (RogueClassCmdArgs*)(((RogueClassCmdArgs*)(NULL)));
  }
  RogueParser__consume_eols( THIS );
  RogueClassCmdArgs* args_2 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))));
  if (!(((RogueParser__consume__TokenType( THIS, end_type_1 )))))
  {
    RogueLogical first_3 = (true);
    while ((first_3 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
    {
      RogueParser__consume_eols( THIS );
      first_3 = ((RogueLogical)false);
      RogueCmdList__add__Cmd( ((RogueCmdList*)args_2), ((RogueParser__parse_expression( THIS ))) );
    }
    RogueParser__consume_eols( THIS );
    RogueParser__must_consume__TokenType_String( THIS, end_type_1, ((RogueString*)(NULL)) );
  }
  return (RogueClassCmdArgs*)(args_2);
}

RogueString* RogueParser__parse_specialization_string( RogueClassParser* THIS )
{
  RogueStringBuilder__clear( THIS->string_buffer );
  RogueParser__read( THIS );
  RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[177] );
  RogueLogical first_0 = (true);
  while ((first_0 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
  {
    if (first_0)
    {
      first_0 = ((RogueLogical)false);
    }
    else
    {
      RogueStringBuilder__print__Character( THIS->string_buffer, (RogueCharacter)',' );
    }
    RogueParser__parse_specializer__StringBuilder_TokenList( THIS, THIS->string_buffer, ((RogueTokenList*)(NULL)) );
  }
  RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_specialize, ((RogueString*)(NULL)) );
  RogueStringBuilder__print__String( THIS->string_buffer, Rogue_literal_strings[101] );
  return (RogueString*)(((RogueStringBuilder__to_String( THIS->string_buffer ))));
}

void RogueParser__parse_specializer__StringBuilder_TokenList( RogueClassParser* THIS, RogueStringBuilder* buffer_0, RogueTokenList* tokens_1 )
{
  RogueInteger nesting_level_2 = (1);
  while (((RogueTokenReader__has_another( THIS->reader ))))
  {
    if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_eol ))))
    {
      throw ((RogueToken__error__String( ((RogueParser__peek( THIS ))), Rogue_literal_strings[237] )));
    }
    RogueClassToken* t_3 = (((RogueParser__peek( THIS ))));
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_backslash ))))
    {
      if (!!(tokens_1))
      {
        RogueTokenList__add__Token( tokens_1, t_3 );
      }
      RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[152] );
      if (!(((RogueTokenReader__has_another( THIS->reader )))))
      {
        throw ((RogueToken__error__String( t_3, Rogue_literal_strings[41] )));
      }
      t_3 = ((RogueClassToken*)((RogueParser__read( THIS ))));
      RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(t_3)) );
      if (!!(tokens_1))
      {
        RogueTokenList__add__Token( tokens_1, t_3 );
      }
    }
    else if (t_3->_type == RogueTokenType_symbol_comma)
    {
      if (nesting_level_2 == 1)
      {
        return;
      }
      RogueParser__read( THIS );
      if (!!(tokens_1))
      {
        RogueTokenList__add__Token( tokens_1, t_3 );
      }
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_specialize ))))
    {
      if (!!(tokens_1))
      {
        RogueTokenList__add__Token( tokens_1, t_3 );
      }
      RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[177] );
      ++nesting_level_2;
    }
    else if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_close_specialize ))))
    {
      --nesting_level_2;
      if (nesting_level_2 == 0)
      {
        return;
      }
      else
      {
        RogueParser__read( THIS );
        if (!!(tokens_1))
        {
          RogueTokenList__add__Token( tokens_1, t_3 );
        }
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[101] );
      }
    }
    else
    {
      if (!!(tokens_1))
      {
        RogueTokenList__add__Token( tokens_1, t_3 );
      }
      RogueStringBuilder__print__String( buffer_0, (call_ROGUEM33( 1, (RogueClassToken*)(((RogueParser__read( THIS )))) )) );
    }
  }
}

RogueClassCmd* RogueParser__parse_term( RogueClassParser* THIS )
{
  RogueClassToken* t_0 = (((RogueParser__peek( THIS ))));
  if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
  {
    RogueParser__consume_eols( THIS );
    if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_close_paren ))))
    {
      throw ((RogueToken__error__String( t_0, Rogue_literal_strings[241] )));
    }
    RogueClassCmd* result_1 = (((RogueParser__parse_expression( THIS ))));
    RogueParser__consume_eols( THIS );
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
    return (RogueClassCmd*)(result_1);
  }
  else if (((((RogueParser__next_is__TokenType( THIS, RogueTokenType_identifier ))) || ((RogueParser__next_is__TokenType( THIS, RogueTokenType_symbol_at )))) || ((RogueParser__next_is__TokenType( THIS, RogueTokenType_keyword_meta )))))
  {
    RogueClassCmd* result_2 = (((RogueParser__parse_access__Token_Cmd( THIS, t_0, ((RogueClassCmd*)(NULL)) ))));
    return (RogueClassCmd*)(result_2);
  }
  else if (((RogueParser__next_is__TokenType( THIS, RogueTokenType_type_identifier ))))
  {
    RogueClassCmd* result_3 = (((RogueParser__parse_access__Token_Cmd( THIS, t_0, ((RogueClassCmd*)(NULL)) ))));
    return (RogueClassCmd*)(result_3);
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_literal_string ))))
  {
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
    {
      RogueLogical first_4 = (true);
      RogueClassCmdArgs* args_5 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))));
      while ((first_4 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
      {
        first_4 = ((RogueLogical)false);
        RogueCmdList__add__Cmd( ((RogueCmdList*)args_5), ((RogueParser__parse_expression( THIS ))) );
      }
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdFormattedString__init__Token_String_CmdArgs( ((RogueClassCmdFormattedString*)ROGUE_CREATE_OBJECT(CmdFormattedString)), t_0, (call_ROGUEM33( 1, (RogueClassToken*)(t_0) )), args_5 ))))));
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Integer( ((RogueClassCmdLiteralString*)ROGUE_CREATE_OBJECT(CmdLiteralString)), t_0, (call_ROGUEM33( 1, (RogueClassToken*)(t_0) )), 0 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_null ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralNull__init__Token( ((RogueClassCmdLiteralNull*)ROGUE_CREATE_OBJECT(CmdLiteralNull)), t_0 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_literal_real ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)ROGUE_CREATE_OBJECT(CmdLiteralReal)), t_0, (call_ROGUEM37( 12, (RogueClassToken*)(t_0) )) ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_literal_integer ))))
  {
    RogueInteger value_6 = ((call_ROGUEM35( 10, (RogueClassToken*)(t_0) )));
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), t_0, value_6 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_literal_long ))))
  {
    RogueLong value_7 = ((call_ROGUEM36( 11, (RogueClassToken*)(t_0) )));
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLong__init__Token_Long( ((RogueClassCmdLiteralLong*)ROGUE_CREATE_OBJECT(CmdLiteralLong)), t_0, value_7 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_literal_character ))))
  {
    RogueCharacter value_8 = ((call_ROGUEM34( 9, (RogueClassToken*)(t_0) )));
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralCharacter__init__Token_Character( ((RogueClassCmdLiteralCharacter*)ROGUE_CREATE_OBJECT(CmdLiteralCharacter)), t_0, value_8 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_this ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)((RogueClassCmdLiteralThis*)ROGUE_CREATE_OBJECT(CmdLiteralThis))), t_0, THIS->_this_type ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_true ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), t_0, true ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_false ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), t_0, false ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_pi ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)ROGUE_CREATE_OBJECT(CmdLiteralReal)), t_0, 3.141592653589793 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_bracket ))))
  {
    RogueClassCmdCreateList* list_9 = (((RogueCmdCreateList__init__Token_CmdArgs_Type( ((RogueClassCmdCreateList*)ROGUE_CREATE_OBJECT(CmdCreateList)), t_0, ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))), ((RogueClassType*)(NULL)) ))));
    RogueParser__consume_eols( THIS );
    if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_close_bracket )))))
    {
      RogueLogical first_10 = (true);
      while ((first_10 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
      {
        first_10 = ((RogueLogical)false);
        RogueCmdList__add__Cmd( ((RogueCmdList*)list_9->args), ((RogueParser__parse_expression( THIS ))) );
        RogueParser__consume_eols( THIS );
      }
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_bracket, ((RogueString*)(NULL)) );
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(list_9)));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_empty_brackets ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), t_0, Rogue_literal_strings[242], ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))) ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_prior ))))
  {
    RogueParser__consume_eols( THIS );
    RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_dot, ((RogueString*)(NULL)) );
    RogueParser__consume_eols( THIS );
    RogueString* name_11 = (((RogueParser__read_identifier__Logical( THIS, false ))));
    RogueClassCmdArgs* args_12 = (((RogueParser__parse_args__TokenType_TokenType( THIS, RogueTokenType_symbol_open_paren, RogueTokenType_symbol_close_paren ))));
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCallPriorMethod__init__Token_String_CmdArgs( ((RogueClassCmdCallPriorMethod*)ROGUE_CREATE_OBJECT(CmdCallPriorMethod)), t_0, name_11, args_12 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_await ))))
  {
    RogueClassLocal* result_var_13 = (((RogueMethod__add_local__Token_String_Type_Cmd( THIS->this_method, t_0, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object, ((RogueClassCmd*)(NULL)) ))));
    RogueClassCmdStatementList* statement_list_14 = (((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))));
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->cur_statement_list), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local( ((RogueClassCmdLocalDeclaration*)ROGUE_CREATE_OBJECT(CmdLocalDeclaration)), t_0, result_var_13 ))))) );
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->cur_statement_list), ((RogueClassCmd*)(((RogueCmdAwait__init__Token_Cmd_CmdStatementList_Local( ((RogueClassCmdAwait*)ROGUE_CREATE_OBJECT(CmdAwait)), t_0, ((RogueParser__parse_expression( THIS ))), statement_list_14, result_var_13 ))))) );
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), t_0, result_var_13->name ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_function ))))
  {
    RogueFnParamList* parameters_15 = 0;
    RogueClassType* return_type_16 = 0;
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
    {
      if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_close_paren )))))
      {
        parameters_15 = ((RogueFnParamList*)((RogueFnParamList__init( ((RogueFnParamList*)ROGUE_CREATE_OBJECT(FnParamList)) ))));
        RogueLogical first_17 = (true);
        while ((first_17 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
        {
          first_17 = ((RogueLogical)false);
          RogueClassFnParam* param_18 = (((RogueFnParam__init__String( ((RogueClassFnParam*)ROGUE_CREATE_OBJECT(FnParam)), ((RogueParser__read_identifier__Logical( THIS, false ))) ))));
          RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_colon, ((RogueString*)(NULL)) );
          param_18->_type = ((Rogue_Parser__parse_type( THIS )));
          RogueFnParamList__add__FnParam( parameters_15, param_18 );
        }
        RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
      }
    }
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_arrow ))))
    {
      return_type_16 = ((RogueClassType*)((Rogue_Parser__parse_type( THIS ))));
    }
    RogueFnArgList* with_args_19 = 0;
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_with ))))
    {
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_open_paren, ((RogueString*)(NULL)) );
      if (!(((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_close_paren )))))
      {
        with_args_19 = ((RogueFnArgList*)((RogueFnArgList__init( ((RogueFnArgList*)ROGUE_CREATE_OBJECT(FnArgList)) ))));
        RogueLogical first_20 = (true);
        while ((first_20 || ((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_comma )))))
        {
          first_20 = ((RogueLogical)false);
          RogueClassToken* t2_21 = (((RogueParser__peek( THIS ))));
          RogueString* name_22 = (((RogueParser__read_identifier__Logical( THIS, false ))));
          RogueClassCmd* value_23 = 0;
          if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_equals ))))
          {
            value_23 = ((RogueClassCmd*)((RogueParser__parse_expression( THIS ))));
          }
          else
          {
            value_23 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), t2_21, name_22 ))))));
          }
          RogueClassFnArg* arg_24 = (((RogueFnArg__init__String_Cmd( ((RogueClassFnArg*)ROGUE_CREATE_OBJECT(FnArg)), name_22, value_23 ))));
          if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_colon ))))
          {
            RogueFnArg__set_type__Type( arg_24, ((Rogue_Parser__parse_type( THIS ))) );
          }
          RogueFnArgList__add__FnArg( with_args_19, arg_24 );
        }
        RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
      }
    }
    RogueClassCmdStatementList* statements_25 = (((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))));
    if (((RogueParser__consume_eols( THIS ))))
    {
      RogueParser__parse_multi_line_statements__CmdStatementList( THIS, statements_25 );
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_keyword_endFunction, ((RogueString*)(NULL)) );
    }
    else
    {
      RogueParser__parse_single_line_statements__CmdStatementList( THIS, statements_25 );
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateFunction__init__Token_FnParamList_Type_FnArgList_CmdStatementList( ((RogueClassCmdCreateFunction*)ROGUE_CREATE_OBJECT(CmdCreateFunction)), t_0, parameters_15, return_type_16, with_args_19, statements_25 ))))));
  }
  else if (((RogueParser__consume__TokenType( THIS, RogueTokenType_keyword_native ))))
  {
    RogueParser__consume_eols( THIS );
    RogueLogical has_parens_26 = (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))));
    if (has_parens_26)
    {
      RogueParser__consume_eols( THIS );
    }
    if (!(((RogueParser__next_is__TokenType( THIS, RogueTokenType_literal_string )))))
    {
      throw ((RogueToken__error__String( ((RogueParser__peek( THIS ))), Rogue_literal_strings[261] )));
    }
    RogueString* code_27 = ((call_ROGUEM33( 1, (RogueClassToken*)(((RogueParser__read( THIS )))) )));
    if (has_parens_26)
    {
      RogueParser__consume_eols( THIS );
      RogueParser__must_consume__TokenType_String( THIS, RogueTokenType_symbol_close_paren, ((RogueString*)(NULL)) );
    }
    RogueClassType* result_type_28 = 0;
    if (((RogueParser__consume__TokenType( THIS, RogueTokenType_symbol_arrow ))))
    {
      result_type_28 = ((RogueClassType*)((Rogue_Parser__parse_type( THIS ))));
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdNativeCode__init__Token_String_Type( ((RogueClassCmdNativeCode*)ROGUE_CREATE_OBJECT(CmdNativeCode)), t_0, code_27, result_type_28 ))))));
  }
  else
  {
    throw ((RogueToken__error__String( ((RogueParser__peek( THIS ))), ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__Object( Rogue_literal_strings[262], ((RogueObject*)(((RogueParser__peek( THIS ))))) ))), Rogue_literal_strings[13] ))) )));
  }
}

RogueClassParser* RogueParser__init_object( RogueClassParser* THIS )
{
  THIS->local_declarations = ((RogueLocalList__init( ((RogueLocalList*)ROGUE_CREATE_OBJECT(LocalList)) )));
  THIS->property_list = ((RoguePropertyList__init( ((RoguePropertyList*)ROGUE_CREATE_OBJECT(PropertyList)) )));
  THIS->string_buffer = ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) )));
  return (RogueClassParser*)(THIS);
}

RogueString* RogueTokenList__to_String( RogueTokenList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTokenList* _auto_762_2 = (THIS);
    RogueInteger _auto_763_3 = (0);
    for (;_auto_763_3 < _auto_762_2->count;++_auto_763_3)
    {
      RogueClassToken* value_4 = (((RogueClassToken*)(_auto_762_2->data->objects[_auto_763_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM33( 1, (RogueClassToken*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueTokenList__type_name( RogueTokenList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[932]);
}

RogueTokenList* RogueTokenList__init_object( RogueTokenList* THIS )
{
  return (RogueTokenList*)(THIS);
}

RogueTokenList* RogueTokenList__init( RogueTokenList* THIS )
{
  RogueTokenList__init__Integer( THIS, 10 );
  return (RogueTokenList*)(THIS);
}

RogueTokenList* RogueTokenList__init__Integer( RogueTokenList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassToken*), true );
  return (RogueTokenList*)(THIS);
}

RogueTokenList* RogueTokenList__add__Token( RogueTokenList* THIS, RogueClassToken* value_0 )
{
  ((RogueTokenList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTokenList*)(THIS);
}

RogueTokenList* RogueTokenList__add__TokenList( RogueTokenList* THIS, RogueTokenList* other_0 )
{
  RogueTokenList__reserve__Integer( THIS, other_0->count );
  {
    RogueTokenList* _auto_766_1 = (other_0);
    RogueInteger _auto_767_2 = (0);
    for (;_auto_767_2 < _auto_766_1->count;++_auto_767_2)
    {
      RogueClassToken* value_3 = (((RogueClassToken*)(_auto_766_1->data->objects[_auto_767_2])));
      RogueTokenList__add__Token( THIS, value_3 );
    }
  }
  return (RogueTokenList*)(THIS);
}

RogueInteger RogueTokenList__capacity( RogueTokenList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueClassToken* RogueTokenList__last( RogueTokenList* THIS )
{
  return (RogueClassToken*)(((RogueClassToken*)(THIS->data->objects[(THIS->count - 1)])));
}

RogueTokenList* RogueTokenList__reserve__Integer( RogueTokenList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassToken*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueTokenList__capacity( THIS ))) + ((RogueTokenList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassToken*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTokenList*)(THIS);
}

RogueClassToken* RogueTokenList__remove_at__Integer( RogueTokenList* THIS, RogueInteger index_0 )
{
  RogueClassToken* result_1 = (((RogueClassToken*)(THIS->data->objects[index_0])));
  THIS->data->set(index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  RogueClassToken* zero_value_2 = 0;
  THIS->data->objects[THIS->count] = zero_value_2;
  --THIS->count;
  return (RogueClassToken*)(result_1);
}

RogueClassToken* RogueTokenList__remove_last( RogueTokenList* THIS )
{
  return (RogueClassToken*)(((RogueTokenList__remove_at__Integer( THIS, (THIS->count - 1) ))));
}

RogueString* RogueLineReader__type_name( RogueClassLineReader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[562]);
}

RogueLogical RogueLineReader__has_another( RogueClassLineReader* THIS )
{
  return (RogueLogical)(!!(THIS->next));
}

RogueString* RogueLineReader__read( RogueClassLineReader* THIS )
{
  RogueString* result_0 = (THIS->next);
  THIS->next = ((RogueLineReader__prepare_next( THIS )));
  return (RogueString*)(result_0);
}

RogueClassLineReader* RogueLineReader__init__CharacterReader( RogueClassLineReader* THIS, RogueClassCharacterReader* _auto_235_0 )
{
  THIS->source = _auto_235_0;
  THIS->next = ((RogueLineReader__prepare_next( THIS )));
  return (RogueClassLineReader*)(THIS);
}

RogueClassLineReader* RogueLineReader__init__File( RogueClassLineReader* THIS, RogueClassFile* file_0 )
{
  RogueLineReader__init__CharacterReader( THIS, (((RogueClassCharacterReader*)((RogueFile__reader__String( file_0->filepath ))))) );
  return (RogueClassLineReader*)(THIS);
}

RogueClassLineReader* RogueLineReader__init__String( RogueClassLineReader* THIS, RogueString* string_0 )
{
  RogueLineReader__init__CharacterReader( THIS, (((RogueClassCharacterReader*)(((RogueString__reader( string_0 )))))) );
  return (RogueClassLineReader*)(THIS);
}

RogueString* RogueLineReader__prepare_next( RogueClassLineReader* THIS )
{
  if (!((RogueCharacterReader__has_another( (RogueObject*)THIS->source ))))
  {
    if (THIS->prev == (RogueCharacter)10)
    {
      THIS->prev = ((RogueCharacter)(0));
      return (RogueString*)(Rogue_literal_strings[0]);
    }
    else
    {
      return (RogueString*)(((RogueString*)(NULL)));
    }
  }
  THIS->prev = ((RogueCharacter)(0));
  RogueStringBuilder__clear( THIS->buffer );
  while ((RogueCharacterReader__has_another( (RogueObject*)THIS->source )))
  {
    RogueCharacter ch_0 = ((RogueCharacterReader__read( (RogueObject*)THIS->source )));
    if (ch_0 == (RogueCharacter)10)
    {
      THIS->prev = (RogueCharacter)10;
      return (RogueString*)(((RogueStringBuilder__to_String( THIS->buffer ))));
    }
    RogueStringBuilder__print__Character( THIS->buffer, ch_0 );
  }
  return (RogueString*)(((RogueStringBuilder__to_String( THIS->buffer ))));
}

RogueClassLineReader* RogueLineReader__init_object( RogueClassLineReader* THIS )
{
  THIS->buffer = ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) )));
  return (RogueClassLineReader*)(THIS);
}

RogueString* RogueTypeParameterList__to_String( RogueTypeParameterList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTypeParameterList* _auto_772_2 = (THIS);
    RogueInteger _auto_773_3 = (0);
    for (;_auto_773_3 < _auto_772_2->count;++_auto_773_3)
    {
      RogueClassTypeParameter* value_4 = (((RogueClassTypeParameter*)(_auto_772_2->data->objects[_auto_773_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueTypeParameterList__type_name( RogueTypeParameterList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[933]);
}

RogueTypeParameterList* RogueTypeParameterList__init_object( RogueTypeParameterList* THIS )
{
  return (RogueTypeParameterList*)(THIS);
}

RogueTypeParameterList* RogueTypeParameterList__init( RogueTypeParameterList* THIS )
{
  RogueTypeParameterList__init__Integer( THIS, 10 );
  return (RogueTypeParameterList*)(THIS);
}

RogueTypeParameterList* RogueTypeParameterList__init__Integer( RogueTypeParameterList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassTypeParameter*), true );
  return (RogueTypeParameterList*)(THIS);
}

RogueTypeParameterList* RogueTypeParameterList__add__TypeParameter( RogueTypeParameterList* THIS, RogueClassTypeParameter* value_0 )
{
  ((RogueTypeParameterList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTypeParameterList*)(THIS);
}

RogueInteger RogueTypeParameterList__capacity( RogueTypeParameterList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTypeParameterList* RogueTypeParameterList__reserve__Integer( RogueTypeParameterList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassTypeParameter*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueTypeParameterList__capacity( THIS ))) + ((RogueTypeParameterList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassTypeParameter*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTypeParameterList*)(THIS);
}

RogueString* RogueTypeParameter__type_name( RogueClassTypeParameter* THIS )
{
  return (RogueString*)(Rogue_literal_strings[563]);
}

RogueClassTypeParameter* RogueTypeParameter__init__Token_String( RogueClassTypeParameter* THIS, RogueClassToken* _auto_250_0, RogueString* _auto_251_1 )
{
  THIS->name = _auto_251_1;
  THIS->t = _auto_250_0;
  return (RogueClassTypeParameter*)(THIS);
}

RogueClassTypeParameter* RogueTypeParameter__init_object( RogueClassTypeParameter* THIS )
{
  return (RogueClassTypeParameter*)(THIS);
}

RogueString* RogueAugmentList__to_String( RogueAugmentList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueAugmentList* _auto_782_2 = (THIS);
    RogueInteger _auto_783_3 = (0);
    for (;_auto_783_3 < _auto_782_2->count;++_auto_783_3)
    {
      RogueClassAugment* value_4 = (((RogueClassAugment*)(_auto_782_2->data->objects[_auto_783_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueAugmentList__type_name( RogueAugmentList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[934]);
}

RogueAugmentList* RogueAugmentList__init_object( RogueAugmentList* THIS )
{
  return (RogueAugmentList*)(THIS);
}

RogueAugmentList* RogueAugmentList__init( RogueAugmentList* THIS )
{
  RogueAugmentList__init__Integer( THIS, 10 );
  return (RogueAugmentList*)(THIS);
}

RogueAugmentList* RogueAugmentList__init__Integer( RogueAugmentList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassAugment*), true );
  return (RogueAugmentList*)(THIS);
}

RogueAugmentList* RogueAugmentList__add__Augment( RogueAugmentList* THIS, RogueClassAugment* value_0 )
{
  ((RogueAugmentList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueAugmentList*)(THIS);
}

RogueInteger RogueAugmentList__capacity( RogueAugmentList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueAugmentList* RogueAugmentList__reserve__Integer( RogueAugmentList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassAugment*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueAugmentList__capacity( THIS ))) + ((RogueAugmentList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassAugment*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueAugmentList*)(THIS);
}

RogueString* RogueAugment__type_name( RogueClassAugment* THIS )
{
  return (RogueString*)(Rogue_literal_strings[564]);
}

RogueClassAugment* RogueAugment__init__Token_String( RogueClassAugment* THIS, RogueClassToken* _auto_253_0, RogueString* _auto_254_1 )
{
  THIS->name = _auto_254_1;
  THIS->t = _auto_253_0;
  return (RogueClassAugment*)(THIS);
}

RogueClassAugment* RogueAugment__init_object( RogueClassAugment* THIS )
{
  THIS->base_types = ((RogueTypeList__init( ((RogueTypeList*)ROGUE_CREATE_OBJECT(TypeList)) )));
  THIS->tokens = ((RogueTokenList__init( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)) )));
  return (RogueClassAugment*)(THIS);
}

RogueString* RogueAugmentArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[607]);
}

RogueString* RogueString_TokenTypeTable__to_String( RogueClassString_TokenTypeTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_TokenTypeTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_TokenTypeTable__type_name( RogueClassString_TokenTypeTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[565]);
}

RogueClassString_TokenTypeTable* RogueString_TokenTypeTable__init( RogueClassString_TokenTypeTable* THIS )
{
  RogueString_TokenTypeTable__init__Integer( THIS, 16 );
  return (RogueClassString_TokenTypeTable*)(THIS);
}

RogueClassString_TokenTypeTable* RogueString_TokenTypeTable__init__Integer( RogueClassString_TokenTypeTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_TokenTypeTableEntryList__init__Integer_String_TokenTypeTableEntry( ((RogueTableEntry_of_String_TokenTypeList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_TokenTypeList)), bin_count_0, ((RogueClassString_TokenTypeTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_TokenTypeTable*)(THIS);
}

RogueClassString_TokenTypeTableEntry* RogueString_TokenTypeTable__find__String( RogueClassString_TokenTypeTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_TokenTypeTableEntry* entry_2 = (((RogueClassString_TokenTypeTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_TokenTypeTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_TokenTypeTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_TokenTypeTableEntry*)(((RogueClassString_TokenTypeTableEntry*)(NULL)));
}

RogueClassTokenType* RogueString_TokenTypeTable__get__String( RogueClassString_TokenTypeTable* THIS, RogueString* key_0 )
{
  RogueClassString_TokenTypeTableEntry* entry_1 = (((RogueString_TokenTypeTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassTokenType*)(entry_1->value);
  }
  else
  {
    RogueClassTokenType* default_value_2 = 0;
    return (RogueClassTokenType*)(default_value_2);
  }
}

void RogueString_TokenTypeTable__set__String_TokenType( RogueClassString_TokenTypeTable* THIS, RogueString* key_0, RogueClassTokenType* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_TokenTypeTableEntry* entry_4 = (((RogueClassString_TokenTypeTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_TokenTypeTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_TokenTypeTableEntry*)((RogueString_TokenTypeTableEntry__init__String_TokenType_Integer( ((RogueClassString_TokenTypeTableEntry*)ROGUE_CREATE_OBJECT(String_TokenTypeTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_TokenTypeTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_TokenTypeTable__print_to__StringBuilder( RogueClassString_TokenTypeTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_TokenTypeTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_TokenTypeTable* RogueString_TokenTypeTable__init_object( RogueClassString_TokenTypeTable* THIS )
{
  return (RogueClassString_TokenTypeTable*)(THIS);
}

RogueString* RogueLiteralCharacterToken__to_String( RogueClassLiteralCharacterToken* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Character( Rogue_literal_strings[0], THIS->value ))));
}

RogueString* RogueLiteralCharacterToken__type_name( RogueClassLiteralCharacterToken* THIS )
{
  return (RogueString*)(Rogue_literal_strings[639]);
}

RogueCharacter RogueLiteralCharacterToken__to_Character( RogueClassLiteralCharacterToken* THIS )
{
  return (RogueCharacter)(THIS->value);
}

RogueClassLiteralCharacterToken* RogueLiteralCharacterToken__init_object( RogueClassLiteralCharacterToken* THIS )
{
  return (RogueClassLiteralCharacterToken*)(THIS);
}

RogueClassLiteralCharacterToken* RogueLiteralCharacterToken__init__TokenType_Character( RogueClassLiteralCharacterToken* THIS, RogueClassTokenType* _auto_258_0, RogueCharacter _auto_259_1 )
{
  THIS->value = _auto_259_1;
  THIS->_type = _auto_258_0;
  return (RogueClassLiteralCharacterToken*)(THIS);
}

RogueString* RogueLiteralLongToken__to_String( RogueClassLiteralLongToken* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Long( Rogue_literal_strings[0], THIS->value ))));
}

RogueString* RogueLiteralLongToken__type_name( RogueClassLiteralLongToken* THIS )
{
  return (RogueString*)(Rogue_literal_strings[640]);
}

RogueInteger RogueLiteralLongToken__to_Integer( RogueClassLiteralLongToken* THIS )
{
  return (RogueInteger)(((RogueInteger)(THIS->value)));
}

RogueLong RogueLiteralLongToken__to_Long( RogueClassLiteralLongToken* THIS )
{
  return (RogueLong)(THIS->value);
}

RogueReal RogueLiteralLongToken__to_Real( RogueClassLiteralLongToken* THIS )
{
  return (RogueReal)(((RogueReal)(THIS->value)));
}

RogueClassLiteralLongToken* RogueLiteralLongToken__init_object( RogueClassLiteralLongToken* THIS )
{
  return (RogueClassLiteralLongToken*)(THIS);
}

RogueClassLiteralLongToken* RogueLiteralLongToken__init__TokenType_Long( RogueClassLiteralLongToken* THIS, RogueClassTokenType* _auto_260_0, RogueLong _auto_261_1 )
{
  THIS->value = _auto_261_1;
  THIS->_type = _auto_260_0;
  return (RogueClassLiteralLongToken*)(THIS);
}

RogueString* RogueLiteralIntegerToken__to_String( RogueClassLiteralIntegerToken* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Integer( Rogue_literal_strings[0], THIS->value ))));
}

RogueString* RogueLiteralIntegerToken__type_name( RogueClassLiteralIntegerToken* THIS )
{
  return (RogueString*)(Rogue_literal_strings[641]);
}

RogueInteger RogueLiteralIntegerToken__to_Integer( RogueClassLiteralIntegerToken* THIS )
{
  return (RogueInteger)(THIS->value);
}

RogueReal RogueLiteralIntegerToken__to_Real( RogueClassLiteralIntegerToken* THIS )
{
  return (RogueReal)(((RogueReal)(THIS->value)));
}

RogueClassLiteralIntegerToken* RogueLiteralIntegerToken__init_object( RogueClassLiteralIntegerToken* THIS )
{
  return (RogueClassLiteralIntegerToken*)(THIS);
}

RogueClassLiteralIntegerToken* RogueLiteralIntegerToken__init__TokenType_Integer( RogueClassLiteralIntegerToken* THIS, RogueClassTokenType* _auto_262_0, RogueInteger _auto_263_1 )
{
  THIS->value = _auto_263_1;
  THIS->_type = _auto_262_0;
  return (RogueClassLiteralIntegerToken*)(THIS);
}

RogueString* RogueLiteralRealToken__to_String( RogueClassLiteralRealToken* THIS )
{
  return (RogueString*)(((RogueString__operatorPLUS__Real( Rogue_literal_strings[0], THIS->value ))));
}

RogueString* RogueLiteralRealToken__type_name( RogueClassLiteralRealToken* THIS )
{
  return (RogueString*)(Rogue_literal_strings[642]);
}

RogueInteger RogueLiteralRealToken__to_Integer( RogueClassLiteralRealToken* THIS )
{
  return (RogueInteger)(((RogueInteger)(THIS->value)));
}

RogueReal RogueLiteralRealToken__to_Real( RogueClassLiteralRealToken* THIS )
{
  return (RogueReal)(THIS->value);
}

RogueClassLiteralRealToken* RogueLiteralRealToken__init_object( RogueClassLiteralRealToken* THIS )
{
  return (RogueClassLiteralRealToken*)(THIS);
}

RogueClassLiteralRealToken* RogueLiteralRealToken__init__TokenType_Real( RogueClassLiteralRealToken* THIS, RogueClassTokenType* _auto_264_0, RogueReal _auto_265_1 )
{
  THIS->value = _auto_265_1;
  THIS->_type = _auto_264_0;
  return (RogueClassLiteralRealToken*)(THIS);
}

RogueString* RogueLiteralStringToken__to_String( RogueClassLiteralStringToken* THIS )
{
  return (RogueString*)(THIS->value);
}

RogueString* RogueLiteralStringToken__type_name( RogueClassLiteralStringToken* THIS )
{
  return (RogueString*)(Rogue_literal_strings[643]);
}

RogueClassLiteralStringToken* RogueLiteralStringToken__init_object( RogueClassLiteralStringToken* THIS )
{
  return (RogueClassLiteralStringToken*)(THIS);
}

RogueClassLiteralStringToken* RogueLiteralStringToken__init__TokenType_String( RogueClassLiteralStringToken* THIS, RogueClassTokenType* _auto_266_0, RogueString* _auto_267_1 )
{
  THIS->value = _auto_267_1;
  THIS->_type = _auto_266_0;
  return (RogueClassLiteralStringToken*)(THIS);
}

RogueString* RogueTokenArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[608]);
}

RogueString* RogueString_TypeSpecializerTable__to_String( RogueClassString_TypeSpecializerTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_TypeSpecializerTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_TypeSpecializerTable__type_name( RogueClassString_TypeSpecializerTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[566]);
}

RogueClassString_TypeSpecializerTable* RogueString_TypeSpecializerTable__init( RogueClassString_TypeSpecializerTable* THIS )
{
  RogueString_TypeSpecializerTable__init__Integer( THIS, 16 );
  return (RogueClassString_TypeSpecializerTable*)(THIS);
}

RogueClassString_TypeSpecializerTable* RogueString_TypeSpecializerTable__init__Integer( RogueClassString_TypeSpecializerTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_TypeSpecializerTableEntryList__init__Integer_String_TypeSpecializerTableEntry( ((RogueTableEntry_of_String_TypeSpecializerList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_TypeSpecializerList)), bin_count_0, ((RogueClassString_TypeSpecializerTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_TypeSpecializerTable*)(THIS);
}

RogueInteger RogueString_TypeSpecializerTable__count( RogueClassString_TypeSpecializerTable* THIS )
{
  return (RogueInteger)(THIS->keys->count);
}

RogueClassString_TypeSpecializerTableEntry* RogueString_TypeSpecializerTable__find__String( RogueClassString_TypeSpecializerTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_TypeSpecializerTableEntry* entry_2 = (((RogueClassString_TypeSpecializerTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_TypeSpecializerTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_TypeSpecializerTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_TypeSpecializerTableEntry*)(((RogueClassString_TypeSpecializerTableEntry*)(NULL)));
}

RogueClassTypeSpecializer* RogueString_TypeSpecializerTable__get__String( RogueClassString_TypeSpecializerTable* THIS, RogueString* key_0 )
{
  RogueClassString_TypeSpecializerTableEntry* entry_1 = (((RogueString_TypeSpecializerTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassTypeSpecializer*)(entry_1->value);
  }
  else
  {
    RogueClassTypeSpecializer* default_value_2 = 0;
    return (RogueClassTypeSpecializer*)(default_value_2);
  }
}

void RogueString_TypeSpecializerTable__set__String_TypeSpecializer( RogueClassString_TypeSpecializerTable* THIS, RogueString* key_0, RogueClassTypeSpecializer* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_TypeSpecializerTableEntry* entry_4 = (((RogueClassString_TypeSpecializerTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_TypeSpecializerTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_TypeSpecializerTableEntry*)((RogueString_TypeSpecializerTableEntry__init__String_TypeSpecializer_Integer( ((RogueClassString_TypeSpecializerTableEntry*)ROGUE_CREATE_OBJECT(String_TypeSpecializerTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_TypeSpecializerTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_TypeSpecializerTable__print_to__StringBuilder( RogueClassString_TypeSpecializerTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_TypeSpecializerTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_TypeSpecializerTable* RogueString_TypeSpecializerTable__init_object( RogueClassString_TypeSpecializerTable* THIS )
{
  return (RogueClassString_TypeSpecializerTable*)(THIS);
}

RogueString* RogueTypeParameterArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[609]);
}

RogueString* RogueTypeSpecializer__type_name( RogueClassTypeSpecializer* THIS )
{
  return (RogueString*)(Rogue_literal_strings[567]);
}

RogueClassTypeSpecializer* RogueTypeSpecializer__init__String_Integer( RogueClassTypeSpecializer* THIS, RogueString* _auto_279_0, RogueInteger _auto_280_1 )
{
  THIS->index = _auto_280_1;
  THIS->name = _auto_279_0;
  return (RogueClassTypeSpecializer*)(THIS);
}

RogueClassTypeSpecializer* RogueTypeSpecializer__init_object( RogueClassTypeSpecializer* THIS )
{
  return (RogueClassTypeSpecializer*)(THIS);
}

RogueString* RogueString_TemplateTableEntryList__to_String( RogueTableEntry_of_String_TemplateList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_TemplateList* _auto_800_2 = (THIS);
    RogueInteger _auto_801_3 = (0);
    for (;_auto_801_3 < _auto_800_2->count;++_auto_801_3)
    {
      RogueClassString_TemplateTableEntry* value_4 = (((RogueClassString_TemplateTableEntry*)(_auto_800_2->data->objects[_auto_801_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_TemplateTableEntryList__type_name( RogueTableEntry_of_String_TemplateList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[935]);
}

RogueTableEntry_of_String_TemplateList* RogueString_TemplateTableEntryList__init_object( RogueTableEntry_of_String_TemplateList* THIS )
{
  return (RogueTableEntry_of_String_TemplateList*)(THIS);
}

RogueTableEntry_of_String_TemplateList* RogueString_TemplateTableEntryList__init__Integer_String_TemplateTableEntry( RogueTableEntry_of_String_TemplateList* THIS, RogueInteger initial_capacity_0, RogueClassString_TemplateTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_TemplateTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_285_3 = (initial_capacity_0);
    for (;i_2 <= _auto_285_3;++i_2)
    {
      RogueString_TemplateTableEntryList__add__String_TemplateTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_TemplateList*)(THIS);
}

RogueTableEntry_of_String_TemplateList* RogueString_TemplateTableEntryList__add__String_TemplateTableEntry( RogueTableEntry_of_String_TemplateList* THIS, RogueClassString_TemplateTableEntry* value_0 )
{
  ((RogueString_TemplateTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_TemplateList*)(THIS);
}

RogueInteger RogueString_TemplateTableEntryList__capacity( RogueTableEntry_of_String_TemplateList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_TemplateList* RogueString_TemplateTableEntryList__reserve__Integer( RogueTableEntry_of_String_TemplateList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_TemplateTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_TemplateTableEntryList__capacity( THIS ))) + ((RogueString_TemplateTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_TemplateTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_TemplateList*)(THIS);
}

RogueString* RogueString_TemplateTableEntry__type_name( RogueClassString_TemplateTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[568]);
}

RogueClassString_TemplateTableEntry* RogueString_TemplateTableEntry__init__String_Template_Integer( RogueClassString_TemplateTableEntry* THIS, RogueString* _key_0, RogueClassTemplate* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_TemplateTableEntry*)(THIS);
}

RogueClassString_TemplateTableEntry* RogueString_TemplateTableEntry__init_object( RogueClassString_TemplateTableEntry* THIS )
{
  return (RogueClassString_TemplateTableEntry*)(THIS);
}

RogueString* RogueString_TemplateTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[610]);
}

RogueString* RogueString_AugmentListTableEntryList__to_String( RogueTableEntry_of_String_AugmentListList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_AugmentListList* _auto_810_2 = (THIS);
    RogueInteger _auto_811_3 = (0);
    for (;_auto_811_3 < _auto_810_2->count;++_auto_811_3)
    {
      RogueClassString_AugmentListTableEntry* value_4 = (((RogueClassString_AugmentListTableEntry*)(_auto_810_2->data->objects[_auto_811_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_AugmentListTableEntryList__type_name( RogueTableEntry_of_String_AugmentListList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[936]);
}

RogueTableEntry_of_String_AugmentListList* RogueString_AugmentListTableEntryList__init_object( RogueTableEntry_of_String_AugmentListList* THIS )
{
  return (RogueTableEntry_of_String_AugmentListList*)(THIS);
}

RogueTableEntry_of_String_AugmentListList* RogueString_AugmentListTableEntryList__init__Integer_String_AugmentListTableEntry( RogueTableEntry_of_String_AugmentListList* THIS, RogueInteger initial_capacity_0, RogueClassString_AugmentListTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_AugmentListTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_289_3 = (initial_capacity_0);
    for (;i_2 <= _auto_289_3;++i_2)
    {
      RogueString_AugmentListTableEntryList__add__String_AugmentListTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_AugmentListList*)(THIS);
}

RogueTableEntry_of_String_AugmentListList* RogueString_AugmentListTableEntryList__add__String_AugmentListTableEntry( RogueTableEntry_of_String_AugmentListList* THIS, RogueClassString_AugmentListTableEntry* value_0 )
{
  ((RogueString_AugmentListTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_AugmentListList*)(THIS);
}

RogueInteger RogueString_AugmentListTableEntryList__capacity( RogueTableEntry_of_String_AugmentListList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_AugmentListList* RogueString_AugmentListTableEntryList__reserve__Integer( RogueTableEntry_of_String_AugmentListList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_AugmentListTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_AugmentListTableEntryList__capacity( THIS ))) + ((RogueString_AugmentListTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_AugmentListTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_AugmentListList*)(THIS);
}

RogueString* RogueString_AugmentListTableEntry__type_name( RogueClassString_AugmentListTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[569]);
}

RogueClassString_AugmentListTableEntry* RogueString_AugmentListTableEntry__init__String_AugmentList_Integer( RogueClassString_AugmentListTableEntry* THIS, RogueString* _key_0, RogueAugmentList* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_AugmentListTableEntry*)(THIS);
}

RogueClassString_AugmentListTableEntry* RogueString_AugmentListTableEntry__init_object( RogueClassString_AugmentListTableEntry* THIS )
{
  return (RogueClassString_AugmentListTableEntry*)(THIS);
}

RogueString* RogueString_AugmentListTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[611]);
}

RogueString* RogueCmdLabelList__to_String( RogueCmdLabelList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueCmdLabelList* _auto_820_2 = (THIS);
    RogueInteger _auto_821_3 = (0);
    for (;_auto_821_3 < _auto_820_2->count;++_auto_821_3)
    {
      RogueClassCmdLabel* value_4 = (((RogueClassCmdLabel*)(_auto_820_2->data->objects[_auto_821_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdLabelList__type_name( RogueCmdLabelList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[937]);
}

RogueCmdLabelList* RogueCmdLabelList__init_object( RogueCmdLabelList* THIS )
{
  return (RogueCmdLabelList*)(THIS);
}

RogueCmdLabelList* RogueCmdLabelList__init( RogueCmdLabelList* THIS )
{
  RogueCmdLabelList__init__Integer( THIS, 10 );
  return (RogueCmdLabelList*)(THIS);
}

RogueCmdLabelList* RogueCmdLabelList__init__Integer( RogueCmdLabelList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassCmdLabel*), true );
  return (RogueCmdLabelList*)(THIS);
}

RogueCmdLabelList* RogueCmdLabelList__add__CmdLabel( RogueCmdLabelList* THIS, RogueClassCmdLabel* value_0 )
{
  ((RogueCmdLabelList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdLabelList*)(THIS);
}

RogueInteger RogueCmdLabelList__capacity( RogueCmdLabelList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueCmdLabelList* RogueCmdLabelList__clear( RogueCmdLabelList* THIS )
{
  THIS->count = 0;
  return (RogueCmdLabelList*)(THIS);
}

RogueCmdLabelList* RogueCmdLabelList__reserve__Integer( RogueCmdLabelList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassCmdLabel*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueCmdLabelList__capacity( THIS ))) + ((RogueCmdLabelList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassCmdLabel*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdLabelList*)(THIS);
}

RogueString* RogueString_CmdLabelTable__to_String( RogueClassString_CmdLabelTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_CmdLabelTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_CmdLabelTable__type_name( RogueClassString_CmdLabelTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[570]);
}

RogueClassString_CmdLabelTable* RogueString_CmdLabelTable__init( RogueClassString_CmdLabelTable* THIS )
{
  RogueString_CmdLabelTable__init__Integer( THIS, 16 );
  return (RogueClassString_CmdLabelTable*)(THIS);
}

RogueClassString_CmdLabelTable* RogueString_CmdLabelTable__init__Integer( RogueClassString_CmdLabelTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_CmdLabelTableEntryList__init__Integer_String_CmdLabelTableEntry( ((RogueTableEntry_of_String_CmdLabelList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_CmdLabelList)), bin_count_0, ((RogueClassString_CmdLabelTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_CmdLabelTable*)(THIS);
}

void RogueString_CmdLabelTable__clear( RogueClassString_CmdLabelTable* THIS )
{
  {
    RogueTableEntry_of_String_CmdLabelList* _auto_833_0 = (THIS->bins);
    RogueInteger i_1 = (0);
    for (;i_1 < _auto_833_0->count;++i_1)
    {
      THIS->bins->data->objects[i_1] = ((RogueClassString_CmdLabelTableEntry*)(NULL));
    }
  }
  RogueStringList__clear( THIS->keys );
}

RogueLogical RogueString_CmdLabelTable__contains__String( RogueClassString_CmdLabelTable* THIS, RogueString* key_0 )
{
  return (RogueLogical)(!!(((RogueString_CmdLabelTable__find__String( THIS, key_0 )))));
}

RogueClassString_CmdLabelTableEntry* RogueString_CmdLabelTable__find__String( RogueClassString_CmdLabelTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_CmdLabelTableEntry* entry_2 = (((RogueClassString_CmdLabelTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_CmdLabelTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_CmdLabelTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_CmdLabelTableEntry*)(((RogueClassString_CmdLabelTableEntry*)(NULL)));
}

RogueClassCmdLabel* RogueString_CmdLabelTable__get__String( RogueClassString_CmdLabelTable* THIS, RogueString* key_0 )
{
  RogueClassString_CmdLabelTableEntry* entry_1 = (((RogueString_CmdLabelTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassCmdLabel*)(entry_1->value);
  }
  else
  {
    RogueClassCmdLabel* default_value_2 = 0;
    return (RogueClassCmdLabel*)(default_value_2);
  }
}

void RogueString_CmdLabelTable__set__String_CmdLabel( RogueClassString_CmdLabelTable* THIS, RogueString* key_0, RogueClassCmdLabel* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_CmdLabelTableEntry* entry_4 = (((RogueClassString_CmdLabelTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_CmdLabelTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_CmdLabelTableEntry*)((RogueString_CmdLabelTableEntry__init__String_CmdLabel_Integer( ((RogueClassString_CmdLabelTableEntry*)ROGUE_CREATE_OBJECT(String_CmdLabelTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_CmdLabelTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_CmdLabelTable__print_to__StringBuilder( RogueClassString_CmdLabelTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_CmdLabelTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_CmdLabelTable* RogueString_CmdLabelTable__init_object( RogueClassString_CmdLabelTable* THIS )
{
  return (RogueClassString_CmdLabelTable*)(THIS);
}

RogueString* RogueCloneArgs__type_name( RogueClassCloneArgs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[571]);
}

RogueClassCmdLabel* RogueCloneArgs__register_label__CmdLabel( RogueClassCloneArgs* THIS, RogueClassCmdLabel* label_0 )
{
  return (RogueClassCmdLabel*)(label_0);
}

RogueClassCloneArgs* RogueCloneArgs__init_object( RogueClassCloneArgs* THIS )
{
  return (RogueClassCloneArgs*)(THIS);
}

RogueString* RogueCloneMethodArgs__type_name( RogueClassCloneMethodArgs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[842]);
}

RogueClassCmdLabel* RogueCloneMethodArgs__register_label__CmdLabel( RogueClassCloneMethodArgs* THIS, RogueClassCmdLabel* label_0 )
{
  RogueCmdLabelList__add__CmdLabel( THIS->cloned_method->label_list, label_0 );
  RogueString_CmdLabelTable__set__String_CmdLabel( THIS->cloned_method->label_lookup, label_0->name, label_0 );
  return (RogueClassCmdLabel*)(label_0);
}

RogueClassCloneMethodArgs* RogueCloneMethodArgs__init_object( RogueClassCloneMethodArgs* THIS )
{
  return (RogueClassCloneMethodArgs*)(THIS);
}

RogueClassCloneMethodArgs* RogueCloneMethodArgs__init__Method( RogueClassCloneMethodArgs* THIS, RogueClassMethod* _auto_307_0 )
{
  THIS->cloned_method = _auto_307_0;
  return (RogueClassCloneMethodArgs*)(THIS);
}

RogueString* RogueCmdAccess__type_name( RogueClassCmdAccess* THIS )
{
  return (RogueString*)(Rogue_literal_strings[647]);
}

RogueClassCmd* RogueCmdAccess__clone__CloneArgs( RogueClassCmdAccess* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdAccess* result_1 = (((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, clone_args_0 ))), THIS->name, ((RogueCmd__clone__CmdArgs_CloneArgs( ((RogueClassCmd*)THIS), THIS->args, clone_args_0 ))) ))));
  RogueClassMacroArgs* macro_args_2 = (((RogueClassMacroArgs*)(RogueObject_as(clone_args_0,RogueTypeMacroArgs))));
  if (!!(macro_args_2))
  {
    return (RogueClassCmd*)(((RogueMacroArgs__inline_access__CmdAccess( macro_args_2, result_1 ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(result_1)));
}

RogueClassType* Rogue_CmdAccess__implicit_type( RogueClassCmdAccess* THIS )
{
  return (RogueClassType*)(((RogueProgram__find_type__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->name ))));
}

RogueClassCmd* RogueCmdAccess__resolve__Scope( RogueClassCmdAccess* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->args))
  {
    RogueCmdArgs__resolve__Scope( THIS->args, scope_0 );
  }
  if (THIS->context == NULL)
  {
    RogueClassLocal* v_1 = (((RogueScope__find_local__String( scope_0, THIS->name ))));
    if (!!(v_1))
    {
      if (!!(THIS->args))
      {
        return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->context, THIS->name ))))), Rogue_literal_strings[239], THIS->args ))), scope_0 ))));
      }
      return (RogueClassCmd*)(((RogueCmdReadLocal__resolve__Scope( ((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, v_1 ))), scope_0 ))));
    }
    RogueClassType* new_type_2 = (((RogueProgram__find_type__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->name ))));
    if (!!(new_type_2))
    {
      RogueType__organize( new_type_2 );
      if (THIS->args == NULL)
      {
        if (((RogueString__ends_with__String( THIS->name, ((RogueCharacter__to_String( (RogueCharacter)']' ))) ))))
        {
          THIS->args = ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) )));
        }
        else
        {
          return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadSingleton__init__Token_Type( ((RogueClassCmdReadSingleton*)ROGUE_CREATE_OBJECT(CmdReadSingleton)), THIS->t, new_type_2 ))))));
        }
      }
      if (new_type_2->is_array)
      {
        return (RogueClassCmd*)(((RogueCmdCreateArray__resolve__Scope( ((RogueCmdCreateArray__init__Token_Type_CmdArgs( ((RogueClassCmdCreateArray*)ROGUE_CREATE_OBJECT(CmdCreateArray)), THIS->t, new_type_2, THIS->args ))), scope_0 ))));
      }
      if (((RogueType__is_compound( new_type_2 ))))
      {
        RogueClassCmd* cmd_call_3 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, new_type_2, ((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, Rogue_literal_strings[284], THIS->args ))), true, false ))));
        if (!(RogueObject_instance_of(cmd_call_3,RogueTypeCmdCallRoutine)))
        {
          RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), Rogue_literal_strings[704] );
        }
        RogueClassCmdCallRoutine* r_4 = (((RogueClassCmdCallRoutine*)(RogueObject_as(cmd_call_3,RogueTypeCmdCallRoutine))));
        if (((RogueMethod__is_generated( r_4->method_info ))))
        {
          return (RogueClassCmd*)(((RogueCmdCreateCompound__resolve__Scope( ((RogueCmdCreateCompound__init__Token_Type_CmdArgs( ((RogueClassCmdCreateCompound*)ROGUE_CREATE_OBJECT(CmdCreateCompound)), THIS->t, new_type_2, r_4->args ))), scope_0 ))));
        }
        else
        {
          return (RogueClassCmd*)(cmd_call_3);
        }
      }
      RogueClassCmdCreateObject* cmd_create_5 = (((RogueCmdCreateObject__init__Token_Type( ((RogueClassCmdCreateObject*)ROGUE_CREATE_OBJECT(CmdCreateObject)), THIS->t, new_type_2 ))));
      RogueClassCmd* cmd_new_6 = (((RogueClassCmd*)(cmd_create_5)));
      RogueLogical must_find_7 = ((!!(THIS->args->count) || ((RogueType__is_native( new_type_2 )))));
      RogueClassCmd* cmd_call_8 = 0;
      if (!(((RogueType__is_native( new_type_2 )))))
      {
        cmd_call_8 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, new_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, cmd_new_6, Rogue_literal_strings[285], THIS->args ))), false, true ))));
      }
      if (!(!!(cmd_call_8)))
      {
        cmd_call_8 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, new_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, new_type_2->name ))))), Rogue_literal_strings[284], THIS->args ))), false, false ))));
        if ((!(!!(cmd_call_8)) && must_find_7))
        {
          if (!(((RogueType__is_native( new_type_2 )))))
          {
            cmd_call_8 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, new_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, cmd_new_6, Rogue_literal_strings[285], THIS->args ))), true, true ))));
          }
          cmd_call_8 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, new_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, new_type_2->name ))))), Rogue_literal_strings[284], THIS->args ))), true, false ))));
        }
      }
      if (!!(cmd_call_8))
      {
        cmd_new_6 = ((RogueClassCmd*)cmd_call_8);
      }
      return (RogueClassCmd*)((call_ROGUEM42( 22, (RogueClassCmd*)(cmd_new_6), scope_0 )));
    }
    else if (((RogueString__ends_with__String( THIS->name, ((RogueCharacter__to_String( (RogueCharacter)'?' ))) ))))
    {
      return (RogueClassCmd*)((call_ROGUEM299( 22, (RogueClassCmdUnary*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalize*)ROGUE_CREATE_OBJECT(CmdLogicalize))), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->context, ((RogueString__leftmost__Integer( THIS->name, -1 ))), THIS->args ))))) )))), scope_0 )));
    }
    RogueClassCmd* result_9 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, scope_0->_this_type, THIS, false, false ))));
    if (!!(result_9))
    {
      RogueCmdAccess__check_for_recursive_getter__Scope( THIS, scope_0 );
      return (RogueClassCmd*)(result_9);
    }
    RogueClassProperty* p_10 = (((RogueType__find_global__String( scope_0->_this_type, THIS->name ))));
    if (!!(p_10))
    {
      if (!!(THIS->args))
      {
        return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->context, THIS->name ))))), Rogue_literal_strings[239], THIS->args ))), scope_0 ))));
      }
      else
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ((RogueClassCmdReadGlobal*)ROGUE_CREATE_OBJECT(CmdReadGlobal)), THIS->t, p_10 ))))));
      }
    }
    p_10 = ((RogueClassProperty*)((RogueType__find_property__String( scope_0->_this_type, THIS->name ))));
    if (!!(p_10))
    {
      if (!!(THIS->args))
      {
        return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->context, THIS->name ))))), Rogue_literal_strings[239], THIS->args ))), scope_0 ))));
      }
      if (((RogueMethod__is_routine( scope_0->this_method ))))
      {
        throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[708] )));
      }
      THIS->context = ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), THIS->t, scope_0->_this_type )))));
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)ROGUE_CREATE_OBJECT(CmdReadProperty)), THIS->t, THIS->context, p_10 ))))));
    }
    if (!(!!(THIS->args)))
    {
      RogueClassCmd* def_11 = (((RogueString_CmdTable__get__String( scope_0->_this_type->definition_lookup, THIS->name ))));
      if (!!(def_11))
      {
        return (RogueClassCmd*)((call_ROGUEM44( 5, (RogueClassCmd*)(def_11), ((RogueClassCloneArgs*)(NULL)) )));
      }
    }
    return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, scope_0->_this_type, THIS, true, false ))));
  }
  else
  {
    THIS->context = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->context), scope_0 ));
  }
  RogueClassType* context_type_12 = (((Rogue_Cmd__require_type( THIS->context ))));
  RogueType__organize( context_type_12 );
  if (context_type_12->is_optional)
  {
    {
      RogueString* _auto_860_16 = (THIS->name);
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( _auto_860_16, Rogue_literal_strings[709] ))) == 0)
      {
        if ((!!(THIS->args) && !!(THIS->args->count)))
        {
          throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[710] )));
        }
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLogicalizeOptionalValue__init__Token_Cmd_Logical( ((RogueClassCmdLogicalizeOptionalValue*)ROGUE_CREATE_OBJECT(CmdLogicalizeOptionalValue)), THIS->t, THIS->context, true ))))));
      }
      else if (((RogueString__operatorLESSTHANGREATERTHAN__String( _auto_860_16, Rogue_literal_strings[711] ))) == 0)
      {
        if ((!!(THIS->args) && !!(THIS->args->count)))
        {
          throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[712] )));
        }
        return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdGetOptionalValue__init__Token_Cmd( ((RogueClassCmdGetOptionalValue*)ROGUE_CREATE_OBJECT(CmdGetOptionalValue)), THIS->t, THIS->context ))))));
      }
      else
      {
        throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[713] )));
      }
    }
  }
  RogueClassCmd* result_13 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_12, THIS, false, false ))));
  if (!!(result_13))
  {
    return (RogueClassCmd*)(result_13);
  }
  RogueClassProperty* p_14 = (((RogueType__find_global__String( context_type_12, THIS->name ))));
  if (!!(p_14))
  {
    if (!!(THIS->args))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->context, THIS->name ))))), Rogue_literal_strings[239], THIS->args ))), scope_0 ))));
    }
    call_ROGUEM48( 16, (RogueClassCmd*)(THIS->context) );
    return (RogueClassCmd*)(((RogueCmdReadGlobal__resolve__Scope( ((RogueCmdReadGlobal__init__Token_Property( ((RogueClassCmdReadGlobal*)ROGUE_CREATE_OBJECT(CmdReadGlobal)), THIS->t, p_14 ))), scope_0 ))));
  }
  p_14 = ((RogueClassProperty*)((RogueType__find_property__String( context_type_12, THIS->name ))));
  if (!!(p_14))
  {
    if (!!(THIS->args))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->context, THIS->name ))))), Rogue_literal_strings[239], THIS->args ))), scope_0 ))));
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)ROGUE_CREATE_OBJECT(CmdReadProperty)), THIS->t, THIS->context, p_14 ))))));
  }
  if (!(!!(THIS->args)))
  {
    RogueClassCmd* def_15 = (((RogueString_CmdTable__get__String( context_type_12->definition_lookup, THIS->name ))));
    if (!!(def_15))
    {
      return (RogueClassCmd*)((call_ROGUEM44( 5, (RogueClassCmd*)(def_15), ((RogueClassCloneArgs*)(NULL)) )));
    }
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_12, THIS, true, false ))));
}

RogueClassCmd* RogueCmdAccess__resolve_assignment__Scope_Cmd( RogueClassCmdAccess* THIS, RogueClassScope* scope_0, RogueClassCmd* new_value_1 )
{
  if (!!(THIS->args))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[763] )));
  }
  if (THIS->context == NULL)
  {
    if (THIS->name->characters[0] != (RogueCharacter)'@')
    {
      RogueString* setter_name_2 = (((RogueString__operatorPLUS__String( Rogue_literal_strings[764], THIS->name ))));
      RogueClassCmd* setter_3 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, scope_0->_this_type, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(NULL)), setter_name_2, ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), new_value_1 ))) ))), false, false ))));
      if (!!(setter_3))
      {
        if (((RogueString__operatorLESSTHANGREATERTHAN__String( scope_0->this_method->name, setter_name_2 ))) == 0)
        {
          throw ((RogueToken__error__String( THIS->t, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( Rogue_literal_strings[765], THIS->name ))), Rogue_literal_strings[766] ))), THIS->name ))), Rogue_literal_strings[767] ))) )));
        }
        return (RogueClassCmd*)(setter_3);
      }
    }
    RogueClassLocal* v_4 = (((RogueScope__find_local__String( scope_0, THIS->name ))));
    if (!!(v_4))
    {
      return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ((RogueCmdWriteLocal__init__Token_Local_Cmd( ((RogueClassCmdWriteLocal*)ROGUE_CREATE_OBJECT(CmdWriteLocal)), THIS->t, v_4, new_value_1 ))), scope_0 ))));
    }
    RogueClassProperty* p_5 = (((RogueType__find_global__String( scope_0->this_method->type_context, THIS->name ))));
    if (!!(p_5))
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdWriteGlobal__init__Token_Property_Cmd( ((RogueClassCmdWriteGlobal*)ROGUE_CREATE_OBJECT(CmdWriteGlobal)), THIS->t, p_5, new_value_1 ))))));
    }
    if (((RogueMethod__is_routine( scope_0->this_method ))))
    {
      p_5 = ((RogueClassProperty*)((RogueType__find_property__String( scope_0->this_method->type_context, THIS->name ))));
      if (!!(p_5))
      {
        throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[708] )));
      }
    }
    THIS->context = ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), THIS->t, scope_0->_this_type )))));
  }
  else
  {
    THIS->context = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->context), scope_0 ));
  }
  RogueClassType* context_type_6 = (((Rogue_Cmd__require_type( THIS->context ))));
  RogueType__organize( context_type_6 );
  if (THIS->name->characters[0] != (RogueCharacter)'@')
  {
    RogueString* setter_name_7 = (((RogueString__operatorPLUS__String( Rogue_literal_strings[764], THIS->name ))));
    RogueClassCmd* setter_8 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_6, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->context, setter_name_7, ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), new_value_1 ))) ))), false, false ))));
    if (!!(setter_8))
    {
      return (RogueClassCmd*)(setter_8);
    }
  }
  RogueClassProperty* p_9 = (((RogueType__find_global__String( context_type_6, THIS->name ))));
  if (!!(p_9))
  {
    call_ROGUEM48( 16, (RogueClassCmd*)(THIS->context) );
    return (RogueClassCmd*)(((RogueCmdWriteGlobal__resolve__Scope( ((RogueCmdWriteGlobal__init__Token_Property_Cmd( ((RogueClassCmdWriteGlobal*)ROGUE_CREATE_OBJECT(CmdWriteGlobal)), THIS->t, p_9, new_value_1 ))), scope_0 ))));
  }
  p_9 = ((RogueClassProperty*)((RogueType__find_property__String( context_type_6, THIS->name ))));
  if (!!(p_9))
  {
    if (((RogueMethod__is_routine( scope_0->this_method ))))
    {
      throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[708] )));
    }
    else
    {
      return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), THIS->t, THIS->context, p_9, new_value_1 ))), scope_0 ))));
    }
  }
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[688] ))), THIS->name ))), Rogue_literal_strings[768] ))) ))) )));
}

RogueClassCmd* RogueCmdAccess__resolve_modify_and_assign__Scope_TokenType_Cmd( RogueClassCmdAccess* THIS, RogueClassScope* scope_0, RogueClassTokenType* op_1, RogueClassCmd* new_value_2 )
{
  if (THIS->args == NULL)
  {
    RogueClassLocal* v_3 = (((RogueScope__find_local__String( scope_0, THIS->name ))));
    if (!!(v_3))
    {
      if (!!(THIS->args))
      {
        throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[770] ))), THIS->name ))), Rogue_literal_strings[771] ))) ))) )));
      }
      return (RogueClassCmd*)(((RogueCmdLocalOpWithAssign__resolve__Scope( ((RogueCmdLocalOpWithAssign__init__Token_Local_TokenType_Cmd( ((RogueClassCmdLocalOpWithAssign*)ROGUE_CREATE_OBJECT(CmdLocalOpWithAssign)), THIS->t, v_3, op_1, new_value_2 ))), scope_0 ))));
    }
  }
  RogueClassType* context_type_4 = 0;
  if (!!(THIS->context))
  {
    THIS->context = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->context), scope_0 ));
    context_type_4 = ((RogueClassType*)((Rogue_Cmd__require_type( THIS->context ))));
  }
  else
  {
    context_type_4 = ((RogueClassType*)scope_0->_this_type);
  }
  RogueClassProperty* p_5 = (((RogueType__find_global__String( context_type_4, THIS->name ))));
  if (!!(p_5))
  {
    if (!!(THIS->context))
    {
      call_ROGUEM48( 16, (RogueClassCmd*)(THIS->context) );
    }
    return (RogueClassCmd*)(((RogueCmdOpAssignGlobal__resolve__Scope( ((RogueCmdOpAssignGlobal__init__Token_Property_TokenType_Cmd( ((RogueClassCmdOpAssignGlobal*)ROGUE_CREATE_OBJECT(CmdOpAssignGlobal)), THIS->t, p_5, op_1, new_value_2 ))), scope_0 ))));
  }
  p_5 = ((RogueClassProperty*)((RogueType__find_property__String( context_type_4, THIS->name ))));
  if (!!(p_5))
  {
    if (!(!!(THIS->context)))
    {
      THIS->context = ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), THIS->t, context_type_4 )))));
    }
    if (((RogueMethod__is_routine( scope_0->this_method ))))
    {
      throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[708] )));
    }
    return (RogueClassCmd*)(((RogueCmdOpAssignProperty__resolve__Scope( ((RogueCmdOpAssignProperty__init__Token_Cmd_Property_TokenType_Cmd( ((RogueClassCmdOpAssignProperty*)ROGUE_CREATE_OBJECT(CmdOpAssignProperty)), THIS->t, THIS->context, p_5, op_1, new_value_2 ))), scope_0 ))));
  }
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[688] ))), THIS->name ))), Rogue_literal_strings[768] ))) ))) )));
}

RogueClassType* Rogue_CmdAccess__type( RogueClassCmdAccess* THIS )
{
  RogueClassRogueError* err_0 = (((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[287] ))), ((RogueCmdAccess__type_name( THIS ))) ))), Rogue_literal_strings[772] ))), THIS->name ))), Rogue_literal_strings[773] ))) ))) ))));
  throw err_0;
}

void RogueCmdAccess__write_cpp__CPPWriter_Logical( RogueClassCmdAccess* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[287] ))), ((RogueCmdAccess__type_name( THIS ))) ))), Rogue_literal_strings[776] ))), THIS->name ))), Rogue_literal_strings[342] ))) ))) )));
}

RogueClassCmdAccess* RogueCmdAccess__init_object( RogueClassCmdAccess* THIS )
{
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_String( RogueClassCmdAccess* THIS, RogueClassToken* _auto_312_0, RogueString* _auto_313_1 )
{
  THIS->name = _auto_313_1;
  THIS->t = _auto_312_0;
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_String_CmdArgs( RogueClassCmdAccess* THIS, RogueClassToken* _auto_314_0, RogueString* _auto_315_1, RogueClassCmdArgs* _auto_316_2 )
{
  THIS->args = _auto_316_2;
  THIS->name = _auto_315_1;
  THIS->t = _auto_314_0;
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_Cmd_String( RogueClassCmdAccess* THIS, RogueClassToken* _auto_317_0, RogueClassCmd* _auto_318_1, RogueString* _auto_319_2 )
{
  THIS->name = _auto_319_2;
  THIS->context = _auto_318_1;
  THIS->t = _auto_317_0;
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_Cmd_String_CmdArgs( RogueClassCmdAccess* THIS, RogueClassToken* _auto_320_0, RogueClassCmd* _auto_321_1, RogueString* _auto_322_2, RogueClassCmdArgs* _auto_323_3 )
{
  THIS->args = _auto_323_3;
  THIS->name = _auto_322_2;
  THIS->context = _auto_321_1;
  THIS->t = _auto_320_0;
  return (RogueClassCmdAccess*)(THIS);
}

RogueClassCmdAccess* RogueCmdAccess__init__Token_Cmd_String_Cmd( RogueClassCmdAccess* THIS, RogueClassToken* _auto_324_0, RogueClassCmd* _auto_325_1, RogueString* _auto_326_2, RogueClassCmd* arg_3 )
{
  THIS->name = _auto_326_2;
  THIS->context = _auto_325_1;
  THIS->t = _auto_324_0;
  THIS->args = ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) )));
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->args), arg_3 );
  return (RogueClassCmdAccess*)(THIS);
}

void RogueCmdAccess__check_for_recursive_getter__Scope( RogueClassCmdAccess* THIS, RogueClassScope* scope_0 )
{
  RogueClassType* this_type_1 = (scope_0->_this_type);
  if (((RogueString__operatorLESSTHANGREATERTHAN__String( THIS->name, scope_0->this_method->name ))) != 0)
  {
    return;
  }
  if ((!!(THIS->args) && THIS->args->count > 0))
  {
    return;
  }
  if (!((!!(((RogueType__find_property__String( this_type_1, THIS->name )))) || !!(((RogueType__find_global__String( this_type_1, THIS->name )))))))
  {
    return;
  }
  throw ((RogueToken__error__String( THIS->t, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( Rogue_literal_strings[705], THIS->name ))), Rogue_literal_strings[706] ))), THIS->name ))), Rogue_literal_strings[707] ))) )));
}

RogueString* RogueCmdArgs__type_name( RogueClassCmdArgs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[969]);
}

RogueClassCmdArgs* RogueCmdArgs__init_object( RogueClassCmdArgs* THIS )
{
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__init( RogueClassCmdArgs* THIS )
{
  RogueCmdList__init( ((RogueCmdList*)THIS) );
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__init__Integer( RogueClassCmdArgs* THIS, RogueInteger initial_capacity_0 )
{
  RogueCmdList__init__Integer( ((RogueCmdList*)THIS), initial_capacity_0 );
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__init__Cmd( RogueClassCmdArgs* THIS, RogueClassCmd* arg_0 )
{
  RogueCmdArgs__init( THIS );
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS), arg_0 );
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__init__Cmd_Cmd( RogueClassCmdArgs* THIS, RogueClassCmd* arg1_0, RogueClassCmd* arg2_1 )
{
  RogueCmdArgs__init( THIS );
  RogueCmdList__add__Cmd( ((RogueCmdList__add__Cmd( ((RogueCmdList*)THIS), arg1_0 ))), arg2_1 );
  return (RogueClassCmdArgs*)(THIS);
}

RogueClassCmdArgs* RogueCmdArgs__clone__CloneArgs( RogueClassCmdArgs* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdArgs* result_1 = (((RogueCmdArgs__init__Integer( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->count ))));
  {
    RogueClassCmdArgs* _auto_873_2 = (THIS);
    RogueInteger _auto_874_3 = (0);
    for (;_auto_874_3 < _auto_873_2->count;++_auto_874_3)
    {
      RogueClassCmd* cmd_4 = (((RogueClassCmd*)(_auto_873_2->data->objects[_auto_874_3])));
      RogueCmdList__add__Cmd( ((RogueCmdList*)result_1), (call_ROGUEM44( 5, (RogueClassCmd*)(cmd_4), clone_args_0 )) );
    }
  }
  return (RogueClassCmdArgs*)(result_1);
}

void RogueCmdArgs__resolve__Scope( RogueClassCmdArgs* THIS, RogueClassScope* scope_0 )
{
  {
    RogueClassCmdArgs* _auto_875_2 = (THIS);
    RogueInteger i_3 = (0);
    for (;i_3 < _auto_875_2->count;++i_3)
    {
      RogueClassCmd* arg_1 = ((call_ROGUEM42( 22, (RogueClassCmd*)(((RogueClassCmd*)(THIS->data->objects[i_3]))), scope_0 )));
      THIS->data->objects[i_3] = arg_1;
      RogueType__organize( ((Rogue_Cmd__require_type( arg_1 ))) );
    }
  }
}

RogueString* RogueCmdAssign__type_name( RogueClassCmdAssign* THIS )
{
  return (RogueString*)(Rogue_literal_strings[648]);
}

RogueClassCmd* RogueCmdAssign__clone__CloneArgs( RogueClassCmdAssign* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)ROGUE_CREATE_OBJECT(CmdAssign)), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->target), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdAssign__resolve__Scope( RogueClassCmdAssign* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)((call_ROGUEM49( 23, (RogueClassCmd*)(THIS->target), scope_0, THIS->new_value )));
}

RogueClassCmdAssign* RogueCmdAssign__init_object( RogueClassCmdAssign* THIS )
{
  return (RogueClassCmdAssign*)(THIS);
}

RogueClassCmdAssign* RogueCmdAssign__init__Token_Cmd_Cmd( RogueClassCmdAssign* THIS, RogueClassToken* _auto_327_0, RogueClassCmd* _auto_328_1, RogueClassCmd* _auto_329_2 )
{
  THIS->new_value = _auto_329_2;
  THIS->target = _auto_328_1;
  THIS->t = _auto_327_0;
  return (RogueClassCmdAssign*)(THIS);
}

RogueString* RogueScope__type_name( RogueClassScope* THIS )
{
  return (RogueString*)(Rogue_literal_strings[572]);
}

RogueClassScope* RogueScope__init__Type_Method( RogueClassScope* THIS, RogueClassType* _auto_332_0, RogueClassMethod* _auto_333_1 )
{
  THIS->this_method = _auto_333_1;
  THIS->_this_type = _auto_332_0;
  return (RogueClassScope*)(THIS);
}

RogueClassLocal* RogueScope__find_local__String( RogueClassScope* THIS, RogueString* name_0 )
{
  RogueInteger i_1 = ((THIS->local_list->count - 1));
  while (i_1 >= 0)
  {
    if (((RogueString__operatorLESSTHANGREATERTHAN__String( ((RogueClassLocal*)(THIS->local_list->data->objects[i_1]))->name, name_0 ))) == 0)
    {
      return (RogueClassLocal*)(((RogueClassLocal*)(THIS->local_list->data->objects[i_1])));
    }
    --i_1;
  }
  return (RogueClassLocal*)(((RogueClassLocal*)(NULL)));
}

void RogueScope__push_local__Local_Logical( RogueClassScope* THIS, RogueClassLocal* v_0, RogueLogical validate_name_1 )
{
  if (validate_name_1)
  {
    RogueClassLocal* existing_2 = (((RogueScope__find_local__String( THIS, v_0->name ))));
    if (!!(existing_2))
    {
      throw ((RogueToken__error__String( v_0->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[360] ))), v_0->name ))), Rogue_literal_strings[320] ))) ))) )));
    }
  }
  RogueLocalList__add__Local( THIS->local_list, v_0 );
}

void RogueScope__pop_local( RogueClassScope* THIS )
{
  RogueLocalList__remove_last( THIS->local_list );
}

RogueClassCmd* RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( RogueClassScope* THIS, RogueClassType* type_context_0, RogueClassCmdAccess* access_1, RogueLogical error_on_fail_2, RogueLogical suppress_inherited_3 )
{
  RogueClassMethod* m_4 = (((RogueScope__find_method__Type_CmdAccess_Logical_Logical( THIS, type_context_0, access_1, (error_on_fail_2 && !!(access_1->context)), suppress_inherited_3 ))));
  if ((!(!!(m_4)) && !(!!(access_1->context))))
  {
    m_4 = ((RogueClassMethod*)((RogueScope__find_method__Type_CmdAccess_Logical_Logical( THIS, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global, access_1, false, suppress_inherited_3 ))));
    if (!!(m_4))
    {
      type_context_0 = ((RogueClassType*)((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global);
      access_1->context = ((RogueClassCmd*)(((RogueCmdReadSingleton__init__Token_Type( ((RogueClassCmdReadSingleton*)ROGUE_CREATE_OBJECT(CmdReadSingleton)), access_1->t, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global )))));
    }
    else if (error_on_fail_2)
    {
      if (((RogueType__has_method_named__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global, access_1->name ))))
      {
        RogueScope__find_method__Type_CmdAccess_Logical_Logical( THIS, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Global, access_1, true, suppress_inherited_3 );
      }
      else
      {
        RogueScope__find_method__Type_CmdAccess_Logical_Logical( THIS, type_context_0, access_1, true, suppress_inherited_3 );
      }
    }
  }
  if (!(!!(m_4)))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  RogueClassToken* t_5 = (access_1->t);
  RogueClassCmd* context_6 = (access_1->context);
  if (!!(context_6))
  {
    if ((((RogueMethod__is_routine( m_4 ))) && RogueObject_instance_of(context_6,RogueTypeCmdLiteralThis)))
    {
      throw ((RogueToken__error__String( t_5, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[695] ))), m_4->name ))), Rogue_literal_strings[696] ))) ))) )));
    }
  }
  else
  {
    context_6 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), t_5, type_context_0 ))))));
  }
  RogueClassCmdArgs* args_7 = (access_1->args);
  if (!(!!(args_7)))
  {
    args_7 = ((RogueClassCmdArgs*)((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))));
  }
  while (args_7->count < m_4->parameters->count)
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)args_7), (call_ROGUEM44( 5, (RogueClassCmd*)(((RogueClassLocal*)(m_4->parameters->data->objects[args_7->count]))->initial_value), ((RogueClassCloneArgs*)(NULL)) )) );
  }
  RogueCmdArgs__resolve__Scope( args_7, THIS );
  {
    RogueClassCmdArgs* _auto_880_15 = (args_7);
    RogueInteger i_16 = (0);
    for (;i_16 < _auto_880_15->count;++i_16)
    {
      args_7->data->objects[i_16] = (call_ROGUEM42( 22, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(((RogueClassCmd*)(args_7->data->objects[i_16]))), ((RogueClassLocal*)(m_4->parameters->data->objects[i_16]))->_type ))), THIS ));
    }
  }
  RogueClassCmd* cmd_8 = 0;
  if (((RogueMethod__is_routine( m_4 ))))
  {
    if (((RogueMethod__is_native( m_4 ))))
    {
      if (!!(m_4->native_code))
      {
        context_6 = ((RogueClassCmd*)(call_ROGUEM42( 22, (RogueClassCmd*)(context_6), THIS )));
        call_ROGUEM48( 16, (RogueClassCmd*)(context_6) );
        cmd_8 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdCallInlineNativeRoutine__init__Token_Method_CmdArgs( ((RogueClassCmdCallInlineNativeRoutine*)ROGUE_CREATE_OBJECT(CmdCallInlineNativeRoutine)), t_5, m_4, args_7 ))))));
      }
      else
      {
        cmd_8 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdCallNativeRoutine__init__Token_Method_CmdArgs( ((RogueClassCmdCallNativeRoutine*)ROGUE_CREATE_OBJECT(CmdCallNativeRoutine)), t_5, m_4, args_7 ))))));
      }
    }
    else if (((RogueMethod__is_macro( m_4 ))))
    {
      RogueClassMacroArgs* macro_args_9 = (((RogueMacroArgs__init__Cmd_Method_CmdArgs( ((RogueClassMacroArgs*)ROGUE_CREATE_OBJECT(MacroArgs)), context_6, m_4, args_7 ))));
      RogueClassCmdStatementList* inline_statements_10 = (((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))));
      {
        RogueClassCmdStatementList* _auto_887_17 = (m_4->statements);
        RogueInteger _auto_888_18 = (0);
        for (;_auto_888_18 < _auto_887_17->count;++_auto_888_18)
        {
          RogueClassCmd* statement_19 = (((RogueClassCmd*)(_auto_887_17->data->objects[_auto_888_18])));
          RogueClassCmd* inline_statement_11 = ((call_ROGUEM44( 5, (RogueClassCmd*)(statement_19), ((RogueClassCloneArgs*)(macro_args_9)) )));
          if (!!(inline_statement_11))
          {
            RogueCmdList__add__Cmd( ((RogueCmdList*)inline_statements_10), inline_statement_11 );
          }
        }
      }
      RogueCmdStatementList__resolve__Scope( inline_statements_10, THIS );
      if (inline_statements_10->count == 1)
      {
        return (RogueClassCmd*)(((RogueClassCmd*)(inline_statements_10->data->objects[0])));
      }
      throw ((RogueToken__error__String( t_5, Rogue_literal_strings[700] )));
    }
    else
    {
      cmd_8 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdCallRoutine__init__Token_Method_CmdArgs( ((RogueClassCmdCallRoutine*)ROGUE_CREATE_OBJECT(CmdCallRoutine)), t_5, m_4, args_7 ))))));
    }
  }
  else if (((RogueMethod__is_native( m_4 ))))
  {
    if (type_context_0->is_array)
    {
      {
        RogueString* _auto_891_20 = (m_4->name);
        if (((RogueString__operatorLESSTHANGREATERTHAN__String( _auto_891_20, Rogue_literal_strings[701] ))) == 0)
        {
          if ((!!(args_7) && !!(args_7->count)))
          {
            throw ((RogueToken__error__String( t_5, Rogue_literal_strings[702] )));
          }
          return (RogueClassCmd*)(((RogueCmdReadArrayCount__resolve__Scope( ((RogueCmdReadArrayCount__init__Token_Cmd( ((RogueClassCmdReadArrayCount*)ROGUE_CREATE_OBJECT(CmdReadArrayCount)), t_5, context_6 ))), THIS ))));
        }
      }
    }
    if (!!(m_4->native_code))
    {
      cmd_8 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallInlineNativeMethod*)ROGUE_CREATE_OBJECT(CmdCallInlineNativeMethod))), t_5, context_6, m_4, args_7 ))))));
    }
    else
    {
      cmd_8 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallNativeMethod*)ROGUE_CREATE_OBJECT(CmdCallNativeMethod))), t_5, context_6, m_4, args_7 ))))));
    }
  }
  else if (((RogueMethod__is_macro( m_4 ))))
  {
    RogueClassMacroArgs* macro_args_12 = (((RogueMacroArgs__init__Cmd_Method_CmdArgs( ((RogueClassMacroArgs*)ROGUE_CREATE_OBJECT(MacroArgs)), context_6, m_4, args_7 ))));
    RogueClassCmdStatementList* inline_statements_13 = (((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))));
    {
      RogueClassCmdStatementList* _auto_892_21 = (m_4->statements);
      RogueInteger _auto_893_22 = (0);
      for (;_auto_893_22 < _auto_892_21->count;++_auto_893_22)
      {
        RogueClassCmd* statement_23 = (((RogueClassCmd*)(_auto_892_21->data->objects[_auto_893_22])));
        RogueClassCmd* inline_statement_14 = ((call_ROGUEM44( 5, (RogueClassCmd*)(statement_23), ((RogueClassCloneArgs*)(macro_args_12)) )));
        if (!!(inline_statement_14))
        {
          RogueCmdList__add__Cmd( ((RogueCmdList*)inline_statements_13), inline_statement_14 );
        }
      }
    }
    RogueCmdStatementList__resolve__Scope( inline_statements_13, THIS );
    if (inline_statements_13->count == 1)
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(inline_statements_13->data->objects[0])));
    }
    RogueGlobal__println__String( ((RogueClassGlobal*)ROGUE_SINGLETON(Global)), Rogue_literal_strings[703] );
    throw ((RogueToken__error__String( t_5, Rogue_literal_strings[700] )));
  }
  else if (((RogueType__is_aspect( type_context_0 ))))
  {
    cmd_8 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallAspectMethod*)ROGUE_CREATE_OBJECT(CmdCallAspectMethod))), t_5, context_6, m_4, args_7 ))))));
  }
  else
  {
    cmd_8 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallDynamicMethod*)ROGUE_CREATE_OBJECT(CmdCallDynamicMethod))), t_5, context_6, m_4, args_7 ))))));
  }
  return (RogueClassCmd*)((call_ROGUEM42( 22, (RogueClassCmd*)(cmd_8), THIS )));
}

RogueClassMethod* RogueScope__find_method__Type_CmdAccess_Logical_Logical( RogueClassScope* THIS, RogueClassType* type_context_0, RogueClassCmdAccess* access_1, RogueLogical error_on_fail_2, RogueLogical suppress_inherited_3 )
{
  RogueClassCandidateMethods* candidates_4 = (((RogueCandidateMethods__init__Type_CmdAccess_Logical( ((RogueClassCandidateMethods*)ROGUE_CREATE_OBJECT(CandidateMethods)), type_context_0, access_1, error_on_fail_2 ))));
  RogueMethodList* list_5 = (((RogueString_MethodListTable__get__String( type_context_0->routine_lookup_by_name, access_1->name ))));
  if (!!(list_5))
  {
    {
      RogueMethodList* _auto_897_16 = (list_5);
      RogueInteger _auto_898_17 = (0);
      for (;_auto_898_17 < _auto_897_16->count;++_auto_898_17)
      {
        RogueClassMethod* m_18 = (((RogueClassMethod*)(_auto_897_16->data->objects[_auto_898_17])));
        RogueMethodList__add__Method( candidates_4->available, m_18 );
      }
    }
  }
  list_5 = ((RogueMethodList*)((RogueString_MethodListTable__get__String( type_context_0->method_lookup_by_name, access_1->name ))));
  if (!!(list_5))
  {
    {
      RogueMethodList* _auto_899_19 = (list_5);
      RogueInteger _auto_900_20 = (0);
      for (;_auto_900_20 < _auto_899_19->count;++_auto_900_20)
      {
        RogueClassMethod* m_21 = (((RogueClassMethod*)(_auto_899_19->data->objects[_auto_900_20])));
        RogueMethodList__add__Method( candidates_4->available, m_21 );
      }
    }
  }
  if (!(((RogueCandidateMethods__update_available( candidates_4 )))))
  {
    return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
  }
  if (suppress_inherited_3)
  {
    RogueClassType* most_specific_type_6 = 0;
    {
      RogueMethodList* _auto_901_22 = (candidates_4->available);
      RogueInteger _auto_902_23 = (0);
      for (;_auto_902_23 < _auto_901_22->count;++_auto_902_23)
      {
        RogueClassMethod* m_24 = (((RogueClassMethod*)(_auto_901_22->data->objects[_auto_902_23])));
        if (((RogueMethod__is_initializer( m_24 ))))
        {
          RogueClassType* m_type_context_7 = (m_24->type_context);
          if ((most_specific_type_6 == NULL || ((RogueType__instance_of__Type( m_type_context_7, most_specific_type_6 )))))
          {
            most_specific_type_6 = ((RogueClassType*)m_type_context_7);
          }
        }
      }
    }
    if (!!(most_specific_type_6))
    {
      {
        RogueMethodList* _auto_903_25 = (candidates_4->available);
        RogueInteger _auto_904_26 = (0);
        for (;_auto_904_26 < _auto_903_25->count;++_auto_904_26)
        {
          RogueClassMethod* m_27 = (((RogueClassMethod*)(_auto_903_25->data->objects[_auto_904_26])));
          if (m_27->type_context == most_specific_type_6)
          {
            RogueMethodList__add__Method( candidates_4->compatible, m_27 );
          }
        }
      }
      if (!(((RogueCandidateMethods__update_matches( candidates_4 )))))
      {
        return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
      }
    }
  }
  RogueClassCmdArgs* args_8 = (access_1->args);
  RogueInteger arg_count_9 = (0);
  if (!!(args_8))
  {
    RogueCmdArgs__resolve__Scope( args_8, THIS );
    arg_count_9 = ((RogueInteger)args_8->count);
    {
      RogueClassCmdArgs* _auto_905_28 = (args_8);
      RogueInteger _auto_906_29 = (0);
      for (;_auto_906_29 < _auto_905_28->count;++_auto_906_29)
      {
        RogueClassCmd* arg_30 = (((RogueClassCmd*)(_auto_905_28->data->objects[_auto_906_29])));
        RogueType__organize( (call_ROGUEM46( 27, (RogueClassCmd*)(arg_30) )) );
      }
    }
  }
  {
    RogueMethodList* _auto_907_31 = (candidates_4->available);
    RogueInteger _auto_908_32 = (0);
    for (;_auto_908_32 < _auto_907_31->count;++_auto_908_32)
    {
      RogueClassMethod* m_33 = (((RogueClassMethod*)(_auto_907_31->data->objects[_auto_908_32])));
      {
        RogueLocalList* _auto_909_34 = (m_33->parameters);
        RogueInteger _auto_910_35 = (0);
        for (;_auto_910_35 < _auto_909_34->count;++_auto_910_35)
        {
          RogueClassLocal* param_36 = (((RogueClassLocal*)(_auto_909_34->data->objects[_auto_910_35])));
          RogueType__organize( param_36->_type );
        }
      }
      if (((RogueMethod__accepts_arg_count__Integer( m_33, arg_count_9 ))))
      {
        RogueMethodList__add__Method( candidates_4->compatible, m_33 );
      }
    }
  }
  if (!(((RogueCandidateMethods__update_matches( candidates_4 )))))
  {
    return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
  }
  if (!!(arg_count_9))
  {
    {
      RogueMethodList* _auto_911_37 = (candidates_4->available);
      RogueInteger _auto_912_38 = (0);
      for (;_auto_912_38 < _auto_911_37->count;++_auto_912_38)
      {
        RogueClassMethod* m_39 = (((RogueClassMethod*)(_auto_911_37->data->objects[_auto_912_38])));
        {
          {
            {
              RogueClassCmdArgs* _auto_914_40 = (args_8);
              RogueInteger index_41 = (0);
              for (;index_41 < _auto_914_40->count;++index_41)
              {
                RogueClassType* arg_type_10 = ((call_ROGUEM46( 27, (RogueClassCmd*)(((RogueClassCmd*)(args_8->data->objects[index_41]))) )));
                RogueClassType* param_type_11 = (((RogueClassLocal*)(m_39->parameters->data->objects[index_41]))->_type);
                if ( !(arg_type_10 == param_type_11) ) goto _auto_915;
              }
            }
            RogueMethodList__add__Method( candidates_4->compatible, m_39 );
            goto _auto_913;
          }
          _auto_915:;
        }
        _auto_913:;
      }
    }
    if (!(((RogueCandidateMethods__refine_matches( candidates_4 )))))
    {
      return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
    }
  }
  if (!!(arg_count_9))
  {
    {
      RogueMethodList* _auto_916_42 = (candidates_4->available);
      RogueInteger _auto_917_43 = (0);
      for (;_auto_917_43 < _auto_916_42->count;++_auto_917_43)
      {
        RogueClassMethod* m_44 = (((RogueClassMethod*)(_auto_916_42->data->objects[_auto_917_43])));
        {
          {
            {
              RogueClassCmdArgs* _auto_919_45 = (args_8);
              RogueInteger index_46 = (0);
              for (;index_46 < _auto_919_45->count;++index_46)
              {
                RogueClassType* arg_type_12 = ((call_ROGUEM46( 27, (RogueClassCmd*)(((RogueClassCmd*)(args_8->data->objects[index_46]))) )));
                RogueClassType* param_type_13 = (((RogueClassLocal*)(m_44->parameters->data->objects[index_46]))->_type);
                if ( !(((RogueType__is_compatible_with__Type( arg_type_12, param_type_13 )))) ) goto _auto_920;
              }
            }
            RogueMethodList__add__Method( candidates_4->compatible, m_44 );
            goto _auto_918;
          }
          _auto_920:;
        }
        _auto_918:;
      }
    }
    if (!(((RogueCandidateMethods__refine_matches( candidates_4 )))))
    {
      return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
    }
  }
  if (((RogueCandidateMethods__has_match( candidates_4 ))))
  {
    return (RogueClassMethod*)(((RogueCandidateMethods__match( candidates_4 ))));
  }
  if (arg_count_9 == 1)
  {
    {
      RogueMethodList* _auto_921_47 = (candidates_4->available);
      RogueInteger _auto_922_48 = (0);
      for (;_auto_922_48 < _auto_921_47->count;++_auto_922_48)
      {
        RogueClassMethod* m_49 = (((RogueClassMethod*)(_auto_921_47->data->objects[_auto_922_48])));
        if (m_49->parameters->count == 1)
        {
          RogueClassType* arg_type_14 = ((call_ROGUEM46( 27, (RogueClassCmd*)(((RogueClassCmd*)(args_8->data->objects[0]))) )));
          RogueClassType* param_type_15 = (((RogueClassLocal*)(m_49->parameters->data->objects[0]))->_type);
          RogueType__organize( param_type_15 );
          if ((param_type_15 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object && ((RogueType__has_method_named__String( arg_type_14, Rogue_literal_strings[694] )))))
          {
            args_8->data->objects[0] = (call_ROGUEM43( 4, (RogueClassCmd*)(((RogueClassCmd*)(args_8->data->objects[0]))), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object ));
            return (RogueClassMethod*)(m_49);
          }
          else if ((param_type_15 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String && ((RogueType__has_method_named__String( arg_type_14, Rogue_literal_strings[348] )))))
          {
            args_8->data->objects[0] = (call_ROGUEM43( 4, (RogueClassCmd*)(((RogueClassCmd*)(args_8->data->objects[0]))), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String ));
            return (RogueClassMethod*)(m_49);
          }
          else if (((RogueType__has_method_named__String( arg_type_14, ((RogueString__operatorPLUS__String( Rogue_literal_strings[298], param_type_15->name ))) ))))
          {
            args_8->data->objects[0] = (call_ROGUEM43( 4, (RogueClassCmd*)(((RogueClassCmd*)(args_8->data->objects[0]))), param_type_15 ));
            return (RogueClassMethod*)(m_49);
          }
        }
      }
    }
  }
  RogueCandidateMethods__update_matches( candidates_4 );
  return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
}

RogueClassScope* RogueScope__init_object( RogueClassScope* THIS )
{
  THIS->local_list = ((RogueLocalList__init( ((RogueLocalList*)ROGUE_CREATE_OBJECT(LocalList)) )));
  THIS->control_stack = ((RogueCmdControlStructureList__init( ((RogueCmdControlStructureList*)ROGUE_CREATE_OBJECT(CmdControlStructureList)) )));
  return (RogueClassScope*)(THIS);
}

RogueString* RogueCmdControlStructureList__to_String( RogueCmdControlStructureList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueCmdControlStructureList* _auto_923_2 = (THIS);
    RogueInteger _auto_924_3 = (0);
    for (;_auto_924_3 < _auto_923_2->count;++_auto_924_3)
    {
      RogueClassCmdControlStructure* value_4 = (((RogueClassCmdControlStructure*)(_auto_923_2->data->objects[_auto_924_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdControlStructureList__type_name( RogueCmdControlStructureList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[938]);
}

RogueCmdControlStructureList* RogueCmdControlStructureList__init_object( RogueCmdControlStructureList* THIS )
{
  return (RogueCmdControlStructureList*)(THIS);
}

RogueCmdControlStructureList* RogueCmdControlStructureList__init( RogueCmdControlStructureList* THIS )
{
  RogueCmdControlStructureList__init__Integer( THIS, 10 );
  return (RogueCmdControlStructureList*)(THIS);
}

RogueCmdControlStructureList* RogueCmdControlStructureList__init__Integer( RogueCmdControlStructureList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassCmdControlStructure*), true );
  return (RogueCmdControlStructureList*)(THIS);
}

RogueCmdControlStructureList* RogueCmdControlStructureList__add__CmdControlStructure( RogueCmdControlStructureList* THIS, RogueClassCmdControlStructure* value_0 )
{
  ((RogueCmdControlStructureList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdControlStructureList*)(THIS);
}

RogueInteger RogueCmdControlStructureList__capacity( RogueCmdControlStructureList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueCmdControlStructureList* RogueCmdControlStructureList__reserve__Integer( RogueCmdControlStructureList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassCmdControlStructure*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueCmdControlStructureList__capacity( THIS ))) + ((RogueCmdControlStructureList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassCmdControlStructure*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdControlStructureList*)(THIS);
}

RogueClassCmdControlStructure* RogueCmdControlStructureList__remove_at__Integer( RogueCmdControlStructureList* THIS, RogueInteger index_0 )
{
  RogueClassCmdControlStructure* result_1 = (((RogueClassCmdControlStructure*)(THIS->data->objects[index_0])));
  THIS->data->set(index_0,((RogueArray*)(THIS->data)),(index_0 + 1),-1);
  RogueClassCmdControlStructure* zero_value_2 = 0;
  THIS->data->objects[THIS->count] = zero_value_2;
  --THIS->count;
  return (RogueClassCmdControlStructure*)(result_1);
}

RogueClassCmdControlStructure* RogueCmdControlStructureList__remove_last( RogueCmdControlStructureList* THIS )
{
  return (RogueClassCmdControlStructure*)(((RogueCmdControlStructureList__remove_at__Integer( THIS, (THIS->count - 1) ))));
}

RogueString* RogueCmdControlStructure__type_name( RogueClassCmdControlStructure* THIS )
{
  return (RogueString*)(Rogue_literal_strings[835]);
}

RogueLogical RogueCmdControlStructure__requires_semicolon( RogueClassCmdControlStructure* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmdControlStructure* RogueCmdControlStructure__init_object( RogueClassCmdControlStructure* THIS )
{
  return (RogueClassCmdControlStructure*)(THIS);
}

RogueClassCmd* RogueCmdControlStructure__set_control_logic__CmdControlStructure( RogueClassCmdControlStructure* THIS, RogueClassCmdControlStructure* control_structure_0 )
{
  THIS->_control_type = control_structure_0->_control_type;
  THIS->contains_yield = control_structure_0->contains_yield;
  THIS->escape_label = control_structure_0->escape_label;
  THIS->upkeep_label = control_structure_0->upkeep_label;
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdLiteralThis__type_name( RogueClassCmdLiteralThis* THIS )
{
  return (RogueString*)(Rogue_literal_strings[853]);
}

RogueClassCmd* RogueCmdLiteralThis__clone__CloneArgs( RogueClassCmdLiteralThis* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassMacroArgs* macro_args_1 = (((RogueClassMacroArgs*)(RogueObject_as(clone_args_0,RogueTypeMacroArgs))));
  if (!!(macro_args_1))
  {
    return (RogueClassCmd*)(((RogueMacroArgs__inline_this( macro_args_1 ))));
  }
  RogueClassTaskArgs* task_args_2 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if (!!(task_args_2))
  {
    return (RogueClassCmd*)(((RogueTaskArgs__cmd_read_context__Token( task_args_2, THIS->t ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)((RogueClassCmdLiteralThis*)ROGUE_CREATE_OBJECT(CmdLiteralThis))), THIS->t, THIS->_this_type ))))));
  }
}

void RogueCmdLiteralThis__require_type_context( RogueClassCmdLiteralThis* THIS )
{
  throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[699] )));
}

RogueClassCmd* RogueCmdLiteralThis__resolve__Scope( RogueClassCmdLiteralThis* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->_this_type );
  if (((RogueMethod__is_routine( scope_0->this_method ))))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[854] )));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmdLiteralThis* RogueCmdLiteralThis__init_object( RogueClassCmdLiteralThis* THIS )
{
  return (RogueClassCmdLiteralThis*)(THIS);
}

RogueString* RogueCmdThisContext__type_name( RogueClassCmdThisContext* THIS )
{
  return (RogueString*)(Rogue_literal_strings[649]);
}

RogueClassCmd* RogueCmdThisContext__clone__CloneArgs( RogueClassCmdThisContext* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassMacroArgs* macro_args_1 = (((RogueClassMacroArgs*)(RogueObject_as(clone_args_0,RogueTypeMacroArgs))));
  if (!!(macro_args_1))
  {
    return (RogueClassCmd*)(((RogueMacroArgs__inline_this( macro_args_1 ))));
  }
  RogueClassTaskArgs* task_args_2 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if (!!(task_args_2))
  {
    return (RogueClassCmd*)(((RogueTaskArgs__cmd_read_context__Token( task_args_2, THIS->t ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), THIS->t, THIS->_this_type ))))));
  }
}

RogueClassType* Rogue_CmdThisContext__implicit_type( RogueClassCmdThisContext* THIS )
{
  return (RogueClassType*)(THIS->_this_type);
}

void RogueCmdThisContext__require_type_context( RogueClassCmdThisContext* THIS )
{
}

RogueClassCmd* RogueCmdThisContext__resolve__Scope( RogueClassCmdThisContext* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->_this_type );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdThisContext__trace_used_code( RogueClassCmdThisContext* THIS )
{
}

RogueClassType* Rogue_CmdThisContext__type( RogueClassCmdThisContext* THIS )
{
  return (RogueClassType*)(THIS->_this_type);
}

void RogueCmdThisContext__write_cpp__CPPWriter_Logical( RogueClassCmdThisContext* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[777] );
}

RogueClassCmdThisContext* RogueCmdThisContext__init_object( RogueClassCmdThisContext* THIS )
{
  return (RogueClassCmdThisContext*)(THIS);
}

RogueClassCmdThisContext* RogueCmdThisContext__init__Token_Type( RogueClassCmdThisContext* THIS, RogueClassToken* _auto_338_0, RogueClassType* _auto_339_1 )
{
  THIS->_this_type = _auto_339_1;
  THIS->t = _auto_338_0;
  return (RogueClassCmdThisContext*)(THIS);
}

RogueString* RogueCmdLabelArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[612]);
}

RogueString* RogueCmdGenericLoop__type_name( RogueClassCmdGenericLoop* THIS )
{
  return (RogueString*)(Rogue_literal_strings[845]);
}

RogueClassCmd* RogueCmdGenericLoop__clone__CloneArgs( RogueClassCmdGenericLoop* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if ((!!(task_args_1) && THIS->contains_yield))
  {
    if (!!(THIS->control_statements))
    {
      {
        RogueClassCmdStatementList* _auto_933_5 = (THIS->control_statements);
        RogueInteger _auto_934_6 = (0);
        for (;_auto_934_6 < _auto_933_5->count;++_auto_934_6)
        {
          RogueClassCmd* statement_7 = (((RogueClassCmd*)(_auto_933_5->data->objects[_auto_934_6])));
          RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM44( 5, (RogueClassCmd*)(statement_7), ((RogueClassCloneArgs*)(task_args_1)) )) );
        }
      }
    }
    RogueClassCmdTaskControlSection* condition_section_2 = (((RogueTaskArgs__jump_to_new_section__Token( task_args_1, THIS->t ))));
    RogueClassCmdTaskControlSection* after_section_3 = (((RogueTaskArgs__create_section( task_args_1 ))));
    THIS->task_escape_section = after_section_3;
    THIS->task_upkeep_section = ((RogueTaskArgs__create_section( task_args_1 )));
    if (!!(THIS->condition))
    {
      RogueTaskArgs__add_conditional_jump__Cmd_CmdTaskControlSection( task_args_1, ((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->condition, clone_args_0 ))) ))))), after_section_3 );
    }
    {
      RogueClassCmdStatementList* _auto_935_8 = (THIS->statements);
      RogueInteger _auto_936_9 = (0);
      for (;_auto_936_9 < _auto_935_8->count;++_auto_936_9)
      {
        RogueClassCmd* statement_10 = (((RogueClassCmd*)(_auto_935_8->data->objects[_auto_936_9])));
        RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM44( 5, (RogueClassCmd*)(statement_10), ((RogueClassCloneArgs*)(task_args_1)) )) );
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, THIS->t, THIS->task_upkeep_section );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, THIS->task_upkeep_section );
    if (!!(THIS->upkeep))
    {
      {
        RogueClassCmdStatementList* _auto_937_11 = (THIS->upkeep);
        RogueInteger _auto_938_12 = (0);
        for (;_auto_938_12 < _auto_937_11->count;++_auto_938_12)
        {
          RogueClassCmd* statement_13 = (((RogueClassCmd*)(_auto_937_11->data->objects[_auto_938_12])));
          RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM44( 5, (RogueClassCmd*)(statement_13), ((RogueClassCloneArgs*)(task_args_1)) )) );
        }
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, THIS->t, condition_section_2 );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, after_section_3 );
    if (after_section_3->ip < task_args_1->cmd_task_control->sections->count)
    {
      RogueTaskArgs__jump_to_new_section__Token( task_args_1, THIS->t );
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  else
  {
    RogueClassCmdGenericLoop* result_4 = (((RogueCmdGenericLoop__init__Token_Integer_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)ROGUE_CREATE_OBJECT(CmdGenericLoop)), THIS->t, THIS->_control_type, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->condition, clone_args_0 ))), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
    call_ROGUEM170( 30, (RogueClassCmdControlStructure*)(result_4), ((RogueClassCmdControlStructure*)(THIS)) );
    THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_4));
    result_4->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 )));
    result_4->upkeep = ((RogueCmd__clone__CmdStatementList_CloneArgs( ((RogueClassCmd*)THIS), THIS->upkeep, clone_args_0 )));
    result_4->control_statements = ((RogueCmd__clone__CmdStatementList_CloneArgs( ((RogueClassCmd*)THIS), THIS->control_statements, clone_args_0 )));
    return (RogueClassCmd*)(((RogueClassCmd*)(result_4)));
  }
}

RogueClassCmd* RogueCmdGenericLoop__resolve__Scope( RogueClassCmdGenericLoop* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  if (!!(THIS->control_statements))
  {
    {
      RogueClassCmdStatementList* _auto_940_1 = (THIS->control_statements);
      RogueInteger i_2 = (0);
      for (;i_2 < _auto_940_1->count;++i_2)
      {
        THIS->control_statements->data->objects[i_2] = (call_ROGUEM42( 22, (RogueClassCmd*)(((RogueClassCmd*)(THIS->control_statements->data->objects[i_2]))), scope_0 ));
      }
    }
  }
  if (!!(THIS->condition))
  {
    THIS->condition = ((RogueCmd__require_logical__Scope( (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->condition), scope_0 )), scope_0 )));
  }
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  if (!!(THIS->upkeep))
  {
    RogueCmdStatementList__resolve__Scope( THIS->upkeep, scope_0 );
  }
  if (!!(THIS->control_statements))
  {
    {
      RogueClassCmdStatementList* _auto_941_3 = (THIS->control_statements);
      RogueInteger _auto_942_4 = (0);
      for (;_auto_942_4 < _auto_941_3->count;++_auto_942_4)
      {
        RogueClassCmd* statement_5 = (((RogueClassCmd*)(_auto_941_3->data->objects[_auto_942_4])));
        call_ROGUEM45( 10, (RogueClassCmd*)(statement_5), scope_0 );
      }
    }
  }
  RogueCmdControlStructureList__remove_last( scope_0->control_stack );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdGenericLoop__trace_used_code( RogueClassCmdGenericLoop* THIS )
{
  RogueCmdStatementList__trace_used_code( THIS->statements );
  if (!!(THIS->control_statements))
  {
    RogueCmdStatementList__trace_used_code( THIS->control_statements );
  }
  if (!!(THIS->condition))
  {
    call_ROGUEM48( 26, (RogueClassCmd*)(THIS->condition) );
  }
  if (!!(THIS->upkeep))
  {
    RogueCmdStatementList__trace_used_code( THIS->upkeep );
  }
}

void RogueCmdGenericLoop__write_cpp__CPPWriter_Logical( RogueClassCmdGenericLoop* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!!(THIS->control_statements))
  {
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[174] );
    writer_0->indent += 2;
    if (!!(THIS->control_statements))
    {
      {
        RogueClassCmdStatementList* _auto_943_3 = (THIS->control_statements);
        RogueInteger _auto_944_4 = (0);
        for (;_auto_944_4 < _auto_943_3->count;++_auto_944_4)
        {
          RogueClassCmd* statement_5 = (((RogueClassCmd*)(_auto_943_3->data->objects[_auto_944_4])));
          call_ROGUEM52( 28, (RogueClassCmd*)(statement_5), writer_0, false );
          RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[184] );
        }
      }
    }
  }
  if ((!!(THIS->upkeep) || !(!!(THIS->condition))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[778] );
    if (!!(THIS->condition))
    {
      call_ROGUEM52( 28, (RogueClassCmd*)(THIS->condition), writer_0, false );
    }
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[184] );
    RogueLogical first_2 = (true);
    if (!!(THIS->upkeep))
    {
      {
        RogueClassCmdStatementList* _auto_945_6 = (THIS->upkeep);
        RogueInteger _auto_946_7 = (0);
        for (;_auto_946_7 < _auto_945_6->count;++_auto_946_7)
        {
          RogueClassCmd* statement_8 = (((RogueClassCmd*)(_auto_945_6->data->objects[_auto_946_7])));
          if (first_2)
          {
            first_2 = ((RogueLogical)false);
          }
          else
          {
            RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[157] );
          }
          call_ROGUEM52( 28, (RogueClassCmd*)(statement_8), writer_0, false );
        }
      }
    }
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[100] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[779] );
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->condition), writer_0, false );
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[100] );
  }
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[174] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, false );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[97] );
  if (!!(THIS->control_statements))
  {
    writer_0->indent -= 2;
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[97] );
  }
  if (!!(THIS->escape_label))
  {
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, THIS->escape_label ))), Rogue_literal_strings[780] );
  }
}

RogueClassCmdGenericLoop* RogueCmdGenericLoop__init_object( RogueClassCmdGenericLoop* THIS )
{
  return (RogueClassCmdGenericLoop*)(THIS);
}

RogueClassCmdGenericLoop* RogueCmdGenericLoop__init__Token_Integer_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( RogueClassCmdGenericLoop* THIS, RogueClassToken* _auto_342_0, RogueInteger _auto_343_1, RogueClassCmd* _auto_344_2, RogueClassCmdStatementList* _auto_345_3, RogueClassCmdStatementList* _auto_346_4, RogueClassCmdStatementList* _auto_347_5 )
{
  THIS->control_statements = _auto_347_5;
  THIS->upkeep = _auto_346_4;
  THIS->statements = _auto_345_3;
  THIS->condition = _auto_344_2;
  THIS->_control_type = _auto_343_1;
  THIS->t = _auto_342_0;
  return (RogueClassCmdGenericLoop*)(THIS);
}

void RogueCmdGenericLoop__add_control_var__Local( RogueClassCmdGenericLoop* THIS, RogueClassLocal* v_0 )
{
  if (!(!!(THIS->control_statements)))
  {
    THIS->control_statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->control_statements), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local( ((RogueClassCmdLocalDeclaration*)ROGUE_CREATE_OBJECT(CmdLocalDeclaration)), v_0->t, v_0 ))))) );
}

void RogueCmdGenericLoop__add_upkeep__Cmd( RogueClassCmdGenericLoop* THIS, RogueClassCmd* cmd_0 )
{
  if (!(!!(THIS->upkeep)))
  {
    THIS->upkeep = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->upkeep), cmd_0 );
}

RogueString* RogueCmdLiteralInteger__type_name( RogueClassCmdLiteralInteger* THIS )
{
  return (RogueString*)(Rogue_literal_strings[855]);
}

RogueClassCmd* RogueCmdLiteralInteger__cast_to__Type( RogueClassCmdLiteralInteger* THIS, RogueClassType* target_type_0 )
{
  if (target_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)ROGUE_CREATE_OBJECT(CmdLiteralReal)), THIS->t, ((RogueReal)(THIS->value)) ))))));
  }
  else
  {
    return (RogueClassCmd*)((RogueCmd__cast_to__Type( ((RogueClassCmd*)THIS), target_type_0 )));
  }
}

RogueClassCmd* RogueCmdLiteralInteger__clone__CloneArgs( RogueClassCmdLiteralInteger* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, THIS->value ))))));
}

RogueClassCmd* RogueCmdLiteralInteger__resolve__Scope( RogueClassCmdLiteralInteger* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralInteger__type( RogueClassCmdLiteralInteger* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer);
}

void RogueCmdLiteralInteger__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralInteger* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__Integer( writer_0, THIS->value );
}

RogueClassCmdLiteralInteger* RogueCmdLiteralInteger__init_object( RogueClassCmdLiteralInteger* THIS )
{
  return (RogueClassCmdLiteralInteger*)(THIS);
}

RogueClassCmdLiteralInteger* RogueCmdLiteralInteger__init__Token_Integer( RogueClassCmdLiteralInteger* THIS, RogueClassToken* _auto_353_0, RogueInteger _auto_354_1 )
{
  THIS->value = _auto_354_1;
  THIS->t = _auto_353_0;
  return (RogueClassCmdLiteralInteger*)(THIS);
}

RogueString* RogueCmdLiteral__type_name( RogueClassCmdLiteral* THIS )
{
  return (RogueString*)(Rogue_literal_strings[650]);
}

RogueClassType* Rogue_CmdLiteral__implicit_type( RogueClassCmdLiteral* THIS )
{
  return (RogueClassType*)((call_ROGUEM46( 27, (RogueClassCmd*)(THIS) )));
}

RogueLogical RogueCmdLiteral__is_literal( RogueClassCmdLiteral* THIS )
{
  return (RogueLogical)(true);
}

void RogueCmdLiteral__trace_used_code( RogueClassCmdLiteral* THIS )
{
}

RogueClassCmdLiteral* RogueCmdLiteral__init_object( RogueClassCmdLiteral* THIS )
{
  return (RogueClassCmdLiteral*)(THIS);
}

RogueString* RogueCmdCompareNE__type_name( RogueClassCmdCompareNE* THIS )
{
  return (RogueString*)(Rogue_literal_strings[970]);
}

RogueClassCmd* RogueCmdCompareNE__clone__CloneArgs( RogueClassCmdCompareNE* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareNE*)ROGUE_CREATE_OBJECT(CmdCompareNE))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdCompareNE__combine_literal_operands__Type( RogueClassCmdCompareNE* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal)))->value != ((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal)))->value ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInteger)))->value != ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInteger)))->value ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareNE* RogueCmdCompareNE__init_object( RogueClassCmdCompareNE* THIS )
{
  return (RogueClassCmdCompareNE*)(THIS);
}

RogueString* RogueCmdCompareNE__symbol( RogueClassCmdCompareNE* THIS )
{
  return (RogueString*)(Rogue_literal_strings[173]);
}

RogueClassCmd* RogueCmdCompareNE__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareNE* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  RogueClassCmd* cmd_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[907], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[908], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM204( 22, (RogueClassCmdBinary*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareNE*)ROGUE_CREATE_OBJECT(CmdCompareNE))), THIS->t, cmd_4, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, 0 ))))) )))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[909], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[907], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[909], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[907], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), true, false ))));
}

RogueString* RogueCmdComparison__type_name( RogueClassCmdComparison* THIS )
{
  return (RogueString*)(Rogue_literal_strings[878]);
}

RogueClassType* Rogue_CmdComparison__type( RogueClassCmdComparison* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

RogueClassCmdComparison* RogueCmdComparison__init_object( RogueClassCmdComparison* THIS )
{
  return (RogueClassCmdComparison*)(THIS);
}

RogueLogical RogueCmdComparison__requires_parens( RogueClassCmdComparison* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdComparison__resolve_for_types__Scope_Type_Type( RogueClassCmdComparison* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  THIS->resolved = true;
  if ((((RogueType__is_compound( left_type_1 ))) || ((RogueType__is_compound( right_type_2 )))))
  {
    RogueClassCmd* result_3 = ((call_ROGUEM217( 38, (RogueClassCmdComparison*)(THIS), scope_0, left_type_1, right_type_2, false )));
    if (!!(result_3))
    {
      return (RogueClassCmd*)(result_3);
    }
    if (left_type_1 == right_type_2)
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
    }
    throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[887] ))), ((RogueType__to_String( left_type_1 ))) ))), Rogue_literal_strings[317] ))), ((RogueType__to_String( right_type_2 ))) ))), Rogue_literal_strings[44] ))) ))) )));
  }
  else if ((((RogueType__is_reference( left_type_1 ))) || ((RogueType__is_reference( right_type_2 )))))
  {
    return (RogueClassCmd*)((call_ROGUEM217( 38, (RogueClassCmdComparison*)(THIS), scope_0, left_type_1, right_type_2, true )));
  }
  RogueClassType* common_type_4 = (((RogueCmd__must_find_common_type__Type_Type( ((RogueClassCmd*)THIS), left_type_1, right_type_2 ))));
  THIS->left = (call_ROGUEM42( 22, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->left), common_type_4 ))), scope_0 ));
  THIS->right = (call_ROGUEM42( 22, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->right), common_type_4 ))), scope_0 ));
  if (((call_ROGUEM47( 15, (RogueClassCmd*)(THIS->left) )) && (call_ROGUEM47( 15, (RogueClassCmd*)(THIS->right) ))))
  {
    return (RogueClassCmd*)((call_ROGUEM43( 9, (RogueClassCmd*)(THIS), common_type_4 )));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdComparison__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdComparison* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[886] )));
}

RogueString* RogueCmdBinary__type_name( RogueClassCmdBinary* THIS )
{
  return (RogueString*)(Rogue_literal_strings[651]);
}

RogueClassCmd* RogueCmdBinary__resolve__Scope( RogueClassCmdBinary* THIS, RogueClassScope* scope_0 )
{
  THIS->left = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->left), scope_0 ));
  THIS->right = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->right), scope_0 ));
  RogueClassType* left_type_1 = (((Rogue_Cmd__require_type( THIS->left ))));
  RogueClassType* right_type_2 = (((Rogue_Cmd__require_type( THIS->right ))));
  RogueClassCmd* result_3 = ((call_ROGUEM213( 33, (RogueClassCmdBinary*)(THIS), scope_0, left_type_1, right_type_2 )));
  return (RogueClassCmd*)(result_3);
}

void RogueCmdBinary__trace_used_code( RogueClassCmdBinary* THIS )
{
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->left) );
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->right) );
}

RogueClassType* Rogue_CmdBinary__type( RogueClassCmdBinary* THIS )
{
  return (RogueClassType*)(((RogueCmd__find_operation_result_type__Type_Type( ((RogueClassCmd*)THIS), ((Rogue_Cmd__require_type( THIS->left ))), ((Rogue_Cmd__require_type( THIS->right ))) ))));
}

void RogueCmdBinary__write_cpp__CPPWriter_Logical( RogueClassCmdBinary* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if ((call_ROGUEM220( 32, (RogueClassCmdBinary*)(THIS) )))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[176] );
  }
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->left), writer_0, false );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[255] ))), (call_ROGUEM209( 37, (RogueClassCmdBinary*)(THIS) )) ))), Rogue_literal_strings[255] );
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->right), writer_0, false );
  if ((call_ROGUEM220( 32, (RogueClassCmdBinary*)(THIS) )))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] );
  }
}

RogueClassCmdBinary* RogueCmdBinary__init_object( RogueClassCmdBinary* THIS )
{
  return (RogueClassCmdBinary*)(THIS);
}

RogueClassCmdBinary* RogueCmdBinary__init__Token_Cmd_Cmd( RogueClassCmdBinary* THIS, RogueClassToken* _auto_355_0, RogueClassCmd* _auto_356_1, RogueClassCmd* _auto_357_2 )
{
  THIS->right = _auto_357_2;
  THIS->left = _auto_356_1;
  THIS->t = _auto_355_0;
  return (RogueClassCmdBinary*)(THIS);
}

RogueString* RogueCmdBinary__fn_name( RogueClassCmdBinary* THIS )
{
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[287] ))), (call_ROGUEM209( 2, (RogueClassCmdBinary*)(THIS) )) ))), Rogue_literal_strings[715] ))) ))) )));
}

RogueLogical RogueCmdBinary__requires_parens( RogueClassCmdBinary* THIS )
{
  return (RogueLogical)(true);
}

RogueClassCmd* RogueCmdBinary__resolve_for_types__Scope_Type_Type( RogueClassCmdBinary* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  RogueClassCmd* operator_method_call_3 = ((call_ROGUEM213( 35, (RogueClassCmdBinary*)(THIS), scope_0, left_type_1, right_type_2 )));
  if (!!(operator_method_call_3))
  {
    return (RogueClassCmd*)(operator_method_call_3);
  }
  RogueClassType* common_type_4 = (((RogueCmd__must_find_common_type__Type_Type( ((RogueClassCmd*)THIS), left_type_1, right_type_2 ))));
  THIS->left = (call_ROGUEM42( 22, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->left), common_type_4 ))), scope_0 ));
  THIS->right = (call_ROGUEM42( 22, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->right), common_type_4 ))), scope_0 ));
  if (((call_ROGUEM47( 15, (RogueClassCmd*)(THIS->left) )) && (call_ROGUEM47( 15, (RogueClassCmd*)(THIS->right) ))))
  {
    return (RogueClassCmd*)((call_ROGUEM43( 9, (RogueClassCmd*)(THIS), common_type_4 )));
  }
  return (RogueClassCmd*)((call_ROGUEM212( 34, (RogueClassCmdBinary*)(THIS), scope_0, common_type_4 )));
}

RogueClassCmd* RogueCmdBinary__resolve_for_common_type__Scope_Type( RogueClassCmdBinary* THIS, RogueClassScope* scope_0, RogueClassType* common_type_1 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdBinary__resolve_operator_method__Scope_Type_Type( RogueClassCmdBinary* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  if (((RogueType__has_method_named__String( left_type_1, (call_ROGUEM209( 31, (RogueClassCmdBinary*)(THIS) )) ))))
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, (call_ROGUEM209( 31, (RogueClassCmdBinary*)(THIS) )), ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), scope_0 ))));
  }
  else if (((RogueType__has_routine_named__String( left_type_1, (call_ROGUEM209( 31, (RogueClassCmdBinary*)(THIS) )) ))))
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, left_type_1->name ))))), (call_ROGUEM209( 31, (RogueClassCmdBinary*)(THIS) )), ((RogueCmdArgs__init__Cmd_Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left, THIS->right ))) ))), scope_0 ))));
  }
  else if (((RogueType__has_routine_named__String( right_type_2, (call_ROGUEM209( 31, (RogueClassCmdBinary*)(THIS) )) ))))
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, right_type_2->name ))))), (call_ROGUEM209( 31, (RogueClassCmdBinary*)(THIS) )), ((RogueCmdArgs__init__Cmd_Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left, THIS->right ))) ))), scope_0 ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
}

RogueString* RogueCmdBinary__symbol( RogueClassCmdBinary* THIS )
{
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[287] ))), (call_ROGUEM209( 2, (RogueClassCmdBinary*)(THIS) )) ))), Rogue_literal_strings[781] ))) ))) )));
}

RogueString* RogueCmdBinary__cpp_symbol( RogueClassCmdBinary* THIS )
{
  return (RogueString*)((call_ROGUEM209( 36, (RogueClassCmdBinary*)(THIS) )));
}

RogueString* RogueTaskArgs__type_name( RogueClassTaskArgs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[843]);
}

RogueClassTaskArgs* RogueTaskArgs__init_object( RogueClassTaskArgs* THIS )
{
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassTaskArgs* RogueTaskArgs__init__Type_Method_Type_Method( RogueClassTaskArgs* THIS, RogueClassType* _auto_364_0, RogueClassMethod* _auto_365_1, RogueClassType* _auto_366_2, RogueClassMethod* _auto_367_3 )
{
  THIS->original_method = _auto_367_3;
  THIS->_original_type = _auto_366_2;
  THIS->task_method = _auto_365_1;
  THIS->_task_type = _auto_364_0;
  THIS->cmd_task_control = ((RogueCmdTaskControl__init__Token( ((RogueClassCmdTaskControl*)ROGUE_CREATE_OBJECT(CmdTaskControl)), THIS->task_method->t )));
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassTaskArgs* RogueTaskArgs__add__Cmd( RogueClassTaskArgs* THIS, RogueClassCmd* cmd_0 )
{
  if (!!(cmd_0))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->cmd_task_control->current_section->statements), cmd_0 );
  }
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassTaskArgs* RogueTaskArgs__add_jump__Token_CmdTaskControlSection( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassCmdTaskControlSection* to_section_1 )
{
  RogueTaskArgs__set_next_ip__Token_CmdTaskControlSection( THIS, t_0, to_section_1 );
  RogueTaskArgs__add__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), t_0, ((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), t_0, true ))))) ))))) );
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassTaskArgs* RogueTaskArgs__add_conditional_jump__Cmd_CmdTaskControlSection( RogueClassTaskArgs* THIS, RogueClassCmd* condition_0, RogueClassCmdTaskControlSection* to_section_1 )
{
  RogueClassToken* t_2 = (condition_0->t);
  RogueClassCmdIf* cmd_if_3 = (((RogueCmdIf__init__Token_Cmd_Integer( ((RogueClassCmdIf*)ROGUE_CREATE_OBJECT(CmdIf)), t_2, condition_0, 2 ))));
  RogueInteger ip_4 = (to_section_1->ip);
  if ((THIS->cmd_task_control->current_section->ip + 1) != ip_4)
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)cmd_if_3->statements), ((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), t_2, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), t_2, THIS->_task_type ))))), THIS->ip_property, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), t_2, (ip_4 - 1) ))))) ))))) );
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)cmd_if_3->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), t_2, ((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), t_2, true ))))) ))))) );
  RogueTaskArgs__add__Cmd( THIS, ((RogueClassCmd*)(cmd_if_3)) );
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassCmd* RogueTaskArgs__create_return__Token_Cmd( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassCmd* value_1 )
{
  RogueClassCmdBlock* result_2 = (((RogueCmdBlock__init__Token_Integer( ((RogueClassCmdBlock*)ROGUE_CREATE_OBJECT(CmdBlock)), t_0, 0 ))));
  if (!!(value_1))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)result_2->statements), ((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)ROGUE_CREATE_OBJECT(CmdAssign)), t_0, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), t_0, Rogue_literal_strings[359] ))))), value_1 ))))) );
  }
  RogueCmdList__add__Cmd( ((RogueCmdList*)result_2->statements), ((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), t_0, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), t_0, THIS->_task_type ))))), THIS->ip_property, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), t_0, -1 ))))) ))))) );
  RogueCmdList__add__Cmd( ((RogueCmdList*)result_2->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), t_0, ((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), t_0, false ))))) ))))) );
  return (RogueClassCmd*)(((RogueClassCmd*)(result_2)));
}

RogueClassCmd* RogueTaskArgs__create_escape__Token_CmdTaskControlSection( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassCmdTaskControlSection* escape_section_1 )
{
  RogueClassCmdBlock* result_2 = (((RogueCmdBlock__init__Token_Integer( ((RogueClassCmdBlock*)ROGUE_CREATE_OBJECT(CmdBlock)), t_0, 0 ))));
  RogueCmdList__add__Cmd( ((RogueCmdList*)result_2->statements), ((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), t_0, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), t_0, THIS->_task_type ))))), THIS->ip_property, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), t_0, (escape_section_1->ip - 1) ))))) ))))) );
  RogueCmdList__add__Cmd( ((RogueCmdList*)result_2->statements), ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), t_0, ((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), t_0, false ))))) ))))) );
  return (RogueClassCmd*)(((RogueClassCmd*)(result_2)));
}

RogueClassTaskArgs* RogueTaskArgs__add_yield__Token( RogueClassTaskArgs* THIS, RogueClassToken* t_0 )
{
  RogueClassCmdTaskControlSection* next_section_1 = (((RogueTaskArgs__create_section( THIS ))));
  RogueTaskArgs__set_next_ip__Token_CmdTaskControlSection( THIS, t_0, next_section_1 );
  RogueTaskArgs__add__Cmd( THIS, ((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), t_0, ((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), t_0, false ))))) ))))) );
  RogueTaskArgs__begin_section__CmdTaskControlSection( THIS, next_section_1 );
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassCmdTaskControlSection* RogueTaskArgs__jump_to_new_section__Token( RogueClassTaskArgs* THIS, RogueClassToken* t_0 )
{
  RogueClassCmdTaskControlSection* new_section_1 = (((RogueTaskArgs__create_section( THIS ))));
  RogueTaskArgs__add_jump__Token_CmdTaskControlSection( THIS, t_0, new_section_1 );
  RogueTaskArgs__begin_section__CmdTaskControlSection( THIS, new_section_1 );
  return (RogueClassCmdTaskControlSection*)(new_section_1);
}

RogueClassTaskArgs* RogueTaskArgs__begin_section__CmdTaskControlSection( RogueClassTaskArgs* THIS, RogueClassCmdTaskControlSection* section_0 )
{
  THIS->cmd_task_control->current_section = section_0;
  return (RogueClassTaskArgs*)(THIS);
}

RogueClassCmdTaskControlSection* RogueTaskArgs__create_section( RogueClassTaskArgs* THIS )
{
  RogueClassCmdTaskControlSection* section_0 = (((RogueCmdTaskControlSection__init__Integer( ((RogueClassCmdTaskControlSection*)ROGUE_CREATE_OBJECT(CmdTaskControlSection)), (THIS->cmd_task_control->sections->count + 1) ))));
  RogueCmdTaskControlSectionList__add__CmdTaskControlSection( THIS->cmd_task_control->sections, section_0 );
  return (RogueClassCmdTaskControlSection*)(section_0);
}

RogueClassCmd* RogueTaskArgs__cmd_read_this__Token( RogueClassTaskArgs* THIS, RogueClassToken* t_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), t_0, THIS->_task_type ))))));
}

RogueClassCmd* RogueTaskArgs__cmd_read_context__Token( RogueClassTaskArgs* THIS, RogueClassToken* t_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)ROGUE_CREATE_OBJECT(CmdReadProperty)), t_0, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), t_0, THIS->_task_type ))))), THIS->context_property ))))));
}

RogueString* RogueTaskArgs__convert_local_name__Local( RogueClassTaskArgs* THIS, RogueClassLocal* local_info_0 )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), local_info_0->name ))), Rogue_literal_strings[354] ))), ((RogueInteger__to_String( local_info_0->index ))) ))) ))));
}

RogueClassCmd* RogueTaskArgs__cmd_read__Token_Local( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassLocal* local_info_1 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), t_0, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), t_0, THIS->_task_type ))))), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), local_info_1->name ))), Rogue_literal_strings[354] ))), ((RogueInteger__to_String( local_info_1->index ))) ))) ))) ))))));
}

RogueClassCmd* RogueTaskArgs__cmd_write__Token_Local_Cmd( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassLocal* local_info_1, RogueClassCmd* new_value_2 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)ROGUE_CREATE_OBJECT(CmdAssign)), t_0, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), t_0, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), t_0, THIS->_task_type ))))), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), local_info_1->name ))), Rogue_literal_strings[354] ))), ((RogueInteger__to_String( local_info_1->index ))) ))) ))) ))))), new_value_2 ))))));
}

RogueClassCmd* RogueTaskArgs__replace_write_local__Token_Local_Cmd( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassLocal* local_info_1, RogueClassCmd* new_value_2 )
{
  if (new_value_2 == NULL)
  {
    new_value_2 = ((RogueClassCmd*)((RogueType__create_default_value__Token( local_info_1->_type, t_0 ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)ROGUE_CREATE_OBJECT(CmdAssign)), t_0, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), t_0, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), t_0, THIS->_task_type ))))), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), local_info_1->name ))), Rogue_literal_strings[354] ))), ((RogueInteger__to_String( local_info_1->index ))) ))) ))) ))))), new_value_2 ))))));
}

RogueClassTaskArgs* RogueTaskArgs__set_next_ip__Token_CmdTaskControlSection( RogueClassTaskArgs* THIS, RogueClassToken* t_0, RogueClassCmdTaskControlSection* to_section_1 )
{
  RogueInteger ip_2 = (to_section_1->ip);
  if ((THIS->cmd_task_control->current_section->ip + 1) != ip_2)
  {
    RogueCmdTaskControl__add__Cmd( THIS->cmd_task_control, ((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), t_0, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), t_0, THIS->_task_type ))))), THIS->ip_property, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), t_0, (ip_2 - 1) ))))) ))))) );
  }
  return (RogueClassTaskArgs*)(THIS);
}

RogueString* RogueCmdArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[613]);
}

RogueString* RogueCmdTaskControl__type_name( RogueClassCmdTaskControl* THIS )
{
  return (RogueString*)(Rogue_literal_strings[652]);
}

RogueLogical RogueCmdTaskControl__requires_semicolon( RogueClassCmdTaskControl* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdTaskControl__resolve__Scope( RogueClassCmdTaskControl* THIS, RogueClassScope* scope_0 )
{
  {
    RogueCmdTaskControlSectionList* _auto_952_1 = (THIS->sections);
    RogueInteger _auto_953_2 = (0);
    for (;_auto_953_2 < _auto_952_1->count;++_auto_953_2)
    {
      RogueClassCmdTaskControlSection* section_3 = (((RogueClassCmdTaskControlSection*)(_auto_952_1->data->objects[_auto_953_2])));
      RogueCmdStatementList__resolve__Scope( section_3->statements, scope_0 );
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdTaskControl__trace_used_code( RogueClassCmdTaskControl* THIS )
{
  {
    RogueCmdTaskControlSectionList* _auto_954_0 = (THIS->sections);
    RogueInteger _auto_955_1 = (0);
    for (;_auto_955_1 < _auto_954_0->count;++_auto_955_1)
    {
      RogueClassCmdTaskControlSection* section_2 = (((RogueClassCmdTaskControlSection*)(_auto_954_0->data->objects[_auto_955_1])));
      RogueCmdStatementList__trace_used_code( section_2->statements );
    }
  }
}

void RogueCmdTaskControl__write_cpp__CPPWriter_Logical( RogueClassCmdTaskControl* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[782] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[174] );
  writer_0->indent += 2;
  {
    RogueCmdTaskControlSectionList* _auto_956_2 = (THIS->sections);
    RogueInteger _auto_957_3 = (0);
    for (;_auto_957_3 < _auto_956_2->count;++_auto_957_3)
    {
      RogueClassCmdTaskControlSection* section_4 = (((RogueClassCmdTaskControlSection*)(_auto_956_2->data->objects[_auto_957_3])));
      RogueCPPWriter__println__String( ((RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[508] ))), section_4->ip ))), Rogue_literal_strings[155] );
      RogueCmdStatementList__write_cpp__CPPWriter_Logical( section_4->statements, writer_0, false );
    }
  }
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[512] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[783] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[784] );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[97] );
}

RogueClassCmdTaskControl* RogueCmdTaskControl__init_object( RogueClassCmdTaskControl* THIS )
{
  THIS->sections = ((RogueCmdTaskControlSectionList__init( ((RogueCmdTaskControlSectionList*)ROGUE_CREATE_OBJECT(CmdTaskControlSectionList)) )));
  return (RogueClassCmdTaskControl*)(THIS);
}

RogueClassCmdTaskControl* RogueCmdTaskControl__init__Token( RogueClassCmdTaskControl* THIS, RogueClassToken* _auto_370_0 )
{
  THIS->t = _auto_370_0;
  THIS->current_section = ((RogueCmdTaskControlSection__init__Integer( ((RogueClassCmdTaskControlSection*)ROGUE_CREATE_OBJECT(CmdTaskControlSection)), 1 )));
  RogueCmdTaskControlSectionList__add__CmdTaskControlSection( THIS->sections, THIS->current_section );
  return (RogueClassCmdTaskControl*)(THIS);
}

RogueClassCmdTaskControl* RogueCmdTaskControl__add__Cmd( RogueClassCmdTaskControl* THIS, RogueClassCmd* cmd_0 )
{
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->current_section->statements), cmd_0 );
  return (RogueClassCmdTaskControl*)(THIS);
}

RogueString* RogueCmdTaskControlSection__type_name( RogueClassCmdTaskControlSection* THIS )
{
  return (RogueString*)(Rogue_literal_strings[573]);
}

RogueClassCmdTaskControlSection* RogueCmdTaskControlSection__init__Integer( RogueClassCmdTaskControlSection* THIS, RogueInteger _auto_371_0 )
{
  THIS->ip = _auto_371_0;
  return (RogueClassCmdTaskControlSection*)(THIS);
}

RogueClassCmdTaskControlSection* RogueCmdTaskControlSection__init_object( RogueClassCmdTaskControlSection* THIS )
{
  THIS->statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
  return (RogueClassCmdTaskControlSection*)(THIS);
}

RogueString* RogueString_MethodListTableEntryList__to_String( RogueTableEntry_of_String_MethodListList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_MethodListList* _auto_958_2 = (THIS);
    RogueInteger _auto_959_3 = (0);
    for (;_auto_959_3 < _auto_958_2->count;++_auto_959_3)
    {
      RogueClassString_MethodListTableEntry* value_4 = (((RogueClassString_MethodListTableEntry*)(_auto_958_2->data->objects[_auto_959_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_MethodListTableEntryList__type_name( RogueTableEntry_of_String_MethodListList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[939]);
}

RogueTableEntry_of_String_MethodListList* RogueString_MethodListTableEntryList__init_object( RogueTableEntry_of_String_MethodListList* THIS )
{
  return (RogueTableEntry_of_String_MethodListList*)(THIS);
}

RogueTableEntry_of_String_MethodListList* RogueString_MethodListTableEntryList__init__Integer_String_MethodListTableEntry( RogueTableEntry_of_String_MethodListList* THIS, RogueInteger initial_capacity_0, RogueClassString_MethodListTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_MethodListTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_382_3 = (initial_capacity_0);
    for (;i_2 <= _auto_382_3;++i_2)
    {
      RogueString_MethodListTableEntryList__add__String_MethodListTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_MethodListList*)(THIS);
}

RogueTableEntry_of_String_MethodListList* RogueString_MethodListTableEntryList__add__String_MethodListTableEntry( RogueTableEntry_of_String_MethodListList* THIS, RogueClassString_MethodListTableEntry* value_0 )
{
  ((RogueString_MethodListTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_MethodListList*)(THIS);
}

RogueInteger RogueString_MethodListTableEntryList__capacity( RogueTableEntry_of_String_MethodListList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_MethodListList* RogueString_MethodListTableEntryList__reserve__Integer( RogueTableEntry_of_String_MethodListList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_MethodListTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_MethodListTableEntryList__capacity( THIS ))) + ((RogueString_MethodListTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_MethodListTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_MethodListList*)(THIS);
}

RogueString* RogueString_MethodListTableEntry__type_name( RogueClassString_MethodListTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[574]);
}

RogueClassString_MethodListTableEntry* RogueString_MethodListTableEntry__init__String_MethodList_Integer( RogueClassString_MethodListTableEntry* THIS, RogueString* _key_0, RogueMethodList* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_MethodListTableEntry*)(THIS);
}

RogueClassString_MethodListTableEntry* RogueString_MethodListTableEntry__init_object( RogueClassString_MethodListTableEntry* THIS )
{
  return (RogueClassString_MethodListTableEntry*)(THIS);
}

RogueString* RogueString_MethodListTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[614]);
}

RogueString* RogueString_CmdTable__to_String( RogueClassString_CmdTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_CmdTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_CmdTable__type_name( RogueClassString_CmdTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[575]);
}

RogueClassString_CmdTable* RogueString_CmdTable__init( RogueClassString_CmdTable* THIS )
{
  RogueString_CmdTable__init__Integer( THIS, 16 );
  return (RogueClassString_CmdTable*)(THIS);
}

RogueClassString_CmdTable* RogueString_CmdTable__init__Integer( RogueClassString_CmdTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_CmdTableEntryList__init__Integer_String_CmdTableEntry( ((RogueTableEntry_of_String_CmdList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_CmdList)), bin_count_0, ((RogueClassString_CmdTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_CmdTable*)(THIS);
}

RogueLogical RogueString_CmdTable__contains__String( RogueClassString_CmdTable* THIS, RogueString* key_0 )
{
  return (RogueLogical)(!!(((RogueString_CmdTable__find__String( THIS, key_0 )))));
}

RogueClassString_CmdTableEntry* RogueString_CmdTable__find__String( RogueClassString_CmdTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_CmdTableEntry* entry_2 = (((RogueClassString_CmdTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_CmdTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_CmdTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_CmdTableEntry*)(((RogueClassString_CmdTableEntry*)(NULL)));
}

RogueClassCmd* RogueString_CmdTable__get__String( RogueClassString_CmdTable* THIS, RogueString* key_0 )
{
  RogueClassString_CmdTableEntry* entry_1 = (((RogueString_CmdTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassCmd*)(entry_1->value);
  }
  else
  {
    RogueClassCmd* default_value_2 = 0;
    return (RogueClassCmd*)(default_value_2);
  }
}

void RogueString_CmdTable__set__String_Cmd( RogueClassString_CmdTable* THIS, RogueString* key_0, RogueClassCmd* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_CmdTableEntry* entry_4 = (((RogueClassString_CmdTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_CmdTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_CmdTableEntry*)((RogueString_CmdTableEntry__init__String_Cmd_Integer( ((RogueClassString_CmdTableEntry*)ROGUE_CREATE_OBJECT(String_CmdTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_CmdTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_CmdTable__print_to__StringBuilder( RogueClassString_CmdTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_CmdTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_CmdTable* RogueString_CmdTable__init_object( RogueClassString_CmdTable* THIS )
{
  return (RogueClassString_CmdTable*)(THIS);
}

RogueString* RogueString_PropertyTable__to_String( RogueClassString_PropertyTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_PropertyTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_PropertyTable__type_name( RogueClassString_PropertyTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[576]);
}

RogueClassString_PropertyTable* RogueString_PropertyTable__init( RogueClassString_PropertyTable* THIS )
{
  RogueString_PropertyTable__init__Integer( THIS, 16 );
  return (RogueClassString_PropertyTable*)(THIS);
}

RogueClassString_PropertyTable* RogueString_PropertyTable__init__Integer( RogueClassString_PropertyTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_PropertyTableEntryList__init__Integer_String_PropertyTableEntry( ((RogueTableEntry_of_String_PropertyList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_PropertyList)), bin_count_0, ((RogueClassString_PropertyTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_PropertyTable*)(THIS);
}

void RogueString_PropertyTable__clear( RogueClassString_PropertyTable* THIS )
{
  {
    RogueTableEntry_of_String_PropertyList* _auto_975_0 = (THIS->bins);
    RogueInteger i_1 = (0);
    for (;i_1 < _auto_975_0->count;++i_1)
    {
      THIS->bins->data->objects[i_1] = ((RogueClassString_PropertyTableEntry*)(NULL));
    }
  }
  RogueStringList__clear( THIS->keys );
}

RogueClassString_PropertyTableEntry* RogueString_PropertyTable__find__String( RogueClassString_PropertyTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_PropertyTableEntry* entry_2 = (((RogueClassString_PropertyTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_PropertyTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_PropertyTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_PropertyTableEntry*)(((RogueClassString_PropertyTableEntry*)(NULL)));
}

RogueClassProperty* RogueString_PropertyTable__get__String( RogueClassString_PropertyTable* THIS, RogueString* key_0 )
{
  RogueClassString_PropertyTableEntry* entry_1 = (((RogueString_PropertyTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueClassProperty*)(entry_1->value);
  }
  else
  {
    RogueClassProperty* default_value_2 = 0;
    return (RogueClassProperty*)(default_value_2);
  }
}

void RogueString_PropertyTable__set__String_Property( RogueClassString_PropertyTable* THIS, RogueString* key_0, RogueClassProperty* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_PropertyTableEntry* entry_4 = (((RogueClassString_PropertyTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_PropertyTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_PropertyTableEntry*)((RogueString_PropertyTableEntry__init__String_Property_Integer( ((RogueClassString_PropertyTableEntry*)ROGUE_CREATE_OBJECT(String_PropertyTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_PropertyTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_PropertyTable__print_to__StringBuilder( RogueClassString_PropertyTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_PropertyTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_PropertyTable* RogueString_PropertyTable__init_object( RogueClassString_PropertyTable* THIS )
{
  return (RogueClassString_PropertyTable*)(THIS);
}

RogueString* RogueCmdLiteralNull__type_name( RogueClassCmdLiteralNull* THIS )
{
  return (RogueString*)(Rogue_literal_strings[856]);
}

RogueClassCmd* RogueCmdLiteralNull__cast_to__Type( RogueClassCmdLiteralNull* THIS, RogueClassType* target_type_0 )
{
  if (target_type_0->is_optional)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateOptionalValue__init__Token_Type_Cmd( ((RogueClassCmdCreateOptionalValue*)ROGUE_CREATE_OBJECT(CmdCreateOptionalValue)), THIS->t, target_type_0, ((RogueClassCmd*)(NULL)) ))))));
  }
  else
  {
    return (RogueClassCmd*)((RogueCmd__cast_to__Type( ((RogueClassCmd*)THIS), target_type_0 )));
  }
}

RogueClassCmd* RogueCmdLiteralNull__clone__CloneArgs( RogueClassCmdLiteralNull* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralNull__init__Token( ((RogueClassCmdLiteralNull*)ROGUE_CREATE_OBJECT(CmdLiteralNull)), THIS->t ))))));
}

RogueClassCmdLiteralNull* RogueCmdLiteralNull__resolve__Scope( RogueClassCmdLiteralNull* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmdLiteralNull*)(THIS);
}

RogueClassType* Rogue_CmdLiteralNull__type( RogueClassCmdLiteralNull* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_null);
}

void RogueCmdLiteralNull__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralNull* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[785] );
}

RogueClassCmdLiteralNull* RogueCmdLiteralNull__init_object( RogueClassCmdLiteralNull* THIS )
{
  return (RogueClassCmdLiteralNull*)(THIS);
}

RogueClassCmdLiteralNull* RogueCmdLiteralNull__init__Token( RogueClassCmdLiteralNull* THIS, RogueClassToken* _auto_396_0 )
{
  THIS->t = _auto_396_0;
  return (RogueClassCmdLiteralNull*)(THIS);
}

RogueString* RogueCmdCreateCompound__type_name( RogueClassCmdCreateCompound* THIS )
{
  return (RogueString*)(Rogue_literal_strings[653]);
}

RogueClassCmd* RogueCmdCreateCompound__clone__CloneArgs( RogueClassCmdCreateCompound* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateCompound__init__Token_Type_CmdArgs( ((RogueClassCmdCreateCompound*)ROGUE_CREATE_OBJECT(CmdCreateCompound)), THIS->t, THIS->_of_type, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdCreateCompound__resolve__Scope( RogueClassCmdCreateCompound* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->_of_type );
  if (THIS->args == NULL)
  {
    THIS->args = ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) )));
  }
  while (THIS->args->count < THIS->_of_type->property_list->count)
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->args), ((RogueType__create_default_value__Token( ((RogueClassProperty*)(THIS->_of_type->property_list->data->objects[THIS->args->count]))->_type, THIS->t ))) );
  }
  RogueCmdArgs__resolve__Scope( THIS->args, scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdCreateCompound__trace_used_code( RogueClassCmdCreateCompound* THIS )
{
  RogueType__trace_used_code( THIS->_of_type );
  {
    RogueClassCmdArgs* _auto_976_0 = (THIS->args);
    RogueInteger _auto_977_1 = (0);
    for (;_auto_977_1 < _auto_976_0->count;++_auto_977_1)
    {
      RogueClassCmd* arg_2 = (((RogueClassCmd*)(_auto_976_0->data->objects[_auto_977_1])));
      call_ROGUEM48( 26, (RogueClassCmd*)(arg_2) );
    }
  }
}

RogueClassType* Rogue_CmdCreateCompound__type( RogueClassCmdCreateCompound* THIS )
{
  return (RogueClassType*)(THIS->_of_type);
}

void RogueCmdCreateCompound__write_cpp__CPPWriter_Logical( RogueClassCmdCreateCompound* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, THIS->_of_type ))), Rogue_literal_strings[176] );
  if (!!(THIS->args->count))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[255] );
    RogueLogical first_2 = (true);
    {
      RogueClassCmdArgs* _auto_978_3 = (THIS->args);
      RogueInteger _auto_979_4 = (0);
      for (;_auto_979_4 < _auto_978_3->count;++_auto_979_4)
      {
        RogueClassCmd* arg_5 = (((RogueClassCmd*)(_auto_978_3->data->objects[_auto_979_4])));
        if (first_2)
        {
          first_2 = ((RogueLogical)false);
        }
        else
        {
          RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[405] );
        }
        call_ROGUEM52( 28, (RogueClassCmd*)(arg_5), writer_0, false );
      }
    }
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[255] );
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] );
}

RogueClassCmdCreateCompound* RogueCmdCreateCompound__init_object( RogueClassCmdCreateCompound* THIS )
{
  return (RogueClassCmdCreateCompound*)(THIS);
}

RogueClassCmdCreateCompound* RogueCmdCreateCompound__init__Token_Type_CmdArgs( RogueClassCmdCreateCompound* THIS, RogueClassToken* _auto_397_0, RogueClassType* _auto_398_1, RogueClassCmdArgs* _auto_399_2 )
{
  THIS->args = _auto_399_2;
  THIS->_of_type = _auto_398_1;
  THIS->t = _auto_397_0;
  return (RogueClassCmdCreateCompound*)(THIS);
}

RogueString* RogueCmdLiteralLogical__type_name( RogueClassCmdLiteralLogical* THIS )
{
  return (RogueString*)(Rogue_literal_strings[857]);
}

RogueClassCmd* RogueCmdLiteralLogical__clone__CloneArgs( RogueClassCmdLiteralLogical* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, THIS->value ))))));
}

RogueClassCmd* RogueCmdLiteralLogical__resolve__Scope( RogueClassCmdLiteralLogical* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralLogical__type( RogueClassCmdLiteralLogical* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

void RogueCmdLiteralLogical__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralLogical* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (THIS->value)
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[146] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[137] );
  }
}

RogueClassCmdLiteralLogical* RogueCmdLiteralLogical__init_object( RogueClassCmdLiteralLogical* THIS )
{
  return (RogueClassCmdLiteralLogical*)(THIS);
}

RogueClassCmdLiteralLogical* RogueCmdLiteralLogical__init__Token_Logical( RogueClassCmdLiteralLogical* THIS, RogueClassToken* _auto_400_0, RogueLogical _auto_401_1 )
{
  THIS->value = _auto_401_1;
  THIS->t = _auto_400_0;
  return (RogueClassCmdLiteralLogical*)(THIS);
}

RogueString* RogueCmdLiteralString__type_name( RogueClassCmdLiteralString* THIS )
{
  return (RogueString*)(Rogue_literal_strings[858]);
}

RogueClassCmd* RogueCmdLiteralString__clone__CloneArgs( RogueClassCmdLiteralString* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Integer( ((RogueClassCmdLiteralString*)ROGUE_CREATE_OBJECT(CmdLiteralString)), THIS->t, THIS->value, THIS->index ))))));
}

RogueClassCmd* RogueCmdLiteralString__resolve__Scope( RogueClassCmdLiteralString* THIS, RogueClassScope* scope_0 )
{
  RogueType__resolve( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdLiteralString__trace_used_code( RogueClassCmdLiteralString* THIS )
{
  if (!!(THIS->value))
  {
    if (!(((RogueString_IntegerTable__contains__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_lookup, THIS->value )))))
    {
      THIS->index = ((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_list->count;
      RogueString_IntegerTable__set__String_Integer( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_lookup, THIS->value, THIS->index );
      RogueStringList__add__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_list, THIS->value );
    }
    else
    {
      THIS->index = ((RogueString_IntegerTable__get__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->literal_string_lookup, THIS->value )));
    }
  }
}

RogueClassType* Rogue_CmdLiteralString__type( RogueClassCmdLiteralString* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String);
}

void RogueCmdLiteralString__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralString* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!!(THIS->value))
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Integer( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[520] ))), THIS->index ))), Rogue_literal_strings[98] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[406] );
  }
}

RogueClassCmdLiteralString* RogueCmdLiteralString__init_object( RogueClassCmdLiteralString* THIS )
{
  return (RogueClassCmdLiteralString*)(THIS);
}

RogueClassCmdLiteralString* RogueCmdLiteralString__init__Token_String_Integer( RogueClassCmdLiteralString* THIS, RogueClassToken* _auto_412_0, RogueString* _auto_413_1, RogueInteger _auto_414_2 )
{
  THIS->index = _auto_414_2;
  THIS->value = _auto_413_1;
  THIS->t = _auto_412_0;
  return (RogueClassCmdLiteralString*)(THIS);
}

RogueString* RogueCmdWriteGlobal__type_name( RogueClassCmdWriteGlobal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[654]);
}

RogueClassCmd* RogueCmdWriteGlobal__clone__CloneArgs( RogueClassCmdWriteGlobal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdWriteGlobal__init__Token_Property_Cmd( ((RogueClassCmdWriteGlobal*)ROGUE_CREATE_OBJECT(CmdWriteGlobal)), THIS->t, THIS->global_info, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdWriteGlobal__resolve__Scope( RogueClassCmdWriteGlobal* THIS, RogueClassScope* scope_0 )
{
  THIS->new_value = (call_ROGUEM42( 22, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)((call_ROGUEM42( 22, (RogueClassCmd*)(THIS->new_value), scope_0 ))), THIS->global_info->_type ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdWriteGlobal__trace_used_code( RogueClassCmdWriteGlobal* THIS )
{
  RogueType__trace_used_code( THIS->global_info->type_context );
  RogueType__trace_used_code( THIS->global_info->_type );
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->new_value) );
}

RogueClassType* Rogue_CmdWriteGlobal__type( RogueClassCmdWriteGlobal* THIS )
{
  return (RogueClassType*)(THIS->global_info->_type);
}

void RogueCmdWriteGlobal__write_cpp__CPPWriter_Logical( RogueClassCmdWriteGlobal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[16] ))), THIS->global_info->type_context->cpp_name ))), Rogue_literal_strings[354] );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, THIS->global_info->cpp_name ))), Rogue_literal_strings[455] );
  if (THIS->global_info->_type == (call_ROGUEM46( 27, (RogueClassCmd*)(THIS->new_value) )))
  {
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->new_value), writer_0, false );
  }
  else
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[451] ))), THIS->global_info->_type ))), Rogue_literal_strings[100] );
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->new_value), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] );
  }
}

RogueClassCmdWriteGlobal* RogueCmdWriteGlobal__init_object( RogueClassCmdWriteGlobal* THIS )
{
  return (RogueClassCmdWriteGlobal*)(THIS);
}

RogueClassCmdWriteGlobal* RogueCmdWriteGlobal__init__Token_Property_Cmd( RogueClassCmdWriteGlobal* THIS, RogueClassToken* _auto_423_0, RogueClassProperty* _auto_424_1, RogueClassCmd* _auto_425_2 )
{
  THIS->new_value = _auto_425_2;
  THIS->global_info = _auto_424_1;
  THIS->t = _auto_423_0;
  return (RogueClassCmdWriteGlobal*)(THIS);
}

RogueString* RogueCmdWriteProperty__type_name( RogueClassCmdWriteProperty* THIS )
{
  return (RogueString*)(Rogue_literal_strings[655]);
}

RogueClassCmd* RogueCmdWriteProperty__clone__CloneArgs( RogueClassCmdWriteProperty* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->context), clone_args_0 )), THIS->property_info, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdWriteProperty__resolve__Scope( RogueClassCmdWriteProperty* THIS, RogueClassScope* scope_0 )
{
  THIS->context = ((RogueCmd__require_value( (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->context), scope_0 )) )));
  THIS->new_value = (call_ROGUEM42( 22, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(((RogueCmd__require_value( (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->new_value), scope_0 )) )))), THIS->property_info->_type ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdWriteProperty__trace_used_code( RogueClassCmdWriteProperty* THIS )
{
  if (!!(THIS->context))
  {
    call_ROGUEM48( 26, (RogueClassCmd*)(THIS->context) );
  }
  RogueType__trace_used_code( THIS->property_info->type_context );
  RogueType__trace_used_code( THIS->property_info->_type );
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->new_value) );
}

RogueClassType* Rogue_CmdWriteProperty__type( RogueClassCmdWriteProperty* THIS )
{
  return (RogueClassType*)(THIS->property_info->_type);
}

void RogueCmdWriteProperty__write_cpp__CPPWriter_Logical( RogueClassCmdWriteProperty* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->context), writer_0, false );
  RogueCPPWriter__print_access_operator__Type( writer_0, (call_ROGUEM46( 27, (RogueClassCmd*)(THIS->context) )) );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, THIS->property_info->cpp_name ))), Rogue_literal_strings[455] );
  if (THIS->property_info->_type == (call_ROGUEM46( 27, (RogueClassCmd*)(THIS->new_value) )))
  {
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->new_value), writer_0, false );
  }
  else
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[451] ))), THIS->property_info->_type ))), Rogue_literal_strings[100] );
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->new_value), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] );
  }
}

RogueClassCmdWriteProperty* RogueCmdWriteProperty__init_object( RogueClassCmdWriteProperty* THIS )
{
  return (RogueClassCmdWriteProperty*)(THIS);
}

RogueClassCmdWriteProperty* RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( RogueClassCmdWriteProperty* THIS, RogueClassToken* _auto_426_0, RogueClassCmd* _auto_427_1, RogueClassProperty* _auto_428_2, RogueClassCmd* _auto_429_3 )
{
  THIS->new_value = _auto_429_3;
  THIS->property_info = _auto_428_2;
  THIS->context = _auto_427_1;
  THIS->t = _auto_426_0;
  return (RogueClassCmdWriteProperty*)(THIS);
}

RogueString* RogueString_TypeTableEntryList__to_String( RogueTableEntry_of_String_TypeList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_TypeList* _auto_980_2 = (THIS);
    RogueInteger _auto_981_3 = (0);
    for (;_auto_981_3 < _auto_980_2->count;++_auto_981_3)
    {
      RogueClassString_TypeTableEntry* value_4 = (((RogueClassString_TypeTableEntry*)(_auto_980_2->data->objects[_auto_981_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_TypeTableEntryList__type_name( RogueTableEntry_of_String_TypeList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[940]);
}

RogueTableEntry_of_String_TypeList* RogueString_TypeTableEntryList__init_object( RogueTableEntry_of_String_TypeList* THIS )
{
  return (RogueTableEntry_of_String_TypeList*)(THIS);
}

RogueTableEntry_of_String_TypeList* RogueString_TypeTableEntryList__init__Integer_String_TypeTableEntry( RogueTableEntry_of_String_TypeList* THIS, RogueInteger initial_capacity_0, RogueClassString_TypeTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_TypeTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_518_3 = (initial_capacity_0);
    for (;i_2 <= _auto_518_3;++i_2)
    {
      RogueString_TypeTableEntryList__add__String_TypeTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_TypeList*)(THIS);
}

RogueTableEntry_of_String_TypeList* RogueString_TypeTableEntryList__add__String_TypeTableEntry( RogueTableEntry_of_String_TypeList* THIS, RogueClassString_TypeTableEntry* value_0 )
{
  ((RogueString_TypeTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_TypeList*)(THIS);
}

RogueInteger RogueString_TypeTableEntryList__capacity( RogueTableEntry_of_String_TypeList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_TypeList* RogueString_TypeTableEntryList__reserve__Integer( RogueTableEntry_of_String_TypeList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_TypeTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_TypeTableEntryList__capacity( THIS ))) + ((RogueString_TypeTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_TypeTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_TypeList*)(THIS);
}

RogueString* RogueString_TypeTableEntry__type_name( RogueClassString_TypeTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[577]);
}

RogueClassString_TypeTableEntry* RogueString_TypeTableEntry__init__String_Type_Integer( RogueClassString_TypeTableEntry* THIS, RogueString* _key_0, RogueClassType* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_TypeTableEntry*)(THIS);
}

RogueClassString_TypeTableEntry* RogueString_TypeTableEntry__init_object( RogueClassString_TypeTableEntry* THIS )
{
  return (RogueClassString_TypeTableEntry*)(THIS);
}

RogueString* RogueString_TypeTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[615]);
}

RogueString* RogueString_IntegerTableEntryList__to_String( RogueTableEntry_of_String_IntegerList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_IntegerList* _auto_990_2 = (THIS);
    RogueInteger _auto_991_3 = (0);
    for (;_auto_991_3 < _auto_990_2->count;++_auto_991_3)
    {
      RogueClassString_IntegerTableEntry* value_4 = (((RogueClassString_IntegerTableEntry*)(_auto_990_2->data->objects[_auto_991_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_IntegerTableEntryList__type_name( RogueTableEntry_of_String_IntegerList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[941]);
}

RogueTableEntry_of_String_IntegerList* RogueString_IntegerTableEntryList__init_object( RogueTableEntry_of_String_IntegerList* THIS )
{
  return (RogueTableEntry_of_String_IntegerList*)(THIS);
}

RogueTableEntry_of_String_IntegerList* RogueString_IntegerTableEntryList__init__Integer_String_IntegerTableEntry( RogueTableEntry_of_String_IntegerList* THIS, RogueInteger initial_capacity_0, RogueClassString_IntegerTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_IntegerTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_522_3 = (initial_capacity_0);
    for (;i_2 <= _auto_522_3;++i_2)
    {
      RogueString_IntegerTableEntryList__add__String_IntegerTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_IntegerList*)(THIS);
}

RogueTableEntry_of_String_IntegerList* RogueString_IntegerTableEntryList__add__String_IntegerTableEntry( RogueTableEntry_of_String_IntegerList* THIS, RogueClassString_IntegerTableEntry* value_0 )
{
  ((RogueString_IntegerTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_IntegerList*)(THIS);
}

RogueInteger RogueString_IntegerTableEntryList__capacity( RogueTableEntry_of_String_IntegerList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_IntegerList* RogueString_IntegerTableEntryList__reserve__Integer( RogueTableEntry_of_String_IntegerList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_IntegerTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_IntegerTableEntryList__capacity( THIS ))) + ((RogueString_IntegerTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_IntegerTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_IntegerList*)(THIS);
}

RogueString* RogueString_IntegerTableEntry__type_name( RogueClassString_IntegerTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[578]);
}

RogueClassString_IntegerTableEntry* RogueString_IntegerTableEntry__init__String_Integer_Integer( RogueClassString_IntegerTableEntry* THIS, RogueString* _key_0, RogueInteger _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_IntegerTableEntry*)(THIS);
}

RogueClassString_IntegerTableEntry* RogueString_IntegerTableEntry__init_object( RogueClassString_IntegerTableEntry* THIS )
{
  return (RogueClassString_IntegerTableEntry*)(THIS);
}

RogueString* RogueString_IntegerTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[616]);
}

RogueString* RogueCmdCastToType__type_name( RogueClassCmdCastToType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[888]);
}

RogueClassCmd* RogueCmdCastToType__clone__CloneArgs( RogueClassCmdCastToType* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdCastToType*)ROGUE_CREATE_OBJECT(CmdCastToType))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->operand), clone_args_0 )), THIS->_target_type ))))));
}

RogueClassCmd* RogueCmdCastToType__resolve__Scope( RogueClassCmdCastToType* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->operand), scope_0 ));
  RogueType__organize( THIS->_target_type );
  if (((Rogue_Cmd__require_type( THIS->operand ))) == THIS->_target_type)
  {
    return (RogueClassCmd*)(THIS->operand);
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdCastToType__write_cpp__CPPWriter_Logical( RogueClassCmdCastToType* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[451] ))), THIS->_target_type ))), Rogue_literal_strings[775] );
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->operand), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[786] );
}

RogueClassCmdCastToType* RogueCmdCastToType__init_object( RogueClassCmdCastToType* THIS )
{
  return (RogueClassCmdCastToType*)(THIS);
}

RogueString* RogueCmdTypeOperator__type_name( RogueClassCmdTypeOperator* THIS )
{
  return (RogueString*)(Rogue_literal_strings[656]);
}

void RogueCmdTypeOperator__trace_used_code( RogueClassCmdTypeOperator* THIS )
{
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->operand) );
  RogueType__trace_used_code( THIS->_target_type );
}

RogueClassType* Rogue_CmdTypeOperator__type( RogueClassCmdTypeOperator* THIS )
{
  return (RogueClassType*)(THIS->_target_type);
}

RogueClassCmdTypeOperator* RogueCmdTypeOperator__init_object( RogueClassCmdTypeOperator* THIS )
{
  return (RogueClassCmdTypeOperator*)(THIS);
}

RogueClassCmdTypeOperator* RogueCmdTypeOperator__init__Token_Cmd_Type( RogueClassCmdTypeOperator* THIS, RogueClassToken* _auto_530_0, RogueClassCmd* _auto_531_1, RogueClassType* _auto_532_2 )
{
  THIS->_target_type = _auto_532_2;
  THIS->operand = _auto_531_1;
  THIS->t = _auto_530_0;
  return (RogueClassCmdTypeOperator*)(THIS);
}

RogueString* RogueCmdLogicalize__type_name( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_literal_strings[892]);
}

RogueClassCmd* RogueCmdLogicalize__clone__CloneArgs( RogueClassCmdLogicalize* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalize*)ROGUE_CREATE_OBJECT(CmdLogicalize))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->operand), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdLogicalize__resolve__Scope( RogueClassCmdLogicalize* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->operand), scope_0 ));
  if (((Rogue_Cmd__require_type( THIS->operand )))->is_optional)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLogicalizeOptionalValue__init__Token_Cmd_Logical( ((RogueClassCmdLogicalizeOptionalValue*)ROGUE_CREATE_OBJECT(CmdLogicalizeOptionalValue)), THIS->t, THIS->operand, true ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassType* Rogue_CmdLogicalize__type( RogueClassCmdLogicalize* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

RogueClassCmdLogicalize* RogueCmdLogicalize__init_object( RogueClassCmdLogicalize* THIS )
{
  return (RogueClassCmdLogicalize*)(THIS);
}

RogueString* RogueCmdLogicalize__prefix_symbol( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_literal_strings[0]);
}

RogueClassCmd* RogueCmdLogicalize__resolve_for_literal_operand__Scope( RogueClassCmdLogicalize* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = ((RogueCmd__require_value( (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->operand), scope_0 )) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdLogicalize__suffix_symbol( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_literal_strings[183]);
}

RogueString* RogueCmdLogicalize__cpp_prefix_symbol( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_literal_strings[812]);
}

RogueString* RogueCmdLogicalize__cpp_suffix_symbol( RogueClassCmdLogicalize* THIS )
{
  return (RogueString*)(Rogue_literal_strings[0]);
}

RogueString* RogueCmdUnary__type_name( RogueClassCmdUnary* THIS )
{
  return (RogueString*)(Rogue_literal_strings[657]);
}

RogueClassCmd* RogueCmdUnary__resolve__Scope( RogueClassCmdUnary* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = ((RogueCmd__require_value( (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->operand), scope_0 )) )));
  if ((call_ROGUEM47( 15, (RogueClassCmd*)(THIS->operand) )))
  {
    return (RogueClassCmd*)((call_ROGUEM299( 32, (RogueClassCmdUnary*)(THIS), scope_0 )));
  }
  else
  {
    return (RogueClassCmd*)(((RogueCmdUnary__resolve_for_operand_type__Scope_Type( THIS, scope_0, ((Rogue_Cmd__require_type( THIS->operand ))) ))));
  }
}

void RogueCmdUnary__trace_used_code( RogueClassCmdUnary* THIS )
{
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->operand) );
}

RogueClassType* Rogue_CmdUnary__type( RogueClassCmdUnary* THIS )
{
  return (RogueClassType*)((call_ROGUEM46( 27, (RogueClassCmd*)(THIS->operand) )));
}

void RogueCmdUnary__write_cpp__CPPWriter_Logical( RogueClassCmdUnary* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, (call_ROGUEM298( 35, (RogueClassCmdUnary*)(THIS) )) ))), Rogue_literal_strings[176] );
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->operand), writer_0, false );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] ))), (call_ROGUEM298( 36, (RogueClassCmdUnary*)(THIS) )) );
}

RogueClassCmdUnary* RogueCmdUnary__init_object( RogueClassCmdUnary* THIS )
{
  return (RogueClassCmdUnary*)(THIS);
}

RogueClassCmdUnary* RogueCmdUnary__init__Token_Cmd( RogueClassCmdUnary* THIS, RogueClassToken* _auto_533_0, RogueClassCmd* _auto_534_1 )
{
  THIS->operand = _auto_534_1;
  THIS->t = _auto_533_0;
  return (RogueClassCmdUnary*)(THIS);
}

RogueString* RogueCmdUnary__prefix_symbol( RogueClassCmdUnary* THIS )
{
  return (RogueString*)(Rogue_literal_strings[0]);
}

RogueClassCmd* RogueCmdUnary__resolve_for_literal_operand__Scope( RogueClassCmdUnary* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdUnary__resolve_for_operand_type__Scope_Type( RogueClassCmdUnary* THIS, RogueClassScope* scope_0, RogueClassType* operand_type_1 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdUnary__suffix_symbol( RogueClassCmdUnary* THIS )
{
  return (RogueString*)(Rogue_literal_strings[0]);
}

RogueString* RogueCmdUnary__cpp_prefix_symbol( RogueClassCmdUnary* THIS )
{
  return (RogueString*)((call_ROGUEM298( 31, (RogueClassCmdUnary*)(THIS) )));
}

RogueString* RogueCmdUnary__cpp_suffix_symbol( RogueClassCmdUnary* THIS )
{
  return (RogueString*)((call_ROGUEM298( 34, (RogueClassCmdUnary*)(THIS) )));
}

RogueString* RogueCmdCreateOptionalValue__type_name( RogueClassCmdCreateOptionalValue* THIS )
{
  return (RogueString*)(Rogue_literal_strings[658]);
}

RogueClassCmd* RogueCmdCreateOptionalValue__clone__CloneArgs( RogueClassCmdCreateOptionalValue* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateOptionalValue__init__Token_Type_Cmd( ((RogueClassCmdCreateOptionalValue*)ROGUE_CREATE_OBJECT(CmdCreateOptionalValue)), THIS->t, THIS->_of_type, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->value, clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdCreateOptionalValue__resolve__Scope( RogueClassCmdCreateOptionalValue* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->_of_type );
  if (!!(THIS->value))
  {
    THIS->value = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->value), scope_0 ));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdCreateOptionalValue__trace_used_code( RogueClassCmdCreateOptionalValue* THIS )
{
  RogueType__trace_used_code( THIS->_of_type );
  if (!!(THIS->value))
  {
    call_ROGUEM48( 26, (RogueClassCmd*)(THIS->value) );
  }
}

RogueClassType* Rogue_CmdCreateOptionalValue__type( RogueClassCmdCreateOptionalValue* THIS )
{
  return (RogueClassType*)(THIS->_of_type);
}

void RogueCmdCreateOptionalValue__write_cpp__CPPWriter_Logical( RogueClassCmdCreateOptionalValue* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (((RogueType__is_reference( THIS->_of_type->_element_type ))))
  {
    if (!!(THIS->value))
    {
      call_ROGUEM52( 28, (RogueClassCmd*)(THIS->value), writer_0, false );
    }
    else
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[785] );
    }
  }
  else
  {
    RogueCPPWriter__print__Type( writer_0, THIS->_of_type );
    if (!!(THIS->value))
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[408] );
      call_ROGUEM52( 28, (RogueClassCmd*)(THIS->value), writer_0, false );
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[448] );
    }
    else
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[254] );
    }
  }
}

RogueClassCmdCreateOptionalValue* RogueCmdCreateOptionalValue__init_object( RogueClassCmdCreateOptionalValue* THIS )
{
  return (RogueClassCmdCreateOptionalValue*)(THIS);
}

RogueClassCmdCreateOptionalValue* RogueCmdCreateOptionalValue__init__Token_Type_Cmd( RogueClassCmdCreateOptionalValue* THIS, RogueClassToken* _auto_535_0, RogueClassType* _auto_536_1, RogueClassCmd* _auto_537_2 )
{
  THIS->value = _auto_537_2;
  THIS->_of_type = _auto_536_1;
  THIS->t = _auto_535_0;
  return (RogueClassCmdCreateOptionalValue*)(THIS);
}

RogueString* RogueString_MethodTableEntryList__to_String( RogueTableEntry_of_String_MethodList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_MethodList* _auto_1000_2 = (THIS);
    RogueInteger _auto_1001_3 = (0);
    for (;_auto_1001_3 < _auto_1000_2->count;++_auto_1001_3)
    {
      RogueClassString_MethodTableEntry* value_4 = (((RogueClassString_MethodTableEntry*)(_auto_1000_2->data->objects[_auto_1001_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_MethodTableEntryList__type_name( RogueTableEntry_of_String_MethodList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[942]);
}

RogueTableEntry_of_String_MethodList* RogueString_MethodTableEntryList__init_object( RogueTableEntry_of_String_MethodList* THIS )
{
  return (RogueTableEntry_of_String_MethodList*)(THIS);
}

RogueTableEntry_of_String_MethodList* RogueString_MethodTableEntryList__init__Integer_String_MethodTableEntry( RogueTableEntry_of_String_MethodList* THIS, RogueInteger initial_capacity_0, RogueClassString_MethodTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_MethodTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_581_3 = (initial_capacity_0);
    for (;i_2 <= _auto_581_3;++i_2)
    {
      RogueString_MethodTableEntryList__add__String_MethodTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_MethodList*)(THIS);
}

RogueTableEntry_of_String_MethodList* RogueString_MethodTableEntryList__add__String_MethodTableEntry( RogueTableEntry_of_String_MethodList* THIS, RogueClassString_MethodTableEntry* value_0 )
{
  ((RogueString_MethodTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_MethodList*)(THIS);
}

RogueInteger RogueString_MethodTableEntryList__capacity( RogueTableEntry_of_String_MethodList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_MethodList* RogueString_MethodTableEntryList__reserve__Integer( RogueTableEntry_of_String_MethodList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_MethodTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_MethodTableEntryList__capacity( THIS ))) + ((RogueString_MethodTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_MethodTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_MethodList*)(THIS);
}

RogueString* RogueString_MethodTableEntry__type_name( RogueClassString_MethodTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[579]);
}

RogueClassString_MethodTableEntry* RogueString_MethodTableEntry__init__String_Method_Integer( RogueClassString_MethodTableEntry* THIS, RogueString* _key_0, RogueClassMethod* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_MethodTableEntry*)(THIS);
}

RogueClassString_MethodTableEntry* RogueString_MethodTableEntry__init_object( RogueClassString_MethodTableEntry* THIS )
{
  return (RogueClassString_MethodTableEntry*)(THIS);
}

RogueString* RogueString_MethodTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[617]);
}

RogueString* RogueString_LogicalTableEntryList__to_String( RogueTableEntry_of_String_LogicalList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_LogicalList* _auto_1010_2 = (THIS);
    RogueInteger _auto_1011_3 = (0);
    for (;_auto_1011_3 < _auto_1010_2->count;++_auto_1011_3)
    {
      RogueClassString_LogicalTableEntry* value_4 = (((RogueClassString_LogicalTableEntry*)(_auto_1010_2->data->objects[_auto_1011_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_LogicalTableEntryList__type_name( RogueTableEntry_of_String_LogicalList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[943]);
}

RogueTableEntry_of_String_LogicalList* RogueString_LogicalTableEntryList__init_object( RogueTableEntry_of_String_LogicalList* THIS )
{
  return (RogueTableEntry_of_String_LogicalList*)(THIS);
}

RogueTableEntry_of_String_LogicalList* RogueString_LogicalTableEntryList__init__Integer_String_LogicalTableEntry( RogueTableEntry_of_String_LogicalList* THIS, RogueInteger initial_capacity_0, RogueClassString_LogicalTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_LogicalTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_615_3 = (initial_capacity_0);
    for (;i_2 <= _auto_615_3;++i_2)
    {
      RogueString_LogicalTableEntryList__add__String_LogicalTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_LogicalList*)(THIS);
}

RogueTableEntry_of_String_LogicalList* RogueString_LogicalTableEntryList__add__String_LogicalTableEntry( RogueTableEntry_of_String_LogicalList* THIS, RogueClassString_LogicalTableEntry* value_0 )
{
  ((RogueString_LogicalTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_LogicalList*)(THIS);
}

RogueInteger RogueString_LogicalTableEntryList__capacity( RogueTableEntry_of_String_LogicalList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_LogicalList* RogueString_LogicalTableEntryList__reserve__Integer( RogueTableEntry_of_String_LogicalList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_LogicalTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_LogicalTableEntryList__capacity( THIS ))) + ((RogueString_LogicalTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_LogicalTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_LogicalList*)(THIS);
}

RogueString* RogueString_LogicalTableEntry__type_name( RogueClassString_LogicalTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[580]);
}

RogueClassString_LogicalTableEntry* RogueString_LogicalTableEntry__init__String_Logical_Integer( RogueClassString_LogicalTableEntry* THIS, RogueString* _key_0, RogueLogical _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_LogicalTableEntry*)(THIS);
}

RogueClassString_LogicalTableEntry* RogueString_LogicalTableEntry__init_object( RogueClassString_LogicalTableEntry* THIS )
{
  return (RogueClassString_LogicalTableEntry*)(THIS);
}

RogueString* RogueString_LogicalTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[618]);
}

RogueString* RogueFileReader__type_name( RogueClassFileReader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[581]);
}

RogueLogical RogueFileReader__has_another( RogueClassFileReader* THIS )
{
  return (RogueLogical)(THIS->position < THIS->count);
}

RogueCharacter RogueFileReader__peek( RogueClassFileReader* THIS )
{
  if (THIS->position == THIS->count)
  {
    return (RogueCharacter)(((RogueCharacter)(0)));
  }
  if (THIS->buffer_position == THIS->buffer->count)
  {
    THIS->buffer->count = (RogueInteger) fread( THIS->buffer->data->bytes, 1, 1024, THIS->fp );
    THIS->buffer_position = 0;
  }
  return (RogueCharacter)(((RogueCharacter)(THIS->buffer->data->bytes[THIS->buffer_position])));
}

RogueCharacter RogueFileReader__read( RogueClassFileReader* THIS )
{
  if (THIS->position == THIS->count)
  {
    return (RogueCharacter)(((RogueCharacter)(0)));
  }
  RogueCharacter result_0 = (((RogueFileReader__peek( THIS ))));
  ++THIS->position;
  ++THIS->buffer_position;
  if (THIS->position == THIS->count)
  {
    RogueFileReader__close( THIS );
  }
  return (RogueCharacter)(result_0);
}

RogueClassFileReader* RogueFileReader__init__String( RogueClassFileReader* THIS, RogueString* _filepath_0 )
{
  RogueFileReader__open__String( THIS, _filepath_0 );
  return (RogueClassFileReader*)(THIS);
}

RogueClassFileReader* RogueFileReader__close( RogueClassFileReader* THIS )
{
  if (!!(THIS->fp))
  {
    fclose( THIS->fp );
    THIS->fp = 0;
  }
  RogueFileReader__set_position__Integer( THIS, 0 );
  THIS->count = 0;
  return (RogueClassFileReader*)(THIS);
}

RogueLogical RogueFileReader__open__String( RogueClassFileReader* THIS, RogueString* _auto_619_0 )
{
  THIS->filepath = _auto_619_0;
  RogueFileReader__close( THIS );
  char path[ PATH_MAX ];
  THIS->filepath->to_c_string( path, PATH_MAX );

  THIS->fp = fopen( path, "rb" );
  if (THIS->fp)
  {
    fseek( THIS->fp, 0, SEEK_END );
    THIS->count = (RogueInteger) ftell( THIS->fp );
    fseek( THIS->fp, 0, SEEK_SET );
  }
  if (THIS->count == 0)
  {
    RogueFileReader__close( THIS );
  }
  return (RogueLogical)(THIS->position < THIS->count);
}

RogueClassFileReader* RogueFileReader__set_position__Integer( RogueClassFileReader* THIS, RogueInteger _auto_620_0 )
{
  THIS->position = _auto_620_0;
  if (!!(THIS->fp))
  {
    fseek( THIS->fp, THIS->position, SEEK_SET );
  }
  THIS->buffer_position = 0;
  RogueByteList__clear( THIS->buffer );
  return (RogueClassFileReader*)(THIS);
}

RogueClassFileReader* RogueFileReader__init_object( RogueClassFileReader* THIS )
{
  THIS->buffer = ((RogueByteList__init__Integer( ((RogueByteList*)ROGUE_CREATE_OBJECT(ByteList)), 1024 )));
  return (RogueClassFileReader*)(THIS);
}

RogueString* RogueFileWriter__type_name( RogueClassFileWriter* THIS )
{
  return (RogueString*)(Rogue_literal_strings[582]);
}

RogueClassFileWriter* RogueFileWriter__init__String( RogueClassFileWriter* THIS, RogueString* _filepath_0 )
{
  RogueFileWriter__open__String( THIS, _filepath_0 );
  return (RogueClassFileWriter*)(THIS);
}

RogueClassFileWriter* RogueFileWriter__close( RogueClassFileWriter* THIS )
{
  RogueFileWriter__flush( THIS );
  if (!!(THIS->fp))
  {
    fclose( THIS->fp ); THIS->fp = 0;
  }
  return (RogueClassFileWriter*)(THIS);
}

RogueClassFileWriter* RogueFileWriter__flush( RogueClassFileWriter* THIS )
{
  if ((THIS->buffer->count == 0 || !(!!(THIS->fp))))
  {
    return (RogueClassFileWriter*)(THIS);
  }
  fwrite( THIS->buffer->data->bytes, 1, THIS->buffer->count, THIS->fp );
  RogueByteList__clear( THIS->buffer );
  return (RogueClassFileWriter*)(THIS);
}

RogueLogical RogueFileWriter__open__String( RogueClassFileWriter* THIS, RogueString* _auto_621_0 )
{
  THIS->filepath = _auto_621_0;
  RogueFileWriter__close( THIS );
  char path[ PATH_MAX ];
  THIS->filepath->to_c_string( path, PATH_MAX );
  THIS->fp = fopen( path, "wb" );

  return !!THIS->fp;
}

RogueClassFileWriter* RogueFileWriter__write__Character( RogueClassFileWriter* THIS, RogueCharacter ch_0 )
{
  if (!(!!(THIS->fp)))
  {
    return (RogueClassFileWriter*)(THIS);
  }
  RogueByteList__add__Byte( THIS->buffer, ((RogueByte)(ch_0)) );
  if (THIS->buffer->count == 1024)
  {
    return (RogueClassFileWriter*)(((RogueFileWriter__flush( THIS ))));
  }
  return (RogueClassFileWriter*)(THIS);
}

RogueClassFileWriter* RogueFileWriter__init_object( RogueClassFileWriter* THIS )
{
  THIS->buffer = ((RogueByteList__init__Integer( ((RogueByteList*)ROGUE_CREATE_OBJECT(ByteList)), 1024 )));
  return (RogueClassFileWriter*)(THIS);
}

RogueString* RogueTokenReader__type_name( RogueClassTokenReader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[583]);
}

RogueClassTokenReader* RogueTokenReader__init__TokenList( RogueClassTokenReader* THIS, RogueTokenList* _auto_624_0 )
{
  THIS->tokens = _auto_624_0;
  THIS->count = THIS->tokens->count;
  return (RogueClassTokenReader*)(THIS);
}

RogueClassError* RogueTokenReader__error__String( RogueClassTokenReader* THIS, RogueString* message_0 )
{
  if (((RogueTokenReader__has_another( THIS ))))
  {
    return (RogueClassError*)(((RogueClassError*)(((RogueToken__error__String( ((RogueTokenReader__peek( THIS ))), message_0 ))))));
  }
  if (!!(THIS->count))
  {
    return (RogueClassError*)(((RogueClassError*)(((RogueToken__error__String( ((RogueTokenList__last( THIS->tokens ))), message_0 ))))));
  }
  return (RogueClassError*)(((RogueClassError*)(((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), message_0, ((RogueString*)(NULL)), 0, 0 ))))));
}

RogueLogical RogueTokenReader__has_another( RogueClassTokenReader* THIS )
{
  return (RogueLogical)(THIS->position < THIS->count);
}

RogueLogical RogueTokenReader__next_is__TokenType( RogueClassTokenReader* THIS, RogueClassTokenType* type_0 )
{
  if (THIS->position == THIS->count)
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(((RogueClassToken*)(THIS->tokens->data->objects[THIS->position]))->_type == type_0);
}

RogueLogical RogueTokenReader__next_is_statement_token( RogueClassTokenReader* THIS )
{
  if (THIS->position == THIS->count)
  {
    return (RogueLogical)(false);
  }
  if ((call_ROGUEM73( 13, (RogueClassTokenType*)(((RogueClassToken*)(THIS->tokens->data->objects[THIS->position]))->_type) )))
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(true);
}

RogueClassToken* RogueTokenReader__peek( RogueClassTokenReader* THIS )
{
  if (THIS->position == THIS->count)
  {
    return (RogueClassToken*)(((RogueTokenList__last( THIS->tokens ))));
  }
  return (RogueClassToken*)(((RogueClassToken*)(THIS->tokens->data->objects[THIS->position])));
}

RogueClassToken* RogueTokenReader__peek__Integer( RogueClassTokenReader* THIS, RogueInteger num_ahead_0 )
{
  if ((THIS->position + num_ahead_0) >= THIS->count)
  {
    return (RogueClassToken*)(((RogueTokenList__last( THIS->tokens ))));
  }
  return (RogueClassToken*)(((RogueClassToken*)(THIS->tokens->data->objects[(THIS->position + num_ahead_0)])));
}

RogueClassToken* RogueTokenReader__read( RogueClassTokenReader* THIS )
{
  ++THIS->position;
  return (RogueClassToken*)(((RogueClassToken*)(THIS->tokens->data->objects[(THIS->position - 1)])));
}

RogueClassTokenReader* RogueTokenReader__init_object( RogueClassTokenReader* THIS )
{
  return (RogueClassTokenReader*)(THIS);
}

RogueString* RogueTokenizer__type_name( RogueClassTokenizer* THIS )
{
  return (RogueString*)(Rogue_literal_strings[584]);
}

RogueTokenList* RogueTokenizer__tokenize__String( RogueClassTokenizer* THIS, RogueString* _auto_625_0 )
{
  THIS->filepath = _auto_625_0;
  return (RogueTokenList*)(((RogueTokenizer__tokenize__ParseReader( THIS, ((RogueParseReader__init__String( ((RogueClassParseReader*)ROGUE_CREATE_OBJECT(ParseReader)), THIS->filepath ))) ))));
}

RogueTokenList* RogueTokenizer__tokenize__Token_String_String( RogueClassTokenizer* THIS, RogueClassToken* reference_t_0, RogueString* _auto_626_1, RogueString* data_2 )
{
  THIS->filepath = _auto_626_1;
  RogueCharacterList* characters_3 = (((RogueCharacterList__init__Integer( ((RogueCharacterList*)ROGUE_CREATE_OBJECT(CharacterList)), data_2->count ))));
  {
    RogueString* _auto_1020_4 = (data_2);
    RogueInteger _auto_1021_5 = (0);
    for (;_auto_1021_5 < _auto_1020_4->count;++_auto_1021_5)
    {
      RogueCharacter ch_6 = (_auto_1020_4->characters[_auto_1021_5]);
      RogueCharacterList__add__Character( characters_3, ch_6 );
    }
  }
  return (RogueTokenList*)(((RogueTokenizer__tokenize__ParseReader( THIS, ((RogueParseReader__set_position__Integer_Integer( ((RogueParseReader__init__CharacterList( ((RogueClassParseReader*)ROGUE_CREATE_OBJECT(ParseReader)), characters_3 ))), reference_t_0->line, reference_t_0->column ))) ))));
}

RogueTokenList* RogueTokenizer__tokenize__ParseReader( RogueClassTokenizer* THIS, RogueClassParseReader* _auto_627_0 )
{
  THIS->reader = _auto_627_0;
  RogueTokenizer__configure_token_types( THIS );
  while (((RogueTokenizer__tokenize_another( THIS ))))
  {
  }
  if (THIS->tokens->count == 0)
  {
    if ((THIS->tokens->count == 0 || ((RogueTokenList__last( THIS->tokens )))->_type != RogueTokenType_eol))
    {
      RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_eol );
    }
  }
  return (RogueTokenList*)(THIS->tokens);
}

RogueLogical RogueTokenizer__add_new_string_or_character_token_from_buffer__Character( RogueClassTokenizer* THIS, RogueCharacter terminator_0 )
{
  if ((THIS->buffer->characters->count == 1 && terminator_0 == (RogueCharacter)'\''))
  {
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Character( THIS, RogueTokenType_literal_character, THIS->buffer->characters->data->characters[0] ))));
  }
  else
  {
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_String( THIS, RogueTokenType_literal_string, ((RogueStringBuilder__to_String( THIS->buffer ))) ))));
  }
}

RogueLogical RogueTokenizer__add_new_token__TokenType( RogueClassTokenizer* THIS, RogueClassTokenType* type_0 )
{
  RogueTokenList__add__Token( THIS->tokens, (call_ROGUEM71( 4, (RogueClassTokenType*)(type_0), THIS->next_filepath, THIS->next_line, THIS->next_column )) );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__add_new_token__TokenType_Character( RogueClassTokenizer* THIS, RogueClassTokenType* type_0, RogueCharacter value_1 )
{
  RogueTokenList__add__Token( THIS->tokens, ((RogueTokenType__create_token__String_Integer_Integer_Character( type_0, THIS->next_filepath, THIS->next_line, THIS->next_column, value_1 ))) );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__add_new_token__TokenType_Long( RogueClassTokenizer* THIS, RogueClassTokenType* type_0, RogueLong value_1 )
{
  RogueTokenList__add__Token( THIS->tokens, ((RogueTokenType__create_token__String_Integer_Integer_Long( type_0, THIS->next_filepath, THIS->next_line, THIS->next_column, value_1 ))) );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__add_new_token__TokenType_Integer( RogueClassTokenizer* THIS, RogueClassTokenType* type_0, RogueInteger value_1 )
{
  RogueTokenList__add__Token( THIS->tokens, ((RogueTokenType__create_token__String_Integer_Integer_Integer( type_0, THIS->next_filepath, THIS->next_line, THIS->next_column, value_1 ))) );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__add_new_token__TokenType_Real( RogueClassTokenizer* THIS, RogueClassTokenType* type_0, RogueReal value_1 )
{
  RogueTokenList__add__Token( THIS->tokens, ((RogueTokenType__create_token__String_Integer_Integer_Real( type_0, THIS->next_filepath, THIS->next_line, THIS->next_column, value_1 ))) );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__add_new_token__TokenType_String( RogueClassTokenizer* THIS, RogueClassTokenType* type_0, RogueString* value_1 )
{
  RogueTokenList__add__Token( THIS->tokens, (call_ROGUEM72( 9, (RogueClassTokenType*)(type_0), THIS->next_filepath, THIS->next_line, THIS->next_column, value_1 )) );
  return (RogueLogical)(true);
}

void RogueTokenizer__configure_token_types( RogueClassTokenizer* THIS )
{
  if (!!(RogueTokenType_lookup))
  {
    return;
  }
  RogueTokenType_lookup = ((RogueString_TokenTypeTable__init( ((RogueClassString_TokenTypeTable*)ROGUE_CREATE_OBJECT(String_TokenTypeTable)) )));
  RogueTokenType_directive_define = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)ROGUE_CREATE_OBJECT(DirectiveTokenType))), Rogue_literal_strings[55] ))) )));
  RogueTokenType_directive_include = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)ROGUE_CREATE_OBJECT(DirectiveTokenType))), Rogue_literal_strings[56] ))) )));
  RogueTokenType_directive_includeNativeCode = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)ROGUE_CREATE_OBJECT(DirectiveTokenType))), Rogue_literal_strings[57] ))) )));
  RogueTokenType_directive_includeNativeHeader = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)ROGUE_CREATE_OBJECT(DirectiveTokenType))), Rogue_literal_strings[58] ))) )));
  RogueTokenType_directive_if = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)ROGUE_CREATE_OBJECT(DirectiveTokenType))), Rogue_literal_strings[59] ))) )));
  RogueTokenType_directive_elseIf = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)ROGUE_CREATE_OBJECT(DirectiveTokenType))), Rogue_literal_strings[60] ))) )));
  RogueTokenType_directive_else = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)ROGUE_CREATE_OBJECT(DirectiveTokenType))), Rogue_literal_strings[61] ))) )));
  RogueTokenType_directive_endIf = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassDirectiveTokenType*)ROGUE_CREATE_OBJECT(DirectiveTokenType))), Rogue_literal_strings[62] ))) )));
  RogueTokenType_directive_requisite = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructuralDirectiveTokenType*)ROGUE_CREATE_OBJECT(StructuralDirectiveTokenType))), Rogue_literal_strings[63] ))) )));
  RogueTokenType_placeholder_id = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[64] ))) )));
  RogueTokenType_eol = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassEOLTokenType*)ROGUE_CREATE_OBJECT(EOLTokenType))), Rogue_literal_strings[65] ))) )));
  RogueTokenType_begin_augment_tokens = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[65] ))) )));
  RogueTokenType_keyword_augment = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[66] ))) )));
  RogueTokenType_keyword_case = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[67] ))) )));
  RogueTokenType_keyword_catch = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[68] ))) )));
  RogueTokenType_keyword_class = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[69] ))) )));
  RogueTokenType_keyword_DEFINITIONS = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[70] ))) )));
  RogueTokenType_keyword_else = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[71] ))) )));
  RogueTokenType_keyword_elseIf = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[72] ))) )));
  RogueTokenType_keyword_endAugment = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[73] ))) )));
  RogueTokenType_keyword_endClass = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[74] ))) )));
  RogueTokenType_keyword_endContingent = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[75] ))) )));
  RogueTokenType_keyword_endForEach = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[76] ))) )));
  RogueTokenType_keyword_endFunction = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[77] ))) )));
  RogueTokenType_keyword_endIf = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[78] ))) )));
  RogueTokenType_keyword_endLoop = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[79] ))) )));
  RogueTokenType_keyword_endTry = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[80] ))) )));
  RogueTokenType_keyword_endWhich = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[81] ))) )));
  RogueTokenType_keyword_endWhile = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[82] ))) )));
  RogueTokenType_keyword_ENUMERATE = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[83] ))) )));
  RogueTokenType_keyword_GLOBALS = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[84] ))) )));
  RogueTokenType_keyword_macro = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[85] ))) )));
  RogueTokenType_keyword_method = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[86] ))) )));
  RogueTokenType_keyword_METHODS = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[87] ))) )));
  RogueTokenType_keyword_nativeCode = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[88] ))) )));
  RogueTokenType_keyword_nativeHeader = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[89] ))) )));
  RogueTokenType_keyword_others = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[90] ))) )));
  RogueTokenType_keyword_PROPERTIES = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[91] ))) )));
  RogueTokenType_keyword_routine = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[92] ))) )));
  RogueTokenType_keyword_ROUTINES = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[93] ))) )));
  RogueTokenType_keyword_satisfied = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[94] ))) )));
  RogueTokenType_keyword_unsatisfied = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[95] ))) )));
  RogueTokenType_keyword_with = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[96] ))) )));
  RogueTokenType_symbol_close_brace = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[97] ))) )));
  RogueTokenType_symbol_close_bracket = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[98] ))) )));
  RogueTokenType_symbol_close_comment = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[99] ))) )));
  RogueTokenType_symbol_close_paren = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[100] ))) )));
  RogueTokenType_symbol_close_specialize = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassStructureTokenType*)ROGUE_CREATE_OBJECT(StructureTokenType))), Rogue_literal_strings[101] ))) )));
  RogueTokenType_keyword_await = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[102] ))) )));
  RogueTokenType_keyword_contingent = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[103] ))) )));
  RogueTokenType_keyword_escapeContingent = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[104] ))) )));
  RogueTokenType_keyword_escapeForEach = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[105] ))) )));
  RogueTokenType_keyword_escapeIf = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[106] ))) )));
  RogueTokenType_keyword_escapeLoop = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[107] ))) )));
  RogueTokenType_keyword_escapeTry = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[108] ))) )));
  RogueTokenType_keyword_escapeWhich = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[109] ))) )));
  RogueTokenType_keyword_escapeWhile = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[110] ))) )));
  RogueTokenType_keyword_forEach = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[111] ))) )));
  RogueTokenType_keyword_function = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[112] ))) )));
  RogueTokenType_keyword_if = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[113] ))) )));
  RogueTokenType_keyword_in = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[114] ))) )));
  RogueTokenType_keyword_is = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[115] ))) )));
  RogueTokenType_keyword_isNot = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[116] ))) )));
  RogueTokenType_keyword_local = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[117] ))) )));
  RogueTokenType_keyword_loop = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[118] ))) )));
  RogueTokenType_keyword_native = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[119] ))) )));
  RogueTokenType_keyword_necessary = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[120] ))) )));
  RogueTokenType_keyword_nextIteration = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[121] ))) )));
  RogueTokenType_keyword_noAction = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[122] ))) )));
  RogueTokenType_keyword_null = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[2] ))) )));
  RogueTokenType_keyword_of = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[123] ))) )));
  RogueTokenType_keyword_return = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[124] ))) )));
  RogueTokenType_keyword_step = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[125] ))) )));
  RogueTokenType_keyword_sufficient = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[126] ))) )));
  RogueTokenType_keyword_throw = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[127] ))) )));
  RogueTokenType_keyword_trace = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[128] ))) )));
  RogueTokenType_keyword_try = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[129] ))) )));
  RogueTokenType_keyword_which = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[130] ))) )));
  RogueTokenType_keyword_while = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[131] ))) )));
  RogueTokenType_keyword_yield = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[132] ))) )));
  RogueTokenType_identifier = ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[133] )));
  RogueTokenType_type_identifier = ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[134] )));
  RogueTokenType_literal_character = ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[24] )));
  RogueTokenType_literal_integer = ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[23] )));
  RogueTokenType_literal_long = ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[22] )));
  RogueTokenType_literal_real = ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[20] )));
  RogueTokenType_literal_string = ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[28] )));
  RogueTokenType_keyword_and = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[135] ))) )));
  RogueTokenType_keyword_as = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[136] ))) )));
  RogueTokenType_keyword_false = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[137] ))) )));
  RogueTokenType_keyword_instanceOf = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[138] ))) )));
  RogueTokenType_keyword_meta = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[139] ))) )));
  RogueTokenType_keyword_not = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[140] ))) )));
  RogueTokenType_keyword_notInstanceOf = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[141] ))) )));
  RogueTokenType_keyword_or = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[142] ))) )));
  RogueTokenType_keyword_pi = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[143] ))) )));
  RogueTokenType_keyword_prior = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[144] ))) )));
  RogueTokenType_keyword_this = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[145] ))) )));
  RogueTokenType_keyword_true = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[146] ))) )));
  RogueTokenType_keyword_xor = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[147] ))) )));
  RogueTokenType_symbol_ampersand = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[148] ))) )));
  RogueTokenType_symbol_ampersand_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[149] ))) )));
  RogueTokenType_symbol_arrow = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[150] ))) )));
  RogueTokenType_symbol_at = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[151] ))) )));
  RogueTokenType_symbol_backslash = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[152] ))) )));
  RogueTokenType_symbol_caret = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[153] ))) )));
  RogueTokenType_symbol_caret_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[154] ))) )));
  RogueTokenType_symbol_colon = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[155] ))) )));
  RogueTokenType_symbol_colon_colon = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[156] ))) )));
  RogueTokenType_symbol_comma = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[157] ))) )));
  RogueTokenType_symbol_compare = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[158] ))) )));
  RogueTokenType_symbol_dot = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[44] ))) )));
  RogueTokenType_symbol_dot_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[159] ))) )));
  RogueTokenType_symbol_downToGreaterThan = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[160] ))) )));
  RogueTokenType_symbol_empty_braces = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[161] ))) )));
  RogueTokenType_symbol_empty_brackets = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[162] ))) )));
  RogueTokenType_symbol_eq = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[163] ))) )));
  RogueTokenType_symbol_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[164] ))) )));
  RogueTokenType_symbol_exclamation_point = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[165] ))) )));
  RogueTokenType_symbol_fat_arrow = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[166] ))) )));
  RogueTokenType_symbol_ge = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[167] ))) )));
  RogueTokenType_symbol_gt = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[168] ))) )));
  RogueTokenType_symbol_le = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[169] ))) )));
  RogueTokenType_symbol_lt = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[170] ))) )));
  RogueTokenType_symbol_minus = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[171] ))) )));
  RogueTokenType_symbol_minus_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[172] ))) )));
  RogueTokenType_symbol_minus_minus = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[4] ))) )));
  RogueTokenType_symbol_ne = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[173] ))) )));
  RogueTokenType_symbol_open_brace = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[174] ))) )));
  RogueTokenType_symbol_open_bracket = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[175] ))) )));
  RogueTokenType_symbol_open_paren = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[176] ))) )));
  RogueTokenType_symbol_open_specialize = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[177] ))) )));
  RogueTokenType_symbol_percent = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[178] ))) )));
  RogueTokenType_symbol_percent_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[179] ))) )));
  RogueTokenType_symbol_plus = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[180] ))) )));
  RogueTokenType_symbol_plus_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[181] ))) )));
  RogueTokenType_symbol_plus_plus = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[182] ))) )));
  RogueTokenType_symbol_question_mark = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[183] ))) )));
  RogueTokenType_symbol_semicolon = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[184] ))) )));
  RogueTokenType_symbol_shift_left = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[185] ))) )));
  RogueTokenType_symbol_shift_right = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[186] ))) )));
  RogueTokenType_symbol_shift_right_x = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[187] ))) )));
  RogueTokenType_symbol_slash = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[37] ))) )));
  RogueTokenType_symbol_slash_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[188] ))) )));
  RogueTokenType_symbol_tilde = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[189] ))) )));
  RogueTokenType_symbol_tilde_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[190] ))) )));
  RogueTokenType_symbol_times = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[191] ))) )));
  RogueTokenType_symbol_times_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[192] ))) )));
  RogueTokenType_symbol_upTo = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[193] ))) )));
  RogueTokenType_symbol_upToLessThan = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[194] ))) )));
  RogueTokenType_symbol_vertical_bar = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[195] ))) )));
  RogueTokenType_symbol_vertical_bar_equals = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)((RogueClassOpWithAssignTokenType*)ROGUE_CREATE_OBJECT(OpWithAssignTokenType))), Rogue_literal_strings[196] ))) )));
  RogueTokenType_symbol_double_vertical_bar = ((RogueTokenizer__define__TokenType( THIS, ((RogueTokenType__init__String( ((RogueClassTokenType*)ROGUE_CREATE_OBJECT(TokenType)), Rogue_literal_strings[197] ))) )));
}

RogueLogical RogueTokenizer__consume__Character( RogueClassTokenizer* THIS, RogueCharacter ch_0 )
{
  if (((RogueParseReader__peek( THIS->reader ))) != ch_0)
  {
    return (RogueLogical)(false);
  }
  RogueParseReader__read( THIS->reader );
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__consume__String( RogueClassTokenizer* THIS, RogueString* st_0 )
{
  return (RogueLogical)(((RogueParseReader__consume__String( THIS->reader, st_0 ))));
}

RogueLogical RogueTokenizer__consume_spaces( RogueClassTokenizer* THIS )
{
  if (!(((RogueParseReader__consume__Character( THIS->reader, (RogueCharacter)' ' )))))
  {
    return (RogueLogical)(false);
  }
  while (((RogueParseReader__consume__Character( THIS->reader, (RogueCharacter)' ' ))))
  {
  }
  return (RogueLogical)(true);
}

RogueClassTokenType* RogueTokenizer__define__TokenType( RogueClassTokenizer* THIS, RogueClassTokenType* type_0 )
{
  RogueString_TokenTypeTable__set__String_TokenType( RogueTokenType_lookup, type_0->name, type_0 );
  return (RogueClassTokenType*)(type_0);
}

RogueClassRogueError* RogueTokenizer__error__String( RogueClassTokenizer* THIS, RogueString* message_0 )
{
  return (RogueClassRogueError*)(((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), message_0, THIS->filepath, THIS->reader->line, THIS->reader->column ))));
}

RogueClassTokenType* Rogue_Tokenizer__get_symbol_token_type( RogueClassTokenizer* THIS )
{
  RogueCharacter ch_0 = (((RogueParseReader__read( THIS->reader ))));
  if (ch_0 == (RogueCharacter)'!')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_ne);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_exclamation_point);
    }
  }
  else if (ch_0 == (RogueCharacter)'$')
  {
    RogueString* id_1 = (((RogueTokenizer__read_identifier( THIS ))));
    {
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( id_1, Rogue_literal_strings[217] ))) == 0)
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_directive_define );
      }
      else if (((RogueString__operatorLESSTHANGREATERTHAN__String( id_1, Rogue_literal_strings[218] ))) == 0)
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_directive_include );
      }
      else if (((RogueString__operatorLESSTHANGREATERTHAN__String( id_1, Rogue_literal_strings[219] ))) == 0)
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_directive_includeNativeCode );
      }
      else if (((RogueString__operatorLESSTHANGREATERTHAN__String( id_1, Rogue_literal_strings[220] ))) == 0)
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_directive_includeNativeHeader );
      }
      else if (((RogueString__operatorLESSTHANGREATERTHAN__String( id_1, Rogue_literal_strings[113] ))) == 0)
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_directive_if );
      }
      else if (((RogueString__operatorLESSTHANGREATERTHAN__String( id_1, Rogue_literal_strings[72] ))) == 0)
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_directive_elseIf );
      }
      else if (((RogueString__operatorLESSTHANGREATERTHAN__String( id_1, Rogue_literal_strings[71] ))) == 0)
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_directive_else );
      }
      else if (((RogueString__operatorLESSTHANGREATERTHAN__String( id_1, Rogue_literal_strings[78] ))) == 0)
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_directive_endIf );
      }
      else if (((RogueString__operatorLESSTHANGREATERTHAN__String( id_1, Rogue_literal_strings[221] ))) == 0)
      {
        RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_directive_requisite );
      }
      else
      {
        RogueTokenizer__add_new_token__TokenType_String( THIS, RogueTokenType_placeholder_id, ((RogueString__operatorPLUS__String( Rogue_literal_strings[222], id_1 ))) );
      }
    }
    return (RogueClassTokenType*)(((RogueClassTokenType*)(NULL)));
  }
  else if (ch_0 == (RogueCharacter)'%')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_percent_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_percent);
    }
  }
  else if (ch_0 == (RogueCharacter)'&')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'&' ))))
    {
      throw ((RogueTokenizer__error__String( THIS, Rogue_literal_strings[223] )));
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_ampersand_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_ampersand);
    }
  }
  else if (ch_0 == (RogueCharacter)'(')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_open_paren);
  }
  else if (ch_0 == (RogueCharacter)')')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_close_paren);
  }
  else if (ch_0 == (RogueCharacter)'*')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_times_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_times);
    }
  }
  else if (ch_0 == (RogueCharacter)'+')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_plus_equals);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'+' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_plus_plus);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_plus);
    }
  }
  else if (ch_0 == (RogueCharacter)',')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_comma);
  }
  else if (ch_0 == (RogueCharacter)'-')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_minus_equals);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'-' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_minus_minus);
    }
    else if ((((RogueParseReader__peek__Integer( THIS->reader, 0 ))) == (RogueCharacter)'>' && ((RogueParseReader__peek__Integer( THIS->reader, 1 ))) == (RogueCharacter)'>'))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_minus);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'>' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_arrow);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_minus);
    }
  }
  else if (ch_0 == (RogueCharacter)'.')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'.' ))))
    {
      if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'.' ))))
      {
        while (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)' ' ))))
        {
        }
        if (!(((RogueTokenizer__consume__Character( THIS, (RogueCharacter)10 )))))
        {
          throw ((RogueTokenizer__error__String( THIS, Rogue_literal_strings[224] )));
        }
        return (RogueClassTokenType*)(((RogueClassTokenType*)(NULL)));
      }
      else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'<' ))))
      {
        return (RogueClassTokenType*)(RogueTokenType_symbol_upToLessThan);
      }
      else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'>' ))))
      {
        return (RogueClassTokenType*)(RogueTokenType_symbol_downToGreaterThan);
      }
      else
      {
        return (RogueClassTokenType*)(RogueTokenType_symbol_upTo);
      }
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_dot_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_dot);
    }
  }
  else if (ch_0 == (RogueCharacter)'/')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_slash_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_slash);
    }
  }
  else if (ch_0 == (RogueCharacter)':')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)':' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_colon_colon);
    }
    if (((RogueTokenizer__consume__String( THIS, Rogue_literal_strings[225] ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_shift_left);
    }
    else if (((RogueTokenizer__consume__String( THIS, Rogue_literal_strings[226] ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_shift_right);
    }
    else if (((RogueTokenizer__consume__String( THIS, Rogue_literal_strings[227] ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_shift_right_x);
    }
    return (RogueClassTokenType*)(RogueTokenType_symbol_colon);
  }
  else if (ch_0 == (RogueCharacter)';')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_semicolon);
  }
  else if (ch_0 == (RogueCharacter)'<')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'<' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_open_specialize);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_le);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'>' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_compare);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_lt);
    }
  }
  else if (ch_0 == (RogueCharacter)'=')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_eq);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'>' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_fat_arrow);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_equals);
    }
  }
  else if (ch_0 == (RogueCharacter)'>')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_ge);
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'>' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_close_specialize);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_gt);
    }
  }
  else if (ch_0 == (RogueCharacter)'?')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_question_mark);
  }
  else if (ch_0 == (RogueCharacter)'@')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_at);
  }
  else if (ch_0 == (RogueCharacter)'[')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)']' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_empty_brackets);
    }
    return (RogueClassTokenType*)(RogueTokenType_symbol_open_bracket);
  }
  else if (ch_0 == (RogueCharacter)'\\')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_backslash);
  }
  else if (ch_0 == (RogueCharacter)']')
  {
    return (RogueClassTokenType*)(RogueTokenType_symbol_close_bracket);
  }
  else if (ch_0 == (RogueCharacter)'^')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_caret_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_caret);
    }
  }
  else if (ch_0 == (RogueCharacter)'{')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'}' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_empty_braces);
    }
    return (RogueClassTokenType*)(RogueTokenType_symbol_open_brace);
  }
  else if (ch_0 == (RogueCharacter)'|')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'|' ))))
    {
      throw ((RogueTokenizer__error__String( THIS, Rogue_literal_strings[228] )));
    }
    else if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_vertical_bar_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_vertical_bar);
    }
  }
  else if (ch_0 == (RogueCharacter)'}')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'#' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_close_comment);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_close_brace);
    }
  }
  else if (ch_0 == (RogueCharacter)'~')
  {
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'=' ))))
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_tilde_equals);
    }
    else
    {
      return (RogueClassTokenType*)(RogueTokenType_symbol_tilde);
    }
  }
  else
  {
    throw ((RogueTokenizer__error__String( THIS, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__Character( Rogue_literal_strings[229], ch_0 ))), Rogue_literal_strings[13] ))) )));
  }
}

RogueLogical RogueTokenizer__next_is_hex_digit( RogueClassTokenizer* THIS )
{
  RogueCharacter ch_0 = (((RogueParseReader__peek( THIS->reader ))));
  return (RogueLogical)((((ch_0 >= (RogueCharacter)'0' && ch_0 <= (RogueCharacter)'9') || (ch_0 >= (RogueCharacter)'a' && ch_0 <= (RogueCharacter)'f')) || (ch_0 >= (RogueCharacter)'A' && ch_0 <= (RogueCharacter)'F')));
}

RogueCharacter RogueTokenizer__read_character( RogueClassTokenizer* THIS )
{
  if (!(((RogueParseReader__has_another( THIS->reader )))))
  {
    throw ((RogueTokenizer__error__String( THIS, Rogue_literal_strings[203] )));
  }
  RogueCharacter ch_0 = (((RogueParseReader__peek( THIS->reader ))));
  if (ch_0 == (RogueCharacter)10)
  {
    throw ((RogueTokenizer__error__String( THIS, Rogue_literal_strings[204] )));
  }
  if (ch_0 == (RogueCharacter)'\\')
  {
    RogueParseReader__read( THIS->reader );
    if (!(((RogueParseReader__has_another( THIS->reader )))))
    {
      throw ((RogueTokenizer__error__String( THIS, Rogue_literal_strings[205] )));
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'b' ))))
    {
      return (RogueCharacter)(((RogueCharacter)(8)));
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'f' ))))
    {
      return (RogueCharacter)(((RogueCharacter)(12)));
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'n' ))))
    {
      return (RogueCharacter)((RogueCharacter)10);
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'r' ))))
    {
      return (RogueCharacter)((RogueCharacter)13);
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'t' ))))
    {
      return (RogueCharacter)((RogueCharacter)9);
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'v' ))))
    {
      return (RogueCharacter)(((RogueCharacter)(11)));
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'0' ))))
    {
      return (RogueCharacter)((RogueCharacter)0);
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'/' ))))
    {
      return (RogueCharacter)((RogueCharacter)'/');
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'\'' ))))
    {
      return (RogueCharacter)((RogueCharacter)'\'');
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'\\' ))))
    {
      return (RogueCharacter)((RogueCharacter)'\\');
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'"' ))))
    {
      return (RogueCharacter)((RogueCharacter)'"');
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'x' ))))
    {
      return (RogueCharacter)(((RogueTokenizer__read_hex_value__Integer( THIS, 2 ))));
    }
    if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'u' ))))
    {
      return (RogueCharacter)(((RogueTokenizer__read_hex_value__Integer( THIS, 4 ))));
    }
    throw ((RogueTokenizer__error__String( THIS, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( Rogue_literal_strings[209], Rogue_literal_strings[210] ))), Rogue_literal_strings[211] ))) )));
  }
  RogueInteger value_1 = (((RogueInteger)(((RogueParseReader__read( THIS->reader ))))));
  if ((value_1 & 128) != 0)
  {
    RogueInteger ch2_2 = (((RogueInteger)(((RogueParseReader__read( THIS->reader ))))));
    if ((value_1 & 32) == 0)
    {
      value_1 = ((RogueInteger)(value_1 & 31));
      ch2_2 = ((RogueInteger)(value_1 & 63));
      return (RogueCharacter)(((RogueCharacter)(((value_1 << 6) | ch2_2))));
    }
    else
    {
      RogueInteger ch3_3 = (((RogueInteger)(((RogueParseReader__read( THIS->reader ))))));
      value_1 = ((RogueInteger)(value_1 & 15));
      ch2_2 = ((RogueInteger)(ch2_2 & 63));
      ch3_3 = ((RogueInteger)(ch3_3 & 63));
      return (RogueCharacter)(((RogueCharacter)((((value_1 << 2) | (ch2_2 << 6)) | ch3_3))));
    }
  }
  return (RogueCharacter)(((RogueCharacter)(value_1)));
}

RogueCharacter RogueTokenizer__read_hex_value__Integer( RogueClassTokenizer* THIS, RogueInteger digits_0 )
{
  RogueInteger value_1 = (0);
  RogueInteger i_2 = (1);
  while (i_2 <= digits_0)
  {
    if (!(((RogueParseReader__has_another( THIS->reader )))))
    {
      throw ((RogueTokenizer__error__String( THIS, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__Integer( Rogue_literal_strings[0], digits_0 ))), Rogue_literal_strings[207] ))) )));
    }
    if (!(((RogueTokenizer__next_is_hex_digit( THIS )))))
    {
      RogueCharacter ch_3 = (((RogueParseReader__peek( THIS->reader ))));
      RogueStringBuilder* error_buffer_4 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
      RogueStringBuilder__print__String( error_buffer_4, Rogue_literal_strings[208] );
      if ((ch_3 < (RogueCharacter)' ' || ((RogueInteger)(ch_3)) == 127))
      {
        RogueStringBuilder__print__Integer( error_buffer_4, ((RogueInteger)(ch_3)) );
      }
      else
      {
        RogueStringBuilder__print__String( error_buffer_4, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__Character( Rogue_literal_strings[43], ch_3 ))), Rogue_literal_strings[43] ))) );
      }
      RogueStringBuilder__print__Character( error_buffer_4, (RogueCharacter)'.' );
      throw ((RogueTokenizer__error__String( THIS, ((RogueStringBuilder__to_String( error_buffer_4 ))) )));
    }
    RogueInteger intval_5 = (((RogueInteger)(((RogueParseReader__read( THIS->reader ))))));
    value_1 = ((RogueInteger)((value_1 << 4) + intval_5));
    ++i_2;
  }
  return (RogueCharacter)(((RogueCharacter)(value_1)));
}

RogueString* RogueTokenizer__read_identifier( RogueClassTokenizer* THIS )
{
  RogueStringBuilder__clear( THIS->buffer );
  RogueCharacter ch_0 = (((RogueParseReader__peek( THIS->reader ))));
  while (((((ch_0 >= (RogueCharacter)'a' && ch_0 <= (RogueCharacter)'z') || (ch_0 >= (RogueCharacter)'A' && ch_0 <= (RogueCharacter)'Z')) || (ch_0 >= (RogueCharacter)'0' && ch_0 <= (RogueCharacter)'9')) || ch_0 == (RogueCharacter)'_'))
  {
    RogueStringBuilder__print__Character( THIS->buffer, ((RogueParseReader__read( THIS->reader ))) );
    ch_0 = ((RogueCharacter)((RogueParseReader__peek( THIS->reader ))));
  }
  if (THIS->buffer->characters->count == 0)
  {
    throw ((RogueTokenizer__error__String( THIS, Rogue_literal_strings[198] )));
  }
  return (RogueString*)(((RogueStringBuilder__to_String( THIS->buffer ))));
}

RogueLogical RogueTokenizer__tokenize_alternate_string__Character( RogueClassTokenizer* THIS, RogueCharacter terminator_0 )
{
  RogueStringBuilder__clear( THIS->buffer );
  while (((RogueParseReader__has_another( THIS->reader ))))
  {
    if (((RogueParseReader__has_another( THIS->reader ))))
    {
      RogueCharacter ch_1 = (((RogueParseReader__peek( THIS->reader ))));
      if (ch_1 == terminator_0)
      {
        RogueParseReader__read( THIS->reader );
        ch_1 = ((RogueCharacter)((RogueParseReader__peek( THIS->reader ))));
        if (ch_1 == terminator_0)
        {
          RogueParseReader__read( THIS->reader );
          return (RogueLogical)(((RogueTokenizer__add_new_string_or_character_token_from_buffer__Character( THIS, ((RogueCharacter)(0)) ))));
        }
        else
        {
          RogueStringBuilder__print__Character( THIS->buffer, terminator_0 );
        }
      }
      else
      {
        RogueStringBuilder__print__Character( THIS->buffer, ((RogueTokenizer__read_character( THIS ))) );
      }
    }
  }
  throw ((RogueTokenizer__error__String( THIS, Rogue_literal_strings[212] )));
}

RogueLogical RogueTokenizer__tokenize_another( RogueClassTokenizer* THIS )
{
  RogueParseReader__consume_spaces( THIS->reader );
  THIS->next_filepath = THIS->filepath;
  THIS->next_line = THIS->reader->line;
  THIS->next_column = THIS->reader->column;
  if (!(((RogueParseReader__has_another( THIS->reader )))))
  {
    return (RogueLogical)(false);
  }
  RogueCharacter ch_0 = (((RogueParseReader__peek( THIS->reader ))));
  if (ch_0 == (RogueCharacter)10)
  {
    RogueParseReader__read( THIS->reader );
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_eol ))));
  }
  if ((((RogueCharacter__is_letter( ch_0 ))) || ch_0 == (RogueCharacter)'_'))
  {
    RogueString* id_1 = (((RogueTokenizer__read_identifier( THIS ))));
    RogueClassTokenType* keyword_type_2 = (((RogueString_TokenTypeTable__get__String( RogueTokenType_lookup, id_1 ))));
    if (!!(keyword_type_2))
    {
      if (keyword_type_2 == RogueTokenType_keyword_nativeCode)
      {
        return (RogueLogical)(((RogueTokenizer__scan_native_code( THIS ))));
      }
      else if (keyword_type_2 == RogueTokenType_keyword_nativeHeader)
      {
        return (RogueLogical)(((RogueTokenizer__scan_native_header( THIS ))));
      }
      else
      {
        return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType( THIS, keyword_type_2 ))));
      }
    }
    else
    {
      return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_String( THIS, RogueTokenType_identifier, id_1 ))));
    }
    return (RogueLogical)(true);
  }
  else if (ch_0 == (RogueCharacter)'\'')
  {
    if (((RogueParseReader__peek__Integer( THIS->reader, 1 ))) == (RogueCharacter)'\'')
    {
      RogueParseReader__read( THIS->reader );
      RogueParseReader__read( THIS->reader );
      return (RogueLogical)(((RogueTokenizer__tokenize_alternate_string__Character( THIS, (RogueCharacter)'\'' ))));
    }
    else
    {
      return (RogueLogical)(((RogueTokenizer__tokenize_string__Character( THIS, (RogueCharacter)'\'' ))));
    }
  }
  else if (ch_0 == (RogueCharacter)'"')
  {
    return (RogueLogical)(((RogueTokenizer__tokenize_string__Character( THIS, (RogueCharacter)'"' ))));
  }
  else if (ch_0 == (RogueCharacter)'#')
  {
    return (RogueLogical)(((RogueTokenizer__tokenize_comment( THIS ))));
  }
  else if ((ch_0 >= (RogueCharacter)'0' && ch_0 <= (RogueCharacter)'9'))
  {
    switch (((RogueInteger)(((RogueParseReader__peek__Integer( THIS->reader, 1 ))))))
    {
      case (RogueCharacter)'b':
      {
        return (RogueLogical)(((RogueTokenizer__tokenize_integer_in_base__Integer( THIS, 2 ))));
        break;
      }
      case (RogueCharacter)'c':
      {
        return (RogueLogical)(((RogueTokenizer__tokenize_integer_in_base__Integer( THIS, 8 ))));
        break;
      }
      case (RogueCharacter)'x':
      {
        return (RogueLogical)(((RogueTokenizer__tokenize_integer_in_base__Integer( THIS, 16 ))));
        break;
      }
      default:
      {
        return (RogueLogical)(((RogueTokenizer__tokenize_number( THIS ))));
      }
    }
  }
  else if ((ch_0 == (RogueCharacter)'@' && ((RogueParseReader__peek__Integer( THIS->reader, 1 ))) == (RogueCharacter)'|'))
  {
    return (RogueLogical)(((RogueTokenizer__tokenize_verbatim_string( THIS ))));
  }
  else
  {
    if (ch_0 == (RogueCharacter)'.')
    {
      RogueCharacter next_3 = (((RogueParseReader__peek__Integer( THIS->reader, 1 ))));
      if ((next_3 >= (RogueCharacter)'0' && next_3 <= (RogueCharacter)'9'))
      {
        return (RogueLogical)(((RogueTokenizer__tokenize_number( THIS ))));
      }
    }
    RogueClassTokenType* token_type_4 = (((Rogue_Tokenizer__get_symbol_token_type( THIS ))));
    if (token_type_4 == NULL)
    {
      return (RogueLogical)(true);
    }
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType( THIS, token_type_4 ))));
  }
  RogueString* name_5 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[43] ))), ((RogueCharacter__to_String( ch_0 ))) ))), Rogue_literal_strings[43] ))) ))));
  if (((RogueInteger)(ch_0)) == 10)
  {
    name_5 = ((RogueString*)Rogue_literal_strings[230]);
  }
  else if ((((RogueInteger)(ch_0)) < 32 || ((RogueInteger)(ch_0)) > 126))
  {
    name_5 = ((RogueString*)((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[231] ))), ((RogueInteger__to_String( ((RogueInteger)(ch_0)) ))) ))), Rogue_literal_strings[100] ))) ))));
  }
  throw ((RogueTokenizer__error__String( THIS, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[232] ))), name_5 ))), Rogue_literal_strings[44] ))) ))) )));
}

RogueLogical RogueTokenizer__tokenize_comment( RogueClassTokenizer* THIS )
{
  RogueStringBuilder__clear( THIS->buffer );
  RogueParseReader__read( THIS->reader );
  if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'{' ))))
  {
    RogueInteger nesting_count_0 = (1);
    while (((RogueParseReader__has_another( THIS->reader ))))
    {
      RogueCharacter ch_1 = (((RogueParseReader__read( THIS->reader ))));
      switch (((RogueInteger)(ch_1)))
      {
        case (RogueCharacter)'#':
        {
          RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)'#' );
          if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'{' ))))
          {
            RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)'{' );
            ++nesting_count_0;
          }
          break;
        }
        case (RogueCharacter)'}':
        {
          if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'#' ))))
          {
            --nesting_count_0;
            if (nesting_count_0 == 0)
            {
              goto _auto_1022;
            }
            else
            {
              RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)'}' );
              RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)'#' );
            }
          }
          else
          {
            RogueStringBuilder__print__Character( THIS->buffer, (RogueCharacter)'}' );
          }
          break;
        }
        default:
        {
          RogueStringBuilder__print__Character( THIS->buffer, ch_1 );
        }
      }
    }
    _auto_1022:;
  }
  else
  {
    while ((((RogueParseReader__has_another( THIS->reader ))) && ((RogueParseReader__peek( THIS->reader ))) != (RogueCharacter)10))
    {
      RogueStringBuilder__print__Character( THIS->buffer, ((RogueParseReader__read( THIS->reader ))) );
    }
  }
  if ((!!(THIS->tokens->count) && ((RogueTokenList__last( THIS->tokens )))->_type == RogueTokenType_eol))
  {
    ((RogueClassEOLToken*)(RogueObject_as(((RogueTokenList__last( THIS->tokens ))),RogueTypeEOLToken)))->comment = ((RogueString__operatorPLUS__String( ((RogueClassEOLToken*)(RogueObject_as(((RogueTokenList__last( THIS->tokens ))),RogueTypeEOLToken)))->comment, ((RogueStringBuilder__to_String( THIS->buffer ))) )));
  }
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__tokenize_integer_in_base__Integer( RogueClassTokenizer* THIS, RogueInteger base_0 )
{
  RogueParseReader__read( THIS->reader );
  RogueParseReader__read( THIS->reader );
  RogueInteger count_1 = (0);
  RogueInteger n_2 = (0);
  RogueInteger digit_3 = (((RogueCharacter__to_number__Integer( ((RogueParseReader__peek( THIS->reader ))), base_0 ))));
  while ((((RogueParseReader__has_another( THIS->reader ))) && digit_3 != -1))
  {
    if (digit_3 >= base_0)
    {
      throw ((RogueTokenizer__error__String( THIS, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__Integer( Rogue_literal_strings[214], base_0 ))), Rogue_literal_strings[44] ))) )));
    }
    ++count_1;
    n_2 = ((RogueInteger)((n_2 * base_0) + digit_3));
    RogueParseReader__read( THIS->reader );
    digit_3 = ((RogueInteger)((RogueCharacter__to_number__Integer( ((RogueParseReader__peek( THIS->reader ))), base_0 ))));
  }
  if (count_1 == 0)
  {
    throw ((RogueTokenizer__error__String( THIS, Rogue_literal_strings[215] )));
  }
  return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Integer( THIS, RogueTokenType_literal_integer, n_2 ))));
}

RogueLogical RogueTokenizer__tokenize_number( RogueClassTokenizer* THIS )
{
  RogueLogical is_negative_0 = (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'-' ))));
  RogueInteger i_1 = (0);
  while ((((RogueParseReader__has_another__Integer( THIS->reader, (i_1 + 1) ))) && ((RogueCharacter__is_number__Integer( ((RogueParseReader__peek__Integer( THIS->reader, i_1 ))), 10 )))))
  {
    ++i_1;
  }
  RogueCharacter ch_2 = (((RogueParseReader__peek__Integer( THIS->reader, i_1 ))));
  RogueLogical is_real_3 = ((((ch_2 == (RogueCharacter)'.' && ((RogueCharacter__is_number__Integer( ((RogueParseReader__peek__Integer( THIS->reader, (i_1 + 1) ))), 10 )))) || ch_2 == (RogueCharacter)'e') || ch_2 == (RogueCharacter)'E'));
  if (is_real_3)
  {
    RogueReal n_4 = (((RogueTokenizer__scan_real( THIS ))));
    ch_2 = ((RogueCharacter)((RogueParseReader__peek( THIS->reader ))));
    if (ch_2 == (RogueCharacter)'.')
    {
      ch_2 = ((RogueCharacter)((RogueParseReader__peek__Integer( THIS->reader, 1 ))));
      if ((ch_2 >= (RogueCharacter)'0' && ch_2 <= (RogueCharacter)'9'))
      {
        RogueParseReader__read( THIS->reader );
        RogueInteger start_pos_5 = (THIS->reader->position);
        RogueReal fraction_6 = (((RogueTokenizer__scan_real( THIS ))));
        n_4 += (fraction_6 / ((RogueReal) pow((double)10.0, (double)((RogueReal)((THIS->reader->position - start_pos_5))))));
      }
      else if (ch_2 == (RogueCharacter)'.')
      {
        if (is_negative_0)
        {
          n_4 = ((RogueReal)(-(n_4)));
        }
        return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Integer( THIS, RogueTokenType_literal_integer, ((RogueInteger)(n_4)) ))));
      }
      else if ((((ch_2 >= (RogueCharacter)'a' && ch_2 <= (RogueCharacter)'z') || (ch_2 >= (RogueCharacter)'A' && ch_2 <= (RogueCharacter)'Z')) || ch_2 == (RogueCharacter)'_'))
      {
        return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Integer( THIS, RogueTokenType_literal_integer, ((RogueInteger)(n_4)) ))));
      }
      else
      {
        if (is_negative_0)
        {
          n_4 = ((RogueReal)(-(n_4)));
        }
        return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Real( THIS, RogueTokenType_literal_real, n_4 ))));
      }
    }
    if ((((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'E' ))) || ((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'e' )))))
    {
      RogueLogical negative_exponent_7 = (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'-' ))));
      if (!(negative_exponent_7))
      {
        RogueTokenizer__consume__Character( THIS, (RogueCharacter)'+' );
      }
      RogueReal power_8 = (((RogueTokenizer__scan_real( THIS ))));
      if (negative_exponent_7)
      {
        n_4 /= ((RogueReal) pow((double)10.0, (double)power_8));
      }
      else
      {
        n_4 *= ((RogueReal) pow((double)10.0, (double)power_8));
      }
    }
    if (is_negative_0)
    {
      n_4 = ((RogueReal)(-(n_4)));
    }
    return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Real( THIS, RogueTokenType_literal_real, n_4 ))));
  }
  else
  {
    RogueLong n_9 = (((RogueTokenizer__scan_long( THIS ))));
    if (is_negative_0)
    {
      n_9 = ((RogueLong)(-(n_9)));
    }
    if (n_9 == ((RogueLong)((RogueInteger)(n_9))))
    {
      return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Integer( THIS, RogueTokenType_literal_integer, ((RogueInteger)(n_9)) ))));
    }
    else
    {
      return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType_Long( THIS, RogueTokenType_literal_long, n_9 ))));
    }
  }
}

RogueReal RogueTokenizer__scan_real( RogueClassTokenizer* THIS )
{
  RogueReal n_0 = (0.0);
  RogueCharacter ch_1 = (((RogueParseReader__peek( THIS->reader ))));
  while ((ch_1 >= (RogueCharacter)'0' && ch_1 <= (RogueCharacter)'9'))
  {
    RogueInteger intval_2 = ((((RogueInteger)(((RogueParseReader__read( THIS->reader ))))) - ((RogueInteger)((RogueCharacter)'0'))));
    n_0 = ((RogueReal)((n_0 * 10.0) + ((RogueReal)(intval_2))));
    ch_1 = ((RogueCharacter)((RogueParseReader__peek( THIS->reader ))));
  }
  return (RogueReal)(n_0);
}

RogueLong RogueTokenizer__scan_long( RogueClassTokenizer* THIS )
{
  RogueLong n_0 = (((RogueLong)0));
  RogueCharacter ch_1 = (((RogueParseReader__peek( THIS->reader ))));
  while ((ch_1 >= (RogueCharacter)'0' && ch_1 <= (RogueCharacter)'9'))
  {
    RogueInteger intval_2 = ((((RogueInteger)(((RogueParseReader__read( THIS->reader ))))) - ((RogueInteger)((RogueCharacter)'0'))));
    n_0 = ((RogueLong)((n_0 * ((RogueLong)10)) + ((RogueLong)intval_2)));
    ch_1 = ((RogueCharacter)((RogueParseReader__peek( THIS->reader ))));
  }
  return (RogueLong)(n_0);
}

RogueLogical RogueTokenizer__scan_native_code( RogueClassTokenizer* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueParseReader__consume_spaces( THIS->reader );
  if (((RogueParseReader__consume__Character( THIS->reader, (RogueCharacter)10 ))))
  {
    RogueLogical found_end_1 = (false);
    while (((RogueParseReader__has_another( THIS->reader ))))
    {
      if ((THIS->reader->column == 1 && ((RogueParseReader__consume_id__String( THIS->reader, Rogue_literal_strings[199] )))))
      {
        found_end_1 = ((RogueLogical)true);
        goto _auto_1025;
      }
      RogueStringBuilder__print__Character( buffer_0, ((RogueParseReader__read( THIS->reader ))) );
    }
    _auto_1025:;
    if (!(found_end_1))
    {
      throw ((RogueTokenizer__error__String( THIS, Rogue_literal_strings[200] )));
    }
  }
  else
  {
    while (((RogueParseReader__has_another( THIS->reader ))))
    {
      if (((RogueParseReader__consume__Character( THIS->reader, (RogueCharacter)10 ))))
      {
        goto _auto_1026;
      }
      RogueStringBuilder__print__Character( buffer_0, ((RogueParseReader__read( THIS->reader ))) );
    }
    _auto_1026:;
  }
  {
    RogueClassLineReader* _auto_1027_2 = (((RogueLineReader__init__String( ((RogueClassLineReader*)ROGUE_CREATE_OBJECT(LineReader)), ((RogueStringBuilder__to_String( buffer_0 ))) ))));
    while (((RogueLineReader__has_another( _auto_1027_2 ))))
    {
      RogueString* line_3 = (((RogueLineReader__read( _auto_1027_2 ))));
      RogueStringList__add__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_code, line_3 );
    }
  }
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__scan_native_header( RogueClassTokenizer* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueParseReader__consume_spaces( THIS->reader );
  if (((RogueParseReader__consume__Character( THIS->reader, (RogueCharacter)10 ))))
  {
    RogueLogical found_end_1 = (false);
    while (((RogueParseReader__has_another( THIS->reader ))))
    {
      if ((THIS->reader->column == 1 && ((RogueParseReader__consume_id__String( THIS->reader, Rogue_literal_strings[201] )))))
      {
        found_end_1 = ((RogueLogical)true);
        goto _auto_1028;
      }
      RogueStringBuilder__print__Character( buffer_0, ((RogueParseReader__read( THIS->reader ))) );
    }
    _auto_1028:;
    if (!(found_end_1))
    {
      throw ((RogueTokenizer__error__String( THIS, Rogue_literal_strings[202] )));
    }
  }
  else
  {
    while (((RogueParseReader__has_another( THIS->reader ))))
    {
      if (((RogueParseReader__consume__Character( THIS->reader, (RogueCharacter)10 ))))
      {
        goto _auto_1029;
      }
      RogueStringBuilder__print__Character( buffer_0, ((RogueParseReader__read( THIS->reader ))) );
    }
    _auto_1029:;
  }
  {
    RogueClassLineReader* _auto_1030_2 = (((RogueLineReader__init__String( ((RogueClassLineReader*)ROGUE_CREATE_OBJECT(LineReader)), ((RogueStringBuilder__to_String( buffer_0 ))) ))));
    while (((RogueLineReader__has_another( _auto_1030_2 ))))
    {
      RogueString* line_3 = (((RogueLineReader__read( _auto_1030_2 ))));
      RogueStringList__add__String( ((RogueClassProgram*)ROGUE_SINGLETON(Program))->native_header, line_3 );
    }
  }
  return (RogueLogical)(true);
}

RogueLogical RogueTokenizer__tokenize_string__Character( RogueClassTokenizer* THIS, RogueCharacter terminator_0 )
{
  RogueStringBuilder__clear( THIS->buffer );
  RogueParseReader__read( THIS->reader );
  while (((RogueParseReader__has_another( THIS->reader ))))
  {
    RogueCharacter ch_1 = (((RogueParseReader__peek( THIS->reader ))));
    if (ch_1 == terminator_0)
    {
      RogueParseReader__read( THIS->reader );
      return (RogueLogical)(((RogueTokenizer__add_new_string_or_character_token_from_buffer__Character( THIS, terminator_0 ))));
    }
    else
    {
      RogueStringBuilder__print__Character( THIS->buffer, ((RogueTokenizer__read_character( THIS ))) );
    }
  }
  throw ((RogueTokenizer__error__String( THIS, Rogue_literal_strings[213] )));
}

RogueLogical RogueTokenizer__tokenize_verbatim_string( RogueClassTokenizer* THIS )
{
  RogueStringBuilder__clear( THIS->buffer );
  RogueParseReader__read( THIS->reader );
  RogueParseReader__read( THIS->reader );
  while (((RogueParseReader__has_another( THIS->reader ))))
  {
    RogueCharacter ch_0 = (((RogueParseReader__read( THIS->reader ))));
    if (((RogueInteger)(ch_0)) == 10)
    {
      RogueTokenizer__consume_spaces( THIS );
      if (((RogueTokenizer__consume__Character( THIS, (RogueCharacter)'|' ))))
      {
        RogueStringBuilder__print__Character( THIS->buffer, ch_0 );
      }
      else
      {
        RogueTokenizer__add_new_token__TokenType_String( THIS, RogueTokenType_literal_string, ((RogueStringBuilder__to_String( THIS->buffer ))) );
        return (RogueLogical)(((RogueTokenizer__add_new_token__TokenType( THIS, RogueTokenType_eol ))));
      }
    }
    else
    {
      RogueStringBuilder__print__Character( THIS->buffer, ch_0 );
    }
  }
  throw ((RogueTokenizer__error__String( THIS, Rogue_literal_strings[216] )));
}

RogueClassTokenizer* RogueTokenizer__init_object( RogueClassTokenizer* THIS )
{
  THIS->tokens = ((RogueTokenList__init( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)) )));
  THIS->buffer = ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) )));
  return (RogueClassTokenizer*)(THIS);
}

RogueString* RogueParseReader__type_name( RogueClassParseReader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[585]);
}

RogueLogical RogueParseReader__has_another( RogueClassParseReader* THIS )
{
  return (RogueLogical)(THIS->position < THIS->count);
}

RogueCharacter RogueParseReader__peek( RogueClassParseReader* THIS )
{
  if (THIS->position == THIS->count)
  {
    return (RogueCharacter)(((RogueCharacter)(0)));
  }
  return (RogueCharacter)(THIS->data->data->characters[THIS->position]);
}

RogueCharacter RogueParseReader__read( RogueClassParseReader* THIS )
{
  RogueCharacter result_0 = (THIS->data->data->characters[THIS->position]);
  ++THIS->position;
  if (((RogueInteger)(result_0)) == 10)
  {
    ++THIS->line;
    THIS->column = 1;
  }
  else
  {
    ++THIS->column;
  }
  return (RogueCharacter)(result_0);
}

RogueClassParseReader* RogueParseReader__init__String( RogueClassParseReader* THIS, RogueString* filepath_0 )
{
  RogueParseReader__init__File( THIS, ((RogueFile__init__String( ((RogueClassFile*)ROGUE_CREATE_OBJECT(File)), filepath_0 ))) );
  return (RogueClassParseReader*)(THIS);
}

RogueClassParseReader* RogueParseReader__init__File( RogueClassParseReader* THIS, RogueClassFile* file_0 )
{
  RogueParseReader__init__ByteList( THIS, (RogueFile__load_as_bytes__String( file_0->filepath )) );
  return (RogueClassParseReader*)(THIS);
}

RogueClassParseReader* RogueParseReader__init__ByteList( RogueClassParseReader* THIS, RogueByteList* original_data_0 )
{
  RogueInteger tab_count_1 = (0);
  {
    RogueByteList* _auto_1031_2 = (original_data_0);
    RogueInteger _auto_1032_3 = (0);
    for (;_auto_1032_3 < _auto_1031_2->count;++_auto_1032_3)
    {
      RogueByte b_4 = (_auto_1031_2->data->bytes[_auto_1032_3]);
      if (((RogueCharacter)(b_4)) == (RogueCharacter)9)
      {
        ++tab_count_1;
      }
    }
  }
  THIS->data = ((RogueCharacterList__init__Integer( ((RogueCharacterList*)ROGUE_CREATE_OBJECT(CharacterList)), (original_data_0->count + tab_count_1) )));
  {
    RogueByteList* _auto_1033_5 = (original_data_0);
    RogueInteger _auto_1034_6 = (0);
    for (;_auto_1034_6 < _auto_1033_5->count;++_auto_1034_6)
    {
      RogueByte b_7 = (_auto_1033_5->data->bytes[_auto_1034_6]);
      if (((RogueCharacter)(b_7)) == (RogueCharacter)9)
      {
        RogueCharacterList__add__Character( THIS->data, ((RogueCharacter)(32)) );
        RogueCharacterList__add__Character( THIS->data, ((RogueCharacter)(32)) );
      }
      else if ((((RogueCharacter)(b_7)) == (RogueCharacter)10 || (((RogueInteger)(b_7)) >= 32 && ((RogueInteger)(b_7)) <= 126)))
      {
        RogueCharacterList__add__Character( THIS->data, ((RogueCharacter)(b_7)) );
      }
    }
  }
  THIS->count = THIS->data->count;
  THIS->line = 1;
  THIS->column = 1;
  return (RogueClassParseReader*)(THIS);
}

RogueClassParseReader* RogueParseReader__init__CharacterList( RogueClassParseReader* THIS, RogueCharacterList* original_data_0 )
{
  RogueInteger tab_count_1 = (0);
  {
    RogueCharacterList* _auto_1035_2 = (original_data_0);
    RogueInteger _auto_1036_3 = (0);
    for (;_auto_1036_3 < _auto_1035_2->count;++_auto_1036_3)
    {
      RogueCharacter b_4 = (_auto_1035_2->data->characters[_auto_1036_3]);
      if (b_4 == (RogueCharacter)9)
      {
        ++tab_count_1;
      }
    }
  }
  THIS->data = ((RogueCharacterList__init__Integer( ((RogueCharacterList*)ROGUE_CREATE_OBJECT(CharacterList)), (original_data_0->count + tab_count_1) )));
  {
    RogueCharacterList* _auto_1037_5 = (original_data_0);
    RogueInteger _auto_1038_6 = (0);
    for (;_auto_1038_6 < _auto_1037_5->count;++_auto_1038_6)
    {
      RogueCharacter b_7 = (_auto_1037_5->data->characters[_auto_1038_6]);
      if (b_7 == (RogueCharacter)9)
      {
        RogueCharacterList__add__Character( THIS->data, ((RogueCharacter)(32)) );
        RogueCharacterList__add__Character( THIS->data, ((RogueCharacter)(32)) );
      }
      else if ((b_7 == (RogueCharacter)10 || (((RogueInteger)(b_7)) >= 32 && ((RogueInteger)(b_7)) <= 126)))
      {
        RogueCharacterList__add__Character( THIS->data, b_7 );
      }
    }
  }
  THIS->count = THIS->data->count;
  THIS->line = 1;
  THIS->column = 1;
  return (RogueClassParseReader*)(THIS);
}

RogueLogical RogueParseReader__consume__Character( RogueClassParseReader* THIS, RogueCharacter ch_0 )
{
  if (((RogueParseReader__peek( THIS ))) != ch_0)
  {
    return (RogueLogical)(false);
  }
  RogueParseReader__read( THIS );
  return (RogueLogical)(true);
}

RogueLogical RogueParseReader__consume__String( RogueClassParseReader* THIS, RogueString* text_0 )
{
  RogueInteger limit_1 = (text_0->count);
  RogueInteger i_2 = (0);
  while (i_2 < limit_1)
  {
    if (((RogueParseReader__peek__Integer( THIS, i_2 ))) != text_0->characters[i_2])
    {
      return (RogueLogical)(false);
    }
    ++i_2;
  }
  i_2 = ((RogueInteger)0);
  while (i_2 < limit_1)
  {
    RogueParseReader__read( THIS );
    ++i_2;
  }
  return (RogueLogical)(true);
}

RogueLogical RogueParseReader__consume_id__String( RogueClassParseReader* THIS, RogueString* text_0 )
{
  RogueCharacter ch_1 = (((RogueParseReader__peek__Integer( THIS, text_0->count ))));
  if ((((RogueCharacter__is_alphanumeric( ch_1 ))) || ch_1 == (RogueCharacter)'_'))
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(((RogueParseReader__consume__String( THIS, text_0 ))));
}

RogueLogical RogueParseReader__consume_spaces( RogueClassParseReader* THIS )
{
  RogueLogical found_0 = (false);
  while (((RogueParseReader__consume__Character( THIS, (RogueCharacter)' ' ))))
  {
    found_0 = ((RogueLogical)true);
  }
  return (RogueLogical)(found_0);
}

RogueLogical RogueParseReader__has_another__Integer( RogueClassParseReader* THIS, RogueInteger n_0 )
{
  return (RogueLogical)((THIS->position + n_0) <= THIS->count);
}

RogueCharacter RogueParseReader__peek__Integer( RogueClassParseReader* THIS, RogueInteger num_ahead_0 )
{
  RogueInteger peek_pos_1 = ((THIS->position + num_ahead_0));
  if (peek_pos_1 >= THIS->count)
  {
    return (RogueCharacter)(((RogueCharacter)(0)));
  }
  return (RogueCharacter)(THIS->data->data->characters[peek_pos_1]);
}

RogueClassParseReader* RogueParseReader__set_position__Integer_Integer( RogueClassParseReader* THIS, RogueInteger _auto_628_0, RogueInteger _auto_629_1 )
{
  THIS->column = _auto_629_1;
  THIS->line = _auto_628_0;
  return (RogueClassParseReader*)(THIS);
}

RogueClassParseReader* RogueParseReader__init_object( RogueClassParseReader* THIS )
{
  return (RogueClassParseReader*)(THIS);
}

RogueString* RoguePreprocessor__type_name( RogueClassPreprocessor* THIS )
{
  return (RogueString*)(Rogue_literal_strings[586]);
}

RogueTokenList* RoguePreprocessor__process__TokenList( RogueClassPreprocessor* THIS, RogueTokenList* _auto_630_0 )
{
  THIS->tokens = _auto_630_0;
  THIS->reader = ((RoguePreprocessorTokenReader__init__TokenList( ((RogueClassPreprocessorTokenReader*)ROGUE_CREATE_OBJECT(PreprocessorTokenReader)), THIS->tokens )));
  THIS->tokens = ((RogueTokenList__init__Integer( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)), ((RogueInteger)((((RogueReal)(THIS->tokens->count)) * 1.1))) )));
  RoguePreprocessor__process__Logical_Integer_Logical( THIS, true, 0, false );
  return (RogueTokenList*)(THIS->tokens);
}

RogueLogical RoguePreprocessor__consume__TokenType( RogueClassPreprocessor* THIS, RogueClassTokenType* type_0 )
{
  if (((RoguePreprocessorTokenReader__peek( THIS->reader )))->_type != type_0)
  {
    return (RogueLogical)(false);
  }
  RoguePreprocessorTokenReader__read( THIS->reader );
  return (RogueLogical)(true);
}

void RoguePreprocessor__process__Logical_Integer_Logical( RogueClassPreprocessor* THIS, RogueLogical keep_tokens_0, RogueInteger depth_1, RogueLogical stop_on_eol_2 )
{
  ++depth_1;
  while (((RoguePreprocessorTokenReader__has_another( THIS->reader ))))
  {
    RogueClassToken* t_3 = (((RoguePreprocessorTokenReader__read( THIS->reader ))));
    if (((RogueToken__is_directive( t_3 ))))
    {
      if (t_3->_type == RogueTokenType_directive_define)
      {
        RogueString* defined_word_4 = (((RoguePreprocessorTokenReader__read_identifier( THIS->reader ))));
        RogueTokenList* defined_tokens_5 = (((RogueTokenList__init( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)) ))));
        while (((RoguePreprocessorTokenReader__has_another( THIS->reader ))))
        {
          RogueClassToken* def_t_6 = (((RoguePreprocessorTokenReader__read( THIS->reader ))));
          if (def_t_6->_type == RogueTokenType_eol)
          {
            goto _auto_1040;
          }
          RogueTokenList__add__Token( defined_tokens_5, def_t_6 );
        }
        _auto_1040:;
        RogueString_TokenListTable__set__String_TokenList( RoguePreprocessor_definitions, defined_word_4, defined_tokens_5 );
        continue;
      }
      else if (t_3->_type == RogueTokenType_directive_include)
      {
        RogueClassToken* filepath_t_7 = (((RoguePreprocessorTokenReader__read( THIS->reader ))));
        if (filepath_t_7->_type != RogueTokenType_literal_string)
        {
          throw ((RoguePreprocessorTokenReader__error__String( THIS->reader, Rogue_literal_strings[45] )));
        }
        RogueRogueC__include__Token_String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC)), t_3, (call_ROGUEM33( 1, (RogueClassToken*)(filepath_t_7) )) );
        continue;
      }
      else if (t_3->_type == RogueTokenType_directive_includeNativeCode)
      {
        RogueClassToken* filepath_t_8 = (((RoguePreprocessorTokenReader__read( THIS->reader ))));
        if (filepath_t_8->_type != RogueTokenType_literal_string)
        {
          throw ((RoguePreprocessorTokenReader__error__String( THIS->reader, Rogue_literal_strings[45] )));
        }
        RogueRogueC__include_native__Token_String_String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC)), t_3, (call_ROGUEM33( 1, (RogueClassToken*)(filepath_t_8) )), Rogue_literal_strings[49] );
        continue;
      }
      else if (t_3->_type == RogueTokenType_directive_includeNativeHeader)
      {
        RogueClassToken* filepath_t_9 = (((RoguePreprocessorTokenReader__read( THIS->reader ))));
        if (filepath_t_9->_type != RogueTokenType_literal_string)
        {
          throw ((RoguePreprocessorTokenReader__error__String( THIS->reader, Rogue_literal_strings[45] )));
        }
        RogueRogueC__include_native__Token_String_String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC)), t_3, (call_ROGUEM33( 1, (RogueClassToken*)(filepath_t_9) )), Rogue_literal_strings[48] );
        continue;
      }
      else if (t_3->_type == RogueTokenType_directive_elseIf)
      {
        if (depth_1 == 1)
        {
          throw ((RogueToken__error__String( t_3, Rogue_literal_strings[50] )));
        }
        RoguePreprocessorTokenReader__push__Token( THIS->reader, t_3 );
        return;
      }
      else if (t_3->_type == RogueTokenType_directive_else)
      {
        if (depth_1 == 1)
        {
          throw ((RogueToken__error__String( t_3, Rogue_literal_strings[51] )));
        }
        RoguePreprocessorTokenReader__push__Token( THIS->reader, t_3 );
        return;
      }
      else if (t_3->_type == RogueTokenType_directive_endIf)
      {
        if (depth_1 == 1)
        {
          throw ((RogueToken__error__String( t_3, Rogue_literal_strings[52] )));
        }
        RoguePreprocessorTokenReader__push__Token( THIS->reader, t_3 );
        return;
      }
      else if (t_3->_type == RogueTokenType_directive_if)
      {
        RogueLogical found_true_10 = (((RoguePreprocessor__parse_logical_expression( THIS ))));
        RogueLogical single_line_11 = (!(((RoguePreprocessorTokenReader__next_is__TokenType( THIS->reader, RogueTokenType_eol )))));
        if (found_true_10)
        {
          RoguePreprocessor__process__Logical_Integer_Logical( THIS, keep_tokens_0, depth_1, single_line_11 );
        }
        else
        {
          RoguePreprocessor__process__Logical_Integer_Logical( THIS, false, depth_1, single_line_11 );
        }
        while (((RoguePreprocessorTokenReader__peek( THIS->reader )))->_type == RogueTokenType_directive_elseIf)
        {
          RoguePreprocessorTokenReader__read( THIS->reader );
          RogueLogical value_12 = (((RoguePreprocessor__parse_logical_expression( THIS ))));
          if (found_true_10)
          {
            RoguePreprocessor__process__Logical_Integer_Logical( THIS, false, depth_1, single_line_11 );
          }
          else
          {
            found_true_10 = ((RogueLogical)value_12);
            if (value_12)
            {
              RoguePreprocessor__process__Logical_Integer_Logical( THIS, keep_tokens_0, depth_1, single_line_11 );
            }
            else
            {
              RoguePreprocessor__process__Logical_Integer_Logical( THIS, false, depth_1, single_line_11 );
            }
          }
        }
        if (((RoguePreprocessorTokenReader__peek( THIS->reader )))->_type == RogueTokenType_directive_else)
        {
          RoguePreprocessorTokenReader__read( THIS->reader );
          if (found_true_10)
          {
            RoguePreprocessor__process__Logical_Integer_Logical( THIS, false, depth_1, single_line_11 );
          }
          else
          {
            RoguePreprocessor__process__Logical_Integer_Logical( THIS, keep_tokens_0, depth_1, single_line_11 );
          }
        }
        if (!(single_line_11))
        {
          RoguePreprocessor__must_consume__TokenType( THIS, RogueTokenType_directive_endIf );
        }
        continue;
      }
    }
    if (keep_tokens_0)
    {
      RogueTokenList__add__Token( THIS->tokens, t_3 );
    }
    if ((stop_on_eol_2 && t_3->_type == RogueTokenType_eol))
    {
      return;
    }
  }
}

void RoguePreprocessor__must_consume__TokenType( RogueClassPreprocessor* THIS, RogueClassTokenType* type_0 )
{
  RogueString* message_1 = (((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[53] ))), type_0->name ))), Rogue_literal_strings[13] ))) ))));
  if (!(((RoguePreprocessorTokenReader__has_another( THIS->reader )))))
  {
    throw ((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), message_1, ((RogueString*)(NULL)), 0, 0 )));
  }
  RogueClassToken* t_2 = (((RoguePreprocessorTokenReader__read( THIS->reader ))));
  if (t_2->_type != type_0)
  {
    throw ((RogueToken__error__String( t_2, message_1 )));
  }
}

RogueLogical RoguePreprocessor__parse_logical_expression( RogueClassPreprocessor* THIS )
{
  return (RogueLogical)(((RoguePreprocessor__parse_logical_or( THIS ))));
}

RogueLogical RoguePreprocessor__parse_logical_or( RogueClassPreprocessor* THIS )
{
  return (RogueLogical)(((RoguePreprocessor__parse_logical_or__Logical( THIS, ((RoguePreprocessor__parse_logical_and( THIS ))) ))));
}

RogueLogical RoguePreprocessor__parse_logical_or__Logical( RogueClassPreprocessor* THIS, RogueLogical lhs_0 )
{
  if (((RoguePreprocessor__consume__TokenType( THIS, RogueTokenType_keyword_or ))))
  {
    return (RogueLogical)(((RoguePreprocessor__parse_logical_or__Logical( THIS, (((RoguePreprocessor__parse_logical_and( THIS ))) || lhs_0) ))));
  }
  return (RogueLogical)(lhs_0);
}

RogueLogical RoguePreprocessor__parse_logical_and( RogueClassPreprocessor* THIS )
{
  return (RogueLogical)(((RoguePreprocessor__parse_logical_and__Logical( THIS, ((RoguePreprocessor__parse_logical_term( THIS ))) ))));
}

RogueLogical RoguePreprocessor__parse_logical_and__Logical( RogueClassPreprocessor* THIS, RogueLogical lhs_0 )
{
  if (((RoguePreprocessor__consume__TokenType( THIS, RogueTokenType_keyword_and ))))
  {
    return (RogueLogical)(((RoguePreprocessor__parse_logical_and__Logical( THIS, (((RoguePreprocessor__parse_logical_term( THIS ))) && lhs_0) ))));
  }
  return (RogueLogical)(lhs_0);
}

RogueLogical RoguePreprocessor__parse_logical_term( RogueClassPreprocessor* THIS )
{
  for (;;)
  {
    RogueClassToken* t_0 = (((RoguePreprocessorTokenReader__peek( THIS->reader ))));
    if (((RoguePreprocessor__consume__TokenType( THIS, RogueTokenType_keyword_not ))))
    {
      return (RogueLogical)(!(((RoguePreprocessor__parse_logical_term( THIS )))));
    }
    if (((RoguePreprocessor__consume__TokenType( THIS, RogueTokenType_symbol_open_paren ))))
    {
      RogueLogical result_1 = (((RoguePreprocessor__parse_logical_expression( THIS ))));
      RoguePreprocessor__must_consume__TokenType( THIS, RogueTokenType_symbol_close_paren );
      return (RogueLogical)(result_1);
    }
    if (t_0->_type == RogueTokenType_literal_string)
    {
      return (RogueLogical)(((RogueString_LogicalTable__get__String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->compile_targets, (call_ROGUEM33( 1, (RogueClassToken*)(((RoguePreprocessorTokenReader__read( THIS->reader )))) )) ))));
    }
    if (((RoguePreprocessor__consume__TokenType( THIS, RogueTokenType_keyword_true ))))
    {
      return (RogueLogical)(true);
    }
    if (((RoguePreprocessor__consume__TokenType( THIS, RogueTokenType_keyword_false ))))
    {
      return (RogueLogical)(false);
    }
    throw ((RogueToken__error__String( ((RoguePreprocessorTokenReader__peek( THIS->reader ))), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[54] ))), (call_ROGUEM33( 1, (RogueClassToken*)(((RoguePreprocessorTokenReader__peek( THIS->reader )))) )) ))), Rogue_literal_strings[13] ))) ))) )));
  }
}

RogueClassPreprocessor* RoguePreprocessor__init_object( RogueClassPreprocessor* THIS )
{
  return (RogueClassPreprocessor*)(THIS);
}

RogueString* RogueCmdAdd__type_name( RogueClassCmdAdd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[879]);
}

RogueClassCmd* RogueCmdAdd__clone__CloneArgs( RogueClassCmdAdd* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdAdd*)ROGUE_CREATE_OBJECT(CmdAdd))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdAdd__combine_literal_operands__Type( RogueClassCmdAdd* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)ROGUE_CREATE_OBJECT(CmdLiteralReal)), THIS->t, (((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal)))->value + ((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal)))->value) ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, (((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInteger)))->value + ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInteger)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdAdd* RogueCmdAdd__init_object( RogueClassCmdAdd* THIS )
{
  return (RogueClassCmdAdd*)(THIS);
}

RogueString* RogueCmdAdd__fn_name( RogueClassCmdAdd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[869]);
}

RogueClassCmd* RogueCmdAdd__resolve_operator_method__Scope_Type_Type( RogueClassCmdAdd* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  if ((left_type_1 != ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String && right_type_2 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String))
  {
    THIS->left = (call_ROGUEM204( 22, (RogueClassCmdBinary*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdAdd*)ROGUE_CREATE_OBJECT(CmdAdd))), THIS->t, ((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Integer( ((RogueClassCmdLiteralString*)ROGUE_CREATE_OBJECT(CmdLiteralString)), THIS->t, Rogue_literal_strings[0], 0 ))))), THIS->left )))), scope_0 ));
    left_type_1 = ((RogueClassType*)((Rogue_Cmd__require_type( THIS->left ))));
  }
  return (RogueClassCmd*)((RogueCmdBinary__resolve_operator_method__Scope_Type_Type( ((RogueClassCmdBinary*)THIS), scope_0, left_type_1, right_type_2 )));
}

RogueString* RogueCmdAdd__symbol( RogueClassCmdAdd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[180]);
}

RogueString* RogueCmdIf__type_name( RogueClassCmdIf* THIS )
{
  return (RogueString*)(Rogue_literal_strings[846]);
}

RogueClassCmd* RogueCmdIf__clone__CloneArgs( RogueClassCmdIf* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if ((!!(task_args_1) && THIS->contains_yield))
  {
    RogueClassCmdTaskControlSection* next_section_2 = (((RogueTaskArgs__create_section( task_args_1 ))));
    RogueClassCmdTaskControlSection* end_section_3 = (((RogueTaskArgs__create_section( task_args_1 ))));
    THIS->task_escape_section = end_section_3;
    RogueTaskArgs__add_conditional_jump__Cmd_CmdTaskControlSection( task_args_1, ((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->condition), clone_args_0 )) ))))), next_section_2 );
    {
      RogueClassCmdStatementList* _auto_1042_5 = (THIS->statements);
      RogueInteger _auto_1043_6 = (0);
      for (;_auto_1043_6 < _auto_1042_5->count;++_auto_1043_6)
      {
        RogueClassCmd* statement_7 = (((RogueClassCmd*)(_auto_1042_5->data->objects[_auto_1043_6])));
        RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM44( 5, (RogueClassCmd*)(statement_7), ((RogueClassCloneArgs*)(task_args_1)) )) );
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, THIS->t, end_section_3 );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, next_section_2 );
    if (!!(THIS->else_statements))
    {
      {
        RogueClassCmdStatementList* _auto_1044_8 = (THIS->else_statements);
        RogueInteger _auto_1045_9 = (0);
        for (;_auto_1045_9 < _auto_1044_8->count;++_auto_1045_9)
        {
          RogueClassCmd* statement_10 = (((RogueClassCmd*)(_auto_1044_8->data->objects[_auto_1045_9])));
          RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM44( 5, (RogueClassCmd*)(statement_10), ((RogueClassCloneArgs*)(task_args_1)) )) );
        }
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, THIS->t, end_section_3 );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, end_section_3 );
    if (end_section_3->ip < task_args_1->cmd_task_control->sections->count)
    {
      RogueTaskArgs__jump_to_new_section__Token( task_args_1, THIS->t );
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  else
  {
    RogueClassCmdIf* result_4 = (((RogueCmdIf__init__Token_Cmd_Integer( ((RogueClassCmdIf*)ROGUE_CREATE_OBJECT(CmdIf)), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->condition), clone_args_0 )), THIS->_control_type ))));
    call_ROGUEM170( 30, (RogueClassCmdControlStructure*)(result_4), ((RogueClassCmdControlStructure*)(THIS)) );
    THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_4));
    result_4->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 )));
    result_4->else_statements = ((RogueCmd__clone__CmdStatementList_CloneArgs( ((RogueClassCmd*)THIS), THIS->else_statements, clone_args_0 )));
    return (RogueClassCmd*)(((RogueClassCmd*)(result_4)));
  }
}

RogueClassCmd* RogueCmdIf__resolve__Scope( RogueClassCmdIf* THIS, RogueClassScope* scope_0 )
{
  THIS->condition = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->condition), scope_0 ));
  THIS->condition = ((RogueCmd__require_logical__Scope( THIS->condition, scope_0 )));
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  if (!!(THIS->else_statements))
  {
    RogueCmdStatementList__resolve__Scope( THIS->else_statements, scope_0 );
  }
  RogueCmdControlStructureList__remove_last( scope_0->control_stack );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdIf__trace_used_code( RogueClassCmdIf* THIS )
{
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->condition) );
  RogueCmdStatementList__trace_used_code( THIS->statements );
  if (!!(THIS->else_statements))
  {
    RogueCmdStatementList__trace_used_code( THIS->else_statements );
  }
}

void RogueCmdIf__write_cpp__CPPWriter_Logical( RogueClassCmdIf* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[787] );
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->condition), writer_0, false );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[100] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[174] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, false );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[97] );
  if (!!(THIS->else_statements))
  {
    if ((THIS->else_statements->count == 1 && RogueObject_instance_of(((RogueClassCmd*)(THIS->else_statements->data->objects[0])),RogueTypeCmdIf)))
    {
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[788] );
      RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->else_statements, writer_0, false );
    }
    else
    {
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[71] );
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[174] );
      writer_0->indent += 2;
      RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->else_statements, writer_0, false );
      writer_0->indent -= 2;
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[97] );
    }
  }
  if (!!(THIS->escape_label))
  {
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, THIS->escape_label ))), Rogue_literal_strings[780] );
  }
}

RogueClassCmdIf* RogueCmdIf__init_object( RogueClassCmdIf* THIS )
{
  return (RogueClassCmdIf*)(THIS);
}

RogueClassCmdIf* RogueCmdIf__init__Token_Cmd_Integer( RogueClassCmdIf* THIS, RogueClassToken* _auto_637_0, RogueClassCmd* _auto_638_1, RogueInteger _auto_639_2 )
{
  THIS->_control_type = _auto_639_2;
  THIS->condition = _auto_638_1;
  THIS->t = _auto_637_0;
  THIS->statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
  return (RogueClassCmdIf*)(THIS);
}

RogueClassCmdIf* RogueCmdIf__init__Token_Cmd_CmdStatementList_Integer( RogueClassCmdIf* THIS, RogueClassToken* _auto_640_0, RogueClassCmd* _auto_641_1, RogueClassCmdStatementList* _auto_642_2, RogueInteger _auto_643_3 )
{
  THIS->_control_type = _auto_643_3;
  THIS->statements = _auto_642_2;
  THIS->condition = _auto_641_1;
  THIS->t = _auto_640_0;
  return (RogueClassCmdIf*)(THIS);
}

RogueString* RogueCmdWhich__type_name( RogueClassCmdWhich* THIS )
{
  return (RogueString*)(Rogue_literal_strings[847]);
}

RogueClassCmdWhich* RogueCmdWhich__clone__CloneArgs( RogueClassCmdWhich* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdWhich* result_1 = (((RogueCmdWhich__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Integer( ((RogueClassCmdWhich*)ROGUE_CREATE_OBJECT(CmdWhich)), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->expression), clone_args_0 )), ((RogueCmdWhichCaseList*)(NULL)), ((RogueClassCmdWhichCase*)(NULL)), 5 ))));
  call_ROGUEM170( 30, (RogueClassCmdControlStructure*)(result_1), ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_1));
  RogueCmdWhichCaseList* cloned_cases_2 = (((RogueCmdWhichCaseList__init__Integer( ((RogueCmdWhichCaseList*)ROGUE_CREATE_OBJECT(CmdWhichCaseList)), THIS->cases->count ))));
  {
    RogueCmdWhichCaseList* _auto_1046_3 = (THIS->cases);
    RogueInteger _auto_1047_4 = (0);
    for (;_auto_1047_4 < _auto_1046_3->count;++_auto_1047_4)
    {
      RogueClassCmdWhichCase* c_5 = (((RogueClassCmdWhichCase*)(_auto_1046_3->data->objects[_auto_1047_4])));
      RogueCmdWhichCaseList__add__CmdWhichCase( cloned_cases_2, ((RogueCmdWhichCase__clone__CloneArgs( c_5, clone_args_0 ))) );
    }
  }
  result_1->cases = cloned_cases_2;
  if (!!(THIS->case_others))
  {
    result_1->case_others = ((RogueCmdWhichCase__clone__CloneArgs( THIS->case_others, clone_args_0 )));
  }
  return (RogueClassCmdWhich*)(result_1);
}

RogueClassCmd* RogueCmdWhich__resolve__Scope( RogueClassCmdWhich* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->expression = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->expression), scope_0 ));
  RogueLogical all_literal_cases_1 = (true);
  RogueClassType* expression_type_2 = (((Rogue_Cmd__require_type( THIS->expression ))));
  if (expression_type_2 != ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    if ((expression_type_2 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte || expression_type_2 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character))
    {
      THIS->expression = (call_ROGUEM42( 22, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->expression), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer ))), scope_0 ));
    }
    else
    {
      all_literal_cases_1 = ((RogueLogical)false);
    }
  }
  {
    RogueCmdWhichCaseList* _auto_1048_10 = (THIS->cases);
    RogueInteger _auto_1049_11 = (0);
    for (;_auto_1049_11 < _auto_1048_10->count;++_auto_1049_11)
    {
      RogueClassCmdWhichCase* c_12 = (((RogueClassCmdWhichCase*)(_auto_1048_10->data->objects[_auto_1049_11])));
      RogueCmdArgs__resolve__Scope( c_12->conditions, scope_0 );
      if (all_literal_cases_1)
      {
        {
          RogueClassCmdArgs* _auto_1050_13 = (c_12->conditions);
          RogueInteger _auto_1051_14 = (0);
          for (;_auto_1051_14 < _auto_1050_13->count;++_auto_1051_14)
          {
            RogueClassCmd* condition_15 = (((RogueClassCmd*)(_auto_1050_13->data->objects[_auto_1051_14])));
            if ((!((call_ROGUEM47( 15, (RogueClassCmd*)(condition_15) ))) || RogueObject_instance_of(condition_15,RogueTypeCmdLiteralString)))
            {
              all_literal_cases_1 = ((RogueLogical)false);
              goto _auto_1052;
            }
          }
        }
        _auto_1052:;
      }
      RogueCmdStatementList__resolve__Scope( c_12->statements, scope_0 );
    }
  }
  if (!!(THIS->case_others))
  {
    RogueCmdArgs__resolve__Scope( THIS->case_others->conditions, scope_0 );
    RogueCmdStatementList__resolve__Scope( THIS->case_others->statements, scope_0 );
  }
  RogueCmdControlStructureList__remove_last( scope_0->control_stack );
  if ((all_literal_cases_1 && !(THIS->contains_yield)))
  {
    return (RogueClassCmd*)((call_ROGUEM170( 30, (RogueClassCmdControlStructure*)(((RogueCmdSwitch__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Integer( ((RogueClassCmdSwitch*)ROGUE_CREATE_OBJECT(CmdSwitch)), THIS->t, THIS->expression, THIS->cases, THIS->case_others, 5 )))), ((RogueClassCmdControlStructure*)(THIS)) )));
  }
  RogueClassCmdBlock* result_3 = (((RogueCmdBlock__init__Token_Integer( ((RogueClassCmdBlock*)ROGUE_CREATE_OBJECT(CmdBlock)), THIS->t, 5 ))));
  call_ROGUEM170( 30, (RogueClassCmdControlStructure*)(result_3), ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->expression = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->expression), scope_0 ));
  RogueString* var_name_4 = 0;
  RogueClassLocal* expression_var_5 = 0;
  if (RogueObject_instance_of(THIS->expression,RogueTypeCmdReadLocal))
  {
    expression_var_5 = ((RogueClassLocal*)((RogueClassCmdReadLocal*)(RogueObject_as(THIS->expression,RogueTypeCmdReadLocal)))->local_info);
    var_name_4 = ((RogueString*)expression_var_5->name);
  }
  else
  {
    var_name_4 = ((RogueString*)((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))));
    expression_var_5 = ((RogueClassLocal*)((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, var_name_4, ((Rogue_Cmd__require_type( THIS->expression ))), THIS->expression ))));
    RogueCmdList__add__Cmd( ((RogueCmdList*)result_3->statements), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local( ((RogueClassCmdLocalDeclaration*)ROGUE_CREATE_OBJECT(CmdLocalDeclaration)), THIS->t, expression_var_5 ))))) );
  }
  if (!!(THIS->cases->count))
  {
    RogueClassCmdIf* cmd_if_6 = (((RogueCmdIf__init__Token_Cmd_CmdStatementList_Integer( ((RogueClassCmdIf*)ROGUE_CREATE_OBJECT(CmdIf)), THIS->expression->t, ((RogueCmdWhichCase__as_conditional__String( ((RogueClassCmdWhichCase*)(THIS->cases->data->objects[0])), var_name_4 ))), ((RogueClassCmdWhichCase*)(THIS->cases->data->objects[0]))->statements, 2 ))));
    RogueClassCmdIf* cur_if_7 = (cmd_if_6);
    {
      RogueCmdWhichCaseList* _auto_1058_16 = (THIS->cases);
      RogueInteger i_17 = (0);
      for (;i_17 < _auto_1058_16->count;++i_17)
      {
        if (i_17 > 0)
        {
          RogueClassCmdWhichCase* c_8 = (((RogueClassCmdWhichCase*)(THIS->cases->data->objects[i_17])));
          RogueClassCmdIf* cmd_else_if_9 = (((RogueCmdIf__init__Token_Cmd_Integer( ((RogueClassCmdIf*)ROGUE_CREATE_OBJECT(CmdIf)), c_8->t, ((RogueCmdWhichCase__as_conditional__String( c_8, var_name_4 ))), 3 ))));
          cmd_else_if_9->statements = c_8->statements;
          cur_if_7->else_statements = ((RogueCmdStatementList__init__Cmd( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)), ((RogueClassCmd*)(cmd_else_if_9)) )));
          cur_if_7 = ((RogueClassCmdIf*)cmd_else_if_9);
        }
      }
    }
    if (!!(THIS->case_others))
    {
      cur_if_7->else_statements = THIS->case_others->statements;
    }
    RogueCmdList__add__Cmd( ((RogueCmdList*)result_3->statements), ((RogueClassCmd*)(cmd_if_6)) );
  }
  else if (!!(THIS->case_others))
  {
    {
      RogueClassCmdStatementList* _auto_1059_18 = (THIS->case_others->statements);
      RogueInteger _auto_1060_19 = (0);
      for (;_auto_1060_19 < _auto_1059_18->count;++_auto_1060_19)
      {
        RogueClassCmd* cmd_20 = (((RogueClassCmd*)(_auto_1059_18->data->objects[_auto_1060_19])));
        RogueCmdList__add__Cmd( ((RogueCmdList*)result_3->statements), cmd_20 );
      }
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBlock__resolve__Scope( result_3, scope_0 ))))));
}

RogueClassCmdWhich* RogueCmdWhich__init_object( RogueClassCmdWhich* THIS )
{
  return (RogueClassCmdWhich*)(THIS);
}

RogueClassCmdWhich* RogueCmdWhich__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Integer( RogueClassCmdWhich* THIS, RogueClassToken* _auto_644_0, RogueClassCmd* _auto_645_1, RogueCmdWhichCaseList* _auto_646_2, RogueClassCmdWhichCase* _auto_647_3, RogueInteger _auto_648_4 )
{
  THIS->_control_type = _auto_648_4;
  THIS->case_others = _auto_647_3;
  THIS->cases = _auto_646_2;
  THIS->expression = _auto_645_1;
  THIS->t = _auto_644_0;
  return (RogueClassCmdWhich*)(THIS);
}

RogueClassCmdWhichCase* RogueCmdWhich__add_case__Token( RogueClassCmdWhich* THIS, RogueClassToken* case_t_0 )
{
  RogueClassCmdWhichCase* result_1 = (((RogueCmdWhichCase__init__Token_CmdArgs_CmdStatementList( ((RogueClassCmdWhichCase*)ROGUE_CREATE_OBJECT(CmdWhichCase)), case_t_0, ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))) ))));
  RogueCmdWhichCaseList__add__CmdWhichCase( THIS->cases, result_1 );
  return (RogueClassCmdWhichCase*)(result_1);
}

RogueClassCmdWhichCase* RogueCmdWhich__add_case_others__Token( RogueClassCmdWhich* THIS, RogueClassToken* case_t_0 )
{
  RogueClassCmdWhichCase* result_1 = (((RogueCmdWhichCase__init__Token_CmdArgs_CmdStatementList( ((RogueClassCmdWhichCase*)ROGUE_CREATE_OBJECT(CmdWhichCase)), case_t_0, ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))) ))));
  THIS->case_others = result_1;
  return (RogueClassCmdWhichCase*)(result_1);
}

RogueString* RogueCmdContingent__type_name( RogueClassCmdContingent* THIS )
{
  return (RogueString*)(Rogue_literal_strings[848]);
}

RogueClassCmd* RogueCmdContingent__clone__CloneArgs( RogueClassCmdContingent* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if ((!!(task_args_1) && THIS->contains_yield))
  {
    THIS->satisfied_section = ((RogueTaskArgs__create_section( task_args_1 )));
    THIS->unsatisfied_section = ((RogueTaskArgs__create_section( task_args_1 )));
    RogueClassCmdTaskControlSection* end_section_2 = (((RogueTaskArgs__create_section( task_args_1 ))));
    THIS->task_escape_section = end_section_2;
    {
      RogueClassCmdStatementList* _auto_1061_4 = (THIS->statements);
      RogueInteger _auto_1062_5 = (0);
      for (;_auto_1062_5 < _auto_1061_4->count;++_auto_1062_5)
      {
        RogueClassCmd* statement_6 = (((RogueClassCmd*)(_auto_1061_4->data->objects[_auto_1062_5])));
        RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM44( 5, (RogueClassCmd*)(statement_6), ((RogueClassCloneArgs*)(task_args_1)) )) );
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, THIS->t, THIS->satisfied_section );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, THIS->satisfied_section );
    if (!!(THIS->satisfied_statements))
    {
      {
        RogueClassCmdStatementList* _auto_1063_7 = (THIS->satisfied_statements);
        RogueInteger _auto_1064_8 = (0);
        for (;_auto_1064_8 < _auto_1063_7->count;++_auto_1064_8)
        {
          RogueClassCmd* statement_9 = (((RogueClassCmd*)(_auto_1063_7->data->objects[_auto_1064_8])));
          RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM44( 5, (RogueClassCmd*)(statement_9), ((RogueClassCloneArgs*)(task_args_1)) )) );
        }
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, THIS->t, end_section_2 );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, THIS->unsatisfied_section );
    if (!!(THIS->unsatisfied_statements))
    {
      {
        RogueClassCmdStatementList* _auto_1065_10 = (THIS->unsatisfied_statements);
        RogueInteger _auto_1066_11 = (0);
        for (;_auto_1066_11 < _auto_1065_10->count;++_auto_1066_11)
        {
          RogueClassCmd* statement_12 = (((RogueClassCmd*)(_auto_1065_10->data->objects[_auto_1066_11])));
          RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM44( 5, (RogueClassCmd*)(statement_12), ((RogueClassCloneArgs*)(task_args_1)) )) );
        }
      }
    }
    RogueTaskArgs__add_jump__Token_CmdTaskControlSection( task_args_1, THIS->t, end_section_2 );
    RogueTaskArgs__begin_section__CmdTaskControlSection( task_args_1, end_section_2 );
    if (end_section_2->ip < task_args_1->cmd_task_control->sections->count)
    {
      RogueTaskArgs__jump_to_new_section__Token( task_args_1, THIS->t );
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  else
  {
    RogueClassCmdContingent* result_3 = (((RogueCmdContingent__init__Token_CmdStatementList( ((RogueClassCmdContingent*)ROGUE_CREATE_OBJECT(CmdContingent)), THIS->t, ((RogueClassCmdStatementList*)(NULL)) ))));
    RogueCmdContingent__set_control_logic__CmdControlStructure( result_3, ((RogueClassCmdControlStructure*)(THIS)) );
    THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_3));
    result_3->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 )));
    result_3->satisfied_statements = ((RogueCmd__clone__CmdStatementList_CloneArgs( ((RogueClassCmd*)THIS), THIS->satisfied_statements, clone_args_0 )));
    result_3->unsatisfied_statements = ((RogueCmd__clone__CmdStatementList_CloneArgs( ((RogueClassCmd*)THIS), THIS->unsatisfied_statements, clone_args_0 )));
    return (RogueClassCmd*)(((RogueClassCmd*)(result_3)));
  }
}

RogueClassCmdContingent* RogueCmdContingent__resolve__Scope( RogueClassCmdContingent* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  if (!(!!(THIS->escape_label)))
  {
    THIS->escape_label = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
  }
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  if (!!(THIS->satisfied_statements))
  {
    RogueCmdStatementList__resolve__Scope( THIS->satisfied_statements, scope_0 );
  }
  if (!!(THIS->unsatisfied_statements))
  {
    RogueCmdStatementList__resolve__Scope( THIS->unsatisfied_statements, scope_0 );
  }
  RogueCmdControlStructureList__remove_last( scope_0->control_stack );
  return (RogueClassCmdContingent*)(THIS);
}

void RogueCmdContingent__trace_used_code( RogueClassCmdContingent* THIS )
{
  RogueCmdStatementList__trace_used_code( THIS->statements );
  if (!!(THIS->satisfied_statements))
  {
    RogueCmdStatementList__trace_used_code( THIS->satisfied_statements );
  }
  if (!!(THIS->unsatisfied_statements))
  {
    RogueCmdStatementList__trace_used_code( THIS->unsatisfied_statements );
  }
}

void RogueCmdContingent__write_cpp__CPPWriter_Logical( RogueClassCmdContingent* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[174] );
  writer_0->indent += 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[174] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, false );
  if (!!(THIS->satisfied_label))
  {
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, THIS->satisfied_label ))), Rogue_literal_strings[780] );
  }
  if (!!(THIS->satisfied_statements))
  {
    RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->satisfied_statements, writer_0, false );
  }
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[789] ))), THIS->escape_label ))), Rogue_literal_strings[184] );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[97] );
  if (!!(THIS->unsatisfied_label))
  {
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, THIS->unsatisfied_label ))), Rogue_literal_strings[780] );
  }
  if (!!(THIS->unsatisfied_statements))
  {
    RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->unsatisfied_statements, writer_0, false );
  }
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[97] );
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, THIS->escape_label ))), Rogue_literal_strings[780] );
}

RogueClassCmdContingent* RogueCmdContingent__init_object( RogueClassCmdContingent* THIS )
{
  return (RogueClassCmdContingent*)(THIS);
}

RogueClassCmd* RogueCmdContingent__set_control_logic__CmdControlStructure( RogueClassCmdContingent* THIS, RogueClassCmdControlStructure* original_0 )
{
  RogueCmdControlStructure__set_control_logic__CmdControlStructure( ((RogueClassCmdControlStructure*)THIS), original_0 );
  THIS->satisfied_label = ((RogueClassCmdContingent*)(RogueObject_as(original_0,RogueTypeCmdContingent)))->satisfied_label;
  THIS->unsatisfied_label = ((RogueClassCmdContingent*)(RogueObject_as(original_0,RogueTypeCmdContingent)))->unsatisfied_label;
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmdContingent* RogueCmdContingent__init__Token_CmdStatementList( RogueClassCmdContingent* THIS, RogueClassToken* _auto_649_0, RogueClassCmdStatementList* _auto_650_1 )
{
  THIS->statements = _auto_650_1;
  THIS->t = _auto_649_0;
  THIS->_control_type = 1;
  return (RogueClassCmdContingent*)(THIS);
}

RogueString* RogueCmdTry__type_name( RogueClassCmdTry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[849]);
}

RogueClassCmdTry* RogueCmdTry__clone__CloneArgs( RogueClassCmdTry* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdTry* result_1 = (((RogueCmdTry__init__Token_CmdStatementList_CmdCatchList( ((RogueClassCmdTry*)ROGUE_CREATE_OBJECT(CmdTry)), THIS->t, ((RogueClassCmdStatementList*)(NULL)), ((RogueCmdCatchList*)(NULL)) ))));
  call_ROGUEM170( 30, (RogueClassCmdControlStructure*)(result_1), ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_1));
  result_1->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 )));
  RogueCmdCatchList* new_catches_2 = (((RogueCmdCatchList__init( ((RogueCmdCatchList*)ROGUE_CREATE_OBJECT(CmdCatchList)) ))));
  {
    RogueCmdCatchList* _auto_1067_3 = (THIS->catches);
    RogueInteger _auto_1068_4 = (0);
    for (;_auto_1068_4 < _auto_1067_3->count;++_auto_1068_4)
    {
      RogueClassCmdCatch* c_5 = (((RogueClassCmdCatch*)(_auto_1067_3->data->objects[_auto_1068_4])));
      RogueCmdCatchList__add__CmdCatch( new_catches_2, ((RogueCmdCatch__clone__CloneArgs( c_5, clone_args_0 ))) );
    }
  }
  result_1->catches = new_catches_2;
  return (RogueClassCmdTry*)(result_1);
}

RogueClassCmd* RogueCmdTry__resolve__Scope( RogueClassCmdTry* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  {
    RogueCmdCatchList* _auto_1069_1 = (THIS->catches);
    RogueInteger _auto_1070_2 = (0);
    for (;_auto_1070_2 < _auto_1069_1->count;++_auto_1070_2)
    {
      RogueClassCmdCatch* c_3 = (((RogueClassCmdCatch*)(_auto_1069_1->data->objects[_auto_1070_2])));
      RogueCmdCatch__resolve__Scope( c_3, scope_0 );
    }
  }
  if (THIS->contains_yield)
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[719] )));
  }
  RogueCmdControlStructureList__remove_last( scope_0->control_stack );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdTry__trace_used_code( RogueClassCmdTry* THIS )
{
  RogueCmdStatementList__trace_used_code( THIS->statements );
  {
    RogueCmdCatchList* _auto_1071_0 = (THIS->catches);
    RogueInteger _auto_1072_1 = (0);
    for (;_auto_1072_1 < _auto_1071_0->count;++_auto_1072_1)
    {
      RogueClassCmdCatch* c_2 = (((RogueClassCmdCatch*)(_auto_1071_0->data->objects[_auto_1072_1])));
      RogueCmdCatch__trace_used_code( c_2 );
    }
  }
}

void RogueCmdTry__write_cpp__CPPWriter_Logical( RogueClassCmdTry* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[129] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[174] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, false );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[97] );
  {
    RogueCmdCatchList* _auto_1073_2 = (THIS->catches);
    RogueInteger _auto_1074_3 = (0);
    for (;_auto_1074_3 < _auto_1073_2->count;++_auto_1074_3)
    {
      RogueClassCmdCatch* c_4 = (((RogueClassCmdCatch*)(_auto_1073_2->data->objects[_auto_1074_3])));
      RogueCmdCatch__write_cpp__CPPWriter_Logical( c_4, writer_0, false );
    }
  }
  if (!!(THIS->escape_label))
  {
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, THIS->escape_label ))), Rogue_literal_strings[780] );
  }
}

RogueClassCmdTry* RogueCmdTry__init_object( RogueClassCmdTry* THIS )
{
  return (RogueClassCmdTry*)(THIS);
}

RogueClassCmdTry* RogueCmdTry__init__Token_CmdStatementList_CmdCatchList( RogueClassCmdTry* THIS, RogueClassToken* _auto_651_0, RogueClassCmdStatementList* _auto_652_1, RogueCmdCatchList* _auto_653_2 )
{
  THIS->catches = _auto_653_2;
  THIS->statements = _auto_652_1;
  THIS->t = _auto_651_0;
  THIS->_control_type = 4;
  return (RogueClassCmdTry*)(THIS);
}

RogueClassCmdCatch* RogueCmdTry__add_catch__Token( RogueClassCmdTry* THIS, RogueClassToken* catch_t_0 )
{
  RogueClassCmdCatch* c_1 = (((RogueCmdCatch__init__Token_Local_CmdStatementList( ((RogueClassCmdCatch*)ROGUE_CREATE_OBJECT(CmdCatch)), catch_t_0, ((RogueClassLocal*)(NULL)), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))) ))));
  RogueCmdCatchList__add__CmdCatch( THIS->catches, c_1 );
  return (RogueClassCmdCatch*)(c_1);
}

RogueString* RogueCmdAwait__type_name( RogueClassCmdAwait* THIS )
{
  return (RogueString*)(Rogue_literal_strings[659]);
}

RogueClassCmd* RogueCmdAwait__clone__CloneArgs( RogueClassCmdAwait* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if (!!(task_args_1))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[684] )));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAwait__init__Token_Cmd_CmdStatementList_Local( ((RogueClassCmdAwait*)ROGUE_CREATE_OBJECT(CmdAwait)), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->expression), ((RogueClassCloneArgs*)(task_args_1)) )), ((RogueCmdStatementList__clone__CloneArgs( THIS->statement_list, ((RogueClassCloneArgs*)(task_args_1)) ))), THIS->result_var ))))));
  }
}

RogueClassCmd* RogueCmdAwait__resolve__Scope( RogueClassCmdAwait* THIS, RogueClassScope* scope_0 )
{
  if (!(((RogueMethod__is_task_conversion( scope_0->this_method )))))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[720] )));
  }
  THIS->expression = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->expression), scope_0 ));
  RogueClassType* task_type_1 = (((Rogue_Cmd__require_type( THIS->expression ))));
  RogueClassProperty* p_result_2 = (((RogueType__find_property__String( task_type_1, Rogue_literal_strings[359] ))));
  if (!!(THIS->result_var))
  {
    if (!!(p_result_2))
    {
      THIS->result_var->_type = p_result_2->_type;
    }
    else
    {
      throw ((RogueToken__error__String( THIS->expression->t, Rogue_literal_strings[721] )));
    }
  }
  RogueClassLocal* task_var_3 = (((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
  task_var_3->initial_value = THIS->expression;
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->statement_list), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local( ((RogueClassCmdLocalDeclaration*)ROGUE_CREATE_OBJECT(CmdLocalDeclaration)), THIS->t, task_var_3 ))))) );
  RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->statement_list), ((RogueClassCmd*)(((RogueCmdGenericLoop__init__Token_Integer_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)ROGUE_CREATE_OBJECT(CmdGenericLoop)), THIS->t, 8, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, task_var_3 ))))), Rogue_literal_strings[355] ))))), ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) ))), ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))))) );
  if (!!(THIS->result_var))
  {
    RogueCmdList__add__Cmd( ((RogueCmdList*)THIS->statement_list), ((RogueClassCmd*)(((RogueCmdWriteLocal__init__Token_Local_Cmd( ((RogueClassCmdWriteLocal*)ROGUE_CREATE_OBJECT(CmdWriteLocal)), THIS->t, THIS->result_var, ((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)ROGUE_CREATE_OBJECT(CmdReadProperty)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, task_var_3 ))))), p_result_2 ))))) ))))) );
  }
  RogueCmdStatementList__resolve__Scope( THIS->statement_list, scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBlock__resolve__Scope( ((RogueCmdBlock__init__Token_CmdStatementList_Integer( ((RogueClassCmdBlock*)ROGUE_CREATE_OBJECT(CmdBlock)), THIS->t, THIS->statement_list, 0 ))), scope_0 ))))));
}

RogueClassCmdAwait* RogueCmdAwait__init_object( RogueClassCmdAwait* THIS )
{
  return (RogueClassCmdAwait*)(THIS);
}

RogueClassCmdAwait* RogueCmdAwait__init__Token_Cmd_CmdStatementList_Local( RogueClassCmdAwait* THIS, RogueClassToken* _auto_654_0, RogueClassCmd* _auto_655_1, RogueClassCmdStatementList* _auto_656_2, RogueClassLocal* _auto_657_3 )
{
  THIS->result_var = _auto_657_3;
  THIS->statement_list = _auto_656_2;
  THIS->expression = _auto_655_1;
  THIS->t = _auto_654_0;
  return (RogueClassCmdAwait*)(THIS);
}

RogueString* RogueCmdYield__type_name( RogueClassCmdYield* THIS )
{
  return (RogueString*)(Rogue_literal_strings[660]);
}

RogueClassCmd* RogueCmdYield__clone__CloneArgs( RogueClassCmdYield* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if (!!(task_args_1))
  {
    RogueTaskArgs__add_yield__Token( task_args_1, THIS->t );
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdYield__init__Token( ((RogueClassCmdYield*)ROGUE_CREATE_OBJECT(CmdYield)), THIS->t ))))));
  }
}

RogueClassCmd* RogueCmdYield__resolve__Scope( RogueClassCmdYield* THIS, RogueClassScope* scope_0 )
{
  if (!(((RogueMethod__is_task_conversion( scope_0->this_method )))))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[722] )));
  }
  {
    RogueCmdControlStructureList* _auto_1075_1 = (scope_0->control_stack);
    RogueInteger _auto_1076_2 = (0);
    for (;_auto_1076_2 < _auto_1075_1->count;++_auto_1076_2)
    {
      RogueClassCmdControlStructure* control_structure_3 = (((RogueClassCmdControlStructure*)(_auto_1075_1->data->objects[_auto_1076_2])));
      control_structure_3->contains_yield = true;
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmdYield* RogueCmdYield__init_object( RogueClassCmdYield* THIS )
{
  return (RogueClassCmdYield*)(THIS);
}

RogueClassCmdYield* RogueCmdYield__init__Token( RogueClassCmdYield* THIS, RogueClassToken* _auto_658_0 )
{
  THIS->t = _auto_658_0;
  return (RogueClassCmdYield*)(THIS);
}

RogueString* RogueCmdThrow__type_name( RogueClassCmdThrow* THIS )
{
  return (RogueString*)(Rogue_literal_strings[661]);
}

RogueClassCmdThrow* RogueCmdThrow__clone__CloneArgs( RogueClassCmdThrow* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdThrow*)(((RogueCmdThrow__init__Token_Cmd( ((RogueClassCmdThrow*)ROGUE_CREATE_OBJECT(CmdThrow)), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->expression), clone_args_0 )) ))));
}

RogueClassCmd* RogueCmdThrow__resolve__Scope( RogueClassCmdThrow* THIS, RogueClassScope* scope_0 )
{
  THIS->expression = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->expression), scope_0 ));
  RogueClassType* expression_type_1 = (((Rogue_Cmd__require_type( THIS->expression ))));
  RogueType__organize( expression_type_1 );
  if (!(((RogueType__instance_of__Type( expression_type_1, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Error )))))
  {
    throw ((RogueToken__error__String( THIS->expression->t, Rogue_literal_strings[723] )));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdThrow__trace_used_code( RogueClassCmdThrow* THIS )
{
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->expression) );
}

void RogueCmdThrow__write_cpp__CPPWriter_Logical( RogueClassCmdThrow* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[791] );
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->expression), writer_0, false );
}

RogueClassCmdThrow* RogueCmdThrow__init_object( RogueClassCmdThrow* THIS )
{
  return (RogueClassCmdThrow*)(THIS);
}

RogueClassCmdThrow* RogueCmdThrow__init__Token_Cmd( RogueClassCmdThrow* THIS, RogueClassToken* _auto_659_0, RogueClassCmd* _auto_660_1 )
{
  THIS->expression = _auto_660_1;
  THIS->t = _auto_659_0;
  return (RogueClassCmdThrow*)(THIS);
}

RogueString* RogueCmdTrace__type_name( RogueClassCmdTrace* THIS )
{
  return (RogueString*)(Rogue_literal_strings[662]);
}

RogueClassCmdTrace* RogueCmdTrace__clone__CloneArgs( RogueClassCmdTrace* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdTrace*)(((RogueCmdTrace__init__Token_String( ((RogueClassCmdTrace*)ROGUE_CREATE_OBJECT(CmdTrace)), THIS->t, THIS->value ))));
}

RogueClassCmd* RogueCmdTrace__resolve__Scope( RogueClassCmdTrace* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, Rogue_literal_strings[32] ))))), Rogue_literal_strings[724], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), ((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Integer( ((RogueClassCmdLiteralString*)ROGUE_CREATE_OBJECT(CmdLiteralString)), THIS->t, THIS->value, 0 ))))) ))) ))), scope_0 ))));
}

void RogueCmdTrace__trace_used_code( RogueClassCmdTrace* THIS )
{
}

RogueClassCmdTrace* RogueCmdTrace__init_object( RogueClassCmdTrace* THIS )
{
  return (RogueClassCmdTrace*)(THIS);
}

RogueClassCmdTrace* RogueCmdTrace__init__Token_String( RogueClassCmdTrace* THIS, RogueClassToken* _auto_661_0, RogueString* _auto_662_1 )
{
  THIS->value = _auto_662_1;
  THIS->t = _auto_661_0;
  return (RogueClassCmdTrace*)(THIS);
}

RogueString* RogueCmdEscape__type_name( RogueClassCmdEscape* THIS )
{
  return (RogueString*)(Rogue_literal_strings[663]);
}

RogueClassCmd* RogueCmdEscape__clone__CloneArgs( RogueClassCmdEscape* THIS, RogueClassCloneArgs* clone_args_0 )
{
  if (!!(THIS->target_cmd->task_escape_section))
  {
    RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
    return (RogueClassCmd*)(((RogueTaskArgs__create_escape__Token_CmdTaskControlSection( task_args_1, THIS->t, THIS->target_cmd->task_escape_section ))));
  }
  else
  {
    RogueClassCmdControlStructure* new_target_2 = (THIS->target_cmd);
    while (!!(new_target_2->cloned_command))
    {
      new_target_2 = ((RogueClassCmdControlStructure*)new_target_2->cloned_command);
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdEscape__init__Token_Integer_CmdControlStructure( ((RogueClassCmdEscape*)ROGUE_CREATE_OBJECT(CmdEscape)), THIS->t, THIS->_control_type, new_target_2 ))))));
  }
}

RogueClassCmd* RogueCmdEscape__resolve__Scope( RogueClassCmdEscape* THIS, RogueClassScope* scope_0 )
{
  RogueInteger i_1 = (scope_0->control_stack->count);
  while (i_1 > 0)
  {
    --i_1;
    RogueClassCmdControlStructure* cmd_2 = (((RogueClassCmdControlStructure*)(scope_0->control_stack->data->objects[i_1])));
    if (cmd_2->_control_type == THIS->_control_type)
    {
      while (!!(cmd_2->cloned_command))
      {
        cmd_2 = ((RogueClassCmdControlStructure*)cmd_2->cloned_command);
      }
      if (!(!!(cmd_2->escape_label)))
      {
        cmd_2->escape_label = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
      }
      THIS->target_cmd = cmd_2;
      return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
    }
  }
  throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[725] )));
}

void RogueCmdEscape__trace_used_code( RogueClassCmdEscape* THIS )
{
}

void RogueCmdEscape__write_cpp__CPPWriter_Logical( RogueClassCmdEscape* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, ((RogueString__operatorPLUS__String( Rogue_literal_strings[789], THIS->target_cmd->escape_label ))) );
}

RogueClassCmdEscape* RogueCmdEscape__init_object( RogueClassCmdEscape* THIS )
{
  return (RogueClassCmdEscape*)(THIS);
}

RogueClassCmdEscape* RogueCmdEscape__init__Token_Integer_CmdControlStructure( RogueClassCmdEscape* THIS, RogueClassToken* _auto_663_0, RogueInteger _auto_664_1, RogueClassCmdControlStructure* _auto_665_2 )
{
  THIS->target_cmd = _auto_665_2;
  THIS->_control_type = _auto_664_1;
  THIS->t = _auto_663_0;
  return (RogueClassCmdEscape*)(THIS);
}

RogueString* RogueCmdNextIteration__type_name( RogueClassCmdNextIteration* THIS )
{
  return (RogueString*)(Rogue_literal_strings[664]);
}

RogueClassCmd* RogueCmdNextIteration__clone__CloneArgs( RogueClassCmdNextIteration* THIS, RogueClassCloneArgs* clone_args_0 )
{
  if (!!(THIS->target_cmd->task_upkeep_section))
  {
    RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
    return (RogueClassCmd*)(((RogueTaskArgs__create_escape__Token_CmdTaskControlSection( task_args_1, THIS->t, THIS->target_cmd->task_upkeep_section ))));
  }
  else
  {
    RogueClassCmdControlStructure* new_target_2 = (THIS->target_cmd);
    while (!!(new_target_2->cloned_command))
    {
      new_target_2 = ((RogueClassCmdControlStructure*)new_target_2->cloned_command);
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdNextIteration__init__Token_CmdControlStructure( ((RogueClassCmdNextIteration*)ROGUE_CREATE_OBJECT(CmdNextIteration)), THIS->t, new_target_2 ))))));
  }
}

RogueClassCmd* RogueCmdNextIteration__resolve__Scope( RogueClassCmdNextIteration* THIS, RogueClassScope* scope_0 )
{
  RogueInteger i_1 = (scope_0->control_stack->count);
  while (i_1 > 0)
  {
    --i_1;
    RogueClassCmdControlStructure* cmd_2 = (((RogueClassCmdControlStructure*)(scope_0->control_stack->data->objects[i_1])));
    if (cmd_2->_control_type >= 6)
    {
      while (!!(cmd_2->cloned_command))
      {
        cmd_2 = ((RogueClassCmdControlStructure*)cmd_2->cloned_command);
      }
      if (!(!!(cmd_2->upkeep_label)))
      {
        cmd_2->upkeep_label = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
      }
      THIS->target_cmd = cmd_2;
      return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
    }
  }
  throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[726] )));
}

void RogueCmdNextIteration__trace_used_code( RogueClassCmdNextIteration* THIS )
{
}

void RogueCmdNextIteration__write_cpp__CPPWriter_Logical( RogueClassCmdNextIteration* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[792] );
}

RogueClassCmdNextIteration* RogueCmdNextIteration__init_object( RogueClassCmdNextIteration* THIS )
{
  return (RogueClassCmdNextIteration*)(THIS);
}

RogueClassCmdNextIteration* RogueCmdNextIteration__init__Token_CmdControlStructure( RogueClassCmdNextIteration* THIS, RogueClassToken* _auto_666_0, RogueClassCmdControlStructure* _auto_667_1 )
{
  THIS->target_cmd = _auto_667_1;
  THIS->t = _auto_666_0;
  return (RogueClassCmdNextIteration*)(THIS);
}

RogueString* RogueCmdNecessary__type_name( RogueClassCmdNecessary* THIS )
{
  return (RogueString*)(Rogue_literal_strings[665]);
}

RogueClassCmd* RogueCmdNecessary__clone__CloneArgs( RogueClassCmdNecessary* THIS, RogueClassCloneArgs* clone_args_0 )
{
  if (!!(THIS->target_cmd->unsatisfied_section))
  {
    RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
    RogueClassCmd* cmd_jump_2 = (((RogueTaskArgs__create_escape__Token_CmdTaskControlSection( task_args_1, THIS->t, THIS->target_cmd->unsatisfied_section ))));
    if (!!(THIS->condition))
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdIf__init__Token_Cmd_CmdStatementList_Integer( ((RogueClassCmdIf*)ROGUE_CREATE_OBJECT(CmdIf)), THIS->t, ((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->condition), ((RogueClassCloneArgs*)(task_args_1)) )) ))))), ((RogueCmdStatementList__init__Cmd( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)), cmd_jump_2 ))), 2 ))))));
    }
    else
    {
      return (RogueClassCmd*)(cmd_jump_2);
    }
  }
  else
  {
    RogueClassCmdControlStructure* new_target_3 = (((RogueClassCmdControlStructure*)(THIS->target_cmd)));
    while (!!(new_target_3->cloned_command))
    {
      new_target_3 = ((RogueClassCmdControlStructure*)new_target_3->cloned_command);
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdNecessary__init__Token_Cmd_CmdContingent( ((RogueClassCmdNecessary*)ROGUE_CREATE_OBJECT(CmdNecessary)), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->condition, clone_args_0 ))), ((RogueClassCmdContingent*)(RogueObject_as(new_target_3,RogueTypeCmdContingent))) ))))));
  }
}

RogueClassCmd* RogueCmdNecessary__resolve__Scope( RogueClassCmdNecessary* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->condition))
  {
    THIS->condition = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->condition), scope_0 ));
  }
  RogueInteger i_1 = (scope_0->control_stack->count);
  while (i_1 > 0)
  {
    --i_1;
    RogueClassCmdControlStructure* cmd_2 = (((RogueClassCmdControlStructure*)(scope_0->control_stack->data->objects[i_1])));
    if (cmd_2->_control_type == 1)
    {
      while (!!(cmd_2->cloned_command))
      {
        cmd_2 = ((RogueClassCmdControlStructure*)cmd_2->cloned_command);
      }
      RogueClassCmdContingent* cmd_contingent_3 = (((RogueClassCmdContingent*)(RogueObject_as(cmd_2,RogueTypeCmdContingent))));
      if (!(!!(cmd_contingent_3->unsatisfied_label)))
      {
        cmd_contingent_3->unsatisfied_label = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
      }
      THIS->target_cmd = cmd_contingent_3;
      return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
    }
  }
  throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[727] )));
}

void RogueCmdNecessary__trace_used_code( RogueClassCmdNecessary* THIS )
{
  if (!!(THIS->condition))
  {
    call_ROGUEM48( 26, (RogueClassCmd*)(THIS->condition) );
  }
}

void RogueCmdNecessary__write_cpp__CPPWriter_Logical( RogueClassCmdNecessary* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[793] );
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->condition), writer_0, false );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[794] ))), THIS->target_cmd->unsatisfied_label );
}

RogueClassCmdNecessary* RogueCmdNecessary__init_object( RogueClassCmdNecessary* THIS )
{
  return (RogueClassCmdNecessary*)(THIS);
}

RogueClassCmdNecessary* RogueCmdNecessary__init__Token_Cmd_CmdContingent( RogueClassCmdNecessary* THIS, RogueClassToken* _auto_668_0, RogueClassCmd* _auto_669_1, RogueClassCmdContingent* _auto_670_2 )
{
  THIS->target_cmd = _auto_670_2;
  THIS->condition = _auto_669_1;
  THIS->t = _auto_668_0;
  return (RogueClassCmdNecessary*)(THIS);
}

RogueString* RogueCmdSufficient__type_name( RogueClassCmdSufficient* THIS )
{
  return (RogueString*)(Rogue_literal_strings[666]);
}

RogueClassCmd* RogueCmdSufficient__clone__CloneArgs( RogueClassCmdSufficient* THIS, RogueClassCloneArgs* clone_args_0 )
{
  if (!!(THIS->target_cmd->satisfied_section))
  {
    RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
    RogueClassCmd* cmd_jump_2 = (((RogueTaskArgs__create_escape__Token_CmdTaskControlSection( task_args_1, THIS->t, THIS->target_cmd->satisfied_section ))));
    if (!!(THIS->condition))
    {
      return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdIf__init__Token_Cmd_CmdStatementList_Integer( ((RogueClassCmdIf*)ROGUE_CREATE_OBJECT(CmdIf)), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->condition), ((RogueClassCloneArgs*)(task_args_1)) )), ((RogueCmdStatementList__init__Cmd( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)), cmd_jump_2 ))), 2 ))))));
    }
    else
    {
      return (RogueClassCmd*)(cmd_jump_2);
    }
  }
  else
  {
    RogueClassCmdControlStructure* new_target_3 = (((RogueClassCmdControlStructure*)(THIS->target_cmd)));
    while (!!(new_target_3->cloned_command))
    {
      new_target_3 = ((RogueClassCmdControlStructure*)new_target_3->cloned_command);
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdSufficient__init__Token_Cmd_CmdContingent( ((RogueClassCmdSufficient*)ROGUE_CREATE_OBJECT(CmdSufficient)), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->condition, clone_args_0 ))), ((RogueClassCmdContingent*)(RogueObject_as(new_target_3,RogueTypeCmdContingent))) ))))));
  }
}

RogueClassCmd* RogueCmdSufficient__resolve__Scope( RogueClassCmdSufficient* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->condition))
  {
    THIS->condition = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->condition), scope_0 ));
  }
  RogueInteger i_1 = (scope_0->control_stack->count);
  while (i_1 > 0)
  {
    --i_1;
    RogueClassCmdControlStructure* cmd_2 = (((RogueClassCmdControlStructure*)(scope_0->control_stack->data->objects[i_1])));
    if (cmd_2->_control_type == 1)
    {
      while (!!(cmd_2->cloned_command))
      {
        cmd_2 = ((RogueClassCmdControlStructure*)cmd_2->cloned_command);
      }
      RogueClassCmdContingent* cmd_contingent_3 = (((RogueClassCmdContingent*)(RogueObject_as(cmd_2,RogueTypeCmdContingent))));
      if (!(!!(cmd_contingent_3->satisfied_label)))
      {
        cmd_contingent_3->satisfied_label = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
      }
      THIS->target_cmd = cmd_contingent_3;
      return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
    }
  }
  throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[727] )));
}

void RogueCmdSufficient__trace_used_code( RogueClassCmdSufficient* THIS )
{
  if (!!(THIS->condition))
  {
    call_ROGUEM48( 26, (RogueClassCmd*)(THIS->condition) );
  }
}

void RogueCmdSufficient__write_cpp__CPPWriter_Logical( RogueClassCmdSufficient* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[787] );
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->condition), writer_0, false );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[795] ))), THIS->target_cmd->satisfied_label );
}

RogueClassCmdSufficient* RogueCmdSufficient__init_object( RogueClassCmdSufficient* THIS )
{
  return (RogueClassCmdSufficient*)(THIS);
}

RogueClassCmdSufficient* RogueCmdSufficient__init__Token_Cmd_CmdContingent( RogueClassCmdSufficient* THIS, RogueClassToken* _auto_671_0, RogueClassCmd* _auto_672_1, RogueClassCmdContingent* _auto_673_2 )
{
  THIS->target_cmd = _auto_673_2;
  THIS->condition = _auto_672_1;
  THIS->t = _auto_671_0;
  return (RogueClassCmdSufficient*)(THIS);
}

RogueString* RogueCmdAdjust__type_name( RogueClassCmdAdjust* THIS )
{
  return (RogueString*)(Rogue_literal_strings[667]);
}

RogueClassCmd* RogueCmdAdjust__resolve__Scope( RogueClassCmdAdjust* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->operand), scope_0 ));
  return (RogueClassCmd*)((call_ROGUEM50( 24, (RogueClassCmd*)(THIS->operand), scope_0, THIS->delta )));
}

RogueClassCmdAdjust* RogueCmdAdjust__init_object( RogueClassCmdAdjust* THIS )
{
  return (RogueClassCmdAdjust*)(THIS);
}

RogueClassCmdAdjust* RogueCmdAdjust__init__Token_Cmd_Integer( RogueClassCmdAdjust* THIS, RogueClassToken* _auto_674_0, RogueClassCmd* _auto_675_1, RogueInteger _auto_676_2 )
{
  THIS->delta = _auto_676_2;
  THIS->operand = _auto_675_1;
  THIS->t = _auto_674_0;
  return (RogueClassCmdAdjust*)(THIS);
}

RogueString* RogueCmdOpWithAssign__type_name( RogueClassCmdOpWithAssign* THIS )
{
  return (RogueString*)(Rogue_literal_strings[668]);
}

RogueClassCmd* RogueCmdOpWithAssign__clone__CloneArgs( RogueClassCmdOpWithAssign* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdOpWithAssign__init__Token_Cmd_TokenType_Cmd( ((RogueClassCmdOpWithAssign*)ROGUE_CREATE_OBJECT(CmdOpWithAssign)), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->target), clone_args_0 )), THIS->op, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdOpWithAssign__resolve__Scope( RogueClassCmdOpWithAssign* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)((call_ROGUEM51( 25, (RogueClassCmd*)(THIS->target), scope_0, THIS->op, THIS->new_value )));
}

RogueClassCmdOpWithAssign* RogueCmdOpWithAssign__init_object( RogueClassCmdOpWithAssign* THIS )
{
  return (RogueClassCmdOpWithAssign*)(THIS);
}

RogueClassCmdOpWithAssign* RogueCmdOpWithAssign__init__Token_Cmd_TokenType_Cmd( RogueClassCmdOpWithAssign* THIS, RogueClassToken* _auto_677_0, RogueClassCmd* _auto_678_1, RogueClassTokenType* _auto_679_2, RogueClassCmd* _auto_680_3 )
{
  THIS->new_value = _auto_680_3;
  THIS->op = _auto_679_2;
  THIS->target = _auto_678_1;
  THIS->t = _auto_677_0;
  return (RogueClassCmdOpWithAssign*)(THIS);
}

RogueString* RogueCmdWhichCaseList__to_String( RogueCmdWhichCaseList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueCmdWhichCaseList* _auto_1077_2 = (THIS);
    RogueInteger _auto_1078_3 = (0);
    for (;_auto_1078_3 < _auto_1077_2->count;++_auto_1078_3)
    {
      RogueClassCmdWhichCase* value_4 = (((RogueClassCmdWhichCase*)(_auto_1077_2->data->objects[_auto_1078_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdWhichCaseList__type_name( RogueCmdWhichCaseList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[944]);
}

RogueCmdWhichCaseList* RogueCmdWhichCaseList__init_object( RogueCmdWhichCaseList* THIS )
{
  return (RogueCmdWhichCaseList*)(THIS);
}

RogueCmdWhichCaseList* RogueCmdWhichCaseList__init( RogueCmdWhichCaseList* THIS )
{
  RogueCmdWhichCaseList__init__Integer( THIS, 10 );
  return (RogueCmdWhichCaseList*)(THIS);
}

RogueCmdWhichCaseList* RogueCmdWhichCaseList__init__Integer( RogueCmdWhichCaseList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassCmdWhichCase*), true );
  return (RogueCmdWhichCaseList*)(THIS);
}

RogueCmdWhichCaseList* RogueCmdWhichCaseList__add__CmdWhichCase( RogueCmdWhichCaseList* THIS, RogueClassCmdWhichCase* value_0 )
{
  ((RogueCmdWhichCaseList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdWhichCaseList*)(THIS);
}

RogueInteger RogueCmdWhichCaseList__capacity( RogueCmdWhichCaseList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueCmdWhichCaseList* RogueCmdWhichCaseList__reserve__Integer( RogueCmdWhichCaseList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassCmdWhichCase*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueCmdWhichCaseList__capacity( THIS ))) + ((RogueCmdWhichCaseList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassCmdWhichCase*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdWhichCaseList*)(THIS);
}

RogueString* RogueCmdWhichCase__type_name( RogueClassCmdWhichCase* THIS )
{
  return (RogueString*)(Rogue_literal_strings[669]);
}

RogueClassCmdWhichCase* RogueCmdWhichCase__clone__CloneArgs( RogueClassCmdWhichCase* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdWhichCase*)(((RogueCmdWhichCase__init__Token_CmdArgs_CmdStatementList( ((RogueClassCmdWhichCase*)ROGUE_CREATE_OBJECT(CmdWhichCase)), THIS->t, ((RogueCmdArgs__clone__CloneArgs( THIS->conditions, clone_args_0 ))), ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 ))) ))));
}

void RogueCmdWhichCase__trace_used_code( RogueClassCmdWhichCase* THIS )
{
  {
    RogueClassCmdArgs* _auto_1087_0 = (THIS->conditions);
    RogueInteger _auto_1088_1 = (0);
    for (;_auto_1088_1 < _auto_1087_0->count;++_auto_1088_1)
    {
      RogueClassCmd* condition_2 = (((RogueClassCmd*)(_auto_1087_0->data->objects[_auto_1088_1])));
      call_ROGUEM48( 26, (RogueClassCmd*)(condition_2) );
    }
  }
  RogueCmdStatementList__trace_used_code( THIS->statements );
}

RogueClassCmdWhichCase* RogueCmdWhichCase__init_object( RogueClassCmdWhichCase* THIS )
{
  return (RogueClassCmdWhichCase*)(THIS);
}

RogueClassCmdWhichCase* RogueCmdWhichCase__init__Token_CmdArgs_CmdStatementList( RogueClassCmdWhichCase* THIS, RogueClassToken* _auto_681_0, RogueClassCmdArgs* _auto_682_1, RogueClassCmdStatementList* _auto_683_2 )
{
  THIS->statements = _auto_683_2;
  THIS->conditions = _auto_682_1;
  THIS->t = _auto_681_0;
  return (RogueClassCmdWhichCase*)(THIS);
}

RogueClassCmd* RogueCmdWhichCase__as_conditional__String( RogueClassCmdWhichCase* THIS, RogueString* expression_var_name_0 )
{
  RogueClassCmd* cmd_1 = 0;
  {
    RogueClassCmdArgs* _auto_1089_2 = (THIS->conditions);
    RogueInteger _auto_1090_3 = (0);
    for (;_auto_1090_3 < _auto_1089_2->count;++_auto_1090_3)
    {
      RogueClassCmd* condition_4 = (((RogueClassCmd*)(_auto_1089_2->data->objects[_auto_1090_3])));
      if (!!(cmd_1))
      {
        cmd_1 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdLogicalOr*)ROGUE_CREATE_OBJECT(CmdLogicalOr))), THIS->t, cmd_1, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)ROGUE_CREATE_OBJECT(CmdCompareEQ))), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, expression_var_name_0 ))))), condition_4 ))))) ))))));
      }
      else
      {
        cmd_1 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)ROGUE_CREATE_OBJECT(CmdCompareEQ))), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, expression_var_name_0 ))))), condition_4 ))))));
      }
    }
  }
  return (RogueClassCmd*)(cmd_1);
}

RogueString* RogueCmdCatchList__to_String( RogueCmdCatchList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueCmdCatchList* _auto_1091_2 = (THIS);
    RogueInteger _auto_1092_3 = (0);
    for (;_auto_1092_3 < _auto_1091_2->count;++_auto_1092_3)
    {
      RogueClassCmdCatch* value_4 = (((RogueClassCmdCatch*)(_auto_1091_2->data->objects[_auto_1092_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdCatchList__type_name( RogueCmdCatchList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[945]);
}

RogueCmdCatchList* RogueCmdCatchList__init_object( RogueCmdCatchList* THIS )
{
  return (RogueCmdCatchList*)(THIS);
}

RogueCmdCatchList* RogueCmdCatchList__init( RogueCmdCatchList* THIS )
{
  RogueCmdCatchList__init__Integer( THIS, 10 );
  return (RogueCmdCatchList*)(THIS);
}

RogueCmdCatchList* RogueCmdCatchList__init__Integer( RogueCmdCatchList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassCmdCatch*), true );
  return (RogueCmdCatchList*)(THIS);
}

RogueCmdCatchList* RogueCmdCatchList__add__CmdCatch( RogueCmdCatchList* THIS, RogueClassCmdCatch* value_0 )
{
  ((RogueCmdCatchList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdCatchList*)(THIS);
}

RogueInteger RogueCmdCatchList__capacity( RogueCmdCatchList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueCmdCatchList* RogueCmdCatchList__reserve__Integer( RogueCmdCatchList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassCmdCatch*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueCmdCatchList__capacity( THIS ))) + ((RogueCmdCatchList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassCmdCatch*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdCatchList*)(THIS);
}

RogueString* RogueCmdCatch__type_name( RogueClassCmdCatch* THIS )
{
  return (RogueString*)(Rogue_literal_strings[670]);
}

RogueClassCmdCatch* RogueCmdCatch__clone__CloneArgs( RogueClassCmdCatch* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdCatch*)(((RogueCmdCatch__init__Token_Local_CmdStatementList( ((RogueClassCmdCatch*)ROGUE_CREATE_OBJECT(CmdCatch)), THIS->t, THIS->error_var, ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 ))) ))));
}

RogueClassCmd* RogueCmdCatch__resolve__Scope( RogueClassCmdCatch* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->error_var->_type );
  if (!(((RogueType__instance_of__Type( THIS->error_var->_type, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Error )))))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[718] )));
  }
  RogueScope__push_local__Local_Logical( scope_0, THIS->error_var, true );
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  RogueScope__pop_local( scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdCatch__trace_used_code( RogueClassCmdCatch* THIS )
{
  RogueCmdStatementList__trace_used_code( THIS->statements );
}

void RogueCmdCatch__write_cpp__CPPWriter_Logical( RogueClassCmdCatch* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[790] ))), THIS->error_var->_type ))), Rogue_literal_strings[255] ))), ((RogueLocal__cpp_name( THIS->error_var ))) ))), Rogue_literal_strings[448] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[174] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, false );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[97] );
}

RogueClassCmdCatch* RogueCmdCatch__init_object( RogueClassCmdCatch* THIS )
{
  return (RogueClassCmdCatch*)(THIS);
}

RogueClassCmdCatch* RogueCmdCatch__init__Token_Local_CmdStatementList( RogueClassCmdCatch* THIS, RogueClassToken* _auto_685_0, RogueClassLocal* _auto_686_1, RogueClassCmdStatementList* _auto_687_2 )
{
  THIS->statements = _auto_687_2;
  THIS->error_var = _auto_686_1;
  THIS->t = _auto_685_0;
  return (RogueClassCmdCatch*)(THIS);
}

RogueString* RogueCmdLocalDeclaration__type_name( RogueClassCmdLocalDeclaration* THIS )
{
  return (RogueString*)(Rogue_literal_strings[836]);
}

RogueClassCmd* RogueCmdLocalDeclaration__clone__CloneArgs( RogueClassCmdLocalDeclaration* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if (!!(task_args_1))
  {
    RogueClassCmd* new_value_2 = (THIS->local_info->initial_value);
    if (!!(new_value_2))
    {
      new_value_2 = ((RogueClassCmd*)(call_ROGUEM44( 5, (RogueClassCmd*)(new_value_2), clone_args_0 )));
    }
    return (RogueClassCmd*)(((RogueTaskArgs__replace_write_local__Token_Local_Cmd( task_args_1, THIS->t, THIS->local_info, new_value_2 ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local( ((RogueClassCmdLocalDeclaration*)ROGUE_CREATE_OBJECT(CmdLocalDeclaration)), THIS->t, THIS->local_info ))))));
  }
}

void RogueCmdLocalDeclaration__exit_scope__Scope( RogueClassCmdLocalDeclaration* THIS, RogueClassScope* scope_0 )
{
  RogueScope__pop_local( scope_0 );
}

RogueClassCmd* RogueCmdLocalDeclaration__resolve__Scope( RogueClassCmdLocalDeclaration* THIS, RogueClassScope* scope_0 )
{
  RogueScope__push_local__Local_Logical( scope_0, THIS->local_info, true );
  if (!!(THIS->local_info->initial_value))
  {
    THIS->local_info->initial_value = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->local_info->initial_value), scope_0 ));
    RogueClassType* initial_value_type_1 = (((Rogue_Cmd__require_type( THIS->local_info->initial_value ))));
    if (THIS->local_info->_type == NULL)
    {
      THIS->local_info->_type = initial_value_type_1;
    }
  }
  if (THIS->local_info->_type == NULL)
  {
    throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[729] ))), THIS->local_info->name ))), Rogue_literal_strings[730] ))), THIS->local_info->name ))), Rogue_literal_strings[731] ))) ))) )));
  }
  if (!!(THIS->local_info->initial_value))
  {
    THIS->local_info->initial_value = (call_ROGUEM42( 22, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->local_info->initial_value), THIS->local_info->_type ))), scope_0 ));
  }
  RogueType__organize( THIS->local_info->_type );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdLocalDeclaration__trace_used_code( RogueClassCmdLocalDeclaration* THIS )
{
  RogueType__trace_used_code( THIS->local_info->_type );
  if (!!(THIS->local_info->initial_value))
  {
    call_ROGUEM48( 26, (RogueClassCmd*)(THIS->local_info->initial_value) );
  }
}

void RogueCmdLocalDeclaration__write_cpp__CPPWriter_Logical( RogueClassCmdLocalDeclaration* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( writer_0, THIS->local_info->_type ))), Rogue_literal_strings[255] ))), ((RogueLocal__cpp_name( THIS->local_info ))) ))), Rogue_literal_strings[455] );
  if (!!(THIS->local_info->initial_value))
  {
    RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[176] ))), (call_ROGUEM46( 27, (RogueClassCmd*)(THIS->local_info->initial_value) )), THIS->local_info->_type );
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->local_info->initial_value), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] );
  }
  else
  {
    RogueCPPWriter__print_default_value__Type( writer_0, THIS->local_info->_type );
  }
}

RogueClassCmdLocalDeclaration* RogueCmdLocalDeclaration__init_object( RogueClassCmdLocalDeclaration* THIS )
{
  return (RogueClassCmdLocalDeclaration*)(THIS);
}

RogueClassCmdLocalDeclaration* RogueCmdLocalDeclaration__init__Token_Local( RogueClassCmdLocalDeclaration* THIS, RogueClassToken* _auto_695_0, RogueClassLocal* _auto_696_1 )
{
  THIS->local_info = _auto_696_1;
  THIS->t = _auto_695_0;
  return (RogueClassCmdLocalDeclaration*)(THIS);
}

RogueString* RogueCmdAdjustLocal__type_name( RogueClassCmdAdjustLocal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[671]);
}

RogueClassCmd* RogueCmdAdjustLocal__clone__CloneArgs( RogueClassCmdAdjustLocal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if (!!(task_args_1))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAdjust__init__Token_Cmd_Integer( ((RogueClassCmdAdjust*)ROGUE_CREATE_OBJECT(CmdAdjust)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueTaskArgs__cmd_read_this__Token( task_args_1, THIS->t ))), ((RogueTaskArgs__convert_local_name__Local( task_args_1, THIS->local_info ))) ))))), THIS->delta ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Integer( ((RogueClassCmdAdjustLocal*)ROGUE_CREATE_OBJECT(CmdAdjustLocal)), THIS->t, THIS->local_info, THIS->delta ))))));
  }
}

RogueClassCmd* RogueCmdAdjustLocal__resolve__Scope( RogueClassCmdAdjustLocal* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdAdjustLocal__trace_used_code( RogueClassCmdAdjustLocal* THIS )
{
  RogueType__trace_used_code( THIS->local_info->_type );
}

RogueClassType* Rogue_CmdAdjustLocal__type( RogueClassCmdAdjustLocal* THIS )
{
  return (RogueClassType*)(THIS->local_info->_type);
}

void RogueCmdAdjustLocal__write_cpp__CPPWriter_Logical( RogueClassCmdAdjustLocal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (THIS->delta > 0)
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[182] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[4] );
  }
  RogueCPPWriter__print__String( writer_0, ((RogueLocal__cpp_name( THIS->local_info ))) );
}

RogueClassCmdAdjustLocal* RogueCmdAdjustLocal__init_object( RogueClassCmdAdjustLocal* THIS )
{
  return (RogueClassCmdAdjustLocal*)(THIS);
}

RogueClassCmdAdjustLocal* RogueCmdAdjustLocal__init__Token_Local_Integer( RogueClassCmdAdjustLocal* THIS, RogueClassToken* _auto_701_0, RogueClassLocal* _auto_702_1, RogueInteger _auto_703_2 )
{
  THIS->delta = _auto_703_2;
  THIS->local_info = _auto_702_1;
  THIS->t = _auto_701_0;
  return (RogueClassCmdAdjustLocal*)(THIS);
}

RogueString* RogueCmdReadLocal__type_name( RogueClassCmdReadLocal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[672]);
}

RogueClassCmd* RogueCmdReadLocal__clone__CloneArgs( RogueClassCmdReadLocal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassMacroArgs* macro_args_1 = (((RogueClassMacroArgs*)(RogueObject_as(clone_args_0,RogueTypeMacroArgs))));
  if (!!(macro_args_1))
  {
    return (RogueClassCmd*)(((RogueMacroArgs__inline_read_local__CmdReadLocal( macro_args_1, THIS ))));
  }
  else
  {
    RogueClassTaskArgs* task_args_2 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
    if (!!(task_args_2))
    {
      return (RogueClassCmd*)(((RogueTaskArgs__cmd_read__Token_Local( task_args_2, THIS->t, THIS->local_info ))));
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, THIS->local_info ))))));
}

RogueClassCmd* RogueCmdReadLocal__resolve__Scope( RogueClassCmdReadLocal* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->local_info->_type );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdReadLocal__resolve_modify__Scope_Integer( RogueClassCmdReadLocal* THIS, RogueClassScope* scope_0, RogueInteger delta_1 )
{
  return (RogueClassCmd*)(((RogueCmdAdjustLocal__resolve__Scope( ((RogueCmdAdjustLocal__init__Token_Local_Integer( ((RogueClassCmdAdjustLocal*)ROGUE_CREATE_OBJECT(CmdAdjustLocal)), THIS->t, THIS->local_info, delta_1 ))), scope_0 ))));
}

void RogueCmdReadLocal__trace_used_code( RogueClassCmdReadLocal* THIS )
{
  RogueType__trace_used_code( THIS->local_info->_type );
}

RogueClassType* Rogue_CmdReadLocal__type( RogueClassCmdReadLocal* THIS )
{
  return (RogueClassType*)(THIS->local_info->_type);
}

void RogueCmdReadLocal__write_cpp__CPPWriter_Logical( RogueClassCmdReadLocal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, ((RogueLocal__cpp_name( THIS->local_info ))) );
}

RogueClassCmdReadLocal* RogueCmdReadLocal__init_object( RogueClassCmdReadLocal* THIS )
{
  return (RogueClassCmdReadLocal*)(THIS);
}

RogueClassCmdReadLocal* RogueCmdReadLocal__init__Token_Local( RogueClassCmdReadLocal* THIS, RogueClassToken* _auto_704_0, RogueClassLocal* _auto_705_1 )
{
  THIS->local_info = _auto_705_1;
  THIS->t = _auto_704_0;
  return (RogueClassCmdReadLocal*)(THIS);
}

RogueString* RogueCmdCompareLE__type_name( RogueClassCmdCompareLE* THIS )
{
  return (RogueString*)(Rogue_literal_strings[971]);
}

RogueClassCmd* RogueCmdCompareLE__clone__CloneArgs( RogueClassCmdCompareLE* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLE*)ROGUE_CREATE_OBJECT(CmdCompareLE))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdCompareLE__combine_literal_operands__Type( RogueClassCmdCompareLE* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal)))->value <= ((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal)))->value ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInteger)))->value <= ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInteger)))->value ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareLE* RogueCmdCompareLE__init_object( RogueClassCmdCompareLE* THIS )
{
  return (RogueClassCmdCompareLE*)(THIS);
}

RogueString* RogueCmdCompareLE__symbol( RogueClassCmdCompareLE* THIS )
{
  return (RogueString*)(Rogue_literal_strings[169]);
}

RogueClassCmd* RogueCmdCompareLE__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareLE* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  RogueClassCmd* cmd_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[910], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[908], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM204( 22, (RogueClassCmdBinary*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareNE*)ROGUE_CREATE_OBJECT(CmdCompareNE))), THIS->t, cmd_4, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, 1 ))))) )))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[911], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[912], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[913], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[910], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), true, false ))));
}

RogueString* RogueCmdRange__type_name( RogueClassCmdRange* THIS )
{
  return (RogueString*)(Rogue_literal_strings[673]);
}

void RogueCmdRange__trace_used_code( RogueClassCmdRange* THIS )
{
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->first) );
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->last) );
  if (!!(THIS->step_size))
  {
    call_ROGUEM48( 26, (RogueClassCmd*)(THIS->step_size) );
  }
}

RogueClassCmdRange* RogueCmdRange__init_object( RogueClassCmdRange* THIS )
{
  return (RogueClassCmdRange*)(THIS);
}

RogueClassCmdRange* RogueCmdRange__init__Token_Cmd_Cmd_Cmd( RogueClassCmdRange* THIS, RogueClassToken* _auto_706_0, RogueClassCmd* _auto_707_1, RogueClassCmd* _auto_708_2, RogueClassCmd* _auto_709_3 )
{
  THIS->step_size = _auto_709_3;
  THIS->last = _auto_708_2;
  THIS->first = _auto_707_1;
  THIS->t = _auto_706_0;
  return (RogueClassCmdRange*)(THIS);
}

RogueString* RogueCmdLocalOpWithAssign__type_name( RogueClassCmdLocalOpWithAssign* THIS )
{
  return (RogueString*)(Rogue_literal_strings[901]);
}

RogueClassCmd* RogueCmdLocalOpWithAssign__clone__CloneArgs( RogueClassCmdLocalOpWithAssign* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if (!!(task_args_1))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdOpWithAssign__init__Token_Cmd_TokenType_Cmd( ((RogueClassCmdOpWithAssign*)ROGUE_CREATE_OBJECT(CmdOpWithAssign)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), THIS->t, task_args_1->_task_type ))))), ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), THIS->local_info->name ))), Rogue_literal_strings[354] ))), ((RogueInteger__to_String( THIS->local_info->index ))) ))) ))) ))))), THIS->op, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->new_value), ((RogueClassCloneArgs*)(task_args_1)) )) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLocalOpWithAssign__init__Token_Local_TokenType_Cmd( ((RogueClassCmdLocalOpWithAssign*)ROGUE_CREATE_OBJECT(CmdLocalOpWithAssign)), THIS->t, THIS->local_info, THIS->op, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
  }
}

RogueClassCmd* RogueCmdLocalOpWithAssign__resolve__Scope( RogueClassCmdLocalOpWithAssign* THIS, RogueClassScope* scope_0 )
{
  if (((RogueType__is_reference( THIS->local_info->_type ))))
  {
    RogueString* m_name_1 = (((RogueString__operatorPLUS__String( Rogue_literal_strings[296], ((RogueTokenType__to_String( THIS->op ))) ))));
    if (!!(((RogueString_MethodListTable__get__String( THIS->local_info->_type->method_lookup_by_name, m_name_1 )))))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_Cmd( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, THIS->local_info ))))), m_name_1, THIS->new_value ))), scope_0 ))));
    }
    else
    {
      m_name_1 = ((RogueString*)((RogueString__leftmost__Integer( m_name_1, -1 ))));
      if (!!(((RogueString_MethodListTable__get__String( THIS->local_info->_type->method_lookup_by_name, m_name_1 )))))
      {
        return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ((RogueCmdWriteLocal__init__Token_Local_Cmd( ((RogueClassCmdWriteLocal*)ROGUE_CREATE_OBJECT(CmdWriteLocal)), THIS->t, THIS->local_info, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, THIS->local_info ))))), m_name_1, THIS->new_value ))))) ))), scope_0 ))));
      }
      else
      {
        RogueString* arg_type_2 = ((call_ROGUEM46( 27, (RogueClassCmd*)(THIS->new_value) ))->name);
        throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[732] ))), ((RogueType__to_String( THIS->local_info->_type ))) ))), Rogue_literal_strings[733] ))), m_name_1 ))), Rogue_literal_strings[734] ))), arg_type_2 ))), Rogue_literal_strings[735] ))), m_name_1 ))), Rogue_literal_strings[736] ))), arg_type_2 ))), Rogue_literal_strings[342] ))) ))) )));
      }
    }
  }
  {
    RogueClassTokenType* _auto_1101_4 = (THIS->op);
    if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_1101_4), ((RogueObject*)(RogueTokenType_symbol_caret_equals)) ))))
    {
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->target, Rogue_literal_strings[1] ))) == 0)
      {
        return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ((RogueCmdWriteLocal__init__Token_Local_Cmd( ((RogueClassCmdWriteLocal*)ROGUE_CREATE_OBJECT(CmdWriteLocal)), THIS->t, THIS->local_info, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdPower*)ROGUE_CREATE_OBJECT(CmdPower))), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, THIS->local_info ))))), THIS->new_value ))))) ))), scope_0 ))));
      }
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_1101_4), ((RogueObject*)(RogueTokenType_symbol_percent_equals)) ))))
    {
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->target, Rogue_literal_strings[1] ))) == 0)
      {
        return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ((RogueCmdWriteLocal__init__Token_Local_Cmd( ((RogueClassCmdWriteLocal*)ROGUE_CREATE_OBJECT(CmdWriteLocal)), THIS->t, THIS->local_info, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMod*)ROGUE_CREATE_OBJECT(CmdMod))), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, THIS->local_info ))))), THIS->new_value ))))) ))), scope_0 ))));
      }
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_1101_4), ((RogueObject*)(RogueTokenType_symbol_dot_equals)) ))))
    {
      RogueClassCmdAccess* access_3 = (((RogueClassCmdAccess*)(RogueObject_as(THIS->new_value,RogueTypeCmdAccess))));
      if (!(!!(access_3)))
      {
        throw ((RogueToken__error__String( THIS->new_value->t, Rogue_literal_strings[737] )));
      }
      if (!!(access_3->context))
      {
        throw ((RogueToken__error__String( access_3->t, Rogue_literal_strings[738] )));
      }
      access_3->context = ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, THIS->local_info )))));
      return (RogueClassCmd*)(((RogueCmdWriteLocal__resolve__Scope( ((RogueCmdWriteLocal__init__Token_Local_Cmd( ((RogueClassCmdWriteLocal*)ROGUE_CREATE_OBJECT(CmdWriteLocal)), THIS->t, THIS->local_info, ((RogueClassCmd*)(access_3)) ))), scope_0 ))));
    }
  }
  THIS->new_value = (call_ROGUEM42( 22, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)((call_ROGUEM42( 22, (RogueClassCmd*)(THIS->new_value), scope_0 ))), THIS->local_info->_type ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdLocalOpWithAssign__trace_used_code( RogueClassCmdLocalOpWithAssign* THIS )
{
  RogueType__trace_used_code( THIS->local_info->_type );
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->new_value) );
}

RogueClassType* Rogue_CmdLocalOpWithAssign__type( RogueClassCmdLocalOpWithAssign* THIS )
{
  return (RogueClassType*)(THIS->local_info->_type);
}

void RogueCmdLocalOpWithAssign__write_cpp__CPPWriter_Logical( RogueClassCmdLocalOpWithAssign* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, ((RogueLocal__cpp_name( THIS->local_info ))) ))), Rogue_literal_strings[255] ))), ((RogueCmdResolvedOpWithAssign__cpp_symbol( ((RogueClassCmdResolvedOpWithAssign*)THIS) ))) ))), Rogue_literal_strings[255] );
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->new_value), writer_0, false );
}

RogueClassCmdLocalOpWithAssign* RogueCmdLocalOpWithAssign__init_object( RogueClassCmdLocalOpWithAssign* THIS )
{
  return (RogueClassCmdLocalOpWithAssign*)(THIS);
}

RogueClassCmdLocalOpWithAssign* RogueCmdLocalOpWithAssign__init__Token_Local_TokenType_Cmd( RogueClassCmdLocalOpWithAssign* THIS, RogueClassToken* _auto_710_0, RogueClassLocal* _auto_711_1, RogueClassTokenType* _auto_712_2, RogueClassCmd* _auto_713_3 )
{
  THIS->new_value = _auto_713_3;
  THIS->op = _auto_712_2;
  THIS->local_info = _auto_711_1;
  THIS->t = _auto_710_0;
  return (RogueClassCmdLocalOpWithAssign*)(THIS);
}

RogueString* RogueCmdResolvedOpWithAssign__type_name( RogueClassCmdResolvedOpWithAssign* THIS )
{
  return (RogueString*)(Rogue_literal_strings[674]);
}

RogueClassCmdResolvedOpWithAssign* RogueCmdResolvedOpWithAssign__init_object( RogueClassCmdResolvedOpWithAssign* THIS )
{
  return (RogueClassCmdResolvedOpWithAssign*)(THIS);
}

RogueString* RogueCmdResolvedOpWithAssign__symbol( RogueClassCmdResolvedOpWithAssign* THIS )
{
  if (THIS->op == RogueTokenType_symbol_tilde_equals)
  {
    return (RogueString*)(Rogue_literal_strings[154]);
  }
  return (RogueString*)(((RogueTokenType__to_String( THIS->op ))));
}

RogueString* RogueCmdResolvedOpWithAssign__cpp_symbol( RogueClassCmdResolvedOpWithAssign* THIS )
{
  return (RogueString*)(((RogueCmdResolvedOpWithAssign__symbol( THIS ))));
}

RogueString* RogueCmdForEach__type_name( RogueClassCmdForEach* THIS )
{
  return (RogueString*)(Rogue_literal_strings[850]);
}

RogueClassCmd* RogueCmdForEach__clone__CloneArgs( RogueClassCmdForEach* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdForEach* result_1 = (((RogueCmdForEach__init__Token_String_String_Cmd_Cmd_CmdStatementList( ((RogueClassCmdForEach*)ROGUE_CREATE_OBJECT(CmdForEach)), THIS->t, THIS->control_var_name, THIS->index_var_name, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->collection), clone_args_0 )), ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->step_cmd, clone_args_0 ))), ((RogueClassCmdStatementList*)(NULL)) ))));
  call_ROGUEM170( 30, (RogueClassCmdControlStructure*)(result_1), ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_1));
  result_1->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 )));
  return (RogueClassCmd*)(((RogueClassCmd*)(result_1)));
}

RogueClassCmd* RogueCmdForEach__resolve__Scope( RogueClassCmdForEach* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->collection = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->collection), scope_0 ));
  RogueClassType* collection_type_1 = (((RogueType__organize( ((Rogue_Cmd__require_type( THIS->collection ))) ))));
  RogueLogical has_count_2 = ((!!(((RogueType__find_property__String( collection_type_1, Rogue_literal_strings[701] )))) || !!(((RogueType__find_method__String( collection_type_1, Rogue_literal_strings[739] ))))));
  RogueClassMethod* m_at_3 = (((RogueType__find_method__String( collection_type_1, Rogue_literal_strings[740] ))));
  RogueClassMethod* m_get_4 = (((RogueType__find_method__String( collection_type_1, Rogue_literal_strings[741] ))));
  RogueLogical has_get_5 = ((!!(m_get_4) || !!(m_at_3)));
  RogueInteger step_size_6 = (1);
  if (!!(THIS->step_cmd))
  {
    THIS->step_cmd = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->step_cmd), scope_0 ));
    RogueClassCmdLiteralInteger* literal_integer_cmd_7 = (((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->step_cmd,RogueTypeCmdLiteralInteger))));
    if (!!(literal_integer_cmd_7))
    {
      step_size_6 = ((RogueInteger)literal_integer_cmd_7->value);
    }
    else
    {
      throw ((RogueToken__error__String( THIS->step_cmd->t, Rogue_literal_strings[742] )));
    }
  }
  if ((has_count_2 && has_get_5))
  {
    if (!!(m_at_3))
    {
      m_get_4 = ((RogueClassMethod*)m_at_3);
    }
    THIS->collection = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->collection), scope_0 ));
    RogueClassLocal* collection_var_8 = (((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), ((Rogue_Cmd__require_type( THIS->collection ))), THIS->collection ))));
    if (!(!!(THIS->index_var_name)))
    {
      THIS->index_var_name = ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) )));
    }
    RogueClassLocal* index_var_9 = (((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, THIS->index_var_name, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer, ((RogueClassCmd*)(NULL)) ))));
    RogueClassCmd* last_cmd_10 = 0;
    if (step_size_6 >= 0)
    {
      index_var_9->initial_value = ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, 0 )))));
      last_cmd_10 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, collection_var_8 ))))), Rogue_literal_strings[701] ))))));
    }
    else
    {
      index_var_9->initial_value = ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdSubtract*)ROGUE_CREATE_OBJECT(CmdSubtract))), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, collection_var_8 ))))), Rogue_literal_strings[701] ))))), ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, 1 ))))) )))));
      last_cmd_10 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, 0 ))))));
    }
    RogueClassLocal* control_var_11 = 0;
    if (!!(THIS->control_var_name))
    {
      control_var_11 = ((RogueClassLocal*)((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, THIS->control_var_name, ((RogueClassType*)(NULL)), ((RogueClassCmd*)(NULL)) ))));
      control_var_11->initial_value = ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, collection_var_8 ))))), m_get_4->name, ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, index_var_9 ))))) ))) )))));
      RogueCmdList__insert__Cmd_Integer( ((RogueCmdList*)THIS->statements), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local( ((RogueClassCmdLocalDeclaration*)ROGUE_CREATE_OBJECT(CmdLocalDeclaration)), control_var_11->t, control_var_11 ))))), 0 );
    }
    RogueClassCmd* modifier_12 = 0;
    if ((step_size_6 >= -1 && step_size_6 <= 1))
    {
      modifier_12 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Integer( ((RogueClassCmdAdjustLocal*)ROGUE_CREATE_OBJECT(CmdAdjustLocal)), THIS->t, index_var_9, step_size_6 ))))));
    }
    else if (step_size_6 >= 0)
    {
      modifier_12 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdOpWithAssign__init__Token_Cmd_TokenType_Cmd( ((RogueClassCmdOpWithAssign*)ROGUE_CREATE_OBJECT(CmdOpWithAssign)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, index_var_9->name ))))), RogueTokenType_symbol_plus_equals, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, step_size_6 ))))) ))))));
    }
    else
    {
      modifier_12 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdOpWithAssign__init__Token_Cmd_TokenType_Cmd( ((RogueClassCmdOpWithAssign*)ROGUE_CREATE_OBJECT(CmdOpWithAssign)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, index_var_9->name ))))), RogueTokenType_symbol_minus_equals, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, (-(step_size_6)) ))))) ))))));
    }
    RogueClassCmd* condition_13 = 0;
    if (step_size_6 >= 0)
    {
      condition_13 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLT*)ROGUE_CREATE_OBJECT(CmdCompareLT))), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, index_var_9 ))))), last_cmd_10 ))))));
    }
    else
    {
      condition_13 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareGE*)ROGUE_CREATE_OBJECT(CmdCompareGE))), THIS->t, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), THIS->t, index_var_9 ))))), last_cmd_10 ))))));
    }
    RogueClassCmdGenericLoop* result_14 = (((RogueCmdGenericLoop__init__Token_Integer_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)ROGUE_CREATE_OBJECT(CmdGenericLoop)), THIS->t, 9, condition_13, THIS->statements, ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
    call_ROGUEM170( 30, (RogueClassCmdControlStructure*)(result_14), ((RogueClassCmdControlStructure*)(THIS)) );
    RogueCmdGenericLoop__add_control_var__Local( result_14, collection_var_8 );
    RogueCmdGenericLoop__add_control_var__Local( result_14, index_var_9 );
    RogueCmdGenericLoop__add_upkeep__Cmd( result_14, modifier_12 );
    RogueCmdControlStructureList__remove_last( scope_0->control_stack );
    return (RogueClassCmd*)(((RogueCmdGenericLoop__resolve__Scope( result_14, scope_0 ))));
  }
  else
  {
    RogueLogical has_another_15 = ((!!(((RogueType__find_property__String( collection_type_1, Rogue_literal_strings[743] )))) || !!(((RogueType__find_method__String( collection_type_1, Rogue_literal_strings[744] ))))));
    RogueClassMethod* m_read_16 = (((RogueType__find_method__String( collection_type_1, Rogue_literal_strings[745] ))));
    if ((!(has_another_15) || !(!!(m_read_16))))
    {
      throw ((RogueToken__error__String( THIS->collection->t, Rogue_literal_strings[746] )));
    }
    if (!(!!(m_read_16->_return_type)))
    {
      throw ((RogueToken__error__String( THIS->collection->t, Rogue_literal_strings[747] )));
    }
    if (!!(THIS->step_cmd))
    {
      throw ((RogueToken__error__String( THIS->step_cmd->t, Rogue_literal_strings[748] )));
    }
    RogueClassLocal* reader_var_17 = (((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, ((RogueProgram__create_unique_id( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))), collection_type_1, THIS->collection ))));
    RogueClassLocal* index_var_18 = 0;
    if (!!(THIS->index_var_name))
    {
      index_var_18 = ((RogueClassLocal*)((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, THIS->index_var_name, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, 0 ))))) ))));
    }
    if (!!(THIS->control_var_name))
    {
      RogueClassLocal* control_var_19 = (((RogueMethod__add_local__Token_String_Type_Cmd( scope_0->this_method, THIS->t, THIS->control_var_name, m_read_16->_return_type, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->collection->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->collection->t, reader_var_17->name ))))), Rogue_literal_strings[749] ))))) ))));
      RogueCmdList__insert__Cmd_Integer( ((RogueCmdList*)THIS->statements), ((RogueClassCmd*)(((RogueCmdLocalDeclaration__init__Token_Local( ((RogueClassCmdLocalDeclaration*)ROGUE_CREATE_OBJECT(CmdLocalDeclaration)), THIS->collection->t, control_var_19 ))))), 0 );
    }
    else
    {
      RogueCmdList__insert__Cmd_Integer( ((RogueCmdList*)THIS->statements), ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->collection->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->collection->t, reader_var_17->name ))))), Rogue_literal_strings[749] ))))), 0 );
    }
    RogueClassToken* rt_20 = (reader_var_17->t);
    RogueClassCmdGenericLoop* cmd_loop_21 = (((RogueCmdGenericLoop__init__Token_Integer_Cmd_CmdStatementList_CmdStatementList_CmdStatementList( ((RogueClassCmdGenericLoop*)ROGUE_CREATE_OBJECT(CmdGenericLoop)), THIS->t, 9, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), rt_20, ((RogueClassCmd*)(((RogueCmdReadLocal__init__Token_Local( ((RogueClassCmdReadLocal*)ROGUE_CREATE_OBJECT(CmdReadLocal)), rt_20, reader_var_17 ))))), Rogue_literal_strings[743] ))))), THIS->statements, ((RogueClassCmdStatementList*)(NULL)), ((RogueClassCmdStatementList*)(NULL)) ))));
    call_ROGUEM170( 30, (RogueClassCmdControlStructure*)(cmd_loop_21), ((RogueClassCmdControlStructure*)(THIS)) );
    RogueCmdGenericLoop__add_control_var__Local( cmd_loop_21, reader_var_17 );
    if (!!(index_var_18))
    {
      RogueCmdGenericLoop__add_control_var__Local( cmd_loop_21, index_var_18 );
      RogueCmdGenericLoop__add_upkeep__Cmd( cmd_loop_21, ((RogueClassCmd*)(((RogueCmdAdjustLocal__init__Token_Local_Integer( ((RogueClassCmdAdjustLocal*)ROGUE_CREATE_OBJECT(CmdAdjustLocal)), THIS->t, index_var_18, 1 ))))) );
    }
    RogueCmdControlStructureList__remove_last( scope_0->control_stack );
    return (RogueClassCmd*)(((RogueCmdGenericLoop__resolve__Scope( cmd_loop_21, scope_0 ))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdForEach__trace_used_code( RogueClassCmdForEach* THIS )
{
  RogueCmdStatementList__trace_used_code( THIS->statements );
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->collection) );
  if (!!(THIS->step_cmd))
  {
    call_ROGUEM48( 26, (RogueClassCmd*)(THIS->step_cmd) );
  }
}

RogueClassCmdForEach* RogueCmdForEach__init_object( RogueClassCmdForEach* THIS )
{
  return (RogueClassCmdForEach*)(THIS);
}

RogueClassCmdForEach* RogueCmdForEach__init__Token_String_String_Cmd_Cmd_CmdStatementList( RogueClassCmdForEach* THIS, RogueClassToken* _auto_714_0, RogueString* _auto_715_1, RogueString* _auto_716_2, RogueClassCmd* _auto_717_3, RogueClassCmd* _auto_718_4, RogueClassCmdStatementList* _auto_719_5 )
{
  THIS->statements = _auto_719_5;
  THIS->step_cmd = _auto_718_4;
  THIS->collection = _auto_717_3;
  THIS->index_var_name = _auto_716_2;
  THIS->control_var_name = _auto_715_1;
  THIS->t = _auto_714_0;
  THIS->_control_type = 9;
  return (RogueClassCmdForEach*)(THIS);
}

RogueString* RogueCmdRangeUpTo__type_name( RogueClassCmdRangeUpTo* THIS )
{
  return (RogueString*)(Rogue_literal_strings[900]);
}

RogueClassCmd* RogueCmdRangeUpTo__clone__CloneArgs( RogueClassCmdRangeUpTo* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdRange__init__Token_Cmd_Cmd_Cmd( ((RogueClassCmdRange*)((RogueClassCmdRangeUpTo*)ROGUE_CREATE_OBJECT(CmdRangeUpTo))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->first), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->last), clone_args_0 )), ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->step_size, clone_args_0 ))) ))))));
}

RogueClassCmdRangeUpTo* RogueCmdRangeUpTo__init_object( RogueClassCmdRangeUpTo* THIS )
{
  return (RogueClassCmdRangeUpTo*)(THIS);
}

RogueString* RogueCmdLogicalXor__type_name( RogueClassCmdLogicalXor* THIS )
{
  return (RogueString*)(Rogue_literal_strings[904]);
}

RogueClassCmd* RogueCmdLogicalXor__clone__CloneArgs( RogueClassCmdLogicalXor* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdLogicalXor*)ROGUE_CREATE_OBJECT(CmdLogicalXor))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmdLogicalXor* RogueCmdLogicalXor__init_object( RogueClassCmdLogicalXor* THIS )
{
  return (RogueClassCmdLogicalXor*)(THIS);
}

RogueString* RogueCmdLogicalXor__symbol( RogueClassCmdLogicalXor* THIS )
{
  return (RogueString*)(Rogue_literal_strings[147]);
}

RogueString* RogueCmdLogicalXor__cpp_symbol( RogueClassCmdLogicalXor* THIS )
{
  return (RogueString*)(Rogue_literal_strings[153]);
}

RogueLogical RogueCmdLogicalXor__combine_literal_operands__Logical_Logical( RogueClassCmdLogicalXor* THIS, RogueLogical a_0, RogueLogical b_1 )
{
  return (RogueLogical)((a_0 ^ b_1));
}

RogueString* RogueCmdBinaryLogical__type_name( RogueClassCmdBinaryLogical* THIS )
{
  return (RogueString*)(Rogue_literal_strings[863]);
}

RogueClassCmd* RogueCmdBinaryLogical__resolve__Scope( RogueClassCmdBinaryLogical* THIS, RogueClassScope* scope_0 )
{
  THIS->left = ((RogueCmd__require_logical__Scope( (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->left), scope_0 )), scope_0 )));
  THIS->right = ((RogueCmd__require_logical__Scope( (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->right), scope_0 )), scope_0 )));
  if (((call_ROGUEM47( 15, (RogueClassCmd*)(THIS->left) )) && (call_ROGUEM47( 15, (RogueClassCmd*)(THIS->right) ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, (call_ROGUEM473( 38, (RogueClassCmdBinaryLogical*)(THIS), ((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralLogical)))->value, ((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralLogical)))->value )) ))))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdBinaryLogical__type( RogueClassCmdBinaryLogical* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

RogueClassCmdBinaryLogical* RogueCmdBinaryLogical__init_object( RogueClassCmdBinaryLogical* THIS )
{
  return (RogueClassCmdBinaryLogical*)(THIS);
}

RogueClassCmd* RogueCmdBinaryLogical__resolve_operator_method__Scope_Type_Type( RogueClassCmdBinaryLogical* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
}

RogueLogical RogueCmdBinaryLogical__combine_literal_operands__Logical_Logical( RogueClassCmdBinaryLogical* THIS, RogueLogical a_0, RogueLogical b_1 )
{
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[287] ))), (call_ROGUEM471( 2, (RogueClassCmdBinaryLogical*)(THIS) )) ))), Rogue_literal_strings[864] ))) ))) )));
}

RogueString* RogueCmdLogicalOr__type_name( RogueClassCmdLogicalOr* THIS )
{
  return (RogueString*)(Rogue_literal_strings[905]);
}

RogueClassCmd* RogueCmdLogicalOr__clone__CloneArgs( RogueClassCmdLogicalOr* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdLogicalOr*)ROGUE_CREATE_OBJECT(CmdLogicalOr))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmdLogicalOr* RogueCmdLogicalOr__init_object( RogueClassCmdLogicalOr* THIS )
{
  return (RogueClassCmdLogicalOr*)(THIS);
}

RogueString* RogueCmdLogicalOr__symbol( RogueClassCmdLogicalOr* THIS )
{
  return (RogueString*)(Rogue_literal_strings[142]);
}

RogueString* RogueCmdLogicalOr__cpp_symbol( RogueClassCmdLogicalOr* THIS )
{
  return (RogueString*)(Rogue_literal_strings[197]);
}

RogueLogical RogueCmdLogicalOr__combine_literal_operands__Logical_Logical( RogueClassCmdLogicalOr* THIS, RogueLogical a_0, RogueLogical b_1 )
{
  return (RogueLogical)((a_0 || b_1));
}

RogueString* RogueCmdLogicalAnd__type_name( RogueClassCmdLogicalAnd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[906]);
}

RogueClassCmd* RogueCmdLogicalAnd__clone__CloneArgs( RogueClassCmdLogicalAnd* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdLogicalAnd*)ROGUE_CREATE_OBJECT(CmdLogicalAnd))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmdLogicalAnd* RogueCmdLogicalAnd__init_object( RogueClassCmdLogicalAnd* THIS )
{
  return (RogueClassCmdLogicalAnd*)(THIS);
}

RogueString* RogueCmdLogicalAnd__symbol( RogueClassCmdLogicalAnd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[135]);
}

RogueString* RogueCmdLogicalAnd__cpp_symbol( RogueClassCmdLogicalAnd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[877]);
}

RogueLogical RogueCmdLogicalAnd__combine_literal_operands__Logical_Logical( RogueClassCmdLogicalAnd* THIS, RogueLogical a_0, RogueLogical b_1 )
{
  return (RogueLogical)((a_0 && b_1));
}

RogueString* RogueCmdCompareEQ__type_name( RogueClassCmdCompareEQ* THIS )
{
  return (RogueString*)(Rogue_literal_strings[972]);
}

RogueClassCmd* RogueCmdCompareEQ__clone__CloneArgs( RogueClassCmdCompareEQ* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)ROGUE_CREATE_OBJECT(CmdCompareEQ))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdCompareEQ__combine_literal_operands__Type( RogueClassCmdCompareEQ* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal)))->value == ((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal)))->value ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInteger)))->value == ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInteger)))->value ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareEQ* RogueCmdCompareEQ__init_object( RogueClassCmdCompareEQ* THIS )
{
  return (RogueClassCmdCompareEQ*)(THIS);
}

RogueLogical RogueCmdCompareEQ__requires_parens( RogueClassCmdCompareEQ* THIS )
{
  return (RogueLogical)(false);
}

RogueString* RogueCmdCompareEQ__symbol( RogueClassCmdCompareEQ* THIS )
{
  return (RogueString*)(Rogue_literal_strings[163]);
}

RogueClassCmd* RogueCmdCompareEQ__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareEQ* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  RogueClassCmd* cmd_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[909], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[908], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM204( 22, (RogueClassCmdBinary*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)ROGUE_CREATE_OBJECT(CmdCompareEQ))), THIS->t, cmd_4, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, 0 ))))) )))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[907], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[909], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[907], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[909], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), true, false ))));
}

RogueString* RogueCmdCompareIs__type_name( RogueClassCmdCompareIs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[973]);
}

RogueClassCmd* RogueCmdCompareIs__clone__CloneArgs( RogueClassCmdCompareIs* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareIs*)ROGUE_CREATE_OBJECT(CmdCompareIs))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmdCompareIs* RogueCmdCompareIs__init_object( RogueClassCmdCompareIs* THIS )
{
  return (RogueClassCmdCompareIs*)(THIS);
}

RogueClassCmd* RogueCmdCompareIs__resolve_for_types__Scope_Type_Type( RogueClassCmdCompareIs* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  if ((((RogueType__is_reference( left_type_1 ))) && ((RogueType__is_reference( right_type_2 )))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  else if ((((RogueType__is_primitive( left_type_1 ))) && ((RogueType__is_primitive( right_type_2 )))))
  {
    return (RogueClassCmd*)((call_ROGUEM204( 22, (RogueClassCmdBinary*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)ROGUE_CREATE_OBJECT(CmdCompareEQ))), THIS->t, THIS->left, THIS->right )))), scope_0 )));
  }
  else if ((((RogueType__is_compound( left_type_1 ))) && ((RogueType__is_compound( right_type_2 )))))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[898] )));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, false ))))));
  }
}

RogueString* RogueCmdCompareIs__symbol( RogueClassCmdCompareIs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[115]);
}

RogueString* RogueCmdCompareIs__cpp_symbol( RogueClassCmdCompareIs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[163]);
}

RogueString* RogueCmdCompareIsNot__type_name( RogueClassCmdCompareIsNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[974]);
}

RogueClassCmd* RogueCmdCompareIsNot__clone__CloneArgs( RogueClassCmdCompareIsNot* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareIsNot*)ROGUE_CREATE_OBJECT(CmdCompareIsNot))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmdCompareIsNot* RogueCmdCompareIsNot__init_object( RogueClassCmdCompareIsNot* THIS )
{
  return (RogueClassCmdCompareIsNot*)(THIS);
}

RogueClassCmd* RogueCmdCompareIsNot__resolve_for_types__Scope_Type_Type( RogueClassCmdCompareIsNot* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  if ((((RogueType__is_reference( left_type_1 ))) && ((RogueType__is_reference( right_type_2 )))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  else if ((((RogueType__is_primitive( left_type_1 ))) && ((RogueType__is_primitive( right_type_2 )))))
  {
    return (RogueClassCmd*)((call_ROGUEM204( 22, (RogueClassCmdBinary*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)ROGUE_CREATE_OBJECT(CmdCompareEQ))), THIS->t, THIS->left, THIS->right )))), scope_0 )));
  }
  else if ((((RogueType__is_compound( left_type_1 ))) && ((RogueType__is_compound( right_type_2 )))))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[898] )));
  }
  else
  {
    throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[899] ))), ((RogueType__to_String( left_type_1 ))) ))), Rogue_literal_strings[317] ))), ((RogueType__to_String( right_type_2 ))) ))), Rogue_literal_strings[44] ))) ))) )));
  }
}

RogueString* RogueCmdCompareIsNot__symbol( RogueClassCmdCompareIsNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[116]);
}

RogueString* RogueCmdCompareIsNot__cpp_symbol( RogueClassCmdCompareIsNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[173]);
}

RogueString* RogueCmdCompareLT__type_name( RogueClassCmdCompareLT* THIS )
{
  return (RogueString*)(Rogue_literal_strings[975]);
}

RogueClassCmd* RogueCmdCompareLT__clone__CloneArgs( RogueClassCmdCompareLT* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareLT*)ROGUE_CREATE_OBJECT(CmdCompareLT))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdCompareLT__combine_literal_operands__Type( RogueClassCmdCompareLT* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal)))->value < ((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal)))->value ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInteger)))->value < ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInteger)))->value ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareLT* RogueCmdCompareLT__init_object( RogueClassCmdCompareLT* THIS )
{
  return (RogueClassCmdCompareLT*)(THIS);
}

RogueString* RogueCmdCompareLT__symbol( RogueClassCmdCompareLT* THIS )
{
  return (RogueString*)(Rogue_literal_strings[170]);
}

RogueClassCmd* RogueCmdCompareLT__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareLT* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  RogueClassCmd* cmd_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[913], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[908], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM204( 22, (RogueClassCmdBinary*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)ROGUE_CREATE_OBJECT(CmdCompareEQ))), THIS->t, cmd_4, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, -1 ))))) )))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[912], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[911], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[910], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[913], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), true, false ))));
}

RogueString* RogueCmdCompareGT__type_name( RogueClassCmdCompareGT* THIS )
{
  return (RogueString*)(Rogue_literal_strings[976]);
}

RogueClassCmd* RogueCmdCompareGT__clone__CloneArgs( RogueClassCmdCompareGT* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareGT*)ROGUE_CREATE_OBJECT(CmdCompareGT))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdCompareGT__combine_literal_operands__Type( RogueClassCmdCompareGT* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal)))->value > ((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal)))->value ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInteger)))->value > ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInteger)))->value ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareGT* RogueCmdCompareGT__init_object( RogueClassCmdCompareGT* THIS )
{
  return (RogueClassCmdCompareGT*)(THIS);
}

RogueString* RogueCmdCompareGT__symbol( RogueClassCmdCompareGT* THIS )
{
  return (RogueString*)(Rogue_literal_strings[168]);
}

RogueClassCmd* RogueCmdCompareGT__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareGT* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  RogueClassCmd* cmd_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[911], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[908], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM204( 22, (RogueClassCmdBinary*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareEQ*)ROGUE_CREATE_OBJECT(CmdCompareEQ))), THIS->t, cmd_4, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, 1 ))))) )))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[910], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[913], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[912], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[911], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), true, false ))));
}

RogueString* RogueCmdCompareGE__type_name( RogueClassCmdCompareGE* THIS )
{
  return (RogueString*)(Rogue_literal_strings[977]);
}

RogueClassCmd* RogueCmdCompareGE__clone__CloneArgs( RogueClassCmdCompareGE* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareGE*)ROGUE_CREATE_OBJECT(CmdCompareGE))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdCompareGE__combine_literal_operands__Type( RogueClassCmdCompareGE* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal)))->value >= ((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal)))->value ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInteger)))->value >= ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInteger)))->value ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdCompareGE* RogueCmdCompareGE__init_object( RogueClassCmdCompareGE* THIS )
{
  return (RogueClassCmdCompareGE*)(THIS);
}

RogueString* RogueCmdCompareGE__symbol( RogueClassCmdCompareGE* THIS )
{
  return (RogueString*)(Rogue_literal_strings[167]);
}

RogueClassCmd* RogueCmdCompareGE__resolve_for_reference__Scope_Type_Type_Logical( RogueClassCmdCompareGE* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2, RogueLogical force_error_3 )
{
  RogueClassCmd* cmd_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[912], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[908], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)((call_ROGUEM204( 22, (RogueClassCmdBinary*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdCompareNE*)ROGUE_CREATE_OBJECT(CmdCompareNE))), THIS->t, cmd_4, ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, -1 ))))) )))), scope_0 )));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[913], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))));
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[910], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(cmd_4);
  }
  cmd_4 = ((RogueClassCmd*)((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, right_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->right, Rogue_literal_strings[911], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->left ))) ))), false, false ))));
  if (!!(cmd_4))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, cmd_4 ))))));
  }
  if (!(force_error_3))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, left_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->left, Rogue_literal_strings[912], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->right ))) ))), true, false ))));
}

RogueString* RogueCmdInstanceOf__type_name( RogueClassCmdInstanceOf* THIS )
{
  return (RogueString*)(Rogue_literal_strings[889]);
}

RogueClassCmd* RogueCmdInstanceOf__clone__CloneArgs( RogueClassCmdInstanceOf* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdInstanceOf*)ROGUE_CREATE_OBJECT(CmdInstanceOf))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->operand), clone_args_0 )), THIS->_target_type ))))));
}

RogueClassCmd* RogueCmdInstanceOf__resolve__Scope( RogueClassCmdInstanceOf* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->operand), scope_0 ));
  RogueType__organize( THIS->_target_type );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdInstanceOf__type( RogueClassCmdInstanceOf* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

void RogueCmdInstanceOf__write_cpp__CPPWriter_Logical( RogueClassCmdInstanceOf* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[796] );
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->operand), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[157] );
  RogueCPPWriter__print_type_info__Type( writer_0, THIS->_target_type );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] );
}

RogueClassCmdInstanceOf* RogueCmdInstanceOf__init_object( RogueClassCmdInstanceOf* THIS )
{
  return (RogueClassCmdInstanceOf*)(THIS);
}

RogueString* RogueCmdLogicalNot__type_name( RogueClassCmdLogicalNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[893]);
}

RogueClassCmd* RogueCmdLogicalNot__clone__CloneArgs( RogueClassCmdLogicalNot* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdLogicalNot*)ROGUE_CREATE_OBJECT(CmdLogicalNot))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->operand), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdLogicalNot__resolve__Scope( RogueClassCmdLogicalNot* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = ((RogueCmd__require_logical__Scope( (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->operand), scope_0 )), scope_0 )));
  if ((call_ROGUEM47( 15, (RogueClassCmd*)(THIS->operand) )))
  {
    return (RogueClassCmd*)(((RogueCmdLogicalNot__resolve_for_literal_operand__Scope( THIS, scope_0 ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueCmdUnary__resolve_for_operand_type__Scope_Type( ((RogueClassCmdUnary*)THIS), scope_0, ((Rogue_Cmd__require_type( THIS->operand ))) ))));
  }
}

RogueClassType* Rogue_CmdLogicalNot__type( RogueClassCmdLogicalNot* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

RogueClassCmdLogicalNot* RogueCmdLogicalNot__init_object( RogueClassCmdLogicalNot* THIS )
{
  return (RogueClassCmdLogicalNot*)(THIS);
}

RogueString* RogueCmdLogicalNot__prefix_symbol( RogueClassCmdLogicalNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[896]);
}

RogueClassCmd* RogueCmdLogicalNot__resolve_for_literal_operand__Scope( RogueClassCmdLogicalNot* THIS, RogueClassScope* scope_0 )
{
  if (RogueObject_instance_of(THIS->operand,RogueTypeCmdLiteralReal))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, !(!!(((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->operand,RogueTypeCmdLiteralReal)))->value)) ))))));
  }
  else if (RogueObject_instance_of(THIS->operand,RogueTypeCmdLiteralInteger))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, !(!!(((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->operand,RogueTypeCmdLiteralInteger)))->value)) ))))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdLogicalNot__cpp_prefix_symbol( RogueClassCmdLogicalNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[165]);
}

RogueString* RogueCmdBitwiseXor__type_name( RogueClassCmdBitwiseXor* THIS )
{
  return (RogueString*)(Rogue_literal_strings[914]);
}

RogueClassCmd* RogueCmdBitwiseXor__clone__CloneArgs( RogueClassCmdBitwiseXor* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseXor*)ROGUE_CREATE_OBJECT(CmdBitwiseXor))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdBitwiseXor__combine_literal_operands__Type( RogueClassCmdBitwiseXor* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, (((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInteger)))->value ^ ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInteger)))->value) ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, (((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralLogical)))->value ^ ((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralLogical)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdBitwiseXor* RogueCmdBitwiseXor__init_object( RogueClassCmdBitwiseXor* THIS )
{
  return (RogueClassCmdBitwiseXor*)(THIS);
}

RogueString* RogueCmdBitwiseXor__symbol( RogueClassCmdBitwiseXor* THIS )
{
  return (RogueString*)(Rogue_literal_strings[189]);
}

RogueString* RogueCmdBitwiseXor__cpp_symbol( RogueClassCmdBitwiseXor* THIS )
{
  return (RogueString*)(Rogue_literal_strings[153]);
}

RogueString* RogueCmdBitwiseOp__type_name( RogueClassCmdBitwiseOp* THIS )
{
  return (RogueString*)(Rogue_literal_strings[880]);
}

RogueClassCmdBitwiseOp* RogueCmdBitwiseOp__init_object( RogueClassCmdBitwiseOp* THIS )
{
  return (RogueClassCmdBitwiseOp*)(THIS);
}

RogueClassCmd* RogueCmdBitwiseOp__resolve_for_common_type__Scope_Type( RogueClassCmdBitwiseOp* THIS, RogueClassScope* scope_0, RogueClassType* common_type_1 )
{
  if (((common_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte || common_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character) || common_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer))
  {
    THIS->left = (call_ROGUEM42( 22, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->left), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer ))), scope_0 ));
    THIS->right = (call_ROGUEM42( 22, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->right), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer ))), scope_0 ));
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  if (common_type_1 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Long)
  {
    THIS->left = (call_ROGUEM42( 22, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->left), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Long ))), scope_0 ));
    THIS->right = (call_ROGUEM42( 22, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->right), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Long ))), scope_0 ));
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[875] ))), (call_ROGUEM209( 36, (RogueClassCmdBinary*)(THIS) )) ))), Rogue_literal_strings[876] ))), ((RogueType__to_String( common_type_1 ))) ))), Rogue_literal_strings[44] ))) ))) )));
}

RogueClassCmd* RogueCmdBitwiseOp__resolve_operator_method__Scope_Type_Type( RogueClassCmdBitwiseOp* THIS, RogueClassScope* scope_0, RogueClassType* left_type_1, RogueClassType* right_type_2 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
}

RogueString* RogueCmdBitwiseOr__type_name( RogueClassCmdBitwiseOr* THIS )
{
  return (RogueString*)(Rogue_literal_strings[915]);
}

RogueClassCmd* RogueCmdBitwiseOr__clone__CloneArgs( RogueClassCmdBitwiseOr* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseOr*)ROGUE_CREATE_OBJECT(CmdBitwiseOr))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdBitwiseOr__combine_literal_operands__Type( RogueClassCmdBitwiseOr* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, (((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInteger)))->value | ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInteger)))->value) ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, (((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralLogical)))->value || ((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralLogical)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdBitwiseOr* RogueCmdBitwiseOr__init_object( RogueClassCmdBitwiseOr* THIS )
{
  return (RogueClassCmdBitwiseOr*)(THIS);
}

RogueString* RogueCmdBitwiseOr__symbol( RogueClassCmdBitwiseOr* THIS )
{
  return (RogueString*)(Rogue_literal_strings[195]);
}

RogueString* RogueCmdBitwiseAnd__type_name( RogueClassCmdBitwiseAnd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[916]);
}

RogueClassCmd* RogueCmdBitwiseAnd__clone__CloneArgs( RogueClassCmdBitwiseAnd* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseAnd*)ROGUE_CREATE_OBJECT(CmdBitwiseAnd))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdBitwiseAnd__combine_literal_operands__Type( RogueClassCmdBitwiseAnd* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, (((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInteger)))->value & ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInteger)))->value) ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLogical__init__Token_Logical( ((RogueClassCmdLiteralLogical*)ROGUE_CREATE_OBJECT(CmdLiteralLogical)), THIS->t, (((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralLogical)))->value && ((RogueClassCmdLiteralLogical*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralLogical)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdBitwiseAnd* RogueCmdBitwiseAnd__init_object( RogueClassCmdBitwiseAnd* THIS )
{
  return (RogueClassCmdBitwiseAnd*)(THIS);
}

RogueString* RogueCmdBitwiseAnd__symbol( RogueClassCmdBitwiseAnd* THIS )
{
  return (RogueString*)(Rogue_literal_strings[148]);
}

RogueString* RogueCmdBitwiseShiftLeft__type_name( RogueClassCmdBitwiseShiftLeft* THIS )
{
  return (RogueString*)(Rogue_literal_strings[917]);
}

RogueClassCmd* RogueCmdBitwiseShiftLeft__clone__CloneArgs( RogueClassCmdBitwiseShiftLeft* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseShiftLeft*)ROGUE_CREATE_OBJECT(CmdBitwiseShiftLeft))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdBitwiseShiftLeft__combine_literal_operands__Type( RogueClassCmdBitwiseShiftLeft* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, (((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInteger)))->value << ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInteger)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdBitwiseShiftLeft* RogueCmdBitwiseShiftLeft__init_object( RogueClassCmdBitwiseShiftLeft* THIS )
{
  return (RogueClassCmdBitwiseShiftLeft*)(THIS);
}

RogueString* RogueCmdBitwiseShiftLeft__symbol( RogueClassCmdBitwiseShiftLeft* THIS )
{
  return (RogueString*)(Rogue_literal_strings[185]);
}

RogueString* RogueCmdBitwiseShiftLeft__cpp_symbol( RogueClassCmdBitwiseShiftLeft* THIS )
{
  return (RogueString*)(Rogue_literal_strings[177]);
}

RogueString* RogueCmdBitwiseShiftRight__type_name( RogueClassCmdBitwiseShiftRight* THIS )
{
  return (RogueString*)(Rogue_literal_strings[918]);
}

RogueClassCmd* RogueCmdBitwiseShiftRight__clone__CloneArgs( RogueClassCmdBitwiseShiftRight* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseShiftRight*)ROGUE_CREATE_OBJECT(CmdBitwiseShiftRight))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdBitwiseShiftRight__combine_literal_operands__Type( RogueClassCmdBitwiseShiftRight* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, (((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInteger)))->value << ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInteger)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmd* RogueCmdBitwiseShiftRight__resolve__Scope( RogueClassCmdBitwiseShiftRight* THIS, RogueClassScope* scope_0 )
{
  RogueClassCmd* result_1 = ((RogueCmdBinary__resolve__Scope( ((RogueClassCmdBinary*)THIS), scope_0 )));
  RogueClassCmdBitwiseShiftRight* cmd_shift_2 = (((RogueClassCmdBitwiseShiftRight*)(RogueObject_as(result_1,RogueTypeCmdBitwiseShiftRight))));
  if (!(!!(cmd_shift_2)))
  {
    return (RogueClassCmd*)(result_1);
  }
  return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, Rogue_literal_strings[557] ))))), Rogue_literal_strings[865], ((RogueCmdArgs__init__Cmd_Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), cmd_shift_2->left, cmd_shift_2->right ))) ))), scope_0 ))));
}

RogueClassCmdBitwiseShiftRight* RogueCmdBitwiseShiftRight__init_object( RogueClassCmdBitwiseShiftRight* THIS )
{
  return (RogueClassCmdBitwiseShiftRight*)(THIS);
}

RogueString* RogueCmdBitwiseShiftRight__symbol( RogueClassCmdBitwiseShiftRight* THIS )
{
  return (RogueString*)(Rogue_literal_strings[186]);
}

RogueString* RogueCmdBitwiseShiftRightX__type_name( RogueClassCmdBitwiseShiftRightX* THIS )
{
  return (RogueString*)(Rogue_literal_strings[919]);
}

RogueClassCmd* RogueCmdBitwiseShiftRightX__clone__CloneArgs( RogueClassCmdBitwiseShiftRightX* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdBitwiseShiftRightX*)ROGUE_CREATE_OBJECT(CmdBitwiseShiftRightX))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdBitwiseShiftRightX__combine_literal_operands__Type( RogueClassCmdBitwiseShiftRightX* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, (((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInteger)))->value << ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInteger)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdBitwiseShiftRightX* RogueCmdBitwiseShiftRightX__init_object( RogueClassCmdBitwiseShiftRightX* THIS )
{
  return (RogueClassCmdBitwiseShiftRightX*)(THIS);
}

RogueString* RogueCmdBitwiseShiftRightX__symbol( RogueClassCmdBitwiseShiftRightX* THIS )
{
  return (RogueString*)(Rogue_literal_strings[187]);
}

RogueString* RogueCmdBitwiseShiftRightX__cpp_symbol( RogueClassCmdBitwiseShiftRightX* THIS )
{
  return (RogueString*)(Rogue_literal_strings[101]);
}

RogueString* RogueCmdSubtract__type_name( RogueClassCmdSubtract* THIS )
{
  return (RogueString*)(Rogue_literal_strings[881]);
}

RogueClassCmd* RogueCmdSubtract__clone__CloneArgs( RogueClassCmdSubtract* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdSubtract*)ROGUE_CREATE_OBJECT(CmdSubtract))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdSubtract__combine_literal_operands__Type( RogueClassCmdSubtract* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)ROGUE_CREATE_OBJECT(CmdLiteralReal)), THIS->t, (((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal)))->value - ((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal)))->value) ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, (((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInteger)))->value - ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInteger)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdSubtract* RogueCmdSubtract__init_object( RogueClassCmdSubtract* THIS )
{
  return (RogueClassCmdSubtract*)(THIS);
}

RogueString* RogueCmdSubtract__fn_name( RogueClassCmdSubtract* THIS )
{
  return (RogueString*)(Rogue_literal_strings[870]);
}

RogueString* RogueCmdSubtract__symbol( RogueClassCmdSubtract* THIS )
{
  return (RogueString*)(Rogue_literal_strings[171]);
}

RogueString* RogueCmdMultiply__type_name( RogueClassCmdMultiply* THIS )
{
  return (RogueString*)(Rogue_literal_strings[882]);
}

RogueClassCmd* RogueCmdMultiply__clone__CloneArgs( RogueClassCmdMultiply* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMultiply*)ROGUE_CREATE_OBJECT(CmdMultiply))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdMultiply__combine_literal_operands__Type( RogueClassCmdMultiply* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)ROGUE_CREATE_OBJECT(CmdLiteralReal)), THIS->t, (((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal)))->value * ((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal)))->value) ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, (((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInteger)))->value * ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInteger)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdMultiply* RogueCmdMultiply__init_object( RogueClassCmdMultiply* THIS )
{
  return (RogueClassCmdMultiply*)(THIS);
}

RogueString* RogueCmdMultiply__fn_name( RogueClassCmdMultiply* THIS )
{
  return (RogueString*)(Rogue_literal_strings[871]);
}

RogueString* RogueCmdMultiply__symbol( RogueClassCmdMultiply* THIS )
{
  return (RogueString*)(Rogue_literal_strings[191]);
}

RogueString* RogueCmdDivide__type_name( RogueClassCmdDivide* THIS )
{
  return (RogueString*)(Rogue_literal_strings[883]);
}

RogueClassCmd* RogueCmdDivide__clone__CloneArgs( RogueClassCmdDivide* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdDivide*)ROGUE_CREATE_OBJECT(CmdDivide))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdDivide__combine_literal_operands__Type( RogueClassCmdDivide* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)ROGUE_CREATE_OBJECT(CmdLiteralReal)), THIS->t, (((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal)))->value / ((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal)))->value) ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, (((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInteger)))->value / ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInteger)))->value) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmdDivide* RogueCmdDivide__init_object( RogueClassCmdDivide* THIS )
{
  return (RogueClassCmdDivide*)(THIS);
}

RogueString* RogueCmdDivide__fn_name( RogueClassCmdDivide* THIS )
{
  return (RogueString*)(Rogue_literal_strings[872]);
}

RogueString* RogueCmdDivide__symbol( RogueClassCmdDivide* THIS )
{
  return (RogueString*)(Rogue_literal_strings[37]);
}

RogueString* RogueCmdMod__type_name( RogueClassCmdMod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[884]);
}

RogueClassCmd* RogueCmdMod__clone__CloneArgs( RogueClassCmdMod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMod*)ROGUE_CREATE_OBJECT(CmdMod))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdMod__combine_literal_operands__Type( RogueClassCmdMod* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)ROGUE_CREATE_OBJECT(CmdLiteralReal)), THIS->t, (RogueMath__mod__Real_Real( ((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal)))->value, ((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal)))->value )) ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, (RogueMath__mod__Integer_Integer( ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInteger)))->value, ((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInteger)))->value )) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

RogueClassCmd* RogueCmdMod__resolve__Scope( RogueClassCmdMod* THIS, RogueClassScope* scope_0 )
{
  RogueClassCmd* result_1 = ((RogueCmdBinary__resolve__Scope( ((RogueClassCmdBinary*)THIS), scope_0 )));
  if ((call_ROGUEM47( 15, (RogueClassCmd*)(result_1) )))
  {
    return (RogueClassCmd*)(result_1);
  }
  RogueClassCmdMod* cmd_mod_2 = (((RogueClassCmdMod*)(RogueObject_as(result_1,RogueTypeCmdMod))));
  if (!(!!(cmd_mod_2)))
  {
    return (RogueClassCmd*)(result_1);
  }
  return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, Rogue_literal_strings[557] ))))), Rogue_literal_strings[866], ((RogueCmdArgs__init__Cmd_Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), cmd_mod_2->left, cmd_mod_2->right ))) ))), scope_0 ))));
}

RogueClassCmdMod* RogueCmdMod__init_object( RogueClassCmdMod* THIS )
{
  return (RogueClassCmdMod*)(THIS);
}

RogueString* RogueCmdMod__fn_name( RogueClassCmdMod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[873]);
}

RogueString* RogueCmdMod__symbol( RogueClassCmdMod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[178]);
}

RogueString* RogueCmdPower__type_name( RogueClassCmdPower* THIS )
{
  return (RogueString*)(Rogue_literal_strings[885]);
}

RogueClassCmd* RogueCmdPower__clone__CloneArgs( RogueClassCmdPower* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdPower*)ROGUE_CREATE_OBJECT(CmdPower))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->left), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->right), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdPower__combine_literal_operands__Type( RogueClassCmdPower* THIS, RogueClassType* common_type_0 )
{
  if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)ROGUE_CREATE_OBJECT(CmdLiteralReal)), THIS->t, ((RogueReal) pow((double)((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralReal)))->value, (double)((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralReal)))->value)) ))))));
  }
  else if (common_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, ((RogueInteger) pow((double)((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->left,RogueTypeCmdLiteralInteger)))->value, (double)((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->right,RogueTypeCmdLiteralInteger)))->value)) ))))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
}

void RogueCmdPower__write_cpp__CPPWriter_Logical( RogueClassCmdPower* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[451] ))), (call_ROGUEM46( 27, (RogueClassCmd*)(THIS->left) )) ))), Rogue_literal_strings[867] );
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->left), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[868] );
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->right), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[786] );
}

RogueClassCmdPower* RogueCmdPower__init_object( RogueClassCmdPower* THIS )
{
  return (RogueClassCmdPower*)(THIS);
}

RogueString* RogueCmdPower__fn_name( RogueClassCmdPower* THIS )
{
  return (RogueString*)(Rogue_literal_strings[874]);
}

RogueString* RogueCmdPower__symbol( RogueClassCmdPower* THIS )
{
  return (RogueString*)(Rogue_literal_strings[153]);
}

RogueString* RogueCmdNegate__type_name( RogueClassCmdNegate* THIS )
{
  return (RogueString*)(Rogue_literal_strings[894]);
}

RogueClassCmd* RogueCmdNegate__clone__CloneArgs( RogueClassCmdNegate* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdNegate*)ROGUE_CREATE_OBJECT(CmdNegate))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->operand), clone_args_0 )) ))))));
}

RogueClassType* Rogue_CmdNegate__implicit_type( RogueClassCmdNegate* THIS )
{
  return (RogueClassType*)((call_ROGUEM46( 14, (RogueClassCmd*)(THIS->operand) )));
}

RogueClassCmdNegate* RogueCmdNegate__init_object( RogueClassCmdNegate* THIS )
{
  return (RogueClassCmdNegate*)(THIS);
}

RogueString* RogueCmdNegate__prefix_symbol( RogueClassCmdNegate* THIS )
{
  return (RogueString*)(Rogue_literal_strings[897]);
}

RogueClassCmd* RogueCmdNegate__resolve_for_literal_operand__Scope( RogueClassCmdNegate* THIS, RogueClassScope* scope_0 )
{
  if (RogueObject_instance_of(THIS->operand,RogueTypeCmdLiteralReal))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)ROGUE_CREATE_OBJECT(CmdLiteralReal)), THIS->t, (-(((RogueClassCmdLiteralReal*)(RogueObject_as(THIS->operand,RogueTypeCmdLiteralReal)))->value)) ))))));
  }
  else if (RogueObject_instance_of(THIS->operand,RogueTypeCmdLiteralInteger))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, (-(((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->operand,RogueTypeCmdLiteralInteger)))->value)) ))))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdNegate__suffix_symbol( RogueClassCmdNegate* THIS )
{
  return (RogueString*)(Rogue_literal_strings[100]);
}

RogueString* RogueCmdBitwiseNot__type_name( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[895]);
}

RogueClassCmd* RogueCmdBitwiseNot__clone__CloneArgs( RogueClassCmdBitwiseNot* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdUnary__init__Token_Cmd( ((RogueClassCmdUnary*)((RogueClassCmdBitwiseNot*)ROGUE_CREATE_OBJECT(CmdBitwiseNot))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->operand), clone_args_0 )) ))))));
}

RogueClassType* Rogue_CmdBitwiseNot__type( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueClassType*)((call_ROGUEM46( 27, (RogueClassCmd*)(THIS->operand) )));
}

RogueClassCmdBitwiseNot* RogueCmdBitwiseNot__init_object( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueClassCmdBitwiseNot*)(THIS);
}

RogueString* RogueCmdBitwiseNot__prefix_symbol( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[165]);
}

RogueClassCmd* RogueCmdBitwiseNot__resolve_for_literal_operand__Scope( RogueClassCmdBitwiseNot* THIS, RogueClassScope* scope_0 )
{
  if (RogueObject_instance_of(THIS->operand,RogueTypeCmdLiteralInteger))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, ~(((RogueClassCmdLiteralInteger*)(RogueObject_as(THIS->operand,RogueTypeCmdLiteralInteger)))->value) ))))));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueString* RogueCmdBitwiseNot__cpp_prefix_symbol( RogueClassCmdBitwiseNot* THIS )
{
  return (RogueString*)(Rogue_literal_strings[189]);
}

RogueString* RogueCmdGetOptionalValue__type_name( RogueClassCmdGetOptionalValue* THIS )
{
  return (RogueString*)(Rogue_literal_strings[675]);
}

RogueClassCmd* RogueCmdGetOptionalValue__clone__CloneArgs( RogueClassCmdGetOptionalValue* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdGetOptionalValue__init__Token_Cmd( ((RogueClassCmdGetOptionalValue*)ROGUE_CREATE_OBJECT(CmdGetOptionalValue)), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->value), clone_args_0 )) ))))));
}

RogueClassCmdGetOptionalValue* RogueCmdGetOptionalValue__resolve__Scope( RogueClassCmdGetOptionalValue* THIS, RogueClassScope* scope_0 )
{
  THIS->value = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->value), scope_0 ));
  if (!(((Rogue_Cmd__require_type( THIS->value )))->is_optional))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[750] )));
  }
  return (RogueClassCmdGetOptionalValue*)(THIS);
}

void RogueCmdGetOptionalValue__trace_used_code( RogueClassCmdGetOptionalValue* THIS )
{
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->value) );
}

RogueClassType* Rogue_CmdGetOptionalValue__type( RogueClassCmdGetOptionalValue* THIS )
{
  return (RogueClassType*)((call_ROGUEM46( 27, (RogueClassCmd*)(THIS->value) ))->_element_type);
}

void RogueCmdGetOptionalValue__write_cpp__CPPWriter_Logical( RogueClassCmdGetOptionalValue* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->value), writer_0, false );
  if (!(((RogueType__is_reference( (call_ROGUEM46( 27, (RogueClassCmd*)(THIS->value) ))->_element_type )))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[797] );
  }
}

RogueClassCmdGetOptionalValue* RogueCmdGetOptionalValue__init_object( RogueClassCmdGetOptionalValue* THIS )
{
  return (RogueClassCmdGetOptionalValue*)(THIS);
}

RogueClassCmdGetOptionalValue* RogueCmdGetOptionalValue__init__Token_Cmd( RogueClassCmdGetOptionalValue* THIS, RogueClassToken* _auto_720_0, RogueClassCmd* _auto_721_1 )
{
  THIS->value = _auto_721_1;
  THIS->t = _auto_720_0;
  return (RogueClassCmdGetOptionalValue*)(THIS);
}

RogueString* RogueCmdElementAccess__type_name( RogueClassCmdElementAccess* THIS )
{
  return (RogueString*)(Rogue_literal_strings[676]);
}

RogueClassCmd* RogueCmdElementAccess__clone__CloneArgs( RogueClassCmdElementAccess* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdElementAccess__init__Token_Cmd_Cmd( ((RogueClassCmdElementAccess*)ROGUE_CREATE_OBJECT(CmdElementAccess)), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->context), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->index), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdElementAccess__resolve__Scope( RogueClassCmdElementAccess* THIS, RogueClassScope* scope_0 )
{
  THIS->context = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->context), scope_0 ));
  RogueClassType* context_type_1 = (((Rogue_Cmd__require_type( THIS->context ))));
  RogueType__organize( context_type_1 );
  if (context_type_1->is_array)
  {
    return (RogueClassCmd*)(((RogueCmdReadArrayElement__resolve__Scope( ((RogueCmdReadArrayElement__init__Token_Cmd_Cmd( ((RogueClassCmdReadArrayElement*)ROGUE_CREATE_OBJECT(CmdReadArrayElement)), THIS->t, THIS->context, THIS->index ))), scope_0 ))));
  }
  else
  {
    RogueClassCmdArgs* args_2 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))));
    RogueCmdList__add__Cmd( ((RogueCmdList*)args_2), THIS->index );
    return (RogueClassCmd*)(((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_1, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->context, Rogue_literal_strings[751], args_2 ))), true, false ))));
  }
}

RogueClassCmd* RogueCmdElementAccess__resolve_assignment__Scope_Cmd( RogueClassCmdElementAccess* THIS, RogueClassScope* scope_0, RogueClassCmd* new_value_1 )
{
  THIS->context = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->context), scope_0 ));
  RogueClassType* context_type_2 = (((Rogue_Cmd__require_type( THIS->context ))));
  RogueType__organize( context_type_2 );
  if (context_type_2->is_array)
  {
    return (RogueClassCmd*)(((RogueCmdWriteArrayElement__resolve__Scope( ((RogueCmdWriteArrayElement__init__Token_Cmd_Cmd_Cmd( ((RogueClassCmdWriteArrayElement*)ROGUE_CREATE_OBJECT(CmdWriteArrayElement)), THIS->t, THIS->context, THIS->index, new_value_1 ))), scope_0 ))));
  }
  else
  {
    RogueClassCmdArgs* args_3 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))));
    RogueCmdList__add__Cmd( ((RogueCmdList__add__Cmd( ((RogueCmdList*)args_3), THIS->index ))), new_value_1 );
    RogueClassCmd* result_4 = (((RogueScope__resolve_call__Type_CmdAccess_Logical_Logical( scope_0, context_type_2, ((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->context, Rogue_literal_strings[769], args_3 ))), true, false ))));
    return (RogueClassCmd*)(result_4);
  }
}

RogueClassCmd* RogueCmdElementAccess__resolve_modify__Scope_Integer( RogueClassCmdElementAccess* THIS, RogueClassScope* scope_0, RogueInteger delta_1 )
{
  return (RogueClassCmd*)((call_ROGUEM49( 23, (RogueClassCmd*)(((RogueCmdElementAccess__clone__CloneArgs( THIS, ((RogueClassCloneArgs*)(NULL)) )))), scope_0, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdAdd*)ROGUE_CREATE_OBJECT(CmdAdd))), THIS->t, ((RogueClassCmd*)(THIS)), ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, delta_1 ))))) ))))) )));
}

RogueClassCmdElementAccess* RogueCmdElementAccess__init_object( RogueClassCmdElementAccess* THIS )
{
  return (RogueClassCmdElementAccess*)(THIS);
}

RogueClassCmdElementAccess* RogueCmdElementAccess__init__Token_Cmd_Cmd( RogueClassCmdElementAccess* THIS, RogueClassToken* _auto_722_0, RogueClassCmd* _auto_723_1, RogueClassCmd* _auto_724_2 )
{
  THIS->index = _auto_724_2;
  THIS->context = _auto_723_1;
  THIS->t = _auto_722_0;
  return (RogueClassCmdElementAccess*)(THIS);
}

RogueString* RogueCmdConvertToType__type_name( RogueClassCmdConvertToType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[890]);
}

RogueClassCmd* RogueCmdConvertToType__clone__CloneArgs( RogueClassCmdConvertToType* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdConvertToType*)ROGUE_CREATE_OBJECT(CmdConvertToType))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->operand), clone_args_0 )), THIS->_target_type ))))));
}

RogueClassCmd* RogueCmdConvertToType__resolve__Scope( RogueClassCmdConvertToType* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->operand), scope_0 ));
  RogueClassType* operand_type_1 = (((Rogue_Cmd__require_type( THIS->operand ))));
  RogueType__organize( THIS->_target_type );
  if (operand_type_1 == THIS->_target_type)
  {
    return (RogueClassCmd*)(THIS->operand);
  }
  if ((((RogueType__is_primitive( operand_type_1 ))) && ((RogueType__is_primitive( THIS->_target_type )))))
  {
    return (RogueClassCmd*)((call_ROGUEM42( 22, (RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdConvertToPrimitiveType*)ROGUE_CREATE_OBJECT(CmdConvertToPrimitiveType))), THIS->t, THIS->operand, THIS->_target_type )))), scope_0 )));
  }
  else
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->operand, ((RogueString__operatorPLUS__String( Rogue_literal_strings[298], THIS->_target_type->name ))) ))), scope_0 ))));
  }
}

RogueClassCmdConvertToType* RogueCmdConvertToType__init_object( RogueClassCmdConvertToType* THIS )
{
  return (RogueClassCmdConvertToType*)(THIS);
}

RogueString* RogueCmdCreateCallback__type_name( RogueClassCmdCreateCallback* THIS )
{
  return (RogueString*)(Rogue_literal_strings[677]);
}

RogueClassCmdCreateCallback* RogueCmdCreateCallback__clone__CloneArgs( RogueClassCmdCreateCallback* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdCreateCallback*)(((RogueCmdCreateCallback__init__Token_Cmd_String_String_Type( ((RogueClassCmdCreateCallback*)ROGUE_CREATE_OBJECT(CmdCreateCallback)), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->context), clone_args_0 )), THIS->name, THIS->signature, THIS->_return_type ))));
}

RogueClassCmd* RogueCmdCreateCallback__resolve__Scope( RogueClassCmdCreateCallback* THIS, RogueClassScope* scope_0 )
{
  if ((((RogueString__operatorLESSTHANGREATERTHAN__String( THIS->name, Rogue_literal_strings[297] ))) == 0 && !!(THIS->_return_type)))
  {
    THIS->name = ((RogueString__operatorPLUS__String( Rogue_literal_strings[298], THIS->_return_type->name )));
  }
  THIS->context = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->context), scope_0 ));
  RogueClassType* context_type_1 = (((Rogue_Cmd__require_type( THIS->context ))));
  RogueType__organize( context_type_1 );
  RogueClassMethod* m_2 = (((RogueType__find_method__String( context_type_1, ((RogueString__operatorPLUS__String( THIS->name, THIS->signature ))) ))));
  if (!(!!(m_2)))
  {
    RogueMethodList* methods_3 = (((RogueString_MethodListTable__get__String( context_type_1->method_lookup_by_name, THIS->name ))));
    if (!(!!(methods_3)))
    {
      methods_3 = ((RogueMethodList*)((RogueString_MethodListTable__get__String( context_type_1->routine_lookup_by_name, THIS->name ))));
    }
    if (!(!!(methods_3)))
    {
      throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[752] ))), THIS->name ))), Rogue_literal_strings[753] ))), context_type_1->name ))), Rogue_literal_strings[44] ))) ))) )));
    }
    if (methods_3->count != 1)
    {
      throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[754] ))), THIS->name ))), Rogue_literal_strings[755] ))) ))) )));
    }
    m_2 = ((RogueClassMethod*)((RogueClassMethod*)(methods_3->data->objects[0])));
  }
  RogueTypeList* parameter_types_4 = 0;
  if (!!(m_2->parameters->count))
  {
    parameter_types_4 = ((RogueTypeList*)((RogueTypeList__init( ((RogueTypeList*)ROGUE_CREATE_OBJECT(TypeList)) ))));
    {
      RogueLocalList* _auto_1109_13 = (m_2->parameters);
      RogueInteger _auto_1110_14 = (0);
      for (;_auto_1110_14 < _auto_1109_13->count;++_auto_1110_14)
      {
        RogueClassLocal* p_15 = (((RogueClassLocal*)(_auto_1109_13->data->objects[_auto_1110_14])));
        RogueTypeList__add__Type( parameter_types_4, p_15->_type );
      }
    }
  }
  RogueString* callback_type_name_5 = (((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__String( context_type_1->name, Rogue_literal_strings[156] ))), THIS->name ))), ((RogueProgram__get_callback_type_signature__TypeList( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), parameter_types_4 ))) ))));
  RogueClassType* callback_type_6 = (((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, callback_type_name_5 ))));
  if (!(callback_type_6->defined))
  {
    callback_type_6->defined = true;
    RogueAttributes__add__Integer( callback_type_6->attributes, 0 );
    RogueClassType* base_type_7 = (((RogueProgram__get_callback_type_reference__Token_TypeList_Type( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, parameter_types_4, m_2->_return_type ))));
    RogueTypeList__add__Type( callback_type_6->base_types, base_type_7 );
    RogueClassMethod* m_call_8 = (((RogueType__add_method__Token_String( callback_type_6, THIS->t, Rogue_literal_strings[239] ))));
    RogueClassCmdArgs* args_9 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))));
    if (!!(parameter_types_4))
    {
      {
        RogueTypeList* _auto_1111_16 = (parameter_types_4);
        RogueInteger i_17 = (0);
        for (;i_17 < _auto_1111_16->count;++i_17)
        {
          RogueString* param_name_10 = (((RogueString__operatorPLUS__Integer( Rogue_literal_strings[240], (i_17 + 1) ))));
          RogueMethod__add_parameter__Token_String_Type( m_call_8, THIS->t, param_name_10, ((RogueClassType*)(parameter_types_4->data->objects[i_17])) );
          RogueCmdList__add__Cmd( ((RogueCmdList*)args_9), ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, param_name_10 ))))) );
        }
      }
    }
    RogueClassCmd* cmd_11 = 0;
    if (((RogueMethod__is_routine( m_2 ))))
    {
      RogueAttributes__add__Integer( callback_type_6->attributes, 1024 );
      cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, context_type_1->name ))))), THIS->name, args_9 ))))));
    }
    else
    {
      RogueType__add_property__Token_String_Type_Cmd( callback_type_6, THIS->t, Rogue_literal_strings[353], context_type_1, ((RogueClassCmd*)(NULL)) );
      RogueClassMethod* m_init_12 = (((RogueType__add_method__Token_String( callback_type_6, THIS->t, Rogue_literal_strings[285] ))));
      RogueMethod__add_parameter__Token_String_Type( m_init_12, THIS->t, Rogue_literal_strings[353], ((RogueClassType*)(NULL)) );
      cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_String( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, Rogue_literal_strings[353] ))))), THIS->name, args_9 ))))));
    }
    if (!!(m_2->_return_type))
    {
      m_call_8->_return_type = m_2->_return_type;
      cmd_11 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdReturn__init__Token_Cmd( ((RogueClassCmdReturn*)ROGUE_CREATE_OBJECT(CmdReturn)), THIS->t, cmd_11 ))))));
    }
    RogueCmdList__add__Cmd( ((RogueCmdList*)m_call_8->statements), cmd_11 );
  }
  if (((RogueMethod__is_routine( m_2 ))))
  {
    return (RogueClassCmd*)(((RogueCmdReadSingleton__resolve__Scope( ((RogueCmdReadSingleton__init__Token_Type( ((RogueClassCmdReadSingleton*)ROGUE_CREATE_OBJECT(CmdReadSingleton)), THIS->t, callback_type_6 ))), scope_0 ))));
  }
  else
  {
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, callback_type_name_5, ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), THIS->context ))) ))), scope_0 ))));
  }
}

RogueClassCmdCreateCallback* RogueCmdCreateCallback__init_object( RogueClassCmdCreateCallback* THIS )
{
  return (RogueClassCmdCreateCallback*)(THIS);
}

RogueClassCmdCreateCallback* RogueCmdCreateCallback__init__Token_Cmd_String_String_Type( RogueClassCmdCreateCallback* THIS, RogueClassToken* _auto_725_0, RogueClassCmd* _auto_726_1, RogueString* _auto_727_2, RogueString* _auto_728_3, RogueClassType* _auto_729_4 )
{
  THIS->_return_type = _auto_729_4;
  THIS->signature = _auto_728_3;
  THIS->name = _auto_727_2;
  THIS->context = _auto_726_1;
  THIS->t = _auto_725_0;
  return (RogueClassCmdCreateCallback*)(THIS);
}

RogueString* RogueCmdAs__type_name( RogueClassCmdAs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[891]);
}

RogueClassCmd* RogueCmdAs__clone__CloneArgs( RogueClassCmdAs* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdAs*)ROGUE_CREATE_OBJECT(CmdAs))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->operand), clone_args_0 )), THIS->_target_type ))))));
}

RogueClassCmd* RogueCmdAs__resolve__Scope( RogueClassCmdAs* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->operand), scope_0 ));
  RogueType__organize( THIS->_target_type );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdAs__write_cpp__CPPWriter_Logical( RogueClassCmdAs* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[451] ))), THIS->_target_type ))), Rogue_literal_strings[798] );
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->operand), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[157] );
  RogueCPPWriter__print_type_info__Type( writer_0, THIS->_target_type );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[799] );
}

RogueClassCmdAs* RogueCmdAs__init_object( RogueClassCmdAs* THIS )
{
  return (RogueClassCmdAs*)(THIS);
}

RogueString* RogueCmdDefaultValue__type_name( RogueClassCmdDefaultValue* THIS )
{
  return (RogueString*)(Rogue_literal_strings[859]);
}

RogueClassCmd* RogueCmdDefaultValue__clone__CloneArgs( RogueClassCmdDefaultValue* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdDefaultValue__init__Token_Type( ((RogueClassCmdDefaultValue*)ROGUE_CREATE_OBJECT(CmdDefaultValue)), THIS->t, THIS->_of_type ))))));
}

RogueClassCmd* RogueCmdDefaultValue__resolve__Scope( RogueClassCmdDefaultValue* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->_of_type );
  RogueClassCmd* default_value_1 = (((RogueType__create_default_value__Token( THIS->_of_type, THIS->t ))));
  if (((RogueType__is_reference( THIS->_of_type ))))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdCastToType*)ROGUE_CREATE_OBJECT(CmdCastToType))), THIS->t, default_value_1, THIS->_of_type ))))));
  }
  else
  {
    return (RogueClassCmd*)(default_value_1);
  }
}

RogueClassType* Rogue_CmdDefaultValue__type( RogueClassCmdDefaultValue* THIS )
{
  return (RogueClassType*)(THIS->_of_type);
}

RogueClassCmdDefaultValue* RogueCmdDefaultValue__init_object( RogueClassCmdDefaultValue* THIS )
{
  return (RogueClassCmdDefaultValue*)(THIS);
}

RogueClassCmdDefaultValue* RogueCmdDefaultValue__init__Token_Type( RogueClassCmdDefaultValue* THIS, RogueClassToken* _auto_730_0, RogueClassType* _auto_731_1 )
{
  THIS->_of_type = _auto_731_1;
  THIS->t = _auto_730_0;
  return (RogueClassCmdDefaultValue*)(THIS);
}

RogueString* RogueCmdFormattedString__type_name( RogueClassCmdFormattedString* THIS )
{
  return (RogueString*)(Rogue_literal_strings[678]);
}

RogueClassCmd* RogueCmdFormattedString__clone__CloneArgs( RogueClassCmdFormattedString* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdFormattedString__init__Token_String_CmdArgs( ((RogueClassCmdFormattedString*)ROGUE_CREATE_OBJECT(CmdFormattedString)), THIS->t, THIS->format, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

RogueClassType* Rogue_CmdFormattedString__implicit_type( RogueClassCmdFormattedString* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String);
}

RogueClassCmd* RogueCmdFormattedString__resolve__Scope( RogueClassCmdFormattedString* THIS, RogueClassScope* scope_0 )
{
  RogueClassCmdAccess* cmd_1 = (((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, Rogue_literal_strings[29], ((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))) ))));
  RogueString* fmt_2 = (THIS->format);
  {
    RogueClassCmdArgs* _auto_1112_4 = (THIS->args);
    RogueInteger _auto_1113_5 = (0);
    for (;_auto_1113_5 < _auto_1112_4->count;++_auto_1113_5)
    {
      RogueClassCmd* arg_6 = (((RogueClassCmd*)(_auto_1112_4->data->objects[_auto_1113_5])));
      arg_6 = ((RogueClassCmd*)((RogueCmd__require_value( (call_ROGUEM42( 22, (RogueClassCmd*)(arg_6), scope_0 )) ))));
      RogueOptionalInteger i_3 = (((RogueString__locate__Character_OptionalInteger( fmt_2, (RogueCharacter)'$', RogueOptionalInteger() ))));
      if (!(i_3.exists))
      {
        throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[756] )));
      }
      if (i_3.value > 0)
      {
        cmd_1 = ((RogueClassCmdAccess*)((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(cmd_1)), Rogue_literal_strings[757], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), ((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Integer( ((RogueClassCmdLiteralString*)ROGUE_CREATE_OBJECT(CmdLiteralString)), THIS->t, ((RogueString__leftmost__Integer( fmt_2, i_3.value ))), 0 ))))) ))) ))));
        fmt_2 = ((RogueString*)((RogueString__from__Integer( fmt_2, (i_3.value + 1) ))));
      }
      else
      {
        fmt_2 = ((RogueString*)((RogueString__from__Integer( fmt_2, 1 ))));
      }
      cmd_1 = ((RogueClassCmdAccess*)((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(cmd_1)), Rogue_literal_strings[757], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), (call_ROGUEM43( 4, (RogueClassCmd*)(arg_6), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String )) ))) ))));
    }
  }
  if (!!(fmt_2->count))
  {
    if (((RogueString__locate__Character_OptionalInteger( fmt_2, (RogueCharacter)'$', RogueOptionalInteger() ))).exists)
    {
      throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[758] )));
    }
    cmd_1 = ((RogueClassCmdAccess*)((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(cmd_1)), Rogue_literal_strings[757], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), ((RogueClassCmd*)(((RogueCmdLiteralString__init__Token_String_Integer( ((RogueClassCmdLiteralString*)ROGUE_CREATE_OBJECT(CmdLiteralString)), THIS->t, fmt_2, 0 ))))) ))) ))));
  }
  return (RogueClassCmd*)((call_ROGUEM42( 22, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( cmd_1, scope_0 )))), ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String ))), scope_0 )));
}

RogueClassType* Rogue_CmdFormattedString__type( RogueClassCmdFormattedString* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_String);
}

RogueClassCmdFormattedString* RogueCmdFormattedString__init_object( RogueClassCmdFormattedString* THIS )
{
  return (RogueClassCmdFormattedString*)(THIS);
}

RogueClassCmdFormattedString* RogueCmdFormattedString__init__Token_String_CmdArgs( RogueClassCmdFormattedString* THIS, RogueClassToken* _auto_733_0, RogueString* _auto_734_1, RogueClassCmdArgs* _auto_735_2 )
{
  THIS->args = _auto_735_2;
  THIS->format = _auto_734_1;
  THIS->t = _auto_733_0;
  return (RogueClassCmdFormattedString*)(THIS);
}

RogueString* RogueCmdLiteralReal__type_name( RogueClassCmdLiteralReal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[860]);
}

RogueClassCmd* RogueCmdLiteralReal__clone__CloneArgs( RogueClassCmdLiteralReal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)ROGUE_CREATE_OBJECT(CmdLiteralReal)), THIS->t, THIS->value ))))));
}

RogueClassCmd* RogueCmdLiteralReal__resolve__Scope( RogueClassCmdLiteralReal* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralReal__type( RogueClassCmdLiteralReal* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real);
}

void RogueCmdLiteralReal__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralReal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__Real( writer_0, THIS->value );
}

RogueClassCmdLiteralReal* RogueCmdLiteralReal__init_object( RogueClassCmdLiteralReal* THIS )
{
  return (RogueClassCmdLiteralReal*)(THIS);
}

RogueClassCmdLiteralReal* RogueCmdLiteralReal__init__Token_Real( RogueClassCmdLiteralReal* THIS, RogueClassToken* _auto_736_0, RogueReal _auto_737_1 )
{
  THIS->value = _auto_737_1;
  THIS->t = _auto_736_0;
  return (RogueClassCmdLiteralReal*)(THIS);
}

RogueString* RogueCmdLiteralLong__type_name( RogueClassCmdLiteralLong* THIS )
{
  return (RogueString*)(Rogue_literal_strings[861]);
}

RogueClassCmd* RogueCmdLiteralLong__cast_to__Type( RogueClassCmdLiteralLong* THIS, RogueClassType* target_type_0 )
{
  if (target_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralReal__init__Token_Real( ((RogueClassCmdLiteralReal*)ROGUE_CREATE_OBJECT(CmdLiteralReal)), THIS->t, ((RogueReal)(THIS->value)) ))))));
  }
  else if (target_type_0 == ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, ((RogueInteger)(THIS->value)) ))))));
  }
  else
  {
    return (RogueClassCmd*)((RogueCmd__cast_to__Type( ((RogueClassCmd*)THIS), target_type_0 )));
  }
}

RogueClassCmd* RogueCmdLiteralLong__clone__CloneArgs( RogueClassCmdLiteralLong* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralLong__init__Token_Long( ((RogueClassCmdLiteralLong*)ROGUE_CREATE_OBJECT(CmdLiteralLong)), THIS->t, THIS->value ))))));
}

RogueClassCmd* RogueCmdLiteralLong__resolve__Scope( RogueClassCmdLiteralLong* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralLong__type( RogueClassCmdLiteralLong* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Long);
}

void RogueCmdLiteralLong__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralLong* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Long( writer_0, THIS->value ))), Rogue_literal_strings[800] );
}

RogueClassCmdLiteralLong* RogueCmdLiteralLong__init_object( RogueClassCmdLiteralLong* THIS )
{
  return (RogueClassCmdLiteralLong*)(THIS);
}

RogueClassCmdLiteralLong* RogueCmdLiteralLong__init__Token_Long( RogueClassCmdLiteralLong* THIS, RogueClassToken* _auto_738_0, RogueLong _auto_739_1 )
{
  THIS->value = _auto_739_1;
  THIS->t = _auto_738_0;
  return (RogueClassCmdLiteralLong*)(THIS);
}

RogueString* RogueCmdLiteralCharacter__type_name( RogueClassCmdLiteralCharacter* THIS )
{
  return (RogueString*)(Rogue_literal_strings[862]);
}

RogueClassCmd* RogueCmdLiteralCharacter__clone__CloneArgs( RogueClassCmdLiteralCharacter* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLiteralCharacter__init__Token_Character( ((RogueClassCmdLiteralCharacter*)ROGUE_CREATE_OBJECT(CmdLiteralCharacter)), THIS->t, THIS->value ))))));
}

RogueClassCmd* RogueCmdLiteralCharacter__resolve__Scope( RogueClassCmdLiteralCharacter* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassType* Rogue_CmdLiteralCharacter__type( RogueClassCmdLiteralCharacter* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character);
}

void RogueCmdLiteralCharacter__write_cpp__CPPWriter_Logical( RogueClassCmdLiteralCharacter* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[801] );
  if ((((RogueInteger)(THIS->value)) >= 32 && ((RogueInteger)(THIS->value)) <= 126))
  {
    switch (((RogueInteger)(THIS->value)))
    {
      case 10:
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[802] );
        break;
      }
      case (RogueCharacter)'\\':
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[803] );
        break;
      }
      case (RogueCharacter)'\'':
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[804] );
        break;
      }
      default:
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[43] );
        RogueCPPWriter__print__Character_Logical( writer_0, THIS->value, false );
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[43] );
      }
    }
  }
  else
  {
    RogueCPPWriter__print__Integer( writer_0, ((RogueInteger)(THIS->value)) );
  }
}

RogueClassCmdLiteralCharacter* RogueCmdLiteralCharacter__init_object( RogueClassCmdLiteralCharacter* THIS )
{
  return (RogueClassCmdLiteralCharacter*)(THIS);
}

RogueClassCmdLiteralCharacter* RogueCmdLiteralCharacter__init__Token_Character( RogueClassCmdLiteralCharacter* THIS, RogueClassToken* _auto_740_0, RogueCharacter _auto_741_1 )
{
  THIS->value = _auto_741_1;
  THIS->t = _auto_740_0;
  return (RogueClassCmdLiteralCharacter*)(THIS);
}

RogueString* RogueCmdCreateList__type_name( RogueClassCmdCreateList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[679]);
}

RogueClassCmd* RogueCmdCreateList__clone__CloneArgs( RogueClassCmdCreateList* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateList__init__Token_CmdArgs_Type( ((RogueClassCmdCreateList*)ROGUE_CREATE_OBJECT(CmdCreateList)), THIS->t, ((RogueCmd__clone__CmdArgs_CloneArgs( ((RogueClassCmd*)THIS), THIS->args, clone_args_0 ))), THIS->_list_type ))))));
}

RogueClassCmd* RogueCmdCreateList__resolve__Scope( RogueClassCmdCreateList* THIS, RogueClassScope* scope_0 )
{
  RogueCmdArgs__resolve__Scope( THIS->args, scope_0 );
  if ((!(!!(THIS->_list_type)) && !!(THIS->args->count)))
  {
    RogueClassType* common_type_1 = ((call_ROGUEM46( 27, (RogueClassCmd*)(((RogueClassCmd*)(THIS->args->data->objects[0]))) )));
    {
      RogueClassCmdArgs* _auto_1114_5 = (THIS->args);
      RogueInteger _auto_1115_6 = (0);
      for (;_auto_1115_6 < _auto_1114_5->count;++_auto_1115_6)
      {
        RogueClassCmd* arg_7 = (((RogueClassCmd*)(_auto_1114_5->data->objects[_auto_1115_6])));
        common_type_1 = ((RogueClassType*)((RogueCmd__find_common_type__Type_Type( ((RogueClassCmd*)THIS), common_type_1, (call_ROGUEM46( 27, (RogueClassCmd*)(arg_7) )) ))));
      }
    }
    THIS->_list_type = ((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, ((RogueString__operatorPLUS__String( ((RogueString__operatorPLUS__Object( Rogue_literal_strings[0], ((RogueObject*)(common_type_1)) ))), Rogue_literal_strings[162] ))) )));
    RogueType__organize( THIS->_list_type );
  }
  if (!!(THIS->_list_type))
  {
    RogueClassType* element_type_2 = (THIS->_list_type->_element_type);
    {
      RogueClassCmdArgs* _auto_1116_8 = (THIS->args);
      RogueInteger index_9 = (0);
      for (;index_9 < _auto_1116_8->count;++index_9)
      {
        THIS->args->data->objects[index_9] = (call_ROGUEM42( 22, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)((call_ROGUEM42( 22, (RogueClassCmd*)(((RogueClassCmd*)(THIS->args->data->objects[index_9]))), scope_0 ))), element_type_2 ))), scope_0 ));
      }
    }
  }
  if (!(!!(THIS->_list_type)))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[759] )));
  }
  RogueInteger initial_capacity_3 = (10);
  if (!!(THIS->args->count))
  {
    initial_capacity_3 = ((RogueInteger)THIS->args->count);
  }
  RogueClassCmd* cmd_4 = 0;
  cmd_4 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->_list_type->name, ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, initial_capacity_3 ))))) ))) ))))));
  {
    RogueClassCmdArgs* _auto_1117_10 = (THIS->args);
    RogueInteger _auto_1118_11 = (0);
    for (;_auto_1118_11 < _auto_1117_10->count;++_auto_1118_11)
    {
      RogueClassCmd* arg_12 = (((RogueClassCmd*)(_auto_1117_10->data->objects[_auto_1118_11])));
      cmd_4 = ((RogueClassCmd*)((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, cmd_4, Rogue_literal_strings[760], ((RogueCmdArgs__init__Cmd( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)), arg_12 ))) ))))));
    }
  }
  return (RogueClassCmd*)((call_ROGUEM42( 22, (RogueClassCmd*)(cmd_4), scope_0 )));
}

RogueClassCmdCreateList* RogueCmdCreateList__init_object( RogueClassCmdCreateList* THIS )
{
  return (RogueClassCmdCreateList*)(THIS);
}

RogueClassCmdCreateList* RogueCmdCreateList__init__Token_CmdArgs_Type( RogueClassCmdCreateList* THIS, RogueClassToken* _auto_742_0, RogueClassCmdArgs* _auto_743_1, RogueClassType* _auto_744_2 )
{
  THIS->_list_type = _auto_744_2;
  THIS->args = _auto_743_1;
  THIS->t = _auto_742_0;
  return (RogueClassCmdCreateList*)(THIS);
}

RogueString* RogueCmdCallPriorMethod__type_name( RogueClassCmdCallPriorMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[680]);
}

RogueClassCmd* RogueCmdCallPriorMethod__clone__CloneArgs( RogueClassCmdCallPriorMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCallPriorMethod__init__Token_String_CmdArgs( ((RogueClassCmdCallPriorMethod*)ROGUE_CREATE_OBJECT(CmdCallPriorMethod)), THIS->t, THIS->name, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdCallPriorMethod__resolve__Scope( RogueClassCmdCallPriorMethod* THIS, RogueClassScope* scope_0 )
{
  return (RogueClassCmd*)((call_ROGUEM42( 3, (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, THIS->name, THIS->args ))), scope_0 )))), scope_0 )));
}

RogueClassCmdCallPriorMethod* RogueCmdCallPriorMethod__init_object( RogueClassCmdCallPriorMethod* THIS )
{
  return (RogueClassCmdCallPriorMethod*)(THIS);
}

RogueClassCmdCallPriorMethod* RogueCmdCallPriorMethod__init__Token_String_CmdArgs( RogueClassCmdCallPriorMethod* THIS, RogueClassToken* _auto_745_0, RogueString* _auto_746_1, RogueClassCmdArgs* _auto_747_2 )
{
  THIS->args = _auto_747_2;
  THIS->name = _auto_746_1;
  THIS->t = _auto_745_0;
  return (RogueClassCmdCallPriorMethod*)(THIS);
}

RogueString* RogueFnParamList__to_String( RogueFnParamList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueFnParamList* _auto_1119_2 = (THIS);
    RogueInteger _auto_1120_3 = (0);
    for (;_auto_1120_3 < _auto_1119_2->count;++_auto_1120_3)
    {
      RogueClassFnParam* value_4 = (((RogueClassFnParam*)(_auto_1119_2->data->objects[_auto_1120_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueFnParamList__type_name( RogueFnParamList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[946]);
}

RogueFnParamList* RogueFnParamList__init_object( RogueFnParamList* THIS )
{
  return (RogueFnParamList*)(THIS);
}

RogueFnParamList* RogueFnParamList__init( RogueFnParamList* THIS )
{
  RogueFnParamList__init__Integer( THIS, 10 );
  return (RogueFnParamList*)(THIS);
}

RogueFnParamList* RogueFnParamList__init__Integer( RogueFnParamList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassFnParam*), true );
  return (RogueFnParamList*)(THIS);
}

RogueFnParamList* RogueFnParamList__add__FnParam( RogueFnParamList* THIS, RogueClassFnParam* value_0 )
{
  ((RogueFnParamList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueFnParamList*)(THIS);
}

RogueInteger RogueFnParamList__capacity( RogueFnParamList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueFnParamList* RogueFnParamList__reserve__Integer( RogueFnParamList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassFnParam*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueFnParamList__capacity( THIS ))) + ((RogueFnParamList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassFnParam*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueFnParamList*)(THIS);
}

RogueString* RogueFnParam__type_name( RogueClassFnParam* THIS )
{
  return (RogueString*)(Rogue_literal_strings[587]);
}

RogueClassFnParam* RogueFnParam__init__String( RogueClassFnParam* THIS, RogueString* _auto_748_0 )
{
  THIS->name = _auto_748_0;
  return (RogueClassFnParam*)(THIS);
}

RogueClassFnParam* RogueFnParam__init_object( RogueClassFnParam* THIS )
{
  return (RogueClassFnParam*)(THIS);
}

RogueString* RogueFnArgList__to_String( RogueFnArgList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueFnArgList* _auto_1129_2 = (THIS);
    RogueInteger _auto_1130_3 = (0);
    for (;_auto_1130_3 < _auto_1129_2->count;++_auto_1130_3)
    {
      RogueClassFnArg* value_4 = (((RogueClassFnArg*)(_auto_1129_2->data->objects[_auto_1130_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueFnArgList__type_name( RogueFnArgList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[947]);
}

RogueFnArgList* RogueFnArgList__init_object( RogueFnArgList* THIS )
{
  return (RogueFnArgList*)(THIS);
}

RogueFnArgList* RogueFnArgList__init( RogueFnArgList* THIS )
{
  RogueFnArgList__init__Integer( THIS, 10 );
  return (RogueFnArgList*)(THIS);
}

RogueFnArgList* RogueFnArgList__init__Integer( RogueFnArgList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassFnArg*), true );
  return (RogueFnArgList*)(THIS);
}

RogueFnArgList* RogueFnArgList__add__FnArg( RogueFnArgList* THIS, RogueClassFnArg* value_0 )
{
  ((RogueFnArgList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueFnArgList*)(THIS);
}

RogueInteger RogueFnArgList__capacity( RogueFnArgList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueFnArgList* RogueFnArgList__reserve__Integer( RogueFnArgList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassFnArg*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueFnArgList__capacity( THIS ))) + ((RogueFnArgList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassFnArg*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueFnArgList*)(THIS);
}

RogueString* RogueFnArg__type_name( RogueClassFnArg* THIS )
{
  return (RogueString*)(Rogue_literal_strings[588]);
}

RogueClassFnArg* RogueFnArg__init__String_Cmd( RogueClassFnArg* THIS, RogueString* _auto_750_0, RogueClassCmd* _auto_751_1 )
{
  THIS->value = _auto_751_1;
  THIS->name = _auto_750_0;
  return (RogueClassFnArg*)(THIS);
}

RogueClassFnArg* RogueFnArg__set_type__Type( RogueClassFnArg* THIS, RogueClassType* _auto_752_0 )
{
  THIS->_type = _auto_752_0;
  return (RogueClassFnArg*)(THIS);
}

RogueClassFnArg* RogueFnArg__init_object( RogueClassFnArg* THIS )
{
  return (RogueClassFnArg*)(THIS);
}

RogueString* RogueCmdCreateFunction__type_name( RogueClassCmdCreateFunction* THIS )
{
  return (RogueString*)(Rogue_literal_strings[681]);
}

RogueClassCmdCreateFunction* RogueCmdCreateFunction__clone__CloneArgs( RogueClassCmdCreateFunction* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueFnArgList* args2_1 = 0;
  if (!!(THIS->with_args))
  {
    args2_1 = ((RogueFnArgList*)((RogueFnArgList__init( ((RogueFnArgList*)ROGUE_CREATE_OBJECT(FnArgList)) ))));
    {
      RogueFnArgList* _auto_1139_2 = (THIS->with_args);
      RogueInteger _auto_1140_3 = (0);
      for (;_auto_1140_3 < _auto_1139_2->count;++_auto_1140_3)
      {
        RogueClassFnArg* arg_4 = (((RogueClassFnArg*)(_auto_1139_2->data->objects[_auto_1140_3])));
        RogueFnArgList__add__FnArg( args2_1, ((RogueFnArg__set_type__Type( ((RogueFnArg__init__String_Cmd( ((RogueClassFnArg*)ROGUE_CREATE_OBJECT(FnArg)), arg_4->name, (call_ROGUEM44( 5, (RogueClassCmd*)(arg_4->value), clone_args_0 )) ))), arg_4->_type ))) );
      }
    }
  }
  return (RogueClassCmdCreateFunction*)(((RogueCmdCreateFunction__init__Token_FnParamList_Type_FnArgList_CmdStatementList( ((RogueClassCmdCreateFunction*)ROGUE_CREATE_OBJECT(CmdCreateFunction)), THIS->t, THIS->parameters, THIS->_return_type, args2_1, ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 ))) ))));
}

RogueClassCmd* RogueCmdCreateFunction__resolve__Scope( RogueClassCmdCreateFunction* THIS, RogueClassScope* scope_0 )
{
  RogueTypeList* parameter_types_1 = 0;
  if ((!!(THIS->parameters) && !!(THIS->parameters->count)))
  {
    parameter_types_1 = ((RogueTypeList*)((RogueTypeList__init( ((RogueTypeList*)ROGUE_CREATE_OBJECT(TypeList)) ))));
    {
      RogueFnParamList* _auto_1141_9 = (THIS->parameters);
      RogueInteger _auto_1142_10 = (0);
      for (;_auto_1142_10 < _auto_1141_9->count;++_auto_1142_10)
      {
        RogueClassFnParam* param_11 = (((RogueClassFnParam*)(_auto_1141_9->data->objects[_auto_1142_10])));
        RogueTypeList__add__Type( parameter_types_1, param_11->_type );
      }
    }
  }
  RogueString* fn_name_2 = (((RogueString__operatorPLUS__Integer( Rogue_literal_strings[762], ((RogueProgram__next_unique_integer( ((RogueClassProgram*)ROGUE_SINGLETON(Program)) ))) ))));
  RogueClassType* fn_type_3 = (((RogueProgram__get_type_reference__Token_String( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, fn_name_2 ))));
  fn_type_3->defined = true;
  RogueAttributes__add__Integer( fn_type_3->attributes, 0 );
  RogueClassType* base_type_4 = (((RogueProgram__get_callback_type_reference__Token_TypeList_Type( ((RogueClassProgram*)ROGUE_SINGLETON(Program)), THIS->t, parameter_types_1, THIS->_return_type ))));
  RogueTypeList__add__Type( fn_type_3->base_types, base_type_4 );
  RogueClassMethod* m_call_5 = (((RogueType__add_method__Token_String( fn_type_3, THIS->t, Rogue_literal_strings[239] ))));
  if (!!(THIS->parameters))
  {
    {
      RogueFnParamList* _auto_1143_12 = (THIS->parameters);
      RogueInteger _auto_1144_13 = (0);
      for (;_auto_1144_13 < _auto_1143_12->count;++_auto_1144_13)
      {
        RogueClassFnParam* param_14 = (((RogueClassFnParam*)(_auto_1143_12->data->objects[_auto_1144_13])));
        RogueMethod__add_parameter__Token_String_Type( m_call_5, THIS->t, param_14->name, param_14->_type );
      }
    }
  }
  m_call_5->_return_type = THIS->_return_type;
  m_call_5->statements = THIS->statements;
  if (!!(THIS->with_args))
  {
    RogueClassMethod* m_init_6 = (((RogueType__add_method__Token_String( fn_type_3, THIS->t, Rogue_literal_strings[285] ))));
    RogueClassCmdArgs* create_args_7 = (((RogueCmdArgs__init( ((RogueClassCmdArgs*)ROGUE_CREATE_OBJECT(CmdArgs)) ))));
    {
      RogueFnArgList* _auto_1145_15 = (THIS->with_args);
      RogueInteger _auto_1146_16 = (0);
      for (;_auto_1146_16 < _auto_1145_15->count;++_auto_1146_16)
      {
        RogueClassFnArg* fn_arg_17 = (((RogueClassFnArg*)(_auto_1145_15->data->objects[_auto_1146_16])));
        RogueClassCmd* arg_8 = (((RogueCmd__require_value( (call_ROGUEM42( 22, (RogueClassCmd*)(fn_arg_17->value), scope_0 )) ))));
        RogueCmdList__add__Cmd( ((RogueCmdList*)create_args_7), arg_8 );
        RogueType__add_property__Token_String_Type_Cmd( fn_type_3, fn_arg_17->value->t, fn_arg_17->name, (call_ROGUEM46( 27, (RogueClassCmd*)(arg_8) )), ((RogueClassCmd*)(NULL)) );
        RogueMethod__add_parameter__Token_String_Type( m_init_6, fn_arg_17->value->t, fn_arg_17->name, ((RogueClassType*)(NULL)) );
      }
    }
    return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_String_CmdArgs( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, fn_name_2, create_args_7 ))), scope_0 ))));
  }
  else
  {
    RogueAttributes__add__Integer( fn_type_3->attributes, 1024 );
    return (RogueClassCmd*)(((RogueCmdReadSingleton__resolve__Scope( ((RogueCmdReadSingleton__init__Token_Type( ((RogueClassCmdReadSingleton*)ROGUE_CREATE_OBJECT(CmdReadSingleton)), THIS->t, fn_type_3 ))), scope_0 ))));
  }
}

RogueClassCmdCreateFunction* RogueCmdCreateFunction__init_object( RogueClassCmdCreateFunction* THIS )
{
  return (RogueClassCmdCreateFunction*)(THIS);
}

RogueClassCmdCreateFunction* RogueCmdCreateFunction__init__Token_FnParamList_Type_FnArgList_CmdStatementList( RogueClassCmdCreateFunction* THIS, RogueClassToken* _auto_754_0, RogueFnParamList* _auto_755_1, RogueClassType* _auto_756_2, RogueFnArgList* _auto_757_3, RogueClassCmdStatementList* _auto_758_4 )
{
  THIS->statements = _auto_758_4;
  THIS->with_args = _auto_757_3;
  THIS->_return_type = _auto_756_2;
  THIS->parameters = _auto_755_1;
  THIS->t = _auto_754_0;
  return (RogueClassCmdCreateFunction*)(THIS);
}

RogueString* RogueCmdNativeCode__type_name( RogueClassCmdNativeCode* THIS )
{
  return (RogueString*)(Rogue_literal_strings[682]);
}

RogueClassCmdNativeCode* RogueCmdNativeCode__clone__CloneArgs( RogueClassCmdNativeCode* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmdNativeCode*)(((RogueCmdNativeCode__init__Token_String_Type( ((RogueClassCmdNativeCode*)ROGUE_CREATE_OBJECT(CmdNativeCode)), THIS->t, THIS->code, THIS->_result_type ))));
}

RogueLogical RogueCmdNativeCode__requires_semicolon( RogueClassCmdNativeCode* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmd* RogueCmdNativeCode__resolve__Scope( RogueClassCmdNativeCode* THIS, RogueClassScope* scope_0 )
{
  THIS->this_method = scope_0->this_method;
  if (!!(THIS->_result_type))
  {
    RogueType__organize( THIS->_result_type );
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdNativeCode__trace_used_code( RogueClassCmdNativeCode* THIS )
{
}

RogueClassType* Rogue_CmdNativeCode__type( RogueClassCmdNativeCode* THIS )
{
  return (RogueClassType*)(THIS->_result_type);
}

void RogueCmdNativeCode__write_cpp__CPPWriter_Logical( RogueClassCmdNativeCode* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueLogical needs_newline_2 = ((((RogueString__contains__String( THIS->code, ((RogueCharacter__to_String( (RogueCharacter)10 ))) ))) || !(!!(THIS->_result_type))));
  {
    RogueClassLineReader* _auto_1147_10 = (((RogueLineReader__init__String( ((RogueClassLineReader*)ROGUE_CREATE_OBJECT(LineReader)), THIS->code ))));
    while (((RogueLineReader__has_another( _auto_1147_10 ))))
    {
      RogueString* line_11 = (((RogueLineReader__read( _auto_1147_10 ))));
      RogueInteger original_indent_3 = (writer_0->indent);
      if (((RogueString__begins_with__Character( line_11, (RogueCharacter)'#' ))))
      {
        writer_0->indent = 0;
      }
      RogueOptionalInteger marker_4 = (((RogueString__locate__Character_OptionalInteger( line_11, (RogueCharacter)'$', RogueOptionalInteger() ))));
      while (marker_4.exists)
      {
        RogueInteger i1_5 = (marker_4.value);
        if (i1_5 > 0)
        {
          RogueCPPWriter__print__String( writer_0, ((RogueString__leftmost__Integer( line_11, i1_5 ))) );
        }
        RogueInteger i2_6 = ((i1_5 + 2));
        while ((i2_6 < line_11->count && ((RogueCharacter__is_identifier( line_11->characters[i2_6] )))))
        {
          ++i2_6;
        }
        RogueString* name_7 = (((RogueString__from__Integer_Integer( line_11, (i1_5 + 1), (i2_6 - 1) ))));
        line_11 = ((RogueString*)((RogueString__from__Integer( line_11, i2_6 ))));
        if (((RogueString__operatorLESSTHANGREATERTHAN__String( name_7, Rogue_literal_strings[222] ))) == 0)
        {
          RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[222] );
        }
        else if (((RogueString__operatorLESSTHANGREATERTHAN__String( name_7, Rogue_literal_strings[145] ))) == 0)
        {
          RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[777] );
        }
        else
        {
          RogueLogical found_8 = (false);
          {
            RogueLocalList* _auto_1148_12 = (THIS->this_method->locals);
            RogueInteger _auto_1149_13 = (0);
            for (;_auto_1149_13 < _auto_1148_12->count;++_auto_1149_13)
            {
              RogueClassLocal* v_14 = (((RogueClassLocal*)(_auto_1148_12->data->objects[_auto_1149_13])));
              if (((RogueString__operatorLESSTHANGREATERTHAN__String( v_14->name, name_7 ))) == 0)
              {
                found_8 = ((RogueLogical)true);
                RogueCPPWriter__print__String( writer_0, ((RogueLocal__cpp_name( v_14 ))) );
                goto _auto_1150;
              }
            }
          }
          _auto_1150:;
          if (!(found_8))
          {
            RogueClassProperty* p_9 = (((RogueString_PropertyTable__get__String( THIS->this_method->type_context->property_lookup, name_7 ))));
            if (!!(p_9))
            {
              found_8 = ((RogueLogical)true);
              RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[805] ))), p_9->cpp_name );
            }
          }
          if (!(found_8))
          {
            RogueCPPWriter__print__String( ((RogueCPPWriter__print__Character_Logical( writer_0, (RogueCharacter)'$', false ))), name_7 );
          }
        }
        marker_4 = ((RogueOptionalInteger)((RogueString__locate__Character_OptionalInteger( line_11, (RogueCharacter)'$', RogueOptionalInteger() ))));
      }
      if (needs_newline_2)
      {
        if (!!(line_11->count))
        {
          RogueCPPWriter__println__String( writer_0, line_11 );
        }
        else
        {
          RogueCPPWriter__println( writer_0 );
        }
      }
      else if (!!(line_11->count))
      {
        RogueCPPWriter__print__String( writer_0, line_11 );
      }
      writer_0->indent = original_indent_3;
    }
  }
}

RogueClassCmdNativeCode* RogueCmdNativeCode__init_object( RogueClassCmdNativeCode* THIS )
{
  return (RogueClassCmdNativeCode*)(THIS);
}

RogueClassCmdNativeCode* RogueCmdNativeCode__init__Token_String_Type( RogueClassCmdNativeCode* THIS, RogueClassToken* _auto_759_0, RogueString* _auto_760_1, RogueClassType* _auto_761_2 )
{
  THIS->_result_type = _auto_761_2;
  THIS->code = _auto_760_1;
  THIS->t = _auto_759_0;
  return (RogueClassCmdNativeCode*)(THIS);
}

RogueString* RogueString_TokenTypeTableEntryList__to_String( RogueTableEntry_of_String_TokenTypeList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_TokenTypeList* _auto_1151_2 = (THIS);
    RogueInteger _auto_1152_3 = (0);
    for (;_auto_1152_3 < _auto_1151_2->count;++_auto_1152_3)
    {
      RogueClassString_TokenTypeTableEntry* value_4 = (((RogueClassString_TokenTypeTableEntry*)(_auto_1151_2->data->objects[_auto_1152_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_TokenTypeTableEntryList__type_name( RogueTableEntry_of_String_TokenTypeList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[948]);
}

RogueTableEntry_of_String_TokenTypeList* RogueString_TokenTypeTableEntryList__init_object( RogueTableEntry_of_String_TokenTypeList* THIS )
{
  return (RogueTableEntry_of_String_TokenTypeList*)(THIS);
}

RogueTableEntry_of_String_TokenTypeList* RogueString_TokenTypeTableEntryList__init__Integer_String_TokenTypeTableEntry( RogueTableEntry_of_String_TokenTypeList* THIS, RogueInteger initial_capacity_0, RogueClassString_TokenTypeTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_TokenTypeTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_792_3 = (initial_capacity_0);
    for (;i_2 <= _auto_792_3;++i_2)
    {
      RogueString_TokenTypeTableEntryList__add__String_TokenTypeTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_TokenTypeList*)(THIS);
}

RogueTableEntry_of_String_TokenTypeList* RogueString_TokenTypeTableEntryList__add__String_TokenTypeTableEntry( RogueTableEntry_of_String_TokenTypeList* THIS, RogueClassString_TokenTypeTableEntry* value_0 )
{
  ((RogueString_TokenTypeTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_TokenTypeList*)(THIS);
}

RogueInteger RogueString_TokenTypeTableEntryList__capacity( RogueTableEntry_of_String_TokenTypeList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_TokenTypeList* RogueString_TokenTypeTableEntryList__reserve__Integer( RogueTableEntry_of_String_TokenTypeList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_TokenTypeTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_TokenTypeTableEntryList__capacity( THIS ))) + ((RogueString_TokenTypeTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_TokenTypeTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_TokenTypeList*)(THIS);
}

RogueString* RogueString_TokenTypeTableEntry__type_name( RogueClassString_TokenTypeTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[589]);
}

RogueClassString_TokenTypeTableEntry* RogueString_TokenTypeTableEntry__init__String_TokenType_Integer( RogueClassString_TokenTypeTableEntry* THIS, RogueString* _key_0, RogueClassTokenType* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_TokenTypeTableEntry*)(THIS);
}

RogueClassString_TokenTypeTableEntry* RogueString_TokenTypeTableEntry__init_object( RogueClassString_TokenTypeTableEntry* THIS )
{
  return (RogueClassString_TokenTypeTableEntry*)(THIS);
}

RogueString* RogueString_TokenTypeTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[619]);
}

RogueString* RogueString_TypeSpecializerTableEntryList__to_String( RogueTableEntry_of_String_TypeSpecializerList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_TypeSpecializerList* _auto_1161_2 = (THIS);
    RogueInteger _auto_1162_3 = (0);
    for (;_auto_1162_3 < _auto_1161_2->count;++_auto_1162_3)
    {
      RogueClassString_TypeSpecializerTableEntry* value_4 = (((RogueClassString_TypeSpecializerTableEntry*)(_auto_1161_2->data->objects[_auto_1162_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_TypeSpecializerTableEntryList__type_name( RogueTableEntry_of_String_TypeSpecializerList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[949]);
}

RogueTableEntry_of_String_TypeSpecializerList* RogueString_TypeSpecializerTableEntryList__init_object( RogueTableEntry_of_String_TypeSpecializerList* THIS )
{
  return (RogueTableEntry_of_String_TypeSpecializerList*)(THIS);
}

RogueTableEntry_of_String_TypeSpecializerList* RogueString_TypeSpecializerTableEntryList__init__Integer_String_TypeSpecializerTableEntry( RogueTableEntry_of_String_TypeSpecializerList* THIS, RogueInteger initial_capacity_0, RogueClassString_TypeSpecializerTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_TypeSpecializerTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_796_3 = (initial_capacity_0);
    for (;i_2 <= _auto_796_3;++i_2)
    {
      RogueString_TypeSpecializerTableEntryList__add__String_TypeSpecializerTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_TypeSpecializerList*)(THIS);
}

RogueTableEntry_of_String_TypeSpecializerList* RogueString_TypeSpecializerTableEntryList__add__String_TypeSpecializerTableEntry( RogueTableEntry_of_String_TypeSpecializerList* THIS, RogueClassString_TypeSpecializerTableEntry* value_0 )
{
  ((RogueString_TypeSpecializerTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_TypeSpecializerList*)(THIS);
}

RogueInteger RogueString_TypeSpecializerTableEntryList__capacity( RogueTableEntry_of_String_TypeSpecializerList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_TypeSpecializerList* RogueString_TypeSpecializerTableEntryList__reserve__Integer( RogueTableEntry_of_String_TypeSpecializerList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_TypeSpecializerTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_TypeSpecializerTableEntryList__capacity( THIS ))) + ((RogueString_TypeSpecializerTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_TypeSpecializerTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_TypeSpecializerList*)(THIS);
}

RogueString* RogueString_TypeSpecializerTableEntry__type_name( RogueClassString_TypeSpecializerTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[590]);
}

RogueClassString_TypeSpecializerTableEntry* RogueString_TypeSpecializerTableEntry__init__String_TypeSpecializer_Integer( RogueClassString_TypeSpecializerTableEntry* THIS, RogueString* _key_0, RogueClassTypeSpecializer* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_TypeSpecializerTableEntry*)(THIS);
}

RogueClassString_TypeSpecializerTableEntry* RogueString_TypeSpecializerTableEntry__init_object( RogueClassString_TypeSpecializerTableEntry* THIS )
{
  return (RogueClassString_TypeSpecializerTableEntry*)(THIS);
}

RogueString* RogueString_TypeSpecializerTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[620]);
}

RogueString* RogueString_CmdLabelTableEntryList__to_String( RogueTableEntry_of_String_CmdLabelList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_CmdLabelList* _auto_1171_2 = (THIS);
    RogueInteger _auto_1172_3 = (0);
    for (;_auto_1172_3 < _auto_1171_2->count;++_auto_1172_3)
    {
      RogueClassString_CmdLabelTableEntry* value_4 = (((RogueClassString_CmdLabelTableEntry*)(_auto_1171_2->data->objects[_auto_1172_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_CmdLabelTableEntryList__type_name( RogueTableEntry_of_String_CmdLabelList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[950]);
}

RogueTableEntry_of_String_CmdLabelList* RogueString_CmdLabelTableEntryList__init_object( RogueTableEntry_of_String_CmdLabelList* THIS )
{
  return (RogueTableEntry_of_String_CmdLabelList*)(THIS);
}

RogueTableEntry_of_String_CmdLabelList* RogueString_CmdLabelTableEntryList__init__Integer_String_CmdLabelTableEntry( RogueTableEntry_of_String_CmdLabelList* THIS, RogueInteger initial_capacity_0, RogueClassString_CmdLabelTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_CmdLabelTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_830_3 = (initial_capacity_0);
    for (;i_2 <= _auto_830_3;++i_2)
    {
      RogueString_CmdLabelTableEntryList__add__String_CmdLabelTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_CmdLabelList*)(THIS);
}

RogueTableEntry_of_String_CmdLabelList* RogueString_CmdLabelTableEntryList__add__String_CmdLabelTableEntry( RogueTableEntry_of_String_CmdLabelList* THIS, RogueClassString_CmdLabelTableEntry* value_0 )
{
  ((RogueString_CmdLabelTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_CmdLabelList*)(THIS);
}

RogueInteger RogueString_CmdLabelTableEntryList__capacity( RogueTableEntry_of_String_CmdLabelList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_CmdLabelList* RogueString_CmdLabelTableEntryList__reserve__Integer( RogueTableEntry_of_String_CmdLabelList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_CmdLabelTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_CmdLabelTableEntryList__capacity( THIS ))) + ((RogueString_CmdLabelTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_CmdLabelTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_CmdLabelList*)(THIS);
}

RogueString* RogueString_CmdLabelTableEntry__type_name( RogueClassString_CmdLabelTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[591]);
}

RogueClassString_CmdLabelTableEntry* RogueString_CmdLabelTableEntry__init__String_CmdLabel_Integer( RogueClassString_CmdLabelTableEntry* THIS, RogueString* _key_0, RogueClassCmdLabel* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_CmdLabelTableEntry*)(THIS);
}

RogueClassString_CmdLabelTableEntry* RogueString_CmdLabelTableEntry__init_object( RogueClassString_CmdLabelTableEntry* THIS )
{
  return (RogueClassString_CmdLabelTableEntry*)(THIS);
}

RogueString* RogueString_CmdLabelTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[621]);
}

RogueString* RogueMacroArgs__type_name( RogueClassMacroArgs* THIS )
{
  return (RogueString*)(Rogue_literal_strings[844]);
}

RogueClassMacroArgs* RogueMacroArgs__init_object( RogueClassMacroArgs* THIS )
{
  return (RogueClassMacroArgs*)(THIS);
}

RogueClassMacroArgs* RogueMacroArgs__init__Cmd_Method_CmdArgs( RogueClassMacroArgs* THIS, RogueClassCmd* _auto_834_0, RogueClassMethod* _auto_835_1, RogueClassCmdArgs* args_2 )
{
  THIS->method_info = _auto_835_1;
  THIS->this_context = _auto_834_0;
  if (!!(args_2))
  {
    THIS->arg_lookup = ((RogueString_CmdTable__init( ((RogueClassString_CmdTable*)ROGUE_CREATE_OBJECT(String_CmdTable)) )));
    {
      RogueClassCmdArgs* _auto_1181_3 = (args_2);
      RogueInteger index_4 = (0);
      for (;index_4 < _auto_1181_3->count;++index_4)
      {
        RogueString_CmdTable__set__String_Cmd( THIS->arg_lookup, ((RogueClassLocal*)(THIS->method_info->parameters->data->objects[index_4]))->name, ((RogueClassCmd*)(args_2->data->objects[index_4])) );
      }
    }
  }
  return (RogueClassMacroArgs*)(THIS);
}

RogueClassCmd* RogueMacroArgs__inline_this( RogueClassMacroArgs* THIS )
{
  return (RogueClassCmd*)((call_ROGUEM44( 5, (RogueClassCmd*)(THIS->this_context), ((RogueClassCloneArgs*)(NULL)) )));
}

RogueClassCmd* RogueMacroArgs__inline_access__CmdAccess( RogueClassMacroArgs* THIS, RogueClassCmdAccess* access_0 )
{
  if (!!(access_0->context))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(access_0)));
  }
  RogueClassCmd* arg_1 = (((RogueString_CmdTable__get__String( THIS->arg_lookup, access_0->name ))));
  if (!(!!(arg_1)))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(access_0)));
  }
  RogueClassCmd* dup_2 = ((call_ROGUEM44( 5, (RogueClassCmd*)(arg_1), ((RogueClassCloneArgs*)(NULL)) )));
  if (!!(access_0->args))
  {
    RogueClassCmdAccess* new_access_3 = (((RogueClassCmdAccess*)(RogueObject_as(dup_2,RogueTypeCmdAccess))));
    if (!!(new_access_3))
    {
      if (!!(new_access_3->args))
      {
        throw ((RogueToken__error__String( access_0->t, Rogue_literal_strings[683] )));
      }
      else
      {
        new_access_3->args = access_0->args;
      }
    }
    else
    {
      throw ((RogueToken__error__String( access_0->t, Rogue_literal_strings[683] )));
    }
  }
  return (RogueClassCmd*)(dup_2);
}

RogueClassCmd* RogueMacroArgs__inline_read_local__CmdReadLocal( RogueClassMacroArgs* THIS, RogueClassCmdReadLocal* read_cmd_0 )
{
  RogueClassCmd* arg_1 = (((RogueString_CmdTable__get__String( THIS->arg_lookup, read_cmd_0->local_info->name ))));
  if (!(!!(arg_1)))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(read_cmd_0)));
  }
  return (RogueClassCmd*)((call_ROGUEM44( 5, (RogueClassCmd*)(arg_1), ((RogueClassCloneArgs*)(NULL)) )));
}

RogueClassCmd* RogueMacroArgs__inline_write_local__CmdWriteLocal( RogueClassMacroArgs* THIS, RogueClassCmdWriteLocal* write_cmd_0 )
{
  RogueClassCmd* arg_1 = (((RogueString_CmdTable__get__String( THIS->arg_lookup, write_cmd_0->local_info->name ))));
  if (!(!!(arg_1)))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(write_cmd_0)));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAssign__init__Token_Cmd_Cmd( ((RogueClassCmdAssign*)ROGUE_CREATE_OBJECT(CmdAssign)), write_cmd_0->t, (call_ROGUEM44( 5, (RogueClassCmd*)(arg_1), ((RogueClassCloneArgs*)(NULL)) )), write_cmd_0->new_value ))))));
}

RogueString* RogueCmdReadSingleton__type_name( RogueClassCmdReadSingleton* THIS )
{
  return (RogueString*)(Rogue_literal_strings[956]);
}

RogueClassCmd* RogueCmdReadSingleton__clone__CloneArgs( RogueClassCmdReadSingleton* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadSingleton__init__Token_Type( ((RogueClassCmdReadSingleton*)ROGUE_CREATE_OBJECT(CmdReadSingleton)), THIS->t, THIS->_of_type ))))));
}

void RogueCmdReadSingleton__require_type_context( RogueClassCmdReadSingleton* THIS )
{
}

RogueClassCmd* RogueCmdReadSingleton__resolve__Scope( RogueClassCmdReadSingleton* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->_of_type );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdReadSingleton__trace_used_code( RogueClassCmdReadSingleton* THIS )
{
  RogueType__trace_used_code( THIS->_of_type );
}

RogueClassType* Rogue_CmdReadSingleton__type( RogueClassCmdReadSingleton* THIS )
{
  return (RogueClassType*)(THIS->_of_type);
}

void RogueCmdReadSingleton__write_cpp__CPPWriter_Logical( RogueClassCmdReadSingleton* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(((RogueType__is_singleton( THIS->_of_type )))))
  {
    throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), THIS->_of_type->name ))), Rogue_literal_strings[806] ))) ))) )));
  }
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[451] ))), THIS->_of_type->cpp_class_name );
  if (((RogueType__is_reference( THIS->_of_type ))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[191] );
  }
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[807] ))), THIS->_of_type->cpp_name ))), Rogue_literal_strings[786] );
}

RogueClassCmdReadSingleton* RogueCmdReadSingleton__init_object( RogueClassCmdReadSingleton* THIS )
{
  return (RogueClassCmdReadSingleton*)(THIS);
}

RogueClassCmdReadSingleton* RogueCmdReadSingleton__init__Token_Type( RogueClassCmdReadSingleton* THIS, RogueClassToken* _auto_836_0, RogueClassType* _auto_837_1 )
{
  THIS->_of_type = _auto_837_1;
  THIS->t = _auto_836_0;
  return (RogueClassCmdReadSingleton*)(THIS);
}

RogueString* RogueCmdCreateArray__type_name( RogueClassCmdCreateArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[957]);
}

RogueClassCmd* RogueCmdCreateArray__clone__CloneArgs( RogueClassCmdCreateArray* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateArray__init__Token_Type_Cmd( ((RogueClassCmdCreateArray*)ROGUE_CREATE_OBJECT(CmdCreateArray)), THIS->t, THIS->_array_type, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->count_cmd), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdCreateArray__resolve__Scope( RogueClassCmdCreateArray* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->_array_type );
  THIS->count_cmd = ((RogueCmd__require_integer( (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->count_cmd), scope_0 )) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdCreateArray__trace_used_code( RogueClassCmdCreateArray* THIS )
{
  RogueType__trace_used_code( THIS->_array_type );
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->count_cmd) );
}

RogueClassType* Rogue_CmdCreateArray__type( RogueClassCmdCreateArray* THIS )
{
  return (RogueClassType*)(THIS->_array_type);
}

void RogueCmdCreateArray__write_cpp__CPPWriter_Logical( RogueClassCmdCreateArray* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[808] );
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->count_cmd), writer_0, false );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[809] ))), THIS->_array_type->_element_type ))), Rogue_literal_strings[100] );
  if (((RogueType__is_reference( THIS->_array_type->_element_type ))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[810] );
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[448] );
}

RogueClassCmdCreateArray* RogueCmdCreateArray__init_object( RogueClassCmdCreateArray* THIS )
{
  return (RogueClassCmdCreateArray*)(THIS);
}

RogueClassCmdCreateArray* RogueCmdCreateArray__init__Token_Type_CmdArgs( RogueClassCmdCreateArray* THIS, RogueClassToken* _auto_838_0, RogueClassType* _auto_839_1, RogueClassCmdArgs* args_2 )
{
  THIS->_array_type = _auto_839_1;
  THIS->t = _auto_838_0;
  if ((args_2 == NULL || args_2->count != 1))
  {
    throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[686] )));
  }
  THIS->count_cmd = ((RogueClassCmd*)(args_2->data->objects[0]));
  return (RogueClassCmdCreateArray*)(THIS);
}

RogueClassCmdCreateArray* RogueCmdCreateArray__init__Token_Type_Cmd( RogueClassCmdCreateArray* THIS, RogueClassToken* _auto_840_0, RogueClassType* _auto_841_1, RogueClassCmd* _auto_842_2 )
{
  THIS->count_cmd = _auto_842_2;
  THIS->_array_type = _auto_841_1;
  THIS->t = _auto_840_0;
  return (RogueClassCmdCreateArray*)(THIS);
}

RogueString* RogueCmdCallRoutine__type_name( RogueClassCmdCallRoutine* THIS )
{
  return (RogueString*)(Rogue_literal_strings[978]);
}

RogueClassCmd* RogueCmdCallRoutine__clone__CloneArgs( RogueClassCmdCallRoutine* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCallRoutine__init__Token_Method_CmdArgs( ((RogueClassCmdCallRoutine*)ROGUE_CREATE_OBJECT(CmdCallRoutine)), THIS->t, THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

void RogueCmdCallRoutine__write_cpp__CPPWriter_Logical( RogueClassCmdCallRoutine* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[176] ))), THIS->method_info->_return_type, THIS->method_info->_return_type );
  }
  RogueCPPWriter__print__String( writer_0, THIS->method_info->cpp_name );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[176] );
  if (!!(THIS->args->count))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[255] );
    RogueInteger i_2 = (0);
    {
      RogueClassCmdArgs* _auto_1184_4 = (THIS->args);
      RogueInteger _auto_1185_5 = (0);
      for (;_auto_1185_5 < _auto_1184_4->count;++_auto_1185_5)
      {
        RogueClassCmd* arg_6 = (((RogueClassCmd*)(_auto_1184_4->data->objects[_auto_1185_5])));
        if (i_2 > 0)
        {
          RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[405] );
        }
        RogueClassType* param_type_3 = (((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type);
        if (((RogueType__is_aspect( param_type_3 ))))
        {
          RogueCPPWriter__print__String( ((RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[176] ))), (call_ROGUEM46( 27, (RogueClassCmd*)(arg_6) )), ((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type ))), Rogue_literal_strings[176] );
          call_ROGUEM52( 28, (RogueClassCmd*)(arg_6), writer_0, false );
          RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[786] );
        }
        else
        {
          call_ROGUEM52( 28, (RogueClassCmd*)(arg_6), writer_0, false );
        }
        ++i_2;
      }
    }
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[255] );
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] );
  }
}

RogueClassCmdCallRoutine* RogueCmdCallRoutine__init_object( RogueClassCmdCallRoutine* THIS )
{
  return (RogueClassCmdCallRoutine*)(THIS);
}

RogueClassCmdCallRoutine* RogueCmdCallRoutine__init__Token_Method_CmdArgs( RogueClassCmdCallRoutine* THIS, RogueClassToken* _auto_847_0, RogueClassMethod* _auto_848_1, RogueClassCmdArgs* _auto_849_2 )
{
  THIS->args = _auto_849_2;
  THIS->method_info = _auto_848_1;
  THIS->t = _auto_847_0;
  return (RogueClassCmdCallRoutine*)(THIS);
}

RogueString* RogueCmdCall__type_name( RogueClassCmdCall* THIS )
{
  return (RogueString*)(Rogue_literal_strings[958]);
}

RogueClassCmd* RogueCmdCall__resolve__Scope( RogueClassCmdCall* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->context))
  {
    THIS->context = ((RogueCmd__require_value( (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->context), scope_0 )) )));
  }
  RogueCmdArgs__resolve__Scope( THIS->args, scope_0 );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdCall__trace_used_code( RogueClassCmdCall* THIS )
{
  if (!!(THIS->context))
  {
    call_ROGUEM48( 26, (RogueClassCmd*)(THIS->context) );
  }
  RogueMethod__trace_used_code( THIS->method_info );
  {
    RogueClassCmdArgs* _auto_1182_0 = (THIS->args);
    RogueInteger _auto_1183_1 = (0);
    for (;_auto_1183_1 < _auto_1182_0->count;++_auto_1183_1)
    {
      RogueClassCmd* arg_2 = (((RogueClassCmd*)(_auto_1182_0->data->objects[_auto_1183_1])));
      call_ROGUEM48( 26, (RogueClassCmd*)(arg_2) );
    }
  }
}

RogueClassType* Rogue_CmdCall__type( RogueClassCmdCall* THIS )
{
  return (RogueClassType*)(THIS->method_info->_return_type);
}

RogueClassCmdCall* RogueCmdCall__init_object( RogueClassCmdCall* THIS )
{
  return (RogueClassCmdCall*)(THIS);
}

RogueClassCmdCall* RogueCmdCall__init__Token_Cmd_Method_CmdArgs( RogueClassCmdCall* THIS, RogueClassToken* _auto_843_0, RogueClassCmd* _auto_844_1, RogueClassMethod* _auto_845_2, RogueClassCmdArgs* _auto_846_3 )
{
  THIS->args = _auto_846_3;
  THIS->method_info = _auto_845_2;
  THIS->context = _auto_844_1;
  THIS->t = _auto_843_0;
  return (RogueClassCmdCall*)(THIS);
}

RogueString* RogueCmdCreateObject__type_name( RogueClassCmdCreateObject* THIS )
{
  return (RogueString*)(Rogue_literal_strings[959]);
}

RogueClassCmd* RogueCmdCreateObject__clone__CloneArgs( RogueClassCmdCreateObject* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCreateObject__init__Token_Type( ((RogueClassCmdCreateObject*)ROGUE_CREATE_OBJECT(CmdCreateObject)), THIS->t, THIS->_of_type ))))));
}

RogueClassCmd* RogueCmdCreateObject__resolve__Scope( RogueClassCmdCreateObject* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->_of_type );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdCreateObject__trace_used_code( RogueClassCmdCreateObject* THIS )
{
  RogueType__trace_used_code( THIS->_of_type );
}

RogueClassType* Rogue_CmdCreateObject__type( RogueClassCmdCreateObject* THIS )
{
  return (RogueClassType*)(THIS->_of_type);
}

void RogueCmdCreateObject__write_cpp__CPPWriter_Logical( RogueClassCmdCreateObject* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[451] ))), THIS->_of_type ))), Rogue_literal_strings[100] );
  }
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[811] ))), ((Rogue_CmdCreateObject__type( THIS )))->cpp_name ))), Rogue_literal_strings[100] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] );
  }
}

RogueClassCmdCreateObject* RogueCmdCreateObject__init_object( RogueClassCmdCreateObject* THIS )
{
  return (RogueClassCmdCreateObject*)(THIS);
}

RogueClassCmdCreateObject* RogueCmdCreateObject__init__Token_Type( RogueClassCmdCreateObject* THIS, RogueClassToken* _auto_850_0, RogueClassType* _auto_851_1 )
{
  THIS->_of_type = _auto_851_1;
  THIS->t = _auto_850_0;
  return (RogueClassCmdCreateObject*)(THIS);
}

RogueString* RogueCmdReadGlobal__type_name( RogueClassCmdReadGlobal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[960]);
}

RogueClassCmd* RogueCmdReadGlobal__clone__CloneArgs( RogueClassCmdReadGlobal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ((RogueClassCmdReadGlobal*)ROGUE_CREATE_OBJECT(CmdReadGlobal)), THIS->t, THIS->global_info ))))));
}

RogueClassCmd* RogueCmdReadGlobal__resolve__Scope( RogueClassCmdReadGlobal* THIS, RogueClassScope* scope_0 )
{
  RogueType__resolve( THIS->global_info->type_context );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdReadGlobal__trace_used_code( RogueClassCmdReadGlobal* THIS )
{
  RogueType__trace_used_code( THIS->global_info->type_context );
  RogueType__trace_used_code( THIS->global_info->_type );
}

RogueClassType* Rogue_CmdReadGlobal__type( RogueClassCmdReadGlobal* THIS )
{
  return (RogueClassType*)(THIS->global_info->_type);
}

void RogueCmdReadGlobal__write_cpp__CPPWriter_Logical( RogueClassCmdReadGlobal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_open_cast__Type_Type( writer_0, THIS->global_info->_type, THIS->global_info->_type );
  }
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[16] ))), THIS->global_info->type_context->cpp_name ))), Rogue_literal_strings[354] );
  RogueCPPWriter__print__String( writer_0, THIS->global_info->cpp_name );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_close_cast__Type_Type( writer_0, THIS->global_info->_type, THIS->global_info->_type );
  }
}

RogueClassCmdReadGlobal* RogueCmdReadGlobal__init_object( RogueClassCmdReadGlobal* THIS )
{
  return (RogueClassCmdReadGlobal*)(THIS);
}

RogueClassCmdReadGlobal* RogueCmdReadGlobal__init__Token_Property( RogueClassCmdReadGlobal* THIS, RogueClassToken* _auto_852_0, RogueClassProperty* _auto_853_1 )
{
  THIS->global_info = _auto_853_1;
  THIS->t = _auto_852_0;
  return (RogueClassCmdReadGlobal*)(THIS);
}

RogueString* RogueCmdReadProperty__type_name( RogueClassCmdReadProperty* THIS )
{
  return (RogueString*)(Rogue_literal_strings[961]);
}

RogueClassCmd* RogueCmdReadProperty__clone__CloneArgs( RogueClassCmdReadProperty* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)ROGUE_CREATE_OBJECT(CmdReadProperty)), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->context), clone_args_0 )), THIS->property_info ))))));
}

RogueClassCmd* RogueCmdReadProperty__resolve__Scope( RogueClassCmdReadProperty* THIS, RogueClassScope* scope_0 )
{
  THIS->context = ((RogueCmd__require_value( (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->context), scope_0 )) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdReadProperty__resolve_modify__Scope_Integer( RogueClassCmdReadProperty* THIS, RogueClassScope* scope_0, RogueInteger delta_1 )
{
  return (RogueClassCmd*)(((RogueCmdAdjustProperty__resolve__Scope( ((RogueCmdAdjustProperty__init__Token_Cmd_Property_Integer( ((RogueClassCmdAdjustProperty*)ROGUE_CREATE_OBJECT(CmdAdjustProperty)), THIS->t, THIS->context, THIS->property_info, delta_1 ))), scope_0 ))));
}

void RogueCmdReadProperty__trace_used_code( RogueClassCmdReadProperty* THIS )
{
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->context) );
  RogueType__trace_used_code( THIS->property_info->type_context );
  RogueType__trace_used_code( THIS->property_info->_type );
}

RogueClassType* Rogue_CmdReadProperty__type( RogueClassCmdReadProperty* THIS )
{
  return (RogueClassType*)(THIS->property_info->_type);
}

void RogueCmdReadProperty__write_cpp__CPPWriter_Logical( RogueClassCmdReadProperty* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_open_cast__Type_Type( writer_0, THIS->property_info->_type, THIS->property_info->_type );
  }
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->context), writer_0, false );
  RogueCPPWriter__print_access_operator__Type( writer_0, (call_ROGUEM46( 27, (RogueClassCmd*)(THIS->context) )) );
  RogueCPPWriter__print__String( writer_0, THIS->property_info->cpp_name );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_close_cast__Type_Type( writer_0, THIS->property_info->_type, THIS->property_info->_type );
  }
}

RogueClassCmdReadProperty* RogueCmdReadProperty__init_object( RogueClassCmdReadProperty* THIS )
{
  return (RogueClassCmdReadProperty*)(THIS);
}

RogueClassCmdReadProperty* RogueCmdReadProperty__init__Token_Cmd_Property( RogueClassCmdReadProperty* THIS, RogueClassToken* _auto_854_0, RogueClassCmd* _auto_855_1, RogueClassProperty* _auto_856_2 )
{
  THIS->property_info = _auto_856_2;
  THIS->context = _auto_855_1;
  THIS->t = _auto_854_0;
  return (RogueClassCmdReadProperty*)(THIS);
}

RogueString* RogueCmdLogicalizeOptionalValue__type_name( RogueClassCmdLogicalizeOptionalValue* THIS )
{
  return (RogueString*)(Rogue_literal_strings[962]);
}

RogueClassCmd* RogueCmdLogicalizeOptionalValue__clone__CloneArgs( RogueClassCmdLogicalizeOptionalValue* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdLogicalizeOptionalValue__init__Token_Cmd_Logical( ((RogueClassCmdLogicalizeOptionalValue*)ROGUE_CREATE_OBJECT(CmdLogicalizeOptionalValue)), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->value), clone_args_0 )), true ))))));
}

RogueClassCmdLogicalizeOptionalValue* RogueCmdLogicalizeOptionalValue__resolve__Scope( RogueClassCmdLogicalizeOptionalValue* THIS, RogueClassScope* scope_0 )
{
  THIS->value = ((RogueCmd__require_value( (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->value), scope_0 )) )));
  return (RogueClassCmdLogicalizeOptionalValue*)(THIS);
}

void RogueCmdLogicalizeOptionalValue__trace_used_code( RogueClassCmdLogicalizeOptionalValue* THIS )
{
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->value) );
}

RogueClassType* Rogue_CmdLogicalizeOptionalValue__type( RogueClassCmdLogicalizeOptionalValue* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical);
}

void RogueCmdLogicalizeOptionalValue__write_cpp__CPPWriter_Logical( RogueClassCmdLogicalizeOptionalValue* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (((RogueType__is_reference( (call_ROGUEM46( 27, (RogueClassCmd*)(THIS->value) ))->_element_type ))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[812] );
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->value), writer_0, false );
  }
  else
  {
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->value), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[813] );
  }
}

RogueClassCmdLogicalizeOptionalValue* RogueCmdLogicalizeOptionalValue__init_object( RogueClassCmdLogicalizeOptionalValue* THIS )
{
  return (RogueClassCmdLogicalizeOptionalValue*)(THIS);
}

RogueClassCmdLogicalizeOptionalValue* RogueCmdLogicalizeOptionalValue__init__Token_Cmd_Logical( RogueClassCmdLogicalizeOptionalValue* THIS, RogueClassToken* _auto_857_0, RogueClassCmd* _auto_858_1, RogueLogical _auto_859_2 )
{
  THIS->positive = _auto_859_2;
  THIS->value = _auto_858_1;
  THIS->t = _auto_857_0;
  return (RogueClassCmdLogicalizeOptionalValue*)(THIS);
}

RogueString* RogueCmdWriteLocal__type_name( RogueClassCmdWriteLocal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[963]);
}

RogueClassCmd* RogueCmdWriteLocal__clone__CloneArgs( RogueClassCmdWriteLocal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassMacroArgs* macro_args_1 = (((RogueClassMacroArgs*)(RogueObject_as(clone_args_0,RogueTypeMacroArgs))));
  if (!!(macro_args_1))
  {
    return (RogueClassCmd*)(((RogueMacroArgs__inline_write_local__CmdWriteLocal( macro_args_1, THIS ))));
  }
  else
  {
    RogueClassTaskArgs* task_args_2 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
    if (!!(task_args_2))
    {
      return (RogueClassCmd*)(((RogueTaskArgs__cmd_write__Token_Local_Cmd( task_args_2, THIS->t, THIS->local_info, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))));
    }
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdWriteLocal__init__Token_Local_Cmd( ((RogueClassCmdWriteLocal*)ROGUE_CREATE_OBJECT(CmdWriteLocal)), THIS->t, THIS->local_info, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->new_value, clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdWriteLocal__resolve__Scope( RogueClassCmdWriteLocal* THIS, RogueClassScope* scope_0 )
{
  RogueType__organize( THIS->local_info->_type );
  THIS->new_value = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->new_value), scope_0 ));
  THIS->new_value = (call_ROGUEM42( 22, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(THIS->new_value), THIS->local_info->_type ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdWriteLocal__trace_used_code( RogueClassCmdWriteLocal* THIS )
{
  RogueType__trace_used_code( THIS->local_info->_type );
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->new_value) );
}

RogueClassType* Rogue_CmdWriteLocal__type( RogueClassCmdWriteLocal* THIS )
{
  return (RogueClassType*)(THIS->local_info->_type);
}

void RogueCmdWriteLocal__write_cpp__CPPWriter_Logical( RogueClassCmdWriteLocal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, ((RogueLocal__cpp_name( THIS->local_info ))) ))), Rogue_literal_strings[455] );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[451] ))), THIS->local_info->_type ))), Rogue_literal_strings[100] );
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->new_value), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] );
}

RogueClassCmdWriteLocal* RogueCmdWriteLocal__init_object( RogueClassCmdWriteLocal* THIS )
{
  return (RogueClassCmdWriteLocal*)(THIS);
}

RogueClassCmdWriteLocal* RogueCmdWriteLocal__init__Token_Local_Cmd( RogueClassCmdWriteLocal* THIS, RogueClassToken* _auto_861_0, RogueClassLocal* _auto_862_1, RogueClassCmd* _auto_863_2 )
{
  THIS->new_value = _auto_863_2;
  THIS->local_info = _auto_862_1;
  THIS->t = _auto_861_0;
  return (RogueClassCmdWriteLocal*)(THIS);
}

RogueString* RogueCmdOpAssignGlobal__type_name( RogueClassCmdOpAssignGlobal* THIS )
{
  return (RogueString*)(Rogue_literal_strings[902]);
}

RogueClassCmd* RogueCmdOpAssignGlobal__clone__CloneArgs( RogueClassCmdOpAssignGlobal* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdOpAssignGlobal__init__Token_Property_TokenType_Cmd( ((RogueClassCmdOpAssignGlobal*)ROGUE_CREATE_OBJECT(CmdOpAssignGlobal)), THIS->t, THIS->global_info, THIS->op, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdOpAssignGlobal__resolve__Scope( RogueClassCmdOpAssignGlobal* THIS, RogueClassScope* scope_0 )
{
  if (((RogueType__is_reference( THIS->global_info->_type ))))
  {
    RogueString* m_name_1 = (((RogueString__operatorPLUS__String( Rogue_literal_strings[296], ((RogueTokenType__to_String( THIS->op ))) ))));
    if (!!(((RogueString_MethodListTable__get__String( THIS->global_info->_type->method_lookup_by_name, m_name_1 )))))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_Cmd( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ((RogueClassCmdReadGlobal*)ROGUE_CREATE_OBJECT(CmdReadGlobal)), THIS->t, THIS->global_info ))))), m_name_1, THIS->new_value ))), scope_0 ))));
    }
    else
    {
      m_name_1 = ((RogueString*)((RogueString__leftmost__Integer( m_name_1, -1 ))));
      if (!!(((RogueString_MethodListTable__get__String( THIS->global_info->_type->method_lookup_by_name, m_name_1 )))))
      {
        return (RogueClassCmd*)(((RogueCmdWriteGlobal__resolve__Scope( ((RogueCmdWriteGlobal__init__Token_Property_Cmd( ((RogueClassCmdWriteGlobal*)ROGUE_CREATE_OBJECT(CmdWriteGlobal)), THIS->t, THIS->global_info, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ((RogueClassCmdReadGlobal*)ROGUE_CREATE_OBJECT(CmdReadGlobal)), THIS->t, THIS->global_info ))))), m_name_1, THIS->new_value ))))) ))), scope_0 ))));
      }
      else
      {
        RogueString* arg_type_2 = ((call_ROGUEM46( 27, (RogueClassCmd*)(THIS->new_value) ))->name);
        throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[732] ))), ((RogueType__to_String( THIS->global_info->_type ))) ))), Rogue_literal_strings[733] ))), m_name_1 ))), Rogue_literal_strings[734] ))), arg_type_2 ))), Rogue_literal_strings[735] ))), m_name_1 ))), Rogue_literal_strings[736] ))), arg_type_2 ))), Rogue_literal_strings[342] ))) ))) )));
      }
    }
  }
  {
    RogueClassTokenType* _auto_1190_4 = (THIS->op);
    if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_1190_4), ((RogueObject*)(RogueTokenType_symbol_caret_equals)) ))))
    {
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->target, Rogue_literal_strings[1] ))) == 0)
      {
        return (RogueClassCmd*)(((RogueCmdWriteGlobal__resolve__Scope( ((RogueCmdWriteGlobal__init__Token_Property_Cmd( ((RogueClassCmdWriteGlobal*)ROGUE_CREATE_OBJECT(CmdWriteGlobal)), THIS->t, THIS->global_info, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdPower*)ROGUE_CREATE_OBJECT(CmdPower))), THIS->t, ((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ((RogueClassCmdReadGlobal*)ROGUE_CREATE_OBJECT(CmdReadGlobal)), THIS->t, THIS->global_info ))))), THIS->new_value ))))) ))), scope_0 ))));
      }
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_1190_4), ((RogueObject*)(RogueTokenType_symbol_percent_equals)) ))))
    {
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->target, Rogue_literal_strings[1] ))) == 0)
      {
        return (RogueClassCmd*)(((RogueCmdWriteGlobal__resolve__Scope( ((RogueCmdWriteGlobal__init__Token_Property_Cmd( ((RogueClassCmdWriteGlobal*)ROGUE_CREATE_OBJECT(CmdWriteGlobal)), THIS->t, THIS->global_info, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMod*)ROGUE_CREATE_OBJECT(CmdMod))), THIS->t, ((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ((RogueClassCmdReadGlobal*)ROGUE_CREATE_OBJECT(CmdReadGlobal)), THIS->t, THIS->global_info ))))), THIS->new_value ))))) ))), scope_0 ))));
      }
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_1190_4), ((RogueObject*)(RogueTokenType_symbol_dot_equals)) ))))
    {
      RogueClassCmdAccess* access_3 = (((RogueClassCmdAccess*)(RogueObject_as(THIS->new_value,RogueTypeCmdAccess))));
      if (!(!!(access_3)))
      {
        throw ((RogueToken__error__String( THIS->new_value->t, Rogue_literal_strings[737] )));
      }
      if (!!(access_3->context))
      {
        throw ((RogueToken__error__String( access_3->t, Rogue_literal_strings[738] )));
      }
      access_3->context = ((RogueClassCmd*)(((RogueCmdReadGlobal__init__Token_Property( ((RogueClassCmdReadGlobal*)ROGUE_CREATE_OBJECT(CmdReadGlobal)), THIS->t, THIS->global_info )))));
      return (RogueClassCmd*)(((RogueCmdWriteGlobal__resolve__Scope( ((RogueCmdWriteGlobal__init__Token_Property_Cmd( ((RogueClassCmdWriteGlobal*)ROGUE_CREATE_OBJECT(CmdWriteGlobal)), THIS->t, THIS->global_info, ((RogueClassCmd*)(access_3)) ))), scope_0 ))));
    }
  }
  THIS->new_value = (call_ROGUEM42( 22, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)((call_ROGUEM42( 22, (RogueClassCmd*)(THIS->new_value), scope_0 ))), THIS->global_info->_type ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdOpAssignGlobal__trace_used_code( RogueClassCmdOpAssignGlobal* THIS )
{
  RogueType__trace_used_code( THIS->global_info->type_context );
  RogueType__trace_used_code( THIS->global_info->_type );
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->new_value) );
}

RogueClassType* Rogue_CmdOpAssignGlobal__type( RogueClassCmdOpAssignGlobal* THIS )
{
  return (RogueClassType*)(THIS->global_info->_type);
}

void RogueCmdOpAssignGlobal__write_cpp__CPPWriter_Logical( RogueClassCmdOpAssignGlobal* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[16] ))), THIS->global_info->type_context->cpp_name ))), Rogue_literal_strings[354] );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, THIS->global_info->cpp_name ))), Rogue_literal_strings[255] ))), ((RogueCmdResolvedOpWithAssign__cpp_symbol( ((RogueClassCmdResolvedOpWithAssign*)THIS) ))) ))), Rogue_literal_strings[255] );
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->new_value), writer_0, false );
}

RogueClassCmdOpAssignGlobal* RogueCmdOpAssignGlobal__init_object( RogueClassCmdOpAssignGlobal* THIS )
{
  return (RogueClassCmdOpAssignGlobal*)(THIS);
}

RogueClassCmdOpAssignGlobal* RogueCmdOpAssignGlobal__init__Token_Property_TokenType_Cmd( RogueClassCmdOpAssignGlobal* THIS, RogueClassToken* _auto_864_0, RogueClassProperty* _auto_865_1, RogueClassTokenType* _auto_866_2, RogueClassCmd* _auto_867_3 )
{
  THIS->new_value = _auto_867_3;
  THIS->op = _auto_866_2;
  THIS->global_info = _auto_865_1;
  THIS->t = _auto_864_0;
  return (RogueClassCmdOpAssignGlobal*)(THIS);
}

RogueString* RogueCmdOpAssignProperty__type_name( RogueClassCmdOpAssignProperty* THIS )
{
  return (RogueString*)(Rogue_literal_strings[903]);
}

RogueClassCmd* RogueCmdOpAssignProperty__clone__CloneArgs( RogueClassCmdOpAssignProperty* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdOpAssignProperty__init__Token_Cmd_Property_TokenType_Cmd( ((RogueClassCmdOpAssignProperty*)ROGUE_CREATE_OBJECT(CmdOpAssignProperty)), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->context), clone_args_0 )), THIS->property_info, THIS->op, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdOpAssignProperty__resolve__Scope( RogueClassCmdOpAssignProperty* THIS, RogueClassScope* scope_0 )
{
  if (((RogueType__is_reference( THIS->property_info->_type ))))
  {
    RogueString* m_name_1 = (((RogueString__operatorPLUS__String( Rogue_literal_strings[296], ((RogueTokenType__to_String( THIS->op ))) ))));
    if (!!(((RogueString_MethodListTable__get__String( THIS->property_info->_type->method_lookup_by_name, m_name_1 )))))
    {
      return (RogueClassCmd*)(((RogueCmdAccess__resolve__Scope( ((RogueCmdAccess__init__Token_Cmd_String_Cmd( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)ROGUE_CREATE_OBJECT(CmdReadProperty)), THIS->t, THIS->context, THIS->property_info ))))), m_name_1, THIS->new_value ))), scope_0 ))));
    }
    else
    {
      m_name_1 = ((RogueString*)((RogueString__leftmost__Integer( m_name_1, -1 ))));
      if (!!(((RogueString_MethodListTable__get__String( THIS->property_info->_type->method_lookup_by_name, m_name_1 )))))
      {
        return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), THIS->t, THIS->context, THIS->property_info, ((RogueClassCmd*)(((RogueCmdAccess__init__Token_Cmd_String_Cmd( ((RogueClassCmdAccess*)ROGUE_CREATE_OBJECT(CmdAccess)), THIS->t, ((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)ROGUE_CREATE_OBJECT(CmdReadProperty)), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, ((RogueClassCloneArgs*)(NULL)) ))), THIS->property_info ))))), m_name_1, THIS->new_value ))))) ))), scope_0 ))));
      }
      else
      {
        RogueString* arg_type_2 = ((call_ROGUEM46( 27, (RogueClassCmd*)(THIS->new_value) ))->name);
        throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[732] ))), ((RogueType__to_String( THIS->property_info->_type ))) ))), Rogue_literal_strings[733] ))), m_name_1 ))), Rogue_literal_strings[734] ))), arg_type_2 ))), Rogue_literal_strings[735] ))), m_name_1 ))), Rogue_literal_strings[736] ))), arg_type_2 ))), Rogue_literal_strings[342] ))) ))) )));
      }
    }
  }
  {
    RogueClassTokenType* _auto_1191_4 = (THIS->op);
    if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_1191_4), ((RogueObject*)(RogueTokenType_symbol_caret_equals)) ))))
    {
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->target, Rogue_literal_strings[1] ))) == 0)
      {
        return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), THIS->t, THIS->context, THIS->property_info, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdPower*)ROGUE_CREATE_OBJECT(CmdPower))), THIS->t, ((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)ROGUE_CREATE_OBJECT(CmdReadProperty)), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, ((RogueClassCloneArgs*)(NULL)) ))), THIS->property_info ))))), THIS->new_value ))))) ))), scope_0 ))));
      }
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_1191_4), ((RogueObject*)(RogueTokenType_symbol_percent_equals)) ))))
    {
      if (((RogueString__operatorLESSTHANGREATERTHAN__String( ((RogueClassRogueC*)ROGUE_SINGLETON(RogueC))->target, Rogue_literal_strings[1] ))) == 0)
      {
        return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), THIS->t, THIS->context, THIS->property_info, ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdMod*)ROGUE_CREATE_OBJECT(CmdMod))), THIS->t, ((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)ROGUE_CREATE_OBJECT(CmdReadProperty)), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, ((RogueClassCloneArgs*)(NULL)) ))), THIS->property_info ))))), THIS->new_value ))))) ))), scope_0 ))));
      }
    }
    else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)_auto_1191_4), ((RogueObject*)(RogueTokenType_symbol_dot_equals)) ))))
    {
      RogueClassCmdAccess* access_3 = (((RogueClassCmdAccess*)(RogueObject_as(THIS->new_value,RogueTypeCmdAccess))));
      if (!(!!(access_3)))
      {
        throw ((RogueToken__error__String( THIS->new_value->t, Rogue_literal_strings[737] )));
      }
      if (!!(access_3->context))
      {
        throw ((RogueToken__error__String( access_3->t, Rogue_literal_strings[738] )));
      }
      access_3->context = ((RogueClassCmd*)(((RogueCmdReadProperty__init__Token_Cmd_Property( ((RogueClassCmdReadProperty*)ROGUE_CREATE_OBJECT(CmdReadProperty)), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, ((RogueClassCloneArgs*)(NULL)) ))), THIS->property_info )))));
      return (RogueClassCmd*)(((RogueCmdWriteProperty__resolve__Scope( ((RogueCmdWriteProperty__init__Token_Cmd_Property_Cmd( ((RogueClassCmdWriteProperty*)ROGUE_CREATE_OBJECT(CmdWriteProperty)), THIS->t, THIS->context, THIS->property_info, ((RogueClassCmd*)(access_3)) ))), scope_0 ))));
    }
  }
  THIS->context = ((RogueCmd__require_value( (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->context), scope_0 )) )));
  THIS->new_value = (call_ROGUEM42( 22, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)((call_ROGUEM42( 22, (RogueClassCmd*)(THIS->new_value), scope_0 ))), THIS->property_info->_type ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdOpAssignProperty__trace_used_code( RogueClassCmdOpAssignProperty* THIS )
{
  RogueType__trace_used_code( THIS->property_info->type_context );
  RogueType__trace_used_code( THIS->property_info->_type );
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->new_value) );
}

RogueClassType* Rogue_CmdOpAssignProperty__type( RogueClassCmdOpAssignProperty* THIS )
{
  return (RogueClassType*)(THIS->property_info->_type);
}

void RogueCmdOpAssignProperty__write_cpp__CPPWriter_Logical( RogueClassCmdOpAssignProperty* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->context), writer_0, false );
  RogueCPPWriter__print_access_operator__Type( writer_0, (call_ROGUEM46( 27, (RogueClassCmd*)(THIS->context) )) );
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, THIS->property_info->cpp_name ))), Rogue_literal_strings[255] ))), ((RogueCmdResolvedOpWithAssign__cpp_symbol( ((RogueClassCmdResolvedOpWithAssign*)THIS) ))) ))), Rogue_literal_strings[255] );
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->new_value), writer_0, false );
}

RogueClassCmdOpAssignProperty* RogueCmdOpAssignProperty__init_object( RogueClassCmdOpAssignProperty* THIS )
{
  return (RogueClassCmdOpAssignProperty*)(THIS);
}

RogueClassCmdOpAssignProperty* RogueCmdOpAssignProperty__init__Token_Cmd_Property_TokenType_Cmd( RogueClassCmdOpAssignProperty* THIS, RogueClassToken* _auto_868_0, RogueClassCmd* _auto_869_1, RogueClassProperty* _auto_870_2, RogueClassTokenType* _auto_871_3, RogueClassCmd* _auto_872_4 )
{
  THIS->new_value = _auto_872_4;
  THIS->op = _auto_871_3;
  THIS->property_info = _auto_870_2;
  THIS->context = _auto_869_1;
  THIS->t = _auto_868_0;
  return (RogueClassCmdOpAssignProperty*)(THIS);
}

RogueString* RogueCmdCallInlineNativeRoutine__type_name( RogueClassCmdCallInlineNativeRoutine* THIS )
{
  return (RogueString*)(Rogue_literal_strings[984]);
}

RogueClassCmd* RogueCmdCallInlineNativeRoutine__clone__CloneArgs( RogueClassCmdCallInlineNativeRoutine* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCallInlineNativeRoutine__init__Token_Method_CmdArgs( ((RogueClassCmdCallInlineNativeRoutine*)ROGUE_CREATE_OBJECT(CmdCallInlineNativeRoutine)), THIS->t, THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

RogueClassType* Rogue_CmdCallInlineNativeRoutine__type( RogueClassCmdCallInlineNativeRoutine* THIS )
{
  return (RogueClassType*)(THIS->method_info->_return_type);
}

RogueClassCmdCallInlineNativeRoutine* RogueCmdCallInlineNativeRoutine__init_object( RogueClassCmdCallInlineNativeRoutine* THIS )
{
  return (RogueClassCmdCallInlineNativeRoutine*)(THIS);
}

RogueClassCmdCallInlineNativeRoutine* RogueCmdCallInlineNativeRoutine__init__Token_Method_CmdArgs( RogueClassCmdCallInlineNativeRoutine* THIS, RogueClassToken* _auto_881_0, RogueClassMethod* _auto_882_1, RogueClassCmdArgs* _auto_883_2 )
{
  THIS->args = _auto_883_2;
  THIS->method_info = _auto_882_1;
  THIS->t = _auto_881_0;
  return (RogueClassCmdCallInlineNativeRoutine*)(THIS);
}

RogueString* RogueCmdCallInlineNative__to_String( RogueClassCmdCallInlineNative* THIS )
{
  return (RogueString*)(THIS->method_info->signature);
}

RogueString* RogueCmdCallInlineNative__type_name( RogueClassCmdCallInlineNative* THIS )
{
  return (RogueString*)(Rogue_literal_strings[979]);
}

void RogueCmdCallInlineNative__write_cpp__CPPWriter_Logical( RogueClassCmdCallInlineNative* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueString* st_2 = (THIS->method_info->native_code);
  RogueOptionalInteger dollar_3 = (((RogueString__locate__Character_OptionalInteger( st_2, (RogueCharacter)'$', RogueOptionalInteger() ))));
  while (dollar_3.exists)
  {
    RogueCPPWriter__print__String( writer_0, ((RogueString__from__Integer_Integer( st_2, 0, (dollar_3.value - 1) ))) );
    st_2 = ((RogueString*)((RogueString__from__Integer( st_2, (dollar_3.value + 1) ))));
    RogueClassLocal* best_match_4 = 0;
    {
      RogueLocalList* _auto_1192_5 = (THIS->method_info->parameters);
      RogueInteger _auto_1193_6 = (0);
      for (;_auto_1193_6 < _auto_1192_5->count;++_auto_1193_6)
      {
        RogueClassLocal* p_7 = (((RogueClassLocal*)(_auto_1192_5->data->objects[_auto_1193_6])));
        if (((RogueString__begins_with__String( st_2, p_7->name ))))
        {
          if ((best_match_4 == NULL || p_7->name->count > best_match_4->name->count))
          {
            best_match_4 = ((RogueClassLocal*)p_7);
          }
        }
      }
    }
    if (!!(best_match_4))
    {
      call_ROGUEM52( 28, (RogueClassCmd*)(((RogueClassCmd*)(THIS->args->data->objects[best_match_4->index]))), writer_0, false );
      st_2 = ((RogueString*)((RogueString__from__Integer( st_2, best_match_4->name->count ))));
    }
    else if (((RogueString__begins_with__String( st_2, Rogue_literal_strings[145] ))))
    {
      call_ROGUEM754( 31, (RogueClassCmdCallInlineNative*)(THIS), writer_0 );
      st_2 = ((RogueString*)((RogueString__from__Integer( st_2, 4 ))));
    }
    dollar_3 = ((RogueOptionalInteger)((RogueString__locate__Character_OptionalInteger( st_2, (RogueCharacter)'$', RogueOptionalInteger() ))));
  }
  RogueCPPWriter__print__String( writer_0, st_2 );
}

RogueClassCmdCallInlineNative* RogueCmdCallInlineNative__init_object( RogueClassCmdCallInlineNative* THIS )
{
  return (RogueClassCmdCallInlineNative*)(THIS);
}

void RogueCmdCallInlineNative__print_this__CPPWriter( RogueClassCmdCallInlineNative* THIS, RogueClassCPPWriter* writer_0 )
{
  throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[814] )));
}

RogueString* RogueCmdCallNativeRoutine__type_name( RogueClassCmdCallNativeRoutine* THIS )
{
  return (RogueString*)(Rogue_literal_strings[980]);
}

RogueClassCmd* RogueCmdCallNativeRoutine__clone__CloneArgs( RogueClassCmdCallNativeRoutine* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCallNativeRoutine__init__Token_Method_CmdArgs( ((RogueClassCmdCallNativeRoutine*)ROGUE_CREATE_OBJECT(CmdCallNativeRoutine)), THIS->t, THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

void RogueCmdCallNativeRoutine__write_cpp__CPPWriter_Logical( RogueClassCmdCallNativeRoutine* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[176] ))), THIS->method_info->_return_type, THIS->method_info->_return_type );
  }
  RogueCPPWriter__print__String( writer_0, THIS->method_info->cpp_name );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[408] );
  RogueInteger i_2 = (0);
  {
    RogueClassCmdArgs* _auto_1194_4 = (THIS->args);
    RogueInteger _auto_1195_5 = (0);
    for (;_auto_1195_5 < _auto_1194_4->count;++_auto_1195_5)
    {
      RogueClassCmd* arg_6 = (((RogueClassCmd*)(_auto_1194_4->data->objects[_auto_1195_5])));
      if (i_2 > 0)
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[405] );
      }
      RogueClassType* param_type_3 = (((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type);
      if (((RogueType__is_aspect( param_type_3 ))))
      {
        RogueCPPWriter__print__String( ((RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[176] ))), (call_ROGUEM46( 27, (RogueClassCmd*)(arg_6) )), ((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type ))), Rogue_literal_strings[176] );
        call_ROGUEM52( 28, (RogueClassCmd*)(arg_6), writer_0, false );
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[786] );
      }
      else
      {
        call_ROGUEM52( 28, (RogueClassCmd*)(arg_6), writer_0, false );
      }
      ++i_2;
    }
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[448] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] );
  }
}

RogueClassCmdCallNativeRoutine* RogueCmdCallNativeRoutine__init_object( RogueClassCmdCallNativeRoutine* THIS )
{
  return (RogueClassCmdCallNativeRoutine*)(THIS);
}

RogueClassCmdCallNativeRoutine* RogueCmdCallNativeRoutine__init__Token_Method_CmdArgs( RogueClassCmdCallNativeRoutine* THIS, RogueClassToken* _auto_884_0, RogueClassMethod* _auto_885_1, RogueClassCmdArgs* _auto_886_2 )
{
  THIS->args = _auto_886_2;
  THIS->method_info = _auto_885_1;
  THIS->t = _auto_884_0;
  return (RogueClassCmdCallNativeRoutine*)(THIS);
}

RogueString* RogueCmdReadArrayCount__type_name( RogueClassCmdReadArrayCount* THIS )
{
  return (RogueString*)(Rogue_literal_strings[964]);
}

RogueClassCmd* RogueCmdReadArrayCount__clone__CloneArgs( RogueClassCmdReadArrayCount* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadArrayCount__init__Token_Cmd( ((RogueClassCmdReadArrayCount*)ROGUE_CREATE_OBJECT(CmdReadArrayCount)), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->context), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdReadArrayCount__resolve__Scope( RogueClassCmdReadArrayCount* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->_array_type))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  THIS->context = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->context), scope_0 ));
  THIS->_array_type = ((Rogue_Cmd__require_type( THIS->context )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdReadArrayCount__trace_used_code( RogueClassCmdReadArrayCount* THIS )
{
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->context) );
  RogueType__trace_used_code( THIS->_array_type );
}

RogueClassType* Rogue_CmdReadArrayCount__type( RogueClassCmdReadArrayCount* THIS )
{
  return (RogueClassType*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer);
}

void RogueCmdReadArrayCount__write_cpp__CPPWriter_Logical( RogueClassCmdReadArrayCount* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->context), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[815] );
}

RogueClassCmdReadArrayCount* RogueCmdReadArrayCount__init_object( RogueClassCmdReadArrayCount* THIS )
{
  return (RogueClassCmdReadArrayCount*)(THIS);
}

RogueClassCmdReadArrayCount* RogueCmdReadArrayCount__init__Token_Cmd( RogueClassCmdReadArrayCount* THIS, RogueClassToken* _auto_889_0, RogueClassCmd* _auto_890_1 )
{
  THIS->context = _auto_890_1;
  THIS->t = _auto_889_0;
  return (RogueClassCmdReadArrayCount*)(THIS);
}

RogueString* RogueCmdCallInlineNativeMethod__type_name( RogueClassCmdCallInlineNativeMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[985]);
}

RogueClassCmd* RogueCmdCallInlineNativeMethod__clone__CloneArgs( RogueClassCmdCallInlineNativeMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallInlineNativeMethod*)ROGUE_CREATE_OBJECT(CmdCallInlineNativeMethod))), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, clone_args_0 ))), THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

RogueClassType* Rogue_CmdCallInlineNativeMethod__type( RogueClassCmdCallInlineNativeMethod* THIS )
{
  return (RogueClassType*)(THIS->method_info->_return_type);
}

RogueClassCmdCallInlineNativeMethod* RogueCmdCallInlineNativeMethod__init_object( RogueClassCmdCallInlineNativeMethod* THIS )
{
  return (RogueClassCmdCallInlineNativeMethod*)(THIS);
}

void RogueCmdCallInlineNativeMethod__print_this__CPPWriter( RogueClassCmdCallInlineNativeMethod* THIS, RogueClassCPPWriter* writer_0 )
{
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->context), writer_0, false );
}

RogueString* RogueCmdCallNativeMethod__type_name( RogueClassCmdCallNativeMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[981]);
}

RogueClassCmd* RogueCmdCallNativeMethod__clone__CloneArgs( RogueClassCmdCallNativeMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallNativeMethod*)ROGUE_CREATE_OBJECT(CmdCallNativeMethod))), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, clone_args_0 ))), THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

void RogueCmdCallNativeMethod__write_cpp__CPPWriter_Logical( RogueClassCmdCallNativeMethod* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[176] ))), THIS->method_info->_return_type, THIS->method_info->_return_type );
  }
  RogueCPPWriter__print__String( writer_0, THIS->method_info->cpp_name );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[408] );
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->context), writer_0, false );
  RogueInteger i_2 = (0);
  {
    RogueClassCmdArgs* _auto_1196_4 = (THIS->args);
    RogueInteger _auto_1197_5 = (0);
    for (;_auto_1197_5 < _auto_1196_4->count;++_auto_1197_5)
    {
      RogueClassCmd* arg_6 = (((RogueClassCmd*)(_auto_1196_4->data->objects[_auto_1197_5])));
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[405] );
      RogueClassType* param_type_3 = (((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type);
      if (((RogueType__is_aspect( param_type_3 ))))
      {
        RogueCPPWriter__print__String( ((RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[176] ))), (call_ROGUEM46( 27, (RogueClassCmd*)(arg_6) )), ((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type ))), Rogue_literal_strings[176] );
        call_ROGUEM52( 28, (RogueClassCmd*)(arg_6), writer_0, false );
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[786] );
      }
      else
      {
        call_ROGUEM52( 28, (RogueClassCmd*)(arg_6), writer_0, false );
      }
      ++i_2;
    }
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[448] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] );
  }
}

RogueClassCmdCallNativeMethod* RogueCmdCallNativeMethod__init_object( RogueClassCmdCallNativeMethod* THIS )
{
  return (RogueClassCmdCallNativeMethod*)(THIS);
}

RogueString* RogueCmdCallAspectMethod__type_name( RogueClassCmdCallAspectMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[982]);
}

RogueClassCmd* RogueCmdCallAspectMethod__clone__CloneArgs( RogueClassCmdCallAspectMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallAspectMethod*)ROGUE_CREATE_OBJECT(CmdCallAspectMethod))), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, clone_args_0 ))), THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

void RogueCmdCallAspectMethod__write_cpp__CPPWriter_Logical( RogueClassCmdCallAspectMethod* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[176] ))), THIS->method_info->_return_type, THIS->method_info->_return_type );
  }
  RogueCPPWriter__print__String( writer_0, THIS->method_info->cpp_name );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[408] );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[176] );
  RogueCPPWriter__print__Type( writer_0, ((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Object );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] );
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->context), writer_0, false );
  RogueInteger i_2 = (0);
  {
    RogueClassCmdArgs* _auto_1198_4 = (THIS->args);
    RogueInteger _auto_1199_5 = (0);
    for (;_auto_1199_5 < _auto_1198_4->count;++_auto_1199_5)
    {
      RogueClassCmd* arg_6 = (((RogueClassCmd*)(_auto_1198_4->data->objects[_auto_1199_5])));
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[405] );
      RogueClassType* param_type_3 = (((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type);
      if (((RogueType__is_aspect( param_type_3 ))))
      {
        RogueCPPWriter__print__String( ((RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[176] ))), (call_ROGUEM46( 27, (RogueClassCmd*)(arg_6) )), ((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type ))), Rogue_literal_strings[176] );
        call_ROGUEM52( 28, (RogueClassCmd*)(arg_6), writer_0, false );
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[786] );
      }
      else
      {
        call_ROGUEM52( 28, (RogueClassCmd*)(arg_6), writer_0, false );
      }
      ++i_2;
    }
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[448] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] );
  }
}

RogueClassCmdCallAspectMethod* RogueCmdCallAspectMethod__init_object( RogueClassCmdCallAspectMethod* THIS )
{
  return (RogueClassCmdCallAspectMethod*)(THIS);
}

RogueString* RogueCmdCallDynamicMethod__type_name( RogueClassCmdCallDynamicMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[986]);
}

RogueClassCmd* RogueCmdCallDynamicMethod__clone__CloneArgs( RogueClassCmdCallDynamicMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallDynamicMethod*)ROGUE_CREATE_OBJECT(CmdCallDynamicMethod))), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, clone_args_0 ))), THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

void RogueCmdCallDynamicMethod__trace_used_code( RogueClassCmdCallDynamicMethod* THIS )
{
  RogueCmdCall__trace_used_code( ((RogueClassCmdCall*)THIS) );
  if (((RogueMethod__is_overridden( THIS->method_info ))))
  {
    THIS->method_info->called_dynamically = true;
  }
}

void RogueCmdCallDynamicMethod__write_cpp__CPPWriter_Logical( RogueClassCmdCallDynamicMethod* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[176] ))), THIS->method_info->_return_type, THIS->method_info->_return_type );
  }
  if (((RogueMethod__is_overridden( THIS->method_info ))))
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[816] ))), THIS->method_info->cpp_typedef );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[408] );
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Integer( writer_0, THIS->method_info->index ))), Rogue_literal_strings[405] );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[176] );
    RogueCPPWriter__print__Type( writer_0, THIS->method_info->type_context );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[775] );
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] );
    RogueInteger i_2 = (0);
    {
      RogueClassCmdArgs* _auto_1200_4 = (THIS->args);
      RogueInteger _auto_1201_5 = (0);
      for (;_auto_1201_5 < _auto_1200_4->count;++_auto_1201_5)
      {
        RogueClassCmd* arg_6 = (((RogueClassCmd*)(_auto_1200_4->data->objects[_auto_1201_5])));
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[405] );
        RogueClassType* param_type_3 = (((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type);
        if (((RogueType__is_aspect( param_type_3 ))))
        {
          RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[176] ))), (call_ROGUEM46( 27, (RogueClassCmd*)(arg_6) )), ((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type );
          call_ROGUEM52( 28, (RogueClassCmd*)(arg_6), writer_0, false );
          RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] );
        }
        else
        {
          call_ROGUEM52( 28, (RogueClassCmd*)(arg_6), writer_0, false );
        }
        ++i_2;
      }
    }
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[448] );
  }
  else
  {
    call_ROGUEM52( 28, (RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallStaticMethod*)ROGUE_CREATE_OBJECT(CmdCallStaticMethod))), THIS->t, THIS->context, THIS->method_info, THIS->args )))), writer_0, is_statement_1 );
  }
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] );
  }
}

RogueClassCmdCallDynamicMethod* RogueCmdCallDynamicMethod__init_object( RogueClassCmdCallDynamicMethod* THIS )
{
  return (RogueClassCmdCallDynamicMethod*)(THIS);
}

RogueString* RogueCmdCallMethod__type_name( RogueClassCmdCallMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[983]);
}

RogueClassCmd* RogueCmdCallMethod__call_prior__Scope( RogueClassCmdCallMethod* THIS, RogueClassScope* scope_0 )
{
  if ((((RogueMethod__is_initializer( THIS->method_info ))) && THIS->method_info->type_context != scope_0->_this_type))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallStaticMethod*)ROGUE_CREATE_OBJECT(CmdCallStaticMethod))), THIS->t, THIS->context, THIS->method_info, THIS->args ))))));
  }
  if (!(!!(THIS->method_info->overridden_method)))
  {
    throw ((RogueToken__error__String( THIS->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), THIS->method_info->signature ))), Rogue_literal_strings[833] ))) ))) )));
  }
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallStaticMethod*)ROGUE_CREATE_OBJECT(CmdCallStaticMethod))), THIS->t, THIS->context, THIS->method_info->overridden_method, THIS->args ))))));
}

RogueClassCmdCallMethod* RogueCmdCallMethod__init_object( RogueClassCmdCallMethod* THIS )
{
  return (RogueClassCmdCallMethod*)(THIS);
}

RogueString* RogueCandidateMethods__type_name( RogueClassCandidateMethods* THIS )
{
  return (RogueString*)(Rogue_literal_strings[955]);
}

RogueClassCandidateMethods* RogueCandidateMethods__init__Type_CmdAccess_Logical( RogueClassCandidateMethods* THIS, RogueClassType* _auto_894_0, RogueClassCmdAccess* _auto_895_1, RogueLogical _auto_896_2 )
{
  THIS->error_on_fail = _auto_896_2;
  THIS->access = _auto_895_1;
  THIS->type_context = _auto_894_0;
  return (RogueClassCandidateMethods*)(THIS);
}

RogueLogical RogueCandidateMethods__has_match( RogueClassCandidateMethods* THIS )
{
  return (RogueLogical)(THIS->available->count == 1);
}

RogueClassMethod* RogueCandidateMethods__match( RogueClassCandidateMethods* THIS )
{
  if (THIS->available->count != 1)
  {
    return (RogueClassMethod*)(((RogueClassMethod*)(NULL)));
  }
  return (RogueClassMethod*)(((RogueClassMethod*)(THIS->available->data->objects[0])));
}

RogueLogical RogueCandidateMethods__refine_matches( RogueClassCandidateMethods* THIS )
{
  return (RogueLogical)(((RogueCandidateMethods__update__Logical( THIS, false ))));
}

RogueLogical RogueCandidateMethods__update_available( RogueClassCandidateMethods* THIS )
{
  return (RogueLogical)(((RogueCandidateMethods__update__Logical( THIS, false ))));
}

RogueLogical RogueCandidateMethods__update_matches( RogueClassCandidateMethods* THIS )
{
  return (RogueLogical)(((RogueCandidateMethods__update__Logical( THIS, true ))));
}

RogueLogical RogueCandidateMethods__update__Logical( RogueClassCandidateMethods* THIS, RogueLogical require_compatible_0 )
{
  if (THIS->compatible->count == 0)
  {
    if (THIS->available->count == 0)
    {
      if (!(THIS->error_on_fail))
      {
        return (RogueLogical)(false);
      }
      throw ((RogueToken__error__String( THIS->access->t, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[688] ))), THIS->access->name ))), Rogue_literal_strings[689] ))), ((RogueType__to_String( THIS->type_context ))) ))), Rogue_literal_strings[44] ))) ))) )));
    }
    else if (require_compatible_0)
    {
      if (!(THIS->error_on_fail))
      {
        return (RogueLogical)(false);
      }
      RogueStringBuilder* call_sig_buffer_1 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
      RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( call_sig_buffer_1, THIS->type_context->name ))), Rogue_literal_strings[156] );
      RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( call_sig_buffer_1, THIS->access->name ))), Rogue_literal_strings[176] );
      if (!!(THIS->access->args))
      {
        {
          RogueClassCmdArgs* _auto_1202_4 = (THIS->access->args);
          RogueInteger index_5 = (0);
          for (;index_5 < _auto_1202_4->count;++index_5)
          {
            if (index_5 > 0)
            {
              RogueStringBuilder__print__Character( call_sig_buffer_1, (RogueCharacter)',' );
            }
            RogueStringBuilder__print__String( call_sig_buffer_1, ((Rogue_Cmd__require_type( ((RogueClassCmd*)(THIS->access->args->data->objects[index_5])) )))->name );
          }
        }
      }
      RogueStringBuilder__print__String( call_sig_buffer_1, Rogue_literal_strings[100] );
      RogueString* call_sig_2 = (((RogueStringBuilder__to_String( call_sig_buffer_1 ))));
      RogueStringBuilder* buffer_3 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
      if (THIS->available->count > 1)
      {
        RogueStringBuilder__print__String( buffer_3, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[690] ))), call_sig_2 ))), Rogue_literal_strings[691] ))) ))) );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_3, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[692] ))), call_sig_2 ))), Rogue_literal_strings[693] ))) ))) );
      }
      {
        RogueMethodList* _auto_1203_6 = (THIS->available);
        RogueInteger _auto_1204_7 = (0);
        for (;_auto_1204_7 < _auto_1203_6->count;++_auto_1204_7)
        {
          RogueClassMethod* m_8 = (((RogueClassMethod*)(_auto_1203_6->data->objects[_auto_1204_7])));
          RogueStringBuilder__println__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( buffer_3, Rogue_literal_strings[449] ))), m_8->type_context->name ))), Rogue_literal_strings[156] ))), m_8->signature );
        }
      }
      throw ((RogueToken__error__String( THIS->access->t, ((RogueStringBuilder__to_String( buffer_3 ))) )));
    }
    return (RogueLogical)(true);
  }
  RogueMethodList__clear( THIS->available );
  RogueMethodList__add__MethodList( THIS->available, THIS->compatible );
  RogueMethodList__clear( THIS->compatible );
  return (RogueLogical)(true);
}

RogueClassCandidateMethods* RogueCandidateMethods__init_object( RogueClassCandidateMethods* THIS )
{
  THIS->available = ((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) )));
  THIS->compatible = ((RogueMethodList__init( ((RogueMethodList*)ROGUE_CREATE_OBJECT(MethodList)) )));
  return (RogueClassCandidateMethods*)(THIS);
}

RogueString* RogueCmdControlStructureArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[622]);
}

RogueString* RogueCmdTaskControlSectionList__to_String( RogueCmdTaskControlSectionList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueCmdTaskControlSectionList* _auto_1205_2 = (THIS);
    RogueInteger _auto_1206_3 = (0);
    for (;_auto_1206_3 < _auto_1205_2->count;++_auto_1206_3)
    {
      RogueClassCmdTaskControlSection* value_4 = (((RogueClassCmdTaskControlSection*)(_auto_1205_2->data->objects[_auto_1206_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueCmdTaskControlSectionList__type_name( RogueCmdTaskControlSectionList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[951]);
}

RogueCmdTaskControlSectionList* RogueCmdTaskControlSectionList__init_object( RogueCmdTaskControlSectionList* THIS )
{
  return (RogueCmdTaskControlSectionList*)(THIS);
}

RogueCmdTaskControlSectionList* RogueCmdTaskControlSectionList__init( RogueCmdTaskControlSectionList* THIS )
{
  RogueCmdTaskControlSectionList__init__Integer( THIS, 10 );
  return (RogueCmdTaskControlSectionList*)(THIS);
}

RogueCmdTaskControlSectionList* RogueCmdTaskControlSectionList__init__Integer( RogueCmdTaskControlSectionList* THIS, RogueInteger initial_capacity_0 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassCmdTaskControlSection*), true );
  return (RogueCmdTaskControlSectionList*)(THIS);
}

RogueCmdTaskControlSectionList* RogueCmdTaskControlSectionList__add__CmdTaskControlSection( RogueCmdTaskControlSectionList* THIS, RogueClassCmdTaskControlSection* value_0 )
{
  ((RogueCmdTaskControlSectionList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueCmdTaskControlSectionList*)(THIS);
}

RogueInteger RogueCmdTaskControlSectionList__capacity( RogueCmdTaskControlSectionList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueCmdTaskControlSectionList* RogueCmdTaskControlSectionList__reserve__Integer( RogueCmdTaskControlSectionList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassCmdTaskControlSection*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueCmdTaskControlSectionList__capacity( THIS ))) + ((RogueCmdTaskControlSectionList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassCmdTaskControlSection*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueCmdTaskControlSectionList*)(THIS);
}

RogueString* RogueCmdBlock__type_name( RogueClassCmdBlock* THIS )
{
  return (RogueString*)(Rogue_literal_strings[851]);
}

RogueClassCmd* RogueCmdBlock__clone__CloneArgs( RogueClassCmdBlock* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassTaskArgs* task_args_1 = (((RogueClassTaskArgs*)(RogueObject_as(clone_args_0,RogueTypeTaskArgs))));
  if ((!!(task_args_1) && THIS->contains_yield))
  {
    {
      RogueClassCmdStatementList* _auto_1215_3 = (THIS->statements);
      RogueInteger _auto_1216_4 = (0);
      for (;_auto_1216_4 < _auto_1215_3->count;++_auto_1216_4)
      {
        RogueClassCmd* statement_5 = (((RogueClassCmd*)(_auto_1215_3->data->objects[_auto_1216_4])));
        RogueTaskArgs__add__Cmd( task_args_1, (call_ROGUEM44( 5, (RogueClassCmd*)(statement_5), ((RogueClassCloneArgs*)(task_args_1)) )) );
      }
    }
    return (RogueClassCmd*)(((RogueClassCmd*)(NULL)));
  }
  else
  {
    RogueClassCmdBlock* result_2 = (((RogueCmdBlock__init__Token_CmdStatementList_Integer( ((RogueClassCmdBlock*)ROGUE_CREATE_OBJECT(CmdBlock)), THIS->t, ((RogueClassCmdStatementList*)(NULL)), 0 ))));
    call_ROGUEM170( 30, (RogueClassCmdControlStructure*)(result_2), ((RogueClassCmdControlStructure*)(THIS)) );
    THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_2));
    result_2->statements = ((RogueCmdStatementList__clone__CloneArgs( THIS->statements, clone_args_0 )));
    return (RogueClassCmd*)(((RogueClassCmd*)(result_2)));
  }
}

RogueLogical RogueCmdBlock__requires_semicolon( RogueClassCmdBlock* THIS )
{
  return (RogueLogical)(false);
}

RogueClassCmdBlock* RogueCmdBlock__resolve__Scope( RogueClassCmdBlock* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  RogueCmdStatementList__resolve__Scope( THIS->statements, scope_0 );
  RogueCmdControlStructureList__remove_last( scope_0->control_stack );
  return (RogueClassCmdBlock*)(THIS);
}

void RogueCmdBlock__trace_used_code( RogueClassCmdBlock* THIS )
{
  RogueCmdStatementList__trace_used_code( THIS->statements );
}

void RogueCmdBlock__write_cpp__CPPWriter_Logical( RogueClassCmdBlock* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[174] );
  writer_0->indent += 2;
  RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->statements, writer_0, false );
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[97] );
  if (!!(THIS->escape_label))
  {
    RogueCPPWriter__println__String( ((RogueCPPWriter__print__String( writer_0, THIS->escape_label ))), Rogue_literal_strings[780] );
  }
}

RogueClassCmdBlock* RogueCmdBlock__init_object( RogueClassCmdBlock* THIS )
{
  return (RogueClassCmdBlock*)(THIS);
}

RogueClassCmdBlock* RogueCmdBlock__init__Token_Integer( RogueClassCmdBlock* THIS, RogueClassToken* _auto_947_0, RogueInteger _auto_948_1 )
{
  THIS->_control_type = _auto_948_1;
  THIS->t = _auto_947_0;
  THIS->statements = ((RogueCmdStatementList__init( ((RogueClassCmdStatementList*)ROGUE_CREATE_OBJECT(CmdStatementList)) )));
  return (RogueClassCmdBlock*)(THIS);
}

RogueClassCmdBlock* RogueCmdBlock__init__Token_CmdStatementList_Integer( RogueClassCmdBlock* THIS, RogueClassToken* _auto_949_0, RogueClassCmdStatementList* _auto_950_1, RogueInteger _auto_951_2 )
{
  THIS->_control_type = _auto_951_2;
  THIS->statements = _auto_950_1;
  THIS->t = _auto_949_0;
  return (RogueClassCmdBlock*)(THIS);
}

RogueString* RogueCmdTaskControlSectionArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[623]);
}

RogueString* RogueString_CmdTableEntryList__to_String( RogueTableEntry_of_String_CmdList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_CmdList* _auto_1217_2 = (THIS);
    RogueInteger _auto_1218_3 = (0);
    for (;_auto_1218_3 < _auto_1217_2->count;++_auto_1218_3)
    {
      RogueClassString_CmdTableEntry* value_4 = (((RogueClassString_CmdTableEntry*)(_auto_1217_2->data->objects[_auto_1218_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_CmdTableEntryList__type_name( RogueTableEntry_of_String_CmdList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[952]);
}

RogueTableEntry_of_String_CmdList* RogueString_CmdTableEntryList__init_object( RogueTableEntry_of_String_CmdList* THIS )
{
  return (RogueTableEntry_of_String_CmdList*)(THIS);
}

RogueTableEntry_of_String_CmdList* RogueString_CmdTableEntryList__init__Integer_String_CmdTableEntry( RogueTableEntry_of_String_CmdList* THIS, RogueInteger initial_capacity_0, RogueClassString_CmdTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_CmdTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_968_3 = (initial_capacity_0);
    for (;i_2 <= _auto_968_3;++i_2)
    {
      RogueString_CmdTableEntryList__add__String_CmdTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_CmdList*)(THIS);
}

RogueTableEntry_of_String_CmdList* RogueString_CmdTableEntryList__add__String_CmdTableEntry( RogueTableEntry_of_String_CmdList* THIS, RogueClassString_CmdTableEntry* value_0 )
{
  ((RogueString_CmdTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_CmdList*)(THIS);
}

RogueInteger RogueString_CmdTableEntryList__capacity( RogueTableEntry_of_String_CmdList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_CmdList* RogueString_CmdTableEntryList__reserve__Integer( RogueTableEntry_of_String_CmdList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_CmdTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_CmdTableEntryList__capacity( THIS ))) + ((RogueString_CmdTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_CmdTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_CmdList*)(THIS);
}

RogueString* RogueString_CmdTableEntry__type_name( RogueClassString_CmdTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[592]);
}

RogueClassString_CmdTableEntry* RogueString_CmdTableEntry__init__String_Cmd_Integer( RogueClassString_CmdTableEntry* THIS, RogueString* _key_0, RogueClassCmd* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_CmdTableEntry*)(THIS);
}

RogueClassString_CmdTableEntry* RogueString_CmdTableEntry__init_object( RogueClassString_CmdTableEntry* THIS )
{
  return (RogueClassString_CmdTableEntry*)(THIS);
}

RogueString* RogueString_CmdTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[624]);
}

RogueString* RogueString_PropertyTableEntryList__to_String( RogueTableEntry_of_String_PropertyList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_PropertyList* _auto_1227_2 = (THIS);
    RogueInteger _auto_1228_3 = (0);
    for (;_auto_1228_3 < _auto_1227_2->count;++_auto_1228_3)
    {
      RogueClassString_PropertyTableEntry* value_4 = (((RogueClassString_PropertyTableEntry*)(_auto_1227_2->data->objects[_auto_1228_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_PropertyTableEntryList__type_name( RogueTableEntry_of_String_PropertyList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[953]);
}

RogueTableEntry_of_String_PropertyList* RogueString_PropertyTableEntryList__init_object( RogueTableEntry_of_String_PropertyList* THIS )
{
  return (RogueTableEntry_of_String_PropertyList*)(THIS);
}

RogueTableEntry_of_String_PropertyList* RogueString_PropertyTableEntryList__init__Integer_String_PropertyTableEntry( RogueTableEntry_of_String_PropertyList* THIS, RogueInteger initial_capacity_0, RogueClassString_PropertyTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_PropertyTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_972_3 = (initial_capacity_0);
    for (;i_2 <= _auto_972_3;++i_2)
    {
      RogueString_PropertyTableEntryList__add__String_PropertyTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_PropertyList*)(THIS);
}

RogueTableEntry_of_String_PropertyList* RogueString_PropertyTableEntryList__add__String_PropertyTableEntry( RogueTableEntry_of_String_PropertyList* THIS, RogueClassString_PropertyTableEntry* value_0 )
{
  ((RogueString_PropertyTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_PropertyList*)(THIS);
}

RogueInteger RogueString_PropertyTableEntryList__capacity( RogueTableEntry_of_String_PropertyList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_PropertyList* RogueString_PropertyTableEntryList__reserve__Integer( RogueTableEntry_of_String_PropertyList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_PropertyTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_PropertyTableEntryList__capacity( THIS ))) + ((RogueString_PropertyTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_PropertyTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_PropertyList*)(THIS);
}

RogueString* RogueString_PropertyTableEntry__type_name( RogueClassString_PropertyTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[593]);
}

RogueClassString_PropertyTableEntry* RogueString_PropertyTableEntry__init__String_Property_Integer( RogueClassString_PropertyTableEntry* THIS, RogueString* _key_0, RogueClassProperty* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_PropertyTableEntry*)(THIS);
}

RogueClassString_PropertyTableEntry* RogueString_PropertyTableEntry__init_object( RogueClassString_PropertyTableEntry* THIS )
{
  return (RogueClassString_PropertyTableEntry*)(THIS);
}

RogueString* RogueString_PropertyTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[625]);
}

RogueString* RogueDirectiveTokenType__type_name( RogueClassDirectiveTokenType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[837]);
}

RogueClassToken* RogueDirectiveTokenType__create_token__String_Integer_Integer( RogueClassDirectiveTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueToken__init__TokenType( ((RogueClassToken*)ROGUE_CREATE_OBJECT(Token)), ((RogueClassTokenType*)(THIS)) ))), filepath_0, line_1, column_2 ))));
}

RogueLogical RogueDirectiveTokenType__is_directive( RogueClassDirectiveTokenType* THIS )
{
  return (RogueLogical)(true);
}

RogueClassDirectiveTokenType* RogueDirectiveTokenType__init_object( RogueClassDirectiveTokenType* THIS )
{
  return (RogueClassDirectiveTokenType*)(THIS);
}

RogueString* RogueStructuralDirectiveTokenType__type_name( RogueClassStructuralDirectiveTokenType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[838]);
}

RogueClassToken* RogueStructuralDirectiveTokenType__create_token__String_Integer_Integer( RogueClassStructuralDirectiveTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueToken__init__TokenType( ((RogueClassToken*)ROGUE_CREATE_OBJECT(Token)), ((RogueClassTokenType*)(THIS)) ))), filepath_0, line_1, column_2 ))));
}

RogueLogical RogueStructuralDirectiveTokenType__is_directive( RogueClassStructuralDirectiveTokenType* THIS )
{
  return (RogueLogical)(true);
}

RogueLogical RogueStructuralDirectiveTokenType__is_structure( RogueClassStructuralDirectiveTokenType* THIS )
{
  return (RogueLogical)(true);
}

RogueClassStructuralDirectiveTokenType* RogueStructuralDirectiveTokenType__init_object( RogueClassStructuralDirectiveTokenType* THIS )
{
  return (RogueClassStructuralDirectiveTokenType*)(THIS);
}

RogueString* RogueEOLTokenType__type_name( RogueClassEOLTokenType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[839]);
}

RogueClassToken* RogueEOLTokenType__create_token__String_Integer_Integer( RogueClassEOLTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueClassToken*)((RogueEOLToken__init__TokenType_String( ((RogueClassEOLToken*)ROGUE_CREATE_OBJECT(EOLToken)), ((RogueClassTokenType*)(THIS)), Rogue_literal_strings[0] )))), filepath_0, line_1, column_2 ))));
}

RogueClassToken* RogueEOLTokenType__create_token__String_Integer_Integer_String( RogueClassEOLTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2, RogueString* value_3 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueClassToken*)((RogueEOLToken__init__TokenType_String( ((RogueClassEOLToken*)ROGUE_CREATE_OBJECT(EOLToken)), ((RogueClassTokenType*)(THIS)), value_3 )))), filepath_0, line_1, column_2 ))));
}

RogueLogical RogueEOLTokenType__is_structure( RogueClassEOLTokenType* THIS )
{
  return (RogueLogical)(false);
}

RogueClassEOLTokenType* RogueEOLTokenType__init_object( RogueClassEOLTokenType* THIS )
{
  return (RogueClassEOLTokenType*)(THIS);
}

RogueString* RogueStructureTokenType__type_name( RogueClassStructureTokenType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[840]);
}

RogueClassToken* RogueStructureTokenType__create_token__String_Integer_Integer( RogueClassStructureTokenType* THIS, RogueString* filepath_0, RogueInteger line_1, RogueInteger column_2 )
{
  return (RogueClassToken*)(((RogueToken__set_location__String_Integer_Integer( ((RogueToken__init__TokenType( ((RogueClassToken*)ROGUE_CREATE_OBJECT(Token)), ((RogueClassTokenType*)(THIS)) ))), filepath_0, line_1, column_2 ))));
}

RogueLogical RogueStructureTokenType__is_structure( RogueClassStructureTokenType* THIS )
{
  return (RogueLogical)(true);
}

RogueClassStructureTokenType* RogueStructureTokenType__init_object( RogueClassStructureTokenType* THIS )
{
  return (RogueClassStructureTokenType*)(THIS);
}

RogueString* RogueOpWithAssignTokenType__type_name( RogueClassOpWithAssignTokenType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[841]);
}

RogueLogical RogueOpWithAssignTokenType__is_op_with_assign( RogueClassOpWithAssignTokenType* THIS )
{
  return (RogueLogical)(true);
}

RogueClassOpWithAssignTokenType* RogueOpWithAssignTokenType__init_object( RogueClassOpWithAssignTokenType* THIS )
{
  return (RogueClassOpWithAssignTokenType*)(THIS);
}

RogueString* RogueEOLToken__to_String( RogueClassEOLToken* THIS )
{
  if (!!(THIS->comment->count))
  {
    return (RogueString*)(((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[638] ))), THIS->comment ))) ))));
  }
  return (RogueString*)(Rogue_literal_strings[230]);
}

RogueString* RogueEOLToken__type_name( RogueClassEOLToken* THIS )
{
  return (RogueString*)(Rogue_literal_strings[644]);
}

RogueClassEOLToken* RogueEOLToken__init_object( RogueClassEOLToken* THIS )
{
  return (RogueClassEOLToken*)(THIS);
}

RogueClassEOLToken* RogueEOLToken__init__TokenType_String( RogueClassEOLToken* THIS, RogueClassTokenType* _auto_1023_0, RogueString* _auto_1024_1 )
{
  THIS->comment = _auto_1024_1;
  THIS->_type = _auto_1023_0;
  return (RogueClassEOLToken*)(THIS);
}

RogueString* RogueString_TokenListTable__to_String( RogueClassString_TokenListTable* THIS )
{
  return (RogueString*)(((RogueStringBuilder__to_String( ((RogueString_TokenListTable__print_to__StringBuilder( THIS, ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))) ))) ))));
}

RogueString* RogueString_TokenListTable__type_name( RogueClassString_TokenListTable* THIS )
{
  return (RogueString*)(Rogue_literal_strings[594]);
}

RogueClassString_TokenListTable* RogueString_TokenListTable__init( RogueClassString_TokenListTable* THIS )
{
  RogueString_TokenListTable__init__Integer( THIS, 16 );
  return (RogueClassString_TokenListTable*)(THIS);
}

RogueClassString_TokenListTable* RogueString_TokenListTable__init__Integer( RogueClassString_TokenListTable* THIS, RogueInteger bin_count_0 )
{
  RogueInteger bins_power_of_2_1 = (1);
  while (bins_power_of_2_1 < bin_count_0)
  {
    bins_power_of_2_1 = ((RogueInteger)(bins_power_of_2_1 << 1));
  }
  bin_count_0 = ((RogueInteger)bins_power_of_2_1);
  THIS->bin_mask = (bin_count_0 - 1);
  THIS->bins = ((RogueString_TokenListTableEntryList__init__Integer_String_TokenListTableEntry( ((RogueTableEntry_of_String_TokenListList*)ROGUE_CREATE_OBJECT(TableEntry_of_String_TokenListList)), bin_count_0, ((RogueClassString_TokenListTableEntry*)(NULL)) )));
  THIS->keys = ((RogueStringList__init( ((RogueStringList*)ROGUE_CREATE_OBJECT(StringList)) )));
  return (RogueClassString_TokenListTable*)(THIS);
}

RogueClassString_TokenListTableEntry* RogueString_TokenListTable__find__String( RogueClassString_TokenListTable* THIS, RogueString* key_0 )
{
  RogueInteger hash_1 = (key_0->hash_code);
  RogueClassString_TokenListTableEntry* entry_2 = (((RogueClassString_TokenListTableEntry*)(THIS->bins->data->objects[(hash_1 & THIS->bin_mask)])));
  while (!!(entry_2))
  {
    if ((entry_2->hash == hash_1 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_2->key, key_0 ))) == 0))
    {
      return (RogueClassString_TokenListTableEntry*)(entry_2);
    }
    entry_2 = ((RogueClassString_TokenListTableEntry*)entry_2->next_entry);
  }
  return (RogueClassString_TokenListTableEntry*)(((RogueClassString_TokenListTableEntry*)(NULL)));
}

RogueTokenList* RogueString_TokenListTable__get__String( RogueClassString_TokenListTable* THIS, RogueString* key_0 )
{
  RogueClassString_TokenListTableEntry* entry_1 = (((RogueString_TokenListTable__find__String( THIS, key_0 ))));
  if (!!(entry_1))
  {
    return (RogueTokenList*)(entry_1->value);
  }
  else
  {
    RogueTokenList* default_value_2 = 0;
    return (RogueTokenList*)(default_value_2);
  }
}

void RogueString_TokenListTable__set__String_TokenList( RogueClassString_TokenListTable* THIS, RogueString* key_0, RogueTokenList* value_1 )
{
  RogueInteger hash_2 = (key_0->hash_code);
  RogueInteger index_3 = ((hash_2 & THIS->bin_mask));
  RogueClassString_TokenListTableEntry* entry_4 = (((RogueClassString_TokenListTableEntry*)(THIS->bins->data->objects[index_3])));
  while (!!(entry_4))
  {
    if ((entry_4->hash == hash_2 && ((RogueString__operatorLESSTHANGREATERTHAN__String( entry_4->key, key_0 ))) == 0))
    {
      entry_4->value = value_1;
      return;
    }
    entry_4 = ((RogueClassString_TokenListTableEntry*)entry_4->next_entry);
  }
  entry_4 = ((RogueClassString_TokenListTableEntry*)((RogueString_TokenListTableEntry__init__String_TokenList_Integer( ((RogueClassString_TokenListTableEntry*)ROGUE_CREATE_OBJECT(String_TokenListTableEntry)), key_0, value_1, hash_2 ))));
  entry_4->next_entry = ((RogueClassString_TokenListTableEntry*)(THIS->bins->data->objects[index_3]));
  THIS->bins->data->objects[index_3] = entry_4;
  RogueStringList__add__String( THIS->keys, key_0 );
}

RogueStringBuilder* RogueString_TokenListTable__print_to__StringBuilder( RogueClassString_TokenListTable* THIS, RogueStringBuilder* buffer_0 )
{
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'{' );
  RogueInteger i_1 = (0);
  while (i_1 < THIS->keys->count)
  {
    if (i_1 > 0)
    {
      RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
    }
    RogueString* key_2 = (((RogueString*)(THIS->keys->data->objects[i_1])));
    RogueStringBuilder__print__String( buffer_0, key_2 );
    RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)':' );
    RogueStringBuilder__print__Object( buffer_0, ((RogueObject*)(((RogueString_TokenListTable__get__String( THIS, key_2 ))))) );
    ++i_1;
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'}' );
  return (RogueStringBuilder*)(buffer_0);
}

RogueClassString_TokenListTable* RogueString_TokenListTable__init_object( RogueClassString_TokenListTable* THIS )
{
  return (RogueClassString_TokenListTable*)(THIS);
}

RogueString* RoguePreprocessorTokenReader__type_name( RogueClassPreprocessorTokenReader* THIS )
{
  return (RogueString*)(Rogue_literal_strings[595]);
}

RogueClassPreprocessorTokenReader* RoguePreprocessorTokenReader__init__TokenList( RogueClassPreprocessorTokenReader* THIS, RogueTokenList* _auto_1039_0 )
{
  THIS->tokens = _auto_1039_0;
  THIS->count = THIS->tokens->count;
  return (RogueClassPreprocessorTokenReader*)(THIS);
}

RogueClassError* RoguePreprocessorTokenReader__error__String( RogueClassPreprocessorTokenReader* THIS, RogueString* message_0 )
{
  if (((RoguePreprocessorTokenReader__has_another( THIS ))))
  {
    return (RogueClassError*)(((RogueClassError*)(((RogueToken__error__String( ((RoguePreprocessorTokenReader__peek( THIS ))), message_0 ))))));
  }
  if (!!(THIS->count))
  {
    return (RogueClassError*)(((RogueClassError*)(((RogueToken__error__String( ((RogueTokenList__last( THIS->tokens ))), message_0 ))))));
  }
  return (RogueClassError*)(((RogueClassError*)(((RogueRogueError__init__String_String_Integer_Integer( ((RogueClassRogueError*)ROGUE_CREATE_OBJECT(RogueError)), message_0, ((RogueString*)(NULL)), 0, 0 ))))));
}

void RoguePreprocessorTokenReader__expand_definition__Token( RogueClassPreprocessorTokenReader* THIS, RogueClassToken* t_0 )
{
  RogueClassString_TokenListTableEntry* entry_1 = (((RogueString_TokenListTable__find__String( RoguePreprocessor_definitions, (call_ROGUEM33( 1, (RogueClassToken*)(t_0) )) ))));
  if (!!(entry_1))
  {
    if (!!(entry_1->value))
    {
      RogueTokenList* def_tokens_2 = (entry_1->value);
      entry_1->value = ((RogueTokenList*)(NULL));
      {
        RogueTokenList* _auto_1241_3 = (def_tokens_2);
        RogueInteger _auto_1242_4 = (0);
        for (;_auto_1242_4 < _auto_1241_3->count;++_auto_1242_4)
        {
          RogueClassToken* def_t_5 = (((RogueClassToken*)(_auto_1241_3->data->objects[_auto_1242_4])));
          if (t_0->_type == RogueTokenType_identifier)
          {
            RoguePreprocessorTokenReader__expand_definition__Token( THIS, def_t_5 );
          }
          else
          {
            RogueTokenList__add__Token( THIS->queue, t_0 );
          }
        }
      }
      entry_1->value = def_tokens_2;
      return;
    }
    else
    {
      throw ((RogueToken__error__String( t_0, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[40] ))), (call_ROGUEM33( 1, (RogueClassToken*)(t_0) )) ))), Rogue_literal_strings[36] ))) ))) )));
    }
  }
  else
  {
    RogueTokenList__add__Token( THIS->queue, t_0 );
  }
}

RogueLogical RoguePreprocessorTokenReader__has_another( RogueClassPreprocessorTokenReader* THIS )
{
  RoguePreprocessorTokenReader__peek( THIS );
  return (RogueLogical)(!!(THIS->queue->count));
}

RogueLogical RoguePreprocessorTokenReader__next_is__TokenType( RogueClassPreprocessorTokenReader* THIS, RogueClassTokenType* type_0 )
{
  if ((THIS->position == THIS->count && THIS->queue->count == 0))
  {
    return (RogueLogical)(false);
  }
  return (RogueLogical)(((RoguePreprocessorTokenReader__peek( THIS )))->_type == type_0);
}

RogueClassToken* RoguePreprocessorTokenReader__peek( RogueClassPreprocessorTokenReader* THIS )
{
  if (!!(THIS->queue->count))
  {
    return (RogueClassToken*)(((RogueTokenList__last( THIS->queue ))));
  }
  return (RogueClassToken*)(((RoguePreprocessorTokenReader__peek__Integer( THIS, 0 ))));
}

RogueClassToken* RoguePreprocessorTokenReader__peek__Integer( RogueClassPreprocessorTokenReader* THIS, RogueInteger num_ahead_0 )
{
  if ((THIS->position + num_ahead_0) >= (THIS->count + THIS->queue->count))
  {
    return (RogueClassToken*)(((RogueTokenList__last( THIS->tokens ))));
  }
  while (THIS->queue->count <= num_ahead_0)
  {
    RogueClassToken* t_1 = (((RogueClassToken*)(THIS->tokens->data->objects[THIS->position])));
    ++THIS->position;
    if (t_1->_type == RogueTokenType_identifier)
    {
      RoguePreprocessorTokenReader__expand_definition__Token( THIS, t_1 );
    }
    else
    {
      RogueTokenList__add__Token( THIS->queue, t_1 );
    }
  }
  return (RogueClassToken*)(((RogueClassToken*)(THIS->queue->data->objects[((THIS->queue->count - num_ahead_0) - 1)])));
}

void RoguePreprocessorTokenReader__push__Token( RogueClassPreprocessorTokenReader* THIS, RogueClassToken* t_0 )
{
  RogueTokenList__add__Token( THIS->queue, t_0 );
}

RogueClassToken* RoguePreprocessorTokenReader__read( RogueClassPreprocessorTokenReader* THIS )
{
  RoguePreprocessorTokenReader__peek( THIS );
  if (THIS->queue->count == 0)
  {
    throw ((RoguePreprocessorTokenReader__error__String( THIS, Rogue_literal_strings[41] )));
  }
  return (RogueClassToken*)(((RogueTokenList__remove_last( THIS->queue ))));
}

RogueString* RoguePreprocessorTokenReader__read_identifier( RogueClassPreprocessorTokenReader* THIS )
{
  if (!(((RoguePreprocessorTokenReader__next_is__TokenType( THIS, RogueTokenType_identifier )))))
  {
    throw ((RoguePreprocessorTokenReader__error__String( THIS, ((RogueStringBuilder__to_String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__print__String( ((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))), Rogue_literal_strings[42] ))), ((RogueToken__quoted_name( ((RoguePreprocessorTokenReader__peek( THIS ))) ))) ))), Rogue_literal_strings[44] ))) ))) )));
  }
  return (RogueString*)((call_ROGUEM33( 1, (RogueClassToken*)(((RoguePreprocessorTokenReader__read( THIS )))) )));
}

RogueClassPreprocessorTokenReader* RoguePreprocessorTokenReader__init_object( RogueClassPreprocessorTokenReader* THIS )
{
  THIS->queue = ((RogueTokenList__init( ((RogueTokenList*)ROGUE_CREATE_OBJECT(TokenList)) )));
  return (RogueClassPreprocessorTokenReader*)(THIS);
}

RogueString* RogueCmdWhichCaseArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[626]);
}

RogueString* RogueCmdSwitch__type_name( RogueClassCmdSwitch* THIS )
{
  return (RogueString*)(Rogue_literal_strings[852]);
}

RogueClassCmdSwitch* RogueCmdSwitch__clone__CloneArgs( RogueClassCmdSwitch* THIS, RogueClassCloneArgs* clone_args_0 )
{
  RogueClassCmdSwitch* result_1 = (((RogueCmdSwitch__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Integer( ((RogueClassCmdSwitch*)ROGUE_CREATE_OBJECT(CmdSwitch)), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->expression), clone_args_0 )), ((RogueCmdWhichCaseList*)(NULL)), ((RogueClassCmdWhichCase*)(NULL)), 5 ))));
  call_ROGUEM170( 30, (RogueClassCmdControlStructure*)(result_1), ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->cloned_command = ((RogueClassCmdControlStructure*)(result_1));
  RogueCmdWhichCaseList* cloned_cases_2 = (((RogueCmdWhichCaseList__init__Integer( ((RogueCmdWhichCaseList*)ROGUE_CREATE_OBJECT(CmdWhichCaseList)), THIS->cases->count ))));
  {
    RogueCmdWhichCaseList* _auto_1243_3 = (THIS->cases);
    RogueInteger _auto_1244_4 = (0);
    for (;_auto_1244_4 < _auto_1243_3->count;++_auto_1244_4)
    {
      RogueClassCmdWhichCase* c_5 = (((RogueClassCmdWhichCase*)(_auto_1243_3->data->objects[_auto_1244_4])));
      RogueCmdWhichCaseList__add__CmdWhichCase( cloned_cases_2, ((RogueCmdWhichCase__clone__CloneArgs( c_5, clone_args_0 ))) );
    }
  }
  result_1->cases = cloned_cases_2;
  if (!!(THIS->case_others))
  {
    result_1->case_others = ((RogueCmdWhichCase__clone__CloneArgs( THIS->case_others, clone_args_0 )));
  }
  return (RogueClassCmdSwitch*)(result_1);
}

RogueClassCmd* RogueCmdSwitch__resolve__Scope( RogueClassCmdSwitch* THIS, RogueClassScope* scope_0 )
{
  RogueCmdControlStructureList__add__CmdControlStructure( scope_0->control_stack, ((RogueClassCmdControlStructure*)(THIS)) );
  THIS->expression = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->expression), scope_0 ));
  {
    RogueCmdWhichCaseList* _auto_1245_1 = (THIS->cases);
    RogueInteger _auto_1246_2 = (0);
    for (;_auto_1246_2 < _auto_1245_1->count;++_auto_1246_2)
    {
      RogueClassCmdWhichCase* c_3 = (((RogueClassCmdWhichCase*)(_auto_1245_1->data->objects[_auto_1246_2])));
      RogueCmdArgs__resolve__Scope( c_3->conditions, scope_0 );
      RogueCmdStatementList__resolve__Scope( c_3->statements, scope_0 );
    }
  }
  if (!!(THIS->case_others))
  {
    RogueCmdArgs__resolve__Scope( THIS->case_others->conditions, scope_0 );
    RogueCmdStatementList__resolve__Scope( THIS->case_others->statements, scope_0 );
  }
  RogueCmdControlStructureList__remove_last( scope_0->control_stack );
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdSwitch__trace_used_code( RogueClassCmdSwitch* THIS )
{
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->expression) );
  {
    RogueCmdWhichCaseList* _auto_1247_0 = (THIS->cases);
    RogueInteger _auto_1248_1 = (0);
    for (;_auto_1248_1 < _auto_1247_0->count;++_auto_1248_1)
    {
      RogueClassCmdWhichCase* c_2 = (((RogueClassCmdWhichCase*)(_auto_1247_0->data->objects[_auto_1248_1])));
      RogueCmdWhichCase__trace_used_code( c_2 );
    }
  }
  if (!!(THIS->case_others))
  {
    RogueCmdWhichCase__trace_used_code( THIS->case_others );
  }
}

void RogueCmdSwitch__write_cpp__CPPWriter_Logical( RogueClassCmdSwitch* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[817] );
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->expression), writer_0, false );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[100] );
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[174] );
  writer_0->indent += 2;
  {
    RogueCmdWhichCaseList* _auto_1249_2 = (THIS->cases);
    RogueInteger _auto_1250_3 = (0);
    for (;_auto_1250_3 < _auto_1249_2->count;++_auto_1250_3)
    {
      RogueClassCmdWhichCase* c_4 = (((RogueClassCmdWhichCase*)(_auto_1249_2->data->objects[_auto_1250_3])));
      {
        RogueClassCmdArgs* _auto_1251_5 = (c_4->conditions);
        RogueInteger _auto_1252_6 = (0);
        for (;_auto_1252_6 < _auto_1251_5->count;++_auto_1252_6)
        {
          RogueClassCmd* condition_7 = (((RogueClassCmd*)(_auto_1251_5->data->objects[_auto_1252_6])));
          RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[508] );
          call_ROGUEM52( 28, (RogueClassCmd*)(condition_7), writer_0, false );
          RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[155] );
        }
      }
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[174] );
      writer_0->indent += 2;
      RogueCmdStatementList__write_cpp__CPPWriter_Logical( c_4->statements, writer_0, false );
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[818] );
      writer_0->indent -= 2;
      RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[97] );
    }
  }
  if (!!(THIS->case_others))
  {
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[512] );
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[174] );
    writer_0->indent += 2;
    RogueCmdStatementList__write_cpp__CPPWriter_Logical( THIS->case_others->statements, writer_0, false );
    writer_0->indent -= 2;
    RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[97] );
  }
  writer_0->indent -= 2;
  RogueCPPWriter__println__String( writer_0, Rogue_literal_strings[97] );
}

RogueClassCmdSwitch* RogueCmdSwitch__init_object( RogueClassCmdSwitch* THIS )
{
  return (RogueClassCmdSwitch*)(THIS);
}

RogueClassCmdSwitch* RogueCmdSwitch__init__Token_Cmd_CmdWhichCaseList_CmdWhichCase_Integer( RogueClassCmdSwitch* THIS, RogueClassToken* _auto_1053_0, RogueClassCmd* _auto_1054_1, RogueCmdWhichCaseList* _auto_1055_2, RogueClassCmdWhichCase* _auto_1056_3, RogueInteger _auto_1057_4 )
{
  THIS->_control_type = _auto_1057_4;
  THIS->case_others = _auto_1056_3;
  THIS->cases = _auto_1055_2;
  THIS->expression = _auto_1054_1;
  THIS->t = _auto_1053_0;
  return (RogueClassCmdSwitch*)(THIS);
}

RogueString* RogueCmdCatchArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[627]);
}

RogueString* RogueCmdReadArrayElement__type_name( RogueClassCmdReadArrayElement* THIS )
{
  return (RogueString*)(Rogue_literal_strings[965]);
}

RogueClassCmd* RogueCmdReadArrayElement__clone__CloneArgs( RogueClassCmdReadArrayElement* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdReadArrayElement__init__Token_Cmd_Cmd( ((RogueClassCmdReadArrayElement*)ROGUE_CREATE_OBJECT(CmdReadArrayElement)), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->context), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->index), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdReadArrayElement__resolve__Scope( RogueClassCmdReadArrayElement* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->_array_type))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  THIS->context = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->context), scope_0 ));
  THIS->_array_type = ((Rogue_Cmd__require_type( THIS->context )));
  THIS->index = ((RogueCmd__require_integer( (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->index), scope_0 )) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

RogueClassCmd* RogueCmdReadArrayElement__resolve_modify__Scope_Integer( RogueClassCmdReadArrayElement* THIS, RogueClassScope* scope_0, RogueInteger delta_1 )
{
  return (RogueClassCmd*)(((RogueCmdWriteArrayElement__resolve__Scope( ((RogueCmdWriteArrayElement__init__Token_Cmd_Cmd_Cmd( ((RogueClassCmdWriteArrayElement*)ROGUE_CREATE_OBJECT(CmdWriteArrayElement)), THIS->t, THIS->context, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->index), ((RogueClassCloneArgs*)(NULL)) )), ((RogueClassCmd*)(((RogueCmdBinary__init__Token_Cmd_Cmd( ((RogueClassCmdBinary*)((RogueClassCmdAdd*)ROGUE_CREATE_OBJECT(CmdAdd))), THIS->t, ((RogueClassCmd*)(THIS)), ((RogueClassCmd*)(((RogueCmdLiteralInteger__init__Token_Integer( ((RogueClassCmdLiteralInteger*)ROGUE_CREATE_OBJECT(CmdLiteralInteger)), THIS->t, delta_1 ))))) ))))) ))), scope_0 ))));
}

void RogueCmdReadArrayElement__trace_used_code( RogueClassCmdReadArrayElement* THIS )
{
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->context) );
  RogueType__trace_used_code( THIS->_array_type );
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->index) );
}

RogueClassType* Rogue_CmdReadArrayElement__type( RogueClassCmdReadArrayElement* THIS )
{
  return (RogueClassType*)(THIS->_array_type->_element_type);
}

void RogueCmdReadArrayElement__write_cpp__CPPWriter_Logical( RogueClassCmdReadArrayElement* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueClassType* element_type_2 = (THIS->_array_type->_element_type);
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_open_cast__Type_Type( writer_0, element_type_2, element_type_2 );
  }
  if (((RogueType__is_reference( element_type_2 ))))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[451] );
    RogueCPPWriter__print__Type( writer_0, element_type_2 );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[775] );
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[819] );
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[820] );
  }
  else if (((RogueType__is_primitive( element_type_2 ))))
  {
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[150] );
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[821] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Float)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[822] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Long)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[823] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[824] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[825] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[826] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[827] );
      }
      else
      {
        throw ((RogueToken__error__String( THIS->t, Rogue_literal_strings[828] )));
      }
    }
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[98] );
  }
  else
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[451] ))), element_type_2 ))), Rogue_literal_strings[829] );
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[830] );
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[98] );
  }
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_close_cast__Type_Type( writer_0, element_type_2, element_type_2 );
  }
}

RogueClassCmdReadArrayElement* RogueCmdReadArrayElement__init_object( RogueClassCmdReadArrayElement* THIS )
{
  return (RogueClassCmdReadArrayElement*)(THIS);
}

RogueClassCmdReadArrayElement* RogueCmdReadArrayElement__init__Token_Cmd_Cmd( RogueClassCmdReadArrayElement* THIS, RogueClassToken* _auto_1102_0, RogueClassCmd* _auto_1103_1, RogueClassCmd* _auto_1104_2 )
{
  THIS->index = _auto_1104_2;
  THIS->context = _auto_1103_1;
  THIS->t = _auto_1102_0;
  return (RogueClassCmdReadArrayElement*)(THIS);
}

RogueString* RogueCmdWriteArrayElement__type_name( RogueClassCmdWriteArrayElement* THIS )
{
  return (RogueString*)(Rogue_literal_strings[966]);
}

RogueClassCmd* RogueCmdWriteArrayElement__clone__CloneArgs( RogueClassCmdWriteArrayElement* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdWriteArrayElement__init__Token_Cmd_Cmd_Cmd( ((RogueClassCmdWriteArrayElement*)ROGUE_CREATE_OBJECT(CmdWriteArrayElement)), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->context), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->index), clone_args_0 )), (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->new_value), clone_args_0 )) ))))));
}

RogueClassCmd* RogueCmdWriteArrayElement__resolve__Scope( RogueClassCmdWriteArrayElement* THIS, RogueClassScope* scope_0 )
{
  if (!!(THIS->_array_type))
  {
    return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
  }
  THIS->context = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->context), scope_0 ));
  THIS->_array_type = ((Rogue_Cmd__require_type( THIS->context )));
  THIS->index = ((RogueCmd__require_integer( (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->index), scope_0 )) )));
  THIS->new_value = (call_ROGUEM42( 22, (RogueClassCmd*)((call_ROGUEM43( 4, (RogueClassCmd*)(((RogueCmd__require_value( (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->new_value), scope_0 )) )))), THIS->_array_type->_element_type ))), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdWriteArrayElement__trace_used_code( RogueClassCmdWriteArrayElement* THIS )
{
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->context) );
  RogueType__trace_used_code( THIS->_array_type );
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->new_value) );
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->index) );
}

RogueClassType* Rogue_CmdWriteArrayElement__type( RogueClassCmdWriteArrayElement* THIS )
{
  return (RogueClassType*)(THIS->_array_type->_element_type);
}

void RogueCmdWriteArrayElement__write_cpp__CPPWriter_Logical( RogueClassCmdWriteArrayElement* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueClassType* element_type_2 = (THIS->_array_type->_element_type);
  if (((RogueType__is_primitive( element_type_2 ))))
  {
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[150] );
    {
      if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Real)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[821] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Float)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[822] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Long)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[823] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Integer)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[824] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Character)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[825] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Byte)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[826] );
      }
      else if (((RogueObject__operatorEQUALSEQUALS__Object( ((RogueObject*)element_type_2), ((RogueObject*)(((RogueClassProgram*)ROGUE_SINGLETON(Program))->type_Logical)) ))))
      {
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[827] );
      }
    }
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[831] );
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->new_value), writer_0, false );
  }
  else if (((RogueType__is_reference( element_type_2 ))))
  {
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[150] );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[832] );
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[831] );
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->new_value), writer_0, false );
  }
  else
  {
    RogueCPPWriter__print__String( ((RogueCPPWriter__print__Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[451] ))), element_type_2 ))), Rogue_literal_strings[829] );
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->context), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[830] );
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->index), writer_0, false );
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[831] );
    call_ROGUEM52( 28, (RogueClassCmd*)(THIS->new_value), writer_0, false );
  }
}

RogueClassCmdWriteArrayElement* RogueCmdWriteArrayElement__init_object( RogueClassCmdWriteArrayElement* THIS )
{
  return (RogueClassCmdWriteArrayElement*)(THIS);
}

RogueClassCmdWriteArrayElement* RogueCmdWriteArrayElement__init__Token_Cmd_Cmd_Cmd( RogueClassCmdWriteArrayElement* THIS, RogueClassToken* _auto_1105_0, RogueClassCmd* _auto_1106_1, RogueClassCmd* _auto_1107_2, RogueClassCmd* _auto_1108_3 )
{
  THIS->new_value = _auto_1108_3;
  THIS->index = _auto_1107_2;
  THIS->context = _auto_1106_1;
  THIS->t = _auto_1105_0;
  return (RogueClassCmdWriteArrayElement*)(THIS);
}

RogueString* RogueCmdConvertToPrimitiveType__type_name( RogueClassCmdConvertToPrimitiveType* THIS )
{
  return (RogueString*)(Rogue_literal_strings[920]);
}

RogueClassCmd* RogueCmdConvertToPrimitiveType__clone__CloneArgs( RogueClassCmdConvertToPrimitiveType* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdTypeOperator__init__Token_Cmd_Type( ((RogueClassCmdTypeOperator*)((RogueClassCmdConvertToPrimitiveType*)ROGUE_CREATE_OBJECT(CmdConvertToPrimitiveType))), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->operand), clone_args_0 )), THIS->_target_type ))))));
}

RogueClassCmd* RogueCmdConvertToPrimitiveType__resolve__Scope( RogueClassCmdConvertToPrimitiveType* THIS, RogueClassScope* scope_0 )
{
  THIS->operand = ((RogueCmd__require_value( (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->operand), scope_0 )) )));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdConvertToPrimitiveType__write_cpp__CPPWriter_Logical( RogueClassCmdConvertToPrimitiveType* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[451] ))), THIS->_target_type->cpp_class_name ))), Rogue_literal_strings[775] );
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->operand), writer_0, false );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[786] );
}

RogueClassCmdConvertToPrimitiveType* RogueCmdConvertToPrimitiveType__init_object( RogueClassCmdConvertToPrimitiveType* THIS )
{
  return (RogueClassCmdConvertToPrimitiveType*)(THIS);
}

RogueString* RogueFnParamArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[628]);
}

RogueString* RogueFnArgArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[629]);
}

RogueString* RogueCmdAdjustProperty__type_name( RogueClassCmdAdjustProperty* THIS )
{
  return (RogueString*)(Rogue_literal_strings[967]);
}

RogueClassCmd* RogueCmdAdjustProperty__clone__CloneArgs( RogueClassCmdAdjustProperty* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdAdjustProperty__init__Token_Cmd_Property_Integer( ((RogueClassCmdAdjustProperty*)ROGUE_CREATE_OBJECT(CmdAdjustProperty)), THIS->t, (call_ROGUEM44( 5, (RogueClassCmd*)(THIS->context), clone_args_0 )), THIS->property_info, THIS->delta ))))));
}

RogueClassCmd* RogueCmdAdjustProperty__resolve__Scope( RogueClassCmdAdjustProperty* THIS, RogueClassScope* scope_0 )
{
  THIS->context = (call_ROGUEM42( 22, (RogueClassCmd*)(THIS->context), scope_0 ));
  return (RogueClassCmd*)(((RogueClassCmd*)(THIS)));
}

void RogueCmdAdjustProperty__trace_used_code( RogueClassCmdAdjustProperty* THIS )
{
  call_ROGUEM48( 26, (RogueClassCmd*)(THIS->context) );
  RogueType__trace_used_code( THIS->property_info->type_context );
  RogueType__trace_used_code( THIS->property_info->_type );
}

RogueClassType* Rogue_CmdAdjustProperty__type( RogueClassCmdAdjustProperty* THIS )
{
  return (RogueClassType*)(((RogueClassType*)(NULL)));
}

void RogueCmdAdjustProperty__write_cpp__CPPWriter_Logical( RogueClassCmdAdjustProperty* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (THIS->delta > 0)
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[182] );
  }
  else
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[4] );
  }
  call_ROGUEM52( 28, (RogueClassCmd*)(THIS->context), writer_0, false );
  RogueCPPWriter__print_access_operator__Type( writer_0, (call_ROGUEM46( 27, (RogueClassCmd*)(THIS->context) )) );
  RogueCPPWriter__print__String( writer_0, THIS->property_info->cpp_name );
}

RogueClassCmdAdjustProperty* RogueCmdAdjustProperty__init_object( RogueClassCmdAdjustProperty* THIS )
{
  return (RogueClassCmdAdjustProperty*)(THIS);
}

RogueClassCmdAdjustProperty* RogueCmdAdjustProperty__init__Token_Cmd_Property_Integer( RogueClassCmdAdjustProperty* THIS, RogueClassToken* _auto_1186_0, RogueClassCmd* _auto_1187_1, RogueClassProperty* _auto_1188_2, RogueInteger _auto_1189_3 )
{
  THIS->delta = _auto_1189_3;
  THIS->property_info = _auto_1188_2;
  THIS->context = _auto_1187_1;
  THIS->t = _auto_1186_0;
  return (RogueClassCmdAdjustProperty*)(THIS);
}

RogueString* RogueCmdCallStaticMethod__type_name( RogueClassCmdCallStaticMethod* THIS )
{
  return (RogueString*)(Rogue_literal_strings[987]);
}

RogueClassCmd* RogueCmdCallStaticMethod__clone__CloneArgs( RogueClassCmdCallStaticMethod* THIS, RogueClassCloneArgs* clone_args_0 )
{
  return (RogueClassCmd*)(((RogueClassCmd*)(((RogueCmdCall__init__Token_Cmd_Method_CmdArgs( ((RogueClassCmdCall*)((RogueClassCmdCallStaticMethod*)ROGUE_CREATE_OBJECT(CmdCallStaticMethod))), THIS->t, ((RogueCmd__clone__Cmd_CloneArgs( ((RogueClassCmd*)THIS), THIS->context, clone_args_0 ))), THIS->method_info, ((RogueCmdArgs__clone__CloneArgs( THIS->args, clone_args_0 ))) ))))));
}

RogueClassCmd* RogueCmdCallStaticMethod__resolve__Scope( RogueClassCmdCallStaticMethod* THIS, RogueClassScope* scope_0 )
{
  if (!(!!(THIS->context)))
  {
    THIS->context = ((RogueClassCmd*)(((RogueCmdThisContext__init__Token_Type( ((RogueClassCmdThisContext*)ROGUE_CREATE_OBJECT(CmdThisContext)), THIS->t, THIS->method_info->type_context )))));
  }
  return (RogueClassCmd*)((RogueCmdCall__resolve__Scope( ((RogueClassCmdCall*)THIS), scope_0 )));
}

void RogueCmdCallStaticMethod__write_cpp__CPPWriter_Logical( RogueClassCmdCallStaticMethod* THIS, RogueClassCPPWriter* writer_0, RogueLogical is_statement_1 )
{
  if (!(is_statement_1))
  {
    RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[176] ))), THIS->method_info->_return_type, THIS->method_info->_return_type );
  }
  RogueCPPWriter__print__String( writer_0, THIS->method_info->cpp_name );
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[408] );
  RogueCPPWriter__print_cast__Type_Type_Cmd( writer_0, (call_ROGUEM46( 27, (RogueClassCmd*)(THIS->context) )), THIS->method_info->type_context, THIS->context );
  RogueInteger i_2 = (0);
  {
    RogueClassCmdArgs* _auto_1253_4 = (THIS->args);
    RogueInteger _auto_1254_5 = (0);
    for (;_auto_1254_5 < _auto_1253_4->count;++_auto_1254_5)
    {
      RogueClassCmd* arg_6 = (((RogueClassCmd*)(_auto_1253_4->data->objects[_auto_1254_5])));
      RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[405] );
      RogueClassType* param_type_3 = (((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type);
      if (((RogueType__is_aspect( param_type_3 ))))
      {
        RogueCPPWriter__print_cast__Type_Type( ((RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[176] ))), (call_ROGUEM46( 27, (RogueClassCmd*)(arg_6) )), ((RogueClassLocal*)(THIS->method_info->parameters->data->objects[i_2]))->_type );
        call_ROGUEM52( 28, (RogueClassCmd*)(arg_6), writer_0, false );
        RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] );
      }
      else
      {
        call_ROGUEM52( 28, (RogueClassCmd*)(arg_6), writer_0, false );
      }
      ++i_2;
    }
  }
  RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[448] );
  if (!(is_statement_1))
  {
    RogueCPPWriter__print__String( writer_0, Rogue_literal_strings[100] );
  }
}

RogueClassCmdCallStaticMethod* RogueCmdCallStaticMethod__init_object( RogueClassCmdCallStaticMethod* THIS )
{
  return (RogueClassCmdCallStaticMethod*)(THIS);
}

RogueString* RogueString_TokenListTableEntryList__to_String( RogueTableEntry_of_String_TokenListList* THIS )
{
  RogueStringBuilder* buffer_0 = (((RogueStringBuilder__init( ((RogueStringBuilder*)ROGUE_CREATE_OBJECT(StringBuilder)) ))));
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)'[' );
  RogueLogical first_1 = (true);
  {
    RogueTableEntry_of_String_TokenListList* _auto_1255_2 = (THIS);
    RogueInteger _auto_1256_3 = (0);
    for (;_auto_1256_3 < _auto_1255_2->count;++_auto_1256_3)
    {
      RogueClassString_TokenListTableEntry* value_4 = (((RogueClassString_TokenListTableEntry*)(_auto_1255_2->data->objects[_auto_1256_3])));
      if (first_1)
      {
        first_1 = ((RogueLogical)false);
      }
      else
      {
        RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)',' );
      }
      if (value_4 == NULL)
      {
        RogueStringBuilder__print__String( buffer_0, Rogue_literal_strings[2] );
      }
      else
      {
        RogueStringBuilder__print__String( buffer_0, (call_ROGUEM2( 1, (RogueObject*)(value_4) )) );
      }
    }
  }
  RogueStringBuilder__print__Character( buffer_0, (RogueCharacter)']' );
  return (RogueString*)(((RogueStringBuilder__to_String( buffer_0 ))));
}

RogueString* RogueString_TokenListTableEntryList__type_name( RogueTableEntry_of_String_TokenListList* THIS )
{
  return (RogueString*)(Rogue_literal_strings[954]);
}

RogueTableEntry_of_String_TokenListList* RogueString_TokenListTableEntryList__init_object( RogueTableEntry_of_String_TokenListList* THIS )
{
  return (RogueTableEntry_of_String_TokenListList*)(THIS);
}

RogueTableEntry_of_String_TokenListList* RogueString_TokenListTableEntryList__init__Integer_String_TokenListTableEntry( RogueTableEntry_of_String_TokenListList* THIS, RogueInteger initial_capacity_0, RogueClassString_TokenListTableEntry* initial_value_1 )
{
  THIS->data = RogueArray::create( initial_capacity_0, sizeof(RogueClassString_TokenListTableEntry*), true );
  {
    RogueInteger i_2 = (1);
    RogueInteger _auto_1237_3 = (initial_capacity_0);
    for (;i_2 <= _auto_1237_3;++i_2)
    {
      RogueString_TokenListTableEntryList__add__String_TokenListTableEntry( THIS, initial_value_1 );
    }
  }
  return (RogueTableEntry_of_String_TokenListList*)(THIS);
}

RogueTableEntry_of_String_TokenListList* RogueString_TokenListTableEntryList__add__String_TokenListTableEntry( RogueTableEntry_of_String_TokenListList* THIS, RogueClassString_TokenListTableEntry* value_0 )
{
  ((RogueString_TokenListTableEntryList__reserve__Integer( THIS, 1 )))->data->objects[THIS->count] = value_0;
  ++THIS->count;
  return (RogueTableEntry_of_String_TokenListList*)(THIS);
}

RogueInteger RogueString_TokenListTableEntryList__capacity( RogueTableEntry_of_String_TokenListList* THIS )
{
  if (!(!!(THIS->data)))
  {
    return (RogueInteger)(0);
  }
  return (RogueInteger)(THIS->data->count);
}

RogueTableEntry_of_String_TokenListList* RogueString_TokenListTableEntryList__reserve__Integer( RogueTableEntry_of_String_TokenListList* THIS, RogueInteger additional_count_0 )
{
  RogueInteger required_capacity_1 = ((THIS->count + additional_count_0));
  if (!(!!(THIS->data)))
  {
    THIS->data = RogueArray::create( 10, sizeof(RogueClassString_TokenListTableEntry*), true );
  }
  else if (required_capacity_1 > THIS->data->count)
  {
    RogueInteger x2_2 = ((((RogueString_TokenListTableEntryList__capacity( THIS ))) + ((RogueString_TokenListTableEntryList__capacity( THIS )))));
    if (required_capacity_1 < x2_2)
    {
      required_capacity_1 = ((RogueInteger)x2_2);
    }
    RogueArray* new_data_3 = (RogueArray::create( required_capacity_1, sizeof(RogueClassString_TokenListTableEntry*), true ));
    new_data_3->set(0,((RogueArray*)(THIS->data)),0,-1);
    THIS->data = new_data_3;
  }
  return (RogueTableEntry_of_String_TokenListList*)(THIS);
}

RogueString* RogueString_TokenListTableEntry__type_name( RogueClassString_TokenListTableEntry* THIS )
{
  return (RogueString*)(Rogue_literal_strings[596]);
}

RogueClassString_TokenListTableEntry* RogueString_TokenListTableEntry__init__String_TokenList_Integer( RogueClassString_TokenListTableEntry* THIS, RogueString* _key_0, RogueTokenList* _value_1, RogueInteger _hash_2 )
{
  THIS->key = _key_0;
  THIS->value = _value_1;
  THIS->hash = _hash_2;
  return (RogueClassString_TokenListTableEntry*)(THIS);
}

RogueClassString_TokenListTableEntry* RogueString_TokenListTableEntry__init_object( RogueClassString_TokenListTableEntry* THIS )
{
  return (RogueClassString_TokenListTableEntry*)(THIS);
}

RogueString* RogueString_TokenListTableEntryArray__type_name( RogueArray* THIS )
{
  return (RogueString*)(Rogue_literal_strings[630]);
}


RogueProgram::RogueProgram(){
}

RogueProgram::~RogueProgram()
{
}

void RogueProgram::configure()
{
  Rogue_configure_types();

  RogueTypeReal = &Rogue_types[ 0 ];
  RogueTypeLong = &Rogue_types[ 1 ];
  RogueTypeInteger = &Rogue_types[ 2 ];
  RogueTypeString = &Rogue_types[ 3 ];
  RogueTypeCharacterList = &Rogue_types[ 4 ];
  RogueTypeCharacter = &Rogue_types[ 5 ];
  RogueTypeGenericList = &Rogue_types[ 6 ];
  RogueTypeObject = &Rogue_types[ 7 ];
  RogueTypeStringBuilder = &Rogue_types[ 8 ];
  RogueTypeOptionalInteger = &Rogue_types[ 9 ];
  RogueTypeLogical = &Rogue_types[ 10 ];
  RogueTypeStringList = &Rogue_types[ 11 ];
  RogueTypeArray = &Rogue_types[ 13 ];
  RogueTypeByte = &Rogue_types[ 14 ];
  RogueTypeStringReader = &Rogue_types[ 15 ];
  RogueTypeCharacterReader = &Rogue_types[ 16 ];
  RogueTypeGlobal = &Rogue_types[ 17 ];
  RogueTypeConsole = &Rogue_types[ 18 ];
  RogueTypeRogueC = &Rogue_types[ 19 ];
  RogueTypeError = &Rogue_types[ 20 ];
  RogueTypeProgram = &Rogue_types[ 21 ];
  RogueTypeTemplateList = &Rogue_types[ 22 ];
  RogueTypeTemplate = &Rogue_types[ 23 ];
  RogueTypeString_TemplateTable = &Rogue_types[ 24 ];
  RogueTypeString_AugmentListTable = &Rogue_types[ 25 ];
  RogueTypeRequisiteItemList = &Rogue_types[ 26 ];
  RogueTypeRequisiteItem = &Rogue_types[ 27 ];
  RogueTypeMethod = &Rogue_types[ 28 ];
  RogueTypeString_MethodListTable = &Rogue_types[ 29 ];
  RogueTypeTypeList = &Rogue_types[ 30 ];
  RogueTypeType = &Rogue_types[ 31 ];
  RogueTypeString_TypeTable = &Rogue_types[ 32 ];
  RogueTypeString_IntegerTable = &Rogue_types[ 33 ];
  RogueTypeToken = &Rogue_types[ 34 ];
  RogueTypeAttributes = &Rogue_types[ 36 ];
  RogueTypeCmd = &Rogue_types[ 37 ];
  RogueTypeCmdReturn = &Rogue_types[ 38 ];
  RogueTypeCmdStatement = &Rogue_types[ 39 ];
  RogueTypeCmdStatementList = &Rogue_types[ 40 ];
  RogueTypeCmdList = &Rogue_types[ 41 ];
  RogueTypeTokenType = &Rogue_types[ 42 ];
  RogueTypeCmdLabel = &Rogue_types[ 43 ];
  RogueTypeRogueError = &Rogue_types[ 45 ];
  RogueTypeMethodList = &Rogue_types[ 47 ];
  RogueTypeCPPWriter = &Rogue_types[ 49 ];
  RogueTypePropertyList = &Rogue_types[ 50 ];
  RogueTypeProperty = &Rogue_types[ 51 ];
  RogueTypeString_MethodTable = &Rogue_types[ 53 ];
  RogueTypeLocalList = &Rogue_types[ 54 ];
  RogueTypeLocal = &Rogue_types[ 55 ];
  RogueTypeIntegerList = &Rogue_types[ 57 ];
  RogueTypeByteList = &Rogue_types[ 59 ];
  RogueTypeMath = &Rogue_types[ 60 ];
  RogueTypeSystem = &Rogue_types[ 63 ];
  RogueTypeString_LogicalTable = &Rogue_types[ 64 ];
  RogueTypeFile = &Rogue_types[ 65 ];
  RogueTypeParser = &Rogue_types[ 66 ];
  RogueTypeTokenList = &Rogue_types[ 67 ];
  RogueTypeLineReader = &Rogue_types[ 68 ];
  RogueTypeReader_of_String = &Rogue_types[ 69 ];
  RogueTypeTypeParameterList = &Rogue_types[ 70 ];
  RogueTypeTypeParameter = &Rogue_types[ 71 ];
  RogueTypeAugmentList = &Rogue_types[ 72 ];
  RogueTypeAugment = &Rogue_types[ 73 ];
  RogueTypeString_TokenTypeTable = &Rogue_types[ 75 ];
  RogueTypeLiteralCharacterToken = &Rogue_types[ 76 ];
  RogueTypeLiteralLongToken = &Rogue_types[ 77 ];
  RogueTypeLiteralIntegerToken = &Rogue_types[ 78 ];
  RogueTypeLiteralRealToken = &Rogue_types[ 79 ];
  RogueTypeLiteralStringToken = &Rogue_types[ 80 ];
  RogueTypeString_TypeSpecializerTable = &Rogue_types[ 82 ];
  RogueTypeTypeSpecializer = &Rogue_types[ 84 ];
  RogueTypeTableEntry_of_String_TemplateList = &Rogue_types[ 85 ];
  RogueTypeString_TemplateTableEntry = &Rogue_types[ 86 ];
  RogueTypeTableEntry_of_String_AugmentListList = &Rogue_types[ 88 ];
  RogueTypeString_AugmentListTableEntry = &Rogue_types[ 89 ];
  RogueTypeCmdLabelList = &Rogue_types[ 91 ];
  RogueTypeString_CmdLabelTable = &Rogue_types[ 92 ];
  RogueTypeCloneArgs = &Rogue_types[ 93 ];
  RogueTypeCloneMethodArgs = &Rogue_types[ 94 ];
  RogueTypeCmdAccess = &Rogue_types[ 95 ];
  RogueTypeCmdArgs = &Rogue_types[ 96 ];
  RogueTypeCmdAssign = &Rogue_types[ 97 ];
  RogueTypeScope = &Rogue_types[ 98 ];
  RogueTypeCmdControlStructureList = &Rogue_types[ 99 ];
  RogueTypeCmdControlStructure = &Rogue_types[ 100 ];
  RogueTypeCmdLiteralThis = &Rogue_types[ 101 ];
  RogueTypeCmdThisContext = &Rogue_types[ 102 ];
  RogueTypeCmdGenericLoop = &Rogue_types[ 104 ];
  RogueTypeCmdLiteralInteger = &Rogue_types[ 105 ];
  RogueTypeCmdLiteral = &Rogue_types[ 106 ];
  RogueTypeCmdCompareNE = &Rogue_types[ 107 ];
  RogueTypeCmdComparison = &Rogue_types[ 108 ];
  RogueTypeCmdBinary = &Rogue_types[ 109 ];
  RogueTypeTaskArgs = &Rogue_types[ 110 ];
  RogueTypeCmdTaskControl = &Rogue_types[ 112 ];
  RogueTypeCmdTaskControlSection = &Rogue_types[ 113 ];
  RogueTypeTableEntry_of_String_MethodListList = &Rogue_types[ 114 ];
  RogueTypeString_MethodListTableEntry = &Rogue_types[ 115 ];
  RogueTypeString_CmdTable = &Rogue_types[ 117 ];
  RogueTypeString_PropertyTable = &Rogue_types[ 118 ];
  RogueTypeCmdLiteralNull = &Rogue_types[ 119 ];
  RogueTypeCmdCreateCompound = &Rogue_types[ 120 ];
  RogueTypeCmdLiteralLogical = &Rogue_types[ 121 ];
  RogueTypeCmdLiteralString = &Rogue_types[ 122 ];
  RogueTypeCmdWriteGlobal = &Rogue_types[ 123 ];
  RogueTypeCmdWriteProperty = &Rogue_types[ 124 ];
  RogueTypeTableEntry_of_String_TypeList = &Rogue_types[ 125 ];
  RogueTypeString_TypeTableEntry = &Rogue_types[ 126 ];
  RogueTypeTableEntry_of_String_IntegerList = &Rogue_types[ 128 ];
  RogueTypeString_IntegerTableEntry = &Rogue_types[ 129 ];
  RogueTypeCmdCastToType = &Rogue_types[ 131 ];
  RogueTypeCmdTypeOperator = &Rogue_types[ 132 ];
  RogueTypeCmdLogicalize = &Rogue_types[ 133 ];
  RogueTypeCmdUnary = &Rogue_types[ 134 ];
  RogueTypeCmdCreateOptionalValue = &Rogue_types[ 135 ];
  RogueTypeTableEntry_of_String_MethodList = &Rogue_types[ 136 ];
  RogueTypeString_MethodTableEntry = &Rogue_types[ 137 ];
  RogueTypeTableEntry_of_String_LogicalList = &Rogue_types[ 139 ];
  RogueTypeString_LogicalTableEntry = &Rogue_types[ 140 ];
  RogueTypeFileReader = &Rogue_types[ 142 ];
  RogueTypeFileWriter = &Rogue_types[ 143 ];
  RogueTypeTokenReader = &Rogue_types[ 144 ];
  RogueTypeTokenizer = &Rogue_types[ 145 ];
  RogueTypeParseReader = &Rogue_types[ 146 ];
  RogueTypePreprocessor = &Rogue_types[ 147 ];
  RogueTypeCmdAdd = &Rogue_types[ 148 ];
  RogueTypeCmdIf = &Rogue_types[ 149 ];
  RogueTypeCmdWhich = &Rogue_types[ 150 ];
  RogueTypeCmdContingent = &Rogue_types[ 151 ];
  RogueTypeCmdTry = &Rogue_types[ 152 ];
  RogueTypeCmdAwait = &Rogue_types[ 153 ];
  RogueTypeCmdYield = &Rogue_types[ 154 ];
  RogueTypeCmdThrow = &Rogue_types[ 155 ];
  RogueTypeCmdTrace = &Rogue_types[ 156 ];
  RogueTypeCmdEscape = &Rogue_types[ 157 ];
  RogueTypeCmdNextIteration = &Rogue_types[ 158 ];
  RogueTypeCmdNecessary = &Rogue_types[ 159 ];
  RogueTypeCmdSufficient = &Rogue_types[ 160 ];
  RogueTypeCmdAdjust = &Rogue_types[ 161 ];
  RogueTypeCmdOpWithAssign = &Rogue_types[ 162 ];
  RogueTypeCmdWhichCaseList = &Rogue_types[ 163 ];
  RogueTypeCmdWhichCase = &Rogue_types[ 164 ];
  RogueTypeCmdCatchList = &Rogue_types[ 165 ];
  RogueTypeCmdCatch = &Rogue_types[ 166 ];
  RogueTypeCmdLocalDeclaration = &Rogue_types[ 167 ];
  RogueTypeCmdAdjustLocal = &Rogue_types[ 168 ];
  RogueTypeCmdReadLocal = &Rogue_types[ 169 ];
  RogueTypeCmdCompareLE = &Rogue_types[ 170 ];
  RogueTypeCmdRange = &Rogue_types[ 171 ];
  RogueTypeCmdLocalOpWithAssign = &Rogue_types[ 172 ];
  RogueTypeCmdResolvedOpWithAssign = &Rogue_types[ 173 ];
  RogueTypeCmdForEach = &Rogue_types[ 174 ];
  RogueTypeCmdRangeUpTo = &Rogue_types[ 175 ];
  RogueTypeCmdLogicalXor = &Rogue_types[ 176 ];
  RogueTypeCmdBinaryLogical = &Rogue_types[ 177 ];
  RogueTypeCmdLogicalOr = &Rogue_types[ 178 ];
  RogueTypeCmdLogicalAnd = &Rogue_types[ 179 ];
  RogueTypeCmdCompareEQ = &Rogue_types[ 180 ];
  RogueTypeCmdCompareIs = &Rogue_types[ 181 ];
  RogueTypeCmdCompareIsNot = &Rogue_types[ 182 ];
  RogueTypeCmdCompareLT = &Rogue_types[ 183 ];
  RogueTypeCmdCompareGT = &Rogue_types[ 184 ];
  RogueTypeCmdCompareGE = &Rogue_types[ 185 ];
  RogueTypeCmdInstanceOf = &Rogue_types[ 186 ];
  RogueTypeCmdLogicalNot = &Rogue_types[ 187 ];
  RogueTypeCmdBitwiseXor = &Rogue_types[ 188 ];
  RogueTypeCmdBitwiseOp = &Rogue_types[ 189 ];
  RogueTypeCmdBitwiseOr = &Rogue_types[ 190 ];
  RogueTypeCmdBitwiseAnd = &Rogue_types[ 191 ];
  RogueTypeCmdBitwiseShiftLeft = &Rogue_types[ 192 ];
  RogueTypeCmdBitwiseShiftRight = &Rogue_types[ 193 ];
  RogueTypeCmdBitwiseShiftRightX = &Rogue_types[ 194 ];
  RogueTypeCmdSubtract = &Rogue_types[ 195 ];
  RogueTypeCmdMultiply = &Rogue_types[ 196 ];
  RogueTypeCmdDivide = &Rogue_types[ 197 ];
  RogueTypeCmdMod = &Rogue_types[ 198 ];
  RogueTypeCmdPower = &Rogue_types[ 199 ];
  RogueTypeCmdNegate = &Rogue_types[ 200 ];
  RogueTypeCmdBitwiseNot = &Rogue_types[ 201 ];
  RogueTypeCmdGetOptionalValue = &Rogue_types[ 202 ];
  RogueTypeCmdElementAccess = &Rogue_types[ 203 ];
  RogueTypeCmdConvertToType = &Rogue_types[ 204 ];
  RogueTypeCmdCreateCallback = &Rogue_types[ 205 ];
  RogueTypeCmdAs = &Rogue_types[ 206 ];
  RogueTypeCmdDefaultValue = &Rogue_types[ 207 ];
  RogueTypeCmdFormattedString = &Rogue_types[ 208 ];
  RogueTypeCmdLiteralReal = &Rogue_types[ 209 ];
  RogueTypeCmdLiteralLong = &Rogue_types[ 210 ];
  RogueTypeCmdLiteralCharacter = &Rogue_types[ 211 ];
  RogueTypeCmdCreateList = &Rogue_types[ 212 ];
  RogueTypeCmdCallPriorMethod = &Rogue_types[ 213 ];
  RogueTypeFnParamList = &Rogue_types[ 214 ];
  RogueTypeFnParam = &Rogue_types[ 215 ];
  RogueTypeFnArgList = &Rogue_types[ 216 ];
  RogueTypeFnArg = &Rogue_types[ 217 ];
  RogueTypeCmdCreateFunction = &Rogue_types[ 218 ];
  RogueTypeCmdNativeCode = &Rogue_types[ 219 ];
  RogueTypeTableEntry_of_String_TokenTypeList = &Rogue_types[ 220 ];
  RogueTypeString_TokenTypeTableEntry = &Rogue_types[ 221 ];
  RogueTypeTableEntry_of_String_TypeSpecializerList = &Rogue_types[ 223 ];
  RogueTypeString_TypeSpecializerTableEntry = &Rogue_types[ 224 ];
  RogueTypeTableEntry_of_String_CmdLabelList = &Rogue_types[ 226 ];
  RogueTypeString_CmdLabelTableEntry = &Rogue_types[ 227 ];
  RogueTypeMacroArgs = &Rogue_types[ 229 ];
  RogueTypeCmdReadSingleton = &Rogue_types[ 230 ];
  RogueTypeCmdCreateArray = &Rogue_types[ 231 ];
  RogueTypeCmdCallRoutine = &Rogue_types[ 232 ];
  RogueTypeCmdCall = &Rogue_types[ 233 ];
  RogueTypeCmdCreateObject = &Rogue_types[ 234 ];
  RogueTypeCmdReadGlobal = &Rogue_types[ 235 ];
  RogueTypeCmdReadProperty = &Rogue_types[ 236 ];
  RogueTypeCmdLogicalizeOptionalValue = &Rogue_types[ 237 ];
  RogueTypeCmdWriteLocal = &Rogue_types[ 238 ];
  RogueTypeCmdOpAssignGlobal = &Rogue_types[ 239 ];
  RogueTypeCmdOpAssignProperty = &Rogue_types[ 240 ];
  RogueTypeCmdCallInlineNativeRoutine = &Rogue_types[ 241 ];
  RogueTypeCmdCallInlineNative = &Rogue_types[ 242 ];
  RogueTypeCmdCallNativeRoutine = &Rogue_types[ 243 ];
  RogueTypeCmdReadArrayCount = &Rogue_types[ 244 ];
  RogueTypeCmdCallInlineNativeMethod = &Rogue_types[ 245 ];
  RogueTypeCmdCallNativeMethod = &Rogue_types[ 246 ];
  RogueTypeCmdCallAspectMethod = &Rogue_types[ 247 ];
  RogueTypeCmdCallDynamicMethod = &Rogue_types[ 248 ];
  RogueTypeCmdCallMethod = &Rogue_types[ 249 ];
  RogueTypeCandidateMethods = &Rogue_types[ 250 ];
  RogueTypeCmdTaskControlSectionList = &Rogue_types[ 252 ];
  RogueTypeCmdBlock = &Rogue_types[ 253 ];
  RogueTypeTableEntry_of_String_CmdList = &Rogue_types[ 255 ];
  RogueTypeString_CmdTableEntry = &Rogue_types[ 256 ];
  RogueTypeTableEntry_of_String_PropertyList = &Rogue_types[ 258 ];
  RogueTypeString_PropertyTableEntry = &Rogue_types[ 259 ];
  RogueTypeDirectiveTokenType = &Rogue_types[ 261 ];
  RogueTypeStructuralDirectiveTokenType = &Rogue_types[ 262 ];
  RogueTypeEOLTokenType = &Rogue_types[ 263 ];
  RogueTypeStructureTokenType = &Rogue_types[ 264 ];
  RogueTypeOpWithAssignTokenType = &Rogue_types[ 265 ];
  RogueTypeEOLToken = &Rogue_types[ 266 ];
  RogueTypeString_TokenListTable = &Rogue_types[ 267 ];
  RogueTypePreprocessorTokenReader = &Rogue_types[ 268 ];
  RogueTypeCmdSwitch = &Rogue_types[ 270 ];
  RogueTypeCmdReadArrayElement = &Rogue_types[ 272 ];
  RogueTypeCmdWriteArrayElement = &Rogue_types[ 273 ];
  RogueTypeCmdConvertToPrimitiveType = &Rogue_types[ 274 ];
  RogueTypeCmdAdjustProperty = &Rogue_types[ 277 ];
  RogueTypeCmdCallStaticMethod = &Rogue_types[ 278 ];
  RogueTypeTableEntry_of_String_TokenListList = &Rogue_types[ 279 ];
  RogueTypeString_TokenListTableEntry = &Rogue_types[ 280 ];

  Rogue_literal_strings[0] = (RogueString*) RogueObject_retain( RogueString::create( "" ) ); 
  Rogue_literal_strings[1] = (RogueString*) RogueObject_retain( RogueString::create( "C++" ) ); 
  Rogue_literal_strings[2] = (RogueString*) RogueObject_retain( RogueString::create( "null" ) ); 
  Rogue_literal_strings[3] = (RogueString*) RogueObject_retain( RogueString::create( "/Libraries/" ) ); 
  Rogue_literal_strings[4] = (RogueString*) RogueObject_retain( RogueString::create( "--" ) ); 
  Rogue_literal_strings[5] = (RogueString*) RogueObject_retain( RogueString::create( "--output" ) ); 
  Rogue_literal_strings[6] = (RogueString*) RogueObject_retain( RogueString::create( "Output filepath expected after \"--output=\"" ) ); 
  Rogue_literal_strings[7] = (RogueString*) RogueObject_retain( RogueString::create( "--execute" ) ); 
  Rogue_literal_strings[8] = (RogueString*) RogueObject_retain( RogueString::create( "--main" ) ); 
  Rogue_literal_strings[9] = (RogueString*) RogueObject_retain( RogueString::create( "Unexpected value for '--main' option." ) ); 
  Rogue_literal_strings[10] = (RogueString*) RogueObject_retain( RogueString::create( "--target" ) ); 
  Rogue_literal_strings[11] = (RogueString*) RogueObject_retain( RogueString::create( "Target name expected after \"--target=\" (e.g. \"C++\")." ) ); 
  Rogue_literal_strings[12] = (RogueString*) RogueObject_retain( RogueString::create( "Unknown option '" ) ); 
  Rogue_literal_strings[13] = (RogueString*) RogueObject_retain( RogueString::create( "'." ) ); 
  Rogue_literal_strings[14] = (RogueString*) RogueObject_retain( RogueString::create( "\nRogue Compiler v0.0.1\nMay 12, 2015\n\nUSAGE\n  roguec [options] file1.rogue [file2.rogue ...]\n\nOPTIONS\n  --main\n    Include a main() function in the .cpp output file.\n\n  --execute[=\"args\"]\n    Use g++ to compile and run the .cpp output of the compiled .rogue program.\n    Automatically enables the --main option.\n\n  --output=destpath/[file]\n    Specify the destination folder and optionally the base filename for the\n    output.\n\n  --target=" ) ); 
  Rogue_literal_strings[15] = (RogueString*) RogueObject_retain( RogueString::create( "\n" ) ); 
  Rogue_literal_strings[16] = (RogueString*) RogueObject_retain( RogueString::create( "Rogue" ) ); 
  Rogue_literal_strings[17] = (RogueString*) RogueObject_retain( RogueString::create( "Rogue_program" ) ); 
  Rogue_literal_strings[18] = (RogueString*) RogueObject_retain( RogueString::create( "Internal" ) ); 
  Rogue_literal_strings[19] = (RogueString*) RogueObject_retain( RogueString::create( "[Built-in Type]" ) ); 
  Rogue_literal_strings[20] = (RogueString*) RogueObject_retain( RogueString::create( "Real" ) ); 
  Rogue_literal_strings[21] = (RogueString*) RogueObject_retain( RogueString::create( "Float" ) ); 
  Rogue_literal_strings[22] = (RogueString*) RogueObject_retain( RogueString::create( "Long" ) ); 
  Rogue_literal_strings[23] = (RogueString*) RogueObject_retain( RogueString::create( "Integer" ) ); 
  Rogue_literal_strings[24] = (RogueString*) RogueObject_retain( RogueString::create( "Character" ) ); 
  Rogue_literal_strings[25] = (RogueString*) RogueObject_retain( RogueString::create( "Byte" ) ); 
  Rogue_literal_strings[26] = (RogueString*) RogueObject_retain( RogueString::create( "Logical" ) ); 
  Rogue_literal_strings[27] = (RogueString*) RogueObject_retain( RogueString::create( "Object" ) ); 
  Rogue_literal_strings[28] = (RogueString*) RogueObject_retain( RogueString::create( "String" ) ); 
  Rogue_literal_strings[29] = (RogueString*) RogueObject_retain( RogueString::create( "StringBuilder" ) ); 
  Rogue_literal_strings[30] = (RogueString*) RogueObject_retain( RogueString::create( "NativeArray" ) ); 
  Rogue_literal_strings[31] = (RogueString*) RogueObject_retain( RogueString::create( "GenericList" ) ); 
  Rogue_literal_strings[32] = (RogueString*) RogueObject_retain( RogueString::create( "Global" ) ); 
  Rogue_literal_strings[33] = (RogueString*) RogueObject_retain( RogueString::create( "Error" ) ); 
  Rogue_literal_strings[34] = (RogueString*) RogueObject_retain( RogueString::create( ".rogue" ) ); 
  Rogue_literal_strings[35] = (RogueString*) RogueObject_retain( RogueString::create( "No such file \"" ) ); 
  Rogue_literal_strings[36] = (RogueString*) RogueObject_retain( RogueString::create( "\"." ) ); 
  Rogue_literal_strings[37] = (RogueString*) RogueObject_retain( RogueString::create( "/" ) ); 
  Rogue_literal_strings[38] = (RogueString*) RogueObject_retain( RogueString::create( "Can not find \"" ) ); 
  Rogue_literal_strings[39] = (RogueString*) RogueObject_retain( RogueString::create( "\" to include." ) ); 
  Rogue_literal_strings[40] = (RogueString*) RogueObject_retain( RogueString::create( "Recursive definition for \"" ) ); 
  Rogue_literal_strings[41] = (RogueString*) RogueObject_retain( RogueString::create( "Unexpected end of input." ) ); 
  Rogue_literal_strings[42] = (RogueString*) RogueObject_retain( RogueString::create( "Identifier expected, found " ) ); 
  Rogue_literal_strings[43] = (RogueString*) RogueObject_retain( RogueString::create( "'" ) ); 
  Rogue_literal_strings[44] = (RogueString*) RogueObject_retain( RogueString::create( "." ) ); 
  Rogue_literal_strings[45] = (RogueString*) RogueObject_retain( RogueString::create( "Filepath expected." ) ); 
  Rogue_literal_strings[46] = (RogueString*) RogueObject_retain( RogueString::create( "Cannot target folder \"" ) ); 
  Rogue_literal_strings[47] = (RogueString*) RogueObject_retain( RogueString::create( "\" for a native include." ) ); 
  Rogue_literal_strings[48] = (RogueString*) RogueObject_retain( RogueString::create( "header" ) ); 
  Rogue_literal_strings[49] = (RogueString*) RogueObject_retain( RogueString::create( "code" ) ); 
  Rogue_literal_strings[50] = (RogueString*) RogueObject_retain( RogueString::create( "Syntax error - $elseIf does not match any previous $if." ) ); 
  Rogue_literal_strings[51] = (RogueString*) RogueObject_retain( RogueString::create( "Syntax error - $else does not match any previous $if." ) ); 
  Rogue_literal_strings[52] = (RogueString*) RogueObject_retain( RogueString::create( "Syntax error - $endIf does not match any previous $if." ) ); 
  Rogue_literal_strings[53] = (RogueString*) RogueObject_retain( RogueString::create( "Expected '" ) ); 
  Rogue_literal_strings[54] = (RogueString*) RogueObject_retain( RogueString::create( "Syntax error in directive: '" ) ); 
  Rogue_literal_strings[55] = (RogueString*) RogueObject_retain( RogueString::create( "$define" ) ); 
  Rogue_literal_strings[56] = (RogueString*) RogueObject_retain( RogueString::create( "$include" ) ); 
  Rogue_literal_strings[57] = (RogueString*) RogueObject_retain( RogueString::create( "$includeNativeCode" ) ); 
  Rogue_literal_strings[58] = (RogueString*) RogueObject_retain( RogueString::create( "$includeNativeHeader" ) ); 
  Rogue_literal_strings[59] = (RogueString*) RogueObject_retain( RogueString::create( "$if" ) ); 
  Rogue_literal_strings[60] = (RogueString*) RogueObject_retain( RogueString::create( "$elseIf" ) ); 
  Rogue_literal_strings[61] = (RogueString*) RogueObject_retain( RogueString::create( "$else" ) ); 
  Rogue_literal_strings[62] = (RogueString*) RogueObject_retain( RogueString::create( "$endIf" ) ); 
  Rogue_literal_strings[63] = (RogueString*) RogueObject_retain( RogueString::create( "$requisite" ) ); 
  Rogue_literal_strings[64] = (RogueString*) RogueObject_retain( RogueString::create( "$id" ) ); 
  Rogue_literal_strings[65] = (RogueString*) RogueObject_retain( RogueString::create( "end of line" ) ); 
  Rogue_literal_strings[66] = (RogueString*) RogueObject_retain( RogueString::create( "augment" ) ); 
  Rogue_literal_strings[67] = (RogueString*) RogueObject_retain( RogueString::create( "case" ) ); 
  Rogue_literal_strings[68] = (RogueString*) RogueObject_retain( RogueString::create( "catch" ) ); 
  Rogue_literal_strings[69] = (RogueString*) RogueObject_retain( RogueString::create( "class" ) ); 
  Rogue_literal_strings[70] = (RogueString*) RogueObject_retain( RogueString::create( "DEFINITIONS" ) ); 
  Rogue_literal_strings[71] = (RogueString*) RogueObject_retain( RogueString::create( "else" ) ); 
  Rogue_literal_strings[72] = (RogueString*) RogueObject_retain( RogueString::create( "elseIf" ) ); 
  Rogue_literal_strings[73] = (RogueString*) RogueObject_retain( RogueString::create( "endAugment" ) ); 
  Rogue_literal_strings[74] = (RogueString*) RogueObject_retain( RogueString::create( "endClass" ) ); 
  Rogue_literal_strings[75] = (RogueString*) RogueObject_retain( RogueString::create( "endContingent" ) ); 
  Rogue_literal_strings[76] = (RogueString*) RogueObject_retain( RogueString::create( "endForEach" ) ); 
  Rogue_literal_strings[77] = (RogueString*) RogueObject_retain( RogueString::create( "endFunction" ) ); 
  Rogue_literal_strings[78] = (RogueString*) RogueObject_retain( RogueString::create( "endIf" ) ); 
  Rogue_literal_strings[79] = (RogueString*) RogueObject_retain( RogueString::create( "endLoop" ) ); 
  Rogue_literal_strings[80] = (RogueString*) RogueObject_retain( RogueString::create( "endTry" ) ); 
  Rogue_literal_strings[81] = (RogueString*) RogueObject_retain( RogueString::create( "endWhich" ) ); 
  Rogue_literal_strings[82] = (RogueString*) RogueObject_retain( RogueString::create( "endWhile" ) ); 
  Rogue_literal_strings[83] = (RogueString*) RogueObject_retain( RogueString::create( "ENUMERATE" ) ); 
  Rogue_literal_strings[84] = (RogueString*) RogueObject_retain( RogueString::create( "GLOBALS" ) ); 
  Rogue_literal_strings[85] = (RogueString*) RogueObject_retain( RogueString::create( "macro" ) ); 
  Rogue_literal_strings[86] = (RogueString*) RogueObject_retain( RogueString::create( "method" ) ); 
  Rogue_literal_strings[87] = (RogueString*) RogueObject_retain( RogueString::create( "METHODS" ) ); 
  Rogue_literal_strings[88] = (RogueString*) RogueObject_retain( RogueString::create( "nativeCode" ) ); 
  Rogue_literal_strings[89] = (RogueString*) RogueObject_retain( RogueString::create( "nativeHeader" ) ); 
  Rogue_literal_strings[90] = (RogueString*) RogueObject_retain( RogueString::create( "others" ) ); 
  Rogue_literal_strings[91] = (RogueString*) RogueObject_retain( RogueString::create( "PROPERTIES" ) ); 
  Rogue_literal_strings[92] = (RogueString*) RogueObject_retain( RogueString::create( "routine" ) ); 
  Rogue_literal_strings[93] = (RogueString*) RogueObject_retain( RogueString::create( "ROUTINES" ) ); 
  Rogue_literal_strings[94] = (RogueString*) RogueObject_retain( RogueString::create( "satisfied" ) ); 
  Rogue_literal_strings[95] = (RogueString*) RogueObject_retain( RogueString::create( "unsatisfied" ) ); 
  Rogue_literal_strings[96] = (RogueString*) RogueObject_retain( RogueString::create( "with" ) ); 
  Rogue_literal_strings[97] = (RogueString*) RogueObject_retain( RogueString::create( "}" ) ); 
  Rogue_literal_strings[98] = (RogueString*) RogueObject_retain( RogueString::create( "]" ) ); 
  Rogue_literal_strings[99] = (RogueString*) RogueObject_retain( RogueString::create( "}#" ) ); 
  Rogue_literal_strings[100] = (RogueString*) RogueObject_retain( RogueString::create( ")" ) ); 
  Rogue_literal_strings[101] = (RogueString*) RogueObject_retain( RogueString::create( ">>" ) ); 
  Rogue_literal_strings[102] = (RogueString*) RogueObject_retain( RogueString::create( "await" ) ); 
  Rogue_literal_strings[103] = (RogueString*) RogueObject_retain( RogueString::create( "contingent" ) ); 
  Rogue_literal_strings[104] = (RogueString*) RogueObject_retain( RogueString::create( "escapeContingent" ) ); 
  Rogue_literal_strings[105] = (RogueString*) RogueObject_retain( RogueString::create( "escapeForEach" ) ); 
  Rogue_literal_strings[106] = (RogueString*) RogueObject_retain( RogueString::create( "escapeIf" ) ); 
  Rogue_literal_strings[107] = (RogueString*) RogueObject_retain( RogueString::create( "escapeLoop" ) ); 
  Rogue_literal_strings[108] = (RogueString*) RogueObject_retain( RogueString::create( "escapeTry" ) ); 
  Rogue_literal_strings[109] = (RogueString*) RogueObject_retain( RogueString::create( "escapeWhich" ) ); 
  Rogue_literal_strings[110] = (RogueString*) RogueObject_retain( RogueString::create( "escapeWhile" ) ); 
  Rogue_literal_strings[111] = (RogueString*) RogueObject_retain( RogueString::create( "forEach" ) ); 
  Rogue_literal_strings[112] = (RogueString*) RogueObject_retain( RogueString::create( "function" ) ); 
  Rogue_literal_strings[113] = (RogueString*) RogueObject_retain( RogueString::create( "if" ) ); 
  Rogue_literal_strings[114] = (RogueString*) RogueObject_retain( RogueString::create( "in" ) ); 
  Rogue_literal_strings[115] = (RogueString*) RogueObject_retain( RogueString::create( "is" ) ); 
  Rogue_literal_strings[116] = (RogueString*) RogueObject_retain( RogueString::create( "isNot" ) ); 
  Rogue_literal_strings[117] = (RogueString*) RogueObject_retain( RogueString::create( "local" ) ); 
  Rogue_literal_strings[118] = (RogueString*) RogueObject_retain( RogueString::create( "loop" ) ); 
  Rogue_literal_strings[119] = (RogueString*) RogueObject_retain( RogueString::create( "native" ) ); 
  Rogue_literal_strings[120] = (RogueString*) RogueObject_retain( RogueString::create( "necessary" ) ); 
  Rogue_literal_strings[121] = (RogueString*) RogueObject_retain( RogueString::create( "nextIteration" ) ); 
  Rogue_literal_strings[122] = (RogueString*) RogueObject_retain( RogueString::create( "noAction" ) ); 
  Rogue_literal_strings[123] = (RogueString*) RogueObject_retain( RogueString::create( "of" ) ); 
  Rogue_literal_strings[124] = (RogueString*) RogueObject_retain( RogueString::create( "return" ) ); 
  Rogue_literal_strings[125] = (RogueString*) RogueObject_retain( RogueString::create( "step" ) ); 
  Rogue_literal_strings[126] = (RogueString*) RogueObject_retain( RogueString::create( "sufficient" ) ); 
  Rogue_literal_strings[127] = (RogueString*) RogueObject_retain( RogueString::create( "throw" ) ); 
  Rogue_literal_strings[128] = (RogueString*) RogueObject_retain( RogueString::create( "trace" ) ); 
  Rogue_literal_strings[129] = (RogueString*) RogueObject_retain( RogueString::create( "try" ) ); 
  Rogue_literal_strings[130] = (RogueString*) RogueObject_retain( RogueString::create( "which" ) ); 
  Rogue_literal_strings[131] = (RogueString*) RogueObject_retain( RogueString::create( "while" ) ); 
  Rogue_literal_strings[132] = (RogueString*) RogueObject_retain( RogueString::create( "yield" ) ); 
  Rogue_literal_strings[133] = (RogueString*) RogueObject_retain( RogueString::create( "identifier" ) ); 
  Rogue_literal_strings[134] = (RogueString*) RogueObject_retain( RogueString::create( "type identifier" ) ); 
  Rogue_literal_strings[135] = (RogueString*) RogueObject_retain( RogueString::create( "and" ) ); 
  Rogue_literal_strings[136] = (RogueString*) RogueObject_retain( RogueString::create( "as" ) ); 
  Rogue_literal_strings[137] = (RogueString*) RogueObject_retain( RogueString::create( "false" ) ); 
  Rogue_literal_strings[138] = (RogueString*) RogueObject_retain( RogueString::create( "instanceOf" ) ); 
  Rogue_literal_strings[139] = (RogueString*) RogueObject_retain( RogueString::create( "meta" ) ); 
  Rogue_literal_strings[140] = (RogueString*) RogueObject_retain( RogueString::create( "not" ) ); 
  Rogue_literal_strings[141] = (RogueString*) RogueObject_retain( RogueString::create( "notInstanceOf" ) ); 
  Rogue_literal_strings[142] = (RogueString*) RogueObject_retain( RogueString::create( "or" ) ); 
  Rogue_literal_strings[143] = (RogueString*) RogueObject_retain( RogueString::create( "pi" ) ); 
  Rogue_literal_strings[144] = (RogueString*) RogueObject_retain( RogueString::create( "prior" ) ); 
  Rogue_literal_strings[145] = (RogueString*) RogueObject_retain( RogueString::create( "this" ) ); 
  Rogue_literal_strings[146] = (RogueString*) RogueObject_retain( RogueString::create( "true" ) ); 
  Rogue_literal_strings[147] = (RogueString*) RogueObject_retain( RogueString::create( "xor" ) ); 
  Rogue_literal_strings[148] = (RogueString*) RogueObject_retain( RogueString::create( "&" ) ); 
  Rogue_literal_strings[149] = (RogueString*) RogueObject_retain( RogueString::create( "&=" ) ); 
  Rogue_literal_strings[150] = (RogueString*) RogueObject_retain( RogueString::create( "->" ) ); 
  Rogue_literal_strings[151] = (RogueString*) RogueObject_retain( RogueString::create( "@" ) ); 
  Rogue_literal_strings[152] = (RogueString*) RogueObject_retain( RogueString::create( "\\" ) ); 
  Rogue_literal_strings[153] = (RogueString*) RogueObject_retain( RogueString::create( "^" ) ); 
  Rogue_literal_strings[154] = (RogueString*) RogueObject_retain( RogueString::create( "^=" ) ); 
  Rogue_literal_strings[155] = (RogueString*) RogueObject_retain( RogueString::create( ":" ) ); 
  Rogue_literal_strings[156] = (RogueString*) RogueObject_retain( RogueString::create( "::" ) ); 
  Rogue_literal_strings[157] = (RogueString*) RogueObject_retain( RogueString::create( "," ) ); 
  Rogue_literal_strings[158] = (RogueString*) RogueObject_retain( RogueString::create( "<>" ) ); 
  Rogue_literal_strings[159] = (RogueString*) RogueObject_retain( RogueString::create( ".=" ) ); 
  Rogue_literal_strings[160] = (RogueString*) RogueObject_retain( RogueString::create( "..>" ) ); 
  Rogue_literal_strings[161] = (RogueString*) RogueObject_retain( RogueString::create( "{}" ) ); 
  Rogue_literal_strings[162] = (RogueString*) RogueObject_retain( RogueString::create( "[]" ) ); 
  Rogue_literal_strings[163] = (RogueString*) RogueObject_retain( RogueString::create( "==" ) ); 
  Rogue_literal_strings[164] = (RogueString*) RogueObject_retain( RogueString::create( "=" ) ); 
  Rogue_literal_strings[165] = (RogueString*) RogueObject_retain( RogueString::create( "!" ) ); 
  Rogue_literal_strings[166] = (RogueString*) RogueObject_retain( RogueString::create( "=>" ) ); 
  Rogue_literal_strings[167] = (RogueString*) RogueObject_retain( RogueString::create( ">=" ) ); 
  Rogue_literal_strings[168] = (RogueString*) RogueObject_retain( RogueString::create( ">" ) ); 
  Rogue_literal_strings[169] = (RogueString*) RogueObject_retain( RogueString::create( "<=" ) ); 
  Rogue_literal_strings[170] = (RogueString*) RogueObject_retain( RogueString::create( "<" ) ); 
  Rogue_literal_strings[171] = (RogueString*) RogueObject_retain( RogueString::create( "-" ) ); 
  Rogue_literal_strings[172] = (RogueString*) RogueObject_retain( RogueString::create( "-=" ) ); 
  Rogue_literal_strings[173] = (RogueString*) RogueObject_retain( RogueString::create( "!=" ) ); 
  Rogue_literal_strings[174] = (RogueString*) RogueObject_retain( RogueString::create( "{" ) ); 
  Rogue_literal_strings[175] = (RogueString*) RogueObject_retain( RogueString::create( "[" ) ); 
  Rogue_literal_strings[176] = (RogueString*) RogueObject_retain( RogueString::create( "(" ) ); 
  Rogue_literal_strings[177] = (RogueString*) RogueObject_retain( RogueString::create( "<<" ) ); 
  Rogue_literal_strings[178] = (RogueString*) RogueObject_retain( RogueString::create( "%" ) ); 
  Rogue_literal_strings[179] = (RogueString*) RogueObject_retain( RogueString::create( "%=" ) ); 
  Rogue_literal_strings[180] = (RogueString*) RogueObject_retain( RogueString::create( "+" ) ); 
  Rogue_literal_strings[181] = (RogueString*) RogueObject_retain( RogueString::create( "+=" ) ); 
  Rogue_literal_strings[182] = (RogueString*) RogueObject_retain( RogueString::create( "++" ) ); 
  Rogue_literal_strings[183] = (RogueString*) RogueObject_retain( RogueString::create( "?" ) ); 
  Rogue_literal_strings[184] = (RogueString*) RogueObject_retain( RogueString::create( ";" ) ); 
  Rogue_literal_strings[185] = (RogueString*) RogueObject_retain( RogueString::create( ":<<:" ) ); 
  Rogue_literal_strings[186] = (RogueString*) RogueObject_retain( RogueString::create( ":>>:" ) ); 
  Rogue_literal_strings[187] = (RogueString*) RogueObject_retain( RogueString::create( ":>>>:" ) ); 
  Rogue_literal_strings[188] = (RogueString*) RogueObject_retain( RogueString::create( "/=" ) ); 
  Rogue_literal_strings[189] = (RogueString*) RogueObject_retain( RogueString::create( "~" ) ); 
  Rogue_literal_strings[190] = (RogueString*) RogueObject_retain( RogueString::create( "~=" ) ); 
  Rogue_literal_strings[191] = (RogueString*) RogueObject_retain( RogueString::create( "*" ) ); 
  Rogue_literal_strings[192] = (RogueString*) RogueObject_retain( RogueString::create( "*=" ) ); 
  Rogue_literal_strings[193] = (RogueString*) RogueObject_retain( RogueString::create( ".." ) ); 
  Rogue_literal_strings[194] = (RogueString*) RogueObject_retain( RogueString::create( "..<" ) ); 
  Rogue_literal_strings[195] = (RogueString*) RogueObject_retain( RogueString::create( "|" ) ); 
  Rogue_literal_strings[196] = (RogueString*) RogueObject_retain( RogueString::create( "|=" ) ); 
  Rogue_literal_strings[197] = (RogueString*) RogueObject_retain( RogueString::create( "||" ) ); 
  Rogue_literal_strings[198] = (RogueString*) RogueObject_retain( RogueString::create( "Identifier expected." ) ); 
  Rogue_literal_strings[199] = (RogueString*) RogueObject_retain( RogueString::create( "endNativeCode" ) ); 
  Rogue_literal_strings[200] = (RogueString*) RogueObject_retain( RogueString::create( "'endNativeCode' expected before EOF." ) ); 
  Rogue_literal_strings[201] = (RogueString*) RogueObject_retain( RogueString::create( "endNativeHeader" ) ); 
  Rogue_literal_strings[202] = (RogueString*) RogueObject_retain( RogueString::create( "'endNativeHeader' expected before EOF." ) ); 
  Rogue_literal_strings[203] = (RogueString*) RogueObject_retain( RogueString::create( "Character expected." ) ); 
  Rogue_literal_strings[204] = (RogueString*) RogueObject_retain( RogueString::create( "Character expected; found end of line." ) ); 
  Rogue_literal_strings[205] = (RogueString*) RogueObject_retain( RogueString::create( "Escaped character expected; found end of input." ) ); 
  Rogue_literal_strings[206] = (RogueString*) RogueObject_retain( RogueString::create( "-9223372036854775808" ) ); 
  Rogue_literal_strings[207] = (RogueString*) RogueObject_retain( RogueString::create( "-digit hex value expected; found end of file." ) ); 
  Rogue_literal_strings[208] = (RogueString*) RogueObject_retain( RogueString::create( "Invalid hex digit " ) ); 
  Rogue_literal_strings[209] = (RogueString*) RogueObject_retain( RogueString::create( "Invalid escape sequence.  Supported: \\n \\r \\t \\0 \\/ \\' \\\\ \\\" \\" ) ); 
  Rogue_literal_strings[210] = (RogueString*) RogueObject_retain( RogueString::create( "uXXXX \\" ) ); 
  Rogue_literal_strings[211] = (RogueString*) RogueObject_retain( RogueString::create( "xXX." ) ); 
  Rogue_literal_strings[212] = (RogueString*) RogueObject_retain( RogueString::create( "End of file reached while looking for end of string." ) ); 
  Rogue_literal_strings[213] = (RogueString*) RogueObject_retain( RogueString::create( "End of input reached while looking for end of string." ) ); 
  Rogue_literal_strings[214] = (RogueString*) RogueObject_retain( RogueString::create( "Digit out of range for base " ) ); 
  Rogue_literal_strings[215] = (RogueString*) RogueObject_retain( RogueString::create( "One or more digits expected." ) ); 
  Rogue_literal_strings[216] = (RogueString*) RogueObject_retain( RogueString::create( "End of File reached while looking for end of verbatim string." ) ); 
  Rogue_literal_strings[217] = (RogueString*) RogueObject_retain( RogueString::create( "define" ) ); 
  Rogue_literal_strings[218] = (RogueString*) RogueObject_retain( RogueString::create( "include" ) ); 
  Rogue_literal_strings[219] = (RogueString*) RogueObject_retain( RogueString::create( "includeNativeCode" ) ); 
  Rogue_literal_strings[220] = (RogueString*) RogueObject_retain( RogueString::create( "includeNativeHeader" ) ); 
  Rogue_literal_strings[221] = (RogueString*) RogueObject_retain( RogueString::create( "requisite" ) ); 
  Rogue_literal_strings[222] = (RogueString*) RogueObject_retain( RogueString::create( "$" ) ); 
  Rogue_literal_strings[223] = (RogueString*) RogueObject_retain( RogueString::create( "Use 'and' instead of '&&'." ) ); 
  Rogue_literal_strings[224] = (RogueString*) RogueObject_retain( RogueString::create( "End of line expected after '...'." ) ); 
  Rogue_literal_strings[225] = (RogueString*) RogueObject_retain( RogueString::create( "<<:" ) ); 
  Rogue_literal_strings[226] = (RogueString*) RogueObject_retain( RogueString::create( ">>:" ) ); 
  Rogue_literal_strings[227] = (RogueString*) RogueObject_retain( RogueString::create( ">>>:" ) ); 
  Rogue_literal_strings[228] = (RogueString*) RogueObject_retain( RogueString::create( "Use 'or' instead of '||'." ) ); 
  Rogue_literal_strings[229] = (RogueString*) RogueObject_retain( RogueString::create( "Unexpected input '" ) ); 
  Rogue_literal_strings[230] = (RogueString*) RogueObject_retain( RogueString::create( "EOL" ) ); 
  Rogue_literal_strings[231] = (RogueString*) RogueObject_retain( RogueString::create( "(Unicode " ) ); 
  Rogue_literal_strings[232] = (RogueString*) RogueObject_retain( RogueString::create( "Syntax error - unexpected input " ) ); 
  Rogue_literal_strings[233] = (RogueString*) RogueObject_retain( RogueString::create( " expected, found " ) ); 
  Rogue_literal_strings[234] = (RogueString*) RogueObject_retain( RogueString::create( "Unable to determine type for metadata access." ) ); 
  Rogue_literal_strings[235] = (RogueString*) RogueObject_retain( RogueString::create( "default_value" ) ); 
  Rogue_literal_strings[236] = (RogueString*) RogueObject_retain( RogueString::create( "'default_value' expected after 'meta.'." ) ); 
  Rogue_literal_strings[237] = (RogueString*) RogueObject_retain( RogueString::create( "Closing '>>' expected before end of line." ) ); 
  Rogue_literal_strings[238] = (RogueString*) RogueObject_retain( RogueString::create( "Callback" ) ); 
  Rogue_literal_strings[239] = (RogueString*) RogueObject_retain( RogueString::create( "call" ) ); 
  Rogue_literal_strings[240] = (RogueString*) RogueObject_retain( RogueString::create( "param" ) ); 
  Rogue_literal_strings[241] = (RogueString*) RogueObject_retain( RogueString::create( "Value expected, found empty parentheses ()." ) ); 
  Rogue_literal_strings[242] = (RogueString*) RogueObject_retain( RogueString::create( "PropertyList" ) ); 
  Rogue_literal_strings[243] = (RogueString*) RogueObject_retain( RogueString::create( "_auto_" ) ); 
  Rogue_literal_strings[244] = (RogueString*) RogueObject_retain( RogueString::create( "Single identifier expected for control variable name." ) ); 
  Rogue_literal_strings[245] = (RogueString*) RogueObject_retain( RogueString::create( "at" ) ); 
  Rogue_literal_strings[246] = (RogueString*) RogueObject_retain( RogueString::create( "Missing element name before 'at'." ) ); 
  Rogue_literal_strings[247] = (RogueString*) RogueObject_retain( RogueString::create( "Cannot use 'at' with a range." ) ); 
  Rogue_literal_strings[248] = (RogueString*) RogueObject_retain( RogueString::create( "Cannot use 'at' with forEach-of." ) ); 
  Rogue_literal_strings[249] = (RogueString*) RogueObject_retain( RogueString::create( "Use forEach-in with a literal range instead of forEach-of." ) ); 
  Rogue_literal_strings[250] = (RogueString*) RogueObject_retain( RogueString::create( "Syntax error in forEach - keyword 'in' or 'of' expected." ) ); 
  Rogue_literal_strings[251] = (RogueString*) RogueObject_retain( RogueString::create( "Invalid syntax in forEach." ) ); 
  Rogue_literal_strings[252] = (RogueString*) RogueObject_retain( RogueString::create( "Parser::parse_for_each():1384 " ) ); 
  Rogue_literal_strings[253] = (RogueString*) RogueObject_retain( RogueString::create( "[INTERNAL ERROR]" ) ); 
  Rogue_literal_strings[254] = (RogueString*) RogueObject_retain( RogueString::create( "()" ) ); 
  Rogue_literal_strings[255] = (RogueString*) RogueObject_retain( RogueString::create( " " ) ); 
  Rogue_literal_strings[256] = (RogueString*) RogueObject_retain( RogueString::create( "Augment section labels should be defined in the outer scope of the method and cannot be nested inside a control structure." ) ); 
  Rogue_literal_strings[257] = (RogueString*) RogueObject_retain( RogueString::create( "insert" ) ); 
  Rogue_literal_strings[258] = (RogueString*) RogueObject_retain( RogueString::create( "All methods implicitly define the label <<insert>> at the beginning of the method.  No duplicates are allowed." ) ); 
  Rogue_literal_strings[259] = (RogueString*) RogueObject_retain( RogueString::create( "append" ) ); 
  Rogue_literal_strings[260] = (RogueString*) RogueObject_retain( RogueString::create( "All methods implicitly define the label <<append>> at the end of the method.  No duplicates are allowed." ) ); 
  Rogue_literal_strings[261] = (RogueString*) RogueObject_retain( RogueString::create( "Literal string expected." ) ); 
  Rogue_literal_strings[262] = (RogueString*) RogueObject_retain( RogueString::create( "Syntax error: unexpected '" ) ); 
  Rogue_literal_strings[263] = (RogueString*) RogueObject_retain( RogueString::create( "aspect" ) ); 
  Rogue_literal_strings[264] = (RogueString*) RogueObject_retain( RogueString::create( "A class cannot be both '" ) ); 
  Rogue_literal_strings[265] = (RogueString*) RogueObject_retain( RogueString::create( "' and '" ) ); 
  Rogue_literal_strings[266] = (RogueString*) RogueObject_retain( RogueString::create( "primitive" ) ); 
  Rogue_literal_strings[267] = (RogueString*) RogueObject_retain( RogueString::create( "compound" ) ); 
  Rogue_literal_strings[268] = (RogueString*) RogueObject_retain( RogueString::create( "functional" ) ); 
  Rogue_literal_strings[269] = (RogueString*) RogueObject_retain( RogueString::create( "immutable" ) ); 
  Rogue_literal_strings[270] = (RogueString*) RogueObject_retain( RogueString::create( "singleton" ) ); 
  Rogue_literal_strings[271] = (RogueString*) RogueObject_retain( RogueString::create( "task" ) ); 
  Rogue_literal_strings[272] = (RogueString*) RogueObject_retain( RogueString::create( "Invalid attribute: " ) ); 
  Rogue_literal_strings[273] = (RogueString*) RogueObject_retain( RogueString::create( "Parser::parse_template_tokens():221 end_type" ) ); 
  Rogue_literal_strings[274] = (RogueString*) RogueObject_retain( RogueString::create( " expected, found end of file." ) ); 
  Rogue_literal_strings[275] = (RogueString*) RogueObject_retain( RogueString::create( "Illegal placeholder type in augment.  Write '" ) ); 
  Rogue_literal_strings[276] = (RogueString*) RogueObject_retain( RogueString::create( "' without the specializers (<<...>>) to apply the augment to all template instances or write specific types such as " ) ); 
  Rogue_literal_strings[277] = (RogueString*) RogueObject_retain( RogueString::create( "<<String>> to restrict the augment to that type." ) ); 
  Rogue_literal_strings[278] = (RogueString*) RogueObject_retain( RogueString::create( "on_launch" ) ); 
  Rogue_literal_strings[279] = (RogueString*) RogueObject_retain( RogueString::create( "Syntax error - unexpected " ) ); 
  Rogue_literal_strings[280] = (RogueString*) RogueObject_retain( RogueString::create( "Standard" ) ); 
  Rogue_literal_strings[281] = (RogueString*) RogueObject_retain( RogueString::create( "Optional" ) ); 
  Rogue_literal_strings[282] = (RogueString*) RogueObject_retain( RogueString::create( "List" ) ); 
  Rogue_literal_strings[283] = (RogueString*) RogueObject_retain( RogueString::create( "$DataType" ) ); 
  Rogue_literal_strings[284] = (RogueString*) RogueObject_retain( RogueString::create( "create" ) ); 
  Rogue_literal_strings[285] = (RogueString*) RogueObject_retain( RogueString::create( "init" ) ); 
  Rogue_literal_strings[286] = (RogueString*) RogueObject_retain( RogueString::create( "Definition expected." ) ); 
  Rogue_literal_strings[287] = (RogueString*) RogueObject_retain( RogueString::create( "[INTERNAL] " ) ); 
  Rogue_literal_strings[288] = (RogueString*) RogueObject_retain( RogueString::create( "Cmd" ) ); 
  Rogue_literal_strings[289] = (RogueString*) RogueObject_retain( RogueString::create( "::clone() is not implemented." ) ); 
  Rogue_literal_strings[290] = (RogueString*) RogueObject_retain( RogueString::create( "property" ) ); 
  Rogue_literal_strings[291] = (RogueString*) RogueObject_retain( RogueString::create( "global" ) ); 
  Rogue_literal_strings[292] = (RogueString*) RogueObject_retain( RogueString::create( "Cannot determine " ) ); 
  Rogue_literal_strings[293] = (RogueString*) RogueObject_retain( RogueString::create( " type from initial value; append an explicit type declaration such as \": Object\" " ) ); 
  Rogue_literal_strings[294] = (RogueString*) RogueObject_retain( RogueString::create( "An initial value or " ) ); 
  Rogue_literal_strings[295] = (RogueString*) RogueObject_retain( RogueString::create( " type (for example, \": Object\") must be specified." ) ); 
  Rogue_literal_strings[296] = (RogueString*) RogueObject_retain( RogueString::create( "operator" ) ); 
  Rogue_literal_strings[297] = (RogueString*) RogueObject_retain( RogueString::create( "to" ) ); 
  Rogue_literal_strings[298] = (RogueString*) RogueObject_retain( RogueString::create( "to_" ) ); 
  Rogue_literal_strings[299] = (RogueString*) RogueObject_retain( RogueString::create( "Native expression types cannot be specified in macro methods - remove the \"->" ) ); 
  Rogue_literal_strings[300] = (RogueString*) RogueObject_retain( RogueString::create( "Reference to " ) ); 
  Rogue_literal_strings[301] = (RogueString*) RogueObject_retain( RogueString::create( " is missing required type parameters (" ) ); 
  Rogue_literal_strings[302] = (RogueString*) RogueObject_retain( RogueString::create( "<<...>>)." ) ); 
  Rogue_literal_strings[303] = (RogueString*) RogueObject_retain( RogueString::create( "Too many type specializers given." ) ); 
  Rogue_literal_strings[304] = (RogueString*) RogueObject_retain( RogueString::create( "Insufficient number of type parameters in " ) ); 
  Rogue_literal_strings[305] = (RogueString*) RogueObject_retain( RogueString::create( "; " ) ); 
  Rogue_literal_strings[306] = (RogueString*) RogueObject_retain( RogueString::create( " given, " ) ); 
  Rogue_literal_strings[307] = (RogueString*) RogueObject_retain( RogueString::create( " expected." ) ); 
  Rogue_literal_strings[308] = (RogueString*) RogueObject_retain( RogueString::create( "Type parameters given for non-template type." ) ); 
  Rogue_literal_strings[309] = (RogueString*) RogueObject_retain( RogueString::create( "Reference to undefined type '" ) ); 
  Rogue_literal_strings[310] = (RogueString*) RogueObject_retain( RogueString::create( "Aspects can only extend other aspects." ) ); 
  Rogue_literal_strings[311] = (RogueString*) RogueObject_retain( RogueString::create( "Cyclic inheritance attempted - " ) ); 
  Rogue_literal_strings[312] = (RogueString*) RogueObject_retain( RogueString::create( " cannot extend " ) ); 
  Rogue_literal_strings[313] = (RogueString*) RogueObject_retain( RogueString::create( " because " ) ); 
  Rogue_literal_strings[314] = (RogueString*) RogueObject_retain( RogueString::create( " already extends " ) ); 
  Rogue_literal_strings[315] = (RogueString*) RogueObject_retain( RogueString::create( "Class " ) ); 
  Rogue_literal_strings[316] = (RogueString*) RogueObject_retain( RogueString::create( " can only have one base class (" ) ); 
  Rogue_literal_strings[317] = (RogueString*) RogueObject_retain( RogueString::create( " and " ) ); 
  Rogue_literal_strings[318] = (RogueString*) RogueObject_retain( RogueString::create( " are both specified as base classes)." ) ); 
  Rogue_literal_strings[319] = (RogueString*) RogueObject_retain( RogueString::create( "A property named \"" ) ); 
  Rogue_literal_strings[320] = (RogueString*) RogueObject_retain( RogueString::create( "\" already exists." ) ); 
  Rogue_literal_strings[321] = (RogueString*) RogueObject_retain( RogueString::create( "Conflicting initial values are given for property \"" ) ); 
  Rogue_literal_strings[322] = (RogueString*) RogueObject_retain( RogueString::create( "\" in unrelated types " ) ); 
  Rogue_literal_strings[323] = (RogueString*) RogueObject_retain( RogueString::create( "Conflicting types given for property \"" ) ); 
  Rogue_literal_strings[324] = (RogueString*) RogueObject_retain( RogueString::create( "\" - " ) ); 
  Rogue_literal_strings[325] = (RogueString*) RogueObject_retain( RogueString::create( " in " ) ); 
  Rogue_literal_strings[326] = (RogueString*) RogueObject_retain( RogueString::create( "type_name" ) ); 
  Rogue_literal_strings[327] = (RogueString*) RogueObject_retain( RogueString::create( "Compounds cannot have initializers.  Use create(...) routines instead." ) ); 
  Rogue_literal_strings[328] = (RogueString*) RogueObject_retain( RogueString::create( "TaskWithResult<<" ) ); 
  Rogue_literal_strings[329] = (RogueString*) RogueObject_retain( RogueString::create( "Task" ) ); 
  Rogue_literal_strings[330] = (RogueString*) RogueObject_retain( RogueString::create( "No type declared for parameter \"" ) ); 
  Rogue_literal_strings[331] = (RogueString*) RogueObject_retain( RogueString::create( "A routine with the signature " ) ); 
  Rogue_literal_strings[332] = (RogueString*) RogueObject_retain( RogueString::create( " is already defined." ) ); 
  Rogue_literal_strings[333] = (RogueString*) RogueObject_retain( RogueString::create( "A method with the signature " ) ); 
  Rogue_literal_strings[334] = (RogueString*) RogueObject_retain( RogueString::create( "No corresponding label <<" ) ); 
  Rogue_literal_strings[335] = (RogueString*) RogueObject_retain( RogueString::create( ">> in augmented code." ) ); 
  Rogue_literal_strings[336] = (RogueString*) RogueObject_retain( RogueString::create( "Type " ) ); 
  Rogue_literal_strings[337] = (RogueString*) RogueObject_retain( RogueString::create( " already defines routine " ) ); 
  Rogue_literal_strings[338] = (RogueString*) RogueObject_retain( RogueString::create( " already defines method " ) ); 
  Rogue_literal_strings[339] = (RogueString*) RogueObject_retain( RogueString::create( "In " ) ); 
  Rogue_literal_strings[340] = (RogueString*) RogueObject_retain( RogueString::create( " the overridden return type (" ) ); 
  Rogue_literal_strings[341] = (RogueString*) RogueObject_retain( RogueString::create( ") is not compatible with the prior definition return type (" ) ); 
  Rogue_literal_strings[342] = (RogueString*) RogueObject_retain( RogueString::create( ")." ) ); 
  Rogue_literal_strings[343] = (RogueString*) RogueObject_retain( RogueString::create( "init_class()" ) ); 
  Rogue_literal_strings[344] = (RogueString*) RogueObject_retain( RogueString::create( "init_class" ) ); 
  Rogue_literal_strings[345] = (RogueString*) RogueObject_retain( RogueString::create( "init_object()" ) ); 
  Rogue_literal_strings[346] = (RogueString*) RogueObject_retain( RogueString::create( "init_object" ) ); 
  Rogue_literal_strings[347] = (RogueString*) RogueObject_retain( RogueString::create( "to_String()" ) ); 
  Rogue_literal_strings[348] = (RogueString*) RogueObject_retain( RogueString::create( "to_String" ) ); 
  Rogue_literal_strings[349] = (RogueString*) RogueObject_retain( RogueString::create( "A class that is instanceOf NativeArray must also be instanceOf Array<<DataType>>." ) ); 
  Rogue_literal_strings[350] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<" ) ); 
  Rogue_literal_strings[351] = (RogueString*) RogueObject_retain( RogueString::create( "__" ) ); 
  Rogue_literal_strings[352] = (RogueString*) RogueObject_retain( RogueString::create( "__task" ) ); 
  Rogue_literal_strings[353] = (RogueString*) RogueObject_retain( RogueString::create( "context" ) ); 
  Rogue_literal_strings[354] = (RogueString*) RogueObject_retain( RogueString::create( "_" ) ); 
  Rogue_literal_strings[355] = (RogueString*) RogueObject_retain( RogueString::create( "update" ) ); 
  Rogue_literal_strings[356] = (RogueString*) RogueObject_retain( RogueString::create( "execute" ) ); 
  Rogue_literal_strings[357] = (RogueString*) RogueObject_retain( RogueString::create( "ip" ) ); 
  Rogue_literal_strings[358] = (RogueString*) RogueObject_retain( RogueString::create( "__task_resolver" ) ); 
  Rogue_literal_strings[359] = (RogueString*) RogueObject_retain( RogueString::create( "result" ) ); 
  Rogue_literal_strings[360] = (RogueString*) RogueObject_retain( RogueString::create( "A local variable named \"" ) ); 
  Rogue_literal_strings[361] = (RogueString*) RogueObject_retain( RogueString::create( "::resolve() is not defined." ) ); 
  Rogue_literal_strings[362] = (RogueString*) RogueObject_retain( RogueString::create( "locals left on scope stack" ) ); 
  Rogue_literal_strings[363] = (RogueString*) RogueObject_retain( RogueString::create( "control stucture left on scope stack" ) ); 
  Rogue_literal_strings[364] = (RogueString*) RogueObject_retain( RogueString::create( " is not declared as returning a value." ) ); 
  Rogue_literal_strings[365] = (RogueString*) RogueObject_retain( RogueString::create( "::type() is not defined." ) ); 
  Rogue_literal_strings[366] = (RogueString*) RogueObject_retain( RogueString::create( " cannot be cast to required type " ) ); 
  Rogue_literal_strings[367] = (RogueString*) RogueObject_retain( RogueString::create( "No such method or routine " ) ); 
  Rogue_literal_strings[368] = (RogueString*) RogueObject_retain( RogueString::create( " in type " ) ); 
  Rogue_literal_strings[369] = (RogueString*) RogueObject_retain( RogueString::create( "init()" ) ); 
  Rogue_literal_strings[370] = (RogueString*) RogueObject_retain( RogueString::create( "::trace_used_code() is not defined." ) ); 
  Rogue_literal_strings[371] = (RogueString*) RogueObject_retain( RogueString::create( "/RogueProgram" ) ); 
  Rogue_literal_strings[372] = (RogueString*) RogueObject_retain( RogueString::create( ".cpp" ) ); 
  Rogue_literal_strings[373] = (RogueString*) RogueObject_retain( RogueString::create( "type" ) ); 
  Rogue_literal_strings[374] = (RogueString*) RogueObject_retain( RogueString::create( "_of_" ) ); 
  Rogue_literal_strings[375] = (RogueString*) RogueObject_retain( RogueString::create( "NOT" ) ); 
  Rogue_literal_strings[376] = (RogueString*) RogueObject_retain( RogueString::create( "MOD" ) ); 
  Rogue_literal_strings[377] = (RogueString*) RogueObject_retain( RogueString::create( "AND" ) ); 
  Rogue_literal_strings[378] = (RogueString*) RogueObject_retain( RogueString::create( "TIMES" ) ); 
  Rogue_literal_strings[379] = (RogueString*) RogueObject_retain( RogueString::create( "PLUS" ) ); 
  Rogue_literal_strings[380] = (RogueString*) RogueObject_retain( RogueString::create( "MINUS" ) ); 
  Rogue_literal_strings[381] = (RogueString*) RogueObject_retain( RogueString::create( "DOT" ) ); 
  Rogue_literal_strings[382] = (RogueString*) RogueObject_retain( RogueString::create( "SLASH" ) ); 
  Rogue_literal_strings[383] = (RogueString*) RogueObject_retain( RogueString::create( "LESSTHAN" ) ); 
  Rogue_literal_strings[384] = (RogueString*) RogueObject_retain( RogueString::create( "EQUALS" ) ); 
  Rogue_literal_strings[385] = (RogueString*) RogueObject_retain( RogueString::create( "GREATERTHAN" ) ); 
  Rogue_literal_strings[386] = (RogueString*) RogueObject_retain( RogueString::create( "POWER" ) ); 
  Rogue_literal_strings[387] = (RogueString*) RogueObject_retain( RogueString::create( "OR" ) ); 
  Rogue_literal_strings[388] = (RogueString*) RogueObject_retain( RogueString::create( "XOR" ) ); 
  Rogue_literal_strings[389] = (RogueString*) RogueObject_retain( RogueString::create( "RogueArray" ) ); 
  Rogue_literal_strings[390] = (RogueString*) RogueObject_retain( RogueString::create( "Array" ) ); 
  Rogue_literal_strings[391] = (RogueString*) RogueObject_retain( RogueString::create( "RogueClass" ) ); 
  Rogue_literal_strings[392] = (RogueString*) RogueObject_retain( RogueString::create( "RogueType" ) ); 
  Rogue_literal_strings[393] = (RogueString*) RogueObject_retain( RogueString::create( "Writing " ) ); 
  Rogue_literal_strings[394] = (RogueString*) RogueObject_retain( RogueString::create( ".h..." ) ); 
  Rogue_literal_strings[395] = (RogueString*) RogueObject_retain( RogueString::create( ".h" ) ); 
  Rogue_literal_strings[396] = (RogueString*) RogueObject_retain( RogueString::create( "#include <cmath>" ) ); 
  Rogue_literal_strings[397] = (RogueString*) RogueObject_retain( RogueString::create( "struct " ) ); 
  Rogue_literal_strings[398] = (RogueString*) RogueObject_retain( RogueString::create( " : " ) ); 
  Rogue_literal_strings[399] = (RogueString*) RogueObject_retain( RogueString::create( "void" ) ); 
  Rogue_literal_strings[400] = (RogueString*) RogueObject_retain( RogueString::create( " : RogueObject" ) ); 
  Rogue_literal_strings[401] = (RogueString*) RogueObject_retain( RogueString::create( "// GLOBALS" ) ); 
  Rogue_literal_strings[402] = (RogueString*) RogueObject_retain( RogueString::create( "static " ) ); 
  Rogue_literal_strings[403] = (RogueString*) RogueObject_retain( RogueString::create( "// PROPERTIES" ) ); 
  Rogue_literal_strings[404] = (RogueString*) RogueObject_retain( RogueString::create( "() : " ) ); 
  Rogue_literal_strings[405] = (RogueString*) RogueObject_retain( RogueString::create( ", " ) ); 
  Rogue_literal_strings[406] = (RogueString*) RogueObject_retain( RogueString::create( "0" ) ); 
  Rogue_literal_strings[407] = (RogueString*) RogueObject_retain( RogueString::create( " {}" ) ); 
  Rogue_literal_strings[408] = (RogueString*) RogueObject_retain( RogueString::create( "( " ) ); 
  Rogue_literal_strings[409] = (RogueString*) RogueObject_retain( RogueString::create( " value ) : value(value), exists(true) {}" ) ); 
  Rogue_literal_strings[410] = (RogueString*) RogueObject_retain( RogueString::create( " ) : " ) ); 
  Rogue_literal_strings[411] = (RogueString*) RogueObject_retain( RogueString::create( "bool operator==( const " ) ); 
  Rogue_literal_strings[412] = (RogueString*) RogueObject_retain( RogueString::create( " &other ) const" ) ); 
  Rogue_literal_strings[413] = (RogueString*) RogueObject_retain( RogueString::create( "if (exists)\n{\n  if (other.exists) return value == other.value;\n  else              return false;\n}\nelse\n{\n  if (other.exists) return false;\n  else              return true;\n}" ) ); 
  Rogue_literal_strings[414] = (RogueString*) RogueObject_retain( RogueString::create( "  if (" ) ); 
  Rogue_literal_strings[415] = (RogueString*) RogueObject_retain( RogueString::create( " != other." ) ); 
  Rogue_literal_strings[416] = (RogueString*) RogueObject_retain( RogueString::create( ") return false;" ) ); 
  Rogue_literal_strings[417] = (RogueString*) RogueObject_retain( RogueString::create( "  return true;" ) ); 
  Rogue_literal_strings[418] = (RogueString*) RogueObject_retain( RogueString::create( "bool operator!=( const " ) ); 
  Rogue_literal_strings[419] = (RogueString*) RogueObject_retain( RogueString::create( "{\n  return !(*this == other);\n}\n" ) ); 
  Rogue_literal_strings[420] = (RogueString*) RogueObject_retain( RogueString::create( "bool check( " ) ); 
  Rogue_literal_strings[421] = (RogueString*) RogueObject_retain( RogueString::create( "* checked )" ) ); 
  Rogue_literal_strings[422] = (RogueString*) RogueObject_retain( RogueString::create( "{\n  if ( !exists ) return false;\n  *checked = value;\n  return true;\n}\n" ) ); 
  Rogue_literal_strings[423] = (RogueString*) RogueObject_retain( RogueString::create( "};" ) ); 
  Rogue_literal_strings[424] = (RogueString*) RogueObject_retain( RogueString::create( "extern " ) ); 
  Rogue_literal_strings[425] = (RogueString*) RogueObject_retain( RogueString::create( " Rogue" ) ); 
  Rogue_literal_strings[426] = (RogueString*) RogueObject_retain( RogueString::create( "struct RogueProgram : RogueProgramCore" ) ); 
  Rogue_literal_strings[427] = (RogueString*) RogueObject_retain( RogueString::create( "  RogueProgram();" ) ); 
  Rogue_literal_strings[428] = (RogueString*) RogueObject_retain( RogueString::create( "  ~RogueProgram();" ) ); 
  Rogue_literal_strings[429] = (RogueString*) RogueObject_retain( RogueString::create( "  void configure();" ) ); 
  Rogue_literal_strings[430] = (RogueString*) RogueObject_retain( RogueString::create( "  void launch( int argc, char* argv[] );" ) ); 
  Rogue_literal_strings[431] = (RogueString*) RogueObject_retain( RogueString::create( "  //void finish_tasks();" ) ); 
  Rogue_literal_strings[432] = (RogueString*) RogueObject_retain( RogueString::create( "extern RogueType* RogueType" ) ); 
  Rogue_literal_strings[433] = (RogueString*) RogueObject_retain( RogueString::create( " THIS" ) ); 
  Rogue_literal_strings[434] = (RogueString*) RogueObject_retain( RogueString::create( "extern RogueProgram Rogue_program;" ) ); 
  Rogue_literal_strings[435] = (RogueString*) RogueObject_retain( RogueString::create( "void Rogue_trace();" ) ); 
  Rogue_literal_strings[436] = (RogueString*) RogueObject_retain( RogueString::create( ".cpp..." ) ); 
  Rogue_literal_strings[437] = (RogueString*) RogueObject_retain( RogueString::create( "#include <stdio.h>" ) ); 
  Rogue_literal_strings[438] = (RogueString*) RogueObject_retain( RogueString::create( "#include \"" ) ); 
  Rogue_literal_strings[439] = (RogueString*) RogueObject_retain( RogueString::create( ".h\"" ) ); 
  Rogue_literal_strings[440] = (RogueString*) RogueObject_retain( RogueString::create( "(*)(" ) ); 
  Rogue_literal_strings[441] = (RogueString*) RogueObject_retain( RogueString::create( "ROGUEM" ) ); 
  Rogue_literal_strings[442] = (RogueString*) RogueObject_retain( RogueString::create( "typedef " ) ); 
  Rogue_literal_strings[443] = (RogueString*) RogueObject_retain( RogueString::create( "(*)" ) ); 
  Rogue_literal_strings[444] = (RogueString*) RogueObject_retain( RogueString::create( "(*" ) ); 
  Rogue_literal_strings[445] = (RogueString*) RogueObject_retain( RogueString::create( " call_" ) ); 
  Rogue_literal_strings[446] = (RogueString*) RogueObject_retain( RogueString::create( "( int i, " ) ); 
  Rogue_literal_strings[447] = (RogueString*) RogueObject_retain( RogueString::create( " p" ) ); 
  Rogue_literal_strings[448] = (RogueString*) RogueObject_retain( RogueString::create( " )" ) ); 
  Rogue_literal_strings[449] = (RogueString*) RogueObject_retain( RogueString::create( "  " ) ); 
  Rogue_literal_strings[450] = (RogueString*) RogueObject_retain( RogueString::create( "return " ) ); 
  Rogue_literal_strings[451] = (RogueString*) RogueObject_retain( RogueString::create( "((" ) ); 
  Rogue_literal_strings[452] = (RogueString*) RogueObject_retain( RogueString::create( ")(THIS->type->methods[i]))( THIS" ) ); 
  Rogue_literal_strings[453] = (RogueString*) RogueObject_retain( RogueString::create( ", p" ) ); 
  Rogue_literal_strings[454] = (RogueString*) RogueObject_retain( RogueString::create( " );" ) ); 
  Rogue_literal_strings[455] = (RogueString*) RogueObject_retain( RogueString::create( " = " ) ); 
  Rogue_literal_strings[456] = (RogueString*) RogueObject_retain( RogueString::create( "void Rogue" ) ); 
  Rogue_literal_strings[457] = (RogueString*) RogueObject_retain( RogueString::create( "_trace( void* obj );" ) ); 
  Rogue_literal_strings[458] = (RogueString*) RogueObject_retain( RogueString::create( "_trace( void* obj )" ) ); 
  Rogue_literal_strings[459] = (RogueString*) RogueObject_retain( RogueString::create( "void* link;" ) ); 
  Rogue_literal_strings[460] = (RogueString*) RogueObject_retain( RogueString::create( "if ((link=((" ) ); 
  Rogue_literal_strings[461] = (RogueString*) RogueObject_retain( RogueString::create( "*)obj)->" ) ); 
  Rogue_literal_strings[462] = (RogueString*) RogueObject_retain( RogueString::create( ")) ((RogueObject*)link)->type->trace_fn( link );" ) ); 
  Rogue_literal_strings[463] = (RogueString*) RogueObject_retain( RogueString::create( ")) Rogue" ) ); 
  Rogue_literal_strings[464] = (RogueString*) RogueObject_retain( RogueString::create( "_trace( link );" ) ); 
  Rogue_literal_strings[465] = (RogueString*) RogueObject_retain( RogueString::create( "RogueArray* array = (RogueArray*) obj;\nint count;" ) ); 
  Rogue_literal_strings[466] = (RogueString*) RogueObject_retain( RogueString::create( "* cur;" ) ); 
  Rogue_literal_strings[467] = (RogueString*) RogueObject_retain( RogueString::create( "\nif ( !array || array->object_size < 0 ) return;\narray->object_size = ~array->object_size;\n\ncount = array->count;" ) ); 
  Rogue_literal_strings[468] = (RogueString*) RogueObject_retain( RogueString::create( "cur = ((" ) ); 
  Rogue_literal_strings[469] = (RogueString*) RogueObject_retain( RogueString::create( "*)(array->bytes)) - 1;" ) ); 
  Rogue_literal_strings[470] = (RogueString*) RogueObject_retain( RogueString::create( "while (--count >= 0)" ) ); 
  Rogue_literal_strings[471] = (RogueString*) RogueObject_retain( RogueString::create( "  Rogue" ) ); 
  Rogue_literal_strings[472] = (RogueString*) RogueObject_retain( RogueString::create( "_trace( ++cur );" ) ); 
  Rogue_literal_strings[473] = (RogueString*) RogueObject_retain( RogueString::create( "void* link;\n\nif ( !obj || ((RogueObject*)obj)->object_size < 0 ) return;\n((RogueObject*)obj)->object_size = ~((RogueObject*)obj)->object_size;\n" ) ); 
  Rogue_literal_strings[474] = (RogueString*) RogueObject_retain( RogueString::create( "RogueInitFn Rogue_init_object_fn_table[] =" ) ); 
  Rogue_literal_strings[475] = (RogueString*) RogueObject_retain( RogueString::create( "(RogueInitFn) " ) ); 
  Rogue_literal_strings[476] = (RogueString*) RogueObject_retain( RogueString::create( "RogueInitFn Rogue_init_fn_table[] =" ) ); 
  Rogue_literal_strings[477] = (RogueString*) RogueObject_retain( RogueString::create( "RogueTraceFn Rogue_trace_fn_table[] =" ) ); 
  Rogue_literal_strings[478] = (RogueString*) RogueObject_retain( RogueString::create( "RogueArray_trace" ) ); 
  Rogue_literal_strings[479] = (RogueString*) RogueObject_retain( RogueString::create( "_trace" ) ); 
  Rogue_literal_strings[480] = (RogueString*) RogueObject_retain( RogueString::create( "RogueObject_trace" ) ); 
  Rogue_literal_strings[481] = (RogueString*) RogueObject_retain( RogueString::create( "void Rogue_trace()" ) ); 
  Rogue_literal_strings[482] = (RogueString*) RogueObject_retain( RogueString::create( "int i;" ) ); 
  Rogue_literal_strings[483] = (RogueString*) RogueObject_retain( RogueString::create( "// Trace GLOBALS" ) ); 
  Rogue_literal_strings[484] = (RogueString*) RogueObject_retain( RogueString::create( "if ((link=Rogue" ) ); 
  Rogue_literal_strings[485] = (RogueString*) RogueObject_retain( RogueString::create( "// Trace singletons\nfor (i=Rogue_type_count; --i>=0; )\n{\n  RogueType* type = &Rogue_types[i];\n  if (type->_singleton)\n  {\n    type->trace_fn( type->_singleton );\n  }\n}" ) ); 
  Rogue_literal_strings[486] = (RogueString*) RogueObject_retain( RogueString::create( "void* Rogue_dynamic_method_table[] =" ) ); 
  Rogue_literal_strings[487] = (RogueString*) RogueObject_retain( RogueString::create( "(void*) (" ) ); 
  Rogue_literal_strings[488] = (RogueString*) RogueObject_retain( RogueString::create( ") " ) ); 
  Rogue_literal_strings[489] = (RogueString*) RogueObject_retain( RogueString::create( "NULL," ) ); 
  Rogue_literal_strings[490] = (RogueString*) RogueObject_retain( RogueString::create( " // " ) ); 
  Rogue_literal_strings[491] = (RogueString*) RogueObject_retain( RogueString::create( "int Rogue_type_info_table[" ) ); 
  Rogue_literal_strings[492] = (RogueString*) RogueObject_retain( RogueString::create( "] =" ) ); 
  Rogue_literal_strings[493] = (RogueString*) RogueObject_retain( RogueString::create( "// dynamic_method_table_index, base_class_count, base_class_index[base_class_count], ..." ) ); 
  Rogue_literal_strings[494] = (RogueString*) RogueObject_retain( RogueString::create( "\\\"" ) ); 
  Rogue_literal_strings[495] = (RogueString*) RogueObject_retain( RogueString::create( "\"" ) ); 
  Rogue_literal_strings[496] = (RogueString*) RogueObject_retain( RogueString::create( "\\'" ) ); 
  Rogue_literal_strings[497] = (RogueString*) RogueObject_retain( RogueString::create( "\\\\" ) ); 
  Rogue_literal_strings[498] = (RogueString*) RogueObject_retain( RogueString::create( "\\n" ) ); 
  Rogue_literal_strings[499] = (RogueString*) RogueObject_retain( RogueString::create( "int Rogue_object_size_table[" ) ); 
  Rogue_literal_strings[500] = (RogueString*) RogueObject_retain( RogueString::create( "(int) sizeof(" ) ); 
  Rogue_literal_strings[501] = (RogueString*) RogueObject_retain( RogueString::create( "int Rogue_type_count = " ) ); 
  Rogue_literal_strings[502] = (RogueString*) RogueObject_retain( RogueString::create( "RogueType Rogue_types[" ) ); 
  Rogue_literal_strings[503] = (RogueString*) RogueObject_retain( RogueString::create( "];" ) ); 
  Rogue_literal_strings[504] = (RogueString*) RogueObject_retain( RogueString::create( "RogueType* RogueType" ) ); 
  Rogue_literal_strings[505] = (RogueString*) RogueObject_retain( RogueString::create( "int Rogue_literal_string_count = " ) ); 
  Rogue_literal_strings[506] = (RogueString*) RogueObject_retain( RogueString::create( "RogueString* Rogue_literal_strings[" ) ); 
  Rogue_literal_strings[507] = (RogueString*) RogueObject_retain( RogueString::create( "switch (THIS->type->index)" ) ); 
  Rogue_literal_strings[508] = (RogueString*) RogueObject_retain( RogueString::create( "case " ) ); 
  Rogue_literal_strings[509] = (RogueString*) RogueObject_retain( RogueString::create( "  return " ) ); 
  Rogue_literal_strings[510] = (RogueString*) RogueObject_retain( RogueString::create( "( (" ) ); 
  Rogue_literal_strings[511] = (RogueString*) RogueObject_retain( RogueString::create( ")THIS" ) ); 
  Rogue_literal_strings[512] = (RogueString*) RogueObject_retain( RogueString::create( "default:" ) ); 
  Rogue_literal_strings[513] = (RogueString*) RogueObject_retain( RogueString::create( "::write_cpp() is not defined." ) ); 
  Rogue_literal_strings[514] = (RogueString*) RogueObject_retain( RogueString::create( "RogueProgram::RogueProgram()" ) ); 
  Rogue_literal_strings[515] = (RogueString*) RogueObject_retain( RogueString::create( "RogueProgram::~RogueProgram()" ) ); 
  Rogue_literal_strings[516] = (RogueString*) RogueObject_retain( RogueString::create( "void RogueProgram::configure()" ) ); 
  Rogue_literal_strings[517] = (RogueString*) RogueObject_retain( RogueString::create( "Rogue_configure_types();" ) ); 
  Rogue_literal_strings[518] = (RogueString*) RogueObject_retain( RogueString::create( " = &Rogue_types[ " ) ); 
  Rogue_literal_strings[519] = (RogueString*) RogueObject_retain( RogueString::create( " ];" ) ); 
  Rogue_literal_strings[520] = (RogueString*) RogueObject_retain( RogueString::create( "Rogue_literal_strings[" ) ); 
  Rogue_literal_strings[521] = (RogueString*) RogueObject_retain( RogueString::create( "] = (RogueString*) RogueObject_retain( RogueString::create( " ) ); 
  Rogue_literal_strings[522] = (RogueString*) RogueObject_retain( RogueString::create( " ) ); " ) ); 
  Rogue_literal_strings[523] = (RogueString*) RogueObject_retain( RogueString::create( "void RogueProgram::launch( int argc, char* argv[] )" ) ); 
  Rogue_literal_strings[524] = (RogueString*) RogueObject_retain( RogueString::create( "();" ) ); 
  Rogue_literal_strings[525] = (RogueString*) RogueObject_retain( RogueString::create( "RogueSystem_executable_filepath = RogueString::create( argv[0] );" ) ); 
  Rogue_literal_strings[526] = (RogueString*) RogueObject_retain( RogueString::create( "for (int i=1; i<argc; ++i)" ) ); 
  Rogue_literal_strings[527] = (RogueString*) RogueObject_retain( RogueString::create( "  RogueStringList__add__String( RogueSystem_command_line_arguments, RogueString::create( argv[i] ) );" ) ); 
  Rogue_literal_strings[528] = (RogueString*) RogueObject_retain( RogueString::create( "RogueGlobal__on_launch( (RogueClassGlobal*) (RogueType_singleton(RogueTypeGlobal)) );" ) ); 
  Rogue_literal_strings[529] = (RogueString*) RogueObject_retain( RogueString::create( "Rogue_collect_garbage();" ) ); 
  Rogue_literal_strings[530] = (RogueString*) RogueObject_retain( RogueString::create( "RogueProgram Rogue_program;" ) ); 
  Rogue_literal_strings[531] = (RogueString*) RogueObject_retain( RogueString::create( "int main( int argc, char* argv[] )\n{\n  Rogue_program.configure();\n  Rogue_program.launch( argc, argv );\n  //Rogue_program.finish_tasks();\n  return 0;\n}" ) ); 
  Rogue_literal_strings[532] = (RogueString*) RogueObject_retain( RogueString::create( "g++ " ) ); 
  Rogue_literal_strings[533] = (RogueString*) RogueObject_retain( RogueString::create( ".cpp -o " ) ); 
  Rogue_literal_strings[534] = (RogueString*) RogueObject_retain( RogueString::create( " && ./" ) ); 
  Rogue_literal_strings[535] = (RogueString*) RogueObject_retain( RogueString::create( "Compile target \"" ) ); 
  Rogue_literal_strings[536] = (RogueString*) RogueObject_retain( RogueString::create( "\" is not supported." ) ); 
  Rogue_literal_strings[537] = (RogueString*) RogueObject_retain( RogueString::create( "StringReader" ) ); 
  Rogue_literal_strings[538] = (RogueString*) RogueObject_retain( RogueString::create( "Console" ) ); 
  Rogue_literal_strings[539] = (RogueString*) RogueObject_retain( RogueString::create( "RogueC" ) ); 
  Rogue_literal_strings[540] = (RogueString*) RogueObject_retain( RogueString::create( "Program" ) ); 
  Rogue_literal_strings[541] = (RogueString*) RogueObject_retain( RogueString::create( "Template" ) ); 
  Rogue_literal_strings[542] = (RogueString*) RogueObject_retain( RogueString::create( "Table<<String,Template>>" ) ); 
  Rogue_literal_strings[543] = (RogueString*) RogueObject_retain( RogueString::create( "Table<<String,Augment[]>>" ) ); 
  Rogue_literal_strings[544] = (RogueString*) RogueObject_retain( RogueString::create( "RequisiteItem" ) ); 
  Rogue_literal_strings[545] = (RogueString*) RogueObject_retain( RogueString::create( "Method" ) ); 
  Rogue_literal_strings[546] = (RogueString*) RogueObject_retain( RogueString::create( "Table<<String,Method[]>>" ) ); 
  Rogue_literal_strings[547] = (RogueString*) RogueObject_retain( RogueString::create( "Type" ) ); 
  Rogue_literal_strings[548] = (RogueString*) RogueObject_retain( RogueString::create( "Table<<String,Type>>" ) ); 
  Rogue_literal_strings[549] = (RogueString*) RogueObject_retain( RogueString::create( "Table<<String,Integer>>" ) ); 
  Rogue_literal_strings[550] = (RogueString*) RogueObject_retain( RogueString::create( "Token" ) ); 
  Rogue_literal_strings[551] = (RogueString*) RogueObject_retain( RogueString::create( "Attributes" ) ); 
  Rogue_literal_strings[552] = (RogueString*) RogueObject_retain( RogueString::create( "TokenType" ) ); 
  Rogue_literal_strings[553] = (RogueString*) RogueObject_retain( RogueString::create( "CPPWriter" ) ); 
  Rogue_literal_strings[554] = (RogueString*) RogueObject_retain( RogueString::create( "Property" ) ); 
  Rogue_literal_strings[555] = (RogueString*) RogueObject_retain( RogueString::create( "Table<<String,Method>>" ) ); 
  Rogue_literal_strings[556] = (RogueString*) RogueObject_retain( RogueString::create( "Local" ) ); 
  Rogue_literal_strings[557] = (RogueString*) RogueObject_retain( RogueString::create( "Math" ) ); 
  Rogue_literal_strings[558] = (RogueString*) RogueObject_retain( RogueString::create( "System" ) ); 
  Rogue_literal_strings[559] = (RogueString*) RogueObject_retain( RogueString::create( "Table<<String,Logical>>" ) ); 
  Rogue_literal_strings[560] = (RogueString*) RogueObject_retain( RogueString::create( "File" ) ); 
  Rogue_literal_strings[561] = (RogueString*) RogueObject_retain( RogueString::create( "Parser" ) ); 
  Rogue_literal_strings[562] = (RogueString*) RogueObject_retain( RogueString::create( "LineReader" ) ); 
  Rogue_literal_strings[563] = (RogueString*) RogueObject_retain( RogueString::create( "TypeParameter" ) ); 
  Rogue_literal_strings[564] = (RogueString*) RogueObject_retain( RogueString::create( "Augment" ) ); 
  Rogue_literal_strings[565] = (RogueString*) RogueObject_retain( RogueString::create( "Table<<String,TokenType>>" ) ); 
  Rogue_literal_strings[566] = (RogueString*) RogueObject_retain( RogueString::create( "Table<<String,TypeSpecializer>>" ) ); 
  Rogue_literal_strings[567] = (RogueString*) RogueObject_retain( RogueString::create( "TypeSpecializer" ) ); 
  Rogue_literal_strings[568] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,Template>>" ) ); 
  Rogue_literal_strings[569] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,Augment[]>>" ) ); 
  Rogue_literal_strings[570] = (RogueString*) RogueObject_retain( RogueString::create( "Table<<String,CmdLabel>>" ) ); 
  Rogue_literal_strings[571] = (RogueString*) RogueObject_retain( RogueString::create( "CloneArgs" ) ); 
  Rogue_literal_strings[572] = (RogueString*) RogueObject_retain( RogueString::create( "Scope" ) ); 
  Rogue_literal_strings[573] = (RogueString*) RogueObject_retain( RogueString::create( "CmdTaskControlSection" ) ); 
  Rogue_literal_strings[574] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,Method[]>>" ) ); 
  Rogue_literal_strings[575] = (RogueString*) RogueObject_retain( RogueString::create( "Table<<String,Cmd>>" ) ); 
  Rogue_literal_strings[576] = (RogueString*) RogueObject_retain( RogueString::create( "Table<<String,Property>>" ) ); 
  Rogue_literal_strings[577] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,Type>>" ) ); 
  Rogue_literal_strings[578] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,Integer>>" ) ); 
  Rogue_literal_strings[579] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,Method>>" ) ); 
  Rogue_literal_strings[580] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,Logical>>" ) ); 
  Rogue_literal_strings[581] = (RogueString*) RogueObject_retain( RogueString::create( "FileReader" ) ); 
  Rogue_literal_strings[582] = (RogueString*) RogueObject_retain( RogueString::create( "FileWriter" ) ); 
  Rogue_literal_strings[583] = (RogueString*) RogueObject_retain( RogueString::create( "TokenReader" ) ); 
  Rogue_literal_strings[584] = (RogueString*) RogueObject_retain( RogueString::create( "Tokenizer" ) ); 
  Rogue_literal_strings[585] = (RogueString*) RogueObject_retain( RogueString::create( "ParseReader" ) ); 
  Rogue_literal_strings[586] = (RogueString*) RogueObject_retain( RogueString::create( "Preprocessor" ) ); 
  Rogue_literal_strings[587] = (RogueString*) RogueObject_retain( RogueString::create( "FnParam" ) ); 
  Rogue_literal_strings[588] = (RogueString*) RogueObject_retain( RogueString::create( "FnArg" ) ); 
  Rogue_literal_strings[589] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,TokenType>>" ) ); 
  Rogue_literal_strings[590] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,TypeSpecializer>>" ) ); 
  Rogue_literal_strings[591] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,CmdLabel>>" ) ); 
  Rogue_literal_strings[592] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,Cmd>>" ) ); 
  Rogue_literal_strings[593] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,Property>>" ) ); 
  Rogue_literal_strings[594] = (RogueString*) RogueObject_retain( RogueString::create( "Table<<String,Token[]>>" ) ); 
  Rogue_literal_strings[595] = (RogueString*) RogueObject_retain( RogueString::create( "PreprocessorTokenReader" ) ); 
  Rogue_literal_strings[596] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,Token[]>>" ) ); 
  Rogue_literal_strings[597] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<String>>" ) ); 
  Rogue_literal_strings[598] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<Type>>" ) ); 
  Rogue_literal_strings[599] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<RequisiteItem>>" ) ); 
  Rogue_literal_strings[600] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<Template>>" ) ); 
  Rogue_literal_strings[601] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<Method>>" ) ); 
  Rogue_literal_strings[602] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<Property>>" ) ); 
  Rogue_literal_strings[603] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<Local>>" ) ); 
  Rogue_literal_strings[604] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<Integer>>" ) ); 
  Rogue_literal_strings[605] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<Byte>>" ) ); 
  Rogue_literal_strings[606] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<Character>>" ) ); 
  Rogue_literal_strings[607] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<Augment>>" ) ); 
  Rogue_literal_strings[608] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<Token>>" ) ); 
  Rogue_literal_strings[609] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<TypeParameter>>" ) ); 
  Rogue_literal_strings[610] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<TableEntry<<String,Template>>>>" ) ); 
  Rogue_literal_strings[611] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<TableEntry<<String,Augment[]>>>>" ) ); 
  Rogue_literal_strings[612] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<CmdLabel>>" ) ); 
  Rogue_literal_strings[613] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<Cmd>>" ) ); 
  Rogue_literal_strings[614] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<TableEntry<<String,Method[]>>>>" ) ); 
  Rogue_literal_strings[615] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<TableEntry<<String,Type>>>>" ) ); 
  Rogue_literal_strings[616] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<TableEntry<<String,Integer>>>>" ) ); 
  Rogue_literal_strings[617] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<TableEntry<<String,Method>>>>" ) ); 
  Rogue_literal_strings[618] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<TableEntry<<String,Logical>>>>" ) ); 
  Rogue_literal_strings[619] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<TableEntry<<String,TokenType>>>>" ) ); 
  Rogue_literal_strings[620] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<TableEntry<<String,TypeSpecializer>>>>" ) ); 
  Rogue_literal_strings[621] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<TableEntry<<String,CmdLabel>>>>" ) ); 
  Rogue_literal_strings[622] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<CmdControlStructure>>" ) ); 
  Rogue_literal_strings[623] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<CmdTaskControlSection>>" ) ); 
  Rogue_literal_strings[624] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<TableEntry<<String,Cmd>>>>" ) ); 
  Rogue_literal_strings[625] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<TableEntry<<String,Property>>>>" ) ); 
  Rogue_literal_strings[626] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<CmdWhichCase>>" ) ); 
  Rogue_literal_strings[627] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<CmdCatch>>" ) ); 
  Rogue_literal_strings[628] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<FnParam>>" ) ); 
  Rogue_literal_strings[629] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<FnArg>>" ) ); 
  Rogue_literal_strings[630] = (RogueString*) RogueObject_retain( RogueString::create( "Array<<TableEntry<<String,Token[]>>>>" ) ); 
  Rogue_literal_strings[631] = (RogueString*) RogueObject_retain( RogueString::create( "===============================================================================" ) ); 
  Rogue_literal_strings[632] = (RogueString*) RogueObject_retain( RogueString::create( "ERROR in \"" ) ); 
  Rogue_literal_strings[633] = (RogueString*) RogueObject_retain( RogueString::create( "  line " ) ); 
  Rogue_literal_strings[634] = (RogueString*) RogueObject_retain( RogueString::create( ", column " ) ); 
  Rogue_literal_strings[635] = (RogueString*) RogueObject_retain( RogueString::create( "ERROR" ) ); 
  Rogue_literal_strings[636] = (RogueString*) RogueObject_retain( RogueString::create( "RogueError" ) ); 
  Rogue_literal_strings[637] = (RogueString*) RogueObject_retain( RogueString::create( "0.0" ) ); 
  Rogue_literal_strings[638] = (RogueString*) RogueObject_retain( RogueString::create( "EOL  # " ) ); 
  Rogue_literal_strings[639] = (RogueString*) RogueObject_retain( RogueString::create( "LiteralCharacterToken" ) ); 
  Rogue_literal_strings[640] = (RogueString*) RogueObject_retain( RogueString::create( "LiteralLongToken" ) ); 
  Rogue_literal_strings[641] = (RogueString*) RogueObject_retain( RogueString::create( "LiteralIntegerToken" ) ); 
  Rogue_literal_strings[642] = (RogueString*) RogueObject_retain( RogueString::create( "LiteralRealToken" ) ); 
  Rogue_literal_strings[643] = (RogueString*) RogueObject_retain( RogueString::create( "LiteralStringToken" ) ); 
  Rogue_literal_strings[644] = (RogueString*) RogueObject_retain( RogueString::create( "EOLToken" ) ); 
  Rogue_literal_strings[645] = (RogueString*) RogueObject_retain( RogueString::create( "CmdStatement" ) ); 
  Rogue_literal_strings[646] = (RogueString*) RogueObject_retain( RogueString::create( "CmdLabel" ) ); 
  Rogue_literal_strings[647] = (RogueString*) RogueObject_retain( RogueString::create( "CmdAccess" ) ); 
  Rogue_literal_strings[648] = (RogueString*) RogueObject_retain( RogueString::create( "CmdAssign" ) ); 
  Rogue_literal_strings[649] = (RogueString*) RogueObject_retain( RogueString::create( "CmdThisContext" ) ); 
  Rogue_literal_strings[650] = (RogueString*) RogueObject_retain( RogueString::create( "CmdLiteral" ) ); 
  Rogue_literal_strings[651] = (RogueString*) RogueObject_retain( RogueString::create( "CmdBinary" ) ); 
  Rogue_literal_strings[652] = (RogueString*) RogueObject_retain( RogueString::create( "CmdTaskControl" ) ); 
  Rogue_literal_strings[653] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCreateCompound" ) ); 
  Rogue_literal_strings[654] = (RogueString*) RogueObject_retain( RogueString::create( "CmdWriteGlobal" ) ); 
  Rogue_literal_strings[655] = (RogueString*) RogueObject_retain( RogueString::create( "CmdWriteProperty" ) ); 
  Rogue_literal_strings[656] = (RogueString*) RogueObject_retain( RogueString::create( "CmdTypeOperator" ) ); 
  Rogue_literal_strings[657] = (RogueString*) RogueObject_retain( RogueString::create( "CmdUnary" ) ); 
  Rogue_literal_strings[658] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCreateOptionalValue" ) ); 
  Rogue_literal_strings[659] = (RogueString*) RogueObject_retain( RogueString::create( "CmdAwait" ) ); 
  Rogue_literal_strings[660] = (RogueString*) RogueObject_retain( RogueString::create( "CmdYield" ) ); 
  Rogue_literal_strings[661] = (RogueString*) RogueObject_retain( RogueString::create( "CmdThrow" ) ); 
  Rogue_literal_strings[662] = (RogueString*) RogueObject_retain( RogueString::create( "CmdTrace" ) ); 
  Rogue_literal_strings[663] = (RogueString*) RogueObject_retain( RogueString::create( "CmdEscape" ) ); 
  Rogue_literal_strings[664] = (RogueString*) RogueObject_retain( RogueString::create( "CmdNextIteration" ) ); 
  Rogue_literal_strings[665] = (RogueString*) RogueObject_retain( RogueString::create( "CmdNecessary" ) ); 
  Rogue_literal_strings[666] = (RogueString*) RogueObject_retain( RogueString::create( "CmdSufficient" ) ); 
  Rogue_literal_strings[667] = (RogueString*) RogueObject_retain( RogueString::create( "CmdAdjust" ) ); 
  Rogue_literal_strings[668] = (RogueString*) RogueObject_retain( RogueString::create( "CmdOpWithAssign" ) ); 
  Rogue_literal_strings[669] = (RogueString*) RogueObject_retain( RogueString::create( "CmdWhichCase" ) ); 
  Rogue_literal_strings[670] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCatch" ) ); 
  Rogue_literal_strings[671] = (RogueString*) RogueObject_retain( RogueString::create( "CmdAdjustLocal" ) ); 
  Rogue_literal_strings[672] = (RogueString*) RogueObject_retain( RogueString::create( "CmdReadLocal" ) ); 
  Rogue_literal_strings[673] = (RogueString*) RogueObject_retain( RogueString::create( "CmdRange" ) ); 
  Rogue_literal_strings[674] = (RogueString*) RogueObject_retain( RogueString::create( "CmdResolvedOpWithAssign" ) ); 
  Rogue_literal_strings[675] = (RogueString*) RogueObject_retain( RogueString::create( "CmdGetOptionalValue" ) ); 
  Rogue_literal_strings[676] = (RogueString*) RogueObject_retain( RogueString::create( "CmdElementAccess" ) ); 
  Rogue_literal_strings[677] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCreateCallback" ) ); 
  Rogue_literal_strings[678] = (RogueString*) RogueObject_retain( RogueString::create( "CmdFormattedString" ) ); 
  Rogue_literal_strings[679] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCreateList" ) ); 
  Rogue_literal_strings[680] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCallPriorMethod" ) ); 
  Rogue_literal_strings[681] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCreateFunction" ) ); 
  Rogue_literal_strings[682] = (RogueString*) RogueObject_retain( RogueString::create( "CmdNativeCode" ) ); 
  Rogue_literal_strings[683] = (RogueString*) RogueObject_retain( RogueString::create( "Illegal arguments on inline code." ) ); 
  Rogue_literal_strings[684] = (RogueString*) RogueObject_retain( RogueString::create( "[INTERNAL] CmdAwait should have been converted to other commands before being adapted to a task." ) ); 
  Rogue_literal_strings[685] = (RogueString*) RogueObject_retain( RogueString::create( "Value expected; this statement or expression does not result in a value." ) ); 
  Rogue_literal_strings[686] = (RogueString*) RogueObject_retain( RogueString::create( "Array count expected." ) ); 
  Rogue_literal_strings[687] = (RogueString*) RogueObject_retain( RogueString::create( "Integer value expected." ) ); 
  Rogue_literal_strings[688] = (RogueString*) RogueObject_retain( RogueString::create( "No such method or variable \"" ) ); 
  Rogue_literal_strings[689] = (RogueString*) RogueObject_retain( RogueString::create( "\" exists in current scope of type " ) ); 
  Rogue_literal_strings[690] = (RogueString*) RogueObject_retain( RogueString::create( "Multiple methods match ambiguous call to " ) ); 
  Rogue_literal_strings[691] = (RogueString*) RogueObject_retain( RogueString::create( ":\n\n" ) ); 
  Rogue_literal_strings[692] = (RogueString*) RogueObject_retain( RogueString::create( "Call to " ) ); 
  Rogue_literal_strings[693] = (RogueString*) RogueObject_retain( RogueString::create( " has arguments that are incompatible with the best candidate:\n\n" ) ); 
  Rogue_literal_strings[694] = (RogueString*) RogueObject_retain( RogueString::create( "to_Object" ) ); 
  Rogue_literal_strings[695] = (RogueString*) RogueObject_retain( RogueString::create( "Cannot call a method from a routine without an object context (obj." ) ); 
  Rogue_literal_strings[696] = (RogueString*) RogueObject_retain( RogueString::create( "()(...))." ) ); 
  Rogue_literal_strings[697] = (RogueString*) RogueObject_retain( RogueString::create( "Type name expected, e.g. \"" ) ); 
  Rogue_literal_strings[698] = (RogueString*) RogueObject_retain( RogueString::create( ".\"." ) ); 
  Rogue_literal_strings[699] = (RogueString*) RogueObject_retain( RogueString::create( "Type name expected." ) ); 
  Rogue_literal_strings[700] = (RogueString*) RogueObject_retain( RogueString::create( "TODO: multi-line inline statements" ) ); 
  Rogue_literal_strings[701] = (RogueString*) RogueObject_retain( RogueString::create( "count" ) ); 
  Rogue_literal_strings[702] = (RogueString*) RogueObject_retain( RogueString::create( "Invalid arguments to array count." ) ); 
  Rogue_literal_strings[703] = (RogueString*) RogueObject_retain( RogueString::create( "Scope::resolve_call():136 " ) ); 
  Rogue_literal_strings[704] = (RogueString*) RogueObject_retain( RogueString::create( "CmdAccess::resolve():1607 ;throwt.error([INTERNAL])" ) ); 
  Rogue_literal_strings[705] = (RogueString*) RogueObject_retain( RogueString::create( "Recursive call to getter " ) ); 
  Rogue_literal_strings[706] = (RogueString*) RogueObject_retain( RogueString::create( "() - write @" ) ); 
  Rogue_literal_strings[707] = (RogueString*) RogueObject_retain( RogueString::create( " instead." ) ); 
  Rogue_literal_strings[708] = (RogueString*) RogueObject_retain( RogueString::create( "Cannot access object properties from routines - routines have no 'this' object context." ) ); 
  Rogue_literal_strings[709] = (RogueString*) RogueObject_retain( RogueString::create( "exists" ) ); 
  Rogue_literal_strings[710] = (RogueString*) RogueObject_retain( RogueString::create( "Optional value existence check takes no arguments." ) ); 
  Rogue_literal_strings[711] = (RogueString*) RogueObject_retain( RogueString::create( "value" ) ); 
  Rogue_literal_strings[712] = (RogueString*) RogueObject_retain( RogueString::create( "Optional value retrieval takes no arguments." ) ); 
  Rogue_literal_strings[713] = (RogueString*) RogueObject_retain( RogueString::create( "'exists' and 'value' are the only valid properties of an optional type." ) ); 
  Rogue_literal_strings[714] = (RogueString*) RogueObject_retain( RogueString::create( "Invalid assignment." ) ); 
  Rogue_literal_strings[715] = (RogueString*) RogueObject_retain( RogueString::create( "::fn_name() is not defined." ) ); 
  Rogue_literal_strings[716] = (RogueString*) RogueObject_retain( RogueString::create( "Types " ) ); 
  Rogue_literal_strings[717] = (RogueString*) RogueObject_retain( RogueString::create( " are incompatible." ) ); 
  Rogue_literal_strings[718] = (RogueString*) RogueObject_retain( RogueString::create( "Caught value must be instanceOf class Error." ) ); 
  Rogue_literal_strings[719] = (RogueString*) RogueObject_retain( RogueString::create( "try/catch blocks cannot contain 'yield' statements." ) ); 
  Rogue_literal_strings[720] = (RogueString*) RogueObject_retain( RogueString::create( "The 'await' command can only be used in [task] methods." ) ); 
  Rogue_literal_strings[721] = (RogueString*) RogueObject_retain( RogueString::create( "Task method does not return a result.  Ensure you are not awaiting a task method that calls start() - remove the call to start()." ) ); 
  Rogue_literal_strings[722] = (RogueString*) RogueObject_retain( RogueString::create( "The 'yield' statement can only be used in [task] methods." ) ); 
  Rogue_literal_strings[723] = (RogueString*) RogueObject_retain( RogueString::create( "Thrown value must be instanceOf class Error." ) ); 
  Rogue_literal_strings[724] = (RogueString*) RogueObject_retain( RogueString::create( "println" ) ); 
  Rogue_literal_strings[725] = (RogueString*) RogueObject_retain( RogueString::create( "No enclosing structure to escape." ) ); 
  Rogue_literal_strings[726] = (RogueString*) RogueObject_retain( RogueString::create( "No enclosing loop for 'nextIteration' to affect." ) ); 
  Rogue_literal_strings[727] = (RogueString*) RogueObject_retain( RogueString::create( "No enclosing contingent." ) ); 
  Rogue_literal_strings[728] = (RogueString*) RogueObject_retain( RogueString::create( "Invalid target for increment/decrement." ) ); 
  Rogue_literal_strings[729] = (RogueString*) RogueObject_retain( RogueString::create( "Cannot determine type of local variable - either assign an initial value (local " ) ); 
  Rogue_literal_strings[730] = (RogueString*) RogueObject_retain( RogueString::create( " = ...) or assign a type (local " ) ); 
  Rogue_literal_strings[731] = (RogueString*) RogueObject_retain( RogueString::create( " : Integer)." ) ); 
  Rogue_literal_strings[732] = (RogueString*) RogueObject_retain( RogueString::create( "No suitable operator method found; type " ) ); 
  Rogue_literal_strings[733] = (RogueString*) RogueObject_retain( RogueString::create( " implements neither " ) ); 
  Rogue_literal_strings[734] = (RogueString*) RogueObject_retain( RogueString::create( "()(" ) ); 
  Rogue_literal_strings[735] = (RogueString*) RogueObject_retain( RogueString::create( ") nor " ) ); 
  Rogue_literal_strings[736] = (RogueString*) RogueObject_retain( RogueString::create( "=(" ) ); 
  Rogue_literal_strings[737] = (RogueString*) RogueObject_retain( RogueString::create( "Property or method name expected." ) ); 
  Rogue_literal_strings[738] = (RogueString*) RogueObject_retain( RogueString::create( "Property or method name expected - '.=' cannot be used with a chain of references." ) ); 
  Rogue_literal_strings[739] = (RogueString*) RogueObject_retain( RogueString::create( "count()" ) ); 
  Rogue_literal_strings[740] = (RogueString*) RogueObject_retain( RogueString::create( "at(Integer)" ) ); 
  Rogue_literal_strings[741] = (RogueString*) RogueObject_retain( RogueString::create( "get(Integer)" ) ); 
  Rogue_literal_strings[742] = (RogueString*) RogueObject_retain( RogueString::create( "Literal integer value expected." ) ); 
  Rogue_literal_strings[743] = (RogueString*) RogueObject_retain( RogueString::create( "has_another" ) ); 
  Rogue_literal_strings[744] = (RogueString*) RogueObject_retain( RogueString::create( "has_another()" ) ); 
  Rogue_literal_strings[745] = (RogueString*) RogueObject_retain( RogueString::create( "read()" ) ); 
  Rogue_literal_strings[746] = (RogueString*) RogueObject_retain( RogueString::create( "Illegal iteration target - forEach requires either an indexed collection (.count, .get/.at) or a reader (.has_another, .read)." ) ); 
  Rogue_literal_strings[747] = (RogueString*) RogueObject_retain( RogueString::create( "Object's read() method does not return a value." ) ); 
  Rogue_literal_strings[748] = (RogueString*) RogueObject_retain( RogueString::create( "Cannot specify a step size for a reader - only for an indexed collection." ) ); 
  Rogue_literal_strings[749] = (RogueString*) RogueObject_retain( RogueString::create( "read" ) ); 
  Rogue_literal_strings[750] = (RogueString*) RogueObject_retain( RogueString::create( "The optional value retriever ('!') can only be used on optional values." ) ); 
  Rogue_literal_strings[751] = (RogueString*) RogueObject_retain( RogueString::create( "get" ) ); 
  Rogue_literal_strings[752] = (RogueString*) RogueObject_retain( RogueString::create( "No such method or routine '" ) ); 
  Rogue_literal_strings[753] = (RogueString*) RogueObject_retain( RogueString::create( "' exists in type " ) ); 
  Rogue_literal_strings[754] = (RogueString*) RogueObject_retain( RogueString::create( "Multiple candidates match ambiguous reference to '" ) ); 
  Rogue_literal_strings[755] = (RogueString*) RogueObject_retain( RogueString::create( "'; add qualifiying parameter types." ) ); 
  Rogue_literal_strings[756] = (RogueString*) RogueObject_retain( RogueString::create( "More arguments than format markers ('$') in formatted string." ) ); 
  Rogue_literal_strings[757] = (RogueString*) RogueObject_retain( RogueString::create( "print" ) ); 
  Rogue_literal_strings[758] = (RogueString*) RogueObject_retain( RogueString::create( "More format markers ('$') than arguments in formatted string." ) ); 
  Rogue_literal_strings[759] = (RogueString*) RogueObject_retain( RogueString::create( "TODO: [] -> Property[]" ) ); 
  Rogue_literal_strings[760] = (RogueString*) RogueObject_retain( RogueString::create( "add" ) ); 
  Rogue_literal_strings[761] = (RogueString*) RogueObject_retain( RogueString::create( "Illegal target - 'prior' can only be used to call overridden methods." ) ); 
  Rogue_literal_strings[762] = (RogueString*) RogueObject_retain( RogueString::create( "Function_" ) ); 
  Rogue_literal_strings[763] = (RogueString*) RogueObject_retain( RogueString::create( "The result of a call cannot assigned to." ) ); 
  Rogue_literal_strings[764] = (RogueString*) RogueObject_retain( RogueString::create( "set_" ) ); 
  Rogue_literal_strings[765] = (RogueString*) RogueObject_retain( RogueString::create( "Recursive call to setter set_" ) ); 
  Rogue_literal_strings[766] = (RogueString*) RogueObject_retain( RogueString::create( "() - write \"@" ) ); 
  Rogue_literal_strings[767] = (RogueString*) RogueObject_retain( RogueString::create( " = ...\" instead." ) ); 
  Rogue_literal_strings[768] = (RogueString*) RogueObject_retain( RogueString::create( "\" exists in the current scope." ) ); 
  Rogue_literal_strings[769] = (RogueString*) RogueObject_retain( RogueString::create( "set" ) ); 
  Rogue_literal_strings[770] = (RogueString*) RogueObject_retain( RogueString::create( "Local variable '" ) ); 
  Rogue_literal_strings[771] = (RogueString*) RogueObject_retain( RogueString::create( "' cannot be called like a method." ) ); 
  Rogue_literal_strings[772] = (RogueString*) RogueObject_retain( RogueString::create( "::type() is not defined (access name '" ) ); 
  Rogue_literal_strings[773] = (RogueString*) RogueObject_retain( RogueString::create( "')." ) ); 
  Rogue_literal_strings[774] = (RogueString*) RogueObject_retain( RogueString::create( "return (" ) ); 
  Rogue_literal_strings[775] = (RogueString*) RogueObject_retain( RogueString::create( ")(" ) ); 
  Rogue_literal_strings[776] = (RogueString*) RogueObject_retain( RogueString::create( "::write_cpp() is not defined (access name " ) ); 
  Rogue_literal_strings[777] = (RogueString*) RogueObject_retain( RogueString::create( "THIS" ) ); 
  Rogue_literal_strings[778] = (RogueString*) RogueObject_retain( RogueString::create( "for (;" ) ); 
  Rogue_literal_strings[779] = (RogueString*) RogueObject_retain( RogueString::create( "while (" ) ); 
  Rogue_literal_strings[780] = (RogueString*) RogueObject_retain( RogueString::create( ":;" ) ); 
  Rogue_literal_strings[781] = (RogueString*) RogueObject_retain( RogueString::create( "::symbol() is not defined." ) ); 
  Rogue_literal_strings[782] = (RogueString*) RogueObject_retain( RogueString::create( "switch (++THIS->ip)" ) ); 
  Rogue_literal_strings[783] = (RogueString*) RogueObject_retain( RogueString::create( "  THIS->ip = -1;" ) ); 
  Rogue_literal_strings[784] = (RogueString*) RogueObject_retain( RogueString::create( "  return false;" ) ); 
  Rogue_literal_strings[785] = (RogueString*) RogueObject_retain( RogueString::create( "NULL" ) ); 
  Rogue_literal_strings[786] = (RogueString*) RogueObject_retain( RogueString::create( "))" ) ); 
  Rogue_literal_strings[787] = (RogueString*) RogueObject_retain( RogueString::create( "if (" ) ); 
  Rogue_literal_strings[788] = (RogueString*) RogueObject_retain( RogueString::create( "else " ) ); 
  Rogue_literal_strings[789] = (RogueString*) RogueObject_retain( RogueString::create( "goto " ) ); 
  Rogue_literal_strings[790] = (RogueString*) RogueObject_retain( RogueString::create( "catch ( " ) ); 
  Rogue_literal_strings[791] = (RogueString*) RogueObject_retain( RogueString::create( "throw " ) ); 
  Rogue_literal_strings[792] = (RogueString*) RogueObject_retain( RogueString::create( "continue" ) ); 
  Rogue_literal_strings[793] = (RogueString*) RogueObject_retain( RogueString::create( "if ( !(" ) ); 
  Rogue_literal_strings[794] = (RogueString*) RogueObject_retain( RogueString::create( ") ) goto " ) ); 
  Rogue_literal_strings[795] = (RogueString*) RogueObject_retain( RogueString::create( ") goto " ) ); 
  Rogue_literal_strings[796] = (RogueString*) RogueObject_retain( RogueString::create( "RogueObject_instance_of(" ) ); 
  Rogue_literal_strings[797] = (RogueString*) RogueObject_retain( RogueString::create( ".value" ) ); 
  Rogue_literal_strings[798] = (RogueString*) RogueObject_retain( RogueString::create( ")(RogueObject_as(" ) ); 
  Rogue_literal_strings[799] = (RogueString*) RogueObject_retain( RogueString::create( ")))" ) ); 
  Rogue_literal_strings[800] = (RogueString*) RogueObject_retain( RogueString::create( "LL" ) ); 
  Rogue_literal_strings[801] = (RogueString*) RogueObject_retain( RogueString::create( "(RogueCharacter)" ) ); 
  Rogue_literal_strings[802] = (RogueString*) RogueObject_retain( RogueString::create( "'\\n'" ) ); 
  Rogue_literal_strings[803] = (RogueString*) RogueObject_retain( RogueString::create( "'\\\\'" ) ); 
  Rogue_literal_strings[804] = (RogueString*) RogueObject_retain( RogueString::create( "'\\''" ) ); 
  Rogue_literal_strings[805] = (RogueString*) RogueObject_retain( RogueString::create( "THIS->" ) ); 
  Rogue_literal_strings[806] = (RogueString*) RogueObject_retain( RogueString::create( " is not a singleton." ) ); 
  Rogue_literal_strings[807] = (RogueString*) RogueObject_retain( RogueString::create( ")ROGUE_SINGLETON(" ) ); 
  Rogue_literal_strings[808] = (RogueString*) RogueObject_retain( RogueString::create( "RogueArray::create( " ) ); 
  Rogue_literal_strings[809] = (RogueString*) RogueObject_retain( RogueString::create( ", sizeof(" ) ); 
  Rogue_literal_strings[810] = (RogueString*) RogueObject_retain( RogueString::create( ", true" ) ); 
  Rogue_literal_strings[811] = (RogueString*) RogueObject_retain( RogueString::create( "ROGUE_CREATE_OBJECT(" ) ); 
  Rogue_literal_strings[812] = (RogueString*) RogueObject_retain( RogueString::create( "!!" ) ); 
  Rogue_literal_strings[813] = (RogueString*) RogueObject_retain( RogueString::create( ".exists" ) ); 
  Rogue_literal_strings[814] = (RogueString*) RogueObject_retain( RogueString::create( "Illegal use of '$this' in routine." ) ); 
  Rogue_literal_strings[815] = (RogueString*) RogueObject_retain( RogueString::create( "->count" ) ); 
  Rogue_literal_strings[816] = (RogueString*) RogueObject_retain( RogueString::create( "call_" ) ); 
  Rogue_literal_strings[817] = (RogueString*) RogueObject_retain( RogueString::create( "switch (" ) ); 
  Rogue_literal_strings[818] = (RogueString*) RogueObject_retain( RogueString::create( "break;" ) ); 
  Rogue_literal_strings[819] = (RogueString*) RogueObject_retain( RogueString::create( "->objects[" ) ); 
  Rogue_literal_strings[820] = (RogueString*) RogueObject_retain( RogueString::create( "]))" ) ); 
  Rogue_literal_strings[821] = (RogueString*) RogueObject_retain( RogueString::create( "reals[" ) ); 
  Rogue_literal_strings[822] = (RogueString*) RogueObject_retain( RogueString::create( "floats[" ) ); 
  Rogue_literal_strings[823] = (RogueString*) RogueObject_retain( RogueString::create( "longs[" ) ); 
  Rogue_literal_strings[824] = (RogueString*) RogueObject_retain( RogueString::create( "integers[" ) ); 
  Rogue_literal_strings[825] = (RogueString*) RogueObject_retain( RogueString::create( "characters[" ) ); 
  Rogue_literal_strings[826] = (RogueString*) RogueObject_retain( RogueString::create( "bytes[" ) ); 
  Rogue_literal_strings[827] = (RogueString*) RogueObject_retain( RogueString::create( "logical[" ) ); 
  Rogue_literal_strings[828] = (RogueString*) RogueObject_retain( RogueString::create( "[INTERNAL] Unhandled type in CmdReadArrayElement." ) ); 
  Rogue_literal_strings[829] = (RogueString*) RogueObject_retain( RogueString::create( "*)(" ) ); 
  Rogue_literal_strings[830] = (RogueString*) RogueObject_retain( RogueString::create( "->bytes))[" ) ); 
  Rogue_literal_strings[831] = (RogueString*) RogueObject_retain( RogueString::create( "] = " ) ); 
  Rogue_literal_strings[832] = (RogueString*) RogueObject_retain( RogueString::create( "objects[" ) ); 
  Rogue_literal_strings[833] = (RogueString*) RogueObject_retain( RogueString::create( " is not an override - no prior version of it exists." ) ); 
  Rogue_literal_strings[834] = (RogueString*) RogueObject_retain( RogueString::create( "CmdReturn" ) ); 
  Rogue_literal_strings[835] = (RogueString*) RogueObject_retain( RogueString::create( "CmdControlStructure" ) ); 
  Rogue_literal_strings[836] = (RogueString*) RogueObject_retain( RogueString::create( "CmdLocalDeclaration" ) ); 
  Rogue_literal_strings[837] = (RogueString*) RogueObject_retain( RogueString::create( "DirectiveTokenType" ) ); 
  Rogue_literal_strings[838] = (RogueString*) RogueObject_retain( RogueString::create( "StructuralDirectiveTokenType" ) ); 
  Rogue_literal_strings[839] = (RogueString*) RogueObject_retain( RogueString::create( "EOLTokenType" ) ); 
  Rogue_literal_strings[840] = (RogueString*) RogueObject_retain( RogueString::create( "StructureTokenType" ) ); 
  Rogue_literal_strings[841] = (RogueString*) RogueObject_retain( RogueString::create( "OpWithAssignTokenType" ) ); 
  Rogue_literal_strings[842] = (RogueString*) RogueObject_retain( RogueString::create( "CloneMethodArgs" ) ); 
  Rogue_literal_strings[843] = (RogueString*) RogueObject_retain( RogueString::create( "TaskArgs" ) ); 
  Rogue_literal_strings[844] = (RogueString*) RogueObject_retain( RogueString::create( "MacroArgs" ) ); 
  Rogue_literal_strings[845] = (RogueString*) RogueObject_retain( RogueString::create( "CmdGenericLoop" ) ); 
  Rogue_literal_strings[846] = (RogueString*) RogueObject_retain( RogueString::create( "CmdIf" ) ); 
  Rogue_literal_strings[847] = (RogueString*) RogueObject_retain( RogueString::create( "CmdWhich" ) ); 
  Rogue_literal_strings[848] = (RogueString*) RogueObject_retain( RogueString::create( "CmdContingent" ) ); 
  Rogue_literal_strings[849] = (RogueString*) RogueObject_retain( RogueString::create( "CmdTry" ) ); 
  Rogue_literal_strings[850] = (RogueString*) RogueObject_retain( RogueString::create( "CmdForEach" ) ); 
  Rogue_literal_strings[851] = (RogueString*) RogueObject_retain( RogueString::create( "CmdBlock" ) ); 
  Rogue_literal_strings[852] = (RogueString*) RogueObject_retain( RogueString::create( "CmdSwitch" ) ); 
  Rogue_literal_strings[853] = (RogueString*) RogueObject_retain( RogueString::create( "CmdLiteralThis" ) ); 
  Rogue_literal_strings[854] = (RogueString*) RogueObject_retain( RogueString::create( "Invalid reference to 'this' object - routines have no object context." ) ); 
  Rogue_literal_strings[855] = (RogueString*) RogueObject_retain( RogueString::create( "CmdLiteralInteger" ) ); 
  Rogue_literal_strings[856] = (RogueString*) RogueObject_retain( RogueString::create( "CmdLiteralNull" ) ); 
  Rogue_literal_strings[857] = (RogueString*) RogueObject_retain( RogueString::create( "CmdLiteralLogical" ) ); 
  Rogue_literal_strings[858] = (RogueString*) RogueObject_retain( RogueString::create( "CmdLiteralString" ) ); 
  Rogue_literal_strings[859] = (RogueString*) RogueObject_retain( RogueString::create( "CmdDefaultValue" ) ); 
  Rogue_literal_strings[860] = (RogueString*) RogueObject_retain( RogueString::create( "CmdLiteralReal" ) ); 
  Rogue_literal_strings[861] = (RogueString*) RogueObject_retain( RogueString::create( "CmdLiteralLong" ) ); 
  Rogue_literal_strings[862] = (RogueString*) RogueObject_retain( RogueString::create( "CmdLiteralCharacter" ) ); 
  Rogue_literal_strings[863] = (RogueString*) RogueObject_retain( RogueString::create( "CmdBinaryLogical" ) ); 
  Rogue_literal_strings[864] = (RogueString*) RogueObject_retain( RogueString::create( "::combine_literal_operands(Logical,Logical) is not defined." ) ); 
  Rogue_literal_strings[865] = (RogueString*) RogueObject_retain( RogueString::create( "shift_right" ) ); 
  Rogue_literal_strings[866] = (RogueString*) RogueObject_retain( RogueString::create( "mod" ) ); 
  Rogue_literal_strings[867] = (RogueString*) RogueObject_retain( RogueString::create( ") pow((double)" ) ); 
  Rogue_literal_strings[868] = (RogueString*) RogueObject_retain( RogueString::create( ", (double)" ) ); 
  Rogue_literal_strings[869] = (RogueString*) RogueObject_retain( RogueString::create( "operator+" ) ); 
  Rogue_literal_strings[870] = (RogueString*) RogueObject_retain( RogueString::create( "operator-" ) ); 
  Rogue_literal_strings[871] = (RogueString*) RogueObject_retain( RogueString::create( "operator*" ) ); 
  Rogue_literal_strings[872] = (RogueString*) RogueObject_retain( RogueString::create( "operator/" ) ); 
  Rogue_literal_strings[873] = (RogueString*) RogueObject_retain( RogueString::create( "operator%" ) ); 
  Rogue_literal_strings[874] = (RogueString*) RogueObject_retain( RogueString::create( "operator^" ) ); 
  Rogue_literal_strings[875] = (RogueString*) RogueObject_retain( RogueString::create( "The '" ) ); 
  Rogue_literal_strings[876] = (RogueString*) RogueObject_retain( RogueString::create( "' operator cannot be applied to type " ) ); 
  Rogue_literal_strings[877] = (RogueString*) RogueObject_retain( RogueString::create( "&&" ) ); 
  Rogue_literal_strings[878] = (RogueString*) RogueObject_retain( RogueString::create( "CmdComparison" ) ); 
  Rogue_literal_strings[879] = (RogueString*) RogueObject_retain( RogueString::create( "CmdAdd" ) ); 
  Rogue_literal_strings[880] = (RogueString*) RogueObject_retain( RogueString::create( "CmdBitwiseOp" ) ); 
  Rogue_literal_strings[881] = (RogueString*) RogueObject_retain( RogueString::create( "CmdSubtract" ) ); 
  Rogue_literal_strings[882] = (RogueString*) RogueObject_retain( RogueString::create( "CmdMultiply" ) ); 
  Rogue_literal_strings[883] = (RogueString*) RogueObject_retain( RogueString::create( "CmdDivide" ) ); 
  Rogue_literal_strings[884] = (RogueString*) RogueObject_retain( RogueString::create( "CmdMod" ) ); 
  Rogue_literal_strings[885] = (RogueString*) RogueObject_retain( RogueString::create( "CmdPower" ) ); 
  Rogue_literal_strings[886] = (RogueString*) RogueObject_retain( RogueString::create( "[INTERNAL] $::resolve_for_reference() is undefined." ) ); 
  Rogue_literal_strings[887] = (RogueString*) RogueObject_retain( RogueString::create( "Incompatible types for comparison: " ) ); 
  Rogue_literal_strings[888] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCastToType" ) ); 
  Rogue_literal_strings[889] = (RogueString*) RogueObject_retain( RogueString::create( "CmdInstanceOf" ) ); 
  Rogue_literal_strings[890] = (RogueString*) RogueObject_retain( RogueString::create( "CmdConvertToType" ) ); 
  Rogue_literal_strings[891] = (RogueString*) RogueObject_retain( RogueString::create( "CmdAs" ) ); 
  Rogue_literal_strings[892] = (RogueString*) RogueObject_retain( RogueString::create( "CmdLogicalize" ) ); 
  Rogue_literal_strings[893] = (RogueString*) RogueObject_retain( RogueString::create( "CmdLogicalNot" ) ); 
  Rogue_literal_strings[894] = (RogueString*) RogueObject_retain( RogueString::create( "CmdNegate" ) ); 
  Rogue_literal_strings[895] = (RogueString*) RogueObject_retain( RogueString::create( "CmdBitwiseNot" ) ); 
  Rogue_literal_strings[896] = (RogueString*) RogueObject_retain( RogueString::create( "not " ) ); 
  Rogue_literal_strings[897] = (RogueString*) RogueObject_retain( RogueString::create( "(-" ) ); 
  Rogue_literal_strings[898] = (RogueString*) RogueObject_retain( RogueString::create( "[INTERNAL] TODO: 'is' for compounds." ) ); 
  Rogue_literal_strings[899] = (RogueString*) RogueObject_retain( RogueString::create( "Cannot use 'isNot' between mixed type categories " ) ); 
  Rogue_literal_strings[900] = (RogueString*) RogueObject_retain( RogueString::create( "CmdRangeUpTo" ) ); 
  Rogue_literal_strings[901] = (RogueString*) RogueObject_retain( RogueString::create( "CmdLocalOpWithAssign" ) ); 
  Rogue_literal_strings[902] = (RogueString*) RogueObject_retain( RogueString::create( "CmdOpAssignGlobal" ) ); 
  Rogue_literal_strings[903] = (RogueString*) RogueObject_retain( RogueString::create( "CmdOpAssignProperty" ) ); 
  Rogue_literal_strings[904] = (RogueString*) RogueObject_retain( RogueString::create( "CmdLogicalXor" ) ); 
  Rogue_literal_strings[905] = (RogueString*) RogueObject_retain( RogueString::create( "CmdLogicalOr" ) ); 
  Rogue_literal_strings[906] = (RogueString*) RogueObject_retain( RogueString::create( "CmdLogicalAnd" ) ); 
  Rogue_literal_strings[907] = (RogueString*) RogueObject_retain( RogueString::create( "operator!=" ) ); 
  Rogue_literal_strings[908] = (RogueString*) RogueObject_retain( RogueString::create( "operator<>" ) ); 
  Rogue_literal_strings[909] = (RogueString*) RogueObject_retain( RogueString::create( "operator==" ) ); 
  Rogue_literal_strings[910] = (RogueString*) RogueObject_retain( RogueString::create( "operator<=" ) ); 
  Rogue_literal_strings[911] = (RogueString*) RogueObject_retain( RogueString::create( "operator>" ) ); 
  Rogue_literal_strings[912] = (RogueString*) RogueObject_retain( RogueString::create( "operator>=" ) ); 
  Rogue_literal_strings[913] = (RogueString*) RogueObject_retain( RogueString::create( "operator<" ) ); 
  Rogue_literal_strings[914] = (RogueString*) RogueObject_retain( RogueString::create( "CmdBitwiseXor" ) ); 
  Rogue_literal_strings[915] = (RogueString*) RogueObject_retain( RogueString::create( "CmdBitwiseOr" ) ); 
  Rogue_literal_strings[916] = (RogueString*) RogueObject_retain( RogueString::create( "CmdBitwiseAnd" ) ); 
  Rogue_literal_strings[917] = (RogueString*) RogueObject_retain( RogueString::create( "CmdBitwiseShiftLeft" ) ); 
  Rogue_literal_strings[918] = (RogueString*) RogueObject_retain( RogueString::create( "CmdBitwiseShiftRight" ) ); 
  Rogue_literal_strings[919] = (RogueString*) RogueObject_retain( RogueString::create( "CmdBitwiseShiftRightX" ) ); 
  Rogue_literal_strings[920] = (RogueString*) RogueObject_retain( RogueString::create( "CmdConvertToPrimitiveType" ) ); 
  Rogue_literal_strings[921] = (RogueString*) RogueObject_retain( RogueString::create( "Character[]" ) ); 
  Rogue_literal_strings[922] = (RogueString*) RogueObject_retain( RogueString::create( "String[]" ) ); 
  Rogue_literal_strings[923] = (RogueString*) RogueObject_retain( RogueString::create( "Template[]" ) ); 
  Rogue_literal_strings[924] = (RogueString*) RogueObject_retain( RogueString::create( "RequisiteItem[]" ) ); 
  Rogue_literal_strings[925] = (RogueString*) RogueObject_retain( RogueString::create( "Type[]" ) ); 
  Rogue_literal_strings[926] = (RogueString*) RogueObject_retain( RogueString::create( "Cmd[]" ) ); 
  Rogue_literal_strings[927] = (RogueString*) RogueObject_retain( RogueString::create( "Method[]" ) ); 
  Rogue_literal_strings[928] = (RogueString*) RogueObject_retain( RogueString::create( "Property[]" ) ); 
  Rogue_literal_strings[929] = (RogueString*) RogueObject_retain( RogueString::create( "Local[]" ) ); 
  Rogue_literal_strings[930] = (RogueString*) RogueObject_retain( RogueString::create( "Integer[]" ) ); 
  Rogue_literal_strings[931] = (RogueString*) RogueObject_retain( RogueString::create( "Byte[]" ) ); 
  Rogue_literal_strings[932] = (RogueString*) RogueObject_retain( RogueString::create( "Token[]" ) ); 
  Rogue_literal_strings[933] = (RogueString*) RogueObject_retain( RogueString::create( "TypeParameter[]" ) ); 
  Rogue_literal_strings[934] = (RogueString*) RogueObject_retain( RogueString::create( "Augment[]" ) ); 
  Rogue_literal_strings[935] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,Template>>[]" ) ); 
  Rogue_literal_strings[936] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,Augment[]>>[]" ) ); 
  Rogue_literal_strings[937] = (RogueString*) RogueObject_retain( RogueString::create( "CmdLabel[]" ) ); 
  Rogue_literal_strings[938] = (RogueString*) RogueObject_retain( RogueString::create( "CmdControlStructure[]" ) ); 
  Rogue_literal_strings[939] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,Method[]>>[]" ) ); 
  Rogue_literal_strings[940] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,Type>>[]" ) ); 
  Rogue_literal_strings[941] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,Integer>>[]" ) ); 
  Rogue_literal_strings[942] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,Method>>[]" ) ); 
  Rogue_literal_strings[943] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,Logical>>[]" ) ); 
  Rogue_literal_strings[944] = (RogueString*) RogueObject_retain( RogueString::create( "CmdWhichCase[]" ) ); 
  Rogue_literal_strings[945] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCatch[]" ) ); 
  Rogue_literal_strings[946] = (RogueString*) RogueObject_retain( RogueString::create( "FnParam[]" ) ); 
  Rogue_literal_strings[947] = (RogueString*) RogueObject_retain( RogueString::create( "FnArg[]" ) ); 
  Rogue_literal_strings[948] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,TokenType>>[]" ) ); 
  Rogue_literal_strings[949] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,TypeSpecializer>>[]" ) ); 
  Rogue_literal_strings[950] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,CmdLabel>>[]" ) ); 
  Rogue_literal_strings[951] = (RogueString*) RogueObject_retain( RogueString::create( "CmdTaskControlSection[]" ) ); 
  Rogue_literal_strings[952] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,Cmd>>[]" ) ); 
  Rogue_literal_strings[953] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,Property>>[]" ) ); 
  Rogue_literal_strings[954] = (RogueString*) RogueObject_retain( RogueString::create( "TableEntry<<String,Token[]>>[]" ) ); 
  Rogue_literal_strings[955] = (RogueString*) RogueObject_retain( RogueString::create( "CandidateMethods" ) ); 
  Rogue_literal_strings[956] = (RogueString*) RogueObject_retain( RogueString::create( "CmdReadSingleton" ) ); 
  Rogue_literal_strings[957] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCreateArray" ) ); 
  Rogue_literal_strings[958] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCall" ) ); 
  Rogue_literal_strings[959] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCreateObject" ) ); 
  Rogue_literal_strings[960] = (RogueString*) RogueObject_retain( RogueString::create( "CmdReadGlobal" ) ); 
  Rogue_literal_strings[961] = (RogueString*) RogueObject_retain( RogueString::create( "CmdReadProperty" ) ); 
  Rogue_literal_strings[962] = (RogueString*) RogueObject_retain( RogueString::create( "CmdLogicalizeOptionalValue" ) ); 
  Rogue_literal_strings[963] = (RogueString*) RogueObject_retain( RogueString::create( "CmdWriteLocal" ) ); 
  Rogue_literal_strings[964] = (RogueString*) RogueObject_retain( RogueString::create( "CmdReadArrayCount" ) ); 
  Rogue_literal_strings[965] = (RogueString*) RogueObject_retain( RogueString::create( "CmdReadArrayElement" ) ); 
  Rogue_literal_strings[966] = (RogueString*) RogueObject_retain( RogueString::create( "CmdWriteArrayElement" ) ); 
  Rogue_literal_strings[967] = (RogueString*) RogueObject_retain( RogueString::create( "CmdAdjustProperty" ) ); 
  Rogue_literal_strings[968] = (RogueString*) RogueObject_retain( RogueString::create( "CmdStatementList" ) ); 
  Rogue_literal_strings[969] = (RogueString*) RogueObject_retain( RogueString::create( "CmdArgs" ) ); 
  Rogue_literal_strings[970] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCompareNE" ) ); 
  Rogue_literal_strings[971] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCompareLE" ) ); 
  Rogue_literal_strings[972] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCompareEQ" ) ); 
  Rogue_literal_strings[973] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCompareIs" ) ); 
  Rogue_literal_strings[974] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCompareIsNot" ) ); 
  Rogue_literal_strings[975] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCompareLT" ) ); 
  Rogue_literal_strings[976] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCompareGT" ) ); 
  Rogue_literal_strings[977] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCompareGE" ) ); 
  Rogue_literal_strings[978] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCallRoutine" ) ); 
  Rogue_literal_strings[979] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCallInlineNative" ) ); 
  Rogue_literal_strings[980] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCallNativeRoutine" ) ); 
  Rogue_literal_strings[981] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCallNativeMethod" ) ); 
  Rogue_literal_strings[982] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCallAspectMethod" ) ); 
  Rogue_literal_strings[983] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCallMethod" ) ); 
  Rogue_literal_strings[984] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCallInlineNativeRoutine" ) ); 
  Rogue_literal_strings[985] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCallInlineNativeMethod" ) ); 
  Rogue_literal_strings[986] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCallDynamicMethod" ) ); 
  Rogue_literal_strings[987] = (RogueString*) RogueObject_retain( RogueString::create( "CmdCallStaticMethod" ) ); 

}

void RogueProgram::launch( int argc, char* argv[] )
{
  RogueStringBuilder__init_class();
  RogueTokenType__init_class();
  RogueSystem__init_class();
  RoguePreprocessor__init_class();

  RogueSystem_executable_filepath = RogueString::create( argv[0] );
  for (int i=1; i<argc; ++i)
  {
    RogueStringList__add__String( RogueSystem_command_line_arguments, RogueString::create( argv[i] ) );
  }

  RogueGlobal__on_launch( (RogueClassGlobal*) (RogueType_singleton(RogueTypeGlobal)) );
  Rogue_collect_garbage();
}

RogueProgram Rogue_program;


int main( int argc, char* argv[] )
{
  Rogue_program.configure();
  Rogue_program.launch( argc, argv );
  //Rogue_program.finish_tasks();
  return 0;
}
