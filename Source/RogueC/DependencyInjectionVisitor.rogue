class DependencyInjectionVisitor : Visitor
  PROPERTIES
    injected_dependencies : Logical

  METHODS
    method inject_dependencies( statements:CmdStatementList )->Logical
      statements.dispatch( this )
      return injected_dependencies

    method on_enter( cmd:CmdNativeCode )
      if (cmd.code)
        if (not Program.native_code.contains(cmd.code))
          Program.native_code.add( cmd.code )
          injected_dependencies = true
        endIf
        cmd.code = null
      endIf

    method on_enter( cmd:CmdNativeHeader )
      if (cmd.code)
        if (not Program.native_header.contains(cmd.code))
          Program.native_header.add( cmd.code )
          injected_dependencies = true
        endIf
        cmd.code = null
      endIf

    method on_enter( cmd:CmdIncludeNative )
      if (cmd.filepath)
        RogueC.include_native( cmd.t, cmd.filepath, cmd.file_type )
        cmd.filepath = null
        injected_dependencies = true
      endIf

    method on_enter( cmd:CmdMakeRequisite )
      if (not cmd.pattern) return
      injected_dependencies = true

      local t = cmd.t
      local pattern = cmd.pattern
      if (pattern.contains('.'))
        local req_type = Program.get_type_reference( t, pattern.before_first('.') )
        req_type.make_essential.organize
        local sig = pattern.after_first('.')

        if (sig == "*")
          forEach (r in req_type.global_method_list) r.make_essential
          forEach (m in req_type.method_list)        m.make_essential

        elseIf (sig.contains('('))
          local m = req_type.find_method( sig )
          if (not m and req_type.method_templates.has_template(sig.before_first('(')))
            # Try again after instantiating new method templates
            req_type.method_templates.instantiate( t, sig.before_first('('), null )
            m = req_type.find_method( sig )
          endIf

          if (m) m.make_essential
          else   throw t.error( "No such method $ in type $." (sig,req_type.name) )

        else
          local list = req_type.global_method_lookup_by_name[ sig ]
          if (list)
            forEach (m in list) m.make_essential
          endIf

          list = req_type.method_lookup_by_name[ sig ]
          if (list)
            forEach (m in list) m.make_essential
          endIf
        endIf

      else
        local req_type = Program.get_type_reference( t, pattern )
        req_type.make_essential.organize
      endIf

      cmd.pattern = null
endClass
