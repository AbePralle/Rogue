class IntrospectionCallManager : StringTable<<IntrospectionCallHandler>> [singleton]
  PROPERTIES
    handlers = IntrospectionCallHandler[]
    buffer   = StringBuilder()

    finished_generating_handlers : Logical

    staging_block : CmdBlock

  METHODS
    method generate_call_handlers->Logical
      if (finished_generating_handlers) return false
      finished_generating_handlers = true

      local type_MethodInfo = Program.find_type( "MethodInfo" )
      if (not type_MethodInfo) return true  # done

      type_MethodInfo.make_essential
      type_MethodInfo.resolve

      local m = type_MethodInfo.find_global_method( "call($,Int32,Value)" (Program.intptr_name) )
      if (not m) return true
      m.make_essential

      local t = m.t

      if (not staging_block)
        staging_block = CmdBlock( t )
        m.statements.insert( staging_block )
      endIf

      forEach (handler in handlers)
        if (handler.is_used and not handler.code)
          finished_generating_handlers = false
          staging_block.statements.add( handler.generate_call(t) )
        endIf
      endForEach

      if (not finished_generating_handlers)
        # By generating more handlers we may have brought more methods into play,
        # requiring MORE handlers next time etc.
        m.resolve_statements
        m.is_used = false  # necessary to be able to trace again
        m.trace_used_code
        return true
      endIf

      # Finally got everything
      handlers.discard( not $.is_used )
      forEach (handler at index in handlers)
        handler.index = index
        handler.discard_unused_methods
      endForEach


      staging_block.statements.clear
      local cmd_which = CmdWhich( t, CmdAccess(t,m.parameters[1].name) )
      forEach (handler in handlers)
        local cmd_case = cmd_which.add_case( t, CmdLiteralInt32(t,handler.index) )
        cmd_case.statements.add( handler.code )
      endForEach
      staging_block.statements.insert( cmd_which )

      m.resolve_statements

      m.is_used = false  # necessary to be able to trace again
      m.trace_used_code

      return true

    method handler( m:Method )->IntrospectionCallHandler
      local parameter_types = Type[]
      buffer.clear
      buffer.print( "(" )
      local first = true
      if (not m.is_global)
        parameter_types.add( m.type_context )
        buffer.print( m.type_context.root_name )
        first = false
      endIf
      forEach (param in m.parameters)
        if (first) first = false
        else       buffer.print( ',' )
        buffer.print( param.type.root_name )
        parameter_types.add( param.type )
      endForEach
      buffer.print( ')' )
      if (m.return_type)
        buffer.print( "->" )
        buffer.print( m.return_type.root_name )
      endIf

      local entry = find( buffer )
      if (entry) return entry.value.add( m )

      local sig = buffer->String
      local result = IntrospectionCallHandler( sig, parameter_types, m.return_type )
      this[ sig ] = result
      handlers.add( result )
      return result.add( m )

endClass


class IntrospectionCallHandler
  PROPERTIES
    index           : Int32
    signature       : String
    parameter_types : Type[]
    return_type     : Type
    is_used         : Logical

    methods         = Method[]

    code            : Cmd

  METHODS
    method init( signature, parameter_types, return_type )

    method add( m:Method )->this
      methods.add( m )
      return this

    method discard_unused_methods
      methods.discard( not $.is_used )

      if (return_type and methods.count)
        # The original placeholder return type may have been culled from the program;
        # update it.
        return_type = methods.first.return_type
      endIf

    method generate_call( t:Token )->Cmd
      local args = CmdArgs()
      forEach (type at i in parameter_types)
        local arg = CmdElementAccess( t, "args", i ) : Cmd
        if (type is Program.type_String)
          arg = CmdAccess( t, arg, "to_String" )
        elseIf (type.is_reference)
          arg = CmdConvertToType( t, arg, Program.type_Object )
        elseIf (type.is_compound)
          arg = CmdAccess( t, type.name, "from_value", arg )
        else
          # Primitive
          arg = CmdAccess( t, arg, "to_" + type.name )
        endIf
        args.add( arg )
      endForEach
      local cmd_call = CmdIntrospectionCall( t, this, args )
      if (return_type)
        if (return_type.is_compound) code = CmdReturn( t, CmdConvertToType(t,cmd_call,Program.type_Value) )
        else                         code = CmdReturn( t, CmdAccess(t, "Value", cmd_call) )
      else
        code = cmd_call
      endIf
      return code

endClass
