class MethodTemplate
  PROPERTIES
    t                  : Token
    type_context       : Type
    name               : String
    is_global          : Logical

    generic_signature  : String

    type_parameters    = TypeParameter[]
    template_tokens    = Token[]

  METHODS
    method init( t, type_context, name, is_global )

    method cloned->MethodTemplate
      local result = MethodTemplate( t, type_context, name, is_global )
      result.type_parameters = type_parameters
      result.template_tokens = template_tokens
      return result

    method generic_signature->String
      if (not @generic_signature)
        local m = instantiate( t, "", &make_generic )
        if (m) generic_signature = m.signature
      endIf
      return @generic_signature

    method instantiate( ref_t:Token, ref_name:String, &make_generic )->Method
      local specializer_tokens = Token[][]()

      if (make_generic)
        ref_name = ""
        forEach (index in 1..type_parameters.count)
          specializer_tokens.add( Token[] )
          specializer_tokens.last.add( TokenType.identifier.create_token( t, "T"+index ) )
          if (ref_name.count > 0) ref_name += ","
          ref_name += "T"+index
        endForEach
        ref_name = "$<<$>>" (name,ref_name)

      else
        local parser = Parser( ref_t, ref_name, ref_name.from_first('<') )

        parser.read  # '<<'

        local buffer = StringBuilder()  # just a dummy to satisfy the requirements of parse_specializer()
        local first = true
        while (first or parser.consume(TokenType.symbol_comma))
          first = false
          specializer_tokens.add( Token[] )
          parser.parse_specializer( buffer.clear, specializer_tokens.last )
        endWhile

      endIf

      local mappings = Table<<String,Token[]>>()
      forEach (type_param at i in type_parameters)
        mappings[ type_param.name ] = specializer_tokens[i]
      endForEach

      local tokens = Token[]( specializer_tokens.count+10 )
      tokens.add( TokenType.keyword_method.create_token( t ) )
      tokens.add( TokenType.identifier.create_token( t, ref_name ) )
      forEach (mt in template_tokens)
        if (mt.type is TokenType.placeholder_id)
          local mapping = mappings[ mt->String ]
          if (mapping)
            # Insert template copy of tokens
            forEach (specializer_t in mapping)
              tokens.add( specializer_t )
            endForEach
          else
            tokens.add( mt )
          endIf
        else
          tokens.add( mt )
        endIf
      endForEach

      local parser = Parser( tokens )
      parser.this_type = type_context

      if (make_generic)
        parser.parse_method_header( is_global )
      else
        parser.parse_method( is_global, &skip_add_to_type )
      endIf

      local m = parser.this_method
      m.source_template = this
      m.specializer_count = type_parameters.count
      m.unspecialized_name = name
      m.assign_signature

      if (not make_generic)
        # Classes can define specialized template methods with specific types;
        # only add this method to the class if it doesn't define a method
        # with the same signature already.
        local existing_m = type_context.method_lookup_by_signature[ m.signature ]
        if (not existing_m or existing_m.type_context is not type_context)
          #println "Instantiating $.$" (m.type_context,m.signature)
          type_context.inject_method( m )
        endIf
      endIf

      return m

    method signature->String
      return "$<<$>>" (name,type_parameters.count)

    method to->String
      return "$.$<<$>>()" (type_context.name,name,type_parameters.count)

endClass


class MethodTemplateOverloads
  PROPERTIES
    overloads       = MethodTemplate[]

  METHODS
    method add( m:MethodTemplate )->this
      overloads.add( m )
      return this
endClass


class MethodTemplates
  # A table of method names to lookup-by-specializer-count to list of templates.
  PROPERTIES
    type_context : Type
    templates    = StringTable<<MethodTemplateOverloads>>()
    has_names    = StringTable<<Logical>>()

  METHODS
    method init( type_context )

    method add( m:MethodTemplate )
      has_names[ m.name ] = true
      local sig = "$<<$>>" (m.name,m.type_parameters.count)
      local group = (ensure templates[ sig ])
      forEach (existing_m at index in group.overloads)
        if (existing_m.type_context is not m.type_context and existing_m.generic_signature == m.generic_signature)
          if (m.type_context is this.type_context)
            # Replace existing with override
            group.overloads[ index ] = m
          #else existing method overrides new one; don't add the new one
          endIf
          return
        endIf
      endForEach
      group.add( m )

    method has_template( name:String )->Logical
      return has_names.contains( name.before_first('<') )

    method inherit( base_templates:MethodTemplates )
      forEach (group in base_templates.templates)
        forEach (base_m in group.overloads)
          if (base_m.type_context.is_aspect and not type_context.is_aspect)
            # We have to clone aspect method templates for non-aspects
            base_m = base_m.cloned
            base_m.type_context = type_context
          endIf

          add( base_m )
        endForEach
      endForEach

    method instantiate( t:Token, specialized_name:String )
      local base_name = specialized_name.before_first( "<<" )
      require has_template( base_name )

      local specializer_count = Parser(t,specialized_name,specialized_name.from_first("<<")).parse_specializer_count
      instantiate( base_name, specializer_count, t, specialized_name )

    method instantiate( name:String, specializer_count:Int32, t:Token, specialized_name:String )
      # This version with no parameter count is used during call resolution and only called when
      # no methods matching the specialized name (such as `get_property<<Int32>>`) are found.
      # The possibility of default args or a wrong number of args means we instantiate all templates
      # matching the name and number of specializers.
      local key = "$<<$>>" (name,specializer_count)
      local group = templates[ key ]
      if (group)
        forEach (m in group.overloads)
          m.instantiate( t, specialized_name )

          # Recursively instantiate overrides
          (forEach in type_context.extended_types).method_templates.instantiate_overrides( key, t, specialized_name )
        endForEach
      endIf

    method instantiate_overrides( key:String, t:Token, specialized_name:String )
      local group = templates[ key ]
      if (group)
        forEach (m in group.overloads)
          if (m.type_context is type_context)
            m.instantiate( t, specialized_name )

            # Recursively instantiate overrides
            (forEach in type_context.extended_types).method_templates.instantiate_overrides( key, t, specialized_name )
          endIf
        endForEach
      endIf

endClass
