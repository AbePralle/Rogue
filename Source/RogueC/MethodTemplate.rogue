class MethodTemplate
  PROPERTIES
    t                  : Token
    type_context       : Type
    name               : String
    is_global          : Logical

    type_parameters    = TypeParameter[]
    template_tokens    = Token[]

  METHODS
    method init( t, type_context, name, is_global )

    method cloned->MethodTemplate
      local result = MethodTemplate( t, type_context, name, is_global )
      result.type_parameters = type_parameters
      result.template_tokens = template_tokens
      return result

    method instantiate( ref_t:Token, ref_name:String, param_1_type:Type, param_2_type:Type )
      local known_parameter_types = 0
      if (param_1_type) ++known_parameter_types
      if (param_2_type) ++known_parameter_types

      local specializer_tokens = Token[][]()
      if (ref_name.contains('<'))
        local parser = Parser( ref_t, ref_name, ref_name.from_first('<') )

        parser.read  # '<<'

        local buffer = StringBuilder()  # just a dummy to satisfy the requirements of parse_specializer()
        local first = true
        while (first or parser.consume(TokenType.symbol_comma))
          first = false
          specializer_tokens.add( Token[] )
          parser.parse_specializer( buffer.clear, specializer_tokens.last )
        endWhile

      elseIf (known_parameter_types == type_parameters.count)
        local buffer = StringBuilder()  # dummy

        if (param_1_type)
          specializer_tokens.add( Token[] )
          Parser( ref_t, param_1_type.name, param_1_type.name ).parse_specializer( buffer.clear, specializer_tokens.last )
        endIf

        if (param_2_type)
          specializer_tokens.add( Token[] )
          Parser( ref_t, param_2_type.name, param_2_type.name ).parse_specializer( buffer.clear, specializer_tokens.last )
        endIf

      else
        throw ref_t.error( "Unable to infer method template specializer types - list them explicitly ('$<<Int32,...>>(...)')." (name) )

      endIf

      local mappings = Table<<String,Token[]>>()
      forEach (type_param at i in type_parameters)
        mappings[ type_param.name ] = specializer_tokens[i]
      endForEach

      local tokens = Token[]( specializer_tokens.count+10 )
      tokens.add( TokenType.keyword_method.create_token( t ) )
      tokens.add( TokenType.identifier.create_token( t, ref_name ) )
      forEach (mt in template_tokens)
        if (mt.type is TokenType.placeholder_id)
          local mapping = mappings[ mt->String ]
          if (mapping)
            # Insert template copy of tokens
            forEach (specializer_t in mapping)
              tokens.add( specializer_t )
            endForEach
          else
            tokens.add( mt )
          endIf
        else
          tokens.add( mt )
        endIf
      endForEach

      parser = Parser( tokens )
      parser.this_type = type_context
      parser.parse_method( is_global, &skip_add_to_type )
      local m = parser.this_method
      m.source_template = this
      m.specializer_count = type_parameters.count
      m.unspecialized_name = name
      m.assign_signature
      type_context.inject_method( m )

    method to->String
      return "$.$<<$>>()" (type_context.name,name,type_parameters.count)

endClass


class MethodTemplateOverloads
  PROPERTIES
    overloads    = MethodTemplate[]
    overridden_m : MethodTemplateOverloads
    overrides    = MethodTemplateOverloads[]

  METHODS
    method add( m:MethodTemplate )->this
      overloads.add( m )
      return this
endClass


class MethodTemplates( type_context:Type )
  # A table of method names to lookup-by-specializer-count to list of templates.
  PROPERTIES
    templates = StringTable<<MethodTemplateOverloads>>()

  METHODS
    method add( m:MethodTemplate )
      local sig = "$<<$>>" (m.name,m.type_parameters.count)
      (ensure templates[ sig ]).add( m )

    method has_template( name:String )->Logical
      return templates.contains( name.before_first('<') )

    method inherit( other:MethodTemplates, extended_type:Type )
      if (not other) return

      forEach (base_m in other.templates)
        if (base_m.type_context.is_aspect and not extended_type.is_aspect)
          # We have to clone aspect method templates for non-aspects
          m = base_m.cloned
          m.type_context = extended_type
        endIf

        templates.add( base_m )

      endForEach

    method instantiate( t:Token, specialized_name:String )->Logical
      if (not specialized_name.contains("<<")) return false

      local base_name = specialized_name.before_first( "<<" )
      if (not has_templates_named(base_name)) return false

      local specializer_count = Parser(t,specialized_name,specialized_name.from_first("<<")).parse_specializer_count
      return instantiate( base_name, specializer_count, t, specialized_name )

    method instantiate( name:String, specializer_count:Int32, t:Token, specialized_name:String )->Logical
      # This version with no parameter count is used during call resolution and only called when
      # no methods matching the specialized name (such as `get_property<<Int32>>`) are found.
      # The possibility of default args or a wrong number of args means we instantiate all templates
      # matching the name and number of specializers.
      local found_any = false

      forEach (m in templates)
        if (m.type_parameters.count == specializer_count and m.name == name)
          found_any = true
          m.instantiate( t, specialized_name )
        endIf
      endForEach

      return found_any

    method instantiate( name:String, specializer_count:Int32, parameter_count:Int32, t:Token, specialized_name:String )
      #@trace name, specialized_name, specializer_count, parameter_count
      if (not type_context.organized) return

      local m = find( name, specializer_count, parameter_count )

      if (m)
        # First make sure a specialized method of this name doesn't exist in the type already.
        local possible_existing = type_context.method_lookup_by_name[ specialized_name ]
        if (possible_existing)
          forEach (existing_m in possible_existing)
            if (existing_m.parameters.count == parameter_count) return  # already exists
          endForEach
        endIf
        m.instantiate( t, specialized_name )

        # Instantiate overrides in extended classes
        if (m.overrides.count)
          forEach (override_m in m.overrides)
            override_m.type_context.method_templates.instantiate( name, specializer_count, parameter_count,
              t, specialized_name )
          endForEach
        endIf
      endIf

endClass
