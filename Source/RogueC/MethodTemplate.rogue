class MethodTemplate
  PROPERTIES
    t                  : Token
    type_context       : Type
    name               : String
    is_global          : Logical

    type_parameters    = TypeParameter[]
    template_tokens    = Token[]

    parameter_count    : Int32
    # Regular parameters, not type parameters

    overridden_m       : MethodTemplate
    overrides          = MethodTemplate[]

  METHODS
    method init( t, type_context, name, is_global )

    method instantiate( ref_t:Token, ref_name:String )
      local parser = Parser( ref_t, ref_name, ref_name.from_first('<') )

      parser.read  # '<<'

      local specializer_tokens = Token[][]()
      local buffer = StringBuilder()
      local first = true
      while (first or parser.consume(TokenType.symbol_comma))
        first = false
        specializer_tokens.add( Token[] )
        parser.parse_specializer( buffer.clear, specializer_tokens.last )
      endWhile

      local mappings = Table<<String,Token[]>>()
      forEach (type_param at i in type_parameters)
        mappings[ type_param.name ] = specializer_tokens[i]
      endForEach

      local tokens = Token[]( specializer_tokens.count+10 )
      tokens.add( TokenType.keyword_method.create_token( t ) )
      tokens.add( TokenType.identifier.create_token( t, ref_name ) )
      forEach (mt in template_tokens)
        if (mt.type is TokenType.placeholder_id)
          local mapping = mappings[ mt->String ]
          if (mapping)
            # Insert template copy of tokens
            forEach (specializer_t in mapping)
              tokens.add( specializer_t )
            endForEach
          else
            tokens.add( mt )
          endIf
        else
          tokens.add( mt )
        endIf
      endForEach

      parser = Parser( tokens )
      parser.this_type = type_context
      parser.parse_method( is_global, &skip_add_to_type )
      local m = parser.this_method
      m.source_template = this
      m.specializer_count = type_parameters.count
      m.specialized_name = ref_name
      m.organize
      type_context.inject_method( m )

    method to->String
      return "$.$<<{$}>>({$})" (type_context.name,name,type_parameters.count,parameter_count)

endClass


class MethodTemplates( type_context:Type )
  # A table of method names to lookup-by-specializer-count to list of templates.
  PROPERTIES
    template_list = MethodTemplate[]

  METHODS
    method add( m:MethodTemplate )
      if (has_template(m.name,m.type_parameters.count,m.parameter_count))
        throw m.t.error( "Method template $<<{$}>>({$}) is already defined." (m.name,m.type_parameters.count,m.parameter_count) )
      endIf
      template_list.add( m )

    method find( name:String, specializer_count:Int32, parameter_count:Int32 )->MethodTemplate
      forEach (template in template_list)
        if (template.type_parameters.count == specializer_count and template.parameter_count == parameter_count...
            and template.name == name)
          return template
        endIf
      endForEach
      return null

    method has_template( name:String, specializer_count:Int32, parameter_count:Int32 )->Logical
      return find(name,specializer_count,parameter_count)?

    method has_templates_named( name:String )->Logical
      forEach (m in template_list)
        if (m.name == name) return true
      endForEach

      return false

    method inherit( other:MethodTemplates )
      if (not other) return

      forEach (base_m in other.template_list)
        local m = find( base_m.name, base_m.type_parameters.count, base_m.parameter_count )
        if (m)
          m.overridden_m = base_m
          base_m.overrides.add( m )
        else
          # No overrides found, just inherit base_m
          template_list.add( base_m )
        endIf

      endForEach

    method instantiate( name:String, specializer_count:Int32, t:Token, specialized_name:String )->Logical
      # This version with no parameter count is used during call resolution and only called when
      # no methods matching the specialized name (such as `get_property<<Int32>>`) are found.
      # The possibility of default args or a wrong number of args means we instantiate all templates
      # matching the name and number of specializers.
      local found_any = false

      forEach (m in template_list)
        if (m.type_parameters.count == specializer_count and m.name == name)
          found_any = true
          m.instantiate( t, specialized_name )
        endIf
      endForEach

      return found_any

    method instantiate( name:String, specializer_count:Int32, parameter_count:Int32, t:Token, specialized_name:String,
        &found_root )
      #@trace name, specialized_name, specializer_count, parameter_count
      if (not type_context.organized) return

      local m = find( name, specializer_count, parameter_count )

      if (m)
        if (found_root or not m.overridden_m)
          if (m.type_context is type_context)
            # First make sure a specialized method of this name doesn't exist in the type already.
            local possible_existing = type_context.method_lookup_by_name[ specialized_name ]
            forEach (existing_m in possible_existing)
              if (existing_m.parameters.count == parameter_count) return  # already exists
            endForEach
            m.instantiate( t, specialized_name )
          endIf

          # Instantiate overrides in extended classes
          if (m.overrides.count)
            forEach (override_m in m.overrides)
              override_m.type_context.method_templates.instantiate( name, specializer_count, parameter_count,
                t, specialized_name, &found_root )
            endForEach
          endIf

        elseIf (m.overridden_m)
          # Skip this class for now and travel down to find the root method template of this line.
          # We'll hit this class again on the way up.
          m.overridden_m.type_context.method_templates.instantiate( name, specializer_count, parameter_count,
            t, specialized_name )
        endIf

      endIf

endClass
