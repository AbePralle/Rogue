$include "Augment.rogue"

class Program [requisite singleton]
  PROPERTIES
    code_prefix  = "Rogue"
    program_name = "Rogue_program"

    unique_integer : Integer

    template_list   = Template[]                 : Template[]
    template_lookup = Table<<String,Template>>() : Table<<String,Template>>

    augment_lookup = Table<<String,Augment[]>>()

    first_filepath           = ""
    explicit_main_class_t    : Token
    explicit_main_class_name : String
    implicit_main_class_t    : Token
    implicit_main_class_name : String
    main_class               : Type

    type_list       = Type[]                 : Type[]
    type_lookup     = Table<<String,Type>>() : Table<<String,Type>>

    type_null        : Type
    type_Real        : Type
    type_Float       : Type
    type_Long        : Type
    type_Integer     : Type
    type_Character   : Type
    type_Byte        : Type
    type_Logical     : Type

    type_Object      : Type
    type_String      : Type
    type_NativeArray : Type
    type_GenericList : Type
    type_Global      : Type
    type_Error       : Type

    type_StringBuilder : Type
    type_FileReader    : Type
    type_FileWriter    : Type

    literal_string_lookup = Table<<String,Integer>>() : Table<<String,Integer>>
    literal_string_list   = String[]

    string_buffer = StringBuilder()

  METHODS
    method configure
      type_null          = create_built_in_type( "null",      Attribute.is_native | Attribute.is_class )
      type_Real          = create_built_in_type( "Real",      Attribute.is_native | Attribute.is_primitive )
      type_Float         = create_built_in_type( "Float",     Attribute.is_native | Attribute.is_primitive )
      type_Long          = create_built_in_type( "Long",      Attribute.is_native | Attribute.is_primitive )
      type_Integer       = create_built_in_type( "Integer",   Attribute.is_native | Attribute.is_primitive )
      type_Character     = create_built_in_type( "Character", Attribute.is_native | Attribute.is_primitive )
      type_Byte          = create_built_in_type( "Byte",      Attribute.is_native | Attribute.is_primitive )
      type_Logical       = create_built_in_type( "Logical",   Attribute.is_native | Attribute.is_primitive )

      type_Object        = create_built_in_type( "Object", Attribute.is_native | Attribute.is_class )
      type_String        = create_built_in_type( "String", Attribute.is_native | Attribute.is_class | Attribute.is_functional )
      type_StringBuilder = create_built_in_type( "StringBuilder", Attribute.is_class )
      type_NativeArray   = create_built_in_type( "NativeArray", Attribute.is_native | Attribute.is_class )
      type_GenericList   = create_built_in_type( "GenericList", Attribute.is_class )
      type_Global        = create_built_in_type( "Global", Attribute.is_class )
      type_Error         = create_built_in_type( "Error", Attribute.is_class )

      type_FileReader    = create_built_in_type( "FileReader", Attribute.is_class | Attribute.is_native )
      type_FileWriter    = create_built_in_type( "FileWriter", Attribute.is_class | Attribute.is_native )

      type_Object.simplify_name = true
      type_String.simplify_name = true
      type_StringBuilder.simplify_name = true
      type_FileReader.simplify_name = true
      type_FileWriter.simplify_name = true

      type_null.organized = true
      type_null.defined   = true

      # Ensure that "" is the first literal string
      literal_string_list.add( "" )
      literal_string_lookup[ "" ] = 0

    method create_unique_id->String
      return "_auto_" + next_unique_integer

    method next_unique_integer->Integer
      ++unique_integer
      return unique_integer - 1

    method find_template( name:String )->Template
      which (name.last)
        case '?'
          if (find_type(name.leftmost(-1))) return template_lookup[ "Optional" ]
          else return null
        case ']'
          return template_lookup[ "List" ]
        others
          return template_lookup[ name.before_first('<') ]
      endWhich

    method find_type( name:String )->Type
      local type = type_lookup[ name ]
      if (type) return type

      local template = find_template( name )
      if (template)
        type = Type( template.t, name )
        type_lookup[name] = type
        return type
      endIf

      return null

    method get_type_reference( t:Token, name:String )->Type
      local type = type_lookup[ name ]
      if (type) return type

      type = Type( t, name )
      type_lookup[name] = type

      return type

    method get_callback_type_signature( parameter_types:Type[] )->String
      string_buffer.clear.print( "(" )
      if (parameter_types)
        local first = true
        forEach (type in parameter_types)
          if (first) first = false
          else       string_buffer.print( ',' )
          string_buffer.print( type.name )
        endForEach
      endIf
      string_buffer.print( ')' )
      return string_buffer->String

    method get_callback_type_reference( t:Token, parameter_types:Type[], return_type:Type )->Type
      local name = "Callback" + get_callback_type_signature( parameter_types )
      if (return_type) name += "->" + return_type.name

      local type = get_type_reference( t, name )
      if (type.defined) return type

      type.defined = true
      type.attributes.add( Attribute.is_class )
      local m_call = type.add_method( t, "call" )
      if (parameter_types)
        forEach (i of parameter_types) m_call.add_parameter( t, "param"+(i+1), parameter_types[i] )
      endIf
      if (return_type)
        m_call.return_type = return_type
        m_call.statements.add( CmdReturn(t,return_type.create_default_value(t)) )
      endIf

      return type

    method create_built_in_type( name:String, attributes=0:Integer )->Type
      local t = TokenType("Internal").create_token( "[Built-in Type]", 0, 0 )
      local type = get_type_reference( t, name )
      type.attributes.add( attributes )
      return type

    method resolve
      if (explicit_main_class_t)
        main_class = get_type_reference( explicit_main_class_t, explicit_main_class_name )
      elseIf (implicit_main_class_t)
        main_class = get_type_reference( implicit_main_class_t, implicit_main_class_name )
      else
        throw RogueError( "No candidates for main class." )
      endIf

      type_null.resolve
      type_Real.resolve
      type_Float.resolve
      type_Long.resolve
      type_Integer.resolve
      type_Character.resolve
      type_Byte.resolve
      type_Logical.resolve
      type_Global.resolve
      type_Error.resolve

      type_Object.resolve
      type_NativeArray.resolve
      type_GenericList.resolve
      type_String.resolve

      main_class.resolve
      local m = main_class.find_method( "init()" )
      if (m) m.resolve

      # Reference and resolve all requisite type templates
      forEach (templ in template_list)
        if ((templ.attributes.flags & Attribute.is_requisite) and not templ.type_parameters)
          get_type_reference( templ.t, templ.name ).resolve
        endIf
      endForEach

      local i = 0
      while (i < type_list.count)
        type_list[i].resolve
        ++i
      endWhile

    method validate_cpp_name( name:String )->String
      local begins_with_code_prefix = false
      if (name.begins_with(code_prefix))
        begins_with_code_prefix = true
        name = name.substring( code_prefix.count )
      endIf

      # Convert "_*type" to "__*type"
      local all_underscores = true
      if (name.ends_with("type"))
        forEach (i in 0..(name.count-5))
          if (name[i] != '_') all_underscores = false; escapeForEach
        endForEach
        name = "_" + name
      endIf

      # Type? -> OptionalType
      local i1 = name.locate('?')
      while (i1?)
        name = "Optional" + name.leftmost(i1.value) + name.substring(i1.value+1)
        i1 = name.locate('?')
      endWhile

      i1 = name.locate("<<")
      while (i1?)
        local i2 = name.locate_last(">>")
        if (not i2?) escapeWhile

        local before = name.substring(0,i1.value-1)
        local after  = name.substring(i2.value+2)
        local middle = name.substring(i1.value+2,i2.value-1)

        #name = "$_of_$$" (before,middle,after)

        name = "$$$" (validate_cpp_name(middle),before,after)
        # Example:
        #   Table<<String,Integer>>[] -> StringIntegerTable[]

        i1 = name.locate("<<")
      endWhile

      #   StringIntegerTable[] -> StringIntegerTableList
      i1 = name.locate("[]")
      while (i1?)
        name = name.substring(0,i1.value-1) + "List" + name.substring(i1.value+2)
        i1 = name.locate("[]")
      endWhile

      string_buffer.clear
      if (begins_with_code_prefix) string_buffer.print( Program.code_prefix )
      forEach (ch in name)
        if (ch.is_alphanumeric)
          string_buffer.print( ch )
        else
          which (ch)
            case '!': string_buffer.print( "NOT" )
            case '%': string_buffer.print( "MOD" )
            case '&': string_buffer.print( "AND" )
            case '*': string_buffer.print( "TIMES" )
            case '+': string_buffer.print( "PLUS" )
            case '-': string_buffer.print( "MINUS" )
            case '.': string_buffer.print( "DOT" )
            case '/': string_buffer.print( "SLASH" )
            case '<': string_buffer.print( "LESSTHAN" )
            case '=': string_buffer.print( "EQUALS" )
            case '>': string_buffer.print( "GREATERTHAN" )
            case '^': string_buffer.print( "POWER" )
            case '|': string_buffer.print( "OR" )
            case '~': string_buffer.print( "XOR" )
            others:   string_buffer.print( '_' )
          endWhich
        endIf
      endForEach

      return string_buffer->String

endClass

