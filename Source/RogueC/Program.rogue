$include "Augment.rogue"

class RequisiteItem( t:Token, type:Type, signature=null:String );

class Program [requisite singleton]
  PROPERTIES
    code_prefix  = "Rogue"
    program_name = "Rogue_program"

    unique_integer : Int32

    template_list   = Template[]                 : Template[]
    template_lookup = Table<<String,Template>>() : Table<<String,Template>>

    augment_lookup = Table<<String,Augment[]>>()
    requisite_list = RequisiteItem[]

    first_filepath           = ""
    m_on_launch              : Method
    global_properties        = Property[]

    native_header = String[]
    native_code   = String[]

    methods_by_signature = Table<<String,Method[]>>()

    type_list       = Type[]                 : Type[]
    type_lookup     = Table<<String,Type>>() : Table<<String,Type>>

    type_null        : Type
    type_Real64        : Type
    type_Real32       : Type
    type_Int64        : Type
    type_Int32     : Type
    type_Character   : Type
    type_Byte        : Type
    type_Logical     : Type

    type_Object      : Type
    type_String      : Type
    type_NativeArray : Type
    type_GenericList : Type
    type_Global      : Type
    type_Error       : Type

    type_StringBuilder : Type

    literal_string_lookup = Table<<String,Int32>>() : Table<<String,Int32>>
    literal_string_list   = String[]

    string_buffer = StringBuilder()

  METHODS
    method configure
      type_null          = create_built_in_type( "null",      Attribute.is_native | Attribute.is_class )
      type_Real64          = create_built_in_type( "Real64",      Attribute.is_primitive )
      type_Real32         = create_built_in_type( "Real32",     Attribute.is_primitive )
      type_Int64          = create_built_in_type( "Int64",      Attribute.is_primitive )
      type_Int32       = create_built_in_type( "Int32",   Attribute.is_primitive )
      type_Character     = create_built_in_type( "Character", Attribute.is_primitive )
      type_Byte          = create_built_in_type( "Byte",      Attribute.is_primitive )
      type_Logical       = create_built_in_type( "Logical",   Attribute.is_primitive )

      type_Object        = create_built_in_type( "Object", Attribute.is_native | Attribute.is_class )
      type_String        = create_built_in_type( "String", Attribute.is_native | Attribute.is_class | Attribute.is_functional )
      type_StringBuilder = create_built_in_type( "StringBuilder", Attribute.is_class )
      type_NativeArray   = create_built_in_type( "NativeArray", Attribute.is_native | Attribute.is_class )
      type_GenericList   = create_built_in_type( "GenericList", Attribute.is_class )
      type_Global        = create_built_in_type( "Global", Attribute.is_class )
      type_Error         = create_built_in_type( "Error", Attribute.is_class )

      type_Object.simplify_name = true
      type_String.simplify_name = true
      type_StringBuilder.simplify_name = true

      type_null.organized = true
      type_null.defined   = true

      # Ensure that "" is the first literal string
      literal_string_list.add( "" )
      literal_string_lookup[ "" ] = 0

    method create_unique_id->String
      return "_auto_" + next_unique_integer

    method next_unique_integer->Int32
      ++unique_integer
      return unique_integer - 1

    method find_template( name:String )->Template
      which (name.last)
        case '?'
          if (find_type(name.leftmost(-1))) return template_lookup[ "Optional" ]
          else return null
        case ']'
          return template_lookup[ "List" ]
        others
          return template_lookup[ name.before_first('<') ]
      endWhich

    method find_type( name:String )->Type
      local type = type_lookup[ name ]
      if (type) return type

      local template = find_template( name )
      if (template)
        type = Type( template.t, name )
        type_lookup[name] = type
        return type
      endIf

      return null

    method get_type_reference( t:Token, name:String )->Type
      local type = type_lookup[ name ]
      if (type) return type

      type = Type( t, name )
      type_lookup[name] = type

      return type

    method get_callback_type_signature( parameter_types:Type[] )->String
      string_buffer.clear.print( "(" )
      if (parameter_types)
        local first = true
        forEach (type in parameter_types)
          if (first) first = false
          else       string_buffer.print( ',' )
          string_buffer.print( type.name )
        endForEach
      endIf
      string_buffer.print( ')' )
      return string_buffer->String

    method get_callback_type_reference( t:Token, parameter_types:Type[], return_type:Type )->Type
      local name = "Function" + get_callback_type_signature( parameter_types )
      if (return_type) name += "->" + return_type.name

      local type = get_type_reference( t, name )
      if (type.defined) return type

      type.defined = true
      type.callback_parameter_types = parameter_types
      type.callback_return_type = return_type
      type.attributes.add( Attribute.is_class )
      local m_call = type.add_method( t, "call" )
      if (parameter_types)
        forEach (i of parameter_types) m_call.add_parameter( t, "param"+(i+1), parameter_types[i] )
      endIf
      if (return_type)
        m_call.return_type = return_type
        m_call.statements.add( CmdReturn(t,return_type.create_default_value(t)) )
      endIf

      return type

    method create_built_in_type( name:String, attributes=0:Int32 )->Type
      local t = TokenType("Internal").create_token( "[Built-in Type]", 0, 0 )
      local type = get_type_reference( t, name )
      type.attributes.add( attributes )
      return type

    method resolve
      if (m_on_launch) type_Global.add_method( m_on_launch )
      else             m_on_launch = type_Global.add_method( type_Global.t, "on_launch" )
      m_on_launch.statements.add( m_on_launch.begin_label(m_on_launch.t,"append",false) )
      m_on_launch.attributes.add( Attribute.is_requisite )

      forEach (p in global_properties)
        if (not p.type)
          if (p.initial_value)
            p.type = p.initial_value.implicit_type
            if (not p.type)
              local mesg = "Cannot infer the type of the global property from its initial value.  Assign a type by appending ': TypeName' to the end of the declaration."
              throw p.t.error( mesg )
            endIf
          else
            local mesg = "Cannot determine the type of the global property - either assign an initial value (global $ = ...) or assign a type (global $ : Int32)." (p.name,p.name)
            throw p.t.error( mesg )
          endIf
        endIf
        type_Global.add_property( p )
      endForEach

      type_null.resolve
      type_Real64.resolve
      type_Real32.resolve
      type_Int64.resolve
      type_Int32.resolve
      type_Character.resolve
      type_Byte.resolve
      type_Logical.resolve
      type_Global.resolve
      type_Error.resolve

      type_Object.resolve
      type_NativeArray.resolve
      type_GenericList.resolve
      type_String.resolve

      #{
      local type_CharacterList = find_type( "Character[]" )
      if (type_CharacterList)
        #type_CharacterList
      endIf
      }#

      # Go through requisite directives, resolving and marking as requisite each named type
      # and method
      forEach (req in requisite_list)
        req.type.resolve
        req.type.attributes.add( Attribute.is_requisite )
        if (req.signature)
          if (req.signature == "*")
            forEach (r in req.type.global_method_list) r.attributes.add( Attribute.is_requisite )
            forEach (m in req.type.method_list)  m.attributes.add( Attribute.is_requisite )
          else
            local m = req.type.find_method( req.signature )
            if (m) m.attributes.add( Attribute.is_requisite )
            else     throw req.t.error( "No such method or routine $ in type $." (req.signature,req.type.name) )
          endIf
        endIf
      endForEach

      # Reference and resolve all requisite type templates
      forEach (templ in template_list)
        if ((templ.attributes.flags & Attribute.is_requisite) and not templ.type_parameters)
          get_type_reference( templ.t, templ.name ).resolve
        endIf
      endForEach

      local i = 0
      while (i < type_list.count)
        type_list[i].resolve
        ++i
      endWhile

      cull_unused_code

      reorder_compounds

    method reorder_compounds
      # Source code for compounds is generated in the same order that they appear in the type_list.
      # If compound B is defined before A *and* B has properties of type A then it results in an
      # error.  Reorder compounds so that such dependencies occur earlier in the list.
      local compounds = Type[]

      local write_i = 0
      forEach (read_i of type_list)
        local type = type_list[ read_i ]
        if (type.is_compound)
          collect_compound_dependencies( type, compounds )
        else
          type_list[ write_i ] = type
          type.index = write_i
          ++write_i
        endIf
      endForEach
      type_list.discard_from( write_i )

      forEach (type in compounds)
        type.index = type_list.count
        type_list.add( type )
      endForEach

    method collect_compound_dependencies( type:Type, compounds:Type[] )
      if (type.index == -1) return  # already collected
      type.index = -1

      forEach (p in type.property_list)
        if (p.type.is_compound) collect_compound_dependencies( p.type, compounds )
      endForEach
      compounds.add( type )

    method cull_unused_code
      forEach (type in type_list)
        if (type.is_requisite) type.trace_used_code
      endForEach

      trace_overridden_methods

      forEach (type in type_list)
        type.cull_unused_methods
      endForEach

      local write_i = 0
      forEach (read_i of type_list)
        local type = type_list[ read_i ]
        if (not type.should_cull)
          type_list[ write_i ] = type
          type.index = write_i
          ++write_i
        endIf
      endForEach
      type_list.discard_from( write_i )

    method trace_overridden_methods
      # When we have "s = Circle() : Shape; println s.area()", only Shape.area()
      # is initially visible through code tracing.  We track all of the overrides for
      # a method but we don't want to trace them unless the type context is in use.
      # We can't figure it all out in a single pass so we'll keep making passes until
      # there are no more changes.
      local traced_new_methods = true
      while (traced_new_methods)
        traced_new_methods =  false

        forEach (type in type_list)
          if (type.is_used)
            if (type.is_aspect)
              # trace aspect types and methods
              forEach (m in type.method_list)
                if (m.is_used)
                  forEach (ic in m.incorporating_classes)
                    if (ic.is_used)
                      local im = ic.find_method( m.signature )
                      if (not im.is_used)
                        traced_new_methods = true
                        im.trace_used_code
                      endIf
                    endIf
                  endForEach
                endIf
              endForEach
            else
              # Trace overriding methods
              forEach (m in type.method_list)
                if (m.is_used)
                  if (m.overridden_method and not m.overridden_method.is_used)
                    traced_new_methods = true
                    m.overridden_method.trace_used_code
                  endIf

                  forEach (overriding_m in m.overriding_methods)
                    if (not overriding_m.is_used and overriding_m.type_context.is_used)
                      traced_new_methods = true
                      overriding_m.trace_used_code
                    endIf
                  endForEach
                endIf
              endForEach
            endIf
          endIf
        endForEach

      endWhile

endClass

