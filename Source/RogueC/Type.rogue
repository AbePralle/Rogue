class Type
  PROPERTIES
    t            : Token
    name         : String
    attributes   = Attributes()
    index        = -1

    defined      : Logical
    organized    : Logical
    resolved     : Logical
    visiting     : Logical

    base_class : Type
    base_types = Type[]
    flat_base_types = Type[]

    is_array     : Logical
    is_list      : Logical
    is_optional  : Logical
    element_type : Type

    simplify_name : Logical
      # RogueInteger instead of RoguePrimitiveInteger, etc. - used for classes that are predefined
      # in the infrastructure and that developers will often use directly.

    definition_list   = String[]
    definition_lookup = Table<<String,Cmd>>()
    prev_enum_cmd    : Cmd
    next_enum_offset = 0

    settings_list   = Property[]
    settings_lookup = Table<<String,Property>>() : Table<<String,Property>>

    property_list   = Property[]
    property_lookup = Table<<String,Property>>() : Table<<String,Property>>

    routine_list                = Method[]                   : Method[]
    routine_lookup_by_name      = Table<<String,Method[]>>() : Table<<String,Method[]>>
    routine_lookup_by_signature = Table<<String,Method>>()   : Table<<String,Method>>

    method_list                = Method[]                   : Method[]
    method_lookup_by_name      = Table<<String,Method[]>>() : Table<<String,Method[]>>
    method_lookup_by_signature = Table<<String,Method>>()   : Table<<String,Method>>

    dynamic_method_table_index : Integer

  METHODS
    method init( t, name )

    method add_method( m_t:Token, m_name:String )->Method
      return add_method( Method(m_t, this, m_name) )

    method add_method( m:Method )->Method
      method_list.add( m )
      local list = method_lookup_by_name[ m.name ]
      if (not list)
        list = Method[]
        method_lookup_by_name[ m.name ] = list
      endIf
      list.add( m )

      return m

    method add_routine( r_t:Token, r_name:String )->Method
      local r = Method( r_t, this, r_name )
      r.attributes.add( Attribute.is_routine )

      routine_list.add( r )
      local list = routine_lookup_by_name[ r_name ]
      if (not list)
        list = Method[]
        routine_lookup_by_name[ r_name ] = list
      endIf
      list.add( r )

      return r

    method add_setting( s_t:Token, s_name:String )->Property
      local s = Property( s_t, this, s_name )
      settings_list.add( s )
      settings_lookup[s_name] = s
      return s

    method add_property( p_t:Token, p_name:String, p_type=null:Type, initial_value=null:Cmd )->Property
      return add_property( Property(p_t, this, p_name, p_type, initial_value) )

    method add_property( p:Property )->Property
      property_list.add( p )
      property_lookup[p.name] = p
      return p

    method compile_type->Type
      return this

    method create_default_value( _t:Token )->Cmd
      if (this.is_reference) return CmdLiteralNull( _t )
      if (this.is_compound) return CmdCreateCompound( _t, this, null )
      if (this is Program.type_Logical) return CmdLiteralLogical( _t, false )
      return CmdLiteralInteger( _t, 0 )

    method extends_object->Logical
      return instance_of( Program.type_Object )

    method find_method( signature:String )->Method
      local m = method_lookup_by_signature[signature]
      if (m) return m

      return find_routine( signature )

    method find_routine( signature:String )->Method
      local m = routine_lookup_by_signature[signature]
      if (m) return m

      return null

    method find_property( p_name:String )->Property
      if (p_name[0] == '@') p_name = p_name.rightmost(-1)
      return property_lookup[p_name]

    method find_setting( s_name:String )->Property
      if (s_name[0] == '@') s_name = s_name.rightmost(-1)
      return settings_lookup[s_name]

    method has_method_named( m_name:String )->Logical
      local list = method_lookup_by_name[m_name]
      return (list and list.count)

    method has_routine_named( r_name:String )->Logical
      local list = routine_lookup_by_name[r_name]
      return (list and list.count)

    method instance_of( ancestor_type:Type )->Logical
      if (this is ancestor_type) return true
      if (this is Program.type_null and ancestor_type.is_reference) return true

      forEach (base_type in base_types)
        if (base_type.instance_of(ancestor_type)) return true
      endForEach

      return false

    method is_compatible_with( other:Type )->Logical
      if (this is other) return true
      if (this.is_primitive and other.is_primitive)
        if (this is Program.type_Logical xor other is Program.type_Logical) return false 
        return true
      endIf
      if (other.is_optional and other.element_type is this) return true
      return (this.instance_of(other))

    method is_direct->Logical
      return not is_reference

    method is_aspect->Logical
      return (attributes.flags & Attribute.type_mask) == Attribute.is_aspect

    method is_class->Logical
      return (attributes.flags & Attribute.type_mask) == Attribute.is_class

    method is_compound->Logical
      return (attributes.flags & Attribute.type_mask) == Attribute.is_compound

    method is_functional->Logical
      return (attributes.flags & Attribute.is_functional)

    method is_immutable->Logical
      return (attributes.flags & Attribute.is_immutable)

    method is_native->Logical
      return (attributes.flags & Attribute.is_native)

    method is_primitive->Logical
      return (attributes.flags & Attribute.type_mask) == Attribute.is_primitive

    method is_reference->Logical
      which (attributes.flags & Attribute.type_mask)
        case Attribute.is_class, Attribute.is_aspect
          return true
        others
          return false
      endWhich

    method is_singleton->Logical
      return (attributes.flags & Attribute.is_singleton)

    method organize->Type
      if (organized) return this
      organized = true

      index = Program.type_list.count
      Program.type_list.add( this )

      if (not defined)
        defined = true
        local template = Program.find_template( name )
        if (template)
          template.instantiate( this )
        else
          throw t.error( "Reference to undefined type '$'." (name) )
        endIf
      endIf

      forEach (base_type in base_types)
        base_type.organize

        if (is_aspect)
          if (not base_type.is_aspect)
            throw t.error( "Aspects can only extend other aspects." )
          endIf
        endIf

        if (base_type.instance_of(this))
          throw t.error( "Cyclic inheritance attempted - $ cannot extend $ because $ already extends $." ...
              (this,base_type,base_type,this) )
        endIf
      endForEach

      if (is_class)
        forEach (base_type in base_types)
          if (base_type.is_class)
            if (base_class and base_class isNot base_type)
              throw t.error( "Class $ can only have one base class ($ and $ are both specified as base classes)." (name,base_class,base_type) )
            else
              base_class = base_type
            endIf
          endIf
        endForEach
        
        if (not base_class and not is_functional and this isNot Program.type_Object)
          Program.type_Object.organize
          base_class = Program.type_Object; base_types.insert( base_class )
        endIf
      endIf

      # Collect flat list base types while removing duplicates
      flat_base_types.clear
      if (base_class) base_class.collect_base_types( flat_base_types )
      forEach (base_type in base_types)
        base_type.collect_base_types( flat_base_types )
      endForEach

      # Inherit definitions
      forEach (base_type in base_types)
        inherit_definitions( base_type )
      endForEach

      # Inherit properties
      local full_property_list = Property[]
      property_lookup.clear
      inherit_properties( full_property_list, property_lookup )
      property_list = full_property_list

      # Create type_name() method
      local m_type_name = add_method( t, "type_name" )
      m_type_name.return_type = Program.type_String
      m_type_name.statements.add( CmdReturn( t, CmdLiteralString(t,name) ) )

      # Organize routines and methods and create signatures
      forEach (r in routine_list)
        r.organize
      endForEach

      forEach (m in method_list)
        m.organize
      endForEach

      # Inherit routines and methods
      local full_routine_list = Method[]
      routine_lookup_by_signature.clear
      inherit_routines( full_routine_list, routine_lookup_by_signature )
      routine_list = full_routine_list
      routine_lookup_by_name.clear
      forEach (r in routine_list)
        local list = routine_lookup_by_name[r.name]
        if (not list)
          list = Method[]
          routine_lookup_by_name[r.name] = list
        endIf
        list.add( r )
      endForEach

      local full_method_list = Method[]
      method_lookup_by_signature.clear
      inherit_methods( full_method_list, method_lookup_by_signature )
      method_list = full_method_list
      method_lookup_by_name.clear
      forEach (m in method_list)
        local list = method_lookup_by_name[m.name]
        if (not list)
          list = Method[]
          method_lookup_by_name[m.name] = list
        endIf
        list.add( m )
      endForEach

      # Create or locate init_class() to initialize settings
      if (settings_list.count and not is_native)
        local m = find_routine( "init_class()" )
        if (not m or m.type_context isNot this) m = add_routine( t, "init_class" ).organize

        # Insert setting initializations
        local i = settings_list.count - 1
        while (i >= 0)
          local s = settings_list[i]
          if (s.initial_value)
            m.statements.insert( CmdWriteSetting(s.t, s, s.initial_value.clone) )
          endIf
          --i
        endWhile
      endIf

      # Create or find init_object() method to initialize properties
      if (is_class and not is_native)
        local m = find_method( "init_object()" )
        local prior_m = m
        if (not m or m.type_context isNot this)
          m = add_method( t, "init_object" ).organize
          if (prior_m)
            prior_m.attributes.add( Attribute.is_dynamic )
            prior_m.attributes.add( Attribute.is_overridden )
            m.attributes.add( Attribute.is_dynamic )
            method_list.remove( m )
            method_list[ method_list.locate( prior_m )! ] = m
          endIf
        endIf
        m.return_type = this
        m.statements.add( CmdReturn(t,CmdLiteralThis(t,this)) )

        # Insert property initializations
        local i = property_list.count - 1
        while (i >= 0)
          local p = property_list[i]
          if (p.initial_value)
            m.statements.insert( CmdWriteProperty(p.t, CmdLiteralThis(p.t,p.type_context), p, p.initial_value.clone) )
          endIf
          --i
        endWhile
      endIf

      if (this isNot Program.type_NativeArray)
        is_array = this.instance_of( Program.type_NativeArray )
        if (is_array)
          local cur_type = this
          while (not cur_type.name.begins_with("Array<<"))
            cur_type = cur_type.base_class
            if (cur_type is null) throw t.error( "A class that is instanceOf NativeArray must also be instanceOf Array<<DataType>>." )
          endWhile

          local element_type_name = cur_type.name.after_first("<<").before_last(">>")
          element_type = Program.get_type_reference( t, element_type_name ).organize
        endIf
      endIf

      index_and_move_inline_to_end( routine_list )
      index_and_move_inline_to_end( method_list )

      return this

    method collect_base_types( list:Type[] )
      if (list.contains(this)) return
      list.add( this )
      forEach (base_type in base_types)
        base_type.collect_base_types( list )
      endForEach

    method has_references->Logical
      forEach (p in property_list)
        if (p.type.is_reference) return true
        if (p.type.is_compound and p.type.has_references) return true
      endForEach
      return false

    method inherit_definitions( from_type:Type )
      forEach (def_name in from_type.definition_list)
        if (not definition_lookup.contains(def_name))
          definition_list.add( def_name )
          definition_lookup[ def_name ] = from_type.definition_lookup[ def_name ]
        endIf
      endForEach

      forEach (base_type in from_type.base_types)
        inherit_definitions( base_type )
      endForEach

    method inherit_properties( list:Property[], lookup:Table<<String,Property>> )
      forEach (base_type in base_types)
        forEach (base_p in base_type.property_list)
          inherit_property( base_p, list, lookup )
        endForEach
      endForEach

      forEach (p in property_list)
        inherit_property( p, list, lookup )
      endForEach

    method inherit_property( p:Property, list:Property[], lookup:Table<<String,Property>> )
      local existing_p = lookup[ p.name ]
      if (existing_p)
        local i = list.locate( existing_p )!

        if (p.type_context is existing_p.type_context)
          throw p.t.error( ''A property named "$" already exists.'' (p.name) )
        else
          if (p.type is existing_p.type)
            if (p.initial_value)
              if (existing_p.initial_value)
                if (p.type.instance_of(existing_p.type))
                  # Use the new declaration with its updated initial value
                  if (p.type_context.is_aspect) p = p.clone.set_type_context( this )
                  list[i] = p
                  lookup[p.name] = p
                else
                  throw p.t.error( ''Conflicting initial values are given for property "$" in unrelated types $ and $.'' ...
                      (p.name,p.type_context,existing_p.type_context) )
                endIf
              else
                # Use newer property with its existing value instead of old property without a value
                if (p.type_context.is_aspect) p = p.clone.set_type_context( this )
                list[i] = p
                lookup[p.name] = p
              endIf

              # Else either the original property is the one with the initial value or neither of them
              # has an initial value.  In either case leave the original property definition as the one
              # in the list.
            endIf
          else
            throw p.t.error( ''Conflicting types given for property "$" - $:$ in $ and $:$ in $.'' ...
              (p.name,p.name,p.type,p.type_context,p.name,existing_p.type,existing_p.type_context) )
          endIf
        endIf

      else
        if (p.type_context.is_aspect) p = p.clone.set_type_context( this )
        list.add( p )
        lookup[p.name] = p
      endIf

    method inherit_methods( list:Method[], lookup:Table<<String,Method>> )
      forEach (base_type in base_types)
        forEach (base_m in base_type.method_list)
          inherit_method( base_m, list, lookup )
        endForEach
      endForEach

      forEach (m in method_list)
        inherit_method( m, list, lookup )
      endForEach

    method inherit_method( m:Method, list:Method[], lookup:Table<<String,Method>> )
      local existing_m = lookup[ m.signature ]

      if (existing_m)
        local i = list.locate( existing_m )!

        if (not existing_m.is_incorporated)
          if (m.type_context is existing_m.type_context)
            if (m.is_augment)
              apply_augment_labels( m, existing_m )
              return
            else
              throw m.t.error( "Type $ already defines method $." (m.type_context,m.signature) )
            endIf
          else
            if (m.return_type isNot existing_m.return_type)
              if (m.return_type is null or existing_m.return_type is null or not m.return_type.instance_of(existing_m.return_type))
                throw m.t.error( "In $::$ the overridden return type ($) is not compatible with the prior definition return type ($)." (m.type_context.name, m.signature,m.return_type,existing_m.return_type) )
              endIf
            endIf
          endIf
        endIf

        if (m.type_context.is_aspect) return   # aspect default methods don't replace existing methods
        elseIf (m.is_augment)         m.convert_augment_to_standalone

        if (not existing_m.type_context.is_aspect)
          existing_m.attributes.add( Attribute.is_dynamic )
          existing_m.attributes.add( Attribute.is_overridden )
          m.attributes.add( Attribute.is_dynamic )
        endIf

        m.overridden_method = existing_m
        while (m.overridden_method and m.type_context is m.overridden_method.type_context)
          m.overridden_method = m.overridden_method.overridden_method
        endWhile
        list[i] = m
        lookup[m.signature] = m

      else
        # No existing method
        if (m.type_context.is_aspect) m = m.incorporate( this )
        elseIf (m.is_augment)         m.convert_augment_to_standalone

        list.add( m )
        lookup[m.signature] = m
      endIf

    method inherit_routines( list:Method[], lookup:Table<<String,Method>> )
      forEach (base_type in base_types)
        forEach (base_m in base_type.routine_list)
          inherit_routine( base_m, list, lookup )
        endForEach
      endForEach

      forEach (m in routine_list)
        inherit_routine( m, list, lookup )
      endForEach

    method inherit_routine( m:Method, list:Method[], lookup:Table<<String,Method>> )
      local existing_m = lookup[ m.signature ]

      if (existing_m)
        if (m.type_context is existing_m.type_context)
          if (m.is_augment)
            apply_augment_labels( m, existing_m )
            return
          else
            throw m.t.error( "Type $ already defines routine $." (m.type_context,m.signature) )
          endIf
        endIf

        local i = list.locate( existing_m )!

        # Aspect routines are not incorporated
        if (m.type_context.is_aspect) return

        if (m.is_augment)             m.convert_augment_to_standalone

        # New method replaces old method in lookup
        list[i] = m
        lookup[m.signature] = m

      else
        # Aspect routines are not incorporated
        if (m.type_context.is_aspect) return

        if (m.is_augment)             m.convert_augment_to_standalone

        list.add( m )
        lookup[m.signature] = m
      endIf

    method apply_augment_labels( aug_m:Method, existing_m:Method )
      # Apply augment to existing method
      forEach (method_label in existing_m.label_list)
        local aug_label = aug_m.label_lookup[ method_label.name ]
        if (aug_label)
          method_label.statements.add( aug_label.statements )
          aug_label.is_referenced = true
        endIf
      endForEach

      forEach (label in aug_m.label_list)
        if (not label.is_referenced)
          throw label.t.error( "No corresponding label <<$>> in augmented code." (label.name) )
        endIf
      endForEach

    method index_and_move_inline_to_end( list:Method[] )
      local i = list.count - 1
      while (i >= 0)
        local m = list[i]
        if (m.is_inline)
          list.remove( m )
          list.add( m )
        endIf
        --i
      endWhile

      i = 0
      forEach (m in list)
        m.index = i
        ++i
      endForEach

    method omit_output->Logical
      return is_native or (is_optional and element_type.is_reference)

    method resolve->Type
      if (resolved) return this
      resolved = true

      organize

      if (element_type) element_type.organize

      forEach (s in settings_list) s.type.organize
      forEach (p in property_list)
        p.type.organize
      endForEach

      forEach (r in routine_list)
        r.resolve
      endForEach

      forEach (m in method_list)
        m.resolve
      endForEach

      return this

    method to->String
      return name

endClass
