# ROGUEC         = roguec
# FILEPATH       = .rogo/Config.json
# ROGUEC_OPTIONS = --whatever
# CXX            = g++ -Wall -std=gnu++11 -fno-strict-aliasing -Wno-invalid-offsetof
# CXXFLAGS       = -a -b -c
# LIBRARIES      = libalpha(include:"$/include/alpha" library:"$/lib") libbeta
# LINK           = -lalpha -lbeta

global config = @{ roguec:"roguec", filepath:".rogo/Config.json" }

local compiler_invocation : String
native @|#if defined(DEFAULT_CXX)
        |  $compiler_invocation = RogueString_create_from_utf8( DEFAULT_CXX );
        |#else
        |  $compiler_invocation = RogueString_create_from_utf8( "g++ -Wall -std=gnu++11 -fno-strict-aliasing -Wno-invalid-offsetof" );
        |#endif
config//cxx = compiler_invocation

if (not File.exists("Build.rogue"))
  println "ERROR: Build.rogue does not exist."
  System.exit 1
endIf

if (File.is_newer_than("Build.rogue",".rogo/Build") or File.is_newer_than("BuildCore.rogue",".rogo/Build"))
  println "Recompiling build script..."

  scan_config( File("BuildCore.rogue") )
  scan_config( File("Build.rogue") )

  # Select ROGUEC(macOS) or ROGUEC(Linux) etc. based on the OS and copy to ROGUEC, etc.
  local os_arg = "($)" (System.os.to_lowercase)
  forEach (key in config.keys)
    if (key.contains(os_arg))
      config[ key.before_first(os_arg) ] = config[ key ]
    endIf
  endForEach

  config//cache = JSON.load_table( File(config//filepath->String) )

  #trace config.to_json(&formatted)

  local roguec_options = config//roguec_options->String
  local cmd = "$ --target=C++,Console Build.rogue --main --output=.rogo/Build $" (config//roguec,roguec_options)
  println cmd
  if (0 != System.run(cmd))
    println "ERROR compiling Build.rogue."
    System.exit 1
  endIf

  cmd = "$ $ .rogo/Build.cpp" (config//cxx,config//cxxflags)

  install_library_manager
  forEach (library in config//libraries)
    # Three install options:
    #   libname                 - install libname
    #   libname(install:"cmd")  - install cmd
    #   libname(install:null)   - skip installation
    local arg = ?:{ library.contains("install"):library//install || library//name }
    if (arg.count) install_library( library//name, arg )

    local loc = library_location( library//name )

    if (library.contains("include"))
      if (library//include.count)
        cmd += '' -I "$"'' (library//include->String.replacing('$',loc))
      endIf
    else
      cmd += '' -I "$/include"'' (loc)
    endIf

    if (library.contains("library"))
      if (library//library.count)
        cmd += '' -L "$"'' (library//library->String.replacing('$',loc))
      endIf
    else
      cmd += '' -L "$/lib"'' (loc)
    endIf
  endForEach

  cmd += " -o .rogo/Build " + config//link

  println cmd
  if (0 != System.run(cmd)) System.exit( 1 )
endIf

System.exit( System.run(''.rogo/Build $'' (System.command_line_arguments.join(" "))) )

routine require_command_line
  if (System.environment["IDE"])
    throw Error( "$:$: error:Run 'make $' from the command line to install necessary libraries."...
    ($sourceFilepath,$sourceLine,select{System.environment["TARGET"]||""}.to_lowercase) )
  endIf
endRoutine


routine save_cache
  config//cache.save( File(config//filepath->String) )
endRoutine

routine install_library_manager
  which (System.os)
    case "macOS"
      install_brew
    case "Linux"
      #install_apt_file
  endWhich
endRoutine

routine install_brew
  if (config//cache//brew_installed) return
  if (0 == System.run("which brew >&2 /dev/null"))
    config//cache//brew_installed = true
    save_cache
    return
  endIf

  require_command_line
  if (Console.input( "\nHomebrew must be installed.  Install now (y/n)? " ).to_lowercase.begins_with('y'))
    local cmd = @|/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    println cmd
    if (0 == System.run(cmd))
      config//cache//brew_installed = true
      save_cache
      return
    endIf
    throw Error( "Failed to install Homebrew." )
  endIf

  throw Error( "Missing required dependency 'brew' (Homebrew)." )
endRoutine

#{
routine install_apt_file
  if (config//cache//apt_file_installed) return
  if (0 == System.run("which apt-file >&2 /dev/null"))
    config//cache//apt_file_installed = true
    save_cache
    return
  endIf

  require_command_line
  if (Console.input( "\napt-file must be installed.  Install now (y/n)? " ).to_lowercase.begins_with('y'))
    local cmd = @|sudo apt-get install apt-file
    println cmd
    if (0 == System.run(cmd))
      config//cache//apt_file_installed = true
      save_cache
      return
    endIf
    throw Error( "Failed to install apt-file." )
  endIf

  throw Error( "Missing required dependency 'apt-file'." )
endRoutine
}#

routine install_library( library_name:String, install_cmd:String )
  which (System.os)
    case "macOS"
      install_macos_library( library_name, install_cmd )
    case "Linux"
      install_ubuntu_library( library_name, install_cmd )
    others
      throw Error( ''Rogo does not know how to install a library for "$".'' (System.os) )
  endWhich
endRoutine

routine install_macos_library( library_name:String, install_cmd:String )
  if (config//cache//library_locations.contains(library_name)) return

  if (0 != System.run( ''brew list $ >&2 /dev/null'' (library_name) ) )
    # Install library
    require_command_line
    if (not Console.input( "\nLibrary '$' must be installed.  Install now (y/n)? "(library_name) ).to_lowercase.begins_with('y'))
      throw Error( "Missing required library '$'." (library_name) )
    endIf

    local cmd = "brew install $" (install_cmd)
    println cmd
    if (0 != System.run(cmd))
      throw Error( "Failed to install library '$'." (library_name) )
    endIf
  endIf

  # Save location in cache
  if (0 != System.run("brew list $ > .rogo/build.temp"(library_name))) throw Error( "Cannot locate library '$'." (library_name) )

  local reader = LineReader( File.reader( ".rogo/build.temp" ) )
  forEach (line in reader)
    if (line.contains("/include/"))
      reader.close
      File.delete( ".rogo/build.temp" )
      local location = line.before_first( "/include/" )
      config//cache.ensure_table( "library_locations" )[ library_name ] = location
      save_cache
      return
    endIf
  endForEach

  throw Error( "Library not installed: '$'." (library_name) )

endRoutine


routine install_ubuntu_library( library_name:String, install_cmd:String )
  if (config//cache//library_locations.contains(library_name)) return

  local cmd = ''sudo dpkg -L $ >&2 /dev/null'' (library_name)
  println "Checking for library $..." (library_name)
  println cmd
  if (0 != System.run(cmd))
    #{
    # Install library
    require_command_line
    if (not Console.input( "\nLibrary '$' must be installed.  Install now (y/n)? "(library_name) ).to_lowercase.begins_with('y'))
      throw Error( "Missing required library '$'." (library_name) )
    endIf

    local cmd = "sudo apt-get install $" (install_cmd)
    println cmd
    if (0 != System.run(cmd))
      throw Error( "Failed to install library '$'." (library_name) )
    endIf
    }#
  endIf

  #{
  # Save location in cache
  if (0 != System.run("brew list $ > .build.temp"(library_name))) throw Error( "Cannot locate library '$'." (library_name) )

  local reader = LineReader( File.reader( ".build.temp" ) )
  forEach (line in reader)
    if (line.contains("/include/"))
      reader.close
      File.delete( ".build.temp" )
      local location = line.before_first( "/include/" )
      config//cache.ensure_table( "library_locations" )[ library_name ] = location
      save_cache
      return
    endIf
  endForEach
  }#

  throw Error( "Library not installed: '$'." (library_name) )

endRoutine

routine library_location( library_name:String )->String
  if (not config//cache//library_locations.contains(library_name))
    install_library( library_name, library_name )
  endIf
  return config//cache//library_locations[ library_name ]
endRoutine

routine scan_config( file:File )
  if (not file.exists) return

  forEach (line in LineReader(file))
    line = line.trimmed
    if (line.begins_with("#$"))
      local cmd = line.rightmost( -2 )

      local args = cmd.after_first( "=" ).trimmed
      cmd = cmd.before_first( "=" ).trimmed.to_lowercase

      which (cmd.before_first('('))
        case "config", "roguec"
          if (args.begins_with('"')) args = args.after_first('"').before_last('"')
          config[ cmd ] = args

        case "libraries"
          if (args.count)
            local parser = JSONParser( Scanner(args) )
            parser.consume_spaces
            while (parser.has_another)
              local name = parse_library_name( parser )
              local entry = @{ name:name }
              config.ensure_list( cmd ).add( entry )
              parser.consume_spaces
              if (parser.consume('('))
                parser.consume_spaces
                while (parser.has_another)
                  if (parser.consume(')')) escapeWhile
                  local key = parser.parse_identifier
                  parser.consume_spaces
                  if (parser.consume(':'))
                    parser.consume_spaces
                    local value = parse_library_name( parser )
                    entry[ key ] = value
                  endIf
                  parser.consume_spaces
                endWhile
              endIf
              parser.consume_spaces
            endWhile
          endIf

        others
          # Join into single space-separated string
          if (config.contains(cmd))
            config[ cmd ] = "$ $" (config[ cmd ],args)
          else
            config[ cmd ] = args
          endIf

          #{
        others
          forEach (arg in args.split(' '))
            arg = arg.trimmed
            config.ensure_list( cmd ).add( arg )
          endForEach
          }#
      endWhich
    endIf
  endForEach

endRoutine

routine parse_library_name( parser:JSONParser )->String
  if (parser.next_is('"')) return parser.parse_string

  local name = parser.parse_identifier
  while (parser.consume('-'))
    name += '-'
    name += parser.parse_identifier
  endWhile
  return name
endRoutine

