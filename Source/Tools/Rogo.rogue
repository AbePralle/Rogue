global config = @{ ROGUEC:"roguec", FILEPATH:".rogo_config" }

if (not File.exists("Build.rogue"))
  println "ERROR: Build.rogue does not exist."
  System.exit 1
endIf

if (File.is_newer_than("Build.rogue",".rogo/Build") or File.is_newer_than("BuildCore.rogue",".rogo/Build"))
  println "Recompiling build script..."

  scan_config( File("BuildCore.rogue") )
  scan_config( File("Build.rogue") )

  # Select ROGUEC(macOS) or ROGUEC(Linux) etc. based on the OS and copy to ROGUEC, etc.
  local os_arg = "($)" (System.os)
  forEach (key in config.keys)
    if (key.contains(os_arg))
      config[ key.before_first(os_arg) ] = config[ key ]
    endIf
  endForEach

  config//cache = JSON.load_table( File(config//FILEPATH->String) )

  #trace config.to_json(&formatted)

  local rogue_options = config//ROGUE_OPTIONS->String
  local cmd = "$ --target=C++,Console Build.rogue --main --output=.rogo/Build $" (config//ROGUEC,rogue_options)
  println cmd
  if (0 != System.run(cmd))
    println "ERROR compiling Build.rogue."
    System.exit 1
  endIf

  #{
  local compiler_invocation : String
  native @|#if defined(DEFAULT_CXX)
          |  $compiler_invocation = RogueString_create_from_utf8( DEFAULT_CXX );
          |#else
          |  $compiler_invocation = RogueString_create_from_utf8( "g++ -Wall -std=gnu++11 -fno-strict-aliasing -Wno-invalid-offsetof" );
          |#endif


  if (System.os == "macOS")
    install_brew
    install_library( "sox --with-libvorbis" )

    local cpp_options = ""
    if (config.contains("LIBRARIES"))
      forEach (library in config//LIBRARIES->String.split(" "))
        library = library.trimmed
        if (library.count)
          local folder = library_location( library )
          cpp_options += ''-I "$/include" -L "$/lib" '' (folder,folder)
        endIf
      endForEach
    endIf

    if (config.contains("CPP_OPTIONS")) cpp_options += config//CPP_OPTIONS->String + " "

    local png_folder = library_location( "libpng" )
    local jpeg_folder = library_location( "libjpeg" )
    local freetype_folder = library_location( "freetype" )
    cmd = ''$ .rogo/Build.cpp ''...
        ''-I "$/include" -L "$/lib" -lpng ''...
        ''-I "$/include" -L "$/lib" -ljpeg ''...
        ''-I "$/include/freetype2" -L "$/lib" -lfreetype ''...
        ''-o .rogo/Build ''...
        (compiler_invocation,png_folder,png_folder,jpeg_folder,jpeg_folder,freetype_folder,freetype_folder)
  else
    cmd = ''$ .rogo/Build.cpp -lpng -ljpeg -lfreetype ''...
        ''-I /usr/include/freetype2 ''...
        ''-o .rogo/Build ''...
        (compiler_invocation)
  endIf

  println cmd
  if (0 != System.run(cmd)) System.exit( 1 )
  }#
endIf

System.exit( System.run(''.rogo/Build $'' (System.command_line_arguments.join(" "))) )

routine require_command_line
  if (System.environment["IDE"])
    throw Error( "$:$: error:Run 'make $' from the command line to install necessary libraries."...
    ($sourceFilepath,$sourceLine,select{System.environment["TARGET"]||""}.to_lowercase) )
  endIf
endRoutine


routine save_cache
  config//cache.save( File(config//FILEPATH->String) )
endRoutine

routine install_brew
  if (config//cache//brew_installed) return
  if (0 == System.run("which brew >& /dev/null")) return

  require_command_line
  println "Installing brew"
  if (Console.input( "\nHomebrew must be installed.  Install now (y/n)? " ).to_lowercase.begins_with('y'))
    local cmd = @|/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    println cmd
    if (0 == System.run(cmd))
      config//cache//brew_installed = true
      save_cache
      return
    endIf
    throw Error( "Failed to install Homebrew." )
  endIf

  throw Error( "Missing required dependency 'brew' (Homebrew)." )
endRoutine


routine install_library( library_name:String )
  if (config//cache//library_locations.contains(library_name)) return
  if (0 == System.run( ''brew list $ >& /dev/null'' (library_name) ) ) return

  require_command_line
  if (not Console.input( "\nLibrary '$' must be installed.  Install now (y/n)? "(library_name) ).to_lowercase.begins_with('y'))
    throw Error( "Missing required library '$'." (library_name) )
  endIf

  local cmd = "brew install $" (library_name)
  println cmd
  if (0 != System.run(cmd)) throw Error( "Failed to install library '$'." (library_name) )
endRoutine


routine library_location( library_name:String )->String
  if (config//cache//library_locations.contains(library_name)) return
  install_library( library_name )

  if (0 != System.run("brew list $ > .build.temp"(library_name))) throw Error( "Cannot locate library '$'." (library_name) )

  local reader = LineReader( File.reader( ".build.temp" ) )
  forEach (line in reader)
    if (line.contains("/include/"))
      reader.close
      File.delete( ".build.temp" )
      local location = line.before_first( "/include/" )
      config//cache//library_locations[ library_name ] = location
      save_cache
      return location
    endIf
  endForEach

  throw Error( "Library not installed: '$'." (library_name) )

endRoutine

routine scan_config( file:File )
  if (not file.exists) return

  forEach (line in LineReader(file))
    line = line.trimmed
    if (line.begins_with("#$"))
      local cmd = line.rightmost( -2 )

      cmd = cmd.replacing( "$OS", System.os )

      local args = cmd.after_first( "=" ).trimmed
      cmd = cmd.before_first( "=" ).trimmed

      which (cmd.before_first('('))
        case "CONFIG", "ROGUEC"
          config[ cmd ] = args

          #config.ensure_list( cmd ).add( args )

        case "LIBRARIES"
          if (args.count)
            local parser = JSONParser( Scanner(args) )
            parser.consume_spaces
            while (parser.has_another)
              local name = parser.parse_identifier
              local entry = @{ name:name }
              config.ensure_list( "LIBRARIES" ).add( entry )
              parser.consume_spaces
              if (parser.consume('('))
                parser.consume_spaces
                while (parser.has_another)
                  if (parser.consume(')')) escapeWhile
                  local key = parser.parse_identifier
                  parser.consume_spaces
                  if (parser.consume(':'))
                    parser.consume_spaces
                    local value = parser.parse_string
                    entry.ensure_table("options").set( key, value )
                  endIf
                  parser.consume_spaces
                endWhile
              endIf
              parser.consume_spaces
            endWhile
          endIf

        others
          # Join into single space-separated string
          if (config.contains(cmd))
            config[ cmd ] = "$ $" (config[ cmd ],args)
          else
            config[ cmd ] = args
          endIf

          #{
        others
          forEach (arg in args.split(' '))
            arg = arg.trimmed
            config.ensure_list( cmd ).add( arg )
          endForEach
          }#
      endWhich
    endIf
  endForEach

endRoutine

