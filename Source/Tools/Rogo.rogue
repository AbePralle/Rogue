#$ ROGUEC         = roguec
#$ FILEPATH       = .rogo/Cache.json
#$ ROGUEC_OPTIONS = --whatever
#$ CPP            = g++ -Wall -std=gnu++11 -fno-strict-aliasing -Wno-invalid-offsetof
#$ CPPFLAGS       = -a -b -c
#$ LIBRARIES      = libalpha( header_path:"/path/to/include/" library_path:"/path/to/lib/" )
#$ LIBRARIES      = libbeta
#$ LINK           = -lalpha -lbeta

global config = @{ roguec:"roguec", filepath:".rogo/Cache.json" }
global new_automatic_paths = false

local compiler_invocation : String
native @|#if defined(DEFAULT_CXX)
        |  $compiler_invocation = RogueString_create_from_utf8( DEFAULT_CXX );
        |#else
        |  $compiler_invocation = RogueString_create_from_utf8( "g++ -Wall -std=gnu++11 -fno-strict-aliasing -Wno-invalid-offsetof" );
        |#endif
config//cpp = compiler_invocation

if (not File.exists("Build.rogue"))
  println "ERROR: Build.rogue does not exist."
  System.exit 1
endIf

if (File.is_newer_than("Build.rogue",".rogo/Build") or File.is_newer_than("BuildCore.rogue",".rogo/Build"))
  println "Recompiling build script..."

  scan_config( File("BuildCore.rogue") )
  scan_config( File("Build.rogue") )

  if (config.contains("cxx"))      config//cpp = config//cxx
  if (config.contains("cxxflags")) config//cppflags = config//cxxflags

  # Select ROGUEC(macOS) or ROGUEC(Linux) etc. based on the OS and copy to ROGUEC, etc.
  local os_arg = "($)" (System.os.to_lowercase)
  forEach (key in config.keys)
    if (key.contains(os_arg))
      config[ key.before_first(os_arg) ] = config[ key ]
    endIf
  endForEach

  config//cache = JSON.load_table( File(config//filepath->String) )

  #trace config.to_json(&formatted)

  local roguec_options = config//roguec_options->String
  local cmd = "$ --target=C++,Console,$ Build.rogue --debug --main --output=.rogo/Build $" (config//roguec,System.os,roguec_options)
  println cmd
  if (0 != System.run(cmd))
    println "ERROR compiling Build.rogue."
    System.exit 1
  endIf

  cmd = "$ $ .rogo/Build.cpp" (config//cpp,config//cppflags)

  local is_linux = (System.os == "Linux")

  install_library_manager
  forEach (library in config//libraries)
    install_library( library )

    if (not is_linux)
      # Linux generally doesn't need to specify -I include paths and -L library paths
      cmd += '' -I "$"'' (header_location(library))
      cmd += '' -L "$"'' (library_location(library))
    endIf
  endForEach

  #{
  if (new_automatic_paths)
    local st = "If any detected paths are incorrect - and for example include a subfolder they shouldn't, "
    st += "delete the .rogo folder and redo, specifying header and library filepaths as follows. The filepaths should exist relative to the base paths but will not be part of them. You can type 'brew list <library-name> | less' to see all the filepaths of the library. Patterns may be used. Example:"
    println st.word_wrapped(79)
    println
    println ''  #$ LIBRARIES = mylib( header:"mylib/*.h" library:"mylib/libmylib.a" )''
    println
    println "Note: you can type 'brew list <library-name> | less' to see all the filepaths"
    println "of a library."
  endIf
  }#

  cmd += " -o .rogo/Build " + config//link

  println cmd
  if (0 != System.run(cmd)) System.exit( 1 )
endIf

System.exit( System.run(''.rogo/Build $'' (System.command_line_arguments.mapped<<String>>( (arg)=>prep_arg(arg) ).join(" "))) )

routine prep_arg( arg:String )->String
  # Quotes and escapes string if necessary
  if (not (arg.contains(' ') or arg.contains('"') or arg.contains('\\'))) return arg
  local quoted = StringBuilder()
  quoted.print( '"' )
  forEach (ch in arg)
    which (ch)
      case '"':  quoted.print( "\\\"" )
      case '\\': quoted.print( "\\\\" )
      others:    quoted.print( ch )
    endWhich
  endForEach
  quoted.print( '"' )
  return quoted
endRoutine

routine require_command_line
  if (System.environment["IDE"])
    throw Error( "$:$: error:Run 'make $' from the command line to install necessary libraries."...
    ($sourceFilepath,$sourceLine,select{System.environment["TARGET"]||""}.to_lowercase) )
  endIf
endRoutine


routine save_cache
  config//cache.save( File(config//filepath->String), &formatted )
endRoutine

routine install_library_manager
  which (System.os)
    case "macOS"
      install_brew
    case "Linux"
      #install_apt_file
  endWhich
endRoutine

routine install_brew
  if (config//cache//brew_installed) return
  if (0 == System.run("which brew > /dev/null 2>&1"))
    config//cache//brew_installed = true
    save_cache
    return
  endIf

  require_command_line
  if (Console.input( "\nHomebrew must be installed.  Install now (y/n)? " ).to_lowercase.begins_with('y'))
    local cmd = @|/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    println cmd
    if (0 == System.run(cmd))
      config//cache//brew_installed = true
      save_cache
      return
    endIf
    throw Error( "Failed to install Homebrew." )
  endIf

  throw Error( "Missing required dependency 'brew' (Homebrew)." )
endRoutine

#{
routine install_apt_file
  if (config//cache//apt_file_installed) return
  if (0 == System.run("which apt-file > /dev/null 2>&1"))
    config//cache//apt_file_installed = true
    save_cache
    return
  endIf

  require_command_line
  if (Console.input( "\napt-file must be installed.  Install now (y/n)? " ).to_lowercase.begins_with('y'))
    local cmd = @|sudo apt-get install apt-file
    println cmd
    if (0 == System.run(cmd))
      config//cache//apt_file_installed = true
      save_cache
      return
    endIf
    throw Error( "Failed to install apt-file." )
  endIf

  throw Error( "Missing required dependency 'apt-file'." )
endRoutine
}#

routine install_library( library:Value )
  if (config//cache//installed_libraries.contains(library//name)) return

  which (System.os)
    case "macOS"
      install_macos_library( library )
    case "Linux"
      install_ubuntu_library( library )
    others
      throw Error( ''Rogo does not know how to install a library for "$".'' (System.os) )
  endWhich
endRoutine

routine install_macos_library( library:Value )
  local library_name = library//name->String

  local performed_install = false
  if (0 != System.run( ''brew list $ > /dev/null 2>&1'' (library_name) ) )
    # Install library
    require_command_line
    if (not Console.input( "\nLibrary '$' must be installed.  Install now (y/n)? "(library_name) ).to_lowercase.begins_with('y'))
      throw Error( "Missing required library '$'." (library_name) )
    endIf

    # Two install options:
    #   libname                 - install libname
    #   libname(install:"cmd")  - install cmd
    local install_cmd = library//name
    if (library.contains("install")) install_cmd = library//install

    local cmd = "brew install $" (install_cmd)
    println cmd
    if (0 != System.run(cmd))
      throw Error( "Failed to install library '$'." (library_name) )
    endIf

    performed_install = true
  endIf

  if (not performed_install)
    println "Finding $ library..." (library_name)
  endIf

  # Save location in cache
  if (0 != System.run("brew list $ > .rogo/build.temp"(library_name))) throw Error( "Cannot locate library '$'." (library_name) )

  new_automatic_paths = true

  local header_path, library_path : String
  if (library.contains("header"))   header_path = find_path( library, library//header )
  if (library.contains("library")) library_path = find_path( library, library//library )

  if (not header_path) header_path = find_path( library, "*.h" )
  if (header_path)
    println "  Header path:  $" (header_path)
  endIf

  if (not library_path) library_path = find_path( library, "*.a" )
  if (not library_path) library_path = find_path( library, "*.dylib" )
  if (not library_path) library_path = find_path( library, "*.so" )
  if (library_path)
    println "  Library path: $" (library_path)
    println
  endIf

  File.delete( ".rogo/build.temp" )

  if (library_path and header_path)
    config//cache.ensure_table("installed_libraries")[ library_name ] = true
    config//cache.ensure_table( "header_locations" )[ library_name ] = header_path
    config//cache.ensure_table( "library_locations" )[ library_name ] = library_path
    save_cache
    return
  endIf

  throw Error( "Library not installed: '$'." (library_name) )

endRoutine

routine find_path( library:Value, pattern:String )->String
  local original_pattern = pattern
  if (not pattern.begins_with('/')) pattern = "**/" + pattern
  local reader = LineReader( File(".rogo/build.temp") )
  forEach (line in reader)
    line = line.trimmed
    if (File.matches_wildcard_pattern(line,pattern))
      local path_len = 0
      while (not File._matches_wildcard_pattern(line,path_len,line.count-path_len,original_pattern,0,original_pattern.count))
        ++path_len
      endWhile
      reader.close
      return line.leftmost( path_len )
    endIf
  endForEach
  reader.close

  return null
endRoutine

routine install_ubuntu_library( library:Value )
  local library_name = library//name->String

  local cmd = ''sudo dpkg -L $ > /dev/null 2>&1'' (library_name)
  println "Checking for library $..." (library_name)
  println(cmd).flush
  if (0 != System.run(cmd))
    # Install library
    require_command_line
    if (not Console.input( "\nLibrary '$' must be installed.  Install now (y/n)? "(library_name) ).to_lowercase.begins_with('y'))
      throw Error( "Missing required library '$'." (library_name) )
    endIf

    # Two install options:
    #   libname                 - install libname
    #   libname(install:"cmd")  - install cmd
    local install_cmd = library//name
    if (library.contains("install")) install_cmd = library//install

    cmd = "sudo apt-get install $" (install_cmd)
    println cmd
    if (0 != System.run(cmd))
      throw Error( "Failed to install library '$'." (library_name) )
    endIf
  endIf

  config//cache.ensure_table("installed_libraries")[ library_name ] = true
  save_cache

endRoutine

routine library_location( library:Value )->String
  if (not config//cache//installed_libraries.contains(library//name))
    install_library( library )
  endIf
  return config//cache//library_locations[ library//name ]
endRoutine

routine header_location( library:Value )->String
  if (not config//cache//installed_libraries.contains(library//name))
    install_library( library )
  endIf
  return config//cache//header_locations[ library//name ]
endRoutine

routine scan_config( file:File )
  if (not file.exists) return

  forEach (line in LineReader(file))
    line = line.trimmed
    if (line.begins_with("#$"))
      local cmd = line.rightmost( -2 )

      local args = cmd.after_first( "=" ).trimmed
      cmd = cmd.before_first( "=" ).trimmed.to_lowercase

      which (cmd.before_first('('))
        case "config", "roguec"
          if (args.begins_with('"')) args = args.after_first('"').before_last('"')
          config[ cmd ] = args

        case "libraries"
          if (args.count)
            local parser = JSONParser( Scanner(args) )
            parser.consume_spaces
            while (parser.has_another)
              local name = parse_filepath( parser )
              local entry = @{ name:name }
              config.ensure_list( cmd ).add( entry )
              parser.consume_spaces
              if (parser.consume('('))
                parser.consume_spaces
                while (parser.has_another)
                  if (parser.consume(')')) escapeWhile
                  local key = parser.parse_identifier
                  parser.consume_spaces
                  if (parser.consume(':'))
                    parser.consume_spaces
                    local value = parse_filepath( parser )
                    entry[ key ] = value
                  endIf
                  parser.consume_spaces
                endWhile
              endIf
              parser.consume_spaces
            endWhile
          endIf

        others
          # Join into single space-separated string
          if (config.contains(cmd))
            config[ cmd ] = "$ $" (config[ cmd ],args)
          else
            config[ cmd ] = args
          endIf

          #{
        others
          forEach (arg in args.split(' '))
            arg = arg.trimmed
            config.ensure_list( cmd ).add( arg )
          endForEach
          }#
      endWhich
    endIf
  endForEach

endRoutine

routine parse_filepath( parser:JSONParser )->String
  if (parser.next_is('"')) return parser.parse_string

  local buffer = StringBuilder()
  while (parser.has_another and not " \n()".contains(parser.peek)) buffer.print( parser.read )

  if (buffer.count == 0) buffer.print( parser.read )

  return buffer->String
endRoutine

