#$ ROGUEC       = roguec
#$ ROGUEC_ARGS  = --whatever
#$ CPP          = g++ -Wall -std=gnu++11 -fno-strict-aliasing -Wno-invalid-offsetof
#$ CPP_ARGS     = -a -b -c
#$ LIBRARIES    = libalpha( header:"name.h" library:"libname.a" )
#$ LIBRARIES    = libbeta
#$ LINK         = -lalpha -lbeta
#$ DEPENDENCIES = Library/Rogue/**/*.rogue

# Build.rogue source replacements - the libraries should also be declared in #$ LIBRARIES:
#   $HEADER(library-name)  -> path/to/library-name/include
#   $LIBRARY(library-name) -> path/to/library-name/lib

File.create_folder( ".rogo" )
global cache_filepath = ".rogo/Cache-$.json" (System.os)
global config = @{ roguec:"roguec", filepath:cache_filepath }
global cache  = JSON.load_table( File(cache_filepath) ) : Value
global is_cache_modified : Logical

local compiler_invocation : String
native @|#if defined(DEFAULT_CXX)
        |  $compiler_invocation = RogueString_create_from_utf8( DEFAULT_CXX );
        |#else
           which (System.os)
             case "Windows"
               compiler_invocation = "cl /EHsc /nologo"
             others
               compiler_invocation = "g++ -Wall -std=gnu++11 -fno-strict-aliasing -Wno-invalid-offsetof"
           endWhich
native @|#endif

config//cpp = compiler_invocation

local buildfiles = Files( "." )

local buildfile : String
forEach (arg in System.command_line_arguments)
  if (arg == "--build" or arg.begins_with("--build="))
    local cur_buildfile = arg.after_first( '=' )
    if (cur_buildfile.count == 0)
      Console.error.println ''ERROR: expected filename after "--build=".''
      System.exit 1
    endIf
    if (not File.exists(cur_buildfile))
      if (File.exists(cur_buildfile + ".rogue"))
        cur_buildfile += ".rogue"
      else
        Console.error.println ''ERROR: no such file "$".'' (cur_buildfile)
        System.exit 1
      endIf
    endIf
    System.command_line_arguments.remove( arg )
    buildfiles.add( cur_buildfile )
    if (buildfile is null) buildfile = cur_buildfile
    escapeForEach
  endIf
endForEach

if (not buildfile)
  if (File.exists("Build.rogue")) buildfiles.add( "Build.rogue" )
  if (File.exists("BuildCore.rogue")) buildfiles.add( "BuildCore.rogue" )
  if (File.exists("BuildLocal.rogue")) buildfiles.add( "BuildLocal.rogue" )
endIf

if (not buildfiles.count)
  local w = (Console.width - 1).or_smaller( 79 )
  loop (w) do Console.error.print( '=' )
  Console.error.println
  local mesg = "ROGO ERROR\n\n"
  mesg += "No standard build file exists (Build.rogue, BuildCore.rogue, BuildLocal.rogue) "
  mesg += "and no alternate specified with --build=<filename>."
  Console.error.println( mesg.word_wrapped(w) )
  loop (w) do Console.error.print( '=' )
  Console.error.println
  System.exit 1
endIf

local exe : String
if (buildfile is null)
  buildfile = buildfiles[0]
  exe = ".rogo$Build" (File.separator)
else
  exe = ".rogo$$" (File.separator,File.filename(buildfile).before_first('.'))
endIf
local base_name = exe   # e.g. Build
if (System.os == "Windows") exe += ".exe"
else                        exe += "-" + System.os  # e.g. Build-macOS

local needs_recompile = buildfiles.any_newer_than( exe )
block
  if (not needs_recompile)
    # Check other dependencies

    local dependencies = StringLookupList()
    scan_and_rewrite( File(forEach in buildfiles), dependencies, &scan_only )

    forEach (pattern in dependencies)
      local listing = File.listing( pattern, &files )
      forEach (dependency in listing)
        if (File.is_newer_than(dependency,exe))
          needs_recompile = true
          escapeBlock
        endIf
      endForEach
    endForEach
  endIf
endBlock

if (needs_recompile)
  println "Recompiling $..." (buildfile)

  # Scanning places copies in .rogo/
  scan_and_rewrite( File(forEach in buildfiles) )

  # Select ROGUEC(macOS) or ROGUEC(Linux) etc. based on the OS and copy to ROGUEC, etc.
  local os_arg = "($)" (System.os.to_lowercase)
  forEach (key in config.keys)
    if (key.contains(os_arg))
      config[ key.before_first(os_arg) ] = config[ key ]
    endIf
  endForEach

  local roguec = config//roguec
  if (not File.exists(roguec)) roguec = "roguec"  # use system default
  local roguec_args = config//roguec_args->String
  local cmd =  "$ --target=C++,Console,$" (roguec,System.os)
  cmd += " .rogo$$" (File.separator,File.filename(forEach in buildfiles))
  cmd += " --api --debug --main --output=$ $" (base_name,roguec_args)
  println cmd
  if (0 != System.run(cmd))
    Console.error.println "ERROR compiling $." (buildfile)
    System.exit 1
  endIf

  cmd = "$ $ $.cpp" (config//cpp,config//cpp_args,base_name)

  local is_windows = (System.os == "Windows")

  install_library_manager
  forEach (library in config//libraries)
    install_library( library )

    # Linux generally doesn't need to specify -I include paths and -L library paths
    # but occasionally it does (libfreetype)
    if (header_location(library))  cmd += '' -I "$"'' (header_location(library))
    if (library_location(library)) cmd += '' -L "$"'' (library_location(library))
  endForEach

  cmd += " $$ $" (?:{is_windows:"/Fe"||"-o "},exe,config//link)

  println cmd
  if (0 != System.run(cmd)) System.exit( 1 )
  File.delete( File.filename(exe).before_last(".exe") + ".obj" )
endIf

System.exit( System.run(''$ $'' (exe,System.command_line_arguments.mapped<<String>>( (arg)=>prep_arg(arg) ).join(" "))) )

routine prep_arg( arg:String )->String
  # Quotes and escapes string if necessary
  if (not (arg.contains(' ') or arg.contains('"') or arg.contains('\\'))) return arg
  local quoted = StringBuilder()
  quoted.print( '"' )
  forEach (ch in arg)
    which (ch)
      case '"':  quoted.print( "\\\"" )
      case '\\': quoted.print( "\\\\" )
      others:    quoted.print( ch )
    endWhich
  endForEach
  quoted.print( '"' )
  return quoted
endRoutine

routine require_command_line
  if (System.environment["IDE"])
    throw Error( "$:$: error:Run 'make $' from the command line to install necessary libraries."...
    ($sourceFilepath,$sourceLine,select{System.environment["TARGET"]||""}.to_lowercase) )
  endIf
endRoutine


routine save_cache
  is_cache_modified = false
  cache.save( File(cache_filepath), &formatted )
endRoutine

routine install_library_manager
  which (System.os)
    case "macOS"
      install_brew
    case "Linux"
      #install_apt_file
  endWhich
endRoutine

routine install_brew
  if (cache//brew_installed) return
  if (0 == System.run("which brew > /dev/null 2>&1"))
    cache//brew_installed = true
    save_cache
    return
  endIf

  require_command_line
  if (Console.input( "\nHomebrew must be installed.  Install now (y/n)? " ).to_lowercase.begins_with('y'))
    local cmd = @|/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    println cmd
    if (0 == System.run(cmd))
      cache//brew_installed = true
      save_cache
      return
    endIf
    throw Error( "Failed to install Homebrew." )
  endIf

  throw Error( "Missing required dependency 'brew' (Homebrew)." )
endRoutine

#{
routine install_apt_file
  if (cache//apt_file_installed) return
  if (0 == System.run("which apt-file > /dev/null 2>&1"))
    cache//apt_file_installed = true
    save_cache
    return
  endIf

  require_command_line
  if (Console.input( "\napt-file must be installed.  Install now (y/n)? " ).to_lowercase.begins_with('y'))
    local cmd = @|sudo apt-get install apt-file
    println cmd
    if (0 == System.run(cmd))
      cache//apt_file_installed = true
      save_cache
      return
    endIf
    throw Error( "Failed to install apt-file." )
  endIf

  throw Error( "Missing required dependency 'apt-file'." )
endRoutine
}#

routine install_library( library:Value )
  if (cache//installed_libraries.contains(library//name)) return

  which (System.os)
    case "macOS"
      install_macos_library( library )
    case "Linux"
      install_ubuntu_library( library )
    others
      throw Error( ''Rogo does not know how to install a library for "$".'' (System.os) )
  endWhich
endRoutine

routine install_macos_library( library:Value )
  local library_name = library//name->String

  local performed_install = false
  if (0 != System.run( ''brew list $ > /dev/null 2>&1'' (library_name) ) )
    # Install library
    require_command_line
    if (not Console.input( "\nLibrary '$' must be installed.  Install now (y/n)? "(library_name) ).to_lowercase.begins_with('y'))
      throw Error( "Missing required library '$'." (library_name) )
    endIf

    # Two install options:
    #   libname                 - install libname
    #   libname(install:"cmd")  - install cmd
    local install_cmd = library//name
    if (library.contains("install")) install_cmd = library//install

    local cmd = "brew install $" (install_cmd)
    println cmd
    if (0 != System.run(cmd))
      throw Error( "Failed to install library '$'." (library_name) )
    endIf

    performed_install = true
  endIf

  if (not performed_install)
    println "Finding $ library..." (library_name)
  endIf

  # Save location in cache
  if (0 != System.run("brew list $ > .rogo/Build.temp"(library_name))) throw Error( "Cannot locate library '$'." (library_name) )

  local header_path, library_path : String
  if (library.contains("header"))   header_path = find_path( library, library//header )
  if (library.contains("library")) library_path = find_path( library, library//library )

  if (not header_path) header_path = find_path( library, "*.h" )
  if (header_path)
    println "  Header path:  $" (header_path)
  endIf

  if (not library_path) library_path = find_path( library, "*.a" )
  if (not library_path) library_path = find_path( library, "*.dylib" )
  if (not library_path) library_path = find_path( library, "*.so" )
  if (library_path)
    println "  Library path: $" (library_path)
    println
  endIf

  File.delete( ".rogo/Build.temp" )

  if (library_path and header_path)
    cache.ensure_table("installed_libraries")[ library_name ] = true
    cache.ensure_table( "header_locations" )[ library_name ] = header_path
    cache.ensure_table( "library_locations" )[ library_name ] = library_path
    save_cache
    return
  endIf

  throw Error( "Library not installed: '$'." (library_name) )

endRoutine

routine find_path( library:Value, pattern:String )->String
  local original_pattern = pattern
  if (not pattern.begins_with('/')) pattern = "**/" + pattern
  local reader = LineReader( File(".rogo/Build.temp") )
  forEach (line in reader)
    line = line.trimmed
    if (File.matches_wildcard_pattern(line,pattern))
      local path_len = 0
      while (not File._matches_wildcard_pattern(line,path_len,line.count-path_len,original_pattern,0,original_pattern.count))
        ++path_len
      endWhile
      reader.close
      return line.leftmost( path_len )
    endIf
  endForEach
  reader.close

  return null
endRoutine

routine install_ubuntu_library( library:Value )
  local library_name = library//name->String

  local performed_install = true
  local cmd = ''dpkg -L $ > /dev/null 2>&1'' (library_name)
  println "Checking for library $..." (library_name)
  println(cmd).flush
  if (0 != System.run(cmd))
    # Install library
    require_command_line
    if (not Console.input( "\nLibrary '$' must be installed.  Install now (y/n)? "(library_name) ).to_lowercase.begins_with('y'))
      throw Error( "Missing required library '$'." (library_name) )
    endIf

    # Two install options:
    #   libname                 - install libname
    #   libname(install:"cmd")  - install cmd
    local install_cmd = library//name
    if (library.contains("install")) install_cmd = library//install

    cmd = "sudo apt-get install $" (install_cmd)
    println cmd
    if (0 != System.run(cmd))
      throw Error( "Failed to install library '$'." (library_name) )
    endIf

    performed_install = true
  endIf

  if (not performed_install)
    println "Finding $ library..." (library_name)
  endIf

  # Save location in cache
  if (0 != System.run("dpkg -L $ > .rogo/Build.temp"(library_name))) throw Error( "Cannot locate library '$'." (library_name) )

  local header_path, library_path : String
  if (library.contains("header"))   header_path = find_path( library, library//header )
  if (library.contains("library")) library_path = find_path( library, library//library )

  if (not header_path) header_path = find_path( library, "*.h" )
  if (header_path)
    println "  Header path:  $" (header_path)
  endIf

  if (not library_path) library_path = find_path( library, "*.a" )
  if (not library_path) library_path = find_path( library, "*.dylib" )
  if (not library_path) library_path = find_path( library, "*.so" )
  if (library_path)
    println "  Library path: $" (library_path)
    println
  endIf

  File.delete( ".rogo/Build.temp" )

  # Some Linux libraries don't have headers and lib files in the normal place (libjpeg-dev)
  cache.ensure_table("installed_libraries")[ library_name ] = true
  cache.ensure_table( "header_locations" )[ library_name ] = header_path
  cache.ensure_table( "library_locations" )[ library_name ] = library_path
  save_cache

endRoutine

routine library_location( library:Value )->String
  if (not cache//installed_libraries.contains(library//name))
    install_library( library )
  endIf

  local path = cache//library_locations[ library//name ]
  if (not path) return null
  if (File.exists(path)) return path

  println "Finding $ library..." (library//name)
  cache//installed_libraries.remove( library//name )
  save_cache
  return library_location( library )
endRoutine

routine header_location( library:Value )->String
  if (not cache//installed_libraries.contains(library//name))
    install_library( library )
  endIf

  local path = cache//header_locations[ library//name ]
  if (not path) return null
  if (File.exists(path)) return path

  println "Finding $ library..." (library//name)
  cache//installed_libraries.remove( library//name )
  save_cache
  return header_location( library )
endRoutine

routine scan_and_rewrite( file:File, dependencies=null:StringLookupList, &scan_only )
  if (not file.exists) return

  local writer : PrintWriter
  if (not scan_only) writer = PrintWriter( File(".rogo/$"(file.filename)).writer )
  forEach (original_line in LineReader(file))
    local line = original_line.trimmed
    if (line.begins_with("#$"))
      local cmd = line.rightmost( -2 )
      local args = cmd.after_first( "=" ).trimmed
      cmd = cmd.before_first( "=" ).trimmed.to_lowercase

      which (cmd.before_first('('))
        case "config", "roguec"
          if (args.begins_with('"')) args = args.after_first('"').before_last('"')
          config[ cmd ] = args

        case "libraries"
          if (args.count)
            local parser = JSONParser( Scanner(args) )
            parser.consume_spaces
            while (parser.has_another)
              local name = parse_filepath( parser )
              local entry = @{ name:name }
              config.ensure_list( cmd ).add( entry )
              parser.consume_spaces
              if (parser.consume('('))
                parser.consume_spaces
                while (parser.has_another)
                  if (parser.consume(')')) escapeWhile
                  local key = parser.parse_identifier
                  parser.consume_spaces
                  if (parser.consume(':'))
                    parser.consume_spaces
                    local value = parse_filepath( parser )
                    entry[ key ] = value
                  endIf
                  parser.consume_spaces
                endWhile
              endIf
              parser.consume_spaces
            endWhile
          endIf

        case "dependencies"
          if (dependencies)
            if (args.begins_with('"')) args = args.after_first('"').before_last('"')
            dependencies.add( args )
            is_cache_modified = true
          endIf

        others
          # Join into single space-separated string
          if (config.contains(cmd))
            config[ cmd ] = "$ $" (config[ cmd ],args)
          else
            config[ cmd ] = args
          endIf

      endWhich
    endIf

    if (not scan_only)
      line = original_line
      local dollar = line.locate( '$' )
      while (dollar.exists)
        if (line.contains_at("$HEADER(",dollar.value))
          local close_paren = line.locate( ')', dollar.value + 1 )
          if (close_paren.exists)
            local library_name = line.from(dollar.value+8,close_paren.value-1).trimmed
            local library : Value
            block
              forEach (lib in config//libraries)
                if (lib//name == library_name)
                  library = lib
                  escapeBlock
                endIf
              endForEach
              library = @{ name:library_name }
            endBlock
            line = "$$$" (line.before(dollar.value),header_location(library),line.after(close_paren.value))
          endIf
        elseIf (line.contains_at("$LIBRARY(",dollar.value))
          local close_paren = line.locate( ')', dollar.value + 1 )
          if (close_paren.exists)
            local library_name = line.from(dollar.value+9,close_paren.value-1).trimmed
            local library : Value
            block
              forEach (lib in config//libraries)
                if (lib//name == library_name)
                  library = lib
                  escapeBlock
                endIf
              endForEach
              library = @{ name:library_name }
            endBlock
            line = "$$$" (line.before(dollar.value),library_location(library),line.after(close_paren.value))
          endIf
        endIf
        dollar = line.locate( '$', dollar.value+1 )
      endWhile
      writer.println( line )
    endIf
  endForEach
  if (not scan_only) writer.close

endRoutine

routine parse_filepath( parser:JSONParser )->String
  if (parser.next_is('"')) return parser.parse_string

  local buffer = StringBuilder()
  while (parser.has_another and not " \n()".contains(parser.peek)) buffer.print( parser.read )

  if (buffer.count == 0) buffer.print( parser.read )

  return buffer->String
endRoutine
